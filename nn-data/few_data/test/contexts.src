\t1 <comment> \n \n \t1 try { \n \n \t2 hookRunner . runAfterExecutionHook ( queryStr , hookContext , executionError ) ; \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t8 accepted . remove ( source ) ; } } } \n \n \t4 } ; } } \n \n \t2 if ( ! availableSlot ) { \n \n \t3 <comment> \n \n <ect>
\t1 try { \n \n \t1 new LocalMapJoinProcFactory . LocalMapJoinProcessor ( ) . hasGroupBy ( mapJoinOp , \n \n \t2 context ) ; \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t5 List < SyncQueueItemVO > l = _queueMgr . dequeueFromAny ( getMsid ( ) , MAX_ONETIME_SCHEDULE_SIZE ) ; \n \n \t5 if ( l != null && l . size ( ) > 0 ) { \n \n \t6 for ( SyncQueueItemVO item : l ) { \n \n <ect>
\t7 <string_literal> , \n \n \t7 allowedDatetimeUpdateHour ) ; \n \n \t4 } else { \n \n \t5 allowedDatetimeUpdateHour = - 1 ; \n \n <ect>
\t3 try { \n \n \t3 fcall . sendResponse ( fb , msg , msgType , seqid ) ; \n \n \t3 return ; \n \n \t3 } catch ( Exception ex ) { \n \n <ect>
public boolean isRegisterFor ( Class < ? > cls ) { \n \n \t1 return cls . isAssignableFrom ( MPrinter . class ) ; } \n \n @ Override \n \n public boolean preUpdate ( BeanPersistRequest < ? > request ) { \n \n <ect>
\t6 <comment> \n \n \t6 <comment> \n \n \t6 <comment> \n \n \t6 if ( _log . shouldLog ( Log . WARN ) ) \n \n <ect>
\t2 if not definition_id in self . alerts_run_time : \n \n \t2 self . alerts_run_time [ definition_id ] = curr_time \n \n \t2 interval_seconds = definition [ 'interval' ] * <number_literal> \n \n \t2 if curr_time > self . alerts_run_time [ definition_id ] + ( interval_seconds * stale_interval_multiplier ) : \n \n <ect>
\t6 storeDef . getType ( ) + \n \n \t6 <string_literal> + \n \n \t6 ReadOnlyStorageConfiguration . TYPE_NAME ) ; \n \n \t4 continue ; } \n \n <ect>
\t6 while ( ! ( isStopping ( ) || isStopped ( ) ) && ( session == null || session . getSessionState ( ) . equals ( SessionState . CLOSED ) ) \n \n \t8 && attempt < configuration . getMaxReconnect ( ) ) { \n \n \t7 try { \n \n \t8 attempt ++ ; \n \n <ect>
\t2 LOG . info ( <string_literal> + result ) ; \n \n \t2 assertTrue ( <string_literal> + result , result . contains ( <string_literal> ) ) ; \n \n \t2 HashMap < String , String > propsAfter = new HashMap < String , String > ( ) ; \n \n \t2 IntrospectionSupport . getProperties ( runtimeConfigurationView , propsAfter , null ) ; \n \n <ect>
\t4 <comment> \n \n \t4 <comment> \n \n \t4 NSNotificationCenter . defaultCenter ( ) . postNotification ( \n \n \t6 ERMDDeleteButton . BUTTON_PERFORMED_DELETE_ACTION , obj , userInfo ) ; \n \n <ect>
\t1 @ Override \n \n \t1 public Sampler next ( ) { \n \n \t2 if ( StringUtils . isEmpty ( getLockName ( ) ) ) { \n \n <ect>
\t4 Trace . addReceiver ( receiver ) ; \n \n \t4 logger . info ( <string_literal> , receiver ) ; } \n \n \t2 } catch ( Exception e ) { \n \n \t3 <comment> \n \n <ect>
\t3 if ( isNotBlank ( mBID ) ) { \n \n \t4 LOGGER . debug ( <string_literal> { } \\ <string_literal> { } \\ <string_literal> , mBID , tagInfo ) ; \n \n \t4 TableMusicBrainzReleases . writeMBID ( mBID , tagInfo ) ; \n \n \t4 return mBID ; } \n \n <ect>
\t6 . startAt ( DateBuilder . futureDate ( <number_literal> + i , IntervalUnit . SECOND ) ) . withSchedule ( SimpleScheduleBuilder \n \n \t8 . repeatMinutelyForever ( eventRuntime . getConfig ( ) . getReloadMinutes ( ) ) ) \n \n \t6 . build ( ) ; \n \n \t4 this . scheduler . scheduleJob ( jobTrigger ) ; \n \n <ect>
\t3 result . ouch3 = ( TableNotFoundException ) e ; \n \n \t3 result . setOuch3IsSet ( true ) ; \n \n \t3 msg = result ; \n \n \t3 } else if ( e instanceof org . apache . thrift . transport . TTransportException ) { \n \n <ect>
\t3 <comment> \n \n \t3 <comment> \n \n \t3 if ( leftCount != rightCount && CompactionManager . isCompactionManager . get ( ) ) \n \n \t3 { \n \n <ect>
\t4 if ( accessControlMaxAge != null ) { \n \n \t5 response . setAccessControlMaxAge ( accessControlMaxAge ) ; } \n \n \t3 } else { \n \n \t4 <comment> \n \n <ect>
\t3 catch ( SecurityException e ) { \n \n \t4 fallbackToTmp = true ; } \n \n \t3 finally { \n \n \t4 if ( fallbackToTmp ) \n \n <ect>
\t4 } else { \n \n \t5 <comment> \n \n \t5 encoders . add ( ChannelHandlerFactories . newObjectEncoder ( protocol ) ) ; \n \n \t5 decoders . add ( ChannelHandlerFactories . newObjectDecoder ( protocol ) ) ; \n \n <ect>
\t2 List < UserSessionModel > sessions1 = getSessions ( session1 ) ; \n \n \t2 List < UserSessionModel > sessions2 = getSessions ( session2 ) ; \n \n \t2 Assert . assertEquals ( <number_literal> , sessions1 . size ( ) ) ; \n \n \t2 Assert . assertEquals ( <number_literal> , sessions2 . size ( ) ) ; \n \n <ect>
\t3 s_logger . error ( msg , e ) ; \n \n \t3 return new GetVncPortAnswer ( cmd , msg ) ; } } \n \n \t1 protected Answer execute ( SetupCommand cmd ) { \n \n <ect>
\t2 if ( ! hasAPoolFs ( ) ) { \n \n \t3 return nullIsTrueCallWrapper ( <string_literal> , type , target , \n \n \t5 clustername , fsid , nfsbaseid , managerid , fsid ) ; \n \n \t2 } else if ( hasPoolFs ( fsid ) ) { \n \n <ect>
\t1 @ Override \n \n \t1 public boolean add ( Setting setting ) { \n \n \t2 SimpleUri id = setting . getId ( ) ; \n \n \t2 if ( id == null ) { \n \n <ect>
\t2 return serviceToValidate . matches ( this . service ) ; } \n \n \t1 @ Override \n \n \t1 public ProxyGrantingTicket grantProxyGrantingTicket ( final String id , final Authentication authentication , final ExpirationPolicy expirationPolicy ) throws AbstractTicketException { \n \n \t2 if ( this . grantedTicketAlready ) { \n \n <ect>
\t4 remainingSpace -= spaceUsed ; } \n \n \t3 else if ( effectiveIndexInterval > maxIndexInterval ) \n \n \t3 { \n \n \t4 <comment> \n \n <ect>
\t4 logger . info ( <string_literal> , addr , getLinkInfo ( dbes , addr ) ) ; \n \n \t4 dev . setHasModemDBEntry ( true ) ; } \n \n \t2 } else { \n \n \t3 if ( m_driver . isModemDBComplete ( ) && ! addr . isX10 ( ) ) { \n \n <ect>
\t6 for ( int i = 0 ; i < aks . length ; i ++ ) { \n \n \t7 forceDestinationWakeupOnCompletion ( context , transaction , aks [ i ] . getDestination ( ) , aks [ i ] ) ; } \n \n \t6 transaction . setState ( Transaction . PREPARED_STATE ) ; \n \n \t6 registerMBean ( transaction ) ; \n \n <ect>
public void populateResource ( Resource resource , InputStream inputStream ) throws SystemException { \n \n \t1 try { \n \n \t1 Map < String , Object > responseMap = GSON . fromJson ( IOUtils . toString ( inputStream , <string_literal> ) , MAP_TYPE ) ; \n \n \t1 if ( responseMap == null ) { \n \n <ect>
\t2 setHtml ( EntityUtils . toString ( entity ( ) ) ) ; \n \n \t2 } else { \n \n \t2 setHtml ( EntityUtils . toString ( entity ( ) , receiveEncoding ( ) ) ) ; } } } \n \n <ect>
\t7 task . setVmCreateImageTaskState ( CreateImageState . complete ) ; \n \n \t5 } else \n \n \t6 continue ; \n \n \t4 } catch ( final Exception ex ) { \n \n <ect>
\t4 LOG . debug ( <string_literal> ) ; } \n \n \t3 try ( final PreparedStatement updateStatement = conn . prepareStatement ( <string_literal> ) ) { \n \n \t4 updateStatement . executeUpdate ( ) ; \n \n \t3 } catch ( SQLException e ) { \n \n <ect>
\t4 return null ; } \n \n \t2 } catch ( Exception e ) { \n \n \t3 LOG . warn ( <string_literal> + namespace + <string_literal> + kubernetes . getMasterUrl ( ) ) ; \n \n \t3 return null ; } \n \n <ect>
\t1 try { \n \n \t1 currentBinding . toOM ( eucaMsg , this . getNamespace ( ) ) ; \n \n \t1 } catch ( final RuntimeException e ) { \n \n \t1 LOG . error ( <string_literal> + operationName + <string_literal> + params ) ; \n \n <ect>
\t1 { \n \n \t2 switch ( type ) \n \n \t2 { \n \n \t2 case TOP_OF_MINUTE : \n \n <ect>
\t3 @ Override \n \n \t3 public void onTransaction ( Peer peer , Transaction tx ) { \n \n \t4 Result result = DefaultRiskAnalysis . FACTORY . create ( null , tx , NO_DEPS ) . analyze ( ) ; \n \n \t4 incrementCounter ( TOTAL_KEY ) ; \n \n <ect>
\t1 if ( null != w ) { \n \n \t2 try { \n \n \t2 w . close ( ) ; \n \n \t2 } catch ( IOException ioe ) { \n \n <ect>
\t6 privateNtwk = _ntwkSvc . createPrivateNetwork ( networkName , networkName , physicalNetworkIdFinal , broadcastUri , ipAddress , null , gateway , netmask , \n \n \t8 gatewayOwnerId , vpcId , isSourceNat , networkOfferingId ) ; \n \n \t5 } else { <comment> \n \n \t6 <comment> \n \n <ect>
\t1 { \n \n \t2 LOGGER . info ( <string_literal> ) ; \n \n \t2 checkedSleep ( timeout , unit ) ; \n \n \t2 store . put ( key , value ) ; \n \n <ect>
\t3 valBytes ) ; \n \n \t2 try { \n \n \t3 fileWriter . write ( null , kv ) ; \n \n \t2 } catch ( IOException e ) { \n \n <ect>
\t2 if ( ( new File ( userDataFilePath ) . exists ( ) ) ) { \n \n \t3 Script hardLink = new Script ( ! _inSystemVM , <string_literal> , _timeout , s_logger ) ; \n \n \t3 hardLink . add ( userDataFilePath ) ; \n \n \t3 hardLink . add ( tempDirName + openStackConfigDriveName + <string_literal> ) ; \n \n <ect>
\t2 executorService . shutdown ( ) ; \n \n \t2 LOG . info ( <string_literal> ) ; \n \n \t2 executorService . awaitTermination ( THREADPOOL_TERMINATION_TIMEOUT , TimeUnit . SECONDS ) ; \n \n \t2 pause ( ADDITIONAL_SLEEP_AFTER * <number_literal> ) ; \n \n <ect>
\t3 log . debug ( format ( <string_literal> , idx , convert ( idx ) ) ) ; \n \n \t2 idx = convert ( idx ) ; \n \n \t2 BPTreePage page = get ( idx , READ ) ; \n \n \t2 if ( logging ( ) ) \n \n <ect>
\t1 @ Override \n \n \t1 public void bindingChanged ( BindingProvider provider , String itemName ) { \n \n \t2 if ( context . getConfig ( ) . isValid ( ) ) { \n \n \t3 if ( provider instanceof AstroBindingProvider ) { \n \n <ect>
\t1 if ( is == null ) { \n \n \t2 <comment> \n \n \t2 if ( filesToRead . empty ( ) ) return false ; \n \n \t2 Path p = filesToRead . pop ( ) ; \n \n <ect>
\t3 return _default ; } \n \n \t2 try { \n \n \t3 return Integer . parseInt ( value ) ; \n \n \t2 } catch ( NumberFormatException nfe ) { \n \n <ect>
\t3 bshInterpreter . set ( <string_literal> , jmctx . getPreviousResult ( ) ) ; <comment> \n \n \t3 bshInterpreter . set ( <string_literal> , JMeterUtils . getJMeterProperties ( ) ) ; \n \n \t3 bshInterpreter . set ( <string_literal> , vars ) ; <comment> \n \n \t2 } catch ( JMeterException e ) { \n \n <ect>
\t2 waitForBridgeFormation ( 1 ) ; \n \n \t2 HashSet < NetworkBridge > bridgesStart = new HashSet < NetworkBridge > ( ) ; \n \n \t2 for ( NetworkConnector networkConnector : networkConnectors ) { \n \n \t3 bridgesStart . addAll ( networkConnector . activeBridges ( ) ) ; } \n \n <ect>
\t2 if ( SystemProperties . getBoolean ( USE_NATIVE_CLOCK_SYSTEM_PROPERTY , true ) && Native . isGettimeofdayAvailable ( ) ) { \n \n \t3 LOGGER . info ( <string_literal> ) ; \n \n \t3 return new NativeClock ( ) ; \n \n \t2 } else { \n \n <ect>
\t3 logger . error ( <string_literal> , e ) ; \n \n \t2 } catch ( IllegalAccessException e ) { \n \n \t3 logger . error ( <string_literal> , e ) ; \n \n \t2 } catch ( InvocationTargetException e ) { \n \n <ect>
\t2 Function . ReadFunction readFunction = Function . ReadFunction . getFunction ( topNConfig . getTopNFunction ( ) ) ; \n \n \t2 Function function = new Function ( readFunction , null ) ; \n \n \t2 conditionBuilder . topNFunction ( function ) ; \n \n \t1 } else { \n \n <ect>
\t1 private void handleError ( String msg ) { \n \n \t2 _collector . reportError ( new Exception ( <string_literal> + msg ) ) ; } \n \n \t1 @ Override \n \n \t1 public void activate ( ) { \n \n <ect>
\t1 private final Cipher encryptCipher ; \n \n \t1 private final Cipher decryptCipher ; \n \n \t1 private volatile boolean stop ; \n \n \t1 public UDPBroadcaster ( String config ) { \n \n <ect>
\t3 int adjustedLimit = query . hasLimit ( ) ? query . getLimit ( ) : Integer . MAX_VALUE - 1 ; \n \n \t3 if ( adjustedLimit < Integer . MAX_VALUE - 1 - offset ) adjustedLimit += offset ; \n \n \t3 else adjustedLimit = Integer . MAX_VALUE - 1 ; \n \n \t3 TopDocs docs = searcher . search ( q , adjustedLimit ) ; \n \n <ect>
\t4 <comment> \n \n \t4 final long t1 = System . currentTimeMillis ( ) ; \n \n \t4 ns2 . runBackgroundOperations ( ) ; <comment> \n \n \t4 final long t2 = System . currentTimeMillis ( ) ; \n \n <ect>
\t1 ConfigFilterType srcType = ConfigFilterType . OTHER ; \n \n \t1 try { \n \n \t1 srcType = ConfigFilterType . valueOf ( type . toUpperCase ( Locale . ENGLISH ) ) ; \n \n \t1 } catch ( IllegalArgumentException ex ) { \n \n <ect>
\t3 DataHelper . storeProps ( config , conf ) ; \n \n \t3 if ( _log . shouldInfo ( ) ) \n \n \t4 _log . info ( <string_literal> + conf ) ; \n \n \t2 } catch ( IOException ioe ) { \n \n <ect>
\t2 al . add ( any ) ; \n \n \t2 new Exclude ( al ) ; } \n \n \t1 @ Test ( expected = IllegalArgumentException . class ) \n \n \t1 public void testExcludeArrayListOfElementFails3 ( ) { \n \n <ect>
\t6 else if ( Options . v ( ) . verbose ( ) ) \n \n \t7 logger . debug ( <string_literal> + String . format ( <string_literal> , \n \n \t9 className , container . getDexName ( ) , container . getFilePath ( ) . getCanonicalPath ( ) ) ) ; } } \n \n \t3 } catch ( IOException e ) { \n \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \n \t4 try { \n \n \t5 c = new Connection ( host , port , key ) ; \n \n \t5 connected = true ; \n \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \n \t3 try { \n \n \t4 socket . close ( ) ; \n \n \t3 } catch ( IOException e ) { \n \n <ect>
\t5 throw new CloudRuntimeException ( <string_literal> + host . getName ( ) ) ; \n \n \t3 } catch ( Exception e ) { \n \n \t4 s_logger . warn ( <string_literal> + host + <string_literal> + dataStore , e ) ; } } \n \n \t2 if ( poolHosts . isEmpty ( ) ) { \n \n <ect>
\t2 if ( url . equals ( <string_literal> ) && certFileName == null ) { \n \n \t3 s_logger . error ( <string_literal> ) ; \n \n \t3 System . exit ( 1 ) ; } \n \n \t2 if ( secretKey == null ) { \n \n <ect>
\t2 command . add ( <string_literal> ) ; \n \n \t2 command . add ( <string_literal> ) ; \n \n \t2 result = command . execute ( ) ; \n \n \t2 if ( result != null ) { \n \n <ect>
\t5 logger . trace ( <string_literal> ) ; \n \n \t4 imConversation . sendMessage ( new SimpleMessage ( sysMsg . toString ( ) ) ) ; } \n \n \t3 catch ( Exception ex ) \n \n \t3 { \n \n <ect>
\t3 return false ; } \n \n \t2 final String clientId = context . getRequestParameter ( OAuth20Constants . CLIENT_ID ) ; \n \n \t2 final OAuthRegisteredService registeredService = getRegisteredServiceByClientId ( clientId ) ; \n \n \t2 if ( ! validator . checkServiceValid ( registeredService ) ) { \n \n <ect>
\t3 VersionNumber vn = new VersionNumber ( versionedName ) ; \n \n \t3 Assert . assertTrue ( t . equals ( vn . getAsTime ( ) ) ) ; \n \n \t3 <comment> \n \n \t3 Thread . sleep ( 1 ) ; } \n \n <ect>
\t5 boolean assignToVpcNtwk = network . getVpcId ( ) != null && ipVO . getVpcId ( ) != null && ipVO . getVpcId ( ) . longValue ( ) == network . getVpcId ( ) ; \n \n \t5 if ( assignToVpcNtwk ) { \n \n \t6 <comment> \n \n \t6 _networkModel . checkIpForService ( ipVO , Service . Lb , networkId ) ; \n \n <ect>
\t2 final Conditions conditions = this . samlObjectBuilder . newConditions ( issuedAt , service . getId ( ) , this . issueLength ) ; \n \n \t2 assertion . setConditions ( conditions ) ; \n \n \t2 LOGGER . debug ( <string_literal> , this . issuer , service . getId ( ) ) ; \n \n \t2 final Subject subject = this . samlObjectBuilder . newSubject ( principal . getId ( ) ) ; \n \n <ect>
\t7 break ; } } \n \n \t5 LOG . info ( <string_literal> + original . getQueueName ( ) + <string_literal> + index + <string_literal> + blockSize + <string_literal> ) ; \n \n \t5 connection . close ( ) ; } \n \n \t3 } catch ( Exception e ) { \n \n <ect>
<comment> \n \n \t1 private File getWorkingDirForUser ( final String username ) throws IOException { \n \n \t2 final File userDir = getOrCreateSvnUserDirectory ( username ) ; \n \n <ect>
\t2 if ( ! deployment . getRealm ( ) . equals ( account . getKeycloakSecurityContext ( ) . getRealm ( ) ) ) { \n \n \t3 log . debug ( <string_literal> ) ; \n \n \t3 return false ; } \n \n \t2 if ( account . checkActive ( ) ) { \n \n <ect>
<comment> \n \n void beanCacheRemove ( Object id ) { \n \n \t1 if ( beanCache != null ) { \n \n <ect>
\t3 LOGGER . debug ( <string_literal> , cause ) ; } \n \n \t2 if ( notifier != null ) { \n \n \t3 notifier . onFailure ( context , cause ) ; } \n \n \t2 if ( cause instanceof InterruptedException || cause instanceof InterruptedIOException ) { \n \n <ect>
\t2 <comment> \n \n \t2 <comment> \n \n \t2 <comment> \n \n \t2 <comment> \n \n <ect>
\t2 if ( grid . getTileSize ( ) == null ) { \n \n \t3 logger . error ( <string_literal> ) ; \n \n \t3 return ; } \n \n \t2 if ( grid . getGridDimensions ( ) == null ) { \n \n <ect>
<comment> \n \n \t1 public void setKeyObtentionIterations ( final String iter ) { \n \n \t2 if ( StringUtils . isNotBlank ( iter ) && NumberUtils . isCreatable ( iter ) ) { \n \n <ect>
\t2 String columnNoStr = parameter . substring ( pos1 + <number_literal> ) ; \n \n \t2 int columnNo = Integer . parseInt ( columnNoStr ) ; \n \n \t2 if ( PentahoSystem . debug ) { \n \n \t2 TemplateUtil . logger . debug ( <string_literal> + inputName ) ; <comment> \n \n <ect>
\t1 verifyImport ( <string_literal> + seqFileVal , checkCols ) ; } \n \n @ Test \n \n public void testClob1 ( ) { \n \n \t1 if ( ! supportsClob ( ) ) { \n \n <ect>
\t3 if ( this . jwksFile != null ) { \n \n \t4 LOGGER . debug ( <string_literal> , this . jwksFile ) ; \n \n \t4 final JsonWebKeySet jsonWebKeySet = buildJsonWebKeySet ( this . jwksFile ) ; \n \n \t4 if ( jsonWebKeySet == null || jsonWebKeySet . getJsonWebKeys ( ) . isEmpty ( ) ) { \n \n <ect>
\t1 @ Override \n \n \t1 protected void doCatch ( Throwable e ) throws Throwable { \n \n \t2 <comment> \n \n \t2 state = BillingWorkflowState . WORKFLOW_FAILED ; \n \n <ect>
\t3 if ( transport != null ) { \n \n \t4 try { \n \n \t5 transport . close ( ) ; \n \n \t4 } catch ( MessagingException e ) { \n \n <ect>
\t2 <comment> \n \n \t2 String cidrSubnet = NetUtils . getCidrSubNet ( cidrAddress , cidrSize ) ; \n \n \t2 String serverSubnet = NetUtils . getSubNet ( serverPrivateIP , serverPrivateNetmask ) ; \n \n \t2 if ( ! cidrSubnet . equals ( serverSubnet ) ) { \n \n <ect>
\t1 protected Log logger = LogFactory . getLog ( RejectAndDontRequeueRecoverer . class ) ; \n \n \t1 @ Override \n \n \t1 public void recover ( Message message , Throwable cause ) { \n \n <ect>
\t4 final String snapshotFile = snapshotDestPath + <string_literal> + snapshotName ; \n \n \t4 try { \n \n \t5 s_logger . debug ( <string_literal> + rbdSnapshot ) ; \n \n \t5 final File snapDir = new File ( snapshotDestPath ) ; \n \n <ect>
<comment> \n \n \t3 status = Curator . CURATE_SUCCESS ; \n \n \t3 String handle = item . getHandle ( ) ; \n \n <ect>
\t2 totalQueries += dbpojoHiveSavedQuery . size ( ) ; \n \n \t2 logger . info ( <string_literal> + username ) ; \n \n \t2 logger . info ( <string_literal> ) ; \n \n \t2 for ( i = 0 ; i < dbpojoHiveSavedQuery . size ( ) ; i ++ ) { \n \n <ect>
\t3 log . warn ( <string_literal> , indexPath ) ; \n \n \t3 return false ; } \n \n \t2 IndexInfoProvider infoProvider = infoProviders . get ( type ) ; \n \n \t2 if ( infoProvider == null ) { \n \n <ect>
\t2 } catch ( SmbException exc ) { \n \n \t3 throw new RuntimeIOException ( format ( <string_literal> , smbFile . getUncPath ( ) , exc . toString ( ) ) , exc ) ; } } \n \n \t1 @ Override \n \n \t1 public InputStream getInputStream ( ) throws RuntimeIOException { \n \n <ect>
\t7 QName typeName = part . getTypeName ( ) ; \n \n \t7 SchemaType type = typeName == null ? null : wsdlContext . getSchemaTypeLoader ( ) . findType ( typeName ) ; \n \n \t7 messageParts . add ( new MessageXmlPart ( children [ 0 ] , type , part , bindingOperation , isRequest ) ) ; } \n \n \t5 } else if ( children . length != 1 ) { \n \n <ect>
\t1 if ( ! m . matches ( ) ) { \n \n \t1 unmatchedRowsCount ++ ; \n \n \t2 if ( ! alreadyLoggedNoMatch ) { \n \n \t2 <comment> \n \n <ect>
\t2 this . log = log ; } \n \n \t1 @ Override \n \n \t1 public void corruptedLogFile ( long version , Throwable t ) \n \n \t1 { \n \n <ect>
\t2 if ( remoteSolrServerConfiguration . getSolrZkHost ( ) != null && remoteSolrServerConfiguration . getSolrZkHost ( ) . length ( ) > 0 ) { \n \n \t3 try { \n \n \t4 solrServer = initializeWithCloudSolrServer ( ) ; \n \n \t3 } catch ( Exception e ) { \n \n <ect>
\t1 PaginatedResult < ObjectEntity > result ; \n \n \t1 try { \n \n \t1 result = ObjectMetadataManagers . getInstance ( ) . listPaginated ( bucket , maxKeys , request . getPrefix ( ) , request . getDelimiter ( ) , request . getMarker ( ) ) ; \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t4 stream = new FileOutputStream ( destFile ) ; \n \n \t4 stream . write ( fileData ) ; \n \n \t4 LOGGER . info ( <string_literal> + needCode ) ; \n \n \t3 } catch ( Exception e ) { \n \n <ect>
<comment> \n \n \t1 protected void pruneUntilMinimal ( OWLClassExpression unsatClass ) throws OWLException { \n \n \t2 LOGGER . info ( <string_literal> , Integer . valueOf ( debuggingAxioms . size ( ) ) ) ; \n \n \t2 resetSatisfiabilityTestCounter ( ) ; \n \n <ect>
\t5 throw new StoreOperationFailureException ( String . format ( <string_literal> , \n \n <number_literal> def . getName ( ) ) ) ; } } \n \n \t2 } catch ( VoldemortException e ) { \n \n \t3 response . setError ( ProtoUtils . encodeError ( errorCodeMapper , e ) ) ; \n \n <ect>
\t1 s . setRange ( MetadataSchema . ReplicationSection . getRange ( ) ) ; \n \n \t1 for ( Entry < Key , Value > entry : s ) { \n \n \t2 log . info ( <string_literal> , entry . getKey ( ) . toStringNoTruncate ( ) , \n \n \t3 ProtobufUtil . toString ( Status . parseFrom ( entry . getValue ( ) . get ( ) ) ) ) ; } \n \n <ect>
\t3 result = new FileInputStream ( execResult . getCommand ( ) . getOutFile ( ) ) ; \n \n \t2 } else { \n \n \t3 <comment> \n \n \t3 if ( execResult . getStdout ( ) == null && execResult . getCommand ( ) . isUseStderrOnEmptyStdout ( ) ) { \n \n <ect>
\t3 for ( File child : files ) { \n \n \t4 recursivelyDeleteDirectory ( child ) ; } } \n \n \t2 boolean success = file . delete ( ) ; \n \n \t2 if ( ! success ) { \n \n <ect>
\t5 <comment> \n \n \t5 off += fragments [ i ] . getValid ( ) ; } \n \n \t4 if ( off != state . getCompleteSize ( ) ) { \n \n \t5 if ( _log . shouldLog ( Log . WARN ) ) \n \n <ect>
\t1 try { \n \n \t2 HiveQueryId parsedJob = parseAtsHiveJob ( ( JSONObject ) job ) ; \n \n \t2 parsedJobs . add ( parsedJob ) ; \n \n \t1 } catch ( Exception ex ) { \n \n <ect>
\t1 OpAttr [ ] inputs = new OpAttr [ inputsList . size ( ) ] ; \n \n \t1 for ( int i = 0 ; i < inputs . length ; i ++ ) { \n \n \t1 inputs [ i ] = dispatch ( inputsList . get ( i ) ) ; } \n \n <ect>
\t3 pstmt . executeBatch ( ) ; \n \n \t3 txn . commit ( ) ; \n \n \t2 } catch ( Exception ex ) { \n \n \t3 txn . rollback ( ) ; \n \n <ect>
\t3 if ( ! wakeup . isAwake ( ) ) { \n \n \t4 logger . debug ( <string_literal> , wakeup . getNode ( ) . getNodeId ( ) ) ; \n \n \t4 return ; } \n \n \t3 <comment> \n \n <ect>
\t2 syncWork . toRestartInUse . add ( sessionToDestroy ) ; } } \n \n \t1 e . toDestroy . clear ( ) ; \n \n \t1 <comment> \n \n \t1 for ( WmTezSession sessionToReturn : e . toReturn ) { \n \n <ect>
\t1 protected AuthenticationHandlerExecutionResult doAuthentication ( final Credential credential ) throws GeneralSecurityException { \n \n \t2 final YubiKeyCredential yubiKeyCredential = ( YubiKeyCredential ) credential ; \n \n \t2 final String otp = yubiKeyCredential . getToken ( ) ; \n \n \t2 if ( ! YubicoClient . isValidOTPFormat ( otp ) ) { \n \n <ect>
public void close ( ) throws IOException { \n \n \t1 LlapIoImpl . LOG . trace ( <string_literal> , \n \n \t2 isClosed , isInterrupted , pendingError . get ( ) , queue . size ( ) ) ; } \n \n <ect>
\t2 for ( CacheEventListener listener : listeners ) { \n \n \t3 try { \n \n \t4 listener . onFlush ( event ) ; \n \n \t3 } catch ( Exception e ) { \n \n <ect>
\t3 . EXEC_TIMEOUT_NAME + <string_literal> ; \n \n \t1 LOG . warn ( <string_literal> + cmd + msg + <string_literal> + res ) ; \n \n \t1 res . stderr += <string_literal> + msg ; } \n \n \t1 if ( res . exitcode != 0 ) { \n \n <ect>
\t2 try { \n \n \t3 topologyConf . remove ( ConfigExtension . TOPOLOGY_UPGRADE_FLAG ) ; \n \n \t3 submitTopology ( name , topologyCodeLocation , JStormUtils . to_json ( topologyConf ) , topology ) ; \n \n \t2 } catch ( AlreadyAliveException e ) { \n \n <ect>
\t1 <comment> \n \n \t1 public void sendCommand ( HttpClient client , Connection conn ) { \n \n \t2 if ( TestCaseEngine . _printUrl == true ) \n \n \t2 { \n \n <ect>
\t2 if ( position < 0 || position > maxColumn ) { \n \n \t3 logger . error ( <string_literal> , maxColumn ) ; \n \n \t3 return ; } \n \n \t2 if ( line < 0 || line > maxLine ) { \n \n <ect>
\t3 UserVmVO vm = _vmDao . findById ( vmId ) ; \n \n \t3 vmNames . add ( vm . getInstanceName ( ) ) ; } \n \n \t2 Answer answer = _agentMgr . easySend ( hostId , new GetVmStatsCommand ( vmNames , _hostDao . findById ( hostId ) . getGuid ( ) , hostName ) ) ; \n \n \t2 if ( answer == null || ! answer . getResult ( ) ) { \n \n <ect>
\t2 { \n \n \t3 reconnect ( publicAddress , InetAddress . getByName ( localAddressValue . value ) ) ; } \n \n \t2 catch ( UnknownHostException e ) \n \n \t2 { \n \n <ect>
\t4 if ( approval . getStatus ( ) == ApprovalStatus . APPROVED ) { \n \n \t5 validUserApprovedScopes . add ( approval . getScope ( ) ) ; \n \n \t5 approvedScopes . add ( approval . getScope ( ) ) ; } } } \n \n <ect>
\t1 public BindingReport ( ) { \n \n \t2 this ( <string_literal> ) ; } \n \n \t1 @ Override \n \n \t1 public void call ( Injector injector ) { \n \n <ect>
\t2 if ( null != entry . getKey ( ) ) { \n \n \t2 nullByte | = 1 < < ( b % <number_literal> ) ; \n \n \t2 } else if ( warnedOnceNullMapKey != null ) { \n \n \t2 if ( ! warnedOnceNullMapKey . value ) { \n \n <ect>
\t2 LOG . info ( <string_literal> + sanSnapshotId + <string_literal> ) ; \n \n \t2 storageResource = connectionManager . connectTarget ( iqn , lun ) ; \n \n \t2 storageResource . setId ( snapshotId ) ; \n \n \t2 } catch ( Exception connEx ) { \n \n <ect>
\t2 try { \n \n \t3 request . writeTo ( out ) ; \n \n \t3 server . send ( dest , out . buffer ( ) , 0 , out . position ( ) ) ; } \n \n \t2 catch ( Exception ex ) { \n \n <ect>
<comment> \n \n \t1 protected String getRegisteredServiceJwtProperty ( final RegisteredService service , final RegisteredServiceProperty . RegisteredServiceProperties propName ) { \n \n \t2 if ( service == null || ! service . getAccessStrategy ( ) . isServiceAccessAllowed ( ) ) { \n \n <ect>
\t4 return new FenceAnswer ( cmd , false , <string_literal> ) ; \n \n \t3 } else { \n \n \t4 return new FenceAnswer ( cmd ) ; } \n \n \t2 } catch ( InterruptedException e ) { \n \n <ect>
\t3 s_logger . info ( <string_literal> + responseCode ) ; \n \n \t3 if ( responseCode == <number_literal> ) { \n \n \t4 InputStream is = method . getResponseBodyAsStream ( ) ; \n \n \t4 Map < String , String > success = getSingleValueFromXML ( is , new String [ ] { <string_literal> } ) ; \n \n <ect>
static void speedTestHashLogger ( final int len ) { \n \n \t1 final HLogger logger = hashLoggerContext . getLogger ( loggerName ) ; \n \n \t1 long start = System . nanoTime ( ) ; \n \n \t1 for ( int i = 0 ; i < len ; i ++ ) { \n \n <ect>
\t2 File exportFile = File . createTempFile ( <string_literal> , <string_literal> ) ; \n \n \t2 Path exportPath = Paths . get ( URI . create ( <string_literal> + exportFile . getAbsolutePath ( ) ) ) ; \n \n \t2 client ( <string_literal> ) . index ( new IndexRequest ( ) . index ( <string_literal> ) . type ( <string_literal> ) . id ( <string_literal> ) . source ( <string_literal> , <string_literal> ) . refresh ( true ) ) . actionGet ( ) ; \n \n \t2 logger . info ( <string_literal> ) ; \n \n <ect>
\t3 pstmt . executeUpdate ( ) ; \n \n \t3 txn . commit ( ) ; \n \n \t2 } catch ( Exception e ) { \n \n \t3 txn . rollback ( ) ; \n \n <ect>
\t4 dbProp = new Properties ( ) ; } \n \n \t3 try { \n \n \t4 dbProp . load ( new FileInputStream ( propertiesFile ) ) ; \n \n \t3 } catch ( FileNotFoundException e ) { \n \n <ect>
\t1 @ Override \n \n \t1 public Boolean call ( ) { \n \n \t2 LOG . info ( <string_literal> ) ; \n \n \t2 for ( String databaseName : Iterables . filter ( Databases . getBootstrapper ( ) . listDatabases ( ) , DatabaseFilters . OLDVERSION ) ) { \n \n <ect>
\t5 return new UsernamePasswordAuthenticationToken ( username , password , authorities ) ; } \n \n \t4 LOGGER . warn ( <string_literal> , \n \n \t6 username , authorizer . getElements ( ) ) ; \n \n \t3 } else { \n \n <ect>
\t3 long time = watch . stop ( ) ; \n \n \t3 Logger log = LoggerFactory . getLogger ( testContext . getTestClass ( ) ) ; \n \n \t3 log . info ( <string_literal> ) ; \n \n \t3 log . info ( <string_literal> + testContext . getTestMethod ( ) . getName ( ) + <string_literal> + testContext . getTestClass ( ) . getName ( ) + <string_literal> ) ; \n \n <ect>
\t6 else if ( currentToken . equals ( endToken ) ) { \n \n \t7 return true ; } \n \n \t5 } catch ( Exception e ) { \n \n \t6 error . compareAndSet ( null , e ) ; \n \n <ect>
\t1 final boolean valid = Boolean . parseBoolean ( builder . evaluate ( packIt , <string_literal> ) . toString ( ) ) ; \n \n \t1 if ( ! valid ) { \n \n \t1 final String json = builder . addJSON ( ) . evaluate ( \n \n \t2 String . format ( <string_literal> , getLinterName ( ) ) , <string_literal> ) . toString ( ) ; \n \n <ect>
\t2 if ( ! initialized ) { \n \n \t3 ApplicationContext applicationContext = ( ApplicationContext ) ActionContext . getContext ( ) . getApplication ( ) . get ( \n \n \t5 WebApplicationContext . ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE ) ; \n \n \t3 if ( applicationContext == null ) { \n \n <ect>
public Double runningAverage ( ) { \n \n \t1 return ( Double ) storedValueForKey ( _Voting . RUNNING_AVERAGE_KEY ) ; } \n \n public void setRunningAverage ( Double value ) { \n \n <ect>
\t3 try { \n \n \t4 fi = new FileInputStream ( cfg ) ; \n \n \t4 props . load ( fi ) ; \n \n \t3 } catch ( FileNotFoundException fnfe ) { \n \n <ect>
\t3 return ( ( LabeledLink ) this ) . copy ( newId ) ; \n \n \t2 else if ( this instanceof CompactLink ) \n \n \t3 return ( ( CompactLink ) this ) . copy ( newId ) ; \n \n \t2 else { \n \n <ect>
\t6 getTimer ( taskDefinition ) . scheduleAtFixedRate ( schedulerTask , \n \n \t7 SchedulerConstants . SCHEDULER_DEFAULT_DELAY , repeatInterval ) ; \n \n \t5 } else { \n \n \t6 <comment> \n \n <ect>
\t3 success = false ; } \n \n \t2 <comment> \n \n \t2 final List < FirewallRuleVO > firewallIngressRulesToApply = _firewallDao . listByNetworkPurposeTrafficType ( networkId , Purpose . Firewall , FirewallRule . TrafficType . Ingress ) ; \n \n \t2 if ( ! _firewallMgr . applyFirewallRules ( firewallIngressRulesToApply , false , caller ) ) { \n \n <ect>
\t2 String blockedNode = blockNodeWithIndex ( <string_literal> , <string_literal> ) ; \n \n \t2 logger . info ( <string_literal> ) ; \n \n \t2 client . admin ( ) . cluster ( ) . prepareCreateSnapshot ( <string_literal> , <string_literal> ) \n \n \t3 . setWaitForCompletion ( false ) . setIncludeGlobalState ( false ) . setIndices ( <string_literal> ) . get ( ) ; \n \n <ect>
\t2 public Boolean call ( ) { \n \n \t3 try { \n \n \t3 new ClusterAllocator ( allocInfo , config ) . run ( ) ; \n \n \t3 } catch ( final Exception ex ) { \n \n <ect>
\t2 } catch ( I2PSessionException e ) { \n \n \t3 _log . error ( <string_literal> , e ) ; \n \n \t3 return writeString ( SESSION_ERROR , e . getMessage ( ) ) ; \n \n \t2 } catch ( SAMException e ) { \n \n <ect>
\t3 sProp = sProperty ; \n \n \t3 sProp . addCallback ( new Runnable ( ) { \n \n \t4 @ Override \n \n \t4 public void run ( ) { \n \n <ect>
\t5 if ( upnString != null ) { \n \n \t6 return upnString ; } } } \n \n \t2 } catch ( final CertificateParsingException e ) { \n \n \t3 LOGGER . error ( <string_literal> , e ) ; \n \n <ect>
\t3 throw new RuntimeException ( e ) ; } } \n \n \t1 public static void modifyDocElementAttribute ( Document doc , String tagName , String attributeName , String regex , String replacement ) { \n \n \t2 NodeList nodes = doc . getElementsByTagName ( tagName ) ; \n \n \t2 if ( nodes . getLength ( ) != 1 ) { \n \n <ect>
\t4 log . debug ( <string_literal> , source ) ; \n \n \t4 source . init ( ) ; \n \n \t4 sourceList . add ( source ) ; \n \n \t3 } else { \n \n <ect>
\t6 s_logger . debug ( <string_literal> + _gson . toJson ( deviceConfigSpecArray [ i ] ) ) ; \n \n \t5 i ++ ; \n \n \t4 } else { \n \n <ect>
\t3 return resumeFlow ( ) ; } \n \n \t2 if ( result . getValue ( ) . isPresent ( ) ) { \n \n \t3 return CollectionUtils . wrapSet ( validateEventIdForMatchingTransitionInContext ( id , context , \n \n \t4 buildEventAttributeMap ( authentication . getPrincipal ( ) , service , result . getValue ( ) . get ( ) ) ) ) ; } \n \n <ect>
\t2 if ( result . isEmpty ( ) ) { \n \n \t3 return Response . status ( Status . NOT_FOUND ) . build ( ) ; } \n \n \t2 return Response . ok ( result . get ( 0 ) ) . build ( ) ; } \n \n \t1 private void createProtectedResource ( Album album ) { \n \n <ect>