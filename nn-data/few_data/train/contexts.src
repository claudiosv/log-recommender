\t6 return toProcessorDeclarations ( processorClassNames , Collections . < String , IncrementalAnnotationProcessorType > emptyMap ( ) ) ; } \n \n \t4 } finally { \n \n \t5 zipFile . close ( ) ; } \n \n \t3 } catch ( Exception e ) { \n \n <ect>
\t1 public static void unregisterMbean ( ObjectName name ) { \n \n \t2 try { \n \n \t3 ManagementFactory . getPlatformMBeanServer ( ) . unregisterMBean ( name ) ; \n \n \t2 } catch ( Exception e ) { \n \n <ect>
\t1 if ( null != client ) { \n \n \t2 tservers = client . getActiveTservers ( tinfo , context . rpcCreds ( ) ) ; } \n \n \t1 } catch ( TException e ) { \n \n \t1 <comment> \n \n <ect>
\t2 val binaryClass = classFinder . findKotlinClass ( classId ) ? : return null \n \n \t2 val classHeader = binaryClass . classHeader \n \n \t2 val data = classHeader . data \n \n \t2 if ( data == null ) { \n \n <ect>
\t9 <string_literal> , jobId ) ; } } \n \n \t5 } , \n \n \t5 getMainThreadExecutor ( ) ) ; \n \n \t3 } else { \n \n <ect>
\t2 responseHandler . reset ( ) ; \n \n \t2 olingoApp . read ( edm , TEST_PEOPLE , null , null , responseHandler ) ; \n \n \t2 entity = responseHandler . await ( ) ; \n \n \t2 assertEquals ( <string_literal> , entity . getProperty ( <string_literal> ) . getValue ( ) . toString ( ) ) ; \n \n <ect>
\t5 @ Override public Object execute ( ) throws GridException { \n \n \t6 assert taskSes != null ; \n \n \t6 thread = Thread . currentThread ( ) ; \n \n <ect>
\t3 . filter ( Optional : : isPresent ) \n \n \t3 . map ( Optional : : get ) \n \n \t3 . map ( SamlRegisteredServiceServiceProviderMetadataFacade : : getMetadataResolver ) \n \n \t3 . collect ( Collectors . toList ( ) ) ; \n \n <ect>
\t1 JavaCompiler compiler = ToolProvider . getSystemJavaCompiler ( ) ; \n \n \t1 if ( null == compiler ) { \n \n \t1 LOG . error ( <string_literal> ) ; \n \n \t1 LOG . error ( <string_literal> ) ; \n \n <ect>
\t3 while ( ( consumerThread . isAlive ( ) || producerThread . isAlive ( ) ) && \n \n \t4 ( producerError . get ( ) == null && consumerError . get ( ) == null ) ) { \n \n \t4 Thread . sleep ( <number_literal> ) ; \n \n \t4 if ( System . currentTimeMillis ( ) >= deadline ) { \n \n <ect>
\t1 try { \n \n \t1 if ( connectionAvailable ( ) ) { \n \n \t2 write ( socket , metrics ) ; } \n \n \t1 } catch ( IOException e ) { \n \n <ect>
\t4 log . debug ( <string_literal> + mailErrorTemplate ) ; \n \n \t3 if ( mailErrorTemplate == null ) \n \n \t3 { \n \n <ect>
\t1 MemPageWriter pageWriter = pageWriters . get ( descriptor ) ; \n \n \t1 if ( pageWriter == null ) { \n \n \t1 throw new UnknownColumnException ( descriptor ) ; } \n \n \t1 List < DataPage > pages = new ArrayList < DataPage > ( pageWriter . getPages ( ) ) ; \n \n <ect>
\t2 Channel answer = channelFuture . getChannel ( ) ; \n \n \t2 <comment> \n \n \t2 allChannels . add ( answer ) ; \n \n <ect>
\t1 } catch ( ClassNotFoundException e2 ) { \n \n \t1 logger . error ( <string_literal> , e2 ) ; \n \n \t1 migrationresult . setError ( <string_literal> + e2 . getMessage ( ) ) ; \n \n \t1 } catch ( PropertyVetoException e ) { \n \n <ect>
\t3 for ( final String itemName : provider . getItemNames ( ) ) { \n \n \t4 if ( provider . isInBound ( itemName ) && credentialsMatch ( provider , itemName , oauthCredentials ) \n \n \t6 && thermostats . containsKey ( provider . getThermostatIdentifier ( itemName ) ) ) { \n \n \t5 final State newState = getState ( provider , thermostats , itemName ) ; \n \n <ect>
\t1 } catch ( ElementNotVisibleException e ) { \n \n \t1 SelendroidLogger . debug ( <string_literal> ) ; \n \n \t1 return new SelendroidResponse ( getSessionId ( request ) , StatusCode . ELEMENT_NOT_VISIBLE , e ) ; \n \n \t1 } catch ( StaleElementReferenceException e ) { \n \n <ect>
\t1 <comment> \n \n \t1 <comment> \n \n \t1 @ Test \n \n \t1 public void testVersionNumber ( ) throws Exception { \n \n <ect>
\t1 } catch ( IOException e ) { \n \n \t1 logger . debug ( <string_literal> , e ) ; \n \n \t1 throw new ServletException ( e ) ; \n \n \t1 } catch ( JSONException e ) { \n \n <ect>
\t2 ivScheduledExecutorService . shutdown ( ) ; \n \n \t2 try { \n \n \t3 if ( ivScheduledExecutorService . awaitTermination ( cvScheduledExecutorServiceShutdownTimeout , \n \n \t5 TimeUnit . SECONDS ) ) { \n \n <ect>
\t4 bodyElements . add ( getElement ( bodyObj , name ) ) ; } } \n \n \t2 for ( Object headerObj : headerParts ) { \n \n \t3 QName name = elementNameStrategy . findQNameForSoapActionOrType ( soapAction , headerObj . getClass ( ) ) ; \n \n \t3 if ( name == null ) { \n \n <ect>
\t1 @ Override \n \n \t1 public void allBindingsChanged ( BindingProvider provider ) { \n \n \t2 logger . trace ( <string_literal> ) ; \n \n \t2 if ( mKNXConnectionEstablished ) { \n \n <ect>
\t4 newVol . setPath ( destVolume . getPath ( ) + nfsStore . getPathSeparator ( ) + destVolumeUUID + <string_literal> ) ; \n \n \t4 newVol . setSize ( srcVolume . getSize ( ) ) ; \n \n \t4 return new CopyCmdAnswer ( newVol ) ; \n \n \t3 } catch ( final Exception e ) { \n \n <ect>
<comment> \n \n \t2 public void classDescriptionNeededForClass ( NSNotification n ) { \n \n \t3 Class c = ( Class ) n . object ( ) ; \n \n <ect>
\t2 root . ptrs . copy ( splitIdx + 1 , right . ptrs , 0 , root . params . MaxPtr - ( splitIdx + 1 ) ) ; \n \n \t2 right . count = root . maxRecords ( ) - ( splitIdx + 1 ) ; \n \n \t2 if ( logging ( ) ) \n \n \t2 { \n \n <ect>
<comment> \n \n \t1 @ Override \n \n \t1 public void visit ( final OpUnion opUnion ) { \n \n <ect>
\t1 public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { \n \n \t1 if ( isPomFile ( file . toFile ( ) ) ) { \n \n \t2 Model model = readMavenPomFile ( file . toFile ( ) ) ; \n \n \t2 Path location = file . getParent ( ) ; \n \n <ect>
\t1 @ ConditionalOnMissingBean ( name = <string_literal> ) \n \n \t1 @ Bean \n \n \t1 public AuthenticationEventExecutionPlanConfigurer ldapAuthenticationEventExecutionPlanConfigurer ( ) { \n \n \t2 return plan - > ldapAuthenticationHandlers ( ) . forEach ( handler - > { \n \n <ect>
\t1 public void testFind ( ) throws Exception { \n \n \t2 <comment> \n \n \t2 final com . braintreegateway . Subscription result = requestBody ( <string_literal> , null ) ; \n \n \t2 assertNotNull ( <string_literal> , result ) ; \n \n <ect>
\t1 return Transactions . find ( searchExample ) ; \n \n \t1 } catch ( NoSuchElementException e ) { \n \n \t1 throw new NoSuchEntityException ( bucketName ) ; \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t4 log . info ( <string_literal> ) ; \n \n \t4 MapRedUtil . setupStreamingDirsConfMulti ( pigContext , conf ) ; \n \n \t4 boolean disableCounter = conf . getBoolean ( <string_literal> , false ) ; \n \n \t4 if ( disableCounter ) { \n \n <ect>
\t4 ClassLoader resultClassLoader = result . getClassLoader ( ) ; \n \n \t4 LOG . info ( <string_literal> + name + <string_literal> + resultClassLoader + <string_literal> \n \n \t6 + Thread . currentThread ( ) . getContextClassLoader ( ) ) ; \n \n \t3 } else { \n \n <ect>
\t2 try { \n \n \t2 String groupDn = ldap . findGroupDn ( groupId ) ; \n \n \t2 groupDns . add ( groupDn ) ; \n \n \t2 } catch ( NamingException e ) { \n \n <ect>
\t3 item . setMd5 ( md5Checksum ) ; \n \n \t3 item . setStoredSize ( contentLength ) ; \n \n \t3 PersistContext . getSession ( ) . save ( item ) ; \n \n \t2 } catch ( OutOfStorageException e ) { \n \n <ect>
\t1 BucketLifecycleManagers . getInstance ( ) . deleteLifecycleRules ( bucketToDelete . getBucketUuid ( ) ) ; \n \n \t1 <comment> \n \n \t1 BucketTaggingManagers . getInstance ( ) . deleteBucketTagging ( bucketToDelete . getBucketUuid ( ) ) ; \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t4 criteriaSelectionLayout . fillSearchFieldInfo ( fieldInfo ) ; \n \n \t4 searchContainer . addComponent ( criteriaSelectionLayout ) ; \n \n \t3 } ) ; \n \n \t2 } catch ( Exception e ) { \n \n <ect>
\t2 _ipAddressDao . update ( ipId , ip ) ; \n \n \t2 try { \n \n \t3 boolean success = applyIpAssociations ( network , false ) ; \n \n \t3 if ( success ) { \n \n <ect>
\t4 default : \n \n \t5 logger . warn ( <string_literal> , commmandType ) ; \n \n \t5 break ; } \n \n \t2 } catch ( EpsonProjectorException e ) { \n \n <ect>
\t3 LOGGER . warn ( <string_literal> ) ; \n \n \t3 return false ; } \n \n \t2 final String grantType = context . getRequestParameter ( OAuth20Constants . GRANT_TYPE ) ; \n \n \t2 if ( ! validator . checkParameterExist ( request , OAuth20Constants . CLIENT_ID ) ) { \n \n <ect>
\t6 U . warn ( log , <string_literal> + \n \n \t7 <string_literal> + thiefId + <string_literal> + top . size ( ) + ' ] ' ) ; \n \n \t6 thief = null ; } \n \n <ect>
public String name ( ) { \n \n \t1 return ( String ) storedValueForKey ( _RentalTerms . NAME_KEY ) ; } \n \n public void setName ( String value ) { \n \n <ect>
\t4 if ( isTransactionExpired ( activeTransaction , now , transactionTimeoutMillis ) ) \n \n \t4 { \n \n \t5 if ( activeTransaction . markForTermination ( Status . Transaction . TransactionTimedOut ) ) \n \n \t5 { \n \n <ect>
\t3 } catch ( org . apache . thrift . transport . TTransportException e ) { \n \n \t3 _LOGGER . error ( <string_literal> , e ) ; \n \n \t3 fb . close ( ) ; \n \n \t3 } catch ( java . lang . Exception e ) { \n \n <ect>
\t1 protected static void resetStreamsAndSendOutput ( ) { \n \n \t2 System . setOut ( ORIGINAL_STDOUT ) ; \n \n \t2 System . setErr ( ORIGINAL_STDERR ) ; \n \n \t2 System . setIn ( ORIGINAL_STDIN ) ; \n \n <ect>
\t3 if ( ( buf = con . getNextReadBuf ( ) ) == null ) \n \n \t4 return ; \n \n \t3 EstablishState est = con . getEstablishState ( ) ; \n \n \t3 if ( _log . shouldLog ( Log . DEBUG ) ) \n \n <ect>
\t2 <comment> \n \n \t2 logger . debug ( <string_literal> ) ; \n \n \t2 logger . debug ( <string_literal> ) ; \n \n \t2 logger . debug ( <string_literal> ) ; \n \n <ect>
\t3 TunnelPool inbound = _clientInboundPools . get ( h ) ; \n \n \t3 TunnelPool outbound = _clientOutboundPools . get ( h ) ; \n \n \t3 if ( inbound != null || outbound != null ) { \n \n \t4 if ( _log . shouldLog ( Log . WARN ) ) \n \n <ect>
\t5 rawObject = requestView ; <comment> \n \n \t4 } else { \n \n \t5 listRequestView . add ( requestView ) ; } \n \n \t3 } catch ( Exception e ) { \n \n <ect>
\t1 public boolean apply ( Allocation allocInfo ) throws MetadataException { \n \n \t1 RunInstancesType request = allocInfo . getRequest ( ) ; \n \n \t1 String zoneName = request . getAvailabilityZone ( ) ; \n \n \t1 if ( Clusters . list ( ) . isEmpty ( ) ) { \n \n <ect>
\t4 for ( Object o : overallTooltipConfigMap . entrySet ( ) ) { \n \n \t5 Map . Entry entry = ( Map . Entry ) o ; \n \n \t5 addParameter ( ( String ) entry . getKey ( ) , entry . getValue ( ) ) ; } } \n \n \t3 else { \n \n <ect>
\t3 int curPage = overflowPage ; \n \n \t3 bf . freePage ( page ) ; \n \n \t3 freeContinuationPages ( curPage ) ; \n \n \t2 } catch ( IOException ioe ) { \n \n <ect>
\t2 if ( relocation != null ) { \n \n \t3 if ( groupId != null && artifactId != null && artifactId . equals ( relocation . getName ( ) ) && groupId . equals ( relocation . getGroup ( ) ) ) { \n \n \t4 LOGGER . error ( <string_literal> , \n \n \t6 mdBuilder . getComponentIdentifier ( ) , relocation ) ; \n \n <ect>
\t2 <comment> \n \n \t2 <comment> \n \n \t2 <comment> \n \n \t2 final URI urlMetadataNetwork = new URI ( GCE_HOST . get ( settings ) ) . resolve ( <string_literal> ) . resolve ( metadataPath ) ; \n \n <ect>
\t2 try { \n \n \t3 <comment> \n \n \t3 store . saveXWikiCollection ( refererStat , this . context , true ) ; \n \n \t2 } catch ( XWikiException e ) { \n \n <ect>
\t6 LOGGER . trace ( <string_literal> ) ; \n \n \t5 } catch ( IOException e ) { \n \n \t6 LOGGER . error ( <string_literal> , e ) ; \n \n \t5 } catch ( GSSException e ) { \n \n <ect>
\t3 for ( Map . Entry < String , Object > entry : amqpMessageProperties . getHeaders ( ) . entrySet ( ) ) { \n \n \t4 headers . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } \n \n \t2 catch ( Exception e ) { \n \n <ect>
\t5 } catch ( IllegalStateException e ) { \n \n \t6 logger . info ( <string_literal> , line , e ) ; } } \n \n \t4 continue ; } \n \n \t3 if ( commandId != null && ! ResponseParser . isCorrectCommandResponse ( line , commandId ) ) { \n \n <ect>
\t4 log . warn ( <string_literal> + jobId + <string_literal> \n \n \t6 + workflow . getId ( ) + <string_literal> ) ; } } \n \n \t2 catch ( InterruptedException e ) { \n \n \t3 queueCallable ( new CoordActionUpdateCommand ( workflow ) , LOCK_FAILURE_REQUEUE_INTERVAL ) ; \n \n <ect>
\t3 PortForwardingRule result = _rulesService . createPortForwardingRule ( this , virtualMachineId , privateIp , getOpenFirewall ( ) , isDisplay ( ) ) ; \n \n \t3 setEntityId ( result . getId ( ) ) ; \n \n \t3 setEntityUuid ( result . getUuid ( ) ) ; \n \n \t2 } catch ( NetworkRuleConflictException ex ) { \n \n <ect>
\t1 public CqlPreparedResult prepare_cql3_query ( ByteBuffer query , Compression compression ) \n \n \t1 throws InvalidRequestException , TException \n \n \t1 { \n \n <ect>
\t4 && bundle . getVersion ( ) . getMajor ( ) != version . getMajor ( ) ) { \n \n \t3 return ; } \n \n \t2 final Collection < String > ebinDirs = bundle . getEbinDirs ( context ) ; \n \n \t2 if ( ebinDirs == null ) { \n \n <ect>
\t2 <comment> \n \n \t2 <comment> \n \n \t2 executionResult = executionResult . addEvent ( ( int ) latency , eventType ) ; \n \n \t2 if ( isUnrecoverable ( originalException ) ) { \n \n <ect>
\t5 this . makeMetadataValueInfo ( titleField , title ) ; \n \n \t4 try { \n \n \t5 this . addUniqueMetadata ( context , info , item ) ; \n \n \t4 } catch ( SQLException e ) { \n \n <ect>
\t2 } catch ( Exception ex ) <comment> \n \n \t2 { \n \n \t3 log . warn ( <string_literal> , ex ) ; } \n \n <ect>
\t3 byte [ ] encryptedBytes = mac . doFinal ( ) ; \n \n \t3 String computedSignature = Base64 . encodeBase64String ( encryptedBytes ) ; \n \n \t3 boolean equalSig = ConstantTimeComparator . compareStrings ( signature , computedSignature ) ; \n \n \t3 if ( ! equalSig ) { \n \n <ect>
\t5 role . setRole ( roleName ) ; \n \n \t5 role . setDescription ( entry . getValue ( ) ) ; \n \n \t5 Context . getUserService ( ) . saveRole ( role ) ; } } } \n \n \t2 catch ( Exception e ) { \n \n <ect>
\t4 return parseWorkerMetricMeta ( parts ) ; \n \n \t3 } else { \n \n \t4 return parseTaskMetricMeta ( parts ) ; } \n \n \t2 } catch ( Exception ex ) { \n \n <ect>
\t7 logger . info ( <string_literal> , segment . getSegmentId ( ) , e ) ; \n \n \t7 continue ; } \n \n \t6 TrackingSegmentWorker trackingSegmentWorker = new TrackingSegmentWorker ( segment ) ; \n \n \t6 if ( threadFactory . activeThreads ( ) < maxThreadCount ) { \n \n <ect>
\t4 name = com . mongodb . hadoop . mapred . MongoInputFormat . class . getName ( ) ; \n \n \t3 } else { \n \n \t4 name = MongoInputFormat . class . getName ( ) ; } \n \n \t3 entries . add ( new Pair < String , String > ( JOB_INPUT_FORMAT , name ) ) ; \n \n <ect>
\t6 externalType = adaptor . externalTypeForJDBCType ( jdbcType ) ; } } } \n \n \t3 finally { \n \n \t4 typeInfoMethod . setAccessible ( oldAccessible ) ; } } \n \n \t2 catch ( Exception e ) { \n \n <ect>
\t2 while ( System . currentTimeMillis ( ) - startTick < = timeOutMs ) { \n \n \t3 morNetwork = hostMo . getNetworkMor ( networkName ) ; \n \n \t3 if ( morNetwork != null ) { \n \n \t4 break ; } \n \n <ect>
\t3 classLoader . addURL ( new File ( pluginFolder , plugin . getJar ( ) ) . toURI ( ) . toURL ( ) ) ; \n \n \t3 logger . debug ( <string_literal> + plugin . getClassName ( ) ) ; \n \n \t3 return ( MatchType ) Class . forName ( plugin . getTypeName ( ) , true , classLoader ) . getConstructor ( ) . newInstance ( ) ; \n \n \t2 } catch ( ClassNotFoundException ex ) { \n \n <ect>
\t1 public void initCombosForTestUriOptionsWork ( ) { \n \n \t2 initSharedCombos ( ) ; } \n \n \t1 public void testUriOptionsWork ( ) throws Exception { \n \n \t2 String uri = prefix + bindAddress + postfix ; \n \n <ect>
\t5 return resultSec * <number_literal> ; \n \n \t4 } else { \n \n \t5 throw new DocumentStoreException ( <string_literal> ) ; } \n \n \t3 } catch ( Exception ex ) { \n \n <ect>
\t2 WorkspaceInfo wkspace = catalog . getWorkspaceByName ( workspaceName ) ; \n \n \t2 if ( wkspace == null ) { \n \n \t3 throw new ResourceNotFoundException ( <string_literal> + workspaceName + <string_literal> ) ; } \n \n \t2 LOGGER . info ( <string_literal> + workspaceName ) ; \n \n <ect>
\t2 if ( printMessages ) \n \n \t3 logger . debug ( <string_literal> + g . getBody ( ) . getMethod ( ) + <string_literal> ) ; \n \n \t2 doFlowInsensitiveAnalysis ( ) ; \n \n \t2 if ( printMessages ) \n \n <ect>
\t2 Settings commonSettings = Settings . builder ( ) \n \n \t4 . put ( ThrottlingAllocationDecider . CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_INCOMING_RECOVERIES_SETTING . getKey ( ) , 1 ) \n \n \t4 . put ( ThrottlingAllocationDecider . CLUSTER_ROUTING_ALLOCATION_NODE_CONCURRENT_OUTGOING_RECOVERIES_SETTING . getKey ( ) , 1 ) \n \n \t4 . build ( ) ; \n \n <ect>
\t4 setChildrenSelection ( defaultChildKey ( ) != null ? \n \n \t6 ( NSArray ) NSKeyValueCodingAdditions . Utility . valueForKeyPath ( parentSelection ( ) , defaultChildKey ( ) + <string_literal> ) : NSArray . EmptyArray ) ; \n \n \t4 appendChildPopupStringWithParent ( returnString , new NSArray ( aParent ) ) ; } } \n \n \t2 returnString . append ( <string_literal> ) ; \n \n <ect>
\t2 try { \n \n \t3 List < SQLStatement > stmtList = SQLUtils . parseStatements ( sql , JdbcConstants . MYSQL ) ; \n \n \t3 return stmtList . get ( 0 ) ; \n \n \t2 } catch ( Exception ex ) { \n \n <ect>
\t2 LOG . debug ( <string_literal> + job . getJobId ( ) + <string_literal> + job . getId ( ) ) ; \n \n \t2 try { \n \n \t3 job = resourceManager . read ( job . getId ( ) ) ; \n \n \t2 } catch ( ItemNotFound itemNotFound ) { \n \n <ect>
\t2 <comment> \n \n \t2 EucalyptusActivityTasks . getInstance ( ) . deleteAutoScalingGroup ( asgName , true , \n \n \t3 lb . useSystemAccount ( ) ) ; \n \n \t2 } catch ( Exception ex ) { \n \n <ect>
\t1 PigJob job = null ; \n \n \t1 try { \n \n \t2 job = getResourceManager ( ) . read ( jobId ) ; \n \n \t1 } catch ( ItemNotFound itemNotFound ) { \n \n <ect>
<comment> \n \n \t1 protected Object newSessionBeanInstance ( ) throws NamingException , InvocationTargetException { \n \n <ect>
<comment> \n \n \t1 public void clearLists ( ) \n \n \t2 throws Exception \n \n \t1 { \n \n <ect>
\t4 if ( prevLevels [ i ] == this ) { \n \n \t5 prevLevels [ i ] = levels [ i ] ; \n \n \t4 } else if ( prevLevels [ i ] != null ) { \n \n \t5 <comment> \n \n <ect>
\t3 unbindThread ( oldCCL ) ; } \n \n \t2 <comment> \n \n \t2 if ( ok ) { \n \n <ect>
\t2 configFiles . forEach ( Unchecked . consumer ( f - > { \n \n \t3 LOGGER . debug ( <string_literal> , f ) ; \n \n \t3 if ( f . getName ( ) . toLowerCase ( ) . endsWith ( <string_literal> ) ) { \n \n \t4 final Map < String , Object > pp = loadYamlProperties ( new FileSystemResource ( f ) ) ; \n \n <ect>
\t1 @ Deactivate \n \n \t1 public void deactivate ( ) { \n \n \t2 ScheduledExecutorService ses = getScheduler ( ) ; \n \n \t2 if ( ses == null ) { \n \n <ect>
\t2 NetworkOffering oldNetworkOffering = _networkOfferingDao . findByIdIncludingRemoved ( oldNetworkOfferingId ) ; \n \n \t2 NetworkOffering newNetworkOffering = _networkOfferingDao . findById ( newNetworkOfferingId ) ; \n \n \t2 <comment> \n \n \t2 if ( areServicesSupportedByNetworkOffering ( oldNetworkOfferingId , Service . SecurityGroup ) != areServicesSupportedByNetworkOffering ( newNetworkOfferingId , Service . SecurityGroup ) ) { \n \n <ect>
\t3 s_logger . warn ( <string_literal> + resourceName , e ) ; \n \n \t2 } catch ( IllegalArgumentException e ) { \n \n \t3 s_logger . warn ( <string_literal> + resourceName , e ) ; \n \n \t2 } catch ( InvocationTargetException e ) { \n \n <ect>
\t2 assertThat ( response . getResponses ( ) [ 1 ] . getFailureMessage ( ) , nullValue ( ) ) ; \n \n \t2 assertThat ( response . getResponses ( ) [ 1 ] . getResponse ( ) . getHits ( ) . getHits ( ) . length , equalTo ( 1 ) ) ; \n \n \t2 assertThat ( response . getResponses ( ) [ <number_literal> ] . getFailureMessage ( ) , nullValue ( ) ) ; \n \n \t2 assertThat ( response . getResponses ( ) [ <number_literal> ] . getResponse ( ) . getHits ( ) . getHits ( ) . length , equalTo ( <number_literal> ) ) ; \n \n <ect>
\t3 try { \n \n \t4 LOG . debug ( <string_literal> , anAppContext , beanName ) ; \n \n \t4 return anAppContext . getBean ( beanName ) ; \n \n \t3 } catch ( NoSuchBeanDefinitionException e ) { \n \n <ect>
\t4 } catch ( final SecurityException e ) { \n \n \t5 LOGGER . warn ( e . getMessage ( ) , e ) ; \n \n \t4 } finally { \n \n \t5 if ( ! valid ) { \n \n <ect>
\t2 } ; \n \n \t2 GenericType < List < XmlJavaTypeAdapterAlien > > alienListType = new GenericType < List < XmlJavaTypeAdapterAlien > > ( ) { \n \n \t2 } ; \n \n \t2 List < XmlJavaTypeAdapterAlien > response = target . request ( ) . post ( Entity . entity ( entity , MediaType . APPLICATION_XML_TYPE ) , alienListType ) ; \n \n <ect>
\t4 return retry ( cmd , numRetries ) ; \n \n \t3 } else { \n \n \t4 return new Answer ( cmd , e ) ; } \n \n \t2 } catch ( final Exception e ) { \n \n <ect>
\t4 public void run ( ) { \n \n \t5 try { \n \n \t6 rebalanceKit . rebalance ( ) ; \n \n \t5 } catch ( Exception e ) { \n \n <ect>
\t2 } else { \n \n \t2 s = HibernateUtil . getSessionFactory ( ) . openSession ( ) ; } \n \n \t2 HibernateUtil . threadSession . set ( s ) ; } \n \n \t1 } catch ( HibernateException ex ) { \n \n <ect>
<comment> \n \n \t1 public void messageAvailable ( I2PSession session , int msgId , long size ) { \n \n <ect>
\t1 if ( isAsync ) return false ; <comment> \n \n \t1 try { \n \n \t1 session . close ( false ) ; \n \n \t1 } catch ( Exception ex ) { \n \n <ect>
\t5 withNewMetadata ( ) . withName ( FABRIC8_ARQUILLIAN ) . addToAnnotations ( createConfigMapAnnotations ( session , status ) ) . endMetadata ( ) . \n \n \t5 build ( ) ; \n \n \t3 return client . configMaps ( ) . inNamespace ( session . getNamespace ( ) ) . withName ( FABRIC8_ARQUILLIAN ) . createOrReplace ( configMap ) ; \n \n \t2 } catch ( Exception e ) { \n \n <ect>
\t1 double timeMs = ( System . nanoTime ( ) - startTime ) / <number_literal> . 0 ; \n \n \t1 LOG . debug ( <string_literal> + len + <string_literal> + timeMs + <string_literal> ) ; \n \n \t1 return result ; \n \n \t1 } catch ( HiveException ex ) { \n \n <ect>
\t5 final String exceptionMessage = <string_literal> ; \n \n \t5 resetSocket ( socket , exceptionMessage ) ; \n \n \t5 throw new MllpSocketException ( exceptionMessage , ioEx ) ; } \n \n \t3 } else { \n \n <ect>
\t3 closeConditionalWriter_result result = new closeConditionalWriter_result ( ) ; \n \n \t3 try { \n \n \t3 fcall . sendResponse ( fb , result , org . apache . thrift . protocol . TMessageType . REPLY , seqid ) ; \n \n \t3 } catch ( org . apache . thrift . transport . TTransportException e ) { \n \n <ect>
\t6 repository . login ( credentials ) , context ) ) ; \n \n \t4 jobs . add ( thread ) ; \n \n \t4 thread . start ( ) ; \n \n \t3 } catch ( Exception e ) { \n \n <ect>
\t4 throw new RuntimeException ( <string_literal> + ex ) ; } } \n \n \t2 if ( p != null ) { \n \n \t3 HashSet < String > ignoreUrls = SettingsManager . getIntance ( ) . getIgnoreUrls ( ) ; \n \n \t3 update ( 0 , cardsToDownload . size ( ) ) ; \n \n <ect>
<comment> \n \n \t1 @ Test \n \n \t1 public void testGetFeatureContent ( ) throws Exception { \n \n \t2 Document doc = getAsDOM ( <string_literal> ) ; \n \n <ect>
\t3 if ( apps . size ( ) == 1 ) { \n \n \t4 <comment> \n \n \t4 <comment> \n \n \t4 tmpAppId = apps . get ( 0 ) . getApplicationId ( ) ; \n \n <ect>
\t5 if ( _log . shouldLog ( Log . WARN ) ) \n \n \t6 _log . warn ( <string_literal> ) ; \n \n \t4 } else { \n \n \t5 if ( _log . shouldLog ( Log . WARN ) ) \n \n <ect>
\t2 <comment> \n \n \t2 <comment> \n \n \t2 <comment> \n \n \t2 <comment> \n \n <ect>
\t3 MessageProp msgProp = new MessageProp ( false ) ; \n \n \t3 final byte [ ] nameBytes = gssContext . unwrap ( token , 0 , token . length , msgProp ) ; \n \n \t3 return new String ( nameBytes , GSSTestConstants . CHAR_ENC ) ; \n \n \t2 } catch ( IOException e ) { \n \n <ect>
public NSTimestamp datePaid ( ) { \n \n \t1 return ( NSTimestamp ) storedValueForKey ( _Fee . DATE_PAID_KEY ) ; } \n \n public void setDatePaid ( NSTimestamp value ) { \n \n <ect>
\t2 if ( idpMetadata == null || nameId == null || nameId . isEmpty ( ) ) { \n \n \t3 try { \n \n \t4 resp . sendRedirect ( SAML2AuthManager . SAMLCloudStackRedirectionUrl . value ( ) ) ; \n \n \t3 } catch ( IOException ignored ) { \n \n <ect>
\t3 attribute . setFriendlyName ( e . getKey ( ) ) ; } \n \n \t2 addAttributeValuesToSaml2Attribute ( e . getKey ( ) , e . getValue ( ) , attribute . getAttributeValues ( ) ) ; \n \n \t2 if ( ! configuredNameFormats . isEmpty ( ) && configuredNameFormats . containsKey ( attribute . getName ( ) ) ) { \n \n \t3 final String nameFormat = configuredNameFormats . get ( attribute . getName ( ) ) ; \n \n <ect>
\t2 assertAcked ( admin ( ) . indices ( ) . prepareAliases ( ) \n \n \t4 . addAliasAction ( AliasActions . add ( ) . index ( <string_literal> ) . alias ( <string_literal> ) . routing ( <string_literal> ) ) ) ; \n \n \t2 logger . info ( <string_literal> ) ; \n \n \t2 client ( ) . prepareIndex ( <string_literal> , <string_literal> , <string_literal> ) . setSource ( <string_literal> , <string_literal> ) . setRefreshPolicy ( RefreshPolicy . IMMEDIATE ) . get ( ) ; \n \n <ect>
\t5 el . setProperty ( prop ) ; } \n \n \t4 reader . moveUp ( ) ; } \n \n \t3 return el ; \n \n \t2 } catch ( InstantiationException | IllegalAccessException e ) { \n \n <ect>
\t2 _context = ctx ; \n \n \t2 _log = ctx . logManager ( ) . getLog ( getClass ( ) ) ; \n \n \t2 _data = new ConcurrentHashMap < Hash , DatabaseEntry > ( <number_literal> ) ; \n \n \t2 if ( _log . shouldLog ( Log . INFO ) ) \n \n <ect>
\t4 sleep ( ) ; \n \n \t4 commitTxIfNecessary ( ) ; } \n \n \t2 } finally { \n \n \t3 if ( client . isDurable ( ) && client . isUnsubscribe ( ) ) { \n \n <ect>
\t2 ProtocolProviderService provider = \n \n \t3 ( ProtocolProviderService ) IcqSlickFixture . bc . getService ( icqServiceRef ) ; \n \n \t2 RegistrationFailedEventCollector regFailedEvtCollector = \n \n \t3 new RegistrationFailedEventCollector ( ) ; \n \n <ect>
<number_literal> true ) ; \n \n \t7 return \n \n \t8 new NameEnvironmentAnswer ( classFileReader , null ) ; } \n \n \t5 } catch ( IOException exc ) { \n \n <ect>
\t2 { \n \n \t3 logger . warn ( <string_literal> ) ; } \n \n \t2 catch ( Exception e ) \n \n \t2 { \n \n <ect>
public BigDecimal revenue ( ) { \n \n \t1 return ( BigDecimal ) storedValueForKey ( <string_literal> ) ; } \n \n public void setRevenue ( Double value ) { \n \n <ect>
\t3 if ( componentSeparator == hl7MessageBytes [ j ] ) { \n \n \t4 msh92start = j ; \n \n \t4 break ; } } \n \n \t2 if ( - 1 == msh92start ) { \n \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \n \t2 String nodeB = internalCluster ( ) . startNode ( ) ; \n \n \t2 ensureGreen ( ) ; \n \n \t2 <comment> \n \n <ect>
+ \t2 try { \n \n + \t2 MetricsReporting reporter = MetricsReporting . valueOf ( metricsReportingName . trim ( ) . toUpperCase ( ) ) ; \n \n + \t2 finalReporterList . add ( reporter ) ; \n \n + \t2 } catch ( IllegalArgumentException e ) { \n \n <ect>
\t1 return new Xid [ 0 ] ; } \n \n @ Override \n \n public void rollback ( Xid xid ) throws XAException { \n \n \t1 this . rollbackExecuted = true ; \n \n <ect>
\t3 methodInfo = defaultMethod ; } \n \n \t2 if ( methodInfo != null ) { \n \n \t3 LOG . trace ( <string_literal> , methodInfo , pojo ) ; \n \n \t3 return methodInfo . createMethodInvocation ( pojo , methodInfo . hasParameters ( ) , exchange ) ; } \n \n <ect>
\t1 for ( MediaType rangePattern : supportedMimeTypes ) { \t1 \n \n \t1 if ( isMimeTypeMatch ( mediaType , rangePattern ) ) { \n \n \t2 return true ; } } \n \n <ect>
private static Logger LOG = ProcessEngineLogger . TEST_LOGGER . getLogger ( ) ; \n \n public List < String > events = new ArrayList < String > ( ) ; \n \n public void notify ( DelegateExecution execution ) throws Exception { \n \n \t1 PvmExecutionImpl executionImpl = ( PvmExecutionImpl ) execution ; \n \n <ect>
\t3 try { \n \n \t4 Msg m = Msg . s_makeMessage ( <string_literal> ) ; \n \n \t4 writeMessage ( m ) ; \n \n \t3 } catch ( IOException e ) { \n \n <ect>
\t6 List < StoragePoolVO > storagePools = _storagePoolDao . listAll ( ) ; \n \n \t6 for ( StoragePoolVO pool : storagePools ) { \n \n \t7 try { \n \n \t8 List < VMTemplateStoragePoolVO > unusedTemplatesInPool = _tmpltMgr . getUnusedTemplatesInPool ( pool ) ; \n \n <ect>
\t2 assertThat ( Files . exists ( shardDirectory ( node_1 , index , 0 ) ) , equalTo ( true ) ) ; \n \n \t2 assertThat ( Files . exists ( shardDirectory ( node_2 , index , 0 ) ) , equalTo ( true ) ) ; \n \n \t2 logger . info ( <string_literal> ) ; \n \n \t2 String node_3 = internalCluster ( ) . startNode ( ) ; \n \n <ect>
<comment> \n \n \t1 private void loadIfStale ( PropertySource source ) { \n \n \t2 if ( source . isStale ( ) ) { \n \n <ect>
\t2 if ( assets . isEmpty ( ) ) { \n \n \t3 if ( kModule instanceof FileKieModule ) { \n \n \t4 log . warn ( <string_literal> + kBaseModel . getName ( ) + <string_literal> + kModule . getFile ( ) ) ; \n \n \t3 } else { \n \n <ect>
def main ( argv : Array [ String ] ) { \n \n \t1 val qCommandLine = new QCommandLine \n \n \t1 val shutdownHook = new Thread { \n \n \t1 override def run ( ) { \n \n <ect>
\t5 barrier . await ( <number_literal> , TimeUnit . SECONDS ) ; \n \n \t5 logger . debug ( <string_literal> ) ; \n \n \t4 } catch ( Exception e ) { \n \n \t5 fail ( <string_literal> , e ) ; } } \n \n <ect>
\t3 ValidationComplexInterfaceSuper . t = <string_literal> ; \n \n \t3 ValidationComplexInterfaceSub . u = <string_literal> ; \n \n \t3 Response response = client . target ( generateURL ( BASIC_DEPLOYMENT , <string_literal> , ValidationComplexInterfaceSub . class . getSimpleName ( ) ) ) \n \n \t5 . request ( ) . post ( Entity . entity ( <string_literal> , MediaType . TEXT_PLAIN_TYPE ) ) ; \n \n <ect>
\t3 deferred = _deferredSearches . size ( ) ; } \n \n \t2 if ( ! ok ) { \n \n \t3 <comment> \n \n \t3 if ( _log . shouldLog ( Log . WARN ) ) \n \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \n \t3 logger . debug ( <string_literal> , e . getMessage ( ) ) ; } \n \n \t2 catch ( NoSuchMethodError e ) \n \n \t2 { \n \n <ect>
\t5 null , String . format ( Messages . getString ( <string_literal> ) , file . getAbsolutePath ( ) ) , null , JOptionPane . INFORMATION_MESSAGE ) ; \n \n \t4 reload ( ( JComponent ) e . getSource ( ) ) ; } } } \n \n \t1 private void reload ( JComponent c ) { \n \n \t2 <comment> \n \n <ect>
\t3 Thread . sleep ( <number_literal> ) ; \n \n \t2 } catch ( InterruptedException e ) { \n \n \t3 throw new RuntimeException ( e ) ; } \n \n \t2 stat . getFile ( ) . delete ( ) ; \n \n <ect>
\t1 <comment> \n \n \t1 if ( register != defaultRegister && <string_literal> . indexOf ( register ) == - 1 ) { \n \n \t1 registers . put ( defaultRegister , new Register ( defaultRegister , type , text ) ) ; \n \n <ect>
\t4 callChains . add ( methodCallChainsIt . next ( ) ) ; \n \n \t4 startingMethods . add ( classMethod ) ; <comment> \n \n \t2 if ( callChains . size ( ) == 0 ) \n \n \t2 { \n \n <ect>
\t7 ) ; \n \n \t7 load ( encoding , file , pattern ) ; \n \n \t7 loaded = true ; } } } \n \n \t4 if ( ! loaded ) \n \n <ect>
\t4 try { \n \n \t5 <comment> \n \n \t5 sendMessages ( true , <string_literal> , 1 , 0 ) ; \n \n \t4 } catch ( Exception expected ) { \n \n <ect>
\t4 originalImage . setProperty ( StructrApp . key ( Image . class , <string_literal> ) , exifGpsDataJson . toString ( ) ) ; \n \n \t4 exifDataJson . putOnce ( <string_literal> , exifGpsDataJson ) ; } \n \n \t3 return exifDataJson ; \n \n \t2 } catch ( Exception ex ) { \n \n <ect>
<comment> \n \n public void savePartialPieces ( Peer peer , List < Request > partials ) \n \n { \n \n \t1 if ( _log . shouldLog ( Log . INFO ) ) \n \n <ect>
\t1 MediaType mediaType = MediaType . APPLICATION_JSON_TYPE . withCharset ( charset ) ; \n \n \t1 Entity < Cat > entity = Entity . entity ( \n \n \t3 new Cat ( <string_literal> , <string_literal> , <string_literal> , true , JsonBindingResource . CLIENT_TRANSIENT_VALUE ) , mediaType ) ; \n \n \t1 Cat json = target . request ( ) . post ( entity , Cat . class ) ; \n \n <ect>
\t1 protected void onBeforeProcess ( Exchange exchange , Processor processor , ProcessorDefinition < ? > definition , Breakpoint breakpoint ) { \n \n \t2 try { \n \n \t3 breakpoint . beforeProcess ( exchange , processor , definition ) ; \n \n \t2 } catch ( Throwable e ) { \n \n <ect>
\t2 int command = serialMessage . getMessagePayloadByte ( offset ) ; \n \n \t2 switch ( command ) { \n \n \t3 case THERMOSTAT_MODE_GET : \n \n \t3 case THERMOSTAT_MODE_SUPPORTED_GET : \n \n <ect>
\t3 broker1 . stop ( ) ; \n \n \t2 } else { \n \n \t3 LOG . info ( <string_literal> ) ; } \n \n \t2 if ( broker2 != null && broker2 . isStarted ( ) ) { \n \n <ect>
\t2 case GreaterThanOrEqualToThreshold : \n \n \t2 exceedsThreshold = ( metricValue >= threshold ) ; \n \n \t2 break ; \n \n \t2 default : \n \n <ect>
\t1 { \n \n \t3 LOGGER . debug ( <string_literal> + this . sqlList . size ( ) ) ; \n \n \t3 for ( int i = 0 ; i < this . sqlList . size ( ) ; i ++ ) { \n \n <ect>
\t1 TimeUnit . MILLISECONDS . sleep ( DEFAULT_TIMEOUT ) ; } \n \n \t1 File actualOutput = sinkOutputDirChildren [ 0 ] ; \n \n \t1 if ( ! Files . toString ( actualOutput , Charsets . UTF_8 ) . equals ( expectedOutput ) ) { \n \n \t1 LOGGER . error ( <string_literal> ) ; \n \n <ect>
\t3 throw new FailedLoginException ( <string_literal> + transformedCredential . getId ( ) ) ; } \n \n \t2 if ( ! value . containsKey ( couchbaseProperties . getPasswordAttribute ( ) ) ) { \n \n \t3 throw new FailedLoginException ( <string_literal> + transformedCredential . getId ( ) ) ; } \n \n \t2 if ( ! value . get ( couchbaseProperties . getPasswordAttribute ( ) ) . equals ( transformedCredential . getPassword ( ) ) ) { \n \n <ect>
\t2 final Object value = args [ index ] ; \n \n \t2 if ( value instanceof Script ) { \n \n \t3 return ( Script ) value ; } \n \n \t2 if ( value == null ) { \n \n <ect>
\t1 if ( deleteValueSpillHeaderStmt != null ) { \n \n \t2 try { \n \n \t2 deleteValueSpillHeaderStmt . close ( ) ; \n \n \t2 } catch ( SQLException ex ) { \n \n <ect>
\t2 Map < String , I_CmsPreference > prefs = OpenCms . getWorkplaceManager ( ) . getDefaultUserSettings ( ) . getPreferences ( ) ; \n \n \t2 if ( prefs . containsKey ( key ) ) { \n \n \t3 prefs . get ( key ) . setValue ( m_currentPreferences , value ) ; \n \n \t2 } else { \n \n <ect>
\t2 < p > Reload this page with open console , enter text and hit the log button . . . < / p > \n \n \t2 Message : \n \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \n \t2 < button ng - click = <string_literal> > log < / button > \n \n <ect>
\t4 ntCache = ( NodeTableCache ) ntx ; } \n \n \t3 ntx = ntx . wrapped ( ) ; } \n \n \t2 ntBase = ntx ; \n \n \t2 if ( ntInline == null ) \n \n <ect>
\t1 @ Override \n \n \t1 public void setHosts ( Collection < Host > hosts , int port ) { \n \n \t2 try { \n \n \t3 if ( session != null ) { \n \n <ect>
\t5 @ Override \n \n \t5 public void run ( ) { \n \n \t6 runWithContext ( ) ; } \n \n \t4 } ) ; } \n \n <ect>
\t3 ResultSet rs = pstmt . executeQuery ( ) ; \n \n \t3 while ( rs . next ( ) ) { \n \n \t4 result . add ( toEntityBean ( rs , false ) ) ; } \n \n \t2 } catch ( Exception e ) { \n \n <ect>
\t6 for ( TestElement testElement : testElements ) { \n \n \t7 if ( isAddableTestElement ( testElement ) ) { \n \n \t8 treeModel . addComponent ( testElement , newNode ) ; } } } \n \n \t4 } catch ( IllegalUserActionException e ) { \n \n <ect>
\t1 } ) ; \n \n \t1 } catch ( InterruptedException e ) { \n \n \t1 throw e ; \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t2 } finally { \n \n \t3 if ( ois != null ) { \n \n \t4 CloseUtil . closeQuietly ( ois ) ; } \n \n \t3 close ( ) ; \n \n <ect>
\t1 stack_version = params . version \n \n \t1 if params . retryAble : \n \n \t1 Logger . info ( <string_literal> ) \n \n \t1 else : \n \n <ect>
\t6 default : \n \n \t7 unreachableCode ( ) ; } \n \n \t4 } catch ( Exception e ) { \n \n \t5 <comment> \n \n <ect>
\t10 final Authentication authentication , \n \n \t10 final RegisteredService service , \n \n \t10 final Collection < CasEvent > events ) { \n \n \t2 final String agent = HttpRequestUtils . getHttpServletRequestUserAgent ( request ) ; \n \n <ect>
\t2 List < SplunkEvent > data = extractData ( job , false , callback ) ; \n \n \t2 this . lastSuccessfulReadTime = startTime ; \n \n \t2 return data ; } \n \n \t1 private List < SplunkEvent > nonBlockingSearch ( SplunkResultProcessor callback ) throws Exception { \n \n <ect>
\t4 } else { \n \n \t5 logger . error ( <string_literal> + responseMessage ) ; \n \n \t5 return false ; } \n \n \t3 } catch ( Exception e ) { \n \n <ect>
\t1 try { \n \n \t1 FileContext . getLocalFSFileContext ( ) . delete ( \n \n \t2 new Path ( targetWorkDir . getAbsolutePath ( ) ) , true ) ; \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t5 return ; } \n \n \t4 try { \n \n \t5 callable . call ( ) ; } \n \n \t4 catch ( Exception ex ) { \n \n <ect>
\t4 return null ; } \n \n \t3 s_logger . debug ( <string_literal> + vmName + <string_literal> , e ) ; \n \n \t3 return e . getMessage ( ) ; \n \n \t2 } catch ( final InterruptedException ie ) { \n \n <ect>
\t4 if ( ips != null ) { \n \n \t5 for ( byte [ ] ip : ips ) { \n \n \t6 if ( ! isValid ( ip ) ) { \n \n \t7 if ( _log . shouldWarn ( ) ) \n \n <ect>
\t6 + <string_literal> + ( System . currentTimeMillis ( ) - startTick ) ) ; } \n \n \t2 } catch ( HttpException e ) { \n \n \t3 s_logger . error ( <string_literal> + _serviceUrl + <string_literal> + method . getParameter ( <string_literal> ) ) ; \n \n \t2 } catch ( IOException e ) { \n \n <ect>
\t3 Rights rights = new Rights ( ) ; \n \n \t3 rights . setContent ( rightsString . toString ( ) ) ; \n \n \t3 rights . setType ( ContentType . TEXT ) ; \n \n \t3 entry . setRights ( rights ) ; \n \n <ect>
\t2 orchestration = stack_select . PACKAGE_SCOPE_PATCH \n \n \t1 stack_select_packages = stack_select . get_packages ( orchestration , service_name = <string_literal> , component_name = <string_literal> ) \n \n \t1 if stack_select_packages is None : \n \n \t1 raise Fail ( <string_literal> ) \n \n <ect>
\t3 else { \n \n \t4 if ( ! StringUtils . isBlank ( d . getInputCatalog ( ) ) ) \n \n \t5 log . warn ( <string_literal> ) ; \n \n \t4 if ( ! StringUtils . isBlank ( d . getOutputCatalog ( ) ) ) \n \n <ect>
<comment> \n \n <ect>
\t2 } catch ( FrameworkException fex ) { \n \n \t3 logger . warn ( <string_literal> , uuid , fex . getMessage ( ) ) ; } \n \n \t2 return null ; } \n \n \t1 public static AbstractFile getFirstFileByName ( final SecurityContext securityContext , final String name ) { \n \n <ect>
\t3 return Response . ok ( <string_literal> + jobId + <string_literal> + minionType ) . build ( ) ; \n \n \t2 } catch ( InsufficientPrivilegesException e ) { \n \n \t3 return Response . status ( Response . Status . UNAUTHORIZED ) . entity ( e . getMessage ( ) ) . build ( ) ; \n \n \t2 } catch ( IllegalArgumentException e ) { \n \n <ect>
\t1 public void syncDirs ( @ NotNull File from , @ NotNull File to , @ NotNull File snapshotsStorageFile ) { \n \n \t2 try { \n \n \t3 syncDirsImpl ( from , to , snapshotsStorageFile ) ; \n \n \t2 } catch ( IOException e ) { \n \n <ect>
\t3 return super . getLastModified ( req ) ; } \n \n \t2 return f . lastModified ( ) ; } \n \n \t1 @ Override \n \n \t1 protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { \n \n <ect>
\t3 logger . debug ( <string_literal> , message ) ; } \n \n \t2 try { \n \n \t3 todUse = getIntFromText ( TODAY_USE_REG_EXP , message ) ; \n \n \t2 } catch ( LightwaveRfMessageException le ) { \n \n <ect>
\t3 selector = <string_literal> ; } \n \n \t2 private void process ( ) throws JMSException { \n \n \t3 long end = System . currentTimeMillis ( ) + <number_literal> ; \n \n \t3 int transCount = 0 ; \n \n <ect>
\t3 result . success = o ; \n \n \t3 try { \n \n \t3 fcall . sendResponse ( fb , result , org . apache . thrift . protocol . TMessageType . REPLY , seqid ) ; \n \n \t3 } catch ( org . apache . thrift . transport . TTransportException e ) { \n \n <ect>
\t2 <comment> \n \n \t2 long now = System . currentTimeMillis ( ) ; \n \n \t2 if ( now < this . lastReload + RELOAD_FREQUENCY_MS ) return ; \n \n \t2 if ( watchedFile . lastModified ( ) == this . lastModified ) return ; \n \n <ect>
\t1 } catch ( Exception e ) { \n \n \t2 if ( PersistenceExceptions . isStaleUpdate ( e ) ) { \n \n \t2 logger . debug ( <string_literal> + natGatewayId + <string_literal> ) ; \n \n \t2 } else { \n \n <ect>
\t2 <comment> \n \n \t2 Thread . sleep ( <number_literal> ) ; \n \n \t2 mock . assertIsSatisfied ( ) ; \n \n \t2 <comment> \n \n <ect>
\t1 byte [ ] gcLockData ; \n \n \t1 do { \n \n \t1 gcLockData = ZooLock . getLockData ( zcache , path , null ) ; \n \n \t1 if ( null != gcLockData ) { \n \n <ect>
\t5 logger . debug ( <string_literal> + jndiName + <string_literal> ) ; } \n \n \t4 return tsr ; } \n \n \t3 catch ( NamingException ex ) { \n \n <ect>
\t2 <comment> \n \n \t2 this . mandatoryCuboidSet = ImmutableSet . < Long > builder ( ) . addAll ( cuboidsForMandatory ) . build ( ) ; \n \n \t2 this . selectionCuboidSet = ImmutableSet . < Long > builder ( ) . addAll ( cuboidsForSelection ) . build ( ) ; \n \n \t2 if ( selectionCuboidSet . isEmpty ( ) ) { \n \n <ect>
\t4 try { \n \n \t5 result = ( ( NodeWrapper ) getNode ( ) ) . evaluateCustomQuery ( customPermissionQuery , params ) ; \n \n \t4 } catch ( final Exception ex ) { \n \n \t5 logger . error ( <string_literal> , ex ) ; } \n \n <ect>
\t4 for ( UpdateThread ut : threads ) { \n \n \t5 if ( ut . failedMap . containsKey ( i ) ) { \n \n \t6 totalFailures += ut . failedMap . get ( i ) ; } } \n \n \t4 expectedVersion -= totalFailures ; \n \n <ect>
\t2 if ( result . equals ( <string_literal> ) ) { \n \n \t3 _context . waitForTaskProgressDone ( morTask ) ; \n \n \t3 return true ; \n \n \t2 } else { \n \n <ect>
\t2 dnld . setTmpltPath ( finalResourcePath ) ; \n \n \t2 File originalTemplate = new File ( td . getDownloadLocalPath ( ) ) ; \n \n \t2 String checkSum = computeCheckSum ( originalTemplate ) ; \n \n \t2 if ( checkSum == null ) { \n \n <ect>
private void displayStatus ( ) { \n \n \t1 displayUtilityTitle ( <string_literal> ) ; \n \n \t1 final ClientMessageBusImpl bus = ( ClientMessageBusImpl ) ErraiBus . get ( ) ; \n \n \t1 final boolean federatedApp = BusToolsCli . isRemoteCommunicationEnabled ( ) ; \n \n <ect>
\t2 if ( ! bindingsExist ( ) ) { \n \n \t3 logger . debug ( <string_literal> ) ; \n \n \t3 return ; } \n \n \t2 long networkTimeInMillis = getTime ( hostname ) ; \n \n <ect>
\t2 fileSystem . close ( ) ; \n \n \t2 return null ; } \n \n \t1 } ) ; \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t1 done . set ( true ) ; \n \n \t1 end = System . nanoTime ( ) ; \n \n \t1 t . join ( ) ; \n \n \t1 } catch ( InterruptedException e ) { \n \n <ect>
\t3 s_logger . trace ( <string_literal> + pfRule + <string_literal> ) ; \n \n \t3 pfRule . setState ( FirewallRule . State . Revoke ) ; } \n \n \t2 try { \n \n \t3 if ( ! _firewallMgr . applyRules ( pfRules , true , false ) ) { \n \n <ect>
\t2 def . setTaskClass ( LatchExecuteTask . class . getName ( ) ) ; \n \n \t2 synchronized ( TASK_TEST_METHOD_LOCK ) { \n \n \t3 Collection < TaskDefinition > tasks = service . getRegisteredTasks ( ) ; \n \n \t3 for ( TaskDefinition task : tasks ) { \n \n <ect>
\t2 logger . warn ( <string_literal> ) ; } \n \n \t1 void onUserDeletion ( long target , StreamListener [ ] listeners ) throws TwitterException { \n \n \t2 logger . warn ( <string_literal> ) ; } \n \n \t1 void onUserSuspension ( long target , StreamListener [ ] listeners ) throws TwitterException { \n \n <ect>
\t1 assert <string_literal> . equals ( cache1 . get ( <string_literal> ) ) ; \n \n \t1 tm ( 0 ) . resume ( t ) ; \n \n \t1 cache0 . put ( <string_literal> , <string_literal> ) ; \n \n \t1 try { \n \n <ect>
\t2 try { \n \n \t2 resultsQueue . put ( entries ) ; \n \n \t2 } catch ( InterruptedException e ) { \n \n \t2 if ( TabletServerBatchReaderIterator . this . queryThreadPool . isShutdown ( ) ) \n \n <ect>
\t4 GuiPackage . getInstance ( ) . getMainFrame ( ) . showStoppingMessage ( <string_literal> ) ; \n \n \t4 engine . stopTest ( ) ; } \n \n \t2 } else if ( e . getActionCommand ( ) . equals ( ActionNames . ACTION_SHUTDOWN ) ) { \n \n \t3 if ( engine != null ) { \n \n <ect>
\t2 request . setAttribute ( name , upload ) ; \n \n \t2 logger . debug ( <string_literal> , name , upload ) ; } \n \n \t1 protected ServletFileUpload createServletFileUpload ( MultipartConfig config ) { \n \n \t2 FileItemFactory factory = new DiskFileItemFactory ( DEFAULT_SIZE_THRESHOLD , config . getDirectory ( ) ) ; \n \n <ect>
\t6 } catch ( Exception e ) { \n \n \t7 logger . error ( <string_literal> + connection + <string_literal> + e . getMessage ( ) , e ) ; \n \n \t7 lb . markServerDown ( server ) ; } } } } } \n \n \t2 if ( connection == null ) { \n \n <ect>
\t3 String classFileName = ctxt . getClassFileName ( ) ; \n \n \t3 if ( classFileName != null ) { \n \n \t4 File classFile = new File ( classFileName ) ; \n \n <ect>
\t3 if ( ! isSameCidr ) { \n \n \t4 s_logger . warn ( <string_literal> + requestedIp + <string_literal> + network + <string_literal> ) ; \n \n \t4 return null ; \n \n \t3 } else if ( NetUtils . IsIpEqualToNetworkOrBroadCastIp ( requestedIp , cidr [ 0 ] , Integer . parseInt ( cidr [ 1 ] ) ) ) { \n \n <ect>
\t4 if ( br != null ) { \n \n \t5 try { \n \n \t6 br . close ( ) ; } \n \n \t5 catch ( Exception e ) { \n \n <ect>
\t2 if ( appender != null ) { \n \n \t3 appender . stop ( ) ; } } \n \n \t1 @ Override \n \n \t1 public void onWebSocketText ( String message ) { \n \n <ect>
\t4 tmpSnapshotScheduleVO . setAsyncJobId ( jobId ) ; \n \n \t4 _snapshotScheduleDao . update ( snapshotScheId , tmpSnapshotScheduleVO ) ; \n \n \t3 } catch ( final Exception e ) { \n \n \t4 <comment> \n \n <ect>
\t4 self . logger . debug ( <string_literal> % \n \n \t6 ( vm . name , public_ip . ipaddress . ipaddress ) ) \n \n \t2 except : \n \n \t3 if expectFail : \n \n <ect>
\t9 s_logger . warn ( <string_literal> + router . getInstanceName ( ) + <string_literal> + router . getHostId ( ) , e ) ; \n \n \t9 continue ; } \n \n \t8 if ( answer != null ) { \n \n \t9 if ( ! answer . getResult ( ) ) { \n \n <ect>
\t2 Partition p = null ; \n \n \t2 try { \n \n \t2 p = resolvePartition ( ci ) ; \n \n \t2 if ( p == null && ci . partName != null ) { \n \n <ect>
\t1 { \n \n \t2 super ( cfs , compacting , gcBefore ) ; \n \n \t2 this . ignoreOverlaps = ignoreOverlaps ; \n \n \t2 if ( ignoreOverlaps ) \n \n <ect>
\t1 private void createFoldersIfNeeded ( File parentFile ) { \n \n \t2 if ( parentFile == null ) { \n \n \t3 return ; } \n \n \t2 if ( ! parentFile . exists ( ) ) { \n \n <ect>
\t4 channel . dispose ( ) ; \n \n \t4 channel = existingNonBlockingChannel ; } \n \n \t3 else \n \n \t3 { \n \n <ect>
\t6 nestedPrefix = ( prefix + nestedPrefix ) . trim ( ) ; \n \n \t6 populateParameterConfigurationMap ( parameterMap , fieldType , nestedPrefix ) ; \n \n \t5 } else { \n \n \t6 if ( parameterMap . containsKey ( propertyName ) ) { \n \n <ect>
\t3 <comment> \n \n \t3 ret . put ( \n \n \t3 results . getString ( <string_literal> ) , \n \n \t3 results . getString ( <string_literal> ) ) ; } } \n \n <ect>
\t3 public void handleGraphObject ( SecurityContext securityContext , AbstractRelationship rel ) { \n \n \t4 rel . updateInIndex ( ) ; } \n \n \t3 @ Override \n \n \t3 public void handleThrowable ( SecurityContext securityContext , Throwable t , AbstractRelationship rel ) { \n \n <ect>
\t5 log . debug ( <string_literal> + socket . toString ( ) + <string_literal> + servers [ i ] ) ; } } } \n \n \t1 private void populateConsistentBuckets ( ) { \n \n <ect>
\t2 Promise . asPromise ( loadbalancer ) , persistedZones ) ; } \n \n \t1 @ Override \n \n \t1 protected void doCatch ( Throwable e ) throws Throwable { \n \n \t2 if ( e instanceof CancellationException ) { \n \n <ect>
\t2 } finally { \n \n \t3 <comment> \n \n \t3 results . sampleEnd ( ) ; } \n \n <ect>
\t2 } finally { \n \n \t3 IOUtils . closeQuietly ( is ) ; \n \n \t3 IOUtils . closeQuietly ( isr ) ; \n \n \t3 IOUtils . closeQuietly ( bufferedReader ) ; } \n \n <ect>
\t1 public void testAliases ( ) throws Exception { \n \n \t2 logger . info ( <string_literal> ) ; \n \n \t2 createIndex ( <string_literal> ) ; \n \n \t2 ensureGreen ( ) ; \n \n <ect>
\t1 tran . setRollbackOnly ( ) ; \n \n \t1 return Entities . uniqueResult ( new SnapshotInfo ( snapshotId ) ) ; \n \n \t1 } catch ( TransactionException | NoSuchElementException dbe ) { \n \n \t1 <comment> \n \n <ect>
\t3 log . warn ( <string_literal> + \n \n \t5 <string_literal> + \n \n \t5 <string_literal> , ERXWOForm . formName ( context , <string_literal> ) ) ; \n \n \t5 log . warn ( <string_literal> , context . page ( ) ) ; \n \n <ect>
\t3 result . ouch2 = ( AccumuloSecurityException ) e ; \n \n \t3 result . setOuch2IsSet ( true ) ; \n \n \t3 msg = result ; \n \n \t3 } else if ( e instanceof org . apache . thrift . transport . TTransportException ) { \n \n <ect>
\t3 if ( result != null ) { \n \n \t4 value . set ( result ) ; } \n \n \t2 } catch ( IllegalArgumentException e ) { \n \n \t3 <comment> \n \n <ect>
\t3 FilePermissions permissions = FileUtil . getFilePermissions ( file ) ; \n \n \t3 if ( permissions . isBrowsable ( ) ) { \n \n \t4 return file ; \n \n \t3 } else { \n \n <ect>
\t4 if ( key . startsWith ( <string_literal> ) ) { \n \n \t5 String name = key . substring ( <string_literal> . length ( ) ) ; \n \n \t5 aliasMap . put ( name , ( String ) entry . getValue ( ) ) ; } } \n \n \t2 } catch ( Throwable e ) { \n \n <ect>
\t2 mockBImOpSet . deliverMessage ( TEST_CONTACT_NAME_1 , messagesToSend [ 1 ] ) ; \n \n \t2 mockBImOpSet . deliverMessage ( TEST_CONTACT_NAME_2 , messagesToSend [ <number_literal> ] ) ; \n \n \t2 waitWrite ( <number_literal> ) ; \n \n \t2 TestMsgHistoryService . controlDate2 = new Date ( ) ; \n \n <ect>
\t3 if ( BindAxisEvent . class . isAssignableFrom ( registerBindClass ) ) { \n \n \t4 BindableButton positiveButton = getBindButton ( new SimpleUri ( info . positiveButton ( ) ) ) ; \n \n \t4 BindableButton negativeButton = getBindButton ( new SimpleUri ( info . negativeButton ( ) ) ) ; \n \n \t4 if ( positiveButton == null ) { \n \n <ect>
\t4 parts . add ( new StringPart ( MESSAGE_KEY_API_KEY , apiKey , UTF_8_ENCODING ) ) ; \n \n \t3 } else if ( ! StringUtils . isEmpty ( defaultApiKey ) ) { \n \n \t4 parts . add ( new StringPart ( MESSAGE_KEY_API_KEY , defaultApiKey , UTF_8_ENCODING ) ) ; \n \n \t3 } else { \n \n <ect>
\t1 protected void cleanup ( ) { \n \n \t2 try { \n \n \t3 selector . close ( ) ; \n \n \t2 } catch ( IOException e ) { \n \n <ect>
\t1 public static Path soapuiHomeDir ( ) { \n \n \t2 String homePath = System . getProperty ( <string_literal> ) ; \n \n \t2 if ( homePath == null ) { \n \n \t3 File homeFile = new File ( <string_literal> ) ; \n \n <ect>
\t2 try { \n \n \t3 if ( ! targetProject . isAccessible ( ) ) \n \n \t4 targetProject . open ( monitor ) ; } \n \n \t2 catch ( CoreException e ) { \n \n <ect>
\t3 commandListener . commandSucceeded ( new CommandSucceededEvent ( message . getId ( ) , connectionDescription , commandName , response , \n \n \t5 elapsedTimeNanos ) ) ; \n \n \t2 } catch ( Exception e ) { \n \n <ect>
\t5 assertThat ( policy . history ) . containsOnly ( \n \n \t7 entry ( INIT , TestUtils . findHost ( cluster , 1 ) ) , \n \n \t7 entry ( INIT , TestUtils . findHost ( cluster , <number_literal> ) ) \n \n \t5 ) ; \n \n <ect>
\t3 DataHelper . loadProps ( props , cfgFile ) ; \n \n \t3 return props ; \n \n \t2 } catch ( IOException ioe ) { \n \n \t3 if ( _log . shouldLog ( Log . ERROR ) ) \n \n <ect>
\t1 else { \n \n \t2 addObjectToBothSidesOfRelationshipWithKey ( object , _Talent . ROLES_KEY ) ; } } \n \n public void removeFromRolesRelationship ( er . distribution . example . client . eo . MovieRole object ) { \n \n <ect>
\t8 if ( matcher . matches ( ) ) { \n \n \t9 try { \n \n \t10 currentAudioTrack . setYear ( Integer . parseInt ( matcher . group ( 1 ) ) ) ; \n \n \t9 } catch ( NumberFormatException nfe ) { \n \n <ect>
\t1 structured_output [ <string_literal> ] = { <string_literal> : code , <string_literal> : <string_literal> . format ( str ( output ) ) } \n \n \t1 self . put_structured_out ( structured_output ) \n \n def get_clearcache_cmd ( self ) : \n \n \t1 if OSCheck . is_redhat_family ( ) : \n \n <ect>
\t2 public boolean apply ( VAppTemplate from ) { \n \n \t3 try { \n \n \t3 templateToEnvelope . apply ( from ) ; \n \n \t3 } catch ( IllegalArgumentException e ) { \n \n <ect>
<comment> \n \n \t1 protected void addTicketToRegistry ( final OAuthToken ticket , final TicketGrantingTicket ticketGrantingTicket ) { \n \n <ect>
\t1 if ( statement != null ) { \n \n \t2 try { \n \n \t2 statement . close ( ) ; \n \n \t2 } catch ( SQLException e ) { \n \n <ect>
\t2 final Map < String , String > configs = _configDao . getConfiguration ( <string_literal> , params ) ; \n \n \t2 _proxy = configs . get ( Config . SecStorageProxy . key ( ) ) ; \n \n \t2 String cert = configs . get ( <string_literal> ) ; \n \n \t2 if ( ! <string_literal> . equalsIgnoreCase ( cert ) ) { \n \n <ect>
\t1 @ Test \n \n \t1 public void emptyFileStreamEncryptDecrypt ( ) throws IOException { \n \n \t2 Log . info ( Log . FAC_TEST , <string_literal> ) ; \n \n \t2 emptyFile . streamEncryptDecrypt ( ) ; \n \n <ect>
\t8 <string_literal> , \n \n \t8 morseCodes . length , frequencies . length ) ; \n \n \t6 return ; } \n \n \t4 } else { \n \n <ect>
\t1 if ( systemId . endsWith ( <string_literal> ) || PUBLIC_ID . equals ( publicId ) ) { \n \n \t1 Class clazz = getClass ( ) ; \n \n \t1 InputStream in = clazz . getResourceAsStream ( <string_literal> ) ; \n \n \t1 if ( in == null ) { \n \n <ect>
\t4 String path = vol . substring ( 0 , vol . lastIndexOf ( File . separator ) ) ; \n \n \t4 TemplateLocation loc = new TemplateLocation ( _storage , path ) ; \n \n \t4 try { \n \n \t5 if ( ! loc . load ( ) ) { \n \n <ect>
\t4 protocol , \n \n \t4 port , \n \n \t4 withDescription ( String . format ( <string_literal> , port , vApp . getName ( ) , \n \n \t6 vApp . getName ( ) ) ) ) ; } \n \n <ect>
\t2 return new org . apache . thrift . async . AsyncMethodCallback < Void > ( ) { \n \n \t2 public void onComplete ( Void o ) { } \n \n \t2 public void onError ( java . lang . Exception e ) { \n \n \t3 if ( e instanceof org . apache . thrift . transport . TTransportException ) { \n \n <ect>
\t4 XWikiUser user = context . getWiki ( ) . checkAuth ( context ) ; \n \n \t4 if ( user != null ) { \n \n \t5 userReference = resolveUserName ( user . getUser ( ) , new WikiReference ( context . getWikiId ( ) ) ) ; } \n \n \t3 } catch ( XWikiException e ) { \n \n <ect>
\t2 try { \n \n \t3 while ( ( line = reader . readLine ( ) ) != null ) { \n \n \t4 logger . info ( <string_literal> , prefix , line ) ; } \n \n \t2 } catch ( IOException e ) { \n \n <ect>
\t4 catch ( InterruptedException e ) { \n \n \t5 throw new GridException ( <string_literal> , e ) ; } } } \n \n \t3 for ( Map . Entry < String , Integer > entry : receivedParams . entrySet ( ) ) { \n \n <ect>
\t6 } catch ( UnsupportedEncodingException usex ) { \n \n \t7 s_logger . warn ( key + <string_literal> + value [ 0 ] ) ; \n \n \t7 throw new ServerApiException ( BaseCmd . PARAM_ERROR , key + <string_literal> + value [ 0 ] ) ; \n \n \t6 } catch ( IllegalArgumentException iae ) { \n \n <ect>
\t2 <comment> \n \n \t2 <comment> \n \n \t2 <comment> \n \n \t2 <comment> \n \n <ect>
\t4 @ Override \n \n \t4 public void handleTransactionFailure ( SecurityContext securityContext , Throwable t ) { \n \n \t5 logger . warn ( <string_literal> , t . getMessage ( ) ) ; } \n \n \t3 } ) ; \n \n <ect>
<comment> \n \n \t1 @ Override \n \n \t1 public void stop ( BundleContext bc ) throws Exception { \n \n <ect>
\t4 mapper . send ( ( Collection < GridComputeJob > ) null ) ; \n \n \t4 assert false ; } \n \n \t3 catch ( NullPointerException e ) { \n \n <ect>
\t2 log . info ( <string_literal> , key , timeoutMillis ) ; \n \n \t2 return result ; } \n \n \t1 @ Override \n \n \t1 public ReplyHandler putIfAbsent ( String key , ReplyHandler value , long timeoutMillis ) { \n \n <ect>
\t2 m_pathCache . replace ( structureId , rootPath ) ; \n \n \t2 if ( isSitemapConfiguration ( rootPath , type ) ) { \n \n \t3 m_updateSet . add ( structureId ) ; \n \n \t2 } else if ( isModuleConfiguration ( rootPath , type ) ) { \n \n <ect>
\t2 LOG . info ( <string_literal> , firstFollowerIndex ) ; \n \n \t2 qU . shutdown ( firstFollowerIndex ) ; \n \n \t2 LOG . info ( <string_literal> , secondFollowerIndex ) ; \n \n \t2 qU . shutdown ( secondFollowerIndex ) ; \n \n <ect>
\t3 String uuid \t2 = webSocketData . getId ( ) ; \n \n \t3 byte [ ] data \t2 = new byte [ 0 ] ; \n \n \t3 if ( rawData != null ) { \n \n \t4 if ( rawData instanceof String ) { \n \n <ect>
\t4 for ( int i = 0 ; i < cmds . length ; i ++ ) { \n \n \t5 startups [ i ] = ( StartupCommand ) cmds [ i ] ; } \n \n \t4 attache = handleConnectedAgent ( link , startups , request ) ; \n \n \t4 if ( attache == null ) { \n \n <ect>
\t3 try { \n \n \t3 fcall . sendResponse ( fb , result , org . apache . thrift . protocol . TMessageType . REPLY , seqid ) ; \n \n \t3 return ; \n \n \t3 } catch ( Exception e ) { \n \n <ect>
\t3 if ( expectedEvents . contains ( event . getType ( ) ) ) { \n \n \t4 latch . countDown ( ) ; } } \n \n \t2 public boolean matches ( ) throws InterruptedException { \n \n \t3 if ( ! latch . await ( CONNECTION_TIMEOUT / <number_literal> , TimeUnit . MILLISECONDS ) ) { \n \n <ect>
\t3 _LOGGER . error ( <string_literal> , e ) ; \n \n \t3 fb . close ( ) ; \n \n \t3 return ; \n \n \t3 } else if ( e instanceof org . apache . thrift . TApplicationException ) { \n \n <ect>
\t3 res . addHeader ( X_ATMOSPHERE_ERROR , <string_literal> ) ; \n \n \t3 res . flushBuffer ( ) ; \n \n \t3 return new Action ( ) ; } \n \n \t2 if ( config . handlers ( ) . isEmpty ( ) ) { \n \n <ect>
\t2 public final void userEventTriggered ( ChannelHandlerContext ctx , Object evt ) throws Exception { \n \n \t3 if ( evt instanceof SslHandshakeCompletionEvent ) { \n \n \t4 SslHandshakeCompletionEvent handshakeEvt = ( SslHandshakeCompletionEvent ) evt ; \n \n \t4 if ( handshakeEvt . cause ( ) != null ) { \n \n <ect>
\t5 if ( crop ) { \n \n \t6 final int offsetX = reqOffsetX != null ? reqOffsetX : Math . abs ( maxWidth - destWidth ) / <number_literal> ; \n \n \t6 final int offsetY = reqOffsetY != null ? reqOffsetY : Math . abs ( maxHeight - destHeight ) / <number_literal> ; \n \n \t6 final Integer [ ] dims = finalImageDimensions ( offsetX , offsetY , maxWidth , maxHeight , sourceWidth , sourceHeight ) ; \n \n <ect>
\t1 public void receiveCommand ( Item item , Command command , ZWaveNode node , ZWaveDoorLockCommandClass commandClass , \n \n \t3 int endpointId , Map < String , String > arguments ) { \n \n \t2 ZWaveCommandConverter < ? , ? > converter = this . getCommandConverter ( command . getClass ( ) ) ; \n \n \t2 if ( converter == null ) { \n \n <ect>
\t3 responseData . put ( <string_literal> , Integer . toString ( response . getStatusLine ( ) . getStatusCode ( ) ) ) ; \n \n \t3 for ( final Header header : response . getAllHeaders ( ) ) { \n \n \t4 responseData . put ( header . getName ( ) , header . getValue ( ) ) ; } \n \n \t2 } catch ( final Throwable t ) { \n \n <ect>
\t3 DeleteOnHaltHook . runHooks ( ) ; } \n \n \t2 catch ( Throwable t ) \n \n \t2 { \n \n \t3 logger . warn ( <string_literal> , t ) ; } \n \n <ect>
\t8 _projectMgr . deleteProject ( CallContext . current ( ) . getCallingAccount ( ) , CallContext . current ( ) . getCallingUserId ( ) , project ) ; \n \n \t7 } else { \n \n \t8 s_logger . debug ( <string_literal> + project + <string_literal> + project . getId ( ) ) ; } \n \n \t6 } catch ( Exception e ) { \n \n <ect>
\t3 final List < IErlModule > includes ) { \n \n \t2 final List < String > moduleNames = Lists . newArrayList ( ) ; \n \n \t2 for ( final IErlModule module : includes ) { \n \n \t3 moduleNames . add ( module . getName ( ) ) ; } \n \n <ect>
\t1 log . info ( <string_literal> ) ; \n \n \t2 log . debug ( <string_literal> ) ; \n \n \t2 log . debug ( <string_literal> , System . getProperty ( <string_literal> ) ) ; \n \n <ect>
<comment> \n \n \t1 public void registerTaskManager ( final TaskExecutorConnection taskExecutorConnection , SlotReport initialSlotReport ) { \n \n \t2 checkInit ( ) ; \n \n <ect>
<comment> \n \n \t1 public synchronized CountBalancedTree < K , V > split ( ) { \n \n \t2 CountBalancedTree < K , V > at = new CountBalancedTree < > ( ) ; \n \n \t2 if ( root == null || root . left == null || root . right == null ) { \n \n <ect>
\t6 jpaService . execute ( new WorkflowActionUpdateJPAExecutor ( wfAction ) ) ; } \n \n \t5 catch ( JPAExecutorException je ) { \n \n \t6 throw new CommandException ( je ) ; } \n \n \t5 catch ( Exception ex ) { \n \n <ect>
\t4 ContentName cn = SegmentationProfile . segmentName ( \n \n \t6 ContentName . fromNative ( <string_literal> + new Integer ( tValue ) . toString ( ) ) , SegmentationProfile . baseSegment ( ) ) ; \n \n \t4 ContentObject result = reader . get ( Interest . last ( cn , 1 , null ) , <number_literal> ) ; \n \n \t4 checkResult ( result , highest ) ; } } \n \n <ect>
\t4 return saveNewDict ( newDictInfo ) ; } \n \n \t2 } else { \n \n \t3 String dupDict = checkDupByContent ( newDictInfo , newDict ) ; \n \n \t3 if ( dupDict != null ) { \n \n <ect>
\t3 p . setValue ( NOT_OTHER , Boolean . TRUE ) ; \n \n \t2 } catch ( IOException e ) { \n \n \t3 log . warn ( <string_literal> , e ) ; \n \n \t3 throw new RuntimeException ( <string_literal> , e ) ; } \n \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \n \t2 if ( ! PackManager . v ( ) . hasPhase ( <string_literal> ) ) \n \n \t3 logger . warn ( <string_literal> ) ; \n \n \t2 if ( ! PackManager . v ( ) . hasPhase ( <string_literal> ) ) \n \n <ect>
public static Compressor getCompressor ( CompressionCodec codec ) { \n \n \t1 Compressor compressor = borrow ( COMPRESSOR_POOL , codec . getCompressorType ( ) ) ; \n \n \t1 if ( compressor == null ) { \n \n \t1 compressor = codec . createCompressor ( ) ; \n \n <ect>
\t3 _instance = <string_literal> ; } \n \n \t2 Map < String , String > agentMgrConfigs = configDao . getConfiguration ( <string_literal> , params ) ; \n \n \t2 _mgmt_host = agentMgrConfigs . get ( <string_literal> ) ; \n \n \t2 if ( _mgmt_host == null ) { \n \n <ect>
\t2 } ) ; \n \n \t2 if ( nodeScopedCondition . get ( ) && ! indexingRule . isNodeFullTextIndexed ( ) ) { \n \n \t3 return false ; } \n \n \t2 if ( relativeParentsFound . get ( ) ) { \n \n <ect>
\t5 return new StopAnswer ( cmd , msg ) ; } \n \n \t4 State state = s_vms . getState ( _cluster , vmName ) ; \n \n \t4 synchronized ( _cluster . intern ( ) ) { \n \n \t5 s_vms . put ( _cluster , _name , vmName , State . Stopping ) ; } \n \n <ect>
\t4 handleAccessRequest ( req , resp , vmId ) ; \n \n \t3 } else { \n \n \t4 handleAuthRequest ( req , resp , vmId ) ; } \n \n \t2 } catch ( Throwable e ) { \n \n <ect>
\t4 catch ( JPAExecutorException e ) { \n \n \t5 throw new CommandException ( e ) ; } } \n \n \t3 LOG . debug ( <string_literal> + jobList . size ( ) + <string_literal> + actionDeleted ) ; } \n \n \t2 else { \n \n <ect>
\t1 public static void deleteHTable ( TableName tableName ) throws IOException { \n \n \t2 Admin admin = HBaseConnection . get ( KylinConfig . getInstanceFromEnv ( ) . getStorageUrl ( ) ) . getAdmin ( ) ; \n \n \t2 try { \n \n \t3 if ( admin . tableExists ( tableName ) ) { \n \n <ect>
\t1 IndexMetaData archiveBrokenIndexSettings ( IndexMetaData indexMetaData ) { \n \n \t2 final Settings settings = indexMetaData . getSettings ( ) ; \n \n \t2 final Settings upgrade = indexScopedSettings . archiveUnknownOrInvalidSettings ( \n \n \t3 settings , \n \n <ect>
\t1 advanceDumpDir ( ) ; \n \n \t1 run ( <string_literal> + dbName + <string_literal> + replDumpId , driver ) ; \n \n \t1 String incrementalDumpLocn = getResult ( 0 , 0 , driver ) ; \n \n \t1 String incrementalDumpId = getResult ( 0 , 1 , true , driver ) ; \n \n <ect>
\t3 SmackConfiguration . setPacketReplyTimeout ( <number_literal> ) ; \n \n \t3 newParent . addContact ( contact ) ; } \n \n \t2 catch ( XMPPException ex ) \n \n \t2 { \n \n <ect>
\t4 if ( sleepBetweenSend > 0 ) { \n \n \t5 try { \n \n \t6 Thread . sleep ( sleepBetweenSend ) ; \n \n \t5 } catch ( InterruptedException e ) { \n \n <ect>
\t1 <comment> \n \n \t1 try { \n \n \t2 upload = objectManager . initiateCreation ( upload ) ; \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t4 { \n \n \t5 <comment> \n \n \t5 activity . setOriginalActor ( null ) ; \n \n \t5 <comment> \n \n <ect>
\t4 if ( br != null ) { \n \n \t5 try { \n \n \t6 br . close ( ) ; \n \n \t5 } catch ( IOException e ) { \n \n <ect>
\t5 col += colSpan ; \n \n \t5 if ( col >= currentRowMaxColums ) { \n \n \t6 row ++ ; \n \n \t6 col = 0 ; \n \n <ect>
\t2 } else { \n \n \t3 logger . warn ( <string_literal> , \n \n \t5 command . toString ( ) , config . getItemName ( ) ) ; } } \n \n \t1 private void callMios ( String url ) { \n \n <ect>
\t4 configuration . port ) ) } } \n \n \t2 } else { \n \n \t2 logger . info ( <string_literal> ) } \n \n \t1 } catch ( final Exception e ) { \n \n <ect>
\t4 this . transactionManager . commit ( this . transactionStatus ) ; } } \n \n \t2 finally { \n \n \t3 this . transactionStatus = null ; } \n \n <ect>
\t3 try { \n \n \t3 fcall . sendResponse ( fb , msg , msgType , seqid ) ; \n \n \t3 return ; \n \n \t3 } catch ( Exception ex ) { \n \n <ect>
\t1 { \n \n \t2 URI uri ; \n \n \t2 if ( ( uri = processExtStylesheet ( target , data ) ) != null ) \n \n \t2 { \n \n <ect>
\t10 oldVal , hasOldVal , CU . subjectId ( tx , cctx ) , null , \n \n \t10 inTx ( ) ? tx . resolveTaskName ( ) : null ) ; \n \n \t8 cctx . cache ( ) . metrics0 ( ) . onRead ( false ) ; } \n \n <ect>
\t3 sessions . put ( nick , sess ) ; \n \n \t2 } catch ( SessionsDB . ExistingIdException e ) { \n \n \t3 return <string_literal> + nick ; } \n \n \t2 if ( _log . shouldWarn ( ) ) \n \n <ect>
\t4 config . setTargetType ( targetType ) ; \n \n \t4 propertyChangeSupport . firePropertyChange ( TARGET_TYPE_PROPERTY , oldName , targetType ) ; } } \n \n \t2 public void propertyRemoved ( String name ) { \n \n \t3 if ( name . equals ( sourceType ) ) { \n \n <ect>
\t3 return ; \n \n \t2 } catch ( CmsException ex ) { \n \n \t3 resp . setStatus ( CmsWebdavStatus . SC_INTERNAL_SERVER_ERROR ) ; \n \n \t3 if ( LOG . isErrorEnabled ( ) ) { \n \n <ect>
\t3 out . writeByte ( Message . classMap . inverse ( ) . get ( payload . getClass ( ) ) ) ; \n \n \t3 payload . write ( out ) ; \n \n \t3 return out . toByteArray ( ) ; \n \n \t2 } catch ( IOException e ) { \n \n <ect>
\t2 foUserAgent . setKeywords ( <string_literal> ) ; \n \n \t2 try { \n \n \t3 Fop fop = fopFactory . newFop ( MimeConstants . MIME_PDF , foUserAgent , os ) ; \n \n <ect>
\t6 } else { \n \n \t7 _log . logAlways ( Log . WARN , <string_literal> + key + \n \n <number_literal> <string_literal> + file + <string_literal> + b64 ) ; } } \n \n \t4 } catch ( IOException ioe ) { \n \n <ect>
\t5 log . warn ( <string_literal> ) ; \n \n \t5 authenticate ( ) ; \n \n \t5 deleteObject ( containerName , objectName ) ; \n \n \t4 } else { \n \n <ect>
\t2 throw new SemanticException ( e1 ) ; } \n \n \t1 ctx . resetOpContext ( ) ; \n \n \t1 ctx . resetStream ( ) ; \n \n \t1 TaskFactory . resetId ( ) ; \n \n <ect>
<comment> \n \n \t1 private boolean renderFileFromFilesystem ( String path , XWikiContext context ) throws XWikiException \n \n \t1 { \n \n <ect>
\t2 } else if ( resourceDataKey != null ) { \n \n \t3 LOGGER . debug ( <string_literal> + resourceDataKey ) ; \n \n \t3 response = responseForDataCachedWithKey ( resourceDataKey ) ; } \n \n \t2 if ( response == null ) { \n \n <ect>
\t2 { \n \n \t3 process ( String . format ( <string_literal> , Auth . AUTH_KS , PERMISSIONS_CF , escape ( droppedUser ) ) ) ; } \n \n \t2 catch ( RequestExecutionException e ) \n \n \t2 { \n \n <ect>
\t3 LOGGER . debug ( <string_literal> , attrs ) ; } \n \n \t2 if ( authenticator . getReturnAttributes ( ) != null ) { \n \n \t3 final List < String > authenticatorAttributes = CollectionUtils . wrapList ( authenticator . getReturnAttributes ( ) ) ; \n \n \t3 if ( ! authenticatorAttributes . isEmpty ( ) ) { \n \n <ect>
\t3 s_logger . debug ( <string_literal> , e ) ; \n \n \t3 throw new CloudRuntimeException ( e . toString ( ) ) ; } } \n \n \t1 @ Override \n \n \t1 public KVMStoragePool createStoragePool ( String name , String host , int port , String path , String userInfo , StoragePoolType type ) { \n \n <ect>
\t2 checkpointMBean . createCheckpoint ( <number_literal> ) ; \n \n \t2 Set < String > afterCheckpointBlobs = createBlobs ( <number_literal> , <number_literal> ) ; \n \n \t2 state . blobsPresent . addAll ( afterCheckpointBlobs ) ; \n \n \t2 log . info ( <string_literal> , state . blobsAdded . size ( ) , state . blobsAdded ) ; \n \n <ect>
\t2 final String entityId = pair . getValue ( ) . getEntityId ( ) ; \n \n \t2 LOGGER . debug ( <string_literal> , entityId ) ; \n \n \t2 final AuthnRequest authnRequest = authenticationContext . getKey ( ) ; \n \n \t2 this . responseBuilder . build ( authnRequest , request , response , casAssertion , pair . getKey ( ) , pair . getValue ( ) , binding ) ; \n \n <ect>
\t1 } finally { \n \n \t2 if ( runtime != null ) { \n \n \t2 runtime . dispose ( ) ; } } \n \n \t1 } catch ( Exception e ) { \n \n <ect>
\t1 @ Test \n \n \t1 @ OperateOnDeployment ( APP_GRANT ) \n \n \t1 public void testJSMEnabled ( @ ArquillianResource URL webAppURL ) throws Exception { \n \n \t2 final URI checkJSMuri = new URI ( webAppURL . toExternalForm ( ) + JSMCheckServlet . SERVLET_PATH . substring ( 1 ) ) ; \n \n <ect>
\t1 public void receiveCommand ( Item item , Command command , ZWaveNode node , ZWaveIndicatorCommandClass commandClass , \n \n \t3 int endpointId , Map < String , String > arguments ) { \n \n \t2 ZWaveCommandConverter < ? , ? > converter = this . getCommandConverter ( command . getClass ( ) ) ; \n \n \t2 if ( converter == null ) { \n \n <ect>
\t1 public void restore ( Version [ ] versions , \n \n \t6 boolean removeExisting ) \n \n \t2 throws ItemExistsException , UnsupportedRepositoryOperationException , VersionException , LockException , \n \n \t2 InvalidItemStateException , RepositoryException { \n \n <ect>
\t3 VolumeApiResult result = future . get ( storagePoolMaxWaitSeconds , TimeUnit . SECONDS ) ; \n \n \t3 if ( volumeDetail != null ) { \n \n \t4 volumeDetailsDao . remove ( volumeDetail . getId ( ) ) ; } \n \n \t3 if ( result . isFailed ( ) ) { \n \n <ect>
\t3 { \n \n \t4 new EventTrace ( <string_literal> , tracer . get ( ) ) . commit ( ) ; \n \n \t4 if ( ! Boolean . getBoolean ( DebugUtils . PROPERTY_DONT_LOG_CONNECTION_ISSUES ) ) \n \n \t4 { \n \n <ect>
public boolean stop ( ) { \n \n \t1 if ( hsqlServer != null ) { \n \n \t1 try { \n \n \t2 logger . debug ( <string_literal> ) ; <comment> \n \n <ect>
<comment> \n \n \t1 @ Override \n \n \t1 public void start ( BundleContext bc ) throws Exception { \n \n \t2 context = bc ; \n \n <ect>
\t9 new ArrayList < String > ( ) , true ) ; \n \n \t6 } catch ( IOException e ) { \n \n \t7 log . warn ( <string_literal> , icsFile , e ) ; \n \n \t6 } catch ( ParserException e ) { \n \n <ect>
\t2 <comment> \n \n \t2 startStopwatch ( ) ; \n \n \t2 <comment> \n \n <ect>
\t1 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \n \t1 bucketWriter . append ( e ) ; } \n \n \t1 logger . info ( <string_literal> , hdfsWriter . getEventsWritten ( ) ) ; \n \n \t1 logger . info ( <string_literal> , hdfsWriter . getBytesWritten ( ) ) ; \n \n <ect>
\t2 try { \n \n \t3 Pair < Boolean , String > result = SshHelper . sshExecute ( cmd . getAccessDetail ( NetworkElementCommand . ROUTER_IP ) , DEFAULT_DOMR_SSHPORT , <string_literal> , \n \n \t5 new File ( <string_literal> ) , null , <string_literal> + args ) ; \n \n \t3 if ( ! result . first ( ) ) { \n \n <ect>
\t2 publishEvent ( new CasAuthenticationTransactionSuccessfulEvent ( this , credential ) ) ; \n \n \t2 Principal principal = result . getPrincipal ( ) ; \n \n \t2 final String resolverName = resolver != null ? resolver . getClass ( ) . getSimpleName ( ) : <string_literal> ; \n \n \t2 if ( resolver == null ) { \n \n <ect>
\t3 if ( ! HttpHeaders . isKeepAlive ( request ) ) { \n \n \t4 lastContentFuture . addListener ( ChannelFutureListener . CLOSE ) ; } \n \n \t2 } catch ( Exception e ) { \n \n \t3 raf . close ( ) ; \n \n <ect>
\t5 s_logger . warn ( <string_literal> + backupRouter . getInstanceName ( ) , e ) ; \n \n \t4 } catch ( ResourceUnavailableException e ) { \n \n \t5 s_logger . warn ( <string_literal> + backupRouter . getInstanceName ( ) , e ) ; \n \n \t4 } catch ( InsufficientCapacityException e ) { \n \n <ect>
\t3 result . ouch4 = ( TableExistsException ) e ; \n \n \t3 result . setOuch4IsSet ( true ) ; \n \n \t3 msg = result ; \n \n \t3 } else if ( e instanceof org . apache . thrift . transport . TTransportException ) { \n \n <ect>
\t3 s_logger . debug ( <string_literal> ) ; } \n \n \t2 for ( ManagementServerHostVO mshost : nodeList ) { \n \n <ect>
\t4 Properties opts = new Properties ( ) ; \n \n \t4 I2PSocketManager mgr = new I2PSocketManagerFull ( _context , _session , opts , <string_literal> ) ; \n \n \t4 _log . debug ( <string_literal> ) ; \n \n \t4 I2PServerSocket ssocket = mgr . getServerSocket ( ) ; \n \n <ect>
\t3 } catch ( org . apache . thrift . transport . TTransportException e ) { \n \n \t3 _LOGGER . error ( <string_literal> , e ) ; \n \n \t3 fb . close ( ) ; \n \n \t3 } catch ( java . lang . Exception e ) { \n \n <ect>
\t4 response . readEntity ( String . class ) ) ; \n \n \t2 List < ResteasyConstraintViolation > classViolations = resteasyViolationException . getClassViolations ( ) ; \n \n \t2 Assert . assertEquals ( 1 , classViolations . size ( ) ) ; \n \n \t2 Assert . assertEquals ( ValidationExceptionCrazyConstraint . DEFAULT_MESSAGE , classViolations . get ( 0 ) . getMessage ( ) ) ; \n \n <ect>
\t4 <comment> \n \n \t4 <comment> \n \n \t4 boolean removed = _timedJobs . remove ( job ) ; \n \n \t4 if ( removed && _log . shouldLog ( Log . WARN ) ) \n \n <ect>
\t3 if ( ! SSHCmdHelper . sshExecuteCmd ( sshConnection , cmd ) ) { \n \n \t4 throw new CloudRuntimeException ( <string_literal> + computingHostIp + <string_literal> + _host . getIp ( ) ) ; } \n \n \t3 return true ; \n \n \t2 } catch ( final Exception e ) { \n \n <ect>
\t3 if ( ( ! blockEntity . exists ( ) || ! blockEntity . hasComponent ( NetworkComponent . class ) ) && isBlockRelevant ( blockPosition . x , blockPosition . y , blockPosition . z ) ) { \n \n \t4 Block block = getBlock ( blockPosition . x , blockPosition . y , blockPosition . z ) ; \n \n \t4 blockEntity = createBlockEntity ( blockPosition , block ) ; } \n \n \t3 return blockEntity ; } \n \n <ect>
\t2 times [ i % times . length ] = \n \n \t3 ( System . nanoTime ( ) - start ) / ( 1 . 0e6 * document . getNumNondefaultElements ( ) ) ; \n \n \t2 if ( i % <number_literal> == 0 ) { \n \n \t3 long time = System . nanoTime ( ) - startTime ; \n \n <ect>
\t2 return createServiceFilter ( configurationProperties . getServiceFilter ( ) ) ; } \n \n \t1 @ PostConstruct \n \n \t1 public void addServiceFilterConfigurations ( ) { \n \n \t2 if ( ! ( beanFactory instanceof ConfigurableBeanFactory ) ) { \n \n <ect>
\t4 logger . warn ( <string_literal> + remove + <string_literal> + body . getMethod ( ) + <string_literal> ) ; \n \n \t3 if ( ! remove . equals ( units . getFirst ( ) ) ) { \n \n \t4 Unit pred = ( Unit ) units . getPredOf ( remove ) ; \n \n \t4 if ( debug ) \n \n <ect>
public void setTalent ( webobjectsexamples . businesslogic . eo . Talent value ) { \n \n \t1 takeStoredValueForKey ( value , _MovieRole . TALENT_KEY ) ; } \n \n public void setTalentRelationship ( webobjectsexamples . businesslogic . eo . Talent value ) { \n \n <ect>
\t2 this . keyRangeNum = JStormUtils . getScaleOutNum ( ConfigExtension . getKeyRangeNum ( context . getStormConf ( ) ) , componentTaskNum ) ; \n \n \t2 Collection < Integer > keyRanges = keyRangesByTaskIndex ( keyRangeNum , componentTaskNum , context . getThisTaskIndex ( ) ) ; \n \n \t2 for ( Integer keyRange : keyRanges ) { \n \n \t3 initKeyRangeState ( keyRange ) ; } \n \n <ect>
\t3 Exception e = wrapWithOnErrorHook ( failureType , originalException ) ; \n \n \t3 return Observable . error ( new HystrixRuntimeException ( failureType , this . getClass ( ) , getLogMessagePrefix ( ) + <string_literal> + message + <string_literal> , e , null ) ) ; \n \n \t2 } else { \n \n \t3 if ( isRecoverableError ( originalException ) ) { \n \n <ect>
\t2 assertAcked ( prepareCreate ( <string_literal> , <number_literal> , Settings . builder ( ) . put ( <string_literal> , <string_literal> ) ) ) ; \n \n \t2 NumShards numShards = getNumShards ( <string_literal> ) ; \n \n \t2 logger . info ( <string_literal> ) ; \n \n \t2 ClusterHealthResponse clusterHealth = client ( ) . admin ( ) . cluster ( ) . prepareHealth ( ) . setWaitForEvents ( Priority . LANGUID ) . setWaitForGreenStatus ( ) . setWaitForActiveShards ( numShards . numPrimaries * <number_literal> ) . execute ( ) . actionGet ( ) ; \n \n <ect>
\t1 private static final long serialVersionUID = 1239820102030303L ; \n \n \t1 private static final Logger log = LoggerFactory . getLogger ( ModuleServlet . class ) ; \n \n \t1 @ Override \n \n \t1 protected void service ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { \n \n <ect>
\t4 samples . forEach ( s - > fingerprints . put ( s , new Fingerprint ( s , source , null ) ) ) ; } \n \n \t3 try { \n \n \t4 getFingerprintFromVc ( fingerprints , ctx ) ; \n \n \t3 } catch ( final IllegalArgumentException e ) { \n \n <ect>
\t4 return false ; } \n \n \t3 LOGGER . debug ( <string_literal> ) ; \n \n \t3 return true ; } \n \n \t2 if ( ! authn . getSuccesses ( ) . isEmpty ( ) ) { \n \n <ect>
\t2 LOG . trace ( LogUtil . subheader ( LogUtil . dumpObject ( config ) ) ) ; \n \n \t2 emf . put ( persistenceContext , entityManagerFactory ) ; \n \n \t2 LOG . info ( <string_literal> + persistenceContext ) ; \n \n \t1 } catch ( Exception ex ) { \n \n <ect>
\t2 if ( configFile == null ) { \n \n \t3 configFile = System . getProperty ( SYS_PROP_CONFIG_FILE ) ; } \n \n \t2 if ( configFile != null && configFile . length ( ) > 0 ) { \n \n <ect>
\t3 requestPath = finalPath . toString ( ) ; } \n \n \t2 Header [ ] requestHeaders = new Header [ headers . size ( ) ] ; \n \n \t2 int index = 0 ; \n \n \t2 for ( Map . Entry < String , String > header : headers . entrySet ( ) ) { \n \n <ect>
\t5 irc . addListener ( listener ) ; \n \n \t5 irc . rawMessage ( <string_literal> + state . getNickname ( ) ) ; } \n \n \t4 catch ( final RuntimeException e ) \n \n \t4 { \n \n <ect>
\t6 if ( byteCount != bytesRead ) { \n \n \t7 log . error ( <string_literal> , null ) ; \n \n \t7 ok = false ; } } \n \n \t4 } catch ( IOException e ) { \n \n <ect>
\t1 private HotRodClient client = new HotRodClient ( <string_literal> , server ( ) . getPort ( ) , cacheName , <number_literal> , ( byte ) <number_literal> ) ; \n \n \t1 @ Override \n \n \t1 public Void call ( ) throws Exception { \n \n \t2 TestResourceTracker . testThreadStarted ( HotRodConcurrentTest . this ) ; \n \n <ect>
\t3 try { \n \n \t4 URL url = ConversionUtils . makeRelativeURL ( lastRes . getURL ( ) , location ) ; \n \n \t4 url = ConversionUtils . sanitizeUrl ( url ) . toURL ( ) ; \n \n <ect>
<comment> \n \n \t1 protected void executeMimeResult ( final String finalLocation ) throws PortletException , IOException { \n \n <ect>
\t1 if ( writer != null ) { \n \n \t2 try { \n \n \t2 writer . close ( ) ; \n \n \t2 } catch ( MutationsRejectedException e ) { \n \n <ect>
\t6 s_logger . warn ( <string_literal> + vm . getUuid ( ) + <string_literal> ) ; } } \n \n \t4 <comment> \n \n \t4 <comment> \n \n \t4 if ( ! _vmMgr . expunge ( vm , callerUserId , caller ) ) { \n \n <ect>
\t4 ) ) ; \n \n \t3 connection ( ) . exec ( sqlStr ( <string_literal> ) ) ; \n \n \t2 } catch ( SQLException ex ) \n \n \t2 { \n \n <ect>
\t2 writer . setIndent ( <string_literal> ) ; \n \n \t2 try { \n \n \t3 writeModel ( writer ) ; \n \n \t2 } catch ( Exception e ) { \n \n <ect>
\t3 log . debug ( <string_literal> , entry , url ) ; \n \n \t3 return entry ; } \n \n \t2 if ( headers == null ) { \n \n <ect>
\t3 Object value = response . getValue ( ) ; \n \n \t3 return JolokiaHelpers . convertJolokiaToJavaType ( method . getReturnType ( ) , value ) ; \n \n \t2 } catch ( J4pException e ) { \n \n \t3 List < Object > argsList = args == null ? null : Arrays . asList ( args ) ; \n \n <ect>
\t4 logger . error ( <string_literal> ) ; \n \n \t4 return ; } } \n \n \t2 catch ( Throwable t ) \n \n \t2 { \n \n <ect>
\t6 nodes , \n \n \t6 true ) . get ( ) ; } \n \n \t4 catch ( GridTopologyException e ) { \n \n <ect>
\t3 return CollectionUtils . wrapSet ( event ) ; } } \n \n \t1 private RegisteredService determineRegisteredServiceForEvent ( final RequestContext context , final Service service ) { \n \n \t2 RegisteredService registeredService = null ; \n \n \t2 if ( service != null ) { \n \n <ect>
\t6 vm . setAffinity ( conn , vm . getResidentOn ( conn ) ) ; \n \n \t6 if ( citrixResourceBase . canBridgeFirewall ( ) ) { \n \n \t7 final String result = citrixResourceBase . callHostPlugin ( conn , <string_literal> , <string_literal> , <string_literal> , command . getVmName ( ) ) ; \n \n \t7 if ( result == null || result . isEmpty ( ) || ! Boolean . parseBoolean ( result ) ) { \n \n <ect>
\t2 List < StaticDatabasePropertyEntry > entities = Entities . query ( new StaticDatabasePropertyEntry ( ) ) ; \n \n \t2 for ( StaticDatabasePropertyEntry entry : entities ) { \n \n \t2 if ( entry . getPropName ( ) != null && changes . containsKey ( entry . getPropName ( ) ) ) { \n \n \t3 String [ ] newProperty = changes . get ( entry . getPropName ( ) ) ; \n \n <ect>
\t1 GetHeadRequestHandler ( StandbyHeadReader reader ) { \n \n \t2 this . reader = reader ; } \n \n \t1 @ Override \n \n \t1 protected void channelRead0 ( ChannelHandlerContext ctx , GetHeadRequest msg ) throws Exception { \n \n <ect>
\t3 Script command = new Script ( true , <string_literal> , _timeout , s_logger ) ; \n \n \t3 command . add ( mountPoint ) ; \n \n \t3 result = command . execute ( ) ; \n \n \t3 if ( result != null ) { \n \n <ect>
\t4 trMap . put ( taskName , new TaskRunner ( task ) ) ; \n \n \t4 <comment> \n \n \t4 perfList . add ( taskName ) ; \n \n \t3 } catch ( IOException ioE ) { \n \n <ect>
\t3 } else { \n \n \t4 jobWithJars = prog . getPlanWithJars ( ) ; } \n \n \t3 return run ( jobWithJars , parallelism , prog . getSavepointSettings ( ) ) ; } \n \n \t2 else if ( prog . isUsingInteractiveMode ( ) ) { \n \n <ect>
protected int getHostInMemoryAggregationPort ( ) { \n \n \t1 return hostInMemoryAggregationPort ; } \n \n @ Override \n \n public void prepare ( Map conf ) { \n \n <ect>
\t2 log . debug ( <string_literal> , <string_literal> ) ; \n \n \t2 return cl . getResourceAsStream ( name ) ; } \n \n \t1 @ Override \n \n \t1 protected synchronized Class loadClass ( String name , boolean resolve ) throws ClassNotFoundException { \n \n <ect>
\t2 } else { \n \n \t3 consumer = consumeSession . createConsumer ( consumerDestination ) ; } \n \n \t2 consumer . setMessageListener ( this ) ; \n \n \t2 assertMessagesAreReceived ( ) ; \n \n <ect>
\t1 } else { \n \n \t1 return true ; } } \n \n protected boolean verifyContextNotStarted ( ) { \n \n \t1 if ( muleContext != null && muleContext . getLifecycleManager ( ) . isPhaseComplete ( Startable . PHASE_NAME ) ) { \n \n <ect>
\t2 <comment> \n \n \t2 <comment> \n \n \t2 if ( D2WModel . defaultModel ( ) == this ) { \n \n <ect>
\t1 setupLogging ( ) ; \n \n \t1 String portOverride = System . getenv ( <string_literal> ) ; \n \n \t1 int port = portOverride != null ? Integer . parseInt ( portOverride ) : <number_literal> ; \n \n \t1 Provider provider = Providers . getByName ( args [ 0 ] ) ; \n \n <ect>
\t1 public void accept ( final Void aVoid ) { \n \n \t2 OrderedShutdown . registerPostShutdownHook ( new Runnable ( ) { \n \n \t2 @ Override \n \n \t2 public void run ( ) { \n \n <ect>
\t4 resourceResolver = new PathMatchingResourcePatternResolver ( moduleClassLoader ) ; \n \n \t4 propertiesFiles = resourceResolver . getResources ( pattern ) ; \n \n \t4 Collections . addAll ( resourceSet , propertiesFiles ) ; } } \n \n \t2 catch ( IOException e ) { \n \n <ect>
\t5 SignatureValidator validator = new SignatureValidator ( credential ) ; \n \n \t5 try { \n \n \t6 validator . validate ( sig ) ; \n \n \t5 } catch ( ValidationException e ) { \n \n <ect>
\t1 void flushAvailable ( DataReceiver target , boolean blocking ) throws IOException { \n \n \t2 WriteStatus ws = null ; \n \n \t2 long before = System . currentTimeMillis ( ) ; \n \n \t2 if ( _log . shouldLog ( Log . INFO ) && _valid > 0 ) \n \n <ect>
\t1 @ Override \n \n \t1 public void messageReceived ( ChannelHandlerContext ctx , MessageEvent e ) { \n \n \t2 NetData . NetMessage message = ( NetData . NetMessage ) e . getMessage ( ) ; \n \n \t2 if ( message . hasServerInfo ( ) ) { \n \n <ect>
\t1 private void addTrafficType ( Connection conn , long physicalNetworkId , String trafficType , String xenPublicLabel , String kvmPublicLabel , String vmwarePublicLabel ) { \n \n \t2 <comment> \n \n \t2 PreparedStatement pstmtUpdate = null ; \n \n \t2 try { \n \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \n \t2 if ( ! PackManager . v ( ) . hasPhase ( <string_literal> ) ) \n \n \t3 logger . warn ( <string_literal> ) ; \n \n \t2 if ( ! PackManager . v ( ) . hasPhase ( <string_literal> ) ) \n \n <ect>
\t2 if ( ! requestedProvider . isPresent ( ) ) { \n \n \t3 LOGGER . debug ( <string_literal> ) ; \n \n \t3 return Pair . of ( Boolean . FALSE , Optional . empty ( ) ) ; } \n \n \t2 if ( contexts . stream ( ) . filter ( ctx - > ctx . toString ( ) . equals ( requestedContext ) ) . count ( ) > 0 ) { \n \n <ect>
\t2 logger . debug ( <string_literal> + evt . getSourceMessage ( ) . getContent ( ) ) ; \n \n \t2 Message transformedMessage = \n \n \t3 createMessage ( evt . getSourceContact ( ) , evt . getSourceMessage ( ) , \n \n \t4 <string_literal> ) ; \n \n <ect>
\t3 + <string_literal> + udfs . get ( fn . getClassName ( ) ) ) ; } \n \n \t1 udfs . put ( fn . getClassName ( ) , fqfn ) ; \n \n \t1 List < ResourceUri > resources = fn . getResourceUris ( ) ; \n \n \t1 if ( resources == null || resources . isEmpty ( ) ) { \n \n <ect>
public FileStatus getHiveJarDirectory ( Configuration conf ) throws IOException , LoginException { \n \n \t1 FileStatus fstatus = null ; \n \n \t1 String hdfsDirPathStr = HiveConf . getVar ( conf , HiveConf . ConfVars . HIVE_JAR_DIRECTORY , ( String ) null ) ; \n \n \t1 if ( hdfsDirPathStr != null ) { \n \n <ect>
\t1 assertTrue ( <string_literal> , \n \n \t2 blockUntilCompactionRunning ( tableName ) ) ; \n \n \t1 <comment> \n \n \t1 connector . tableOperations ( ) . cancelCompaction ( tableName ) ; \n \n <ect>
\t3 try { \n \n \t3 fcall . sendResponse ( fb , result , org . apache . thrift . protocol . TMessageType . REPLY , seqid ) ; \n \n \t3 return ; \n \n \t3 } catch ( Exception e ) { \n \n <ect>
\t1 if ( getLockPath ( ) != null ) \n \n \t1 zooKeeper . getZooKeeper ( ) . setData ( getLockPath ( ) , b , - 1 ) ; } \n \n @ Override \n \n public synchronized void process ( WatchedEvent event ) { \n \n <ect>
\t2 } else { \n \n \t3 method = null ; \n \n \t3 error = new UnsupportedOperationException ( <string_literal> ) ; } \n \n \t2 if ( error == null ) { \n \n <ect>