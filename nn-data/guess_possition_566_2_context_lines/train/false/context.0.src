throw new parse <identifiersep> exception ( tpe . get <identifiersep> message ( ) , 0 ) ; } catch ( dnssec <identifiersep> runtime <identifiersep> exception e ) { throw new dnssec <identifiersep> exception ( e ) ; } if ( records == null ) <LOG> { return null ; } list < string [ ] > rec <identifiersep> vals = new array <identifiersep> list < > ( records . length ) ; for ( int i = 0 ; i < records . length ; i ++ ) { string [ ] rec <identifiersep> val = new string [ <number_literal> ] ; <ect>
: ( ( a <identifiersep> record ) r ) . get <identifiersep> address ( ) . get <identifiersep> address ( ) ) , port ) ) ; } catch ( unknown <identifiersep> host <identifiersep> exception e ) <LOG> { } } } v6lookup = ! v6lookup ; logger . trace ( <string_literal> + addresses ) ; return addresses . to <identifiersep> array ( new inet <identifiersep> socket <identifiersep> address [ 0 ] ) ; } <comment> <ect>
<comment> <LOG> { throw new parse <identifiersep> exception ( tpe . get <identifiersep> message ( ) , 0 ) ; } catch ( dnssec <identifiersep> runtime <identifiersep> exception e ) { throw new dnssec <identifiersep> exception ( e ) ; <ect>
<comment> <LOG> { throw new parse <identifiersep> exception ( tpe . get <identifiersep> message ( ) , 0 ) ; } catch ( dnssec <identifiersep> runtime <identifiersep> exception e ) { throw new dnssec <identifiersep> exception ( e ) ; <ect>
enumeration < network <identifiersep> interface > ifaces ; try { ifaces = network <identifiersep> interface . get <identifiersep> network <identifiersep> interfaces ( ) ; } catch ( socket <identifiersep> exception e ) <LOG> { return in4 <identifiersep> addr <identifiersep> any ; } while ( ifaces . has <identifiersep> more <identifiersep> elements ( ) ) { enumeration < inet <identifiersep> address > addrs = ifaces . next <identifiersep> element ( ) . get <identifiersep> inet <identifiersep> addresses ( ) ; <ect>
{ protocol <identifiersep> provider . register ( sec <identifiersep> auth ) ; } catch ( operation <identifiersep> failed <identifiersep> exception ex ) { handle <identifiersep> operation <identifiersep> failed <identifiersep> exception ( ex ) ; } catch ( throwable ex ) <LOG> { account <identifiersep> id account <identifiersep> id = protocol <identifiersep> provider . get <identifiersep> account <identifiersep> id ( ) ; util <identifiersep> activator . get <identifiersep> alert <identifiersep> ui <identifiersep> service ( ) . show <identifiersep> alert <identifiersep> dialog ( util <identifiersep> activator . get <identifiersep> resources ( ) . get <identifiersep> i18n <identifiersep> string ( <string_literal> ) , util <identifiersep> activator . get <identifiersep> resources ( ) <ect>
return parser . parse ( in ) ; } finally { in . close ( ) ; } } catch ( exception ex ) <LOG> { return html ; } } <comment> private static class html <identifiersep> parser <identifiersep> callback <ect>
int min <identifiersep> port = integer . parse <identifiersep> int ( new <identifiersep> min <identifiersep> port <identifiersep> string ) ; int max <identifiersep> port = integer . parse <identifiersep> int ( new <identifiersep> max <identifiersep> port <identifiersep> string ) ; return new port <identifiersep> tracker ( min <identifiersep> port , max <identifiersep> port ) ; } catch ( exception exc ) <comment> <LOG> + <string_literal> + new <identifiersep> max <identifiersep> port <identifiersep> string + <string_literal> ) ; return null ; } } } <ect>
<comment> public void start ( bundle <identifiersep> context bundle <identifiersep> context ) throws exception { <comment> <LOG> service <identifiersep> impl = create <identifiersep> service <identifiersep> impl ( ) ; bundle <identifiersep> context . register <identifiersep> service ( service <identifiersep> class . get <identifiersep> name ( ) , service <identifiersep> impl , <ect>
{ phones <identifiersep> list . add ( number ) ; continue ; } phones <identifiersep> list . add ( number + <string_literal> + get <identifiersep> localized <identifiersep> phone <identifiersep> number ( d ) + <string_literal> ) ; } } } } catch ( throwable t ) <LOG> { } } return phones <identifiersep> list ; } <comment> <ect>
{ <comment> <LOG> <comment> <ect>
if ( loopback == null ) { loopback = network <identifiersep> interface . get <identifiersep> network <identifiersep> interfaces ( ) . next <identifiersep> element ( ) ; } } catch ( socket <identifiersep> exception exc ) { <LOG> <comment> <ect>
catch ( exception exc ) { logger . error ( <string_literal> , exc ) ; return null ; } string lock <identifiersep> address <identifiersep> str = lock <identifiersep> properties . get <identifiersep> property ( pname <identifiersep> lock <identifiersep> address ) ; if ( lock <identifiersep> address <identifiersep> str == null ) <LOG> { return null ; } string lock <identifiersep> port = lock <identifiersep> properties . get <identifiersep> property ( pname <identifiersep> lock <identifiersep> port ) ; if ( lock <identifiersep> port == null ) { logger . error ( <string_literal> ) ; <ect>
if ( lock <identifiersep> port == null ) { logger . error ( <string_literal> ) ; return null ; } inet <identifiersep> address lock <identifiersep> address = find <identifiersep> local <identifiersep> address ( lock <identifiersep> address <identifiersep> str ) ; if ( lock <identifiersep> address == null ) <LOG> { return null ; } int port ; try { port = integer . parse <identifiersep> int ( lock <identifiersep> port ) ; <ect>
<string_literal> + <string_literal> ) ; } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { e . print <identifiersep> stack <identifiersep> trace ( ) ; } catch ( io <identifiersep> exception e ) <LOG> { return lock <identifiersep> error ; } return success ; } <comment> <ect>
print <identifiersep> stream . flush ( ) ; print <identifiersep> stream . close ( ) ; inter <identifiersep> instance <identifiersep> socket . close ( ) ; } <comment> <LOG> { return lock <identifiersep> error ; } return success ; } <comment> <ect>
{ buffered <identifiersep> reader line <identifiersep> reader = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( inter <identifiersep> instance <identifiersep> socket . get <identifiersep> input <identifiersep> stream ( ) ) ) ; <comment> <LOG> message = line <identifiersep> reader . read <identifiersep> line ( ) ; synchronized ( this ) { notify <identifiersep> all ( ) ; } } catch ( io <identifiersep> exception exc ) { <ect>
<comment> public void handle <identifiersep> unknown <identifiersep> arg ( string arg ) <LOG> { handle <identifiersep> help <identifiersep> arg ( ) ; } <comment> <ect>
<comment> public void handle <identifiersep> help <identifiersep> arg ( ) { handle <identifiersep> version <identifiersep> arg ( ) ; <LOG> system . out . println ( <string_literal> + get <identifiersep> package <identifiersep> name ( ) + <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; <ect>
<comment> public void handle <identifiersep> help <identifiersep> arg ( ) { handle <identifiersep> version <identifiersep> arg ( ) ; system . out . println ( <string_literal> + get <identifiersep> package <identifiersep> name ( ) + <string_literal> ) ; system . out . println ( <string_literal> ) ; <LOG> system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; <ect>
{ handle <identifiersep> version <identifiersep> arg ( ) ; system . out . println ( <string_literal> + get <identifiersep> package <identifiersep> name ( ) + <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; <LOG> system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; } <comment> <ect>
system . out . println ( <string_literal> + get <identifiersep> package <identifiersep> name ( ) + <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; <LOG> system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; } <comment> <ect>
system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; system . out . println ( <string_literal> ) ; <LOG> system . out . println ( <string_literal> ) ; } <comment> <ect>
public void start ( bundle <identifiersep> context context ) throws exception { bundle <identifiersep> context = context ; if ( os <identifiersep> utils . is <identifiersep> android ) <LOG> load <identifiersep> logging <identifiersep> config ( ) ; thread . set <identifiersep> default <identifiersep> uncaught <identifiersep> exception <identifiersep> handler ( this ) ; } <comment> <ect>
@ override protected plugin <identifiersep> component get <identifiersep> plugin <identifiersep> instance ( ) { return new about <identifiersep> window <identifiersep> plugin <identifiersep> component ( get <identifiersep> container ( ) , this ) ; } } , <LOG> help <identifiersep> menu <identifiersep> filter ) ; <comment> <ect>
{ bg <identifiersep> image = image <identifiersep> io . read ( branding <identifiersep> activator . get <identifiersep> resources ( ) . get <identifiersep> image <identifiersep> url ( <string_literal> ) ) ; this . set <identifiersep> preferred <identifiersep> size ( new dimension ( bg <identifiersep> image . get <identifiersep> width ( this ) , bg <identifiersep> image . get <identifiersep> height ( this ) ) ) ; } catch ( io <identifiersep> exception e ) <LOG> { bg <identifiersep> image = null ; } } @ override protected void paint <identifiersep> component ( graphics g ) { super . paint <identifiersep> component ( g ) ; <ect>
document . insert <identifiersep> after <identifiersep> end ( root . get <identifiersep> element ( root . get <identifiersep> element <identifiersep> count ( ) - 1 ) , text ) ; } catch ( bad <identifiersep> location <identifiersep> exception e ) { logger . error ( <string_literal> , e ) ; } catch ( io <identifiersep> exception e ) <LOG> { } } public void insert <identifiersep> after <identifiersep> start ( string text ) { element root = this . document . get <identifiersep> default <identifiersep> root <identifiersep> element ( ) ; try { this . document . insert <identifiersep> before <identifiersep> start ( root <ect>
element root = this . document . get <identifiersep> default <identifiersep> root <identifiersep> element ( ) ; try { this . document . insert <identifiersep> before <identifiersep> start ( root . get <identifiersep> element ( 0 ) , text ) ; } catch ( bad <identifiersep> location <identifiersep> exception e ) { logger . error ( <string_literal> , e ) ; <LOG> } catch ( io <identifiersep> exception e ) { } } } <ect>
try { <comment> <LOG> { } boolean has <identifiersep> registered <identifiersep> accounts = false ; if ( ser <identifiersep> refs != null ) { for ( service <identifiersep> reference ser <identifiersep> ref : ser <identifiersep> refs ) { <ect>
image image = null ; try { image = image <identifiersep> io . read ( new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( wizard . get <identifiersep> page <identifiersep> image ( ) ) ) ; } catch ( io <identifiersep> exception e ) <LOG> { } if ( image != null ) { image = image . get <identifiersep> scaled <identifiersep> instance ( <number_literal> , <number_literal> , image . scale <identifiersep> smooth ) ; protocol <identifiersep> label . set <identifiersep> icon ( new image <identifiersep> icon ( image ) ) ; } if ( is <identifiersep> preferred <identifiersep> wizard ) <ect>
{ <comment> <LOG> { } for ( int i = 0 ; i < ser <identifiersep> refs . length ; i ++ ) { protocol <identifiersep> provider <identifiersep> factory provider <identifiersep> factory = ( protocol <identifiersep> provider <identifiersep> factory ) bundle <identifiersep> context . get <identifiersep> service ( ser <identifiersep> refs [ i ] ) ; provider <identifiersep> factories <identifiersep> map <ect>
<string_literal> ) , resources . get <identifiersep> i18n <identifiersep> string ( <string_literal> ) , popup <identifiersep> dialog . information <identifiersep> message ) ; } catch ( exception e ) <LOG> { } finally { <comment> <ect>
tools <identifiersep> menu <identifiersep> filter ) ; } <comment> <LOG> { <comment> <ect>
} ; m <identifiersep> update <identifiersep> executor = executors . new <identifiersep> single <identifiersep> thread <identifiersep> scheduled <identifiersep> executor ( ) ; m <identifiersep> update <identifiersep> executor . schedule <identifiersep> at <identifiersep> fixed <identifiersep> rate ( update <identifiersep> runnable , hours <identifiersep> to <identifiersep> wait , <number_literal> * <number_literal> * <number_literal> , <LOG> time <identifiersep> unit . seconds ) ; } } <comment> @ override <ect>
. parse ( resources . get <identifiersep> property <identifiersep> input <identifiersep> stream ( <string_literal> ) ) ; } catch ( sax <identifiersep> exception e ) { logger . error ( <string_literal> , e ) ; } catch ( parser <identifiersep> configuration <identifiersep> exception e ) <LOG> { } catch ( io <identifiersep> exception e ) { logger . error ( <string_literal> , e ) ; } element root = server <identifiersep> comments . get <identifiersep> document <identifiersep> element ( ) ; comments <identifiersep> list = root . get <identifiersep> elements <identifiersep> by <identifiersep> tag <identifiersep> name ( <string_literal> ) ; <ect>
{ j <identifiersep> button register <identifiersep> button = new j <identifiersep> button ( text ) ; register <identifiersep> button . add <identifiersep> action <identifiersep> listener ( new action <identifiersep> listener ( ) { public void action <identifiersep> performed ( action <identifiersep> event evt ) <LOG> { if ( parent <identifiersep> form . is <identifiersep> web <identifiersep> signup <identifiersep> supported ( ) ) { parent <identifiersep> form . web <identifiersep> signup ( ) ; } } } ) ; return register <identifiersep> button ; <ect>
+ <string_literal> + protocol <identifiersep> names . jabber + <string_literal> ; try { ser <identifiersep> refs = bundle <identifiersep> context . get <identifiersep> service <identifiersep> references ( protocol <identifiersep> provider <identifiersep> factory . class . get <identifiersep> name ( ) , osgi <identifiersep> filter ) ; } catch ( invalid <identifiersep> syntax <identifiersep> exception ex ) <LOG> { } return ( protocol <identifiersep> provider <identifiersep> factory ) bundle <identifiersep> context . get <identifiersep> service ( ser <identifiersep> refs [ 0 ] ) ; } <comment> <ect>
<comment> public void start ( bundle <identifiersep> context bc ) <LOG> { bundle <identifiersep> context = bc ; service <identifiersep> reference ui <identifiersep> service <identifiersep> ref = bundle <identifiersep> context . get <identifiersep> service <identifiersep> reference ( ui <identifiersep> service . class . get <identifiersep> name ( ) ) ; ui <identifiersep> service = ( ui <identifiersep> service ) bundle <identifiersep> context . get <identifiersep> service ( ui <identifiersep> service <identifiersep> ref ) ; wizard <identifiersep> container = ui <identifiersep> service . get <identifiersep> account <identifiersep> reg <identifiersep> wizard <identifiersep> container ( ) ; <ect>
= ( ( blf <identifiersep> source <identifiersep> contact ) action <identifiersep> source ) . get <identifiersep> line ( ) ; operation <identifiersep> set <identifiersep> telephony <identifiersep> blf opset = line . get <identifiersep> provider ( ) . get <identifiersep> operation <identifiersep> set ( operation <identifiersep> set <identifiersep> telephony <identifiersep> blf . class ) ; opset . pickup ( line ) ; } catch ( exception ex ) <LOG> { } } } ) . start ( ) ; } <comment> <ect>
container <identifiersep> filter . put ( protocol <identifiersep> provider <identifiersep> factory . protocol , protocol <identifiersep> names . irc ) ; bundle <identifiersep> context . register <identifiersep> service ( account <identifiersep> registration <identifiersep> wizard . class . get <identifiersep> name ( ) , irc <identifiersep> wizard , container <identifiersep> filter ) ; <LOG> { } } <comment> <ect>
bundle <identifiersep> context . register <identifiersep> service ( configuration <identifiersep> form . class . get <identifiersep> name ( ) , panel , properties ) ; } } ) . start ( ) ; } <LOG> } ) ; } <comment> <ect>
cbo <identifiersep> alias . set <identifiersep> selected <identifiersep> item ( entry . get <identifiersep> alias ( ) ) ; } } catch ( key <identifiersep> store <identifiersep> exception ex ) { logger . error ( <string_literal> , ex ) ; show <identifiersep> generic <identifiersep> error ( <string_literal> , ex ) ; } catch ( provider <identifiersep> exception ex ) <LOG> { show <identifiersep> generic <identifiersep> error ( <string_literal> , ex ) ; } } private void init <identifiersep> components ( ) { set <identifiersep> title ( r . get <identifiersep> i18n <identifiersep> string ( <string_literal> ) ) ; set <identifiersep> layout ( new border <identifiersep> layout ( ) ) ; <ect>
) && cbo <identifiersep> alias . get <identifiersep> selected <identifiersep> item ( ) != null ) { txt <identifiersep> display <identifiersep> name . set <identifiersep> text ( cbo <identifiersep> alias . get <identifiersep> selected <identifiersep> item ( ) . to <identifiersep> string ( ) ) ; } } catch ( key <identifiersep> store <identifiersep> exception e ) { <LOG> cbo <identifiersep> alias . remove <identifiersep> all <identifiersep> items ( ) ; show <identifiersep> generic <identifiersep> error ( <string_literal> , e ) ; } } private void show <identifiersep> generic <identifiersep> error ( string msg , throwable e ) { j <identifiersep> option <identifiersep> pane . show <identifiersep> message <identifiersep> dialog ( this , <ect>
public void action <identifiersep> performed ( action <identifiersep> event e ) { try { set <identifiersep> autostart ( auto <identifiersep> start <identifiersep> check <identifiersep> box . is <identifiersep> selected ( ) ) ; } catch ( exception ex ) <LOG> { } } } ) ; try { auto <identifiersep> start <identifiersep> check <identifiersep> box . set <identifiersep> selected ( windows <identifiersep> startup . is <identifiersep> startup <identifiersep> enabled ( get <identifiersep> application <identifiersep> name ( ) ) ) ; <ect>
{ advapi32util . registry <identifiersep> delete <identifiersep> value ( win <identifiersep> reg . hkey <identifiersep> current <identifiersep> user , registry <identifiersep> startup <identifiersep> key , app <identifiersep> name ) ; } catch ( throwable t ) <LOG> { } } } } <ect>
else bundle <identifiersep> context . add <identifiersep> service <identifiersep> listener ( this ) ; } catch ( throwable t ) { <comment> <LOG> logger . error ( <string_literal> , t ) ; } } <comment> @ override <ect>
<comment> private void poly <identifiersep> operation ( mouse <identifiersep> event e ) <LOG> { graphics g = draw <identifiersep> canvas . get <identifiersep> graphics ( ) ; g . set <identifiersep> color ( current <identifiersep> color ) ; if ( done <identifiersep> drawing ) { re <identifiersep> init <identifiersep> mouse ( e ) ; <ect>
<comment> public void receive <identifiersep> whiteboard <identifiersep> object ( whiteboard <identifiersep> object wbo ) <LOG> { whiteboard <identifiersep> shape ws = create <identifiersep> whiteboard <identifiersep> shape ( wbo ) ; for ( int i = 0 ; i < display <identifiersep> list . size ( ) ; i ++ ) { whiteboard <identifiersep> shape wbs = display <identifiersep> list . get ( i ) ; if ( wbs . get <identifiersep> id ( ) . equals ( wbo . get <identifiersep> id ( ) ) ) <ect>
<comment> private whiteboard <identifiersep> shape create <identifiersep> whiteboard <identifiersep> shape ( whiteboard <identifiersep> object wbo ) <LOG> { whiteboard <identifiersep> shape w <identifiersep> shape = null ; string id = wbo . get <identifiersep> id ( ) ; int color = wbo . get <identifiersep> color ( ) ; int t = wbo . get <identifiersep> thickness ( ) ; if ( wbo instanceof whiteboard <identifiersep> object <identifiersep> path ) <ect>
color c = color . get <identifiersep> color ( <string_literal> , color ) ; list < whiteboard <identifiersep> point > points = path . get <identifiersep> points ( ) ; w <identifiersep> shape = new whiteboard <identifiersep> shape <identifiersep> path ( id , t , c , points ) ; } else if ( wbo instanceof whiteboard <identifiersep> object <identifiersep> poly <identifiersep> line ) { <LOG> whiteboard <identifiersep> object <identifiersep> poly <identifiersep> line p <identifiersep> line = ( whiteboard <identifiersep> object <identifiersep> poly <identifiersep> line ) wbo ; color c = color . get <identifiersep> color ( <string_literal> , color ) ; list < whiteboard <identifiersep> point > points = p <identifiersep> line . get <identifiersep> points ( ) ; w <identifiersep> shape = new whiteboard <identifiersep> shape <identifiersep> poly <identifiersep> line ( id , t , c , points , false ) ; } else if ( wbo instanceof whiteboard <identifiersep> object <identifiersep> polygon ) <ect>
list < whiteboard <identifiersep> point > points = polygon . get <identifiersep> points ( ) ; boolean fill = polygon . is <identifiersep> fill ( ) ; w <identifiersep> shape = new whiteboard <identifiersep> shape <identifiersep> polygon ( id , t , c , points , fill ) ; } else if ( wbo instanceof whiteboard <identifiersep> object <identifiersep> line ) { <LOG> whiteboard <identifiersep> object <identifiersep> line line = ( whiteboard <identifiersep> object <identifiersep> line ) wbo ; whiteboard <identifiersep> point p <identifiersep> start = line . get <identifiersep> whiteboard <identifiersep> point <identifiersep> start ( ) ; whiteboard <identifiersep> point p <identifiersep> end = line . get <identifiersep> whiteboard <identifiersep> point <identifiersep> end ( ) ; color c = color . get <identifiersep> color ( <string_literal> , color ) ; w <identifiersep> shape = new whiteboard <identifiersep> shape <identifiersep> line ( id , t , c , p <identifiersep> start , p <identifiersep> end ) ; } else if ( wbo instanceof whiteboard <identifiersep> object <identifiersep> rect ) <ect>
wb <identifiersep> frames . add ( wb <identifiersep> frame ) ; wb <identifiersep> frame . set <identifiersep> contact ( contact ) ; wb <identifiersep> frame . set <identifiersep> visible ( true ) ; wb <identifiersep> session . join ( ) ; wb <identifiersep> session . invite ( contact . get <identifiersep> address ( ) ) ; } catch ( operation <identifiersep> failed <identifiersep> exception e ) <LOG> { } catch ( operation <identifiersep> not <identifiersep> supported <identifiersep> exception e ) { logger . error ( <string_literal> , e ) ; } } } . start ( ) ; <ect>
{ string master ; boolean correct = true ; master <identifiersep> password <identifiersep> input <identifiersep> service master <identifiersep> password <identifiersep> input <identifiersep> service = security <identifiersep> config <identifiersep> activator . get <identifiersep> master <identifiersep> password <identifiersep> input <identifiersep> service ( ) ; if ( master <identifiersep> password <identifiersep> input <identifiersep> service == null ) <LOG> { return ; } do { master = master <identifiersep> password <identifiersep> input <identifiersep> service . show <identifiersep> input <identifiersep> dialog ( correct ) ; if ( master == null ) <ect>
else { title = <string_literal> ; msg = <string_literal> ; <comment> <LOG> change <identifiersep> master <identifiersep> password <identifiersep> button . set <identifiersep> enabled ( true ) ; } security <identifiersep> config <identifiersep> activator . get <identifiersep> ui <identifiersep> service ( ) . get <identifiersep> popup <identifiersep> dialog ( ) . show <identifiersep> message <identifiersep> popup <identifiersep> dialog ( resources . get <identifiersep> i18n <identifiersep> string ( msg ) , <ect>
<comment> private void handle <identifiersep> provider <identifiersep> added ( protocol <identifiersep> provider <identifiersep> service provider ) <LOG> { <comment> <ect>
= provider . get <identifiersep> operation <identifiersep> set ( operation <identifiersep> set <identifiersep> sms <identifiersep> messaging . class ) ; if ( op <identifiersep> set <identifiersep> sms != null ) { op <identifiersep> set <identifiersep> sms . add <identifiersep> message <identifiersep> listener ( this ) ; } else <LOG> { } operation <identifiersep> set <identifiersep> multi <identifiersep> user <identifiersep> chat op <identifiersep> set <identifiersep> multi <identifiersep> u <identifiersep> chat = provider . get <identifiersep> operation <identifiersep> set ( operation <identifiersep> set <identifiersep> multi <identifiersep> user <identifiersep> chat . class ) ; if ( op <identifiersep> set <identifiersep> multi <identifiersep> u <identifiersep> chat != null ) { for ( chat <identifiersep> room room : op <identifiersep> set <identifiersep> multi <identifiersep> u <identifiersep> chat . get <identifiersep> currently <identifiersep> joined <identifiersep> chat <identifiersep> rooms ( ) ) <ect>
if ( os <identifiersep> utils . is <identifiersep> mac ) com . apple . eawt . application . get <identifiersep> application ( ) . request <identifiersep> user <identifiersep> attention ( true ) ; else alerter . new <identifiersep> instance ( ) . alert ( fr ) ; } catch ( throwable ex ) <LOG> { } } <comment> <ect>
{ start <identifiersep> internal ( bundle <identifiersep> context ) ; } else if ( ! configuration <identifiersep> utils . is <identifiersep> alerter <identifiersep> enabled ( ) && started ) { stop <identifiersep> internal ( bundle <identifiersep> context ) ; } } catch ( throwable t ) <LOG> { } } <comment> <ect>
otr <identifiersep> activator . bundle <identifiersep> context , otr <identifiersep> action <identifiersep> handler . class ) ; if ( action <identifiersep> handler != null ) { action <identifiersep> handler . on <identifiersep> authenticate <identifiersep> link <identifiersep> clicked ( guid ) ; } else <LOG> { } } } @ override public void end <identifiersep> session ( otr <identifiersep> contact otr <identifiersep> contact ) { session <identifiersep> id session <identifiersep> id = get <identifiersep> session <identifiersep> id ( otr <identifiersep> contact ) ; try <ect>
scheduler . schedule <identifiersep> sc <identifiersep> session <identifiersep> status <identifiersep> change ( otr <identifiersep> contact , sc <identifiersep> session <identifiersep> status . timed <identifiersep> out ) ; try { otr <identifiersep> engine . get <identifiersep> session ( session <identifiersep> id ) . start <identifiersep> session ( ) ; } catch ( otr <identifiersep> exception e ) <LOG> { show <identifiersep> error ( session <identifiersep> id , e . get <identifiersep> message ( ) ) ; } } @ override public string transform <identifiersep> receiving ( otr <identifiersep> contact otr <identifiersep> contact , string msg <identifiersep> text ) { session <identifiersep> id session <identifiersep> id = get <identifiersep> session <identifiersep> id ( otr <identifiersep> contact ) ; <ect>
{ session <identifiersep> id session <identifiersep> id = get <identifiersep> session <identifiersep> id ( otr <identifiersep> contact ) ; try { return otr <identifiersep> engine . get <identifiersep> session ( session <identifiersep> id ) . transform <identifiersep> sending ( msg <identifiersep> text ) ; } catch ( otr <identifiersep> exception e ) <LOG> { show <identifiersep> error ( session <identifiersep> id , e . get <identifiersep> message ( ) ) ; return null ; } } private session get <identifiersep> session ( otr <identifiersep> contact contact ) { session <identifiersep> id session <identifiersep> id = get <identifiersep> session <identifiersep> id ( contact ) ; <ect>
logger . trace ( <string_literal> + s <identifiersep> service . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; } <comment> <LOG> return ; if ( service <identifiersep> event . get <identifiersep> type ( ) == service <identifiersep> event . registered ) { { logger . debug ( <ect>
return ; this . otr <identifiersep> contact = otr <identifiersep> contact ; this . set <identifiersep> status ( otr <identifiersep> activator . sc <identifiersep> otr <identifiersep> engine . get <identifiersep> session <identifiersep> status ( otr <identifiersep> contact ) ) ; this . set <identifiersep> policy ( otr <identifiersep> activator . sc <identifiersep> otr <identifiersep> engine . get <identifiersep> contact <identifiersep> policy ( contact ) ) ; <LOG> return ; } } } <comment> @ override public void set <identifiersep> current <identifiersep> contact ( meta <identifiersep> contact meta <identifiersep> contact ) <ect>
try { resource <identifiersep> bundle resource <identifiersep> bundle = resource <identifiersep> bundle . get <identifiersep> bundle ( default <identifiersep> image <identifiersep> resource <identifiersep> path ) ; this . init <identifiersep> resources ( resource <identifiersep> bundle , resources ) ; } catch ( missing <identifiersep> resource <identifiersep> exception ex ) <LOG> { } this . init <identifiersep> image <identifiersep> plugin <identifiersep> resources ( resources ) ; image <identifiersep> resources = resources ; return resources ; } <comment> <ect>
try { resource <identifiersep> bundle resource <identifiersep> bundle = resource <identifiersep> bundle . get <identifiersep> bundle ( default <identifiersep> color <identifiersep> resource <identifiersep> path ) ; this . init <identifiersep> resources ( resource <identifiersep> bundle , resources ) ; } catch ( missing <identifiersep> resource <identifiersep> exception ex ) <LOG> { } this . init <identifiersep> color <identifiersep> plugin <identifiersep> resources ( resources ) ; color <identifiersep> resources = resources ; return resources ; } <comment> <ect>
+ <string_literal> + protocol <identifiersep> names . sip + <string_literal> ; try { ser <identifiersep> refs = bundle <identifiersep> context . get <identifiersep> service <identifiersep> references ( protocol <identifiersep> provider <identifiersep> factory . class . get <identifiersep> name ( ) , osgi <identifiersep> filter ) ; } catch ( invalid <identifiersep> syntax <identifiersep> exception ex ) <LOG> { } return ( protocol <identifiersep> provider <identifiersep> factory ) bundle <identifiersep> context . get <identifiersep> service ( ser <identifiersep> refs [ 0 ] ) ; } <comment> <ect>
configuration <identifiersep> form . general <identifiersep> type ) ; bundle <identifiersep> context . register <identifiersep> service ( configuration <identifiersep> form . class . get <identifiersep> name ( ) , new lazy <identifiersep> configuration <identifiersep> form ( <string_literal> , get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) , <string_literal> , <LOG> <string_literal> , <number_literal> ) , properties ) ; } <comment> <ect>
<comment> private void handle <identifiersep> provider <identifiersep> removed ( protocol <identifiersep> provider <identifiersep> service provider ) <LOG> { if ( has <identifiersep> at <identifiersep> least <identifiersep> one <identifiersep> successful <identifiersep> connection ( provider ) ) { set <identifiersep> at <identifiersep> least <identifiersep> one <identifiersep> successful <identifiersep> connection ( provider , false ) ; } provider . remove <identifiersep> registration <identifiersep> state <identifiersep> change <identifiersep> listener ( this ) ; auto <identifiersep> reconn <identifiersep> enabled <identifiersep> providers . remove ( provider ) ; <ect>
+ <string_literal> + evt . get <identifiersep> reason ( ) + <string_literal> + evt . get <identifiersep> reason <identifiersep> code ( ) + <string_literal> + evt . get <identifiersep> old <identifiersep> state ( ) , new exception ( <string_literal> ) ) ; } trace <identifiersep> current <identifiersep> pp <identifiersep> state ( ) ; } } } catch ( throwable ex ) <LOG> { } } } <comment> private void reconnect ( final protocol <identifiersep> provider <identifiersep> service pp ) <ect>
@ override protected plugin <identifiersep> component get <identifiersep> plugin <identifiersep> instance ( ) { return new example <identifiersep> plugin <identifiersep> menu <identifiersep> item ( this ) ; } } , <LOG> container <identifiersep> filter ) ; } <comment> <ect>
<comment> <LOG> { } map < object , protocol <identifiersep> provider <identifiersep> factory > provider <identifiersep> factories <identifiersep> map = new hashtable < object , protocol <identifiersep> provider <identifiersep> factory > ( ) ; if ( ser <identifiersep> refs != null ) { for ( service <identifiersep> reference ser <identifiersep> ref : ser <identifiersep> refs ) <ect>
if ( security <identifiersep> event instanceof call <identifiersep> peer <identifiersep> security <identifiersep> on <identifiersep> event ) fire <identifiersep> notification ( call <identifiersep> security <identifiersep> on ) ; } } catch ( throwable t ) { if ( t instanceof thread <identifiersep> death ) throw ( thread <identifiersep> death ) t ; <LOG> else } } <comment> <ect>
source <identifiersep> chat <identifiersep> room , incoming <identifiersep> message , title , html <identifiersep> content , evt . get <identifiersep> message ( ) . get <identifiersep> message <identifiersep> uid ( ) ) ; } } catch ( throwable t ) <LOG> { } } <comment> <ect>
evt . get <identifiersep> source <identifiersep> contact ( ) , incoming <identifiersep> message , title , html <identifiersep> content , source <identifiersep> msg . get <identifiersep> message <identifiersep> uid ( ) ) ; } catch ( throwable t ) <LOG> { } } <comment> public void outgoing <identifiersep> call <identifiersep> created ( call <identifiersep> event event ) <ect>
logger . info ( <string_literal> ) ; <comment> <LOG> new notification <identifiersep> manager ( ) . init ( ) ; } finally { logger . log <identifiersep> exit ( ) ; } } public void stop ( bundle <identifiersep> context bc ) throws exception { <ect>
new global <identifiersep> shortcut <identifiersep> table <identifiersep> model ( ) ; <comment> public global <identifiersep> shortcut <identifiersep> config <identifiersep> form ( ) { <LOG> super ( new border <identifiersep> layout ( ) ) ; this . init <identifiersep> components ( ) ; } <comment> private void init <identifiersep> components ( ) <ect>
. get <identifiersep> string ( <string_literal> ) + ex . get <identifiersep> message ( ) ; dialog . show <identifiersep> message <identifiersep> popup <identifiersep> dialog ( message , resources . get <identifiersep> string ( <string_literal> ) , <LOG> popup <identifiersep> dialog . warning <identifiersep> message ) ; } } } ) ; } @ override public string get <identifiersep> name ( ) { return <string_literal> ; <ect>
{ parse <identifiersep> locales ( node . get <identifiersep> child <identifiersep> nodes ( ) ) ; } else { logger . warn ( <string_literal> + node . get <identifiersep> node <identifiersep> name ( ) ) ; } } } catch ( io <identifiersep> exception exc ) <LOG> { } catch ( sax <identifiersep> exception exc ) { logger . error ( <string_literal> , exc ) ; } catch ( parser <identifiersep> configuration <identifiersep> exception exc ) { <ect>
{ logger . error ( <string_literal> , exc ) ; } catch ( sax <identifiersep> exception exc ) { logger . error ( <string_literal> , exc ) ; } catch ( parser <identifiersep> configuration <identifiersep> exception exc ) <LOG> { } } <comment> <ect>
word <identifiersep> start = end ; } } } catch ( bad <identifiersep> location <identifiersep> exception exc ) { string msg = <string_literal> ; logger . error ( msg , exc ) ; } catch ( throwable exc ) <LOG> { } prompt <identifiersep> repaint ( ) ; } public void remove <identifiersep> update ( document <identifiersep> event event ) { if ( ! this . is <identifiersep> enabled ) return ; <ect>
{ return get <identifiersep> corrections ( word . get <identifiersep> word ( comp . get <identifiersep> document ( ) . get <identifiersep> text ( 0 , comp . get <identifiersep> document ( ) . get <identifiersep> length ( ) ) , index , false ) ) ; } } catch ( bad <identifiersep> location <identifiersep> exception e ) <LOG> { } } j <identifiersep> menu <identifiersep> item spell <identifiersep> check = new j <identifiersep> menu <identifiersep> item ( resources . get <identifiersep> i18n <identifiersep> string ( <string_literal> ) ) ; array <identifiersep> list < j <identifiersep> menu <identifiersep> item > spell <identifiersep> check <identifiersep> item = new array <identifiersep> list < j <identifiersep> menu <identifiersep> item > ( ) ; <ect>
if ( ! swing <identifiersep> utilities . is <identifiersep> event <identifiersep> dispatch <identifiersep> thread ( ) ) swing <identifiersep> utilities . invoke <identifiersep> and <identifiersep> wait ( creator ) ; else creator . run ( ) ; return creator . menu <identifiersep> bar ; } catch ( throwable t ) <LOG> { } return null ; } } , container <identifiersep> filter ) ; } <comment> <ect>
spell <identifiersep> check <identifiersep> activator . get <identifiersep> ui <identifiersep> service ( ) . add <identifiersep> chat <identifiersep> listener ( spell <identifiersep> checker . this ) ; for ( chat chat : spell <identifiersep> check <identifiersep> activator . get <identifiersep> ui <identifiersep> service ( ) . get <identifiersep> all <identifiersep> chats ( ) ) chat <identifiersep> created ( chat ) ; } <LOG> } ) ; } <comment> synchronized void stop ( ) <ect>
try { <comment> <LOG> { return false ; } } <comment> <ect>
<string_literal> , get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) , <string_literal> , <string_literal> , <number_literal> ) , <LOG> properties ) ; } <comment> public void stop ( bundle <identifiersep> context bc ) throws exception <ect>
<comment> public void start ( final bundle <identifiersep> context context ) throws exception { <LOG> this . context = context ; handle <identifiersep> new <identifiersep> system <identifiersep> activity <identifiersep> notifications <identifiersep> service ( get <identifiersep> system <identifiersep> activity <identifiersep> notifications <identifiersep> service ( context ) ) ; <comment> <ect>
else mac <identifiersep> osx <identifiersep> addr <identifiersep> book <identifiersep> contact <identifiersep> query . remove <identifiersep> property ( id , mac <identifiersep> osx <identifiersep> addr <identifiersep> book <identifiersep> contact <identifiersep> query . abperson <identifiersep> properties [ ( ( mac <identifiersep> osx <identifiersep> addr <identifiersep> book <identifiersep> contact <identifiersep> detail ) detail ) . get <identifiersep> property ( ) ] ) ; } <LOG> else contact <identifiersep> details . remove ( detail ) ; } } <comment> <ect>
{ long time = new simple <identifiersep> date <identifiersep> format ( <string_literal> ) . parse ( props [ i ] + <string_literal> ) . get <identifiersep> time ( ) ; end <identifiersep> time = new date ( time ) ; } catch ( parse <identifiersep> exception e ) <LOG> { return ; } break ; case pid <identifiersep> lid <identifiersep> busy <identifiersep> status : status = busy <identifiersep> status <identifiersep> enum . get <identifiersep> from <identifiersep> long ( ( long ) props [ i ] ) ; break ; <ect>
{ presence . add <identifiersep> provider <identifiersep> presence <identifiersep> status <identifiersep> listener ( presence <identifiersep> status <identifiersep> listener ) ; } presence <identifiersep> status presence <identifiersep> status = presence . get <identifiersep> presence <identifiersep> status ( ) ; if ( presence <identifiersep> status == null ) <LOG> { <comment> <ect>
if ( props != null && props [ pr <identifiersep> object <identifiersep> type ] != null && props [ pr <identifiersep> object <identifiersep> type ] instanceof long ) { obj <identifiersep> type = ( ( long ) props [ pr <identifiersep> object <identifiersep> type ] ) . long <identifiersep> value ( ) ; } else <LOG> { return false ; } <comment> <ect>
{ try { plugin <identifiersep> manager <identifiersep> activator . bundle <identifiersep> context . install <identifiersep> bundle ( bundle <identifiersep> path <identifiersep> field . get <identifiersep> text ( ) ) ; } catch ( bundle <identifiersep> exception ex ) <LOG> { plugin <identifiersep> manager <identifiersep> activator . get <identifiersep> ui <identifiersep> service ( ) . get <identifiersep> popup <identifiersep> dialog ( ) . show <identifiersep> message <identifiersep> popup <identifiersep> dialog ( ex . get <identifiersep> message ( ) , <string_literal> , popup <identifiersep> dialog . error <identifiersep> message ) ; } catch ( throwable ex ) { <ect>
{ try { bundle <identifiersep> path <identifiersep> field . set <identifiersep> text ( new <identifiersep> bundle <identifiersep> file . to <identifiersep> uri ( ) . to <identifiersep> url ( ) . to <identifiersep> string ( ) ) ; } catch ( malformed <identifiersep> url <identifiersep> exception ex ) <LOG> { } } } else dispose ( ) ; } <comment> <ect>
{ try { ( ( bundle ) plugin <identifiersep> table . get <identifiersep> model ( ) . get <identifiersep> value <identifiersep> at ( selected <identifiersep> rows [ i ] , 0 ) ) . stop ( ) ; } catch ( bundle <identifiersep> exception ex ) <LOG> { plugin <identifiersep> manager <identifiersep> activator . get <identifiersep> ui <identifiersep> service ( ) . get <identifiersep> popup <identifiersep> dialog ( ) . show <identifiersep> message <identifiersep> popup <identifiersep> dialog ( ex . get <identifiersep> message ( ) , <string_literal> , popup <identifiersep> dialog . error <identifiersep> message ) ; } } default <identifiersep> button <identifiersep> state ( ) ; } else if ( source <identifiersep> button . equals ( uninstall <identifiersep> button ) ) <ect>
{ try { ( ( bundle ) plugin <identifiersep> table . get <identifiersep> model ( ) . get <identifiersep> value <identifiersep> at ( selected <identifiersep> rows [ i ] , 0 ) ) . update ( ) ; } catch ( bundle <identifiersep> exception ex ) <LOG> { plugin <identifiersep> manager <identifiersep> activator . get <identifiersep> ui <identifiersep> service ( ) . get <identifiersep> popup <identifiersep> dialog ( ) . show <identifiersep> message <identifiersep> popup <identifiersep> dialog ( ex . get <identifiersep> message ( ) , <string_literal> , popup <identifiersep> dialog . error <identifiersep> message ) ; } } <comment> <ect>
try { dialog . close ( false ) ; <comment> <LOG> { } } <comment> <ect>
if ( optional != null ) { add <identifiersep> file <identifiersep> to <identifiersep> zip ( optional , out ) ; } out . close ( ) ; return destination ; } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception ex ) <LOG> { } catch ( io <identifiersep> exception ex ) { logger . error ( <string_literal> , ex ) ; } return null ; } <comment> <ect>
for ( file f : fs ) { if ( f . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) ) continue ; add <identifiersep> file <identifiersep> to <identifiersep> zip ( f , out ) ; } } catch ( exception e ) <LOG> { } } <comment> <ect>
out . close <identifiersep> entry ( ) ; in . close ( ) ; } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { logger . error ( <string_literal> , ex ) ; } catch ( io <identifiersep> exception ex ) <LOG> { } } <comment> <ect>
{ logger . info ( <string_literal> + register <identifiersep> link , e1 ) ; } catch ( io <identifiersep> exception e1 ) <LOG> { } return new <identifiersep> account ; } <comment> <ect>
<comment> <LOG> { } if ( ser <identifiersep> refs != null ) { for ( service <identifiersep> reference ser <identifiersep> ref : ser <identifiersep> refs ) { protocol <identifiersep> provider <identifiersep> factory provider <identifiersep> factory <ect>
<comment> url = provdisc . discover <identifiersep> url ( ) ; break ; } } } provisioning <identifiersep> service . start ( url ) ; bundle <identifiersep> context . register <identifiersep> service ( <LOG> provisioning <identifiersep> service . class . get <identifiersep> name ( ) , provisioning <identifiersep> service , null ) ; } <comment> <ect>
@ override public boolean has <identifiersep> params ( string location ) { return location . contains ( <string_literal> ) ; } } ) ; } catch ( throwable t ) <LOG> { error <identifiersep> while <identifiersep> provisioning = t ; } <comment> <ect>
selector . select <identifiersep> no <identifiersep> skin ( ) ; new <identifiersep> bundle . start ( ) ; } catch ( malformed <identifiersep> url <identifiersep> exception ex ) { logger . info ( <string_literal> , ex ) ; } } } catch ( bundle <identifiersep> exception ex ) <LOG> { skin <identifiersep> manager <identifiersep> activator . get <identifiersep> ui <identifiersep> service ( ) . get <identifiersep> popup <identifiersep> dialog ( ) . show <identifiersep> message <identifiersep> popup <identifiersep> dialog ( ex . get <identifiersep> message ( ) , <string_literal> , popup <identifiersep> dialog . error <identifiersep> message ) ; } catch ( throwable ex ) { <ect>
container . container <identifiersep> call <identifiersep> dialog . get <identifiersep> id ( ) ) ; bundle <identifiersep> context . register <identifiersep> service ( plugin <identifiersep> component <identifiersep> factory . class . get <identifiersep> name ( ) , new contact <identifiersep> info <identifiersep> plugin <identifiersep> component <identifiersep> factory ( container . container <identifiersep> call <identifiersep> dialog ) , <LOG> container <identifiersep> filter ) ; } } public void stop ( bundle <identifiersep> context bc ) throws exception { } <comment> <ect>
= desktop <identifiersep> util <identifiersep> activator . get <identifiersep> resources ( ) ; res [ 0 ] = new chat <identifiersep> room <identifiersep> destroy <identifiersep> reason <identifiersep> dialog ( r . get <identifiersep> i18n <identifiersep> string ( <string_literal> ) , r . get <identifiersep> i18n <identifiersep> string ( <string_literal> ) ) ; } } ) ; } catch ( throwable t ) <LOG> { return null ; } chat <identifiersep> room <identifiersep> destroy <identifiersep> reason <identifiersep> dialog reason <identifiersep> dialog = res [ 0 ] ; int result = reason <identifiersep> dialog . show <identifiersep> dialog ( ) ; string destroy <identifiersep> options [ ] = new string [ <number_literal> ] ; if ( result == message <identifiersep> dialog . ok <identifiersep> return <identifiersep> code ) <ect>
= swing <identifiersep> utilities . get <identifiersep> window <identifiersep> ancestor ( popup <identifiersep> notification <identifiersep> panel . this ) ; parent <identifiersep> window . dispose ( ) ; } catch ( exception ex ) { <comment> <LOG> <comment> <ect>
if ( presence <identifiersep> op <identifiersep> set == null || ! protocol <identifiersep> provider . is <identifiersep> registered ( ) ) continue ; presence <identifiersep> op <identifiersep> set . publish <identifiersep> presence <identifiersep> status ( presence <identifiersep> op <identifiersep> set . get <identifiersep> presence <identifiersep> status ( ) , message ) ; } catch ( illegal <identifiersep> argument <identifiersep> exception e1 ) <LOG> { } catch ( illegal <identifiersep> state <identifiersep> exception e1 ) { logger . error ( <string_literal> , e1 ) ; } catch ( operation <identifiersep> failed <identifiersep> exception e1 ) { <ect>
{ image <identifiersep> byte = image <identifiersep> utils . to <identifiersep> byte <identifiersep> array ( image ) ; } try { op <identifiersep> set <identifiersep> avatar . set <identifiersep> avatar ( image <identifiersep> byte ) ; } catch ( throwable t ) <LOG> { } } } } } } } } . start ( ) ; } <comment> private void clear <identifiersep> recent <identifiersep> images ( ) <ect>
= desktop <identifiersep> util <identifiersep> activator . get <identifiersep> file <identifiersep> access <identifiersep> service ( ) . get <identifiersep> private <identifiersep> persistent <identifiersep> file ( file <identifiersep> name , file <identifiersep> category . cache ) ; if ( image <identifiersep> file . exists ( ) && ! image <identifiersep> file . delete ( ) ) logger . error ( <string_literal> + index ) ; } catch ( exception e ) { <LOG> <comment> <ect>
if ( ! image <identifiersep> file . exists ( ) ) return null ; try { return image <identifiersep> io . read ( image <identifiersep> file ) ; } catch ( io <identifiersep> exception ioe ) <LOG> { return null ; } } <comment> <ect>
location . x , location . y , video <identifiersep> container . get <identifiersep> width ( ) , video <identifiersep> container . get <identifiersep> height ( ) ) ) ; this . grabbed <identifiersep> image = image <identifiersep> utils . to <identifiersep> byte <identifiersep> array ( bi ) ; } catch ( throwable e ) <LOG> { } close ( false ) ; this . set <identifiersep> visible ( false ) ; } <comment> <ect>
public void run ( ) { try { presence <identifiersep> op <identifiersep> set . publish <identifiersep> presence <identifiersep> status ( current <identifiersep> status , message ) ; } catch ( illegal <identifiersep> argument <identifiersep> exception e1 ) <LOG> { } catch ( illegal <identifiersep> state <identifiersep> exception e1 ) { logger . error ( <string_literal> , e1 ) ; } catch ( operation <identifiersep> failed <identifiersep> exception e1 ) { <ect>
string stack <identifiersep> trace = sw . to <identifiersep> string ( ) ; try { sw . close ( ) ; } catch ( io <identifiersep> exception ex ) { <LOG> <comment> <ect>
image <identifiersep> icon = scale <identifiersep> image <identifiersep> within <identifiersep> bounds ( image , width , height ) ; else logger . trace ( <string_literal> ) ; } catch ( exception e ) <LOG> { } if ( image <identifiersep> icon != null ) return new image <identifiersep> icon ( image <identifiersep> icon ) ; return null ; } <comment> <ect>
break ; } } else logger . trace ( <string_literal> ) ; } catch ( exception e ) <LOG> { } return image <identifiersep> icon ; } <comment> <ect>
{ byte <identifiersep> array <identifiersep> output <identifiersep> stream out = new byte <identifiersep> array <identifiersep> output <identifiersep> stream ( ) ; try { image <identifiersep> io . write ( image , <string_literal> , out ) ; } catch ( io <identifiersep> exception e ) <LOG> { return null ; } return out . to <identifiersep> byte <identifiersep> array ( ) ; } <comment> <ect>
try { image <identifiersep> io . write ( scaled <identifiersep> image , <string_literal> , out <identifiersep> stream ) ; scaled <identifiersep> bytes = out <identifiersep> stream . to <identifiersep> byte <identifiersep> array ( ) ; } catch ( io <identifiersep> exception e ) <LOG> { } } return scaled <identifiersep> bytes ; } <comment> <ect>
document . insert <identifiersep> after <identifiersep> end ( root . get <identifiersep> element ( root . get <identifiersep> element <identifiersep> count ( ) - 1 ) , text ) ; } catch ( bad <identifiersep> location <identifiersep> exception e ) { logger . error ( <string_literal> , e ) ; } catch ( io <identifiersep> exception e ) <LOG> { } } <comment> <ect>
this . document . insert <identifiersep> before <identifiersep> start ( root . get <identifiersep> element ( 0 ) , text ) ; } catch ( bad <identifiersep> location <identifiersep> exception e ) { logger . error ( <string_literal> , e ) ; } catch ( io <identifiersep> exception e ) <LOG> { } } } <ect>
<string_literal> , window . class , shape . class ) ; m <identifiersep> set <identifiersep> window <identifiersep> opacity = awt <identifiersep> utilities <identifiersep> class . get <identifiersep> method ( <string_literal> , window . class , float . class ) ; m <identifiersep> set <identifiersep> window <identifiersep> opaque = awt <identifiersep> utilities <identifiersep> class . get <identifiersep> method ( <string_literal> , window . class , boolean . class ) ; } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception ex ) <LOG> { } catch ( security <identifiersep> exception ex ) { logger . info ( <string_literal> ) ; } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { <ect>
{ logger . info ( <string_literal> ) ; } catch ( security <identifiersep> exception ex ) { logger . info ( <string_literal> ) ; } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) <LOG> { } } static { init ( ) ; } private static boolean is <identifiersep> supported ( method method , object kind ) { <ect>
{ return ( ( boolean ) ret ) . boolean <identifiersep> value ( ) ; } } catch ( illegal <identifiersep> access <identifiersep> exception ex ) { logger . info ( <string_literal> ) ; } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) <LOG> { } catch ( invocation <identifiersep> target <identifiersep> exception ex ) { logger . info ( <string_literal> ) ; } return false ; } public static boolean is <identifiersep> translucency <identifiersep> supported ( object kind ) <ect>
{ return ; } try { method . invoke ( null , window , value ) ; } catch ( illegal <identifiersep> access <identifiersep> exception ex ) <LOG> { } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { logger . info ( <string_literal> ) ; } catch ( invocation <identifiersep> target <identifiersep> exception ex ) { <ect>
{ logger . info ( <string_literal> ) ; } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { logger . info ( <string_literal> ) ; } catch ( invocation <identifiersep> target <identifiersep> exception ex ) <LOG> { } } public static void set <identifiersep> window <identifiersep> shape ( window window , shape shape ) { set ( m <identifiersep> set <identifiersep> window <identifiersep> shape , window , shape ) ; } public static void set <identifiersep> window <identifiersep> opacity ( window window , float opacity ) { <ect>
{ if ( e . get <identifiersep> key ( ) . ends <identifiersep> with ( get <identifiersep> contact <identifiersep> source ( ) . default <identifiersep> scope ) ) { read <identifiersep> entry ( e . get <identifiersep> value ( ) ) ; } } } super . stopped ( true ) ; } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) <LOG> { } catch ( exception e ) { logger . warn ( <string_literal> + file , e ) ; } } <comment> <ect>
private service <identifiersep> registration notification <identifiersep> service ; public void start ( bundle <identifiersep> context bc ) throws exception { bundle <identifiersep> context = bc ; try { <LOG> logger . log <identifiersep> entry ( ) ; notification <identifiersep> service = bundle <identifiersep> context . register <identifiersep> service ( notification <identifiersep> service . class . get <identifiersep> name ( ) , new notification <identifiersep> service <identifiersep> impl ( ) , null ) ; logger . info ( <string_literal> ) ; <ect>
logger . info ( <string_literal> ) ; } finally { logger . log <identifiersep> exit ( ) ; } } public void stop ( bundle <identifiersep> context bc ) throws exception { <LOG> notification <identifiersep> service . unregister ( ) ; } <comment> <ect>
for ( int p <identifiersep> idx = 0 ; p <identifiersep> idx < pattern <identifiersep> len ; p <identifiersep> idx ++ ) { pattern [ p <identifiersep> idx ] = config <identifiersep> service . get <identifiersep> long ( action <identifiersep> prop <identifiersep> name + <string_literal> + p <identifiersep> idx , - 1 ) ; if ( pattern [ p <identifiersep> idx ] == - 1 ) <LOG> { continue ; } } int repeat = config <identifiersep> service . get <identifiersep> int ( action <identifiersep> prop <identifiersep> name + <string_literal> , - 1 ) ; action = new vibrate <identifiersep> notification <identifiersep> action ( <ect>
else response = http <identifiersep> client . execute ( req ) ; <comment> <LOG> { break ; } <comment> <ect>
try { scheme sch = new scheme ( <string_literal> , <number_literal> , new ssl <identifiersep> socket <identifiersep> factory <identifiersep> ex ( ssl <identifiersep> ctx ) ) ; http <identifiersep> client . get <identifiersep> connection <identifiersep> manager ( ) . get <identifiersep> scheme <identifiersep> registry ( ) . register ( sch ) ; } catch ( throwable t ) <LOG> { } <comment> <ect>
= <string_literal> + resource <identifiersep> pack . resource <identifiersep> name + <string_literal> + type <identifiersep> name + <string_literal> ; try { ser <identifiersep> refs = bundle <identifiersep> context . get <identifiersep> service <identifiersep> references ( clazz , osgi <identifiersep> filter ) ; } catch ( invalid <identifiersep> syntax <identifiersep> exception ex ) { <LOG> ser <identifiersep> refs = null ; } if ( ( ser <identifiersep> refs != null ) && ! ser <identifiersep> refs . is <identifiersep> empty ( ) ) { return bundle <identifiersep> context . get <identifiersep> service ( ser <identifiersep> refs . iterator ( ) . next ( ) ) ; } return null ; } <comment> <ect>
<comment> public char get <identifiersep> i18n <identifiersep> mnemonic ( string key , locale locale ) { string resource <identifiersep> string = do <identifiersep> get <identifiersep> i18string ( key , locale ) ; if ( resource <identifiersep> string == null ) <LOG> { return 0 ; } int mnemonic <identifiersep> index = resource <identifiersep> string . index <identifiersep> of ( ' & ' ) ; if ( mnemonic <identifiersep> index > - 1 && mnemonic <identifiersep> index < resource <identifiersep> string . length ( ) - 1 ) { return resource <identifiersep> string . char <identifiersep> at ( mnemonic <identifiersep> index + 1 ) ; <ect>
<comment> public url get <identifiersep> settings <identifiersep> url ( string url <identifiersep> key ) { string path = get <identifiersep> settings <identifiersep> string ( url <identifiersep> key ) ; if ( path == null || path . length ( ) == 0 ) <LOG> { return null ; } return settings <identifiersep> pack . get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> resource ( path ) ; } <comment> <ect>
byte [ ] image = null ; try { image = new byte [ in . available ( ) ] ; in . read ( image ) ; } catch ( io <identifiersep> exception e ) <LOG> { } return image ; } <comment> <ect>
protected void fire <identifiersep> message <identifiersep> event ( event <identifiersep> object evt ) { collection < message <identifiersep> listener > listeners = null ; synchronized ( this . message <identifiersep> listeners ) { <LOG> listeners = new array <identifiersep> list < message <identifiersep> listener > ( this . message <identifiersep> listeners ) ; } + <string_literal> + evt ) ; <comment> <ect>
{ protocol <identifiersep> provider <identifiersep> factory = ( protocol <identifiersep> provider <identifiersep> factory ) bundle <identifiersep> context . get <identifiersep> service ( ser <identifiersep> refs [ 0 ] ) ; } } catch ( invalid <identifiersep> syntax <identifiersep> exception ex ) <LOG> { } return protocol <identifiersep> provider <identifiersep> factory ; } <comment> <ect>
= media <identifiersep> service . create <identifiersep> media <identifiersep> stream ( connector , device , srtp <identifiersep> control ) ; } } else <LOG> { } return configure <identifiersep> stream ( call <identifiersep> peer <identifiersep> media <identifiersep> handler , device , format , target , direction , rtp <identifiersep> extensions , stream , master <identifiersep> stream ) ; <ect>
else if ( users <identifiersep> state == conference <identifiersep> info <identifiersep> document . state . deleted ) { try { new <identifiersep> document = new conference <identifiersep> info <identifiersep> document ( ) ; } catch ( xml <identifiersep> exception e ) <LOG> { return - 1 ; } new <identifiersep> document . set <identifiersep> version ( diff . get <identifiersep> version ( ) ) ; new <identifiersep> document . set <identifiersep> entity ( diff . get <identifiersep> entity ( ) ) ; new <identifiersep> document . set <identifiersep> user <identifiersep> count ( diff . get <identifiersep> user <identifiersep> count ( ) ) ; } else <comment> <ect>
<comment> public void start ( bundle <identifiersep> context context ) throws exception <LOG> { protocol <identifiersep> media <identifiersep> activator . bundle <identifiersep> context = context ; } <comment> <ect>
int version = - 1 ; try { version = integer . parse <identifiersep> int ( version <identifiersep> string ) ; } catch ( number <identifiersep> format <identifiersep> exception e ) <LOG> { } return version ; } <comment> <ect>
<comment> public void send <identifiersep> hole <identifiersep> punch <identifiersep> packet ( media <identifiersep> stream <identifiersep> target target , media <identifiersep> type type , raw <identifiersep> packet packet ) <LOG> { <comment> <ect>
<comment> protected void close <identifiersep> stream ( media <identifiersep> type media <identifiersep> type ) <LOG> { <comment> boolean media <identifiersep> handler <identifiersep> close <identifiersep> stream = false ; <ect>
<comment> public void set <identifiersep> local <identifiersep> video <identifiersep> transmission <identifiersep> enabled ( boolean enabled ) <LOG> { media <identifiersep> direction old <identifiersep> value = video <identifiersep> direction <identifiersep> user <identifiersep> preference ; video <identifiersep> direction <identifiersep> user <identifiersep> preference = enabled ? media <identifiersep> direction . sendrecv : media <identifiersep> direction . recvonly ; media <identifiersep> direction new <identifiersep> value = video <identifiersep> direction <identifiersep> user <identifiersep> preference ; <comment> <ect>
<comment> private void add <identifiersep> call <identifiersep> listener ( call call ) { <LOG> { } synchronized ( calls ) { if ( ! calls . contains ( call ) ) { call <identifiersep> state call <identifiersep> state = call . get <identifiersep> call <identifiersep> state ( ) ; <ect>
<comment> private void call <identifiersep> state <identifiersep> changed ( call <identifiersep> change <identifiersep> event ev ) { call call = ev . get <identifiersep> source <identifiersep> call ( ) ; <LOG> { } if ( call <identifiersep> state . call <identifiersep> initialization . equals ( ev . get <identifiersep> old <identifiersep> value ( ) ) && call <identifiersep> state . call <identifiersep> in <identifiersep> progress . equals ( call . get <identifiersep> call <identifiersep> state ( ) ) && protocol <identifiersep> provider <identifiersep> activator . get <identifiersep> configuration <identifiersep> service ( ) . get <identifiersep> boolean ( <ect>
&& ! call <identifiersep> peer <identifiersep> state . is <identifiersep> on <identifiersep> hold ( peer <identifiersep> state ) ) { try { telephony . put <identifiersep> on <identifiersep> hold ( peer ) ; } catch ( operation <identifiersep> failed <identifiersep> exception ex ) <LOG> { } } } } } <comment> <ect>
<comment> private void remove <identifiersep> call <identifiersep> listener ( call call ) { <LOG> { } call . remove <identifiersep> call <identifiersep> change <identifiersep> listener ( listener ) ; synchronized ( calls ) { calls . remove ( call ) ; } } <comment> <ect>
<comment> public void call <identifiersep> state <identifiersep> changed ( call <identifiersep> change <identifiersep> event ev ) { <LOG> { } call call = ev . get <identifiersep> source <identifiersep> call ( ) ; object old <identifiersep> call <identifiersep> state = ev . get <identifiersep> old <identifiersep> value ( ) ; object new <identifiersep> call <identifiersep> state = call . get <identifiersep> call <identifiersep> state ( ) ; if ( ( call <identifiersep> state . call <identifiersep> initialization . equals ( old <identifiersep> call <identifiersep> state ) && call <identifiersep> state . call <identifiersep> in <identifiersep> progress . equals ( new <identifiersep> call <identifiersep> state ) ) <ect>
<comment> private void run ( ) { <LOG> { } if ( ! protocol <identifiersep> provider <identifiersep> activator . get <identifiersep> configuration <identifiersep> service ( ) . get <identifiersep> boolean ( pname <identifiersep> on <identifiersep> the <identifiersep> phone <identifiersep> status <identifiersep> enabled , false ) ) { <ect>
= bundle <identifiersep> context . get <identifiersep> service <identifiersep> references ( protocol <identifiersep> provider <identifiersep> service . class . get <identifiersep> name ( ) , null ) ; } catch ( invalid <identifiersep> syntax <identifiersep> exception ise ) { <LOG> { } pps <identifiersep> refs = null ; } if ( ( pps <identifiersep> refs == null ) || ( pps <identifiersep> refs . length == 0 ) ) { forget <identifiersep> presence <identifiersep> statuses ( ) ; } else <ect>
