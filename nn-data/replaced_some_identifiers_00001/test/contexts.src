\t3 is <identifiersep> full ( context , memory <identifiersep> usage ) ; \n \t3 fast <identifiersep> producer ( context , producer <identifiersep> info ) ; \n \t3 if ( is <identifiersep> producer <identifiersep> flow <identifiersep> control ( ) && context . is <identifiersep> producer <identifiersep> flow <identifiersep> control ( ) ) { \n \t4 if ( is <identifiersep> flow <identifiersep> control <identifiersep> log <identifiersep> required ( ) ) { \n <ect>
\t3 logger . info ( <string_literal> + \n \t5 <string_literal> , value , property <identifiersep> name ) ; } \n \t2 else if ( write <identifiersep> method == null ) \n \t2 { \n <ect>
\t4 query = replace <identifiersep> values ( query , values ) ; \n \t4 logger . info ( <string_literal> , query ) ; \n \t4 rs = query <identifiersep> processor . execute <identifiersep> once <identifiersep> internal ( query ) ; } \n \t3 if ( rs != null ) \n <ect>
\t3 notification <identifiersep> util . show <identifiersep> record <identifiersep> not <identifiersep> exist <identifiersep> notification ( ) ; \n \t2 } else if ( get <identifiersep> exception <identifiersep> type ( throwable , secure <identifiersep> access <identifiersep> exception . class ) != null ) { \n \t3 notification <identifiersep> util . show <identifiersep> message <identifiersep> permission <identifiersep> alert ( ) ; \n \t2 } else { \n <ect>
\t3 system . err . println ( <string_literal> ) ; \n \t3 system . exit ( - 1 ) ; } \n \t2 map conf = load <identifiersep> config . load <identifiersep> conf ( args [ 0 ] ) ; \t1 \n \t2 if ( conf == null ) { \n <ect>
\t1 public wsdl <identifiersep> mock <identifiersep> operation ( wsdl <identifiersep> mock <identifiersep> service mock <identifiersep> service , mock <identifiersep> operation <identifiersep> config config ) { \n \t2 super ( config , mock <identifiersep> service , <identifier> <identifiersep> name ) ; \n \t2 interface iface = mock <identifiersep> service . get <identifiersep> project ( ) . get <identifiersep> interface <identifiersep> by <identifiersep> name ( config . get <identifiersep> interface ( ) ) ; \n \t2 if ( iface == null ) { \n <ect>
<comment> \n \t1 public void cancel ( ) { \n <ect>
\t5 use <identifiersep> <identifier> = true ; } \n \t3 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 logger . info ( <string_literal> ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 pstmt . close ( ) ; \n \t3 pstmt = conn . prepare <identifiersep> statement ( <string_literal> ) ; \n \t3 rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( ! rs . next ( ) ) { \n <ect>
\t4 if ( <identifier> <identifiersep> storage . exists ( iso <identifiersep> path ) ) { \n \t5 <identifier> <identifiersep> <identifier> <identifiersep> iso <identifiersep> path = iso <identifiersep> path ; \n \t5 break ; } } \n \t3 if ( <identifier> <identifiersep> <identifier> <identifiersep> iso <identifiersep> path == null ) { \n <ect>
\t4 <comment> \n \t4 transition <identifiersep> to <identifiersep> failed ( tid , op , e ) ; \n \t4 continue ; } } } \n \t2 } catch ( exception e ) { \n <ect>
\t7 log . debug ( x <identifiersep> log . std , <string_literal> , node <identifiersep> job . node <identifiersep> name ) ; } \n <comment> <ect>
\t5 + in <identifiersep> action <identifiersep> context . get <identifiersep> principal ( ) . get <identifiersep> id ( ) ) ) ; \n \t3 success = true ; } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t5 host <identifiersep> vo host = ( host <identifiersep> vo ) create <identifiersep> host <identifiersep> and <identifiersep> agent ( resource , entry . get <identifiersep> value ( ) , true , host <identifiersep> tags , false ) ; \n \t5 if ( host != null ) { \n \t6 hosts . add ( host ) ; } \n \t5 <identifier> . post <identifiersep> discovery ( hosts , <identifier> <identifiersep> node <identifiersep> id ) ; } \n <ect>
\t2 long duration <identifiersep> in <identifiersep> ms = received <identifiersep> time <identifiersep> in <identifiersep> ms - ( this . parsed <identifiersep> request <identifiersep> origin <identifiersep> time <identifiersep> in <identifiersep> ms ) ; \n \t2 int num <identifiersep> vector <identifiersep> clock <identifiersep> entries = ( this . parsed <identifiersep> vector <identifiersep> clock == null ? 0 \n <number_literal> : this . parsed <identifiersep> vector <identifiersep> clock . get <identifiersep> version <identifiersep> map ( ) \n <number_literal> . size ( ) ) ; \n <ect>
\t4 engine = manager . get <identifiersep> engine <identifiersep> by <identifiersep> name ( name ) ; \n \t4 if ( engine != null ) { \n \t5 break ; } \n \t3 } catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error ex ) { \n <ect>
\t1 if ( group <identifiersep> id <identifiersep> property != null && ! group <identifiersep> id <identifiersep> property . is <identifiersep> empty ( ) ) { \n \t1 group <identifiersep> id = group <identifiersep> id <identifiersep> property ; <comment> \n \t1 if ( group <identifiersep> id == null || group <identifiersep> id . is <identifiersep> empty ( ) ) { \n \t1 group <identifiersep> id = default <identifiersep> group <identifiersep> id ; \n <ect>
\t1 private boolean need <identifiersep> restart ( ) { \n \t2 return ( connection <identifiersep> broken || ( socket != null && ! socket . is <identifiersep> connected ( ) ) ) ; } \n \t1 @ override \n \t1 public void connect ( ) { \n <ect>
\t2 stmt . execute ( <string_literal> ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n \t2 if ( ! ( <string_literal> . equals ( e . get <identifiersep> sql <identifiersep> state ( ) ) && <number_literal> == e . get <identifiersep> error <identifiersep> code ( ) ) ) { \n \t3 <comment> \n <ect>
\t3 string token = generate <identifiersep> token ( <number_literal> ) ; \n \t3 if ( generate <identifiersep> token <identifiersep> based <identifiersep> invitation ( project , email , token ) != null ) { \n \t4 return true ; \n \t3 } else { \n <ect>
\t2 data <identifiersep> format data <identifiersep> format = camel <identifiersep> exchange . get <identifiersep> property ( cxf <identifiersep> constants . data <identifiersep> format <identifiersep> property , data <identifiersep> format . class ) ; \n \t2 for ( map . entry < string , object > entry : camel <identifiersep> headers . entry <identifiersep> set ( ) ) { \n \t3 <comment> \n \t3 if ( message . response <identifiersep> code . equals ( entry . get <identifiersep> key ( ) ) || exchange . http <identifiersep> response <identifiersep> code . equals ( entry . get <identifiersep> key ( ) ) ) { \n <ect>
\t3 connection <identifiersep> states = list <identifiersep> connection <identifiersep> states ( ) ; \n \t3 for ( transport <identifiersep> connection <identifiersep> state cs : connection <identifiersep> states ) { \n \t4 cs . get <identifiersep> context ( ) . get <identifiersep> stopping ( ) . set ( true ) ; \n \t4 try { \n <ect>
\t4 current <identifiersep> pw = pw ; \n \t4 return true ; \n \t3 } else if ( rep <identifiersep> <identifier> . equals ( prop <identifiersep> name ) ) { \n \t4 if ( a . is <identifiersep> group ( ) || ! is <identifiersep> valid ( def , <identifier> <identifiersep> rep <identifiersep> <identifier> , true ) ) { \n <ect>
\t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n \t4 <identifier> <identifiersep> log . info ( get <identifiersep> prefix ( ) + <string_literal> + state . get <identifiersep> elapsed ( ) + <string_literal> \n \t6 + payload . length + <string_literal> ) ; \n \t3 <comment> \n <ect>
\t2 <comment> \n \t2 for ( j <identifiersep> meter <identifiersep> property j <identifiersep> meter <identifiersep> property : get <identifiersep> auth <identifiersep> objects ( ) ) { \n \t3 authorization auth = ( authorization ) j <identifiersep> meter <identifiersep> property . get <identifiersep> object <identifiersep> value ( ) ; \n \t3 string u <identifiersep> <identifier> = auth . get <identifiersep> url ( ) ; \n <ect>
\t3 logger . warn ( <string_literal> , t ) ; \n \t3 try { \n \t4 ch . close ( ) ; \n \t3 } catch ( throwable t2 ) { \n <ect>
\t2 <identifier> = commit ( <identifier> , <identifier> , true ) ; \n \t2 assert <identifiersep> invalidations ( <identifier> . get <identifiersep> invalidations <identifiersep> and <identifiersep> clear ( ) , 1 , 1 , user . get <identifiersep> id ( ) + <string_literal> ) ; \n \t2 assert <identifiersep> invalidations ( <identifier> . get <identifiersep> invalidations <identifiersep> and <identifiersep> clear ( ) , 1 , 1 , user . get <identifiersep> id ( ) + <string_literal> ) ; \n \t2 <comment> \n <ect>
\t1 user <identifiersep> role <identifiersep> list <identifiersep> service . set <identifiersep> username <identifiersep> comparator ( new default <identifiersep> username <identifiersep> comparator ( ) ) ; \n \t1 list res = user <identifiersep> role <identifiersep> list <identifiersep> service . get <identifiersep> all <identifiersep> users ( ) ; \n \t1 assert <identifiersep> true ( res . index <identifiersep> of ( <string_literal> ) < res . index <identifiersep> of ( <string_literal> ) ) ; \n <ect>
\t3 return ; \n \t2 try { \n \t3 receiver . receive ( msg . src ( ) , msg . get <identifiersep> raw <identifiersep> buffer ( ) , msg . get <identifiersep> offset ( ) , msg . get <identifiersep> length ( ) ) ; } \n \t2 catch ( throwable t ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 return null ; } \n \t2 if ( doc == null ) { \n <ect>
\t3 downloaded = <string_literal> + remote <identifiersep> size + <string_literal> ; } \n \t2 error <identifiersep> string = <string_literal> + total <identifiersep> bytes + <string_literal> + downloaded ; } \n \t1 private boolean can <identifiersep> handle <identifiersep> download <identifiersep> size ( ) { \n \t2 if ( remote <identifiersep> size > max <identifiersep> template <identifiersep> size <identifiersep> in <identifiersep> bytes ) { \n <ect>
\t2 if ( all <identifiersep> hosts . is <identifiersep> empty ( ) ) { \n \t3 primary <identifiersep> data <identifiersep> store <identifiersep> dao . expunge ( <identifier> . get <identifiersep> id ( ) ) ; \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + <identifier> . get <identifiersep> cluster <identifiersep> id ( ) ) ; } \n \t2 if ( <identifier> . get <identifiersep> pool <identifiersep> type ( ) == storage <identifiersep> pool <identifiersep> type . <identifier> && ! <identifier> <identifiersep> <identifier> . prepare <identifiersep> nodes ( all <identifiersep> hosts , <identifier> ) ) { \n <ect>
\t3 if ( entity != null ) { \n \t4 result <identifiersep> list = parse <identifiersep> get <identifiersep> response ( entity ) ; \n \t3 } else { \n <ect>
\t1 if ( op . get <identifiersep> conf ( ) != null && op . get <identifiersep> conf ( ) . get <identifiersep> statistics ( ) != null && run <identifiersep> time <identifiersep> num <identifiersep> rows != null ) { \n \t1 log . info ( <string_literal> + op . get <identifiersep> operator <identifiersep> id ( ) ) ; \n \t1 op . get <identifiersep> conf ( ) . get <identifiersep> statistics ( ) . set <identifiersep> run <identifiersep> time <identifiersep> num <identifiersep> rows ( run <identifiersep> time <identifiersep> num <identifiersep> rows ) ; \n \t1 } else { \n <ect>
\t2 byte [ ] <identifier> = new byte [ ] { ( byte ) <identifier> , ( byte ) 0x <identifiersep> ff , ( byte ) 0x <identifiersep> ff } ; \n \t2 ccn <identifiersep> time t1 = ccn <identifiersep> time . from <identifiersep> binary <identifiersep> time <identifiersep> as <identifiersep> long ( v1 ) ; \n \t2 byte [ ] <identifier> = t1 . to <identifiersep> binary <identifiersep> time ( ) ; \n \t2 assert . assert <identifiersep> true ( java . util . arrays . equals ( <identifier> , <identifier> ) ) ; \n <ect>
\t4 log . error ( <string_literal> , e ) ; } } } \n \t1 @ test \n \t1 public void test <identifiersep> no <identifiersep> commit <identifiersep> workers <identifiersep> read <identifiersep> only <identifiersep> <identifier> ( ) throws exception { \n \t2 int num <identifiersep> clients = <number_literal> ; \n <ect>
\t1 protected void parse <identifiersep> buffer ( string item <identifiersep> name , command a <identifiersep> command , direction the <identifiersep> direction , byte <identifiersep> buffer byte <identifiersep> buffer ) { \n \t2 string the <identifiersep> update = <string_literal> ; \n \t2 try { \n \t3 the <identifiersep> update = new string ( byte <identifiersep> buffer . array ( ) , charset ) ; \n <ect>
\t7 + control <identifiersep> iface + <string_literal> \n \t7 + config . get <identifiersep> agent <identifiersep> hostname ( ) ) ; } \n \t4 <identifier> <identifiersep> count ++ ; } \n \t2 } else { \n <ect>
\t2 logger . info ( <string_literal> , resource <identifiersep> name ) ; \n \t2 if ( resource <identifiersep> name == null || <string_literal> . equals ( resource <identifiersep> name ) ) { \n \t3 return ; } \n \t2 <comment> \n <ect>
\t10 } ) ) ; } } \n \t1 @ override \n \t1 protected map < string , list < pig <identifiersep> stats > > main ( pig <identifiersep> context context , \n \t3 string script <identifiersep> file ) throws io <identifiersep> exception { \n <ect>
\t2 this . mapping = new hash <identifiersep> map < > ( <number_literal> * batch <identifiersep> size ) ; \n \t2 this . details = new <identifier> <identifiersep> dataset <identifiersep> details ( dsg ) ; } \n \t1 @ override \n \t1 public void start ( ) { \n <ect>
\t1 return new deploy <identifiersep> bean <identifiersep> property ( desc , property <identifiersep> type , null , null ) ; } \n \t1 try { \n \t1 return new deploy <identifiersep> bean <identifiersep> property <identifiersep> assoc <identifiersep> one ( desc , property <identifiersep> type ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 at . read <identifiersep> lexicon ( br , <string_literal> ) ; \n \t2 br . close ( ) ; \n \t2 <comment> \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n <ect>
\t3 input <identifiersep> state <identifiersep> <identifier> <identifiersep> array [ <identifier> <identifiersep> index ] . set <identifiersep> auto <identifiersep> write ( false ) ; \n \t3 input <identifiersep> state <identifiersep> <identifier> <identifiersep> array [ <identifier> <identifiersep> index ] . set <identifiersep> auto <identifiersep> <identifier> ( false ) ; \n \t3 <identifier> <identifiersep> type [ <identifier> <identifiersep> index ] = new <identifier> <identifiersep> t ( ) ; } \n \t2 if ( ! initialize <identifiersep> open <identifiersep> vr <identifiersep> library ( ) ) { \n <ect>
\t2 <comment> \n \t2 if ( st . starts <identifiersep> with ( <string_literal> ) ) { \n \t3 matcher m = broken <identifiersep> byte <identifiersep> token <identifiersep> pattern . matcher ( st ) ; \n \t3 if ( ! m . matches ( ) ) { \n <ect>
<number_literal> output <identifiersep> batch <identifiersep> size , \n <number_literal> details ) ; \n \t3 try { \n \t4 if ( ! sampler . sample <identifiersep> stores ( ) ) { \n <ect>
\t2 exceptions . put ( exception , instance ) ; \n \t2 return <identifier> . <identifier> ( result . class , instance ) ; } \n \t1 @ override \n \t1 public exception <identifiersep> recorder < result > find <identifiersep> by <identifiersep> exception ( exception e ) { \n <ect>
\t2 } , <number_literal> * <number_literal> * 1000l ) ) ; \n \t2 assert <identifiersep> true ( <string_literal> + exceptions , exceptions . is <identifiersep> empty ( ) ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 long duration = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n <ect>
\t3 if ( e instanceof interrupted <identifiersep> io <identifiersep> exception ) { \n \t4 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t3 log <identifiersep> log . error ( <string_literal> + input <identifiersep> stream \n \t4 + <string_literal> , e ) ; \n <ect>
\t3 <comment> \n \t1 if ( all <identifiersep> closed ) { \n \t2 log . info ( <string_literal> + i ) ; \n \t2 return ; } } \n <ect>
\t2 try { \n \t3 client . admin ( ) . cluster ( ) . prepare <identifiersep> delete <identifiersep> repository ( <string_literal> ) . execute ( ) . get ( ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 final pair < ? extends <identifier> <identifiersep> saml <identifiersep> object , message <identifiersep> context > authentication <identifiersep> context , \n \t2 final http <identifiersep> servlet <identifiersep> request request ) throws exception { \n \t2 final authn <identifiersep> request authn <identifiersep> request = authn <identifiersep> request . class . cast ( authentication <identifiersep> context . get <identifiersep> key ( ) ) ; \n \t2 final string issuer = saml <identifiersep> id <identifiersep> p <identifiersep> utils . get <identifiersep> issuer <identifiersep> from <identifiersep> saml <identifiersep> request ( authn <identifiersep> request ) ; \n <ect>
\t3 if ( previous <identifiersep> result == null ) { \n \t4 return ; } \n \t3 json <identifiersep> response = previous <identifiersep> result . get <identifiersep> response <identifiersep> data <identifiersep> as <identifiersep> string ( ) ; \n <ect>
\t2 return enough <identifiersep> capacity ; } \n \t1 private boolean skip <identifiersep> <identifier> ( vm <identifiersep> instance <identifiersep> vo vm ) { \n \t2 if ( vm . get <identifiersep> state ( ) == state . expunging ) { \n <ect>
\t7 s <identifiersep> logger . info ( <string_literal> + job . get <identifiersep> id ( ) ) ; \n \t7 <identifier> <identifiersep> job <identifiersep> monitor . unregister <identifiersep> by <identifiersep> job <identifiersep> id ( job . get <identifiersep> id ( ) ) ; \n \t7 expunge <identifiersep> async <identifiersep> job ( job ) ; \n \t6 } catch ( throwable e ) { \n <ect>
\t1 props . add <identifiersep> properties ( string <identifiersep> props ) ; \n \t1 } catch ( array <identifiersep> index <identifiersep> out <identifiersep> of <identifiersep> bounds <identifiersep> exception ex ) { \n \t1 logger . error ( messages . get <identifiersep> error <identifiersep> string ( <string_literal> ) ) ; <comment> \n \t1 ex . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t4 object plugin = instantiate <identifiersep> plugin ( a <identifiersep> class , injectable <identifiersep> map ) ; \n \t4 ae <identifiersep> log . info ( <string_literal> , plugin . get <identifiersep> class ( ) ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t1 wro <identifiersep> model model = super . create ( ) ; \n \t1 log . debug ( <string_literal> , model <identifiersep> <identifier> ) ; \n \t1 for ( final transformer < wro <identifiersep> model > transformer : model <identifiersep> <identifier> ) { \n \t1 injector . inject ( transformer ) ; \n <ect>
<number_literal> s <identifiersep> logger . info ( <string_literal> + <identifier> <identifiersep> account . get ( ) ) ; \n \t10 } else { \n <number_literal> s <identifiersep> logger . info ( <string_literal> ) ; \n <number_literal> if ( clean <identifiersep> up ) { \n <ect>
\t3 test <identifiersep> element node = comp . create <identifiersep> test <identifiersep> element ( ) ; \n \t3 nodes <identifiersep> to <identifiersep> gui . put ( node , comp ) ; \n \t3 return node ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 @ inject \n \t1 private cdi <identifiersep> injection <identifiersep> book <identifiersep> writer writer ; \n \t1 @ override \n \t1 public void set <identifiersep> up ( string key ) { \n <ect>
\t3 public void on <identifiersep> pending <identifiersep> failure ( throwable cause ) { \n \t4 transaction <identifiersep> id = null ; \n \t4 post <identifiersep> commit ( ) ; } \n \t2 } ) ; \n <ect>
\t2 string exist <identifiersep> separator = <string_literal> , non <identifiersep> exist <identifiersep> separator = <string_literal> ; \n \t2 for ( int i = 0 ; i < uri <identifiersep> list . length ; i ++ ) { \n \t3 if ( all <identifiersep> exists ) { \n \t4 all <identifiersep> exists = path <identifiersep> exists ( uri <identifiersep> list [ i ] , conf ) ; \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t2 zoo <identifiersep> keeper <identifiersep> server . run <identifiersep> from <identifiersep> config ( configuration ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public <identifier> ( ) { } \n \t1 @ override \n \t1 public void shutdown ( ) { \n \t2 if ( shutdown . get <identifiersep> and <identifiersep> set ( true ) ) { \n <ect>
\t5 try { \n \t6 connected = false ; \n \t6 connect <identifiersep> socket ( ) ; \n \t5 } catch ( exception ex ) { \n <ect>
\t4 cms <identifiersep> time <identifiersep> <identifier> <identifiersep> data <identifiersep> parser = new cms <identifiersep> time <identifiersep> <identifier> <identifiersep> data <identifiersep> parser ( stream ) ; \n \t4 try ( input <identifiersep> stream is = tika <identifiersep> input <identifiersep> stream . get ( cms <identifiersep> time <identifiersep> <identifier> <identifiersep> data <identifiersep> parser . get <identifiersep> content ( ) ) ) { \n \t5 <identifier> . parse <identifiersep> embedded ( is , handler , metadata , false ) ; } \n \t3 } catch ( exception ex ) { \n <ect>
\t4 if ( l != null && l . size ( ) > 0 && l . get ( 0 ) . second ( ) . int <identifiersep> value ( ) > 0 ) { \n \t5 return true ; \n \t4 } else { \n <ect>
<comment> \n \t1 protected server <identifiersep> socket get <identifiersep> server <identifiersep> socket ( ) throws io <identifiersep> exception { \n \t2 if ( <identifier> <identifiersep> bind <identifiersep> all <identifiersep> interfaces ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t7 break ; } \n \t5 } else { \n \t6 log . info ( <string_literal> , id , sequence , sd . order <identifiersep> index . cursor ) ; } \n \t4 } else { \n <ect>
\t2 try { \n \t3 return request <identifiersep> from <identifiersep> text <identifiersep> factory . create <identifiersep> request ( message ) ; \n \t2 } catch ( exception ex ) { \n \t3 logger . error ( <string_literal> , message , <string_literal> ) ; \n <ect>
\t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . client <identifiersep> id ) ) { \n \t3 logger . warn ( <string_literal> , grant <identifiersep> type ) ; \n \t3 return false ; } \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . secret ) ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 if ( result == null || result . is <identifiersep> empty ( ) || ! boolean . parse <identifiersep> boolean ( result ) ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + cmd . get <identifiersep> vm <identifiersep> name ( ) ) ; \n \t3 return new security <identifiersep> group <identifiersep> rule <identifiersep> answer ( cmd , false , <string_literal> ) ; \n \t2 } else { \n <ect>
<number_literal> + <string_literal> ) ; } \n \t2 if ( ! predicate <identifiersep> node . is <identifiersep> resource ( ) ) { \n \t3 throw new metadata <identifiersep> mapping <identifiersep> exception ( <string_literal> + uri \n <number_literal> + <string_literal> ) ; } \n <ect>
\t4 continue ; } \n \t3 if ( tmplt <identifiersep> host != null && tmplt <identifiersep> host . get <identifiersep> download <identifiersep> state ( ) != status . downloaded ) { \n \t4 s <identifiersep> logger . info ( <string_literal> + unique <identifiersep> name + <string_literal> + <identifier> <identifiersep> id + <string_literal> ) ; \n \t3 } else if ( tmplt <identifiersep> host == null ) { \n <ect>
\t3 return new <identifiersep> state . name ( ) . get <identifiersep> bytes ( utf <identifiersep> <number_literal> ) ; } \n \t2 } ) ; \n \t1 } catch ( exception e ) { \n \t1 <comment> \n <ect>
\t6 e <identifiersep> tag , \n \t6 content <identifiersep> type , \n \t6 string . value <identifiersep> of ( value1 . get <identifiersep> bytes ( ) . length ) ) ; \n \t3 response <identifiersep> code = conn . get <identifiersep> response <identifiersep> code ( ) ; \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 assert <identifiersep> true ( total <identifiersep> msg <identifiersep> received == initial <identifiersep> max <identifiersep> msgs + cleanup <identifiersep> msg <identifiersep> count ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 job . set <identifiersep> jar <identifiersep> by <identifiersep> class ( get <identifiersep> class ( ) ) ; \n \t2 final class < ? extends org . apache . hadoop . mapred . mapper > mapper = mapred <identifiersep> mongo <identifiersep> config <identifiersep> util . get <identifiersep> mapper ( conf ) ; \n \t3 log . debug ( <string_literal> + mapper ) ; \n <ect>
\t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> status ( json <identifiersep> object json , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception { \n \t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> direct <identifiersep> message ( json <identifiersep> object json , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception , json <identifiersep> exception { \n <ect>
\t4 s <identifiersep> logger . trace ( <string_literal> + result ) ; } \n \t3 return result . replace ( <string_literal> , <string_literal> ) . replace ( <string_literal> , <string_literal> ) . replace ( <string_literal> , <string_literal> ) ; \n \t2 } catch ( final types . handle <identifiersep> invalid e ) { \n <ect>
\t2 if ( file <identifiersep> path . exists ( ) && ( file <identifiersep> path . is <identifiersep> directory ( ) || ! file <identifiersep> path . can <identifiersep> read ( ) || ! file <identifiersep> path . can <identifiersep> write ( ) ) ) { \n \t3 logger . warn ( <string_literal> , file <identifiersep> path . get <identifiersep> canonical <identifiersep> path ( ) ) ; \n \t3 return ; } \n \t2 final map < string , configuration <identifiersep> metadata <identifiersep> property > results = find <identifiersep> properties ( group ) ; \n <ect>
@ override \n public void release ( string key ) { \n \t1 <comment> \n <ect>
\t4 final ldap <identifiersep> attribute attribute = entry . get <identifiersep> attribute ( this . certificate <identifiersep> attribute ) ; \n \t4 if ( attribute . is <identifiersep> binary ( ) ) { \n \t5 logger . debug ( <string_literal> , entry , attribute ) ; \n \t5 return fetch <identifiersep> x509crl <identifiersep> from <identifiersep> attribute ( attribute ) ; } \n <ect>
\t2 <identifier> <identifiersep> api . require <identifiersep> <identifier> ( ) \n \t2 given : \n \t2 file ( <string_literal> ) < < <string_literal> <string_literal> debugging <identifier> <string_literal> <ect>
\t5 new uri ( <string_literal> , null , <identifier> <identifiersep> ip , default <identifiersep> port , \n \t7 <string_literal> , null , null ) ; \n \t3 org . json . json <identifiersep> object json <identifiersep> body = new json <identifiersep> object ( ) ; \n \t3 get <identifiersep> http <identifiersep> request ( json <identifiersep> body . to <identifiersep> string ( ) , agent <identifiersep> uri , <identifier> <identifiersep> <identifier> ) ; \n <ect>
\t4 system . get <identifiersep> property ( <string_literal> ) + <string_literal> + file <identifiersep> system <identifiersep> <identifier> <identifiersep> configuration . get <identifiersep> group ( ) + <string_literal> ) ; } \n \t3 files . move ( tmp <identifiersep> path , file <identifiersep> path , standard <identifiersep> copy <identifiersep> option . replace <identifiersep> existing , standard <identifiersep> copy <identifiersep> option . atomic <identifiersep> move ) ; \n \t3 return true ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 switch ( resource <identifiersep> type ) { \n \t2 case <identifier> <identifiersep> spec . s3 <identifiersep> resource <identifiersep> bucket : \n \t3 <comment> \n \t3 if ( bucket <identifiersep> resource <identifiersep> entity == null ) { \n <ect>
\t4 agent <identifiersep> id = system . get <identifiersep> property ( <string_literal> ) ; } \n \t3 catch ( security <identifiersep> exception e ) \n \t3 { \n \t4 <comment> \n <ect>
\t2 { \n \t3 logger . info ( <string_literal> ) ; } \n \t2 catch ( invocation <identifiersep> target <identifiersep> exception ex ) \n \t2 { \n <ect>
\t1 { \n \t2 if ( cause instanceof io <identifiersep> exception ) \n \t3 logger . trace ( <string_literal> , connection <identifiersep> id , cause ) ; \n \t2 else \n <ect>
\t3 if ( settings == null ) { \n \t4 logger . warn ( <string_literal> ) ; \n \t4 return ; \n \t3 } else if ( ! settings . is <identifiersep> authorized ( ) ) { \n <ect>
\t3 hbase <identifiersep> admin . disable <identifiersep> table ( table <identifiersep> name ) ; \n \t3 desc . set <identifiersep> value ( i <identifiersep> realization <identifiersep> constants . h <identifiersep> table <identifiersep> tag , dst <identifiersep> config . get <identifiersep> metadata <identifiersep> url <identifiersep> prefix ( ) ) ; \n \t3 hbase <identifiersep> admin . modify <identifiersep> table ( table <identifiersep> name , desc ) ; \n \t3 hbase <identifiersep> admin . enable <identifiersep> table ( table <identifiersep> name ) ; \n <ect>
\t3 t . send <identifiersep> response <identifiersep> headers ( <number_literal> , bs . length ) ; \n \t3 output <identifiersep> stream os = t . get <identifiersep> response <identifiersep> body ( ) ; \n \t3 os . write ( bs ) ; \n \t3 os . close ( ) ; \n <ect>
\t2 logger . info ( <string_literal> + ( stats . get <identifiersep> <identifier> <identifiersep> endpoint ( ) ) ) ; } \n \t1 else { \n \t2 logger . info ( <string_literal> + ( stats . get <identifiersep> <identifier> <identifiersep> endpoint ( ) ) ) ; \n \t2 logger . info ( <string_literal> + ( stats . get <identifiersep> tx <identifiersep> endpoint ( ) ) ) ; } \n <ect>
\t2 math <identifiersep> transform transform ; \n \t2 try { \n \t3 transform = <identifier> . find <identifiersep> math <identifiersep> transform ( source <identifiersep> <identifier> , target <identifiersep> <identifier> , true ) ; \n \t2 } catch ( factory <identifiersep> exception e ) { \n <ect>
\t1 public void write <identifiersep> to ( interceptor <identifiersep> book t , class < ? > type , type generic <identifiersep> type , \n \t6 annotation [ ] annotations , media <identifiersep> type media <identifiersep> type , \n \t6 multivalued <identifiersep> map < string , object > http <identifiersep> headers , output <identifiersep> stream entity <identifiersep> stream ) \n \t3 throws io <identifiersep> exception , web <identifiersep> application <identifiersep> exception { \n <ect>
\t2 if ( result == null ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( ! result . get <identifiersep> class ( ) . is <identifiersep> assignable <identifiersep> from ( encoded <identifiersep> ticket . class ) ) { \n <ect>
\t3 i = null ; \n \t3 logger . warn ( <string_literal> ) ; \n \t2 } catch ( throwable e ) { \n \t3 i = null ; \n <ect>
\t1 @ override \n \t1 public void execute <identifiersep> waiting <identifiersep> commands ( ) { } \n \t1 @ override \n \t1 public void clear ( ) { \n <ect>
\t4 if ( auth <identifiersep> allowed && <identifier> <identifiersep> allowed ) { \n \t5 allowed . add ( comm ) ; } } \n \t3 return allowed ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 return state . finish <identifiersep> success ; } \n \t2 <comment> \n \t2 if ( completed <identifiersep> rounds >= <number_literal> && <identifier> <identifiersep> expiration ) \n \t2 { \n <ect>
\t2 for ( table <identifiersep> definition table : database . get <identifiersep> tables ( schema ) ) { \n \t3 try { \n \t4 generate <identifiersep> record ( table ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 map < string , string > args = parse <identifiersep> args ( buf . substring ( index + version <identifiersep> prefix . length ( ) ) ) ; \n \t5 string ver = args . get ( version <identifiersep> key ) ; \n \t5 if ( ver != null ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 <comment> \n \t2 if ( dfa . print <identifiersep> debug ( ) ) \n \t2 { \n \t3 logger . debug ( <string_literal> + soot <identifiersep> class . to <identifiersep> string ( ) ) ; \n <ect>
\t1 for ( int i = 1 ; i < <identifier> . length ; i ++ ) { \n \t1 alt <identifiersep> class <identifiersep> loader . v ( ) . set <identifiersep> alt <identifiersep> classes ( new string [ ] { \n \t1 <identifier> [ i ] \n \t1 } ) ; \n <ect>
\t6 <string_literal> + disconnected <identifiersep> client <identifiersep> log <identifiersep> category + \n \t6 <string_literal> ) ; } \n \t3 return <identifier> . empty ( ) ; } \n \t2 if ( response . set <identifiersep> status <identifiersep> code ( http <identifiersep> status . internal <identifiersep> server <identifiersep> error ) ) { \n <ect>
\t2 set < string > url <identifiersep> patterns = get <identifiersep> filter <identifiersep> paths ( filter <identifiersep> name , mapping , name , \n \t3 document . get <identifiersep> child <identifiersep> nodes ( ) ) ; \n \t2 if ( url <identifiersep> patterns . size ( ) == 0 ) \n \t2 { \n <ect>
\t3 return null ; } \n \t2 final map < string , multifactor <identifiersep> authentication <identifiersep> provider > provider <identifiersep> map = \n \t4 multifactor <identifiersep> authentication <identifiersep> utils . get <identifiersep> available <identifiersep> multifactor <identifiersep> authentication <identifiersep> providers ( this . application <identifiersep> context ) ; \n \t2 if ( provider <identifiersep> map == null || provider <identifiersep> map . is <identifiersep> empty ( ) ) { \n <ect>
\t5 logger . warn ( <string_literal> , ticket <identifiersep> id ) ; \n \t5 return null ; } \n \t4 return ticket ; } \n \t2 } else { \n <ect>
\t4 <comment> \n \t4 setter . invoke ( target , convert ( value , setter . get <identifiersep> parameter <identifiersep> types ( ) [ 0 ] ) ) ; } \n \t3 return true ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 r <identifiersep> impl . get <identifiersep> request ( ) . set <identifiersep> attribute ( cached , <string_literal> ) ; \n \t5 prepare <identifiersep> invoke <identifiersep> on <identifiersep> state <identifiersep> change ( r , e ) ; \n \t4 } catch ( throwable t ) { \n \t5 <comment> \n <ect>
\t1 protected map < string , message <identifiersep> consumer > consumer <identifiersep> map ; \n \t1 map < thread , throwable > unhandled <identifiersep> exceptions = new hash <identifiersep> map < thread , throwable > ( ) ; \n \t1 private void assert <identifiersep> no <identifiersep> unhandled <identifiersep> exceptions ( ) { \n \t2 for ( entry < thread , throwable > e : unhandled <identifiersep> exceptions . entry <identifiersep> set ( ) ) { \n <ect>
\t5 non <identifiersep> empty <identifiersep> items <identifiersep> with <identifiersep> id . remove ( list ) ; \n \t5 item . set <identifiersep> deadline ( list . time <identifiersep> last <identifiersep> sent + timeout ) ; \n \t5 list . time <identifiersep> last <identifiersep> sent = now ; \n \t5 if ( ! list . items . is <identifiersep> empty ( ) ) { \n <ect>
<comment> \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( name ) ) { \n <ect>
\t2 localhost . get <identifiersep> host <identifiersep> address ( ) . substring ( 0 , <number_literal> ) + <string_literal> , \n \t2 false , false ) ; \n \t1 <comment> \n \t1 consumer < exception > exception <identifiersep> checker = ( exception ex ) - > { \n <ect>
\t2 if ( ! read ) throw new io <identifiersep> exception ( <string_literal> ) ; \n \t2 <identifier> <identifiersep> response <identifiersep> code = handle <identifiersep> status ( buf . to <identifiersep> string ( ) ) ; \n \t2 boolean redirect = false ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 boolean success = false ; \n \t3 try { \n \t4 success = <identifier> <identifiersep> fs . mkdirs ( <identifier> <identifiersep> full <identifiersep> path , <identifier> ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 cache . get <identifiersep> download <identifiersep> cache ( ) . put ( identifier . to <identifiersep> string ( ) , tmp <identifiersep> file ) ; } \n \t3 return get <identifiersep> record <identifiersep> if <identifiersep> stored ( identifier ) ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 public void done <identifiersep> <identifier> <identifiersep> context ( ) { \n \t2 synchronized ( <identifier> <identifiersep> context <identifiersep> lock ) { \n <ect>
\t3 data = decoder . decode ( record . get <identifiersep> data ( ) ) . to <identifiersep> string ( ) ; \n \t3 <comment> \n \t3 long record <identifiersep> create <identifiersep> time = new long ( data . substring ( <string_literal> . length ( ) ) ) ; \n \t3 long age <identifiersep> of <identifiersep> record <identifiersep> in <identifiersep> millis = system . current <identifiersep> time <identifiersep> millis ( ) - record <identifiersep> create <identifiersep> time ; \n <ect>
\t5 . set <identifiersep> verify ( false ) \n \t5 . set <identifiersep> settings ( settings . builder ( ) . put ( <string_literal> , random <identifiersep> repo <identifiersep> path ( ) ) ) , meta <identifiersep> data . cluster <identifiersep> read <identifiersep> only <identifiersep> block ) ; \n \t2 } finally { \n \t3 set <identifiersep> cluster <identifiersep> read <identifiersep> only ( false ) ; } \n <ect>
\t4 cas <identifiersep> properties . get <identifiersep> saml <identifiersep> sp ( ) . get <identifiersep> in <identifiersep> common ( ) , \n \t4 saml <identifiersep> registered <identifiersep> service <identifiersep> caching <identifiersep> metadata <identifiersep> resolver ) ; \n \t2 if ( service != null ) { \n \t3 saml <identifiersep> sp <identifiersep> utils . save <identifiersep> service ( service , services <identifiersep> manager ) ; \n <ect>
\t3 <identifier> <identifiersep> command the <identifiersep> command = get <identifiersep> <identifier> <identifiersep> command ( command ) ; \n \t3 if ( the <identifiersep> command != null ) { \n \t4 parse <identifiersep> decoded <identifiersep> command ( item <identifiersep> name , the <identifiersep> command , <identifier> <identifiersep> command ) ; \n \t3 } else { \n <ect>
\t1 public void enable ( ) { \n \t2 set <identifiersep> sensor <identifiersep> value ( high <identifiersep> low <identifiersep> value . <identifier> ) ; \n \t2 m <identifiersep> bricklet <identifiersep> <identifier> <identifiersep> digital <identifiersep> <identifier> bricklet = get <identifiersep> mbrick ( ) ; \n \t2 if ( bricklet == null ) { \n <ect>
\t4 runnable task = <identifier> . take <identifiersep> uninterruptibly ( tasks ) ; \n \t4 try { \n \t5 task . run ( ) ; \n \t4 } catch ( throwable throwable ) { \n <ect>
\t4 <comment> \n \t4 list < vm <identifiersep> template <identifiersep> vo > data <identifiersep> disk <identifiersep> templates = <identifier> <identifiersep> tmplt <identifiersep> dao . list <identifiersep> by <identifiersep> parent <identifiersep> <identifier> <identifiersep> id ( template . get <identifiersep> id ( ) ) ; \n \t4 if ( data <identifiersep> disk <identifiersep> templates != null && ! data <identifiersep> disk <identifiersep> templates . is <identifiersep> empty ( ) ) { \n \t5 for ( vm <identifiersep> template <identifiersep> vo data <identifiersep> disk <identifiersep> template : data <identifiersep> disk <identifiersep> templates ) { \n <ect>
\t2 <comment> \n \t2 string refresh <identifiersep> interval <identifiersep> string = objects . to <identifiersep> string ( configuration . get ( <string_literal> ) , null ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( refresh <identifiersep> interval <identifiersep> string ) ) { \n \t3 refresh <identifiersep> interval = long . parse <identifiersep> long ( refresh <identifiersep> interval <identifiersep> string ) ; \n <ect>
\t1 public account <identifiersep> holder get <identifiersep> <identifier> ( ) { \n \t2 return <identifier> ; } \n \t1 public void update <identifiersep> account <identifiersep> branch ( integer id , string branch ) throws exception { \n \t2 with <identifiersep> tx <identifiersep> session ( use <identifiersep> jta , session <identifiersep> factory , session - > { \n <ect>
\t3 string worker <identifiersep> port = param <identifiersep> map . get ( <identifier> <identifiersep> utils . <identifier> <identifiersep> <identifier> <identifiersep> param <identifiersep> worker <identifiersep> port ) ; \n \t3 if ( worker <identifiersep> port == null ) { \n \t4 <identifier> <identifiersep> failure ( t , <string_literal> ) ; \n \t4 return ; } \n <ect>
\t3 try { \n \t4 vm <identifiersep> snapshot <identifiersep> strategy strategy = find <identifiersep> vm <identifiersep> snapshot <identifiersep> strategy ( vm <identifiersep> snapshot ) ; \n \t4 return strategy . delete <identifiersep> vm <identifiersep> snapshot ( vm <identifiersep> snapshot ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 jstorm <identifiersep> master <identifiersep> context . instance <identifiersep> name = conf . get ( <identifier> <identifiersep> constants . instance <identifiersep> name <identifiersep> key ) ; \n \t2 this . jstorm <identifiersep> master <identifiersep> context . user = conf . get ( <identifier> <identifiersep> constants . jstorm <identifiersep> yarn <identifiersep> user ) ; \n \t2 this . jstorm <identifiersep> master <identifiersep> context . password = conf . get ( <identifier> <identifiersep> constants . jstorm <identifiersep> yarn <identifiersep> password ) ; \n \t2 this . jstorm <identifiersep> master <identifiersep> context . old <identifiersep> password = conf . get ( <identifier> <identifiersep> constants . jstorm <identifiersep> yarn <identifiersep> old <identifiersep> password ) ; \n <ect>
\t2 set < object <identifiersep> name > snapshot ; \n \t2 synchronized ( this . registered <identifiersep> beans ) { \n \t3 snapshot = new linked <identifiersep> hash <identifiersep> set < > ( this . registered <identifiersep> beans ) ; } \n \t2 if ( ! snapshot . is <identifiersep> empty ( ) ) { \n <ect>
\t6 public boolean apply ( string path ) { \n \t7 return ! path . starts <identifiersep> with ( version <identifiersep> constants . version <identifiersep> store <identifiersep> path ) ; } } \n \t3 ) ; \n \t2 } catch ( parse <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 thread . current <identifiersep> thread ( ) . set <identifiersep> name ( <string_literal> + \n \t5 thread . current <identifiersep> thread ( ) . get <identifiersep> id ( ) + <string_literal> + t . get <identifiersep> remote <identifiersep> address ( ) ) ; \n <ect>
\t3 system . err . println ( <string_literal> + version + <string_literal> + temp + <string_literal> + to <identifiersep> string + <string_literal> ) ; \n \t3 <comment> \n \t3 return ; \n \t2 } catch ( binary <identifiersep> blob <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 if ( interceptor == this ) { \n \t3 log . error ( <string_literal> ) ; \n \t3 return ; } \n <ect>
\t3 final string <identifier> <identifiersep> key = get <identifiersep> ticket <identifiersep> <identifier> <identifiersep> key ( ticket <identifiersep> id ) ; \n \t3 this . client . delete ( <identifier> <identifiersep> key ) ; \n \t3 return true ; \n \t2 } catch ( final exception e ) { \n <ect>
\t3 style . set <identifiersep> color ( text <identifiersep> formatting . green ) ; } \n \t2 bc <identifiersep> log . logger . info ( <string_literal> + result . status ) ; \n \t2 bc <identifiersep> log . logger . info ( <string_literal> + result . url ) ; \n \t2 bc <identifiersep> log . logger . info ( <string_literal> + result . target ) ; \n <ect>
\t1 sql <identifiersep> connection sql <identifiersep> connection = get <identifiersep> connection ( active <identifiersep> database <identifiersep> meta ) ; \n \t1 string sql = null ; \n \t1 try { \n \t1 if ( ( sql <identifiersep> connection == null ) || ! sql <identifiersep> connection . initialized ( ) ) { \n <ect>
\t5 report <identifiersep> missing <identifiersep> head ( collected <identifiersep> header <identifiersep> output ) ; } } \n \t3 catch ( exception e ) \n \t3 { \n \t4 <comment> \n <ect>
\t4 try { \n \t5 logback <identifiersep> conf <identifiersep> file . create <identifiersep> new <identifiersep> file ( ) ; \n \t5 file <identifiersep> utils . write <identifiersep> lines ( logback <identifiersep> conf <identifiersep> file , <string_literal> , config ) ; \n \t4 } catch ( io <identifiersep> exception ioex ) { \n <ect>
\t4 if ( engine != null ) { \n \t5 try { \n \t6 engine . release ( ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t5 log . warn ( <string_literal> ) ; \n \t5 authenticate ( ) ; \n \t5 delete <identifiersep> object ( container <identifiersep> name , object <identifiersep> name ) ; \n \t4 } else { \n <ect>
\t2 this . driver . delete <identifiersep> async ( obj . get <identifiersep> data <identifiersep> store ( ) , obj , future ) ; \n \t2 try { \n \t3 future . get ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 agent <identifiersep> configs <identifiersep> holder agent <identifiersep> configs <identifiersep> holder = injector . get <identifiersep> instance ( agent <identifiersep> configs <identifiersep> holder . class ) ; \n \t3 metadata <identifiersep> holder . update <identifiersep> data ( controller . get <identifiersep> cluster <identifiersep> metadata <identifiersep> on <identifiersep> configs <identifiersep> update ( cluster ) ) ; \n \t3 agent <identifiersep> configs <identifiersep> holder . update <identifiersep> data ( cluster . get <identifiersep> cluster <identifiersep> id ( ) , null ) ; } \n \t2 } else { \n <ect>
\t2 } catch ( exception e ) { \n \t3 in . close ( ) ; \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t5 return <identifier> ; } \n \t3 } catch ( exception e ) { \n \t4 system . out . println ( <string_literal> ) ; \n \t4 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t3 assert rsrc2 != null ; \n \t3 assert rsrc3 != null ; \n \t3 assert rsrc4 != null ; \n \t3 assert log != null ; \n <ect>
<comment> \n \t1 protected pdf <identifiersep> <identifier> <identifier> <identifiersep> whole <identifiersep> document ( ) throws general <identifiersep> security <identifiersep> exception { \n \t2 pdf <identifiersep> <identifier> <identifier> = fields . verify <identifiersep> signature ( signature <identifiersep> name ) ; \n \t2 if ( fields . signature <identifiersep> <identifier> <identifiersep> whole <identifiersep> document ( signature <identifiersep> name ) ) { \n <ect>
\t3 } else { \n \t4 <identifier> <identifiersep> vpc <identifiersep> mgr . <identifier> <identifiersep> ip <identifiersep> from <identifiersep> vpc <identifiersep> network ( ip <identifiersep> to <identifiersep> release . get <identifiersep> id ( ) , network . get <identifiersep> id ( ) ) ; } } \n \t2 try { \n \t3 if ( ! <identifier> <identifiersep> ip <identifiersep> addr <identifiersep> mgr . apply <identifiersep> ip <identifiersep> associations ( network , true ) ) { \n <ect>
\t3 request . set <identifiersep> attribute ( <string_literal> , proxy . get <identifiersep> invocation ( ) . get <identifiersep> stack ( ) ) ; \n \t3 proxy . execute ( ) ; \n \t2 } catch ( configuration <identifiersep> exception e ) { \n \t3 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t5 service <identifiersep> remote <identifiersep> command ( command ) ; } \n \t4 @ override \n \t4 public void on <identifiersep> exception ( io <identifiersep> exception error ) { \n \t5 if ( ! future <identifiersep> remote <identifiersep> broker <identifiersep> info . is <identifiersep> done ( ) ) { \n <ect>
\t5 . get <identifiersep> user <identifiersep> id ( ) ) ) ; \n \t3 return ( o <identifiersep> auth <identifiersep> entry ) action <identifiersep> controller . execute ( current <identifiersep> context , update <identifiersep> request <identifiersep> to <identifiersep> access <identifiersep> token <identifiersep> action ) ; } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t1 public static job <identifiersep> instance parse <identifiersep> to <identifiersep> job <identifiersep> instance <identifiersep> quietly ( checkpoint <identifiersep> executable job , map < string , output > outputs ) { \n \t2 try { \n \t3 return parse <identifiersep> to <identifiersep> job <identifiersep> instance ( job , outputs ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 string item <identifiersep> name = provider . get <identifiersep> item <identifiersep> name <identifiersep> by <identifiersep> id <identifiersep> and <identifiersep> param ( device <identifiersep> id , <string_literal> ) ; \n \t7 if ( item <identifiersep> name != null ) { \n \t8 context . get <identifiersep> event <identifiersep> publisher ( ) . post <identifiersep> update ( item <identifiersep> name , \n \t10 new decimal <identifiersep> type ( cache . get ( <string_literal> ) ) ) ; \n <ect>
\t2 update <identifiersep> op up = new update <identifiersep> op ( <string_literal> , true ) ; \n \t2 super . ds . create ( collection . nodes , collections . singleton <identifiersep> list ( up ) ) ; \n \t2 remove <identifiersep> me . add ( <string_literal> ) ; \n \t2 long td = super . ds . determine <identifiersep> server <identifiersep> time <identifiersep> difference <identifiersep> millis ( ) ; \n <ect>
\t10 return address ; } \n \t8 } catch ( throwable e ) { \n \t9 logger . warn ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; } } } \n \t5 } catch ( throwable e ) { \n <ect>
\t6 + result . get <identifiersep> result ( ) ) ; } \n \t4 continue ; \n \t3 } else if ( debug ) { \n \t4 if ( result . get <identifiersep> type ( ) == enum <identifiersep> action <identifiersep> result . success ) { \n <ect>
\t3 if ( ! vm <identifiersep> mo . configure <identifiersep> vm ( vm <identifiersep> config <identifiersep> spec ) ) { \n \t4 throw new exception ( <string_literal> ) ; } \n \t3 return new <identifier> <identifiersep> nic <identifiersep> answer ( cmd , true , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 path , true ) ) ; <comment> \n \t3 exp . add ( mary <identifiersep> dom <identifiersep> utils . create <identifiersep> <identifier> ( doc ) ) ; } \n \t2 return exp ; } \n \t1 private list < element > expand <identifiersep> domain ( document doc , string domain ) { \n <ect>
\t5 if ( boolean . true . equals ( expression . get <identifiersep> value ( message <identifiersep> eval <identifiersep> context , message , boolean . class ) ) ) { \n \t6 result . add ( session <identifiersep> id , sub <identifiersep> id ) ; } } \n \t4 catch ( <identifier> <identifiersep> evaluation <identifiersep> exception ex ) { \n <ect>
\t2 if ( src instanceof string ) { \n \t3 try { \n \t4 return integer . value <identifiersep> of ( src . to <identifiersep> string ( ) ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception <identifier> ) { \n <ect>
\t5 i < update <identifiersep> counts . length ; \n \t5 updates += update <identifiersep> counts [ i ] , i ++ ) \n \t4 { \n \t5 if ( update <identifiersep> counts [ i ] == 0 ) { \n <ect>
\t2 tester . execute <identifiersep> ajax <identifiersep> event ( <string_literal> , <string_literal> ) ; \n \t2 <comment> \n \t2 tester . assert <identifiersep> <identifier> <identifiersep> page ( home <identifiersep> page . class ) ; \n \t2 string doc = tester . get <identifiersep> last <identifiersep> response <identifiersep> as <identifiersep> string ( ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public answer create <identifiersep> snapshot ( create <identifiersep> object <identifiersep> command cmd ) { \n <ect>
\t3 ) { \n \t4 if ( log <identifiersep> enabled ) log . info ( <string_literal> ) ; \n \t4 if ( <identifier> <identifiersep> math . choose <identifiersep> math <identifiersep> method ( this , meta <identifiersep> method ) ) { \n \t5 catch <identifiersep> exception = false ; \n <ect>
\t5 file xsd = new file ( xsd <identifiersep> <identifier> , val [ 1 ] ) ; \n \t5 if ( ! xsd . exists ( ) ) { \n \t6 xsd = new file ( xsd <identifiersep> <identifier> , val [ 1 ] ) ; } \n \t5 if ( ! xsd . exists ( ) ) { \n <ect>
\t3 throw new verification <identifiersep> exception ( <string_literal> ) ; } \n \t1 private void check <identifiersep> <identifier> <identifiersep> root ( ) throws verification <identifiersep> exception { \n \t2 <identifier> <identifier> <identifiersep> root = calculate <identifiersep> <identifier> <identifiersep> root ( ) ; \n \t2 if ( ! <identifier> <identifiersep> root . equals ( <identifier> <identifiersep> root ) ) { \n <ect>
\t7 resource <identifiersep> schema root <identifiersep> resource <identifiersep> node ) \n \t1 throws io <identifiersep> exception \n { \n \t1 file <identifiersep> name += rest <identifiersep> constants . resource <identifiersep> model <identifiersep> filename <identifiersep> extension ; \n <ect>
\t2 for ( execution <identifiersep> command cmd : commands <identifiersep> to <identifiersep> schedule ) { \n \t2 config <identifiersep> helper . process <identifiersep> hidden <identifiersep> attribute ( cmd . get <identifiersep> configurations ( ) , cmd . get <identifiersep> configuration <identifiersep> attributes ( ) , cmd . get <identifiersep> role ( ) , false ) ; \n \t2 process <identifiersep> host <identifiersep> role ( request , stage , cmd , commands <identifiersep> to <identifiersep> start , commands <identifiersep> to <identifiersep> update ) ; } \n \t2 log . debug ( <string_literal> , commands <identifiersep> to <identifiersep> start . size ( ) ) ; \n <ect>
\t7 channel <identifiersep> condition . stdout <identifiersep> data \n \t7 | channel <identifiersep> condition . stderr <identifiersep> data \n \t7 | channel <identifiersep> condition . eof , <number_literal> ) ; \n \t5 if ( ( conditions & channel <identifiersep> condition . timeout ) != 0 ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 return true ; \n \t2 } catch ( service <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t3 + <string_literal> + result . length ( ) ) ; } \n \t1 } catch ( io <identifiersep> exception e ) { \n \t1 <comment> \n <ect>
\t3 tracker = <identifier> <identifiersep> <identifier> <identifiersep> client <identifiersep> manager ; } \n \t2 <comment> \n \t2 int rv = tracker . new <identifiersep> incoming ( <identifier> , port , type ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 @ override \n \t3 public void failed ( final exception ex ) { \n \t4 if ( ex instanceof resource <identifiersep> io <identifiersep> exception ) { \n <ect>
\t3 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) { \n \t4 if ( delay > <number_literal> ) \n \t5 <identifier> <identifiersep> log . warn ( <identifier> <identifiersep> pool + <string_literal> + delay + <string_literal> + this ) ; \n \t4 else if ( delay < - <number_literal> ) \n <ect>
\t3 writer . write ( comment ) ; \n \t3 writer . new <identifiersep> line ( ) ; \n \t3 writer . flush ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 ejb <identifiersep> book book = ejb <identifiersep> book . class . cast ( delegate . read <identifiersep> from ( ejb <identifiersep> book . class , generic <identifiersep> type , annotations , media <identifiersep> type , http <identifiersep> headers , entity <identifiersep> stream ) ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 read <identifiersep> event . fire ( <string_literal> ) ; \n <ect>
\t7 <identifier> <identifiersep> log . info ( <string_literal> ) ; } \n \t5 cur = end + 1 ; } \n \t4 if ( total < = 0 ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t3 assert . assert <identifiersep> array <identifiersep> equals ( <identifier> . public <identifiersep> key ( ) . get <identifiersep> encoded ( ) , pko . public <identifiersep> key ( ) . get <identifiersep> encoded ( ) ) ; \n \t2 } else { \n \t3 assert . assert <identifiersep> equals ( <identifier> . public <identifiersep> key ( ) , pko . public <identifiersep> key ( ) ) ; } \n \t2 if ( null != optional2nd <identifiersep> key ) { \n <ect>
<comment> \n \t1 public void halt ( ) { \n \t2 shutdown = true ; \n <ect>
\t2 attachments . remove ( attachment ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t2 log . debug ( instance <identifiersep> id + <string_literal> + qualifier + <string_literal> + attachment . get <identifiersep> volume <identifiersep> id ( ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 if ( job <identifiersep> list != null ) { \n \t5 for ( bundle <identifiersep> job <identifiersep> bean bundle <identifiersep> job : job <identifiersep> list ) { \n \t6 if ( ( bundle <identifiersep> job . get <identifiersep> pause <identifiersep> time ( ) == null || bundle <identifiersep> job . get <identifiersep> pause <identifiersep> time ( ) . after ( d ) ) ) { \n \t7 new bundle <identifiersep> <identifier> <identifiersep> x <identifiersep> command ( bundle <identifiersep> job ) . call ( ) ; \n <ect>
\t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , e . get <identifiersep> message ( ) . to <identifiersep> string ( ) ) ; \n \t3 exception <identifiersep> occurred = true ; \n \t2 } catch ( client <identifiersep> protocol <identifiersep> exception e ) { \n <ect>
\t4 log . debug ( <string_literal> + message <identifiersep> id + <string_literal> + location ) ; } \n \t3 acknowledge ( message <identifiersep> id , location , key ) ; \n \t2 } else { \n \t3 if ( debug ) { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> state . meta <identifiersep> data ( ) . index ( <string_literal> ) . primary <identifiersep> term ( 0 ) , equal <identifiersep> to ( 2l ) ) ; \n \t2 assert <identifiersep> that ( routing <identifiersep> table . index ( <string_literal> ) . shard ( 0 ) . replica <identifiersep> shards ( ) . get ( 0 ) . current <identifiersep> node <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; } \n \t1 public void test <identifiersep> removing <identifiersep> initializing <identifiersep> replicas <identifiersep> if <identifiersep> primaries <identifiersep> fails ( ) { \n \t2 allocation <identifiersep> service allocation = create <identifiersep> allocation <identifiersep> service ( settings . builder ( ) . put ( <string_literal> , <number_literal> ) . build ( ) ) ; \n <ect>
\t4 } else { \n \t5 logger . info ( <string_literal> + node <identifiersep> id + <string_literal> ) ; \n \t5 node <identifiersep> good = false ; } } \n \t3 if ( current <identifiersep> stores <identifiersep> xml <identifiersep> versioned == null ) { \n <ect>
\t1 @ override \n \t1 public map < ? extends server <identifiersep> resource , map < string , string > > find ( long dc <identifiersep> id , long pod <identifiersep> id , long cluster <identifiersep> id , uri url , \n \t2 string username , string password , list < string > host <identifiersep> tags ) throws discovery <identifiersep> exception { \n <ect>
\t5 pom <identifiersep> properties = get <identifiersep> pom <identifiersep> properties <identifiersep> from <identifiersep> file <identifiersep> system ( root <identifiersep> path ) ; } } \n \t3 if ( pom <identifiersep> properties == null ) { \n \t4 pom <identifiersep> properties = generate <identifiersep> pom <identifiersep> properties <identifiersep> from <identifiersep> pom ( root <identifiersep> path ) ; } } \n \t2 if ( pom <identifiersep> properties == null ) { \n <ect>
\t3 listener . save <identifiersep> partial <identifiersep> <identifier> ( this . peer , <identifier> ) ; } } } \n void <identifier> <identifiersep> message ( boolean interest ) \n { \n \t1 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 log . error ( <string_literal> ) ; \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( \n \t5 <string_literal> ) ; } \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( namespace <identifiersep> name ) ) { \n <ect>
\t1 <comment> \n \t1 public static void log <identifiersep> configuration ( ) { \n <ect>
<comment> \n \t1 protected void finish <identifiersep> <identifier> ( exception failure ) { \n <ect>
\t3 log . debug ( <string_literal> , bean . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; } \n \t2 return null ; } \n \t1 public static class lookup <identifiersep> exception <identifiersep> handler { \n \t2 public void handle <identifiersep> exception ( exception e , logger log , string name ) { \n <ect>
\t6 log . error ( local <identifiersep> addr + <string_literal> + msg . get <identifiersep> src ( ) ) ; \n \t5 return null ; } \n \t4 address sender = msg . get <identifiersep> src ( ) ; \n \t4 if ( view != null && ! view . contains <identifiersep> member ( sender ) ) { \n <ect>
public class async <identifiersep> logger <identifiersep> exception <identifiersep> handler implements exception <identifiersep> handler { \n private static final status <identifiersep> logger logger = status <identifiersep> logger . get <identifiersep> logger ( ) ; \n @ override \n public void handle <identifiersep> event <identifiersep> exception ( throwable ex , long sequence , object event ) { \n <ect>
\t4 } else { \n \t5 is = exchange . get <identifiersep> in ( ) . get <identifiersep> mandatory <identifiersep> body ( input <identifiersep> stream . class ) ; } } \n \t3 final stop <identifiersep> watch watch = new stop <identifiersep> watch ( ) ; \n \t3 boolean answer ; \n <ect>
\t1 protected boolean check <identifiersep> conditions ( ) { \n \t2 if ( get <identifiersep> logging <identifiersep> entity ( ) == null ) { \n \t3 log <identifiersep> log . warn ( <string_literal> ) ; \n \t2 } else if ( ! safe <identifiersep> to <identifiersep> create <identifiersep> editing <identifiersep> context ( ) ) { \n <ect>
\t3 return o <identifiersep> auth20utils . produce <identifiersep> unauthorized <identifiersep> error <identifiersep> view ( ) ; } \n \t2 final view view = build <identifiersep> authorization <identifiersep> for <identifiersep> request ( registered <identifiersep> service , context , client <identifiersep> id , service , authentication ) ; \n \t2 if ( view != null ) { \n \t3 return o <identifiersep> auth20utils . redirect <identifiersep> to ( view ) ; } \n <ect>
\t4 copy <identifiersep> local <identifiersep> to <identifiersep> nfs ( tmp <identifiersep> iso <identifiersep> store , new file ( cmd . get <identifiersep> iso <identifiersep> file ( ) ) , cmd . get <identifiersep> dest <identifiersep> store ( ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 return new answer ( cmd , e ) ; \n \t3 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t4 final hive <identifiersep> cmd <identifiersep> builder hive <identifiersep> cmd <identifiersep> builder = new hive <identifiersep> cmd <identifiersep> builder ( ) ; \n \t4 hive <identifiersep> cmd <identifiersep> builder . add <identifiersep> statement ( use <identifiersep> database <identifiersep> hql ) ; \n \t4 for ( string del <identifiersep> hive : all <identifiersep> hive <identifiersep> tables <identifiersep> need <identifiersep> to <identifiersep> be <identifiersep> deleted ) { \n \t5 hive <identifiersep> cmd <identifiersep> builder . add <identifiersep> statement ( <string_literal> + del <identifiersep> hive + <string_literal> ) ; \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + vm . to <identifiersep> string ( ) + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 <identifier> <identifiersep> alert <identifiersep> mgr . send <identifiersep> alert ( alert <identifiersep> type , vm . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , vm . get <identifiersep> pod <identifiersep> id <identifiersep> to <identifiersep> deploy <identifiersep> in ( ) , <string_literal> + vm . get <identifiersep> host <identifiersep> name ( ) + <string_literal> + \n \t4 host <identifiersep> desc , <string_literal> + vm . get <identifiersep> host <identifiersep> name ( ) + <string_literal> + vm <identifiersep> id + <string_literal> + host <identifiersep> desc ) ; \n \t2 } catch ( concurrent <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t2 } catch ( illegal <identifiersep> block <identifiersep> size <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( bad <identifiersep> padding <identifiersep> exception e ) { \n <ect>
\t2 if ( service != null ) { \n \t3 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t3 logger . debug ( <string_literal> , registered <identifiersep> service ) ; \n \t3 if ( registered <identifiersep> service == null || ! registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed ( ) ) { \n <ect>
\t10 + <string_literal> ) ; \n \t3 } else { \n \t4 log . debug ( <string_literal> + temp <identifiersep> dir <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n \t2 } else { \n <ect>
\t5 <comment> \n \t5 exchange . get <identifiersep> in ( ) . set <identifiersep> header ( <identifier> <identifiersep> constants . jms <identifiersep> session , get <identifiersep> session ( ) ) ; } } \n \t3 try { \n \t4 if ( is <identifiersep> transacted ( ) || is <identifiersep> synchronous ( ) ) { \n <ect>
\t3 } else if ( filter <identifiersep> type . equals ( <string_literal> ) ) { \n \t4 table <identifiersep> names = filter <identifiersep> by <identifiersep> <identifier> ( table <identifiersep> names , arrays . as <identifiersep> list ( args ) . sub <identifiersep> list ( cur <identifiersep> idx , args . length ) ) ; \n \t3 } else if ( ! filter <identifiersep> type . equals ( <string_literal> ) ) { \n \t4 print <identifiersep> usage <identifiersep> and <identifiersep> exit ( ) ; } \n <ect>
\t5 host . states <identifiersep> logger . debug ( <string_literal> , host ) ; \n \t5 <comment> \n \t5 future < ? > scheduled <identifiersep> attempt = host . reconnection <identifiersep> attempt . get <identifiersep> and <identifiersep> set ( null ) ; \n \t5 if ( scheduled <identifiersep> attempt != null ) { \n <ect>
\t4 name = owner . get <identifiersep> property ( user . name ) ; } \n \t3 tx . success ( ) ; \n \t3 return name ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 } catch ( low <identifiersep> level <identifiersep> get <identifiersep> exception e ) { \n \t3 block = null ; } \n \t2 if ( block == null ) { \n \t3 int percent <identifiersep> success = <number_literal> * fetch <identifiersep> successes / insert <identifiersep> attempts ; \n <ect>
\t4 return principal ; } \n \t3 final oidc <identifiersep> registered <identifiersep> service oidc <identifiersep> service = ( oidc <identifiersep> registered <identifiersep> service ) registered <identifiersep> service ; \n \t3 scopes . retain <identifiersep> all ( oidc <identifiersep> service . get <identifiersep> scopes ( ) ) ; \n \t3 final map < string , object > attributes = filter <identifiersep> attributes <identifiersep> by <identifiersep> scope ( scopes , principal , service , oidc <identifiersep> service , access <identifiersep> token ) ; \n <ect>
\t3 logger . error ( this , <string_literal> + this + <string_literal> + next , e ) ; \n \t3 ack <identifiersep> opennet ( next ) ; \n \t3 return false ; \n \t2 } catch ( peer <identifiersep> parse <identifiersep> exception e ) { \n <ect>
\t3 persistent <identifiersep> cache . set <identifiersep> broadcast <identifiersep> config ( broadcast <identifiersep> config ) ; } \n \t2 journal <identifiersep> cache = builder . get <identifiersep> journal <identifiersep> cache ( ) ; \n \t2 this . mbean = create <identifiersep> m <identifiersep> bean ( builder ) ; \n \t2 log . info ( <string_literal> , change <identifiersep> set <identifiersep> max <identifiersep> items , change <identifiersep> set <identifiersep> max <identifiersep> depth ) ; \n <ect>
\t5 <identifier> = e ; \n \t4 } finally { \n \t5 if ( read <identifiersep> latch . get <identifiersep> count ( ) > 0 ) { \n \t6 read <identifiersep> latch . count <identifiersep> down ( ) ; } \n <ect>
\t6 connection <identifiersep> supervisor = new connection <identifiersep> supervisor ( connection <identifiersep> test <identifiersep> interval ) ; } \n \t4 } else { \n \t5 logger . debug ( <string_literal> ) ; } \n \t3 } catch ( unknown <identifiersep> host <identifiersep> exception unknown <identifiersep> host ) { \n <ect>
\t4 + <string_literal> \n \t4 + default <identifiersep> value \n \t4 + <string_literal> , ex ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 register <identifiersep> found <identifiersep> attempt ( watched <identifiersep> path <identifiersep> info . path <identifiersep> identifier , path , null ) ; \n \t2 } else { \n \t2 log . warn ( <string_literal> + p . get <identifiersep> file <identifiersep> name ( ) ) ; } } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 dispatch <identifiersep> event ( event <identifiersep> type . elected <identifiersep> start ) ; \n \t1 logger . info ( <string_literal> , leader <identifiersep> offer . get <identifiersep> node <identifiersep> path ( ) ) ; \n \t1 dispatch <identifiersep> event ( event <identifiersep> type . elected <identifiersep> complete ) ; } \n private void become <identifiersep> failed ( exception e ) { \n <ect>
\t3 case ( 0 , <identifier> <identifiersep> <identifier> , <identifier> <identifiersep> <identifier> ) = > <comment> \n \t3 case ( <identifier> <identifiersep> <identifier> , out , err ) = > \n \t4 <comment> \n \t4 <comment> \n <ect>
\t3 user <identifiersep> vm <identifiersep> vo vm = <identifier> <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t3 vm <identifiersep> names . add ( vm . get <identifiersep> instance <identifiersep> name ( ) ) ; } \n \t2 answer answer = <identifier> <identifiersep> agent <identifiersep> mgr . <identifier> <identifiersep> send ( host <identifiersep> id , new get <identifiersep> vm <identifiersep> disk <identifiersep> stats <identifiersep> command ( vm <identifiersep> names , <identifier> <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host <identifiersep> id ) . get <identifiersep> guid ( ) , host <identifiersep> name ) ) ; \n \t2 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n <ect>
private immutable <identifiersep> map < string , long > dump <identifiersep> meta <identifiersep> call <identifiersep> timing <identifiersep> without <identifiersep> ex ( string phase ) { \n \t1 try { \n \t1 return hive . get ( ) . dump <identifiersep> and <identifiersep> clear <identifiersep> meta <identifiersep> call <identifiersep> timing ( phase ) ; \n \t1 } catch ( hive <identifiersep> exception he ) { \n <ect>
\t2 { \n \t3 storage <identifiersep> manager . start ( bundle <identifiersep> context , this ) ; } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t2 dsg . begin ( read ) ; \n \t2 assert <identifiersep> true ( dsg . is <identifiersep> empty ( ) ) ; <comment> \n \t2 log . debug ( <string_literal> ) ; \n \t2 added <identifiersep> checked <identifiersep> but <identifiersep> not <identifiersep> committed . set ( true ) ; \n <ect>
\t2 logger . info ( <string_literal> , blocked <identifiersep> node ) ; \n \t2 unblock <identifiersep> node ( repo , blocked <identifiersep> node ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> acked ( future . action <identifiersep> get ( ) ) ; \n <ect>
\t3 <comment> \n \t3 headers . put ( <string_literal> , info ) ; \n \t3 final com . box . sdk . box <identifiersep> group result = request <identifiersep> body <identifiersep> and <identifiersep> headers ( <string_literal> , null , headers ) ; \n \t3 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t3 } ) ; } \n \t2 executor <identifiersep> service . shutdown ( ) ; \n \t2 boolean all <identifiersep> complete = executor <identifiersep> service . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t2 executor <identifiersep> service . shutdown <identifiersep> now ( ) ; \n <ect>
\t3 for ( iterator < string > i = avail <identifiersep> pool . key <identifiersep> set ( ) . iterator ( ) ; i . has <identifiersep> next ( ) ; ) { \n \t4 string host \t3 = i . next ( ) ; \n \t4 map < sock <identifiersep> io , long > <identifier> = avail <identifiersep> pool . get ( host ) ; \n <ect>
\t4 constant = ( constant <identifiersep> ex ) e2 ; \n \t3 } else { \n \t4 variable = ( attribute <identifiersep> expr <identifiersep> ex ) e2 ; \n \t4 constant = ( constant <identifiersep> ex ) e1 ; } \n <ect>
\t8 exception <identifiersep> class . get <identifiersep> name ( ) + <string_literal> ) ; } \n \t5 return null ; } } \n \t2 catch ( throwable ex ) { \n <ect>
\t7 + <string_literal> \n \t7 + error <identifiersep> command + <string_literal> ) ; \n \t2 } else { \n \t3 <comment> \n <ect>
\t3 if ( <identifier> != null && <identifier> . drain ( ) ) { \n \t4 task = new task ( <identifier> , <identifier> ) ; \n \t4 s <identifiersep> executors . execute ( task ) ; } \n \t3 while ( true ) { \n <ect>
\t1 calendar <identifier> <identifiersep> <identifier> <identifiersep> <identifier> = calendar . get <identifiersep> instance ( ) ; \n \t1 long now = <identifier> . now ( ) ; \n \t1 <identifier> <identifiersep> <identifier> <identifiersep> <identifier> . set <identifiersep> time <identifiersep> in <identifiersep> millis ( now ) ; \n \t1 <identifier> <identifiersep> <identifier> <identifiersep> <identifier> . add ( calendar . date , - <number_literal> ) ; \n <ect>
\t4 z <identifiersep> controller . request <identifiersep> node <identifiersep> <identifier> <identifiersep> update ( <identifier> . node <identifiersep> id ) ; \n \t4 break ; \n \t3 case <identifier> : \n \t4 <comment> \n <ect>
\t1 if ( 0 == wrapper . get <identifiersep> hosts ( ) . size ( ) ) { \n \t1 throw new ambari <identifiersep> exception ( \n \t2 string . format ( <string_literal> , wrapper . get <identifiersep> text ( ) ) ) ; } \n \t1 cluster cluster = context . get <identifiersep> cluster ( ) ; \n <ect>
\t5 log . debug ( <string_literal> \n \t7 + quorum <identifiersep> <identifier> <identifiersep> manager . this . my <identifiersep> sid ) ; \n \t5 ss . close ( ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 for ( string key : metadata <identifiersep> store . gossip <identifiersep> keys ) { \n \t4 try { \n \t5 gossip <identifiersep> key ( node , key ) ; \n \t4 } catch ( voldemort <identifiersep> exception e ) { \n <ect>
\t2 if ( cp == null || cp . equals ( <string_literal> ) ) { \n \t3 cp = options . get <identifiersep> class <identifiersep> path ( ) ; } \n \t2 string path = <identifier> . to <identifiersep> string ( ) + cp ; \n <ect>
\t2 this . <identifier> <identifiersep> max <identifiersep> events = setting <identifiersep> <identifier> <identifiersep> max <identifiersep> events . get ( settings ) ; \n \t2 this . cors <identifiersep> config = build <identifiersep> cors <identifiersep> config ( settings ) ; \n \t2 <comment> \n \t2 if ( max <identifiersep> content <identifiersep> length . get <identifiersep> bytes ( ) > integer . max <identifiersep> value ) { \n <ect>
\t2 if ( default <identifiersep> session ( ) == null ) \n \t3 log . warn ( <string_literal> ) ; \n \t2 <comment> \n \t2 set <identifiersep> default <identifiersep> x <identifiersep> <identifier> <identifiersep> header ( system . get <identifiersep> property ( <string_literal> ) ) ; \n <ect>
\t4 return ; } \n \t3 transaction <identifier> <identifiersep> transaction = \n \t4 tx <identifiersep> map . get ( confidence <identifiersep> proto . get <identifiersep> <identifier> <identifiersep> transaction ( ) ) ; \n \t3 if ( <identifier> <identifiersep> transaction == null ) { \n <ect>
\t3 logger . debug ( <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) + <string_literal> ) ; \n \t3 logger . debug ( <string_literal> + tab <identifiersep> to <identifiersep> <identifier> . get <identifiersep> template ( ) . get <identifiersep> id ( ) ) ; \n \t3 <comment> \n \t3 start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t3 case <number_literal> : \n \t3 r = new <identifier> ( i , duration <identifiersep> <identifier> ) ; \n \t3 break ; } \n \t2 if ( i % print == 0 ) \n <ect>
\t2 if ( m <identifiersep> socket != null ) { \n \t3 try { \n \t4 m <identifiersep> socket . set <identifiersep> so <identifiersep> timeout ( m <identifiersep> timeout ) ; \n \t3 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 for ( string f : optional <identifiersep> configs ) { \n \t3 try { \n \t3 copy <identifiersep> config ( <identifier> , conf <identifiersep> path , f ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t6 if ( <identifier> <identifiersep> log . should <identifiersep> debug ( ) ) \n \t7 <identifier> <identifiersep> log . debug ( <string_literal> + addresses . to <identifiersep> string ( ip ) + <string_literal> + h ) ; \n \t6 <identifier> . add ( addresses . to <identifiersep> string ( ip ) ) ; } } \n \t4 if ( valid == 0 ) \n <ect>
\t2 if ( config . get <identifiersep> type ( ) != cal <identifiersep> dav <identifiersep> type . disable ) { \n \t3 logger . trace ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( command == on <identifiersep> off <identifiersep> type . on ) { \n <ect>
\t7 process <identifiersep> response ( json ) ; \n \t7 return response ; } \n \t6 @ override \n \t6 public void on <identifiersep> throwable ( throwable t ) { \n <ect>
\t3 buffered <identifiersep> image img = null ; \n \t3 try { \n \t4 img = image <identifiersep> io . read ( file ) ; } \n \t3 catch ( io <identifiersep> exception e ) { \n <ect>
\t5 ds . set <identifiersep> dir ( dir ) ; \n \t5 ds . create <identifiersep> pattern <identifiersep> set ( ) . add <identifiersep> configured <identifiersep> <identifier> ( ps ) ; \n \t5 dir <identifiersep> sets . add ( ds ) ; \n \t4 } else { \n <ect>
<comment> \n \t1 static class ping <identifiersep> pong <identifiersep> impl extends ping <identifiersep> pong <identifiersep> grpc . ping <identifiersep> pong <identifiersep> impl <identifiersep> base { \n \t2 @ override \n \t2 public void ping <identifiersep> sync <identifiersep> sync ( ping <identifiersep> request request , stream <identifiersep> observer < pong <identifiersep> response > response <identifiersep> observer ) { \n <ect>
# \t1 if this is the second instance of the process , the function fails . \n # \n @ os <identifiersep> family <identifiersep> func <identifiersep> impl ( os <identifiersep> family <identifiersep> impl . default ) \n def start ( args ) : \n <ect>
\t2 assertion . set <identifiersep> x <identifiersep> path <identifiersep> string ( <string_literal> ) ; \n \t2 assertion . set <identifiersep> <identifier> ( false ) ; \n \t2 assertion . set <identifiersep> <identifier> ( false ) ; \n \t2 assertion <identifiersep> result res = assertion . get <identifiersep> result ( result ) ; \n <ect>
\t1 @ override \n \t1 public boolean restart <identifiersep> network ( final long network <identifiersep> id , final account caller <identifiersep> account , final user caller <identifiersep> user , final boolean cleanup ) throws concurrent <identifiersep> operation <identifiersep> exception , resource <identifiersep> unavailable <identifiersep> exception , \n \t1 insufficient <identifiersep> capacity <identifiersep> exception { \n \t2 final network <identifiersep> vo network = <identifier> <identifiersep> networks <identifiersep> dao . find <identifiersep> by <identifiersep> id ( network <identifiersep> id ) ; \n <ect>
\t1 protected void print <identifiersep> formatted <identifiersep> payload ( ) { \n \t2 logger . debug ( <string_literal> <ect>
\t3 cm . get <identifiersep> cache ( ) ; \n \t3 event <identifiersep> logger event <identifiersep> logger = event <identifiersep> log <identifiersep> manager . get <identifiersep> event <identifiersep> logger ( cm ) ; \n \t3 assert <identifiersep> true ( event <identifiersep> logger . get <identifiersep> class ( ) . get <identifiersep> name ( ) , event <identifiersep> logger instanceof server <identifiersep> event <identifiersep> logger ) ; \n \t3 event <identifiersep> logger . info ( event <identifiersep> log <identifiersep> category . cluster , <string_literal> ) ; \n <ect>
\t3 if ( this . infinispan <identifiersep> embedded <identifiersep> cache <identifiersep> manager . get <identifiersep> cache <identifiersep> names ( ) . contains ( cache <identifiersep> name ) ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + cache <identifiersep> name + <string_literal> ) ; } \n \t3 break ; \n \t2 case custom : \n <ect>
\t5 } else { \n \t6 logger . warn ( <string_literal> , item <identifiersep> command ) ; } } \n \t4 logger . trace ( <string_literal> , soap <identifiersep> to <identifiersep> string ( msg ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 data <identifiersep> center dc = dc <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; \n \t2 <comment> \n \t2 if ( avoid . should <identifiersep> avoid ( dc ) ) { \n <ect>
\t5 logger . warn ( <string_literal> , type <identifiersep> string ) ; \n \t5 return <string_literal> + type <identifiersep> string + <string_literal> ; } } \n \t3 <comment> \n \t3 if ( type == null ) { \n <ect>
\t1 if ( request <identifiersep> properties . contains <identifiersep> key ( request <identifiersep> operation <identifiersep> level . operation <identifiersep> level <identifiersep> id ) ) { \n \t1 request <identifiersep> operation <identifiersep> level operation <identifiersep> level = new request <identifiersep> operation <identifiersep> level ( request <identifiersep> properties ) ; \n \t1 req <identifiersep> op <identifiersep> <identifier> = operation <identifiersep> level . get <identifiersep> level ( ) ; \n \t1 } else { \n <ect>
\t4 if ( value != null ) { \n \t5 string replaced = resolve <identifiersep> property <identifiersep> <identifier> ( value ) ; \n \t5 if ( ! value . equals ( replaced ) ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + dc <identifiersep> id + <string_literal> + pod <identifiersep> id + <string_literal> + cluster <identifiersep> id + <string_literal> + uri . get <identifiersep> host ( ) ) ; } \n \t2 <comment> \n \t2 if ( pod <identifiersep> id == null ) { \n <ect>
\t4 <identifier> . set <identifiersep> setup ( setup ) ; \n \t4 logger . info ( <string_literal> , \n \t6 setup . get <identifiersep> device <identifiersep> address ( ) , setup . get <identifiersep> channel ( ) , setup . get <identifiersep> network <identifiersep> id ( ) ) ; } \n \t2 } catch ( swap <identifiersep> exception e ) { \n <ect>
<comment> \n private void initialize <identifiersep> helper ( properties ds <identifiersep> props ) { \n <ect>
\t6 s <identifiersep> logger . warn ( <string_literal> + vm . get <identifiersep> uuid ( ) + <string_literal> ) ; } } \n \t4 <comment> \n \t4 <comment> \n \t4 if ( ! <identifier> <identifiersep> vm <identifiersep> mgr . expunge ( vm , caller <identifiersep> user <identifiersep> id , caller ) ) { \n <ect>
\t4 tc <identifiersep> run <identifiersep> logger . debug ( <string_literal> ) \n \t4 exit ( 1 ) \n \t3 else : \n \t4 print <string_literal> \n <ect>
\t2 if ( local <identifiersep> storage <identifiersep> root != null ) setup <identifiersep> local <identifiersep> storage ( local <identifiersep> storage <identifiersep> root ) ; \n \t2 multipart <identifiersep> dir = properties . get <identifiersep> property ( <string_literal> ) ; \n \t2 timer . schedule ( get <identifiersep> heartbeat <identifiersep> task ( ) , heartbeat <identifiersep> interval , heartbeat <identifiersep> interval ) ; \n <ect>
\t2 try { \n \t3 file <identifiersep> system fs = entry . cached <identifiersep> results <identifiersep> path . get <identifiersep> file <identifiersep> system ( get <identifiersep> instance ( ) . conf ) ; \n \t3 fs . delete ( entry . cached <identifiersep> results <identifiersep> path , true ) ; \n \t2 } catch ( exception err ) { \n <ect>
\t3 @ override \n \t3 public void on <identifiersep> failure ( string source , exception e ) { \n \t4 latch . count <identifiersep> down ( ) ; \n \t4 ack <identifiersep> listener . on <identifiersep> node <identifiersep> ack ( transport <identifiersep> service . get <identifiersep> local <identifiersep> node ( ) , e ) ; \n <ect>
\t2 if ( command . get <identifiersep> type ( ) == <identifier> <identifiersep> setup <identifiersep> command . type . dhcp ) { \n \t3 result = citrix <identifiersep> resource <identifiersep> base . call <identifiersep> host <identifiersep> plugin ( conn , <string_literal> , <string_literal> , <string_literal> , op , <string_literal> , nw <identifiersep> name <identifiersep> label , <string_literal> , primary <identifiersep> <identifier> , <string_literal> , \n \t5 isolated <identifiersep> <identifier> , <string_literal> , dhcp <identifiersep> name , <string_literal> , dhcp <identifiersep> ip , <string_literal> , dhcp <identifiersep> mac ) ; \n \t3 if ( result == null || result . is <identifiersep> empty ( ) || ! boolean . parse <identifiersep> boolean ( result ) ) { \n <ect>
\t4 if ( ! abort ) { \n \t5 <comment> \n \t5 final long backoff = restart <identifiersep> backoff . get <identifiersep> and <identifiersep> add ( backoff <identifiersep> increment ) ; \n \t5 if ( backoff > max <identifiersep> backoff ) { \n <ect>
\t2 try { \n \t3 directory = new directory ( file <identifiersep> path ) ; \n \t3 properties . set <identifiersep> and <identifiersep> save <identifiersep> distribution <identifiersep> directory ( directory ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 identity = new simple <identifiersep> principal ( name ) ; \n \t4 if ( get <identifiersep> use <identifiersep> first <identifiersep> pass ( ) ) { \n \t5 string user <identifiersep> name = identity . get <identifiersep> name ( ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 <comment> \n \t2 boolean too <identifiersep> many = false ; \n \t2 while ( enumeration . has <identifiersep> more <identifiersep> elements ( ) ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 if ( node . get <identifiersep> node <identifiersep> initialization <identifiersep> stage ( ) . is <identifiersep> static <identifiersep> complete ( ) == false ) { \n <ect>
\t5 log . debug ( <string_literal> , name ) ; \n \t5 return name ; } \n \t4 name = from <identifiersep> system <identifiersep> property ( ) ; \n \t4 if ( name != null ) { \n <ect>
\t2 return build <identifiersep> command <identifiersep> line ( command ) ; } \n \t1 public string execute ( output <identifiersep> <identifier> <identifier> ) { \n \t2 string [ ] command = <identifier> <identifiersep> command . to <identifiersep> array ( new string [ <identifier> <identifiersep> command . size ( ) ] ) ; \n <ect>
\t5 throw new bad <identifiersep> credentials <identifiersep> exception ( <string_literal> ) ; } } \n \t2 } catch ( bad <identifiersep> credentials <identifiersep> exception e ) { \n \t3 throw e ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 int bulb = device <identifiersep> config . get <identifiersep> channel <identifiersep> number ( ) ; \n \t3 int <identifier> <identifiersep> steps = device <identifiersep> config . get <identifiersep> steps ( ) ; \n \t3 string bridge <identifiersep> id = device <identifiersep> config . get <identifiersep> device <identifiersep> id ( ) ; \n \t3 if ( device <identifiersep> config . get <identifiersep> command <identifiersep> type ( ) . equals ( binding <identifiersep> type . <identifier> ) ) { \n <ect>
\t3 return ; } \n <comment> \n <comment> \n <comment> \n <ect>
\t2 for ( string path : paths ) { \n \t3 assert <identifiersep> doc <identifiersep> cache ( <identifier> , true , path ) ; } \n \t2 { \n \t3 document <identifiersep> store s = <identifier> . get <identifiersep> document <identifiersep> store ( ) ; \n <ect>
\t4 allowed = false ; \n \t3 } else { \n \t4 this . subscription = subscription ; } } \n \t2 if ( ! allowed ) { \n <ect>
\t2 jaxb <identifiersep> schemas . put ( xsd <identifiersep> name , schema ) ; \n \t2 } else if ( log <identifiersep> xsd ) { \n \t2 log . info ( <string_literal> + xsd <identifiersep> name + <string_literal> + file . get <identifiersep> absolute <identifiersep> path ( ) + <string_literal> ) ; } } \n \t1 } else if ( log <identifiersep> xsd ) { \n <ect>
\t2 final ticket enc <identifiersep> ticket = encode <identifiersep> ticket ( ticket ) ; \n \t2 final ticket <identifiersep> definition metadata = this . ticket <identifiersep> catalog . find ( ticket ) ; \n \t2 final i <identifiersep> map < string , ticket > ticket <identifiersep> map = get <identifiersep> ticket <identifiersep> map <identifiersep> instance <identifiersep> by <identifiersep> metadata ( metadata ) ; \n \t2 ticket <identifiersep> map . set ( enc <identifiersep> ticket . get <identifiersep> id ( ) , enc <identifiersep> ticket , ttl , time <identifiersep> unit . seconds ) ; \n <ect>
\t2 document <identifiersep> builder builder = null ; \n \t2 try { \n \t3 builder = factory . new <identifiersep> document <identifiersep> builder ( ) ; \n \t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> , result . get <identifiersep> id ( ) ) ; \n \t4 map . remove ( enc <identifiersep> ticket <identifiersep> id ) ; \n \t4 return null ; } \n \t3 return result ; } \n <ect>
\t3 for ( ss <identifiersep> table <identifiersep> reader <identifier> : transaction . <identifier> ( ) ) \n \t3 { \n \t4 ss <identifiersep> table <identifiersep> logger <identifiersep> msg . append ( string . format ( <string_literal> , <identifier> . get <identifiersep> filename ( ) , <identifier> . get <identifiersep> ss <identifiersep> table <identifiersep> level ( ) ) ) ; } \n \t3 ss <identifiersep> table <identifiersep> logger <identifiersep> msg . append ( <string_literal> ) ; \n <ect>
\t4 logger . debug ( <string_literal> , result ) ; \n \t4 if ( result != null && ! clazz . is <identifiersep> assignable <identifiersep> from ( result . get <identifiersep> class ( ) ) ) { \n \t5 throw new class <identifiersep> cast <identifiersep> exception ( <string_literal> + result + <string_literal> + result . get <identifiersep> class ( ) + <string_literal> + clazz ) ; } \n \t4 return ( t ) result ; } \n <ect>
\t3 if ( <identifier> <identifiersep> work <identifiersep> dir != null ) \n \t4 <identifier> . directory ( new file ( <identifier> <identifiersep> work <identifiersep> dir ) ) ; \n \t3 <identifier> <identifiersep> process = <identifier> . start ( ) ; \n \t3 if ( <identifier> <identifiersep> process == null ) { \n <ect>
\t3 fs . set <identifiersep> owner ( new path ( dir <identifiersep> path ) , username , username ) ; } \n \t2 return b ; } \n \t1 } ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 private boolean we <identifiersep> are <identifiersep> <identifier> ( set < hash > router <identifiersep> hash <identifiersep> set ) { \n \t2 return router <identifiersep> hash <identifiersep> set . contains ( get <identifiersep> context ( ) . router <identifiersep> hash ( ) ) ; } \n \t1 private void send <identifiersep> data ( hash key , database <identifiersep> entry data , hash to <identifiersep> peer , tunnel <identifiersep> id reply <identifiersep> tunnel ) { \n \t2 if ( ! key . equals ( data . get <identifiersep> hash ( ) ) ) { \n <ect>
\t8 body . get <identifiersep> <identifier> ( ) . add ( new <identifiersep> local ) ; \n \t8 body . get <identifiersep> units ( ) . insert <identifiersep> before ( <identifier> . v ( ) . new <identifiersep> assign <identifiersep> stmt ( new <identifiersep> local , constant ) , u ) ; \n \t8 invoke <identifiersep> expr . set <identifiersep> arg ( 0 , new <identifiersep> local ) ; \n \t8 if ( verbose ) \n <ect>
\t1 <comment> \n \t1 public void process <identifiersep> result ( int rc , string path , object ctx , byte [ ] bytes , stat stat ) \n \t1 { \n \t1 keeper <identifiersep> exception . code code = keeper <identifiersep> exception . code . get ( rc ) ; \n <ect>
\t1 if ( export <identifiersep> file <identifiersep> system . exists ( export <identifiersep> to <identifiersep> file ) ) { \n \t1 throw new illegal <identifiersep> argument <identifiersep> exception ( \n \t2 export <identifiersep> to <identifiersep> file . to <identifiersep> string ( ) + <string_literal> \n \t3 + data <identifiersep> file <identifiersep> list <identifiersep> path ) ; } \n <ect>
\t2 } catch ( connect <identifiersep> exception ce ) { \n \t3 <identifier> <identifiersep> log . error ( <string_literal> , ce ) ; \n \t3 return ; \n \t2 } catch ( i2p <identifiersep> exception ie ) { \n <ect>
\t3 final id <identifiersep> p <identifiersep> attribute attribute = prepare <identifiersep> name <identifiersep> id <identifiersep> attribute ( assertion , name <identifiersep> format , adaptor ) ; \n \t3 final <identifier> <identifiersep> name <identifiersep> id <identifiersep> encoder encoder = prepare <identifiersep> name <identifiersep> id <identifiersep> encoder ( authn <identifiersep> request , name <identifiersep> format , attribute , service , adaptor ) ; \n \t3 logger . debug ( <string_literal> , name <identifiersep> format ) ; \n \t3 final name <identifiersep> id <identifier> = encoder . encode ( attribute ) ; \n <ect>
\t3 for ( int i = 0 ; i < top <identifiersep> docs . score <identifiersep> docs . length ; i ++ ) { \n \t4 logger . error ( <string_literal> , i , top <identifiersep> docs . score <identifiersep> docs [ i ] . doc ) ; \n \t4 logger . error ( <string_literal> , i , top <identifiersep> docs . score <identifiersep> docs [ i ] . score ) ; } \n \t3 for ( int i = 0 ; i < control <identifiersep> top <identifiersep> docs . score <identifiersep> docs . length ; i ++ ) { \n <ect>
\t4 log . error ( e . get <identifiersep> message ( ) + <string_literal> + e . get <identifiersep> cause ( ) ) ; \n \t4 <identifier> . set <identifiersep> <identifier> <identifiersep> message ( <string_literal> ) ; \n \t4 <identifier> . set <identifiersep> <identifier> <identifiersep> status ( <identifier> <identifiersep> collection . status <identifiersep> unknown <identifiersep> error ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 . set <identifiersep> buffer ( marshal ( view , null ) ) . set <identifiersep> flag ( <identifier> , message . flag . internal ) ; \n \t4 down <identifiersep> prot . down ( view <identifiersep> msg ) ; \n \t4 break ; \n \t3 default : \n <ect>
\t4 final uri <identifiersep> builder builder = new uri <identifiersep> builder ( this . endpoint <identifiersep> url ) ; \n \t4 builder . add <identifiersep> parameter ( <string_literal> , principal ) ; \n \t4 final url url = builder . build ( ) . to <identifiersep> url ( ) ; \n \t4 final http <identifiersep> message message = client . send <identifiersep> message <identifiersep> to <identifiersep> end <identifiersep> point ( url ) ; \n <ect>
\t5 name <identifiersep> callback callback = new name <identifiersep> callback ( <string_literal> ) ; \n \t5 callback <identifiersep> handler . handle ( new callback [ ] { callback } ) ; \n \t5 uid = callback . get <identifiersep> name ( ) ; \n \t4 } catch ( unsupported <identifiersep> callback <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void basic <identifiersep> seek <identifiersep> zero ( ) throws io <identifiersep> exception , no <identifiersep> such <identifiersep> algorithm <identifiersep> exception { \n <ect>
\t5 logger . debug ( <string_literal> , id ) ; \n \t4 } catch ( instantiation <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception e ) { \n \t5 logger . error ( <string_literal> { } \\ <string_literal> , id , e ) ; } \n \t3 } else { \n <ect>
\t2 super . add <identifiersep> producer ( context , info ) ; } \n \t1 @ override \n \t1 public void commit <identifiersep> transaction ( connection <identifiersep> context context , transaction <identifiersep> id xid , boolean one <identifiersep> phase ) throws exception { \n \t2 if ( is <identifiersep> log <identifiersep> all ( ) || is <identifiersep> log <identifiersep> transaction <identifiersep> events ( ) ) { \n <ect>
\t2 dir <identifiersep> exists = not dfs <identifiersep> ret <identifiersep> code # dfs - test - d returns 0 in case the dir exists \n \t1 if not dir <identifiersep> exists : \n \t2 raise fail ( <string_literal> + dir <identifiersep> path + <string_literal> ) \n \t1 else : \n <ect>
<comment> \n protected void display <identifiersep> <identifier> <identifiersep> job <identifiersep> notice ( log log ) { \n <ect>
\t2 log . debug ( <string_literal> , event <identifiersep> handler , event <identifiersep> bus ) ; \n \t2 event <identifiersep> bus . register ( event <identifiersep> handler ) ; } \n \t1 @ override \n \t1 protected void do <identifiersep> stop ( ) throws exception { \n <ect>
<comment> \n \t1 public void invitation <identifiersep> received ( <identifier> <identifiersep> <identifier> <identifiersep> chat <identifiersep> room <identifiersep> invitation <identifiersep> received <identifiersep> event evt ) \n \t1 { \n <ect>
\t1 @ override \n \t1 public void close ( ) throws io <identifiersep> exception { \n \t2 list < runnable > <identifier> = service . shutdown <identifiersep> now ( ) ; \n \t2 if ( ! <identifier> . is <identifiersep> empty ( ) ) \n <ect>
\t3 return null ; \n \t2 final matcher resource <identifiersep> matcher = resource <identifiersep> pattern . matcher ( data ) ; \n \t2 if ( ! resource <identifiersep> matcher . find ( ) ) \n \t2 { \n <ect>
\t7 } else { \n \t8 log . debug ( <string_literal> + aop <identifiersep> object . get <identifiersep> class ( ) ) ; \n \t8 context . remove <identifiersep> advice ( cls , ( advice ) aop <identifiersep> object ) ; } } \n \t6 catch ( exception t ) { \n <ect>
\t10 <identifier> <identifiersep> vm <identifiersep> disk <identifiersep> stats <identifiersep> dao . update ( stat . get <identifiersep> id ( ) , stat ) ; } } \n \t8 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t6 } ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t2 st . close ( ) ; } \n \t2 if ( null != connection ) { \n \t2 connection . close ( ) ; } \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t3 format <identifiersep> message ( session <identifiersep> log <identifiersep> entry ) ) ; \n \t2 return ; \n \t1 case session <identifiersep> log . <identifier> : \n \t2 <comment> \n <ect>
\t2 private void run <identifiersep> throwable ( ) throws interrupted <identifiersep> exception { \n \t3 long start <identifiersep> monitor = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 task . start . await ( ) ; \n \t3 if ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> monitor > <number_literal> ) { \n <ect>
\t3 log . info ( <string_literal> ) ; \n \t3 latch . count <identifiersep> down ( ) ; } \n \t2 @ override \n \t2 public void on <identifiersep> complete ( exchange exchange ) { \n <ect>
\t2 loaded <identifiersep> <identifier> = new array <identifiersep> list < string > ( ) ; } \n \t1 public static void load <identifiersep> driver ( string db <identifiersep> driver ) { \n \t2 string driver <identifiersep> class = <identifier> . get ( db <identifiersep> driver ) ; \n \t2 if ( driver <identifiersep> class == null ) { \n <ect>
\t3 + <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t2 if ( dest <identifiersep> path != null ) { \n \t2 new <identifiersep> part <identifiersep> loc = dest <identifiersep> path . to <identifiersep> string ( ) ; \n \t2 old <identifiersep> part <identifiersep> loc = old <identifiersep> part . get <identifiersep> sd ( ) . get <identifiersep> location ( ) ; \n <ect>
\t6 s <identifiersep> logger . warn ( <string_literal> + data <identifiersep> store . get <identifiersep> name ( ) ) ; \n \t6 continue ; } \n \t5 vm <identifiersep> template <identifiersep> vo template = <identifier> <identifiersep> template <identifiersep> dao . find <identifiersep> by <identifiersep> id ( template <identifiersep> data <identifiersep> store . get <identifiersep> template <identifiersep> id ( ) ) ; \n \t5 if ( template == null ) { \n <ect>
\t6 break ; } } } \n \t3 state = domain <identifiersep> state . <identifier> <identifiersep> domain <identifiersep> running ; \n \t3 return new start <identifiersep> answer ( command ) ; \n \t2 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t1 get <identifiersep> vm <identifiersep> network <identifiersep> stats <identifiersep> answer network <identifiersep> stats <identifiersep> answer = null ; \n \t1 try { \n \t3 network <identifiersep> stats <identifiersep> answer = ( get <identifiersep> vm <identifiersep> network <identifiersep> stats <identifiersep> answer ) <identifier> <identifiersep> agent <identifiersep> mgr . <identifier> <identifiersep> send ( host <identifiersep> id , new get <identifiersep> vm <identifiersep> network <identifiersep> stats <identifiersep> command ( vm <identifiersep> names , host . get <identifiersep> guid ( ) , host . get <identifiersep> name ( ) ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 device device = post <identifiersep> request . execute ( ) . parse <identifiersep> as ( device . class ) ; \n \t4 <comment> \n \t4 logger . info ( \n \t6 <string_literal> ) ; \n <ect>
\t2 if ( ok ) \n \t3 authenticator <identifiersep> config ( ) ; \n \t2 <comment> \n <ect>
\t10 + <string_literal> + warning <identifiersep> header . get <identifiersep> agent ( ) \n \t10 + <string_literal> + warning <identifiersep> header . get <identifiersep> name ( ) ) ; } \n \t4 else \n \t4 { \n <ect>
\t2 for ( final string part : parts ) { \n \t3 final class type \t1 = current . get <identifiersep> entity <identifiersep> type ( ) ; \n \t3 final property <identifiersep> key key = config . get <identifiersep> property <identifiersep> key <identifiersep> for <identifiersep> json <identifiersep> name ( type , part , false ) ; \n \t3 if ( key == null ) { \n <ect>
\t1 @ override \n \t1 public void reuse <identifiersep> variant <identifiersep> entry <identifiersep> for ( \n \t3 final http <identifiersep> host host , final http <identifiersep> request request , final variant variant ) { \n <ect>
\t2 if ( size != null ) { \n \t3 try { \n \t4 pre <identifiersep> alloc <identifiersep> size = long . parse <identifiersep> long ( size ) * <number_literal> ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 if ( options . get <identifiersep> file <identifiersep> layout ( ) != sqoop <identifiersep> options . file <identifiersep> layout . text <identifiersep> file ) { \n \t1 <comment> \n \t1 log . warn ( <string_literal> + options . get <identifiersep> file <identifiersep> layout ( ) \n \t2 + <string_literal> ) ; \n <ect>
\t5 <string_literal> , new class [ ] { object . class } ) ; \n \t3 invoke <identifiersep> write <identifiersep> replace <identifiersep> method . set <identifiersep> accessible ( true ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t3 node = mapper . read <identifiersep> tree ( source <identifiersep> file ) ; \n \t3 static <identifiersep> data <identifiersep> source provider = static <identifiersep> data <identifiersep> source . from <identifiersep> json ( node , source <identifiersep> file . to <identifiersep> uri ( ) ) ; \n \t3 return provider ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 policy policy = server . get <identifiersep> repository ( ) . get <identifiersep> policy ( ) ; \n \t2 policy . update ( <identifier> , true ) ; \n \t2 content <identifiersep> name policy <identifiersep> name = new content <identifiersep> name ( repo <identifiersep> namespace , <identifier> . <identifier> <identifiersep> local <identifiersep> name , repo <identifiersep> policy , now ( ) ) ; \n \t2 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> repo , level . info ) ) \n <ect>
\t2 logger . debug ( <string_literal> , this . service <identifiersep> registry ) ; \n \t2 this . services = this . service <identifiersep> registry . load ( ) \n \t4 . stream ( ) \n \t4 . collect ( collectors . to <identifiersep> concurrent <identifiersep> map ( r - > { \n <ect>
\t5 for ( project <identifiersep> vo project : inactive <identifiersep> <identifier> ) { \n \t6 try { \n \t7 account project <identifiersep> account = get <identifiersep> account ( project . get <identifiersep> project <identifiersep> account <identifiersep> id ( ) ) ; \n \t7 if ( project <identifiersep> account == null ) { \n <ect>
\t3 return null ; } \n \t2 try { \n \t3 return store . get <identifiersep> input <identifiersep> stream ( blob <identifiersep> id ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 log . fatal ( <string_literal> + value ) \n \t3 } else { \n \t4 log . info ( <string_literal> ) } \n \t3 } catch ( exception e ) { \n <ect>
\t6 if ( ! has <identifiersep> component ( <identifier> <identifiersep> simulation <identifiersep> component . class ) ) { \n \t7 add <identifiersep> component ( new <identifier> <identifiersep> simulation <identifiersep> component ( ) ) ; } \n \t6 break ; \n \t5 default : \n <ect>
\t1 private void init <identifiersep> receive <identifiersep> client ( ) throws naming <identifiersep> exception , jms <identifiersep> exception { \n \t2 subscriber = new receive <identifiersep> subscriber ( get <identifiersep> use <identifiersep> jndi <identifiersep> properties <identifiersep> as <identifiersep> boolean ( ) , \n \t4 get <identifiersep> jndi <identifiersep> initial <identifiersep> context <identifiersep> factory ( ) , get <identifiersep> provider <identifiersep> url ( ) , get <identifiersep> connection <identifiersep> factory ( ) , get <identifiersep> destination ( ) , \n \t4 get <identifiersep> durable <identifiersep> subscription <identifiersep> id ( ) , get <identifiersep> client <identifiersep> id ( ) , get <identifiersep> jms <identifiersep> selector ( ) , is <identifiersep> use <identifiersep> auth ( ) , get <identifiersep> username ( ) , get <identifiersep> password ( ) ) ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 if ( ep <identifiersep> state == null ) \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name + <string_literal> + repl <identifiersep> dump <identifiersep> id , driver ) ; \n \t1 incremental <identifiersep> dump <identifiersep> <identifier> = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 incremental <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t2 i <identifiersep> <identifier> <identifiersep> adm <identifiersep> cmd . add ( <string_literal> , device <identifiersep> by <identifiersep> path ) ; \n \t2 output <identifiersep> <identifier> . one <identifiersep> line <identifiersep> parser parser = new output <identifiersep> <identifier> . one <identifiersep> line <identifiersep> parser ( ) ; \n \t2 string result = i <identifiersep> <identifier> <identifiersep> adm <identifiersep> cmd . execute ( parser ) ; \n \t2 if ( result != null ) { \n <ect>
\t2 this . max <identifiersep> <identifier> = max <identifiersep> <identifier> ; \n \t2 this . min <identifiersep> <identifier> <identifiersep> <identifier> = min <identifiersep> <identifier> <identifiersep> <identifier> ; \n \t2 this . <identifier> <identifiersep> filter = new <identifier> <identifiersep> read <identifiersep> filter ( min <identifiersep> <identifier> <identifiersep> <identifier> , false ) ; \n \t2 this . required <identifiersep> matching <identifiersep> dictionary <identifiersep> tags = required <identifiersep> matching <identifiersep> dictionary <identifiersep> tags ; \n <ect>
\t2 lock . lock ( ) ; \n \t2 try { \n \t3 if ( increase <identifiersep> payment <identifiersep> future == null ) return ; \n \t3 check <identifiersep> not <identifiersep> null ( increase <identifiersep> payment <identifiersep> future , <string_literal> ) ; \n <ect>
\t3 try { \n \t4 buf . add ( new <identifier> <identifiersep> socket <identifiersep> channel ( this , s ) ) ; \n \t4 return 1 ; \n \t3 } catch ( throwable t ) { \n <ect>
\t2 try { \n \t2 log . debug ( <string_literal> + task . get <identifiersep> display <identifiersep> name ( ) ) ; \n \t2 imaging <identifiersep> tasks . delete <identifiersep> task ( task ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void source <identifiersep> error ( throwable er ) { \n \t2 if ( closed ) { \n <ect>
\t6 if ( <identifier> <identifiersep> url != null && ! <identifier> <identifiersep> manager . util ( ) . get <identifiersep> open <identifiersep> <identifier> ( ) . contains ( <identifier> <identifiersep> url ) ) \n \t7 <identifier> <identifiersep> manager . add <identifiersep> message ( <identifier> <identifiersep> t ( <string_literal> { 0 } \\ <string_literal> , base <identifiersep> file . get <identifiersep> name ( ) ) ) ; \n \t5 } catch ( io <identifiersep> exception ioe ) { \n \t6 <identifier> <identifiersep> manager . add <identifiersep> message ( <identifier> <identifiersep> t ( <string_literal> { 0 } \\ <string_literal> , base <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) + <string_literal> + ioe ) ; \n <ect>
\t4 thread . sleep ( 100l ) ; \n \t4 try { \n \t5 client . log ( arrays . as <identifiersep> list ( new log <identifiersep> entry ( <string_literal> , <string_literal> + i ) ) ) ; } \n \t4 catch ( t <identifiersep> exception e ) { \n <ect>
\t1 } catch ( io <identifiersep> exception ioe ) { \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
<comment> \n \t1 public list < box <identifiersep> user . info > get <identifiersep> all <identifiersep> enterprise <identifiersep> or <identifiersep> external <identifiersep> users ( string filter <identifiersep> term , string . . . fields ) { \n \t2 try { \n <ect>
\t3 try { \n \t4 final class < ? > direct <identifiersep> byte <identifiersep> buffer <identifiersep> class = class . for <identifiersep> name ( <string_literal> ) ; \n \t4 direct <identifiersep> byte <identifiersep> buffer <identifiersep> free <identifiersep> method = direct <identifiersep> byte <identifiersep> buffer <identifiersep> class . get <identifiersep> declared <identifiersep> method ( <string_literal> ) ; \n \t3 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception | no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 <comment> \n \t5 <comment> \n <ect>
\t5 } else if ( e instanceof hypervisor <identifiersep> version <identifiersep> changed <identifiersep> exception ) { \n \t6 handle <identifiersep> disconnect <identifiersep> without <identifiersep> <identifier> ( attache , event . shutdown <identifiersep> requested , true , true ) ; \n \t6 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + attache . get <identifiersep> id ( ) , e ) ; \n \t5 } else { \n <ect>
\t4 <identifier> = j ; \n \t4 break ; } } \n \t2 <comment> \n \t2 if ( - 1 == <identifier> ) { \n <ect>
\t4 <comment> \n \t4 schema <identifiersep> node = app . node <identifiersep> query ( abstract <identifiersep> schema <identifiersep> node . class ) . and ( abstract <identifiersep> node . name , name ) . get <identifiersep> first ( ) ; \n \t4 tx . success ( ) ; \n \t3 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t4 date = simple <identifiersep> date <identifiersep> format . parse ( date <identifiersep> str ) ; \n \t3 } else { \n \t4 date = new date ( date <identifiersep> str ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t2 try { \n \t3 if ( response != null ) \n \t4 entity <identifiersep> utils . consume ( response . get <identifiersep> entity ( ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 vlan <identifiersep> mgr . delete <identifiersep> <identifier> ( this ) ; \n \t3 success <identifiersep> response response = new success <identifiersep> response ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 set <identifiersep> response <identifiersep> object ( response ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 ) ; \n \t2 for ( tournament <identifiersep> player player : tournament . get <identifiersep> players ( ) ) { \n \t3 if ( ! player . get <identifiersep> player ( ) . is <identifiersep> human ( ) ) { \n \t4 player . set <identifiersep> joined ( ) ; \n <ect>
\t3 boolean value = boolean . parse <identifiersep> boolean ( string <identifiersep> value ) ; \n \t3 logger . info ( <string_literal> , key , value ) ; \n \t3 return value ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t4 handlers . service <identifiersep> execution <identifiersep> handler ( ) \n \t3 ) ; \n \t3 external <identifiersep> resource <identifiersep> util . release ( resources . to <identifiersep> array ( new external <identifiersep> resource <identifiersep> <identifier> [ resources . size ( ) ] ) ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
public long determine <identifiersep> max <identifiersep> mm <identifiersep> size ( long <identifier> <identifiersep> <identifier> , long max <identifiersep> mm <identifiersep> size ) { \n \t1 if ( <identifier> <identifiersep> <identifier> > 0 ) { \n \t1 long max <identifiersep> <identifier> = ( long ) math . floor ( max <identifiersep> size * max <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> fraction ) ; \n \t1 <identifier> <identifiersep> <identifier> = math . min ( max <identifiersep> <identifier> , <identifier> <identifiersep> <identifier> ) ; \n <ect>
\t2 { \n \t3 system <identifiersep> distributed <identifiersep> keyspace . start <identifiersep> <identifier> ( get <identifiersep> id ( ) , parent <identifiersep> repair <identifiersep> session , keyspace , <identifier> , ranges , endpoints ) ; } \n \t2 if ( endpoints . is <identifiersep> empty ( ) ) \n \t2 { \n <ect>
\t7 admin . put <identifiersep> reply ( message <identifiersep> key , reply ) ; \t7 } \n \t5 } else { \n \t6 message <identifiersep> key = reply . get <identifiersep> jms <identifiersep> correlation <identifiersep> id ( ) ; \n \t6 if ( message <identifiersep> key == null ) { <comment> \n <ect>
\t2 switch ( event . get <identifiersep> type ( ) ) \n \t2 { \n \t2 case service <identifiersep> event . registered : \n <ect>
\t1 <identifier> . add ( new pair < string , class < ? extends http <identifiersep> servlet > > ( endpoint , servlet ) ) ; \n \t1 return this ; } } \n public void start ( ) throws exception { \n \t1 web <identifiersep> server . start ( ) ; \n <ect>
<comment> \n <comment> \n public void on <identifiersep> application <identifiersep> event ( final application <identifiersep> event event ) { \n \t1 if ( event instanceof authentication <identifiersep> success <identifiersep> event ) { \n <ect>
\t2 try ( input <identifiersep> stream is = resource . get <identifiersep> input <identifiersep> stream ( ) ) { \n \t3 string resource <identifiersep> filename = resource . get <identifiersep> filename ( ) ; \n \t3 if ( resource <identifiersep> filename != null && resource <identifiersep> filename . ends <identifiersep> with ( xml <identifiersep> suffix ) ) { \n <ect>
\t1 public connection get <identifiersep> connection ( string hostname , \n \t3 int <identifier> , string username , string password , string d <identifiersep> <identifier> <identifiersep> sid <identifiersep> name ) \n \t3 throws sql <identifiersep> exception , class <identifiersep> not <identifiersep> found <identifiersep> exception { \n \t2 string connect <identifiersep> string = get <identifiersep> connect <identifiersep> string ( hostname , <identifier> , username , password , d <identifiersep> <identifier> <identifiersep> sid <identifiersep> name ) ; \n <ect>
\t3 class <identifiersep> loader . add <identifiersep> url ( new file ( plugin <identifiersep> folder + ' / ' + plugin . get <identifiersep> jar ( ) ) . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ) ; \n \t3 logger . info ( <string_literal> + plugin . get <identifiersep> class <identifiersep> name ( ) ) ; \n \t3 return ( tournament <identifiersep> type ) class . for <identifiersep> name ( plugin . get <identifiersep> type <identifiersep> name ( ) , true , class <identifiersep> loader ) . get <identifiersep> constructor ( ) . new <identifiersep> instance ( ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t3 log . info ( <string_literal> + node <identifiersep> name ) ; \n \t3 add <identifiersep> inputs ( node <identifiersep> name , node <identifiersep> data ) ; \n \t3 break ; \n \t2 case node <identifiersep> updated : \n <ect>
\t2 if ( http <identifiersep> constants . protocol <identifiersep> https . equals <identifiersep> ignore <identifiersep> case ( u . get <identifiersep> protocol ( ) ) ) { \n \t3 try { \n \t4 <identifier> = ssl <identifiersep> manager . get <identifiersep> instance ( ) ; <comment> \n \t3 } catch ( exception e ) { \n <ect>
\t4 function <identifiersep> utils . close <identifiersep> function ( combine <identifiersep> stub ) ; } \n \t3 catch ( throwable t ) { \n \t4 throw new io <identifiersep> exception ( <string_literal> , t ) ; } \n <ect>
\t2 string <identifier> <identifiersep> ssvm <identifiersep> url <identifiersep> domain = <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) ; \n \t2 if ( ssl <identifiersep> cfg != null ) { \n \t3 <identifier> <identifiersep> ssl <identifiersep> copy = boolean . parse <identifiersep> boolean ( ssl <identifiersep> cfg ) ; } \n \t2 if ( <identifier> <identifiersep> ssl <identifiersep> copy && ( <identifier> <identifiersep> ssvm <identifiersep> url <identifiersep> domain == null || <identifier> <identifiersep> ssvm <identifiersep> url <identifiersep> domain . is <identifiersep> empty ( ) ) ) { \n <ect>
\t4 tx . success ( ) ; \n \t3 } catch ( throwable fex ) { \n \t4 logger . error ( <string_literal> , fex ) ; } \n \t2 } catch ( framework <identifiersep> exception t ) { \n <ect>
\t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n <ect>
\t4 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t5 <comment> \n \t5 try { \n <ect>
\t1 final injectable <identifiersep> impl injectable <identifiersep> as <identifiersep> impl = ( injectable <identifiersep> impl ) injectable ; \n \t1 injectable <identifiersep> as <identifiersep> impl . dependencies . add ( base <identifiersep> dependency . class . cast ( dependency ) ) ; } \n @ override \n public dependency <identifiersep> graph create <identifiersep> graph ( final <identifier> <identifiersep> strategy strategy ) { \n <ect>
\t2 final oidc <identifiersep> registered <identifiersep> service oidc <identifiersep> registered <identifiersep> service = ( oidc <identifiersep> registered <identifiersep> service ) registered <identifiersep> service ; \n \t2 final <identifier> <identifiersep> context context = pac4j <identifiersep> utils . get <identifiersep> pac4j <identifiersep> <identifier> <identifiersep> context ( request , response ) ; \n \t2 final profile <identifiersep> manager manager = pac4j <identifiersep> utils . get <identifiersep> pac4j <identifiersep> profile <identifiersep> manager ( request , response ) ; \n \t2 final optional < user <identifiersep> profile > profile = manager . get ( true ) ; \n <ect>
\t4 execution <identifiersep> graph . get <identifiersep> kv <identifiersep> state <identifiersep> location <identifiersep> registry ( ) . notify <identifiersep> kv <identifiersep> state <identifiersep> <identifier> ( \n \t5 job <identifiersep> vertex <identifiersep> id , key <identifiersep> group <identifiersep> range , registration <identifiersep> name ) ; \n \t4 return completable <identifiersep> future . completed <identifiersep> future ( acknowledge . get ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 if ( store == null ) { \n \t3 log . info ( <string_literal> + get <identifiersep> scope ( counter . class ) ) ; \n \t3 log . info ( <string_literal> + get <identifiersep> scope ( cdi <identifiersep> injection <identifiersep> book <identifiersep> collection . class ) ) ; \n \t3 log . info ( <string_literal> + get <identifiersep> scope ( cdi <identifiersep> injection <identifiersep> book <identifiersep> resource . class ) ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 return true ; } \n \t1 public int create <identifiersep> book ( ejb <identifiersep> book book ) { \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t2 . for <identifiersep> path ( zoo <identifiersep> keeper <identifiersep> hive <identifiersep> helper . zookeeper <identifiersep> path <identifiersep> separator + root <identifiersep> namespace ) ; \n \t1 log . info ( <string_literal> + root <identifiersep> namespace + <string_literal> ) ; \n \t1 } catch ( keeper <identifiersep> exception e ) { \n \t1 if ( e . code ( ) != keeper <identifiersep> exception . code . <identifier> ) { \n <ect>
\t3 return true ; } \n \t2 <comment> \n \t2 network <identifiersep> <identifier> <identifiersep> map <identifiersep> vo <identifier> <identifiersep> for <identifiersep> network = <identifier> <identifiersep> network <identifiersep> <identifier> <identifiersep> map <identifiersep> dao . find <identifiersep> by <identifiersep> network <identifiersep> id ( network . get <identifiersep> id ( ) ) ; \n \t2 if ( <identifier> <identifiersep> for <identifiersep> network == null ) { \n <ect>
\t3 dlq <identifiersep> messages . add ( received ) ; \n \t2 } ; \n \t2 assert <identifiersep> equals ( <string_literal> , data . length - 1 , dlq <identifiersep> messages . size ( ) ) ; \n \t2 final queue <identifiersep> view <identifiersep> m <identifiersep> bean queue <identifiersep> view = get <identifiersep> proxy <identifiersep> to <identifiersep> queue <identifiersep> view <identifiersep> m <identifiersep> bean ( ) ; \n <ect>
\t2 try ( final tx tx = structr <identifiersep> app . get <identifiersep> instance ( fs . get <identifiersep> security <identifiersep> context ( ) ) . tx ( ) ) { \n \t3 node . set <identifiersep> property ( key , null ) ; \n \t3 tx . success ( ) ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t3 text <identifiersep> message m = session . create <identifiersep> text <identifiersep> message ( <string_literal> ) ; \n \t3 log . debug ( <string_literal> ) ; \n \t3 producer . send ( m ) ; \n \t3 <comment> \n <ect>
\t3 for ( int i = 0 ; i < sample <identifiersep> size ; i ++ ) { \n \t4 object key = key <identifiersep> provider . next ( ) ; \n \t4 versioned < object > versioned = client . get ( key ) ; \n \t4 if ( null == versioned ) { \n <ect>
\t4 default : \n \t5 break ; } \n \t2 } ) ; \n \t2 if ( ! handlers . is <identifiersep> empty ( ) ) { \n <ect>
\t2 } catch ( <identifier> <identifiersep> message <identifiersep> exception <identifier> ) { \n \t3 throw <identifier> ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 uri <identifiersep> string = get <identifiersep> address ( ) ; } \n \t2 try { \n \t3 return new uri ( uri <identifiersep> string ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t2 if ( blob <identifiersep> store instanceof closeable ) { \n \t3 try { \n \t4 ( ( closeable ) blob <identifiersep> store ) . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 message . set <identifiersep> string <identifiersep> property ( <string_literal> , data [ i ] ) ; \n \t3 message . set <identifiersep> int <identifiersep> property ( <string_literal> , i ) ; \n \t3 if ( verbose ) { \n <ect>
\t2 try { \n \t2 upgrade <identifiersep> catalog . set <identifiersep> config <identifiersep> updates <identifiersep> file <identifiersep> name ( ambari <identifiersep> upgrade <identifiersep> config <identifiersep> updates <identifiersep> file <identifiersep> name ) ; \n \t2 upgrade <identifiersep> catalog . upgrade <identifiersep> data ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 protected string get <identifiersep> <identifier> <identifiersep> parent ( final connection conn , final string primary <identifiersep> storage <identifiersep> sr <identifiersep> uuid , final string snapshot <identifiersep> uuid , final boolean is <identifiersep> iscsi ) { \n \t2 final string parent <identifiersep> uuid = hypervisor <identifiersep> resource . call <identifiersep> host <identifiersep> plugin ( conn , <string_literal> , <string_literal> , <string_literal> , primary <identifiersep> storage <identifiersep> sr <identifiersep> uuid , <string_literal> , snapshot <identifiersep> uuid , <string_literal> , \n \t4 is <identifiersep> iscsi . to <identifiersep> string ( ) ) ; \n \t2 if ( parent <identifiersep> uuid == null || parent <identifiersep> uuid . is <identifiersep> empty ( ) || parent <identifiersep> uuid . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n <ect>
\t7 if ( <identifier> <identifiersep> delivered <identifiersep> messages == null ) { \n \t8 <identifier> <identifiersep> delivered <identifiersep> messages = new <identifier> <identifiersep> delivered <identifiersep> map < message <identifiersep> id , boolean > ( session . get <identifiersep> transaction <identifiersep> context ( ) . get <identifiersep> transaction <identifiersep> id ( ) ) ; } \n \t7 for ( message <identifiersep> dispatch delivered : delivered <identifiersep> messages ) { \n \t8 <identifier> <identifiersep> delivered <identifiersep> messages . put ( delivered . get <identifiersep> message ( ) . get <identifiersep> message <identifiersep> id ( ) , false ) ; } \n <ect>
\t2 try { \n \t3 category log = category . get <identifiersep> instance ( <string_literal> ) ; \n \t3 log . debug ( <string_literal> ) ; \n \t3 thread . sleep ( <number_literal> ) ; \n <ect>
\t2 } catch ( final agent <identifiersep> unavailable <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( e . get <identifiersep> message ( ) ) ; \n \t3 return null ; \n \t2 } catch ( final operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t3 if ( write <identifiersep> selector != null ) { \n \t4 try { \n \t5 write <identifiersep> selector . select <identifiersep> now ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t7 break ; } } \n \t5 if ( sec <identifiersep> <identifier> <identifiersep> enabled ) { \n \t6 result = call <identifiersep> host <identifiersep> plugin ( conn , <string_literal> , <string_literal> , <string_literal> , vm <identifiersep> name ) ; \n \t6 if ( result == null || result . is <identifiersep> empty ( ) || ! boolean . parse <identifiersep> boolean ( result ) ) { \n <ect>
\t5 s <identifiersep> logger . error ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + \n \t6 api . get <identifiersep> url ( ) ) ; \n \t5 error ++ ; \n \t4 } else { \n <ect>
<comment> \n \t1 public boolean safe <identifiersep> eval <identifiersep> as <identifiersep> body <identifiersep> clause ( rule <identifiersep> context context ) { \n \t2 if ( get <identifiersep> implementor ( ) == null ) { \n <ect>
\t5 logger . debug ( <string_literal> , item <identifiersep> name ) ; \n \t5 command <identifiersep> line = string . format ( command <identifiersep> line , calendar . get <identifiersep> instance ( ) . get <identifiersep> time ( ) , <string_literal> , item <identifiersep> name ) ; \n \t5 string response = execute <identifiersep> command <identifiersep> and <identifiersep> wait <identifiersep> response ( command <identifiersep> line ) ; \n \t5 if ( response == null ) { \n <ect>
\t3 this . application <identifiersep> code , \n \t3 date <identifiersep> time <identifiersep> utils . date <identifiersep> of ( zoned <identifiersep> date <identifiersep> time . now ( zone <identifiersep> offset . utc ) ) , \n \t3 client <identifiersep> info . get <identifiersep> client <identifiersep> ip <identifiersep> address ( ) , \n \t3 client <identifiersep> info . get <identifiersep> server <identifiersep> ip <identifiersep> address ( ) ) ; \n <ect>
\t3 return ( raw ) ; } \n \t2 private int extract <identifiersep> value ( msg msg , int group ) throws field <identifiersep> exception { \n \t3 string low <identifiersep> byte = get <identifiersep> string <identifiersep> parameter ( <string_literal> , <string_literal> ) ; \n \t3 if ( low <identifiersep> byte . equals ( <string_literal> ) ) { \n <ect>
\t1 public revision get <identifiersep> oldest <identifiersep> revision <identifiersep> to <identifiersep> keep ( ) { \n \t2 <comment> \n \t2 sorted <identifiersep> map < revision , info > checkpoints = get <identifiersep> checkpoints ( ) ; \n \t2 if ( checkpoints . is <identifiersep> empty ( ) ) { \n <ect>
\t1 } else { \n \t2 if ( credential <identifiersep> provider . is <identifiersep> alias <identifiersep> string ( alias <identifiersep> str ) ) { \n \t2 log . error ( <string_literal> + alias <identifiersep> str ) ; \n \t2 } else { \n <ect>
\t2 if ( builder . length ( ) > 0 ) { \n \t2 builder . append ( <string_literal> ) ; } \n \t2 builder . append ( context . alias ) ; } \n <ect>
\t4 && ! get <identifiersep> configuration ( ) . get <identifiersep> boolean ( property . master <identifiersep> metadata <identifiersep> <identifier> ) ) ) { \n \t2 log . debug ( <string_literal> , tls ) ; \n \t2 tablet <identifiersep> state <identifiersep> store . <identifier> ( tablet <identifiersep> server . this , tls , null ) ; \n \t2 } else { \n <ect>
\t2 string job <identifiersep> id = uuid . to <identifiersep> string ( ) ; \n \t2 string tmp <identifiersep> dir = install <identifiersep> path <identifiersep> prefix ; \n \t2 try { \n \t3 if ( ! <identifier> <identifiersep> storage . mkdirs ( tmp <identifiersep> dir ) ) { \n <ect>
\t2 keycloak <identifiersep> <identifier> <identifiersep> account account = null ; \n \t2 try { \n \t3 account = ( keycloak <identifiersep> <identifier> <identifiersep> account ) session . get <identifiersep> attribute ( keycloak <identifiersep> <identifier> <identifiersep> account . class . get <identifiersep> name ( ) ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception e ) { \n <ect>
private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( last <identifiersep> seen <identifiersep> balancer <identifiersep> with <identifiersep> <identifier> <identifiersep> factory . class ) ; \n @ override \n public load <identifiersep> balancer <identifiersep> with <identifiersep> <identifier> create ( <identifier> <identifiersep> config config ) \n { \n <ect>
public boolean check <identifiersep> udf <identifiersep> exists ( connection connection , string file <identifiersep> name , string username , int table <identifiersep> id , query <identifiersep> set <identifiersep> ambari <identifiersep> db ambaridatabase , hash <identifiersep> set < string > udf <identifiersep> set ) throws sql <identifiersep> exception { \n \t1 <comment> \n \t1 result <identifiersep> set rs = ambaridatabase . get <identifiersep> udf <identifiersep> file <identifiersep> names <identifiersep> and <identifiersep> <identifier> ( connection , table <identifiersep> id ) . execute <identifiersep> query ( ) ; \n \t1 while ( rs . next ( ) ) { \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> ) ; } } } \n \t1 private void handle <identifiersep> access <identifiersep> request ( http <identifiersep> servlet <identifiersep> request req , http <identifiersep> servlet <identifiersep> response resp , long vm <identifiersep> id ) { \n \t2 vm <identifiersep> instance <identifiersep> vo vm = <identifier> <identifiersep> vm <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm == null ) { \n <ect>
\t3 exchange . get <identifiersep> in ( ) . set <identifiersep> body ( request ) ; } } \n \t1 public static class <identifier> <identifiersep> order <identifiersep> status <identifiersep> service { \n \t2 private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( <identifier> <identifiersep> order <identifiersep> status <identifiersep> service . class ) ; \n \t2 public execution <identifiersep> report get <identifiersep> order <identifiersep> status ( order <identifiersep> status <identifiersep> request request ) throws field <identifiersep> not <identifiersep> found { \n <ect>
\t3 method . set <identifiersep> entity ( new url <identifiersep> encoded <identifiersep> form <identifiersep> entity ( arrays . as <identifiersep> list ( \n \t5 new basic <identifiersep> name <identifiersep> value <identifiersep> pair ( <string_literal> , username ) , \n \t5 new basic <identifiersep> name <identifiersep> value <identifiersep> pair ( <string_literal> , password ) ) ) ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t3 load <identifiersep> chunk ( indices . get <identifiersep> left ( ) ) ; \n \t3 current <identifiersep> chunk . store ( indices . get <identifiersep> right ( ) , element ) ; \n \t3 total <identifiersep> items ++ ; \n \t2 } catch ( io <identifiersep> exception io ) { \n <ect>
\t2 method = new get <identifiersep> method ( url ) ; \n \t2 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n \t2 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; \n \t2 if ( response <identifiersep> code != <number_literal> ) { \n <ect>
\t3 if ( server == null || server . error <identifiersep> on <identifiersep> startup ( ) ) { \n \t4 jetty . stop ( ) ; \n \t4 log . warn ( <string_literal> ) ; \n \t4 return false ; } \n <ect>
\t2 txn <identifiersep> utils . build <identifiersep> query <identifiersep> with <identifiersep> in <identifiersep> clause ( conf , queries , prefix , suffix , <identifier> , <string_literal> , false , false ) ; \n \t2 for ( string query : queries ) { \n \t2 log . debug ( <string_literal> + query + <string_literal> ) ; \n \t2 int rc = stmt . execute <identifiersep> update ( query ) ; \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( props . get <identifiersep> client <identifiersep> uri ( ) ) ) { \n \t3 final mongo <identifiersep> client <identifiersep> uri uri = build <identifiersep> mongo <identifiersep> client <identifiersep> uri ( props . get <identifiersep> client <identifiersep> uri ( ) , build <identifiersep> mongo <identifiersep> db <identifiersep> client <identifiersep> options ( props ) ) ; \n \t3 auth <identifiersep> db <identifiersep> name = uri . get <identifiersep> credentials ( ) . get <identifiersep> source ( ) ; \n \t3 db <identifiersep> name = uri . get <identifiersep> database ( ) ; \n <ect>
\t2 if ( tgt . get <identifiersep> hard <identifiersep> timeout ( ) . get <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( ) > 0 ) { \n \t3 logger . debug ( <string_literal> , \n \t4 tgt . get <identifiersep> hard <identifiersep> timeout ( ) . get <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( ) ) ; \n \t3 return new hard <identifiersep> timeout <identifiersep> expiration <identifiersep> policy ( tgt . get <identifiersep> hard <identifiersep> timeout ( ) . get <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( ) ) ; } \n <ect>
\t6 if ( configuration <identifiersep> properties . get <identifiersep> duration <identifiersep> max <identifiersep> messages ( ) > 0 || configuration <identifiersep> properties . get <identifiersep> duration <identifiersep> max <identifiersep> idle <identifiersep> seconds ( ) > 0 ) { \n \t7 if ( configuration <identifiersep> properties . get <identifiersep> duration <identifiersep> max <identifiersep> messages ( ) > 0 ) { \n \t8 log . info ( <string_literal> , configuration <identifiersep> properties . get <identifiersep> duration <identifiersep> max <identifiersep> messages ( ) ) ; } \n \t7 if ( configuration <identifiersep> properties . get <identifiersep> duration <identifiersep> max <identifiersep> idle <identifiersep> seconds ( ) > 0 ) { \n <ect>
\t4 <comment> \n \t4 other <identifiersep> config . put ( <string_literal> , <string_literal> ) ; \n \t4 rec . other <identifiersep> config = other <identifiersep> config ; \n \t4 nw = network . create ( conn , rec ) ; \n <ect>
\t2 if ( job <identifiersep> manager <identifiersep> memory <identifiersep> mb < min <identifiersep> jm <identifiersep> memory ) { \n \t3 log . warn ( <string_literal> , min <identifiersep> jm <identifiersep> memory ) ; \n \t3 job <identifiersep> manager <identifiersep> memory <identifiersep> mb = min <identifiersep> jm <identifiersep> memory ; } \n \t2 if ( task <identifiersep> manager <identifiersep> memory <identifiersep> mb < min <identifiersep> tm <identifiersep> memory ) { \n <ect>
\t6 logger . debug ( <string_literal> , key , s ) ; \n \t6 attributes . put ( s , collection <identifiersep> utils . wrap ( attribute . to <identifiersep> string ( ) ) ) ; \n \t5 } ) ; \n \t4 } else { \n <ect>
\t2 try { \n \t3 final double hue = integer . value <identifiersep> of ( value . substring ( <number_literal> , <number_literal> ) ) ; \n \t3 return new percent <identifiersep> type ( new big <identifiersep> decimal ( hue / <identifier> * <identifier> ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 servlet <identifiersep> context ctx = get <identifiersep> servlet <identifiersep> context ( ) ; \n \t2 init <identifiersep> context <identifiersep> parameters ( ctx , context <identifiersep> parameters ) ; \n \t2 <comment> \n \t2 string context <identifiersep> path = ctx . get <identifiersep> real <identifiersep> path ( <string_literal> ) ; <comment> \n <ect>
<comment> \n @ override \n protected resource <identifiersep> pre <identifiersep> processor create <identifiersep> node <identifiersep> processor ( ) { \n <ect>
\t3 tile <identifiersep> spring <identifiersep> <identifier> spring ; \n \t3 if ( tile instanceof tile <identifiersep> spring <identifiersep> <identifier> ) { \n \t4 spring = ( tile <identifiersep> spring <identifiersep> <identifier> ) tile ; \n \t3 } else { \n <ect>
\t1 private static string path = null ; \n \t1 private static void submit <identifiersep> jar ( nimbus <identifiersep> client client , map conf ) { \n \t2 if ( submitted <identifiersep> jar == null ) { \n \t3 try { \n <ect>
\t2 assert <identifiersep> handler ( ) ; \n \t2 if ( this . handler instanceof abstract <identifiersep> message <identifiersep> <identifier> <identifiersep> handler ) { \n \t3 ( ( abstract <identifiersep> message <identifiersep> <identifier> <identifiersep> handler ) this . handler ) . set <identifiersep> not <identifiersep> <identifier> <identifiersep> headers ( header <identifiersep> patterns ) ; } \n \t2 else { \n <ect>
\t3 try ( result <identifiersep> set rs = pstmt . execute <identifiersep> query ( ) ; ) { \n \t3 if ( rs . next ( ) ) { \n \t5 aggregation <identifiersep> range = rs . get <identifiersep> int ( 1 ) ; \n \t4 } else { \n <ect>
\t3 for ( field field : fields ) { \n \t4 event <identifiersep> types [ i ++ ] = field . get ( event <identifiersep> obj ) . to <identifiersep> string ( ) ; } \n \t3 return event <identifiersep> types ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public void rollback <identifiersep> tx ( grid <identifiersep> cache <identifiersep> tx <identifiersep> ex < k , v > tx ) { \n \t2 assert tx != null ; \n <ect>
\t4 log . warn ( <string_literal> , conn <identifiersep> expire <identifiersep> time ) ; } \n \t3 server . conn <identifiersep> expire <identifiersep> timeout ( conn <identifiersep> expire <identifiersep> time ) . reaper <identifiersep> interval ( reaper <identifiersep> interval ) ; } \n \t2 super . start ( ) ; } \n \t1 public void stop ( ) { \n <ect>
\t3 sql <identifiersep> statement <identifiersep> parser parser = sql <identifiersep> parser <identifiersep> utils . create <identifiersep> sql <identifiersep> statement <identifiersep> parser ( sql , db <identifiersep> type , format <identifiersep> default <identifiersep> features ) ; \n \t3 list < sql <identifiersep> statement > statement <identifiersep> list = parser . parse <identifiersep> statement <identifiersep> list ( ) ; \n \t3 return to <identifiersep> sql <identifiersep> string ( statement <identifiersep> list , db <identifiersep> type , parameters , option ) ; \n \t2 } catch ( class <identifiersep> cast <identifiersep> exception ex ) { \n <ect>
\t4 if ( builder . get <identifiersep> initial <identifiersep> authentication ( ) . is <identifiersep> present ( ) ) { \n \t5 web <identifiersep> utils . put <identifiersep> authentication <identifiersep> result <identifiersep> builder ( builder , context ) ; \n \t5 web <identifiersep> utils . put <identifiersep> authentication ( builder . get <identifiersep> initial <identifiersep> authentication ( ) . get ( ) , context ) ; } } \n \t3 final registered <identifiersep> service registered <identifiersep> service = determine <identifiersep> registered <identifiersep> service <identifiersep> for <identifiersep> event ( context , service ) ; \n <ect>
\t6 return false ; } } } } \n \t2 try { \n \t3 long reconnect <identifiersep> delay = <identifier> <identifiersep> reconnect <identifiersep> date - system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 if ( reconnect <identifiersep> delay > 0 ) { \n <ect>
\t2 if ( ( t . is <identifiersep> closing ( ) || t . is <identifiersep> closed ( ) ) && e instanceof illegal <identifiersep> state <identifiersep> exception ) { \n \t2 log . debug ( <string_literal> , extent , \n \t3 e . get <identifiersep> message ( ) ) ; \n \t2 } else { \n <ect>
\t2 try { \n \t3 refresh <identifiersep> logical <identifiersep> device <identifiersep> states ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t2 } catch ( <identifier> <identifiersep> <identifier> <identifiersep> session <identifiersep> expired <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 function <identifiersep> info <identifier> = register <identifiersep> permanent <identifiersep> function ( function <identifiersep> name , func . get <identifiersep> class <identifiersep> name ( ) , true , \n \t2 function <identifiersep> task . to <identifiersep> function <identifiersep> resource ( func . get <identifiersep> resource <identifiersep> uris ( ) ) ) ; \n \t1 if ( <identifier> == null ) { \n <ect>
\t6 log . info ( log . fac <identifiersep> pipeline , <string_literal> ) ; \n \t5 <identifier> = to <identifiersep> delete ; \n \t5 if ( <identifier> . user <identifiersep> time == - 1 ) { \n \t6 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) \n <ect>
\t3 int rc = is . read ( res <identifiersep> bytes ) ; \n \t3 string <identifier> = new string ( res <identifiersep> bytes ) ; \n \t3 system . out . println ( <string_literal> + rc + <string_literal> + <identifier> ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 tick ( ) ; \n \t4 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t1 @ get \n \t1 @ path ( <string_literal> ) \n \t1 @ produces ( media <identifiersep> type . text <identifiersep> plain ) \n \t1 public int test <identifiersep> use ( @ path <identifiersep> param ( <string_literal> ) int count ) { \n <ect>
\t8 buf . append ( js <identifiersep> library <identifiersep> file . get <identifiersep> <identifier> <identifiersep> library <identifiersep> code ( ) ) ; \n \t7 } else { \n \t8 logger . info ( <string_literal> , new object [ ] { js <identifiersep> library <identifiersep> file . get <identifiersep> name ( ) , content <identifiersep> type } ) ; } \n \t6 } else { \n <ect>
\t4 json <identifiersep> x <identifiersep> content . content <identifiersep> builder ( ) . start <identifiersep> object ( ) . start <identifiersep> object ( mapper <identifiersep> service . default <identifiersep> mapping ) \n \t6 . end <identifiersep> object ( ) . end <identifiersep> object ( ) \n \t2 ) . get ( ) ; \n \t2 assert <identifiersep> that ( put <identifiersep> response . is <identifiersep> acknowledged ( ) , equal <identifiersep> to ( true ) ) ; \n <ect>
\t4 } catch ( ssh <identifiersep> exception e ) { \n \t5 return false ; } } \n \t3 return true ; \n \t2 } catch ( no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t1 <identifier> <identifiersep> context <identifiersep> builder . set <identifiersep> <identifier> <identifiersep> addresses ( ss . get <identifiersep> <identifier> <identifiersep> addresses ( ) ) ; \n \t1 try { \n \t1 return ss . get <identifiersep> <identifier> <identifiersep> v2 ( ) . filter <identifiersep> list <identifiersep> cmd <identifiersep> objects ( list <identifiersep> <identifier> , <identifier> <identifiersep> context <identifiersep> builder . build ( ) ) ; \n \t1 } catch ( hive <identifiersep> <identifier> <identifiersep> plugin <identifiersep> exception e ) { \n <ect>
\t6 enabled = url . get <identifiersep> parameter ( constants . enabled <identifiersep> key , true ) ; } \n \t5 if ( enabled ) { \n \t6 invoker = new invoker <identifiersep> delegate < t > ( protocol . <identifier> ( service <identifiersep> type , url ) , url , provider <identifiersep> url ) ; } \n \t4 } catch ( throwable t ) { \n <ect>
<comment> \n \t1 public entity <identifiersep> data . component serialize ( component base , component delta , field <identifiersep> serialize <identifiersep> check < component > check ) { \n \t2 component <identifiersep> metadata < ? > component <identifiersep> metadata = component <identifiersep> library . get <identifiersep> metadata ( base . get <identifiersep> class ( ) ) ; \n \t2 if ( component <identifiersep> metadata == null ) { \n <ect>
\t2 try { \n \t3 if ( send <identifiersep> start <identifiersep> of <identifiersep> block ) { \n \t4 output <identifiersep> stream . write ( start <identifiersep> of <identifiersep> block ) ; \n \t3 } else { \n <ect>
\t2 weighted <identifiersep> multigraph < node , default <identifiersep> link > <identifier> = <identifier> ( <identifier> ) ; \n <comment> \n <comment> \n <comment> \n <ect>
\t2 string prop <identifiersep> name = m . group ( 1 ) ; \n \t2 string prop <identifiersep> value = m . group ( <number_literal> ) ; \n \t2 properties props = prop <identifiersep> map . get ( prop <identifiersep> name ) ; \n \t2 if ( props == null ) { \n <ect>
\t4 string line ; \n \t4 while ( ( line = lines . read <identifiersep> line ( ) ) != null ) { \n \t5 revisions . add ( string <identifiersep> utils . trim ( line ) ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 new <identifiersep> vol . set <identifiersep> path ( vdi . get <identifiersep> uuid ( connection ) ) ; \n \t5 new <identifiersep> vol . set <identifiersep> id ( vol . get <identifiersep> id ( ) ) ; \n \t5 volume <identifiersep> to <identifiersep> list . add ( new <identifiersep> vol ) ; } } \n \t2 } catch ( final exception e ) { \n <ect>
\t2 except exception as e : \n \t3 self . fail ( e ) \n \t2 finally : \n \t3 self . assert <identifiersep> <identifier> ( <identifier> is not none , <string_literal> ) \n <ect>
\t3 try { \n \t4 if ( ! source <identifiersep> file . delete ( ) ) { \n \t5 log . warn ( <string_literal> + source <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n \t3 } catch ( security <identifiersep> exception exception ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void all <identifiersep> bindings <identifiersep> changed ( binding <identifiersep> provider provider ) { \n \t2 if ( context . get <identifiersep> config ( ) . is <identifiersep> valid ( ) ) { \n <ect>
\t4 log . warn ( <string_literal> , e ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; \n \t3 } catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error e ) { \n <ect>
\t2 <identifier> ( alias <identifiersep> location , ss . get <identifiersep> alias <identifiersep> location ( <identifier> ) ) ; \n \t2 <identifier> ( feature , ss . get <identifiersep> pig <identifiersep> feature ( <identifier> ) ) ; } \n \t1 void add <identifiersep> output <identifiersep> statistics ( ) { \n \t2 if ( map <identifiersep> stores == null || reduce <identifiersep> stores == null ) { \n <ect>
\t5 . end <identifiersep> object ( ) . end <identifiersep> object ( ) . end <identifiersep> object ( ) ) ; } \n \t2 assert <identifiersep> acked ( create <identifiersep> request <identifiersep> builder ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> that ( ensure <identifiersep> green ( ) , equal <identifiersep> to ( cluster <identifiersep> health <identifiersep> status . green ) ) ; \n <ect>
\t6 grid <identifiersep> dht <identifiersep> partition <identifiersep> <identifier> <identifiersep> message < k , v > <identifier> = s . <identifier> ( ) ; \n \t6 <comment> \n \t6 if ( <identifier> . class <identifiersep> error ( ) != null ) { \n <ect>
\t1 for ( final workflow <identifiersep> <identifier> <identifier> : mark <identifiersep> and <identifiersep> get <identifiersep> <identifier> <identifiersep> <identifier> ( ) ) { \n \t1 try { \n \t2 <identifier> . start ( ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t4 logger . trace ( <string_literal> ) ; \n \t4 int start <identifiersep> led = integer . parse <identifiersep> int ( matcher . group ( 1 ) . trim ( ) ) ; \n \t4 logger . debug ( <string_literal> , start <identifiersep> led ) ; \n \t4 short range = ( short ) ( short . parse <identifiersep> short ( matcher . group ( <number_literal> ) . trim ( ) ) - start <identifiersep> led + 1 ) ; \n <ect>
\t4 public void run ( ) { \n \t5 try { \n \t6 full <identifiersep> cleanup ( full <identifiersep> cleanup <identifiersep> freq ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 } else if ( key . equals <identifiersep> ignore <identifiersep> case ( headers . last <identifiersep> modified ) ) { \n \t4 try { \n \t5 metadata . set <identifiersep> header ( key , service <identifiersep> utils . parse <identifiersep> <identifier> ( header . get <identifiersep> value ( ) ) ) ; \n \t4 } catch ( exception pe ) { \n <ect>
\t2 <comment> \n \t2 if ( prepare ) { \n \t3 final pair < network <identifiersep> guru , network <identifiersep> vo > implemented = implement <identifiersep> network ( nic . get <identifiersep> network <identifiersep> id ( ) , dest , context , vm <identifiersep> profile . get <identifiersep> virtual <identifiersep> machine ( ) . get <identifiersep> type ( ) == type . domain <identifiersep> router ) ; \n \t3 if ( implemented == null || implemented . first ( ) == null ) { \n <ect>
\t3 { \n \t4 result = context . page ( ) ; } \n \t3 else if ( erx <identifiersep> ajax <identifiersep> application . should <identifiersep> ignore <identifiersep> results ( request , context , result ) && ! erx <identifiersep> ajax <identifiersep> application . is <identifiersep> ajax <identifiersep> update ( request ) ) \n \t3 { \n <ect>
\t3 try { \n \t4 thread . sleep ( <number_literal> ) ; \n \t4 get <identifiersep> endpoint ( ) . create <identifiersep> queue ( get <identifiersep> client ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 status <identifiersep> printer . print <identifiersep> in <identifiersep> case <identifiersep> of <identifiersep> errors <identifiersep> or <identifiersep> warnings ( context ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 foo foo = new foo ( ) ; \n \t2 foo . do <identifiersep> it ( ) ; \n <ect>
\t3 out = socket . get <identifiersep> output <identifiersep> stream ( ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , ip <identifiersep> address , ip <identifiersep> port ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 try { \n \t5 script <identifiersep> file <identifiersep> abs <identifiersep> path = script <identifiersep> file . get <identifiersep> canonical <identifiersep> path ( ) ; \n \t5 <identifier> <identifiersep> down <identifiersep> script <identifiersep> name = get <identifiersep> file <identifiersep> from <identifiersep> canonical <identifiersep> path ( script <identifiersep> file <identifiersep> abs <identifiersep> path ) ; \n \t4 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 logger . debug ( <string_literal> + cols . get <identifiersep> integer <identifiersep> value ( col <identifiersep> name <identifiersep> <identifier> , null ) ) ; \n \t1 logger . debug ( <string_literal> + cols . get <identifiersep> string <identifiersep> value ( col <identifiersep> name <identifiersep> first <identifiersep> name , null ) ) ; \n \t1 logger . debug ( <string_literal> + cols . get <identifiersep> string <identifiersep> value ( col <identifiersep> name <identifiersep> last <identifiersep> name , null ) ) ; \n \t1 } catch ( connection <identifiersep> exception e ) { \n <ect>
\t3 if ( trace <identifiersep> on ) logger . info ( <string_literal> + top <identifiersep> tm <identifiersep> frame . last <identifiersep> match ) ; \n \t3 return top <identifiersep> tm <identifiersep> frame . last <identifiersep> match ; \n \t2 } else { \n \t3 triple t = new triple ( <identifier> ( p <identifiersep> vars [ 0 ] ) , <identifier> ( p <identifiersep> vars [ 1 ] ) , <identifier> <identifiersep> <identifier> <identifiersep> <identifier> ( p <identifiersep> vars [ <number_literal> ] ) ) ; \n <ect>
\t2 max <identifiersep> tokenizer tokenizer = new max <identifiersep> tokenizer ( decoded <identifiersep> raw <identifiersep> message ) ; \n \t2 while ( tokenizer . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t3 byte [ ] token = tokenizer . next <identifiersep> element ( ) ; \n \t3 string rf <identifiersep> address = utils . to <identifiersep> hex ( token [ 0 ] & 0x <identifiersep> ff , token [ 1 ] & 0x <identifiersep> ff , token [ <number_literal> ] & 0x <identifiersep> ff ) ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 } ) ) ; \n \t2 <comment> \n \t2 broker <identifiersep> service . stop ( ) ; \n \t2 broker <identifiersep> service . wait <identifiersep> until <identifiersep> stopped ( ) ; \n <ect>
\t2 double <identifier> = ( hit + 0 . 0 ) / ( hit + miss + 0 . 0 ) ; \n \t2 log . info ( <string_literal> + <identifier> <identifiersep> cache . size ( ) + <string_literal> + hit + <string_literal> + miss + <string_literal> \n \t4 + string . format ( <string_literal> , <identifier> ) ) ; \n \t2 bloom . print <identifiersep> stat ( ) ; \n <ect>
\t2 int redirect <identifiersep> port = request . get <identifiersep> connector ( ) . get <identifiersep> redirect <identifiersep> port ( ) ; \n \t2 <comment> \n \t2 if ( redirect <identifiersep> port < = 0 ) { \n <ect>
\t2 { \n \t3 if ( <identifier> . contains ( name ) ) \n \t4 continue ; \n \t3 if ( obsolete . contains ( name ) ) \n <ect>
\t3 if ( file <identifiersep> path . is <identifiersep> file ( ) && file <identifiersep> path . exists ( ) && file <identifiersep> path . can <identifiersep> read ( ) && file <identifiersep> path . length ( ) > 0 ) { \n \t4 final registered <identifiersep> service svc = validator . from ( file <identifiersep> path ) ; \n \t4 logger . info ( <string_literal> , svc . get <identifiersep> name ( ) , file <identifiersep> path . get <identifiersep> canonical <identifiersep> path ( ) ) ; \n \t3 } else { \n <ect>
\t1 if ( nr < 0 ) { \n \t1 int avg <identifiersep> row <identifiersep> size = estimate <identifiersep> row <identifiersep> size <identifiersep> from <identifiersep> schema ( conf , schema ) ; \n \t1 if ( avg <identifiersep> row <identifiersep> size > 0 ) { \n <ect>
\t6 && info . request <identifiersep> status <identifiersep> vars . contains <identifiersep> key ( this . var ) ) { \n \t5 info . request <identifiersep> status <identifiersep> vars . get ( this . var ) . next <identifiersep> request <identifiersep> in ( mod <identifiersep> info . status <identifiersep> request <identifiersep> delay <identifiersep> after <identifiersep> command <identifiersep> <identifier> , \n \t7 system . nano <identifiersep> time ( ) ) ; } \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { \n <ect>
\t4 properties props = load <identifiersep> properties ( resource , filename ) ; \n \t4 prop <identifiersep> holder = new properties <identifiersep> holder ( props , file <identifiersep> timestamp ) ; } \n \t3 catch ( io <identifiersep> exception ex ) { \n <ect>
\t1 logger . warn ( <string_literal> , upload <identifiersep> command ) \n \t1 logger . warn ( str ( e ) ) \n \t1 sys . exit ( ) \n \t1 if result != 0 : \n <ect>
\t8 vm <identifiersep> disk <identifiersep> stat <identifiersep> lock . set <identifiersep> agg <identifiersep> bytes <identifiersep> write ( vm <identifiersep> disk <identifiersep> stat <identifiersep> lock . get <identifiersep> net <identifiersep> bytes <identifiersep> write ( ) + vm <identifiersep> disk <identifiersep> stat <identifiersep> lock . get <identifiersep> current <identifiersep> bytes <identifiersep> write ( ) ) ; } \n \t7 <identifier> <identifiersep> vm <identifiersep> disk <identifiersep> stats <identifiersep> dao . update ( vm <identifiersep> disk <identifiersep> stat <identifiersep> lock . get <identifiersep> id ( ) , vm <identifiersep> disk <identifiersep> stat <identifiersep> lock ) ; } } \n \t4 } ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 if ( properties . get <identifiersep> max <identifiersep> active ( ) < properties . get <identifiersep> initial <identifiersep> size ( ) ) { \n \t3 log . warn ( <string_literal> + properties . get <identifiersep> max <identifiersep> active ( ) ) ; \n \t3 properties . set <identifiersep> initial <identifiersep> size ( properties . get <identifiersep> max <identifiersep> active ( ) ) ; } \n \t2 if ( properties . get <identifiersep> min <identifiersep> idle ( ) > properties . get <identifiersep> max <identifiersep> active ( ) ) { \n <ect>
\t3 log . debug ( <string_literal> + jsp <identifiersep> uri ) ; \n \t3 log . debug ( <string_literal> + request . get <identifiersep> servlet <identifiersep> path ( ) ) ; \n \t3 log . debug ( <string_literal> + request . get <identifiersep> path <identifiersep> info ( ) ) ; \n \t3 log . debug ( <string_literal> + context . get <identifiersep> real <identifiersep> path ( jsp <identifiersep> uri ) ) ; \n <ect>
\t5 { \n \t6 result = buffer . array ( ) ; } } \n \t4 catch ( io <identifiersep> exception e ) \n \t4 { \n <ect>
\t2 db <identifiersep> execute ( destination <identifiersep> database , <string_literal> ) } \n \t1 if ( list <identifiersep> schemas ( destination <identifiersep> database ) . contains ( destination <identifiersep> schema ) ) { \n \t2 log . info ( <string_literal> ) \n \t2 db <identifiersep> execute ( destination <identifiersep> database , <string_literal> $ { destination <identifiersep> schema } \\ <string_literal> ) } \n <ect>
\t3 if ( check <identifiersep> log <identifiersep> for <identifiersep> terminate <identifiersep> string ) { \n \t4 logging <identifiersep> event matched <identifiersep> event = utils <identifiersep> test . get <identifiersep> event <identifiersep> containing <identifiersep> string ( terminate <identifiersep> after <identifiersep> string ) ; \n \t4 if ( matched <identifiersep> event != null ) { \n \t5 test <identifiersep> passed <identifiersep> from <identifiersep> log4j = true ; \n <ect>
\t4 file file = new file ( dir ) ; \n \t4 <comment> \n \t4 file . mkdirs ( ) ; \n \t4 file = new file ( dir , name ) ; \n <ect>
\t5 if ( ! store . is <identifiersep> active ( ) ) { \n \t6 try { \n \t7 store . close <identifiersep> <identifier> ( ) ; } \n \t6 catch ( runtime <identifiersep> exception rex ) { \n <ect>
\t3 assert <identifiersep> not <identifiersep> null ( response ) ; \n \t3 assert <identifiersep> equals ( <number_literal> , response . get <identifiersep> attributes ( ) . size ( ) ) ; \n \t3 assert <identifiersep> equals ( <string_literal> , response . get <identifiersep> attributes ( ) . get ( open <identifiersep> id <identifiersep> protocol <identifiersep> constants . <identifier> <identifiersep> mode ) ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t5 log . debug ( <string_literal> , s <identifiersep> id . get <identifiersep> id ( ) ) ; \n \t5 validate <identifiersep> user ( s <identifiersep> id . get <identifiersep> id ( ) ) ; } \n \t4 return false ; } \n \t2 } catch ( external <identifiersep> identity <identifiersep> exception e ) { \n <ect>
\t3 dot <identifiersep> graph . <identifier> ( output <identifiersep> file ) ; \n \t2 } catch ( java . io . io <identifiersep> exception e ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t1 public void on <identifiersep> chunk <identifiersep> load <identifiersep> event ( final chunk <identifiersep> event . load event ) \n \t1 { \n \t2 if ( ! event . get <identifiersep> world ( ) . is <identifiersep> remote ) \n \t2 { \n <ect>
\t1 check <identifiersep> point . await <identifiersep> strict ( <string_literal> + <identifier> , <number_literal> , time <identifiersep> unit . seconds ) ; \n \t1 <comment> \n \t1 log . info ( <string_literal> ) ; \n \t1 add <identifiersep> cluster <identifiersep> enabled <identifiersep> cache <identifiersep> manager ( builder <identifiersep> used ) ; \n <ect>
\t3 all . add ( url <identifiersep> and <identifiersep> in ) ; \n \t3 all . add ( out ) ; \n \t3 this . json . add ( all ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 log . error ( <string_literal> + rule . rule <identifiersep> name ) ; \n \t5 log . info ( <string_literal> ) ; \n \t5 for ( <identifier> <identifiersep> item item : most <identifiersep> recent <identifiersep> <identifier> . items ) \n \t6 log . info ( <string_literal> + item . hash ) ; \n <ect>
\t2 try { \n \t3 socket . join <identifiersep> group ( group ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 if ( ! stop ) { \n <ect>
\t2 if ( config == null ) { \n \t3 try { \n \t4 config = new network <identifiersep> configuration ( network <identifiersep> interface . get <identifiersep> network <identifiersep> interfaces ( ) ) ; \n \t3 } catch ( socket <identifiersep> exception e ) { \n <ect>
\t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> + router <identifiersep> id + <string_literal> ) ; } \n \t2 <identifier> <identifiersep> account <identifiersep> mgr . check <identifiersep> access ( caller , null , true , router ) ; \n \t2 <comment> \n \t2 if ( router == null || router . get <identifiersep> state ( ) != virtual <identifiersep> machine . state . running ) { \n <ect>
\t4 interrupted = true ; } } } \n \t1 private class connection <identifiersep> supervisor { \n \t2 private timer timer ; \n \t2 public connection <identifiersep> supervisor ( int milliseconds ) { \n <ect>
\t2 if ( is <identifiersep> ip <identifiersep> allocated <identifiersep> to <identifiersep> vpc ( ip ) ) { \n \t3 return ; } \n \t2 if ( ip == null || ip . get <identifiersep> vpc <identifiersep> id ( ) == null ) { \n \t3 return ; } \n <ect>
\t6 get <identifiersep> channel ( ) . send ( backup , msg , get <identifiersep> channel <identifiersep> send <identifiersep> options ( ) ) ; } \n \t5 entry . set <identifiersep> backup <identifiersep> nodes ( backup ) ; \n \t5 if ( map <identifiersep> owner != null ) map <identifiersep> owner . object <identifiersep> made <identifiersep> <identifier> ( entry . get <identifiersep> key ( ) , entry . get <identifiersep> value ( ) ) ; \n \t4 } catch ( channel <identifiersep> exception x ) { \n <ect>
\t3 for ( int i = 0 ; i < <identifier> <identifiersep> cmds . length ; i ++ ) { \n \t4 <identifier> [ i ] = ( startup <identifiersep> command ) <identifier> <identifiersep> cmds [ i ] ; } \n \t3 final agent <identifiersep> attache attache = handle <identifiersep> connected <identifiersep> agent ( <identifier> <identifiersep> link , <identifier> , <identifier> <identifiersep> request ) ; \n \t3 if ( attache == null ) { \n <ect>
\t3 txn . close ( ) ; } } \n \t1 public int push ( string delegate <identifiersep> clz <identifiersep> name , object context ) { \n \t2 assert ( msid <identifiersep> <identifier> <identifiersep> manager != 0 ) : <string_literal> ; \n \t2 if ( msid <identifiersep> <identifier> <identifiersep> manager == 0 ) \n <ect>
\t2 if ( this . address != null ) { \n \t3 try { \n \t4 original <identifiersep> url = new url ( this . address ) ; \n \t3 } catch ( malformed <identifiersep> url <identifiersep> exception ex ) { \n <ect>
\t1 if ( rs1 != null ) { \n \t2 try { \n \t2 rs1 . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t5 transformer <identifiersep> factory . set <identifiersep> attribute ( xml <identifiersep> constants . access <identifiersep> external <identifiersep> dtd , <string_literal> ) ; \n \t5 transformer <identifiersep> factory . set <identifiersep> attribute ( xml <identifiersep> constants . access <identifiersep> external <identifiersep> <identifier> , <string_literal> ) ; \n \t4 } catch ( exception ignored ) { \n \t5 <comment> \n <ect>
\t1 thread <identifiersep> two . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 thread <identifiersep> one . proceed <identifiersep> and <identifiersep> wait <identifiersep> <identifier> <identifiersep> done ( ) ; \n \t1 assert <identifiersep> null ( thread <identifiersep> one . exception ) ; \n <ect>
\t2 erx <identifiersep> fetch <identifiersep> result <identifiersep> cache fetch <identifiersep> result <identifiersep> cache = fetch <identifiersep> result <identifiersep> cache ( ) ; \n \t2 if ( fetch <identifiersep> result <identifiersep> cache != null ) { \n \t3 fetch <identifiersep> result <identifiersep> cache . set <identifiersep> objects <identifiersep> for <identifiersep> fetch <identifiersep> specification ( <identifier> , ec , <identifier> , fs ) ; } \n \t2 if ( auto <identifiersep> batch <identifiersep> fetch <identifiersep> size ( ) > 0 && <identifier> . count ( ) > 0 ) { \n <ect>
\t4 found <identifiersep> user = true ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + found <identifiersep> user ) ; \n \t3 } else if ( name . equals ( <string_literal> ) ) { \n \t4 found <identifiersep> <identifier> = true ; \n <ect>
\t3 } catch ( configuration <identifiersep> exception e ) { \n \t4 throw e ; \n \t3 } catch ( exception e ) { \n \t4 <comment> \n <ect>
\t4 wait <identifiersep> for <identifiersep> running ( false ) ; \n \t4 log . info ( <string_literal> ) ; \n \t4 channel . close ( ) . sync ( ) ; \n \t4 is <identifiersep> shutdown = true ; \n <ect>
\t1 hive <identifiersep> history <identifiersep> query <identifiersep> impl . delete <identifiersep> file <identifiersep> <identifier> ( configuration <identifiersep> check <identifiersep> implementation . get <identifiersep> home <identifiersep> dir ( ) ) ; \n \t1 hive <identifiersep> history <identifiersep> query <identifiersep> impl . delete <identifiersep> file <identifiersep> query <identifiersep> logs ( configuration <identifiersep> check <identifiersep> implementation . get <identifiersep> home <identifiersep> dir ( ) ) ; \n \t1 <comment> \n \t1 logger . info ( <string_literal> ) ; \n <ect>
\t6 for ( transaction <identifiersep> context ctx : l ) { \n \t7 ctx . after <identifiersep> commit ( ) ; } } } } \n \t3 return response . get <identifiersep> result ( ) ; \n \t2 } catch ( jms <identifiersep> exception e ) { \n <ect>
\t1 assert <identifiersep> equals ( 0 , cs . get <identifiersep> length ( ) ) ; \n \t1 assert <identifiersep> equals ( 0 , cs . get <identifiersep> file <identifiersep> count ( ) ) ; \n \t1 assert <identifiersep> equals ( 0 , cs . get <identifiersep> directory <identifiersep> count ( ) ) ; \n \t1 input <identifiersep> split [ ] splits = input <identifiersep> format . get <identifiersep> splits ( job , <number_literal> ) ; \n <ect>
\t1 log . error ( e , e ) ; \n \t1 throw new ldap <identifiersep> exception ( e ) ; } } \n private static void load <identifiersep> ldap <identifiersep> <identifier> <identifiersep> groups ( ldap <identifiersep> client ldap , final ldap <identifiersep> integration <identifiersep> configuration <identifier> , final map < string , string > group <identifiersep> dn <identifiersep> to <identifiersep> id , final map < string , set < string > > <identifier> <identifiersep> groups ) throws ldap <identifiersep> exception { \n \t1 if ( verbose ) { \n <ect>
\t4 set < gen <identifiersep> context > contexts <identifiersep> to <identifiersep> include = sets . new <identifiersep> hash <identifiersep> set ( ) ; \n \t4 boolean is <identifiersep> <identifier> = false ; \n \t4 for ( gen <identifiersep> context context : value <identifiersep> pair . get <identifiersep> second ( ) ) { \n \t5 if ( ! context . should <identifiersep> generate ( conf ) ) { \n <ect>
\t2 <comment> \n \t2 future . get ( ) ; \n \t2 is <identifiersep> ok = true ; \n \t2 if ( is <identifiersep> activate ) { \n <ect>
\t1 try { \n \t1 <comment> \n \t1 ebean . get <identifiersep> default <identifiersep> server ( ) ; \n \t1 } catch ( throwable e ) { \n <ect>
\t7 generate <identifiersep> <identifier> ( schema , <identifier> ) ; \n \t6 } catch ( exception e ) { \n \t7 log . error ( <string_literal> + <identifier> , e ) ; } } \n \t4 } catch ( exception e ) { \n <ect>
\t1 public input <identifiersep> stream get <identifiersep> new <identifiersep> stream ( ) { \n \t2 try { \n \t3 return binary . get <identifiersep> stream ( ) ; \n \t2 } catch ( final repository <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 ctx <identifiersep> init <identifiersep> latch . count <identifiersep> down ( ) ; \n \t3 if ( disconnect ) \n <ect>
\t6 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n \t7 <identifier> <identifiersep> log . warn ( <string_literal> , e ) ; \n \t5 } catch ( interrupted <identifiersep> io <identifiersep> exception e ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t1 public void thread <identifiersep> started ( ) { \n \t2 try { \n \t3 listener . thread <identifiersep> started ( ) ; \n \t2 } catch ( remote <identifiersep> exception err ) { \n <ect>
\t2 logger . error ( <string_literal> ) ; \n \t2 throw new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n \t1 @ override \n \t1 public boolean is <identifiersep> file ( ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n \t3 <identifier> <identifiersep> log . info ( <string_literal> + peer , ioe ) ; } \n \t1 catch ( runtime <identifiersep> exception t ) \n \t1 { \n <ect>
\t2 final set < string > <identifier> = new linked <identifiersep> hash <identifiersep> set < > ( tgt . get <identifiersep> proxy <identifiersep> granting <identifiersep> <identifier> ( ) . key <identifiersep> set ( ) ) ; \n \t2 final boolean has <identifiersep> <identifier> = ! <identifier> . is <identifiersep> empty ( ) ; \n \t2 count . get <identifiersep> and <identifiersep> add ( delete <identifiersep> <identifier> ( <identifier> ) ) ; \n \t2 if ( has <identifiersep> <identifier> ) { \n <ect>
\t3 final servlet <identifiersep> request <identifiersep> data <identifiersep> binder binder = new servlet <identifiersep> request <identifiersep> data <identifiersep> binder ( s , <string_literal> ) ; \n \t3 init <identifiersep> binder ( request , binder ) ; \n \t3 binder . bind ( request ) ; \n \t3 if ( ! s . is <identifiersep> satisfied <identifiersep> by ( assertion , request ) ) { \n <ect>
\t1 private void poll ( ) { \n \t2 <comment> \n \t2 for ( external <identifiersep> listener listener : external <identifiersep> factory . get <identifiersep> external <identifiersep> listeners ( ) ) { \n \t3 if ( listener instanceof debug <identifiersep> packer ) { \n <ect>
\t4 throw e ; } } } \n \t1 @ override \n \t1 public boolean subscribe ( message <identifiersep> handler handler ) { \n <ect>
\t4 } else { \n \t5 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t4 break ; \n \t3 default : \n <ect>
\t5 final throwable to <identifiersep> return = ( throwable ) constructor . new <identifiersep> instance ( error . get <identifiersep> message ( ) ) ; \n \t5 to <identifiersep> return . set <identifiersep> stack <identifiersep> trace ( error . get <identifiersep> stack <identifiersep> trace ( ) ) ; \n \t5 return to <identifiersep> return ; \n \t4 } catch ( exception ex ) { \n <ect>
\t4 pool <identifiersep> hosts . add ( host ) ; \n \t3 } catch ( exception e ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + host + <string_literal> + primary <identifiersep> data <identifiersep> store <identifiersep> info , e ) ; } } \n \t2 if ( pool <identifiersep> hosts . is <identifiersep> empty ( ) ) { \n <ect>
\t1 user <identifiersep> dn = ldap <identifiersep> connection <identifiersep> template <identifiersep> factory . create ( ambari <identifiersep> ldap <identifiersep> configuration ) . search <identifiersep> first ( new dn ( ambari <identifiersep> ldap <identifiersep> configuration . user <identifiersep> search <identifiersep> base ( ) ) , filter , search <identifiersep> scope . <identifier> , get <identifiersep> user <identifiersep> dn <identifiersep> name <identifiersep> entry <identifiersep> mapper ( ambari <identifiersep> ldap <identifiersep> configuration ) ) ; \n \t1 if ( null == user <identifiersep> dn ) { \n \t2 logger . info ( <string_literal> ) ; \n \t2 throw new ambari <identifiersep> ldap <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t2 durable <identifiersep> topic <identifiersep> subscription sub = ( ( topic <identifiersep> region ) region <identifiersep> broker . get <identifiersep> topic <identifiersep> region ( ) ) . get <identifiersep> durable <identifiersep> subscription ( key ) ; \n \t2 super . remove <identifiersep> subscription ( context , info ) ; \n \t2 if ( sub == null ) { \n <ect>
\t2 register <identifiersep> found <identifiersep> attempt ( watched <identifiersep> path <identifiersep> info . path <identifiersep> identifier , null , path ) ; \n \t2 } else if ( p . get <identifiersep> file <identifiersep> name ( ) . to <identifiersep> string ( ) . equals ( shuffle <identifiersep> handler . index <identifiersep> file <identifiersep> name ) ) { \n \t2 register <identifiersep> found <identifiersep> attempt ( watched <identifiersep> path <identifiersep> info . path <identifiersep> identifier , path , null ) ; \n \t2 } else { \n <ect>
\t2 if ( e instanceof interrupted <identifiersep> io <identifiersep> exception ) { \n \t3 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t1 <comment> \n \t1 <comment> \n <ect>
\t1 @ override \n \t1 public void unregister ( metric metric , string metric <identifiersep> name , abstract <identifiersep> metric <identifiersep> group group ) { \n \t2 synchronized ( lock ) { \n \t3 if ( is <identifiersep> shutdown ( ) ) { \n <ect>
\t2 logger . trace ( <string_literal> ) ; \n \t2 int callback <identifiersep> id = incoming <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( 0 ) ; \n \t2 <identifier> <identifiersep> state status = <identifier> <identifiersep> state . get <identifiersep> <identifier> <identifiersep> state ( incoming <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( 1 ) ) ; \n \t2 if ( status == null ) { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 db <identifiersep> conn . commit ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n \t2 log . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n <ect>
\t4 pos > last <identifiersep> pos ) ; \n \t3 last <identifiersep> pos = pos ; } \n \t2 break ; \n \t2 } else { \n <ect>
\t1 if ( is <identifiersep> registered ( <identifier> ) ) { \n \t1 reset <identifiersep> <identifier> ( <identifier> ) ; \n \t1 } else { \n <ect>
\t4 if ( ! failed . is <identifiersep> empty ( ) ) { \n \t5 handle <identifiersep> failure ( <string_literal> + iterables . to <identifiersep> string ( failed ) + <string_literal> + <identifier> ) ; } } \n \t3 <comment> \n \t3 if ( ! non <identifiersep> existing . is <identifiersep> empty ( ) ) { \n <ect>
\t1 private method get <identifiersep> method <identifiersep> by <identifiersep> name ( string name ) { \n \t2 try { \n \t3 return get <identifiersep> class ( ) . get <identifiersep> method ( name ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t2 return <identifiersep> value = false ; \n \t2 log . error ( <string_literal> + solr <identifiersep> props <identifiersep> config . get <identifiersep> collection ( ) \n \t2 + <string_literal> + shards <identifiersep> list + <string_literal> + create <identifiersep> response ) ; \n \t1 } else { \n <ect>
<comment> \n public static boolean move <identifiersep> to <identifiersep> <identifier> ( file <identifiersep> system fs , path f , configuration conf , boolean purge ) \n \t1 throws io <identifiersep> exception { \n <ect>
\t1 public static string db <identifiersep> user <identifiersep> name = <string_literal> ; \n \t1 public static string db <identifiersep> password = <string_literal> ; \n \t1 public static string db <identifiersep> sync <identifiersep> mapping = <string_literal> ; \n \t1 public void activate ( final bundle <identifiersep> context bundle <identifiersep> context , final map < string , object > properties ) { \n <ect>
\t4 <identifier> <identifiersep> <identifier> = ( string ) params . get ( <string_literal> ) ; \n \t4 string internal <identifiersep> <identifier> = ( string ) params . get ( <string_literal> ) ; \n \t4 string internal <identifiersep> <identifier> = ( string ) params . get ( <string_literal> ) ; \n \t4 if ( internal <identifiersep> <identifier> == null ) { \n <ect>
\t5 case data <identifiersep> type . double : \n \t6 output += ( double ) o ; \n \t6 break ; } \n \t4 } else { \n <ect>
\t7 . create <identifiersep> min <identifiersep> expires <identifiersep> header ( subscribe <identifiersep> min <identifiersep> expire ) ; } \n \t3 catch ( invalid <identifiersep> argument <identifiersep> exception e ) \n \t3 { \n \t4 <comment> \n <ect>
\t4 number n = ( number ) value ; \n \t4 return n . int <identifiersep> value ( ) ; } \n \t3 log . warn ( <string_literal> + message ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 <comment> \n \t1 public void handle <identifiersep> shutdown <identifiersep> signal ( string consumer <identifiersep> tag , shutdown <identifiersep> signal <identifiersep> exception sig ) { \n <ect>
\t2 public boolean is <identifiersep> work <identifiersep> completed ( ) { \n \t3 for ( final map . entry < tile , tile <identifiersep> processing <identifiersep> record > entry : this . tile <identifiersep> records . entry <identifiersep> set ( ) ) { \n \t4 final tile <identifiersep> processing <identifiersep> record tile <identifiersep> processing <identifiersep> record = entry . get <identifiersep> value ( ) ; \n \t4 if ( tile <identifiersep> processing <identifiersep> record . get <identifiersep> state ( ) != tile <identifiersep> processing <identifiersep> state . done <identifiersep> reading ) { \n <ect>
\t3 log . debug ( <string_literal> + user <identifiersep> name ) ; } \n \t2 nc . set <identifiersep> name ( user <identifiersep> name ) ; } \n \t2 if ( pc != null ) { \n <ect>
<comment> \n \t1 private void <identifier> ( ) { \n \t2 if ( is <identifiersep> killed ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t2 } catch ( resource <identifiersep> in <identifiersep> use <identifiersep> exception ex2 ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex2 ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( base <identifiersep> cmd . resource <identifiersep> in <identifiersep> use <identifiersep> error , ex2 . get <identifiersep> message ( ) ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception <identifier> ) { \n <ect>
\t2 try { \n \t3 ip = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( ip <identifiersep> or <identifiersep> host ) . get <identifiersep> host <identifiersep> address ( ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n \t3 ip = <string_literal> ; \n <ect>
\t4 <identifier> <identifiersep> responses . put ( node . get ( ) , exec ) ; } } \n \t3 if ( options . get <identifiersep> port ( ) > 0 ) { \n \t3 open <identifiersep> socket <identifiersep> finder . find <identifiersep> open <identifiersep> socket <identifiersep> on <identifiersep> node ( node . get ( ) , options . get <identifiersep> port ( ) , options . get <identifiersep> seconds ( ) , \n \t5 time <identifiersep> unit . seconds ) ; } } \n <ect>
\t4 log . warn ( <string_literal> , <identifier> ) ; } \n \t3 catch ( command <identifiersep> exception ce ) { \n \t4 err <identifiersep> msg = ce . get <identifiersep> message ( ) ; \n \t4 err <identifiersep> code = ce . get <identifiersep> error <identifiersep> code ( ) . to <identifiersep> string ( ) ; \n <ect>
\t4 fs . delete ( wf <identifiersep> dir <identifiersep> path , true ) ; } \n \t3 else { \n \t4 log . debug ( <string_literal> + wf <identifiersep> dir <identifiersep> path ) ; } } \n \t2 catch ( exception e ) { \n <ect>
@ override \n public void handle <identifiersep> exception ( exception ex , rollback <identifiersep> source <identifiersep> callback rollback <identifiersep> method ) { \n \t1 fire <identifiersep> notification ( ex , get <identifiersep> current <identifiersep> event ( ) ) ; \n \t1 resolve <identifiersep> and <identifiersep> log <identifiersep> exception ( ex ) ; \n <ect>
\t4 } catch ( jws <identifiersep> input <identifiersep> exception e ) { \n \t5 throw new verification <identifiersep> exception ( ) ; } } \n \t3 log . debug ( <string_literal> ) ; \n \t2 } catch ( verification <identifiersep> exception e ) { \n <ect>
\t1 args . add ( <string_literal> ) ; \n \t1 args . add ( <string_literal> ) ; \n \t1 args . add ( <string_literal> ) ; \n \t1 args . add ( <string_literal> ) ; \n <ect>
\t2 exceptions . handle ( message , sql <identifiersep> exception ) ; } \n \t1 public void handle <identifiersep> sql <identifiersep> exception ( sql <identifiersep> exception ex ) { \n \t2 sql <identifiersep> exception next = ex . get <identifiersep> next <identifiersep> exception ( ) ; \n \t2 while ( next != null ) { \n <ect>
\t1 } catch ( throwable ignored ) { \n \t1 logger . error ( this , <string_literal> + ignored . get <identifiersep> message ( ) , ignored ) ; <comment> \n \t1 cache <identifiersep> manager . remove <identifiersep> region <identifiersep> cache ( <identifier> <identifiersep> datasource <identifiersep> service . jdbc <identifiersep> pool ) ; \n \t1 cache <identifiersep> manager . remove <identifiersep> region <identifiersep> cache ( <identifier> <identifiersep> datasource <identifiersep> service . jdbc <identifiersep> datasource ) ; \n <ect>
\t4 pool <identifiersep> hosts . add ( host ) ; \n \t3 } catch ( exception e ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + host + <string_literal> + data <identifiersep> store , e ) ; } } \n \t2 if ( pool <identifiersep> hosts . is <identifiersep> empty ( ) ) { \n <ect>
\t2 assert <identifiersep> that ( files . exists ( shard <identifiersep> directory ( node <identifiersep> <number_literal> , index , 0 ) ) , equal <identifiersep> to ( true ) ) ; \n \t2 assert <identifiersep> that ( files . exists ( index <identifiersep> directory ( node <identifiersep> <number_literal> , index ) ) , equal <identifiersep> to ( true ) ) ; \n \t2 assert <identifiersep> that ( files . exists ( shard <identifiersep> directory ( node <identifiersep> <number_literal> , index , 0 ) ) , equal <identifiersep> to ( false ) ) ; \n \t2 assert <identifiersep> that ( files . exists ( index <identifiersep> directory ( node <identifiersep> <number_literal> , index ) ) , equal <identifiersep> to ( false ) ) ; \n <ect>
\t4 semaphore . notify <identifiersep> all ( ) ; } \n \t3 if ( count <identifiersep> down <identifiersep> latch != null ) { \n \t4 count <identifiersep> down <identifiersep> latch . count <identifiersep> down ( ) ; } \n <ect>
\t2 configuration job <identifiersep> conf = null ; \n \t2 try { \n \t3 job <identifiersep> conf = new x <identifiersep> configuration ( new string <identifiersep> reader ( job . get <identifiersep> conf ( ) ) ) ; } \n \t2 catch ( io <identifiersep> exception ioe ) { \n <ect>
<comment> \n \t1 public map < string , object > get <identifiersep> multi ( string [ ] keys , integer [ ] hash <identifiersep> codes , boolean as <identifiersep> string ) { \n \t2 if ( keys == null || keys . length == 0 ) { \n <ect>
\t4 input <identifiersep> stream input = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t4 element el = query <identifiersep> async <identifiersep> job <identifiersep> result ( server , input ) ; \n \t4 map < string , string > values = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( el , new string [ ] { <string_literal> } ) ; \n \t4 if ( values . get ( <string_literal> ) == null ) { \n <ect>
public integer hits ( ) { \n \t1 return ( integer ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> topic . hits <identifiersep> key ) ; } \n public void set <identifiersep> hits ( integer value ) { \n <ect>
\t2 } else { \n \t3 if ( ! <identifier> <identifiersep> r ( ) . is <identifiersep> committed ( ) ) { \n \t4 <identifier> <identifiersep> r ( ) . send <identifiersep> error ( sc ) ; \n \t3 } else { \n <ect>
\t4 delete <identifiersep> method . release <identifiersep> connection ( ) ; \n \t4 s <identifiersep> logger . error ( <string_literal> + error <identifiersep> message ) ; \n \t4 throw new neutron <identifiersep> rest <identifiersep> api <identifiersep> exception ( <string_literal> + error <identifiersep> message ) ; } \n \t2 } catch ( neutron <identifiersep> rest <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t5 log . warn ( <string_literal> , job <identifiersep> id , \n \t6 blob <identifiersep> key , client <identifiersep> socket . get <identifiersep> inet <identifiersep> address ( ) ) ; } } \n \t2 } catch ( socket <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t2 max <identifiersep> docs = long . parse <identifiersep> long ( cmd <identifiersep> line . get <identifiersep> value ( max <identifiersep> opt ) . to <identifiersep> string ( ) ) ; } \n \t2 if ( max <identifiersep> docs < 0 ) { \n \t2 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t2 string out <identifiersep> dir = cmd <identifiersep> line . get <identifiersep> value ( output <identifiersep> opt ) . to <identifiersep> string ( ) ; \n <ect>
\t3 t match { \n \t4 case <identifier> <identifiersep> <identifier> : timeout <identifiersep> exception = > \n \t4 log . info ( <string_literal> ) \n \t4 case <identifier> <identifiersep> <identifier> = > \n <ect>
\t2 logger . debug ( <string_literal> + port ) ; } \n \t1 protected void reset <identifiersep> after <identifiersep> error ( ) { \n \t2 <comment> \n \t2 try { \n <ect>
\t4 else \n \t5 method <identifiersep> params . add ( ( serializable ) clazz \n \t7 . cast ( clazz . get <identifiersep> declared <identifiersep> method ( <string_literal> , string . class ) . invoke ( null , const <identifiersep> val ) ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 if ( resp == null ) { \n \t4 throw new exception ( <string_literal> ) ; } \n \t3 return resp . get <identifiersep> success ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 assert <identifiersep> that ( started <identifiersep> shard . current <identifiersep> node <identifiersep> id ( ) , <identifier> . any <identifiersep> of ( equal <identifiersep> to ( <string_literal> ) , equal <identifiersep> to ( <string_literal> ) ) ) ; } } \n \t1 public void test <identifiersep> index <identifiersep> filters ( ) { \n \t2 allocation <identifiersep> service strategy = create <identifiersep> allocation <identifiersep> service ( settings . builder ( ) \n \t4 . build ( ) ) ; \n <ect>
\t4 <comment> \n \t4 try { \n \t5 super . <identifier> ( key , resource ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t9 state state = i . get <identifiersep> state ( ) ; \n \t9 string <identifier> = state . to <identifiersep> string ( ) ; \n \t9 out . print ( <identifier> ) ; \n \t8 } catch ( item <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 try { \n \t3 add <identifiersep> connector ( ( search <identifiersep> result ) event . get <identifiersep> new <identifiersep> binding ( ) ) ; \n \t2 } catch ( exception err ) { \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , uuid <identifiersep> generator . generate <identifiersep> uuid ( ) ) ; } \n \t1 public void test <identifiersep> performance ( ) { \n \t2 simple <identifiersep> uuid <identifiersep> generator uuid <identifiersep> generator = new simple <identifiersep> uuid <identifiersep> generator ( ) ; \n \t2 stop <identifiersep> watch watch = new stop <identifiersep> watch ( ) ; \n <ect>
\t2 } catch ( throwable e1 ) { \n \t3 <identifier> . error <identifiersep> message ( <string_literal> , project ) ; \n \t3 return null ; } \n \t2 if ( auth . size ( ) < 1 ) { \n <ect>
\t6 } else { \n \t7 logger . warn ( <string_literal> , type ) ; } \n \t5 } else { \n \t6 if ( success ) { \n <ect>
\t1 data <identifiersep> source ds = null ; \n \t1 try { \n \t1 ds = get <identifiersep> data <identifiersep> source ( database <identifiersep> connection ) ; \n \t1 } catch ( db <identifiersep> datasource <identifiersep> service <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream <identifier> = new ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream ( first <identifiersep> version <identifiersep> name ) ; \n \t2 ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream <identifier> = new ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream ( default <identifiersep> stream <identifiersep> name ) ; \n \t2 test <identifiersep> argument <identifiersep> runner ( <identifier> , <identifier> ) ; \n <ect>
\t2 z <identifiersep> wave <identifiersep> command <identifiersep> class zwave <identifiersep> command <identifiersep> class ; \n \t2 int command <identifiersep> class <identifiersep> code = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset ) ; \n \t2 command <identifiersep> class = command <identifiersep> class . get <identifiersep> command <identifiersep> class ( command <identifiersep> class <identifiersep> code ) ; \n \t2 if ( command <identifiersep> class == null ) { \n <ect>
\t2 metrics . add <identifiersep> histogram ( q . get <identifiersep> <identifier> <identifiersep> quality <identifiersep> histogram ( ) ) ; \n \t2 if ( ! <identifier> . is <identifiersep> empty ( ) ) metrics . add <identifiersep> histogram ( <identifier> . get <identifiersep> <identifier> <identifiersep> quality <identifiersep> histogram ( ) ) ; \n \t2 metrics . write ( output ) ; \n \t2 if ( q . is <identifiersep> empty ( ) && <identifier> . is <identifiersep> empty ( ) ) { \n <ect>
\t3 <comment> \n \t3 logger . debug ( <string_literal> ) ; \n \t3 hue <identifiersep> settings settings = active <identifiersep> bridge . get <identifiersep> settings ( ) ; \n \t3 if ( settings == null ) { \n <ect>
\t6 throw new runtime <identifiersep> exception ( <string_literal> + type ) ; } \n \t4 if ( return <identifiersep> value != this . expected <identifiersep> return <identifiersep> value ) { \n \t5 assert . fail ( <string_literal> + return <identifiersep> value + <string_literal> + expected <identifiersep> return <identifiersep> value ) ; } \n \t3 } catch ( throwable t ) { \n <ect>
\t1 public void write <identifiersep> lock ( key <identifiersep> column lock <identifiersep> id , store <identifiersep> transaction tx ) throws temporary <identifiersep> locking <identifiersep> exception , permanent <identifiersep> locking <identifiersep> exception { \n \t2 if ( null != tx . get <identifiersep> configuration ( ) . get <identifiersep> group <identifiersep> name ( ) ) { \n \t3 metric <identifiersep> manager . instance . get <identifiersep> counter ( tx . get <identifiersep> configuration ( ) . get <identifiersep> group <identifiersep> name ( ) , m <identifiersep> locks , m <identifiersep> write , m <identifiersep> calls ) . inc ( ) ; } \n \t2 if ( lock <identifiersep> state . has ( tx , lock <identifiersep> id ) ) { \n <ect>
\t2 final <identifier> <identifiersep> vpn <identifiersep> gateway vpn <identifiersep> gw = <identifier> <identifiersep> vpn <identifiersep> gateway <identifiersep> dao . find <identifiersep> by <identifiersep> id ( conn . get <identifiersep> vpn <identifiersep> gateway <identifiersep> id ( ) ) ; \n \t2 final ip <identifiersep> address ip = <identifier> <identifiersep> ip <identifiersep> address <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vpn <identifiersep> gw . get <identifiersep> addr <identifiersep> id ( ) ) ; \n \t2 final map < capability , string > vpn <identifiersep> capabilities = capabilities . get ( service . vpn ) ; \n \t2 if ( ! vpn <identifiersep> capabilities . get ( capability . vpn <identifiersep> types ) . contains ( <string_literal> ) ) { \n <ect>
private error <identifiersep> type <identifiersep> repository error <identifiersep> type <identifiersep> repository ; \n private configuration <identifiersep> component <identifiersep> locator component <identifiersep> locator ; \n static { \n \t1 <comment> \n <ect>
\t4 string [ ] indices = indices <identifiersep> to <identifiersep> flush . to <identifiersep> array ( new string [ indices <identifiersep> to <identifiersep> flush . size ( ) ] ) ; \n \t4 logger . info ( <string_literal> , arrays . to <identifiersep> string ( indices ) ) ; \n \t4 flush <identifiersep> response <identifiersep> future = client . admin ( ) . indices ( ) . prepare <identifiersep> flush ( indices ) . execute ( ) ; } } \n \t2 final string [ ] indices <identifiersep> to <identifiersep> snapshot = { <string_literal> , <string_literal> } ; \n <ect>
\t4 return false ; } } \n \t2 <comment> \n \t2 final int nic <identifiersep> count = get <identifiersep> active <identifiersep> nics <identifiersep> in <identifiersep> network ( network <identifiersep> id ) ; \n \t2 if ( nic <identifiersep> count > 0 ) { \n <ect>
\t4 } else { \n \t5 logger . error ( <string_literal> { } \\ <string_literal> , new <identifiersep> state ) ; } \n \t4 s . close ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 rdf <identifiersep> node <identifier> <identifiersep> node = null ; \n \t2 <comment> \n \t2 node <identifiersep> iterator = model . list <identifiersep> objects <identifiersep> of <identifiersep> property ( source <identifiersep> resource , has <identifiersep> model <identifiersep> property ) ; \n \t2 if ( ! node <identifiersep> iterator . has <identifiersep> next ( ) || ! ( model <identifiersep> node = node <identifiersep> iterator . next ( ) ) . is <identifiersep> resource ( ) ) { \n <ect>
\t1 <comment> \n <comment> <ect>
\t1 message <identifiersep> handler <identifiersep> impl ( message <identifiersep> context context ) { \n \t2 this . context = context ; } \n \t1 @ override \n \t1 public void from ( string from ) { \n <ect>
\t4 } catch ( configuration <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . error ( <string_literal> + info . name , e ) ; \n \t5 system . exit ( 1 ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 if ( is == null && external <identifiersep> process != null && ! external <identifiersep> process . is <identifiersep> destroyed ( ) ) { \n \t4 runnable r = new runnable ( ) { \n \t5 @ override \n \t5 public void run ( ) { \n <ect>
\t4 <string_literal> \n \t4 + ex . get <identifiersep> message ( ) ) ; \n \t2 return ; \n \t1 } catch ( exception ex ) { \n <ect>
\t2 string response <identifiersep> string ; \n \t2 try { \n \t3 string url = triple <identifiersep> store <identifiersep> url + <string_literal> \n \t5 + url <identifiersep> encoder . encode ( graph <identifiersep> uri , <string_literal> ) ; \n <ect>
\t1 @ override \n \t1 protected void do <identifiersep> stop ( ) throws exception { \n \t2 <comment> \n \t2 if ( this . transport != null && this . transport . is <identifiersep> listening ( ) ) { \n <ect>
\t3 logger . debug ( <string_literal> , delete ) ; \n \t3 table <identifiersep> utils . delete <identifiersep> table <identifiersep> if <identifiersep> exists ( amazon <identifiersep> dynamo <identifiersep> db <identifiersep> client , delete ) ; } \n \t2 logger . debug ( <string_literal> , request ) ; \n \t2 table <identifiersep> utils . create <identifiersep> table <identifiersep> if <identifiersep> not <identifiersep> exists ( amazon <identifiersep> dynamo <identifiersep> db <identifiersep> client , request ) ; \n <ect>
<comment> \n private static void handle <identifiersep> param <identifiersep> <identifier> ( map < string , string > from <identifiersep> map , map < string , string > to <identifiersep> map , \n \t1 string deprecated <identifiersep> name , string new <identifiersep> name , string new <identifiersep> usage ) { \n \t1 if ( from <identifiersep> map . contains <identifiersep> key ( deprecated <identifiersep> name ) ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t4 writer . key ( <string_literal> ) ; \n \t4 writer . value ( <string_literal> ) ; \n \t4 writer . end <identifiersep> object ( ) ; \n \t3 } catch ( database <identifiersep> service <identifiersep> exception e ) { \n <ect>
\t5 logger . info ( <string_literal> , new <identifiersep> pack . <identifier> <identifiersep> pack <identifiersep> file <identifiersep> name ) ; \n \t4 } else if ( <identifier> <identifiersep> pack == new <identifiersep> pack ) { \n \t5 logger . info ( <string_literal> , new <identifiersep> pack . <identifier> <identifiersep> pack <identifiersep> file <identifiersep> name ) ; \n \t4 } else { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t1 file <identifiersep> system other ; \n \t1 try { \n \t1 other = p . get <identifiersep> file <identifiersep> system ( cached <identifiersep> configuration . get <identifiersep> instance ( ) ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 sql = context . get <identifiersep> wiki ( ) . parse <identifiersep> content ( sql , context ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 executor . execute ( cmd <identifiersep> line , result <identifiersep> handler ) ; \n \t3 logger . debug ( <string_literal> , command <identifiersep> line ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 result . set <identifiersep> success <identifiersep> is <identifiersep> set ( true ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 case passive <identifiersep> <identifier> <identifiersep> required : \n \t2 case passive <identifiersep> login <identifiersep> required : \n \t3 return messages . unexpected <identifiersep> error <identifiersep> handling <identifiersep> request ; \n \t2 default : \n <ect>
\t2 sum += d ; \n \t2 count ++ ; } } \n \t1 double <identifier> = ( sum / count - min ) / ( max - min ) ; \n \t1 <identifier> . set ( cluster . get <identifiersep> id ( ) , <identifier> ) ; \n <ect>
\t6 if ( api . create <identifiersep> workspace ( host , dialog . get <identifiersep> org <identifiersep> name ( ) , dialog . get <identifiersep> workspace <identifiersep> name ( ) , context , <identifier> <identifiersep> private <identifiersep> <identifier> ) ) { \n \t7 <identifier> <identifiersep> url url = new <identifier> <identifiersep> url ( host , dialog . get <identifiersep> org <identifiersep> name ( ) , dialog . get <identifiersep> workspace <identifiersep> name ( ) , constants . default <identifiersep> port , true ) ; \n \t7 string file <identifiersep> path = v <identifiersep> files [ 0 ] . get <identifiersep> canonical <identifiersep> path ( ) ; \n \t7 if ( file <identifiersep> path == null ) { \n <ect>
\t5 final string <identifier> \t1 = parts [ <number_literal> ] ; \n \t5 final string <identifier> \t1 = parts [ <number_literal> ] ; \n \t5 return <identifier> <identifiersep> to <identifiersep> <identifier> <identifiersep> <identifier> ( zone , <identifier> , <identifier> , <identifier> ) ; } \n \t3 } else { \n <ect>
\t1 @ post \n \t1 @ path ( <string_literal> ) \n \t1 @ consumes ( { <string_literal> , <string_literal> } ) \n \t1 public string add <identifiersep> favorite <identifiersep> movie ( favorite <identifiersep> movie <identifiersep> xml <identifiersep> type movie ) { \n <ect>
\t4 log . debug ( <string_literal> , job <identifiersep> master <identifiersep> gateway . get <identifiersep> <identifier> <identifiersep> token ( ) ) ; \n \t4 return ; \n \t3 } else { \n \t4 close <identifiersep> job <identifiersep> manager <identifiersep> connection ( job <identifiersep> id , new exception ( <string_literal> + job <identifiersep> id + ' . ' ) ) ; } } \n <ect>
\t1 private final static logger log = log <identifiersep> manager . get <identifiersep> logger ( <identifier> . class ) ; \n \t1 @ override \n \t1 public void process <identifiersep> event ( event <identifiersep> request request , event <identifiersep> response response ) throws portlet <identifiersep> exception , io <identifiersep> exception { \n <ect>
\t3 ) ; \n \t3 break ; \n \t2 case console <identifiersep> proxy <identifiersep> alert <identifiersep> event <identifiersep> args . proxy <identifiersep> <identifier> : \n <ect>
\t6 feature . set ( pig <identifiersep> feature . map <identifiersep> only . ordinal ( ) ) ; \n \t5 } else { \n \t6 new feature <identifiersep> visitor ( <identifier> . reduce <identifiersep> plan , feature ) . visit ( ) ; } \n \t4 } catch ( visitor <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 protected void select <identifiersep> exception ( io <identifiersep> exception exception ) { \n <ect>
\t2 if ( ! success ) \n \t3 <identifier> <identifiersep> locks ( ) ; \n \t2 if ( on <identifiersep> done ( success , err . get ( ) ) ) { \n <ect>
\t2 data <identifiersep> source data <identifiersep> source = d <identifiersep> space <identifiersep> services <identifiersep> factory . get <identifiersep> instance ( ) \n <number_literal> . get <identifiersep> service <identifiersep> manager ( ) \n <number_literal> . get <identifiersep> service <identifiersep> by <identifiersep> name ( <string_literal> , data <identifiersep> source . class ) ; \n \t2 if ( null == data <identifiersep> source ) { \n <ect>
\t2 try { \n \t3 method method = class <identifiersep> loader . get <identifiersep> class ( ) . get <identifiersep> declared <identifiersep> method ( <string_literal> , new class [ ] { java . net . url . class } ) ; \n \t3 method . set <identifiersep> accessible ( true ) ; \n \t3 method . invoke ( class <identifiersep> loader , new object [ ] { u } ) ; \n <ect>
\t3 bucket <identifiersep> name , \n \t3 object <identifiersep> name , \n \t3 image <identifiersep> configuration . get <identifiersep> instance ( ) . get <identifiersep> max <identifiersep> manifest <identifiersep> size <identifiersep> bytes ( ) ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t1 if ( ! is <identifiersep> successful ( ) ) { \n \t2 for ( final runnable cleanup <identifiersep> task : cleanup <identifiersep> tasks ) try { \n \t2 cleanup <identifiersep> task . run ( ) ; \n \t2 } catch ( final runtime <identifiersep> exception e ) { \n <ect>
\t4 . values ( ) ) { \n \t3 op . job <identifiersep> close ( job , success ) ; } } } \n \t1 } catch ( exception e ) { \n \t1 <comment> \n <ect>
\t4 sb . append ( <string_literal> ) ; } \n \t3 if ( column <identifiersep> name <identifiersep> map . contains <identifiersep> key ( s [ i ] ) ) { \n \t4 s [ i ] = column <identifiersep> name <identifiersep> map . get ( s [ i ] ) . to <identifiersep> string ( ) ; \n \t3 } else { \n <ect>
\t3 server <identifiersep> info server <identifiersep> info = get <identifiersep> server <identifiersep> info ( sock <identifiersep> js <identifiersep> url <identifiersep> info , get <identifiersep> http <identifiersep> request <identifiersep> headers ( headers ) ) ; \n \t3 create <identifiersep> request ( sock <identifiersep> js <identifiersep> url <identifiersep> info , headers , server <identifiersep> info ) . connect ( handler , connect <identifiersep> future ) ; } \n \t2 catch ( throwable exception ) { \n \t3 if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
<number_literal> . get ( 0 ) \n <number_literal> . get <identifiersep> value ( ) , \n <number_literal> <string_literal> ) \n <number_literal> . compare <identifiersep> to ( voldemort <identifiersep> state . rebalancing <identifiersep> master <identifiersep> server . to <identifiersep> string ( ) ) == 0 ) { \n <ect>
\t3 inet <identifiersep> address localhost <identifiersep> name ; \n \t3 try { \n \t4 localhost <identifiersep> name = inet <identifiersep> address . get <identifiersep> local <identifiersep> host ( ) ; \n \t3 } catch ( unknown <identifiersep> host <identifiersep> exception uhe ) { \n <ect>
\t2 try { \n \t3 entry entry = get <identifiersep> entry ( connection , config . get <identifiersep> user <identifiersep> config ( ) , user <identifiersep> id , config . get <identifiersep> custom <identifiersep> attributes ( ) ) ; \n \t3 timer . mark ( <string_literal> ) ; \n <ect>
\t8 } else { \n \t9 username = math . abs ( <identifier> . next <identifiersep> int ( ) ) + <string_literal> ; } \n \t8 ndc . push ( username ) ; \n \t8 string url = server + <string_literal> + username + <string_literal> + username + <string_literal> ; \n <ect>
\t1 remove <identifiersep> entities ( ) ; \n \t1 fire <identifiersep> removal <identifiersep> event = true ; \n \t1 clusters . get <identifiersep> cluster ( get <identifiersep> cluster <identifiersep> name ( ) ) . remove <identifiersep> service <identifiersep> component <identifiersep> host ( this ) ; \n \t1 } catch ( ambari <identifiersep> exception ex ) { \n <ect>
\t2 if ( keeper <identifiersep> exception . code . <identifier> . equals ( e . code ( ) ) ) { \n \t2 log . warn ( <string_literal> , e ) ; \n \t2 sleep <identifiersep> uninterruptibly ( <number_literal> , time <identifiersep> unit . milliseconds ) ; \n \t2 continue ; } \n <ect>
\t1 protected synchronized long get <identifiersep> store <identifiersep> message <identifiersep> size ( ) { \n \t2 try { \n \t3 return store . get <identifiersep> message <identifiersep> size ( client <identifiersep> id , subscriber <identifiersep> name ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public boolean prepare ( network network , nic <identifiersep> profile nic <identifiersep> profile , virtual <identifiersep> machine <identifiersep> profile vm , deploy <identifiersep> destination dest , reservation <identifiersep> context context ) \n \t2 throws concurrent <identifiersep> operation <identifiersep> exception , resource <identifiersep> unavailable <identifiersep> exception , insufficient <identifiersep> capacity <identifiersep> exception { \n \t2 s <identifiersep> logger . debug ( <string_literal> + network . get <identifiersep> name ( ) + <string_literal> + network . get <identifiersep> traffic <identifiersep> type ( ) ) ; \n \t2 if ( network . get <identifiersep> traffic <identifiersep> type ( ) == traffic <identifiersep> type . guest ) { \n <ect>
\t1 try { \n \t2 artifact . stop ( ) ; \n \t2 artifact . dispose ( ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t2 if ( time <identifiersep> left < = 0 ) { \n \t3 if ( time <identifiersep> left == 0 ) { \n \t4 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> + this ) ; \n \t3 } else { \n <ect>
\t2 final file file = properties <identifiersep> util . find <identifiersep> config <identifiersep> file ( <string_literal> ) ; \n \t2 if ( file == null ) { \n \t3 throw new configuration <identifiersep> exception ( \n \t5 <string_literal> ) ; } \n <ect>
\t2 set < element <identifiersep> descriptor > stat <identifiersep> file <identifiersep> set = null ; \n \t2 try { \n \t3 stat <identifiersep> file <identifiersep> set = find <identifiersep> meta <identifiersep> file ( location , stat <identifiersep> file <identifiersep> name , conf ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 return null ; } \n \t2 return key ; } \n \t1 private optional < json <identifiersep> web <identifiersep> key <identifiersep> set > build <identifiersep> json <identifiersep> web <identifiersep> key <identifiersep> set ( final oidc <identifiersep> registered <identifiersep> service service ) { \n \t2 try { \n <ect>
\t2 if ( result ) { \n \t3 success <identifiersep> response response = new success <identifiersep> response ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 set <identifiersep> response <identifiersep> object ( response ) ; \n \t2 } else { \n <ect>
\t3 class <identifiersep> loader . add <identifiersep> url ( new file ( plugin <identifiersep> folder + ' / ' + plugin . get <identifiersep> jar ( ) ) . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ) ; \n \t3 logger . info ( <string_literal> + plugin . get <identifiersep> class <identifiersep> name ( ) ) ; \n \t3 return class . for <identifiersep> name ( plugin . get <identifiersep> class <identifiersep> name ( ) , true , class <identifiersep> loader ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t7 if ( <identifier> == 0 && <identifier> == 0 && <identifier> > 0 && <identifier> == 1 ) { \n \t8 output . write ( <string_literal> ) ; } } \n \t6 output . write ( <string_literal> ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 in <identifiersep> flight <identifiersep> tx <identifiersep> locations . remove ( location ) ; \n \t6 add <identifiersep> message ( context , message , location ) ; } } \n \t4 public void after <identifiersep> rollback ( ) throws exception { \n \t5 if ( debug ) { \n <ect>
\t8 new codec [ ] { local <identifiersep> user <identifiersep> audio <identifiersep> level <identifiersep> effect } ) ; \n \t6 break ; } } } } \n \t2 catch ( unsupported <identifiersep> plug <identifiersep> in <identifiersep> exception ex ) \n \t2 { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t2 try { \n \t2 eucalyptus <identifiersep> activity <identifiersep> tasks . get <identifiersep> instance ( ) . revoke <identifiersep> system <identifiersep> security <identifiersep> group ( group <identifiersep> name , protocol , port , lb . use <identifiersep> system <identifiersep> account ( ) ) ; \n \t2 log . debug ( string . format ( <string_literal> , group <identifiersep> name , port ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 pattern <identifier> <identifiersep> pattern = pattern . compile ( config . get <identifiersep> unit <identifiersep> test <identifiersep> <identifier> <identifiersep> pattern ( ) ) ; \n \t3 for ( iterator < string > it = test <identifiersep> classes . iterator ( ) ; it . has <identifiersep> next ( ) ; ) { \n \t4 string cn = it . next ( ) ; \n \t4 if ( <identifier> <identifiersep> pattern . matcher ( cn ) . matches ( ) ) { \n <ect>
\t2 if ( m <identifiersep> read <identifiersep> queue . size ( ) > knx <identifiersep> connection . get <identifiersep> max <identifiersep> refresh <identifiersep> queue <identifiersep> entries ( ) ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , \n \t5 knx <identifiersep> connection . get <identifiersep> max <identifiersep> refresh <identifiersep> queue <identifiersep> entries ( ) ) ; \n \t3 return false ; } \n <ect>
\t1 try { \n \t2 final policy <identifiersep> variable policy <identifiersep> variable = ( policy <identifiersep> variable ) candidate . new <identifiersep> instance ( ) ; \n \t2 logger . debug ( <string_literal> + policy <identifiersep> variable . get <identifiersep> q <identifiersep> name ( ) + <string_literal> + candidate . get <identifiersep> canonical <identifiersep> name ( ) ) ; \n \t2 if ( ! policy <identifiersep> variables . register <identifiersep> policy <identifiersep> variable ( policy <identifiersep> variable ) ) { \n <ect>
\t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t2 return new ovs <identifiersep> set <identifiersep> tag <identifiersep> and <identifiersep> flow <identifiersep> answer ( cmd , false , <string_literal> ) ; } \n \t1 private ovs <identifiersep> fetch <identifiersep> interface <identifiersep> answer execute ( ovs <identifiersep> fetch <identifiersep> interface <identifiersep> command cmd ) { \n \t2 string label = cmd . get <identifiersep> label ( ) ; \n <ect>
class in <identifiersep> transactional <identifiersep> with <identifiersep> required { \n \t1 @ transactional ( type = tx <identifiersep> type . required ) \n \t1 void do <identifiersep> inner ( ) { \n \t1 inner <identifiersep> txn = ebean . current <identifiersep> transaction ( ) ; \n <ect>
\t3 if ( auth <identifiersep> <identifier> . size ( ) > 0 ) { \n \t4 <comment> \n \t4 auth <identifiersep> lang = auth <identifiersep> <identifier> . get ( 0 ) . get <identifiersep> value ( ) ; \n <ect>
\t2 } else { \n \t3 try { \n \t4 return ( ( <identifier> ) a ) . compare <identifiersep> to ( b ) ; \n \t3 } catch ( throwable e ) { \n <ect>
public void set <identifiersep> user ( er . restexample . server . server <identifiersep> user value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value , <identifier> <identifiersep> server <identifiersep> post . user <identifiersep> key ) ; } \n public void set <identifiersep> user <identifiersep> relationship ( er . restexample . server . server <identifiersep> user value ) { \n <ect>
\t2 if ( conversation != null ) { \n \t3 conversation . set <identifiersep> session <identifiersep> id ( session . session <identifiersep> id ( ) ) ; } } \n \t1 public void send <identifiersep> message ( string screen <identifiersep> name , string buddy <identifiersep> name , string message , boolean block ) throws message <identifiersep> exception { \n \t2 if ( <identifier> <identifiersep> <identifier> <identifiersep> screen <identifiersep> name != null ) { \n <ect>
\t5 cfg . set <identifiersep> <identifier> ( new is <identifiersep> authenticated <identifiersep> <identifier> ( ) ) ; \n \t4 } else { \n \t5 final resource file = resource <identifiersep> utils . prepare <identifiersep> classpath <identifiersep> resource <identifiersep> if <identifiersep> needed ( admin <identifiersep> props . get <identifiersep> users ( ) ) ; \n \t5 if ( file != null && file . exists ( ) ) { \n <ect>
\t6 logger . warn ( <string_literal> + temp <identifiersep> meta <identifiersep> file , e ) ; } \n \t4 } else { \n \t5 logger . info ( <string_literal> + temp <identifiersep> meta <identifiersep> file <identifiersep> string + <string_literal> ) ; } \n \t3 } else { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t3 logger . debug ( <string_literal> , start <identifiersep> parameter . get <identifiersep> gradle <identifiersep> user <identifiersep> home <identifiersep> dir ( ) ) ; \n \t3 logger . debug ( <string_literal> , start <identifiersep> parameter . get <identifiersep> current <identifiersep> dir ( ) ) ; \n <ect>
\t3 console <identifiersep> proxy <identifiersep> management <identifiersep> state state = console <identifiersep> proxy <identifiersep> management <identifiersep> state . value <identifiersep> of ( value ) ; \n \t3 if ( state == null ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + value ) ; } \n \t3 return state ; } \n <ect>
\t1 @ inject \n \t1 private resource <identifiersep> tag <identifiersep> dao <identifier> <identifiersep> resource <identifiersep> tag <identifiersep> dao = null ; \n \t1 @ override public long make <identifiersep> copy <identifiersep> of <identifiersep> network ( network network , network <identifiersep> offering network <identifiersep> offering , long vpc <identifiersep> id ) { \n <ect>
\t2 return ( template ) session <identifiersep> factory . get <identifiersep> current <identifiersep> session ( ) . get ( template . class , id ) ; } \n \t1 @ override \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 public list < template > get <identifiersep> templates <identifiersep> by <identifiersep> name ( string name ) { \n <ect>
\t2 session session ; \n \t2 try { \n \t3 session = manager . find <identifiersep> session ( http <identifiersep> session <identifiersep> id ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t4 inet <identifiersep> address [ ] addresses = inet <identifiersep> address . get <identifiersep> all <identifiersep> by <identifiersep> name ( replica ) ; \n \t4 collections . add <identifiersep> all ( replica <identifiersep> addresses , addresses ) ; } \n \t3 catch ( unknown <identifiersep> host <identifiersep> exception e ) \n \t3 { \n <ect>
\t5 master . get <identifiersep> <identifier> <identifiersep> time ( ) ) ; \n \t4 <identifier> ++ ; \n \t4 total <identifiersep> <identifier> ++ ; \n \t4 } else { \n <ect>
\t4 while ( ( pool = find <identifiersep> storage <identifiersep> pool ( dsk <identifiersep> ch , dc , pod . first ( ) , null , null , null , pools <identifiersep> to <identifiersep> avoid ) ) != null ) { \n \t5 break ; } \n \t4 if ( pool != null ) { \n <ect>
\t2 logger . debug ( <string_literal> , this . is <identifiersep> id <identifiersep> property ) ; \n \t2 return this . is <identifiersep> id <identifiersep> property ; } \n \t1 @ override \n \t1 public boolean is <identifiersep> version <identifiersep> property ( ) { \n <ect>
\t3 <comment> \n \t2 status <identifiersep> printer . print <identifiersep> in <identifiersep> case <identifiersep> of <identifiersep> errors <identifiersep> or <identifiersep> warnings ( lc ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 if ( i == 1 ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t3 <identifier> <identifiersep> policy <identifiersep> model . remove <identifiersep> <identifier> ( this ) ; } \n \t2 try { \n \t3 api . delete ( virtual <identifiersep> network . class , <identifier> <identifiersep> uuid ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 validation <identifiersep> xml <identifiersep> foo foo = new validation <identifiersep> xml <identifiersep> foo ( <string_literal> ) ; \n \t3 response response = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) . accept ( media <identifiersep> type ) . post ( entity . entity ( foo , <string_literal> ) ) ; \n \t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> internal <identifiersep> server <identifiersep> error , response . get <identifiersep> status ( ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t1 } catch ( checksum <identifiersep> exception e ) { <comment> \n \t2 handle <identifiersep> checksum <identifiersep> exception ( e ) ; } } \n \t1 private void handle <identifiersep> checksum <identifiersep> exception ( checksum <identifiersep> exception e ) throws io <identifiersep> exception { \n \t1 if ( conf . get <identifiersep> boolean ( <string_literal> , false ) ) { \n <ect>
\t2 path working <identifiersep> dir = fs . get <identifiersep> working <identifiersep> directory ( ) ; \n \t2 for ( class < ? > clazz : classes ) { \n \t3 string jar <identifiersep> name = find <identifiersep> containing <identifiersep> jar ( clazz ) ; \n \t3 if ( jar <identifiersep> name == null ) { \n <ect>
\t2 return true ; \n \t2 else \n \t2 return false ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t3 public void on <identifiersep> message ( message msg ) { \n \t4 try { \n \t5 text <identifiersep> message text <identifiersep> msg = ( text <identifiersep> message ) msg ; \n \t5 received <identifiersep> msgs ++ ; \n <ect>
\t4 <comment> \n \t4 response = transport . send <identifiersep> command <identifiersep> expect <identifiersep> response ( cfg . mode . get <identifiersep> item <identifiersep> mode <identifiersep> command <identifiersep> query <identifiersep> string ( ) ) ; \n \t4 break ; \n \t3 case <identifier> <identifiersep> hours : \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> blank ( ticket <identifiersep> id ) ) { \n \t3 return null ; } \n \t2 final ticket <identifiersep> definition metadata = this . ticket <identifiersep> catalog . find ( ticket <identifiersep> id <identifiersep> to <identifiersep> get ) ; \n \t2 if ( metadata == null ) { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 add <identifiersep> load <identifiersep> listener ( frame <identifiersep> element , this . record <identifiersep> page <identifiersep> load ) ; \n \t2 frame <identifiersep> element [ marker ] = true ; \n \t2 frame <identifiersep> element [ <string_literal> + this . unique <identifiersep> id ] = marker ; \n <ect>
\t3 current <identifiersep> phase <identifiersep> enabled ( false ) ; \n \t3 set <identifiersep> <identifier> <identifiersep> this <identifiersep> analysis ( false ) ; } } \n \t1 public void handle <identifiersep> cfg <identifiersep> event ( directed <identifiersep> graph < ? > g ) { \n \t2 if ( current <identifiersep> phase <identifiersep> enabled ( ) ) { \n <ect>
\t5 else \n \t6 cardinality = cardinality . merge ( metadata . cardinality <identifiersep> estimator ) ; } \n \t4 catch ( io <identifiersep> exception e ) \n \t4 { \n <ect>
\t2 log . warn ( <string_literal> ) ; \n \t2 return ; } \n \t2 upload <identifiersep> file ( new file ( file <identifiersep> name <identifiersep> to <identifiersep> upload ) , log <identifiersep> type ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 if ( null != m <identifiersep> dir ) { \n \t2 file dir = new file ( m <identifiersep> dir ) ; \n \t2 if ( ! dir . is <identifiersep> directory ( ) ) \n \t2 if ( ! dir . mkdir ( ) ) \n <ect>
<comment> \n \t1 public requested <identifiersep> security <identifiersep> token get <identifiersep> request <identifiersep> security <identifiersep> token <identifiersep> from <identifiersep> result ( final string <identifier> ) { \n <ect>
\t3 log . info ( <string_literal> ) ; } \n \t2 @ override \n \t2 public void on <identifiersep> mode ( string string , irc <identifiersep> user irc <identifiersep> user , irc <identifiersep> mode <identifiersep> parser irc <identifiersep> mode <identifiersep> parser ) { \n \t3 super . on <identifiersep> mode ( string , irc <identifiersep> user , irc <identifiersep> mode <identifiersep> parser ) ; \n <ect>
\t2 form . param ( <string_literal> , <identifier> <identifiersep> <identifier> <identifiersep> <identifier> ) ; \n \t2 entity < form > entity = entity . entity ( form , test <identifiersep> media <identifiersep> <identifier> ) ; \n \t2 response response = target . request ( ) . post ( entity ) ; \n \t2 string result = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t3 if ( null != req . get <identifiersep> parameter ( http <identifiersep> <identifier> <identifiersep> rebuild ) ) { \n \t4 parse <identifiersep> and <identifiersep> add <identifiersep> <identifier> ( cms ) ; } } \n \t2 final string q = req . get <identifiersep> parameter ( http <identifiersep> parameter <identifiersep> words ) ; \n \t2 if ( null == q ) { \n <ect>
\t3 options . fs . rename ( tmp <identifiersep> path , this . index <identifiersep> file <identifiersep> path ) ; \n \t3 last <identifiersep> seen <identifiersep> txn = txn <identifiersep> record ; \n \t3 log . debug ( <string_literal> , this . last <identifiersep> seen <identifiersep> txn ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t8 <string_literal> , \n \t8 item <identifiersep> name ) ; } } } \n \t3 return sent ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 public listenable <identifiersep> future < block > get <identifiersep> block ( <identifier> block <identifiersep> hash ) { \n \t2 <comment> \n <ect>
\t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 log . info ( <string_literal> + broker . get <identifiersep> broker <identifiersep> name ( ) + <string_literal> + region <identifiersep> broker . get <identifiersep> peer <identifiersep> broker <identifiersep> infos ( ) . length ) ; \n \t4 return max == region <identifiersep> broker . get <identifiersep> peer <identifiersep> broker <identifiersep> infos ( ) . length ; } \n \t2 } ) ; \n <ect>
\t6 result = <string_literal> ; } } \n \t5 return result ; \n \t3 } catch ( exception e ) { \n \t4 retry ++ ; \n <ect>
\t2 storage <identifiersep> manager storage <identifiersep> manager = context . get ( storage <identifiersep> manager . class ) ; \n \t2 try { \n \t3 storage <identifiersep> manager . load <identifiersep> global <identifiersep> store ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 if ( snap <identifiersep> upload <identifiersep> info != null ) { \n \t1 try { \n \t2 snap <identifiersep> upload <identifiersep> info . update <identifiersep> state <identifiersep> aborted ( ) ; \n \t1 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n <ect>
\t3 pw = new print <identifiersep> writer ( fos ) ; \n \t3 for ( active <identifiersep> mq <identifiersep> destination destination : destinations ) { \n \t4 pw . println ( destination ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3 module ui <identifiersep> module = get <identifiersep> ui <identifiersep> module ( language ) ; \n \t3 module merged <identifiersep> module = <identifier> . <identifier> ( runtime <identifiersep> module , shared <identifiersep> state <identifiersep> module , ui <identifiersep> module ) ; \n \t3 return <identifier> . create <identifiersep> injector ( merged <identifiersep> module ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 int <identifier> <identifiersep> col <identifiersep> id = includes . get <identifiersep> reader <identifiersep> logical <identifiersep> column <identifiersep> ids ( ) . get ( i ) ; \n \t1 <comment> \n \t2 int file <identifiersep> col <identifiersep> id = orc <identifiersep> input <identifiersep> format . get <identifiersep> root <identifiersep> column ( ! is <identifiersep> acid <identifiersep> scan ) + <identifier> <identifiersep> col <identifiersep> id + 1 ; \n \t1 if ( ! <identifier> . is <identifiersep> <identifier> <identifiersep> safe <identifiersep> conversion ( file <identifiersep> col <identifiersep> id ) ) { \n <ect>
\t2 strategy <identifiersep> impl = new connect <identifiersep> <identifier> <identifiersep> to <identifiersep> server <identifiersep> group <identifiersep> impl ( groups , topology <identifiersep> service , \n \t4 <identifier> , db <identifiersep> name ) ; \n \t2 if ( groups . is <identifiersep> empty ( ) ) \n \t2 { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + mshost . get <identifiersep> service <identifiersep> ip ( ) + <string_literal> ) ; } } } } } \n \t1 @ override \n \t1 public boolean configure ( string name , map < string , object > params ) throws configuration <identifiersep> exception { \n <ect>
\t6 return <string_literal> <string_literal> \\ <string_literal> <string_literal> \\ <string_literal> ; \n \t5 } else if ( content <identifiersep> type . starts <identifiersep> with ( <string_literal> ) ) { \n \t6 return <string_literal> <string_literal> \\ <string_literal> <string_literal> \\ <string_literal> ; \n \t5 } else { \n <ect>
\t3 result = <identifier> . <identifier> ( <identifier> ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 logger . error ( string . format ( <string_literal> , <identifier> , <identifier> , e . get <identifiersep> message ( ) ) ) ; \n \t2 } catch ( class <identifiersep> cast <identifiersep> exception e ) { \n <ect>
\t3 map < string , map < integer , transaction <identifiersep> state > > stateful <identifiersep> <identifier> = new <identifiersep> last <identifiersep> success <identifiersep> state <identifiersep> tracker . get <identifiersep> stateful <identifiersep> <identifier> ( ) ; \n \t3 for ( map < integer , transaction <identifiersep> state > component <identifiersep> states : stateful <identifiersep> <identifier> . values ( ) ) { \n \t4 rebuild <identifiersep> component <identifiersep> states ( component <identifiersep> states , old <identifiersep> last <identifiersep> success <identifiersep> state <identifiersep> tracker ) ; } \n \t3 set <identifiersep> last <identifiersep> successful <identifiersep> batch ( new <identifiersep> last <identifiersep> success <identifiersep> state <identifiersep> tracker ) ; \n <ect>
\t7 failed <identifiersep> <identifier> . remove ( url ) ; \n \t6 } catch ( throwable t ) { <comment> \n \t7 logger . warn ( <string_literal> + failed + <string_literal> + t . get <identifiersep> message ( ) , t ) ; } } \n \t4 } catch ( throwable t ) { <comment> \n <ect>
\t2 peer <identifiersep> node pn = ref . get ( ) ; \n \t2 if ( pn == null ) return ; \n \t2 if ( pn . cached <identifiersep> removed ( ) ) { \n \t3 if ( log <identifiersep> minor && pn . node . peers . have <identifiersep> peer ( pn ) ) { \n <ect>
\t3 grpc <identifiersep> server . shutdown ( ) ; \n \t3 log . info ( <string_literal> ) ; } } \n \t1 @ test \n \t1 public void test <identifiersep> ping <identifiersep> sync <identifiersep> sync <identifiersep> method <identifiersep> invocation ( ) throws exception { \n <ect>
\t2 final string hdfs <identifiersep> site <identifiersep> path = flink <identifiersep> configuration . get <identifiersep> string ( config <identifiersep> constants . hdfs <identifiersep> site <identifiersep> config , null ) ; \n \t2 if ( hdfs <identifiersep> site <identifiersep> path != null ) { \n \t3 ret <identifiersep> conf . add <identifiersep> resource ( new org . apache . hadoop . fs . path ( hdfs <identifiersep> site <identifiersep> path ) ) ; \n \t2 } else { \n <ect>
\t6 logger . info ( <string_literal> + head . get <identifiersep> name ( ) ) ; \n \t5 } catch ( final exception e ) { \n \t6 logger . warn ( <string_literal> , e ) ; } \n \t4 } catch ( final exception e ) { \n <ect>
\t4 string name = rs . get <identifiersep> string ( <string_literal> ) . to <identifiersep> upper <identifiersep> case ( ) ; \n \t4 int size = rs . get <identifiersep> int ( <string_literal> ) ; \n \t4 data <identifiersep> type result = db . vendor ( ) . get <identifiersep> data <identifiersep> type ( type , name , size ) ; \n \t4 if ( result == null ) { \n <ect>
\t2 int <identifier> = cmd . get <identifiersep> <identifier> ( ) ; \n \t2 if ( <identifier> == constants . message <identifiersep> feature <identifiersep> abort ) { \n \t3 int original <identifiersep> <identifier> = cmd . get <identifiersep> params ( ) [ 0 ] & 0x <identifiersep> ff ; \n \t3 if ( original <identifiersep> <identifier> == constants . message <identifiersep> report <identifiersep> <identifier> <identifiersep> <identifier> ) { \n <ect>
\t2 } ) ; \n \t2 result <identifiersep> endpoint . expected <identifiersep> message <identifiersep> count ( 0 ) ; \n \t2 cache <identifiersep> exception <identifiersep> endpoint . expected <identifiersep> message <identifiersep> count ( 0 ) ; \n \t2 context . start ( ) ; \n <ect>
\t2 string raw <identifiersep> col <identifiersep> name = raw <identifiersep> col <identifiersep> names [ i ] ; \n \t2 int sql <identifiersep> type = col <identifiersep> types . get ( col <identifiersep> name ) ; \n \t2 string java <identifiersep> type = to <identifiersep> java <identifiersep> type ( col <identifiersep> name , sql <identifiersep> type ) ; \n \t2 if ( null == java <identifiersep> type ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void binding <identifiersep> changed ( binding <identifiersep> provider provider , string item <identifiersep> name ) { \n <ect>
\t1 array <identifiersep> list < string > config <identifiersep> types = new array <identifiersep> list < > ( ) ; \n \t1 for ( config config : configs ) { \n \t2 config <identifiersep> types . add ( config . get <identifiersep> type ( ) ) ; } \n \t1 state <identifiersep> update <identifiersep> event <identifiersep> publisher . publish ( new configs <identifiersep> update <identifiersep> event ( this , applied <identifiersep> configs ) ) ; \n <ect>
\t5 } else if ( metric instanceof <identifier> <identifiersep> histogram ) { \n \t6 map data = metric <identifiersep> utils . to <identifiersep> thrift <identifiersep> <identifier> <identifiersep> snapshots ( meta <identifiersep> type , snapshots ) ; \n \t6 put <identifiersep> if <identifiersep> not <identifiersep> empty ( metric <identifiersep> info . get <identifiersep> metrics ( ) , name , data ) ; } \n \t4 } catch ( exception ex ) { \n <ect>
\t3 result . set <identifiersep> success <identifiersep> is <identifiersep> set ( true ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t1 } catch ( exception e ) { \n \t2 log . error ( <string_literal> , e ) ; \n \t2 throw new service <identifiersep> exception ( e ) ; } } \n \t1 if ( ! active <identifiersep> passive <identifiersep> ha ) { \n <ect>
\t3 . list ( ) ; \n \t3 <comment> \n \t2 } ) ; \n \t2 do <identifiersep> in <identifiersep> jpa ( this : : entity <identifiersep> manager <identifiersep> factory , entity <identifiersep> manager - > { \n <ect>
<comment> \n protected map < string , role <identifiersep> stats > process <identifiersep> in <identifiersep> progress <identifiersep> stage ( stage s , list < execution <identifiersep> command > commands <identifiersep> to <identifiersep> schedule , \n <number_literal> multimap < long , agent <identifiersep> command > commands <identifiersep> to <identifiersep> enqueue ) throws ambari <identifiersep> exception { \n <ect>
\t3 try { \n \t4 main . initialize <identifiersep> and <identifiersep> run ( args ) ; \n \t3 } catch ( exception e ) { \n \t4 <comment> \n <ect>
\t4 g . clear <identifiersep> <identifier> ( 0 , 0 , destination <identifiersep> image . get <identifiersep> width ( ) , destination <identifiersep> image . get <identifiersep> height ( ) ) ; \n \t4 destination <identifiersep> image = op . filter ( source , destination <identifiersep> image ) ; \n \t4 return destination <identifiersep> image ; } \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t4 if ( get <identifiersep> cached <identifiersep> value ( key <identifiersep> proxy <identifiersep> remember , <string_literal> ) . equals ( <string_literal> ) ) { \n \t5 string password = get <identifiersep> cached <identifiersep> value ( key <identifiersep> proxy <identifiersep> <identifier> , <string_literal> ) ; \n \t5 connection . set <identifiersep> proxy <identifiersep> password ( password ) ; } \n \t3 } else { \n <ect>
\t2 add <identifiersep> <identifier> <identifiersep> values ( <string_literal> , new object [ ] \n \t3 { <string_literal> } ) ; } \n \t1 private void test <identifiersep> valid <identifiersep> options <identifiersep> work ( string options , string msg ) { \n \t2 string uri = prefix + bind <identifiersep> address + postfix + options ; \n <ect>
\t4 + <string_literal> , \n \t4 new hash <identifiersep> map < > ( 0 ) , new hash <identifiersep> map < > ( 0 ) ) ; } \n \t2 final string principal <identifiersep> id = principal != null ? principal . get <identifiersep> id ( ) : principals . get ( 0 ) . get <identifiersep> id ( ) ; \n \t2 final principal final <identifiersep> principal = this . principal <identifiersep> factory . create <identifiersep> principal ( principal <identifiersep> id , attributes ) ; \n <ect>
public move ( string mapped <identifiersep> uri ) { \n \t1 super ( mapped <identifiersep> uri ) ; } \n @ override \n public response safe <identifiersep> handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + id ) ; \n \t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> + id ) ; } \n \t2 <comment> \n \t2 if ( type != rule . get <identifiersep> rule <identifiersep> type ( ) ) { \n <ect>
\t6 size = this . read <identifiersep> buffer . remaining ( ) ; } } \n \t4 this . dispatch <identifiersep> received <identifiersep> message ( message ) ; \n \t3 } catch ( exception e ) { \n \t4 this . on <identifiersep> exception ( e ) ; \n <ect>
\t6 log . info ( <string_literal> + rsrc6 ) ; \n \t6 log . info ( <string_literal> + rsrc7 ) ; \n \t6 log . info ( <string_literal> + rsrc8 ) ; \n \t6 log . info ( <string_literal> + <identifier> ) ; \n <ect>
\t3 assert ( console <identifiersep> proxy != null ) ; \n \t3 host <identifiersep> vo console <identifiersep> proxy <identifiersep> host = find <identifiersep> console <identifiersep> proxy <identifiersep> host <identifiersep> by <identifiersep> name ( console <identifiersep> proxy . get <identifiersep> host <identifiersep> name ( ) ) ; \n \t3 answer answer = <identifier> <identifiersep> agent <identifiersep> mgr . send ( console <identifiersep> proxy <identifiersep> host . get <identifiersep> id ( ) , cmd ) ; \n \t3 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t6 notifier . event <identifiersep> ends ( event ) ; \n \t5 } else { \n \t6 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + event <identifiersep> trigger ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t1 private static final transient logger log = logger <identifiersep> factory . get <identifiersep> logger ( new <identifiersep> comment <identifiersep> consumer . class ) ; \n \t1 private list < long > comment <identifiersep> ids = new array <identifiersep> list < long > ( ) ; \n \t1 public new <identifiersep> comment <identifiersep> consumer ( jira <identifiersep> endpoint endpoint , processor processor ) { \n \t2 super ( endpoint , processor ) ; \n <ect>
\t4 map <identifiersep> entry original = messages . get ( id ) ; \n \t4 if ( original != null ) { \n \t5 super . message <identifiersep> received ( original . msg ) ; \n \t5 messages . remove ( id ) ; \n <ect>
\t3 if ( request != null ) { \n \t4 string remote <identifiersep> address = request . get <identifiersep> remote <identifiersep> host ( ) ; \n \t4 if ( remote <identifiersep> address != null ) { \n \t5 if ( ! ip <identifiersep> lists . contains ( remote <identifiersep> address ) ) { \n <ect>
\t1 if ( keep <identifiersep> js <identifiersep> <identifier> || provider . get <identifiersep> factory <identifiersep> name ( ) == null || ! bean <identifiersep> def <identifiersep> factory <identifiersep> names . contains ( provider . get <identifiersep> factory <identifiersep> name ( ) ) ) { \n \t2 logger . debug ( <string_literal> , provider . get <identifiersep> name ( ) , provider . get <identifiersep> factory <identifiersep> name ( ) ) ; \n \t2 bean <identifiersep> defs . add ( new js <identifiersep> type <identifiersep> bean <identifiersep> def <identifiersep> implementation ( provider , name ) ) ; } \n \t1 else { \n <ect>
\t2 pool <identifiersep> initializer . get ( ) . shutdown <identifiersep> now ( ) ; \n \t2 <comment> \n \t2 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n \t1 } finally { \n <ect>
\t3 string uuid \t2 = web <identifiersep> socket <identifiersep> data . get <identifiersep> id ( ) ; \n \t3 byte [ ] data \t2 = new byte [ 0 ] ; \n \t3 if ( raw <identifiersep> data != null ) { \n \t4 if ( raw <identifiersep> data instanceof string ) { \n <ect>
\t1 public synchronized void print <identifiersep> usage <identifiersep> information ( final logger logger , final priority priority ) { \n \t2 logger . debug ( <string_literal> + <identifier> <identifiersep> threads <identifiersep> <identifier> ( ) ) ; \n \t2 logger . debug ( <string_literal> + new auto <identifiersep> formatting <identifiersep> time ( time <identifiersep> unit . milliseconds . to <identifiersep> nanos ( get <identifiersep> total <identifiersep> time ( ) ) ) ) ; \n \t2 for ( final state state : state . values ( ) ) { \n <ect>
\t5 <comment> \n \t3 member <identifiersep> set = get <identifiersep> current <identifiersep> members ( ) ; \n \t3 log . info ( <string_literal> , path , member <identifiersep> set ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 return new migrate <identifiersep> answer ( cmd , false , msg , null ) ; \n \t2 } finally { \n \t3 synchronized ( <identifier> <identifiersep> cluster . <identifier> ( ) ) { \n \t4 s <identifiersep> vms . put ( <identifier> <identifiersep> cluster , <identifier> <identifiersep> name , vm <identifiersep> name , state ) ; } \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> + ip + <string_literal> + vm <identifiersep> id + <string_literal> ) ; \n \t5 success = false ; } \n \t3 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n \t4 success = false ; \n <ect>
\t3 { \n \t4 column <identifiersep> family <identifiersep> store cfs = column <identifiersep> family <identifiersep> stores . get ( upd . metadata ( ) . id ) ; \n \t4 if ( cfs == null ) \n \t4 { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 install <identifiersep> bootstrap ( bootstrap <identifiersep> config <identifiersep> file , rep <identifiersep> home ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 string file <identifiersep> location = get <identifiersep> file <identifiersep> location ( ) ; \n \t1 if ( file <identifiersep> location == null ) { \n \t1 log . debug ( <string_literal> ) ; \n \t1 return props ; } \n <ect>
\t2 <identifier> <identifiersep> from <identifiersep> hash = from <identifiersep> hash ; \n \t2 <identifier> <identifiersep> facade = facade ; } \n \t1 public void run <identifiersep> job ( ) { \n \t2 <comment> \n <ect>
\t3 return method . invoke ( object , ( object [ ] ) null ) ; } \n \t1 @ override \n \t1 public void set <identifiersep> method <identifiersep> value ( object object , method method , object value ) throws illegal <identifiersep> argument <identifiersep> exception , illegal <identifiersep> access <identifiersep> exception , \n \t2 invocation <identifiersep> target <identifiersep> exception { \n <ect>
\t2 <comment> \n \t2 name = versioning <identifiersep> profile . add <identifiersep> version ( <identifier> <identifiersep> name , 0 ) ; \n \t2 if ( ! name . equals ( <identifier> ) ) \n \t3 fail ( <string_literal> ) ; \n <ect>
\t1 public void test <identifiersep> receive <identifiersep> jaxb <identifiersep> object <identifiersep> as <identifiersep> string ( ) throws exception { \n \t2 resteasy <identifiersep> web <identifiersep> target target = client . target ( generate <identifiersep> url ( <string_literal> ) ) ; \n \t2 char <identifiersep> set <identifiersep> customer <identifier> = new char <identifiersep> set <identifiersep> customer ( ) ; \n \t2 string name = <string_literal> ; \n <ect>
\t4 was <identifiersep> existing = true ; \n \t3 } else { \n \t4 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . update <identifiersep> frequency ( <string_literal> ) ; \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n <ect>
\t7 if ( ! temp . contains ( c ) ) { temp . add ( c ) ; count ++ ; } } } } } } \n \t2 return closure ; } \n \t1 private void compute <identifiersep> uri <identifiersep> closure <identifiersep> recursive ( string uri , set < string > closure , \n \t3 list < string > closed <identifiersep> list , hash <identifiersep> map < string , set < string > > dependent <identifiersep> uris <identifiersep> map ) { \n <ect>
\t2 this . core = core ; } \n \t1 @ override \n \t1 public void run ( ) { \n \t2 command <identifiersep> task <identifiersep> stop stop = ( command <identifiersep> task <identifiersep> stop ) core ; \n <ect>
\t2 result = preferred <identifiersep> local <identifiersep> address ; \n \t1 } else if ( host != null ) { \n \t2 result = iterables . try <identifiersep> find ( host . get <identifiersep> host <identifiersep> addresses ( ) , map <identifiersep> to <identifiersep> cidr ) . or ( result ) ; } \n \t1 } catch ( final exception ex ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( <identifier> <identifiersep> <identifier> ) ; \n \t2 <identifier> <identifiersep> <identifier> = <identifier> <identifiersep> when <identifiersep> full <identifiersep> consumer . receive ( <number_literal> ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <identifier> <identifiersep> <identifier> ) ; \n \t2 connection . close ( ) ; \n <ect>
\t4 if ( oldest <identifiersep> context != null ) { \n \t5 try { \n \t6 oldest <identifiersep> context . close ( ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t4 final otp <identifiersep> erlang <identifiersep> binary bin = <identifier> <identifiersep> util . get <identifiersep> <identifier> <identifiersep> binary ( module , path ) ; \n \t4 if ( bin != null ) { \n \t5 ok = <identifier> <identifiersep> loader . load <identifiersep> <identifier> ( b . get <identifiersep> otp <identifiersep> rpc ( ) , module , bin ) ; } \n \t4 if ( ! ok ) { \n <ect>
\t2 cxf <identifiersep> endpoint endpoint = ( cxf <identifiersep> endpoint ) this . get <identifiersep> endpoint ( ) ; \n \t2 binding <identifiersep> operation <identifiersep> info answer = null ; \n \t2 string <identifier> = ex . get <identifiersep> in ( ) . get <identifiersep> header ( cxf <identifiersep> constants . operation <identifiersep> name , string . class ) ; \n \t2 if ( <identifier> == null ) { \n <ect>
\t6 period . of <identifiersep> days ( cfg . get <identifiersep> password <identifiersep> warning <identifiersep> number <identifiersep> of <identifiersep> days ( ) ) , cfg . get <identifiersep> login <identifiersep> failures ( ) ) ) ; \n \t4 break ; \n \t3 case e <identifiersep> directory : \n \t4 arrays . stream ( e <identifiersep> directory <identifiersep> authentication <identifiersep> response <identifiersep> handler . attributes ) . for <identifiersep> each ( a - > { \n <ect>
\t2 log . info ( <string_literal> , host ) ; \n \t2 try { \n \t3 listener . test <identifiersep> ended ( host ) ; \n \t2 } catch ( remote <identifiersep> exception ex ) { \n <ect>
\t3 return false ; } \n \t2 http <identifiersep> method request <identifiersep> method = get <identifiersep> method <identifiersep> to <identifiersep> use ( request , pre <identifiersep> flight <identifiersep> request ) ; \n \t2 list < http <identifiersep> method > allow <identifiersep> methods = check <identifiersep> methods ( config , request <identifiersep> method ) ; \n \t2 if ( allow <identifiersep> methods == null ) { \n <ect>
\t3 return ; } \n \t2 if ( event instanceof cas <identifiersep> registered <identifiersep> service <identifiersep> saved <identifiersep> event || event instanceof cas <identifiersep> registered <identifiersep> service <identifiersep> loaded <identifiersep> event ) { \n \t3 handle <identifiersep> cas <identifiersep> registered <identifiersep> service <identifiersep> update <identifiersep> events ( service , event ) ; \n \t3 return ; } \n <ect>
\t1 if ( <identifier> <identifiersep> <identifier> ( parent <identifiersep> stats ) ) { \n \t2 <comment> \n \t2 hash <identifiersep> agg = check <identifiersep> map <identifiersep> side <identifiersep> aggregation ( <identifier> , col <identifiersep> stats , conf ) ; \n <ect>
\t5 { \n \t6 <identifier> . add ( sstable ) ; } } \n \t4 if ( <identifier> . is <identifiersep> empty ( ) ) \n \t4 { \n <ect>
\t2 } ; } \n \t1 public static final class my <identifiersep> bean { \n \t2 private volatile int cnt ; \n \t2 public void invoke ( final list < string > str <identifiersep> list ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
<comment> \n private input <identifiersep> stream locate <identifiersep> stream <identifiersep> from <identifiersep> jar ( final string uri , final file jar <identifiersep> path ) \n \t1 throws io <identifiersep> exception { \n <ect>
\t3 system . out . println ( <string_literal> + value ) ; \n \t2 } catch ( memcached <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t2 } catch ( timeout <identifiersep> exception e ) { \n <ect>
\t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> internal <identifiersep> id ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> name ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> store <identifiersep> number ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> size ( ) ) ; \n <ect>
\t3 method method = <identifier> <identifiersep> data <identifiersep> source . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> ) ; \n \t3 object obj = method . invoke ( <identifier> <identifiersep> data <identifiersep> source ) ; \n \t3 return ( map < string , object > ) obj ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 else if ( false \n \t6 || value . equals ( <string_literal> ) \n \t4 ) { \n \t5 if ( check <identifiersep> init <identifiersep> throw <identifiersep> analysis != 0 && check <identifiersep> init <identifiersep> throw <identifiersep> analysis != check <identifiersep> init <identifiersep> throw <identifiersep> analysis <identifiersep> <identifier> ) { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . initializing ) . get ( 0 ) . current <identifiersep> node <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . started ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n <ect>
\t1 env . set <identifiersep> params ( status <identifiersep> params ) \n \t1 # <identifier> check all existing <identifier> pid files \n \t1 check <identifiersep> process <identifiersep> status ( status <identifiersep> params . hive <identifiersep> pid ) \n def pre <identifiersep> upgrade <identifiersep> restart ( self , env , upgrade <identifiersep> type = none ) : \n <ect>
\t4 } catch ( exception e ) { \n \t5 if ( e instanceof connection <identifiersep> exception ) { \n \t6 connection <identifiersep> exception ce = ( connection <identifiersep> exception ) e ; \n \t6 if ( ce . is <identifiersep> setup <identifiersep> error ( ) ) { \n <ect>
\t2 if ( logout <identifiersep> requests != null ) { \n \t3 logout <identifiersep> requests . stream ( ) \n \t4 . filter ( r - > r . get <identifiersep> status ( ) == logout <identifiersep> request <identifiersep> status . not <identifiersep> attempted ) \n \t4 . for <identifiersep> each ( r - > { \n <ect>
\t1 @ override \n \t1 public aggregator copy ( expr <identifiersep> list expr ) \n \t1 { \n \t2 if ( expr != null ) \n <ect>
\t3 this . user <identifiersep> transaction <identifiersep> <identifier> <identifiersep> from <identifiersep> jndi = true ; \n \t3 return <identifier> ; } \n \t2 catch ( naming <identifiersep> exception ex ) { \n <ect>
\t2 info . put ( key , value ) ; \n \t2 add <identifiersep> job <identifiersep> info ( id , info ) ; } \n \t1 private abstract <identifiersep> executable parse <identifiersep> to ( executable <identifiersep> po executable <identifiersep> po ) { \n \t2 if ( executable <identifiersep> po == null ) { \n <ect>
\t3 latch . count <identifiersep> down ( ) ; } \n \t2 @ override \n \t2 public void on <identifiersep> text <identifiersep> frame ( string message , boolean final <identifiersep> fragment , int <identifier> ) { \n \t3 received . add ( message ) ; \n <ect>
\t1 return ; } \n \t1 service <identifiersep> info parent = parent <identifiersep> module . get <identifiersep> module <identifiersep> info ( ) ; \n \t1 if ( service <identifiersep> info . get <identifiersep> comment ( ) == null ) { \n \t1 service <identifiersep> info . set <identifiersep> comment ( parent . get <identifiersep> comment ( ) ) ; } \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 throw e ; \n \t2 } catch ( throwable e ) { \n \t3 <comment> \n <ect>
\t5 solr = solr <identifiersep> server ; \n \t4 } catch ( solr <identifiersep> server <identifiersep> exception e ) { \n \t5 log . error ( <string_literal> , e ) ; } \n \t3 } else { \n <ect>
\t1 check <identifiersep> <identifier> <identifiersep> <identifier> ( <identifier> <identifiersep> groups , groups , users ) ; \n \t1 rebuild <identifiersep> local <identifiersep> auth <identifiersep> database ( <identifier> , <identifier> <identifiersep> groups , groups , users ) ; } \n private static void check <identifiersep> <identifier> <identifiersep> <identifier> ( map < string , set < string > > <identifier> <identifiersep> groups , map < string , set < string > > groups , map < string , map < string , string > > users ) { \n \t1 if ( <identifier> <identifiersep> groups . contains <identifiersep> key ( account <identifiersep> identifiers . system <identifiersep> account ) ) { \n <ect>
\t4 executed . set ( true ) ; \n \t4 return cluster <identifiersep> state . builder ( current <identifiersep> state ) . build ( ) ; } \n \t3 @ override \n \t3 public void on <identifiersep> failure ( string source , exception e ) { \n <ect>
\t2 else \n \t2 { \n \t3 logger . info ( <string_literal> + instance <identifiersep> location . get <identifiersep> url ( ) ) ; } \n \t2 logger . debug ( <string_literal> + platform . get <identifiersep> user <identifiersep> location ( ) . get <identifiersep> url ( ) ) ; \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <comment> \n \t1 <comment> \n <ect>
\t3 home . mkdirs ( ) ; \n \t3 try { \n \t4 install <identifiersep> repository <identifiersep> config ( config ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 for ( <identifier> <identifiersep> session <identifiersep> listener listener : listeners ) { \n \t5 try { \n \t6 listener . on <identifiersep> login ( access <identifiersep> token , instance <identifiersep> url ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t1 tablet <identifiersep> server <identifiersep> resource <identifiersep> manager . this . execute <identifiersep> major <identifiersep> compaction ( tablet , compaction <identifiersep> task ) ; } } \n public void execute <identifiersep> split ( key <identifiersep> extent tablet , runnable split <identifiersep> task ) { \n \t1 if ( tablet . is <identifiersep> meta ( ) ) { \n \t1 if ( tablet . is <identifiersep> root <identifiersep> tablet ( ) ) { \n <ect>
\t1 cache . stop ( ) ; \n \t1 startup ( ) ; } \n private void do <identifiersep> test ( ) throws exception { \n \t1 task <identifiersep> runner exec = new task <identifiersep> runner ( num <identifiersep> threads ) ; \n <ect>
\t1 register <identifiersep> change <identifiersep> listeners ( ) ; \n \t1 register <identifiersep> m <identifiersep> bean ( ) ; \n \t1 do <identifiersep> init ( config ) ; \n \t1 log . info ( <string_literal> , wro <identifiersep> util . get <identifiersep> implementation <identifiersep> version ( ) ) ; \n <ect>
\t4 while ( ! is <identifiersep> interrupted ( ) ) { \n \t5 try { \n \t6 handle <identifiersep> <identifier> <identifiersep> connection ( new input <identifiersep> output <identifiersep> socket ( <identifier> <identifiersep> socket . accept ( ) ) ) ; \n \t5 } catch ( socket <identifiersep> exception ex ) { \n <ect>
\t1 @ override \n \t1 public void internal <identifiersep> receive <identifiersep> command ( string item <identifiersep> name , command command ) { \n \t2 <identifier> <identifiersep> projector <identifiersep> binding <identifiersep> provider provider = find <identifiersep> first <identifiersep> matching <identifiersep> binding <identifiersep> provider ( item <identifiersep> name , command ) ; \n \t2 if ( provider == null ) { \n <ect>
\t5 return <number_literal> ; \n \t4 } else { \n \t5 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; \n \t5 long public <identifiersep> ip <identifiersep> id = long . parse <identifiersep> long ( values . get ( <string_literal> ) ) ; \n <ect>
<comment> \n private void cleanup <identifiersep> <identifier> <identifiersep> hash <identifiersep> join ( ) { \n \t1 for ( byte pos = 0 ; pos < map <identifiersep> join <identifiersep> tables . length ; pos ++ ) { \n \t1 if ( pos != conf . get <identifiersep> pos <identifiersep> big <identifiersep> table ( ) ) { \n <ect>
\t1 public release <identifiersep> id get <identifiersep> default <identifiersep> release <identifiersep> id ( ) { \n \t2 return this . default <identifiersep> <identifier> . get ( ) ; } \n \t1 public void add <identifiersep> kie <identifiersep> module ( kie <identifiersep> module kie <identifiersep> module ) { \n \t2 kie <identifiersep> module <identifiersep> repo . store ( kie <identifiersep> module ) ; \n <ect>
\t2 long time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 while ( ( system . current <identifiersep> time <identifiersep> millis ( ) - time ) < time <identifiersep> value . time <identifiersep> value <identifiersep> seconds ( <number_literal> ) . millis ( ) ) { \n \t3 if ( client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> exists ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) . is <identifiersep> exists ( ) ) { \n \t4 break ; } } \n <ect>
\t3 <comment> \n \t3 string post <identifiersep> data = null ; \n \t4 if ( ! string <identifiersep> utils . is <identifiersep> empty ( content <identifiersep> encoding ) ) { \n <ect>
\t3 halt <identifiersep> result result = new halt <identifiersep> result ( ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> + hive <identifiersep> exec <identifiersep> jar <identifiersep> path ) ; \n \t4 string hive <identifiersep> h <identifiersep> cat <identifiersep> jar <identifiersep> path = class <identifiersep> util \n \t6 . find <identifiersep> containing <identifiersep> jar ( class . for <identifiersep> name ( <string_literal> ) ) ; \n \t4 string <identifiersep> util . append <identifiersep> with <identifiersep> separator ( kylin <identifiersep> dependency , hive <identifiersep> h <identifiersep> cat <identifiersep> jar <identifiersep> path ) ; \n <ect>
\t1 <comment> \n \t1 protected batch <identifiersep> sample <identifiersep> sender ( remote <identifiersep> sample <identifiersep> listener listener ) { \n \t2 this . listener = listener ; \n \t2 if ( is <identifiersep> client <identifiersep> configured ( ) ) { \n <ect>
\t6 r . set <identifiersep> master <identifiersep> parent ( listener ) ; } \n \t5 try { \n \t6 res . add ( resource ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t2 static <identifiersep> database <identifiersep> property <identifiersep> entry . update ( \n \t3 authentication <identifiersep> properties . class . get <identifiersep> name ( ) + <string_literal> , \n \t3 <string_literal> , \n \t3 certificate <identifiersep> strategy ) ; \n <ect>
\t9 task <identifiersep> <identifier> . get ( topology <identifiersep> master <identifiersep> id ) . get <identifiersep> <identifier> ( ) < launch <identifiersep> time ) { \n \t8 <comment> <ect>
\t1 if ( null != this . conn ) { \n \t1 try { \n \t2 this . conn . close ( ) ; \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t3 logger . debug ( <string_literal> , \n \t5 exception . get <identifiersep> class ( ) . get <identifiersep> name ( ) , \n \t5 exception ) ; } \n \t2 if ( string <identifiersep> utils . has <identifiersep> text ( username ) && string <identifiersep> utils . has <identifiersep> text ( password ) && username . equals ( password ) ) { \n <ect>
\t4 list < xml <identifiersep> setting <identifiersep> node > property <identifiersep> elements = setting <identifiersep> node . get <identifiersep> settings ( <string_literal> ) ; \n \t4 for ( setting <identifiersep> node property <identifiersep> element : property <identifiersep> elements ) { \n \t5 string property <identifiersep> name = property <identifiersep> element . get <identifiersep> string ( <string_literal> ) ; \n \t5 if ( string <identifiersep> utils . is <identifiersep> empty ( property <identifiersep> name ) ) { \n <ect>
\t3 final string partition = clusters . lookup ( input . get <identifiersep> placement ( ) ) . get <identifiersep> partition ( ) ; \n \t3 log . info ( <string_literal> + input . get <identifiersep> instance <identifiersep> id ( ) + <string_literal> + partition ) ; \n \t3 send <identifiersep> terminate ( input . get <identifiersep> instance <identifiersep> id ( ) , partition ) ; \n \t2 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t1 { \n \t1 <identifier> <identifiersep> store . put ( property <identifiersep> name , property <identifiersep> value ) ; } \n \t1 catch ( property <identifiersep> store <identifiersep> exception e ) \n \t1 { \n <ect>
\t3 subject = node ( triple . get <identifiersep> subject ( ) , <identifier> ) ; } \n \t2 try { \n \t3 predicate = <identifier> . create <identifiersep> iri ( triple . get <identifiersep> predicate ( ) . get <identifiersep> iri ( ) . to <identifiersep> string ( ) ) ; \n \t2 } catch ( @ suppress <identifiersep> warnings ( <string_literal> ) illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t3 s <identifiersep> bundles . put ( bundle <identifiersep> name , bundle ) ; } \n \t2 for ( string path : paths ) { \n \t3 string full <identifiersep> path = resolve ( module , path ) ; \n \t3 if ( full <identifiersep> path == null ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 } else if ( police . get <identifiersep> all ( ) . is <identifiersep> enabled ( ) ) { \n \t4 logger . debug ( <string_literal> , all <identifiersep> authentication <identifiersep> policy . class . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t4 plan . register <identifiersep> authentication <identifiersep> policy ( new all <identifiersep> authentication <identifiersep> policy ( ) ) ; \n \t3 } else if ( police . get <identifiersep> not <identifiersep> <identifier> ( ) . is <identifiersep> enabled ( ) ) { \n <ect>
\t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( language ) ) { \n \t4 try { \n \t5 <identifier> . add ( locale <identifiersep> utils . to <identifiersep> locale ( language ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 final long success = <identifier> <identifiersep> by <identifiersep> source <identifiersep> contig . get <identifiersep> or <identifiersep> default ( contig , 0l ) ; \n \t3 final long fail = <identifier> <identifiersep> by <identifiersep> contig . get <identifiersep> or <identifiersep> default ( contig , 0l ) ; \n \t3 final string <identifier> <identifiersep> <identifier> = <identifier> . format ( ( double ) success / ( double ) ( success + fail ) ) ; \n \t3 log . info ( contig , <string_literal> , success , <string_literal> , ( success + fail ) , <string_literal> , <identifier> <identifiersep> <identifier> , <string_literal> ) ; } \n <ect>
\t1 public ejb <identifiersep> book read <identifiersep> from ( class < ejb <identifiersep> book > type , type generic <identifiersep> type , \n \t7 annotation [ ] annotations , media <identifiersep> type media <identifiersep> type , \n \t7 multivalued <identifiersep> map < string , string > http <identifiersep> headers , input <identifiersep> stream entity <identifiersep> stream ) \n \t3 throws io <identifiersep> exception , web <identifiersep> application <identifiersep> exception { \n <ect>
\t2 if ( cf <identifiersep> name . starts <identifiersep> with ( backend . <identifier> <identifiersep> name ) ) { \n \t3 create <identifiersep> column <identifiersep> family . set <identifiersep> caching ( <string_literal> ) ; \n \t2 } else if ( cf <identifiersep> name . starts <identifiersep> with ( backend . <identifier> <identifiersep> name ) ) { \n \t3 create <identifiersep> column <identifiersep> family . set <identifiersep> caching ( <string_literal> ) ; } \n <ect>
\t3 } catch ( configuration <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t4 return null ; } \n \t3 if ( ! resource . start ( ) ) { \n <ect>
\t4 logger . warn ( <string_literal> ) ; \n \t3 else if ( <string_literal> . equals ( <identifier> ) ) \n \t4 logger . info ( <string_literal> ) ; \n \t3 else \n <ect>
\t1 long new <identifiersep> pred <identifiersep> cardinality = parent <identifiersep> cardinality ; \n \t1 if ( parent <identifiersep> cardinality > no <identifiersep> of <identifiersep> <identifier> ) { \n \t2 new <identifiersep> pred <identifiersep> cardinality = parent <identifiersep> cardinality - no <identifiersep> of <identifiersep> <identifier> ; \n \t1 } else { \n <ect>
\t3 case end : \n \t4 status . not <identifiersep> found += size ; \n \t4 break ; \n \t3 default : \n <ect>
\t1 private static final reorder <identifiersep> transformation reorder <identifiersep> fixed = reorder <identifiersep> lib . fixed ( ) ; \n \t1 @ override \n \t1 public query <identifiersep> iterator execute ( basic <identifiersep> pattern pattern , query <identifiersep> iterator input , execution <identifiersep> context exec <identifiersep> cxt ) { \n \t2 if ( input == null ) \n <ect>
\t4 throw new sword <identifiersep> error <identifiersep> exception ( d <identifiersep> space <identifiersep> sword <identifiersep> error <identifiersep> codes . bad <identifiersep> url , \n <number_literal> <string_literal> ) ; } \n \t3 return ( collection ) dso ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t4 } else { \n \t5 future . set ( true ) ; } } \n \t3 @ override \n \t3 public void on <identifiersep> failure ( throwable t ) { \n <ect>
\t3 } catch ( framework <identifiersep> exception fex ) { \n \t4 logger . warn ( <string_literal> , fex ) ; \n \t4 ws . send ( message <identifiersep> builder . status ( ) . code ( fex . get <identifiersep> status ( ) ) . message ( fex . get <identifiersep> message ( ) ) . build ( ) , true ) ; \n \t3 } catch ( dom <identifiersep> exception dex ) { \n <ect>
\t1 if ( instance instanceof <identifier> <identifiersep> element <identifiersep> handler ) { \n \t2 <identifier> = ( ( <identifier> <identifiersep> element <identifiersep> handler ) instance ) . parse <identifiersep> <identifier> <identifiersep> element ( \n \t4 element , props ) ; } \n \t1 if ( ! <identifier> ) { \n <ect>
\t3 user <identifiersep> address = request . get <identifiersep> header ( this . alternative <identifiersep> remote <identifiersep> host <identifiersep> attribute ) ; \n \t3 logger . debug ( <string_literal> , this . alternative <identifiersep> remote <identifiersep> host <identifiersep> attribute , user <identifiersep> address ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> blank ( user <identifiersep> address ) ) { \n \t4 user <identifiersep> address = request . get <identifiersep> remote <identifiersep> addr ( ) ; \n <ect>
\t3 for ( string element : elements ) { \n \t4 string path = path <identifiersep> utils . normalize <identifiersep> path ( parent + cluster . zk <identifiersep> <identifier> + element ) ; \n \t4 nodes . add ( new zookeeper <identifiersep> node ( parent , element , has <identifiersep> children ( cluster <identifiersep> state , path ) ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 { \n \t3 messaging <identifiersep> service . instance ( ) . receive ( message , id , timestamp ) ; } \n \t2 else \n \t2 { \n <ect>
\t1 if ( null != password <identifiersep> filename ) { \n \t1 if ( ! new file ( password <identifiersep> filename ) . delete ( ) ) { \n \t2 log . error ( <string_literal> \n \t4 + password <identifiersep> filename ) ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 if ( local <identifiersep> router <identifiersep> info . get <identifiersep> addresses ( ) . is <identifiersep> empty ( ) ) \n \t3 return ; \n <ect>
\t4 <identifier> <identifiersep> get = new partial <identifiersep> <identifier> <identifiersep> get ( <identifier> <identifiersep> context , proxy <identifiersep> host , proxy <identifiersep> port , <identifier> <identifiersep> baos , <identifier> <identifiersep> current <identifiersep> uri . to <identifiersep> string ( ) , trusted <identifiersep> update . header <identifiersep> bytes ) ; \n \t4 <identifier> <identifiersep> get . add <identifiersep> status <identifiersep> listener ( this ) ; \n \t4 <identifier> <identifiersep> get . fetch ( connect <identifiersep> timeout ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t2 if ( configuration . has <identifiersep> configuration <identifiersep> uri ( ) ) { \n \t3 string configuration <identifiersep> uri = configuration . get <identifiersep> configuration <identifiersep> uri ( ) ; \n \t3 class <identifiersep> resolver class <identifiersep> resolver = get <identifiersep> camel <identifiersep> context ( ) . get <identifiersep> class <identifiersep> resolver ( ) ; \n \t3 url url = resource <identifiersep> helper . resolve <identifiersep> mandatory <identifiersep> resource <identifiersep> as <identifiersep> url ( class <identifiersep> resolver , configuration <identifiersep> uri ) ; \n <ect>
\t5 method write <identifiersep> method = desc . get <identifiersep> write <identifiersep> method ( ) ; \n \t5 if ( write <identifiersep> method != null ) { \n \t6 invoke <identifiersep> or <identifiersep> bail <identifiersep> out ( el , write <identifiersep> method , new object [ ] { value } ) ; } } } \n \t2 } catch ( introspection <identifiersep> exception e ) { \n <ect>
<identifier> management pack \n : param options : command line options \n : param replay <identifiersep> mode : flag to indicate if executing command in replay mode \n <string_literal> <string_literal> <ect>
\t3 snapshot <identifiersep> result result = null ; \n \t3 try { \n \t4 result = snapshot <identifiersep> <identifier> . take <identifiersep> snapshot ( snapshot ) ; \n \t4 if ( result . is <identifiersep> failed ( ) ) { \n <ect>
\t4 if cmd . state is <string_literal> : \n \t5 for line in cmd . <identifier> ( ) : \n \t6 dirs <identifiersep> to <identifiersep> process . append ( line . strip ( ) ) \n \t4 else : \n <ect>
\t3 byte msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply ; \n \t3 org . apache . thrift . t <identifiersep> serializable msg ; \n \t3 <identifier> <identifiersep> result result = new <identifier> <identifiersep> result ( ) ; \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t2 <identifier> . close ( ) ; \n \t1 } catch ( exception ex2 ) { } \n \t1 try { \n \t2 if ( target <identifiersep> file . exists ( ) && ! target <identifiersep> file . delete ( ) ) { \n <ect>
\t4 logger . warn ( <string_literal> ) ; \n \t4 logger . warn ( <string_literal> ) ; \n \t4 logger . warn ( <string_literal> ) ; \n \t4 logger . warn ( <string_literal> ) ; \n <ect>
\t3 serial <identifiersep> output . write ( write <identifiersep> string ) ; \n \t3 serial <identifiersep> output . flush ( ) ; \n \t3 logger . debug ( <string_literal> , write <identifiersep> string ) ; \n \t2 } catch ( io <identifiersep> exception io <identifiersep> exception ) { \n <ect>
\t3 } else { \n \t4 response = new exception <identifiersep> response ( transport <identifiersep> exception . get ( ) ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t3 ret . set <identifiersep> root <identifiersep> device <identifiersep> name ( root <identifiersep> device <identifiersep> name ) ; \n \t3 ret . set <identifiersep> state ( image <identifiersep> metadata . state . available ) ; \n \t3 entities . persist ( ret ) ; \n \t3 tx . commit ( ) ; \n <ect>
\t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) <identifier> <identifiersep> log . warn ( <string_literal> + con , <identifier> ) ; \n \t3 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , 1 ) ; \n \t3 con . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 <identifier> <identifiersep> mapped <identifiersep> context context = new <identifier> <identifiersep> mapped <identifiersep> context ( mapped , book . class ) ; \n \t3 string <identifiersep> writer writer = new string <identifiersep> writer ( ) ; \n \t3 context . create <identifiersep> marshaller ( ) . marshal ( new book ( <string_literal> , <string_literal> , <string_literal> ) , writer ) ; \n \t3 string val = writer . to <identifiersep> string ( ) ; \n <ect>
\t4 authorizable a = get <identifiersep> user <identifiersep> manager ( ) . get <identifiersep> authorizable ( principal ) ; \n \t4 if ( a != null ) { \n \t5 is <identifiersep> member = is <identifiersep> member ( a ) ; } } \n \t2 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 log . info ( <string_literal> + display <identifiersep> info <identifiersep> <identifier> . size ( ) \n \t4 + <string_literal> ) ; \n \t2 follower <identifiersep> status <identifiersep> populator . execute ( person <identifiersep> id , display <identifiersep> info <identifiersep> <identifier> , follower <identifiersep> status . <identifier> ) ; \n <ect>
\t3 log . info ( <string_literal> + rsrc2 ) ; \n \t3 log . info ( <string_literal> + rsrc3 ) ; \n \t3 log . info ( <string_literal> + rsrc4 ) ; \n \t3 log . info ( <string_literal> + log ) ; \n <ect>
\t5 if ( ! net <identifiersep> utils . is <identifiersep> site <identifiersep> local <identifiersep> address ( value ) ) { \n \t6 s <identifiersep> logger . error ( <string_literal> + value + <string_literal> + name ) ; \n \t6 return <string_literal> ; } \n \t4 } catch ( null <identifiersep> pointer <identifiersep> exception e ) { \n <ect>
\t5 n <identifiersep> ready ++ ; \n \t5 string job <identifiersep> desc = null ; \n \t5 try { \n \t6 job <identifiersep> desc = executable . to <identifiersep> string ( ) ; \n <ect>
\t2 break ; } } \n \t1 return <identifier> <identifiersep> task <identifiersep> list ; } \n <comment> \n private int <identifier> <identifiersep> guaranteed ( int count , task <identifiersep> info failed <identifiersep> update , list < task <identifiersep> info > to <identifiersep> update ) { \n <ect>
\t6 if ( <identifier> . get <identifiersep> account <identifiersep> id ( ) != owner . get <identifiersep> account <identifiersep> id ( ) ) { \n \t7 throw new permission <identifiersep> denied <identifiersep> exception ( <string_literal> + <identifier> + <string_literal> ) ; } } } } } \n \t2 <identifier> <identifiersep> affinity <identifiersep> group <identifiersep> vm <identifiersep> map <identifiersep> dao . update <identifiersep> map ( vm <identifiersep> id , affinity <identifiersep> group <identifiersep> ids ) ; \n <ect>
\t1 public void dispose ( ) { \n \t2 if ( <identifier> <identifiersep> should <identifiersep> close ) { \n \t3 <identifier> <identifiersep> did <identifiersep> close = <identifier> <identifiersep> access <identifiersep> utilities . close <identifiersep> database <identifiersep> connections ( this ) ; \n \t3 if ( ! <identifier> <identifiersep> did <identifiersep> close && <identifier> <identifiersep> should <identifiersep> close ) { \n <ect>
\t3 string blob <identifiersep> id = input . get ( blob <identifiersep> id ) ; \n \t3 string length = input . get ( length ) ; \n \t3 long len = length != null ? <identifier> . try <identifiersep> parse ( length ) : null ; \n \t3 if ( path == null || blob <identifiersep> id == null || mime <identifiersep> type == null ) { \n <ect>
\t1 query . set <identifiersep> result ( <string_literal> ) ; \n \t1 query . set <identifiersep> result <identifiersep> class ( java . lang . string . class ) ; \n \t1 if ( max <identifiersep> tables >= 0 ) { \n \t2 query . set <identifiersep> range ( 0 , max <identifiersep> tables ) ; } \n <ect>
\t2 string topology <identifiersep> name = null ; \n \t2 try { \n \t3 topology <identifiersep> name = topology <identifiersep> id <identifiersep> to <identifiersep> name ( topology <identifiersep> id ) ; \n \t2 } catch ( invalid <identifiersep> topology <identifiersep> exception e ) { \n <ect>
\t6 cmd = <identifier> <identifiersep> types <identifiersep> temp ; \n \t5 } else if ( name . ends <identifiersep> with ( <identifier> <identifiersep> <identifier> ) ) { \n \t6 cmd = <identifier> <identifiersep> cmd <identifiersep> heat ; \n \t5 } else { \n <ect>
\t3 logger . debug ( <string_literal> , client ) ; \n \t3 return true ; } \n \t2 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 if ( registered <identifiersep> service == null || ! registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed ( ) ) { \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 log . info ( <string_literal> ) ; \n <ect>
public binding bind ( final object component , final string property , final converter provided <identifiersep> converter , \n \t2 final boolean bind <identifiersep> on <identifiersep> key <identifiersep> up , final state <identifiersep> sync initial <identifiersep> state ) { \n \t1 logger . debug ( <string_literal> , property , component ) ; \n \t1 final converter converter = find <identifiersep> converter ( property , get <identifiersep> property <identifiersep> type ( property ) . get <identifiersep> type ( ) , component , provided <identifiersep> converter ) ; \n <ect>
\t8 if ( client <identifiersep> put <identifiersep> dir != null ) \n \t9 try { \n \t10 <identifier> . start <identifiersep> blocking ( client <identifiersep> put <identifiersep> dir , context ) ; \n \t9 } catch ( identifier <identifiersep> collision <identifiersep> exception e ) { \n <ect>
\t2 wait <identifiersep> for <identifiersep> relocation ( cluster <identifiersep> health <identifiersep> status . green ) ; \n \t2 cluster <identifiersep> state state = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . get ( ) . get <identifiersep> state ( ) ; \n \t2 for ( shard <identifiersep> routing shard : state . get <identifiersep> routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . started ) ) { \n \t3 string node = state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( shard . current <identifiersep> node <identifiersep> id ( ) ) . node ( ) . get <identifiersep> name ( ) ; \n <ect>
\t5 input <identifiersep> stream stream = socket . get <identifiersep> input <identifiersep> stream ( ) ; \n \t5 run <identifiersep> read <identifiersep> loop ( stream , connection ) ; \n \t4 } catch ( exception e ) { \n \t5 if ( ! v <identifiersep> close <identifiersep> requested ) { \n <ect>
\t5 catch ( timeout <identifiersep> exception e1 ) { } \n \t5 throw new fatal <identifiersep> listener <identifiersep> startup <identifiersep> exception ( <string_literal> , e ) ; } } \n \t3 catch ( io <identifiersep> exception e ) { \n <ect>
\t1 logger . debug ( <string_literal> , v <identifiersep> app . get <identifiersep> name ( ) ) ; \n \t1 task task = reset ( v <identifiersep> app ) ; \n \t1 if ( ! task <identifiersep> tester . apply ( task . get <identifiersep> href ( ) ) ) { \n \t2 throw new runtime <identifiersep> exception ( string . format ( <string_literal> , <string_literal> , v <identifiersep> app . get <identifiersep> name ( ) , task ) ) ; } \n <ect>
\t1 @ override public void close ( ) throws interrupted <identifiersep> exception { \n \t2 <comment> \n \t2 super . shutdown ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t2 output . send <identifiersep> complete ( ) ; \n <ect>
\t2 final base64 base64 = new base64 ( ) ; \n \t2 body <identifiersep> content . add <identifiersep> element ( q <identifiersep> name . get ( <string_literal> , namespaces . ns <identifiersep> win <identifiersep> shell ) ) . add <identifiersep> attribute ( <string_literal> , <string_literal> ) . add <identifiersep> attribute ( <string_literal> , command <identifiersep> id ) . add <identifiersep> text ( base64 . encode <identifiersep> as <identifiersep> string ( buf ) ) ; \n \t2 final document request <identifiersep> document = get <identifiersep> request <identifiersep> document ( action . ws <identifiersep> send , resource <identifiersep> uri . resource <identifiersep> uri <identifiersep> cmd , null , body <identifiersep> content ) ; \n \t2 send <identifiersep> request ( request <identifiersep> document , soap <identifiersep> action . send ) ; \n <ect>
\t2 return key <identifiersep> filter != null ? value <identifiersep> util . as <identifiersep> native <identifiersep> string ( key <identifiersep> filter . filter ( value <identifiersep> factory . create ( value ) , context ) ) : value ; } \n \t1 @ override \n \t1 public value <identifiersep> object filter ( value <identifiersep> object value , bundle context ) { \n \t2 if ( ( value != null ) && ( value . get <identifiersep> object <identifiersep> type ( ) == value <identifiersep> object . type . array ) && ! warned <identifiersep> on <identifiersep> array <identifiersep> input ) { \n <ect>
\t2 int <identifier> = config <identifiersep> doc . get <identifiersep> int <identifiersep> value ( class <identifiersep> reference , <string_literal> ) ; \n \t2 if ( <identifier> == 1 ) { \n \t3 try { \n \t4 if ( ! verifier . is <identifiersep> answer <identifiersep> correct ( verifier . get <identifiersep> user <identifiersep> id ( request ) , request . get ( <string_literal> ) ) ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 collections . sort ( found ) ; \n \t3 match = found . get ( found . size ( ) - 1 ) ; } \n <ect>
\t2 new get <identifiersep> job <identifiersep> info <identifiersep> job ( job <identifiersep> handle . get <identifiersep> client <identifiersep> job <identifiersep> id ( ) , spark <identifiersep> job <identifiersep> id ) ) ; \n \t1 try { \n \t1 return get <identifiersep> job <identifiersep> info . get ( spark <identifiersep> client <identifiersep> timeout <identifiersep> in <identifiersep> seconds , time <identifiersep> unit . seconds ) ; \n \t1 } catch ( exception e ) { \n <ect>
<comment> \n \t1 protected void succeed ( ) { \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 boolean force = force <identifiersep> param . or ( false ) ; \n \t2 <comment> \n \t2 if ( cancel <identifiersep> <identifier> ) { \n \t3 job . set <identifiersep> <identifier> <identifiersep> timeout ( null ) ; } \n <ect>
\t3 log . debug ( <string_literal> \n \t5 + <string_literal> \n \t5 + <string_literal> , cache <identifiersep> name , cache <identifiersep> name ) ; \n \t3 return false ; } \n <ect>
\t3 log . error ( <string_literal> ) ; } \n \t2 <comment> \n \t1 if ( pm != null ) { \n \t1 pm . update <identifiersep> triggers ( applied <identifiersep> rp ) ; \n <ect>
private h <identifiersep> cat <identifiersep> record <identifiersep> object <identifiersep> inspector cached <identifiersep> object <identifiersep> inspector ; \n @ override \n public void initialize ( configuration conf , properties tbl ) \n \t1 throws ser <identifiersep> de <identifiersep> exception { \n <ect>
\t3 string updated = coord <identifiersep> el <identifiersep> functions . eval <identifiersep> and <identifiersep> wrap ( eval , tag <identifiersep> elem . get <identifiersep> text ( ) ) ; \n \t3 tag <identifiersep> elem . remove <identifiersep> content ( ) ; \n \t3 tag <identifiersep> elem . add <identifiersep> content ( updated ) ; } \n \t2 else { \n <ect>
\t3 future < i <identifiersep> file <identifiersep> processor <identifiersep> future <identifiersep> result > future = null ; \n \t3 try { \n \t4 future = completion <identifiersep> service . poll ( <number_literal> , time <identifiersep> unit . milliseconds ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 db <identifiersep> client . ce <identifiersep> activity <identifiersep> dao ( ) . delete <identifiersep> by <identifiersep> <identifier> ( db <identifiersep> session , ce <identifiersep> activity <identifiersep> <identifier> ) ; \n \t1 calendar <identifier> <identifiersep> <identifier> <identifiersep> <identifier> = calendar . get <identifiersep> instance ( ) ; \n \t1 <identifier> <identifiersep> <identifier> <identifiersep> <identifier> . set <identifiersep> time <identifiersep> in <identifiersep> millis ( <identifier> . now ( ) ) ; \n \t1 <identifier> <identifiersep> <identifier> <identifiersep> <identifier> . add ( calendar . date , - <number_literal> ) ; \n <ect>
\t2 if ( producer <identifiersep> member <identifiersep> dep . <identifier> <identifiersep> member . get <identifiersep> declaring <identifiersep> class ( ) . equals ( <identifier> . type ) ) { \n \t3 link <identifiersep> iter . remove ( ) ; \n \t3 to <identifiersep> be <identifiersep> removed . add ( <identifier> <identifiersep> link ) ; } } } } } \n private void validate <identifiersep> <identifier> ( ) { \n <ect>
\t1 public object set <identifiersep> property ( string prop <identifiersep> name , object prop <identifiersep> value ) \n \t1 { \n \t2 if ( ! ( prop <identifiersep> value instanceof string ) ) \n \t2 { \n <ect>
\t4 impl . set <identifiersep> channel ( null ) ; \n \t4 impl = null ; \n \t4 channel = null ; } \n \t2 } catch ( exception x ) { \n <ect>
\t3 return ; } \n \t2 z <identifiersep> wave <identifiersep> command <identifiersep> class <identifiersep> converter < z <identifiersep> wave <identifiersep> command <identifiersep> class > converter = ( z <identifiersep> wave <identifiersep> command <identifiersep> class <identifiersep> converter < z <identifiersep> wave <identifiersep> command <identifiersep> class > ) get <identifiersep> converter ( \n \t4 command <identifiersep> class . get <identifiersep> command <identifiersep> class ( ) ) ; \n \t2 if ( converter == null ) { \n <ect>
\t4 logger . info ( <string_literal> + entry . get <identifiersep> key <identifiersep> pattern ( ) ) ; \n \t4 <comment> \n \t2 if ( show <identifiersep> then ) { \n \t3 for ( <identifier> <identifiersep> mapping <identifiersep> entry entry : this . <identifier> ) { \n <ect>
\t4 break ; \n \t3 if ( <identifier> <identifiersep> <identifier> <identifiersep> <identifier> ( ) && column <identifiersep> counter . ignored ( ) > database <identifiersep> descriptor . get <identifiersep> <identifier> <identifiersep> failure <identifiersep> threshold ( ) ) \n \t3 { \n \t4 tracing . trace ( <string_literal> , database <identifiersep> descriptor . get <identifiersep> <identifier> <identifiersep> failure <identifiersep> threshold ( ) ) ; \n <ect>
\t10 if ( field <identifiersep> value instanceof collection ) { \n <number_literal> <identifier> = ! ( ( collection < ? > ) field <identifiersep> value ) . is <identifiersep> empty ( ) ; } \n \t10 break ; \n \t9 default : \n <ect>
\t4 if ( is <identifiersep> type <identifiersep> instance <identifiersep> of <identifiersep> property <identifiersep> type ( property <identifiersep> type , current <identifiersep> property <identifiersep> type ) ) { \n \t5 properties . add ( descriptor ) ; } } } \n \t2 catch ( exception e ) { \n \t3 if ( descriptor == null ) { \n <ect>
\t3 logger . minor ( real <identifiersep> node <identifiersep> request <identifiersep> insert <identifiersep> test . class , <string_literal> + hex <identifiersep> util . bytes <identifiersep> to <identifiersep> hex ( block . get <identifiersep> headers ( ) ) ) ; \n \t3 <comment> \n \t3 try { \n \t4 random <identifiersep> node . client <identifiersep> core . real <identifiersep> put ( block , false , fork <identifiersep> on <identifiersep> <identifier> , false , false , real <identifiersep> time <identifiersep> flag ) ; \n <ect>
\t7 <identifier> <identifiersep> reason <identifiersep> busy <identifiersep> here , \n \t7 null ) ; } \n \t4 catch ( operation <identifiersep> failed <identifiersep> exception ex ) \n \t4 { \n <ect>
\t2 this . reboot <identifiersep> on <identifiersep> change = reboot <identifiersep> on <identifiersep> change ; } \n \t1 public void show ( ) { \n \t2 if ( pms . is <identifiersep> headless ( ) ) { \n \t3 <comment> \n <ect>
\t4 queues . add ( path , b ) ; } \n \t3 if ( ! first ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t4 logger . warn ( <string_literal> , \n \t6 json . get ( api <identifiersep> return <identifiersep> errors <identifiersep> tag ) . get <identifiersep> as <identifiersep> json <identifiersep> array ( ) . get <identifiersep> as <identifiersep> string ( ) ) ; \n \t4 return false ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 assert <identifiersep> that ( shard <identifiersep> routing . current <identifiersep> node <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 assert <identifiersep> that ( shard <identifiersep> routing . relocating <identifiersep> node <identifiersep> id ( ) , null <identifiersep> value ( ) ) ; } \n \t1 public void test <identifiersep> relocating <identifiersep> primaries <identifiersep> with <identifiersep> initializing <identifiersep> replicas ( ) { \n \t2 allocation <identifiersep> service allocation = create <identifiersep> allocation <identifiersep> service ( ) ; \n <ect>
\t1 json <identifiersep> object object = new json <identifiersep> object ( ) ; \n \t1 object . put ( <string_literal> , all <identifiersep> scripts ) ; \n \t1 return response . ok ( object ) . build ( ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 allow <identifiersep> nodes ( <string_literal> , <number_literal> ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 assert <identifiersep> no <identifiersep> timeout ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> timeout ( <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> green <identifiersep> status ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> no <identifiersep> relocating <identifiersep> shards ( true ) ) ; \n <ect>
\t2 channel channel ; \n \t2 channel = connection . create <identifiersep> channel ( ) ; \n \t2 for ( string queue <identifiersep> name : this . queues ) { \n \t3 if ( this . purge ) { \n <ect>
\t3 } else if ( data <identifiersep> type == byte . class ) { \n \t4 log . debug ( <string_literal> , key ) ; \n \t4 mapping . field ( <string_literal> , <string_literal> ) ; \n \t3 } else if ( data <identifiersep> type == short . class ) { \n <ect>
\t2 if ( ! controller . is <identifiersep> started ( node . get <identifiersep> qualifier ( ) ) ) { \n \t3 log . info ( <string_literal> + node ) ; \n \t3 controller . start ( node . get <identifiersep> qualifier ( ) ) ; \n \t3 assert <identifiersep> true ( controller . is <identifiersep> started ( node . get <identifiersep> qualifier ( ) ) ) ; } \n <ect>
\t1 private void test <identifiersep> purge <identifiersep> large <identifiersep> queue ( boolean <identifier> <identifiersep> messages ) throws exception { \n \t2 apply <identifiersep> broker <identifiersep> <identifier> <identifiersep> policy ( <identifier> <identifiersep> messages ) ; \n \t2 create <identifiersep> producer <identifiersep> and <identifiersep> send <identifiersep> messages ( num <identifiersep> to <identifiersep> send ) ; \n \t2 queue <identifiersep> view <identifiersep> m <identifiersep> bean proxy = get <identifiersep> proxy <identifiersep> to <identifiersep> queue <identifiersep> view <identifiersep> m <identifiersep> bean ( ) ; \n <ect>
\t2 assert . not <identifiersep> null ( cf , <string_literal> ) ; \n \t2 connection <identifiersep> holder con <identifiersep> holder = ( connection <identifiersep> holder ) transaction <identifiersep> synchronization <identifiersep> manager . get <identifiersep> resource ( cf ) ; \n \t2 if ( con <identifiersep> holder != null ) { \n \t3 return con <identifiersep> holder . get <identifiersep> connection ( ) ; } \n <ect>
\t2 try { \n \t3 charset utf8 = standard <identifiersep> charsets . utf <identifiersep> <number_literal> ; \n \t3 properties . store ( new output <identifiersep> stream <identifiersep> writer ( out <identifiersep> stream , utf8 ) , comment ) ; } \n \t2 catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception fnfe ) { \n <ect>
\t5 members . clear ( ) ; \n \t5 members . add <identifiersep> all ( mbrs ) ; } \n \t4 public void receive ( message msg ) { \n \t5 if ( msg == null || msg . get <identifiersep> length ( ) == 0 ) { \n <ect>
\t1 <comment> \n \t1 @ override \n \t1 protected spatial <identifiersep> match object <identifiersep> to <identifiersep> struct ( prop <identifiersep> func <identifiersep> arg arg <identifiersep> object ) { \n \t2 if ( arg <identifiersep> object . is <identifiersep> node ( ) ) { \n <ect>
\t3 stream <identifiersep> result out <identifiersep> stream = new stream <identifiersep> result ( output ) ; \n \t3 transformer . transform ( source , out <identifiersep> stream ) ; \n \t3 return new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( output . to <identifiersep> byte <identifiersep> array ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 logger . info ( <string_literal> + ip <identifiersep> addr <identifiersep> list ) ; \n \t4 logger . info ( <string_literal> + this . identity <identifiersep> node . get <identifiersep> host ( ) \n \t7 + <string_literal> ) ; } \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception uhe ) { \n <ect>
<comment> \n \t1 public void add <identifiersep> item ( string item <identifiersep> name , string property ) { \n <ect>
\t2 content <identifiersep> name name = new content <identifiersep> name ( <identifier> <identifiersep> test <identifiersep> prefix , <identifier> <identifiersep> test <identifiersep> non <identifiersep> repo ) ; \n \t2 input = new ccn <identifiersep> input <identifiersep> stream ( name , get <identifiersep> handle ) ; \n \t2 assert . assert <identifiersep> false ( repository <identifiersep> control . local <identifiersep> repo <identifiersep> sync ( get <identifiersep> handle , input ) ) ; \n \t2 thread . sleep ( <number_literal> ) ; <comment> \n <ect>
\t1 private final static map < string , index <identifiersep> provider > get <identifiersep> indexes ( configuration config ) { \n \t2 immutable <identifiersep> map . builder < string , index <identifiersep> provider > builder = immutable <identifiersep> map . builder ( ) ; \n \t2 for ( string index : config . get <identifiersep> <identifier> <identifiersep> namespaces ( index <identifiersep> ns ) ) { \n \t3 preconditions . check <identifiersep> argument ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( index ) , <string_literal> , index ) ; \n <ect>
\t1 private void prepare <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> dhcp <identifiersep> entry ( nic <identifiersep> profile nic , dhcp <identifiersep> entry <identifiersep> command cmd ) { \n \t2 long vm <identifiersep> id = nic . get <identifiersep> vm <identifiersep> id ( ) ; \n \t2 user <identifiersep> vm <identifiersep> vo vm = <identifier> <identifiersep> user <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm == null || vm . get <identifiersep> hypervisor <identifiersep> type ( ) != hypervisor <identifiersep> type . <identifier> <identifiersep> <identifier> ) { \n <ect>
\t3 } else if ( data instanceof simple <identifiersep> case ) { \n \t4 property <identifiersep> utils . set <identifiersep> property ( bean , <string_literal> , ( ( simple <identifiersep> case ) data ) . get <identifiersep> id ( ) ) ; \n \t4 item <identifiersep> field . set <identifiersep> value ( ( ( simple <identifiersep> case ) data ) . get <identifiersep> subject ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t6 } else if ( command instanceof percent <identifiersep> type ) { \n \t7 percent <identifiersep> type p <identifiersep> type = ( percent <identifiersep> type ) command ; \n \t7 <comment> \n \t7 int percent <identifiersep> value = ( int ) ( math . floor ( p <identifiersep> type . int <identifiersep> value ( ) / <identifier> ) ) ; \n <ect>
\t1 void job <identifiersep> submitted ( string job <identifiersep> id , int spark <identifiersep> job <identifiersep> id ) { \n \t1 log . debug ( <string_literal> , job <identifiersep> id , spark <identifiersep> job <identifiersep> id ) ; \n \t1 client <identifiersep> rpc . call ( new job <identifiersep> submitted ( job <identifiersep> id , spark <identifiersep> job <identifiersep> id ) ) ; } \n \t1 void send <identifiersep> metrics ( string job <identifiersep> id , int spark <identifiersep> job <identifiersep> id , int stage <identifiersep> id , long task <identifiersep> id , metrics metrics ) { \n <ect>
\t2 try { \n \t3 return dso . get <identifiersep> type ( ) == constants . item && \n \t4 package <identifiersep> utils . find <identifiersep> <identifier> <identifiersep> license ( context , ( item ) dso ) != null ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 string token <identifiersep> string = response . get <identifiersep> token ( ) ; \n \t2 access <identifiersep> token token = null ; \n \t2 try { \n \t3 token = adapter <identifiersep> rsa <identifiersep> token <identifiersep> verifier . verify <identifiersep> token ( token <identifiersep> string , deployment ) ; \n <ect>
private set < class < ? > > find <identifiersep> custom <identifiersep> mappings ( final meta <identifiersep> data <identifiersep> scanner scanner ) { \n \t1 set < class < ? > > <identifier> <identifiersep> mappings = scanner . get <identifiersep> types <identifiersep> annotated <identifiersep> with ( custom <identifiersep> mapping . class , true ) ; \n \t1 if ( <identifier> <identifiersep> mappings . is <identifiersep> empty ( ) ) { \n \t1 <comment> \n <ect>
\t3 final firewall <identifiersep> rule rule = new firewall <identifiersep> rule <identifiersep> vo ( null , null , null , null , <string_literal> , network <identifiersep> id , network . get <identifiersep> account <identifiersep> id ( ) , network . get <identifiersep> domain <identifiersep> id ( ) , purpose . firewall , source <identifiersep> cidr , \n \t5 dest <identifiersep> cidr , null , null , null , firewall <identifiersep> rule . traffic <identifiersep> type . egress , firewall <identifiersep> rule . firewall <identifiersep> rule <identifiersep> type . system ) ; \n \t3 rules . add ( rule ) ; \n \t2 } else { \n <ect>
\t5 template <identifiersep> data <identifiersep> store <identifiersep> vo dest <identifiersep> tmplt <identifiersep> store = template <identifiersep> data <identifiersep> store <identifiersep> dao . find <identifiersep> by <identifiersep> store <identifiersep> template ( data <identifiersep> store . get <identifiersep> id ( ) , obj <identifiersep> id ) ; \n \t5 if ( dest <identifiersep> tmplt <identifiersep> store != null ) { \n \t6 return template <identifiersep> data <identifiersep> store <identifiersep> dao . remove ( dest <identifiersep> tmplt <identifiersep> store . get <identifiersep> id ( ) ) ; \n \t5 } else { \n <ect>
\t3 if ( ! ( sources [ 0 ] instanceof group ) ) { \n \t4 logger . warn ( <string_literal> , get <identifiersep> parameters <identifiersep> as <identifiersep> string ( sources ) ) ; \n \t4 return <string_literal> ; } \n \t3 if ( ! ( sources [ 1 ] instanceof principal ) ) { \n <ect>
<comment> \n public void run <identifiersep> before <identifiersep> application <identifiersep> create <identifiersep> bootstrap ( \n \t1 instrumentation instrumentation , string [ ] bootstrap <identifiersep> classes ) { \n \t1 if ( ! is <identifiersep> with <identifiersep> extension ) { \n <ect>
\t2 assert invoke <identifiersep> latch . await ( <number_literal> , milliseconds ) ; \n \t2 try { \n \t3 fut . get ( ) ; } \n \t2 catch ( grid <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 if ( is <identifiersep> use <identifiersep> locking ( ) ) { \n \t5 log . debug ( <string_literal> , activity <identifiersep> state ) ; \n \t5 entity <identifiersep> manager . lock ( activity <identifiersep> state , lock <identifiersep> mode <identifiersep> type . write ) ; \n <ect>
\t4 tr <identifiersep> map . put ( task <identifiersep> name , new task <identifiersep> runner ( task ) ) ; \n \t4 <comment> \n \t4 perf <identifiersep> list . add ( task <identifiersep> name ) ; \n \t3 } catch ( io <identifiersep> exception io <identifiersep> e ) { \n <ect>
\t2 assert <identifiersep> equals ( services , names . size ( ) ) ; \n \t2 <comment> \n \t2 log . info ( <string_literal> ) ; \n \t2 context . stop <identifiersep> route ( <string_literal> ) ; \n <ect>
\t2 final com . box . sdk . box <identifiersep> folder . info result = request <identifiersep> body <identifiersep> and <identifiersep> headers ( <string_literal> , null , headers ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result . get <identifiersep> name ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , camel <identifiersep> test <identifiersep> folder , result . get <identifiersep> name ( ) ) ; \n <ect>
\t3 log . debug ( <string_literal> ) ; \n \t3 try { \n \t4 socket <identifiersep> transport <identifiersep> started . await ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 create <identifiersep> all <identifiersep> <identifier> <identifiersep> configs ( ) ; \n \t4 execute <identifiersep> script ( ) ; \n \t4 log . info ( <string_literal> ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \t4 m <identifiersep> device = factory . create <identifiersep> m <identifiersep> bricklet <identifiersep> <identifier> <identifiersep> <identifier> ( ) ; \n \t4 m <identifiersep> device . set <identifiersep> device <identifiersep> identifier ( bricklet <identifiersep> <identifier> <identifiersep> <identifier> . device <identifiersep> identifier ) ; \n \t3 } else if ( device <identifiersep> identifier == bricklet <identifiersep> <identifier> . device <identifiersep> identifier ) { \n <ect>
\t2 sort <identifiersep> time . stop ( ) ; \n \t2 search <identifiersep> time . stop ( ) ; \n \t2 log . debug ( <string_literal> , lucene <identifiersep> time ) ; \n \t2 log . debug ( <string_literal> , collect <identifiersep> time ) ; \n <ect>
\t2 server <identifiersep> log . info ( format ( <string_literal> , now , server . get <identifiersep> connectors ( ) [ 0 ] . get <identifiersep> port ( ) ) ) ; \n \t2 try { \n \t3 server . stop ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 } finally { \n \t4 try { \n \t5 is . close ( ) ; \n \t4 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t3 if ( hosts == null || hosts . is <identifiersep> empty ( ) ) { \n \t4 continue ; } \n \t3 for ( final host <identifiersep> vo h : hosts ) { \n \t4 if ( h . get <identifiersep> state ( ) == status . up ) { \n <ect>
\t3 if ( ( page <identifiersep> counter [ 0 ] + <number_literal> ) > block <identifiersep> file . <identifier> ) { \n \t4 block <identifiersep> file . page <identifiersep> seek ( this . bf . file , cur <identifiersep> next <identifiersep> page [ 0 ] ) ; \n \t4 int magic = bf . file . read <identifiersep> int ( ) ; \n \t4 if ( magic != block <identifiersep> file . magic <identifiersep> <identifier> ) { \n <ect>
\t2 int count = 0 ; \n \t2 message m = null ; \n \t2 for ( ; count < <number_literal> ; count ++ ) { \n \t3 assert <identifiersep> true ( ( m = consumer . receive ( message <identifiersep> receive <identifiersep> timeout ) ) != null ) ; \n <ect>
\t2 if ( msgs . size ( ) > 0 ) { \n \t3 logger . info ( <string_literal> , msgs . to <identifiersep> string ( ) ) ; } \n \t2 msgs = <identifier> . get <identifiersep> results ( ) . get <identifiersep> messages ( message . level . warning ) ; \n \t2 if ( msgs . size ( ) > 0 ) { \n <ect>
\t6 ok = false ; } } } } \n \t2 if ( ok ) \n \t3 logger . info ( <string_literal> ) ; \n \t2 else \n <ect>
\t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n \t2 < button ng - click = <string_literal> > info < / button > \n <ect>
\t1 logger . fatal ( this . get <identifiersep> class ( ) , <string_literal> + i <identifiersep> logger . fatal ) ; <comment> \n \t1 logger . fatal ( <string_literal> , <string_literal> + i <identifiersep> logger . fatal ) ; <comment> \n \t1 logger . fatal ( this . get <identifiersep> class ( ) , <string_literal> + i <identifiersep> logger . fatal , new throwable ( ) ) ; <comment> \n \t1 logger . fatal ( <string_literal> , <string_literal> + i <identifiersep> logger . fatal , new throwable ( ) ) ; <comment> \n <ect>
\t2 action <identifiersep> class = class . for <identifiersep> name ( <identifier> ) ; \n \t2 if ( action <identifiersep> class == null ) { \n \t2 log . warn ( string . format ( <string_literal> , <identifier> ) ) ; } \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 { \n \t2 <comment> \n \t2 if ( parent <identifiersep> operation <identifiersep> set == null ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> file <identifiersep> descriptor <identifiersep> leak ( ) throws exception { \n \t2 <identifier> <identifiersep> bean os <identifiersep> mbean = new <identifier> <identifiersep> bean ( ) ; \n \t2 if ( os <identifiersep> mbean . get <identifiersep> unix ( ) != true ) { \n <ect>
\t2 } catch ( http <identifiersep> response <identifiersep> exception e ) { \n \t3 <comment> \n \t3 if ( e . get <identifiersep> message ( ) . contains ( <string_literal> ) ) { \n \t3 exception = e ; \n <ect>
\t2 todo <identifiersep> action <identifiersep> queue . start ( ) \n \t2 file <identifiersep> store <identifiersep> action <identifiersep> queue . start ( ) \n \t2 local <identifiersep> <identifier> <identifiersep> cast <identifiersep> manager . register <identifiersep> receiver ( m <identifiersep> broadcast <identifiersep> receiver , intent <identifiersep> filter ) \n \t2 logger . info ( tag , <string_literal> ) \n <ect>
\t3 element root <identifiersep> element = doc . get <identifiersep> document <identifiersep> element ( ) ; \n \t3 for ( int i = 0 ; i < tag <identifiersep> names . length ; i ++ ) { \n \t4 node <identifiersep> list target <identifiersep> nodes = root <identifiersep> element . get <identifiersep> elements <identifiersep> by <identifiersep> tag <identifiersep> name ( tag <identifiersep> names [ i ] ) ; \n \t4 if ( target <identifiersep> nodes . get <identifiersep> length ( ) < = 0 ) { \n <ect>
\t3 if ( registered <identifiersep> m <identifiersep> beans . remove ( object <identifiersep> name ) ) { \n \t4 try { \n \t5 management <identifiersep> context . unregister <identifiersep> m <identifiersep> bean ( object <identifiersep> name ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t1 try { \n \t1 obj <identifiersep> mgr . lookup <identifiersep> object ( <identifier> . get <identifiersep> bucket ( ) , <identifier> . get <identifiersep> object <identifiersep> key ( ) , null ) \n \t1 fail ( <string_literal> ) \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t3 fail ( <string_literal> + body ) ; } \n \t2 @ handler \n \t2 public void foo ( @ simple ( <string_literal> ) string bar ) { \n \t3 this . bar = bar ; \n <ect>
\t3 public void configure ( ) throws exception { \n \t4 from ( <string_literal> ) \n \t5 . process ( new processor ( ) { \n \t6 public void process ( exchange exchange ) throws exception { \n <ect>
\t6 , print <identifiersep> sql \n \t6 , print <identifiersep> sql <identifiersep> hash ) \n \t2 ) ; \n \t2 if ( entries . size ( ) > <number_literal> ) { \n <ect>
\t3 string device <identifiersep> bus <identifiersep> name = disk <identifiersep> info . get <identifiersep> disk <identifiersep> device <identifiersep> bus <identifiersep> name ( ) ; \n \t3 if ( device <identifiersep> bus <identifiersep> name != null && ( device <identifiersep> bus <identifiersep> name . to <identifiersep> lower <identifiersep> case ( ) . contains ( <string_literal> ) || device <identifiersep> bus <identifiersep> name . to <identifiersep> lower <identifiersep> case ( ) . contains ( <string_literal> ) ) ) { \n \t4 <identifier> <identifiersep> supported = true ; } \n \t3 if ( ! <identifier> <identifiersep> supported ) { \n <ect>
\t3 log . info ( <string_literal> + this . get <identifiersep> class ( ) . get <identifiersep> name ( ) \n \t4 + <string_literal> \n \t4 + ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) + <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 { \n \t2 monitor . increment ( ) ; \n \t2 if ( msg . previous <identifiersep> tx <identifiersep> id ( ) < = 0 ) \n \t2 { \n <ect>
\t3 assert <identifiersep> that ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . set <identifiersep> master <identifiersep> node <identifiersep> timeout ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> state ( ) . nodes ( ) . get <identifiersep> master <identifiersep> node <identifiersep> id ( ) , null <identifiersep> value ( ) ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( master <identifiersep> not <identifiersep> discovered <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
<number_literal> . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) \n <number_literal> . set <identifiersep> indices ( index <identifiersep> name ) \n <number_literal> . get ( ) ; \n \t2 final snapshot <identifiersep> id snapshot <identifiersep> id1 = create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . snapshot <identifiersep> id ( ) ; \n <ect>
\t4 if ( <identifier> != null ) { \n \t5 try { \n \t6 <identifier> . stop ( ) ; \n \t5 } catch ( jms <identifiersep> exception jms <identifiersep> exc ) { \n <ect>
\t4 return ; \n \t3 } catch ( throwable t ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t4 <comment> \n \t4 process <identifiersep> basic <identifiersep> report ( serial <identifiersep> message , offset , endpoint ) ; \n \t4 break ; \n \t3 case basic <identifiersep> get : \n <ect>
\t3 s . write <identifiersep> object ( session <identifiersep> id ) ; } \n \t2 private void read <identifiersep> object ( java . io . object <identifiersep> input <identifiersep> stream s ) \n \t4 throws io <identifiersep> exception , class <identifiersep> not <identifiersep> found <identifiersep> exception \n \t2 { \n <ect>
\t4 minion . active <identifiersep> task <identifiersep> histogram . update ( minion . active <identifiersep> task <identifiersep> keys . size ( ) ) ; \n \t4 minion . disk <identifiersep> free . set ( minion . root <identifiersep> dir . get <identifiersep> free <identifiersep> space ( ) ) ; \n \t3 } catch ( exception ex ) { \n \t4 if ( ! ( ex instanceof interrupted <identifiersep> exception ) ) { \n <ect>
\t2 else { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 return false ; } } \n \t1 else { \n <ect>
\t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( no <identifiersep> such <identifiersep> padding <identifiersep> exception e ) { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> id + answer . get <identifiersep> details ( ) ) ; } } \n \t3 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t4 string msg = export <identifiersep> dir + file . separator + <identifier> <identifiersep> file <identifiersep> name + <string_literal> ; \n \t4 s <identifiersep> logger . error ( msg ) ; \n \t4 throw new exception ( msg ) ; } \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 serial <identifiersep> message execute <identifiersep> refresh ( z <identifiersep> wave <identifiersep> node node , z <identifiersep> wave <identifiersep> thermostat <identifiersep> fan <identifiersep> state <identifiersep> command <identifiersep> class command <identifiersep> class , int endpoint <identifiersep> id , \n \t3 map < string , string > arguments ) { \n <ect>
\t4 string exec <identifiersep> command = <string_literal> + pre <identifiersep> data <identifiersep> path + pre <identifiersep> container <identifiersep> id + <string_literal> + instance <identifiersep> name + <string_literal> \n \t6 + instance <identifiersep> name ; \n \t4 log . info ( <string_literal> + exec <identifiersep> command ) ; \n \t4 exec . execute ( exec <identifiersep> command ) ; \n <ect>
\t2 thread . sleep ( sleep <identifiersep> interval ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { } \n \t2 sleep <identifiersep> interval *= <number_literal> ; } \n \t1 if ( heartbeat <identifiersep> task . is <identifiersep> cancelled ( ) || heartbeat <identifiersep> task . is <identifiersep> done ( ) ) { \n <ect>
\t2 try { \n \t3 start ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t1 long cur <identifiersep> pos = this . <identifier> <identifiersep> input . get <identifiersep> pos ( ) ; \n \t1 log . debug ( <string_literal> + target <identifiersep> pos + <string_literal> + cur <identifiersep> pos ) ; \n \t1 long distance = target <identifiersep> pos - cur <identifiersep> pos ; \n \t1 if ( target <identifiersep> pos == cur <identifiersep> pos ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void send ( list < task <identifiersep> message > messages ) { \n <ect>
\t3 assert <identifiersep> true ( response . contains ( load <identifiersep> balancer <identifiersep> echo <identifiersep> server . get <identifiersep> response <identifiersep> postfix <identifiersep> string ( ) ) , <string_literal> + load <identifiersep> balancer <identifiersep> echo <identifiersep> server . get <identifiersep> response <identifiersep> postfix <identifiersep> string ( ) + <string_literal> + cluster <identifiersep> name + <string_literal> + service + <string_literal> + response ) ; \n \t3 <identifier> <identifiersep> log . error ( <string_literal> + load <identifiersep> balancer <identifiersep> echo <identifiersep> server . get <identifiersep> response <identifiersep> postfix <identifiersep> string ( ) ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t4 <identifier> <identifiersep> active <identifiersep> peers . remove ( mshost . get <identifiersep> id ( ) ) ; \n \t4 try { \n \t5 jmx <identifiersep> util . unregister <identifiersep> m <identifiersep> bean ( <string_literal> , <string_literal> + mshost . get <identifiersep> id ( ) ) ; \n \t4 } catch ( final exception e ) { \n <ect>
\t1 try { \n \t2 <comment> \n \t2 op <identifiersep> handle = execute <identifiersep> statement <identifiersep> internal ( cmd <identifiersep> <identifier> , null , false , 0 ) ; \n \t1 } catch ( hive <identifiersep> sql <identifiersep> exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 counters . get ( pre <identifiersep> state <identifiersep> <identifier> <identifiersep> plugin . class ) . inc ( ) ; \n \t2 for ( plugin plugin : plugins . get ( pre <identifiersep> <identifier> <identifiersep> plugin . class ) ) { \n \t3 if ( plugin instanceof pre <identifiersep> <identifier> <identifiersep> plugin ) { \n <ect>
\t2 s <identifiersep> usage <identifiersep> dao = <identifier> <identifiersep> usage <identifiersep> dao ; \n \t2 s <identifiersep> usage <identifiersep> load <identifiersep> balancer <identifiersep> policy <identifiersep> dao = <identifier> <identifiersep> usage <identifiersep> load <identifiersep> balancer <identifiersep> policy <identifiersep> dao ; } \n \t1 public static boolean parse ( account <identifiersep> vo account , date start <identifiersep> date , date end <identifiersep> date ) { \n <ect>
\t5 ttl , \n \t5 jvm <identifiersep> memory <identifiersep> sensor . gc ) , \n \t5 polling <identifiersep> interval ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 string <identifier> = objects . to <identifiersep> string ( config . get ( <string_literal> ) , null ) ; \n \t4 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( <identifier> ) ) { \n \t5 device . set <identifiersep> gateway <identifiersep> password ( <identifier> ) ; \n \t4 } else { \n <ect>
\t2 } else if ( use <identifiersep> local <identifiersep> trust <identifiersep> store ) { \n \t3 file truststore = new file ( trust <identifiersep> store <identifiersep> to <identifiersep> use ) ; \n \t3 logger . info ( <string_literal> , truststore . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 if ( ! truststore . exists ( ) ) { \n <ect>
\t2 string rsrc <identifiersep> val = new string ( bytes ) . trim ( ) ; \n \t3 log . info ( <string_literal> + rsrc <identifiersep> val ) ; \n \t2 if ( ! <string_literal> . equals ( rsrc <identifiersep> val ) ) { \n <ect>
\t1 @ override \n \t1 public void destroy ( ) { \n \t2 super . destroy ( ) ; \n \t2 for ( message <identifiersep> channel <identifiersep> metrics monitor : this . channels ) { \n <ect>
\t2 final string prop <identifiersep> value = system . get <identifiersep> property ( sys <identifiersep> prop <identifiersep> login <identifiersep> conf ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( prop <identifiersep> value ) ) { \n \t3 logger . info ( <string_literal> , prop <identifiersep> value , sys <identifiersep> prop <identifiersep> login <identifiersep> conf ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( this . login <identifiersep> conf ) ) { \n <ect>
\t5 if ( user . get <identifiersep> user <identifiersep> name ( ) . to <identifiersep> upper <identifiersep> case ( locale . english ) . matches ( <string_literal> + panel . <identifier> <identifiersep> user <identifiersep> name ( ) . get <identifiersep> text ( ) . to <identifiersep> upper <identifiersep> case ( locale . english ) + <string_literal> ) ) { \n \t6 <identifier> . add ( user ) ; } } \n \t4 users = <identifier> ; } \n \t3 if ( previous <identifiersep> users == null || check <identifiersep> user <identifiersep> list <identifiersep> changed ( users ) ) { \n <ect>
\t3 try { \n \t4 scheduler sched = std <identifiersep> scheduler <identifiersep> factory . get <identifiersep> default <identifiersep> scheduler ( ) ; \n \t4 schedule <identifiersep> jobs ( sched ) ; \n \t3 } catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> client ( ) throws throwable { \n \t2 <comment> \n \t2 if ( performance <identifiersep> utils . get <identifiersep> property ( <string_literal> , null ) == null ) { \n <ect>
\t1 @ override \n \t1 public serializable execute ( final action <identifiersep> context in <identifiersep> action <identifiersep> context ) \n \t1 { \n \t2 long person <identifiersep> id = ( long ) in <identifiersep> action <identifiersep> context . get <identifiersep> params ( ) ; \n <ect>
\t8 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } } \n \t6 if ( ! subscription <identifiersep> task <identifiersep> running ) { \n \t7 close <identifiersep> connection ( ) ; \n \t6 } else { \n <ect>
\t2 } catch ( storage <identifiersep> unavailable <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . resource <identifiersep> unavailable <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( execution <identifiersep> exception ex ) { \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , count , event . get <identifiersep> producer <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , started , event . is <identifiersep> started ( ) ) ; } \n \t1 protected session create <identifiersep> producer ( ) throws jms <identifiersep> exception { \n \t2 final string consumer <identifiersep> text = <string_literal> + ( ++ consumer <identifiersep> counter ) ; \n <ect>
\t9 null , baos , url + hostname , false , null , null ) ; \n \t3 <comment> \n \t3 if ( get . fetch ( <number_literal> * 1000l , <number_literal> * 1000l , - 1l ) ) { \n \t4 if ( baos . size ( ) < dest <identifiersep> size ) { \n <ect>
\t2 if ( s <identifiersep> is <identifiersep> sanity == true && s <identifiersep> component <identifiersep> map . size ( ) == 0 ) { \n \t3 s <identifiersep> logger . error ( <string_literal> ) ; \n \t3 system . exit ( 1 ) ; } \n \t2 if ( s <identifiersep> is <identifiersep> <identifier> == true && s <identifiersep> component <identifiersep> map . size ( ) != <number_literal> ) { \n <ect>
\t1 log . debug ( <string_literal> , view <identifiersep> name ) ; } \n \t1 <comment> \n \t1 if ( persisted <identifiersep> view == null ) { \n <ect>
\t3 . prepare <identifiersep> create <identifiersep> snapshot ( <string_literal> , <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) . set <identifiersep> indices ( <string_literal> ) . get ( ) ; \n \t2 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . state ( ) , equal <identifiersep> to ( snapshot <identifiersep> state . success ) ) ; \n \t2 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . total <identifiersep> shards ( ) , \n \t3 equal <identifiersep> to ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . successful <identifiersep> shards ( ) ) ) ; \n <ect>
\t7 <identifier> <identifiersep> nic <identifiersep> dao . update ( nic . get <identifiersep> id ( ) , nic ) ; } } \n \t5 <comment> \n \t5 for ( network <identifiersep> element element : <identifier> <identifiersep> network <identifiersep> elements ) { \n <ect>
\t4 } else { \n \t5 logger . warn ( <string_literal> + item + <string_literal> ) ; \n \t5 return ; } } \n \t2 } else { \n <ect>
\t2 try { \n \t3 context . turn <identifiersep> off <identifiersep> <identifier> <identifiersep> system ( ) ; \n \t3 community <identifiersep> service . delete ( context , <identifier> <identifiersep> community ) ; \n \t2 } catch ( sql <identifiersep> exception | authorize <identifiersep> exception | io <identifiersep> exception ex ) { \n <ect>
\t4 . set <identifiersep> query ( term <identifiersep> query ( <string_literal> , <string_literal> ) ) \n \t4 . add <identifiersep> stored <identifiersep> field ( <string_literal> ) . add <identifiersep> stored <identifiersep> field ( <string_literal> ) \n \t4 . execute ( ) . action <identifiersep> get ( ) ; \n \t2 if ( search <identifiersep> response . get <identifiersep> failed <identifiersep> shards ( ) > 0 ) { \n <ect>
\t10 <comment> \n \t10 match <identifiersep> player . submit <identifiersep> deck ( match <identifiersep> player . get <identifiersep> deck ( ) ) ; } } \n \t8 match . <identifier> <identifiersep> match ( player <identifiersep> id ) ; } } } } \n \t3 } else { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 } finally { \n \t3 <comment> \n \t3 <comment> \n \t3 if ( storage <identifiersep> file != null && ! storage <identifiersep> file . delete ( ) && storage <identifiersep> file . exists ( ) ) { \n <ect>
\t2 if ( client . equals ( owner ) == false ) \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( client + <string_literal> + lock <identifiersep> path + <string_literal> + owner ) ; \n \t2 try { \n \t3 curator . delete ( ) . guaranteed ( ) . deleting <identifiersep> children <identifiersep> if <identifiersep> needed ( ) . for <identifiersep> path ( lock <identifiersep> path ) ; \n <ect>
\t3 result . <identifier> = ( accumulo <identifiersep> security <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t7 logger . debug ( <string_literal> , logger <identifiersep> constants . <identifier> , uid , \n \t9 sub <identifiersep> id ) ; \n \t7 post <identifiersep> update ( uid , sub <identifiersep> id , un <identifiersep> def <identifiersep> value . <identifier> ) ; } \n \t5 } else { \n <ect>
\t2 catch ( throwable t ) \n \t2 { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t6 if ( refresh == true || entry . get <identifiersep> value ( ) . get <identifiersep> command <identifiersep> classes ( ) . size ( ) == 0 ) { \n \t7 result . add ( this . get <identifiersep> multi <identifiersep> channel <identifiersep> capability <identifiersep> get <identifiersep> message ( entry . get <identifiersep> value ( ) ) ) ; } } } \n \t4 break ; \n \t3 default : \n <ect>
\t2 return new org . apache . thrift . async . async <identifiersep> method <identifiersep> callback < void > ( ) { \n \t2 public void on <identifiersep> complete ( void o ) { } \n \t2 public void on <identifiersep> error ( java . lang . exception e ) { \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t2 assert <identifiersep> equals ( msg <identifiersep> count , get <identifiersep> proxy <identifiersep> to <identifiersep> queue ( get <identifiersep> destination <identifiersep> name ( ) ) . get <identifiersep> queue <identifiersep> size ( ) ) ; \n \t2 subscription <identifiersep> view <identifiersep> m <identifiersep> bean subscription = get <identifiersep> proxy <identifiersep> to <identifiersep> queue <identifiersep> subscriber ( get <identifiersep> destination <identifiersep> name ( ) ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( subscription ) ; \n \t2 for ( int i = 1 ; i < = msg <identifiersep> count ; i ++ ) { \n <ect>
\t2 if ( e instanceof execution <identifiersep> exception ) { \n \t3 if ( e . get <identifiersep> cause ( ) instanceof rest <identifiersep> exception ) { \n \t4 rest <identifiersep> exception re = ( rest <identifiersep> exception ) e . get <identifiersep> cause ( ) ; \n <ect>
\t3 try { \n \t4 tm . rollback ( ) ; \n \t3 } catch ( exception exc ) { \n \t4 <comment> \n <ect>
\t2 try { \n \t3 http <identifiersep> client . execute ( post ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t3 if ( tunnel != null ) { \n \t4 if ( get <identifiersep> context ( ) . tunnel <identifiersep> manager ( ) . is <identifiersep> valid <identifiersep> tunnel ( <identifier> <identifiersep> from . calculate <identifiersep> hash ( ) , tunnel ) ) { \n \t5 if ( ! get <identifiersep> context ( ) . comm <identifiersep> system ( ) . is <identifiersep> <identifier> ( tunnel . get <identifiersep> peer ( 1 ) ) ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 <comment> \n \t4 s2 = s1 + ( ( 1 + e2 - s1 ) / <number_literal> ) ; } \n \t3 e1 = s2 - 1 ; \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 utilities . file <identifiersep> op <identifiersep> logger . trace ( <string_literal> , \n \t2 union <identifiersep> suffix , child <identifiersep> path ) ; } } } \n private static void delete <identifiersep> <identifier> <identifiersep> file ( path child <identifiersep> path , file <identifiersep> system fs ) \n \t1 throws io <identifiersep> exception , hive <identifiersep> exception { \n <ect>
\t3 socket . set <identifiersep> so <identifiersep> timeout ( old <identifiersep> timeout ) ; \n \t3 return rv ; \n \t2 } catch ( io <identifiersep> exception ioe ) { } \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 cms <identifiersep> xml <identifiersep> content content <identifiersep> xml = cms <identifiersep> xml <identifiersep> content <identifiersep> factory . unmarshal ( m <identifiersep> cms , file ) ; \n \t3 try { \n \t4 content <identifiersep> xml . validate <identifiersep> xml <identifiersep> structure ( new cms <identifiersep> xml <identifiersep> entity <identifiersep> resolver ( m <identifiersep> cms ) ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t3 socket = server <identifiersep> socket . accept ( ) ; } \n \t2 catch ( interrupted <identifiersep> io <identifiersep> exception e ) { \n \t3 <comment> \n \t2 catch ( socket <identifiersep> exception e ) { \n <ect>
\t2 if ( this . fetcher == null ) { \n \t3 logger . debug ( <string_literal> , get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t3 return false ; } \n \t2 if ( get <identifiersep> expired <identifiersep> crl <identifiersep> policy ( ) == null ) { \n <ect>
\t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } else { \n <ect>
\t3 case barrier <identifiersep> operator <identifiersep> signal <identifiersep> set : \n \t3 case barrier <identifiersep> operator <identifiersep> signal <identifiersep> report : \n \t3 case barrier <identifiersep> operator <identifiersep> signal <identifiersep> supported <identifiersep> get : \n \t3 case barrier <identifiersep> operator <identifiersep> signal <identifiersep> supported <identifiersep> report : \n <ect>
\t4 for ( string clazz : <identifier> ) { \n \t5 i <identifiersep> auto <identifiersep> credentials a = ( i <identifiersep> auto <identifiersep> credentials ) class . for <identifiersep> name ( clazz ) . new <identifiersep> instance ( ) ; \n \t5 a . prepare ( storm <identifiersep> conf ) ; \n \t5 <identifier> . add ( a ) ; } } \n <ect>
\t1 logger . info ( <string_literal> , command , result . is <identifiersep> successful ( ) ? <string_literal> : <string_literal> ) ; \n \t1 string string <identifiersep> to <identifiersep> log = result . is <identifiersep> successful ( ) ? result . get <identifiersep> stdout ( ) : result . get <identifiersep> stderr ( ) ; \n \t1 if ( string <identifiersep> to <identifiersep> log == null ) string <identifiersep> to <identifiersep> log = <string_literal> ; \n \t1 list < string > log <identifiersep> lines = splitter . fixed <identifiersep> length ( max <identifiersep> <identifier> <identifiersep> per <identifiersep> log <identifiersep> message ) . split <identifiersep> to <identifiersep> list ( string <identifiersep> to <identifiersep> log ) ; \n <ect>
\t2 if ( key . starts <identifiersep> with ( hive <identifiersep> conf . prefix <identifiersep> llap ) || key . starts <identifiersep> with ( hive <identifiersep> conf . prefix <identifiersep> hive <identifiersep> llap ) ) { \n \t2 log . warn ( <string_literal> ) ; \n \t2 conf . set ( key , ( string ) props . get <identifiersep> value ( ) ) ; \n \t2 } else { \n <ect>
\t3 triple <identifiersep> store <identifiersep> url = default <identifiersep> server <identifiersep> url + <string_literal> + karma <identifiersep> model <identifiersep> repo + <string_literal> + <string_literal> ; } \n \t2 if ( triple <identifiersep> store <identifiersep> url . char <identifiersep> at ( triple <identifiersep> store <identifiersep> url . length ( ) - 1 ) == ' / ' ) { \n \t3 triple <identifiersep> store <identifiersep> url = triple <identifiersep> store <identifiersep> url . substring ( 0 , \n \t5 triple <identifiersep> store <identifiersep> url . length ( ) - <number_literal> ) ; } \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 cache1 \n \t4 . get <identifiersep> advanced <identifiersep> cache ( ) . with <identifiersep> flags ( flag . cache <identifiersep> mode <identifiersep> local ) <comment> \n \t4 . put ( <string_literal> , wrapped <identifiersep> session ) ; \n <ect>
\t5 logger . debug ( <string_literal> + svn <identifiersep> url + <string_literal> + user <identifiersep> dir ) ; } \n \t4 long working <identifiersep> dir <identifiersep> revision = update <identifiersep> client . do <identifiersep> <identifier> ( svn <identifiersep> url , user <identifiersep> dir , null , svn <identifiersep> revision . head , svn <identifiersep> depth . <number_literal> , false ) ; \n \t4 elapsed += system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t7 owner = params . hive <identifiersep> user , \n \t7 mode = <number_literal> \n \t1 ) \n \t1 else : \n <ect>
# \n # <identifier> the ambari server . \n # \n def reset ( options ) : \n <ect>
\t2 int count = 0 ; \n \t2 for ( object ticket : result ) { \n \t3 log . info ( ticket . to <identifiersep> string ( ) ) ; \n \t3 count ++ ; } \n <ect>
\t1 if ( ! security . can <identifiersep> perform <identifiersep> system <identifiersep> actions ( credentials ) ) \n \t2 throw new accumulo <identifiersep> security <identifiersep> exception ( credentials . get <identifiersep> principal ( ) , \n \t3 security <identifiersep> error <identifiersep> code . permission <identifiersep> denied ) ; \n \t1 bulk <identifiersep> import <identifiersep> status . update <identifiersep> bulk <identifiersep> import <identifiersep> status ( files , bulk <identifiersep> import <identifiersep> state . initial ) ; \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t1 @ override \n \t1 public void collect <identifiersep> vm <identifiersep> network <identifiersep> statistics ( final user <identifiersep> vm user <identifiersep> vm ) { \n \t1 if ( ! user <identifiersep> vm . get <identifiersep> hypervisor <identifiersep> type ( ) . equals ( hypervisor <identifiersep> type . kvm ) ) \n \t3 return ; \n <ect>
\t1 <comment> \n \t1 system . out . println ( <string_literal> ) ; \n \t1 log . info ( <string_literal> + context . get <identifiersep> root <identifiersep> page ( ) ) ; \n \t1 log . info ( <string_literal> + ( context . logger == null ? <string_literal> : context . logger . to <identifiersep> string ( ) ) ) ; \n <ect>
\t4 log . warn ( <string_literal> + si . type ) ; \n \t4 new <identifier> <identifiersep> request <identifiersep> processor ( ) . process <identifiersep> request ( si ) ; } \n \t2 } catch ( missing <identifiersep> session <identifiersep> exception e ) { \n <ect>
\t4 props . get <identifiersep> string ( push <identifiersep> force <identifiersep> schema <identifiersep> key , key <identifiersep> schema ) , \n \t4 props . get <identifiersep> string ( push <identifiersep> force <identifiersep> schema <identifiersep> value , value <identifiersep> schema ) , \n \t4 description , \n \t4 <identifier> ) ; \n <ect>
\t7 try ( prepared <identifiersep> statement update <identifiersep> user <identifiersep> statistics = conn . prepare <identifiersep> statement ( <string_literal> ) ; ) { \n \t8 update <identifiersep> user <identifiersep> statistics . set <identifiersep> long ( 1 , device <identifiersep> id ) ; \n \t8 update <identifiersep> user <identifiersep> statistics . set <identifiersep> long ( <number_literal> , id ) ; \n \t8 update <identifiersep> user <identifiersep> statistics . execute <identifiersep> update ( ) ; } } } } } \n <ect>
\t2 list < collection > collections = new array <identifiersep> list < collection > ( ) ; \n \t2 try { \n \t3 context = create <identifiersep> context ( ) ; \n \t3 if ( ! ( ( limit != null ) && ( limit >= 0 ) && ( offset != null ) && ( offset >= 0 ) ) ) { \n <ect>
\t5 <identifier> . set <identifiersep> description ( description ) ; \n \t5 <identifier> . set <identifiersep> property <identifiersep> value ( version ) ; \n \t5 as . save <identifiersep> global <identifiersep> property ( <identifier> ) ; \n \t4 } else { \n <ect>
\t2 exchange . get <identifiersep> in ( ) . set <identifiersep> body ( order ) ; \n \t2 producer . process ( exchange ) ; \t3 \n \t2 if ( ! execution <identifiersep> report <identifiersep> latch . await ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t2 try { \n \t3 for ( rabbit <identifiersep> consumer consumer : this . consumers ) { \n \t4 consumer . start ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t5 return false ; } \n \t4 <identifier> <identifiersep> vm <identifiersep> dao . remove ( vm . get <identifiersep> id ( ) ) ; } \n \t3 return true ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 try { \n \t1 release <identifiersep> locks <identifiersep> and <identifiersep> commit <identifiersep> or <identifiersep> rollback ( false ) ; } \n \t1 catch ( lock <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 if ( <identifier> != null ) { \n \t3 exchange . get <identifiersep> in ( ) . set <identifiersep> header ( exchange . file <identifiersep> name , value ) ; } \n \t2 if ( value != null && value instanceof string && string <identifiersep> helper . has <identifiersep> start <identifiersep> token ( ( string ) value , <string_literal> ) ) { \n <ect>
\t1 . case <identifiersep> instance <identifiersep> id ( case <identifiersep> instance <identifiersep> id ) \n \t1 . activity <identifiersep> id ( <string_literal> ) \n \t1 . single <identifiersep> result ( ) ; \n \t1 case <identifiersep> service . <identifier> <identifiersep> start <identifiersep> case <identifiersep> execution ( third <identifiersep> task . get <identifiersep> id ( ) ) ; \n <ect>
\t2 catch ( port <identifiersep> audio <identifiersep> exception <identifier> ) \n \t2 { \n \t3 error <identifiersep> code = <identifier> . get <identifiersep> error <identifiersep> code ( ) ; \n \t3 host <identifiersep> api <identifiersep> type = <identifier> . get <identifiersep> host <identifiersep> api <identifiersep> type ( ) ; \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 template . send <identifiersep> body ( <string_literal> , <string_literal> + i ) ; } \n \t2 <comment> \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( <number_literal> , time <identifiersep> unit . seconds ) ; \n <ect>
\t4 . set <identifiersep> wait <identifiersep> for <identifiersep> nodes ( <string_literal> ) \n \t4 . set <identifiersep> wait <identifiersep> for <identifiersep> no <identifiersep> relocating <identifiersep> shards ( true ) \n \t4 . get ( ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . is <identifiersep> timed <identifiersep> out ( ) , equal <identifiersep> to ( false ) ) ; \n <ect>
\t4 builder . append ( <string_literal> ) . append ( exception . get <identifiersep> column <identifiersep> number ( ) ) ; \n \t4 builder . append ( <string_literal> ) . append ( exception . get <identifiersep> public <identifiersep> id ( ) ) ; \n \t4 builder . append ( <string_literal> ) . append ( exception . get <identifiersep> system <identifiersep> id ( ) ) ; \n \t4 builder . append ( <string_literal> ) . append ( exception . get <identifiersep> localized <identifiersep> message ( ) ) ; \n <ect>
\t4 final rpc <identifiersep> service job <identifiersep> manager <identifiersep> rpc <identifiersep> service ; \n \t4 final rpc <identifiersep> service resource <identifiersep> manager <identifiersep> rpc <identifiersep> service ; \n \t4 final rpc <identifiersep> service [ ] task <identifiersep> manager <identifiersep> rpc <identifiersep> services = new rpc <identifiersep> service [ num <identifiersep> task <identifiersep> managers ] ; \n \t4 <comment> \n <ect>
\t3 http <identifiersep> request . get <identifiersep> session ( ) . set <identifiersep> attribute ( filter <identifiersep> util . locale <identifiersep> attribute , system <identifiersep> default <identifiersep> locale ) ; \n \t3 log . info ( <string_literal> + system <identifiersep> default <identifiersep> locale ) ; \n \t2 } else { \n \t3 http <identifiersep> request . get <identifiersep> session ( ) . set <identifiersep> attribute ( filter <identifiersep> util . locale <identifiersep> attribute , locale . english . to <identifiersep> string ( ) ) ; \n <ect>
\t3 connection . close ( ) ; } } \n \t1 protected object <identifiersep> name assert <identifiersep> registered <identifiersep> object <identifiersep> name ( string name ) throws malformed <identifiersep> object <identifiersep> name <identifiersep> exception , null <identifiersep> pointer <identifiersep> exception { \n \t2 object <identifiersep> name object <identifiersep> name = new object <identifiersep> name ( name ) ; \n \t2 if ( mbean <identifiersep> server . is <identifiersep> registered ( object <identifiersep> name ) ) { \n <ect>
\t1 if ( ! parse <identifiersep> error ) { \n \t2 try { \n \t2 hook <identifiersep> runner . run <identifiersep> after <identifiersep> compilation <identifiersep> hook ( command , compile <identifiersep> error ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 final domain domain = domain <identifiersep> dao . find <identifiersep> by <identifiersep> id ( ( long ) args ) ; \n \t5 if ( ! add <identifiersep> group ( domain ) ) { \n \t6 log . warn ( string . format ( <string_literal> , domain . get <identifiersep> path ( ) , domain . get <identifiersep> id ( ) ) ) ; } \n \t4 } catch ( final exception e ) { \n <ect>
\t1 if ( files != null ) { \n \t1 for ( path path : files ) { \n \t2 utilities . file <identifiersep> op <identifiersep> logger . info ( <string_literal> , path ) ; \n \t2 try <identifiersep> delete ( fs , path ) ; } } \n <ect>
\t2 bb . put <identifiersep> long ( uuid . get <identifiersep> least <identifiersep> <identifier> <identifiersep> bits ( ) ) ; \n \t2 broadcast <identifiersep> id = bb . array ( ) ; } \n \t1 private int exception <identifiersep> count ; \n \t1 public persistent <identifiersep> cache ( string url ) { \n <ect>
\t1 boolean allow <identifiersep> admin = ( request <identifiersep> <identifier> <identifiersep> properties . get ( admin <identifiersep> override <identifiersep> allowed . class ) != null ) ; \n \t1 <comment> \n \t1 if ( required <identifiersep> bucket <identifiersep> acl <identifiersep> permissions == null && required <identifiersep> object <identifiersep> acl <identifiersep> permissions == null && required <identifiersep> actions == null && ! allow <identifiersep> admin ) { \n \t1 <comment> \n <ect>
\t1 protected void sleep ( int time ) { \n \t2 try { \n \t3 thread . sleep ( time ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 if ( all <identifiersep> devices == null || all <identifiersep> devices . is <identifiersep> empty ( ) ) { \n \t3 try { \n \t4 update <identifiersep> devices ( ) ; \n \t3 } catch ( supported <identifiersep> methods <identifiersep> exception e ) { \n <ect>
\t1 <identifier> <identifiersep> at . close ( ) \n \t1 <identifier> <identifiersep> c . close ( ) \n \t1 mx <identifiersep> c } \n private def jvm <identifiersep> outer <identifiersep> prod <identifiersep> sum ( a : matrix , b : matrix , r : option [ matrix ] = none ) : matrix = { \n <ect>
\t4 throw new io <identifiersep> exception ( hcat <identifiersep> bin + <string_literal> ) ; } \n \t3 execute <identifiersep> batch ( ) ; \n \t3 run <identifiersep> sql <identifiersep> command ( hcat <identifiersep> bin , cmd , m <identifiersep> interactive ) ; \n \t2 } else { \n <ect>
\t2 warning ( <string_literal> + \n \t4 <string_literal> ambari - server db - purge - history \\ <string_literal> , \n \t4 table <identifiersep> name , table <identifiersep> size <identifiersep> in <identifiersep> mb , table <identifiersep> size <identifiersep> limit <identifiersep> mb ) ; \n \t2 } else if ( table <identifiersep> size <identifiersep> in <identifiersep> mb != null && table <identifiersep> size <identifiersep> in <identifiersep> mb < table <identifiersep> size <identifiersep> limit <identifiersep> mb ) { \n <ect>
\t1 private static mr <identifiersep> job <identifiersep> stats add <identifiersep> failed <identifiersep> job <identifiersep> stats ( simple <identifiersep> pig <identifiersep> stats ps , job job ) { \n \t2 if ( ps . is <identifiersep> job <identifiersep> seen ( job ) ) return null ; \n \t2 mr <identifiersep> job <identifiersep> stats js = ps . add <identifiersep> mr <identifiersep> job <identifiersep> stats ( job ) ; \n \t2 if ( js == null ) { \n <ect>
\t10 virtual <identifiersep> machine <identifiersep> mo vm <identifiersep> mo = new virtual <identifiersep> machine <identifiersep> mo ( hyper <identifiersep> host . get <identifiersep> context ( ) , <identifier> . get <identifiersep> obj ( ) ) ; \n \t10 vm <identifiersep> mo . power <identifiersep> off ( ) ; \n \t10 vm <identifiersep> mo . destroy ( ) ; } } } } } } \n \t3 } else { \n <ect>
\t4 offset += ( chunk <identifiersep> length - <number_literal> - <number_literal> ) ; } \n \t3 else if ( chunk <identifiersep> type == <number_literal> ) \n \t3 { \n \t4 <comment> \n <ect>
\t5 if ( <identifier> ) { \n \t6 thread . sleep ( duration . millis ( ) ) ; } \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n \t4 } catch ( exception e ) { \n <ect>
\t1 public list < executable <identifiersep> output <identifiersep> po > get <identifiersep> job <identifiersep> outputs ( long time <identifiersep> start , long time <identifiersep> end <identifiersep> <identifier> ) throws persistent <identifiersep> exception { \n \t2 try { \n \t3 return store . get <identifiersep> all <identifiersep> resources ( resource <identifiersep> store . execute <identifiersep> output <identifiersep> resource <identifiersep> root , time <identifiersep> start , time <identifiersep> end <identifiersep> <identifier> , executable <identifiersep> output <identifiersep> po . class , job <identifiersep> output <identifiersep> serializer ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 long t1 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 refresh <identifiersep> item <identifiersep> i <identifiersep> ds ( ) ; \n \t2 refresh <identifiersep> user <identifiersep> i <identifiersep> ds ( ) ; \n \t2 long t2 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t4 m <identifiersep> cms . unlock <identifiersep> resource ( site <identifiersep> root <identifiersep> resource ) ; \n \t3 } catch ( cms <identifiersep> lock <identifiersep> exception e ) { \n \t4 log . info ( <string_literal> , e ) ; } \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t2 long now = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 new <identifiersep> packet <identifiersep> format <identifiersep> key <identifiersep> context key <identifiersep> context = session <identifiersep> key . packet <identifiersep> context ; \n \t2 added <identifiersep> acks moved = key <identifiersep> context . add <identifiersep> acks ( packet , max <identifiersep> packet <identifiersep> size , now ) ; \n \t2 if ( moved != null && moved . any <identifiersep> <identifier> <identifiersep> acks ) { \n <ect>
\t2 response response = client . target ( port <identifiersep> provider <identifiersep> util . generate <identifiersep> url ( <string_literal> , deployment . get <identifiersep> simple <identifiersep> name ( ) ) ) . request ( ) \n \t4 . post ( entity . entity ( buf , <string_literal> ) ) ; \n \t2 string response <identifiersep> str = response . read <identifiersep> entity ( string . class ) ; \n \t2 logger . info ( <string_literal> + response . get <identifiersep> status ( ) ) ; \n <ect>
\t7 log . debug ( <string_literal> ) ; \n \t7 log . debug ( <string_literal> ) ; \n \t7 log . debug ( <string_literal> , operation ) ; \n <ect>
\t4 || <identifier> . is <identifiersep> marked <identifiersep> no <identifiersep> translation ( <identifier> . get <identifiersep> <identifier> ( ) ) ) { \n \t4 log . debug ( debug <identifiersep> prefix + <string_literal> ) ; \n \t4 return status . <identifier> ; } \n \t3 if ( <identifier> . is <identifiersep> real <identifiersep> group <identifiersep> or <identifiersep> potential <identifiersep> group <identifiersep> head ( ) == <identifier> . is <identifiersep> real <identifiersep> group <identifiersep> or <identifiersep> potential <identifiersep> group <identifiersep> head ( ) ) { \n <ect>
\t2 if ( refresh <identifiersep> runnable != null ) { \n \t2 try { \n \t3 refresh <identifiersep> runnable . call ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 logger . warn ( <string_literal> + remove + <string_literal> ) ; \n \t3 return ; } \n \t2 if ( <identifier> . size ( ) == 0 ) { \n \t3 if ( debug ) \n <ect>
\t2 for ( resource res : resources ) { \n \t3 log . debug ( <string_literal> + get <identifiersep> root <identifiersep> path ( res ) ) ; \n \t3 int day = days . get ( new long ( get <identifiersep> date <identifiersep> last <identifiersep> modified ( res ) ) ) . int <identifiersep> value ( ) ; \n \t3 if ( day != last <identifiersep> day ) { \n <ect>
<comment> \n \t1 public synchronized boolean is <identifiersep> video <identifiersep> within <identifiersep> <identifier> <identifiersep> <identifier> ( input <identifiersep> file f , renderer <identifiersep> configuration media <identifiersep> renderer ) { \n \t2 if ( <string_literal> . equals ( get <identifiersep> codec <identifiersep> v ( ) ) ) { \n \t3 if ( get <identifiersep> reference <identifiersep> frame <identifiersep> count ( ) > - 1 ) { \n <ect>
private void record <identifiersep> reader <identifiersep> time ( long start <identifiersep> time ) { \n \t1 counters . incr <identifiersep> time <identifiersep> counter ( llap <identifiersep> io <identifiersep> counters . total <identifiersep> io <identifiersep> time <identifiersep> ns , start <identifiersep> time ) ; } \n private boolean process <identifiersep> stop ( ) { \n \t1 if ( ! is <identifiersep> stopped ) return false ; \n <ect>
\t2 final string metadata <identifiersep> file <identifiersep> name = get <identifiersep> backup <identifiersep> metadata <identifiersep> filename <identifiersep> prefix ( metadata <identifiersep> resource , service ) \n \t3 . concat ( get <identifiersep> backup <identifiersep> metadata <identifiersep> filename <identifiersep> suffix ( metadata <identifiersep> resource , service ) ) ; \n \t2 final file backup <identifiersep> file = new file ( this . metadata <identifiersep> backup <identifiersep> directory , metadata <identifiersep> file <identifiersep> name ) ; \n \t2 if ( backup <identifiersep> file . exists ( ) ) { \n <ect>
\t1 service <identifiersep> config <identifiersep> types = collect <identifiersep> service <identifiersep> config <identifiersep> types <identifiersep> mapping ( ) ; \n \t1 } catch ( ambari <identifiersep> exception e ) { \n \t1 log . error ( <string_literal> , e ) ; \n \t1 throw e ; } \n <ect>
\t5 transformation <identifiersep> context , transformed <identifiersep> <identifier> ) ; \n \t4 return null ; \n \t3 } , get <identifiersep> <identifier> <identifiersep> reference ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 association <identifiersep> persister . flush <identifiersep> to <identifiersep> datastore ( ) ; \n \t5 log . debug ( <string_literal> + count + <string_literal> ) ; } } \n \t3 else { \n <ect>
<comment> \n \t1 @ override \n \t1 public void naming <identifiersep> exception <identifiersep> thrown ( naming <identifiersep> exception <identifiersep> event event ) { \n <ect>
<comment> \n \t2 public void handle <identifiersep> your <identifiersep> info ( main <identifiersep> <identifier> <identifiersep> service service , \n \t8 full <identifiersep> user <identifiersep> info user <identifiersep> info ) \n \t2 { \n <ect>
\t2 <identifier> < type <identifiersep> holder > bindings \n \t4 = <identifier> . new <identifiersep> set <identifiersep> binder ( binder ( ) , type <identifiersep> holder . class ) ; \n \t2 bindings . add <identifiersep> binding ( ) . to <identifiersep> instance ( new type <identifiersep> holder ( type <identifiersep> name , record <identifiersep> parser <identifiersep> class ) ) ; } \n \t1 public < t extends remote <identifiersep> prefix <identifiersep> formatter > void add <identifiersep> remote <identifiersep> prefix <identifiersep> formatter <identifiersep> type ( string type <identifiersep> name , class < t > remote <identifiersep> prefix <identifiersep> formatter <identifiersep> class ) { \n <ect>
\t2 if ( domain <identifiersep> uri == null || domain <identifiersep> uri . is <identifiersep> empty ( ) ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( property <identifiersep> uri == null || property <identifiersep> uri . is <identifiersep> empty ( ) ) { \n <ect>
\t1 public void run ( ) { \n \t2 running = true ; \n \t2 message <identifiersep> consumer consumer = null ; \n \t2 string thread <identifiersep> name = thread . current <identifiersep> thread ( ) . get <identifiersep> name ( ) ; \n <ect>
\t1 @ produces ( constants . media <identifiersep> type <identifiersep> test <identifiersep> xml ) \n \t1 @ decorators <identifiersep> filter <identifiersep> binding \n \t1 @ decorators <identifiersep> resource <identifiersep> binding \n \t1 public ejb <identifiersep> book lookup <identifiersep> book <identifiersep> by <identifiersep> id ( @ path <identifiersep> param ( <string_literal> ) int id ) { \n <ect>
\t4 return ; \n \t3 if ( entry . get <identifiersep> data ( ) . length != <identifier> <identifiersep> entry <identifiersep> size ) { \n \t4 log log = i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( byte <identifiersep> cache . class ) ; \n \t4 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 return ; } \n \t3 if ( connection <identifiersep> notification . get <identifiersep> type ( ) . equals ( jmx <identifiersep> connection <identifiersep> notification . <identifier> <identifiersep> lost ) \n \t6 || connection <identifiersep> notification . get <identifiersep> type ( ) . equals ( jmx <identifiersep> connection <identifiersep> notification . closed ) \n \t6 || connection <identifiersep> notification . get <identifiersep> type ( ) . equals ( jmx <identifiersep> connection <identifiersep> notification . failed ) ) { \n <ect>
\t2 src . put ( orig ) ; \n \t2 src . <identifier> ( ) ; \n \t2 <identifier> <identifiersep> logger . debug ( <string_literal> + src . remaining ( ) ) ; \n \t2 int max <identifiersep> compressed <identifiersep> len = <identifier> . max <identifiersep> compressed <identifiersep> length ( src . remaining ( ) ) ; \n <ect>
\t1 } else { \n \t1 log . info ( <string_literal> ) ; \n \t1 read <identifiersep> model = new topic <identifiersep> model ( num <identifiersep> topics , num <identifiersep> terms , <identifier> , alpha , random <identifiersep> utils . get <identifiersep> random ( seed ) , null , \n \t2 num <identifiersep> train <identifiersep> threads , model <identifiersep> weight ) ; } \n <ect>
\t2 assert <identifiersep> true ( <string_literal> , \n \t4 pattern . matches ( <string_literal> , <identifier> . trim ( ) ) ) ; \n \t2 message <identifier> = list . get ( 1 ) . get <identifiersep> in ( ) ; \n \t2 string <identifier> = <identifier> . get <identifiersep> body ( string . class ) ; \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 list < open <identifiersep> <identifier> <identifiersep> controller <identifiersep> vo > devices = open <identifiersep> <identifier> <identifiersep> controller <identifiersep> mapping <identifiersep> dao . list <identifiersep> by <identifiersep> physical <identifiersep> network ( physnet . get <identifiersep> id ( ) ) ; \n \t2 if ( devices . is <identifiersep> empty ( ) ) { \n <ect>
\t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n \t6 <identifier> <identifiersep> log . debug ( <string_literal> ) ; \n \t5 socket . close ( ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t4 = i <identifiersep> audio <identifiersep> capture <identifiersep> client <identifiersep> get <identifiersep> next <identifiersep> packet <identifiersep> size ( i <identifiersep> audio <identifiersep> capture <identifiersep> client ) ; } \n \t2 catch ( h <identifiersep> result <identifiersep> exception <identifier> ) \n \t2 { \n \t3 num <identifiersep> frames <identifiersep> in <identifiersep> next <identifiersep> packet = 0 ; <comment> \n <ect>
\t10 sleep ( 100l ) ; \n \t9 } catch ( interrupted <identifiersep> exception e ) { } } \n \t7 } catch ( io <identifiersep> exception e ) { \n \t8 if ( <identifier> <identifiersep> interrupted ) { \n <ect>
\t3 { \n \t4 send <identifiersep> replication <identifiersep> notification ( notify <identifiersep> endpoint ) ; } \n \t3 public void on <identifiersep> failure ( throwable t ) \n \t3 { \n <ect>
\t3 if ( file <identifiersep> name . ends <identifiersep> with ( <string_literal> ) ) { \n \t4 try { \n \t5 create <identifiersep> template ( file , file <identifiersep> name ) ; \n \t4 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t4 connection . close ( ) ; } \n \t3 catch ( already <identifiersep> closed <identifiersep> exception <identifier> ) { \n \t4 <comment> \n \t3 catch ( exception ex ) { \n <ect>
\t3 if ( <identifier> ( curator , c , <identifier> ) ) { \n \t4 basic <identifiersep> workflow <identifiersep> service . advance ( c , <identifier> , c . get <identifiersep> current <identifiersep> user ( ) , false , true ) ; \n \t4 return true ; } \n \t2 } else { \n <ect>
<comment> \n \t2 public string build <identifiersep> combined <identifiersep> response ( string line ) { \n <ect>
\t3 for ( closeable <identifier> : to <identifiersep> close ) { \n \t4 try { \n \t5 <identifier> . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 boolean update <identifiersep> result = <identifier> <identifiersep> project <identifiersep> dao . update ( project . get <identifiersep> id ( ) , project ) ; \n \t2 if ( update <identifiersep> result ) { \n \t3 long project <identifiersep> account <identifiersep> id = project . get <identifiersep> project <identifiersep> account <identifiersep> id ( ) ; \n \t3 if ( ! <identifier> <identifiersep> account <identifiersep> mgr . disable <identifiersep> account ( project <identifiersep> account <identifiersep> id ) ) { \n <ect>
@ override \n public data <identifiersep> page read <identifiersep> page ( ) { \n \t1 if ( pages . has <identifiersep> next ( ) ) { \n \t1 data <identifiersep> page next = pages . next ( ) ; \n <ect>
\t2 <comment> \n \t2 if ( framework . get <identifiersep> atmosphere <identifiersep> config ( ) . handlers ( ) . is <identifiersep> empty ( ) ) { \n \t3 synchronized ( framework ) { \n \t4 if ( handlers . is <identifiersep> empty ( ) ) { \n <ect>
\t2 try { \n \t3 log . debug ( <string_literal> + volume <identifiersep> id + <string_literal> ) ; \n \t3 block <identifiersep> manager . <identifier> <identifiersep> volume <identifiersep> from <identifiersep> all ( volume <identifiersep> id ) ; \n \t2 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception ex ) { \n <ect>
\t1 job <identifiersep> wrapper < ? > job = active <identifiersep> jobs . get ( msg . id ) ; \n \t1 if ( job == null || ! cancel <identifiersep> job ( job ) ) { \n \t2 log . info ( <string_literal> ) ; } } \n \t1 private void handle ( channel <identifiersep> handler <identifiersep> context ctx , end <identifiersep> session msg ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 int avail <identifiersep> <identifier> = math . min ( ( max <identifiersep> k <identifiersep> <identifier> <identifiersep> in * <number_literal> * <number_literal> / <number_literal> ) - used <identifiersep> in , ( max <identifiersep> k <identifiersep> <identifier> <identifiersep> out * <number_literal> * <number_literal> / <number_literal> ) - used <identifiersep> out ) ; \n \t2 if ( avail <identifiersep> <identifier> < min <identifiersep> available <identifiersep> <identifier> ) { \n <ect>
\t5 cert <identifiersep> chain <identifiersep> file . delete ( ) ; } \n \t4 if ( root <identifiersep> ca <identifiersep> cert <identifiersep> file != null ) { \n \t5 root <identifiersep> ca <identifiersep> cert <identifiersep> file . delete ( ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 else { \n \t4 local <identifiersep> methods . add ( method ) ; } } \n \t2 for ( constructor < ? > <identifier> : finder . get <identifiersep> annotated <identifiersep> <identifier> ( ) ) { \n \t3 if ( local <identifiersep> <identifier> . contains ( <identifier> ) ) { \n <ect>
\t4 x <identifiersep> wiki <identifiersep> document doc ; \n \t4 try { \n \t5 doc = xwiki . get <identifiersep> document ( <identifier> <identifiersep> reference , xcontext ) ; \n \t4 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t2 if ( vpc . get <identifiersep> state ( ) != vpc . state . enabled ) { \n \t3 try { \n \t4 <identifier> <identifiersep> vpc <identifiersep> service . start <identifiersep> vpc ( vpc . get <identifiersep> id ( ) , true ) ; \n \t3 } catch ( resource <identifiersep> unavailable <identifiersep> exception | insufficient <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 @ deprecated \n \t1 public map < string , object > <identifier> ( ) { \n <ect>
\t4 project <identifiersep> ticket <identifiersep> search <identifiersep> criteria search <identifiersep> criteria = search <identifiersep> field <identifiersep> info . build <identifiersep> search <identifiersep> criteria ( base <identifiersep> criteria , search <identifiersep> field <identifiersep> infos ) ; \n \t4 search <identifiersep> criteria . set <identifiersep> project <identifiersep> ids ( new set <identifiersep> search <identifiersep> field < > ( current <identifiersep> project <identifiersep> variables . get <identifiersep> project <identifiersep> id ( ) ) ) ; \n \t4 query <identifiersep> <identifier> ( search <identifiersep> criteria ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 return up <identifiersep> prot . up ( msg ) ; \n \t2 switch ( hdr . type ) { \n \t3 case verify <identifiersep> header . are <identifiersep> you <identifiersep> dead : \n \t4 if ( hdr . from == null ) { \n <ect>
\t2 if ( domain . get <identifiersep> parent ( ) != null && domain . get <identifiersep> parent ( ) . long <identifiersep> value ( ) >= domain <identifiersep> vo . root <identifiersep> domain ) { \n \t3 parent = domain . get <identifiersep> parent ( ) . long <identifiersep> value ( ) ; } \n \t2 domain <identifiersep> vo parent <identifiersep> domain = find <identifiersep> by <identifiersep> id ( parent ) ; \n \t2 if ( parent <identifiersep> domain == null ) { \n <ect>
\t2 if ( ! has <identifiersep> next ) { \n \t3 log . debug ( <string_literal> ) ; \n \t3 close ( ) ; } \n \t2 else { \n <ect>
\t5 action <identifiersep> queue . clear ( ) ; } \n \t4 break ; \n \t3 case pass <identifiersep> priority <identifiersep> until <identifiersep> stack <identifiersep> resolved : \n \t4 if ( recording <identifiersep> macro ) { \n <ect>
\t5 return false ; } \n \t4 try { \n \t5 unix <identifiersep> time = src . to <identifiersep> unix ( in ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t3 result <identifiersep> set rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( rs . next ( ) ) { \n \t4 return long . value <identifiersep> of ( rs . get <identifiersep> long ( 1 ) ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t3 } else if ( ( replicate <identifiersep> start <identifiersep> time > 0 ) && ( backup <identifiersep> start <identifiersep> time == 0 ) ) { \n \t4 log . warn ( <string_literal> , get <identifiersep> name ( ) ) ; \n \t4 exec <identifiersep> replicate ( null , null , false , false , false ) ; \n \t3 } else if ( is <identifiersep> backing <identifiersep> up ( ) ) { \n <ect>
\t3 synchronized ( obj ) \n \t3 { \n \t4 logger . debug ( <string_literal> ) ; \n \t4 obj . wait ( <number_literal> ) ; \n <ect>
\t3 vpn . delete ( self . apiclient ) \n \t2 except exception as e : \n \t3 self . fail ( e ) \n \t2 finally : \n <ect>
\t2 try { \n \t3 file <identifier> <identifiersep> config = new file ( <identifier> <identifiersep> config ) ; \n \t3 if ( <identifier> <identifiersep> config . exists ( ) ) { \n \t4 new jmx <identifiersep> collector ( <identifier> <identifiersep> config ) . register ( ) ; \n <ect>
\t2 try { \n \t2 log . debug ( <string_literal> , tmp . get <identifiersep> path ( ) ) ; \n \t2 get <identifiersep> tablet <identifiersep> server ( ) . get <identifiersep> file <identifiersep> system ( ) . delete ( tmp . get <identifiersep> path ( ) ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t1 load <identifiersep> balancing <identifiersep> <identifier> . update <identifiersep> load <identifiersep> balancer ( ctx . get <identifiersep> account <identifiersep> number ( ) , lb <identifiersep> name ) ; \n \t1 } catch ( final load <identifiersep> balancing <identifiersep> exception ex ) { \n \t1 throw ex ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t5 dev . enqueue <identifiersep> message ( <identifier> , m <identifiersep> feature ) ; \n \t5 msg <identifier> = dev . make <identifiersep> <identifier> ( <identifier> <identifiersep> command <identifiersep> code , ( byte ) <identifier> ) ; <comment> \n \t5 dev . enqueue <identifiersep> message ( <identifier> , m <identifiersep> feature ) ; \n \t5 string on <identifiersep> off = cmd == on <identifiersep> off <identifiersep> type . on ? <string_literal> : <string_literal> ; \n <ect>
\t8 + network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) + <string_literal> ) ; \n \t4 <comment> \n \t6 <identifier> <identifiersep> dc <identifiersep> dao . add <identifiersep> vnet ( network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , network . get <identifiersep> id ( ) , add <identifiersep> <identifier> <identifiersep> final ) ; } \n \t5 if ( remove <identifiersep> <identifier> <identifiersep> final != null ) { \n <ect>
\t4 1 ) ; \n \t2 params . put ( virtual <identifiersep> machine <identifiersep> profile . param . re <identifiersep> program <identifiersep> network , true ) ; \n \t2 account owner = <identifier> <identifiersep> account <identifiersep> service . get <identifiersep> active <identifiersep> account <identifiersep> by <identifiersep> name ( <string_literal> , new long ( 1 ) ) ; \n \t2 deploy <identifiersep> destination dest = new deploy <identifiersep> destination ( dc , pod , null , null ) ; \n <ect>
\t2 if ( pm . get <identifiersep> reset ( ) . is <identifiersep> security <identifiersep> questions <identifiersep> enabled ( ) ) { \n \t3 final list < string > questions = base <identifiersep> password <identifiersep> management <identifiersep> service \n \t5 . <identifier> <identifiersep> security <identifiersep> questions ( password <identifiersep> management <identifiersep> service . get <identifiersep> security <identifiersep> questions ( username ) ) ; \n \t3 if ( questions . is <identifiersep> empty ( ) ) { \n <ect>
\t1 public dr <identifiersep> sub <identifiersep> master <identifiersep> criteria ( string <identifier> , boolean <identifier> <identifiersep> method , boolean <identifier> <identifiersep> time <identifiersep> format , string <identifier> , string <identifier> <identifiersep> values <identifiersep> use <identifiersep> type , boolean <identifier> <identifiersep> edges , ns <identifiersep> array <identifier> <identifiersep> values ) { \n \t3 log . debug ( <string_literal> , <identifier> ) ; \n \t3 log . debug ( <string_literal> , <identifier> <identifiersep> method ) ; \n <ect>
\t2 if ( now - last <identifiersep> <identifier> > <identifier> <identifiersep> time ) { \n \t3 last <identifiersep> <identifier> = now ; \n \t3 map < object , ack <identifiersep> object > tmp = pending . <identifier> ( ) ; \n \t3 if ( tmp . size ( ) > 0 ) { \n <ect>
\t1 this . ack <identifiersep> enabled = ( <identifier> <identifiersep> count > 0 ) ; \n \t1 log . debug ( <string_literal> , <identifier> <identifiersep> count ) ; } \n \t1 else { <comment> \n \t1 this . ack <identifiersep> enabled = true ; \n <ect>
\t3 result <identifiersep> mime <identifiersep> type = status . mime <identifiersep> type ; \n \t2 } catch ( unsafe <identifiersep> content <identifiersep> type <identifiersep> exception e ) { \n \t3 unsafe = true ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 } else { \n \t5 serialize <identifiersep> root ( writer , key , value , graph <identifiersep> <identifier> <identifiersep> query , path ) ; } \n \t3 } catch ( throwable t ) { \n \t4 t . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
<comment> \n \t5 if ( e . get <identifiersep> response ( ) . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) == <number_literal> ) { \n \t6 logger . warn ( <string_literal> ) ; \n \t5 } else { \n <ect>
\t1 logger . debug ( <string_literal> ) ; \n \t1 map < component <identifiersep> visitor , long > <identifier> <identifiersep> <identifier> = <identifier> <identifiersep> crawler . get <identifiersep> <identifier> <identifiersep> <identifier> ( ) ; \n \t1 for ( component <identifiersep> visitor visitor : <identifier> ) { \n <ect>
\t2 read <identifiersep> process <identifiersep> event . fire ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 return id ; } \n \t1 public ejb <identifiersep> book lookup <identifiersep> book <identifiersep> by <identifiersep> id ( @ path <identifiersep> param ( <string_literal> ) int id ) { \n <ect>
\t2 resource <identifiersep> unavailable <identifiersep> exception , insufficient <identifiersep> capacity <identifiersep> exception { \n \t2 if ( dest . get <identifiersep> data <identifiersep> center ( ) . get <identifiersep> network <identifiersep> type ( ) == data <identifiersep> center . network <identifiersep> type . advanced ) { \n \t3 return true ; } \n \t2 if ( offering . is <identifiersep> system <identifiersep> only ( ) || ! can <identifiersep> handle ( dest , offering . get <identifiersep> traffic <identifiersep> type ( ) , network . get <identifiersep> guest <identifiersep> type ( ) ) ) { \n <ect>
\t5 key = <identifier> . generate <identifiersep> key <identifiersep> pair ( ) ; \n \t5 sig = signature . get <identifiersep> instance ( default <identifiersep> hash <identifiersep> algorithm , jce <identifiersep> loader . <identifier> <identifiersep> <identifier> ) ; \n \t5 <identifier> <identifiersep> sign ( key , sig ) ; } \n \t3 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t3 popup <identifiersep> should <identifiersep> save ( e ) ; \n \t3 start <identifiersep> engine ( true ) ; \n \t2 } else if ( e . get <identifiersep> action <identifiersep> command ( ) . equals ( action <identifiersep> names . action <identifiersep> stop ) ) { \n \t3 if ( engine != null ) { \n <ect>
\t4 socket <identifiersep> manager = build <identifiersep> socket <identifiersep> manager ( tunnel , <identifier> ) ; \n \t4 <comment> \n \t4 i2p <identifiersep> session sub = add <identifiersep> <identifier> ( tunnel ) ; \n \t4 if ( sub != null && <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 } catch ( sql <identifiersep> exception e ) { \n \t3 <comment> \n \t3 throw e ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 return ticket ; } \n \t1 @ override \n \t1 public void add <identifiersep> ticket ( final ticket ticket ) { \n \t2 this . entity <identifiersep> manager . persist ( ticket ) ; \n <ect>
\t4 location = node . get <identifiersep> location ( ) ; \n \t4 <comment> \n \t4 if ( node . get <identifiersep> manufacturer ( ) == integer . max <identifiersep> value || node . get <identifiersep> home <identifiersep> id ( ) != controller . home <identifiersep> id \n \t6 || node . get <identifiersep> node <identifiersep> id ( ) != node <identifiersep> id ) { \n <ect>
\t2 sc . set <identifiersep> parameters ( <string_literal> , store <identifiersep> id ) ; \n \t2 sc . set <identifiersep> parameters ( <string_literal> , false ) ; \n \t2 list < template <identifiersep> data <identifiersep> store <identifiersep> vo > <identifier> = list <identifiersep> by ( sc ) ; \n \t2 if ( <identifier> != null ) { \n <ect>
\t1 static { \n \t2 logger . info ( <string_literal> ) ; \n \t2 resteasy <identifiersep> provider <identifiersep> factory factory = resteasy <identifiersep> provider <identifiersep> factory . get <identifiersep> instance ( ) ; \n \t2 delegate = factory . get <identifiersep> message <identifiersep> body <identifiersep> reader ( interceptor <identifiersep> book . class , null , null , constants . media <identifiersep> type <identifiersep> test <identifiersep> xml <identifiersep> type ) ; \n <ect>
\t5 date cut <identifiersep> time = new date ( date <identifiersep> util . current <identifiersep> <identifier> <identifiersep> time ( ) . get <identifiersep> time ( ) - <number_literal> ) ; \n \t5 list < check <identifiersep> point <identifiersep> vo > l = <identifier> <identifiersep> <identifier> <identifiersep> dao . list <identifiersep> <identifier> <identifiersep> by <identifiersep> cut <identifiersep> time ( cut <identifiersep> time ) ; \n \t5 cleanup <identifiersep> <identifier> ( l ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t7 log . debug ( <string_literal> , current <identifiersep> rpc <identifiersep> connection . get <identifiersep> target <identifiersep> address ( ) ) ; } \n \t5 } else { \n \t6 log . debug ( <string_literal> , current <identifiersep> rpc <identifiersep> connection . get <identifiersep> target <identifiersep> address ( ) ) ; } \n \t4 } else { \n <ect>
\t2 for ( snapshot <identifiersep> shard <identifiersep> failure failure : snapshot <identifiersep> info . shard <identifiersep> failures ( ) ) { \n \t3 assert <identifiersep> not <identifiersep> null ( failure . reason ( ) ) ; } } \n \t1 @ <identifier> <identifiersep> fix ( bug <identifiersep> url = <string_literal> ) \n \t1 public void test <identifiersep> master <identifiersep> shutdown <identifiersep> during <identifiersep> failed <identifiersep> snapshot ( ) throws exception { \n <ect>
\t2 get <identifiersep> index <identifiersep> templates <identifiersep> response get <identifiersep> <identifier> = \n \t3 client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> get <identifiersep> templates ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) ; \n \t2 assert <identifiersep> that ( get <identifiersep> <identifier> . get <identifiersep> index <identifiersep> templates ( ) , has <identifiersep> size ( 0 ) ) ; } \n \t1 public void test <identifiersep> that <identifiersep> get <identifiersep> index <identifiersep> templates <identifiersep> with <identifiersep> simple <identifiersep> regex <identifiersep> works ( ) throws exception { \n <ect>
\t4 @ override public void call ( ) throws exception { \n \t5 int cnt = 0 ; \n \t5 while ( ! stop . get ( ) ) { \n \t6 if ( ++ cnt % <number_literal> == 0 ) \n <ect>
\t4 action <identifiersep> proxy <identifiersep> factory obj = container . get <identifiersep> instance ( action <identifiersep> proxy <identifiersep> factory . class , factory <identifiersep> name ) ; \n \t4 if ( obj != null ) { \n \t5 action <identifiersep> proxy <identifiersep> factories . put ( factory <identifiersep> prefix , obj ) ; \n \t4 } else { \n <ect>
\t1 } else { \n \t2 current <identifiersep> length = length ; \n \t2 current <identifiersep> header = byte <identifiersep> buffer . allocate ( <number_literal> ) . put <identifiersep> int ( length ) ; \n \t2 writes . add ( current <identifiersep> header ) ; \n <ect>
\t3 return ; \n \t2 try { \n \t3 jmx <identifiersep> configurator . unregister ( this , util . get <identifiersep> m <identifiersep> bean <identifiersep> server ( ) , <string_literal> ) ; } \n \t2 catch ( exception ex ) { \n <ect>
\t4 s <identifiersep> lock <identifiersep> logger . trace ( <string_literal> + time . first ( ) + <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - time . second ( ) ) ) ; } \n \t3 <identifier> <identifiersep> lock <identifiersep> times . clear ( ) ; } } \n \t1 public boolean commit ( ) { \n \t2 if ( ! <identifier> <identifiersep> txn ) { \n <ect>
\t4 cost = index . get <identifiersep> cost ( filter , root <identifiersep> state ) ; } \n \t4 log <identifiersep> debug ( <string_literal> + index <identifiersep> name + <string_literal> + cost ) ; } \n \t3 if ( cost < 0 ) { \n <ect>
\t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 return false ; } } \n \t2 if ( host <identifiersep> uuid == null ) { \n <ect>
\t4 . set <identifiersep> patient ( not <identifiersep> preferred ) \n \t4 . create <identifiersep> <identifier> <identifiersep> search <identifiersep> criteria ( ) ; \n \t2 for ( <identifier> e : es . get <identifiersep> <identifier> ( not <identifiersep> preferred <identifiersep> patient <identifiersep> <identifier> <identifiersep> search <identifiersep> criteria ) ) { \n \t3 e . set <identifiersep> patient ( preferred ) ; \n <ect>
\t5 if ( file . get <identifiersep> name ( ) . ends <identifiersep> with ( cache <identifiersep> type . to <identifiersep> string ( ) ) \n \t7 || file . get <identifiersep> name ( ) . ends <identifiersep> with ( string . format ( <string_literal> , cache <identifiersep> type . to <identifiersep> string ( ) , current <identifiersep> version ) ) ) \n \t5 { \n \t6 if ( ! file . delete ( ) ) \n <ect>
\t3 <comment> \n \t3 timestamp action <identifiersep> check <identifiersep> ts = new timestamp ( system . current <identifiersep> time <identifiersep> millis ( ) - action <identifiersep> check <identifiersep> delay * <number_literal> ) ; \n \t3 timestamp <identifier> <identifiersep> <identifier> = coord <identifiersep> action . get <identifiersep> last <identifiersep> modified <identifiersep> timestamp ( ) ; \n \t3 if ( <identifier> <identifiersep> <identifier> . after ( action <identifiersep> check <identifiersep> ts ) ) { \n <ect>
\t2 final settable <identifiersep> future < file > future = settable <identifiersep> future . create ( ) ; \n \t2 executor . submit ( new runnable ( ) { \n \t3 @ override public void run ( ) { \n \t4 try { \n <ect>
\t3 f . delete ( ) ; \n \t3 if ( report <identifiersep> exists <identifiersep> after && f . exists ( ) ) \n \t4 log . warn ( file <identifiersep> ops . class , <string_literal> + f ) ; } \n \t2 catch ( security <identifiersep> exception ex ) { \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t4 source . get <identifiersep> repository ( ) . shutdown ( ) ; \n \t4 started = true ; } \n \t3 for ( commit <identifiersep> hook hook : hooks ) { \n <ect>
\t2 mock <identifiersep> endpoint mock = get <identifiersep> mock <identifiersep> endpoint ( <string_literal> ) ; \n \t2 mock . expected <identifiersep> message <identifiersep> count ( size ) ; \n \t2 for ( int i = 0 ; i < size ; i ++ ) { \n \t3 template . send <identifiersep> body ( <string_literal> , message ) ; \n <ect>
\t5 return ; } \n \t4 get <identifiersep> controller ( ) . poll <identifiersep> node ( get <identifiersep> node ( ) ) ; \n \t4 break ; \n \t3 default : \n <ect>
\t4 thread . set <identifiersep> context <identifiersep> class <identifiersep> loader ( get <identifiersep> instance ( ) ) ; } } } \n \t1 <comment> \n \t1 private static list < thread > list <identifiersep> threads ( thread <identifiersep> group group , string indent ) { \n \t2 list < thread > thread <identifiersep> to <identifiersep> return = new array <identifiersep> list < > ( ) ; \n <ect>
\t3 if ( lock == null ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 return ; } \n \t3 if ( ! lock . lock ( <number_literal> ) ) { \n <ect>
<comment> \n private void queue <identifiersep> node <identifiersep> for <identifiersep> re <identifiersep> <identifier> ( final node <identifiersep> info node <identifiersep> info ) { \n \t1 if ( disabled <identifiersep> nodes <identifiersep> queue . remove ( node <identifiersep> info ) ) { \n <ect>
\t1 protected void start <identifiersep> shared <identifiersep> connection ( ) { \n \t2 try { \n \t3 super . start <identifiersep> shared <identifiersep> connection ( ) ; } \n \t2 catch ( exception ex ) { \n <ect>
\t2 <identifier> <identifiersep> setup ( ) ; } \n \t1 @ override \n \t1 public boolean test ( ) { \n \t2 log . info ( <string_literal> ) ; \n <ect>
<comment> \n public void cancel <identifiersep> operation ( operation <identifiersep> handle op <identifiersep> handle ) throws hive <identifiersep> sql <identifiersep> exception { \n \t1 cancel <identifiersep> operation ( op <identifiersep> handle , <string_literal> ) ; } \n public void close <identifiersep> operation ( operation <identifiersep> handle op <identifiersep> handle ) throws hive <identifiersep> sql <identifiersep> exception { \n <ect>
\t6 false , \n \t6 cms <identifiersep> resource <identifiersep> filter . ignore <identifiersep> expiration ) ) { \n \t6 return cms <identifiersep> menu <identifiersep> item <identifiersep> visibility <identifiersep> mode . visibility <identifiersep> <identifier> ; } \n \t4 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t7 } else { \n \t8 return ( ( <identifier> ) left <identifiersep> value ) . compare <identifiersep> to ( right <identifiersep> value ) ; } } } \n \t5 return 0 ; \n \t4 } catch ( exception e ) { \n <ect>
\t6 status <identifiersep> as <identifiersep> string ( ) , leader <identifiersep> context , prev <identifiersep> log <identifiersep> term ) ; \n \t4 return ; } \n \t3 if ( does <identifiersep> not <identifiersep> exist <identifiersep> in <identifiersep> log ( prev <identifiersep> log <identifiersep> index , prev <identifiersep> log <identifiersep> term ) ) \n \t3 { \n <ect>
\t2 || name . starts <identifiersep> with ( <string_literal> ) ) { \n \t2 sb . append ( file . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t2 sb . append ( file . path <identifiersep> separator ) ; } } \n \t1 if ( sb . length ( ) < 1 ) { \n <ect>
\t1 status = replication <identifiersep> statuses . values ( ) . iterator ( ) . next ( ) ; \n \t1 log . info ( <string_literal> , <identifier> <identifiersep> util . to <identifiersep> string ( status ) ) ; \n \t1 if ( status . get <identifiersep> closed ( ) ) { \n \t2 return ; } \n <ect>
\t1 this . elapsed <identifiersep> time = event <identifiersep> end <identifiersep> timestamp - event <identifiersep> start <identifiersep> timestamp ; \n \t1 wm <identifiersep> context wm <identifiersep> context = session <identifiersep> state . get <identifiersep> wm <identifiersep> context ( ) ; \n \t1 if ( wm <identifiersep> context != null ) { \n \t1 wm <identifiersep> context . add <identifiersep> wm <identifiersep> event ( this ) ; \n <ect>
\t4 <comment> \n \t4 buffered <identifiersep> image image = get <identifiersep> window <identifiersep> image ( <identifier> <identifiersep> window <identifiersep> id ) ; \n \t4 if ( image == null ) { \n \t5 <comment> \n <ect>
\t3 if ( args . length > <number_literal> ) { \n \t4 if ( boolean . parse <identifiersep> boolean ( args [ <number_literal> ] . trim ( ) ) ) { \n \t5 is <identifiersep> shared = true ; \n \t4 } else if ( <string_literal> . equals <identifiersep> ignore <identifiersep> case ( args [ <number_literal> ] . trim ( ) ) ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 if ( ! platform . is <identifiersep> windows ( ) ) { \n \t4 set <identifiersep> utf8 ( ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
<comment> \n \t1 public void send <identifiersep> command ( int device <identifiersep> id , int message <identifiersep> group <identifiersep> id , int message <identifiersep> id , int <identifier> <identifiersep> time , command command ) { \n \t2 string cmd = prepare <identifiersep> command ( device <identifiersep> id , message <identifiersep> group <identifiersep> id , message <identifiersep> id , <identifier> <identifiersep> time , command ) ; \n \t2 if ( cmd != <string_literal> ) { \n <ect>
\t4 call <identifiersep> peer <identifiersep> <identifier> . set <identifiersep> conf <identifiersep> info <identifiersep> scheduled ( false ) ; \n \t4 return ; } } \n \t2 catch ( xmpp <identifiersep> exception <identifier> ) \n \t2 { \n <ect>
\t2 thread . sleep ( <number_literal> ) ; \n \t2 app . get <identifiersep> bean ( <string_literal> , producer <identifiersep> template . class ) . send <identifiersep> body ( <string_literal> , <string_literal> ) ; \n \t2 mock . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 <comment> \n <ect>
\t2 try ( output <identifiersep> stream out = new buffered <identifiersep> output <identifiersep> stream ( new file <identifiersep> output <identifiersep> stream ( <identifier> ) ) ) { \n \t3 backup ( location , out ) ; } \n \t2 catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 public string get <identifiersep> name ( ) { \n \t2 if ( get <identifiersep> person ( ) != null && get <identifiersep> person ( ) . get <identifiersep> person <identifiersep> name ( ) != null ) { \n \t3 return get <identifiersep> person ( ) . get <identifiersep> person <identifiersep> name ( ) . get <identifiersep> full <identifiersep> name ( ) ; \n \t2 } else { \n <ect>
\t1 logger . info ( <string_literal> ) ; \n \t1 domain <identifiersep> bundles . for <identifiersep> each ( ( domain <identifiersep> bundle ) - > mule . deploy <identifiersep> domain <identifiersep> bundle ( domain <identifiersep> bundle ) ) ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 domains . for <identifiersep> each ( ( domain ) - > <identifier> <identifiersep> domain ( domain ) ) ; \n <ect>
\t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; \n \t3 } else if ( this . rotation <identifiersep> policy instanceof file <identifiersep> size <identifiersep> rotation <identifiersep> policy ) { \n \t4 long rotation <identifiersep> bytes = ( ( file <identifiersep> size <identifiersep> rotation <identifiersep> policy ) rotation <identifiersep> policy ) . get <identifiersep> max <identifiersep> bytes ( ) ; \n \t4 log . warn ( <string_literal> , rotation <identifiersep> bytes ) ; \n <ect>
\t3 candidate <identifiersep> hosts . add <identifiersep> all ( component <identifiersep> hosts . key <identifiersep> set ( ) ) ; } } \n \t1 } else { \n \t2 <comment> \n \t2 candidate <identifiersep> hosts . add <identifiersep> all ( clusters . get <identifiersep> hosts <identifiersep> for <identifiersep> cluster ( cluster . get <identifiersep> cluster <identifiersep> name ( ) ) . key <identifiersep> set ( ) ) ; } \n <ect>
\t2 } catch ( unsupported <identifiersep> operation <identifiersep> exception err ) { \n \t3 log . error ( <string_literal> , url , err ) ; \n \t3 show <identifiersep> browser <identifiersep> warning ( url ) ; \n \t2 } catch ( security <identifiersep> exception err ) { \n <ect>
\t1 } else { \n \t1 db <identifiersep> clock <identifiersep> delta = <number_literal> ; } \n \t1 logger . debug ( <string_literal> ) ; \n \t1 if ( ! agent <identifiersep> loader . load <identifiersep> agent <identifiersep> from <identifiersep> classpath ( <string_literal> , <string_literal> ) ) { \n <ect>
\t1 try { \n \t2 synchronized ( date <identifiersep> format ) { \n \t2 return date <identifiersep> format . parse ( date . to <identifiersep> string ( ) ) ; } \n \t1 } catch ( parse <identifiersep> exception ioe ) { \n <ect>
\t3 return ; } \n \t2 final int port = port <identifiersep> assignment . unique ( ) ; \n \t2 log . info ( <string_literal> + bind <identifiersep> address + <string_literal> ) ; \n \t2 final string <identifier> = bind <identifiersep> address + <string_literal> + port ; \n <ect>
\t2 } catch ( malformed <identifiersep> url <identifiersep> exception | no <identifiersep> such <identifiersep> method <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception | invocation <identifiersep> target <identifiersep> exception e ) { \n \t3 fail ( <string_literal> + directory + <string_literal> + e . get <identifiersep> message ( ) ) ; } } \n \t1 @ after <identifiersep> class \n \t1 public static void tear <identifiersep> down ( ) throws exception { \n <ect>
\t1 public service retrieve ( final request <identifiersep> context request <identifiersep> context , final web <identifiersep> context web <identifiersep> context , final base <identifiersep> client client ) { \n \t2 final string client <identifiersep> id = get <identifiersep> delegated <identifiersep> client <identifiersep> id ( web <identifiersep> context , client ) ; \n \t2 final transient <identifiersep> session <identifiersep> ticket ticket = this . ticket <identifiersep> registry . get <identifiersep> ticket ( client <identifiersep> id , transient <identifiersep> session <identifiersep> ticket . class ) ; \n \t2 if ( ticket == null ) { \n <ect>
\t4 if ( ! is <identifiersep> child <identifiersep> builder ( ) ) { \n \t5 update <identifiersep> count = 0 ; } } \n \t3 return s <identifiersep> state ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <identifier> <identifiersep> <identifier> <identifiersep> component <identifier> = <identifier> . get <identifiersep> component ( <identifier> <identifiersep> <identifier> <identifiersep> component . class ) ; \n \t2 if ( <identifier> != null ) { \n \t3 <identifier> <identifier> = <identifier> . source <identifiersep> mesh . get <identifiersep> <identifier> ( ) ; \n \t3 return <identifier> . max <identifiersep> y ( ) - <identifier> . min <identifiersep> y ( ) ; } \n <ect>
\t6 log . warn ( <string_literal> + n . state \n \t7 + <string_literal> + n . sid + <string_literal> ) ; \n \t6 break ; } \n \t4 } else { \n <ect>
\t1 throws ambari <identifiersep> exception { \n \t1 lock . lock ( ) ; \n \t1 try { \n \t1 service <identifiersep> component component = get <identifiersep> service <identifiersep> component ( component <identifiersep> name ) ; \n <ect>
\t2 } catch ( insufficient <identifiersep> privileges <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> , user , id , e . get <identifiersep> message ( ) , e ) ; \n \t3 return response . status ( response . status . unauthorized ) . entity ( e . get <identifiersep> message ( ) ) . build ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 map < string , set < string > > <identifier> <identifiersep> apps <identifiersep> data <identifiersep> from <identifiersep> store = null ; \n \t1 try { \n \t1 <identifier> <identifiersep> apps <identifiersep> data <identifiersep> from <identifiersep> store = cache <identifiersep> manager . get <identifiersep> <identifier> <identifiersep> apps <identifiersep> from <identifiersep> store ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t7 cause = t . to <identifiersep> string ( ) ; } \n \t6 msg = msg + <string_literal> + cause ; } \n \t5 j <identifiersep> meter <identifiersep> utils . report <identifiersep> error <identifiersep> to <identifiersep> user ( msg ) ; \n \t4 } catch ( exception err ) { \n <ect>
\t1 public void set <identifiersep> last <identifiersep> update ( date last <identifiersep> update ) { \n \t2 this . last <identifiersep> update = last <identifiersep> update ; } \n \t1 @ post <identifiersep> update \n \t1 private void some <identifiersep> <identifier> <identifiersep> update <identifiersep> working ( ) { \n <ect>
\t3 @ override \n \t3 public void run ( ) { \n \t4 try { \n \t5 if ( ! <identifier> . send ( ) ) \n <ect>
\t3 try { \n \t4 socket . reset ( ) ; \n \t3 } catch ( io <identifiersep> exception ioe ) { } \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t3 try { \n \t4 completed = schema <identifiersep> completion ( sql , default <identifiersep> schema ) ; \n \t3 } catch ( sql <identifiersep> parse <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
\t6 log . debug ( <string_literal> + endpoint + <string_literal> + endpoint . get <identifiersep> camel <identifiersep> context ( ) ) ; } } } \n \t3 break ; \n \t2 case disconnected : \n \t3 try { \n <ect>
\t3 if ( pref != null ) { \n \t4 if ( value != null ) { \n \t5 string encoded <identifiersep> value = encoded <identifiersep> value ( value ) ; \n \t5 if ( object <identifiersep> utils . not <identifiersep> equal ( encoded <identifiersep> value , pref . value <identifiersep> for <identifiersep> key ( <string_literal> ) ) ) { \n <ect>
\t3 assert <identifiersep> equals ( 0 , failure <identifiersep> counter . get ( ) ) ; \n \t3 assert <identifiersep> equals ( requests , success <identifiersep> counter . get ( ) + timeout <identifiersep> counter . get ( ) ) ; \n \t3 return timeout <identifiersep> counter . get ( ) ; } \n \t2 finally { \n <ect>
\t6 params . put ( <string_literal> , message ) ; \n \t6 try { \n \t7 sub . invoke <identifiersep> method ( <string_literal> , params , false ) ; \n \t6 } catch ( framework <identifiersep> exception e ) { \n <ect>
\t2 if ( ! files . exists ( directory ) ) { \n \t3 logger . debug ( <string_literal> , directory . to <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 return false ; } \n \t2 if ( ! files . is <identifiersep> directory ( directory ) ) { \n <ect>
\t5 increment <identifiersep> receive <identifiersep> counter ( ) ; } \n \t4 get <identifiersep> metrics ( ) . after <identifiersep> receive ( ) ; \n \t4 <identifier> = true ; } \n <ect>
\t1 public void enable ( ) { \n \t2 set <identifiersep> switch <identifiersep> state ( on <identifiersep> off <identifiersep> value . <identifier> ) ; \n \t2 m <identifiersep> bricklet <identifiersep> <identifier> master <identifiersep> <identifier> = get <identifiersep> mbrick ( ) ; \n \t2 if ( master <identifiersep> <identifier> == null ) { \n <ect>
\t3 if ( arg != null ) { \n \t4 try { \n \t5 max <identifiersep> sql <identifiersep> size = integer . parse <identifiersep> int ( arg . to <identifiersep> string ( ) ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t2 <comment> \n \t2 secure <identifiersep> key <identifiersep> cache <identifier> = <identifier> <identifiersep> handle . key <identifiersep> manager ( ) . get <identifiersep> secure <identifiersep> key <identifiersep> cache ( ) ; \n \t2 if ( ( null != expected <identifiersep> key <identifiersep> id ) && ( <identifier> . contains <identifiersep> key ( expected <identifiersep> key <identifiersep> id ) ) ) { \n \t3 unwrapped <identifiersep> key = <identifier> . get <identifiersep> key ( expected <identifiersep> key <identifiersep> id ) ; \n <ect>
\t2 int <identifier> = 0 ; \n \t2 logger . info ( <string_literal> , legacy <identifiersep> peers <identifiersep> name , peers <identifiersep> name ) ; \n \t2 for ( <identifier> <identifiersep> result <identifiersep> set . row row : rows ) \n \t2 { \n <ect>
\t3 run <identifiersep> command ( command , out ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 <identifier> <identifiersep> log . error ( <string_literal> , ioe ) ; } } \n \t1 private void run <identifiersep> command ( string command , output <identifiersep> stream out ) throws io <identifiersep> exception { \n <ect>
\t3 <comment> \n \t3 string <identifier> <identifiersep> display <identifiersep> name = xcontext . get <identifiersep> wiki ( ) . get <identifiersep> plain <identifiersep> user <identifiersep> name ( attachment . get <identifiersep> <identifier> <identifiersep> reference ( ) , xcontext ) ; \n \t3 solr <identifiersep> document . add <identifiersep> field ( field <identifiersep> utils . attachment <identifiersep> <identifier> <identifiersep> display , <identifier> <identifiersep> display <identifiersep> name ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 binary <identifiersep> references <identifiersep> index index = null ; \n \t2 try { \n \t3 index = binary <identifiersep> references <identifiersep> index <identifiersep> loader . parse <identifiersep> binary <identifiersep> references <identifiersep> index ( archive . get <identifiersep> binary <identifiersep> references ( ) ) ; \n \t2 } catch ( invalid <identifiersep> binary <identifiersep> references <identifiersep> index <identifiersep> exception | io <identifiersep> exception e ) { \n <ect>
\t1 private void handle <identifiersep> error ( string msg ) { \n \t2 <identifier> <identifiersep> collector . report <identifiersep> error ( new exception ( <string_literal> + msg ) ) ; } \n \t1 @ override \n \t1 public void activate ( ) { \n <ect>
\t2 if ( contains <identifiersep> advanced <identifiersep> search <identifiersep> characters ( search <identifiersep> text ) ) \n \t2 { \n \t3 { \n <ect>
\t3 <identifier> <identifiersep> id = id ; } \n \t2 @ override \n \t2 public void execute ( tuple tuple ) { \n \t3 <identifier> <identifiersep> count ++ ; \n <ect>
\t4 logger . trace ( <string_literal> , sync <identifiersep> id ) ; \n \t4 return synced <identifiersep> flush <identifiersep> result . commit <identifiersep> mismatch ; } \n \t3 logger . trace ( <string_literal> , sync <identifiersep> id ) ; \n \t3 commit <identifiersep> index <identifiersep> writer ( index <identifiersep> writer , translog , sync <identifiersep> id ) ; \n <ect>
\t6 <string_literal> + <identifier> + \n \t6 <string_literal> + <identifier> + \n \t6 <string_literal> + <identifier> ) ; \n \t3 <comment> \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 get <identifiersep> entity <identifiersep> manager ( ) . flush ( ) ; \n \t3 get <identifiersep> entity <identifiersep> manager ( ) . clear ( ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t1 } else { \n \t2 logger . info ( <string_literal> ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t4 perform <identifiersep> <identifier> ( cfs , ranges , <identifier> , <identifier> <identifiersep> at ) ; } \n \t2 } ; \n \t2 if ( executor . is <identifiersep> shutdown ( ) ) \n \t2 { \n <ect>
\t5 this . empty = this . lock . new <identifiersep> condition ( ) ; } \n \t3 } finally { \n \t4 lock . unlock ( ) ; } } \n \t2 if ( <identifier> ) { \n <ect>
\t1 protected static void safe <identifiersep> execute ( runnable task ) { \n \t2 try { \n \t3 task . run ( ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 client client = client <identifiersep> builder . new <identifiersep> client ( ) ; \n \t2 web <identifiersep> target base = client . target ( port <identifiersep> provider <identifiersep> util . generate <identifiersep> url ( <string_literal> , war <identifiersep> lib <identifiersep> into <identifiersep> war <identifiersep> classes <identifiersep> test . class . get <identifiersep> simple <identifiersep> name ( ) ) ) ; \n \t2 response response = base . request ( ) . get ( ) ; \n <ect>
\t7 try { \n \t8 os . close ( ) ; \n \t8 if ( ! dst . is <identifiersep> valid ( ) ) { \n \t9 dst . delete ( ) ; \n <ect>
\t2 reset <identifiersep> mock ( count ) ; \n \t2 stop <identifiersep> watch watch = new stop <identifiersep> watch ( ) ; \n \t2 execute ( count ) ; \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( ) ; \n <ect>
\t7 return true ; } \n \t6 is <identifiersep> admin = false ; \n \t6 return false ; \n \t5 } catch ( io <identifiersep> exception | interrupted <identifiersep> exception e ) { \n <ect>
\t3 str <identifiersep> tree = hts <identifiersep> reader . load ( num <identifiersep> states , hts <identifiersep> data . get <identifiersep> tree <identifiersep> str <identifiersep> stream ( ) , hts <identifiersep> data . get <identifiersep> pdf <identifiersep> str <identifiersep> stream ( ) , pdf <identifiersep> file <identifiersep> format . str , \n \t5 feature <identifiersep> def , <identifier> <identifiersep> translator ) ; \n \t3 str <identifiersep> <identifier> = hts <identifiersep> reader . get <identifiersep> vector <identifiersep> size ( ) ; } \n \t2 if ( hts <identifiersep> data . get <identifiersep> tree <identifiersep> <identifier> <identifiersep> stream ( ) != null ) { \n <ect>
\t2 { \n \t3 dsg = dataset <identifiersep> graph <identifiersep> factory . create ( ) ; \n \t3 <comment> \n \t3 string filename = get <identifiersep> value ( arg <identifiersep> file ) ; \n <ect>
\t2 vpc <identifiersep> off . update ( self . apiclient , state = 'enabled' ) \n \t2 self . perform <identifiersep> vpc <identifiersep> tests ( vpc <identifiersep> off ) \n \t1 @ attr ( tags = [ <string_literal> ] , required <identifiersep> hardware = <string_literal> ) \n \t1 def <identifier> <identifiersep> test <identifiersep> <number_literal> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> check <identifiersep> interface ( self ) : \n <ect>
\t2 vm <identifiersep> instance <identifiersep> vo vm = <identifier> <identifiersep> instance <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm == null ) { \n \t3 return new console <identifiersep> access <identifiersep> authentication <identifiersep> answer ( cmd , false ) ; } \n \t2 if ( vm . get <identifiersep> host <identifiersep> id ( ) == null ) { \n <ect>
\t4 channel . send ( res ) ; \n \t5 int heartbeat = channel . get <identifiersep> url ( ) . get <identifiersep> parameter ( constants . heartbeat <identifiersep> key , 0 ) ; \n <ect>
\t3 if ( ! valid && auto <identifiersep> create ) { \n \t4 valid = auto <identifiersep> create <identifiersep> <identifier> <identifiersep> metadata <identifiersep> field ( context , name ) ; } \n \t3 if ( valid ) { \n \t4 <comment> \n <ect>
\t3 int res = blocking <identifiersep> source . read ( buffer ) ; \n \t3 if ( res == - 1 ) { \n \t4 return out . to <identifiersep> byte <identifiersep> array ( ) ; \n \t3 } else if ( res == 0 ) { \n <ect>
\t1 <identifier> . execute ( ) ; \n \t1 <comment> \n \t1 final properties group <identifiersep> names = new properties ( ) ; \n \t1 group <identifiersep> names . load ( new file <identifiersep> input <identifiersep> stream ( group <identifiersep> name <identifiersep> mapping <identifiersep> file ) ) ; \n <ect>
\t3 int block <identifiersep> no = i / block <identifiersep> size ; \n \t3 random <identifiersep> <identifier> <identifiersep> array <identifiersep> item ret , <identifier> ; \n \t3 ret = blocks [ block <identifiersep> no ] . <identifier> [ i % block <identifiersep> size ] ; \n \t3 if ( ret == null ) { \n <ect>
\t6 string key <identifiersep> versions = future . get ( ) ; \n \t6 kv <identifiersep> writer . append ( key <identifiersep> versions ) ; } } } \n \t3 return true ; \n \t2 } catch ( decoder <identifiersep> exception de ) { \n <ect>
\t3 serializer <identifiersep> type + <string_literal> + \n \t3 event <identifiersep> serializer . builder . class . get <identifiersep> name ( ) ; \n \t2 throw new flume <identifiersep> exception ( err <identifiersep> message ) ; } \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t2 value <identifiersep> map map <identifiersep> value ; \n \t2 try { \n \t3 map <identifiersep> value = value . as <identifiersep> map ( ) ; \n \t2 } catch ( value <identifiersep> translation <identifiersep> exception <identifier> ) { \n <ect>
\t2 for ( remote <identifiersep> module <identifiersep> extension ext : remote <identifiersep> module <identifiersep> extension . values ( ) ) { \n \t3 meta <identifiersep> reader . register <identifiersep> extension ( ext . get <identifiersep> key ( ) , ext . get <identifiersep> value <identifiersep> type ( ) ) ; } } \n \t1 @ override \n \t1 public module <identifiersep> registry call ( ) throws io <identifiersep> exception { \n <ect>
\t1 if ( lifecycle <identifiersep> manager . get <identifiersep> state ( ) . is <identifiersep> started ( ) ) { \n \t1 try { \n \t2 get <identifiersep> lifecycle <identifiersep> manager ( ) . fire <identifiersep> lifecycle ( <identifier> . phase <identifiersep> name ) ; \n \t1 } catch ( lifecycle <identifiersep> exception e ) { \n <ect>
\t5 + <string_literal> ) ) ; \n \t2 } catch ( timeout <identifiersep> exception e ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 } finally { \n \t3 lock . unlock ( ) ; } \n \t2 task <identifiersep> info task <identifiersep> info = delayed <identifiersep> task <identifiersep> queue . peek ( ) ; \n \t2 if ( task <identifiersep> info == null ) { \n <ect>
\t3 <comment> \n \t3 try { \n \t4 this . exception <identifiersep> handler . handle <identifiersep> uncaught <identifiersep> exception ( ex , method , params ) ; } \n \t3 catch ( throwable ex2 ) { \n <ect>
\t1 except exception as e : \n \t2 logger . error ( <string_literal> . format ( options . credentials <identifiersep> file ) ) \n \t2 return - 1 \n \t1 else : \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 if ( new <identifiersep> level != null && new <identifiersep> level . to <identifiersep> string ( ) . equals ( target <identifiersep> level ) ) { \n <ect>
\t1 if ( <identifier> <identifiersep> input <identifiersep> stream != null ) { \n \t2 try { \n \t2 <identifier> <identifiersep> input <identifiersep> stream . close ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 return f ; } \n \t1 @ override \n \t1 public future < object > broadcast ( object msg , atmosphere <identifiersep> resource r ) { \n \t2 if ( destroyed . get ( ) ) { \n <ect>
\t5 connection = create <identifiersep> socket ( ) ; \n \t5 connection . get <identifiersep> output <identifiersep> stream ( ) . write ( <identifier> ) ; \n \t5 connection . get <identifiersep> output <identifiersep> stream ( ) . flush ( ) ; \n \t4 } catch ( exception ex ) { \n <ect>
\t2 op . get ( <string_literal> ) . set ( <string_literal> ) ; \n \t2 op . get ( <string_literal> ) . set ( <string_literal> + vault <identifiersep> password <identifiersep> string + <string_literal> ) ; \n \t2 op . get ( operation <identifiersep> headers ) . get ( allow <identifiersep> resource <identifiersep> service <identifiersep> restart ) . set ( true ) ; \n \t2 management <identifiersep> client . get <identifiersep> controller <identifiersep> client ( ) . execute ( new operation <identifiersep> builder ( op ) . build ( ) ) ; \n <ect>
\t5 <identifier> <identifiersep> fire <identifiersep> util . <identifier> <identifiersep> fire <identifiersep> connection <identifier> <identifiersep> connection = <identifier> <identifiersep> fire <identifiersep> util . get <identifiersep> <identifier> <identifiersep> fire <identifiersep> connection ( storage <identifiersep> pool <identifiersep> id , <identifier> <identifiersep> storage <identifiersep> pool <identifiersep> details <identifiersep> dao ) ; \n \t5 long <identifier> <identifiersep> template <identifiersep> volume <identifiersep> id = long . parse <identifiersep> long ( template <identifiersep> pool <identifiersep> ref . get <identifiersep> local <identifiersep> download <identifiersep> path ( ) ) ; \n \t5 <identifier> <identifiersep> fire <identifiersep> util . delete <identifiersep> volume ( <identifier> <identifiersep> connection , <identifier> <identifiersep> template <identifiersep> volume <identifiersep> id ) ; } \n \t4 catch ( exception ex ) { \n <ect>
\t5 throw new assertion <identifiersep> error ( <string_literal> + reason + <string_literal> ) ; } } } \n \t2 return true ; } \n \t1 protected void run <identifiersep> task ( update <identifiersep> task task ) { \n \t2 if ( ! lifecycle . started ( ) ) { \n <ect>
\t5 if ( <identifier> != null ) \n \t5 { \n \t6 if ( ! <identifier> . equals ( <identifier> ) ) { \n \t7 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n <ect>
\t1 protected void close <identifiersep> entity <identifiersep> manager <identifiersep> factory ( ) { \n \t2 if ( <identifier> != null ) { \n \t3 <identifier> . close ( ) ; \n \t3 <identifier> = null ; } \n <ect>
\t3 try { \n \t4 cur . connection <identifiersep> checked <identifiersep> in ( event ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 producer <identifiersep> thread . run ( ) ; \n \t2 producer <identifiersep> thread . set <identifiersep> message <identifiersep> priority ( low <identifiersep> pri ) ; \n \t2 producer <identifiersep> thread . set <identifiersep> message <identifiersep> count ( 1 ) ; \n \t2 producer <identifiersep> thread . run ( ) ; \n <ect>
\t1 { \n \t2 <comment> \n \t2 service <identifiersep> impl = create <identifiersep> service <identifiersep> impl ( ) ; \n <ect>
\t2 } catch ( sax <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + <identifier> <identifiersep> server <identifiersep> name + <string_literal> + filename , e ) ; \n \t3 system . exit ( 1 ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
@ slf4j \n public class cas <identifiersep> core <identifiersep> ticket <identifiersep> catalog <identifiersep> configuration extends base <identifiersep> ticket <identifiersep> catalog <identifiersep> configurer { \n \t1 @ override \n \t1 public final void configure <identifiersep> ticket <identifiersep> catalog ( final ticket <identifiersep> catalog plan ) { \n <ect>
\t1 private cdi <identifiersep> injection <identifiersep> dependent <identifiersep> scoped dependent ; \n \t1 @ inject \n \t1 private cdi <identifiersep> injection <identifiersep> stateful <identifiersep> ejb stateful ; \n \t1 static { \n <ect>
\t3 count . increment ( ) ; \n \t2 else { \n \t3 count = new erx <identifiersep> mutable <identifiersep> integer ( 1 ) ; \n \t3 <identifier> <identifiersep> reference <identifiersep> counters ( ) . set <identifiersep> object <identifiersep> for <identifiersep> key ( count , key ) ; } \n <ect>
\t3 ) , \n \t3 sql <identifiersep> std <identifiersep> operator <identifiersep> table . scalar <identifiersep> query . create <identifiersep> call ( sql <identifiersep> parser <identifiersep> pos . zero , \n \t4 sql <identifiersep> std <identifiersep> operator <identifiersep> table . union <identifiersep> all \n \t5 . create <identifiersep> call ( sql <identifiersep> parser <identifiersep> pos . zero , union <identifiersep> <identifier> , union <identifiersep> <identifier> ) ) ) ; \n <ect>
\t3 final logical <identifiersep> switch <identifiersep> port new <identifiersep> port = nicira <identifiersep> nvp <identifiersep> api . create <identifiersep> logical <identifiersep> switch <identifiersep> port ( logical <identifiersep> switch <identifiersep> uuid , logical <identifiersep> switch <identifiersep> port ) ; \n \t3 try { \n \t4 nicira <identifiersep> nvp <identifiersep> api . update <identifiersep> logical <identifiersep> switch <identifiersep> port <identifiersep> attachment ( command . get <identifiersep> logical <identifiersep> switch <identifiersep> uuid ( ) , new <identifiersep> port . get <identifiersep> uuid ( ) , new <identifier> <identifiersep> attachment ( attachment <identifiersep> uuid ) ) ; \n \t3 } catch ( final nicira <identifiersep> nvp <identifiersep> api <identifiersep> exception ex ) { \n <ect>
\t1 log . error ( <string_literal> , e ) ; } \n \t1 try { \n \t1 bucket <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . stop ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 return null ; } \n \t3 <comment> \n \t3 if ( data <identifiersep> to <identifiersep> send != null ) { \n \t4 <comment> \n <ect>
\t4 string activator <identifiersep> class <identifiersep> name = activator . get <identifiersep> class ( ) . get <identifiersep> name ( ) ; \n \t4 <comment> \n \t4 try { \n \t5 activator . stop ( this ) ; \n <ect>
\t6 ret = 1 \n \t3 if <identifier> and run <identifiersep> hook ( logger , <identifier> , \n \t9 os . path . join ( source <identifiersep> root , \n <number_literal> args . project ) ) != 0 : \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + lb . get <identifiersep> id ( ) + <string_literal> + instance <identifiersep> ids ) ; } \n \t4 if ( <identifier> <identifiersep> lb2vm <identifiersep> map <identifiersep> dao . list <identifiersep> by <identifiersep> load <identifiersep> balancer <identifiersep> id ( lb . get <identifiersep> id ( ) ) . is <identifiersep> empty ( ) ) { \n \t5 lb . set <identifiersep> state ( firewall <identifiersep> rule . state . add ) ; \n \t5 <identifier> <identifiersep> lb <identifiersep> dao . persist ( lb ) ; \n <ect>
\t2 try { \n \t3 all <identifiersep> bad <identifiersep> keys <identifiersep> read <identifiersep> latch . await ( ) ; \n \t3 bad <identifiersep> key <identifiersep> reader <identifiersep> service . shutdown ( ) ; \n \t3 bad <identifiersep> key <identifiersep> reader <identifiersep> service . await <identifiersep> termination ( long . max <identifiersep> value , time <identifiersep> unit . nanoseconds ) ; \n <ect>
\t2 string key = entry . get <identifiersep> key ( ) ; \n \t2 string value = entry . get <identifiersep> value ( ) ; \n \t2 conf . set ( key , value ) ; } \n \t1 } else { \n <ect>
\t1 slider <identifiersep> app <identifiersep> name = <string_literal> \n \t1 stop <identifiersep> cmd = [ <string_literal> , <string_literal> , slider <identifiersep> app <identifiersep> name ] \n \t1 code , output , error = shell . call ( stop <identifiersep> cmd , user = params . hive <identifiersep> user , stderr = <identifier> . pipe , <identifier> = true ) \n \t1 if code == 0 : \n <ect>
\t1 @ override \n \t1 public void close ( ) throws io <identifiersep> exception { \n \t2 logger . debug ( <string_literal> ) ; } \n \t1 private void prepare ( ) throws io <identifiersep> exception , interrupted <identifiersep> exception { \n <ect>
\t2 final optional < user <identifiersep> profile > profile = manager . get ( true ) ; \n \t2 if ( ! profile . is <identifiersep> present ( ) ) { \n \t3 throw new unauthorized <identifiersep> service <identifiersep> exception ( <string_literal> ) ; } \n \t2 final user <identifiersep> profile u <identifiersep> profile = profile . get ( ) ; \n <ect>
\t4 if ( event <identifiersep> type == token . start <identifiersep> entity ) { \n \t5 find <identifiersep> record ( project , parser , record <identifiersep> path , 0 , root <identifiersep> column <identifiersep> group , limit -- , parameters ) ; } } \n \t2 } catch ( tree <identifiersep> reader <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t3 try { \n \t4 cur . command <identifiersep> succeeded ( event ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 sb . append ( ' \\ n' ) ; \n \t4 line = order <identifiersep> status <identifiersep> reply . read <identifiersep> line ( ) ; } \n \t3 log . info ( <string_literal> + sb ) ; } \n \t2 order <identifiersep> status <identifiersep> reply . close ( ) ; \n <ect>
\t3 get <identifiersep> info <identifiersep> type . get <identifiersep> get <identifiersep> info <identifiersep> type ( req . get <identifiersep> info <identifiersep> type ( ) ) ) ; \n \t1 resp . set <identifiersep> info <identifiersep> value ( get <identifiersep> info <identifiersep> value . to <identifiersep> t <identifiersep> get <identifiersep> info <identifiersep> value ( ) ) ; \n \t1 resp . set <identifiersep> status ( ok <identifiersep> status ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 input <identifiersep> stream response <identifiersep> input <identifiersep> stream = context . get <identifiersep> url <identifiersep> stream <identifiersep> provider ( ) . read <identifiersep> as <identifiersep> current ( ats <identifiersep> url , <string_literal> , \n \t2 ( string ) null , new hash <identifiersep> map < string , string > ( ) ) ; \n \t1 response = io <identifiersep> utils . to <identifiersep> string ( response <identifiersep> input <identifiersep> stream ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n public exchange create <identifiersep> exchange <identifiersep> without <identifiersep> specification ( class < ? extends exchange > exchange <identifiersep> class ) { \n \t1 assert . not <identifiersep> null ( exchange <identifiersep> class , <string_literal> ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public boolean supports ( class < ? > c ) { \n <ect>
\t1 { \n \t1 <identifier> <identifiersep> hash <identifiersep> function = new uri <identifiersep> regex <identifiersep> hash ( hash <identifiersep> config ) ; } \n \t1 else \n \t1 { \n <ect>
\t6 logger . warn ( <string_literal> , item <identifiersep> command ) ; } } \n \t4 logger . trace ( <string_literal> , soap <identifiersep> to <identifiersep> string ( msg ) ) ; \n \t3 } catch ( exception e ) { \n \t4 logger . warn ( <string_literal> , e . get <identifiersep> message ( ) ) ; \n <ect>
\t2 this . event <identifiersep> handler = event <identifiersep> handler ; } \n \t1 @ override \n \t1 public void start ( ) throws exception { \n \t2 if ( serialized <identifiersep> executor == null ) { \n <ect>
\t3 final list < object > id <identifiersep> attribute <identifiersep> as <identifiersep> list = attributes . get ( this . configuration . get <identifiersep> identity <identifiersep> attribute ( ) ) ; \n \t3 if ( id <identifiersep> attribute <identifiersep> as <identifiersep> list . size ( ) > 1 ) { \n \t4 logger . warn ( <string_literal> , id <identifiersep> attribute ) ; } \n \t3 final string principal <identifiersep> id = id <identifiersep> attribute <identifiersep> as <identifiersep> list . get ( 0 ) . to <identifiersep> string ( ) ; \n <ect>
\t1 @ override \n \t1 protected void shutdown <identifiersep> application ( application <identifiersep> status final <identifiersep> status , string optional <identifiersep> diagnostics ) { } \n \t1 @ override \n \t1 protected void fatal <identifiersep> error ( string message , throwable error ) { \n <ect>
\t5 logger . debug ( <string_literal> + custom <identifiersep> package ) ; } } \n \t2 package <identifiersep> manager . set <identifiersep> protocol <identifiersep> prefix <identifiersep> list ( packages ) ; \n \t2 package <identifiersep> manager . commit <identifiersep> protocol <identifiersep> prefix <identifiersep> list ( ) ; \n \t2 if ( logger <identifiersep> is <identifiersep> debug <identifiersep> enabled ) \n <ect>
\t8 if ( rmv <identifiersep> col == null ) \n \t9 rmv <identifiersep> col = new linked <identifiersep> list < > ( ) ; \n \t8 rmv <identifiersep> col . add ( key ) ; } \n <ect>
\t3 message message = new message ( destination <identifiersep> address , body ) ; \n \t3 message . set <identifiersep> src ( source <identifiersep> address ) ; \n \t3 channel . send ( message ) ; \n \t2 } else { \n <ect>
\t2 managed <identifiersep> region <identifiersep> broker <identifier> = ( managed <identifiersep> region <identifiersep> broker ) broker . get <identifiersep> region <identifiersep> broker ( ) ; \n \t2 org . apache . activemq . broker . region . queue queue = ( queue ) <identifier> . add <identifiersep> destination ( new connection <identifiersep> context ( ) , new active <identifiersep> mq <identifiersep> queue ( <identifier> ) , true ) ; \n \t2 assert . assert <identifiersep> true ( <string_literal> + <identifier> , queue . is <identifiersep> <identifier> <identifiersep> messages ( ) ) ; \n \t2 long limit = queue . get <identifiersep> memory <identifiersep> usage ( ) . get <identifiersep> limit ( ) ; \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 tx <identifiersep> in . get <identifiersep> script <identifiersep> sig ( ) . correctly <identifiersep> <identifier> ( tx , i , tx <identifiersep> in . get <identifiersep> connected <identifiersep> output ( ) . get <identifiersep> script <identifiersep> pub <identifiersep> key ( ) ) ; \n <ect>
\t4 return false ; } \n \t3 set < policy > associated <identifiersep> policies = policy . get <identifiersep> associated <identifiersep> policies ( ) ; \n \t3 <comment> \n \t3 if ( associated <identifiersep> policies == null || associated <identifiersep> policies . is <identifiersep> empty ( ) ) { \n <ect>
public class test <identifiersep> low <identifiersep> level <identifiersep> <identifier> <identifiersep> cache <identifiersep> policy { \n private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( test <identifiersep> low <identifiersep> level <identifiersep> <identifier> <identifiersep> cache <identifiersep> policy . class ) ; \n @ test \n public void test <identifiersep> <identifier> <identifiersep> hive <identifiersep> <number_literal> ( ) throws exception { \n <ect>
\t4 case <string_literal> : \n \t5 event . set <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> ref ( ( string ) value ) ; \n \t5 break ; \n \t4 default : \n <ect>
\t3 } else { \n \t4 <comment> \n \t4 <comment> \n \t4 <comment> \n <ect>
\t3 get <identifiersep> gson ( ) . to <identifiersep> json ( <identifier> , fos ) ; \n \t2 } catch ( io <identifiersep> exception ioex ) { \n \t3 logger . warn ( <string_literal> , ioex ) ; } } \n \t1 private void export <identifiersep> <identifier> ( final path target ) throws framework <identifiersep> exception { \n <ect>
\t2 kie <identifiersep> container <identifiersep> impl kie <identifiersep> container = classpath <identifiersep> k <identifiersep> container ; <comment> \n \t2 if ( release <identifiersep> id != null ) { \n \t3 kie <identifiersep> container = ( kie <identifiersep> container <identifiersep> impl ) <identifier> . get ( release <identifiersep> id ) ; \n \t3 if ( kie <identifiersep> container == null ) { \n <ect>
\t3 <comment> \n \t3 server = ( xmpp <identifiersep> server <identifiersep> embedded ) application <identifiersep> context . get <identifiersep> bean ( <string_literal> ) ; \n \t3 assert <identifiersep> not <identifiersep> null ( server ) ; \n \t3 thread . sleep ( <number_literal> ) ; \n <ect>
<comment> \n \t1 public void index <identifiersep> source <identifiersep> tree ( final folder root <identifiersep> folder ) { \n <ect>
\t1 try { \n \t1 direct <identifiersep> dependencies = dependency <identifiersep> resolver . get <identifiersep> direct <identifiersep> dependencies ( artifact <identifiersep> to <identifiersep> <identifier> , root <identifiersep> artifact <identifiersep> remote <identifiersep> repositories ) ; \n \t1 } catch ( artifact <identifiersep> descriptor <identifiersep> exception e ) { \n \t1 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + artifact <identifiersep> to <identifiersep> <identifier> + <string_literal> , e ) ; } \n <ect>
\t2 # register proxy handler for https protocol since this is what \n \t2 # we will be using for requests . \n \t2 # \n \t2 proxy <identifiersep> handler = proxy <identifiersep> handler ( { <identifier> : proxy } ) \n <ect>
\t1 if retry <identifiersep> <identifier> >= window <identifiersep> in <identifiersep> min : \n \t1 logger . warn ( <string_literal> ) \n \t1 return \n \t1 if max <identifiersep> lifetime <identifiersep> count < 0 or max <identifiersep> lifetime <identifiersep> count < max <identifiersep> count : \n <ect>
\t2 if ( ! inner . verify ( cert ) ) { \n \t3 throw new web <identifiersep> application <identifiersep> exception ( <number_literal> ) ; } \n \t2 final <identifier> <identifiersep> input < string > <identifier> = inner . get <identifiersep> entity ( ) ; \n \t2 string secret = <identifier> . get <identifiersep> entity ( private <identifiersep> key , cert ) ; \n <ect>
\t3 while ( ! request . problem <identifiersep> occurred ( ) && request . get <identifiersep> output ( ) == null && system . current <identifiersep> time <identifiersep> millis ( ) - t <identifiersep> start < time <identifiersep> limit ) { \n \t4 do <identifiersep> wait ( time <identifiersep> limit ) ; } \n \t3 if ( request . get <identifiersep> output ( ) == null ) { \n \t4 if ( request . problem <identifiersep> occurred ( ) ) { \n <ect>
\t3 return <string_literal> ; } \n \t2 return <identifier> . get <identifiersep> <identifier> ( ) . to <identifiersep> string ( ) ; } \n \t1 private void <identifier> <identifiersep> changed ( string player <identifiersep> id , <identifier> <identifiersep> <identifier> new <identifiersep> <identifier> ) { \n \t2 string title = get <identifiersep> title ( new <identifiersep> <identifier> ) ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t2 byte [ ] bytes = serializer . serialize ( s ) ; \n \t2 try { \n \t3 return data <identifiersep> set . delete ( bytes ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t9 return disk <identifiersep> info ; } } } \n \t6 if ( disk <identifiersep> info == null ) { \n \t7 disk <identifiersep> info = disk <identifiersep> info <identifiersep> builder . get <identifiersep> disk <identifiersep> info <identifiersep> by <identifiersep> device <identifiersep> bus <identifiersep> name ( info <identifiersep> in <identifiersep> chain . get <identifiersep> disk <identifiersep> device <identifiersep> bus <identifiersep> name ( ) ) ; \n \t7 if ( disk <identifiersep> info != null ) { \n <ect>
\t5 return credentials ; } \n \t3 } else if ( auth <identifiersep> policy . basic . equals <identifiersep> ignore <identifiersep> case ( auth <identifiersep> scope . get <identifiersep> scheme ( ) ) \n \t5 || auth <identifiersep> policy . digest . equals <identifiersep> ignore <identifiersep> case ( auth <identifiersep> scope . get <identifiersep> scheme ( ) ) ) { \n \t4 if ( has <identifiersep> credentials ( ) ) { \n <ect>
\t2 if ( event <identifiersep> container <identifiersep> map . contains <identifiersep> key ( event <identifiersep> container . get <identifiersep> event <identifiersep> id ( ) ) ) { \n \t3 event <identifiersep> container event <identifiersep> container <identifiersep> old = event <identifiersep> container <identifiersep> map . get ( event <identifiersep> container . get <identifiersep> event <identifiersep> id ( ) ) ; \n \t3 <comment> \n \t3 if ( event <identifiersep> container . get <identifiersep> last <identifiersep> changed ( ) . is <identifiersep> after ( event <identifiersep> container <identifiersep> old . get <identifiersep> last <identifiersep> changed ( ) ) ) { \n <ect>
\t3 logger . info ( <string_literal> , total <identifiersep> num <identifiersep> docs ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 indexer . stop ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n <ect>
\t3 catch ( exception e ) \n \t3 { \n \t4 { \n <ect>
\t3 http <identifiersep> servlet <identifiersep> request request = servlet <identifiersep> web <identifiersep> request . get <identifiersep> request ( ) ; \n \t3 http <identifiersep> servlet <identifiersep> response response = servlet <identifiersep> web <identifiersep> request . get <identifiersep> response ( ) ; \n \t3 if ( response != null && response . is <identifiersep> committed ( ) ) { \n <ect>
\t1 @ override \n \t1 public void exit ( ) { \n \t2 client <identifiersep> j <identifiersep> meter <identifiersep> engine . tidy <identifiersep> rmi ( log ) ; <comment> \n \t2 if ( remote <identifiersep> system <identifiersep> exit ) { <comment> \n <ect>
\t2 resolve <identifiersep> properties ( true , object , null ) ; } \n \t1 public void resolve <identifiersep> properties <identifiersep> ignore <identifiersep> required ( object object ) { \n \t2 resolve <identifiersep> properties ( false , object , null ) ; } \n \t1 private void handle <identifiersep> injection <identifiersep> of <identifiersep> field ( boolean <identifier> , object object , field <identifiersep> access field ) { \n <ect>
<comment> \n \t2 public synchronized void schedule ( long timeout <identifiersep> ms ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t5 if ( statement != null ) { \n \t6 try { \n \t7 statement . close ( ) ; } \n \t6 catch ( exception statement <identifiersep> close <identifiersep> ex ) { \n <ect>
\t4 for ( pif pif : nr . <identifier> <identifiersep> fs ) { \n \t5 pif . record pr = pif . get <identifiersep> record ( conn ) ; \n \t5 if ( <identifier> <identifiersep> host . uuid . equals ( pr . host . get <identifiersep> uuid ( conn ) ) ) { \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 log . debug ( <string_literal> , url ) ; \n \t5 cs . start ( ) ; \n <ect>
\t4 . get <identifiersep> end <identifiersep> index ( ) , query . get <identifiersep> result <identifiersep> size ( ) , results ) ; \n \t2 <comment> \n \t2 string elapsed <identifiersep> time = format <identifiersep> <identifier> <identifiersep> time ( start <identifiersep> time , system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t2 <identifier> <identifiersep> results . set <identifiersep> elapsed <identifiersep> time ( elapsed <identifiersep> time ) ; \n <ect>
\t6 || value . equals ( <string_literal> ) \n \t6 || value . equals ( <string_literal> ) \n \t4 ) { \n \t5 if ( output <identifiersep> format != 0 && output <identifiersep> format != output <identifiersep> format <identifiersep> <identifier> ) { \n <ect>
\t2 log . debug ( <string_literal> , registry <identifiersep> name ) ; \n \t2 metric <identifiersep> registry result = get <identifiersep> metric <identifiersep> registry <identifiersep> from <identifiersep> camel <identifiersep> registry ( camel <identifiersep> registry , registry <identifiersep> name ) ; \n \t2 if ( result == null ) { \n \t3 log . debug ( <string_literal> , registry <identifiersep> name ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 <comment> \n \t2 string server <identifiersep> <number_literal> = internal <identifiersep> cluster ( ) . start <identifiersep> node ( ) ; \n \t2 <comment> \n <ect>
\t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t6 <identifier> <identifiersep> log . warn ( <string_literal> + status + <string_literal> + msg <identifiersep> id + <string_literal> + con ) ; \n \t4 } else { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 protocols . add ( protocol <identifiersep> tls <identifiersep> v1 <identifiersep> <number_literal> ) ; } \n \t3 supported <identifiersep> protocols <identifiersep> set = collections . unmodifiable <identifiersep> set ( protocols ) ; \n \t3 supports <identifiersep> <identifier> = does <identifiersep> support <identifiersep> <identifier> ( ) ; \n <ect>
<comment> \n \t1 private static class test <identifiersep> callable extends abstract <identifiersep> test <identifiersep> callable { \n \t2 <comment> \n \t2 @ override public integer call ( ) { \n <ect>
\t4 return previous <identifiersep> feature <identifiersep> manager ; } } \n \t2 return feature <identifiersep> manager ; } \n \t1 private static feature <identifiersep> manager find <identifiersep> feature <identifiersep> manager <identifiersep> in <identifiersep> class <identifiersep> loader ( class <identifiersep> loader class <identifiersep> loader ) { \n <ect>
\t1 public final void set <identifiersep> value ( object value ) { <comment> \n \t2 string text ; \n \t3 if ( value == null ) { \n <ect>
\t3 if ( key . is <identifiersep> valid ( ) ) \n \t6 key . interest <identifiersep> ops ( key . interest <identifiersep> ops ( ) & <identifier> <identifiersep> key . op <identifiersep> write ) ; \n \t5 break ; } } \n \t2 } catch ( cancelled <identifiersep> key <identifiersep> exception <identifier> ) { \n <ect>
\t4 throw new voldemort <identifiersep> exception ( <string_literal> \n <number_literal> + e . get <identifiersep> message ( ) , e ) ; } \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> that ( get <identifiersep> response . get <identifiersep> field ( field ) . is <identifiersep> metadata <identifiersep> field ( ) , equal <identifiersep> to ( false ) ) ; \n \t2 assert <identifiersep> that ( get <identifiersep> response . get <identifiersep> field ( field ) . get <identifiersep> values ( ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 assert <identifiersep> that ( get <identifiersep> response . get <identifiersep> field ( field ) . get <identifiersep> values ( ) . get ( 0 ) . to <identifiersep> string ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 assert <identifiersep> that ( get <identifiersep> response . get <identifiersep> field ( field ) . get <identifiersep> values ( ) . get ( 1 ) . to <identifiersep> string ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n <ect>
\t2 timer = new timer ( ) ; \n \t2 timer . schedule ( new dns <identifiersep> activation <identifiersep> task ( ) , 0 , ttl ) ; } \n \t1 @ override \n \t1 protected void do <identifiersep> stop ( ) throws exception { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t2 string router <identifiersep> guest <identifiersep> ip = cmd . get <identifiersep> access <identifiersep> detail ( network <identifiersep> element <identifiersep> command . router <identifiersep> guest <identifiersep> ip ) ; \n \t2 string zone <identifiersep> network <identifiersep> type = cmd . get <identifiersep> access <identifiersep> detail ( network <identifiersep> element <identifiersep> command . zone <identifiersep> network <identifiersep> type ) ; \n \t2 if ( router <identifiersep> guest <identifiersep> ip != null && zone <identifiersep> network <identifiersep> type != null && network <identifiersep> type . value <identifiersep> of ( zone <identifiersep> network <identifiersep> type ) == network <identifiersep> type . basic ) { \n <ect>
\t3 future < void > future = fork ( operator ) ; \n \t3 futures . add ( future ) ; } \n \t2 barrier . await ( ) ; <comment> \n \t2 barrier . await ( ) ; <comment> \n <ect>
\t7 string <identifier> = <identifier> . read <identifiersep> line ( ) ; \n \t7 if ( <identifier> == null ) { \n \t8 break ; } \n \t7 error <identifiersep> output = error <identifiersep> output + <identifier> ; } \n <ect>
\t3 parameter . if <identifiersep> present ( basic <identifiersep> name <identifiersep> value <identifiersep> pair - > builder . add <identifiersep> parameter ( basic <identifiersep> name <identifiersep> value <identifiersep> pair . get <identifiersep> name ( ) , basic <identifiersep> name <identifiersep> value <identifiersep> pair . get <identifiersep> value ( ) ) ) ; \n \t3 parameter = get <identifiersep> query <identifiersep> parameter ( context , o <identifiersep> auth20constants . grant <identifiersep> type ) ; \n \t3 parameter . if <identifiersep> present ( basic <identifiersep> name <identifiersep> value <identifiersep> pair - > builder . add <identifiersep> parameter ( basic <identifiersep> name <identifiersep> value <identifiersep> pair . get <identifiersep> name ( ) , basic <identifiersep> name <identifiersep> value <identifiersep> pair . get <identifiersep> value ( ) ) ) ; \n \t3 final string callback <identifiersep> resolved = builder . build ( ) . to <identifiersep> string ( ) ; \n <ect>
\t1 public void do <identifiersep> diff ( @ suppress <identifiersep> warnings ( <string_literal> ) jar dot ) throws exception { \n \t2 parameters <identifier> = parse <identifiersep> header ( get <identifiersep> property ( <string_literal> ) ) ; \n \t2 if ( <identifier> . is <identifiersep> empty ( ) ) \n \t3 return ; \n <ect>
\t4 record <identifiersep> file . create <identifiersep> new <identifiersep> file ( ) ; \n \t4 record . set <identifiersep> output <identifiersep> folder ( record <identifiersep> file . get <identifiersep> parent ( ) ) ; } \n \t3 mapper . write <identifiersep> value ( record <identifiersep> file , record ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( exit <identifiersep> code == 0 ) { \n \t4 final string version <identifiersep> string = stdout . lines ( ) . collect ( collectors . joining ( ) ) . replace <identifiersep> all ( <string_literal> , <string_literal> ) ; \n \t4 return optional . of <identifiersep> nullable ( docker <identifiersep> version . parse <identifiersep> version <identifiersep> string ( version <identifiersep> string ) ) ; } \n \t2 } catch ( io <identifiersep> exception | interrupted <identifiersep> exception e ) { \n <ect>
\t6 vm <identifiersep> group . set <identifiersep> state ( auto <identifiersep> scale <identifiersep> vm <identifiersep> group . state <identifiersep> enabled ) ; \n \t6 <identifier> <identifiersep> auto <identifiersep> scale <identifiersep> vm <identifiersep> group <identifiersep> dao . persist ( vm <identifiersep> group ) ; \n \t6 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> <identifier> + <string_literal> ) ; } \n \t4 } ) ; } \n <ect>
\t3 pk <identifiersep> value = s ; } \n \t3 eo <identifiersep> enterprise <identifiersep> object eo = eo <identifiersep> utilities . object <identifiersep> with <identifiersep> primary <identifiersep> key <identifiersep> value ( source <identifiersep> object . editing <identifiersep> context ( ) , destination <identifiersep> entity <identifiersep> name , pk <identifiersep> value ) ; \n \t3 <identifier> . add <identifiersep> object ( eo ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t3 logger . trace ( <string_literal> , e ) ; \n \t3 <comment> \n \t2 catch ( unknown <identifiersep> column <identifiersep> family <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 return ; } \n \t2 final int epoch = this . epoch . get ( ) ; \n \t2 this . connecting = true ; \n <ect>
\t4 <identifier> <identifiersep> lb <identifiersep> dao . persist ( load <identifiersep> balancer ) ; } \n \t3 boolean backup <identifiersep> <identifier> <identifiersep> state = health <identifiersep> check <identifiersep> policy . is <identifiersep> revoke ( ) ; \n \t3 health <identifiersep> check <identifiersep> policy . set <identifiersep> revoke ( true ) ; \n \t3 <identifier> <identifiersep> <identifier> <identifiersep> dao . persist ( health <identifiersep> check <identifiersep> policy ) ; \n <ect>
\t1 static service <identifiersep> context get <identifiersep> service <identifiersep> context ( ) { \n \t2 if ( service <identifiersep> context == null ) { \n \t3 synchronized ( context . class ) { \n \t4 if ( service <identifiersep> context == null ) { \n <ect>
\t2 policy <identifiersep> entry . set <identifiersep> expire <identifiersep> messages <identifiersep> period ( 0 ) ; <comment> \n \t2 policy <identifiersep> entry . set <identifiersep> producer <identifiersep> flow <identifiersep> control ( false ) ; \n \t2 policy <identifiersep> map . put ( new active <identifiersep> mq <identifiersep> queue ( <string_literal> ) , policy <identifiersep> entry ) ; \n \t2 broker . set <identifiersep> destination <identifiersep> policy ( policy <identifiersep> map ) ; \n <ect>
\t5 continue ; } \n \t4 try { \n \t5 field <identifiersep> value = ( string ) <identifier> . get ( null ) ; } \n \t4 catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t3 if ( rs != null && rs . first ( ) ) \n \t4 return rs . get <identifiersep> int ( 1 ) > 0 ; \n \t3 s <identifiersep> logger . error ( <string_literal> + rs . get <identifiersep> int ( 1 ) ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 get <identifiersep> index <identifiersep> templates <identifiersep> response = client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> get <identifiersep> templates ( ) . get ( ) ; \n \t3 assert <identifiersep> index <identifiersep> template <identifiersep> exists ( get <identifiersep> index <identifiersep> templates <identifiersep> response , <string_literal> ) ; } \n \t2 if ( test <identifiersep> pipeline ) { \n <ect>
\t2 return obj <identifiersep> to <identifiersep> bytes ( o , type ) ; } \n \t1 protected text obj <identifiersep> to <identifiersep> text ( object o , byte type ) throws io <identifiersep> exception { \n \t2 byte [ ] bytes = obj <identifiersep> to <identifiersep> bytes ( o , type ) ; \n \t2 if ( null == bytes ) { \n <ect>
\t2 } catch ( final illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> + <string_literal> + object . get <identifiersep> class ( ) + <string_literal> + <string_literal> + <string_literal> \n \t5 + <string_literal> ) ; \n \t2 } catch ( final illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t3 l . add ( rs <identifiersep> op ) ; \n \t3 if ( rs <identifiersep> op . get <identifiersep> conf ( ) . get <identifiersep> num <identifiersep> reducers ( ) > max <identifiersep> num <identifiersep> reducers ) { \n \t3 max <identifiersep> num <identifiersep> reducers = rs <identifiersep> op . get <identifiersep> conf ( ) . get <identifiersep> num <identifiersep> reducers ( ) ; } } \n \t2 if ( reduce <identifiersep> sink <identifiersep> de <identifiersep> <identifier> <identifiersep> utils . strict <identifiersep> merge ( c <identifiersep> rs , l . build ( ) ) ) { \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 log . debug ( <string_literal> , system . get <identifiersep> property ( <string_literal> ) ) ; \n <ect>
\t3 log . info ( usage ) ; \n \t3 system . err . println ( usage ) ; \n \t3 system . exit ( <number_literal> ) ; \n \t2 } catch ( config <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public void run ( ) { \n \t2 log . trace ( <string_literal> ) ; \n \t2 if ( ! is <identifiersep> run <identifiersep> allowed ( ) ) { \n <ect>
\t2 { \n \t3 if ( node <identifiersep> value . verbose <identifiersep> warnings ) \n \t3 { \n \t4 string tmp = fmt <identifiersep> utils . string <identifiersep> for <identifiersep> node ( node ) ; \n <ect>
\t2 try { \n \t3 state . generate <identifiersep> session <identifiersep> key ( ) ; \n \t2 } catch ( <identifier> <identifiersep> session <identifiersep> key <identifiersep> builder . invalid <identifiersep> public <identifiersep> parameter <identifiersep> exception <identifier> ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> namespaces ( ) { \n \t2 document doc = get <identifiersep> as <identifiersep> dom ( <string_literal> ) ; \n <ect>
\t4 assert <identifiersep> that ( <identifier> , not <identifiersep> null <identifiersep> value ( ) ) ; \n \t4 assert <identifiersep> that ( snapshot . next ( ) , null <identifiersep> value ( ) ) ; \n \t4 assert <identifiersep> that ( snapshot . <identifier> <identifiersep> operations ( ) , equal <identifiersep> to ( 0 ) ) ; } \n \t3 <comment> \n <ect>
\t3 io <identifiersep> helper . close ( os , <string_literal> + name , log ) ; \n \t3 <comment> \n \t3 if ( current <identifiersep> dir != null ) { \n \t4 change <identifiersep> current <identifiersep> directory ( current <identifiersep> dir ) ; } } \n <ect>
\t4 if ( vm <identifiersep> name . starts <identifiersep> with ( <string_literal> ) || vm <identifiersep> name . starts <identifiersep> with ( <string_literal> ) ) \n \t5 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 pair < boolean , string > ret = ssh <identifiersep> helper . ssh <identifiersep> execute ( command . get <identifiersep> control <identifiersep> ip ( ) , <number_literal> , <string_literal> , pem <identifiersep> file , null , <string_literal> + <identifier> <identifiersep> backup <identifiersep> path + <string_literal> + <identifier> <identifiersep> path ) ; \n \t4 if ( ! ret . first ( ) ) { \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> empty ( name ) ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> empty ( <identifier> ) ) { \n <ect>
\t7 logger . debug ( <string_literal> , thread <identifiersep> name , id ) ; \n \t7 index <identifiersep> doc ( primary , <string_literal> , id , <string_literal> foo \\ <string_literal> <string_literal> \\ <string_literal> ) ; } \n \t6 if ( random <identifiersep> boolean ( ) && i > <number_literal> ) { \n \t7 string id = <string_literal> + random <identifiersep> int <identifiersep> between ( 0 , i - 1 ) ; \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> error ( ) { \n \t2 assert <identifiersep> equals ( <string_literal> , m <identifiersep> log . get <identifiersep> out ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , m <identifiersep> log . get <identifiersep> err ( ) ) ; \n <ect>
\t1 { \n \t2 protocol <identifiersep> version beta <identifiersep> version = get <identifiersep> beta <identifiersep> version ( ) ; \n \t2 if ( beta <identifiersep> version == null ) \n \t2 { \n <ect>
\t5 copy ( <string_literal> , temp <identifiersep> directory ) ; \n \t5 copy ( <string_literal> , temp <identifiersep> directory ) ; \n \t5 log . info ( <string_literal> , temp <identifiersep> directory ) ; \n \t5 dir = temp <identifiersep> directory ; } \n <ect>
\t2 assert <identifiersep> that ( state <identifiersep> response . get <identifiersep> state ( ) . meta <identifiersep> data ( ) . index ( <string_literal> ) . get <identifiersep> state ( ) , equal <identifiersep> to ( index <identifiersep> meta <identifiersep> data . state . close ) ) ; \n \t2 assert <identifiersep> that ( state <identifiersep> response . get <identifiersep> state ( ) . routing <identifiersep> table ( ) . index ( <string_literal> ) , null <identifiersep> value ( ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> open ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) ; \n <ect>
\t3 iterable < ? extends result <identifiersep> row > result <identifiersep> rows = query . get <identifiersep> rows ( ) ; \n \t3 iterator < authorizable > <identifier> = iterators . transform ( result <identifiersep> rows . iterator ( ) , new result <identifiersep> row <identifiersep> to <identifiersep> authorizable ( user <identifiersep> manager , root , type ) ) ; \n \t3 return iterators . filter ( <identifier> , new unique <identifiersep> result <identifiersep> predicate ( ) ) ; \n \t2 } catch ( parse <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 string val = get <identifiersep> string <identifiersep> value ( ) ; \n \t2 string <identifier> = arg0 . get <identifiersep> string <identifiersep> value ( ) ; \n \t2 if ( val == null ) { \n <ect>
\t7 string item <identifiersep> name = provider . get <identifiersep> item <identifiersep> name <identifiersep> by <identifiersep> id <identifiersep> and <identifiersep> param ( device <identifiersep> id , <string_literal> ) ; \n \t7 if ( item <identifiersep> name != null ) { \n \t8 context . get <identifiersep> event <identifiersep> publisher ( ) . post <identifiersep> update ( item <identifiersep> name , \n \t10 new decimal <identifiersep> type ( cache . get ( <string_literal> ) ) ) ; \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + host . get <identifiersep> resource ( ) , e ) ; \n \t2 } catch ( final instantiation <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + host . get <identifiersep> resource ( ) , e ) ; \n \t2 } catch ( final illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t3 log . error ( <string_literal> + map . to <identifiersep> string ( ) ) ; \n \t3 return ; } \n \t2 if ( ! triples <identifiersep> map <identifiersep> to <identifiersep> worker <identifiersep> plan . contains <identifiersep> key ( map ) ) \n \t2 { \n <ect>
\t2 if ( vsm <identifiersep> map <identifiersep> vo != null ) { \n \t3 vsm <identifiersep> id = vsm <identifiersep> map <identifiersep> vo . get <identifiersep> vsm <identifiersep> id ( ) ; \n \t3 s <identifiersep> logger . info ( <string_literal> + vsm <identifiersep> id ) ; \n \t3 nexus <identifiersep> vsm = <identifier> <identifiersep> nexus <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vsm <identifiersep> id ) ; \n <ect>
\t4 file <identifiersep> system . delete ( new path ( base <identifiersep> path ) , false ) ; \n \t3 } catch ( io <identifiersep> exception ignored ) { } \n \t3 return result ; } \n \t2 catch ( exception e ) { \n <ect>
\t1 log . error ( <string_literal> + e , e ) ; \n \t1 exception = e ; \n \t1 throw e ; } \n \t1 catch ( throwable e ) { \n <ect>
\t2 } catch ( final resource <identifiersep> unavailable <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . resource <identifiersep> unavailable <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( concurrent <identifiersep> operation <identifiersep> exception ex ) { \n <ect>
\t4 <comment> \n \t3 } catch ( t <identifiersep> exception tx ) { \n \t4 logger . error ( <string_literal> , tx ) ; \n \t3 } catch ( exception x ) { \n <ect>
\t3 local <identifiersep> member . get <identifiersep> data ( true , true ) ; \n \t3 try { \n \t4 if ( impl != null ) impl . send ( false ) ; \n \t3 } catch ( exception x ) { \n <ect>
public static void load <identifiersep> config ( string conf <identifiersep> file ) { \n \t1 try { \n \t1 conf <identifiersep> file = sub <identifiersep> directory . scripts + file . separator + conf <identifiersep> file ; \n \t1 string class <identifiersep> name = thread . current <identifiersep> thread ( ) . get <identifiersep> stack <identifiersep> trace ( ) [ <number_literal> ] . get <identifiersep> class <identifiersep> name ( ) ; \n <ect>
\t5 . create <identifiersep> query ( <string_literal> ) \n \t5 . set <identifiersep> parameter ( <string_literal> , tab <identifiersep> id ) . get <identifiersep> single <identifiersep> result ( ) ; \n \t3 <comment> \n \t3 tab <identifiersep> to <identifiersep> <identifier> . get <identifiersep> <identifier> ( ) . size ( ) ; \n <ect>
\t6 if ( post <identifiersep> apply <identifiersep> rules ) { \n \t7 <comment> \n \t7 <comment> \n \t7 if ( ip . is <identifiersep> source <identifiersep> nat ( ) ) { \n <ect>
\t3 writer . write ( <string_literal> ) ; \n \t3 writer . flush ( ) ; \n \t3 writer . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 merged <identifiersep> list . add <identifiersep> all ( old <identifiersep> entries ) ; \n \t3 merged <identifiersep> list . add <identifiersep> all ( new <identifiersep> entries ) ; \n \t3 old <identifiersep> feed . set <identifiersep> entries ( merged <identifiersep> list ) ; \t1 \n \t2 } else { \n <ect>
\t4 throw new configuration <identifiersep> exception ( <string_literal> ) ; } \n \t3 else if ( conf . commitlog <identifiersep> sync <identifiersep> batch <identifiersep> window <identifiersep> in <identifiersep> ms != null ) \n \t3 { \n \t4 throw new configuration <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t4 if ( ! session . is <identifiersep> present ( ) ) { \n \t5 logger . error ( <string_literal> + session <identifiersep> id ) ; \n \t5 return false ; } \n \t4 uuid user <identifiersep> id = session . get ( ) . get <identifiersep> user <identifiersep> id ( ) ; \n <ect>
\t4 try { \n \t5 server <identifiersep> socket . bind ( listen <identifiersep> address , <identifier> ) ; \n \t4 } catch ( bind <identifiersep> exception bind <identifiersep> ex ) { \n \t5 if ( system . current <identifiersep> time <identifiersep> millis ( ) < start <identifiersep> <identifier> + bind <identifiersep> timeout ) { \n <ect>
\t1 char [ ] result = null ; \n \t1 try { \n \t2 result = credential <identifiersep> provider . get <identifiersep> password <identifiersep> for <identifiersep> alias ( alias <identifiersep> str ) ; \n \t1 } catch ( ambari <identifiersep> exception e ) { \n <ect>
\t5 <comment> \n \t5 boolean is <identifiersep> bad = session <identifiersep> key . invalid <identifiersep> key . equals ( rv . read <identifiersep> reply <identifiersep> key ( ) ) ; \n \t5 if ( is <identifiersep> bad ) { \n \t6 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 super . remove <identifiersep> session ( context , info ) ; } \n \t1 @ override \n \t1 public void add <identifiersep> broker ( connection connection , broker <identifiersep> info info ) { \n \t2 if ( is <identifiersep> log <identifiersep> all ( ) || is <identifiersep> log <identifiersep> internal <identifiersep> events ( ) ) { \n <ect>
\t3 if ( use <identifiersep> cache ) \n \t4 cache . put ( k , result == null ? null <identifiersep> value : result ) ; \n <ect>
\t3 if ( s . get <identifiersep> root <identifiersep> cause ( ) != null ) { \n \t4 t = s . get <identifiersep> root <identifiersep> cause ( ) ; } \n \t3 log . error ( t . get <identifiersep> localized <identifiersep> message ( ) + <string_literal> + req . get <identifiersep> request <identifiersep> url ( ) , t ) ; \n \t2 } else if ( t instanceof cms <identifiersep> security <identifiersep> exception ) { \n <ect>
\t1 if ( ! application <identifiersep> manager . get <identifiersep> application ( ) . is <identifiersep> unit <identifiersep> test <identifiersep> mode ( ) ) { \n \t1 final file <identifier> <identifiersep> vim <identifiersep> rc = vim <identifiersep> script <identifiersep> parser . find <identifiersep> <identifier> <identifiersep> vim <identifiersep> rc ( ) ; \n \t1 if ( <identifier> <identifiersep> vim <identifiersep> rc != null ) { \n \t2 vim <identifiersep> script <identifiersep> parser . execute <identifiersep> file ( <identifier> <identifiersep> vim <identifiersep> rc ) ; } } \n <ect>
\t2 list < project <identifiersep> invitation <identifiersep> vo > <identifier> <identifiersep> to <identifiersep> expire = list <identifiersep> by ( sc ) ; \n \t2 for ( project <identifiersep> invitation <identifiersep> vo invitation <identifiersep> to <identifiersep> expire : <identifier> <identifiersep> to <identifiersep> expire ) { \n \t3 invitation <identifiersep> to <identifiersep> expire . set <identifiersep> state ( state . expired ) ; \n \t3 if ( ! update ( invitation <identifiersep> to <identifiersep> expire . get <identifiersep> id ( ) , invitation <identifiersep> to <identifiersep> expire ) ) { \n <ect>
\t5 cert <identifiersep> chain <identifiersep> file <identifiersep> path = cert <identifiersep> chain <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ; \n \t5 try ( buffered <identifiersep> writer cert <identifiersep> chain <identifiersep> out = new buffered <identifiersep> writer ( new file <identifiersep> writer ( cert <identifiersep> chain <identifiersep> file ) ) ; ) { \n \t6 cert <identifiersep> chain <identifiersep> out . write ( cert <identifiersep> chain ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 closer . close ( <identifier> ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( this , <string_literal> ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 if ( <identifier> <identifiersep> xml <identifiersep> declaration == null ) { \n \t3 <identifier> <identifiersep> xml <identifiersep> declaration = get <identifiersep> configuration ( ) . get <identifiersep> <identifier> <identifiersep> xml <identifiersep> declaration ( ) ; } \n \t2 if ( <identifier> <identifiersep> xml <identifiersep> declaration == null ) { \n \t3 <identifier> <identifiersep> xml <identifiersep> declaration = boolean . false ; } \n <ect>
\t2 exchange <identifiersep> utils . class \n \t3 . get <identifiersep> class <identifiersep> loader ( ) \n \t3 . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ; \n \t1 if ( is == null ) { \n <ect>
\t2 log . debug ( <string_literal> , name ) ; \n \t2 set < string > keep = new <identifiersep> hash <identifiersep> set ( ) ; \n \t2 string cp = index <identifiersep> stats . get <identifiersep> reference <identifiersep> checkpoint ( ) ; \n \t2 if ( cp == null ) { \n <ect>
\t1 if ( ! config <identifiersep> checked ) { \n \t2 config <identifiersep> checked = true ; \n \t2 if ( ! ambari <identifiersep> context . is <identifiersep> topology <identifiersep> resolved ( topology . get <identifiersep> cluster <identifiersep> id ( ) ) ) { \n \t2 if ( provision <identifiersep> request == null ) { \n <ect>
\t2 } catch ( final xml <identifiersep> rpc <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 return new fence <identifiersep> answer ( command , false , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t1 uri <identifiersep> info uri <identifiersep> info ; \n \t1 @ trace <identifiersep> test . trace \n \t1 @ path ( <string_literal> ) \n \t1 public string trace ( ) { \n <ect>
\t2 final set < map . entry < string , object > > values = names \n \t4 . stream ( ) \n \t4 . filter ( e - > { \n \t5 final set < object > values <identifiersep> col = collection <identifiersep> utils . to <identifiersep> collection ( e . get <identifiersep> value ( ) ) ; \n <ect>
\t5 if ( script == null ) { \n \t6 final file script <identifiersep> file = properties . resolve <identifiersep> relative <identifiersep> file ( properties . get <identifiersep> file ( \n \t8 grinder <identifiersep> properties . script , grinder <identifiersep> properties . default <identifiersep> script ) ) ; \n \t6 script = new script <identifiersep> location ( script <identifiersep> file ) ; } \n <ect>
\t6 null , false , false ) ; } \n \t4 return new <identifiersep> scan ; } } \n \t2 ) ; \n \t2 } catch ( hive <identifiersep> exception e ) { \n <ect>
\t2 tweet tweet = ( tweet ) search . get <identifiersep> payload ( ) ; \n \t2 logger . info ( <string_literal> + \n \t4 tweet . get <identifiersep> created <identifiersep> at ( ) + <string_literal> + tweet . get <identifiersep> text ( ) ) ; } \n \t1 public void <identifier> ( tweet s ) { \n <ect>
\t2 try { \n \t3 final file private <identifiersep> key <identifiersep> file = new file ( private <identifiersep> key <identifiersep> file <identifiersep> name ) ; \n \t3 final file public <identifiersep> key <identifiersep> file = new file ( public <identifiersep> key <identifiersep> file <identifiersep> name ) ; \n \t3 if ( ! private <identifiersep> key <identifiersep> file . exists ( ) ) { \n <ect>
\t1 <comment> \n \t1 public static wallet load <identifiersep> from <identifiersep> file <identifiersep> stream ( input <identifiersep> stream stream , @ nullable wallet <identifiersep> extension . . . wallet <identifiersep> extensions ) throws <identifier> <identifiersep> wallet <identifiersep> exception { \n \t2 wallet wallet = new wallet <identifiersep> <identifier> <identifiersep> serializer ( ) . read <identifiersep> wallet ( stream , wallet <identifiersep> extensions ) ; \n \t2 if ( ! wallet . is <identifiersep> consistent ( ) ) { \n <ect>
\t5 index = this . <identifier> <identifiersep> get <identifiersep> cache <identifiersep> index ( el , s <identifiersep> type , fn ) ; } \n \t4 if ( index >= 0 ) { \n \t5 cache <identifiersep> item = listeners [ index ] ; } \n \t4 if ( ! el || ! cache <identifiersep> item ) { \n <ect>
\t1 json <identifiersep> write <identifiersep> for <identifiersep> insert ( json <identifiersep> writer , request . get <identifiersep> entity <identifiersep> bean ( ) ) ; \n \t1 json <identifiersep> writer . gen ( ) . flush ( ) ; \n \t1 return bean <identifiersep> change ( change <identifiersep> type . insert , request . get <identifiersep> bean <identifiersep> id ( ) , writer . to <identifiersep> string ( ) , null ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 final public <identifiersep> ip public <identifiersep> ip = public <identifiersep> ip . create <identifiersep> from <identifiersep> addr <identifiersep> and <identifiersep> vlan ( user <identifiersep> ip , <identifier> <identifiersep> vlan <identifiersep> dao . find <identifiersep> by <identifiersep> id ( user <identifiersep> ip . get <identifiersep> vlan <identifiersep> id ( ) ) ) ; \n \t4 public <identifiersep> ips <identifiersep> to <identifiersep> release . add ( public <identifiersep> ip ) ; } } \n \t2 try { \n \t3 if ( ! <identifier> <identifiersep> ip <identifiersep> addr <identifiersep> mgr . apply <identifiersep> ip <identifiersep> associations ( network , true , true , public <identifiersep> ips <identifiersep> to <identifiersep> release ) ) { \n <ect>
\t2 http <identifiersep> request request , http <identifiersep> response response , url request <identifiersep> uri ) \n \t2 throws io <identifiersep> exception { \n \t1 secret <identifiersep> key token <identifiersep> secret = secret <identifiersep> manager . retrieve <identifiersep> token <identifiersep> secret ( <identifier> ) ; \n \t1 if ( null == token <identifiersep> secret ) { \n <ect>
\t3 <identifier> . warn ( <string_literal> , this ) ; \n \t3 return ; } \n \t2 final byte [ ] bytes = virtual <identifiersep> file . get <identifiersep> bytes ( ) ; \n \t2 if ( bytes == null ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
<comment> \n \t1 public static list < layer <identifiersep> info > get <identifiersep> <identifier> ( catalog catalog , string encoded <identifiersep> resource <identifiersep> id ) { \n \t2 list < map <identifiersep> entry < string , string > > decoded <identifiersep> list = decode ( encoded <identifiersep> resource <identifiersep> id ) ; \n \t2 if ( decoded <identifiersep> list . is <identifiersep> empty ( ) ) { \n <ect>
\t1 string task <identifiersep> status = null ; \n \t1 try { \n \t1 task <identifiersep> status = get <identifiersep> task <identifiersep> status ( ) ; \n \t1 } catch ( hive <identifiersep> sql <identifiersep> exception sql <identifiersep> exception ) { \n <ect>
\t5 continue ; } } \n \t3 if ( constants . empty <identifiersep> protocol . equals ( provider <identifiersep> url . get <identifiersep> protocol ( ) ) ) { \n \t4 continue ; } \n \t3 if ( ! extension <identifiersep> loader . get <identifiersep> extension <identifiersep> loader ( protocol . class ) . has <identifiersep> extension ( provider <identifiersep> url . get <identifiersep> protocol ( ) ) ) { \n <ect>
\t2 } catch ( final cloud <identifiersep> runtime <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + name + <string_literal> + e . to <identifiersep> string ( ) , e ) ; \n \t3 return new migrate <identifiersep> with <identifiersep> storage <identifiersep> complete <identifiersep> answer ( command , e ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t5 log . info ( <string_literal> + kind + <string_literal> + id ) ; \n \t5 resources . in <identifiersep> namespace ( namespace ) . with <identifiersep> name ( id ) . delete ( ) ; \n \t5 do <identifiersep> create <identifiersep> resource ( resource , namespace , source <identifiersep> name , resources ) ; \n \t4 } else { \n <ect>
\t1 public void initialize ( ) { \n \t2 reset ( ) ; \n \t2 resource base <identifiersep> dir = resource <identifiersep> loader . get ( base <identifiersep> directory ) ; \n \t2 logger . info ( <string_literal> + base <identifiersep> dir . path ( ) ) ; \n <ect>
\t2 try { \n \t2 extension . dispose ( ) ; \n \t2 logger . info ( <string_literal> , extension . to <identifiersep> string ( ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 violations . add <identifiersep> all ( validator . validate ( parameter <identifiersep> bean , <identifier> ) ) ; } \n \t2 for ( object arg : arguments ) { \n \t3 validate ( violations , arg , <identifier> ) ; } \n \t2 if ( ! violations . is <identifiersep> empty ( ) ) { \n <ect>
\t2 out . write ( body ) ; \n \t2 out . close ( ) ; \n \t2 list < string > option <identifiersep> list = new array <identifiersep> list < > ( ) ; \n \t2 string classpath = system . get <identifiersep> property ( <string_literal> ) ; \n <ect>
\t10 break ; } } \n \t8 <identifier> <identifiersep> <identifier> . add ( log <identifiersep> <identifier> . to <identifiersep> string ( ) ) ; \n \t8 return true ; } } } } \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 final stack <identifiersep> trace <identifiersep> element [ ] stack <identifiersep> trace = exception . get <identifiersep> stack <identifiersep> trace ( ) ; \n \t1 final stack <identifiersep> trace <identifiersep> element [ ] trace = new stack <identifiersep> trace <identifiersep> element [ stack <identifiersep> trace . length - <number_literal> ] ; \n \t1 system . arraycopy ( stack <identifiersep> trace , <number_literal> , trace , 0 , trace . length ) ; \n \t1 exception . set <identifiersep> stack <identifiersep> trace ( trace ) ; \n <ect>
\t1 log . trace ( <string_literal> + new date ( ) ) ; \n \t1 try { \n \t1 process <identifiersep> cloud <identifiersep> watch <identifiersep> stats ( msg ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t4 if ( split <identifiersep> domain [ <number_literal> ] . equals ( <string_literal> ) ) { \n \t5 z <identifiersep> wave <identifiersep> association <identifiersep> command <identifiersep> class association <identifiersep> command <identifiersep> class = ( z <identifiersep> wave <identifiersep> association <identifiersep> command <identifiersep> class ) node \n \t7 . get <identifiersep> command <identifiersep> class ( command <identifiersep> class . association ) ; \n \t5 if ( association <identifiersep> command <identifiersep> class == null ) { \n <ect>
\t2 final double rate = number <identifiersep> of <identifiersep> milliseconds <identifiersep> in <identifiersep> second / difference ; \n \t2 logger . debug ( <string_literal> , \n \t3 last <identifiersep> time , second <identifiersep> to <identifiersep> last <identifiersep> time , difference , rate ) ; \n \t2 if ( rate > get <identifiersep> threshold <identifiersep> rate ( ) ) { \n <ect>
\t3 logger . error ( this , <string_literal> + source + <string_literal> + e , e ) ; \n \t3 update <identifiersep> manager . <identifier> ( <string_literal> + temp + <string_literal> + e , true ) ; \n \t3 return true ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 network . id \n \t2 ) ) \n \t2 return public <identifiersep> ip \n \t1 def create <identifiersep> <identifier> ( self , vm , public <identifiersep> ip , network , services = none ) : \n <ect>
\t5 try { \n \t6 transport <identifiersep> response <identifiersep> options response <identifiersep> options = transport <identifiersep> response <identifiersep> options . builder ( ) . with <identifiersep> compress ( true ) . build ( ) ; \n \t6 channel . send <identifiersep> response ( new string <identifiersep> message <identifiersep> response ( <string_literal> + request . message ) , response <identifiersep> options ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 for ( remote <identifiersep> access <identifiersep> vpn <identifiersep> vo vpn : remote <identifiersep> access <identifiersep> <identifier> ) { \n \t5 <identifier> <identifiersep> remote <identifiersep> access <identifiersep> vpn <identifiersep> mgr . destroy <identifiersep> remote <identifiersep> access <identifiersep> vpn ( vpn . get <identifiersep> server <identifiersep> address <identifiersep> id ( ) ) ; } \n \t3 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t2 populate <identifiersep> headers ( map <identifiersep> ids , job <identifiersep> id , dag <identifiersep> id , user , reduce <identifiersep> id , \n \t3 response , keep <identifiersep> alive <identifiersep> param , map <identifiersep> output <identifiersep> info <identifiersep> map ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n \t2 ch . write ( response ) ; \n <ect>
\t4 try { \n \t5 scheduled <identifiersep> executor . schedule ( command , execution <identifiersep> time ) ; \n \t5 pending <identifiersep> request . add ( cache <identifiersep> key ) ; \n \t4 } catch ( final rejected <identifiersep> execution <identifiersep> exception ex ) { \n <ect>
\t3 if ( vm <identifiersep> instance . get <identifiersep> state ( ) == state . stopped ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> instance + <string_literal> ) ; \n \t4 return true ; } \n \t3 if ( reboot <identifiersep> virtual <identifiersep> machine ( user <identifiersep> id , vm <identifiersep> id ) == null ) { \n <ect>
\t4 log . warn ( <string_literal> , task . get <identifiersep> job <identifiersep> key ( ) ) ; \n \t3 } else if ( task . get <identifiersep> state ( ) == job <identifiersep> task <identifiersep> state . rebalance ) { \n \t4 log . warn ( <string_literal> , task . get <identifiersep> job <identifiersep> key ( ) , force ) ; \n \t3 } else if ( task . get <identifiersep> state ( ) == job <identifiersep> task <identifiersep> state . migrating ) { \n <ect>
\t6 + <string_literal> + roles [ i ] + <string_literal> ) ; } \n \t4 return ( true ) ; } } \n \t2 <comment> \n <ect>
\t5 long old <identifiersep> current <identifiersep> bytes <identifiersep> received = user <identifiersep> stats . get <identifiersep> current <identifiersep> bytes <identifiersep> received ( ) ; \n \t5 string warning = <string_literal> + user <identifiersep> stats . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) + <string_literal> + user <identifiersep> stats . get <identifiersep> account <identifiersep> id ( ) + <string_literal> ; \n \t5 user <identifiersep> stats . set <identifiersep> current <identifiersep> bytes <identifiersep> sent ( new <identifiersep> current <identifiersep> bytes <identifiersep> sent ) ; \n \t5 if ( old <identifiersep> current <identifiersep> bytes <identifiersep> sent > new <identifiersep> current <identifiersep> bytes <identifiersep> sent ) { \n <ect>
\t3 . require <identifiersep> client <identifiersep> auth ( true ) \n \t3 . trust <identifiersep> store <identifiersep> file <identifiersep> name ( server <identifiersep> trust <identifiersep> store ) \n \t3 . trust <identifiersep> store <identifiersep> password ( store <identifiersep> password ) ; } \n \t1 <identifier> <identifiersep> server . start ( server <identifiersep> builder . build ( ) , cache <identifiersep> manager ) ; \n <ect>
\t2 final string id = this . principal <identifiersep> name <identifiersep> transformer . transform ( cas <identifiersep> credential . get <identifiersep> id ( ) ) ; \n \t2 if ( id == null ) { \n \t3 throw new account <identifiersep> not <identifiersep> found <identifiersep> exception ( <string_literal> ) ; } \n \t2 final token <identifiersep> credentials credentials = new token <identifiersep> credentials ( id ) ; \n <ect>
\t3 if ( trust <identifiersep> store != null ) { \n \t4 try { \n \t5 ssl <identifiersep> factory . set <identifiersep> trust <identifiersep> store ( trust <identifiersep> store ) ; \n \t4 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> verify <identifiersep> scopes ( ) throws exception { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t6 continue ; } } \n \t4 ip . set <identifiersep> nic <identifiersep> dev <identifiersep> id ( <identifier> <identifiersep> device <identifiersep> num ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 query = query <identifiersep> wrapper . query = pm . new <identifiersep> query ( <identifier> <identifiersep> privilege . class ) ; \n \t2 m <identifiersep> security <identifiersep> db <identifiersep> list = ( list < <identifier> <identifiersep> privilege > ) query . execute ( ) ; } \n \t1 pm . retrieve <identifiersep> all ( m <identifiersep> security <identifiersep> db <identifiersep> list ) ; \n \t1 success = commit <identifiersep> transaction ( ) ; \n <ect>
\t1 protected void report <identifiersep> periodic <identifiersep> node ( final long count , @ nonnull final reporting <identifiersep> node <identifiersep> state node <identifiersep> state ) { \n \t2 logger . info ( <string_literal> , verb , count , node <identifiersep> state . get <identifiersep> path ( ) ) ; } \n \t1 @ override \n \t1 protected void report <identifiersep> periodic <identifiersep> property ( final long count , @ nonnull final reporting <identifiersep> node <identifiersep> state parent , @ nonnull final string property <identifiersep> name ) { \n <ect>
\t2 long total <identifiersep> length = file . get <identifiersep> file <identifiersep> system ( context . get <identifiersep> configuration ( ) ) . get <identifiersep> file <identifiersep> status ( file ) . get <identifiersep> len ( ) ; \n \t2 boolean read <identifiersep> to <identifiersep> end = end == total <identifiersep> length ; \n \t2 compression <identifiersep> codec <identifiersep> factory factory = new compression <identifiersep> codec <identifiersep> factory ( config ) ; \n \t2 this . compression <identifiersep> <identifier> = factory . get <identifiersep> codec ( file ) ; \n <ect>
\t1 } catch ( access <identifiersep> denied <identifiersep> exception e ) { \n \t1 log . debug ( <string_literal> + contexts . lookup ( ) . get <identifiersep> correlation <identifiersep> id ( ) + <string_literal> ) ; \n \t1 throw e ; \n \t1 } catch ( s3exception e ) { \n <ect>
\t1 try { \n \t1 type type = new type <identifiersep> token < map < string , map < string , list < alert <identifiersep> definition > > > > ( ) { } . get <identifiersep> type ( ) ; \n \t1 service <identifiersep> definition <identifiersep> map = m <identifiersep> gson . from <identifiersep> json ( reader , type ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 if ( job <identifiersep> parameters != null && job <identifiersep> parameters . size ( ) > 0 ) { \n \t3 log . debug ( <string_literal> , job <identifiersep> parameters ) ; \n \t3 set <identifiersep> properties ( result , job <identifiersep> parameters ) ; } \n <ect>
\t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n \t1 log . error ( <string_literal> , ex ) ; \n \t1 throw ex ; \n \t1 } catch ( exception ex ) { \n <ect>
\t5 try { \n \t6 template <identifiersep> api <identifiersep> result result = future . get ( ) ; \n \t6 success = result . is <identifiersep> success ( ) ; \n \t6 if ( ! success ) { \n <ect>
\t1 try { \n \t2 while ( should <identifiersep> do <identifiersep> work ( ) ) { \n \t3 do <identifiersep> work ( ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 reverse <identifiersep> handler . add <identifiersep> first ( handler ) ; <comment> \n \t4 handler . apply ( evt ) ; \n \t4 if ( handler . skip <identifiersep> remaining ( ) ) { \n <ect>
\t2 java . io . file <identifiersep> output <identifiersep> stream os = null ; \n \t2 try { \n \t3 if ( ! to . exists ( ) ) { \n \t4 if ( ! to . create <identifiersep> new <identifiersep> file ( ) ) { \n <ect>
\t3 file file = new file ( file <identifiersep> name ) ; \n \t3 if ( file . exists ( ) && file . can <identifiersep> read ( ) ) { \n \t4 my <identifiersep> value = file <identifiersep> utils . read <identifiersep> file <identifiersep> to <identifiersep> string ( new file ( file <identifiersep> name ) , encoding ) ; \n \t3 } else { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 for ( final aws <identifiersep> credentials <identifiersep> provider p : this . chain ) { \n \t3 aws <identifiersep> credentials c ; \n \t3 try { \n <ect>
\t4 return optional ( os ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> , e ) ; \n \t4 return empty <identifiersep> optional ( ) ; } } \n <ect>
<comment> \n \t1 private boolean validate ( node node ) throws i2p <identifiersep> parser <identifiersep> exception { \n \t2 string name = node . get <identifiersep> name ( ) ; \n \t2 <comment> \n <ect>
\t3 delete <identifiersep> local <identifiersep> folder ( <string_literal> + iso <identifiersep> path ) ; \n \t2 } catch ( final io <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> name + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t1 testing <identifiersep> util . kill <identifiersep> cache <identifiersep> managers ( <identifier> ) ; \n \t1 cache <identifiersep> managers . remove ( <identifier> ) ; \n \t1 testing <identifiersep> util . block <identifiersep> until <identifiersep> views <identifiersep> received ( <number_literal> , false , caches ( ) ) ; \n \t1 testing <identifiersep> util . wait <identifiersep> for <identifiersep> no <identifiersep> rebalance ( caches ( ) ) ; \n <ect>
\t4 try { \n \t5 await <identifiersep> termination ( executor <identifiersep> service ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n \t5 warned = true ; \n <ect>
\t4 public void run ( ) { \n \t5 try { \n \t6 do <identifiersep> initialize <identifiersep> connection ( false ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t3 logger . info ( <string_literal> + line ) ; \n \t3 if ( ! line . starts <identifiersep> with ( pre <identifiersep> fix ) ) \n \t4 continue ; \n \t3 if ( force == true ) { \n <ect>
\t8 try { \n \t9 <comment> \n \t9 window . eval ( text ) ; \n \t8 } catch ( e ) { \n <ect>
\t2 schema <identifiersep> tuple <identifiersep> factory [ ] key <identifiersep> schema <identifiersep> tuple <identifiersep> factories = new schema <identifiersep> tuple <identifiersep> factory [ input <identifiersep> schemas . length ] ; \n \t2 for ( int i = 0 ; i < input <identifiersep> schemas . length ; i ++ ) { \n \t3 schema schema = input <identifiersep> schemas [ i ] ; \n \t3 if ( schema != null ) { \n <ect>
\t1 builder . description ( type . get <identifiersep> description ( ) ) ; \n \t1 builder . <identifier> ( type . get <identifiersep> description ( ) . index <identifiersep> of ( <string_literal> ) != - 1 ) ; \n \t1 string os <identifiersep> category = os <identifiersep> <identifier> . get ( ) . get ( type . get <identifiersep> os <identifiersep> category <identifiersep> id ( ) ) ; \n \t1 if ( os <identifiersep> category == null ) { \n <ect>
\t2 hash h = local <identifiersep> lease <identifiersep> set . get <identifiersep> destination ( ) . calculate <identifiersep> hash ( ) ; \n \t2 try { \n \t3 store ( h , local <identifiersep> lease <identifiersep> set ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t1 } else { \n \t2 logger . info ( <string_literal> ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t3 } else { \n \t4 if ( cluster <identifiersep> xml . equals ( current <identifiersep> cluster <identifiersep> xml <identifiersep> versioned . get <identifiersep> value ( ) ) ) { \n \t5 logger . info ( <string_literal> + node <identifiersep> id + <string_literal> ) ; \n \t4 } else { \n <ect>
\t4 offering . get <identifiersep> tags ( ) , offering . get <identifiersep> traffic <identifiersep> type ( ) ) ; } \n \t2 physical <identifiersep> network <identifiersep> vo physnet = <identifier> <identifiersep> physical <identifiersep> network <identifiersep> dao \n \t3 . find <identifiersep> by <identifiersep> id ( physical <identifiersep> network <identifiersep> id ) ; \n \t2 if ( ! can <identifiersep> handle ( offering , nw <identifiersep> type , physnet ) ) { \n <ect>
\t3 handle <identifiersep> exception ( ex ) ; } } \n \t1 protected void replay <identifiersep> game ( uuid game <identifiersep> id ) { \n \t2 try { \n \t3 frame . replay <identifiersep> game ( game <identifiersep> id ) ; \n <ect>
\t5 <identifier> <identifiersep> instance . set <identifiersep> x <identifiersep> wiki <identifiersep> context ( get <identifiersep> x <identifiersep> wiki <identifiersep> context ( ) ) ; \n \t5 <identifier> <identifiersep> instance . set <identifiersep> ratings <identifiersep> manager ( ratings <identifiersep> manager <identifiersep> provider . get ( document <identifiersep> ref ) ) ; \n \t5 return <identifier> <identifiersep> instance ; } \n \t3 } catch ( throwable e ) { \n <ect>
\t5 config <identifiersep> location . get <identifiersep> parent <identifiersep> file ( ) . mkdirs ( ) ; \n \t5 output <identifiersep> stream os = new file <identifiersep> output <identifiersep> stream ( config <identifiersep> location ) ; \n \t5 input <identifiersep> stream is = get <identifiersep> class ( ) . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ; \n \t5 stream <identifiersep> util . io ( is , os , true , true ) ; \n <ect>
\t1 @ produce ( uri = <string_literal> ) \n \t1 protected producer <identifiersep> template producer <identifiersep> template ; \n \t1 @ test \n \t1 public void test <identifiersep> receiving <identifiersep> file <identifiersep> from <identifiersep> cache ( ) throws exception { \n <ect>
\t3 double cpu <identifiersep> quota <identifiersep> percentage = vm <identifiersep> to . get <identifiersep> cpu <identifiersep> quota <identifiersep> percentage ( ) ; \n \t3 int period = cpu <identifiersep> <identifier> <identifiersep> def . default <identifiersep> period ; \n \t3 int quota = ( int ) ( period * cpu <identifiersep> quota <identifiersep> percentage ) ; \n \t3 if ( quota < cpu <identifiersep> <identifier> <identifiersep> def . min <identifiersep> quota ) { \n <ect>
\t3 return <string_literal> ; } \n \t2 try { \n \t3 return this . xwiki . get <identifiersep> url <identifiersep> content ( <identifier> , this . context ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 return null ; } \n \t2 for ( int i = 1 ; i < path <identifiersep> segments . length ; i ++ ) { \n \t3 current <identifiersep> element = ( element ) current <identifiersep> element . get <identifiersep> elements <identifiersep> by <identifiersep> tag <identifiersep> name ( path <identifiersep> segments [ i ] ) . item ( 0 ) ; \n \t3 if ( current <identifiersep> element == null ) { \n <ect>
\t2 configuration job <identifiersep> conf = null ; \n \t2 try { \n \t3 job <identifiersep> conf = new x <identifiersep> configuration ( new string <identifiersep> reader ( job . get <identifiersep> conf ( ) ) ) ; } \n \t2 catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 console . print <identifiersep> info ( wm <identifiersep> context <identifiersep> json ) ; \n \t1 console . print <identifiersep> info ( separator ) ; \n \t1 console . print <identifiersep> info ( <string_literal> ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 map < string , string > attribute <identifiersep> map = metrics <identifiersep> map . get ( component ) ; \n \t2 log . debug ( <string_literal> + component ) ; \n \t2 process <identifiersep> component <identifiersep> attributes ( current <identifiersep> time <identifiersep> millis , component , attribute <identifiersep> map ) ; } \n \t1 } catch ( unable <identifiersep> to <identifiersep> connect <identifiersep> exception <identifier> ) { \n <ect>
\t3 throw new runtime <identifiersep> exception ( sb . to <identifiersep> string ( ) ) ; } \n \t2 string real <identifiersep> root <identifiersep> dir = <identifier> <identifiersep> base <identifiersep> dir + <string_literal> + root <identifiersep> dir ; \n \t2 file file = new file ( real <identifiersep> root <identifiersep> dir ) ; \n \t2 if ( ! file . exists ( ) ) { \n <ect>
\t4 return null ; } \n \t3 uuid user <identifiersep> id = session . get ( ) . get <identifiersep> user <identifiersep> id ( ) ; \n \t3 optional < user > <identifier> <identifiersep> user = user <identifiersep> manager . instance . get <identifiersep> user ( user <identifiersep> id ) ; \n \t3 if ( ! <identifier> <identifiersep> user . is <identifiersep> present ( ) ) { \n <ect>
\t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 protected < out , <identifier> , <identifier> > type <identifiersep> information < out > analyze <identifiersep> pojo ( class < out > clazz , array <identifiersep> list < type > type <identifiersep> hierarchy , \n \t3 parameterized <identifiersep> type parameterized <identifiersep> type , type <identifiersep> information < <identifier> > <identifier> , type <identifiersep> information < <identifier> > <identifier> ) { \n \t2 if ( ! modifier . is <identifiersep> public ( clazz . get <identifiersep> modifiers ( ) ) ) { \n <ect>
\t3 final file package <identifiersep> file = app . node <identifiersep> query ( file . class ) . and <identifiersep> name ( <string_literal> ) . and ( structr <identifiersep> app . key ( folder . class , <string_literal> ) , folder ) . get <identifiersep> first ( ) ; \n \t3 if ( package <identifiersep> file != null ) { \n \t4 handle <identifiersep> package <identifiersep> folder ( folder , parent <identifiersep> folder ) ; } \n \t2 } catch ( framework <identifiersep> exception ex ) { \n <ect>
\t2 args . add ( <string_literal> ) ; \n \t2 try { \n \t3 hybrid <identifiersep> cube <identifiersep> cli . main ( args . to <identifiersep> array ( new string [ args . size ( ) ] ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 string table <identifiersep> name , \n \t7 string location , \n \t7 map < string , string > part <identifiersep> spec \n \t5 ) throws h <identifiersep> cat <identifiersep> exception { \n <ect>
\t3 for ( object o : all ) { \n \t4 object <identifiersep> instance bean = ( object <identifiersep> instance ) o ; \n \t4 log . info ( bean . get <identifiersep> object <identifiersep> name ( ) . to <identifiersep> string ( ) ) ; } \n \t2 } catch ( exception ignored ) { \n <ect>
\t5 assert searcher . get <identifiersep> index <identifiersep> reader ( ) instanceof elasticsearch <identifiersep> directory <identifiersep> reader : <string_literal> + searcher . get <identifiersep> index <identifiersep> reader ( ) . get <identifiersep> class ( ) ; \n \t5 <identifier> . <identifier> ( new searcher ( <string_literal> , searcher ) ) ; \n \t4 } catch ( exception e ) { \n \t5 if ( is <identifiersep> engine <identifiersep> closed . get ( ) == false ) { \n <ect>
\t3 logger . info ( <string_literal> + job . get <identifiersep> job <identifiersep> name ( ) ) ; \n \t3 set <identifiersep> job <identifiersep> classpath ( job , cube . get <identifiersep> config ( ) ) ; \n \t3 cube <identifiersep> segment segment = cube . get <identifiersep> segment <identifiersep> by <identifiersep> id ( segment <identifiersep> id ) ; \n \t3 if ( segment == null ) { \n <ect>
\t3 svc <identifiersep> name . set ( null ) ; \n \t3 try { \n \t4 <identifier> ( ) ; } \n \t3 catch ( throwable t ) { \n <ect>
\t4 update <identifiersep> request delete <identifiersep> all = new <identifiersep> update <identifiersep> request ( ) ; \n \t4 delete <identifiersep> all . delete <identifiersep> by <identifiersep> query ( <string_literal> ) ; \n \t4 solr <identifiersep> client . request ( delete <identifiersep> all , collection ) ; } \n \t2 } catch ( solr <identifiersep> server <identifiersep> exception e ) { \n <ect>
\t2 int node <identifiersep> id = last <identifiersep> sent <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( 0 ) ; \n \t2 logger . debug ( <string_literal> , node <identifiersep> id ) ; \n \t2 switch ( incoming <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( 1 ) ) { \n \t3 case request <identifiersep> <identifier> <identifiersep> update <identifiersep> started : \n <ect>
\t5 <string_literal> + \n \t6 <string_literal> ) ; \n \t4 return false ; } \n \t2 } catch ( array <identifiersep> index <identifiersep> out <identifiersep> of <identifiersep> bounds <identifiersep> exception ex ) { \n <ect>
\t4 logger . debug ( <string_literal> , get <identifiersep> address ( ) , get <identifiersep> unit ( ) , \n \t6 bricklet <identifiersep> remote <identifiersep> switch . switch <identifiersep> to <identifiersep> on ) ; \n \t4 tinkerforge <identifiersep> device . switch <identifiersep> socket <identifiersep> b ( get <identifiersep> address ( ) , get <identifiersep> unit ( ) , bricklet <identifiersep> remote <identifiersep> switch . switch <identifiersep> to <identifiersep> on ) ; \n \t3 } else { \n <ect>
\t4 rs . close ( ) ; } \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 pstmt . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 expect <identifiersep> topology <identifiersep> change ( <identifier> , false ) ; \n \t2 assert <identifiersep> equals ( <number_literal> , channel <identifiersep> factory . get <identifiersep> servers ( ) . size ( ) ) ; \n \t1 } finally { \n \t2 log . info ( <string_literal> + manager ( 0 ) . get <identifiersep> cache ( ) . get <identifiersep> advanced <identifiersep> cache ( ) . get <identifiersep> rpc <identifiersep> manager ( ) . get <identifiersep> transport ( ) . get <identifiersep> members ( ) ) ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t3 <string_literal> , payload <identifiersep> queue . size ( ) ) ; \n \t2 try { \n \t3 payload <identifiersep> queue . remove ( 1 ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public static bundle <identifiersep> context get <identifiersep> bundle <identifiersep> context ( ) { \n \t2 return context ; } \n \t1 public void start ( bundle <identifiersep> context context ) throws exception { \n \t2 activator . context = context ; \n <ect>
\t3 } catch ( conversion <identifiersep> exception e ) { \n \t4 log . error ( <string_literal> , e ) ; \n \t4 j <identifiersep> meter <identifiersep> utils . report <identifiersep> error <identifiersep> to <identifiersep> user ( save <identifiersep> service . c <identifiersep> <identifier> <identifiersep> string ( e ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 log . info ( <string_literal> + window <identifiersep> object . frame <identifiersep> element . src ) ; \n \t5 return null ; } \n \t4 log . debug ( <string_literal> + window <identifiersep> object . frames . length ) ; \n \t4 for ( var i = 0 ; i < window <identifiersep> object . frames . length ; i ++ ) { \n <ect>
\t5 } catch ( exception e ) { \n \t6 log . error ( <string_literal> , e ) ; } } } \n \t3 named <identifiersep> plugin <identifiersep> classes . put ( <identifier> , <string_literal> ) ; \n \t3 if ( found == 0 ) { \n <ect>
\t1 protected void deliver ( message msg , sequencer <identifiersep> header hdr ) { \n \t2 address sender = msg . get <identifiersep> src ( ) ; \n \t2 if ( sender == null ) { \n \t3 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) \n <ect>
\t4 final long revision = parse <identifiersep> revision <identifiersep> or <identifiersep> <identifier> ( version ) ; \n \t4 <comment> \n \t4 final svn <identifiersep> node <identifiersep> kind node <identifiersep> type = repo . check <identifiersep> path ( path , revision ) ; \n \t4 if ( svn <identifiersep> node <identifiersep> kind . none . equals ( node <identifiersep> type ) ) { \n <ect>
\t2 if ( ticket <identifiersep> state . get <identifiersep> count <identifiersep> of <identifiersep> uses ( ) == 0 && current <identifiersep> time . is <identifiersep> before ( kill <identifiersep> time ) ) { \n \t3 logger . debug ( <string_literal> + <string_literal> ) ; \n \t3 return super . is <identifiersep> expired ( ticket <identifiersep> state ) ; } \n \t2 if ( current <identifiersep> time . is <identifiersep> after ( kill <identifiersep> time ) ) { \n <ect>
\t2 if ( must <identifiersep> <identifier> <identifiersep> segment <identifiersep> filters || ! finished <identifiersep> setup ) { \n \t3 byte [ ] local <identifiersep> <identifier> = local <identifiersep> salt <identifiersep> key ( key ) ; \n \t3 segment <identifiersep> filters [ seg <identifiersep> no ] . add <identifiersep> key ( local <identifiersep> <identifier> ) ; } \n <comment> \n <ect>
\t2 final hadoop <identifiersep> process proc = running <identifiersep> <identifier> <identifiersep> by <identifiersep> job <identifiersep> id . get ( meta . job <identifiersep> id ( ) ) ; \n \t2 <comment> \n \t2 if ( proc != null ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + network <identifiersep> object . get <identifiersep> display <identifiersep> text ( ) ) ; \n \t3 return ; } \n \t2 final list < nicira <identifiersep> nvp <identifiersep> device <identifiersep> vo > devices = nicira <identifiersep> nvp <identifiersep> dao . list <identifiersep> by <identifiersep> physical <identifiersep> network ( network <identifiersep> object . get <identifiersep> physical <identifiersep> network <identifiersep> id ( ) ) ; \n \t2 if ( devices . is <identifiersep> empty ( ) ) { \n <ect>
\t2 final long max <identifiersep> diff = long . parse <identifiersep> long ( system . get <identifiersep> property ( <string_literal> , <string_literal> ) ) ; \n \t2 try { \n \t3 if ( max <identifiersep> diff >= 0 ) { \n \t4 final long time <identifiersep> diff = ds . determine <identifiersep> server <identifiersep> time <identifiersep> difference <identifiersep> millis ( ) ; \n <ect>
\t3 list < file <identifiersep> info > info = results . get <identifiersep> file ( ) ; \n \t3 if ( info != null && info . size ( ) > 0 ) { \n \t4 s <identifiersep> logger . info ( <string_literal> + file <identifiersep> full <identifiersep> path + <string_literal> ) ; \n \t4 return true ; } } \n <ect>
\t1 @ test \n \t1 public void test1 ( ) { \n \t2 test <identifiersep> name = test <identifiersep> util . get <identifiersep> test <identifiersep> name ( ) ; \n \t2 expected <identifiersep> name = <string_literal> ; \n <ect>
\t1 public void update <identifiersep> timer ( string name , long duration , time <identifiersep> unit unit ) { \n \t2 log . info ( <string_literal> , new object [ ] { name , duration , unit } ) ; } \n \t1 @ override \n \t1 public void update <identifiersep> histogram ( string name , long value ) { \n <ect>
\t2 logger . trace ( <string_literal> , item . get <identifiersep> class ( ) , state . to <identifiersep> string ( ) ) ; \n \t2 dynamo <identifiersep> db <identifiersep> item < ? > dynamo <identifiersep> item = abstract <identifiersep> dynamo <identifiersep> db <identifiersep> item . from <identifiersep> state ( name , state , time ) ; \n \t2 dynamo <identifiersep> db <identifiersep> mapper mapper = get <identifiersep> db <identifiersep> mapper ( table <identifiersep> name <identifiersep> resolver . from <identifiersep> item ( dynamo <identifiersep> item ) ) ; \n \t2 if ( ! create <identifiersep> table ( mapper , dynamo <identifiersep> item . get <identifiersep> class ( ) ) ) { \n <ect>
\t1 byte [ ] response ; \n \t1 try { \n \t1 response = encode <identifiersep> password ( challenge , password ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 <comment> \n \t1 public void log <identifiersep> memory <identifiersep> stats ( ) { \n <ect>
\t4 final in <identifiersep> memory <identifiersep> <identifier> < e > buffer = element . buffer ; \n \t4 if ( ! buffer . is <identifiersep> empty ( ) ) { \n \t5 throw new io <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t1 public collection < file <identifiersep> reference > list ( string path ) { \n \t2 try { \n \t3 return client . list <identifiersep> files ( new string [ ] { path } ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 continue ; } \n \t3 <comment> \n \t3 if ( method . get <identifiersep> parameters ( ) . length != 0 ) \n \t3 { \n <ect>
<number_literal> final <identifier> <identifiersep> context context , final access <identifiersep> token access <identifiersep> token , \n <number_literal> final refresh <identifiersep> token refresh <identifiersep> token ) { \n \t2 logger . debug ( <string_literal> , access <identifiersep> token ) ; \n \t2 final o <identifiersep> auth20response <identifiersep> types type = o <identifiersep> auth20utils . get <identifiersep> response <identifiersep> type ( context ) ; \n <ect>
\t1 protected grid <identifiersep> hadoop <identifiersep> communication <identifiersep> client create <identifiersep> tcp <identifiersep> client ( grid <identifiersep> hadoop <identifiersep> process <identifiersep> descriptor desc ) throws grid <identifiersep> exception { \n \t2 string addr = desc . address ( ) ; \n \t2 int port = desc . tcp <identifiersep> port ( ) ; \n <ect>
\t2 <comment> \n \t2 start <identifiersep> stopwatch ( ) ; \n \t2 assert <identifiersep> parameter ( cred != null , <string_literal> ) ; \n <ect>
\t6 existing <identifiersep> handlers = arrays . as <identifiersep> list ( connector <identifiersep> ref . server . get <identifiersep> handlers ( ) ) ; } \n \t5 list < handler > new <identifiersep> handlers = new array <identifiersep> list < > ( endpoint . get <identifiersep> handlers ( ) ) ; \n \t5 boolean changed = ! existing <identifiersep> handlers . contains <identifiersep> all ( new <identifiersep> handlers ) && ! new <identifiersep> handlers . contains <identifiersep> all ( existing <identifiersep> handlers ) ; \n \t5 if ( changed ) { \n <ect>
\t2 <comment> \n \t2 } else if ( he instanceof h <identifiersep> pool <identifiersep> exhausted <identifiersep> exception ) { \n \t2 if ( pool . get <identifiersep> exhausted <identifiersep> time ( ) >= pool . get <identifiersep> cassandra <identifiersep> host ( ) . get <identifiersep> max <identifiersep> exhausted <identifiersep> time <identifiersep> before <identifiersep> <identifier> <identifiersep> as <identifiersep> down ( ) ) { \n \t3 mark <identifiersep> host <identifiersep> as <identifiersep> down ( pool . get <identifiersep> cassandra <identifiersep> host ( ) ) ; \n <ect>
\t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + md . get <identifiersep> type ( ) . name ( ) \n \t5 + <string_literal> + this . get <identifiersep> type ( ) . name ( ) + <string_literal> ) ; \n \t2 if ( get <identifiersep> type ( ) . is <identifiersep> xml <identifiersep> type ( ) ) { \n \t3 node <identifiersep> list <identifier> = md . get <identifiersep> document ( ) . get <identifiersep> document <identifiersep> element ( ) . get <identifiersep> child <identifiersep> nodes ( ) ; \n <ect>
\t2 add <identifiersep> <identifier> <identifiersep> values ( <string_literal> , persistence <identifiersep> adapter <identifiersep> choice . values ( ) ) ; } \n \t1 public void test <identifiersep> topic <identifiersep> is <identifiersep> durable <identifiersep> <identifier> <identifiersep> test ( ) throws exception { \n \t2 init <identifiersep> client ( ) ; \n \t2 message <identifiersep> consumer consumer = create <identifiersep> message <identifiersep> consumer ( ) ; \n <ect>
\t3 for ( future future : futures ) { \n \t4 try { \n \t5 future . cancel ( true ) ; \n \t4 } catch ( exception ex ) { \n <ect>
\t2 rdf <identifiersep> node node = null ; \n \t2 <comment> \n \t2 node <identifiersep> iterator = model . list <identifiersep> objects <identifiersep> of <identifiersep> property ( <identifier> <identifiersep> resource , property <identifiersep> predicate <identifiersep> property ) ; \n \t2 if ( ! node <identifiersep> iterator . has <identifiersep> next ( ) || ! ( node = node <identifiersep> iterator . next ( ) ) . is <identifiersep> resource ( ) ) { \n <ect>
\t5 c . set <identifiersep> property ( <string_literal> + i , <string_literal> + i ) ; } } \n \t3 node <identifiersep> store . merge ( extra , empty <identifiersep> hook . instance , commit <identifiersep> info . empty ) ; \n \t3 file <identifiersep> store . flush ( ) ; \n \t3 long <identifier> = file <identifiersep> store . get <identifiersep> stats ( ) . get <identifiersep> <identifier> <identifiersep> size ( ) ; \n <ect>
\t3 store <identifiersep> in <identifiersep> cache ( cache <identifiersep> key , host , request , entry ) ; \n \t3 return entry ; \n \t2 } catch ( final resource <identifiersep> io <identifiersep> exception ex ) { \n <ect>
<comment> \n @ get \n @ produces ( media <identifiersep> type . application <identifiersep> json ) \n public response get <identifiersep> job <identifiersep> list ( @ query <identifiersep> param ( <string_literal> ) final string script <identifiersep> id ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 log . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t2 finally { \n \t3 output <identifiersep> collector . ack ( tuple ) ; } \n <ect>
\t4 t . join ( ) ; \n \t3 } catch ( exception e ) { \n \t4 log . error ( <string_literal> , e ) ; } } \n \t2 context . stop <identifiersep> profiler ( ) ; \n <ect>
\t5 cmd . set <identifiersep> cluster ( <identifier> <identifiersep> cluster ) ; \n \t5 s <identifiersep> logger . info ( <string_literal> + <identifier> <identifiersep> gson . to <identifiersep> json ( cmd ) ) ; \n \t5 storage <identifiersep> cmds . add ( cmd ) ; } \n \t3 } else { \n <ect>
<comment> \n \t3 remove <identifiersep> listener : function ( el , s <identifiersep> type , fn , index ) { \n \t4 if ( ! fn || ! fn . call ) { \n <ect>
\t4 return new ovs <identifiersep> create <identifiersep> tunnel <identifiersep> answer ( command , true , result , null , bridge ) ; \n \t3 } else { \n \t4 return new ovs <identifiersep> create <identifiersep> tunnel <identifiersep> answer ( command , false , result , bridge ) ; } \n \t2 } catch ( final exception e ) { \n <ect>
\t2 delegate = factory . get <identifiersep> message <identifiersep> body <identifiersep> reader ( ejb <identifiersep> book . class , null , null , constants . media <identifiersep> type <identifiersep> test <identifiersep> xml <identifiersep> type ) ; } \n \t1 public boolean is <identifiersep> readable ( class < ? > type , type generic <identifiersep> type , annotation [ ] annotations , media <identifiersep> type media <identifiersep> type ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 boolean b = ejb <identifiersep> book . class . equals ( type ) ; \n <ect>
\t6 log . info ( <string_literal> + rsrc4 ) ; \n \t6 log . info ( <string_literal> + rsrc5 ) ; \n \t6 log . info ( <string_literal> + rsrc6 ) ; \n \t6 log . info ( <string_literal> + rsrc7 ) ; \n <ect>
\t4 eo <identifiersep> qualifier q = real <identifiersep> qualifier ( ) ; \n \t4 if ( q == null || q . evaluate <identifiersep> with <identifiersep> object ( event ) ) { \n \t5 sub <identifiersep> append ( event ) ; } } \n \t2 } else { \n <ect>
\t4 <comment> \n \t4 sleep ( <number_literal> ) ; } \n \t3 message test = ses <identifiersep> hub . create <identifiersep> text <identifiersep> message ( <string_literal> + i ) ; \n \t3 local <identifiersep> producer . send ( test ) ; } \n <ect>
private void remove <identifiersep> all <identifiersep> redundant <identifiersep> nodes ( ) { \n \t1 try { \n \t1 check <identifiersep> redundant <identifiersep> node ( <string_literal> + parent ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 do <identifiersep> status <identifiersep> check ( ) ; } } \n \t3 catch ( exception e ) \n \t3 { \n \t4 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( e ) ; \n <ect>
\t4 synchronized ( <identifier> <identifiersep> listener <identifiersep> map ) { \n \t5 <identifier> = <identifier> <identifiersep> listener <identifiersep> map . remove ( <identifier> ) ; } \n \t4 if ( <identifier> != null ) { \n \t5 <identifier> . <identifier> ( ) ; \n <ect>
import params \n if params . enable <identifiersep> ranger <identifiersep> kafka : \n \t1 from resource <identifiersep> management . <identifier> . functions . setup <identifiersep> ranger <identifiersep> plugin <identifiersep> xml import setup <identifiersep> ranger <identifiersep> plugin \n \t1 if params . retry <identifiersep> able : \n <ect>
\t2 super . set <identifiersep> up ( ) ; \n \t2 consumer <identifiersep> <identifier> = consume <identifiersep> session . create <identifiersep> topic ( <string_literal> ) ; \n \t2 log . info ( <string_literal> + consumer <identifiersep> <identifier> + <string_literal> + consumer <identifiersep> <identifier> . get <identifiersep> class ( ) ) ; \n \t2 if ( durable ) { \n <ect>
\t3 instance = new <identifier> <identifiersep> code ( ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 <comment> \n \t3 if ( ! utils . is <identifiersep> android <identifiersep> runtime ( ) ) \n <ect>
\t1 document <identifiersep> builder builder = null ; \n \t1 try { \n \t1 builder = builder <identifiersep> factory . new <identifiersep> document <identifiersep> builder ( ) ; \n \t1 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public void sample <identifiersep> resume ( ) { \n \t2 if ( pause <identifiersep> time == 0 ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t2 if ( throwable != null ) { \n \t3 if ( throwable instanceof rejected <identifiersep> execution <identifiersep> exception ) { \n \t3 log . debug ( <string_literal> , throwable ) ; \n \t3 } else { \n <ect>
\t1 static { \n \t2 runtime . get <identifiersep> runtime ( ) . add <identifiersep> shutdown <identifiersep> hook ( new thread ( new runnable ( ) { \n \t3 public void run ( ) { \n <ect>
\t5 { \n \t6 host <identifiersep> stats . put ( host . get <identifiersep> id ( ) , stats ) ; } \n \t5 else \n \t5 { \n <ect>
\t1 while ( m . find ( ) ) { \n \t1 final string key = m . group ( 1 ) ; \n \t1 final string value = m . group ( <number_literal> ) ; \n \t1 if ( map . contains <identifiersep> key ( key ) ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void shut <identifiersep> down ( ) { \n \t2 if ( state . get <identifiersep> and <identifiersep> update ( s - > state . shut <identifiersep> down ) != state . shut <identifiersep> down ) { \n <ect>
\t1 private class assert <identifiersep> shutdown <identifiersep> hook extends thread { \n \t2 public void run ( ) { \n \t3 long diff = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n \t3 if ( diff > <number_literal> ) { \n <ect>
\t10 if ( prototype <identifiersep> attribute == null ) { \n <number_literal> log . warn ( <string_literal> , model . name ( ) , entity . name ( ) , attribute . name ( ) , prototype <identifiersep> attribute <identifiersep> name , prototype <identifiersep> entity . name ( ) ) ; } \n \t10 else if ( attribute . prototype ( ) . entity ( ) == prototype <identifiersep> entity ) { \n <ect>
\t2 <comment> \n \t2 storage <identifiersep> pool <identifiersep> vo lock = <identifier> <identifiersep> storage <identifiersep> pool <identifiersep> dao . acquire <identifiersep> in <identifiersep> lock <identifiersep> table ( s <identifiersep> pool . get <identifiersep> id ( ) ) ; \n \t2 if ( lock == null ) { \n <ect>
\t2 system . out . println ( ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> decode <identifiersep> input <identifiersep> stream ( ) { \n <ect>
\t7 s <identifiersep> logger . debug ( <string_literal> + resource <identifiersep> type + <string_literal> + domain . get <identifiersep> id ( ) ) ; \n \t7 <identifier> <identifiersep> resource <identifiersep> count <identifiersep> dao . persist ( resource <identifiersep> count <identifiersep> vo ) ; } } } \n \t4 txn . commit ( ) ; } } \n \t2 if ( ( account <identifiersep> resource <identifiersep> count . size ( ) < account <identifiersep> expected <identifiersep> count * accounts . size ( ) ) ) { \n <ect>
\t2 if ( acct . get <identifiersep> status ( ) == duo <identifiersep> user <identifiersep> account <identifiersep> auth <identifiersep> status . allow ) { \n \t3 logger . debug ( <string_literal> , principal ) ; \n \t3 return false ; } \n \t2 if ( acct . get <identifiersep> status ( ) == duo <identifiersep> user <identifiersep> account <identifiersep> auth <identifiersep> status . <identifier> ) { \n <ect>
\t7 relay <identifiersep> notification . <identifier> = audit <identifiersep> log <identifiersep> id } \n \t6 relay <identifiersep> notification . action = monitor <identifiersep> type <identifiersep> constants . update <identifiersep> action \n \t6 relay <identifiersep> email <identifiersep> notification <identifiersep> service . save <identifiersep> with <identifiersep> session ( relay <identifiersep> notification , username ) } \n \t4 } catch ( e : exception ) { \n <ect>
\t2 string project = <string_literal> ; \n \t2 string user = <string_literal> ; \n \t2 string <identifier> = <string_literal> ; \n \t2 try { \n <ect>
\t2 if ( log != null ) log . info ( <string_literal> , msg ) ; } \n \t1 public static void error ( log log , string msg ) { \n \t2 if ( log != null ) log . error ( <string_literal> , msg ) ; } \n \t1 public static void error ( log log , throwable t ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 test <identifiersep> expect <identifiersep> action <identifiersep> request <identifiersep> validation <identifiersep> exception ( ( string [ ] ) null ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 test <identifiersep> expect <identifiersep> action <identifiersep> request <identifiersep> validation <identifiersep> exception ( <string_literal> ) ; \n <ect>
\t1 public boolean call ( ) { \n <comment> \n <comment> \n <comment> \n <ect>
\t2 for ( progress <identifiersep> listener listener : listeners ) { \n \t3 try { \n \t4 listener . progress <identifiersep> changed ( filtered <identifiersep> event ) ; \n \t3 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t1 injector . inject ( processor ) ; \n \t1 return processor ; } \n private callable < void > create <identifiersep> async <identifiersep> check <identifiersep> callable ( final cache <identifiersep> key cache <identifiersep> key ) { \n \t1 final http <identifiersep> servlet <identifiersep> request original <identifiersep> request = context . get ( ) . get <identifiersep> request ( ) ; \n <ect>
\t3 acl <identifiersep> object acl = get <identifiersep> acl <identifiersep> object <identifiersep> for <identifiersep> node ( node <identifiersep> key <identifiersep> node <identifiersep> name ) ; \n \t3 node <identifiersep> key = generate <identifiersep> new <identifiersep> node <identifiersep> key ( node <identifiersep> key <identifiersep> node <identifiersep> name , node <identifiersep> key , acl . acl ( ) ) ; \n \t2 } else { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> accesscontrol , level . info ) ) { \n <ect>
\t4 log . info ( <string_literal> + get <identifiersep> job <identifiersep> info ( ) ) ; } \n \t2 catch ( interrupted <identifiersep> exception ignored ) { \n <ect>
\t2 cache exception <identifiersep> cache = cache <identifiersep> manager . get <identifiersep> cache ( exception <identifiersep> query <identifiersep> cache ) ; \n \t2 cache success <identifiersep> cache = cache <identifiersep> manager . get <identifiersep> cache ( success <identifiersep> query <identifiersep> cache ) ; \n \t2 element element = null ; \n \t2 if ( ( element = exception <identifiersep> cache . get ( sql <identifiersep> request . get <identifiersep> cache <identifiersep> key ( ) ) ) != null ) { \n <ect>
\t1 protected model <identifiersep> and <identifiersep> view handle <identifiersep> request <identifiersep> internal ( http <identifiersep> servlet <identifiersep> request request , http <identifiersep> servlet <identifiersep> response response ) { \n \t2 string lookup <identifiersep> path = get <identifiersep> url <identifiersep> path <identifiersep> helper ( ) . get <identifiersep> lookup <identifiersep> path <identifiersep> for <identifiersep> request ( request ) ; \n \t2 string view <identifiersep> name = get <identifiersep> view <identifiersep> name <identifiersep> for <identifiersep> request ( request ) ; \n <ect>
\t2 session session = connection . create <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n \t2 message <identifiersep> producer producer = session . create <identifiersep> producer ( destination ) ; \n \t2 producer . send ( destination , session . create <identifiersep> text <identifiersep> message ( <string_literal> ) , delivery <identifiersep> mode . persistent , <number_literal> , <number_literal> ) ; \n \t2 connection . stop ( ) ; \n <ect>
\t1 return str . to <identifiersep> string ( ) ; } \n private valid <identifiersep> write <identifiersep> id <identifiersep> list extract <identifiersep> valid <identifiersep> write <identifiersep> id <identifiersep> list ( ) { \n \t1 if ( curr <identifiersep> desc . get <identifiersep> table <identifiersep> name ( ) == null || ! org . apache . commons . lang . string <identifiersep> utils . is <identifiersep> blank ( curr <identifiersep> desc . get <identifiersep> table <identifiersep> name ( ) ) ) { \n \t1 string txn <identifiersep> string = job . get ( valid <identifiersep> write <identifiersep> id <identifiersep> list . valid <identifiersep> <identifier> <identifiersep> key ) ; \n <ect>
\t2 synchronized ( <identifier> <identifiersep> lock ) { \n \t3 try { \n \t4 connect ( ) ; \n \t3 } catch ( throwable e ) { \n <ect>
\t2 return new org . apache . thrift . async . async <identifiersep> method <identifiersep> callback < void > ( ) { \n \t2 public void on <identifiersep> complete ( void o ) { } \n \t2 public void on <identifiersep> error ( java . lang . exception e ) { \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t4 optional < string > opt = project . translate ( uri . get <identifiersep> fragment <identifiersep> name ( ) , other <identifiersep> locale ) ; \n \t4 if ( opt . is <identifiersep> present ( ) ) { \n \t5 return opt . get ( ) ; \n \t4 } else { \n <ect>
\t2 } catch ( jms <identifiersep> security <identifiersep> exception ex ) { \n \t3 log . info ( <string_literal> ) ; } \n \t2 connection = pooled <identifiersep> conn <identifiersep> fact . create <identifiersep> connection ( <string_literal> , <string_literal> ) ; \n \t2 connection . start ( ) ; \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + <identifier> <identifiersep> gson . to <identifiersep> json ( cmd ) ) ; } \n \t2 return <identifier> <identifiersep> storage <identifiersep> mgr . execute ( this , cmd ) ; } \n \t1 private answer execute ( copy <identifiersep> volume <identifiersep> command cmd ) { \n <ect>
\t7 + map . key <identifiersep> set ( ) . iterator ( ) . next ( ) + <string_literal> + transaction <identifiersep> manager ) ; \n \t4 } else { \n \t5 log . debug ( <string_literal> + map . size ( ) + <string_literal> ) ; } } \n \t2 } else { \n <ect>
\t3 msg . set <identifiersep> jms <identifiersep> reply <identifiersep> to ( resp <identifiersep> dest ) ; \n \t3 if ( cur == ( num <identifiersep> msg - 1 ) ) \n \t4 msg . set <identifiersep> boolean <identifiersep> property ( <string_literal> , true ) ; \n \t3 send <identifiersep> with <identifiersep> retry <identifiersep> on <identifiersep> deleted <identifiersep> dest ( req <identifiersep> prod , msg ) ; \n <ect>
\t1 protected void open <identifiersep> connection ( ) { \n \t2 this . task <identifiersep> executor . execute ( ( ) - > { \n \t3 try { \n <ect>
\t1 executor <identifiersep> service . schedule <identifiersep> at <identifiersep> fixed <identifiersep> rate ( aggregator , \n \t2 0l , \n \t2 aggregator . get <identifiersep> sleep <identifiersep> interval <identifiersep> millis ( ) , \n \t2 time <identifiersep> unit . milliseconds ) ; \n <ect>
<number_literal> null , \n <number_literal> env ) ; \n \t6 work <identifiersep> item = input <identifiersep> marshaller . read <identifiersep> work <identifiersep> item ( context ) ; \n \t5 } catch ( io <identifiersep> exception e1 ) { \n <ect>
\t1 try { \n \t2 <comment> \n \t2 err <identifiersep> thread . join ( ) ; \n \t1 } catch ( interrupted <identifiersep> exception ie ) { \n <ect>
\t2 if ( state == null ) { \n \t3 log . warn ( <string_literal> ) ; \n \t3 return challenge ( <number_literal> , oidc <identifiersep> authentication <identifiersep> error . reason . invalid <identifiersep> state <identifiersep> cookie , null ) ; } \n \t2 if ( ! state . equals ( state <identifiersep> cookie <identifiersep> value ) ) { \n <ect>
\t4 spent . put ( tx . get <identifiersep> hash ( ) , tx ) ; } \n \t2 } else { \n \t3 if ( spent . remove ( tx . get <identifiersep> hash ( ) ) != null ) { \n <ect>
@ override \n public void deliver ( notification notification , string username ) { \n \t1 user user = user <identifiersep> finder . find <identifiersep> by <identifiersep> login ( username ) ; \n \t1 if ( user == null || string <identifiersep> utils . is <identifiersep> blank ( user . email ( ) ) ) { \n <ect>
\t2 <comment> \n \t2 resource <identifiersep> manager <identifiersep> leader <identifiersep> <identifier> . start ( new resource <identifiersep> manager <identifiersep> leader <identifiersep> listener ( ) ) ; } \n \t1 private void set <identifiersep> new <identifiersep> <identifier> <identifiersep> token ( job <identifiersep> master <identifiersep> id new <identifiersep> job <identifiersep> master <identifiersep> id ) { \n \t2 if ( get <identifiersep> <identifier> <identifiersep> token ( ) != null ) { \n <ect>
\t6 has <identifiersep> lock = false ; } } \n \t4 catch ( suppress <identifiersep> reply <identifiersep> exception ignore <identifiersep> while <identifiersep> handling <identifiersep> in <identifiersep> progress ) { } \n \t4 catch ( io <identifiersep> exception ignored ) { } \n \t4 if ( ! has <identifiersep> lock ) { \n <ect>
\t4 } catch ( throwable e ) { \n \t5 tx . rollback ( ) ; \n \t5 logger . error ( <string_literal> , \n \t7 e . get <identifiersep> message ( ) , processor , <identifier> <identifiersep> name , i , retry <identifiersep> attempts ) ; \n <ect>
\t2 try { \n \t3 this . view <identifiersep> name <identifiersep> translator = \n \t5 context . get <identifiersep> bean ( request <identifiersep> to <identifiersep> view <identifiersep> name <identifiersep> translator <identifiersep> bean <identifiersep> name , request <identifiersep> to <identifiersep> view <identifiersep> name <identifiersep> translator . class ) ; \n <ect>
\t6 start <identifiersep> grid ( idx ) ; } \n \t5 return null ; } \n \t3 } ) ; \n \t3 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n <ect>
\t3 for ( i = 0 ; i < <number_literal> ; i ++ ) { \n \t4 kie <identifiersep> session <identifier> = <identifier> . new <identifiersep> kie <identifiersep> session ( conf , null ) ; \n \t4 <identifier> . dispose ( ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t8 new <identifiersep> graph . get <identifiersep> reachable <identifiersep> nodes ( ) . size ( ) , \n \t8 new <identifiersep> graph . get <identifiersep> reachable <identifiersep> nodes ( ) . size ( ) ) ; \n \t5 return new <identifiersep> graph ; \n \t4 } catch ( injection <identifiersep> exception e ) { \n <ect>
\t3 domain <identifiersep> resource <identifiersep> limit <identifiersep> map . put ( resource . resource <identifiersep> type . memory , long . parse <identifiersep> long ( <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( config . default <identifiersep> max <identifiersep> domain <identifiersep> memory . key ( ) ) ) ) ; \n \t3 domain <identifiersep> resource <identifiersep> limit <identifiersep> map . put ( resource . resource <identifiersep> type . primary <identifiersep> storage , long . parse <identifiersep> long ( <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( config . default <identifiersep> max <identifiersep> domain <identifiersep> primary <identifiersep> storage . key ( ) ) ) ) ; \n \t3 domain <identifiersep> resource <identifiersep> limit <identifiersep> map . put ( resource . resource <identifiersep> type . secondary <identifiersep> storage , long . parse <identifiersep> long ( <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( config . default <identifiersep> max <identifiersep> domain <identifiersep> secondary <identifiersep> storage . key ( ) ) ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t5 request <identifiersep> soap <identifiersep> parts , \n \t5 response <identifiersep> soap <identifiersep> parts , \n \t5 context ) ; \n \t3 } catch ( <identifier> <identifiersep> exception <identifier> ) { \n <ect>
\t2 logger . minor ( this , <string_literal> + identifier ) ; \n \t2 bucket data = binary <identifiersep> blob ? state . get <identifiersep> blob <identifiersep> bucket ( ) : result . as <identifiersep> bucket ( ) ; \n \t2 synchronized ( this ) { \n \t3 if ( succeeded ) { \n <ect>
\t2 if ( b . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) return boolean . true ; \n \t2 if ( b . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) return boolean . false ; \n \t2 throw new bad <identifiersep> boolean <identifiersep> exception ( b ) ; } \n \t1 resource [ ] set <identifiersep> types ( resource x [ ] ) { \n <ect>
\t1 assert <identifiersep> true ( <string_literal> , false ) ; \n \t1 m <identifiersep> log . error ( <string_literal> ) ; } } \n @ test \n public void test <identifiersep> get <identifiersep> <identifier> <identifiersep> docs ( ) { \n <ect>
\t2 for ( final string target : target <identifiersep> host <identifiersep> ip ) { \n \t3 scheduled <identifiersep> task <identifiersep> service . run <identifiersep> async ( new runnable ( ) { \n \t4 @ override \n \t4 public void run ( ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 decorators <identifiersep> visit <identifiersep> list . add ( decorators <identifiersep> visit <identifiersep> list . resource <identifiersep> interceptor <identifiersep> enter ) ; \n \t2 object result = ctx . proceed ( ) ; \n \t2 decorators <identifiersep> visit <identifiersep> list . add ( decorators <identifiersep> visit <identifiersep> list . resource <identifiersep> interceptor <identifiersep> leave ) ; \n <ect>
\t2 { \n \t3 return <identifier> <identifiersep> uri <identifiersep> field . get ( ) ; } \n \t2 catch ( <identifier> <identifiersep> parse <identifiersep> exception exc ) \n \t2 { \n <ect>
\t1 system . err . println ( <identifier> ) ; } \n public static void main ( string [ ] args ) { \n \t1 system . exit ( run ( args ) ) ; } \n public static int run ( string [ ] args ) { \n <ect>
\t7 group <identifiersep> tn . <identifier> = new array <identifiersep> list < <identifier> <identifiersep> value > ( ) ; \n \t7 group <identifiersep> tn . <identifier> . add ( new <identifiersep> static <identifiersep> lock <identifiersep> eq <identifiersep> val ) ; } \n \t6 <comment> \n \t6 integer lock <identifiersep> num = new integer ( - lock <identifiersep> pt <identifiersep> sets . size ( ) ) ; <comment> \n <ect>
\t1 try { \n \t1 if ( kill <identifiersep> running <identifiersep> tez <identifiersep> jobs != null ) { \n \t2 kill <identifiersep> running <identifiersep> tez <identifiersep> jobs . invoke ( null , null ) ; \n \t1 } else { \n <ect>
\t3 response <identifiersep> future future = ( ( future <identifiersep> adapter < ? > ) f ) . get <identifiersep> future ( ) ; \n \t3 future . set <identifiersep> callback ( new response <identifiersep> callback ( ) { \n \t4 public void done ( object rpc <identifiersep> result ) { \n \t5 if ( rpc <identifiersep> result == null ) { \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( commit <identifiersep> interval <identifiersep> string ) ) { \n \t3 try { \n \t4 commit <identifiersep> interval = integer . value <identifiersep> of ( commit <identifiersep> interval <identifiersep> string ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t3 string path = <string_literal> + client . get <identifiersep> namespace ( ) ; \n \t3 log . info ( <string_literal> , path ) ; \n \t3 zk <identifiersep> paths . delete <identifiersep> children ( client . get <identifiersep> zookeeper <identifiersep> client ( ) . get <identifiersep> zoo <identifiersep> keeper ( ) , path , true ) ; \n \t2 } else { \n <ect>
\t6 } catch ( exception ignored ) { \n \t7 log . error ( <string_literal> , ignored ) ; \n \t7 exceptions . add ( ignored ) ; } } \n \t4 } ) ; } } \n <ect>
\t2 <comment> \n \t2 @ override protected collection < ? extends grid <identifiersep> compute <identifiersep> job > split ( int grid <identifiersep> size , serializable arg ) throws grid <identifiersep> exception { \n \t3 assert task <identifiersep> ses != null ; \n <ect>
\t2 <identifier> <identifiersep> reason not <identifiersep> vectorized <identifiersep> reason = current <identifiersep> base <identifiersep> work . get <identifiersep> not <identifiersep> vectorized <identifiersep> reason ( ) ; \n \t2 if ( not <identifiersep> vectorized <identifiersep> reason == null ) { \n \t3 log . info ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t1 if ( ! bootstrap <identifiersep> args . is <identifiersep> cloud <identifiersep> controller ( ) ) { \n \t1 while ( list ( filter <identifiersep> <identifier> <identifiersep> <identifier> ) . is <identifiersep> empty ( ) ) { \n \t2 time <identifiersep> unit . seconds . sleep ( <number_literal> ) ; <comment> \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t5 input <identifiersep> stream original = this . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) \n \t5 files . copy ( original , new <identifiersep> file , standard <identifiersep> copy <identifiersep> option . replace <identifiersep> existing ) \n \t5 license <identifiersep> file = new <identifiersep> file \n \t4 } else { \n <ect>
\t7 s <identifiersep> logger . trace ( <string_literal> + preferred <identifiersep> host + <string_literal> ) ; } } \n \t5 if ( is <identifiersep> host <identifiersep> up && <identifier> <identifiersep> link != null && <identifier> <identifiersep> in <identifiersep> progress . get ( ) == 0 ) { \n <ect>
\t9 . get <identifiersep> account <identifiersep> id ( ) ) ; \n \t7 break ; } \n \t6 else \n \t6 { \n <ect>
\t3 stmt . set <identifiersep> string ( <number_literal> , name ) ; \n \t3 stmt . execute <identifiersep> update ( ) ; \n \t3 return true ; \n \t2 } catch ( exception e ) { \n <ect>
@ override \n public void send ( final message message ) { \n \t1 message . set <identifiersep> resource ( request <identifiersep> dispatcher . class . get <identifiersep> name ( ) , bus <identifiersep> tools <identifiersep> cli . get <identifiersep> request <identifiersep> dispatcher <identifiersep> provider ( ) ) \n \t2 . set <identifiersep> resource ( <string_literal> , bus <identifiersep> tools <identifiersep> cli . get <identifiersep> client <identifiersep> session ( ) ) . commit ( ) ; \n <ect>
\t3 for ( map . entry < string , <identifier> <identifiersep> type > entry : ctx . get <identifiersep> variables ( ) . entry <identifiersep> set ( ) ) { \n \t4 variable <identifiersep> types . put ( entry . get <identifiersep> key ( ) , ( ( base <identifiersep> <identifier> <identifiersep> type <identifiersep> impl ) entry . get <identifiersep> value ( ) ) . get <identifiersep> <identifier> <identifiersep> type ( ) ) ; } \n \t3 result = <identifier> . evaluate <identifiersep> <identifier> <identifiersep> tests ( <identifier> <identifiersep> tests , variable <identifiersep> types ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t6 performance <identifiersep> monitor <identifiersep> command perf <identifiersep> <identifier> = new performance <identifiersep> monitor <identifiersep> command ( params , <number_literal> ) ; \n \t6 try { \n \t7 answer answer = <identifier> <identifiersep> agent <identifiersep> mgr . send ( receive <identifiersep> host , perf <identifiersep> <identifier> ) ; \n \t7 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t3 if ( job . get <identifiersep> status ( ) != executable <identifiersep> state . <identifier> ) { \n \t4 logger . warn ( <string_literal> + job <identifiersep> id + <string_literal> + job . get <identifiersep> status ( ) . to <identifiersep> string ( ) \n \t6 + <string_literal> ) ; \n \t3 } else { \n <ect>
\t4 dynamic <identifiersep> done = true ; \n \t4 break ; \n \t3 case protection <identifiersep> set : \n \t3 default : \n <ect>
\t5 if ( account <identifiersep> id <identifiersep> final != null ) { \n \t6 dedicated <identifiersep> resource . set <identifiersep> account <identifiersep> id ( account <identifiersep> id <identifiersep> final ) ; } \n \t5 dedicated <identifiersep> resource = <identifier> <identifiersep> dedicated <identifiersep> dao . persist ( dedicated <identifiersep> resource ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 <string_literal> , \n \t1 archive <identifiersep> path . to <identifiersep> string ( ) \n \t1 } ; \n <comment> \n <ect>
\t4 return new check <identifiersep> ssh <identifiersep> answer ( cmd , <string_literal> + vm <identifiersep> name + <string_literal> + result ) ; } \n \t2 } catch ( exception e ) { \n \t3 return new check <identifiersep> ssh <identifiersep> answer ( cmd , e ) ; } \n <ect>
\t4 if ( object . get <identifiersep> type ( ) == data <identifiersep> object <identifiersep> type . volume ) { \n \t5 <identifier> . set <identifiersep> resource <identifiersep> type ( resource <identifiersep> type . volume ) ; } \n \t4 <identifier> <identifiersep> ss <identifiersep> agent . send <identifiersep> message <identifiersep> async ( <identifier> , new upload <identifiersep> listener . callback ( <identifier> <identifiersep> ss <identifiersep> agent . get <identifiersep> id ( ) , this ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 if ( ejb != null && ! this . home <identifiersep> as <identifiersep> component ) { \n \t3 try { \n \t4 ejb . remove ( ) ; } \n \t3 catch ( throwable ex ) { \n <ect>
\t5 msg += data <identifiersep> helper . format <identifiersep> duration ( 0 - <identifier> ) + <string_literal> ; \n \t4 <identifier> <identifiersep> log . error ( msg ) ; \n \t4 <identifier> <identifiersep> runner . disconnect <identifiersep> client ( msg ) ; \n \t3 } else { \n <ect>
\t5 connection <identifiersep> supervisor = new connection <identifiersep> supervisor ( connection <identifiersep> test <identifiersep> interval ) ; } \n \t3 } catch ( unknown <identifiersep> host <identifiersep> exception unknown <identifiersep> host ) { \n \t4 logger . error ( <string_literal> , unknown <identifiersep> host ) ; \n \t3 } catch ( io <identifiersep> exception io <identifiersep> exception ) { \n <ect>
\t2 <comment> \n \t2 if ( current <identifiersep> state . <identifier> ( new <identifiersep> cluster <identifiersep> state ) || \n \t4 ( new <identifiersep> cluster <identifiersep> state . nodes ( ) . get <identifiersep> master <identifiersep> node <identifiersep> id ( ) . equals ( current <identifiersep> state . nodes ( ) . get <identifiersep> master <identifiersep> node <identifiersep> id ( ) ) && current <identifiersep> state . version ( ) == new <identifiersep> cluster <identifiersep> state . version ( ) ) ) { \n \t3 <comment> \n <ect>
<comment> \n \t1 protected void <identifier> ( <identifier> <identifiersep> pooled <identifiersep> connection pooled <identifiersep> connection ) throws sql <identifiersep> exception { \n \t2 final <identifier> <identifiersep> connection <identifiersep> holder holder = pooled <identifiersep> connection . holder ; \n \t2 if ( holder == null ) { \n <ect>
\t3 z <identifiersep> wave <identifiersep> command <identifiersep> class zwave <identifiersep> command <identifiersep> class ; \n \t3 int command <identifiersep> class <identifiersep> code = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset + 1 ) ; \n \t3 command <identifiersep> class = command <identifiersep> class . get <identifiersep> command <identifiersep> class ( command <identifiersep> class <identifiersep> code ) ; \n \t3 if ( command <identifiersep> class == null ) { \n <ect>
\t3 log . info ( log . fac <identifiersep> test , <string_literal> + name ) ; \n \t3 content <identifiersep> object result = get <identifiersep> handle . get ( name , system <identifiersep> configuration . no <identifiersep> timeout ) ; \n \t3 log . info ( log . fac <identifiersep> test , <string_literal> + ( result == null ? <string_literal> : <string_literal> ) + <string_literal> ) ; \n \t3 if ( result == null ) { \n <ect>
\t6 results . add ( wiki <identifiersep> prefix + it . next ( ) ) ; } \n \t4 } catch ( exception e ) { \n \t5 logger . error ( <string_literal> , wiki , e ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t5 <identifier> <identifiersep> provider auth <identifiersep> provider = \n \t7 ( <identifier> <identifiersep> provider ) \n \t9 provider <identifiersep> registry . get <identifiersep> provider ( auth <identifiersep> provider <identifiersep> prop ) ; \n \t5 if ( auth <identifiersep> provider == null ) { \n <ect>
\t2 { \n \t3 return failure <identifiersep> detector . initial <identifiersep> value <identifiersep> nanos ; } \n \t2 else \n \t2 { \n <ect>
\t2 try ( input <identifiersep> stream in = <identifier> <identifiersep> card <identifiersep> renderer . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> + name + <string_literal> ) ) { \n \t3 return font . create <identifiersep> font ( \n \t5 font . <identifier> <identifiersep> font , in ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if no <identifiersep> of <identifiersep> vms < <number_literal> : \n \t3 self . logger . debug ( <string_literal> ) \n \t3 no <identifiersep> vm <identifiersep> req = <number_literal> - no <identifiersep> of <identifiersep> vms \n \t3 if ( no <identifiersep> vm <identifiersep> req > 0 ) : \n <ect>
\t4 is <identifiersep> logged <identifiersep> in = false ; \n \t4 method . release <identifiersep> connection ( ) ; \n \t4 continue ; <comment> \n \t3 } catch ( http <identifiersep> exception he ) { \n <ect>
\t4 for ( string serial <identifiersep> key : association <identifiersep> map . key <identifiersep> set ( ) ) { \n \t5 if ( serial <identifiersep> key != null ) { \n \t6 logger . debug ( <string_literal> + serial <identifiersep> key + <string_literal> ) ; \n \t6 for ( max <identifiersep> cul <identifiersep> binding <identifiersep> config bc : association <identifiersep> map . get ( serial <identifiersep> key ) ) { \n <ect>
\t7 log . debug ( <string_literal> + f0 ) ; \n \t6 grid <identifiersep> <identifier> <identifiersep> shared <identifiersep> memory <identifiersep> utils . free <identifiersep> system <identifiersep> resources ( f0 . get <identifiersep> absolute <identifiersep> path ( ) , size ) ; \n \t6 if ( f0 . delete ( ) ) { \n <ect>
\t1 public <identifier> <identifiersep> set <identifiersep> fun <identifiersep> def ( fun <identifiersep> def dummy <identifiersep> fun <identifiersep> def ) { \n \t2 super ( dummy <identifiersep> fun <identifiersep> def ) ; \n \t2 logger . debug ( <string_literal> ) ; } \n \t1 public exp create <identifiersep> call ( validator validator , exp [ ] args ) { \n <ect>
\t3 parsed <identifiersep> tag p , \n \t3 html <identifiersep> parse <identifiersep> context pc ) throws data <identifiersep> filter <identifiersep> exception { \n \t3 map < string , object > <identifier> = new linked <identifiersep> hash <identifiersep> map < string , object > ( ) ; \n \t3 for ( map . entry < string , object > entry : h . entry <identifiersep> set ( ) ) { \n <ect>
\t3 catch ( exception ex ) { \n \t4 privilege p = es . get <identifiersep> privilege <identifiersep> by <identifiersep> uuid ( text ) ; \n \t4 set <identifiersep> value ( p ) ; \n \t4 if ( p == null ) { \n <ect>
\t3 boolean original <identifiersep> value = ( boolean ) context . get ( x <identifiersep> wiki <identifiersep> constant . dropped <identifiersep> permissions ) ; \n \t3 if ( original <identifiersep> value != null ) { \n \t4 context . put ( <identifier> <identifiersep> key , original <identifiersep> value ) ; } \n \t3 if ( ! log <identifiersep> printed ) { \n <ect>
\t4 this . op <identifiersep> set <identifiersep> <identifier> <identifiersep> <identifier> . get <identifiersep> server <identifiersep> stored <identifiersep> contact <identifiersep> list <identifiersep> root ( ) \n \t5 . get <identifiersep> group ( test <identifiersep> group <identifiersep> <identifier> ) ) ; } \n \t2 catch ( operation <identifiersep> failed <identifiersep> exception ex ) \n \t2 { \n <ect>
\t6 logger . debug ( <string_literal> , s , service . get <identifiersep> id ( ) ) ; \n \t6 other <identifiersep> scopes . add ( s . trim ( ) ) ; \n \t6 break ; \n \t5 default : \n <ect>
\t1 is <identifiersep> alive = false ; \n \t1 try { \n \t2 protocol . end <identifiersep> session ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t2 return node ; } \n \t1 public void set <identifiersep> node ( processor <identifiersep> definition < ? > node ) { \n \t2 this . node = node ; \n <ect>
\t2 if ( ! f . delete ( ) ) { \n \t2 logger . warn ( <string_literal> , f . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n \t1 } else { \n \t2 if ( ! f . delete ( ) ) { \n <ect>
\t3 template <identifiersep> <identifier> . get <identifiersep> channel ( ) . transfer <identifiersep> to ( 0 , get <identifiersep> max <identifiersep> file <identifiersep> length ( ) , file . get <identifiersep> channel ( ) ) ; \n \t2 } catch ( closed <identifiersep> by <identifiersep> interrupt <identifiersep> exception ignored ) { \n \t3 log . trace ( <string_literal> , ignored ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t4 result = <identifier> ( result , map ) ; } \n \t3 return result ; } \n \t2 catch ( exception e ) { \n \t3 if ( ignore <identifiersep> bad <identifiersep> files ) { \n <ect>
\t2 dfs = <identifier> . get <identifiersep> mini <identifiersep> dfs ( conf , num <identifiersep> data <identifiersep> nodes , true , null ) ; \n \t2 fs = dfs . get <identifiersep> file <identifiersep> system ( ) ; \n \t2 <comment> \n \t2 <identifier> = <identifier> . create <identifiersep> hdfs <identifiersep> encryption <identifiersep> <identifier> ( fs , conf ) ; \n <ect>
\t2 if ( has <identifiersep> transformation ) { \n \t3 try { \n \t4 input <identifiersep> source = transform <identifiersep> configuration ( url , configuration ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 string format = rest <identifiersep> request . get <identifiersep> format ( ) ; \n \t2 for ( object s : request . get <identifiersep> parameter <identifiersep> map ( ) . key <identifiersep> set ( ) ) \n \t3 logger . debug ( s + <string_literal> + request . get <identifiersep> parameter <identifiersep> map ( ) . get ( s ) . to <identifiersep> string ( ) ) ; \n \t2 logger . debug ( <string_literal> + service <identifiersep> id ) ; \n <ect>
\t4 { \n \t5 storage <identifiersep> engine . force <identifiersep> close ( ) ; } } \n \t3 catch ( exception close <identifiersep> exception ) \n \t3 { \n <ect>
\t2 string alias = ts . get <identifiersep> conf ( ) . get <identifiersep> alias ( ) ; \n \t2 <identifier> <identifiersep> partition <identifiersep> list plist = parse <identifiersep> context . get <identifiersep> <identifier> <identifiersep> partitions ( alias , ts ) ; \n \t3 log . debug ( <string_literal> + alias ) ; \n <ect>
\t3 list < principal > principals = query . get <identifiersep> as <identifiersep> list ( ) ; \n \t3 for ( final principal p : principals ) { \n \t4 p . remove <identifiersep> session <identifiersep> id ( session <identifiersep> id ) ; } \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 log . info ( <string_literal> + ( <identifier> == store . get ( <string_literal> ) ) ) ; \n \t2 log . info ( <string_literal> + ( <identifier> == store . get ( <string_literal> ) ) ) ; \n \t2 log . info ( <string_literal> + ( <identifier> == store . get ( <string_literal> ) ) ) ; \n \t2 log . info ( <string_literal> + ( <identifier> . the <identifiersep> secret ( ) == integer . class . cast ( store . get ( <string_literal> ) ) ) ) ; \n <ect>
\t4 if ( txn != null ) { \n \t5 txn . close ( ) ; } \n \t3 } catch ( exception e ) \n \t3 { \n <ect>
\t2 properties . put <identifiersep> all ( directory <identifiersep> desc . get <identifiersep> tbl <identifiersep> props ( ) ) ; } \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t6 relation <identifiersep> property . add <identifiersep> single <identifiersep> element ( security <identifiersep> context , local <identifiersep> node , related <identifiersep> node ) ; \n \t5 } catch ( framework <identifiersep> exception fex ) { \n \t6 logger . warn ( <string_literal> , fex ) ; } \n \t4 } else { \n <ect>
\t5 <string_literal> + \n \t5 new publisher <identifiersep> public <identifiersep> key <identifiersep> digest ( <identifier> . get <identifiersep> default <identifiersep> public <identifiersep> key ( ) ) ) ; } \n \t2 system . out . println ( <string_literal> ) ; \n \t2 <identifier> . close ( ) ; \n <ect>
\t1 <comment> \n \t1 started = false ; \n \t1 standalone <identifiersep> server <identifiersep> factory = null ; \n \t1 zoo <identifiersep> keeper <identifiersep> server = null ; \n <ect>
\t3 this . serial = new string ( arrays . copy <identifiersep> of <identifiersep> range ( this . payload , <number_literal> , this . payload . length ) ) ; } } \n \t1 @ override \n \t1 protected void print <identifiersep> formatted <identifiersep> payload ( ) { \n \t2 logger . debug ( <string_literal> + this . <identifier> <identifiersep> major + <string_literal> + this . <identifier> <identifiersep> minor ) ; \n <ect>
\t4 while ( ! <identifier> && ! finished ) { \n \t5 fill <identifiersep> input <identifiersep> stream <identifiersep> cache ( ) ; \n \t5 thread . sleep ( cache <identifiersep> fill <identifiersep> interval ) ; } \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 byte <identifiersep> buffer result = null ; \n \t2 try { \n \t3 result = write <identifiersep> buffer ( output <identifiersep> buffer , s <identifiersep> channel , blocking , time <identifiersep> out ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , count , event . get <identifiersep> consumer <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , started , event . is <identifiersep> started ( ) ) ; } \n \t1 protected session create <identifiersep> consumer ( ) throws jms <identifiersep> exception { \n \t2 final string consumer <identifiersep> text = <string_literal> + ( ++ consumer <identifiersep> counter ) ; \n <ect>
\t2 < p > reload this page with open console , enter text and hit the log button . . . < / p > \n \t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 assert . assert <identifiersep> equals ( <number_literal> * i , ( int ) has <identifiersep> <identifier> . get ( i ) ) ; } } \n \t1 @ test \n \t1 public void test <identifiersep> add ( ) { \n <ect>
\t7 + <string_literal> , \n \t6 operation <identifiersep> failed <identifiersep> exception . internal <identifiersep> error ) ; } } \n \t2 catch ( xmpp <identifiersep> exception <identifier> ) \n \t2 { \n <ect>
\t4 string s = <string_literal> ; \n \t4 for ( interest i : <identifier> <identifiersep> sent <identifiersep> interests ) \n \t5 s += <string_literal> + segmentation <identifiersep> profile . get <identifiersep> segment <identifiersep> number ( i . name ( ) ) ; \n \t4 s += <string_literal> ; \n <ect>
\t5 return false ; } \n \t4 <comment> \n \t4 if ( api . verify <identifiersep> param ( ) == false ) \n \t4 { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . relocating ) . get ( 0 ) . relocating <identifiersep> node <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . started ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + user <identifiersep> vm . get <identifiersep> instance <identifiersep> name ( ) + <string_literal> + host . get <identifiersep> name ( ) , e ) ; \n \t3 return ; } \n \t2 if ( disk <identifiersep> stats <identifiersep> answer != null ) { \n \t3 if ( ! disk <identifiersep> stats <identifiersep> answer . get <identifiersep> result ( ) ) { \n <ect>
\t2 try { \n \t3 root = storage . get <identifiersep> entry ( cache <identifiersep> key ) ; \n \t2 } catch ( final resource <identifiersep> io <identifiersep> exception ex ) { \n <ect>
\t2 workspace workspace = initialize <identifiersep> workspace ( context <identifiersep> parameters ) ; \n \t2 logger . debug ( <string_literal> , source <identifiersep> name ) ; \n \t2 try \n \t2 { \n <ect>
\t1 <comment> \n \t1 start <identifiersep> all <identifiersep> echo <identifiersep> servers ( ) ; \n \t1 assert <identifiersep> all <identifiersep> echo <identifiersep> servers <identifiersep> running ( <identifier> <identifiersep> echo <identifiersep> servers ) ; \n \t1 <identifier> <identifiersep> client = <identifier> <identifiersep> cli . create <identifiersep> client ( <identifier> <identifiersep> cli . get <identifiersep> zk <identifiersep> client ( ) , <identifier> <identifiersep> zk <identifiersep> uri <identifiersep> string , <string_literal> , <string_literal> ) ; \n <ect>
\t2 } ) ; \n \t2 } else if ( bootstrap . is <identifiersep> finished ( ) && ! host . is <identifiersep> local <identifiersep> host ( ) ) { \n \t2 bootstrap <identifiersep> component . <identifier> . apply ( host ) ; \n \t2 } else if ( initialize <identifiersep> as <identifiersep> cloud <identifiersep> controller . instance . apply ( host ) ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 add <identifiersep> if <identifiersep> supported ( supported <identifiersep> ciphers , ciphers , default <identifiersep> cipher <identifiersep> suites ) ; \n \t2 use <identifiersep> fallback <identifiersep> ciphers <identifiersep> if <identifiersep> default <identifiersep> is <identifiersep> empty ( ciphers , engine . get <identifiersep> enabled <identifiersep> cipher <identifiersep> suites ( ) ) ; \n \t2 default <identifiersep> ciphers = collections . unmodifiable <identifiersep> list ( ciphers ) ; \n <ect>
\t1 protected void on <identifiersep> e <identifiersep> bus <identifiersep> sync <identifiersep> received ( boolean allow <identifiersep> send ) throws io <identifiersep> exception { \n \t2 if ( input <identifiersep> buffer . position ( ) == 1 && input <identifiersep> buffer . get ( 0 ) == e <identifiersep> bus <identifiersep> telegram . <identifier> ) { \n \t3 logger . trace ( <string_literal> ) ; \n \t2 } else if ( input <identifiersep> buffer . position ( ) == <number_literal> && input <identifiersep> buffer . get ( 0 ) == e <identifiersep> bus <identifiersep> telegram . <identifier> ) { \n <ect>
\t3 try { \n \t4 thread . sleep ( 0 ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n <ect>
\t1 static { \n \t2 try { \n \t3 set <identifiersep> max <identifiersep> selectors ( default <identifiersep> max <identifiersep> selectors ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t4 log . warn ( util . get <identifiersep> message ( <string_literal> ) , <string_literal> , sock . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , \n \t10 util . print <identifiersep> bytes ( recv <identifiersep> buf <identifiersep> size ) , util . print <identifiersep> bytes ( actual <identifiersep> size ) , <string_literal> , <string_literal> ) ; } } \n \t2 catch ( throwable ex ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t6 log . debug ( <string_literal> + snapshot . pending <identifiersep> node <identifiersep> ids ( ) ) ; \n \t5 for ( uuid node <identifiersep> id : snapshot . pending <identifiersep> node <identifiersep> ids ( ) ) \n \t6 request <identifiersep> time ( node <identifiersep> id ) ; \n <ect>
\t2 try { \n \t3 string given <identifiersep> names = xml <identifiersep> utils . get <identifiersep> text <identifiersep> content ( xml , given <identifiersep> names ) ; \n \t3 name . set <identifiersep> given <identifiersep> names ( given <identifiersep> names ) ; \n \t2 } catch ( x <identifiersep> path <identifiersep> expression <identifiersep> exception e ) { \n <ect>
\t2 account <identifiersep> registration <identifiersep> <identifier> <identifier> = ( account <identifiersep> registration <identifiersep> <identifier> ) s <identifiersep> service ; \n \t2 switch ( event . get <identifiersep> type ( ) ) \n \t2 { \n \t2 case service <identifiersep> event . registered : \n <ect>
\t2 for ( <identifier> <identifiersep> <identifier> <identifiersep> binding <identifiersep> provider provider : providers ) { \n \t3 <identifier> <identifiersep> <identifier> <identifiersep> binding <identifiersep> config config = provider . get <identifiersep> config ( item <identifiersep> name ) ; \n \t3 switch ( config . command <identifiersep> type ) { \n \t4 case <identifier> : { \n <ect>
\t1 try { \n \t2 get <identifiersep> ms ( ) . drop <identifiersep> wm <identifiersep> mapping ( request . get <identifiersep> mapping ( ) ) ; \n \t2 return new wm <identifiersep> drop <identifiersep> mapping <identifiersep> response ( ) ; \n \t1 } catch ( meta <identifiersep> exception e ) { \n <ect>
\t3 if ( node . equals ( local <identifiersep> node ) ) { \n \t4 try { \n \t5 do <identifiersep> verify ( repository , verification <identifiersep> token , local <identifiersep> node ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 <comment> \n \t3 <comment> \n \t3 if ( ! delegate <identifiersep> load ) { \n <ect>
\t1 string url ; \n \t1 string ha <identifiersep> enabled = get <identifiersep> yarn <identifiersep> config ( yarn <identifiersep> <identifier> <identifiersep> ha <identifiersep> enabled ) ; \n \t1 string http <identifiersep> policy = get <identifiersep> yarn <identifiersep> config ( yarn <identifiersep> http <identifiersep> policy ) ; \n \t1 if ( ! ( http <identifiersep> only . equals ( http <identifiersep> policy ) || https <identifiersep> only . equals ( http <identifiersep> policy ) ) ) { \n <ect>
\t2 if ( object <identifiersep> name != null && bean <identifiersep> server != null && bean <identifiersep> server . is <identifiersep> registered ( object <identifiersep> name ) ) { \n \t3 try { \n \t4 bean <identifiersep> server . unregister <identifiersep> m <identifiersep> bean ( object <identifiersep> name ) ; \n \t3 } catch ( throwable e ) { \n <ect>
\t1 } else { \n \t2 cache <identifiersep> manager . logger . warn ( messages . get <identifiersep> instance ( ) . get <identifiersep> string ( \n \t3 <string_literal> , region ) ) ; <comment> \n \t1 } else { \n <ect>
\t2 value = new big <identifiersep> decimal ( raw <identifiersep> value ) . move <identifiersep> point <identifiersep> left ( measure <identifiersep> type . get <identifiersep> scale ( ) ) ; \n \t2 if ( measure <identifiersep> type . equals ( <identifier> <identifiersep> <identifier> <identifiersep> measure <identifiersep> type . unsupported ) ) { \n \t3 logger . warn ( <string_literal> , type , value ) ; \n \t2 } else { \n <ect>
\t2 node <identifiersep> iterator = model . list <identifiersep> objects <identifiersep> of <identifiersep> property ( source <identifiersep> resource , has <identifiersep> variable <identifiersep> property ) ; \n \t2 while ( node <identifiersep> iterator . has <identifiersep> next ( ) ) { \n \t3 node = node <identifiersep> iterator . next ( ) ; \n \t3 if ( ! node . is <identifiersep> resource ( ) ) { \n <ect>
\t1 # resolve <identifier> using repo <identifiersep> version <identifiersep> history <identifiersep> file \n \t1 history <identifiersep> version = read <identifiersep> actual <identifiersep> version <identifiersep> from <identifiersep> history <identifiersep> file ( normalized <identifiersep> repo <identifiersep> version ) \n \t1 # validate history version retrieved is valid \n \t1 if history <identifiersep> version in match <identifiersep> versions : \n <ect>
\t3 log . warn ( <string_literal> , get <identifiersep> relative <identifiersep> path ( source ) , e . get <identifiersep> message ( ) ) ; \n \t3 return ; } \n \t2 if ( ! is <identifiersep> spring <identifiersep> configuration <identifiersep> file ( doc ) ) { \n \t3 return ; } \n <ect>
\t2 log . info ( <string_literal> + num <identifiersep> buckets + <string_literal> ) ; \n \t2 bucket <identifiersep> col <identifiersep> names = join <identifiersep> op . get <identifiersep> op <identifiersep> <identifier> ( ) . get <identifiersep> bucket <identifiersep> col <identifiersep> names ( ) ; \n \t2 map <identifiersep> join <identifiersep> info [ <number_literal> ] /= num <identifiersep> buckets ; \n \t1 } else { \n <ect>
\t2 boolean result = true ; \n \t2 if ( can <identifiersep> handle ( network , service . port <identifiersep> forwarding ) ) { \n \t3 final list < domain <identifiersep> router <identifiersep> vo > routers = <identifier> <identifiersep> router <identifiersep> dao . list <identifiersep> by <identifiersep> network <identifiersep> and <identifiersep> role ( network . get <identifiersep> id ( ) , role . virtual <identifiersep> router ) ; \n \t3 if ( routers == null || routers . is <identifiersep> empty ( ) ) { \n <ect>
\t1 @ override \n \t1 public long send <identifiersep> <identifier> ( ) \n \t3 throws transport <identifiersep> exception { \n \t2 final long seq = decoder . get <identifiersep> sequence <identifiersep> number ( ) ; \n <ect>
@ override \n public final void success ( core <identifiersep> event event ) { \n \t1 if ( is <identifiersep> response <identifiersep> done ( ) ) { \n <ect>
\t4 log . warn ( <string_literal> + cache <identifiersep> key ) ; } \n \t2 } catch ( final resource <identifiersep> io <identifiersep> exception ex ) { \n <ect>
\t2 for ( cms <identifiersep> <identifier> <identifiersep> unit <identifier> : <identifier> ) { \n \t3 try { \n \t4 m <identifiersep> security <identifiersep> manager . initialize <identifiersep> org <identifiersep> unit ( cms . get <identifiersep> request <identifiersep> context ( ) , <identifier> ) ; \n \t3 } catch ( cms <identifiersep> init <identifiersep> exception e ) { \n <ect>
\t4 string <identifiersep> buffer peers = new string <identifiersep> buffer ( ) ; \n \t4 for ( broker <identifiersep> info bi : result ) { \n \t5 peers . append ( peers . length ( ) > 0 ? <string_literal> : <string_literal> ) ; \n \t5 peers . append ( bi . get <identifiersep> broker <identifiersep> name ( ) ) ; } \n <ect>
\t1 sb . append ( hcat <identifiersep> def <identifiersep> storage <identifiersep> <identifier> ) ; \n \t1 } else { \n \t1 sb . append ( storage <identifiersep> <identifier> ) ; } \n \t1 string create <identifiersep> statement = sb . to <identifiersep> string ( ) ; \n <ect>
\t2 try { \n \t3 long owner <identifiersep> id = domain . get <identifiersep> account <identifiersep> id ( ) ; \n \t3 if ( ( cleanup != null ) && cleanup . boolean <identifiersep> value ( ) ) { \n \t4 if ( ! cleanup <identifiersep> domain ( domain . get <identifiersep> id ( ) , owner <identifiersep> id ) ) { \n <ect>
\t2 entity < generic <identifiersep> entity < map < string , favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element > > > entity = entity . entity ( generic <identifiersep> entity , media <identifiersep> type . application <identifiersep> json <identifiersep> type ) ; \n \t2 response response = target . request ( ) . post ( entity ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string result = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t3 final job <identifiersep> leader <identifiersep> listener initial <identifiersep> job <identifiersep> leader <identifiersep> listener ) { \n \t2 if ( job <identifiersep> leader <identifiersep> service . state . created != state ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t3 <identifier> <identifiersep> renderer = new summary <identifiersep> renderer ( <identifier> <identifiersep> context , this ) ; \n \t3 <identifier> <identifiersep> rate . set <identifiersep> summary <identifiersep> listener ( this ) ; \n \t3 return true ; \n \t2 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error <identifier> ) { \n <ect>
\t6 if ( <identifier> > 0 ) \n \t7 padding = aes <identifiersep> size - <identifier> ; \n \t6 <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> ts <identifiersep> a <identifiersep> padding <identifiersep> <identifier> <identifiersep> sig <identifiersep> size += padding ; \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 @ after \n \t1 public void tear <identifiersep> down ( ) throws exception { \n \t2 long time = watch . stop ( ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t5 if ( <identifier> <identifiersep> iter . has <identifiersep> next ( ) ) { \n \t6 location <identifiersep> query . append ( <string_literal> ) ; } } \n \t4 location <identifiersep> query . append ( <string_literal> ) ; \n \t3 } else { \n <ect>
<comment> \n private <identifier> want <identifiersep> <identifier> ( peer peer , bit <identifiersep> field have <identifiersep> <identifier> , boolean record ) { \n \t1 if ( <identifier> ) { \n \t1 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
<comment> \n \t1 void do <identifiersep> start <identifiersep> stop <identifiersep> <identifier> ( int loop <identifiersep> cnt ) throws throwable { \n <ect>
\t3 final transaction txn = transaction . current <identifiersep> txn ( ) ; \n \t3 txn . start ( ) ; \n \t3 user <identifiersep> vm user <identifiersep> vm = <identifier> <identifiersep> vm <identifiersep> dao . acquire <identifiersep> in <identifiersep> lock <identifiersep> table ( user <identifiersep> vm <identifiersep> id ) ; \n \t3 if ( user <identifiersep> vm == null ) { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t3 else { \n \t4 <comment> \n \t4 this . connector <identifiersep> server . start ( ) ; } \n <ect>
\t2 try { \n \t3 context . turn <identifiersep> off <identifiersep> <identifier> <identifiersep> system ( ) ; \n \t3 community <identifiersep> service . remove <identifiersep> collection ( context , <identifier> <identifiersep> community , collection ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 int value = integer . parse <identifiersep> int ( string <identifiersep> value ) ; \n \t3 logger . info ( <string_literal> , key , value ) ; \n \t3 return value ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 <identifier> ++ ; \n \t3 if ( timer . get <identifiersep> elapsed <identifiersep> time ( ) - last <identifiersep> elapsed > <number_literal> ) { \n \t4 logger . info ( <identifier> + <string_literal> + context . get <identifiersep> location ( ) ) ; \n \t4 last <identifiersep> elapsed = timer . get <identifiersep> elapsed <identifiersep> time ( ) ; } } \n <ect>
\t2 <comment> \n \t2 op = queue . poll ( ) ; \n \t2 if ( op != null ) break ; \n \t2 if ( fallback <identifiersep> ms > <number_literal> ) { <comment> \n <ect>
\t2 throw new sql <identifiersep> exception ( exception <identifiersep> msg [ exception <identifiersep> to <identifiersep> throw ] , \n \t2 sql <identifiersep> states [ exception <identifiersep> to <identifiersep> throw ] ) ; } \n \t1 stmt . execute <identifiersep> batch ( ) ; \n \t1 } catch ( sql <identifiersep> exception exec <identifiersep> sql <identifiersep> ex ) { \n <ect>
\t2 return null ; \t1 } \n \t1 public void change <identifiersep> link <identifiersep> weight ( string link <identifiersep> id , double weight ) { \n \t2 labeled <identifiersep> link link = this . get <identifiersep> link <identifiersep> by <identifiersep> id ( link <identifiersep> id ) ; \n \t2 if ( link == null ) { \n <ect>
\t2 final matcher matcher = this . ips <identifiersep> to <identifiersep> check <identifiersep> pattern . matcher ( remote <identifiersep> ip ) ; \n \t2 if ( matcher . find ( ) ) { \n \t3 logger . debug ( <string_literal> , remote <identifiersep> ip , this . ips <identifiersep> to <identifiersep> check <identifiersep> pattern . pattern ( ) ) ; \n \t3 return true ; } \n <ect>
\t5 recv <identifiersep> count . notify ( ) ; } \n \t4 try { \n \t5 commit <identifiersep> tx <identifiersep> if <identifiersep> necessary ( ) ; \n \t4 } catch ( jms <identifiersep> exception ex ) { \n <ect>
\t3 exp <identifiersep> only . remove <identifiersep> all ( cache <identifiersep> keys ) ; \n \t3 cache <identifiersep> only . add <identifiersep> all ( cache <identifiersep> keys ) ; \n \t3 cache <identifiersep> only . remove <identifiersep> all ( exp <identifiersep> vals . key <identifiersep> set ( ) ) ; \n \t3 if ( ! exp <identifiersep> only . is <identifiersep> empty ( ) ) \n <ect>
\t5 <string_literal> + collection <identifiersep> list <identifiersep> in ) ; \n \t4 state . set <identifiersep> solr <identifiersep> alias <identifiersep> ready ( true ) ; \n \t4 break ; } \n \t3 } else { \n <ect>
\t1 result <identifiersep> collector . set <identifiersep> filename ( <identifier> <identifiersep> log <identifiersep> file ) ; \n \t1 ams <identifiersep> test <identifiersep> plan <identifiersep> tree . add ( ams <identifiersep> test <identifiersep> plan <identifiersep> tree . get <identifiersep> array ( ) [ 0 ] , result <identifiersep> collector ) ; \n \t1 <identifier> <identifiersep> engine . configure ( ams <identifiersep> test <identifiersep> plan <identifiersep> tree ) ; \n \t1 <identifier> <identifiersep> engine . run ( ) ; \n <ect>
\t5 } else { \n \t7 log . debug ( <string_literal> + file <identifiersep> url ) ; } } } } } \n \t2 catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t1 <identifier> . set <identifiersep> <identifier> ( <string_literal> ) ; \n \t1 <identifier> . set <identifiersep> total <identifiersep> time <identifiersep> taken ( string . value <identifiersep> of ( elapsed <identifiersep> time ) ) ; \n \t1 get <identifiersep> resource <identifiersep> manager ( view ) . update ( <identifier> , <identifier> ) ; \n \t1 logger . info ( <string_literal> ) ; \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t6 int device <identifiersep> id = integer . parse <identifiersep> int ( dummy ) ; \n \t6 string name = ( string ) config . get ( key ) ; \n \t6 <identifier> <identifiersep> generic <identifiersep> binding <identifiersep> provider . add <identifiersep> device ( name , device <identifiersep> id ) ; \n \t6 logger . debug ( <string_literal> , new string [ ] { dummy , name } ) ; } } \n <ect>
\t2 ssl <identifiersep> handler ssl <identifiersep> handler = configure <identifiersep> client <identifiersep> ssl <identifiersep> on <identifiersep> <identifier> ( ) ; \n \t2 if ( ssl <identifiersep> handler != null ) { \n \t3 <comment> \n \t3 ssl <identifiersep> handler . set <identifiersep> close <identifiersep> on <identifiersep> ssl <identifiersep> exception ( true ) ; \n <ect>
\t5 return <identifiersep> url += <string_literal> + port ; } } \n \t3 try { \n \t4 <identifier> <identifiersep> url += <string_literal> + url <identifiersep> encoder . encode ( return <identifiersep> url , <string_literal> ) ; \n \t3 } catch ( unsupported <identifiersep> encoding <identifiersep> exception uee ) { \n <ect>
\t7 } catch ( interrupted <identifiersep> exception e ) { \n \t8 if ( terminated . get ( ) ) { \n \t9 break ; } } \n \t6 } else { \n <ect>
\t1 try : \n \t1 if self . <identifier> <identifiersep> thread <identifiersep> local is not none : \n \t2 os . <identifier> ( self . <identifier> <identifiersep> thread <identifiersep> local . uid ) \n \t1 except exception : \n <ect>
\t1 this . fs = fs ; \n \t1 this . lock <identifiersep> file = lock <identifiersep> file ; \n \t1 this . lock <identifiersep> file <identifiersep> stream = fs . append ( lock <identifiersep> file ) ; \n \t1 this . component <identifiersep> id = spout <identifiersep> id ; \n <ect>
\t3 <comment> \n \t3 if ( zone <identifiersep> type != network <identifiersep> type . basic ) { \n \t4 public <identifiersep> traffic <identifiersep> label = <identifier> <identifiersep> <identifier> . get <identifiersep> default <identifiersep> public <identifiersep> traffic <identifiersep> label ( dc <identifiersep> id , hypervisor <identifiersep> type . v <identifiersep> mware ) ; \n \t4 if ( public <identifiersep> traffic <identifiersep> label != null ) { \n <ect>
\t4 query <identifiersep> filter query <identifiersep> filter = this . component <identifiersep> manager . get <identifiersep> instance ( query <identifiersep> filter . class , filter ) ; \n \t4 add <identifiersep> filter ( query <identifiersep> filter ) ; \n \t3 } catch ( component <identifiersep> lookup <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
\t1 try { \n \t1 is = new <identifier> <identifiersep> input <identifiersep> stream ( uri <identifiersep> locator <identifiersep> factory . locate ( resource . get <identifiersep> uri ( ) ) ) ; \n \t1 final string result = io <identifiersep> utils . to <identifiersep> string ( is , context . get <identifiersep> config ( ) . get <identifiersep> encoding ( ) ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> empty ( result ) ) { \n <ect>
\t4 if ( job <identifiersep> client != null ) { \n \t5 job <identifiersep> client . close ( ) ; } } \n \t3 catch ( exception ex ) { \n \t4 if ( exception ) { \n <ect>
\t3 log . info ( <string_literal> + get <identifiersep> scope ( cdi <identifiersep> injection <identifiersep> <identifier> <identifiersep> resource . class ) ) ; \n \t3 log . info ( <string_literal> + get <identifiersep> scope ( cdi <identifiersep> injection <identifiersep> dependent <identifiersep> scoped . class ) ) ; \n \t3 log . info ( <string_literal> + get <identifiersep> scope ( cdi <identifiersep> injection <identifiersep> stateful <identifiersep> ejb . class ) ) ; \n \t3 log . info ( <string_literal> + get <identifiersep> scope ( cdi <identifiersep> injection <identifiersep> book <identifiersep> bag <identifiersep> local . class ) ) ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
@ deprecated \n public boolean is <identifiersep> pentaho <identifiersep> <identifier> ( final i <identifiersep> pentaho <identifiersep> session session ) { \n \t1 i <identifiersep> authorization <identifiersep> policy policy = get <identifiersep> authorization <identifiersep> policy ( ) ; \n \t1 if ( policy == null ) { \n <ect>
\t2 } else { \n \t3 <comment> \n \t3 ok = parse <identifiersep> options ( args ) ; \n \t3 if ( ok && compile <identifiersep> count == 0 ) { \n <ect>
\t2 <comment> \n \t2 return sb . to <identifiersep> string ( ) ; } \n \t1 public static string labeled <identifiersep> graph <identifiersep> to <identifiersep> string ( graph < node , labeled <identifiersep> link > graph ) { \n \t2 if ( graph == null ) { \n <ect>
\t2 for ( key <identifiersep> listener listener : matches ) { \n \t3 try { \n \t4 remove <identifiersep> pending <identifiersep> keys ( listener ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t2 <comment> \n \t2 string output <identifiersep> file = system . get <identifiersep> property ( prop <identifiersep> daemon <identifiersep> output ) ; \n \t2 boolean do <identifiersep> append = true ; \n \t2 daemon <identifiersep> output output = null ; \n <ect>
\t1 llap <identifiersep> service <identifiersep> instance service <identifiersep> instance = null ; \n \t1 <comment> \n \t1 <comment> \n \t1 string name = address . get <identifiersep> host <identifiersep> name ( ) ; \n <ect>
\t4 logger . error ( this , <string_literal> + e , e ) ; \n \t3 } finally { \n \t4 inner <identifiersep> <identifier> . close ( ) ; } \n \t2 } catch ( checksum <identifiersep> failed <identifiersep> exception e ) { \n <ect>
\t4 if ( is <identifiersep> closed ( ) ) \n \t5 throw new io <identifiersep> exception ( <string_literal> ) ; } \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) { \n \t4 long connected = <identifier> <identifiersep> context . clock ( ) . now ( ) ; \n <ect>
\t1 public async <identifiersep> call <identifiersep> future < volume <identifiersep> api <identifiersep> result > expunge <identifiersep> volume <identifiersep> async ( volume <identifiersep> info volume ) { \n \t2 async <identifiersep> call <identifiersep> future < volume <identifiersep> api <identifiersep> result > future = new async <identifiersep> call <identifiersep> future < volume <identifiersep> api <identifiersep> result > ( ) ; \n \t2 volume <identifiersep> api <identifiersep> result result = new volume <identifiersep> api <identifiersep> result ( volume ) ; \n \t2 if ( volume . get <identifiersep> data <identifiersep> store ( ) == null ) { \n <ect>
\t1 @ get \n \t1 @ produces ( <string_literal> ) \n \t1 @ path ( <string_literal> ) \n \t1 public string get <identifiersep> encoded <identifiersep> query <identifiersep> param ( @ encoded @ query <identifiersep> param ( <string_literal> ) string query <identifiersep> param ) { \n <ect>
\t7 log . info ( <string_literal> ) ; \n \t7 <comment> \n \t7 restart <identifiersep> backoff . set ( client . get <identifiersep> backoff <identifiersep> increment ( ) ) ; \n \t6 } else { \n <ect>
\t3 eligible <identifiersep> mbrs . remove <identifiersep> all ( <identifier> <identifiersep> mbrs ) ; \n \t3 has <identifiersep> <identifier> <identifiersep> mbrs = ! <identifier> <identifiersep> mbrs . is <identifiersep> empty ( ) ; } \n \t2 <comment> \n \t2 if ( local <identifiersep> addr != null && ! eligible <identifiersep> mbrs . is <identifiersep> empty ( ) && local <identifiersep> addr . equals ( eligible <identifiersep> mbrs . get ( 0 ) ) ) { \n <ect>
\t4 datastore <identifiersep> mo ds <identifiersep> mo = new datastore <identifiersep> mo ( dc <identifiersep> mo . get <identifiersep> context ( ) , dc <identifiersep> mo . find <identifiersep> datastore ( file . get <identifiersep> datastore <identifiersep> name ( ) ) ) ; \n \t4 if ( ds <identifiersep> mo . get <identifiersep> mor ( ) != null ) { \n \t5 datastore <identifiersep> file target <identifiersep> file = new datastore <identifiersep> file ( file . get <identifiersep> datastore <identifiersep> name ( ) , file . get <identifiersep> file <identifiersep> name ( ) ) ; \n \t5 if ( ! target <identifiersep> file . get <identifiersep> path ( ) . equals <identifiersep> ignore <identifiersep> case ( file . get <identifiersep> path ( ) ) ) { \n <ect>
\t2 network network = <identifier> <identifiersep> networks <identifiersep> dao . find <identifiersep> by <identifiersep> id ( network <identifiersep> id ) ; \n \t2 if ( network != null ) { \n \t3 <identifier> <identifiersep> account <identifiersep> mgr . check <identifiersep> access ( owner , access <identifiersep> type . use <identifiersep> entry , false , network ) ; \n \t2 } else { \n <ect>
\t1 spark <identifiersep> memory <identifiersep> and <identifiersep> cores = spark <identifiersep> session . get <identifiersep> memory <identifiersep> and <identifiersep> cores ( ) ; \n \t1 } catch ( hive <identifiersep> exception e ) { \n \t1 throw new semantic <identifiersep> exception ( <string_literal> + e ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 if ( opts == null ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( <identifier> == null ) { \n <ect>
\t3 logger . info ( <string_literal> , <identifier> <identifiersep> alias , servlet <identifiersep> name ) ; \n \t2 } catch ( namespace <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , e ) ; \n \t2 } catch ( servlet <identifiersep> exception e ) { \n <ect>
\t1 } ) ; \n \t1 <identifier> <identifiersep> <identifier> <identifiersep> map . clear ( ) ; } \n \t1 else \n \t1 { \n <ect>
\t3 super . interrupt ( ) ; \n \t3 try { \n \t4 in . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 metrics . set <identifiersep> executor <identifiersep> num <identifiersep> <identifier> <identifiersep> requests ( <identifier> <identifiersep> queue . size ( ) ) ; } } } \n private void insert <identifiersep> into <identifiersep> <identifier> <identifiersep> queue <identifiersep> or <identifiersep> fail <identifiersep> <identifier> ( task <identifiersep> wrapper task <identifiersep> wrapper ) { \n \t1 boolean added = <identifier> <identifiersep> queue . offer ( task <identifiersep> wrapper ) ; \n \t1 if ( ! added ) { \n <ect>
\t1 . get <identifiersep> logger ( config <identifiersep> filter <identifiersep> factory . class ) ; \n public static config <identifiersep> filter create ( string name , string type ) throws flume <identifiersep> exception { \n \t1 preconditions . check <identifiersep> not <identifiersep> null ( name , <string_literal> ) ; \n \t1 preconditions . check <identifiersep> not <identifiersep> null ( type , <string_literal> ) ; \n <ect>
\t9 column <identifiersep> name <identifiersep> to <identifiersep> <identifier> . put ( column <identifiersep> name , fragment . to <identifiersep> string ( ) ) ; } } \n \t7 if ( <identifier> <identifiersep> field <identifiersep> names . size ( ) == 0 ) { \n \t8 break ; } } \n \t5 } catch ( invalid <identifiersep> token <identifiersep> offsets <identifiersep> exception e ) { \n <ect>
\t6 read <identifiersep> from <identifiersep> input <identifiersep> stream ( names , in ) ; } \n \t4 } finally { \n \t5 jdbc <identifiersep> utils . close ( in ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 } else if ( police . get <identifiersep> all ( ) . is <identifiersep> enabled ( ) ) { \n \t4 logger . debug ( <string_literal> , all <identifiersep> authentication <identifiersep> policy . class . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t4 plan . register <identifiersep> authentication <identifiersep> policy ( new all <identifiersep> authentication <identifiersep> policy ( ) ) ; \n \t3 } else if ( police . get <identifiersep> not <identifiersep> <identifier> ( ) . is <identifiersep> enabled ( ) ) { \n <ect>
<comment> \n \t1 protected void <identifier> <identifiersep> segment ( ) throws io <identifiersep> exception { \n \t2 if ( null == <identifier> <identifiersep> current <identifiersep> segment ) { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n <ect>
\t2 public t get <identifiersep> value ( ) { \n \t3 try { \n \t4 return ( t ) server . get <identifiersep> attribute ( object <identifiersep> name , attribute <identifiersep> name ) ; \n \t3 } catch ( m <identifiersep> bean <identifiersep> exception | attribute <identifiersep> not <identifiersep> found <identifiersep> exception | instance <identifiersep> not <identifiersep> found <identifiersep> exception | reflection <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 files . move ( new file ( <identifier> <identifiersep> dir , from ) . to <identifiersep> path ( ) , new file ( <identifier> <identifiersep> dir , to ) . to <identifiersep> path ( ) ) ; \n \t3 return true ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 this . daemon <identifiersep> registry = daemon <identifiersep> registry ; \n \t2 this . daemon <identifiersep> context = daemon <identifiersep> context ; \n \t2 this . token = token ; } \n \t1 public void on <identifiersep> start <identifiersep> activity ( ) { \n <ect>
\t2 string sort <identifiersep> id = parts [ parts . length - 1 ] ; \n \t2 string filename = master . get <identifiersep> file <identifiersep> system ( ) . get <identifiersep> full <identifiersep> path ( file <identifiersep> type . wal , <identifier> ) . to <identifiersep> string ( ) ; \n \t2 string dest = recovery <identifiersep> path . get <identifiersep> recovery <identifiersep> path ( master . get <identifiersep> file <identifiersep> system ( ) , new path ( filename ) ) \n \t3 . to <identifiersep> string ( ) ; \n <ect>
\t2 return <string_literal> ; } \n \t1 @ override \n \t1 public object apply ( final action <identifiersep> context ctx , final object caller , final object [ ] sources ) throws framework <identifiersep> exception { \n \t2 if ( ! settings . <identifier> <identifiersep> enabled . get <identifiersep> value ( ) ) { \n <ect>
\t3 string host <identifiersep> file <identifiersep> ext = null ; \n \t3 try { \n \t4 host <identifiersep> file <identifiersep> ext = <string_literal> + java . net . inet <identifiersep> address . get <identifiersep> local <identifiersep> host ( ) . get <identifiersep> host <identifiersep> name ( ) ; \n \t3 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t2 protected void start ( ) throws exception { \n \t3 channel . connect ( cluster <identifiersep> name ) ; \n \t3 log . info ( <string_literal> , channel . get <identifiersep> address ( ) , cluster <identifiersep> name ) ; } \n \t2 protected void stop ( ) { \n <ect>
\t4 producer . send ( message ) ; \n \t4 messages <identifiersep> sent . increment <identifiersep> and <identifiersep> get ( ) ; \n \t4 if ( messages <identifiersep> sent . get ( ) % <number_literal> == 0 ) { \n \t5 log . info ( <string_literal> + messages <identifiersep> sent . get ( ) ) ; \n <ect>
\t2 route <identifiersep> builder <identifiersep> parser . parse <identifiersep> route <identifiersep> builder <identifiersep> endpoints ( clazz , <string_literal> , <string_literal> , details ) ; \n \t2 log . info ( <string_literal> , details ) ; \n \t2 list < parser <identifiersep> result > list = camel <identifiersep> java <identifiersep> parser <identifiersep> helper . parse <identifiersep> camel <identifiersep> consumer <identifiersep> uris ( method , true , true ) ; \n \t2 for ( parser <identifiersep> result result : list ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return ; } \n \t2 long temp = this . get <identifiersep> offset ( ) + this . get <identifiersep> limit ( ) ; \n \t2 if ( ! is <identifiersep> valid <identifiersep> push <identifiersep> down <identifiersep> limit ( temp ) ) { \n <ect>
\t2 <comment> \n \t2 for ( string item <identifiersep> name : item <identifiersep> names ) { \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( item <identifiersep> name ) ) { \n \t4 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , new string <identifiersep> type ( title ) ) ; \n <ect>
\t6 <comment> \n \t6 <comment> \n \t5 <identifier> <identifiersep> image <identifiersep> data = new ns <identifiersep> data ( image <identifiersep> stream . to <identifiersep> byte <identifiersep> array ( ) ) ; } \n \t3 } catch ( exception ex ) { \n <ect>
\t2 start <identifiersep> reporter ( metrics <identifiersep> config . polling <identifiersep> interval <identifiersep> secs ( ) ) ; } \n \t2 log . debug ( <string_literal> + metrics <identifiersep> send <identifiersep> interval ) ; \n \t2 log . debug ( <string_literal> + max <identifiersep> row <identifiersep> cache <identifiersep> size ) ; \n <ect>
\t1 public void custom <identifiersep> action ( \n \t3 action <identifiersep> request action <identifiersep> request , action <identifiersep> response action <identifiersep> response ) \n \t2 throws io <identifiersep> exception , portlet <identifiersep> exception { \n <ect>
\t2 synchronized ( wait <identifiersep> lock ) { \n \t3 wait <identifiersep> lock . notify ( ) ; } } \n \t1 @ override \n \t1 public void cancel ( ) { \n <ect>
\t5 update <identifiersep> routers <identifiersep> redundant <identifiersep> state ( routers ) ; \n \t5 check <identifiersep> duplicate <identifiersep> master ( routers ) ; \n \t5 check <identifiersep> sanity ( routers ) ; \n \t4 } catch ( final exception ex ) { \n <ect>
\t1 public void after <identifiersep> statement <identifiersep> execution ( ) { \n \t2 log . <identifier> ( <string_literal> , get <identifiersep> connection <identifiersep> release <identifiersep> mode ( ) ) ; \n \t2 if ( get <identifiersep> connection <identifiersep> release <identifiersep> mode ( ) == connection <identifiersep> release <identifiersep> mode . after <identifiersep> statement ) { \n \t3 if ( ! <identifier> <identifiersep> enabled ) { \n <ect>
\t2 string ret = string . value <identifiersep> of ( conf . get ( config . storm <identifiersep> local <identifiersep> dir ) ) + file <identifiersep> <identifier> + <string_literal> ; \n \t2 try { \n \t3 file <identifiersep> utils . force <identifiersep> mkdir ( new file ( ret ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 related <identifiersep> nodes . add ( n ) ; } \n \t4 } else { \n \t5 related <identifiersep> nodes . add ( ( t ) source ) ; } } \n \t2 } catch ( throwable t ) { \n <ect>
\t2 if ( added <identifiersep> nodes == null ) \n \t3 added <identifiersep> nodes = new hash <identifiersep> set < node > ( ) ; \n \t2 set < semantic <identifiersep> type <identifiersep> mapping > mappings = new hash <identifiersep> set < semantic <identifiersep> type <identifiersep> mapping > ( ) ; \n \t2 if ( semantic <identifiersep> type == null ) { \n <ect>
\t3 throw th ; } \n \t2 test . finish ( ) ; \n \t2 progress . finish ( ) ; \n \t2 test <identifiersep> timer . stop ( ) ; \n <ect>
\t6 ovs <identifiersep> set <identifiersep> tag <identifiersep> and <identifiersep> flow <identifiersep> answer r = execute ( flow <identifiersep> cmd ) ; \n \t6 if ( ! r . get <identifiersep> result ( ) ) { \n \t7 s <identifiersep> logger . warn ( <string_literal> + r . get <identifiersep> vm <identifiersep> id ( ) ) ; \n \t6 } else { \n <ect>
public record <identifiersep> reader < avro <identifiersep> key < t > , null <identifiersep> writable > create <identifiersep> record <identifiersep> reader ( \n \t1 input <identifiersep> split split , task <identifiersep> attempt <identifiersep> context context ) throws io <identifiersep> exception , interrupted <identifiersep> exception { \n \t1 schema reader <identifiersep> schema = avro <identifiersep> job . get <identifiersep> input <identifiersep> key <identifiersep> schema ( context . get <identifiersep> configuration ( ) ) ; \n \t1 if ( null == reader <identifiersep> schema ) { \n <ect>
\t1 for repository in self . command <identifiersep> repository . items : \n \t1 if repository . repo <identifiersep> id is none : \n \t2 raise fail ( <string_literal> . format ( repository . base <identifiersep> url ) ) \n \t1 if self . tags <identifiersep> to <identifiersep> skip & repository . tags : \n <ect>
\t1 future < string > get <identifiersep> app <identifiersep> id = spark <identifiersep> client . run ( new get <identifiersep> app <identifiersep> id <identifiersep> job ( ) ) ; \n \t1 try { \n \t1 return get <identifiersep> app <identifiersep> id . get ( spark <identifiersep> client <identifiersep> timeout <identifiersep> in <identifiersep> seconds , time <identifiersep> unit . seconds ) ; \n \t1 } catch ( exception e ) { \n <ect>
<comment> \n \t1 protected void warn ( throwable t ) { \n \t2 log log = <identifier> <identifiersep> context . log <identifiersep> manager ( ) . get <identifiersep> log ( get <identifiersep> class ( ) ) ; \n \t2 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 { \n \t6 member <identifiersep> state <identifiersep> machine . stop ( ) ; } \n \t5 catch ( throwable <identifier> ) \n \t5 { \n <ect>
\t3 level <identifiersep> db <identifiersep> data <identifiersep> store . init ( this . data <identifiersep> store <identifiersep> config , transfer <identifiersep> queue , my <identifiersep> sql <identifiersep> data <identifiersep> store ) ; \n \t3 try { \n \t4 my <identifiersep> sql <identifiersep> data <identifiersep> store . init ( this . data <identifiersep> store <identifiersep> config , transfer <identifiersep> queue , end <identifiersep> of <identifiersep> the <identifiersep> line <identifiersep> map <identifiersep> store ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 am <identifiersep> node <identifiersep> info am <identifiersep> node <identifiersep> info ; \n \t1 synchronized ( known <identifiersep> app <identifiersep> <identifier> ) { \n \t1 am <identifiersep> node <identifiersep> info = get <identifiersep> am <identifiersep> node <identifiersep> info ( am <identifiersep> location , port , query <identifiersep> identifier ) ; \n \t1 if ( am <identifiersep> node <identifiersep> info == null ) { \n <ect>
\t3 synchronized ( cv <identifiersep> <identifier> <identifiersep> connection ) { \n \t4 try { \n \t5 cv <identifiersep> <identifier> <identifiersep> connection . wait ( cv <identifiersep> server <identifiersep> retry <identifiersep> interval * 1000l ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 log . warn ( route <identifiersep> id , e ) ; } } } \n \t1 private void stop <identifiersep> route <identifiersep> impl ( route route ) throws exception { \n \t2 service <identifiersep> status route <identifiersep> status = route . get <identifiersep> route <identifiersep> context ( ) . get <identifiersep> camel <identifiersep> context ( ) . get <identifiersep> route <identifiersep> status ( route . get <identifiersep> id ( ) ) ; \n \t2 if ( route <identifiersep> status == service <identifiersep> status . started ) { \n <ect>
\t3 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 return optional . absent ( ) ; } } \n \t2 } ) ; \n \t1 } catch ( vpc <identifiersep> metadata <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t6 log . trace ( <string_literal> , new object [ ] { index , answer , object <identifiersep> helper . type ( answer ) } ) ; } \n \t4 } catch ( no <identifiersep> type <identifiersep> conversion <identifiersep> available <identifiersep> exception e ) { \n <ect>
\t3 final ws <identifiersep> federation <identifiersep> metadata <identifiersep> writer <identifier> = new ws <identifiersep> federation <identifiersep> metadata <identifiersep> writer ( ) ; \n \t3 final document metadata = <identifier> . produce <identifiersep> metadata <identifiersep> document ( cas <identifiersep> properties ) ; \n \t3 out . write ( <identifier> . node <identifiersep> to <identifiersep> string ( metadata ) ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t10 try { \n <number_literal> <identifier> . close ( ) ; \n \t10 } catch ( io <identifiersep> exception e ) { } } } } } \n \t5 } catch ( io <identifiersep> exception exc ) { \n <ect>
\t3 string agent <identifiersep> ip = <identifier> . get <identifiersep> host <identifiersep> address ( ) ; \n \t3 string guid = uuid . name <identifiersep> uuid <identifiersep> from <identifiersep> bytes ( agent <identifiersep> ip . get <identifiersep> bytes ( ) ) . to <identifiersep> string ( ) ; \n \t3 string guid <identifiersep> with <identifiersep> tail = guid + <string_literal> ; <comment> \n \t3 if ( <identifier> <identifiersep> resource <identifiersep> mgr . find <identifiersep> host <identifiersep> by <identifiersep> guid ( guid <identifiersep> with <identifiersep> tail ) != null ) { \n <ect>
\t7 data <identifiersep> utils . print <identifiersep> hex <identifiersep> bytes ( <identifier> <identifiersep> current <identifiersep> segment . name ( ) . last <identifiersep> component ( ) ) + <string_literal> ) ; } \n \t4 return false ; } } \n \t2 if ( ! segmentation <identifiersep> profile . is <identifiersep> segment ( <identifier> <identifiersep> current <identifiersep> segment . name ( ) ) ) { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n <ect>
\t10 vm <identifiersep> network <identifiersep> stat <identifiersep> lock . set <identifiersep> agg <identifiersep> bytes <identifiersep> sent ( vm <identifiersep> network <identifiersep> stat <identifiersep> lock . get <identifiersep> net <identifiersep> bytes <identifiersep> sent ( ) + vm <identifiersep> network <identifiersep> stat <identifiersep> lock . get <identifiersep> current <identifiersep> bytes <identifiersep> sent ( ) ) ; } \n \t9 <identifier> <identifiersep> user <identifiersep> stats <identifiersep> dao . update ( vm <identifiersep> network <identifiersep> stat <identifiersep> lock . get <identifiersep> id ( ) , vm <identifiersep> network <identifiersep> stat <identifiersep> lock ) ; } } } } \n \t4 } ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t9 if ( job <identifiersep> key . get <identifiersep> name ( ) . equals ( a <identifiersep> host ) ) { \n \t10 job <identifiersep> exists = true ; \n \t10 break ; } } } \n \t6 } catch ( scheduler <identifiersep> exception e1 ) { \n <ect>
\t1 txn . commit ( ) ; \n \t1 } finally { \n \t1 txn . end ( ) ; } } \n private void some <identifiersep> inner <identifiersep> method ( ) { \n <ect>
\t3 } else { \n \t4 logger . warn ( <string_literal> ) ; \n \t4 success <identifiersep> full <identifiersep> authentication = false ; } \n \t2 } catch ( final abstract <identifiersep> ticket <identifiersep> exception e ) { \n <ect>
\t3 string updated = coord <identifiersep> el <identifiersep> functions . eval <identifiersep> and <identifiersep> wrap ( eval , tag <identifiersep> elem . get <identifiersep> text ( ) ) ; \n \t3 tag <identifiersep> elem . remove <identifiersep> content ( ) ; \n \t3 tag <identifiersep> elem . add <identifiersep> content ( updated ) ; } \n \t2 else { \n <ect>
\t5 if ( end <identifiersep> snapshot != null ) { \n \t6 end <identifiersep> snapshot ( end <identifiersep> snapshot , failure ) ; } } \n \t3 } ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 search <identifiersep> response expected = client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> indices <identifiersep> options ( indices <identifiersep> options . <identifier> <identifiersep> expand <identifiersep> open ( ) ) \n \t3 . set <identifiersep> query ( new range <identifiersep> query <identifiersep> builder ( <string_literal> ) . from ( index <identifiersep> version . get ( ) , true ) ) . get ( ) ; \n \t2 search <identifiersep> response all = client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> indices <identifiersep> options ( indices <identifiersep> options . <identifier> <identifiersep> expand <identifiersep> open ( ) ) . get ( ) ; \n \t2 assert <identifiersep> equals ( expected + <string_literal> + all , expected . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , all . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) ) ; \n <ect>
\t5 = ( warning <identifiersep> header ) response . get <identifiersep> header ( warning <identifiersep> header . name ) ; \n \t4 if ( warning <identifiersep> header != null ) \n \t4 { \n \t5 reason = warning <identifiersep> header . get <identifiersep> text ( ) ; \n <ect>
\t4 if ( ! string <identifiersep> utils . is <identifiersep> blank ( type . get <identifiersep> binding ( ) ) ) { \n \t5 log . warn ( <string_literal> + type ) ; \n \t5 type . set <identifiersep> binding ( null ) ; } \n \t4 if ( ! string <identifiersep> utils . is <identifiersep> blank ( type . get <identifiersep> converter ( ) ) ) { \n <ect>
\t4 if ( data != null ) { \n \t5 table <identifiersep> data <identifiersep> process ( data ) ; } } \n \t2 } else { \n \t3 <comment> \n <ect>
\t4 filter filter ; \n \t4 try { \n \t5 filter = ( filter ) filter <identifiersep> class . new <identifiersep> instance ( ) ; \n \t4 } catch ( class <identifiersep> cast <identifiersep> exception e ) { \n <ect>
\t3 result . <identifier> = ( accumulo <identifiersep> security <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 session = cluster . connect ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t4 if ( file <identifiersep> name . ends <identifiersep> with ( <string_literal> ) ) { \n \t5 try { \n \t6 create <identifiersep> page ( file , file <identifiersep> name ) ; \n \t5 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t1 long prev <identifiersep> head <identifiersep> offset = write <identifiersep> buffers . unsafe <identifiersep> read <identifiersep> n <identifiersep> byte <identifiersep> long ( <identifier> <identifiersep> ptr <identifiersep> offset , <number_literal> ) ; \n \t1 <comment> \n \t1 assert prev <identifiersep> head <identifiersep> offset < tail <identifiersep> offset ; <comment> \n \t1 write <identifiersep> buffers . write <identifiersep> <identifier> <identifiersep> byte <identifiersep> u <identifiersep> long ( <identifier> <identifiersep> ptr <identifiersep> offset , tail <identifiersep> offset ) ; \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( return <identifiersep> client <identifiersep> entity ) ; \n \t2 log . info ( <string_literal> , pretty <identifiersep> print ( return <identifiersep> client <identifiersep> entity ) ) ; \n \t2 return <identifiersep> client <identifiersep> entity = ( client <identifiersep> entity ) response <identifiersep> parts . get ( <number_literal> ) . get <identifiersep> body ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( return <identifiersep> client <identifiersep> entity ) ; \n <ect>
\t2 nic <identifiersep> vo network <identifiersep> element <identifiersep> nic = <identifier> <identifiersep> nic <identifiersep> dao . find <identifiersep> by <identifiersep> network <identifiersep> id <identifiersep> and <identifiersep> type ( virtual <identifiersep> network . get <identifiersep> id ( ) , type . domain <identifiersep> router ) ; \n \t2 if ( network <identifiersep> element <identifiersep> nic != null ) { \n \t3 return network <identifiersep> element <identifiersep> nic . get <identifiersep> <identifier> ( ) ; \n \t2 } else { \n <ect>
\t3 ip = src <identifiersep> nat <identifiersep> list [ 0 ] \n \t2 except exception as e : \n \t3 self . fail ( e ) \n \t2 finally : \n <ect>
\t7 after <identifiersep> write <identifiersep> operation ( ) ; } \n \t5 } ; \n \t5 thread <identifiersep> pool . executor ( thread <identifiersep> pool . names . flush ) . execute ( flush ) ; \n \t4 } else if ( should <identifiersep> roll <identifiersep> translog <identifiersep> generation ( ) ) { \n <ect>
\t2 throw new no <identifiersep> such <identifiersep> object <identifiersep> exception ( <string_literal> + schema <identifiersep> name + <string_literal> ) ; } \n \t2 fire <identifiersep> pre <identifiersep> event ( new pre <identifiersep> <identifier> <identifiersep> schema <identifiersep> version <identifiersep> event ( this , collections . singleton <identifiersep> list ( schema <identifiersep> version ) ) ) ; \n \t2 return schema <identifiersep> version ; \n \t1 } catch ( meta <identifiersep> exception e ) { \n <ect>
\t2 block <identifier> = <identifier> . create <identifiersep> next <identifiersep> block ( some <identifiersep> other <identifiersep> <identifier> ) ; \n \t2 block <identifier> = <identifier> . create <identifiersep> next <identifiersep> block ( some <identifiersep> other <identifiersep> <identifier> ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 assert <identifiersep> true ( chain . add ( <identifier> ) ) ; \n <ect>
\t2 setup <identifiersep> cmd . set <identifiersep> copy <identifiersep> user <identifiersep> name ( template <identifiersep> constants . default <identifiersep> http <identifiersep> auth <identifiersep> user ) ; \n \t2 answer answer = <identifier> <identifiersep> agent <identifiersep> mgr . <identifier> <identifiersep> send ( ss <identifiersep> a <identifiersep> host <identifiersep> id , setup <identifiersep> cmd ) ; \n \t2 if ( answer != null && answer . get <identifiersep> result ( ) ) { \n <ect>
\t3 <identifier> <identifiersep> path = file . get <identifiersep> canonical <identifiersep> path ( ) ; \n \t3 logger . info ( <string_literal> + <identifier> <identifiersep> path ) ; \n \t3 break ; \n \t3 } else { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> status ( ) , equal <identifiersep> to ( cluster <identifiersep> health <identifiersep> status . green ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> active <identifiersep> primary <identifiersep> shards ( ) , equal <identifiersep> to ( num <identifiersep> shards . num <identifiersep> primaries ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> number <identifiersep> of <identifiersep> replicas ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> active <identifiersep> shards ( ) , equal <identifiersep> to ( num <identifiersep> shards . num <identifiersep> primaries * <number_literal> ) ) ; \n <ect>
\t3 || id . equals ( cas <identifiersep> webflow <identifiersep> constants . transition <identifiersep> id <identifiersep> success ) \n \t3 || id . equals ( cas <identifiersep> webflow <identifiersep> constants . transition <identifiersep> id <identifiersep> success <identifiersep> with <identifiersep> warnings ) ) { \n \t3 logger . debug ( <string_literal> , id ) ; \n \t3 return collection <identifiersep> utils . wrap <identifiersep> set ( event ) ; } \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( this , <string_literal> + e , e ) ; \n \t3 on <identifiersep> failure ( new fetch <identifiersep> exception ( fetch <identifiersep> exception <identifiersep> mode . internal <identifiersep> error , e ) , state , context ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t1 t <identifiersep> server <identifiersep> utils . stop <identifiersep> t <identifiersep> server ( this . repl <identifiersep> server ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 t <identifiersep> server <identifiersep> utils . stop <identifiersep> t <identifiersep> server ( server ) ; \n \t1 try { \n <ect>
\t2 check <identifiersep> not <identifiersep> null ( orig <identifiersep> cmd , <string_literal> ) ; \n \t2 check <identifiersep> argument ( orig <identifiersep> cmd . get <identifiersep> arguments ( ) . size ( ) > 0 , <string_literal> ) ; \n \t2 final cmd <identifiersep> line cmd = process <identifiersep> command <identifiersep> line ( orig <identifiersep> cmd ) ; \n \t2 final string <identifier> <identifiersep> cmd = orig <identifiersep> cmd . to <identifiersep> command <identifiersep> line ( os , true ) ; \n <ect>
\t1 static { \n \t2 set <identifiersep> up <identifiersep> framework <identifiersep> principal <identifiersep> class ( er <identifiersep> <identifier> . class ) ; } \n \t1 @ override \n \t1 public void finish <identifiersep> initialization ( ) { \n <ect>
\t10 final http <identifiersep> servlet <identifiersep> request request , \n \t10 final base <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> xml <identifiersep> message <identifiersep> decoder decoder ) throws exception { \n \t2 final saml <identifiersep> id <identifiersep> p <identifiersep> logout <identifiersep> properties logout = cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> saml <identifiersep> idp ( ) . get <identifiersep> logout ( ) ; \n \t2 if ( logout . is <identifiersep> single <identifiersep> logout <identifiersep> callbacks <identifiersep> disabled ( ) ) { \n <ect>
\t2 test <identifiersep> realm <identifiersep> login <identifiersep> page . form ( ) . wait <identifiersep> for <identifiersep> register <identifiersep> link <identifiersep> not <identifiersep> present ( ) ; \n \t2 log . info ( <string_literal> ) ; } \n \t1 @ test \n \t1 public void edit <identifiersep> username ( ) { \n <ect>
\t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , ex ) ; } } \n \t1 @ override \n \t1 public void release <identifiersep> ip <identifiersep> address ( string ip <identifiersep> address , long dc <identifiersep> id , long instance <identifiersep> id ) { \n <ect>
\t3 params . get <identifiersep> search <identifiersep> <identifier> ( ) ) ; \n \t1 } catch ( naming <identifiersep> exception e1 ) { \n \t1 if ( generic <identifiersep> ldap <identifiersep> search . logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n \t2 <comment> \n <ect>
\t1 if ignore <identifiersep> dependencies : \n \t2 cmd = self . properties . remove <identifiersep> without <identifiersep> dependencies <identifiersep> cmd + [ name ] \n \t1 else : \n \t2 cmd = self . properties . remove <identifiersep> cmd [ context . log <identifiersep> output ] + [ name ] \n <ect>
\t2 reset <identifiersep> mock ( count ) ; \n \t2 stop <identifiersep> watch watch = new stop <identifiersep> watch ( ) ; \n \t2 execute ( count ) ; \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( ) ; \n <ect>
\t5 + <string_literal> + new <identifiersep> state ; \n \t4 if ( comp <identifiersep> info . is <identifiersep> master ( ) ) { \n \t5 throw new ambari <identifiersep> exception ( error ) ; \n \t4 } else { \n <ect>
\t4 return ; } \n \t3 try { \n \t4 channel . send ( new message ( null , new request ( request . put , fqn , data ) ) ) ; } \n \t3 catch ( exception ex ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> error <identifiersep> format ( ) \n \t1 { \n \t2 <comment> \n <ect>
\t1 string san <identifiersep> volume <identifiersep> id = volume <identifiersep> info . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) ; \n \t1 log . info ( <string_literal> + san <identifiersep> volume <identifiersep> id + <string_literal> + node <identifiersep> iqn ) ; \n \t1 string lun = connection <identifiersep> manager . export <identifiersep> resource ( san <identifiersep> volume <identifiersep> id , node <identifiersep> iqn , volume <identifiersep> info . get <identifiersep> iqn ( ) ) ; \n \t1 if ( lun == null ) { \n <ect>
\t1 e . kill <identifiersep> query <identifiersep> results . clear ( ) ; \n \t1 <comment> \n \t1 for ( wm <identifiersep> tez <identifiersep> session session <identifiersep> to <identifiersep> destroy : e . to <identifiersep> destroy ) { \n \t1 if ( e . to <identifiersep> return . remove ( session <identifiersep> to <identifiersep> destroy ) ) { \n <ect>
\t1 val consumes = rest . get <identifiersep> consumes match { \n \t2 case e : string if e != <string_literal> = > e . split ( <string_literal> ) . map ( <identifier> <identifiersep> <identifier> . trim ) . to <identifiersep> list \n \t2 case <identifier> <identifiersep> <identifier> = > list ( ) } \n \t1 val models = model <identifiersep> util . models <identifiersep> from <identifiersep> <identifier> ( <identifier> . to <identifiersep> list ) \n <ect>
\t2 thread reader = new thread ( ( ) - > { \n \t4 try { \n \t5 object session = test <identifiersep> session <identifiersep> access . mock <identifiersep> session ( jta <identifiersep> platform , time <identifiersep> service ) ; \n \t5 with <identifiersep> tx ( local <identifiersep> environment , session , ( ) - > { \n <ect>
\t3 k key = entry . get <identifiersep> key ( ) ; \n \t3 cache . value < value < v > > val = entry . get <identifiersep> value ( ) ; \n \t3 if ( val == null ) { \n <ect>
\t3 if ( pool . get <identifiersep> jmx <identifiersep> pool ( ) != null ) { \n \t4 m <identifiersep> bean <identifiersep> server <identifier> = management <identifiersep> factory . get <identifiersep> platform <identifiersep> m <identifiersep> bean <identifiersep> server ( ) ; \n \t4 <identifier> . register <identifiersep> m <identifiersep> bean ( pool . get <identifiersep> jmx <identifiersep> pool ( ) , <identifier> ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t6 if ( dir . exists ( ) ) { \n \t7 result . add ( dir . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ) ; \n \t7 dev <identifiersep> folder <identifiersep> names . add ( file . get <identifiersep> name ( ) ) ; } } } } } \n \t2 catch ( malformed <identifiersep> url <identifiersep> exception ex ) { \n <ect>
\t3 return ; } \n \t2 double [ ] locations = fields . bytes <identifiersep> to <identifiersep> <identifier> ( data , <number_literal> , data . length - <number_literal> ) ; \n \t2 double his <identifiersep> loc = locations [ 0 ] ; \n \t2 if ( ! location . is <identifiersep> valid ( his <identifiersep> loc ) ) { \n <ect>
\t4 try { \n \t5 if ( gateway <identifiersep> output <identifiersep> stream != null ) { \n \t6 gateway <identifiersep> output <identifiersep> stream . close ( ) ; } \n \t4 } catch ( io <identifiersep> exception ioex ) { \n <ect>
\t3 } else { \n \t4 if ( <identifier> <identifiersep> exec . was <identifiersep> <identifier> <identifiersep> building ( req <identifiersep> id ) ) { \n \t5 <comment> \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 { \n \t3 return ( ( last <identifiersep> error <identifiersep> exception ) e ) . get <identifiersep> error <identifiersep> code ( ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> method <identifiersep> error x ) \n \t2 { \n <ect>
\t1 private void unregister <identifiersep> bean ( object <identifiersep> name name ) { \n \t2 synchronized ( registered <identifiersep> beans ) { \n \t3 try { \n \t4 if ( mbean <identifiersep> server . is <identifiersep> registered ( name ) ) { \n <ect>
\t1 ) \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 protected void bind <identifiersep> data <identifiersep> source ( data <identifiersep> source data <identifiersep> source ) throws io <identifiersep> exception { \n \t2 if ( this . data <identifiersep> source != null ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void per <identifiersep> job <identifiersep> yarn <identifiersep> cluster <identifiersep> off <identifiersep> heap ( ) throws io <identifiersep> exception { \n <ect>
\t2 iface . set <identifiersep> binding <identifiersep> name ( binding . get <identifiersep> q <identifiersep> name ( ) ) ; \n \t2 iface . set <identifiersep> soap <identifiersep> version ( soap <identifiersep> version . <identifier> ) ; \n \t2 string [ ] endpoints = wsdl <identifiersep> utils . get <identifiersep> endpoints <identifiersep> for <identifiersep> binding ( wsdl <identifiersep> context . get <identifiersep> definition ( ) , binding ) ; \n \t2 for ( int i = 0 ; i < endpoints . length ; i ++ ) { \n <ect>
\t2 <comment> \n \t2 cluster <identifiersep> state = allocation . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 <comment> \n \t2 cluster <identifiersep> state = allocation . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n <ect>
\t2 <identifier> . shut <identifiersep> down ( ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> bulk <identifiersep> import ( ) throws exception { \n <ect>
\t5 logger . info ( <string_literal> + get <identifiersep> handler <identifiersep> description ( handler ) ) ; } \n \t4 set <identifiersep> root <identifiersep> handler ( resolved <identifiersep> handler ) ; } \n \t3 else if ( url <identifiersep> path . equals ( <string_literal> ) ) { \n <ect>
\t5 last <identifiersep> loaded = last <identifiersep> modified ; } } \n \t3 catch ( throwable t ) \n \t3 { \n \t4 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( t ) ; \n <ect>
\t1 final string source = non <identifiersep> <identifier> <identifiersep> event <identifiersep> qualifier <identifiersep> serializer <identifiersep> generator . generate <identifiersep> source ( <identifier> <identifiersep> annotation <identifiersep> utils . get <identifiersep> <identifier> <identifiersep> qualifiers ( context . get <identifiersep> type <identifiersep> oracle ( ) ) ) ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 if ( env <identifiersep> util . is <identifiersep> prod <identifiersep> mode ( ) ) { \n \t1 if ( output <identifiersep> directory <identifiersep> util . output <identifiersep> dir . is <identifiersep> present ( ) ) { \n <ect>
\t2 return is <identifiersep> <identifier> ; } \n \t1 @ override \n \t1 protected void print <identifiersep> formatted <identifiersep> payload ( ) { \n \t2 logger . debug ( <string_literal> + ( ! this . is <identifiersep> <identifier> ) ) ; \n <ect>
\t2 . set <identifiersep> client ( <identifier> <identifiersep> tracker <identifiersep> client ) \n \t2 . build ( ) ; } \n \t1 catch ( uri <identifiersep> syntax <identifiersep> exception e ) \n \t1 { \n <ect>
\t7 obj . put ( <identifier> <identifiersep> val , <identifier> <identifiersep> gson . to <identifiersep> json ( json <identifiersep> obj . get ( <string_literal> ) ) ) ; \n \t7 list . add ( obj ) ; \n \t7 break ; \n \t6 default : \n <ect>
\t4 logger . debug ( <string_literal> , result ) ; \n \t4 if ( result != null && ! clazz . is <identifiersep> assignable <identifiersep> from ( result . get <identifiersep> class ( ) ) ) { \n \t5 throw new class <identifiersep> cast <identifiersep> exception ( <string_literal> + result + <string_literal> + result . get <identifiersep> class ( ) + <string_literal> + clazz ) ; } \n \t4 return ( t ) result ; } \n <ect>
\t4 else \n \t5 receive <identifiersep> job . this . get <identifiersep> context ( ) . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , 1 , 1 ) ; \n \t4 <identifier> <identifiersep> ctx . in <identifiersep> net <identifiersep> message <identifiersep> pool ( ) . add ( msg , null , <identifier> <identifiersep> from ) ; \n \t3 } catch ( <identifier> <identifiersep> message <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public void send ( list < bundle > bundles ) { \n \t2 <comment> \n \t2 if ( closed ) { \n <ect>
\t3 session <identifiersep> log <identifiersep> factory = <identifier> <identifiersep> log <identifiersep> factories . iterator ( ) . next ( ) ; \n \t2 } else { \n \t3 <comment> \n \t3 session <identifiersep> log <identifiersep> factory = new screen <identifiersep> log <identifiersep> factory ( settings ) ; } \n <ect>
\t2 } else { \n \t3 if ( debug ) { \n \t4 log . debug ( <string_literal> + match + <string_literal> ) ; } \n \t3 if ( rules <identifiersep> validation ) { \n <ect>
\t4 try { \n \t5 xwiki . copy <identifiersep> document ( main <identifiersep> doc <identifiersep> ref , doc <identifiersep> ref , xcontext ) ; \n \t5 it <identifiersep> documents <identifiersep> to <identifiersep> restore . remove ( ) ; \n \t4 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 return do <identifiersep> nodes ( doc , item ) ; } \n \t1 @ override \n \t1 public document parse <identifiersep> file ( string file <identifiersep> name ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> generate <identifiersep> <identifier> ( ) { \n \t2 try { \n \t3 string filename = <string_literal> ; \n <ect>
\t2 public void set <identifiersep> response ( update <identifiersep> fragment <identifiersep> response <identifiersep> proto response ) { \n \t3 callback . set <identifiersep> done ( ctx , response . get <identifiersep> result ( ) ) ; } \n \t2 @ override \n \t2 public void indicate <identifiersep> error ( throwable t ) { \n <ect>
\t2 while ( <identifier> . has <identifiersep> next ( ) ) { \n \t3 transform o = ( transform ) <identifier> . next ( ) ; \n \t3 transformer t = o . get <identifiersep> transformer ( ) ; \n \t3 if ( t instanceof i <identifiersep> <identifier> <identifiersep> transform ) { \n <ect>
\t1 protected byte [ ] get <identifiersep> value <identifiersep> bytes <identifiersep> from <identifiersep> id <identifiersep> impl ( int id ) { \n \t2 throw new unsupported <identifiersep> operation <identifiersep> exception ( ) ; } \n \t1 public void println <identifiersep> statistics ( ) { \n \t2 logger . info ( <string_literal> + cache <identifiersep> hit <identifiersep> count ) ; \n <ect>
\t4 boolean success = process <identifiersep> file . rename <identifiersep> to ( renamed ) ; \n \t4 log . debug ( <string_literal> , success ) ; \n \t4 if ( success ) { \n \t5 <identifier> . add ( renamed ) ; \n <ect>
\t4 for ( string job <identifiersep> id : job <identifiersep> id <identifiersep> partition ) { \n \t5 import <identifiersep> job <identifiersep> data ( job <identifiersep> id , source <identifiersep> data <identifiersep> store , target <identifiersep> data <identifiersep> store , check <identifiersep> all <identifiersep> writes ) ; } \n \t3 } catch ( exception ex ) { \n \t4 got <identifiersep> failures . compare <identifiersep> and <identifiersep> set ( false , true ) ; \n <ect>
finally : \n \t1 try : \n \t1 <identifier> . close ( ) \n \t1 except exception as e : \n <ect>
\t5 ds . set <identifiersep> dir ( dir ) ; \n \t5 ds . create <identifiersep> pattern <identifiersep> set ( ) . add <identifiersep> configured <identifiersep> <identifier> ( ps ) ; \n \t5 dir <identifiersep> sets . add ( ds ) ; \n \t4 } else { \n <ect>
\t3 while ( ( read = in . read ( buf ) ) != - 1 ) { \n \t4 digest . update ( buf , 0 , read ) ; } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 private static class validate <identifiersep> consumer implements consumer \n \t1 { \n \t2 @ override \n \t2 public void accept ( trident <identifiersep> tuple input ) { \n <ect>
\t4 <identifier> <identifiersep> add <identifiersep> key <identifiersep> to <identifiersep> vector ( <string_literal> , <identifier> <identifiersep> keys ) ; } \n \t3 c . keys = new ns <identifiersep> mutable <identifiersep> array ( ) ; } \n \t2 <comment> \n <ect>
\t4 string <identifier> <identifiersep> exec <identifiersep> id = mojo <identifiersep> execution . get <identifiersep> <identifier> ( ) ; \n \t4 if ( mojo <identifiersep> execution . get <identifiersep> execution <identifiersep> id ( ) != null ) \n \t4 { \n \t5 <identifier> <identifiersep> exec <identifiersep> id += <string_literal> + mojo <identifiersep> execution . get <identifiersep> execution <identifiersep> id ( ) + <string_literal> ; } \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t2 try { \n \t3 properties params = get <identifiersep> parameters ( ) ; \n \t3 store = data <identifiersep> store <identifiersep> finder . get <identifiersep> data <identifiersep> store ( params ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 return 0 ; } \n \t2 <comment> \n \t2 if ( arrays . equals ( from . get <identifiersep> ip ( ) , <identifier> <identifiersep> transport . get <identifiersep> external <identifiersep> ip ( ) ) && ! <identifier> <identifiersep> transport . allow <identifiersep> local ( ) ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 new inet <identifiersep> socket <identifiersep> address ( <string_literal> , <identifier> ) , \n \t4 new inet <identifiersep> socket <identifiersep> address ( <string_literal> , <identifier> ) , \n \t4 with <identifiersep> <identifier> ? quorum <identifiersep> peer . learner <identifiersep> type . observer \n \t6 : quorum <identifiersep> peer . learner <identifiersep> type . participant ) ) ; \n <ect>
\t2 logger . debug ( <string_literal> , names . size ( ) ) ; \n \t2 if ( names . is <identifiersep> empty ( ) ) { \n \t3 return false ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( attr <identifiersep> value ) ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream <identifiersep> content <identifiersep> name <identifiersep> long <identifiersep> publisher <identifiersep> key <identifiersep> <identifier> <identifiersep> library ( ) throws exception { \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 <comment> \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t1 long end <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) + default <identifiersep> shutdown <identifiersep> timeout ; \n \t1 try { \n \t1 driver <identifiersep> thread . join ( default <identifiersep> shutdown <identifiersep> timeout ) ; \n \t1 } catch ( interrupted <identifiersep> exception ie ) { \n <ect>
\t3 return <identifier> . get <identifiersep> job <identifiersep> id ( ) . compare <identifiersep> to ( <identifier> . get <identifiersep> job <identifiersep> id ( ) ) ; } } \n \t1 @ private \n \t1 public void set <identifiersep> backend <identifiersep> exception ( string job <identifiersep> id , exception e ) { \n \t2 if ( e instanceof pig <identifiersep> exception ) { \n <ect>
\t2 logger . debug ( <string_literal> , this . get <identifiersep> path ( ) ) ; \n \t2 return check <identifiersep> access ( enum <identifiersep> set . of ( access <identifiersep> mask . generic <identifiersep> read ) , access <identifiersep> mask . file <identifiersep> read <identifiersep> data ) ; } \n \t1 @ override \n \t1 public boolean can <identifiersep> write ( ) { \n <ect>
\t3 } catch ( temporary <identifiersep> backend <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; \n \t4 <comment> \n \t3 } catch ( backend <identifiersep> exception e ) { \n <ect>
<comment> \n \t2 final <identifier> <identifiersep> web <identifiersep> socket web <identifiersep> socket \n \t4 = handshake . get <identifiersep> web <identifiersep> socket ( request , response , closing <identifiersep> strategy ) ; \n <ect>
\t2 log . info ( <string_literal> , after <identifiersep> setup <identifiersep> time ) ; \n \t2 checkpoint <identifiersep> m <identifiersep> bean . create <identifiersep> checkpoint ( <number_literal> ) ; \n \t2 long max <identifiersep> gc <identifiersep> age = checkpoint <identifiersep> m <identifiersep> bean . get <identifiersep> oldest <identifiersep> checkpoint <identifiersep> creation <identifiersep> timestamp ( ) - after <identifiersep> setup <identifiersep> time ; \n \t2 log . info ( <string_literal> , state . blobs <identifiersep> added . size ( ) , state . blobs <identifiersep> added ) ; \n <ect>
\t6 log . error ( <string_literal> , e ) ; } \n \t5 try { \n \t6 metadata <identifiersep> resource . set <identifiersep> derived ( true , sub <identifiersep> <identifier> . new <identifiersep> child ( 1 ) ) ; } \n \t5 catch ( core <identifiersep> exception e ) { \n <ect>
\t7 if ( message <identifiersep> id == - 1 ) { \n \t8 <comment> \n \t8 <comment> \n \t8 <comment> \n <ect>
\t1 private void perform <identifiersep> fast <identifiersep> <identifier> ( owl <identifiersep> class <identifiersep> expression <identifier> <identifiersep> class ) throws owl <identifiersep> exception { \n \t2 set < owl <identifiersep> axiom > axiom <identifiersep> window = new hash <identifiersep> set < > ( ) ; \n \t2 object [ ] axioms = debugging <identifiersep> axioms . to <identifiersep> array ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t2 <comment> \n \t2 session . control ( job <identifiersep> id , session . terminate ) \n \t2 } catch { \n \t2 case e : exception = > \n <ect>
\t1 @ override \n \t1 public authentication <identifiersep> builder add <identifiersep> failure ( final string key , final throwable value ) { \n \t2 logger . debug ( <string_literal> , key ) ; \n \t2 if ( this . successes . contains <identifiersep> key ( key ) ) { \n <ect>
\t5 try { \n \t6 fail = ( boolean ) ses . wait <identifiersep> for <identifiersep> attribute ( <string_literal> ) ; } \n \t5 catch ( interrupted <identifiersep> exception e ) { \n \t6 throw new grid <identifiersep> exception ( <string_literal> , e ) ; } \n <ect>
\t3 <comment> \n \t3 right <identifiersep> now . add ( calendar . <identifier> <identifiersep> of <identifiersep> day , - <number_literal> ) ; \n \t3 final date now = right <identifiersep> now . get <identifiersep> time ( ) ; \n \t3 if ( last <identifiersep> collection . after ( now ) ) { \n <ect>
\t3 if ( filename == null ) { \n \t4 file f = new file ( get <identifiersep> data <identifiersep> dir ( ) , storage . filter <identifiersep> name ( <identifier> . get <identifiersep> name ( ) ) + <string_literal> ) ; \n \t4 if ( f . exists ( ) ) { \n \t5 add <identifiersep> message ( <identifier> <identifiersep> t ( <string_literal> , f . get <identifiersep> absolute <identifiersep> path ( ) ) ) ; \n <ect>
\t2 assert <identifiersep> alert <identifiersep> success ( ) ; \n \t2 log . debug ( <string_literal> ) ; } \n \t1 @ test \n \t1 public void reset <identifiersep> password ( ) { \n <ect>
\t3 try { \n \t4 int num = integer . parse <identifiersep> int ( max <identifiersep> num <identifiersep> lines ) ; \n \t4 set <identifiersep> max <identifiersep> num <identifiersep> lines ( num ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t8 return ( restart <identifiersep> strategy <identifiersep> factory ) result ; } } } \n \t4 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception cnfe ) { \n \t5 log . warn ( <string_literal> , restart <identifiersep> strategy <identifiersep> name ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception <identifier> ) { \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \t4 do <identifiersep> allow <identifiersep> sleep ( ) ; \n \t4 owner . clear <identifiersep> worker ( ) ; \n \t3 } catch ( throwable e ) { \n <ect>
\t1 int <identifier> = search <identifiersep> helper . find <identifiersep> next <identifiersep> word <identifiersep> end ( chars , offset , size , cnt , big <identifiersep> word , false ) ; \n \t1 int <identifier> = search <identifiersep> helper . find <identifiersep> next <identifiersep> word <identifiersep> end ( chars , <identifier> , size , - cnt , big <identifiersep> word , false ) ; \n \t2 logger . debug ( <string_literal> + offset ) ; \n <ect>
\t3 log . error ( <string_literal> , t ) ; } \n \t2 try { \n \t3 node <identifiersep> manager <identifiersep> client . stop ( ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t3 client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> restore <identifiersep> snapshot ( <string_literal> , <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) . get ( ) ; \n \t2 assert <identifiersep> equals ( 0 , restore <identifiersep> snapshot <identifiersep> response . get <identifiersep> restore <identifiersep> info ( ) . failed <identifiersep> shards ( ) ) ; } \n \t1 public void test <identifiersep> snapshot <identifiersep> closed <identifiersep> index ( ) throws exception { \n \t2 client client = client ( ) ; \n <ect>
\t5 <identifier> . get <identifiersep> sources ( ) . for <identifiersep> each ( unchecked . bi <identifiersep> consumer ( ( k , v ) - > { \n \t6 final object obj = class <identifiersep> utils . get <identifiersep> class ( k , true ) . get <identifiersep> declared <identifiersep> constructor ( ) . new <identifiersep> instance ( ) ; \n \t6 if ( obj instanceof encryption <identifiersep> jwt <identifiersep> signing <identifiersep> jwt <identifiersep> <identifier> <identifiersep> properties ) { \n \t7 final encryption <identifiersep> jwt <identifiersep> signing <identifiersep> jwt <identifiersep> <identifier> <identifiersep> properties crypto = ( encryption <identifiersep> jwt <identifiersep> signing <identifiersep> jwt <identifiersep> <identifier> <identifiersep> properties ) obj ; \n <ect>
\t5 log . debug ( <string_literal> , e ) ; \n \t5 try { \n \t6 discovery <identifiersep> agent . service <identifiersep> failed ( event ) ; \n \t5 } catch ( io <identifiersep> exception e1 ) { \n <ect>
\t6 int <identifier> <identifiersep> pos = output <identifiersep> buf <identifiersep> str . index <identifiersep> of ( <identifier> <identifiersep> <identifier> ) ; \n \t6 int <identifier> <identifiersep> pos = output <identifiersep> buf <identifiersep> str . index <identifiersep> of ( <identifier> <identifiersep> <identifier> ) ; \n \t6 if ( <identifier> <identifiersep> pos >= 0 && <identifier> <identifiersep> pos >= 0 ) { \n \t7 string <identifier> <identifiersep> string = output <identifiersep> buf <identifiersep> str . substring ( <identifier> <identifiersep> pos + <identifier> <identifiersep> <identifier> . length ( ) , <identifier> <identifiersep> pos ) ; \n <ect>
\t3 byte [ ] decoded = java . util . base64 . get <identifiersep> url <identifiersep> decoder ( ) . decode ( text ) ; \n \t3 return new string ( decrypt <identifiersep> byte <identifiersep> array ( decoded ) , character <identifiersep> encoding ) ; } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t6 logger . debug ( <string_literal> ) ; } \n \t5 serial <identifiersep> port . enable <identifiersep> receive <identifiersep> timeout ( <number_literal> ) ; \n \t4 } catch ( unsupported <identifiersep> comm <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t3 write <identifiersep> column ( column ) ; } \n \t2 for ( join fk : foreign <identifiersep> keys ) { \n \t3 if ( ! filter . matches ( fk . table1 ( ) ) || ! filter . matches ( fk . <identifier> ( ) ) || \n \t5 ! filter . matches <identifiersep> all ( fk . <identifier> ( ) ) || ! filter . matches <identifiersep> all ( fk . <identifier> ( ) ) ) { \n <ect>
<comment> \n \t1 private void convert <identifiersep> is <identifiersep> blank ( e <identifiersep> is <identifiersep> blank expr ) \n \t1 { \n <ect>
\t3 messages <identifiersep> ids . remove ( cache . get <identifiersep> id ( ) ) ; } \n \t2 return this ; } \n \t1 @ override \n \t1 public broadcaster <identifiersep> cache exclude <identifiersep> from <identifiersep> cache ( string broadcaster <identifiersep> id , atmosphere <identifiersep> resource r ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 unregister <identifiersep> sync <identifiersep> m <identifiersep> bean ( ) ; } \n \t1 private void may <identifiersep> register <identifiersep> sync <identifiersep> m <identifiersep> bean ( ) { \n \t2 log . debug ( <string_literal> ) ; \n \t2 if ( mbean <identifiersep> registration != null ) { \n <ect>
\t1 this . prevent <identifiersep> <identifier> = prevent <identifiersep> <identifier> ; \n \t1 int num <identifiersep> users = <identifier> <identifiersep> preferences . num <identifiersep> users ( ) ; \n \t1 int num <identifiersep> items = <identifier> <identifiersep> preferences . num <identifiersep> items ( ) ; \n \t1 int num <identifiersep> prefs = <identifier> <identifiersep> preferences . num <identifiersep> preferences ( ) ; \n <ect>
\t3 on <identifiersep> exception ( trans <identifiersep> status ) ; \n \t3 logger . warn ( <string_literal> , <identifier> ) ; \n \t3 for ( entry < string , string > current <identifiersep> error : <identifier> . get <identifiersep> errors ( ) . entry <identifiersep> set ( ) ) \n \t3 { \n <ect>
\t1 try { \n \t1 initialize <identifiersep> database <identifiersep> connection ( conf ) ; \n \t1 string sql = jdbc <identifiersep> storage <identifiersep> config <identifiersep> manager . get <identifiersep> query <identifiersep> to <identifiersep> execute ( conf ) ; \n \t1 string limit <identifiersep> query = add <identifiersep> limit <identifiersep> and <identifiersep> offset <identifiersep> to <identifiersep> query ( sql , limit , offset ) ; \n <ect>
\t2 int updated = 0 ; \n \t2 for ( map . entry < string , string > entry : to <identifiersep> update . entry <identifiersep> set ( ) ) { \n \t3 string app <identifiersep> name = entry . get <identifiersep> key ( ) ; \n \t3 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 if ( profile <identifiersep> counter % <identifier> <identifiersep> per <identifiersep> file == 0 ) { \n \t2 increment <identifiersep> file ( ) ; \n \t2 log . debug ( <string_literal> , profile <identifiersep> counter ) ; } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 private static spark <identifiersep> <identifier> spark <identifiersep> <identifier> ; \n \t1 private static spark <identifiersep> <identifier> load <identifiersep> <identifier> ( string spark <identifiersep> version ) throws reflective <identifiersep> operation <identifiersep> exception { \n \t2 class < ? > spark <identifiersep> <identifier> <identifiersep> class ; \n \t2 if ( <string_literal> . equals ( spark <identifiersep> version ) ) { \n <ect>
\t5 } else if ( <identifier> <identifiersep> keep <identifiersep> running ) { \n \t6 <comment> \n \t6 try { thread . sleep ( <number_literal> ) ; } catch ( interrupted <identifiersep> exception ie ) { } } } } \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 } catch ( final certificate <identifiersep> parsing <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n <ect>
public void set <identifiersep> user ( se . caboo . beast . model . user value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value , <identifier> <identifiersep> post . user <identifiersep> key ) ; } \n public void set <identifiersep> user <identifiersep> relationship ( se . caboo . beast . model . user value ) { \n <ect>
\t1 this . total = reader . get <identifiersep> record <identifiersep> count ( ) ; \n \t1 this . <identifier> <identifiersep> record <identifiersep> counter = new <identifier> <identifiersep> record <identifiersep> counter ( options , total ) ; \n \t1 this . filter <identifiersep> records = options . use <identifiersep> record <identifiersep> filter ( ) ; \n \t1 reader . set <identifiersep> requested <identifiersep> schema ( requested <identifiersep> schema ) ; \n <ect>
\t5 if ( ( param <identifiersep> name != null ) && ( param <identifiersep> name . length ( ) > 0 ) ) { \n \t6 parameters . put ( param <identifiersep> name , param <identifiersep> value ) ; } \n \t5 is <identifiersep> name <identifiersep> tok = true ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t5 public string run ( ) { \n \t6 return system . get <identifiersep> property ( key ) ; } \n \t4 } ) ; } \n \t2 } catch ( security <identifiersep> exception e ) { \n <ect>
\t1 thread <identifiersep> one . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 signal <identifiersep> thread thread <identifiersep> two = new signal <identifiersep> thread ( <identifier> . get <identifiersep> id ( ) ) ; \n \t1 thread <identifiersep> two . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n <ect>
private integer get <identifiersep> int <identifiersep> value ( map < string , ? extends object > properties , string property <identifiersep> key ) \n { \n \t1 if ( properties == null ) \n \t1 { \n <ect>
\t4 final map < ? , ? > record = it . next ( ) ; \n \t4 final registered <identifiersep> service svc = convert <identifiersep> service <identifiersep> properties ( record ) ; \n \t4 logger . debug ( <string_literal> , svc ) ; \n \t4 results . add ( svc ) ; } \n <ect>
\t3 m <identifiersep> wake <identifiersep> lock . set <identifiersep> reference <identifiersep> <identifier> ( false ) ; } \n \t2 @ override \n \t2 public void acquire ( ) { \n \t3 m <identifiersep> wake <identifiersep> lock . acquire ( ) ; \n <ect>
\t3 assert . assert <identifiersep> equals ( <string_literal> + index , col <identifiersep> c ) ; \n \t3 assert . assert <identifiersep> equals ( <number_literal> , t . size ( ) ) ; \n \t3 index ++ ; } \n \t2 assert . assert <identifiersep> equals ( <number_literal> , index ) ; \n <ect>
\t1 log . warn ( <string_literal> , filename ) ; \n \t1 } else { \n \t1 task <identifiersep> id = m . group ( 1 ) ; \n \t1 copy <identifiersep> file <identifiersep> suffix = m . group ( <number_literal> ) ; } \n <ect>
\t2 if ( task <identifiersep> manager <identifiersep> memory <identifiersep> mb > free <identifiersep> cluster <identifiersep> resources . container <identifiersep> limit ) { \n \t3 log . warn ( <string_literal> + task <identifiersep> manager <identifiersep> memory <identifiersep> mb + <string_literal> \n \t4 + <string_literal> + free <identifiersep> cluster <identifiersep> resources . container <identifiersep> limit + note <identifiersep> <identifier> ) ; } \n \t2 if ( job <identifiersep> manager <identifiersep> memory <identifiersep> mb > free <identifiersep> cluster <identifiersep> resources . container <identifiersep> limit ) { \n <ect>
\t1 { \n \t2 try { \n \t3 return <identifier> <identifiersep> resource <identifiersep> tag <identifiersep> dao . list <identifiersep> tags ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void handle <identifiersep> application <identifiersep> command <identifiersep> request ( serial <identifiersep> message serial <identifiersep> message , int offset , int endpoint ) { \n <ect>
\t1 location location = get <identifiersep> node <identifiersep> template ( ) . get <identifiersep> location ( ) ; \n \t1 optional < security <identifiersep> group <identifiersep> extension > security <identifiersep> group <identifiersep> extension = compute <identifiersep> service . get <identifiersep> security <identifiersep> group <identifiersep> extension ( ) ; \n \t1 assert <identifiersep> true ( security <identifiersep> group <identifiersep> extension . is <identifiersep> present ( ) , <string_literal> ) ; \n \t1 security <identifiersep> group group = security <identifiersep> group <identifiersep> extension . get ( ) . create <identifiersep> security <identifiersep> group ( sec <identifiersep> group <identifiersep> name , location ) ; \n <ect>
\t1 <comment> \n \t1 @ override protected grid <identifiersep> spi <identifiersep> context get <identifiersep> spi <identifiersep> context ( ) { \n \t2 if ( ctx <identifiersep> init <identifiersep> latch . get <identifiersep> count ( ) > 0 ) { \n <ect>
\t6 list <identifiersep> dest <identifiersep> to . add ( dest <identifiersep> to ) ; } } \n \t4 load <identifiersep> balancer = new load <identifiersep> balancer <identifiersep> to ( <identifier> . get <identifiersep> string ( <string_literal> ) , list <identifiersep> dest <identifiersep> to ) ; \n \t4 <identifier> <identifiersep> lb . add ( load <identifiersep> balancer ) ; } \n \t2 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 input . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
* for ( int i = 0 ; i & <identifier> ; keys . length ; i ++ ) map . put ( keys [ i ] , values [ i ] ) ; \n * log . info ( <string_literal> + map ) ; \n * log . info ( <string_literal> + map . size ( ) ) ; \n * log . info ( map . contains <identifiersep> key ( <number_literal> ) ) ; \n <ect>
\t2 if ( <identifier> == null ) { \n \t3 <identifier> = new standalone <identifiersep> classpath <identifiersep> resolver ( ) ; \n \t2 } else { \n \t3 <identifier> = new standalone <identifiersep> classpath <identifiersep> resolver ( <identifier> ) ; } \n <ect>
\t4 continue ; } \n \t3 if ( sql <identifiersep> digest . aggregations . size ( ) > 0 ) { \n \t4 function <identifiersep> desc orig <identifiersep> func = sql <identifiersep> digest . aggregations . iterator ( ) . next ( ) ; \n \t4 if ( orig <identifiersep> func . is <identifiersep> sum ( ) == false && orig <identifiersep> func . is <identifiersep> count ( ) == false ) { \n <ect>
\t1 private void assign <identifiersep> sequence <identifiersep> id ( database <identifiersep> connection database <identifiersep> connection , t data , object <identifiersep> cache object <identifiersep> cache ) \n \t3 throws sql <identifiersep> exception { \n \t2 <comment> \n \t2 long seq <identifiersep> val = database <identifiersep> connection . query <identifiersep> for <identifiersep> long ( query <identifiersep> next <identifiersep> sequence <identifiersep> stmt ) ; \n <ect>
\t4 result = false ; } \n \t3 if ( result ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + host . get <identifiersep> id ( ) + <string_literal> + host . get <identifiersep> name ( ) + <string_literal> + <identifier> <identifiersep> node <identifiersep> id + <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 list < class < ? > > cmd <identifiersep> list = new array <identifiersep> list < class < ? > > ( ) ; \n \t2 cmd <identifiersep> list . add ( list <identifiersep> <identifier> <identifiersep> volume <identifiersep> cmd . class ) ; \n \t2 cmd <identifiersep> list . add ( list <identifiersep> <identifier> <identifiersep> pool <identifiersep> cmd . class ) ; \n \t2 cmd <identifiersep> list . add ( list <identifiersep> <identifier> <identifiersep> interface <identifiersep> cmd . class ) ; \n <ect>
\t2 string address = null ; \n \t2 try { \n \t3 address = kubernetes <identifiersep> helper . get <identifiersep> service <identifiersep> url ( kubernetes , service <identifiersep> names . <identifier> , namespace , <string_literal> , true ) ; \n \t3 if ( strings . is <identifiersep> null <identifiersep> or <identifiersep> blank ( address ) ) { \n <ect>
\t6 broker . wait <identifiersep> until <identifiersep> stopped ( ) ; \n \t5 } catch ( exception e ) { \n \t6 log . error ( <string_literal> , e ) ; \n \t6 exceptions . add ( e ) ; } \n <ect>
\t6 cls = class . for <identifiersep> name ( <string_literal> ) ; \n \t6 con = cls . get <identifiersep> <identifier> ( ) [ 0 ] ; \n \t6 this . <identifier> = ( persistence <identifiersep> context <identifiersep> manager ) con . new <identifiersep> instance ( this . env ) ; \n \t5 } catch ( exception ex ) { \n <ect>
\t3 } catch ( timeout <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; } } \n \t2 this . consumers . clear ( ) ; \n \t2 if ( conn != null ) { \n <ect>
\t2 it . next ( ) . submit ( ) ; } } } \n private void add <identifiersep> shutdown <identifiersep> hook ( ) { \n \t1 runtime . get <identifiersep> runtime ( ) . add <identifiersep> shutdown <identifiersep> hook ( new thread ( ( ) - > { \n \t1 if ( running ) { \n <ect>
\t2 if ( existing <identifiersep> ontology != null && ! o . equals ( existing <identifiersep> ontology ) \n \t3 && ! o . equal <identifiersep> axioms ( existing <identifiersep> ontology ) ) { \n \t3 logger . error ( <string_literal> , \n \t4 existing <identifiersep> ontology ) ; \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + vm ) ; \n \t3 return false ; } \n \t2 try { \n \t3 if ( ! state <identifiersep> transit <identifiersep> to ( vm , virtual <identifiersep> machine . event . destroy <identifiersep> requested , vm . get <identifiersep> host <identifiersep> id ( ) ) ) { \n <ect>
\t2 <comment> \n \t2 action <identifiersep> config action <identifiersep> config = module <identifiersep> config . find <identifiersep> action <identifiersep> config <identifiersep> id ( action <identifiersep> id ) ; \n \t2 if ( action <identifiersep> config == null ) { \n <ect>
\t2 if ( null == last <identifiersep> map ) { \n \t3 send <identifiersep> error ( ctx , not <identifiersep> found ) ; \n \t3 return ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 new <identifiersep> dir = hdfs <identifiersep> util . find <identifiersep> <identifier> <identifiersep> file <identifiersep> name ( hdfs <identifiersep> api , new <identifiersep> dir <identifiersep> prefix , <string_literal> ) ; \n \t2 } catch ( hdfs <identifiersep> api <identifiersep> exception e ) { \n \t3 throw new service <identifiersep> formatted <identifiersep> exception ( e ) ; } \n \t2 job . set <identifiersep> status <identifiersep> dir ( new <identifiersep> dir ) ; \n <ect>
\t2 this . facade = facade ; } \n \t1 protected boolean resolve <identifiersep> deployment ( ) { \n \t2 deployment = deployment <identifiersep> context . resolve <identifiersep> deployment ( facade ) ; \n \t2 if ( ! deployment . is <identifiersep> configured ( ) ) { \n <ect>
\t1 try { \n \t1 final long if <identifiersep> modified <identifiersep> since = request . get <identifiersep> date <identifiersep> header ( http <identifiersep> header . if <identifiersep> modified <identifiersep> since . to <identifiersep> string ( ) ) ; \n \t1 return if <identifiersep> modified <identifiersep> since < get <identifiersep> headers <identifiersep> configurer ( ) . get <identifiersep> last <identifiersep> modified <identifiersep> timestamp ( ) ; \n \t1 } catch ( final exception e ) { \n <ect>
\t3 for ( user <identifiersep> view u2 : users <identifiersep> to <identifiersep> check ) { \n \t4 if ( <identifier> . get <identifiersep> user <identifiersep> name ( ) . equals ( u2 . get <identifiersep> user <identifiersep> name ( ) ) ) { \n \t5 string s = <identifier> . get <identifiersep> user <identifiersep> name ( ) + ' , ' + <identifier> . get <identifiersep> host ( ) ; \n \t5 if ( people <identifiersep> ips . get ( s ) == null ) { \n <ect>
\t3 assert <identifiersep> not <identifiersep> null ( <string_literal> + i + <string_literal> , consumer . receive ( <number_literal> ) ) ; } \n \t2 assert <identifiersep> true ( <string_literal> , wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n <ect>
\t2 switch ( event . get <identifiersep> state ( ) ) { \n \t2 case sync <identifiersep> connected : \n \t3 break ; \n \t2 default : \n <ect>
\t2 s <identifiersep> logger . debug ( details ) ; \n \t2 try { \n \t3 ssh <identifiersep> helper . scp <identifiersep> to ( router <identifiersep> ip , <number_literal> , <string_literal> , perm <identifiersep> key , null , path , content . get <identifiersep> bytes ( ) , filename , null ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t1 long file <identifiersep> id = file . get <identifiersep> file <identifiersep> id ( ) ; \n \t1 if ( file <identifiersep> id == null ) { \n \t2 if ( ! is <identifiersep> in <identifiersep> test ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> , port ) ; \n \t2 logger . info ( <string_literal> , port ) ; \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t8 final http <identifiersep> servlet <identifiersep> request request ) { \n \t2 final message <identifiersep> context soap <identifiersep> context = decode <identifiersep> soap <identifiersep> request ( request ) ; \n \t2 final credential credential = extract <identifiersep> basic <identifiersep> authentication <identifiersep> credential ( request , response ) ; \n \t2 if ( credential == null ) { \n <ect>
\t1 logger . info ( <string_literal> ) \n \t1 logger . info ( <string_literal> ) \n \t1 logger . info ( <string_literal> ) \n \t1 logger . info ( <string_literal> ) \n <ect>
\t6 if ( num <identifiersep> updated > 0 ) \n \t7 count += stmt <identifiersep> size ; } \n \t5 remaining = remaining - num <identifiersep> <identifier> * stmt <identifiersep> size ; } } \n \t2 } catch ( sql <identifiersep> exception <identifier> ) { \n <ect>
\t6 ajax <identifiersep> response <identifiersep> appender response <identifiersep> appender = ( ajax <identifiersep> response <identifiersep> appender ) response <identifiersep> <identifier> <identifiersep> enum . next <identifiersep> element ( ) ; \n \t6 response <identifiersep> appender . append <identifiersep> to <identifiersep> response ( this , <identifier> <identifiersep> context ) ; } } \n \t4 if ( <identifier> <identifiersep> content <identifiersep> length ( ) == 0 ) { \n \t5 set <identifiersep> status ( http <identifiersep> status <identifiersep> internal <identifiersep> error ) ; \n <ect>
\t2 byte code = codes . get ( <identifier> <identifiersep> mode ) ; \n \t2 if ( code == null ) { \n \t3 logger . warn ( <string_literal> , <identifier> <identifiersep> mode ) ; \n \t2 } else if ( ( pin <identifiersep> code == null ) || ( pin <identifiersep> code . length ( ) != <number_literal> ) ) { \n <ect>
\t1 retries = 0 ; \n \t1 if ( ! connected ) { \n \t1 connected = true ; \n \t1 connected <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t3 handle <identifiersep> start ( exchange , registry , metrics <identifiersep> name ) ; \n \t2 } else if ( final <identifiersep> action == metrics <identifiersep> timer <identifiersep> action . stop ) { \n \t3 handle <identifiersep> stop ( exchange , registry , metrics <identifiersep> name ) ; \n \t2 } else { \n <ect>
\t2 scheduled <identifiersep> executor <identifiersep> service <identifier> <identifiersep> exec = null ; \n \t2 <identifier> <identifiersep> exec = executors . new <identifiersep> single <identifiersep> thread <identifiersep> scheduled <identifiersep> executor ( ) ; \n \t2 <identifier> <identifiersep> exec . schedule <identifiersep> at <identifiersep> fixed <identifiersep> rate ( timer , diff , rebalance <identifiersep> time <identifiersep> interval , \n \t4 time <identifiersep> unit . seconds ) ; \n <ect>
\t1 try { \n \t2 <identifier> = read <identifiersep> asset ( <identifier> . <identifier> , name ) \n \t1 } catch ( e : io <identifiersep> exception ) { \n \t2 val fallback <identifiersep> asset = name . replace ( <string_literal> . to <identifiersep> regex ( ) , <string_literal> ) \n <ect>
\t6 log . error ( <string_literal> , id ) ; \n \t4 } else if ( require <identifiersep> all <identifiersep> extensions <identifiersep> known ) { \n \t5 throw new <identifier> <identifiersep> wallet <identifiersep> exception ( <string_literal> + id ) ; } \n \t3 } else { \n <ect>
\t7 logger . error ( <string_literal> , e ) ; \n \t7 workspace <identifiersep> provider . clean <identifiersep> working <identifiersep> directory ( ) ; \n \t7 git = clone <identifiersep> repository ( working <identifiersep> dir ) ; } } \n \t4 } catch ( final git <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t8 answer = new answer ( cmds [ i ] , false , <string_literal> ) ; } \n \t6 } else { \n \t7 answer = new answer ( cmds [ i ] , false , <string_literal> ) ; } \n \t5 } catch ( exception e ) { \n <ect>
finalize the namenode upgrade , at which point it cannot be <identifier> . \n : param upgrade <identifiersep> type rolling or <identifier> \n : param hdfs <identifiersep> binary : name / path of the hdfs binary to use \n <string_literal> <string_literal> <ect>
\t2 if ( result ) { \n \t3 <identifier> <identifiersep> context . wait <identifiersep> for <identifiersep> task <identifiersep> progress <identifiersep> done ( mor <identifiersep> task ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t3 for ( string worker : workers ) { \n \t4 if ( remaining <identifiersep> slots . contains ( worker ) ) { \n \t5 add <identifiersep> <identifier> <identifiersep> slot ( worker ) ; \n \t4 } else { \n <ect>
\t2 log4j <identifiersep> logger . set <identifiersep> level ( level . info ) ; \n \t2 logger . error ( error <identifiersep> message <identifiersep> with <identifiersep> no <identifiersep> parameters ) ; \n \t2 logger . warn ( warning <identifiersep> message <identifiersep> with <identifiersep> no <identifiersep> parameters ) ; \n \t2 logger . info ( info <identifiersep> message <identifiersep> with <identifiersep> no <identifiersep> parameters ) ; \n <ect>
\t4 <comment> \n \t4 return get <identifiersep> index ( conn , node , false ) ; } \n \t3 int id = rs . get <identifiersep> int ( <string_literal> ) ; \n \t3 if ( rs . next ( ) ) \n <ect>
\t1 @ get \n \t1 @ path ( <string_literal> ) \n \t1 @ produces ( media <identifiersep> type . text <identifiersep> plain ) \n \t1 public response consume <identifiersep> book <identifiersep> message <identifiersep> from <identifiersep> queue ( ) { \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> ) ; } \n \t3 return false ; \n \t2 } else if ( peak <identifiersep> bandwidth != null && ! peak <identifiersep> bandwidth . equals ( <identifier> <identifiersep> policy . get <identifiersep> peak <identifiersep> bandwidth ( ) ) ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 throw new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; <comment> \n \t1 @ override \n \t1 public file to <identifiersep> file ( ) { \n <ect>
\t3 host <identifiersep> response host <identifiersep> response = <identifier> <identifiersep> response <identifiersep> generator . create <identifiersep> host <identifiersep> response ( result ) ; \n \t3 host <identifiersep> response . set <identifiersep> response <identifiersep> name ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( host <identifiersep> response ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 load <identifiersep> todo <identifiersep> list ( <string_literal> ) } } } \n \t2 todo <identifiersep> action <identifiersep> queue . start ( ) \n \t2 file <identifiersep> store <identifiersep> action <identifiersep> queue . start ( ) \n \t2 local <identifiersep> <identifier> <identifiersep> cast <identifiersep> manager . register <identifiersep> receiver ( m <identifiersep> broadcast <identifiersep> receiver , intent <identifiersep> filter ) \n <ect>
\t3 list < vm <identifiersep> template <identifiersep> host <identifiersep> vo > template <identifiersep> host <identifiersep> v <identifiersep> os = <identifier> <identifiersep> tmplt <identifiersep> host <identifiersep> dao . list <identifiersep> by <identifiersep> host <identifiersep> template ( host <identifiersep> id , template <identifiersep> id ) ; \n \t3 for ( vm <identifiersep> template <identifiersep> host <identifiersep> vo template <identifiersep> host <identifiersep> vo : template <identifiersep> host <identifiersep> v <identifiersep> os ) { \n \t4 if ( template <identifiersep> host <identifiersep> vo . get <identifiersep> download <identifiersep> state ( ) == status . download <identifiersep> in <identifiersep> progress ) { \n \t5 string error <identifiersep> msg = <string_literal> ; \n <ect>
\t6 if ( ( coord <identifiersep> job . get <identifiersep> pause <identifiersep> time ( ) == null || coord <identifiersep> job . get <identifiersep> pause <identifiersep> time ( ) . after ( d ) ) ) { \n \t7 new coord <identifiersep> <identifier> <identifiersep> x <identifiersep> command ( coord <identifiersep> job ) . call ( ) ; \n \t7 log . debug ( <string_literal> + coord <identifiersep> job . get <identifiersep> id ( ) ) ; } } } } \n \t3 catch ( exception ex ) { \n <ect>
\t2 if ( sys <identifiersep> topology == null ) { \n \t3 try { \n \t4 sys <identifiersep> topology = common . system <identifiersep> topology ( storm <identifiersep> conf , context . get <identifiersep> raw <identifiersep> topology ( ) ) ; \n \t3 } catch ( invalid <identifiersep> topology <identifiersep> exception e ) { \n <ect>
\t3 cache <identifiersep> manager <identifiersep> config . set <identifiersep> name ( get <identifiersep> cache <identifiersep> name ( ) ) ; \n \t3 cache <identifiersep> manager mgr = cache <identifiersep> manager . create ( cache <identifiersep> manager <identifiersep> config ) ; \n \t3 cache <identifiersep> manager . set <identifiersep> cache <identifiersep> manager ( mgr ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 return null ; } \n \t2 host <identifiersep> vo host = find <identifiersep> host ( user <identifiersep> vm ) ; \n \t2 if ( host != null ) { \n <ect>
\t3 config . append <identifiersep> child ( delete <identifiersep> port <identifiersep> profile <identifiersep> details ( doc , port <identifiersep> name ) ) ; \n \t3 edit <identifiersep> config . append <identifiersep> child ( config ) ; \n \t3 return serialize ( dom <identifiersep> impl , doc ) ; \n \t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n <ect>
\t4 get <identifiersep> mqtt <identifiersep> transport ( ) . send <identifiersep> to <identifiersep> mqtt ( ack . encode ( ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> + command , e ) ; } \n \t2 } else { \n <ect>
\t1 env . set <identifiersep> params ( params ) \n \t1 self . configure ( env ) \n \t1 hdfs <identifiersep> binary = self . get <identifiersep> hdfs <identifiersep> binary ( ) \n \t1 if not params . hdfs <identifiersep> tmp <identifiersep> dir or params . hdfs <identifiersep> tmp <identifiersep> dir == none or params . hdfs <identifiersep> tmp <identifiersep> dir . lower ( ) == <identifier> : \n <ect>
\t2 if ( host <identifiersep> id == null ) { \n \t3 return null ; } \n \t2 final agent <identifiersep> attache agent = find <identifiersep> attache ( host <identifiersep> id ) ; \n \t2 if ( agent == null ) { \n <ect>
\t2 try { \n \t3 if ( context != null ) { \n \t4 jndi <identifiersep> ds = context . lookup ( pool <identifiersep> properties . get <identifiersep> data <identifiersep> source <identifiersep> jndi ( ) ) ; \n \t3 } else { \n <ect>
\t6 <comment> \n \t6 int cur <identifiersep> <identifier> = c . get ( <identifier> <identifiersep> key ) ; \n \t6 assert <identifiersep> true ( locked <identifiersep> multi <identifiersep> node . compare <identifiersep> and <identifiersep> set ( false , true ) ) ; \n \t6 if ( debug ) \n <ect>
\t2 ms . open <identifiersep> transaction ( ) ; \n \t2 ms . add <identifiersep> <identifier> ( <identifier> ) ; \n \t2 success = ms . commit <identifiersep> transaction ( ) ; \n \t1 } catch ( meta <identifiersep> exception | already <identifiersep> exists <identifiersep> exception e ) { \n <ect>
\t3 out . flush ( ) ; \n \t4 log . trace ( <string_literal> + socket . get <identifiersep> port ( ) ) ; } \n \t2 } catch ( java . io . io <identifiersep> exception x ) { \n <ect>
\t5 allow <identifiersep> empty <identifiersep> stream = record . allow <identifiersep> empty <identifiersep> stream ( ) ; \n \t5 log . debug ( <string_literal> + allow <identifiersep> empty <identifiersep> stream ) ; \n \t5 <comment> \n \t5 <identifier> <identifiersep> <identifier> = record . <identifier> <identifiersep> <identifier> ( ) ; \n <ect>
\t2 break ; } \n \t2 thread . sleep ( <number_literal> ) ; } } \n \t1 <comment> \n \t1 <comment> \n <ect>
\t4 { \n \t5 local <identifiersep> host = inet <identifiersep> address . get <identifiersep> by <identifiersep> address ( src ) ; } \n \t4 catch ( unknown <identifiersep> host <identifiersep> exception uhe ) \n \t4 { \n <ect>
\t3 param . set <identifiersep> client <identifiersep> tunnel <identifiersep> url ( console <identifiersep> url ) ; \n \t3 param . set <identifiersep> client <identifiersep> tunnel <identifiersep> session ( console <identifiersep> host <identifiersep> session ) ; \n \t3 viewer = console <identifiersep> proxy . get <identifiersep> ajax <identifiersep> vnc <identifiersep> viewer ( param , ajax <identifiersep> session <identifiersep> id <identifiersep> str ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 graph . clear ( ) ; \n \t2 } catch ( exception ex ) \n \t2 { \n <ect>
\t5 if ( bridge . get <identifiersep> jms <identifiersep> message <identifiersep> <identifier> ( ) == null ) { \n \t6 bridge . set <identifiersep> jms <identifiersep> message <identifiersep> <identifier> ( get <identifiersep> outbound <identifiersep> message <identifiersep> <identifier> ( ) ) ; } \n \t5 bridge . set <identifiersep> jms <identifiersep> connector ( this ) ; \n \t5 bridge . start ( ) ; \n <ect>
\t6 link = new compact <identifiersep> object <identifiersep> property <identifiersep> link ( id1 , object <identifiersep> property <identifiersep> type . <identifier> ) ; \n \t6 add <identifiersep> link ( source , target , link ) ; \n \t6 source <identifiersep> connected <identifiersep> to <identifiersep> target = true ; } \n \t5 if ( ! target <identifiersep> connected <identifiersep> to <identifiersep> source && this . ontology <identifiersep> manager . is <identifiersep> connected <identifiersep> by <identifiersep> <identifier> <identifiersep> property ( target <identifiersep> uri , source <identifiersep> uri ) ) { \n <ect>
\t4 actual . add <identifiersep> all ( take <identifiersep> events ( channel , 1 , integer . max <identifiersep> value ) ) ; \n \t3 } else { \n \t4 actual . add <identifiersep> all ( take <identifiersep> events ( channel , <number_literal> , integer . max <identifiersep> value ) ) ; } } \n \t3 if ( actual . is <identifiersep> empty ( ) ) { \n <ect>
\t1 post <identifiersep> commit <identifiersep> processing post <identifiersep> commit = new post <identifiersep> commit <identifiersep> processing ( cluster <identifiersep> manager , this , transaction ) ; \n \t1 post <identifiersep> commit . notify <identifiersep> local <identifiersep> cache ( ) ; \n \t1 background <identifiersep> executor . execute ( post <identifiersep> commit . background <identifiersep> notify ( ) ) ; \n \t1 } catch ( exception ex ) { \n <ect>
<comment> \n \t2 private void process <identifiersep> message ( grid <identifiersep> tcp <identifiersep> discovery <identifiersep> abstract <identifiersep> message msg ) { \n <ect>
\t4 . set <identifiersep> wait <identifiersep> for <identifiersep> active <identifiersep> shards ( active <identifiersep> shard <identifiersep> count . all ) \n \t4 . execute ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> busy ( ( ) - > assert <identifiersep> true ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . get ( ) . get <identifiersep> state ( ) . meta <identifiersep> data ( ) . has <identifiersep> index ( index <identifiersep> name ) ) ) ; \n <ect>
\t2 monitor . inc <identifiersep> counter ( counter . <identifier> <identifiersep> idle <identifiersep> connections ) ; } } \n \t1 if ( cassandra <identifiersep> client != null ) { \n \t2 if ( cassandra <identifiersep> client . get <identifiersep> cassandra <identifiersep> host ( ) . get <identifiersep> max <identifiersep> connect <identifiersep> time <identifiersep> millis ( ) > 0 \n \t3 && system . current <identifiersep> time <identifiersep> millis ( ) - cassandra <identifiersep> client . get <identifiersep> created <identifiersep> time ( ) > cassandra <identifiersep> client . get <identifiersep> cassandra <identifiersep> host ( ) . get <identifiersep> max <identifiersep> connect <identifiersep> time <identifiersep> millis ( ) ) { \n <ect>
\t1 public void test <identifiersep> rpc <identifiersep> exception ( ) { \n \t2 logger logger = <identifier> <identifiersep> mock . create <identifiersep> mock ( logger . class ) ; \n \t2 rpc <identifiersep> context . get <identifiersep> context ( ) . set <identifiersep> remote <identifiersep> address ( <string_literal> , <number_literal> ) ; \n \t2 rpc <identifiersep> exception exception = new rpc <identifiersep> exception ( <string_literal> ) ; \n <ect>
\t3 file <identifiersep> input <identifiersep> format . add <identifiersep> input <identifiersep> path ( job , input ) ; \n \t3 file <identifiersep> output <identifiersep> format . set <identifiersep> output <identifiersep> path ( job , output ) ; \n \t3 job . wait <identifiersep> for <identifiersep> completion ( true ) ; } \n \t2 catch ( io <identifiersep> exception e ) { \n <ect>
\t1 if ( prev . compare <identifiersep> to ( <identifier> ) >= 0 ) { \n \t1 log . warn ( <string_literal> + prev + <string_literal> + <identifier> ) ; \n \t1 return prev ; } \n \t1 if ( current . compare <identifiersep> to ( <identifier> ) < = 0 ) { \n <ect>
\t3 this . second <identifiersep> field = triple <identifiersep> class . get <identifiersep> field ( <string_literal> ) ; \n \t3 this . third <identifiersep> field = triple <identifiersep> class . get <identifiersep> field ( <string_literal> ) ; \n \t3 this . available = true ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 <identifier> <identifiersep> executor . execute ( new worker <identifiersep> task ( <identifier> <identifiersep> http <identifiersep> service , conn , <identifier> <identifiersep> worker <identifiersep> count ++ ) ) ; \n \t4 } catch ( interrupted <identifiersep> io <identifiersep> exception ex ) { \n \t5 break ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t8 a <identifiersep> class . get <identifiersep> declared <identifiersep> methods ( ) ; \n \t8 return a <identifiersep> class ; } \n \t7 catch ( unsatisfied <identifiersep> link <identifiersep> error | no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error | exception e ) \n \t7 { \n <ect>
\t5 client . modify <identifiersep> network <identifiersep> interface <identifiersep> delete <identifiersep> on <identifiersep> terminate ( attached <identifiersep> <identifier> . get <identifiersep> network <identifiersep> interface <identifiersep> id ( ) , \n \t7 attached <identifiersep> <identifier> . get <identifiersep> attachment ( ) . get <identifiersep> attachment <identifiersep> id ( ) , \n \t7 true ) ; \n \t4 } catch ( final exception ex ) { \n <ect>
\t4 if ( player . get <identifiersep> deck ( ) != null ) { \n \t5 player . set <identifiersep> <identifier> ( ) ; \n \t5 player . get <identifiersep> player ( ) . <identifier> ( this , player . get <identifiersep> deck ( ) ) ; \n \t4 } else { \n <ect>
\t2 return result ; } \n \t1 @ override \n \t1 public boolean trigger <identifiersep> ability ( triggered <identifiersep> ability triggered <identifiersep> ability , game game ) { \n \t2 if ( triggered <identifiersep> ability == null ) { \n <ect>
\t1 @ nullable private grid <identifiersep> uuid file <identifiersep> id ( grid <identifiersep> uuid parent <identifiersep> id , string file <identifiersep> name , boolean skip <identifiersep> tx ) throws grid <identifiersep> exception { \n \t2 grid <identifiersep> ggfs <identifiersep> listing <identifiersep> entry entry = directory <identifiersep> listing ( parent <identifiersep> id , skip <identifiersep> tx ) . get ( file <identifiersep> name ) ; \n \t2 if ( entry == null ) { \n <ect>
\t3 string [ ] job <identifiersep> args = overwrite <identifiersep> job <identifiersep> conf ( conf , context . get <identifiersep> config ( ) , get <identifiersep> map <identifiersep> reduce <identifiersep> params ( ) . trim ( ) . split ( <string_literal> ) ) ; \n \t3 final map < string , string > extra = mgr . get <identifiersep> output ( get <identifiersep> id ( ) ) . get <identifiersep> extra ( ) ; \n \t3 if ( extra . contains <identifiersep> key ( executable <identifiersep> constants . mr <identifiersep> job <identifiersep> id ) ) { \n \t4 job = new cluster ( conf ) . get <identifiersep> job ( job <identifiersep> id . for <identifiersep> name ( extra . get ( executable <identifiersep> constants . mr <identifiersep> job <identifiersep> id ) ) ) ; \n <ect>
\t3 string [ ] task <identifiersep> classes = init <identifiersep> tasks . split ( <string_literal> ) ; \n \t3 for ( string task <identifiersep> class : task <identifiersep> classes ) { \n \t4 try { \n \t5 initial <identifiersep> task task = ( initial <identifiersep> task ) class . for <identifiersep> name ( task <identifiersep> class ) . new <identifiersep> instance ( ) ; \n <ect>
\t7 if ( ! start <identifiersep> signal [ task <identifiersep> num ] . await ( wait <identifiersep> time , time <identifiersep> unit . milliseconds ) ) \n \t8 fail ( ) ; \n \t7 if ( arg == 1 ) { \n <ect>
\t2 offset = this . out . get <identifiersep> pos ( ) ; } \n \t1 @ override \n \t1 protected void sync <identifiersep> tuples ( ) throws io <identifiersep> exception { \n \t2 avro <identifiersep> writer . flush ( ) ; \n <ect>
\t6 + <string_literal> + container <identifiersep> id + <string_literal> \n \t6 + instance <identifiersep> name + <string_literal> ) ; \n \t3 } catch ( exception <identifier> ) { \n \t4 log . error ( <identifier> ) ; \n <ect>
\t5 remote <identifiersep> controller . send ( device <identifiersep> cmd ) ; \n \t4 } else { \n \t5 logger . warn ( <string_literal> , command ) ; } \n \t3 } else { \n <ect>
\t3 update <identifiersep> and <identifiersep> flush <identifiersep> result result = new update <identifiersep> and <identifiersep> flush <identifiersep> result ( ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t1 } else { \n \t2 <comment> \n \t2 return false ; } \n \t1 if ( fixed > fixed <identifiersep> file <identifiersep> counter ) { \n <ect>
\t4 thread . sleep ( <number_literal> ) ; \n \t4 } catch ( interrupted <identifiersep> exception ie ) { } \n \t3 } catch ( throwable t ) { \n \t4 add <identifiersep> form <identifiersep> error ( <string_literal> + ca . class <identifiersep> name + <string_literal> + t ) ; \n <ect>
else : \n \t1 logger . debug ( <string_literal> . format ( dir <identifiersep> <identifier> , str ( last <identifiersep> mount <identifiersep> point <identifiersep> for <identifiersep> dir ) ) ) \n \t1 if last <identifiersep> mount <identifiersep> point <identifiersep> for <identifiersep> dir == curr <identifiersep> mount <identifiersep> point : \n \t1 if is <identifiersep> non <identifiersep> root <identifiersep> dir or manage <identifiersep> dirs <identifiersep> on <identifiersep> root : \n <ect>
\t2 @ override \n \t2 public object invoke ( object proxy , method method , object [ ] args ) throws throwable { \n \t3 logger . info ( <string_literal> ) ; \n \t3 logger . info ( <string_literal> + method . get <identifiersep> name ( ) ) ; \n <ect>
\t7 . substring ( 0 , index <identifiersep> of ) ; \n \t5 <comment> \n \t5 <comment> \n \t5 final string <identifier> = <string_literal> ; \n <ect>
\t3 return false ; } \n \t2 long free <identifiersep> space = host . get <identifiersep> avail <identifiersep> disk <identifiersep> bytes ( ) ; \n \t2 boolean full = free <identifiersep> space < = config . get <identifiersep> min <identifiersep> free <identifiersep> disk <identifiersep> space <identifiersep> to <identifiersep> run <identifiersep> jobs ( ) ; \n \t2 if ( full ) { \n <ect>
\t4 if ( node . get <identifiersep> database <identifiersep> key ( ) != null ) { \n \t5 try { \n \t6 finish <identifiersep> init <identifiersep> storage ( ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t4 <comment> \n \t4 action <identifiersep> context . set <identifiersep> predicate ( predicate ) ; \n \t4 return ( t ) <identifier> . evaluate ( action <identifiersep> context , obj , <string_literal> . concat ( read <identifiersep> function ) . concat ( <string_literal> ) , <string_literal> + json <identifiersep> name + <string_literal> ) ; \n \t3 } else { \n <ect>
\t4 try { \n \t5 listener . accept ( shard <identifiersep> failure ) ; \n \t4 } catch ( exception inner ) { \n \t5 inner . add <identifiersep> suppressed ( failure ) ; \n <ect>
\t1 @ override \n \t1 public void run ( ) { \n \t2 file out <identifiersep> dir <identifiersep> file = new file ( out <identifiersep> dir ) ; \n \t2 if ( ! out <identifiersep> dir <identifiersep> file . exists ( ) ) { \n <ect>
\t4 add <identifiersep> recipient ( next . get <identifiersep> key ( ) , next . get <identifiersep> value ( ) , new <identifiersep> <identifier> ) ; } \n \t3 else { \n \t4 add <identifiersep> recipient ( next . get <identifiersep> key ( ) , ( message <identifiersep> selector ) null , new <identifiersep> <identifier> ) ; } } \n <ect>
\t2 <comment> \n \t2 this . task <identifiersep> ids = assignment . get <identifiersep> current <identifiersep> worker <identifiersep> tasks ( this . supervisor <identifiersep> id , port ) ; \n \t2 if ( task <identifiersep> ids . size ( ) == 0 ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t3 log . debug ( <string_literal> ) ; \n \t3 module <identifiersep> factory . load <identifiersep> modules ( ) ; \n \t2 } else { \n \t3 <comment> \n <ect>
\t1 try { \n \t2 string t = text . decode ( s . get <identifiersep> bytes ( ) , 0 , s . get <identifiersep> bytes ( ) . length ) ; \n \t2 return t . get <identifiersep> bytes ( ) ; \n \t1 } catch ( character <identifiersep> <identifier> <identifiersep> exception e ) { \n <ect>
\t1 while ( root <identifiersep> node != null && root <identifiersep> node . get <identifiersep> type ( ) != hive <identifiersep> parser . tok <identifiersep> insert ) { \n \t2 root <identifiersep> node = root <identifiersep> node . parent ; } \n \t1 if ( root <identifiersep> node == null || root <identifiersep> node . parent == null ) { \n \t2 <comment> \n <ect>
\t3 } else { \n \t4 return new ovs <identifiersep> create <identifiersep> tunnel <identifiersep> answer ( command , false , result , bridge ) ; } \n \t2 } catch ( final exception e ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n <ect>
from <identifier> import <identifier> \n from resource <identifiersep> management . <identifier> . functions . default import default \n class <identifier> <identifiersep> client ( script ) : \n def pre <identifiersep> upgrade <identifiersep> restart ( self , env , upgrade <identifiersep> type = none ) : \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 @ override \n \t1 public void delete <identifiersep> test <identifiersep> topic ( string topic ) { \n \t2 zk <identifiersep> utils zk <identifiersep> utils = get <identifiersep> zk <identifiersep> utils ( ) ; \n \t2 try { \n <ect>
\t2 } else if ( status . is <identifiersep> <identifier> <identifiersep> read <identifiersep> concern <identifiersep> supported ( ) && ! mongo <identifiersep> connection . has <identifiersep> <identifier> <identifiersep> read <identifiersep> concern ( db ) ) { \n \t3 read <identifiersep> concern <identifiersep> level current <identifiersep> level = read <identifiersep> concern <identifiersep> level ( db . get <identifiersep> read <identifiersep> concern ( ) ) ; \n \t3 read <identifiersep> concern <identifiersep> level <identifier> <identifiersep> level = read <identifiersep> concern <identifiersep> level ( mongo <identifiersep> connection . get <identifiersep> default <identifiersep> read <identifiersep> concern ( db ) ) ; \n \t3 if ( current <identifiersep> level == null ) { \n <ect>
\t2 download <identifiersep> time = new date ( ) . get <identifiersep> time ( ) - start . get <identifiersep> time ( ) ; \n \t2 if ( status == status . download <identifiersep> finished ) { \n \t3 logger . info ( <string_literal> + download <identifiersep> url + <string_literal> + <identifier> . get <identifiersep> bucket <identifiersep> name ( ) + <string_literal> + total <identifiersep> bytes + <string_literal> + ( download <identifiersep> time / <number_literal> ) + <string_literal> ) ; \n \t2 } else { \n <ect>
\t5 resource . set <identifiersep> broadcaster ( b ) ; \n \t5 b . set <identifiersep> scope ( scope . request ) ; \n \t5 if ( resource . get <identifiersep> atmosphere <identifiersep> resource <identifiersep> event ( ) . is <identifiersep> suspended ( ) ) { \n \t6 b . add <identifiersep> atmosphere <identifiersep> resource ( resource ) ; } \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> data <identifiersep> only <identifiersep> node ( settings . empty ) ; \n \t2 assert <identifiersep> busy ( ( ) - > assert <identifiersep> true ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . get ( ) . get <identifiersep> state ( ) . get <identifiersep> routing <identifiersep> table ( ) . index ( <string_literal> ) . all <identifiersep> primary <identifiersep> shards <identifiersep> unassigned ( ) ) ) ; } \n \t1 public void test <identifiersep> not <identifiersep> wait <identifiersep> for <identifiersep> quorum <identifiersep> <identifier> ( ) throws exception { \n <ect>
\t3 } else { \n \t4 if ( ! <identifier> . await ( timeout , unit ) ) \n \t5 return null ; } \n \t3 if ( pending <identifiersep> ex != null ) { \n <ect>
\t2 try ( final euca <identifiersep> s3client <identifier> = get <identifiersep> s3client ( account ) ) { \n \t3 <identifier> . get <identifiersep> bucket <identifiersep> acl ( bucket <identifiersep> name ) ; \n \t3 return true ; \n \t2 } catch ( final auth <identifiersep> exception e ) { \n <ect>
\t6 logger . info ( <string_literal> , result . get <identifiersep> canonical <identifiersep> path ( ) ) ; } } \n \t3 } else { \n \t4 logger . warn ( <string_literal> , file <identifiersep> path . get <identifiersep> canonical <identifiersep> path ( ) ) ; } \n \t2 } catch ( final exception e ) { \n <ect>
\t3 if ( ! <identifier> <identifiersep> ip <identifiersep> addr <identifiersep> mgr . <identifier> <identifiersep> public <identifiersep> ip <identifiersep> address ( lb . get <identifiersep> source <identifiersep> ip <identifiersep> address <identifiersep> id ( ) , call <identifiersep> context . current ( ) . get <identifiersep> calling <identifiersep> user <identifiersep> id ( ) , call <identifiersep> context . current ( ) . get <identifiersep> calling <identifiersep> account ( ) ) ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + lb . get <identifiersep> source <identifiersep> ip <identifiersep> address <identifiersep> id ( ) + <string_literal> ) ; \n \t4 success = false ; \n \t3 } else { \n <ect>
\t6 <string_literal> : <string_literal> ; \n \t4 log . info ( <string_literal> + \n \t6 <string_literal> , provider , usage ) ; \n \t3 } else { \n <ect>
\t1 @ override \n \t1 protected void open ( ) { \n \t2 super . open ( ) ; \n \t2 check <identifiersep> state ( <identifier> == null , <string_literal> ) ; \n <ect>
\t5 if ( value != null ) { \n \t6 authentication <identifiersep> attributes . put ( attr <identifiersep> name , value ) ; \n \t6 logger . debug ( <string_literal> , attr <identifiersep> name , value ) ; \n \t5 } else { \n <ect>
\t2 try { \n \t3 json <identifiersep> data <identifiersep> field . set <identifiersep> text ( response == null ? <string_literal> : render <identifiersep> as <identifiersep> json . pretty <identifiersep> json ( response , tab <identifiersep> separator ) ) ; <comment> \n \t3 json <identifiersep> data <identifiersep> field . set <identifiersep> <identifier> <identifiersep> position ( 0 ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 } else { \n \t3 view <identifiersep> log4j <identifiersep> config . put ( prop , ambari <identifiersep> log4j <identifiersep> config . get <identifiersep> property ( prop ) ) ; } } } \n \t2 property <identifiersep> configurator . configure ( view <identifiersep> log4j <identifiersep> config ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 vm <identifiersep> snapshot <identifiersep> vo vm <identifiersep> snapshot <identifiersep> vo = ( vm <identifiersep> snapshot <identifiersep> vo ) vm <identifiersep> snapshot ; \n \t2 try { \n \t3 vm <identifiersep> snapshot <identifiersep> helper . vm <identifiersep> snapshot <identifiersep> state <identifiersep> transit <identifiersep> to ( vm <identifiersep> snapshot , vm <identifiersep> snapshot . event . expunge <identifiersep> requested ) ; \n \t2 } catch ( no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t2 if ( ! is <identifiersep> properly <identifiersep> configured ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return collections . empty <identifiersep> list ( ) ; } \n \t2 if ( ! maybe <identifiersep> connect <identifiersep> and <identifiersep> check <identifiersep> connection ( ) ) { \n <ect>
\t3 start <identifiersep> node ( <string_literal> ) ; \n \t3 find <identifiersep> node <identifiersep> addresses ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t1 try { \n \t1 database <identifiersep> meta <identifiersep> data meta <identifiersep> data = connection <identifiersep> delegate . get <identifiersep> database <identifiersep> metadata ( connection ) ; \n \t1 sender ( ) . tell ( new result <identifiersep> information ( - 1 , meta <identifiersep> data ) , self ( ) ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 plan = new data <identifiersep> center <identifiersep> deployment ( dc <identifiersep> id , dest . get <identifiersep> pod ( ) . get <identifiersep> id ( ) , null , null , null , null ) ; \n \t3 if ( elb <identifiersep> vm == null ) { \n \t4 long id = <identifier> <identifiersep> router <identifiersep> dao . get <identifiersep> next <identifiersep> in <identifiersep> sequence ( long . class , <string_literal> ) ; \n <ect>
\t3 log . debug ( <string_literal> , configuration . get <identifiersep> address ( ) ) ; } \n \t2 return answer ; } \n \t1 protected void stop <identifiersep> server <identifiersep> bootstrap ( ) { \n \t2 <comment> \n <ect>
\t1 <identifier> <identifiersep> <identifier> ( ) ; \n \t1 try { \n \t1 wal <identifiersep> marker . init <identifiersep> wal <identifiersep> marker ( get <identifiersep> tablet <identifiersep> session ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 log . debug ( <string_literal> + event ) ; } \n \t4 public void work <identifiersep> rejected ( work <identifiersep> event event ) { \n \t5 log . debug ( <string_literal> + event ) ; } \n \t4 public void work <identifiersep> started ( work <identifiersep> event event ) { \n <ect>
\t3 final network <identifiersep> topology network <identifiersep> topology = network <identifiersep> topology <identifiersep> context . retrieve <identifiersep> network <identifiersep> topology ( dc <identifiersep> vo ) ; \n \t3 try { \n \t4 network <identifiersep> topology . setup <identifiersep> dhcp <identifiersep> for <identifiersep> <identifier> ( true , router , router . get <identifiersep> host <identifiersep> id ( ) , nic ) ; \n \t3 } catch ( final resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t2 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 for ( int i = 0 ; i < test <identifiersep> count ; i ++ ) { \n \t3 template . send <identifiersep> body ( <string_literal> , xml ) ; } \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( <number_literal> , time <identifiersep> unit . seconds ) ; \n <ect>
\t1 } else if ( q <identifiersep> name . equals ( <string_literal> ) ) { \n \t2 try { \n \t3 region = current <identifiersep> text . to <identifiersep> string ( ) . trim ( ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t3 job <identifiersep> data . put ( quartz <identifiersep> constants . quartz <identifiersep> trigger <identifiersep> cron <identifiersep> expression , get <identifiersep> cron ( ) ) ; \n \t3 job <identifiersep> data . put ( quartz <identifiersep> constants . quartz <identifiersep> trigger <identifiersep> cron <identifiersep> timezone , get <identifiersep> time <identifiersep> zone ( ) . get <identifiersep> id ( ) ) ; \n \t3 <comment> \n \t3 quartz <identifiersep> helper . update <identifiersep> job <identifiersep> data <identifiersep> map ( get <identifiersep> camel <identifiersep> context ( ) , job , null ) ; \n <ect>
\t2 } else { \n \t3 t result = internal <identifiersep> update ( collection , update , old <identifiersep> doc , check <identifiersep> conditions , retries ) ; \n \t3 if ( allow <identifiersep> create && result == null ) { \n \t4 <comment> \n <ect>
\t1 log . info ( <string_literal> , <identifier> ) ; \n \t1 client client = thrift <identifiersep> util . get <identifiersep> t <identifiersep> server <identifiersep> client ( <identifier> , context ) ; \n \t1 list < string > active <identifiersep> <identifier> <identifiersep> for <identifiersep> <identifier> = client . get <identifiersep> active <identifiersep> logs ( <identifier> . trace <identifiersep> info ( ) , \n \t2 context . rpc <identifiersep> creds ( ) ) ; \n <ect>
\t3 log . debug ( <string_literal> , parent <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 if ( ! parent <identifiersep> file . mkdirs ( ) ) { \n \t4 throw new j <identifiersep> meter <identifiersep> stop <identifiersep> test <identifiersep> now <identifiersep> exception ( <string_literal> + parent <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n \t2 } else { \n <ect>
\t3 final unmarshaller <identifiersep> factory unmarshaller <identifiersep> factory = config <identifiersep> bean . get <identifiersep> unmarshaller <identifiersep> factory ( ) ; \n \t3 final unmarshaller unmarshaller = unmarshaller <identifiersep> factory . get <identifiersep> unmarshaller ( metadata <identifiersep> root ) ; \n \t3 if ( unmarshaller == null ) { \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t2 existing <identifiersep> vol . set <identifiersep> iqn ( iqn ) ; \n \t2 entities . merge ( existing <identifiersep> vol ) ; \n \t2 <identifier> . commit ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t2 if ( <identifier> == null ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + job <identifiersep> id + <string_literal> + status + <string_literal> ) ; \n \t3 return ; } \n \t2 template <identifiersep> uploader <identifier> = <identifier> . get <identifiersep> template <identifiersep> uploader ( ) ; \n <ect>
\t5 if ( template <identifiersep> storage <identifiersep> pool <identifiersep> ref == null ) { \n \t6 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> ) ; \n \t5 } else { \n <ect>
\t2 if ( string <identifiersep> utils . equals <identifiersep> ignore <identifiersep> case ( fk <identifiersep> name , rs . get <identifiersep> string ( <string_literal> ) ) ) { \n \t3 return rs . get <identifiersep> string ( <string_literal> ) ; } } \n \t1 } finally { \n \t2 rs . close ( ) ; } } \n <ect>
\t3 if ( sample != null ) { \n \t4 if ( cause != null ) { \n \t5 log . info ( <string_literal> + sample <identifiersep> id , cause ) ; \n \t4 } else { \n <ect>
\t2 rs = stmt . execute <identifiersep> query ( ) ; \n \t2 while ( rs . next ( ) ) { \n \t3 append <identifiersep> metric <identifiersep> from <identifiersep> result <identifiersep> set ( metrics , condition , metric <identifiersep> functions , rs ) ; } \n \t2 } else { \n <ect>
<number_literal> refresh <identifiersep> seconds , \n <number_literal> refresh <identifiersep> seconds ) ; \n \t3 searcher <identifiersep> <identifier> . start ( ) ; <comment> \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 log . info ( <string_literal> + volume <identifiersep> info . get <identifiersep> volume <identifiersep> id ( ) ) ; \n \t1 try { \n \t1 block <identifiersep> manager . clean <identifiersep> volume ( volume <identifiersep> id ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 collections . sort ( disabled <identifiersep> result , comparator ) ; \n \t4 assert . assert <identifiersep> that ( <string_literal> + join <identifiersep> hint , disabled <identifiersep> result , is ( enabled <identifiersep> result ) ) ; } \n \t3 <comment> \n \t3 if ( join <identifiersep> hint != join <identifiersep> hint . broadcast <identifiersep> hash <identifiersep> second ) { \n <ect>
\t4 log . info ( <string_literal> + exchange . get <identifiersep> in ( ) . get <identifiersep> headers ( ) ) ; } \n \t2 } ) ; \n \t2 registry . bind ( <string_literal> , new processor ( ) { \n \t3 public void process ( exchange exchange ) throws exception { \n <ect>
\t1 } else { \n \t2 this . disabled <identifiersep> <identifier> . add ( b ) ; } } \n \t1 private void print <identifiersep> <identifier> ( ) { \n \t1 if ( ! this . <identifier> . is <identifiersep> empty ( ) ) { \n <ect>
\t3 try { \n \t4 if ( to <identifiersep> delete . exists ( ) && to <identifiersep> delete . is <identifiersep> file ( ) ) { \n \t5 to <identifiersep> delete . delete ( ) ; } \n \t3 } catch ( throwable t ) { \n <ect>
\t3 } else { \n \t4 log . trace ( <string_literal> , parent <identifiersep> id , child <identifiersep> name , node ) ; \n \t4 return node ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 public void set <identifiersep> selected <identifiersep> packages ( ns <identifiersep> array value ) { \n \t2 selected <identifiersep> packages = value ; \n \t2 selected <identifiersep> classes = null ; \n \t2 selected <identifiersep> class = null ; \n <ect>
\t2 val new <identifiersep> name = uploaded . path <identifiersep> display \n \t2 if ( new <identifiersep> name != path ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t1 public void test <identifiersep> rebalancing <identifiersep> not <identifiersep> allowed ( ) throws exception { \n \t2 logger . info ( <string_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> node ( ) ; \n \t2 ensure <identifiersep> stable <identifiersep> cluster ( 1 ) ; \n <ect>
\t2 page <identifiersep> file page <identifiersep> file = kaha <identifiersep> db <identifiersep> persistence <identifiersep> adapter . get <identifiersep> store ( ) . get <identifiersep> page <identifiersep> file ( ) ; \n \t2 log . info ( <string_literal> + page <identifiersep> file . get <identifiersep> page <identifiersep> count ( ) + <string_literal> + page <identifiersep> file . get <identifiersep> free <identifiersep> page <identifiersep> count ( ) + <string_literal> + page <identifiersep> file . get <identifiersep> file ( ) . length ( ) ) ; \n \t2 long last <identifiersep> diff = 0 ; \n \t2 for ( int <identifier> = 0 ; <identifier> < <number_literal> ; <identifier> ++ ) { \n <ect>
\t7 description = result ; \n \t7 opened . set ( true ) ; \n \t7 send <identifiersep> compressor = find <identifiersep> send <identifiersep> compressor ( description ) ; \n <ect>
\t3 { \n \t4 load <identifiersep> index ( ) ; } \n \t3 else \n \t3 { \n <ect>
\t2 <identifier> <identifiersep> <identifier> <identifiersep> transaction tx = <identifier> . get ( ) ; \n \t2 if ( tx != null && tx . is <identifiersep> open ( ) ) throw transaction . exceptions . transaction <identifiersep> already <identifiersep> open ( ) ; \n \t2 tx = ( <identifier> <identifiersep> <identifier> <identifiersep> transaction ) new <identifiersep> thread <identifiersep> bound <identifiersep> transaction ( ) ; \n \t2 <identifier> . set ( tx ) ; \n <ect>
\t4 ps . <identifier> <identifiersep> message ( true ) ; \n \t4 break ; \n \t3 case message . <identifier> : \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 to . set <identifiersep> cpu <identifiersep> quota <identifiersep> percentage ( percent . double <identifiersep> value ( ) ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + host . get <identifiersep> uuid ( ) + <string_literal> + host <identifiersep> max <identifiersep> speed + <string_literal> + vm . get <identifiersep> uuid ( ) + \n \t6 <string_literal> + max <identifiersep> speed + <string_literal> + percent . double <identifiersep> value ( ) ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 logger . warn ( <string_literal> , key ) ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( key . get <identifiersep> key <identifiersep> id ( ) ) ) { \n \t3 logger . warn ( <string_literal> , key ) ; } \n \t2 if ( key . get <identifiersep> public <identifiersep> key ( ) == null ) { \n <ect>
\t8 . parse ( props [ i ] + <string_literal> ) . get <identifiersep> time ( ) ; \n \t6 start <identifiersep> time = new date ( time ) ; } \n \t5 catch ( parse <identifiersep> exception e ) \n \t5 { \n <ect>
\t9 <identifier> <identifiersep> log . warn ( ui . to <identifiersep> string ( ) + ' ' + old <identifiersep> <identifier> + <string_literal> + uri + <string_literal> + method ) ; \n \t8 old <identifiersep> sources . add ( uri ) ; } } \n \t5 } else { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 throw new unsupported <identifiersep> operation <identifiersep> exception ( \n \t4 <string_literal> ) ; } \n \t1 @ deprecated \n \t1 public string read ( input <identifiersep> stream is ) throws read <identifiersep> exception { \n <ect>
\t4 if ( pair == null ) \n \t4 { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t2 try { \n \t3 connection . start ( ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( jms <identifiersep> exception ex ) { \n <ect>
\t2 event . set <identifiersep> marker ( ignore <identifiersep> marker ) ; \n \t2 assert <identifiersep> true ( evaluator . evaluate ( event ) ) ; \n \t2 logger . debug ( <string_literal> , new exception ( <string_literal> ) ) ; \n \t2 logger . debug ( ignore <identifiersep> marker , <string_literal> , new exception ( <string_literal> ) ) ; \n <ect>
\t5 e . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t4 if ( is <identifiersep> game <identifiersep> over ( ) ) { \n \t5 return ; } \n \t4 if ( control <identifiersep> count > <number_literal> ) { \n <ect>
\t2 for ( z <identifiersep> wave <identifiersep> command <identifiersep> class zwave <identifiersep> command <identifiersep> class : node . get <identifiersep> command <identifiersep> classes ( ) ) { \n \t3 logger . trace ( <string_literal> , node . get <identifiersep> node <identifiersep> id ( ) , \n \t5 zwave <identifiersep> command <identifiersep> class . get <identifiersep> command <identifiersep> class ( ) . get <identifiersep> label ( ) ) ; \n \t3 if ( zwave <identifiersep> command <identifiersep> class instanceof z <identifiersep> wave <identifiersep> command <identifiersep> class <identifiersep> dynamic <identifiersep> state ) { \n <ect>
\t3 } else { \n \t4 logger . warn ( <string_literal> ) ; \n \t4 success <identifiersep> full <identifiersep> authentication = false ; } \n \t2 } catch ( final abstract <identifiersep> ticket <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public void status <identifiersep> update <identifiersep> received ( event <identifiersep> object event , ws <identifiersep> controller <identifiersep> state state ) { \n \t2 logger . trace ( <string_literal> , state . get <identifiersep> state ( ) ) ; \n \t2 if ( controller <identifiersep> state . get <identifiersep> state ( ) . equals ( state . get <identifiersep> state ( ) ) == false ) { \n <ect>
\t6 <comment> \n \t5 } else if ( item <identifiersep> type . is <identifiersep> assignable <identifiersep> from ( string <identifiersep> item . class ) ) { \n \t6 state = new string <identifiersep> type ( bd <identifiersep> val . to <identifiersep> string ( ) ) ; \n \t5 } else { \n <ect>
\t3 } catch ( socket <identifiersep> timeout <identifiersep> exception se ) { \n \t4 <comment> \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 if ( started . get ( ) ) { \n <ect>
\t1 public ejb <identifiersep> book read <identifiersep> from ( class < ejb <identifiersep> book > type , type generic <identifiersep> type , \n \t6 annotation [ ] annotations , media <identifiersep> type media <identifiersep> type , \n \t6 multivalued <identifiersep> map < string , string > http <identifiersep> headers , input <identifiersep> stream entity <identifiersep> stream ) \n \t3 throws io <identifiersep> exception , web <identifiersep> application <identifiersep> exception { \n <ect>
\t2 return f . view ( f . view <identifiersep> read <identifiersep> only ( mappings . key <identifiersep> set ( ) , u . <identifier> ( cctx . kernal <identifiersep> context ( ) ) ) , f . not <identifiersep> null ( ) ) ; } \n \t1 <comment> \n \t1 @ override public boolean on <identifiersep> node <identifiersep> left ( uuid node <identifiersep> id ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t3 reader . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 protected void handle <identifiersep> create <identifiersep> lease <identifiersep> set ( create <identifiersep> lease <identifiersep> set <identifiersep> message message ) { \n \t2 if ( ( message . get <identifiersep> lease <identifiersep> set ( ) == null ) || ( message . get <identifiersep> private <identifiersep> key ( ) == null ) || ( message . get <identifiersep> signing <identifiersep> private <identifiersep> key ( ) == null ) ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t7 string err = <string_literal> + uid + <string_literal> + file <identifiersep> offer . this ; \n \t7 logger . error ( this , err ) ; \n \t7 system . err . println ( err ) ; } \n \t5 } catch ( throwable t ) { \n <ect>
\t2 session sess ; \n \t2 destination <identifier> <identifiersep> dest ; \n \t2 int num <identifiersep> msg ; \n \t2 num <identifiersep> msg = <number_literal> ; \n <ect>
\t5 session <identifiersep> handler handler = session <identifiersep> cache . get <identifiersep> session <identifiersep> handler ( ) ; \n \t5 handler . clear <identifiersep> event <identifiersep> listeners ( ) ; \n \t5 handler . remove <identifiersep> session ( session <identifiersep> id , true ) ; } \n \t3 } catch ( final exception ex ) { \n <ect>
\t1 @ <identifier> <identifiersep> throws \n \t1 public static saml <identifiersep> registered <identifiersep> service new <identifiersep> saml <identifiersep> service <identifiersep> provider <identifiersep> service ( final abstract <identifiersep> saml <identifiersep> sp <identifiersep> properties sp , \n <number_literal> final saml <identifiersep> registered <identifiersep> service <identifiersep> caching <identifiersep> metadata <identifiersep> resolver resolver ) { \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( sp . get <identifiersep> metadata ( ) ) ) { \n <ect>
\t3 public void configure ( ) throws exception { \n \t4 from ( <string_literal> ) . id ( <string_literal> ) \n \t6 . process ( new processor ( ) { \n \t7 public void process ( final exchange exchange ) { \n <ect>
\t2 if ( this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms != null && ! this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms . is <identifiersep> empty ( ) ) { \n \t3 config . set <identifiersep> whitelisted <identifiersep> algorithms ( this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms ) ; \n \t3 config . set <identifiersep> blacklist <identifiersep> merge ( true ) ; } \n \t2 logger . debug ( <string_literal> , config . get <identifiersep> blacklisted <identifiersep> algorithms ( ) ) ; \n <ect>
\t7 . get <identifiersep> text <identifiersep> content ( ) ; \n \t5 <identifier> <identifiersep> input <identifiersep> file . get ( test <identifiersep> case <identifiersep> name ) . add ( input <identifiersep> file <identifiersep> name ) ; } } } \n \t2 <comment> \n \t2 if ( is <identifiersep> sanity == true && <identifier> <identifiersep> component <identifiersep> map . size ( ) == 0 ) { \n <ect>
\t1 if ( ! options . explicit <identifiersep> output <identifiersep> <identifier> ( ) ) { \n \t2 <comment> \n \t2 <comment> \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t3 executor . schedule <identifiersep> with <identifiersep> fixed <identifiersep> delay ( client , 0 , invocation <identifiersep> wait , time <identifiersep> unit . milliseconds ) ; \n \t3 <comment> \n \t3 thread . sleep ( failure <identifiersep> free <identifiersep> time ) ; \n \t3 client . assert <identifiersep> no <identifiersep> exceptions ( <string_literal> ) ; \n <ect>
\t7 <comment> \n \t7 <comment> \n \t7 <identifier> <identifiersep> socket . send ( <identifier> ) ; \n \t7 <comment> \n <ect>
\t7 new <identifiersep> node . set <identifiersep> owner <identifiersep> document ( page ) ; \n \t6 } else if ( page != null ) { \n \t7 new <identifiersep> node . set <identifiersep> owner <identifiersep> document ( page ) ; } \n \t5 } else { \n <ect>
\t2 current <identifiersep> row = - 1 ; } \n \t1 private static string check <identifiersep> default ( string file ) { \n \t2 if ( file . length ( ) == 0 ) { \n \t3 if ( file <identifiersep> containers . size ( ) == 1 && default <identifiersep> file . length ( ) > 0 ) { \n <ect>
\t3 object object = <identifier> <identifiersep> count . value <identifiersep> in <identifiersep> component ( <identifier> ) ; \n \t3 if ( object != null ) { \n \t4 count = erx <identifiersep> value <identifiersep> utilities . int <identifiersep> value ( object ) ; } \n \t3 else { \n <ect>
\t1 public void add <identifiersep> forward <identifiersep> config ( forward <identifiersep> config config ) { \n \t2 throw <identifiersep> if <identifiersep> configured ( ) ; \n \t2 string key = config . get <identifiersep> name ( ) ; \n \t2 if ( <identifier> . contains <identifiersep> key ( key ) ) { \n <ect>
\t2 { \n \t2 class <identifiersep> found = false ; } \n \t2 if ( class <identifiersep> found ) \n \t2 { \n <ect>
\t1 try { \n \t1 string file <identifiersep> path = pentaho <identifiersep> system . get <identifiersep> application <identifiersep> context ( ) . get <identifiersep> file <identifiersep> output <identifiersep> path ( file <identifiersep> name ) ; \n \t1 j <identifiersep> free <identifiersep> <identifier> <identifiersep> engine . save <identifiersep> <identifier> ( <identifier> , file <identifiersep> path , width , height , output <identifiersep> type , writer , info ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 execute ( acls <identifiersep> command , \n \t3 user = params . kafka <identifiersep> user , \n \t3 <identifier> = true ) \n \t1 else : \n <ect>
\t1 <identifier> <identifiersep> structure <identifiersep> enum . <identifier> , <string_literal> ) \n \t1 jvm <identifiersep> <identifier> ( <identifier> , b , r ) } \n <comment> \n private def gpu <identifiersep> sparse <identifiersep> <identifier> ( a : matrix , b : matrix , r : option [ matrix ] = none ) : matrix = { \n <ect>
\t4 if ( host . state != host . state . down ) \n \t5 update <identifiersep> reconnection <identifiersep> time ( ) ; \n \t4 remaining = open <identifiersep> connections . decrement <identifiersep> and <identifiersep> get ( ) ; \n \t4 assert remaining >= 0 ; \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + volume <identifiersep> id + <string_literal> + account <identifiersep> id ) ; \n \t4 } else { \n \t5 success = false ; \n \t5 if ( answer != null ) { \n <ect>
\t2 return arrays . as <identifiersep> list ( mock <identifiersep> repository . plugin . class , mock <identifiersep> transport <identifiersep> service . test <identifiersep> plugin . class ) ; } \n \t1 public void test <identifiersep> retry <identifiersep> <identifier> <identifiersep> snapshot <identifiersep> status <identifiersep> messages ( ) throws exception { \n \t2 string master <identifiersep> node = internal <identifiersep> cluster ( ) . start <identifiersep> master <identifiersep> only <identifiersep> node ( ) ; \n \t2 string data <identifiersep> node = internal <identifiersep> cluster ( ) . start <identifiersep> data <identifiersep> only <identifiersep> node ( ) ; \n <ect>
\t4 sessions . set ( session ) ; \n \t3 } catch ( service <identifiersep> unavailable <identifiersep> exception ex ) { \n \t4 throw new network <identifiersep> exception ( ex . get <identifiersep> message ( ) , ex ) ; \n \t3 } catch ( client <identifiersep> exception <identifier> ) { \n <ect>
\t1 if ( ! record <identifiersep> version ) { \n \t1 log . warn ( <string_literal> + \n \t2 <string_literal> , schema <identifiersep> version , comment ) ; \n \t1 return ; } \n <ect>
\t4 log . warn ( <string_literal> + \n \t8 <string_literal> + url , e ) ; \n \t4 invoke <identifiersep> hooks ( build <identifiersep> and <identifiersep> push <identifiersep> status . <identifier> <identifiersep> with <identifiersep> failures , url ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 <identifier> . write <identifiersep> int ( <identifier> <identifiersep> minutes <identifiersep> since <identifiersep> epoch ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 logger . error ( this , <string_literal> + log <identifiersep> file + <string_literal> + e , e ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 tmp <identifiersep> kafka <identifiersep> dirs . add ( tmp <identifiersep> dir ) ; } \n \t2 zookeeper = null ; \n \t2 brokers = null ; \n \t2 try { \n <ect>
\t5 s <identifiersep> logger . info ( <string_literal> ) ; \n \t5 return false ; } \n \t4 error ++ ; \n \t3 } else if ( api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) != null ) { \n <ect>
\t3 if ( stmt != null ) { \n \t4 try { \n \t5 stmt . close ( ) ; } \n \t4 catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 private void process <identifiersep> incoming <identifiersep> message ( string msg ) { \n \t3 logger . debug ( <string_literal> + msg ) ; \n \t3 <identifier> <identifiersep> <identifier> command = command <identifiersep> parser . parse ( msg ) ; \n \t3 if ( command != null ) { \n <ect>
\t2 stop ( ) ; \n \t2 if ( shut <identifiersep> down ( boss <identifiersep> group ) ) { \n \t3 log . debug ( <string_literal> ) ; \n \t2 } else { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t3 uri test <identifiersep> clean <identifiersep> uri = new uri ( url ) ; \n \t4 log . debug ( <string_literal> + url + <string_literal> + test <identifiersep> clean <identifiersep> uri . to <identifiersep> string ( ) ) ; } \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t4 if ( config . is <identifiersep> empty ( ) ) { \n \t5 log . warn ( <string_literal> , line <identifiersep> number ) ; \n \t5 continue ; } \n \t4 if ( <identifier> . is <identifiersep> empty ( ) ) { \n <ect>
\t2 event . set <identifiersep> cluster <identifiersep> metrics <identifiersep> context ( this ) ; \n \t2 <comment> \n \t2 nimbus <identifiersep> data . get <identifiersep> <identifier> <identifiersep> exec ( ) . schedule <identifiersep> at <identifiersep> fixed <identifiersep> rate ( event , 0 , long . max <identifiersep> value , time <identifiersep> unit . seconds ) ; } \n \t1 public void shutdown ( ) { \n <ect>
\t2 cmd . id = router . id \n \t2 self . apiclient . stop <identifiersep> router ( cmd ) \n \t1 def create <identifiersep> vpc ( self , vpc <identifiersep> offering , cidr = <identifier> . 1 . 1 . 1 / <identifier> ) : \n \t2 try : \n <ect>
\t1 static logger logger = logger <identifiersep> factory . get <identifiersep> logger ( main . class ) ; \n \t1 static string dir <identifiersep> prefix = <string_literal> ; \n \t1 public static void main ( string [ ] args ) throws <identifier> <identifiersep> exception , interrupted <identifiersep> exception { \n \t2 init ( dir <identifiersep> prefix + <string_literal> ) ; \n <ect>
\t2 } else { \n \t3 logger . debug ( this . get <identifiersep> name ( ) + <string_literal> ) ; } \n \t2 <comment> \n \t2 if ( ! has <identifiersep> left ( ) ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 log <identifiersep> error ( <string_literal> + e , e ) ; } } \n \t1 protected void log <identifiersep> error ( string message , throwable e ) { \n \t2 if ( use <identifiersep> logging <identifiersep> for <identifiersep> shutdown <identifiersep> errors ) { \n <ect>
\t3 catch ( grid <identifiersep> topology <identifiersep> exception e ) { \n \t5 log . debug ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t3 catch ( grid <identifiersep> exception e ) { \n <ect>
\t6 thread . sleep ( <number_literal> ) ; \n \t5 } catch ( interrupted <identifiersep> exception e ) { \n \t6 s <identifiersep> logger . debug ( <string_literal> ) ; } } \n \t4 if ( get <identifiersep> reset <identifiersep> safe <identifiersep> power <identifiersep> state ( ) != virtual <identifiersep> machine <identifiersep> power <identifiersep> state . <identifier> <identifiersep> off ) { \n <ect>
\t4 set <identifiersep> bridge <identifiersep> binding ( bridge ) ; } \n \t3 bridge . register <identifiersep> object ( proxy <identifiersep> name , proxy ) ; \n \t3 output = bridge . call ( new object [ ] { request , context , response , proxy } , input ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 native <identifiersep> library . get <identifiersep> instance ( <string_literal> ) ; \n \t3 } catch ( <identifier> <identifiersep> error e ) { \n <ect>
\t2 mock . expected <identifiersep> minimum <identifiersep> message <identifiersep> count ( <number_literal> ) ; \n \t2 mock . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 app . stop ( ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
public void stop ( ) { \n \t1 service . shutdown ( ) ; \n \t1 while ( ! service . is <identifiersep> terminated ( ) ) { \n \t1 try { \n <ect>
\t3 throws interception <identifiersep> exception { \n \t2 try { \n \t3 method reflection <identifiersep> method = method . get <identifiersep> method ( ) ; \n \t3 object [ ] parameters = this . info . get <identifiersep> parameters ( ) ; \n <ect>
\t3 for ( nic <identifiersep> to nic : nics ) { \n \t4 get <identifiersep> network ( nic ) ; } \n \t3 return new prepare <identifiersep> for <identifiersep> migration <identifiersep> answer ( cmd ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 list < map < string , object > > <identifier> = null ; \n \t2 string json ; \n \t2 if ( ! arrays . as <identifiersep> list ( acceptable <identifiersep> <identifier> ) . contains ( image <identifiersep> prefix ) ) \n \t2 { \n <ect>
\t5 if ( datapoint . get <identifiersep> name ( ) . equals ( item <identifiersep> name ) ) { \n \t6 logger . debug ( <string_literal> , item <identifiersep> name ) ; \n \t6 if ( ! m <identifiersep> knx <identifiersep> bus <identifiersep> reader <identifiersep> scheduler . schedule <identifiersep> read ( datapoint , \n \t8 knx <identifiersep> provider . get <identifiersep> auto <identifiersep> refresh <identifiersep> time ( datapoint ) ) ) { \n <ect>
\t3 throw new configuration <identifiersep> exception ( <string_literal> ) ; } \n \t2 <identifier> <identifiersep> share = ping <identifiersep> dirs [ 0 ] ; \n \t2 <identifier> <identifiersep> dir = ping <identifiersep> dirs [ 1 ] ; \n \t2 com . <identifier> . <identifier> . connection ssh <identifiersep> connection = new com . <identifier> . <identifier> . connection ( <identifier> <identifiersep> ip , <number_literal> ) ; \n <ect>
\t6 jstorm <identifiersep> master <identifiersep> context . app <identifiersep> master <identifiersep> <identifier> <identifiersep> url ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 jstorm <identifiersep> master <identifiersep> context . max <identifiersep> memory = response . get <identifiersep> maximum <identifiersep> resource <identifiersep> capability ( ) . get <identifiersep> memory ( ) ; \n <ect>
\t6 invalid <identifiersep> heartbeat <identifiersep> connection ( ) ; } \n \t4 } catch ( final active <identifiersep> <identifier> <identifiersep> exception e ) { \n \t5 queue <identifiersep> notification ( new cluster <identifiersep> manager <identifiersep> message ( cluster <identifiersep> manager <identifiersep> message . message <identifiersep> type . node <identifiersep> isolated ) ) ; \n \t4 } catch ( final throwable e ) { \n <ect>
\t4 fail ( <string_literal> ) ; \n \t3 } else { \n \t4 logger . info ( <string_literal> ) ; } \n \t2 } , 1 , time <identifiersep> unit . minutes ) ; \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 } else { \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 scoped <identifiersep> transaction scoped <identifiersep> transaction = transaction <identifiersep> manager . external <identifiersep> begin <identifiersep> transaction ( external <identifiersep> txn , tx <identifiersep> scope . required ( ) ) ; \n \t1 transaction current = transaction . current ( ) ; \n \t1 assert <identifiersep> that ( current ) . as ( <string_literal> ) . is <identifiersep> same <identifiersep> as ( scoped <identifiersep> transaction ) ; \n \t1 customer . find . by <identifiersep> name ( <string_literal> ) ; \n <ect>
<comment> \n \t1 @ test \n \t1 public void should <identifiersep> save <identifiersep> last <identifiersep> execution <identifiersep> time ( ) throws exception { \n <ect>
\t2 } ; } \n \t1 public static class my <identifiersep> type <identifiersep> converters implements type <identifiersep> converters { \n \t2 @ converter \n \t2 public a <identifiersep> order to <identifiersep> a <identifiersep> order ( string order ) { \n <ect>
\t5 load <identifiersep> count ++ ; \n \t4 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t5 log . warn ( <string_literal> , e ) ; \n \t4 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t4 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( device <identifiersep> name ) ) { \n \t5 record . set <identifiersep> name ( device <identifiersep> name ) ; } } \n \t3 storage . set ( record ) ; \n \t3 logger . debug ( <string_literal> , principal , record . get <identifiersep> name ( ) ) ; } \n <ect>
\t4 try \n \t4 { \n \t5 for ( fake <identifiersep> file index <identifiersep> file : index <identifiersep> files ) \n \t5 { \n <ect>
\t2 private static void manage <identifiersep> camel <identifiersep> context ( container container , camel <identifiersep> context context ) { \n \t3 try { \n \t4 container . manage ( context ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t2 if ( packet != null ) { \n \t2 packet . write ( os ) ; \n \t2 os . flush ( ) ; } } \n \t1 } catch ( throwable e ) { \n <ect>
\t2 return answer ; } \n \t1 @ override \n \t1 protected broker <identifiersep> service create <identifiersep> broker ( ) throws exception { \n \t2 string uri = get <identifiersep> broker <identifiersep> xml ( ) ; \n <ect>
\t3 method = o . get <identifiersep> class ( ) . get <identifiersep> method ( method <identifiersep> name ) ; \n \t2 } catch ( security <identifiersep> exception e1 ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + o . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> + prop <identifiersep> name ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e1 ) { \n <ect>
<number_literal> num <identifiersep> <identifier> <identifiersep> reads ) ) ; } } } } } } } } } } \n \t2 return <identifier> <identifiersep> single <identifiersep> sample <identifiersep> read <identifiersep> stream <identifiersep> test . get <identifiersep> tests ( <identifier> <identifiersep> single <identifiersep> sample <identifiersep> read <identifiersep> stream <identifiersep> test . class ) ; } \n \t1 @ test ( data <identifiersep> provider = <string_literal> ) \n \t1 public void test <identifiersep> <identifier> <identifiersep> single <identifiersep> sample <identifiersep> read <identifiersep> stream ( <identifier> <identifiersep> single <identifiersep> sample <identifiersep> read <identifiersep> stream <identifiersep> test test ) { \n <ect>
\t4 message . set <identifiersep> <identifier> ( retain ) ; \n \t4 <comment> \n \t4 mqtt <identifiersep> topic mqtt <identifiersep> topic = client . get <identifiersep> topic ( topic ) ; \n \t4 mqtt <identifiersep> delivery <identifiersep> token delivery <identifiersep> token = mqtt <identifiersep> topic . publish ( message ) ; \n <ect>
\t1 public void check <identifiersep> access ( account caller , domain domain ) throws permission <identifiersep> denied <identifiersep> exception { \n \t2 for ( security <identifiersep> checker checker : <identifier> <identifiersep> security <identifiersep> <identifier> ) { \n \t3 if ( checker . check <identifiersep> access ( caller , domain ) ) { \n <ect>
\t1 try { \n \t2 while ( ! msg <identifiersep> queue . is <identifiersep> empty ( ) ) { \n \t2 for ( final map . entry < worker , runnable > entry : workers . entry <identifiersep> set ( ) ) { \n \t3 if ( entry . get <identifiersep> value ( ) == idle ) continue ; \n <ect>
\t5 logger . error ( <string_literal> + formatter . format ( runtime . get <identifiersep> runtime ( ) . max <identifiersep> memory ( ) ) ) ; \n \t5 <comment> \n \t5 return buffer ; } } } \n \t2 if ( buffer . length == 0 ) { \n <ect>
\t5 registry <identifiersep> lock . read <identifiersep> lock ( ) . unlock ( ) ; } \n \t3 } else { \n \t4 logger . error ( <string_literal> ) ; } \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 public void on <identifiersep> metadata ( bucket final <identifiersep> metadata , client <identifiersep> put <identifiersep> state state , client <identifiersep> context context ) { \n \t2 boolean free <identifiersep> it = false ; \n \t2 synchronized ( this ) { \n \t3 if ( uri != null ) { \n <ect>
\t4 return null ; } \n \t3 try { \n \t4 return get <identifiersep> pom ( pom <identifiersep> file ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t3 call <identifiersep> <identifier> <identifiersep> frames . put ( call , frame ) ; \n \t3 add <identifiersep> call <identifiersep> listener ( call , frame ) ; \n \t3 add <identifiersep> frame <identifiersep> listener ( call , frame , <identifier> <identifiersep> region ) ; \n \t3 add <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> listener ( call , frame ) ; \n <ect>
\t7 logger . info ( crypto <identifiersep> group . concat ( <string_literal> + encoding <identifiersep> utils . generate <identifiersep> json <identifiersep> web <identifiersep> key ( crypto . get <identifiersep> signing ( ) . get <identifiersep> key <identifiersep> size ( ) ) ) ) ; \n \t6 } else if ( obj instanceof encryption <identifiersep> <identifier> <identifiersep> signing <identifiersep> jwt <identifiersep> <identifier> <identifiersep> properties ) { \n \t7 final encryption <identifiersep> <identifier> <identifiersep> signing <identifiersep> jwt <identifiersep> <identifier> <identifiersep> properties crypto = ( encryption <identifiersep> <identifier> <identifiersep> signing <identifiersep> jwt <identifiersep> <identifier> <identifiersep> properties ) obj ; \n \t7 final string enc <identifiersep> key = new <identifier> <identifiersep> string <identifiersep> generator ( crypto . get <identifiersep> encryption ( ) . get <identifiersep> key <identifiersep> size ( ) ) . get <identifiersep> new <identifiersep> string ( ) ; \n <ect>
\t6 checkpoint <identifiersep> storage . initialize <identifiersep> location <identifiersep> for <identifiersep> savepoint ( checkpoint <identifiersep> id , external <identifiersep> savepoint <identifiersep> location ) : \n \t6 checkpoint <identifiersep> storage . initialize <identifiersep> location <identifiersep> for <identifiersep> checkpoint ( checkpoint <identifiersep> id ) ; } \n \t3 catch ( throwable t ) { \n \t4 int num <identifiersep> <identifier> = num <identifiersep> <identifier> <identifiersep> checkpoints <identifiersep> triggers . increment <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t1 @ override \n \t1 public void close ( ) { \n \t2 clear ( <string_literal> ) ; } \n \t1 public void clear ( string reason ) { \n <ect>
\t2 ep <identifiersep> state = endpoint <identifiersep> state <identifiersep> map . get ( endpoint ) ; \n \t2 if ( ep <identifiersep> state . get <identifiersep> heart <identifiersep> beat <identifiersep> state ( ) . get <identifiersep> generation ( ) != generation ) \n \t3 throw new runtime <identifiersep> exception ( <string_literal> + endpoint + <string_literal> ) ; \n \t2 <comment> \n <ect>
\t2 if ( vm . get <identifiersep> state ( ) == state . running ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + router . get <identifiersep> instance <identifiersep> name ( ) + <string_literal> ) ; } \n \t3 return router ; } \n <ect>
\t5 logger . debug ( <string_literal> , timeout - duration ) ; } \n \t4 thread . sleep ( <identifier> ) ; \n \t4 duration = ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ) ; } \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 transaction <identifiersep> store . commit ( get <identifiersep> transaction <identifiersep> id ( ) , false , pre <identifiersep> commit <identifiersep> task , post <identifiersep> commit <identifiersep> task ) ; \n \t3 this . wait <identifiersep> post <identifiersep> commit <identifiersep> done ( post <identifiersep> commit <identifiersep> task ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t3 connection . close ( ) ; \n \t3 connection = null ; \n \t3 thread . sleep ( <number_literal> ) ; } \n \t2 assert <identifiersep> equals ( 0 , broker . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> memory <identifiersep> usage ( ) . get <identifiersep> num <identifiersep> usage <identifiersep> listeners ( ) ) ; \n <ect>
\t5 . get <identifiersep> job ( cubing <identifiersep> executable <identifiersep> util . get <identifiersep> cubing <identifiersep> job <identifiersep> id ( this . get <identifiersep> params ( ) ) ) ; \n \t3 statistics <identifiersep> decision <identifiersep> util . <identifier> <identifiersep> cubing <identifiersep> algorithm ( cubing <identifiersep> job , optimize <identifiersep> segment ) ; \n \t3 return new execute <identifiersep> result ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 = header <identifiersep> factory \n \t5 . create <identifiersep> accept <identifiersep> header ( <string_literal> , content <identifiersep> sub <identifiersep> type ) ; } \n \t2 catch ( parse <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 } else { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } } \n \t1 @ deprecated \n \t1 public void set <identifiersep> load <identifiersep> statistics <identifiersep> enabled ( boolean load <identifiersep> statistics <identifiersep> enabled ) { \n <ect>
\t3 out . close <identifiersep> entry ( ) ; \n \t3 in . close ( ) ; } \n \t2 catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception ex ) \n \t2 { \n <ect>
\t7 break ; } \n \t6 expected = false ; } } \n \t4 if ( ! expected ) \n \t5 <comment> \n <ect>
\t6 int gen = integer . parse <identifiersep> int ( name . substring ( snapshot <identifiersep> index <identifiersep> prefix . length ( ) ) ) ; \n \t6 if ( gen > latest ) { \n \t7 latest = gen ; } \n \t5 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t3 source source = <identifier> . source ( payload . open <identifiersep> stream ( ) ) ; \n \t3 try { \n \t3 sink . write <identifiersep> all ( source ) ; \n \t3 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 job <identifiersep> tracker <identifiersep> loc = null ; \n <ect>
\t4 try { \n \t5 records <identifiersep> reader . close ( ) ; \n \t5 records <identifiersep> reader = null ; \n \t4 } catch ( throwable t ) { \n <ect>
\t3 catch ( io <identifiersep> exception e ) \n \t3 { \n \t4 throw new configuration <identifiersep> exception ( <string_literal> , e ) ; } \n \t3 <comment> \n <ect>
\t2 return transaction . execute ( new transaction <identifiersep> callback < vlan <identifiersep> vo > ( ) { \n \t3 @ override \n \t3 public vlan <identifiersep> vo do <identifiersep> in <identifiersep> transaction ( final transaction <identifiersep> status status ) { \n \t4 vlan <identifiersep> vo vlan = new vlan <identifiersep> vo ( vlan <identifiersep> type , vlan <identifiersep> id , vlan <identifiersep> gateway , vlan <identifiersep> netmask , zone . get <identifiersep> id ( ) , ip <identifiersep> range , network <identifiersep> id , physical <identifiersep> network <identifiersep> id , vlan <identifiersep> <identifier> , vlan <identifiersep> <identifier> , <identifier> ) ; \n <ect>
\t1 public kvm <identifiersep> storage <identifiersep> pool get <identifiersep> storage <identifiersep> pool ( string uuid ) { \n \t2 return this . get <identifiersep> storage <identifiersep> pool ( uuid , false ) ; } \n \t1 @ override \n \t1 public kvm <identifiersep> storage <identifiersep> pool get <identifiersep> storage <identifiersep> pool ( string uuid , boolean refresh <identifiersep> info ) { \n <ect>
\t3 <identifier> <identifiersep> <identifier> <identifiersep> mgr . configure ( <string_literal> , <identifier> <identifiersep> params ) ; \n \t3 <identifier> <identifiersep> <identifier> <identifiersep> mgr = new upload <identifiersep> manager <identifiersep> impl ( ) ; \n \t3 <identifier> <identifiersep> <identifier> <identifiersep> mgr . configure ( <string_literal> , params ) ; \n \t2 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t2 public void run ( ) { \n \t3 try { \n \t4 tool <identifiersep> runner . run ( tool , tool <identifiersep> args . to <identifiersep> array ( new string [ 0 ] ) ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 do { \n \t3 factor ++ ; \n \t3 <identifier> = <identifier> * factor ; \n \t3 new <identifiersep> distance = math . abs ( number <identifiersep> to <identifiersep> check - <identifier> ) ; \n <ect>
\t3 send <identifiersep> message ( multicast <identifiersep> socket , <string_literal> , alive ) ; \n \t3 send <identifiersep> message ( multicast <identifiersep> socket , <string_literal> , alive ) ; \n \t3 send <identifiersep> message ( multicast <identifiersep> socket , <string_literal> , alive ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 public boolean apply ( ceph <identifiersep> rbd <identifiersep> snapshot <identifiersep> to <identifiersep> be <identifiersep> deleted arg0 ) { \n \t4 return image <identifiersep> snapshots <identifiersep> deleted . contains ( arg0 . get <identifiersep> snapshot ( ) ) ; } \n \t3 } ) ; } \n \t2 } catch ( throwable t ) { \n <ect>
\t6 pt <identifiersep> str ) ; } \n \t3 catch ( <identifier> <identifiersep> exception e ) \n \t3 { \n <ect>
\t5 { \n \t6 if ( is <identifiersep> io <identifiersep> exception ( ex ) ) \n \t7 system <identifiersep> <identifier> . <identifier> . warn ( <string_literal> + ex . get <identifiersep> message ( ) ) ; \n \t6 else \n <ect>
\t10 && extension <identifiersep> loader . get <identifiersep> extension <identifiersep> loader ( protocol . class ) . has <identifiersep> extension ( value ) \n \t10 && ( ! parser <identifiersep> context . get <identifiersep> registry ( ) . contains <identifiersep> bean <identifiersep> definition ( value ) \n \t10 || ! protocol <identifiersep> config . class . get <identifiersep> name ( ) . equals ( parser <identifiersep> context . get <identifiersep> registry ( ) . get <identifiersep> bean <identifiersep> definition ( value ) . get <identifiersep> bean <identifiersep> class <identifiersep> name ( ) ) ) ) { \n \t9 if ( <string_literal> . equals ( element . get <identifiersep> tag <identifiersep> name ( ) ) ) { \n <ect>
\t6 map . put ( new <identifiersep> dest , entry ) ; \n \t6 map . remove ( old <identifiersep> dest , entry ) ; \n \t6 entries . put ( new <identifiersep> dest , entry ) ; \n \t5 } else { \n <ect>
\t2 if ( this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms != null && ! this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms . is <identifiersep> empty ( ) ) { \n \t3 config . set <identifiersep> whitelisted <identifiersep> algorithms ( this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms ) ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( saml <identifiersep> idp . get <identifiersep> <identifier> ( ) . get <identifiersep> override <identifiersep> signature <identifiersep> canonicalization <identifiersep> algorithm ( ) ) ) { \n \t3 config . set <identifiersep> signature <identifiersep> canonicalization <identifiersep> algorithm ( saml <identifiersep> idp . get <identifiersep> <identifier> ( ) . get <identifiersep> override <identifiersep> signature <identifiersep> canonicalization <identifiersep> algorithm ( ) ) ; } \n <ect>
\t3 return ; } \n \t2 try { \n \t3 <identifier> . send ( ) ; \n \t2 } catch ( disconnected <identifiersep> exception e ) { \n <ect>
\t3 case struct : \n \t4 return serialize <identifiersep> struct ( obj , ( struct <identifiersep> object <identifiersep> inspector ) <identifier> , ext ) ; \n \t3 case union : \n \t3 default : \n <ect>
\t5 s <identifiersep> logger . error ( msg ) ; \n \t5 throw new resource <identifiersep> unavailable <identifiersep> exception ( msg , data <identifiersep> center . class , network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; } } \n \t2 } catch ( exception ex ) { \n \t3 if ( external <identifiersep> load <identifiersep> balancer <identifiersep> is <identifiersep> inline ) { \n <ect>
\t1 try ( transaction <identifiersep> resource <identifier> = entities . transaction <identifiersep> for ( scheduled <identifiersep> job . class ) ) { \n \t1 jobs = entities . query ( new scheduled <identifiersep> job ( ) ) ; \n \t1 <identifier> . commit ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t4 log . debug ( <string_literal> + snapshot <identifiersep> id + <string_literal> ) ; \n \t4 delete <identifiersep> snap <identifiersep> from <identifiersep> <identifier> ( snap ) ; <comment> \n \t3 } else { <comment> \n \t3 <comment> \n <ect>
\t3 { \n \t4 <comment> \n \t4 <comment> \n \t4 if ( test <identifiersep> item . get <identifiersep> result <identifiersep> file ( ) != null ) \n <ect>
\t4 outcome . set <identifiersep> pre <identifiersep> election ( false ) ; \n \t4 if ( election . start <identifiersep> real <identifiersep> election ( ctx , outcome , log ) ) \n \t4 { \n \t5 outcome . set <identifiersep> next <identifiersep> role ( candidate ) ; \n <ect>
\t5 <comment> \n \t5 long dont <identifiersep> exclude <identifiersep> period = <number_literal> * <number_literal> * <number_literal> ; \n \t5 if ( ctx . router ( ) . get <identifiersep> <identifier> ( ) < dont <identifiersep> exclude <identifiersep> period ) { \n \t6 if ( log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 if ( ! command <identifiersep> params . contains <identifiersep> key ( user <identifiersep> hook <identifiersep> params . payload . param ( ) ) ) { \n \t1 logger . error ( <string_literal> , user <identifiersep> hook <identifiersep> params . payload . param ( ) ) ; \n \t1 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + user <identifiersep> hook <identifiersep> params . payload . param ( ) + <string_literal> ) ; } \n \t1 if ( ! command <identifiersep> params . contains <identifiersep> key ( user <identifiersep> hook <identifiersep> params . script . param ( ) ) ) { \n <ect>
\t2 metadata [ ] <identifier> = e . must <identifiersep> resolve ; \n \t2 for ( metadata m : <identifier> ) { \n \t3 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> + m ) ; \n \t3 if ( m . is <identifiersep> resolved ( ) ) { \n <ect>
\t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n \t6 <identifier> <identifiersep> log . debug ( <string_literal> ) ; } \n \t3 } else { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 if not os . path . <identifier> ( os . path . join ( java <identifiersep> home , <string_literal> , java <identifiersep> bin ) ) : \n \t1 logger . warning ( <string_literal> ) \n \t1 java <identifiersep> home <identifiersep> check <identifiersep> structured <identifiersep> output = { <string_literal> : 1 , <string_literal> : <string_literal> } \n \t1 else : \n <ect>
\t4 val activity = construct <identifiersep> activity ( cls , <identifier> <identifiersep> annotation , bean , username , \n \t6 activity <identifiersep> stream <identifiersep> constants . action <identifiersep> create ) \n \t4 activity <identifiersep> stream <identifiersep> service . save ( activity ) \n \t3 } catch ( e : exception ) { \n <ect>
<comment> \n \t1 public void rebind ( final string name , final object object ) throws naming <identifiersep> exception { \n <ect>
\t2 if ( server <identifiersep> config . dataset <identifiersep> path != null ) { \n \t3 if ( z . size ( ) != 1 ) \n \t4 log . error ( <string_literal> ) ; \n \t3 list < string > endpoints = z . get ( server <identifiersep> config . dataset <identifiersep> path ) ; \n <ect>
\t6 <identifier> = context . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( configuration <identifiersep> location ) ; \n \t6 logger . debug ( <string_literal> + configuration <identifiersep> location + <string_literal> \n \t7 + <string_literal> ) ; \n \t5 } else { \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 do <identifiersep> start ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 out = <string_literal> ; \n \t3 } else { \n \t4 output = new buffered <identifiersep> writer ( new file <identifiersep> writer ( out ) ) ; } \n \t2 } catch ( io <identifiersep> exception ie ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 input <identifiersep> stream . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 public void run ( ) { \n \t6 accept <identifiersep> <identifier> ( ( accept <identifiersep> <identifier> ) message ) ; } \n \t4 } ) ; \n \t3 } else { \n <ect>
\t5 log . info ( messages <identifiersep> <identifier> + <string_literal> ) ; \n \t5 <identifier> . close ( ) ; \n \t5 session . close ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 if self . max <identifiersep> ram <identifiersep> soft and used <identifiersep> ram >= self . max <identifiersep> ram <identifiersep> soft and not self . action <identifiersep> queue . tasks <identifiersep> in <identifiersep> progress <identifiersep> or <identifiersep> pending ( ) : \n \t2 logger . error ( agent <identifiersep> ram <identifiersep> <identifier> <identifiersep> message . format ( used <identifiersep> ram = used <identifiersep> ram , config <identifiersep> name = <string_literal> , max <identifiersep> ram = self . max <identifiersep> ram <identifiersep> soft ) ) \n \t2 self . restart <identifiersep> agent ( ) \n \t2 if self . max <identifiersep> ram <identifiersep> hard and used <identifiersep> ram >= self . max <identifiersep> ram <identifiersep> hard : \n <ect>
\t2 return null ; } \n \t1 @ override \n \t1 public pair < string , integer > get <identifiersep> vnc <identifiersep> port ( final virtual <identifiersep> machine vm ) { \n \t2 if ( vm . get <identifiersep> host <identifiersep> id ( ) == null ) { \n <ect>
\t3 bytes <identifiersep> message message = session . create <identifiersep> bytes <identifiersep> message ( ) ; \n \t3 message . write <identifiersep> bytes ( payload ) ; \n \t3 producer . send ( message ) ; \n \t3 if ( ( count . get ( ) % <number_literal> ) == 0 ) { \n <ect>
\t2 < p > reload this page with open console , enter text and hit the log button . . . < / p > \n \t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n <ect>
\t6 element current <identifiersep> element = ( element ) current <identifiersep> node ; \n \t6 if ( fault . equals <identifiersep> ignore <identifiersep> case ( current <identifiersep> element . get <identifiersep> tag <identifiersep> name ( ) ) ) { \n \t7 fault fault = parse <identifiersep> fault <identifiersep> element ( current <identifiersep> element , common <identifiersep> map ) ; \n \t7 if ( fault . get <identifiersep> id ( ) != fault <identifiersep> id ) { \n <ect>
\t5 log . info ( <string_literal> + msg <identifiersep> count ) ; } \n \t3 } catch ( throwable e ) { \n \t4 exit ( <string_literal> , e ) ; } } \n \t2 public void send ( ) throws jms <identifiersep> exception { \n <ect>
<comment> \n \t1 public static void handle <identifiersep> camel <identifiersep> context <identifiersep> startup ( configurable <identifiersep> application <identifiersep> context context , class < ? > test <identifiersep> class ) throws exception { \n \t2 boolean skip = <string_literal> . equals <identifiersep> ignore <identifiersep> case ( system . get <identifiersep> property ( <string_literal> ) ) ; \n \t2 if ( skip ) { \n <ect>
\t5 channel . send <identifiersep> response ( new recovery <identifiersep> translog <identifiersep> operations <identifiersep> response ( recovery <identifiersep> target . index <identifiersep> shard ( ) . get <identifiersep> local <identifiersep> checkpoint ( ) ) ) ; \n \t4 } catch ( mapper <identifiersep> exception exception ) { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t1 the structured out file , <identifier> , is <identifier> during multiple <identifier> that use the same file . \n \t1 <string_literal> <string_literal> <ect>
\t3 close <identifiersep> conditional <identifiersep> writer <identifiersep> result result = new close <identifiersep> conditional <identifiersep> writer <identifiersep> result ( ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
<comment> \n public synchronized void start ( ) { \n \t1 state = state . start ; \n \t1 dispatch <identifiersep> event ( event <identifiersep> type . start ) ; \n <ect>
\t2 try { \n \t3 api <identifiersep> connector api = controller . get <identifiersep> api <identifiersep> accessor ( ) ; \n \t3 api . create ( si <identifiersep> obj ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t6 logger . error ( <string_literal> + string . format ( msg . get <identifiersep> user <identifiersep> not <identifiersep> exist ( ) , user <identifiersep> name ) ) ; } \n \t4 <identifier> <identifiersep> info <identifier> <identifiersep> info = new <identifier> <identifiersep> info ( <identifier> ) ; \n \t4 all <identifiersep> <identifier> <identifiersep> info . put ( string . value <identifiersep> of ( <identifier> <identifiersep> info . get <identifiersep> sid <identifiersep> info ( ) . get <identifiersep> sid ( ) ) , <identifier> <identifiersep> info ) ; } \n \t3 acl <identifiersep> store . put <identifiersep> resource <identifiersep> without <identifiersep> check ( id , record , system . current <identifiersep> time <identifiersep> millis ( ) , serializer ) ; \n <ect>
\t6 <comment> \n \t6 listener . on <identifiersep> failure ( new not <identifiersep> master <identifiersep> exception ( <string_literal> + source + <string_literal> ) ) ; } \n \t5 @ override \n \t5 public void on <identifiersep> failure ( string source , exception e ) { \n <ect>
\t3 client . prepare <identifiersep> get ( url ) . execute ( new async <identifiersep> completion <identifiersep> handler < response > ( ) { \n \t4 @ override \n \t4 public response on <identifiersep> completed ( response response ) throws exception { \n \t5 if ( response . get <identifiersep> status <identifiersep> code ( ) != <number_literal> ) { \n <ect>
\t2 log . trace ( <string_literal> , url , method ) ; \n \t2 if ( methods <identifiersep> to <identifiersep> use . is <identifiersep> entity <identifiersep> <identifier> ( ) ) { \n \t3 ( ( entity <identifiersep> <identifier> <identifiersep> method ) method ) . set <identifiersep> request <identifiersep> entity ( request <identifiersep> entity ) ; \n \t3 if ( request <identifiersep> entity != null && request <identifiersep> entity . get <identifiersep> content <identifiersep> type ( ) == null ) { \n <ect>
\t3 task <identifiersep> execution <identifiersep> plan . await <identifiersep> completion ( ) ; \n \t2 } finally { \n \t3 executor . stop ( ) ; } } \n \t1 private void start <identifiersep> additional <identifiersep> workers ( task <identifiersep> execution <identifiersep> plan task <identifiersep> execution <identifiersep> plan , action < ? super task <identifiersep> internal > task <identifiersep> worker , executor executor , worker <identifiersep> lease parent <identifiersep> worker <identifiersep> lease ) { \n <ect>
public void delete <identifiersep> pig <identifiersep> script <identifiersep> local <identifiersep> file ( string <identifier> , string <identifier> ) { \n \t1 try { \n \t1 file file = new file ( <identifier> + <identifier> ) ; \n \t1 if ( file . delete ( ) ) { \n <ect>
\t6 try { \n \t7 channel . send <identifiersep> response ( e ) ; \n \t6 } catch ( exception channel <identifiersep> exception ) { \n \t7 channel <identifiersep> exception . add <identifiersep> suppressed ( e ) ; \n <ect>
\t4 <comment> \n \t4 <identifier> <identifiersep> lb2vm <identifiersep> map <identifiersep> dao . remove ( load <identifiersep> balancer . get <identifiersep> id ( ) , instance <identifiersep> ids , null ) ; \n \t4 return true ; } \n \t3 if ( ! apply <identifiersep> load <identifiersep> balancer <identifiersep> config ( load <identifiersep> balancer <identifiersep> id ) ) { \n <ect>
\t7 for ( int i = 1 ; i < ip <identifiersep> addresses . length ; i ++ ) { \n \t8 ip <identifiersep> address <identifiersep> log <identifiersep> str = ip <identifiersep> address <identifiersep> log <identifiersep> str + <string_literal> + ip <identifiersep> addresses [ i ] ; } } \n \t6 s <identifiersep> logger . info ( <string_literal> + ip <identifiersep> address <identifiersep> log <identifiersep> str ) ; } } \n \t3 } else { \n <ect>
<comment> \n <identifier> exit <identifiersep> on <identifiersep> failure extends <identifier> { \n override def execute ( session : session ) : unit = { \n \t1 execute <identifiersep> or <identifiersep> fail ( session ) . on <identifiersep> failure { message = > \n <ect>
\t2 try { \n \t3 this . item <identifiersep> iterator = item <identifiersep> service . find <identifiersep> all ( context ) ; \n \t3 current <identifiersep> item = this . item <identifiersep> iterator . next ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 log . info ( msg ( <string_literal> ) + <string_literal> + info . is <identifiersep> to <identifiersep> be <identifiersep> processed ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> internal <identifiersep> id ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> name ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> store <identifiersep> number ( ) ) ; \n <ect>
\t1 log . debug ( <string_literal> ) ; \n \t1 pm . retrieve <identifiersep> all ( m <identifiersep> security <identifiersep> tab <identifiersep> part <identifiersep> list ) ; \n \t1 list < hive <identifiersep> object <identifiersep> privilege > result = convert <identifiersep> table <identifiersep> cols ( m <identifiersep> security <identifiersep> tab <identifiersep> part <identifiersep> list ) ; \n \t1 success = commit <identifiersep> transaction ( ) ; \n <ect>
\t3 <comment> \n \t3 object svc = tracker . wait <identifiersep> for <identifiersep> service ( timeout ) ; \n \t3 if ( svc == null ) { \n \t4 dictionary < ? , ? > <identifier> = bundle <identifiersep> context . get <identifiersep> bundle ( ) . get <identifiersep> headers ( ) ; \n <ect>
\t4 params . <identifier> = ( i <identifiersep> push <identifiersep> output ) this ; } \n \t3 <comment> \n \t3 if ( external <identifiersep> process == null || external <identifiersep> process . is <identifiersep> destroyed ( ) ) { \n \t4 <comment> \n <ect>
\t4 s <identifiersep> logger . warn ( string . format ( <string_literal> , service . get <identifiersep> name ( ) ) ) ; \n \t4 return false ; } \n \t3 network . provider provider = network . provider . get <identifiersep> provider ( vpc <identifiersep> offering <identifiersep> service . get <identifiersep> provider ( ) ) ; \n \t3 if ( ! supported <identifiersep> vpc <identifiersep> services . contains <identifiersep> entry ( service , provider ) ) { \n <ect>
\t3 while ( rs . next ( ) ) { \n \t4 long zone <identifiersep> id = rs . get <identifiersep> long ( 1 ) ; \n \t4 long network <identifiersep> id = null ; \n \t4 long vm <identifiersep> count = 0l ; \n <ect>
\t2 <comment> \n \t2 try { \n \t3 init <identifiersep> default <identifiersep> page ( ) ; \n <ect>
\t4 throw new forbidden <identifiersep> exception ( <string_literal> ) ; } \n \t3 if ( path != null && ! get <identifiersep> valid <identifiersep> paths ( ) . contains ( path ) ) { \n \t4 throw new bad <identifiersep> request <identifiersep> exception ( <string_literal> ) ; } \n \t3 if ( ! realm . is <identifiersep> enabled ( ) ) { \n <ect>
\t4 } else { \n \t5 logger . trace ( <string_literal> , line , \n \t7 field <identifiersep> delimiter ) ; } } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 if ( entry <identifiersep> output <identifiersep> stream != null ) { \n \t3 try { \n \t3 entry <identifiersep> output <identifiersep> stream . close ( ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 log . info ( <string_literal> + rsrc1 ) ; \n \t3 log . info ( <string_literal> + rsrc2 ) ; \n \t3 log . info ( <string_literal> + rsrc3 ) ; \n \t3 log . info ( <string_literal> + rsrc4 ) ; \n <ect>
\t2 private < t extends exception > void rethrow <identifiersep> if <identifiersep> type ( exception e , class < t > exception <identifiersep> class ) throws t { \n \t3 if ( e . get <identifiersep> class ( ) == exception <identifiersep> class ) { \n \t4 throw exception <identifiersep> class . cast ( e ) ; } } \n \t2 private void dispatch ( <identifier> <identifiersep> event <identifiersep> category <identifier> <identifiersep> event <identifiersep> category , session <identifiersep> id session <identifiersep> id , message message ) throws exception { \n <ect>
\t5 return types <identifiersep> allow <identifiersep> all ; } \n \t4 try { \n \t5 types | = 1 < < property <identifiersep> type . value <identifiersep> from <identifiersep> name ( inc ) ; \n \t4 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 if ( module . get <identifiersep> module <identifiersep> activator ( ) != null ) { \n \t5 module . get <identifiersep> module <identifiersep> activator ( ) . will <identifiersep> refresh <identifiersep> context ( ) ; } } \n \t3 catch ( exception e ) { \n <ect>
\t4 if ( cmd == on <identifiersep> off <identifiersep> type . on ) { \n \t5 if ( cmd <identifiersep> param . equals ( <string_literal> ) ) { \n \t6 msg m = dev . make <identifiersep> standard <identifiersep> message ( ( byte ) <identifier> , ( byte ) <identifier> , ( byte ) 0x00 ) ; \n \t6 dev . enqueue <identifiersep> message ( m , m <identifiersep> feature ) ; \n <ect>
public \n synchronized \n void do <identifiersep> append ( logging <identifiersep> event event ) { \n \t1 if ( closed ) { \n <ect>
\t2 <identifier> . flow ( split <identifiersep> credit ) ; \n \t2 for ( int i = 0 ; i < split <identifiersep> credit ; i ++ ) { \n \t3 amqp <identifiersep> message message = <identifier> . receive ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t3 assert <identifiersep> not <identifiersep> null ( <string_literal> + i + <string_literal> , message ) ; \n <ect>
\t3 logs . <identifier> ( ) . error ( ex , ex ) ; \n \t3 throw ex ; } \n \t2 } else { \n \t3 subject <identifiersep> message <identifiersep> callback < cluster , ? , ? > callback = callback <identifiersep> class . new <identifiersep> instance ( ) ; \n <ect>
\t3 session . invalidate ( ) ; } \n \t2 sessions . clear ( ) ; } \n \t1 @ override \n \t1 public void logout <identifiersep> http <identifiersep> sessions ( list < string > ids ) { \n <ect>
\t4 logger . info ( <string_literal> + index ) ; \n \t4 do <identifiersep> opt ( operations . get ( index ) ) ; } \n \t2 } catch ( exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; \n <ect>
\t1 log . info ( <string_literal> + current <identifiersep> spool <identifiersep> file + <string_literal> ) ; \n \t1 } else { \n \t1 current <identifiersep> spool <identifiersep> buffered <identifiersep> writer . close ( ) ; \n \t1 <identifier> <identifiersep> handler . handle <identifiersep> <identifier> ( current <identifiersep> spool <identifiersep> file ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 protected void tear <identifiersep> down ( ) throws exception { \n <ect>
\t5 if ( system . current <identifiersep> time <identifiersep> millis ( ) > start <identifiersep> <identifier> + consumer . get <identifiersep> configuration ( ) . get <identifiersep> bind <identifiersep> timeout ( ) ) { \n \t6 log . error ( <string_literal> , socket <identifiersep> address , consumer . get <identifiersep> configuration ( ) . get <identifiersep> bind <identifiersep> timeout ( ) , bind <identifiersep> exception ) ; \n \t6 break ; \n \t5 } else { \n <ect>
\t4 log . error ( <string_literal> , my <identifiersep> name ) ; } } \n \t2 try { \n \t3 listener <identifiersep> client <identifiersep> data . queue . put ( final <identifiersep> sample <identifiersep> result ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 if ( ! is <identifiersep> not <identifiersep> in <identifiersep> <identifier> <identifiersep> list ( db <identifiersep> name , tbl <identifiersep> name ) ) { \n \t1 log . debug ( <string_literal> , db <identifiersep> name , tbl <identifiersep> name ) ; \n \t1 return false ; } \n \t1 if ( ! is <identifiersep> in <identifiersep> whitelist ( db <identifiersep> name , tbl <identifiersep> name ) ) { \n <ect>
\t9 ctx . new <identifiersep> <identifier> <identifiersep> promise ( ) ) \n \t9 . add <identifiersep> listener ( completion <identifiersep> listener ) ; \n \t7 } catch ( io <identifiersep> exception e ) { \n \t8 display ( ctx , request , <string_literal> ) ; \n <ect>
\t5 <comment> \n \t5 options = options <identifiersep> with <identifiersep> primary <identifiersep> key <identifiersep> support <identifiersep> disabled ( options ) ; \n \t5 create <identifiersep> primary <identifiersep> key <identifiersep> support <identifiersep> for <identifiersep> model ( <identifier> , channel , sync <identifiersep> factory ) ; \n \t5 string sql <identifiersep> script = sync <identifiersep> factory . schema <identifiersep> creation <identifiersep> script <identifiersep> for <identifiersep> entities ( <identifier> . entities ( ) , options ) ; \n <ect>
\t3 int <identifier> = 0 ; \n \t3 for ( peer <identifiersep> profile best : <identifier> <identifiersep> strict <identifiersep> capacity <identifiersep> order ) { \n \t4 if ( ( best . get <identifiersep> is <identifiersep> active ( ) ) && ( best . get <identifiersep> is <identifiersep> failing ( ) ) ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 <identifier> <identifiersep> element . set <identifiersep> attribute ( unit <identifiersep> attr <identifiersep> name , prev <identifiersep> unit <identifiersep> string + <string_literal> + unit <identifiersep> string ) ; \n \t4 } else { \n \t5 <identifier> <identifiersep> element . set <identifiersep> attribute ( unit <identifiersep> attr <identifiersep> name , unit <identifiersep> string ) ; } \n \t3 } else { \n <ect>
\t6 in <identifiersep> ds <identifiersep> desc . stop ( ) ; \n \t6 in <identifiersep> ds <identifiersep> desc . disconnect ( ) ; } \n \t5 catch ( io <identifiersep> exception ex ) \n \t5 { \n <ect>
\t3 wait <identifiersep> for <identifiersep> task ( client . get <identifiersep> v <identifiersep> app <identifiersep> client ( ) . power <identifiersep> off <identifiersep> v <identifiersep> app ( v <identifiersep> app . get <identifiersep> href ( ) ) ) ; \n \t3 v <identifiersep> app = client . get <identifiersep> v <identifiersep> app <identifiersep> client ( ) . get <identifiersep> v <identifiersep> app ( v <identifiersep> app . get <identifiersep> href ( ) ) ; \n \t3 logger . debug ( <string_literal> , v <identifiersep> app . get <identifiersep> status ( ) , v <identifiersep> app . get <identifiersep> name ( ) ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t7 uri requested <identifiersep> uri = new uri ( requested . get <identifiersep> path ( ) ) . normalize ( ) ; \n \t7 <comment> \n \t7 <comment> \n \t7 if ( ! root <identifiersep> uri . <identifier> ( requested <identifiersep> uri ) . equals ( requested <identifiersep> uri ) ) { \n <ect>
\t7 updater . get <identifiersep> persistent <identifiersep> update ( ) ) ) ; } \n \t5 @ override \n \t5 public void on <identifiersep> failure ( string source , exception e ) { \n \t6 <comment> \n <ect>
\t4 node r \t2 = make <identifiersep> node ( <identifier> , datatype , lang , v <identifiersep> type ) ; \n \t4 b . add ( v , r ) ; \n \t3 } catch ( sql <identifiersep> exception ex ) \n \t3 { <comment> \n <ect>
\t2 if ( ! this . metadata <identifiersep> location . exists ( ) ) { \n \t3 logger . debug ( <string_literal> , this . metadata <identifiersep> location ) ; \n \t3 if ( ! this . metadata <identifiersep> location . mkdir ( ) ) { \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + this . metadata <identifiersep> location + <string_literal> ) ; } } \n <ect>
\t1 for ( int i : vals ) { \n \t1 w . write ( i ) ; } \n \t1 w . finish ( ) ; \n \t1 byte [ ] bytes = baos . to <identifiersep> byte <identifiersep> array ( ) ; \n <ect>
\t7 <identifier> <identifiersep> hosts . add ( mesh <identifiersep> host ) ; \n \t7 <comment> \n \t7 peer <identifiersep> count = ( int ) ref . size + 1 ; \n \t7 local <identifiersep> mesh <identifiersep> find <identifiersep> running = true ; \n <ect>
\t3 long count = result . get <identifiersep> result ( ) . get <identifiersep> long <identifiersep> value ( ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( count ) ; \n \t3 assert . assert <identifiersep> true ( count > 0 ) ; \n \t2 } catch ( not <identifiersep> found <identifiersep> exception e ) { } \n <ect>
\t4 mode -= master ; \n \t3 if ( our <identifiersep> dest == null ) \n \t4 throw new io <identifiersep> exception ( <string_literal> ) ; \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 log . debug ( <string_literal> , candidate , eval ) ; \n \t4 return candidate ; \n \t3 } else { \n \t4 count <identifiersep> <identifier> ++ ; \n <ect>
\t1 return completed <identifiersep> entity ; \n \t1 } catch ( s3exception e ) { \n \t1 throw e ; \n \t1 } catch ( exception e ) { \n <ect>
@ get \n @ produces ( media <identifiersep> type . application <identifiersep> json ) \n public response get <identifiersep> list ( ) { \n \t1 try { \n <ect>
\t2 boolean ready = false ; \n \t2 try { \n \t3 ready = pod <identifiersep> ready . await ( ready <identifiersep> timeout <identifiersep> ms , time <identifiersep> unit . milliseconds ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 <string_literal> , total <identifiersep> found <identifiersep> errors , total <identifiersep> resources <identifiersep> with <identifiersep> errors ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 log . info ( string . format ( <string_literal> , total <identifiersep> resources ) ) ; \n \t1 log . info ( message ) ; \n <ect>
\t2 log <identifiersep> path = string <identifiersep> utils . replace ( log <identifiersep> path , <string_literal> , <string_literal> ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( log <identifiersep> path ) ) { \n \t3 ambari <identifiersep> upgrade <identifiersep> config <identifiersep> updates <identifiersep> file <identifiersep> path = log <identifiersep> path + file . separator + write <identifiersep> to <identifiersep> ambari <identifiersep> upgrade <identifiersep> config <identifiersep> updates <identifiersep> file ; } \n \t2 } else { \n <ect>
\t2 final authentication <identifiersep> builder builder = new default <identifiersep> authentication <identifiersep> builder ( null <identifiersep> principal . get <identifiersep> instance ( ) ) ; \n \t2 credentials . stream ( ) . for <identifiersep> each ( cred - > builder . add <identifiersep> credential ( new basic <identifiersep> credential <identifiersep> meta <identifiersep> data ( cred ) ) ) ; \n \t2 @ non <identifiersep> null \n \t2 final set < authentication <identifiersep> handler > handler <identifiersep> set = get <identifiersep> authentication <identifiersep> handlers <identifiersep> for <identifiersep> this <identifiersep> transaction ( transaction ) ; \n <ect>
\t3 try { \n \t4 if ( <identifier> != null ) { \n \t5 <identifier> . close ( ) ; } } \n \t3 catch ( io <identifiersep> exception e ) { \n <ect>
\t1 private static final boolean track <identifiersep> attach <identifiersep> detach = false ; \n \t1 @ override \n \t1 public transaction <identifiersep> coordinator <identifiersep> state detach ( ) { \n \t2 if ( track <identifiersep> attach <identifiersep> detach ) \n <ect>
\t7 log . error ( <string_literal> ) ; } } } \n \t4 <comment> \n \t4 if ( dir . list <identifiersep> files ( ) . length == 0 ) { \n \t5 if ( ! dir . delete ( ) ) { \n <ect>
\t3 if ( ! ( ip <identifiersep> addr == null && private <identifiersep> ip <identifiersep> addr == null ) ) \n \t3 update . set <identifiersep> dns <identifiersep> state ( load <identifiersep> balancer <identifiersep> <identifier> <identifiersep> instance . dns <identifiersep> state . registered ) ; \n \t3 db . commit ( ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n <ect>
\t2 if ( executor != null ) { \n \t3 try { \n \t4 executor . close ( ) ; \n \t3 } catch ( jms <identifiersep> exception e ) { \n <ect>
\t1 private class create <identifiersep> image <identifiersep> stop <identifiersep> instance <identifiersep> callback extends stop <identifiersep> instance <identifiersep> callback { \n \t2 @ override \n \t2 public void fire ( cluster <identifiersep> stop <identifiersep> instance <identifiersep> response <identifiersep> type msg ) { \n \t3 if ( ! msg . get <identifiersep> return ( ) ) { \n <ect>
private string build <identifiersep> hcat <identifiersep> delegation <identifiersep> token ( string user ) \n \t1 throws io <identifiersep> exception , interrupted <identifiersep> exception , t <identifiersep> exception { \n \t1 final hive <identifiersep> conf c = new hive <identifiersep> conf ( ) ; \n \t1 final i <identifiersep> meta <identifiersep> store <identifiersep> client client = h <identifiersep> cat <identifiersep> util . get <identifiersep> hive <identifiersep> metastore <identifiersep> client ( c ) ; \n <ect>
\t1 if response : \n \t1 logger . debug ( <string_literal> \n \t5 . format ( response . status , response . reason ) ) \n \t1 logger . debug ( str ( response . read ( ) ) ) \n <ect>
\t3 throw new runtime <identifiersep> exception ( e ) ; } \n \t2 try { \n \t3 return ( internal <identifiersep> kie <identifiersep> module ) m . invoke ( null , url ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 key <identifiersep> value <identifiersep> pair <identifiersep> separator = message . key <identifiersep> value <identifiersep> pair <identifiersep> separator ( ) ; \n \t5 log . debug ( <string_literal> , key <identifiersep> value <identifiersep> pair <identifiersep> separator ) ; \n \t5 <comment> \n \t5 <identifier> = message . <identifier> ( ) ; \n <ect>
\t3 email . add <identifiersep> argument ( configuration <identifiersep> manager . get <identifiersep> property ( <string_literal> ) + <string_literal> + file <identifiersep> name ) ; \n \t3 email . add <identifiersep> argument ( configuration <identifiersep> manager . get <identifiersep> property ( <string_literal> ) ) ; \n \t3 email . send ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 private connection <identifiersep> id get <identifiersep> connection <identifiersep> id ( ) { \n \t2 return connection . get <identifiersep> connection <identifiersep> info ( ) . get <identifiersep> connection <identifiersep> id ( ) ; } \n \t1 @ override \n \t1 public void end ( xid xid , int flags ) throws xa <identifiersep> exception { \n <ect>
\t1 content <identifiersep> exception <identifier> = new content <identifiersep> exception ( new throwable ( <string_literal> ) ) ; \n \t1 system . out . println ( <string_literal> + <identifier> ) ; \n \t1 assert <identifiersep> true ( true ) ; } \n public void test <identifiersep> content <identifiersep> <identifier> ( ) { \n <ect>
\t2 private final internal <identifiersep> logger logger = internal <identifiersep> logger <identifiersep> factory . get <identifiersep> instance ( abstract <identifiersep> <identifier> . class ) ; \n \t2 public <identifier> <identifiersep> executor ( int max <identifiersep> threads , string prefix ) { \n \t3 super ( max <identifiersep> threads , max <identifiersep> threads , 0 , time <identifiersep> unit . milliseconds , \n \t5 new linked <identifiersep> blocking <identifiersep> queue < runnable > ( ) , new default <identifiersep> thread <identifiersep> factory ( prefix ) ) ; \n <ect>
\t4 log . debug ( <string_literal> ) ; \n \t4 cache <identifiersep> entry = existing <identifiersep> entry ; \n \t3 } else { \n \t4 cache <identifiersep> entry = response <identifiersep> cache . create <identifiersep> cache <identifiersep> entry ( target , request , backend <identifiersep> response , buf , request <identifiersep> sent , response <identifiersep> received ) ; \n <ect>
\t2 log . info ( <string_literal> + entry . get <identifiersep> key ( ) ) ; \n \t2 try { \n \t2 wal <identifiersep> marker . forget ( entry . get <identifiersep> key ( ) ) ; \n \t2 } catch ( wal <identifiersep> marker <identifiersep> exception ex ) { \n <ect>
\t2 if ( <identifier> <identifiersep> pifs . get ( <string_literal> ) == null ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + guest <identifiersep> bridge <identifiersep> name + <string_literal> ) ; \n \t3 final file dev = new file ( <string_literal> + guest <identifiersep> bridge <identifiersep> name ) ; \n \t3 if ( dev . exists ( ) ) { \n <ect>
\t6 <identifier> <identifiersep> log . error ( <string_literal> ) ; \n \t6 <identifier> . reset ( ) ; \n \t6 continue ; } \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 return vm <identifiersep> states ; } \n \t2 try { \n \t3 ids = conn . list <identifiersep> domains ( ) ; \n \t2 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t4 process <identifiersep> location <identifiersep> report ( serial <identifiersep> message , offset , endpoint ) ; \n \t4 <identifier> <identifiersep> location = true ; \n \t4 break ; \n \t3 default : \n <ect>
\t2 bus <identifiersep> command = bus <identifiersep> command . unknown ; } \n \t1 switch ( bus <identifiersep> command ) { \n \t2 case remote <identifiersep> subscribe : \n \t2 if ( message . has <identifiersep> part ( message <identifiersep> parts . <identifier> <identifiersep> list ) ) { \n <ect>
<comment> \n public class wrapped <identifiersep> key <identifiersep> test extends wrapped <identifiersep> key <identifiersep> test <identifiersep> common { \n \t1 @ test \n \t1 public void test <identifiersep> wrapped <identifiersep> key <identifiersep> object ( ) throws exception { \n <ect>
\t3 return ! condition ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> field <identifiersep> exception e ) { \n <ect>
\t5 { \n \t6 match <identifiersep> result range = token <identifiersep> scanner . match ( ) ; \n \t6 token start <identifiersep> token = factory . from <identifiersep> string ( range . group ( 1 ) ) ; \n \t6 token end <identifiersep> token = factory . from <identifiersep> string ( range . group ( <number_literal> ) ) ; \n <ect>
\t2 } catch ( interrupted <identifiersep> exception | runtime <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t3 fail ( e ) ; \n \t2 } catch ( broken <identifiersep> barrier <identifiersep> exception e ) { \n <ect>
\t3 logger . warn ( <string_literal> , event . get <identifiersep> node <identifiersep> id ( ) , \n \t5 item . get <identifiersep> name ( ) ) ; \n \t3 return ; } \n \t2 if ( ! arguments . contains <identifiersep> key ( <string_literal> ) ) { \n <ect>
\t2 context . get <identifiersep> integer ( overflow <identifiersep> timeout , default <identifiersep> overflow <identifiersep> timeout ) ; \n \t1 overflow <identifiersep> timeout = ( new <identifiersep> overflow <identifiersep> timeout != null ) ? new <identifiersep> overflow <identifiersep> timeout \n \t2 : default <identifiersep> overflow <identifiersep> timeout ; \n \t1 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t4 throw new runtime <identifiersep> exception ( string . format ( <string_literal> , auth <identifiersep> server <identifiersep> backend ) ) ; } \n \t3 boolean cache <identifiersep> server <identifiersep> lifecycle <identifiersep> skip = boolean . parse <identifiersep> boolean ( system . get <identifiersep> property ( <string_literal> ) ) ; \n \t3 if ( suite <identifiersep> context . get <identifiersep> cache <identifiersep> servers <identifiersep> info ( ) . is <identifiersep> empty ( ) && ! cache <identifiersep> server <identifiersep> lifecycle <identifiersep> skip ) { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t2 if ( registry . is <identifiersep> <identifier> ( ) && registry . get <identifiersep> <identifier> <identifiersep> plugins <identifiersep> dir ( ) != null ) { \n \t3 logger . debug ( <string_literal> + registry . get <identifiersep> <identifier> <identifiersep> plugins <identifiersep> dir ( ) . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 file vs <identifiersep> filter <identifiersep> <identifier> = new file ( registry . get <identifiersep> <identifier> <identifiersep> plugins <identifiersep> dir ( ) , <string_literal> ) ; \n \t3 if ( vs <identifiersep> filter <identifiersep> <identifier> . exists ( ) ) { \n <ect>
\t5 return false ; } \n \t4 try { \n \t5 permissions = new file <identifiersep> permissions ( path ) ; \n \t4 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e1 ) { \n <ect>
\t2 final big <identifiersep> integer interval <identifiersep> bi ; \n \t2 try { \n \t3 interval <identifiersep> bi = diff <identifiersep> bi . <identifier> ( splits <identifiersep> bi ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 . add ( new <identifiersep> node ( <string_literal> , singleton <identifiersep> map ( <string_literal> , <string_literal> ) ) ) \n \t2 ) . build ( ) ; \n \t2 cluster <identifiersep> state = strategy . reroute ( cluster <identifiersep> state , <string_literal> ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n <ect>
\t9 self . services [ <string_literal> ] \n \t9 ) \n \t2 self . cleanup . append ( vpc <identifiersep> off <identifiersep> <number_literal> ) \n \t2 self . validate <identifiersep> vpc <identifiersep> offering ( vpc <identifiersep> off <identifiersep> <number_literal> ) \n <ect>
\t1 { \n \t2 <comment> \n \t2 if ( parent <identifiersep> operation <identifiersep> set == null ) { \n <ect>
\t4 return new fence <identifiersep> answer ( command , false , <string_literal> ) ; \n \t3 } else { \n \t4 return new fence <identifiersep> answer ( command ) ; } \n \t2 } catch ( final interrupted <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , e ) ; } \n \t2 try { \n \t3 thread . sleep ( <number_literal> ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 items . add ( item ) ; \n \t4 if ( ++ n >= num ) { \n \t5 break ; } } \n \t2 } catch ( exception ex ) { \n <ect>
\t2 <identifier> . flush ( ) ; \n \t2 int cmd = <identifier> . read <identifiersep> int ( ) ; \n \t2 int resp = <identifier> . read <identifiersep> int ( ) ; \n \t2 if ( cmd != <number_literal> ) { \n <ect>
\t6 break ; } \n \t5 <comment> \n \t5 string tmp = key . substring ( 0 , index ) ; \n \t5 if ( ! tmp . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) && ! tmp . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n <ect>
\t3 <identifier> . rollback ( transaction <identifiersep> owner ) ; \n \t2 } catch ( exception rollback <identifiersep> error ) { \n \t3 string error <identifiersep> message = <string_literal> + rollback <identifiersep> error . get <identifiersep> message ( ) + <string_literal> + cause . get <identifiersep> message ( ) ; \n \t3 <comment> \n <ect>
\t3 } catch ( concurrent <identifiersep> operation <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> , e ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , e ) ; \n \t3 } catch ( storage <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t1 protected string get <identifiersep> mail <identifiersep> subject ( final job <identifiersep> execution <identifiersep> context <identifier> ) \n \t1 { \n \t2 string subject <identifiersep> template = ( string ) localizer ( ) . value <identifiersep> for <identifiersep> key ( <string_literal> ) ; \n <ect>
\t5 } else if ( command . equals ( on <identifiersep> off <identifiersep> type . off ) || command . equals ( up <identifiersep> down <identifiersep> type . down ) ) { \n \t6 <identifier> <identifiersep> online <identifiersep> data . execute <identifiersep> my <identifiersep> q <identifiersep> command ( <identifier> . get <identifiersep> device <identifiersep> id ( ) , <string_literal> , 0 ) ; \n \t6 begin <identifiersep> <identifier> <identifiersep> poll ( true ) ; \n \t5 } else { \n <ect>
\t5 <comment> \n \t5 scale <identifiersep> index | = ( ( serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset + 1 ) & <identifier> ) > > <identifier> ) ; } \n \t4 scale = meter <identifiersep> scale . get <identifiersep> meter <identifiersep> scale ( meter <identifiersep> type , scale <identifiersep> index ) ; \n \t4 if ( scale == null ) { \n <ect>
@ override \n public string check <identifiersep> user <identifiersep> attributes ( string test <identifiersep> user <identifiersep> name , string test <identifiersep> password , ambari <identifiersep> ldap <identifiersep> configuration ambari <identifiersep> ldap <identifiersep> configuration ) throws ambari <identifiersep> ldap <identifiersep> exception { \n \t1 string user <identifiersep> dn ; \n \t1 try { \n <ect>
\t4 <identifier> <identifiersep> <identifier> <identifiersep> feature <identifiersep> handler handler = create <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> feature <identifiersep> handler ( ) ; \n \t4 handler . set <identifiersep> <identifier> ( this ) ; \n \t4 return handler ; \n \t3 } else { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 @ override \n \t2 public <identifier> < long > reduce ( <identifier> < long > value1 , <identifier> < long > value2 ) { \n \t3 count ++ ; \n \t3 if ( count >= failure <identifiersep> pos && get <identifiersep> runtime <identifiersep> context ( ) . get <identifiersep> index <identifiersep> of <identifiersep> this <identifiersep> <identifier> ( ) == 0 ) { \n <ect>
\t3 for ( file f : files ) { \n \t4 if ( ! f . get <identifiersep> name ( ) . starts <identifiersep> with ( <string_literal> ) ) { <comment> \n \t5 try { \n \t6 module mod = module <identifiersep> factory . load <identifiersep> module ( f ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void handle <identifiersep> application <identifiersep> command <identifiersep> request ( serial <identifiersep> message serial <identifiersep> message , int offset , int endpoint ) { \n \t2 logger . trace ( <string_literal> ) ; \n <ect>
\t3 unmarshaller . set <identifiersep> schema ( schema ) ; \n \t3 unmarshaller . set <identifiersep> event <identifiersep> handler ( new validation <identifiersep> event <identifiersep> handler ( ) { \n \t4 @ override \n \t4 public boolean handle <identifiersep> event ( validation <identifiersep> event event ) { \n <ect>
\t2 } else if ( is <identifiersep> ready ) { \n \t2 logger . info ( <string_literal> ) \n \t2 run <identifiersep> jobs ( ) } \n \t2 if ( num <identifiersep> missing <identifiersep> values > 0 ) { \n <ect>
\t2 return <identifier> <identifiersep> order . side . <identifier> ; \n \t1 case ask : \n \t2 return <identifier> <identifiersep> order . side . <identifier> ; \n \t1 default : \n <ect>
\t2 bean . set <identifiersep> algorithm ( this . key <identifiersep> algorithm ) ; \n \t2 logger . debug ( <string_literal> , \n \t3 bean . get <identifiersep> location ( ) , bean . get <identifiersep> algorithm ( ) ) ; \n \t2 bean . after <identifiersep> properties <identifiersep> set ( ) ; \n <ect>
\t2 record . add <identifiersep> content ( new element ( <string_literal> ) . set <identifiersep> text ( content ) ) ; \n \t2 root <identifiersep> node . add <identifiersep> content ( record ) ; \n \t2 xml <identifiersep> output . output ( doc , new file <identifiersep> writer ( configuration <identifiersep> check <identifiersep> implementation . get <identifiersep> home <identifiersep> dir ( ) + <string_literal> ) ) ; \n \t1 } catch ( jdom <identifiersep> exception e ) { \n <ect>
\t6 for ( final pbd pbd : <identifier> ) { \n \t7 s <identifiersep> logger . trace ( log <identifiersep> x ( pbd , <string_literal> ) ) ; } } } \n \t3 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t3 if ( ! username . equals ( user <identifiersep> info . get ( <string_literal> ) ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + <string_literal> + url ) ; \n \t4 return - 1 ; } \n \t2 } else { \n <ect>
\t6 done . count <identifiersep> down ( ) ; \n \t6 log . debug ( <string_literal> ) ; } } \n \t3 } . start ( ) ; } \n \t2 <comment> \n <ect>
\t3 if ( vars != null ) { <comment> \n \t4 vars . put ( variable <identifiersep> name , date <identifiersep> string ) ; } } \n \t2 return date <identifiersep> string ; } \n \t1 private date <identifiersep> time <identifiersep> formatter create <identifiersep> formatter ( locale <identifiersep> format <identifiersep> object format ) { \n <ect>
\t2 boolean has <identifiersep> log4j = new file ( working <identifiersep> directory , <string_literal> ) . exists ( ) ; \n \t2 string launch <identifiersep> command = bootstrap <identifiersep> tools . get <identifiersep> task <identifiersep> manager <identifiersep> shell <identifiersep> command ( \n \t4 flink <identifiersep> config , tm <identifiersep> params , <string_literal> , application <identifiersep> constants . log <identifiersep> dir <identifiersep> expansion <identifiersep> var , \n \t4 has <identifiersep> logback , has <identifiersep> log4j , has <identifiersep> <identifier> , task <identifiersep> manager <identifiersep> main <identifiersep> class ) ; \n <ect>
\t2 if ( null == key <identifiersep> manager ) { \n \t3 log . warning ( <string_literal> ) ; } \n \t2 close <identifiersep> default <identifiersep> key <identifiersep> manager ( ) ; \n \t2 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> keys , level . info ) ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 eviction <identifiersep> thread <identifiersep> pool . schedule <identifiersep> at <identifiersep> fixed <identifiersep> rate ( new background <identifiersep> eviction <identifiersep> task ( 0 ) , \n \t5 i , \n \t5 eviction <identifiersep> thread <identifiersep> sleep <identifiersep> millis , \n \t5 time <identifiersep> unit . milliseconds ) ; } \n <ect>
\t7 if ( <identifier> != null ) { \n \t8 string alias = mr <identifiersep> script <identifiersep> state . get ( ) . get <identifiersep> alias ( <identifier> ) ; \n \t8 log . info ( <string_literal> + alias ) ; \n \t8 string alias <identifiersep> location = mr <identifiersep> script <identifiersep> state . get ( ) . get <identifiersep> alias <identifiersep> location ( <identifier> ) ; \n <ect>
\t2 work <identifiersep> item <identifiersep> producer . send ( master <identifiersep> session \n \t4 . create <identifiersep> object <identifiersep> message ( new work <identifiersep> message ( 1 ) ) ) ; \n \t2 if ( ! latch . get ( ) . await ( wait <identifiersep> timeout , time <identifiersep> unit . milliseconds ) ) { \n \t3 fail ( <string_literal> + acks <identifiersep> received + <string_literal> ) ; } \n <ect>
\t4 mapper . send ( collections . singleton <identifiersep> map ( new test <identifiersep> job ( ) , ( grid <identifiersep> node ) null ) ) ; \n \t4 assert false ; } \n \t3 catch ( grid <identifiersep> exception e ) { \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 if ( exception <identifiersep> utils . get <identifiersep> root <identifiersep> cause <identifiersep> message ( e ) . equals ( <string_literal> ) ) { \n \t7 return null ; } \n <ect>
\t5 } else { \n \t6 failure <identifiersep> cause = new jms <identifiersep> exception ( cause . get <identifiersep> message ( ) ) ; } \n \t5 pending <identifiersep> request . on <identifiersep> failure ( failure <identifiersep> cause ) ; \n \t4 } else { \n <ect>
\t4 temporary <identifiersep> topics . add ( topic ) ; } \n \t3 else { \n \t4 temporary <identifiersep> topics . remove ( topic ) ; } } \n \t2 else { \n <ect>
\t2 try { \n \t3 shutdown <identifiersep> all <identifiersep> tasks ( ) ; \n \t3 cancel <identifiersep> all <identifiersep> <identifier> ( ) ; <comment> \n \t2 catch ( api <identifiersep> exception e ) { \n <ect>
\t2 if ( h <identifiersep> base <identifiersep> master <identifiersep> active <identifiersep> count > 0 ) { \n \t2 return state . started ; } \n \t2 return non <identifiersep> started <identifiersep> state == null ? state . installed : non <identifiersep> started <identifiersep> state ; } \n \t1 } catch ( ambari <identifiersep> exception e ) { \n <ect>
\t2 if ( num <identifiersep> rows <identifiersep> used == 0 ) { \n \t3 if ( ! double . is <identifiersep> <identifier> ( value ) && ! double . is <identifiersep> na <identifiersep> n ( value ) ) { \n \t4 return value ; \n \t3 } else { \n <ect>
\t2 this . query <identifiersep> definition = new derived <identifiersep> query <identifiersep> creator ( tree , domain <identifiersep> type ) . create <identifiersep> query ( ) ; } \n \t1 @ override \n \t1 protected object do <identifiersep> execute ( query params , object [ ] parameters ) { \n <ect>
\t4 <identifier> . close ( ) ; } } \n \t2 <comment> \n \t2 final file <identifier> = get <identifiersep> output <identifiersep> file ( this . output <identifiersep> prefix , 1 , file <identifiersep> index ) ; \n \t2 <identifier> = new binary <identifiersep> codec ( io <identifiersep> util . open <identifiersep> file <identifiersep> for <identifiersep> writing ( <identifier> ) ) ; \n <ect>
\t4 <identifier> . on <identifiersep> started ( this ) ; \n \t3 body ( ) ; } \n \t2 catch ( grid <identifiersep> interrupted <identifiersep> exception e ) { \n <ect>
\t4 do <identifiersep> expr <identifiersep> override = true ; \n \t4 fake <identifiersep> params . put ( full <identifiersep> field <identifiersep> name , escape ( tmp <identifiersep> value ) ) ; \n \t3 } else { \n \t4 <comment> \n <ect>
\t7 in . add ( rs . get <identifiersep> string ( 1 ) ) ; } } } \n \t4 con . commit ( ) ; \n \t4 index <identifiersep> names = in ; \n \t3 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t2 + <string_literal> ) ; } \n \t1 log . info ( <string_literal> ) ; \n \t1 if ( options . get <identifiersep> file <identifiersep> layout ( ) != sqoop <identifiersep> options . file <identifiersep> layout . text <identifiersep> file ) { \n \t1 <comment> \n <ect>
\t3 } catch ( sql <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t4 operation <identifiersep> failed <identifiersep> exception . network <identifiersep> failure , \n \t4 ex , \n \t4 logger ) ; } \n <ect>
\t4 { \n \t5 exe <identifiersep> process . wait <identifiersep> for <identifiersep> exit ( ) ; } } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bundle <identifiersep> context ) throws exception { \n \t2 heat <identifiersep> pump <identifiersep> activator . context = null ; \n <ect>
\t4 } catch ( exception e1 ) { \n \t5 log . debug ( <string_literal> + cls + <string_literal> + option , e ) ; \n \t5 return <string_literal> ; } \n \t3 } else { \n <ect>
\t6 log . warn ( <string_literal> + entry . get <identifiersep> blocked <identifiersep> thread ( ) . get <identifiersep> name ( ) + <string_literal> , e ) ; } } \n \t3 } else { \n \t4 log . warn ( <string_literal> + sb . to <identifiersep> string ( ) ) ; } \n \t2 } else { \n <ect>
\t2 try { \n \t3 final abstract <identifiersep> command msg = ( abstract <identifiersep> command ) command . new <identifiersep> instance ( ) ; \n \t3 command <identifiersep> set . put ( msg . get <identifiersep> command ( ) , command ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t4 log . debug ( <string_literal> ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 log . error ( <string_literal> ) ; \n \t3 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t4 running <identifiersep> put <identifiersep> handlers . remove ( this ) ; \n \t4 if ( put <identifiersep> handlers <identifiersep> waiting <identifiersep> for <identifiersep> metadata . remove ( this ) ) { \n \t5 logger . error ( this , <string_literal> + this . item <identifiersep> name + <string_literal> + this + <string_literal> + base <identifiersep> manifest <identifiersep> putter . this , new error ( <string_literal> ) ) ; } \n \t4 if ( put <identifiersep> handler <identifiersep> waiting <identifiersep> for <identifiersep> block <identifiersep> sets . remove ( this ) ) { \n <ect>
\t1 } catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error e ) { \n \t1 <comment> \n \t1 return new selendroid <identifiersep> response ( get <identifiersep> session <identifiersep> id ( request ) , status <identifiersep> code . unknown <identifiersep> command , e ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 if ( this . uri != null && ! this . uri . is <identifiersep> empty ( ) ) { \n \t3 try { \n \t4 factory . set <identifiersep> uri ( this . uri ) ; \n \t3 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t3 return ; } \n \t2 if ( req instanceof client <identifiersep> get ) { \n \t3 <identifier> <identifiersep> uri uri = ( ( client <identifiersep> get ) req ) . get <identifiersep> uri ( ) ; \n \t3 if ( uri == null ) { \n <ect>
\t1 @ activate \n \t1 protected void activate ( component <identifiersep> context context , map < string , object > config ) { \n \t2 string home <identifiersep> dir = lookup ( context , prop <identifiersep> home ) ; \n \t2 if ( home <identifiersep> dir != null ) { \n <ect>
\t1 if ( success ) { \n \t1 operation <identifiersep> mode = operation <identifiersep> mode <identifiersep> stopped ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 } else { \n <ect>
\t6 page <identifiersep> names . add ( get <identifiersep> compact <identifiersep> entity <identifiersep> reference <identifiersep> serializer ( ) . serialize ( document <identifiersep> reference ) ) ; } } } \n \t3 return page <identifiersep> names ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t4 failure = cause ; } } \n \t2 <comment> \n \t2 if ( ! ( failure instanceof index <identifiersep> entry <identifiersep> conflict <identifiersep> exception ) ) \n \t2 { \n <ect>
\t2 double <identifier> = <identifier> <identifiersep> <identifier> ( new <identifiersep> key <identifiersep> count ) ; \n \t2 assert <identifier> < 1 : <string_literal> ; \n \t2 if ( <identifier> >= 0 . <number_literal> ) { \n \t2 log . warn ( <string_literal> ) ; } \n <ect>
\t2 snapshot <identifiersep> info snapshot = context . snapshot ; \n \t2 snapshot <identifiersep> result res = null ; \n \t2 try { \n \t3 if ( result . is <identifiersep> failed ( ) ) { \n <ect>
\t2 linked <identifiersep> list < candidate <identifiersep> element > results = new linked <identifiersep> list < > ( ) ; \n \t2 if ( ! checked <identifiersep> elements . check <identifiersep> crawl <identifiersep> condition ( browser ) ) { \n \t3 log . info ( <string_literal> , current <identifiersep> state . get <identifiersep> name ( ) ) ; \n \t3 return immutable <identifiersep> list . of ( ) ; } \n <ect>
\t3 if ( <identifier> != null ) { \n \t4 while ( <identifier> . get <identifiersep> <identifier> ( ) . contains ( ability ) ) { \n \t5 if ( ! <identifier> . get <identifiersep> <identifier> ( ) . remove ( ability ) ) { \n \t6 <comment> \n <ect>
\t4 return null ; } \n \t3 try { \n \t4 return new url ( hook <identifiersep> url ) ; \n \t3 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t2 int id = get <identifiersep> unique <identifiersep> id ( ) ; \n \t2 thread putter = new thread ( new put <identifiersep> server ( count , id ) ) ; \n \t2 thread getter = new thread ( new get <identifiersep> thread ( count , id ) ) ; \n \t2 generic <identifiersep> get <identifiersep> put ( putter , getter ) ; \n <ect>
\t3 cf . set <identifiersep> compression <identifiersep> type ( algorithm . <identifier> ) ; \n \t3 break ; } \n \t2 case <string_literal> : \n \t2 case <string_literal> : { \n <ect>
\t3 connection = get <identifiersep> data <identifiersep> source ( ) . get <identifiersep> connection ( ) ; \n \t3 if ( ! connection . is <identifiersep> valid ( <number_literal> ) ) { \n \t4 throw new io <identifiersep> exception ( <string_literal> + connection ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 if ( forced <identifiersep> data <identifiersep> type != null ) { \n \t5 <comment> \n \t5 if ( custom <identifiersep> type != null ) \n <ect>
\t2 secret <identifiersep> manager . add <identifiersep> key ( new <identifiersep> key ) ; \n \t2 break ; \n \t1 case node <identifiersep> children <identifiersep> changed : \n \t2 <comment> \n <ect>
\t3 if ( ! ssh <identifiersep> cmd <identifiersep> helper . ssh <identifiersep> execute <identifiersep> cmd ( ssh <identifiersep> connection , cmd ) ) { \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + computing <identifiersep> host <identifiersep> ip + <string_literal> + <identifier> <identifiersep> host . get <identifiersep> ip ( ) ) ; } \n \t3 return true ; \n \t2 } catch ( final exception e ) { \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> blank ( id ) ) { \n \t3 if ( provider <identifiersep> map . size ( ) == 1 ) { \n \t4 id = provider <identifiersep> map . values ( ) . iterator ( ) . next ( ) . get <identifiersep> id ( ) ; \n \t3 } else { \n <ect>
\t1 public void add <identifiersep> event <identifiersep> listener ( <identifier> <identifiersep> com <identifiersep> event <identifiersep> listener listener ) { \n \t2 logger . error ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void remove <identifiersep> event <identifiersep> listener ( <identifier> <identifiersep> com <identifiersep> event <identifiersep> listener listener ) { \n <ect>
\t2 string output <identifiersep> file <identifiersep> name = resource <identifiersep> name . substring ( resource <identifiersep> name . last <identifiersep> index <identifiersep> of ( <string_literal> ) + 1 ) ; \n \t2 try { \n \t3 output <identifiersep> file <identifiersep> name = configuration . get <identifiersep> temp <identifiersep> folder ( ) + <string_literal> + output <identifiersep> file <identifiersep> name ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 private t create <identifiersep> type <identifiersep> from <identifiersep> string ( string value ) { \n \t2 try { \n \t3 return create <identifiersep> type ( new big <identifiersep> decimal ( value ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t2 try { \n \t2 <identifier> . configure ( channel , comp ) ; \n \t2 channel <identifiersep> component <identifiersep> map . put ( comp . get <identifiersep> component <identifiersep> name ( ) , \n \t3 new channel <identifiersep> component ( channel ) ) ; \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 return encrypted <identifiersep> encoded <identifiersep> text . replace <identifiersep> all ( <string_literal> , <string_literal> ) ; } \n \t3 if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t1 if ( t instanceof error ) { \n \t1 throw ( error ) t ; <comment> \n \t1 if ( is <identifiersep> production <identifiersep> mode ( ) ) { \n \t1 if ( ! is <identifiersep> recoverable <identifiersep> exception ( t ) ) { \n <ect>
\t4 object return <identifiersep> value = entity <identifiersep> extractor <identifiersep> method . invoke ( entity <identifiersep> extractor , url <identifiersep> parameters ) ; \n \t4 <identifier> = return <identifiersep> value . to <identifiersep> string ( ) ; \n \t3 } else { \n \t4 logger . info ( <string_literal> + extraction <identifiersep> url ) ; \n <ect>
\t1 http <identifiersep> request current = command . get <identifiersep> current <identifiersep> request ( ) ; \n \t1 uri redirect = uri . create ( location ) ; \n \t1 if ( ! redirect . is <identifiersep> absolute ( ) ) { \n \t2 if ( redirect . get <identifiersep> path ( ) == null ) { \n <ect>
\t3 if ( entries . size ( ) > 0 ) { \n \t4 logger . debug ( <string_literal> , entries . size ( ) ) ; \n \t4 try { \n \t5 if ( scheduler . is <identifiersep> shutdown ( ) ) { \n <ect>
public int read <identifiersep> <identifier> ( ) throws t <identifiersep> exception { \n \t1 log . debug ( <string_literal> ) ; \n \t1 return next ( ) . read <identifiersep> <identifier> ( ) ; } \n public long read <identifiersep> <identifier> ( ) throws t <identifiersep> exception { \n <ect>
\t1 scheduled <identifiersep> executor <identifiersep> service . schedule <identifiersep> with <identifiersep> fixed <identifiersep> delay ( timeline <identifiersep> metrics <identifiersep> collector , 0 , \n \t2 poll <identifiersep> frequency , time <identifiersep> unit . milliseconds ) ; } \n @ override \n public void stop ( ) { \n <ect>
\t2 private void log <identifiersep> new <identifiersep> entry ( ) \n \t2 { \n \t4 if ( parents == null || parents . size ( ) == 0 ) { \n <ect>
<comment> \n \t1 public static byte [ ] prepare <identifiersep> content ( final content <identifiersep> name name , final signed <identifiersep> info signed <identifiersep> info , final byte [ ] content , int start , int length ) throws content <identifiersep> encoding <identifiersep> exception { \n \t2 if ( ( null == name ) || ( null == signed <identifiersep> info ) ) { \n <ect>
\t3 final authentication authentication = web <identifiersep> utils . get <identifiersep> in <identifiersep> progress <identifiersep> authentication ( ) ; \n \t3 if ( authentication == null ) { \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t3 final principal principal = authentication . get <identifiersep> principal ( ) ; \n <ect>
\t5 critical <identifiersep> <identifier> , <identifier> , option <identifiersep> one <identifiersep> global <identifiersep> lock , \n \t5 option <identifiersep> leave <identifiersep> original <identifiersep> locks , option <identifiersep> include <identifiersep> empty <identifiersep> possible <identifiersep> edges ) ; \n \t2 <identifier> <identifiersep> graph = <identifier> ; <comment> \n \t2 <comment> \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 tick ( ) ; \n \t4 } catch ( runtime <identifiersep> exception e ) { \n <ect>
public org <identifiersep> and <identifiersep> name apply ( node <identifiersep> metadata from ) { \n \t1 if ( from . get <identifiersep> group ( ) != null ) { \n \t2 org org = client . find <identifiersep> org <identifiersep> named ( <identifier> <identifiersep> to <identifiersep> org . get ( ) . get ( from . get <identifiersep> location ( ) . get <identifiersep> id ( ) ) ) ; \n \t2 if ( org == null ) { \n <ect>
\t2 collections . sort ( items , collections . reverse <identifiersep> order ( ) ) ; } \n <comment> \n <comment> \n <comment> \n <ect>
\t1 <comment> \n \t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . <identifier> + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n \t1 test <identifiersep> txn <identifiersep> <identifier> . run <identifiersep> worker ( hive <identifiersep> conf ) ; \n \t1 rs = run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . <identifier> + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n <ect>
\t6 jms <identifiersep> exception jms <identifiersep> ex = null ; \n \t6 try { \n \t7 jms <identifiersep> ex = jms <identifiersep> exception <identifiersep> support . create ( er . get <identifiersep> exception ( ) ) ; \n \t6 } catch ( throwable e ) { \n <ect>
\t4 return ; } \n \t3 timer <identifiersep> event event = new timer <identifiersep> event ( op <identifiersep> code , object ) ; \n \t3 queue . publish ( event , block ) ; \n \t2 } catch ( insufficient <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 string blocked <identifiersep> node = block <identifiersep> node <identifiersep> with <identifiersep> index ( <string_literal> , <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 client . admin ( ) . cluster ( ) . prepare <identifiersep> create <identifiersep> snapshot ( <string_literal> , <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( false ) . set <identifiersep> indices ( <string_literal> ) . get ( ) ; \n <ect>
\t6 error ( \n \t7 <string_literal> , \n \t7 get <identifiersep> <identifier> ( ) , get <identifiersep> version ( ) , phase . staging , descriptor . phase ) ; \n \t6 return ; } } } \n <ect>
private void wait <identifiersep> for <identifiersep> job ( job job ) throws interrupted <identifiersep> exception , io <identifiersep> exception { \n \t1 while ( ! job . is <identifiersep> complete ( ) ) { \n \t1 log . debug ( <string_literal> , job . get <identifiersep> job <identifiersep> name ( ) ) ; \n \t1 sleep ( <number_literal> ) ; } \n <ect>
\t5 { \n \t6 <identifier> += <identifier> <identifiersep> stream . get <identifiersep> output <identifiersep> bitrate ( now ) ; } } } \n \t3 catch ( io <identifiersep> exception ioe ) \n \t3 { \n <ect>
\t2 if ( ! map <identifiersep> agg <identifiersep> disabled ( ) ) { \n \t3 int num <identifiersep> before <identifiersep> <identifier> = num <identifiersep> <identifier> <identifiersep> in <identifiersep> processed <identifiersep> map + num <identifiersep> <identifier> <identifiersep> in <identifiersep> raw <identifiersep> map ; \n \t3 aggregate <identifiersep> both <identifiersep> levels ( false , false ) ; \n \t3 int num <identifiersep> after <identifiersep> <identifier> = num <identifiersep> <identifier> <identifiersep> in <identifiersep> processed <identifiersep> map + num <identifiersep> <identifier> <identifiersep> in <identifiersep> raw <identifiersep> map ; \n <ect>
\t2 logger . debug ( <string_literal> + item <identifiersep> data ) ; \n \t2 command <identifiersep> <identifier> command = item <identifiersep> data . get <identifiersep> command ( ) ; \n \t2 logger . debug ( <string_literal> + command ) ; \n \t2 <identifier> <identifiersep> command <identifiersep> <identifier> < t > <identifier> <identifiersep> command = get <identifiersep> <identifier> <identifiersep> command ( command ) ; \n <ect>
\t2 try { \n \t2 final static <identifiersep> database <identifiersep> property <identifiersep> entry property = entities . criteria <identifiersep> query ( static <identifiersep> database <identifiersep> property <identifiersep> entry . class ) . \n \t3 where <identifiersep> equal ( static <identifiersep> database <identifiersep> property <identifiersep> entry <identifiersep> <identifier> . prop <identifiersep> name , <string_literal> ) \n \t3 . unique <identifiersep> result ( ) ; \n <ect>
\t1 final public void leave <identifiersep> critical <identifiersep> section ( ) \n \t1 { \n \t2 lock <identifiersep> state state = get <identifiersep> lock <identifiersep> state ( ) ; \n <ect>
\t3 process process = new process <identifiersep> builder ( <identifier> , <string_literal> ) . start ( ) ; \n \t3 erx <identifiersep> file <identifiersep> utilities . write <identifiersep> input <identifiersep> stream <identifiersep> to <identifiersep> output <identifiersep> stream ( input <identifiersep> stream , process . get <identifiersep> output <identifiersep> stream ( ) ) ; \n \t3 status = process . wait <identifiersep> for ( ) ; \n \t3 if ( status > 1 ) { \n <ect>
\t4 property = property . trim ( ) ; \n \t4 try { \n \t5 this . slow <identifiersep> sql <identifiersep> millis = long . parse <identifiersep> long ( property ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 @ override \n \t2 public void on <identifiersep> success ( command <identifiersep> message < ? > command <identifiersep> message , object result ) { } \n \t2 @ override \n \t2 public void on <identifiersep> failure ( command <identifiersep> message < ? > command <identifiersep> message , throwable cause ) { \n <ect>
\t4 int port = <identifier> . next ( ) . int <identifiersep> value ( ) ; \n \t4 try { \n \t5 this . udp <identifiersep> monitor <identifiersep> threads . add ( new udp <identifiersep> socket <identifiersep> monitor ( this , addr , port ) ) ; \n \t4 } catch ( socket <identifiersep> exception e ) { \n <ect>
\t2 host <identifiersep> vo nuage <identifiersep> vsp <identifiersep> host = <identifier> <identifiersep> nuage <identifiersep> vsp <identifiersep> manager . get <identifiersep> nuage <identifiersep> vsp <identifiersep> host ( <identifier> <identifiersep> network . get <identifiersep> physical <identifiersep> network <identifiersep> id ( ) ) ; \n \t2 implement <identifiersep> network <identifiersep> vsp <identifiersep> command cmd = new implement <identifiersep> network <identifiersep> vsp <identifiersep> command ( vsp <identifiersep> network , null , true ) ; \n \t2 answer answer = <identifier> <identifiersep> agent <identifiersep> mgr . <identifier> <identifiersep> send ( nuage <identifiersep> vsp <identifiersep> host . get <identifiersep> id ( ) , cmd ) ; \n \t2 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n <ect>
<number_literal> node , broadcast <identifiersep> event , e ) ; \n \t10 sync <identifiersep> error <identifiersep> handler . handle <identifiersep> <identifier> <identifiersep> error ( node , rest <identifiersep> client , broadcast <identifiersep> event ) ; } } \n \t7 } ) ; } \n \t5 } catch ( exception e ) { \n <ect>
\t2 connection <identifiersep> manager . check <identifiersep> connection <identifiersep> info ( ) ; \n \t1 } catch ( connection <identifiersep> info <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t2 log . warn ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t2 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n <ect>
\t1 } else { \n \t2 throw new illegal <identifiersep> argument <identifiersep> exception ( serializer <identifiersep> clazz \n \t3 + <string_literal> ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t2 if ( node <identifiersep> store <identifiersep> provider == null ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( context == null ) { \n <ect>
\t4 try { \n \t5 for ( int i = 0 ; i < <number_literal> ; i ++ ) \n \t6 writer . write ( new <identifier> <identifiersep> entry <identifiersep> impl ( k ( m , i ) , v ( m , i ) , null , marshaller ( ) ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t6 } catch ( final io <identifiersep> exception ex ) { \n \t7 <comment> \n \t7 final logger log = logger <identifiersep> factory . get <identifiersep> logger ( public <identifiersep> suffix <identifiersep> matcher <identifiersep> loader . class ) ; \n <ect>
\t2 <identifier> <identifiersep> pool <identifiersep> dao . update ( pool . get <identifiersep> id ( ) , pool ) ; } \n \t1 @ override \n \t1 public void delete <identifiersep> pool ( string pool <identifiersep> name ) throws invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception , resource <identifiersep> in <identifiersep> use <identifiersep> exception { \n <ect>
\t3 <comment> \n \t3 if ( context . is <identifiersep> active ( ) ) { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + arrays . as <identifiersep> list ( <identifier> ) + <string_literal> + context \n \t5 + <string_literal> ) ; } \n <ect>
\t1 root . log ( level . fatal , <string_literal> + i ) ; \t1 \n \t1 exception e = new exception ( <string_literal> ) ; \n \t1 logger . debug ( <string_literal> + ++ i , e ) ; \n \t1 root . debug ( <string_literal> + i , e ) ; \n <ect>
\t6 log . info ( <string_literal> + rsrc3 ) ; \n \t6 log . info ( <string_literal> + rsrc4 ) ; \n \t6 log . info ( <string_literal> + rsrc5 ) ; \n \t6 log . info ( <string_literal> + rsrc6 ) ; \n <ect>
\t6 string data = exchange . get <identifiersep> context ( ) . get <identifiersep> type <identifiersep> converter ( ) . convert <identifiersep> to ( string . class , body ) ; \n \t7 log . debug ( <string_literal> ) ; \n \t7 log . debug ( <string_literal> ) ; \n <ect>
\t2 connection . start ( ) ; \n \t2 session <identifier> = connection . create <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n \t2 consumer = <identifier> . create <identifiersep> consumer ( destination ) ; \n \t2 msg = consumer . receive ( <number_literal> ) ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t5 if ( version . to <identifiersep> lower <identifiersep> case ( ) . contains ( db <identifiersep> product ) ) { \n \t6 logger . info ( \n \t7 <string_literal> + database <identifiersep> product . name ( ) + <string_literal> ) ; \n \t6 return true ; } } } \n <ect>
\t1 private void do <identifiersep> publish ( exchange exchange , async <identifiersep> callback callback ) { \n \t2 object body = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( ) ; \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( body ) ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t3 logger . debug ( <string_literal> + config . get <identifiersep> item ( ) . get <identifiersep> name ( ) + <string_literal> ) ; \n \t3 decimal <identifiersep> type state = new decimal <identifiersep> type ( valve ) ; \n \t3 event <identifiersep> publisher . post <identifiersep> update ( config . get <identifiersep> item ( ) . get <identifiersep> name ( ) , state ) ; \n \t2 } else { \n <ect>
\t4 public <identifiersep> ntwk = network <identifiersep> model . get <identifiersep> network ( entry . get <identifiersep> value ( ) . get <identifiersep> network <identifiersep> id ( ) ) ; \n \t4 uri broadcast <identifiersep> uri = broadcast <identifiersep> domain <identifiersep> type . vlan . to <identifiersep> uri ( entry . get <identifiersep> key ( ) ) ; \n \t4 it <identifiersep> mgr . remove <identifiersep> vm <identifiersep> from <identifiersep> network ( <identifier> <identifiersep> router , public <identifiersep> ntwk , broadcast <identifiersep> uri ) ; \n \t3 } catch ( concurrent <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t1 public behavior <identifiersep> state modify ( actor actor , behavior <identifiersep> state result ) { \n \t2 switch ( result ) { \n \t3 case undefined : \n \t4 <comment> \n <ect>
\t4 log . info ( <string_literal> ) ; \n \t3 } else { \n \t4 log . info ( <string_literal> ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 private void handle <identifiersep> reply ( tunnel <identifiersep> build <identifiersep> reply <identifiersep> message msg , pooled <identifiersep> tunnel <identifiersep> creator <identifiersep> config cfg , long delay ) { \n \t2 long requested <identifiersep> on = cfg . get <identifiersep> expiration ( ) - <number_literal> * <number_literal> * <number_literal> ; \n \t2 long <identifier> = <identifier> <identifiersep> context . clock ( ) . now ( ) - requested <identifiersep> on ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 if ( this . exclude <identifiersep> properties != null ) { \n \t3 for ( pattern pattern : this . exclude <identifiersep> properties ) { \n \t4 if ( pattern . matcher ( expr ) . matches ( ) ) { \n <ect>
\t5 log . trace ( format ( <string_literal> , \n \t9 node , data != null ? data . length : 0 , statistics ) ) ; \n \t4 } else { \n <ect>
\t2 record <identifiersep> count <identifiersep> for <identifiersep> next <identifiersep> mem <identifiersep> check = min ( \n \t3 max ( minimum <identifiersep> record <identifiersep> count <identifiersep> for <identifiersep> check , ( record <identifiersep> count + ( long ) ( next <identifiersep> row <identifiersep> group <identifiersep> size / ( ( float ) record <identifiersep> size ) ) ) / <number_literal> ) , <comment> \n \t3 record <identifiersep> count + maximum <identifiersep> record <identifiersep> count <identifiersep> for <identifiersep> check <comment> \n \t3 ) ; \n <ect>
\t2 <comment> \n \t2 protected void <identifier> <identifiersep> run ( merge <identifiersep> id new <identifiersep> merge <identifiersep> id , final collection < address > <identifier> <identifiersep> copy ) throws exception { \n \t3 boolean success = set <identifiersep> merge <identifiersep> id ( null , new <identifiersep> merge <identifiersep> id ) ; \n \t3 if ( ! success ) { \n <ect>
\t3 try { \n \t4 person person = context . get <identifiersep> person <identifiersep> service ( ) . get <identifiersep> person ( integer . value <identifiersep> of ( id <identifiersep> number ) ) ; \n \t4 return person . get <identifiersep> person <identifiersep> id ( ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t2 for ( string name : bean <identifiersep> definition <identifiersep> names ) { \n \t3 class < ? > bean <identifiersep> type = bean <identifiersep> factory . get <identifiersep> type ( name ) ; \n \t3 logger . debug ( <string_literal> , bean <identifiersep> type , name ) ; \n \t3 if ( bean <identifiersep> type == null ) { \n <ect>
\t2 <identifier> <identifiersep> to ( future , promise ) ; } \n \t1 public static < x > void <identifier> <identifiersep> to ( future < x > completed <identifiersep> future , promise < ? super x > promise ) { \n \t2 if ( completed <identifiersep> future . is <identifiersep> success ( ) ) { \n \t3 if ( ! promise . try <identifiersep> success ( completed <identifiersep> future . get <identifiersep> now ( ) ) ) { \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 <comment> \n \t6 if ( incremental ) { \n <ect>
\t3 base . rollback <identifiersep> transaction ( ) ; \n \t3 throw e ; } \n \t2 finally { \n \t3 base . close ( ) ; } \n <ect>
\t4 reader = ss <identifiersep> table <identifiersep> reader . open ( new <identifiersep> descriptor , entry . get <identifiersep> value ( ) , metadata ) ; } \n \t3 catch ( corrupt <identifiersep> ss <identifiersep> table <identifiersep> exception ex ) \n \t3 { \n \t4 file <identifiersep> utils . handle <identifiersep> corrupt <identifiersep> ss <identifiersep> table ( ex ) ; \n <ect>
\t3 vm = <identifier> <identifiersep> vm <identifiersep> instance <identifiersep> dao . find <identifiersep> by <identifiersep> id ( instance <identifiersep> id ) ; } \n \t2 if ( vm == null ) { \n \t3 s <identifiersep> logger . info ( <string_literal> + volume + <string_literal> + <string_literal> ) ; \n \t2 } else if ( vm . get <identifiersep> state ( ) != state . running ) { \n <ect>
\t1 properties properties = new properties ( map ) ; \n \t1 track ( <string_literal> , properties ) ; \n \t1 <identifier> <identifiersep> <identifier> . set ( true ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( encoder instanceof channel <identifiersep> handler <identifiersep> factory ) { \n \t4 continue ; } \n \t3 if ( object <identifiersep> helper . get <identifiersep> annotation ( encoder , channel <identifiersep> handler . <identifier> . class ) != null ) { \n \t4 continue ; } \n <ect>
\t2 if ( ! router <identifiersep> info . is <identifiersep> valid ( ) ) { \n \t3 <comment> \n \t3 process <identifiersep> store <identifiersep> failure ( key , router <identifiersep> info ) ; \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 logger . debug ( <string_literal> + ex ) ; } } \n \t3 else { \n <ect>
\t3 } catch ( exception ex ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + host <identifiersep> id + <string_literal> + future <identifiersep> owner <identifiersep> id + <string_literal> , ex ) ; \n \t4 result = false ; } \n \t3 if ( result ) { \n <ect>
\t1 public void write <identifiersep> to ( bean <identifiersep> reader <identifiersep> writer <identifiersep> x <identifiersep> format x <identifiersep> format , class < ? > type , type generic <identifiersep> type , annotation [ ] annotations , media <identifiersep> type media <identifiersep> type , multivalued <identifiersep> map < string , object > http <identifiersep> headers , output <identifiersep> stream entity <identifiersep> stream ) throws io <identifiersep> exception , web <identifiersep> application <identifiersep> exception { \n \t2 logger . info ( <string_literal> ) ; \n \t2 string message = <string_literal> ; \n \t2 if ( bean != null ) { \n <ect>
\t2 if ( credentials instanceof kerberos <identifiersep> credentials ) { \n \t3 gss <identifiersep> credential = ( ( kerberos <identifiersep> credentials ) credentials ) . get <identifiersep> gss <identifiersep> credential ( ) ; \n \t2 } else { \n \t3 gss <identifiersep> credential = null ; } \n <ect>
\t4 { \n \t5 authentication <identifiersep> info info = \n \t7 use <identifiersep> start <identifiersep> tls ? query <identifiersep> for <identifiersep> authentication <identifiersep> info <identifiersep> using <identifiersep> start <identifiersep> tls ( token , ldap <identifiersep> context <identifiersep> factory ) \n \t10 : super . query <identifiersep> for <identifiersep> authentication <identifiersep> info ( token , ldap <identifiersep> context <identifiersep> factory ) ; \n <ect>
@ override \n public void callback ( final message message ) { \n \t1 final queue <identifiersep> session queue <identifiersep> session = message . get <identifiersep> resource ( queue <identifiersep> session . class , <string_literal> ) ; \n \t1 if ( queue <identifiersep> session != <identifier> <identifiersep> queue <identifiersep> session . instance ) { \n <ect>
\t1 public void connect ( ) { \n \t2 try { \n \t3 connect <identifiersep> client ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 vms <identifiersep> detail <identifiersep> by <identifiersep> names . add ( new pair < pair < string , virtual <identifiersep> machine . type > , pair < long , string > > ( new pair < string , virtual <identifiersep> machine . type > ( \n \t7 rs . get <identifiersep> string ( <string_literal> ) , virtual <identifiersep> machine . type . value <identifiersep> of ( rs . get <identifiersep> string ( <string_literal> ) ) ) , \n \t7 new pair < long , string > ( rs . get <identifiersep> long ( <string_literal> ) , rs . get <identifiersep> string ( <string_literal> ) ) ) ) ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 index <identifiersep> response index <identifiersep> response = client ( ) . index ( index <identifiersep> request ( <string_literal> ) . type ( <string_literal> ) . id ( <string_literal> ) \n \t3 . source ( source ( <string_literal> , <string_literal> ) , x <identifiersep> content <identifiersep> type . json ) ) . action <identifiersep> get ( ) ; \n \t2 assert <identifiersep> that ( index <identifiersep> response . get <identifiersep> index ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n <ect>
\t4 if ( check <identifiersep> result . version != null ) { \n \t5 string skipped <identifiersep> version = soap <identifiersep> ui . get <identifiersep> settings ( ) . get <identifiersep> string ( new <identifiersep> soap <identifiersep> ui <identifiersep> version <identifiersep> available <identifiersep> dialog . skipped <identifiersep> version <identifiersep> setting , default <identifiersep> unreachable <identifiersep> value <identifiersep> for <identifiersep> skipped <identifiersep> version ) ; \n \t5 if ( skipped <identifiersep> version != null ) { \n \t6 if ( skipped <identifiersep> version . equals ( check <identifiersep> result . version . to <identifiersep> string ( ) ) ) { \n <ect>
\t4 citrix <identifiersep> resource <identifiersep> base . get <identifiersep> network ( conn , nic ) ; } \n \t3 s <identifiersep> logger . debug ( <string_literal> + vm . get <identifiersep> name ( ) + <string_literal> ) ; \n \t3 return new prepare <identifiersep> for <identifiersep> migration <identifiersep> answer ( command ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t1 iterator < replication <identifiersep> task > task <identifiersep> iter = source <identifiersep> metastore . get <identifiersep> replication <identifiersep> tasks ( 0 , - 1 , db <identifiersep> name , null ) ; \n \t1 while ( task <identifiersep> iter . has <identifiersep> next ( ) ) { \n \t1 replication <identifiersep> task task = task <identifiersep> iter . next ( ) ; \n \t1 h <identifiersep> cat <identifiersep> notification <identifiersep> event n = task . get <identifiersep> event ( ) ; \n <ect>
\t1 if ( jar <identifiersep> io <identifiersep> file <identifiersep> to <identifiersep> replace . name != updated <identifiersep> file . name ) { \n \t2 val new <identifiersep> file = file ( jar <identifiersep> io <identifiersep> file <identifiersep> to <identifiersep> replace . parent , updated <identifiersep> file . name ) \n \t2 if ( ! new <identifiersep> file . exists ( ) ) { \n \t3 if ( ! jar <identifiersep> io <identifiersep> file <identifiersep> to <identifiersep> replace . rename <identifiersep> to ( new <identifiersep> file ) ) { \n <ect>
\t1 public void test <identifiersep> <identifier> <identifiersep> nested ( ) { \n \t2 try { \n \t3 execute <identifiersep> basic <identifiersep> json <identifiersep> test ( <string_literal> , <string_literal> , false , <number_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 correlation <identifiersep> id = message . get <identifiersep> string <identifiersep> property ( correlation <identifiersep> property ) ; } \n \t2 } catch ( jms <identifiersep> exception e ) { \n \t3 <comment> \n \t2 if ( correlation <identifiersep> id == null ) { \n <ect>
\t2 try { \n \t3 for ( int i = 0 ; i < initial <identifiersep> pool <identifiersep> size ; i ++ ) \n \t4 <identifier> . put ( message <identifiersep> digest . get <identifiersep> instance ( <string_literal> ) ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 if ( <identifier> <identifiersep> facade . should <identifiersep> throttle <identifiersep> <identifier> ( key ) ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
<comment> \n protected void verify <identifiersep> export ( int expected <identifiersep> num <identifiersep> records , connection conn ) \n \t1 throws io <identifiersep> exception , sql <identifiersep> exception { \n <ect>
\t3 return dto ; } \n \t2 dto . set <identifiersep> stream <identifiersep> scope <identifiersep> id ( shared <identifiersep> resource <identifiersep> stream <identifiersep> scope . get <identifiersep> id ( ) ) ; \n \t2 <comment> \n \t2 in <identifiersep> request . set <identifiersep> shared <identifiersep> resource <identifiersep> id ( shared <identifiersep> resource <identifiersep> stream <identifiersep> scope . get <identifiersep> destination <identifiersep> entity <identifiersep> id ( ) ) ; \n <ect>
\t4 path = shard <identifiersep> path . select <identifiersep> new <identifiersep> path <identifiersep> for <identifiersep> shard ( node <identifiersep> env , shard <identifiersep> id , this . index <identifiersep> settings , \n \t5 routing . get <identifiersep> expected <identifiersep> shard <identifiersep> size ( ) == shard <identifiersep> routing . unavailable <identifiersep> expected <identifiersep> shard <identifiersep> size \n \t6 ? get <identifiersep> avg <identifiersep> shard <identifiersep> size <identifiersep> in <identifiersep> bytes ( ) : routing . get <identifiersep> expected <identifiersep> shard <identifiersep> size ( ) , \n \t5 data <identifiersep> path <identifiersep> to <identifiersep> shard <identifiersep> count ) ; \n <ect>
<comment> \n \t6 result <identifiersep> file . print ( <string_literal> ) ; } \n \t4 } finally { \n \t5 long response <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n <ect>
\t2 public integer call ( ) throws exception { \n \t3 try { \n \t4 return do <identifiersep> call ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 logger . warn ( <string_literal> , attempt ) ; \n \t2 throw origin <identifiersep> exception ; } \n \t1 protected boolean is <identifiersep> caused <identifiersep> by <identifiersep> optimistic <identifiersep> locking <identifiersep> failure ( throwable throwable ) { \n \t2 if ( target <identifiersep> exception <identifiersep> class == null ) { \n <ect>
\t8 n . set <identifiersep> property ( <string_literal> , i ) ; \n \t8 session . save ( ) ; } } } \n \t4 } catch ( exception e ) { \n \t5 log ( <string_literal> + e ) ; \n <ect>
<comment> \n protected string read ( string model <identifiersep> prop <identifiersep> name ) { \n \t1 string <identifiersep> builder result = new string <identifiersep> builder ( ) ; \n \t1 int pages = get <identifiersep> config ( ) . get <identifiersep> int ( model <identifiersep> prop <identifiersep> name ) ; \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 <comment> \n \t5 <comment> \n <ect>
\t2 response response = client . target ( generate <identifiersep> url ( <string_literal> , url <identifiersep> prefix + ext ) ) . request ( ) \n \t4 . post ( entity . entity ( big <identifiersep> attribute <identifiersep> doc , <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> + response . get <identifiersep> status ( ) ) ; \n \t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t4 cleanup <identifiersep> domain <identifiersep> <identifier> ( domain . get <identifiersep> id ( ) ) ; \n \t4 call <identifiersep> context . current ( ) . put <identifiersep> context <identifiersep> parameter ( domain . class , domain . get <identifiersep> uuid ( ) ) ; \n \t4 return true ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 assert . assert <identifiersep> true ( <string_literal> , boolean . value <identifiersep> of ( header ) ) ; \n \t2 object entity = response . read <identifiersep> entity ( string . class ) ; \n \t2 logger . info ( <string_literal> + entity ) ; \n \t2 resteasy <identifiersep> violation <identifiersep> exception e = new resteasy <identifiersep> violation <identifiersep> exception ( string . class . cast ( entity ) ) ; \n <ect>
\t3 } else { \n \t4 logger . debug ( <string_literal> ) ; } } \n \t2 <comment> \n \t2 catch ( exception e ) { \n <ect>
\t4 update <identifiersep> txns ( <identifier> ) ; \n \t4 update <identifiersep> locks ( <identifier> ) ; \n \t4 thread . sleep ( <number_literal> ) ; \n \t4 <identifier> . commit ( ) ; \n <ect>
\t2 for ( class < ? > a <identifiersep> class : classes ) { \n \t3 log . trace ( <string_literal> , a <identifiersep> class ) ; \n \t3 <comment> \n \t3 if ( should <identifiersep> ignore <identifiersep> bean ( a <identifiersep> class ) ) { \n <ect>
\t6 pod . set <identifiersep> allocation <identifiersep> state ( allocation <identifiersep> state ) ; } \n \t5 <identifier> <identifiersep> pod <identifiersep> dao . update ( id , pod ) ; } \n \t3 } ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t1 <comment> \n \t1 private void persist <identifiersep> cache ( ) { \n <ect>
\t5 logger . info ( <string_literal> , decoded <identifiersep> data ) ; \n \t5 <comment> \n \t5 break ; \n \t4 case <string_literal> : <comment> \n <ect>
<comment> \n \t1 private void update <identifiersep> <identifier> ( phase <identifiersep> step step ) { \n \t2 if ( step == null ) { \n <ect>
\t6 if ( <identifier> . first ( ) && <identifier> . second ( ) . trim ( ) . equals <identifiersep> ignore <identifiersep> case ( mac . trim ( ) ) ) { \n \t7 return integer . parse <identifiersep> int ( token . substring ( <number_literal> ) ) ; \n \t6 } else { \n \t7 skip <identifiersep> interfaces . add ( token ) ; } } } } \n <ect>
\t1 stack <identifiersep> version = params . version \n \t1 if params . retry <identifiersep> able : \n \t1 logger . info ( <string_literal> ) \n \t1 else : \n <ect>
\t3 assert log != null ; \n \t3 log . info ( <string_literal> + rsrc1 ) ; \n \t3 log . info ( <string_literal> + rsrc2 ) ; \n \t3 log . info ( <string_literal> + rsrc3 ) ; \n <ect>
\t6 for ( string property : prop . get <identifiersep> properties ( ) . key <identifiersep> set ( ) ) { \n \t7 action <identifiersep> conf . set ( property , prop . get <identifiersep> properties ( ) . get ( property ) ) ; \n \t7 log . debug ( <string_literal> + property + <string_literal> + prop . get <identifiersep> properties ( ) . get ( property ) + <string_literal> ) ; } } } } \n \t3 else { \n <ect>
\t1 if not os . path . <identifier> ( path ) : \n \t2 try : \n \t3 os . mkdirs ( path ) \n \t2 except os <identifiersep> error : \n <ect>
\t1 i <identifiersep> reporter instance = reporter <identifiersep> config . new <identifiersep> reporter <identifiersep> instance ( ) ; \n \t1 if ( instance != null ) { \n \t1 add <identifiersep> listener ( instance ) ; \n \t1 } else { \n <ect>
\t3 this . attempt <identifiersep> failures <identifiersep> validity <identifiersep> interval <identifiersep> method = attempt <identifiersep> failures <identifiersep> validity <identifiersep> interval <identifiersep> method ; \n \t3 try { \n \t4 <comment> \n \t4 keep <identifiersep> containers <identifiersep> method = clazz . get <identifiersep> method ( keep <identifiersep> containers <identifiersep> method <identifiersep> name , boolean . class ) ; \n <ect>
\t2 if ( rmv ) { \n \t4 log . debug ( <string_literal> + fut ) ; } \n <ect>
\t1 private void kill <identifiersep> txns ( set < transaction > txns <identifiersep> to <identifiersep> kill , @ nullable transaction <identifier> <identifiersep> tx ) { \n \t2 linked <identifiersep> list < transaction > work = new linked <identifiersep> list < > ( txns <identifiersep> to <identifiersep> kill ) ; \n \t2 while ( ! work . is <identifiersep> empty ( ) ) { \n \t3 final transaction tx = work . poll ( ) ; \n <ect>
\t3 { \n \t4 try \n \t4 { \n \t5 <identifier> <identifiersep> socket <identifiersep> address from = address <identifiersep> provider . primary ( ) ; \n <ect>
\t2 file file = new file ( path ) ; \n \t2 try { \n \t3 actual <identifiersep> path = file . get <identifiersep> canonical <identifiersep> path ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 } catch ( exception e ) { \n \t2 log . error ( <string_literal> + obj . to <identifiersep> string ( ) , e ) ; } } } } \n @ test \n public void test <identifiersep> versioning <identifiersep> bucket <identifiersep> object <identifiersep> listing ( ) { \n <ect>
\t2 this . <identifier> <identifiersep> client = <identifier> <identifiersep> client ; } \n \t1 @ nullable \n \t1 @ override \n \t1 public list < string > list ( uri parent ) throws resource <identifiersep> exception { \n <ect>
\t2 } catch ( <identifier> <identifiersep> exception re ) { \n \t3 <comment> \n \t3 throw new io <identifiersep> exception ( <string_literal> + re . get <identifiersep> message ( ) ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 if ( failed ) { \n \t3 string <identifiersep> builder sb = new string <identifiersep> builder ( ) ; \n \t3 for ( int i = 0 ; i < id <identifiersep> versions . length ; i ++ ) { \n \t4 sb . append ( <string_literal> ) . append ( i ) . append ( <string_literal> ) . append ( id <identifiersep> versions [ i ] ) . append ( system . line <identifiersep> separator ( ) ) ; } \n <ect>
\t4 <identifier> <identifiersep> sock <identifiersep> fac . put ( hash <identifiersep> alias , ssl <identifiersep> factory ) ; \n \t4 log . info ( <string_literal> , port , host , hash <identifiersep> alias ) ; \n \t4 return ssl <identifiersep> factory ; \n \t3 } catch ( general <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t4 name = from <identifiersep> application <identifiersep> context ( ) ; \n \t4 if ( name != null ) { \n \t5 log . debug ( <string_literal> , name ) ; \n \t5 return name ; } \n <ect>
\t3 cipher wrap <identifiersep> cipher = null ; \n \t3 try { \n \t4 wrap <identifiersep> cipher = cipher . get <identifiersep> instance ( <identifier> <identifiersep> algorithm ) ; \n \t4 if ( log . is <identifiersep> loggable ( level . info ) ) { \n <ect>
\t2 <identifier> <identifiersep> selector = selector . open ( ) ; \n \t2 task task = null ; \n \t2 try { \n \t3 <identifier> <identifiersep> client <identifiersep> connection = socket <identifiersep> channel . open ( ) ; \n <ect>
\t2 unit tail = tail <identifiersep> it . next ( ) ; \n \t2 if ( ( ! c <identifiersep> or <identifiersep> t . get <identifiersep> <identifier> ( ) . contains ( tail ) ) && \n \t3 ( ! <identifier> <identifiersep> return <identifiersep> or <identifiersep> throw ( tail ) ) ) { \n \t3 if ( options . v ( ) . verbose ( ) ) \n <ect>
\t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . resource <identifiersep> unavailable <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( concurrent <identifiersep> operation <identifiersep> exception ex ) { \n <ect>
\t5 <string_literal> \n \t5 + <string_literal> ) ; \n \t4 ) { \n \t3 <identifier> . execute <identifiersep> update ( ) ; \n <ect>
\t2 connect conn = null ; \n \t2 try { \n \t3 conn = libvirt <identifiersep> connection . get <identifiersep> connection ( ) ; \n \t2 } catch ( libvirt <identifiersep> exception e ) { \n <ect>
\t2 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 if ( registered <identifiersep> service == null || ! registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed ( ) ) { \n \t3 logger . warn ( <string_literal> , registered <identifiersep> service ) ; \n \t3 return false ; } \n <ect>
\t1 file <identifiersep> status stat = null ; \n \t1 if ( base != null ) { \n \t1 stat = fs . get <identifiersep> file <identifiersep> status ( base ) ; \n \t1 if ( ! stat . is <identifiersep> dir ( ) ) { \n <ect>
<comment> \n \t1 public decoded process ( byte [ ] buf , int offset , int length , peer peer , peer <identifiersep> node <identifier> , long now ) { \n \t2 if ( <identifier> != null && <identifier> . get <identifiersep> outgoing <identifiersep> <identifier> ( ) != this ) { \n <ect>
\t2 synchronized ( <identifier> ) { \n \t3 <identifier> . clear ( ) ; \n \t3 document = parser . parse ( <identifier> <identifiersep> <identifier> ) ; \n \t3 node <identifiersep> list nodes = document . get <identifiersep> elements <identifiersep> by <identifiersep> tag <identifiersep> name ( <string_literal> ) ; \n <ect>
\t9 destination . set <identifiersep> monitor <identifiersep> state ( binding . get <identifiersep> <identifier> ( ) ) ; \n \t9 break ; } } } \n \t6 <identifier> <identifiersep> lb . add ( load <identifiersep> balancer ) ; } } } \n \t2 } catch ( final execution <identifiersep> exception e ) { \n <ect>
\t2 path path = new path ( uri ) ; \n \t2 file dst = new file ( dst <identifiersep> root <identifiersep> dir , path . get <identifiersep> name ( ) ) . get <identifiersep> canonical <identifiersep> file ( ) ; \n \t2 if ( ! done . contains ( dst . get <identifiersep> path ( ) ) ) { \n \t3 if ( dst . is <identifiersep> directory ( ) ) { \n <ect>
\t7 if ( ! cp . get <identifiersep> mac ( ) . equals ( element . get <identifiersep> id ( ) ) ) { \n \t8 <comment> \n \t8 <identifier> <identifiersep> device device = new <identifier> ( element . get <identifiersep> id ( ) , stick , element . get <identifiersep> id ( ) ) ; \n \t8 stick . add <identifiersep> device ( device ) ; \n <ect>
\t1 if ( conf . contains <identifiersep> key ( config <identifiersep> key ) ) { \n \t1 map < string , object > map = ( map < string , object > ) conf . get ( config <identifiersep> key ) ; \n \t2 if ( map != null ) { \n \t2 for ( string key <identifiersep> name : map . key <identifiersep> set ( ) ) { \n <ect>
\t2 directory . close ( ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n \t2 log . unable <identifiersep> to <identifiersep> close <identifiersep> lucene <identifiersep> directory ( directory , e ) ; } \n \t1 service <identifiersep> manager . release <identifiersep> service ( cache <identifiersep> manager <identifiersep> service . class ) ; \n <ect>
\t4 number <identifiersep> of <identifiersep> message <identifiersep> consumed ++ ; } \n \t3 log . info ( <string_literal> + number <identifiersep> of <identifiersep> message <identifiersep> consumed ) ; \n \t3 return number <identifiersep> of <identifiersep> message <identifiersep> consumed ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 throw new runtime <identifiersep> exception ( <string_literal> + ex ) ; } } \n \t2 if ( p != null ) { \n \t3 hash <identifiersep> set < string > ignore <identifiersep> urls = settings <identifiersep> manager . get <identifiersep> <identifier> ( ) . get <identifiersep> ignore <identifiersep> urls ( ) ; \n \t3 update ( 0 , cards <identifiersep> to <identifiersep> download . size ( ) ) ; \n <ect>
\t1 public map < string , string > parse <identifiersep> records ( final byte [ ] response , request request ) throws stiebel <identifiersep> heat <identifiersep> pump <identifiersep> exception { \n \t2 map < string , string > map = new hash <identifiersep> map < string , string > ( ) ; \n \t2 logger . debug ( <string_literal> , data <identifiersep> parser . bytes <identifiersep> to <identifiersep> hex ( response ) ) ; \n \t2 if ( response . length < <number_literal> ) { \n <ect>
\t2 hibernate <identifiersep> util . session <identifiersep> factory = hibernate <identifiersep> util . configuration . build <identifiersep> session <identifiersep> factory ( ) ; \n \t1 } else { \n \t2 hibernate <identifiersep> util . factory <identifiersep> jndi <identifiersep> name = hibernate <identifiersep> util . configuration . get <identifiersep> property ( environment . session <identifiersep> factory <identifiersep> name ) ; \n \t2 if ( hibernate <identifiersep> util . factory <identifiersep> jndi <identifiersep> name == null ) { \n <ect>
\t3 log . debug ( <string_literal> + id ) ; \n \t2 } ) ; } \n \t1 public account get <identifiersep> account ( integer id ) throws exception { \n \t2 return with <identifiersep> tx <identifiersep> session <identifiersep> apply ( use <identifiersep> jta , session <identifiersep> factory , session - > { \n <ect>
\t1 string <identifier> = temp . new <identifiersep> folder ( <string_literal> ) . to <identifiersep> string ( ) ; \n \t1 string <identifier> = temp . new <identifiersep> folder ( <string_literal> ) . to <identifiersep> string ( ) ; \n \t1 string server <identifiersep> version <identifiersep> file <identifiersep> path = temp . new <identifiersep> folder ( <string_literal> ) . to <identifiersep> string ( ) ; \n \t1 log . info ( <string_literal> + <identifier> ) ; \n <ect>
\t4 in = new buffered <identifiersep> input <identifiersep> stream ( new gzip <identifiersep> input <identifiersep> stream ( error <identifiersep> stream ) ) ; \n \t3 } else { \n \t4 in = new buffered <identifiersep> input <identifiersep> stream ( error <identifiersep> stream ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( ! this . get <identifiersep> audience ( ) . equals <identifiersep> ignore <identifiersep> case ( expected <identifiersep> audience ) ) { \n \t3 logger . warn ( <string_literal> , this . get <identifiersep> audience ( ) ) ; \n \t3 return false ; } \n \t2 if ( ! this . issuer . equals <identifiersep> ignore <identifiersep> case ( expected <identifiersep> issuer ) ) { \n <ect>
\t2 time <identifiersep> unit . seconds ) , time <identifiersep> unit . seconds ) ; } } \n private static void start <identifiersep> hive <identifiersep> server2 ( ) throws throwable { \n \t1 long attempts = 0 , max <identifiersep> attempts = 1 ; \n \t1 while ( true ) { \n <ect>
\t3 this . latch = latch ; } \n \t2 @ override \n \t2 public void on <identifiersep> message ( message message , channel channel ) throws exception { \n \t3 string value = new string ( message . get <identifiersep> body ( ) ) ; \n <ect>
\t3 logger . warn ( <string_literal> , registered <identifiersep> service ) ; \n \t3 return false ; } \n \t2 final string redirect <identifiersep> uri = request . get <identifiersep> parameter ( o <identifiersep> auth20constants . redirect <identifiersep> uri ) ; \n \t2 if ( ! validator . check <identifiersep> callback <identifiersep> valid ( registered <identifiersep> service , redirect <identifiersep> uri ) ) { \n <ect>
\t1 if ( ! <identifier> <identifiersep> sessions . is <identifiersep> empty ( ) ) { \n \t2 trigger <identifiersep> action <identifiersep> handler . apply <identifiersep> action ( <identifier> <identifiersep> sessions ) ; } \n \t1 } catch ( throwable t ) { \n \t1 <comment> \n <ect>
\t5 log . warn ( <string_literal> , e ) ; \n \t5 <identifier> <identifiersep> utilities . execute <identifiersep> update <identifiersep> script ( channel , create <identifiersep> table <identifiersep> statement ) ; \n \t5 return <identifier> <identifiersep> try <identifiersep> lock ( channel , model , lock <identifiersep> owner <identifiersep> name , false ) ; } \n \t4 catch ( throwable t ) { \n <ect>
@ slf4j \n public class allow <identifiersep> <identifier> <identifiersep> policy implements <identifier> <identifiersep> policy < void > { \n \t1 @ override \n \t1 public void apply ( final void data ) { \n <ect>
\t1 private static final logger log = log <identifiersep> manager . get <identifiersep> logger ( <identifier> <identifiersep> xml <identifiersep> handler . class ) ; \n \t1 private static final string default <identifiersep> content <identifiersep> type = <string_literal> ; \n \t1 private xml <identifiersep> mapper mapper = new xml <identifiersep> mapper ( ) ; \n \t1 public void to <identifiersep> object ( action <identifiersep> invocation invocation , reader in , object target ) throws io <identifiersep> exception { \n <ect>
\t4 server <identifiersep> socket <identifiersep> timeout , sasl <identifiersep> params , server <identifiersep> name , thread <identifiersep> name , num <identifiersep> threads , num <identifiersep> st <identifiersep> threads , \n \t4 time <identifiersep> between <identifiersep> thread <identifiersep> checks ) ; \n \t3 break ; \n \t2 case <identifier> : \n <ect>
\t3 } while ( ( line = input . read <identifiersep> line ( ) ) != null ) ; \n \t3 to <identifiersep> mail . set <identifiersep> text <identifiersep> part ( result . to <identifiersep> string ( ) ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 <comment> \n <ect>
\t3 <comment> \n \t3 try { \n \t4 ds . connect ( inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( <string_literal> ) , <number_literal> ) ; \n \t3 } catch ( unknown <identifiersep> host <identifiersep> exception ex ) { \n <ect>
\t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n \t1 log . error ( <string_literal> , ex ) ; \n \t1 throw ex ; \n \t1 } catch ( exception ex ) { \n <ect>
\t6 + ( ref . get <identifiersep> size ( ) != null ? ref . get <identifiersep> size ( ) : integer . max <identifiersep> value ) + <string_literal> + size ) ; } \n \t3 <comment> \n \t3 ref . add <identifiersep> reference ( endpoint ) ; \n <ect>
\t3 + data <identifiersep> <identifier> <identifiersep> db <identifiersep> input <identifiersep> format . <identifier> <identifiersep> token + <string_literal> \n \t3 + input <identifiersep> query + <string_literal> ) ; } \n \t1 query . append ( input <identifiersep> query . replace ( data <identifiersep> <identifier> <identifiersep> db <identifiersep> input <identifiersep> format . <identifier> <identifiersep> token , \n \t2 condition <identifiersep> <identifier> . to <identifiersep> string ( ) ) ) ; } \n <ect>
\t1 @ override \n \t1 public sampler next ( ) { \n \t2 if ( string <identifiersep> utils . is <identifiersep> empty ( get <identifiersep> lock <identifiersep> name ( ) ) ) { \n <ect>
\t1 @ description ( <string_literal> ) \n \t1 public void <identifier> <identifiersep> refresh ( refresh <identifiersep> options opts ) throws exception { \n \t2 for ( object o : repos ) { \n \t3 if ( o instanceof <identifier> ) { \n <ect>
\t3 get <identifiersep> journal ( ) . start ( ) ; \n \t3 try { \n \t4 load <identifiersep> page <identifiersep> file ( ) ; \n \t3 } catch ( unknown <identifiersep> store <identifiersep> version <identifiersep> exception ex ) { \n <ect>
\t4 logger . warn ( <string_literal> , plan <identifiersep> id ) ; \n \t4 set <identifiersep> exception ( new stream <identifiersep> exception ( final <identifiersep> state , <string_literal> ) ) ; } \n \t3 else \n \t3 { \n <ect>
\t1 int max <identifiersep> padding <identifiersep> size = get <identifiersep> max <identifiersep> padding <identifiersep> size ( conf ) ; \n \t1 boolean <identifier> = get <identifiersep> validation ( conf ) ; \n \t1 log . info ( <string_literal> , block <identifiersep> size ) ; \n <ect>
\t2 if ( tuple <identifiersep> filter instanceof compare <identifiersep> tuple <identifiersep> filter ) { \n \t3 <comment> \n \t3 translated = translate <identifiersep> compare <identifiersep> tuple <identifiersep> filter ( ( compare <identifiersep> tuple <identifiersep> filter ) tuple <identifiersep> filter ) ; \n \t3 if ( translated != null ) { \n <ect>
\t2 try { \n \t3 if ( admin . table <identifiersep> exists ( table <identifiersep> name ) ) { \n \t4 logger . info ( <string_literal> + table <identifiersep> name ) ; \n \t4 admin . disable <identifiersep> table ( table <identifiersep> name ) ; \n <ect>
\t3 send <identifiersep> response ( resp , <string_literal> ) ; } } \n \t1 private void handle <identifiersep> <identifier> <identifiersep> request ( http <identifiersep> servlet <identifiersep> request req , http <identifiersep> servlet <identifiersep> response resp , long vm <identifiersep> id ) { \n \t2 virtual <identifiersep> machine vm = <identifier> <identifiersep> vm <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm == null ) { \n <ect>
\t5 logger . debug ( <string_literal> + sub <identifiersep> file ) ; \n \t5 if ( sub <identifiersep> file != null ) { \n \t6 vars . put ( <string_literal> , parent . get <identifiersep> resources ( ) . add ( sub <identifiersep> file ) ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t1 it = <identifier> <identifiersep> escape . iterator ( ) ; \n \t1 while ( it . has <identifiersep> next ( ) ) { \n \t2 <identifier> <identifiersep> node n = ( <identifier> <identifiersep> node ) it . next ( ) ; \n \t2 if ( ! nodes . contains ( n ) ) \n <ect>
\t2 if ( zk <identifiersep> props . get <identifiersep> property ( <string_literal> ) == null ) { \n \t3 string data <identifiersep> dir = string . format ( <string_literal> , \n \t5 system . get <identifiersep> property ( <string_literal> ) , uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ) ; \n \t3 zk <identifiersep> props . set <identifiersep> property ( <string_literal> , data <identifiersep> dir ) ; \n <ect>
\t4 <comment> \n \t4 try { \n \t5 <identifier> = <identifier> . to <identifiersep> expression ( expression ) ; \n \t4 } catch ( cql <identifiersep> exception e ) { \n <ect>
\t6 get <identifiersep> next <identifiersep> c <identifiersep> seq <identifiersep> value ( ) , request . options ) ; } \n \t4 catch ( parse <identifiersep> exception ex ) \n \t4 { \n \t5 <comment> \n <ect>
\t2 final entity <identifiersep> descriptor entity <identifiersep> descriptor = chaining <identifiersep> metadata <identifiersep> resolver . resolve <identifiersep> single ( <identifier> ) ; \n \t2 if ( entity <identifiersep> descriptor == null ) { \n \t3 logger . warn ( <string_literal> , entity <identifiersep> id ) ; \n \t3 return optional . empty ( ) ; } \n <ect>
\t3 } catch ( json <identifiersep> mapping <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> + response ) ; \n \t4 return ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 throw new illegal <identifiersep> state <identifiersep> exception ( ) ; } \n \t1 string handle <identifiersep> id = job . get ( handle <identifiersep> id ) ; \n \t1 if ( handle <identifiersep> id == null ) { \n \t1 handle <identifiersep> id = uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ; \n <ect>
\t6 log . error ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; } } } } } \n \t1 public void start ( ) throws io <identifiersep> exception { \n \t2 synchronized ( lock ) { \n \t3 preconditions . check <identifiersep> state ( ! is <identifiersep> shutdown , <string_literal> ) ; \n <ect>
\t5 log . debug ( <string_literal> + de . message + <string_literal> + this . page <identifiersep> <identifier> + <string_literal> ) ; \n \t5 return false ; \n \t4 } else { \n \t5 <comment> \n <ect>
<comment> \n <ect>
\t1 this . <identifier> <identifiersep> block ( this . current <identifiersep> write <identifiersep> block , add <identifiersep> cursor ) ; } \n \t1 if ( temp <identifiersep> out <identifiersep> path == null || temp <identifiersep> out <identifiersep> path . to <identifiersep> string ( ) . trim ( ) . equals ( <string_literal> ) ) { \n \t1 return ; } \n \t1 this . close <identifiersep> writer ( ) ; \n <ect>
\t5 try { \n \t6 if ( ! clean <identifiersep> bucket <identifiersep> queue ( system . current <identifiersep> time <identifiersep> millis ( ) , true ) ) return ; \n \t5 } catch ( insufficient <identifiersep> disk <identifiersep> space <identifiersep> exception e ) { \n \t6 if ( ! <identifier> <identifiersep> so ) { \n <ect>
\t3 if ( <identifier> <identifiersep> secret <identifiersep> key <identifiersep> path != null ) { \n \t4 try { \n \t5 is = new file <identifiersep> input <identifiersep> stream ( new file ( <identifier> <identifiersep> secret <identifiersep> key <identifiersep> path ) ) ; } \n \t4 catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 return cached <identifiersep> attributes ; } \n \t2 final map < string , list < object > > source <identifiersep> attributes = retrieve <identifiersep> person <identifiersep> attributes <identifiersep> to <identifiersep> principal <identifiersep> attributes ( p . get <identifiersep> id ( ) ) ; \n \t2 logger . debug ( <string_literal> , source <identifiersep> attributes . size ( ) , p . get <identifiersep> id ( ) ) ; \n \t2 if ( this . merging <identifiersep> strategy == null || this . merging <identifiersep> strategy . get <identifiersep> attribute <identifiersep> merger ( ) == null ) { \n <ect>
\t4 extension ext = ( extension ) cls . new <identifiersep> instance ( ) ; \n \t4 ext . set <identifiersep> point <identifiersep> id ( point ) ; \n \t4 ext . set <identifiersep> module <identifiersep> id ( this . get <identifiersep> module <identifiersep> id ( ) ) ; \n \t4 extensions . add ( ext ) ; \n <ect>
\t2 ensure <identifiersep> green ( index ) ; \n \t2 client ( ) . prepare <identifiersep> index ( index , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , x <identifiersep> content <identifiersep> type . json ) . set <identifiersep> refresh <identifiersep> policy ( immediate ) . get ( ) ; \n \t2 search <identifiersep> response resp = client ( ) . prepare <identifiersep> search ( index ) . set <identifiersep> query ( match <identifiersep> all <identifiersep> query ( ) ) . get ( ) ; \n \t2 assert <identifiersep> that ( <string_literal> , resp . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 1l ) ) ; \n <ect>
\t2 string version = entity . get <identifiersep> extension ( ) . get <identifiersep> extension <identifiersep> version ( ) ; \n \t2 string key = name + stack <identifiersep> manager . path <identifiersep> delimiter + version ; \n \t2 extension <identifiersep> module extension <identifiersep> module = extension <identifiersep> modules . get ( key ) ; \n \t2 if ( extension <identifiersep> module != null ) { \n <ect>
\t3 optional < ui <identifiersep> <identifier> > <identifier> = <identifier> . get <identifiersep> <identifier> ( module <identifiersep> name + <string_literal> + <identifier> <identifiersep> uri ) ; \n \t3 if ( <identifier> . is <identifiersep> present ( ) ) { \n \t4 asset <identifiersep> data . get <identifiersep> root <identifiersep> widget ( ) . set <identifiersep> <identifier> ( <identifier> . get ( ) ) ; \n \t3 } else { \n <ect>
\t5 assert <identifiersep> equals ( expected <identifiersep> list , get <identifiersep> messages ( ms ) ) ; } \n \t4 string <identifier> = <string_literal> + j + <string_literal> + i ; \n \t4 add <identifiersep> message ( ms , <identifier> , <identifier> ) ; \n \t4 expected <identifiersep> list . add ( <identifier> ) ; } \n <ect>
\t1 if ( table <identifiersep> name . equals ( root <identifiersep> table . name ) ) { \n \t1 shell . log . info ( <string_literal> + root <identifiersep> table . name + <string_literal> ) ; \n \t1 } else { \n \t1 shell <identifiersep> state . get <identifiersep> connector ( ) . table <identifiersep> operations ( ) . online ( table <identifiersep> name , wait ) ; \n <ect>
\t2 string [ ] ret = iterables . to <identifiersep> array ( iterables . filter ( <identifier> , <identifier> . in ( <identifier> ) ) , string . class ) ; \n \t2 { \n \t3 iterable < string > missing = iterables . filter ( <identifier> , <identifier> . not ( <identifier> . in ( sets . new <identifiersep> hash <identifiersep> set ( ret ) ) ) ) ; \n <ect>
\t3 <comment> \n \t3 int task = message . task ( ) ; \n \t3 <identifier> <identifiersep> queue queue = deserialize <identifiersep> queues . get ( task ) ; \n \t3 if ( queue == null ) { \n <ect>
\t2 log . info ( <string_literal> , status <identifiersep> as <identifiersep> string ( ) ) ; \n \t2 send <identifiersep> empty ( <identifier> <identifiersep> log . append <identifiersep> index ( ) , last <identifiersep> leader <identifiersep> context ) ; } \n \t1 public synchronized void stop ( ) \n \t1 { \n <ect>
\t3 encoded <identifiersep> signature = url <identifiersep> encoder . encode ( signature , <string_literal> ) ; \n \t2 } catch ( exception ex ) { \n \t3 ex . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t2 string url = <string_literal> + host + <string_literal> + prop . get <identifiersep> property ( <string_literal> ) + <string_literal> + prop . get <identifiersep> property ( <string_literal> ) + <string_literal> + temp + <string_literal> + encoded <identifiersep> signature ; \n <ect>
\t5 public int compare ( application <identifiersep> report <identifier> , application <identifiersep> report <identifier> ) { \n \t6 return <identifier> . get <identifiersep> application <identifiersep> id ( ) . compare <identifiersep> to ( <identifier> . get <identifiersep> application <identifiersep> id ( ) ) * - 1 ; } \n \t4 } ) ; \n \t4 tmp <identifiersep> app <identifiersep> id = apps . get ( 0 ) . get <identifiersep> application <identifiersep> id ( ) ; \n <ect>
\t5 pstmt <identifiersep> cidr . set <identifiersep> string ( <number_literal> , cidr ) ; \n \t5 pstmt <identifiersep> cidr . execute <identifiersep> update ( ) ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , e ) ; } \n <ect>
\t3 class < ? > clazz = class . for <identifiersep> name ( resource <identifiersep> name ) ; \n \t3 constructor constructor = clazz . get <identifiersep> constructor ( ) ; \n \t3 resource = ( server <identifiersep> resource ) constructor . new <identifiersep> instance ( ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
<number_literal> logger . debug ( <string_literal> <string_literal> x <string_literal> \\ <string_literal> ) ; } \n \t10 try { \n <number_literal> set <identifiersep> height ( integer . parse <identifiersep> int ( resolution . substring ( resolution . index <identifiersep> of ( <string_literal> ) + 1 ) ) ) ; \n \t10 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void all <identifiersep> bindings <identifiersep> changed ( binding <identifiersep> provider provider ) { \n <ect>
\t3 me . set <identifiersep> last <identifiersep> active ( new date ( ) ) ; \n \t3 try { \n \t4 e <identifiersep> person <identifiersep> service . update ( context , me ) ; \n \t3 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t1 public < t extends view > t on <identifiersep> error <identifiersep> use ( class < t > view ) { \n \t2 if ( ! has <identifiersep> errors ( ) ) { \n \t3 return new mock <identifiersep> result ( <identifier> ) . use ( view ) ; <comment> \n <ect>
\t7 if ( i > 0 ) \n \t8 sb . append ( <string_literal> ) ; \n \t7 sb . append ( arguments [ i ] ) ; } } \n \t5 sb . append ( ' ) ' ) ; \n <ect>
\t4 logger . debug ( <string_literal> , line ) ; \n \t4 if ( command != null && status <identifiersep> map . get ( command ) . equals ( value ) ) { \n \t5 return ; \n \t4 } else { \n <ect>
\t5 notify <identifiersep> writer ( m ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t5 return new oak <identifiersep> solr <identifiersep> node <identifiersep> state <identifiersep> configuration ( node ) ; \n \t4 } else { \n \t5 return fallback <identifiersep> oak <identifiersep> solr <identifiersep> configuration <identifiersep> provider . get <identifiersep> configuration ( ) ; } \n \t3 } else if ( node . exists ( ) ) { \n <ect>
\t1 private static void add <identifiersep> class <identifiersep> <identifier> ( set < class > <identifier> <identifiersep> classes , string class <identifiersep> name ) { \n \t2 try { \n \t3 <identifier> <identifiersep> classes . add ( class . for <identifiersep> name ( class <identifiersep> name ) ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 cms <identifiersep> group group = m <identifiersep> cms . read <identifiersep> group ( new cms <identifiersep> uuid ( uuid ) ) ; \n \t3 m <identifiersep> app . update ( group . get <identifiersep> <identifier> <identifiersep> fqn ( ) , cms <identifiersep> <identifier> <identifiersep> tree <identifiersep> type . group , group . get <identifiersep> id ( ) ) ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t8 log . info ( <string_literal> + arg + <string_literal> + e + ' ] ' ) ; \n \t7 return <string_literal> ; } \n <ect>
\t4 f <identifiersep> out . close ( ) ; } \n \t3 socket <identifiersep> to <identifiersep> web . close ( ) ; \n \t3 to <identifiersep> browser . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 try { \n \t5 stream . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { } } } \n \t2 long t2 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t2 set < node > node <identifiersep> set = this . type <identifiersep> to <identifiersep> nodes <identifiersep> map . get ( node <identifiersep> type . internal <identifiersep> node ) ; \n \t2 if ( node <identifiersep> set == null || node <identifiersep> set . is <identifiersep> empty ( ) ) \n \t3 return ; \n \t2 list < node > nodes = new array <identifiersep> list < > ( node <identifiersep> set ) ; \n <ect>
\t1 logger . warn ( str ( e ) ) \n \t1 sys . exit ( ) \n if result != 0 : \n \t1 print \n <ect>
\t5 if ( log . should <identifiersep> log ( log . warn ) ) \n \t6 log . warn ( <string_literal> , iae ) ; \n \t4 } catch ( data <identifiersep> format <identifiersep> exception dfe ) { \n \t5 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 san <identifiersep> volume <identifiersep> info snap <identifiersep> info = new san <identifiersep> volume <identifiersep> info ( snapshot <identifiersep> id , iqn + ' , ' + lun , size ) . with <identifiersep> san <identifiersep> volume <identifiersep> id ( san <identifiersep> snapshot <identifiersep> id ) ; \n \t2 try { \n \t2 transactions . save ( snap <identifiersep> info ) ; \n \t2 } catch ( transaction <identifiersep> exception e ) { \n <ect>
\t4 } catch ( concurrent <identifiersep> operation <identifiersep> exception e ) { \n \t5 assert ( false ) : <string_literal> ; \n \t5 return null ; } \n \t3 } else { \n <ect>
public static future < string > add ( storage <identifiersep> writer task ) throws thread <identifiersep> pool <identifiersep> not <identifiersep> initialized <identifiersep> exception { \n \t1 if ( backend <identifiersep> writer <identifiersep> pool != null && ! backend <identifiersep> writer <identifiersep> pool . is <identifiersep> shutdown ( ) ) { \n \t1 return backend <identifiersep> writer <identifiersep> pool . submit ( task ) ; \n \t1 } else { \n <ect>
\t2 string cube <identifiersep> name ; \n \t2 logger . info ( <string_literal> + arrays . to <identifiersep> string ( args ) ) ; \n \t2 try { \n \t3 options <identifiersep> helper . parse <identifiersep> options ( options , args ) ; \n <ect>
\t4 init <identifiersep> context . rebind ( <string_literal> , com . <identifier> . ats . jta . user <identifiersep> transaction . user <identifiersep> transaction ( ) ) ; \n \t4 init <identifiersep> context . rebind ( <string_literal> , transaction <identifiersep> manager . transaction <identifiersep> manager ( ) ) ; \n \t4 init <identifiersep> context . rebind ( <string_literal> , new com . <identifier> . ats . internal . jta . transaction . <identifier> . transaction <identifiersep> synchronization <identifiersep> registry <identifiersep> <identifier> ( ) ) ; \n \t3 } catch ( naming <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void saml <identifiersep> meta <identifiersep> data <identifiersep> service <identifiersep> provider <identifiersep> loading <identifiersep> error ( throwable t ) { \n <ect>
\t3 throw new access <identifiersep> denied <identifiersep> exception ( <string_literal> + get <identifiersep> private <identifiersep> key <identifiersep> block <identifiersep> name ( ) ) ; } \n \t2 key unwrapped <identifiersep> private <identifiersep> key = <identifier> . wrapped <identifiersep> key ( ) . unwrap <identifiersep> key ( <identifier> <identifiersep> key ) ; \n \t2 if ( ! ( unwrapped <identifiersep> private <identifiersep> key instanceof private <identifiersep> key ) ) { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> accesscontrol , level . info ) ) { \n <ect>
\t1 private static final logger log = logger . create ( parser ) \n \t1 private final parsing delegate \n \t1 parser ( ) { \n \t2 string <identifier> = preferences . get <identifiersep> parser <identifiersep> <identifier> ( ) \n <ect>
\t1 string time = null ; \n \t1 try { \n \t2 time = <identifier> . format ( date ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t2 public boolean call ( ) throws exception { \n \t2 long then = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 conn <identifiersep> master . replication <identifiersep> operations ( ) . drain ( master <identifiersep> table , files <identifiersep> <identifier> <identifiersep> replication ) ; \n \t2 long now = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t4 headers . for <identifiersep> each ( message <identifiersep> headers : : put <identifiersep> if <identifiersep> absent ) ; } \n \t3 return this . message <identifiersep> converter . to <identifiersep> message ( data , message <identifiersep> headers ) ; } \n \t2 else { \n <ect>
\t2 <comment> \n \t2 @ override public synchronized void on <identifiersep> attribute <identifiersep> set ( object key , object val ) { \n \t3 assert key != null ; \n <ect>
\t1 private static final transient logger log = logger <identifiersep> factory . get <identifiersep> logger ( tag <identifiersep> consumer . class ) ; \n \t1 private list < string > tag <identifiersep> names = new array <identifiersep> list < string > ( ) ; \n \t1 public tag <identifiersep> consumer ( git <identifiersep> hub <identifiersep> endpoint endpoint , processor processor ) throws exception { \n \t2 super ( endpoint , processor ) ; \n <ect>
\t2 public void subscription <identifiersep> removed ( subscription <identifiersep> event evt ) \n \t2 { \n \t3 synchronized ( this ) \n \t3 { \n <ect>
\t4 if ( topic <identifiersep> pattern != null ) { \n \t5 log . info ( <string_literal> , thread <identifiersep> id , topic <identifiersep> name ) ; \n \t5 consumer . subscribe ( topic <identifiersep> pattern , this ) ; \n \t4 } else { \n <ect>
\t2 else { \n \t3 num <identifiersep> failed -- ; } } \n \t2 return num <identifiersep> failed == failed <identifiersep> threshold ; } \n \t1 catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 for ( request <identifiersep> listener listener : listeners ) { \n \t3 try { \n \t4 listener . end ( request , response ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> network <identifiersep> mgr . release ( profile , force ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> + vm ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 return real <identifiersep> value ; } } } \n \t3 return null ; } \n \t2 catch ( throwable t ) { \n <ect>
\t8 s <identifiersep> logger . info ( <string_literal> + handler <identifiersep> clz . get <identifiersep> name ( ) + <string_literal> + method . get <identifiersep> name ( ) + <string_literal> ) ; } } \n \t5 clz = clz . get <identifiersep> <identifier> ( ) ; } \n \t3 } else { \n <ect>
\t2 net . <identifier> . <identifier> . api . types . project project ; \n \t2 try { \n \t3 project = <identifier> <identifiersep> manager . get <identifiersep> vnc <identifiersep> project ( owner . get <identifiersep> domain <identifiersep> id ( ) , owner . get <identifiersep> account <identifiersep> id ( ) ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 change <identifiersep> state ( state . <identifier> <identifiersep> sent <identifiersep> x ) ; \n \t3 <identifier> <identifiersep> transport . get <identifiersep> <identifier> ( ) . <identifier> <identifiersep> write ( <identifier> <identifiersep> con , to <identifiersep> write ) ; \n \t2 } else { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 list < long > network <identifiersep> ids = <identifier> <identifiersep> network <identifiersep> domain <identifiersep> dao . list <identifiersep> network <identifiersep> ids <identifiersep> by <identifiersep> domain ( domain <identifiersep> id ) ; \n \t2 call <identifiersep> context ctx = call <identifiersep> context . current ( ) ; \n \t2 reservation <identifiersep> context context = new reservation <identifiersep> context <identifiersep> impl ( null , null , <identifier> <identifiersep> account <identifiersep> mgr . get <identifiersep> active <identifiersep> user ( ctx . get <identifiersep> calling <identifiersep> user <identifiersep> id ( ) ) , ctx . get <identifiersep> calling <identifiersep> account ( ) ) ; \n \t2 for ( long network <identifiersep> id : network <identifiersep> ids ) { \n <ect>
\t1 try { \n \t1 artifact <identifiersep> provider . delete <identifiersep> resources ( new request <identifiersep> impl ( null , null , null , null ) , predicate ) ; \n \t1 kerberos <identifiersep> principal <identifiersep> dao . remove ( kerberos <identifiersep> principal <identifiersep> dao . find <identifiersep> all ( ) ) ; \n \t1 kerberos <identifiersep> keytab <identifiersep> dao . remove ( kerberos <identifiersep> keytab <identifiersep> dao . find <identifiersep> all ( ) ) ; \n <ect>
<comment> \n \t1 protected void handle <identifiersep> <identifier> <identifiersep> request ( final http <identifiersep> servlet <identifiersep> response response , final http <identifiersep> servlet <identifiersep> request request , \n \t9 final message <identifiersep> context soap <identifiersep> context , final credential credential , \n \t9 final string binding ) { \n <ect>
\t2 item . set <identifiersep> state ( <identifier> ) ; \n \t2 service . store ( item ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n \t2 after <identifiersep> <identifier> = new date ( ) ; \n <ect>
\t4 new integer ( m ) ) ; \n \t2 this . get <identifiersep> controller ( ) . notify <identifiersep> event <identifiersep> listeners ( z <identifiersep> event ) ; } \n \t1 public serial <identifiersep> message get <identifiersep> value <identifiersep> message ( ) { \n \t2 if ( ! this . is <identifiersep> get <identifiersep> supported ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 if ( target <identifiersep> root . compare <identifiersep> against <identifiersep> base <identifiersep> state ( reporting <identifiersep> source , new logging <identifiersep> equals <identifiersep> diff ( log , <string_literal> ) ) ) { \n \t3 log . info ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t2 <comment> \n \t2 if ( ! <identifier> . is <identifiersep> empty ( ) ) { \n \t3 config . put ( <string_literal> , <identifier> ) ; } } \n \t1 private void export <identifiersep> mail <identifiersep> templates ( final path target ) throws framework <identifiersep> exception { \n <ect>
\t1 for ( job job : all <identifiersep> jobs ) { \n \t2 job . set <identifiersep> session <identifiersep> tag ( null ) ; } \n \t1 return all <identifiersep> jobs ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
public ns <identifiersep> timestamp date <identifiersep> acquired ( ) { \n \t1 return ( ns <identifiersep> timestamp ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> unit . date <identifiersep> acquired <identifiersep> key ) ; } \n public void set <identifiersep> date <identifiersep> acquired ( ns <identifiersep> timestamp value ) { \n <ect>
\t4 manager . verify ( document , ( ( action <identifiersep> executed <identifiersep> event ) event ) . get <identifiersep> action <identifiersep> name ( ) , context ) ; \n \t3 } else if ( event instanceof action <identifiersep> executing <identifiersep> event ) { \n \t4 manager . <identifier> ( document , ( ( action <identifiersep> executing <identifiersep> event ) event ) . get <identifiersep> action <identifiersep> name ( ) , context ) ; } \n \t2 } else { \n <ect>
\t3 method named <identifiersep> groups <identifiersep> method = pattern . class . get <identifiersep> declared <identifiersep> method ( <string_literal> ) ; \n \t3 named <identifiersep> groups <identifiersep> method . set <identifiersep> accessible ( true ) ; \n \t3 return named <identifiersep> groups <identifiersep> method ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception | security <identifiersep> exception ex ) { \n <ect>
\t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( string . format ( <string_literal> ) ) ; } \n \t2 list < string > tuple = parse <identifiersep> <identifier> <identifiersep> url ( profile ) ; \n \t2 string cmd = string . format ( <string_literal> , tuple . get ( 1 ) , tuple . get ( <number_literal> ) , profile . get <identifiersep> template ( ) . get <identifiersep> uuid ( ) , \n \t4 string . format ( <string_literal> , nic . get <identifiersep> mac <identifiersep> address ( ) . replace <identifiersep> all ( <string_literal> , <string_literal> ) ) . to <identifiersep> lower <identifiersep> case ( ) , tuple . get ( 0 ) , nic . get <identifiersep> mac <identifiersep> address ( ) . to <identifiersep> lower <identifiersep> case ( ) ) ; \n <ect>
public void run ( ) { \n \t1 log . info ( <string_literal> ) ; \n \t1 if ( ! ( bootstrap . is <identifiersep> <identifier> ( ) && \n \t2 topology . is <identifiersep> enabled ( cloud <identifiersep> watch <identifiersep> backend . class ) ) ) { \n <ect>
\t5 as <identifiersep> char <identifiersep> source ( file , charsets . utf <identifiersep> <number_literal> ) ) . elements ( ) ; \n \t3 iterables . add <identifiersep> all ( elements , loaded <identifiersep> elements ) ; \n \t3 logger . debug ( <string_literal> , iterables . size ( loaded <identifiersep> elements ) , file ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( removed != null ) { \n \t3 removed . disconnect ( next <identifiersep> state ) ; } \n \t2 for ( final pair < integer , listener > monitor : <identifier> <identifiersep> host <identifiersep> <identifier> ) { \n <ect>
\t1 <comment> \n \t1 file <identifiersep> util . copy <identifiersep> merge ( <identifier> , parts <identifiersep> path , fs , output <identifiersep> path , true , conf , null ) ; \n \t1 <comment> <ect>
\t7 . get <identifiersep> default <identifiersep> <identifier> <identifiersep> sip <identifiersep> provider ( ) \n \t8 . get <identifiersep> new <identifiersep> client <identifiersep> transaction ( request ) ; } \n \t4 catch ( transaction <identifiersep> unavailable <identifiersep> exception e ) \n \t4 { \n <ect>
\t5 log . error ( <string_literal> , e ) ; } } \n \t3 try { \n \t4 ( ( lifecycle ) valve ) . destroy ( ) ; \n \t3 } catch ( lifecycle <identifiersep> exception e ) { \n <ect>
\t4 { \n \t5 this . removed <identifiersep> <identifier> . wait ( milliseconds ) ; } \n \t4 catch ( interrupted <identifiersep> exception ex ) \n \t4 { \n <ect>
\t2 int x = stack . size ( ) ; \n \t2 op . visit ( this ) ; \n \t2 int y = stack . size ( ) ; \n \t2 if ( x != y ) \n <ect>
\t4 try { \n \t5 s = base64 . decode <identifiersep> utf8 ( s ) ; \n \t4 } catch ( illegal <identifiersep> <identifier> e ) { \n \t5 <comment> \n <ect>
\t2 core <identifiersep> properties . preview <identifiersep> include <identifiersep> plugins , core <identifiersep> properties . preview <identifiersep> include <identifiersep> plugins <identifiersep> default <identifiersep> value ) ) ; \n \t1 <identifier> . add <identifiersep> all ( property <identifiersep> values ( settings , \n \t2 core <identifiersep> properties . preview <identifiersep> exclude <identifiersep> plugins , core <identifiersep> properties . preview <identifiersep> exclude <identifiersep> plugins <identifiersep> default <identifiersep> value ) ) ; } \n \t1 if ( ! <identifier> . is <identifiersep> empty ( ) ) { \n <ect>
\t5 log . debug ( <string_literal> + source ) ; \n \t4 destination . add <identifiersep> entries <identifiersep> from <identifiersep> dictionary ( source ) ; \n \t3 } else { \n <ect>
\t1 object <identifiersep> name = new object <identifiersep> name ( \n \t2 <string_literal> \n \t3 + thread . current <identifiersep> thread ( ) . get <identifiersep> name ( ) ) ; \n \t1 } catch ( malformed <identifiersep> object <identifiersep> name <identifiersep> exception e ) { \n <ect>
\t5 state . consume <identifiersep> <identifier> ( completed <identifiersep> rows <identifiersep> height , row <identifiersep> height ) ; \n \t4 } else { \n \t5 state . begin <identifiersep> cell ( cell , completed <identifiersep> rows <identifiersep> height , row <identifiersep> height ) ; \n \t5 if ( logger . is <identifiersep> logging ( level . info ) ) { \n <ect>
\t2 } else { \n \t3 if ( ! double . is <identifiersep> <identifier> ( value / num <identifiersep> rows <identifiersep> used ) && ! double . is <identifiersep> na <identifiersep> n ( value / num <identifiersep> rows <identifiersep> used ) ) { \n \t4 return value / num <identifiersep> rows <identifiersep> used ; \n \t3 } else { \n <ect>
\t3 is <identifiersep> killed ? scheduler <identifiersep> fragment <identifiersep> <identifier> <identifiersep> listener . state . killed : \n \t4 scheduler <identifiersep> fragment <identifiersep> <identifier> <identifiersep> listener . state . failed ) ; \n \t2 return ! heartbeat ( tez <identifiersep> events ) . should <identifiersep> <identifier> ; \n \t1 } else { \n <ect>
\t4 logger . warning ( <string_literal> + <identifier> ) ; \n \t4 <comment> \n \t4 <comment> \n \t3 if ( mime <identifiersep> types == null ) { \n <ect>
\t2 self . logger . debug ( <string_literal> % url ) \n \t2 res = self . send <identifiersep> cmd <identifiersep> to <identifiersep> <identifier> ( url , method = <string_literal> ) \n \t2 # remove service package from <identifier> \n \t2 url = <string_literal> + self . <identifier> + <string_literal> + srv <identifiersep> pkg <identifiersep> id \n <ect>
\t1 } catch ( exception e ) { \n \t2 log . warn ( e . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> \n \t3 + client <identifiersep> stats <identifiersep> publisher <identifiersep> class . trim ( ) + <string_literal> ) ; \n \t2 log . warn ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n <ect>
\t4 do { \n \t5 current <identifiersep> send <identifiersep> count = messages <identifiersep> sent <identifiersep> count <identifiersep> down . get <identifiersep> count ( ) ; \n \t5 time <identifiersep> unit . seconds . sleep ( <number_literal> ) ; \n \t4 } while ( current <identifiersep> send <identifiersep> count != messages <identifiersep> sent <identifiersep> count <identifiersep> down . get <identifiersep> count ( ) ) ; \n <ect>
\t2 log . info ( <string_literal> , generate <identifiersep> comments <identifiersep> on <identifiersep> keys ( ) ) ; \n \t2 log . info ( <string_literal> , generate <identifiersep> comments <identifiersep> on <identifiersep> links ( ) ) ; \n \t2 log . info ( <string_literal> , generate <identifiersep> comments <identifiersep> on <identifiersep> packages ( ) ) ; \n \t2 log . info ( <string_literal> , generate <identifiersep> comments <identifiersep> on <identifiersep> parameters ( ) ) ; \n <ect>
\t3 result . set <identifiersep> success <identifiersep> is <identifiersep> set ( true ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t3 log . warn ( <string_literal> + filename ) ; \n \t3 return ; } \n \t2 statement manifest <identifiersep> item <identifiersep> stmt = manifest <identifiersep> <identifier> . next <identifiersep> statement ( ) ; \n \t2 if ( manifest <identifiersep> <identifier> . has <identifiersep> next ( ) ) { \n <ect>
\t4 if ( ! s3 . does <identifiersep> bucket <identifiersep> exist ( bucket <identifiersep> name ) ) { \n \t5 try { \n \t6 s3 . create <identifiersep> bucket ( bucket <identifiersep> name ) ; \n <ect>
\t3 connection . disconnect ( ) ; \n \t3 return code ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 <comment> \n <ect>
\t2 case map : mapping <identifiersep> edge = > <comment> } \n \t1 ) \n \t1 val detector = new cycle <identifiersep> detector ( job <identifiersep> graph ) \n \t1 if ( detector . detect <identifiersep> <identifier> ) { \n <ect>
\t4 log . info ( <string_literal> + cmd + <string_literal> + line + <string_literal> ) ; \n \t3 if ( stored . equals ( line ) ) { \n <ect>
<number_literal> sword <identifiersep> validation <identifiersep> info <identifiersep> type . info ) ; \n \t5 info . set <identifiersep> content <identifiersep> description ( element . get <identifiersep> value ( ) ) ; \n \t5 validation <identifiersep> items . add ( info ) ; } } \n \t2 } catch ( exception ex ) { \n <ect>
\t1 try { \n \t1 class < ? extends object > driver <identifiersep> class = class . for <identifiersep> name ( driver <identifiersep> class <identifiersep> name ) ; \n \t1 return get <identifiersep> jar <identifiersep> path <identifiersep> for <identifiersep> class ( driver <identifiersep> class ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception cnfe ) { \n <ect>
\t4 batch <identifiersep> control <identifiersep> producer . close ( ) ; } \n \t2 } catch ( already <identifiersep> closed <identifiersep> exception <identifier> ) { \n \t3 log . warn ( <string_literal> , <identifier> ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 try { \n \t4 long id = <identifier> . read <identifiersep> long ( ) ; \n \t4 <identifier> = <string_literal> + id ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( error != null ) { \n \t2 if ( ( error instanceof interrupted <identifiersep> exception ) || \n \t3 ( error instanceof hive <identifiersep> exception && \n \t3 error . get <identifiersep> cause ( ) instanceof interrupted <identifiersep> exception ) ) { \n <ect>
\t3 dr . set <identifiersep> item ( installed <identifiersep> item ) ; \n \t3 dr . set <identifiersep> <identifier> ( this . get <identifiersep> <identifier> ( ) ) ; \n \t3 return dr ; \n \t2 } catch ( runtime <identifiersep> exception re ) { \n <ect>
\t2 log . debug ( <string_literal> , new string ( iso , charset . for <identifiersep> name ( <string_literal> ) ) ) ; \n \t2 for ( byte b : utf ) { \n \t3 log . debug ( <string_literal> , b ) ; } \n \t2 for ( byte b : iso ) { \n <ect>
\t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n <ect>
\t2 if ( get <identifiersep> basedir ( ) != null && get <identifiersep> basedir ( ) . length ( ) > 0 ) { \n \t3 try { \n \t4 file <identifiersep> server . get <identifiersep> file <identifiersep> server ( ) . set <identifiersep> basedir ( file <identifiersep> server . get <identifiersep> file <identifiersep> server ( ) . get <identifiersep> base <identifiersep> dir ( ) + get <identifiersep> basedir ( ) ) ; \n \t3 } catch ( illegal <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t1 with <identifiersep> context <identifiersep> class <identifiersep> loader ( get <identifiersep> system <identifiersep> class <identifiersep> loader ( ) , ( ) - > { \n \t1 try { \n \t2 new default <identifiersep> resource <identifiersep> initializer ( ) . initialize ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 log . info ( <string_literal> + key ) ; } \n \t3 else { \n \t4 log . error ( <string_literal> + key ) ; \n <ect>
\t5 ( ( store <identifiersep> command ) command ) . set <identifiersep> value ( null ) ; } \n \t4 break ; } } \n \t1 @ override \n \t1 public void on <identifiersep> exception <identifiersep> caught ( session session , throwable throwable ) { \n <ect>
\t4 send <identifiersep> message . set <identifiersep> int <identifiersep> property ( <string_literal> , i ) ; \n \t4 jms <identifiersep> producer . send ( send <identifiersep> message ) ; \n \t4 producer <identifiersep> session . commit ( ) ; \n \t4 number <identifiersep> of <identifiersep> message <identifiersep> sent ++ ; } \n <ect>
\t2 int count = meta . get <identifiersep> int ( ) ; \n \t2 int bytes = meta . get <identifiersep> int ( ) ; \n \t2 int magic = meta . get <identifiersep> int ( ) ; \n \t2 if ( magic != graph <identifiersep> magic ) { \n <ect>
<comment> \n \t1 private properties filter <identifiersep> system <identifiersep> class <identifiersep> path ( properties properties , abstract <identifiersep> language <identifiersep> handler handler , logger logger ) { \n \t2 string property = properties . get <identifiersep> property ( <string_literal> , <string_literal> ) ; \n <ect>
\t1 protected void print <identifiersep> formatted <identifiersep> payload ( ) { \n \t2 super . print <identifiersep> formatted <identifiersep> payload ( ) ; \n \t2 logger . debug ( <string_literal> + mode ) ; \n \t2 logger . debug ( <string_literal> + rf <identifiersep> error ) ; \n <ect>
\t2 log . info ( <string_literal> + <identifier> ) ; \n \t2 quorum <identifiersep> <identifier> <identifier> = new quorum <identifiersep> <identifier> ( qp ) ; \n \t2 s2 = new quorum <identifiersep> peer ( peers , <identifier> , <identifier> , <identifier> , <number_literal> , <number_literal> , tick <identifiersep> time , init <identifiersep> limit , sync <identifiersep> limit , <identifier> ) ; \n \t2 assert . assert <identifiersep> equals ( <identifier> , s2 . get <identifiersep> client <identifiersep> port ( ) ) ; \n <ect>
\t8 log . info ( <string_literal> , <identifier> ) ; \n \t8 if ( reply <identifiersep> to != null && <identifier> != null ) { \n \t9 <comment> \n \t9 thread . sleep ( <number_literal> ) ; \n <ect>
\t9 name = name . replace <identifiersep> first ( <string_literal> , <string_literal> ) ; \n \t8 temp = content <identifiersep> name . from <identifiersep> uri ( name ) ; \n \t8 <comment> \n \t8 content <identifiersep> name = temp ; \n <ect>
\t2 entity <identifiersep> manager em = get <identifiersep> entity <identifiersep> manager <identifiersep> factory ( ) . create <identifiersep> entity <identifiersep> manager ( ) ; \n \t2 try { \n \t3 <comment> \n \t3 em . get <identifiersep> transaction ( ) . begin ( ) ; \n <ect>
\t3 <comment> \n \t3 <identifier> <identifiersep> <identifier> <identifiersep> job . get <identifiersep> timing ( ) . set <identifiersep> start <identifiersep> after ( <identifier> <identifiersep> context . clock ( ) . now ( ) + <identifier> <identifiersep> job <identifiersep> delay ) ; \n \t3 <identifier> <identifiersep> context . job <identifiersep> queue ( ) . add <identifiersep> job ( <identifier> <identifiersep> <identifier> <identifiersep> job ) ; \n \t2 } else { \n <ect>
\t2 double confidence = semantic <identifiersep> type . get <identifiersep> confidence <identifiersep> score ( ) ; \n \t2 origin origin = semantic <identifiersep> type . get <identifiersep> origin ( ) ; \n \t2 integer count <identifiersep> of <identifiersep> semantic <identifiersep> type = semantic <identifiersep> types <identifiersep> count . get ( domain <identifiersep> uri + property <identifiersep> uri ) ; \n \t2 if ( count <identifiersep> of <identifiersep> semantic <identifiersep> type == null ) { \n <ect>
\t3 event <identifiersep> logger event <identifiersep> logger = event <identifiersep> log <identifiersep> manager . get <identifiersep> event <identifiersep> logger ( cm ) ; \n \t3 assert <identifiersep> true ( event <identifiersep> logger . get <identifiersep> class ( ) . get <identifiersep> name ( ) , event <identifiersep> logger instanceof server <identifiersep> event <identifiersep> logger ) ; \n \t3 event <identifiersep> logger . info ( event <identifiersep> log <identifiersep> category . cluster , <string_literal> ) ; \n \t3 event <identifiersep> logger . info ( event <identifiersep> log <identifiersep> category . tasks , <string_literal> ) ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t4 pstmt . set <identifiersep> long ( <number_literal> , volume <identifiersep> id ) ; \n \t4 pstmt . execute <identifiersep> update ( ) ; } \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t5 logger . error ( <string_literal> , user <identifiersep> string , config <identifiersep> client <identifiersep> id ) ; \n \t5 properly <identifiersep> configured = false ; \n \t5 break ; } \n \t4 if ( oauth <identifiersep> credentials . client <identifiersep> secret == null ) { \n <ect>
\t3 result . <identifier> = ( table <identifiersep> not <identifiersep> found <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t2 } ) ; \n \t2 try { \n \t3 <identifier> <identifiersep> config <identifiersep> handler . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 try { \n \t5 handle <identifiersep> document <identifiersep> part ( pp , sb ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 cache < string , object > <identifier> = node2 . get <identifiersep> cache ( cache <identifiersep> name ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 node3 = create <identifiersep> manager ( ) ; \n \t3 cache < string , object > <identifier> = node3 . get <identifiersep> cache ( cache <identifiersep> name ) ; \n <ect>
\t4 <comment> \n \t4 if ( dedicated <identifiersep> zone <identifiersep> of <identifiersep> pod . get <identifiersep> account <identifiersep> id ( ) != null || ( account <identifiersep> id == null && ! domain <identifiersep> id <identifiersep> in <identifiersep> <identifier> <identifiersep> list ) || \n \t5 ( account <identifiersep> id != null && ! ( dedicated <identifiersep> zone <identifiersep> of <identifiersep> pod . get <identifiersep> domain <identifiersep> id ( ) . equals ( domain <identifiersep> id ) || domain <identifiersep> id <identifiersep> in <identifiersep> <identifier> <identifiersep> list ) ) ) { \n \t5 data <identifiersep> center <identifiersep> vo zone = <identifier> <identifiersep> zone <identifiersep> dao . find <identifiersep> by <identifiersep> id ( pod . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; \n <ect>
\t2 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 final map < string , object > attributes = new hash <identifiersep> map < > ( ) ; \n \t2 final map < string , object > principal <identifiersep> attributes = get <identifiersep> cas <identifiersep> principal <identifiersep> attributes ( model , registered <identifiersep> service ) ; \n \t2 attributes . put <identifiersep> all ( principal <identifiersep> attributes ) ; \n <ect>
\t4 { \n \t5 txn . close ( ) ; } } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t1 <identifier> <identifiersep> reports . get <identifiersep> instance ( ) \n \t3 . lookup <identifiersep> report ( account <identifiersep> full <identifiersep> name . get <identifiersep> instance ( account <identifiersep> id ) , year , <identifier> ) . stream ( ) \n \t3 . for <identifiersep> each ( r - > sb . append ( string . format ( <string_literal> , r . to <identifiersep> string ( ) ) ) ) ; \n \t1 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n <ect>
\t2 <string_literal> + release . get <identifiersep> version , \n \t2 <string_literal> + release . get <identifiersep> windows <identifiersep> asset . get <identifiersep> id , \n \t2 <string_literal> + ( new file ( <string_literal> ) ) . get <identifiersep> absolute <identifiersep> path , \n \t2 <string_literal> + extraction <identifiersep> folder + <string_literal> + release . get <identifiersep> version + <string_literal> ) \n <ect>
\t5 log . info ( <string_literal> ) ; \n \t4 return <identifier> ; } \n <ect>
\t3 dispatch <identifiersep> future . get ( ) ; \n \t2 } catch ( final interrupted <identifiersep> exception e ) { \n \t3 log . info ( <string_literal> , e ) ; \n \t2 } catch ( final execution <identifiersep> exception e ) { \n <ect>
\t1 public void configure <identifiersep> authentication <identifiersep> service <identifiersep> selection <identifiersep> strategy ( final authentication <identifiersep> service <identifiersep> selection <identifiersep> plan plan ) { \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> <identifier> <identifiersep> idp ( ) . get <identifiersep> server <identifiersep> url ( ) ) ) { \n \t3 plan . register <identifiersep> strategy ( <identifier> <identifiersep> id <identifiersep> p <identifiersep> entity <identifiersep> id <identifiersep> authentication <identifiersep> service <identifiersep> selection <identifiersep> strategy ( ) ) ; \n \t2 } else { \n <ect>
<comment> \n \t3 fire <identifiersep> legacy <identifiersep> event : function ( e , legacy <identifiersep> index ) { \n <ect>
\t1 if ( ! options . is <identifiersep> batch <identifiersep> mode ( ) ) { \n \t1 if ( ! netezza <identifiersep> manager . batch <identifiersep> mode <identifiersep> warning <identifiersep> printed ) { \n \t2 log . warn ( <string_literal> ) ; \n \t2 log . warn ( <string_literal> ) ; \n <ect>
\t2 boolean rollback <identifiersep> present = ( rollback != null ) ; \n \t2 if ( rollback <identifiersep> present ) { \n \t3 boolean default <identifiersep> rollback = rollback . value ( ) ; \n <ect>
\t5 } catch ( exception e ) { \n \t6 logger . error ( <string_literal> , pms <identifiersep> ip ) ; } \n \t5 send <identifiersep> log <identifiersep> out ( pms <identifiersep> id ) ; \n \t4 } catch ( exception e ) { \n <ect>
<comment> \n \t2 try { \n \t3 s = conn . secret <identifiersep> lookup <identifiersep> by <identifiersep> uuid <identifiersep> string ( uuid ) ; \n \t2 } catch ( libvirt <identifiersep> exception e ) { \n <ect>
\t4 if ( config . is <identifiersep> keep <identifiersep> package <identifiersep> on <identifiersep> failed <identifiersep> <identifier> ( ) ) { \n \t5 try { \n \t6 this . store <identifiersep> entry <identifiersep> as <identifiersep> file ( <identifier> , auth <identifiersep> credentials , config ) ; \n \t5 } catch ( io <identifiersep> exception e2 ) { \n <ect>
\t1 private void <identifier> ( long tid , repo < t > op ) { \n \t1 try { \n \t2 op . <identifier> ( tid , environment ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 <identifier> [ j ++ ] = ( byte ) ' \\ \\ ' ; } \n \t4 <identifier> [ j ++ ] = ( byte ) ' \\ \\ ' ; } \n \t3 <identifier> [ j ] = <identifier> [ i ] ; } \n \t2 <comment> <ect>
\t5 device <identifiersep> id ) ; \n \t3 return ; } \n \t2 <identifier> <identifiersep> connector device <identifiersep> connector = device <identifiersep> config . get <identifiersep> initialized <identifiersep> connector ( ) ; \n \t2 if ( device <identifiersep> connector == null ) { \n <ect>
\t2 return prop ; } \n \t1 private static void delete <identifiersep> if <identifiersep> possible ( final file file ) { \n \t2 boolean deleted = file . delete ( ) ; \n \t2 if ( ! deleted ) { \n <ect>
\t5 if ( index <identifiersep> meta <identifiersep> data . get <identifiersep> state ( ) != index <identifiersep> meta <identifiersep> data . state . open ) { \n \t6 indices <identifiersep> to <identifiersep> open . add ( index <identifiersep> meta <identifiersep> data ) ; } } \n \t4 if ( indices <identifiersep> to <identifiersep> open . is <identifiersep> empty ( ) ) { \n \t5 return current <identifiersep> state ; } \n <ect>
\t2 assert <identifiersep> equals ( m <identifiersep> <identifier> \t1 , mb . get <identifiersep> stats <identifiersep> for <identifiersep> rule ( rule <identifiersep> name ) . get <identifiersep> matches <identifiersep> <identifier> ( ) \t1 ) ; } \n \t1 private void print ( generic <identifiersep> kie <identifiersep> session <identifiersep> monitoring <identifiersep> mx <identifiersep> bean mb ) { \n \t2 log . debug ( <string_literal> , mb . get <identifiersep> total <identifiersep> matches <identifiersep> created ( ) ) ; \n \t2 log . debug ( <string_literal> , mb . get <identifiersep> total <identifiersep> matches <identifiersep> cancelled ( ) ) ; \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + url ) ; \n \t3 return url ; } \n \t2 string host = uri . get <identifiersep> host ( ) ; \n \t2 if ( net <identifiersep> utils . is <identifiersep> valid <identifiersep> ip ( host ) ) { \n <ect>
\t3 try { \n \t4 crl . verify ( crl <identifiersep> issuer . get <identifiersep> public <identifiersep> key ( ) ) ; \n \t4 return true ; \n \t3 } catch ( general <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t3 default : \n \t4 return convert ( request . download , request . use <identifiersep> cache <identifiersep> file == null ? tag . get <identifiersep> file ( ) : request . use <identifiersep> cache <identifiersep> file , \n \t5 tag ) ; } } \n \t1 <identifier> <identifiersep> data do <identifiersep> <identifier> ( final http <identifiersep> request < ? > request ) throws exception , io <identifiersep> exception { \n <ect>
\t4 <identifier> . prepare ( xid ) ; \n \t4 <identifier> . commit ( xid , false ) ; \n \t4 xid = null ; \n \t3 } catch ( throwable e ) { \n <ect>
\t5 log . info ( string . format ( <string_literal> , test <identifiersep> file ) ) ; \n \t5 log . info ( <string_literal> ) ; \n \t4 } catch ( selenium <identifiersep> test <identifiersep> failure <identifiersep> exception e ) { \n \t5 failed = true ; \n <ect>
\t4 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> accesscontrol , level . info ) ) { \n \t5 log . info ( log . fac <identifiersep> accesscontrol , <string_literal> , <identifier> . get <identifiersep> versioned <identifiersep> name ( ) ) ; } } \n \t3 return <identifier> ; } \n \t2 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> accesscontrol , level . info ) ) { \n <ect>
\t3 timed . join ( consumers <identifiersep> manager <identifiersep> max <identifiersep> millis ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> ) ; } \n \t2 if ( timed . is <identifiersep> alive ( ) ) { \n <ect>
\t4 if ( task . is <identifiersep> terminate <identifiersep> signal ( ) ) { \n \t5 running = false ; } \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 thread <identifiersep> monitor . add <identifiersep> error ( e ) ; \n <ect>
\t2 sb . append ( <string_literal> ) . append ( job <identifiersep> plan . to <identifiersep> string ( ) ) ; \n \t2 return <string_literal> + sb . to <identifiersep> string ( ) ; } \n \t1 void map <identifiersep> mr <identifiersep> <identifier> <identifiersep> to <identifiersep> job ( map <identifiersep> reduce <identifiersep> <identifier> <identifier> , job job ) { \n \t2 if ( <identifier> == null ) { \n <ect>
\t4 input <identifiersep> stream input = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t4 element el = query <identifiersep> async <identifiersep> job <identifiersep> result ( server , input ) ; \n \t4 map < string , string > values = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( el , new string [ ] { <string_literal> } ) ; \n \t4 if ( values . get ( <string_literal> ) == null ) { \n <ect>
\t2 return ; } \n \t1 set < long > running <identifiersep> request <identifiersep> ids = new hash <identifiersep> set < > ( ) ; \n \t1 list < stage > first <identifiersep> stage <identifiersep> in <identifiersep> progress <identifiersep> per <identifiersep> request = db . get <identifiersep> first <identifiersep> stage <identifiersep> in <identifiersep> progress <identifiersep> per <identifiersep> request ( ) ; \n <ect>
\t3 property <identifier> = ( property ) it . next ( ) ; \n \t3 string <identifier> = <identifier> . get <identifiersep> name ( ) ; \n \t3 property <identifiersep> class <identifier> = ( property <identifiersep> class ) <identifier> . get <identifiersep> field ( <identifier> ) ; \n \t3 if ( <identifier> == null ) { \n <ect>
\t4 logger . trace ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) ) ; \n \t4 process <identifiersep> thermostat <identifiersep> <identifier> <identifiersep> state <identifiersep> report ( serial <identifiersep> message , offset , endpoint ) ; \n \t4 break ; \n \t3 default : \n <ect>
\t1 public synchronized void check <identifiersep> session ( long session <identifiersep> id , object owner ) \n \t3 throws keeper <identifiersep> exception . session <identifiersep> expired <identifiersep> exception , \n \t3 keeper <identifiersep> exception . session <identifiersep> moved <identifiersep> exception , \n \t3 keeper <identifiersep> exception . unknown <identifiersep> session <identifiersep> exception { \n <ect>
\t6 if ( game <identifiersep> sessions . get ( player . get <identifiersep> id ( ) ) == null ) { \n \t7 <comment> \n \t7 user . remove <identifiersep> <identifier> ( player . get <identifiersep> id ( ) ) ; \n \t7 game <identifiersep> manager . instance . join <identifiersep> game ( game . get <identifiersep> id ( ) , user . get <identifiersep> id ( ) ) ; \n <ect>
\t4 file <identifiersep> record . <identifier> \n \t3 ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t4 . key <identifiersep> consistent ( c ) ; \n \t2 try { \n \t3 fb . local <identifiersep> key <identifiersep> partition ( get <identifiersep> deployment ( ) == deployment . local ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 <comment> \n \t3 if ( ( ( time - client . last <identifiersep> seen ) > client <identifiersep> drop <identifiersep> time <identifiersep> millis ) || queue <identifiersep> too <identifiersep> large ) { \n \t4 client <identifiersep> event <identifiersep> listener listener = listeners . remove ( <identifier> . get <identifiersep> key ( ) ) ; \n \t4 if ( system <identifiersep> manager . debug ( <string_literal> ) ) { \n <ect>
\t3 } else { \n \t4 builder . set <identifiersep> http <identifiersep> request <identifiersep> initializer ( credential ) ; } \n \t3 this . client = builder . build ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 } else if ( b == frame <identifiersep> end [ 1 ] ) { \n \t8 <comment> \n \t8 break ; \n \t7 } else { \n <ect>
\t3 case transaction <identifiersep> rollback : \n \t4 spout <identifiersep> status = state . rollback ; \n \t4 if ( event . has <identifiersep> event <identifiersep> value ( ) ) { \n \t5 state = ( transaction <identifiersep> state ) event . get <identifiersep> event <identifiersep> value ( ) . get ( 0 ) ; } \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 <comment> \n <ect>
\t4 { \n \t5 job . cancel ( true ) ; } } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t2 } ) ; \n \t2 thread <identifiersep> pool . submit ( tls <identifiersep> future ) ; \n \t2 return tls <identifiersep> future . get ( <number_literal> , seconds ) ; \n \t2 } catch ( timeout <identifiersep> exception ex ) { \n <ect>
\t3 } catch ( socket <identifiersep> exception e ) { \n \t4 log . error ( <string_literal> , e ) ; \n \t4 return ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 iterator . remove ( ) ; <comment> \n \t2 } else if ( new <identifiersep> service <identifiersep> components . contains <identifiersep> key ( name ) ) { \n \t2 kerberos <identifiersep> component <identifiersep> descriptor old <identifiersep> value = old <identifiersep> service <identifiersep> components . get ( name ) ; \n \t2 kerberos <identifiersep> component <identifiersep> descriptor new <identifiersep> value = new <identifiersep> service <identifiersep> components . get ( name ) ; \n <ect>
\t2 <identifier> <identifiersep> app . read ( edm , people , null , null , response <identifiersep> handler ) ; \n \t2 final client <identifiersep> entity <identifiersep> set entity <identifiersep> set = response <identifiersep> handler . await ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( entity <identifiersep> set ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <number_literal> , entity <identifiersep> set . get <identifiersep> entities ( ) . size ( ) ) ; \n <ect>
\t1 return deserializer ; \n \t1 } catch ( runtime <identifiersep> exception e ) { \n \t1 throw e ; \n \t1 } catch ( throwable e ) { \n <ect>
\t2 for ( final string service <identifiersep> class <identifiersep> name : configured <identifiersep> service <identifiersep> classes ) { \n \t4 class service <identifiersep> class = get <identifiersep> service <identifiersep> class <identifiersep> for <identifiersep> name ( service <identifiersep> class <identifiersep> name ) ; \n \t4 if ( service <identifiersep> class != null ) { \n \t5 start <identifiersep> service ( service <identifiersep> class ) ; } } \n <ect>
\t5 <identifier> [ count ++ ] = new modification <identifiersep> item ( dir <identifiersep> context . remove <identifiersep> attribute , attr ) ; \n \t3 } else if ( <string_literal> . equals ( <identifier> ) ) { <comment> \n \t5 <identifier> [ count ++ ] = new modification <identifiersep> item ( dir <identifiersep> context . replace <identifiersep> attribute , attr ) ; \n \t3 } else { \n <ect>
\t1 private synchronized void check <identifiersep> for <identifiersep> endpoint <identifiersep> collision ( uuid local <identifiersep> host <identifiersep> id ) throws configuration <identifiersep> exception \n \t1 { \n \t2 if ( boolean . get <identifiersep> boolean ( <string_literal> ) ) \n \t2 { \n <ect>
\t2 file <identifiersep> item <identifier> = null ; \n \t2 for ( file <identifiersep> item item : <identifier> ) { \n \t3 if ( <identifier> <identifiersep> name . equals ( item . get <identifiersep> field <identifiersep> name ( ) ) ) { \n \t4 <identifier> = item ; \n <ect>
\t2 generate <identifiersep> duplicate <identifiersep> indexes ( use <identifiersep> <identifier> , this . remove <identifiersep> <identifier> <identifiersep> <identifier> || this . <identifier> <identifiersep> policy != duplicate <identifiersep> <identifier> <identifiersep> policy . dont <identifiersep> tag ) ; \n \t2 report <identifiersep> memory <identifiersep> stats ( <string_literal> ) ; \n \t2 log . info ( <string_literal> + this . num <identifiersep> duplicate <identifiersep> indices + <string_literal> ) ; \n \t2 if ( this . read <identifiersep> name <identifiersep> regex == null ) { \n <ect>
\t2 wro <identifiersep> util . to <identifiersep> package <identifiersep> as <identifiersep> folder ( get <identifiersep> class ( ) ) ) ; \n \t1 model . add <identifiersep> group ( new group ( <string_literal> ) . add <identifiersep> resource ( resource . create ( uri , resource <identifiersep> type . js ) ) ) ; \n \t1 <identifier> . when ( <identifier> <identifiersep> factory . create ( ) ) . then <identifiersep> return ( model ) ; \n \t1 final wro <identifiersep> model changed <identifiersep> model = transformer . transform ( model ) ; \n <ect>
\t6 error <identifiersep> builder = <identifier> . error . new <identifiersep> builder ( ) ; \n \t6 close <identifiersep> reason = receive <identifiersep> initiate ( initiate , max <identifiersep> value , error <identifiersep> builder ) ; \n \t6 if ( close <identifiersep> reason == null ) \n \t7 return ; \n <ect>
\t2 continue ; } \n \t1 try { \n \t2 class <identifiersep> list . add ( class . for <identifiersep> name ( class <identifiersep> name ) ) ; \n \t1 } catch ( exception ex ) { \n <ect>
def action <identifiersep> remove ( self ) : \n \t1 if self . user : \n \t1 command = [ <identifier> , self . resource . username ] \n \t1 shell . checked <identifiersep> call ( command , sudo = true ) \n <ect>
\t1 try { \n \t1 conn = db <identifiersep> conf . get <identifiersep> connection ( ) ; \n \t1 conn . set <identifiersep> auto <identifiersep> commit ( false ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t6 element . release ( network , profile , vm , null ) ; \n \t5 } catch ( final concurrent <identifiersep> operation <identifiersep> exception ex ) { \n \t6 s <identifiersep> logger . warn ( <string_literal> + nic . to <identifiersep> string ( ) + <string_literal> , ex ) ; \n \t5 } catch ( final resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
<comment> \n \t3 if ( is <identifiersep> write <identifiersep> request ) { \n \t4 outstanding <identifiersep> write <identifiersep> requests . decrement <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t2 } catch ( xml <identifiersep> rpc <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t6 string object <identifiersep> uri = input <identifiersep> att <identifiersep> values . get ( <identifier> ) ; \n \t6 if ( object <identifiersep> uri != null ) { \n \t7 object <identifiersep> resource = model . get <identifiersep> resource ( object <identifiersep> uri ) ; } } \n \t5 if ( object <identifiersep> resource == null ) { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t6 continue ; } } \n \t4 ip . set <identifiersep> nic <identifiersep> dev <identifiersep> id ( public <identifiersep> nic <identifiersep> info ) ; } \n \t2 } catch ( final exception e ) { \n <ect>
\t5 s <identifiersep> logger . info ( <string_literal> + item <identifiersep> variable <identifiersep> element . get <identifiersep> text <identifiersep> content ( ) ) ; \n \t5 try { \n \t6 connection conn = new connection ( item <identifiersep> variable <identifiersep> element . get <identifiersep> text <identifiersep> content ( ) ) ; \n \t6 conn . connect ( null , <number_literal> , <number_literal> ) ; \n <ect>
<comment> \n \t2 @ override \n \t2 public void on <identifiersep> matched ( message message ) { \n <ect>
\t1 public void test <identifiersep> simple <identifiersep> more <identifiersep> like <identifiersep> on <identifiersep> long <identifiersep> field ( ) throws exception { \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> acked ( prepare <identifiersep> create ( <string_literal> ) \n \t4 . add <identifiersep> mapping ( <string_literal> , <string_literal> , <string_literal> ) ) ; \n <ect>
\t4 return ; } \n \t3 else \n \t4 receive <identifiersep> stream <identifiersep> desc = new receive <identifiersep> stream <identifiersep> desc ( receive <identifiersep> stream ) ; \n <ect>
\t1 public void process ( map < string , object > mapping , class clazz , string converter <identifiersep> filename ) { \n \t2 try { \n \t3 input <identifiersep> stream is = file <identifiersep> manager . load <identifiersep> file ( class <identifiersep> loader <identifiersep> util . get <identifiersep> resource ( converter <identifiersep> filename , clazz ) ) ; \n \t3 if ( is != null ) { \n <ect>
\t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( cloud <identifiersep> runtime <identifiersep> exception e ) { \n <ect>
\t2 enum <identifiersep> pipe <identifiersep> part side = enum <identifiersep> pipe <identifiersep> part . from <identifiersep> meta ( <identifier> . get <identifiersep> byte ( <string_literal> ) ) ; \n \t2 i <identifiersep> statement statement = statement <identifiersep> manager . statements . get ( kind ) ; \n \t2 if ( statement instanceof i <identifiersep> trigger ) { \n \t3 return trigger <identifiersep> wrapper . wrap ( statement , side . face ) ; } \n <ect>
\t4 <identifier> <identifiersep> log . debug ( <string_literal> + sock + <string_literal> + to <identifiersep> string ( ) ) ; } \n \t2 <comment> \n \t2 if ( <identifier> == null && ( options & option <identifiersep> extension ) == 0 ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 log . debug ( <string_literal> , remote <identifiersep> address ) ; \n \t3 ch . set <identifiersep> readable ( true ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t3 } else { \n \t4 artifact = meta <identifiersep> data . artifact ( meta <identifiersep> data . get <identifiersep> <identifier> ( ) , meta <identifiersep> data . get <identifiersep> <identifier> ( ) , null ) ; } \n \t3 if ( artifact <identifiersep> resolver . artifact <identifiersep> exists ( artifact , new default <identifiersep> resource <identifiersep> aware <identifiersep> resolve <identifiersep> result ( ) ) ) { \n \t4 return true ; } \n <ect>
\t1 { \n \t2 security <identifiersep> cache <identifiersep> entry entry = get <identifiersep> entry ( entity ) ; \n \t2 if ( entry == null ) { \n <ect>
<comment> \n \t1 public synchronized boolean schedule <identifiersep> read ( datapoint datapoint , int auto <identifiersep> refresh <identifiersep> time <identifiersep> in <identifiersep> secs ) { \n \t2 if ( datapoint == null ) { \n <ect>
\t2 try { \n \t3 string url <identifiersep> str = <string_literal> + group <identifiersep> id + \n \t4 <string_literal> + initial <identifiersep> reconnect <identifiersep> delay ; \n \t3 active <identifiersep> mq <identifiersep> connection <identifiersep> factory factory = new active <identifiersep> mq <identifiersep> connection <identifiersep> factory ( url <identifiersep> str ) ; \n <ect>
<comment> \n private map < string , string > extract <identifiersep> variables ( final string variables <identifiersep> body ) { \n \t1 final map < string , string > map = new hash <identifiersep> map < string , string > ( ) ; \n \t1 final matcher m = pattern <identifiersep> variables <identifiersep> body . matcher ( variables <identifiersep> body ) ; \n <ect>
\t5 return ; } } \n \t3 logger . info ( <string_literal> ) ; \n \t3 boolean finished = this . cancellation <identifiersep> lock . await ( get <identifiersep> shutdown <identifiersep> timeout ( ) , time <identifiersep> unit . milliseconds ) ; \n \t3 if ( finished ) { \n <ect>
\t1 if ( <identifier> <identifiersep> volume <identifiersep> info instanceof iscsi <identifiersep> volume <identifiersep> info ) { \n \t2 iscsi <identifiersep> volume <identifiersep> info iscsi <identifiersep> volume <identifiersep> info = ( iscsi <identifiersep> volume <identifiersep> info ) <identifier> <identifiersep> volume <identifiersep> info ; \n \t2 string absolute <identifiersep> lv <identifiersep> name = <identifier> <identifiersep> root <identifiersep> directory + path <identifiersep> separator + iscsi <identifiersep> volume <identifiersep> info . get <identifiersep> <identifier> <identifiersep> name ( ) + path <identifiersep> separator + iscsi <identifiersep> volume <identifiersep> info . get <identifiersep> lv <identifiersep> name ( ) ; \n \t2 if ( ! <identifier> <identifiersep> wrapper . logical <identifiersep> volume <identifiersep> exists ( absolute <identifiersep> lv <identifiersep> name ) ) { \n <ect>
stop ( args ) \n start ( args ) \n @ os <identifiersep> family <identifiersep> func <identifiersep> impl ( os <identifiersep> family <identifiersep> impl . default ) \n def database <identifiersep> purge ( args ) : \n <ect>
\t1 public void stop <identifiersep> nodes ( ) { \n \t2 try { \n \t3 close <identifiersep> nodes ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 <identifier> <identifiersep> search = job ; } \n \t1 public void run <identifiersep> job ( ) { \n \t2 log log = get <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( get <identifiersep> class ( ) ) ; \n \t2 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 destination destination = session . create <identifiersep> queue ( queue <identifiersep> name ) ; \n \t2 populate <identifiersep> destination ( 1 , destination , connection ) ; \n \t2 message <identifiersep> consumer consumer = session . create <identifiersep> consumer ( destination ) ; \n \t2 text <identifiersep> message msg = ( text <identifiersep> message ) consumer . receive ( <number_literal> ) ; \n <ect>
\t5 } else { \n \t6 logger . error ( <string_literal> ) ; \n \t6 state = <identifier> <identifiersep> <identifier> <identifiersep> state . finished ; } \n \t4 } else { \n <ect>
\t2 { \n \t3 response response = client . target ( generate <identifiersep> url ( <string_literal> , url <identifiersep> prefix + ext ) ) . request ( ) \n \t5 . post ( entity . entity ( external <identifiersep> xml <identifiersep> root <identifiersep> element , <string_literal> ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t3 if ( group <identifiersep> str != null ) { \n \t4 try { \n \t5 group <identifiersep> id = short . parse <identifiersep> short ( group <identifiersep> str ) ; \n \t4 } catch ( java . lang . number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t7 disk <identifiersep> offering disk <identifiersep> offering = <identifier> <identifiersep> entity <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( disk <identifiersep> offering . class , vol . get <identifiersep> disk <identifiersep> offering <identifiersep> id ( ) ) ; \n \t7 if ( disk <identifiersep> offering . get <identifiersep> use <identifiersep> local <identifiersep> storage ( ) ) { \n \t8 <comment> \n <ect>
\t1 throw e ; } } \n @ override \n public void pass <identifiersep> through ( ) \n { \n <ect>
\t1 bootstrap . add ( new <identifier> <identifiersep> services ( ) ) ; \n \t1 bootstrap . add ( new bus <identifiersep> configuration ( ) ) ; \n \t1 bootstrap . add ( new finish <identifiersep> init ( ) ) ; } \n public void execute ( final bootstrap <identifiersep> context context ) { \n <ect>
\t1 this . max <identifiersep> <identifier> <identifiersep> size = conf . get <identifiersep> int ( max <identifiersep> <identifier> <identifiersep> size , default <identifiersep> max <identifiersep> <identifier> <identifiersep> size ) ; \n \t1 this . emit <identifiersep> <identifier> = conf . get <identifiersep> boolean ( <identifier> <identifiersep> driver . emit <identifiersep> <identifier> , <identifier> <identifiersep> driver . default <identifiersep> emit <identifiersep> <identifier> ) ; \n \t1 log . info ( <string_literal> , this . max <identifiersep> <identifier> <identifiersep> size ) ; \n <ect>
<comment> \n \t1 @ deprecated \n \t1 public int get <identifiersep> prepared <identifiersep> statements <identifiersep> cache <identifiersep> size ( ) { \n <ect>
\t5 catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t6 <comment> \n \t6 if ( this . location <identifiersep> id != null ) { \n \t7 this . location <identifiersep> id = null ; } \n <ect>
\t4 handle <identifiersep> job <identifiersep> manager <identifiersep> runner <identifiersep> error ( e ) ; } } } \n \t1 private void verify <identifiersep> job <identifiersep> scheduling <identifiersep> status <identifiersep> and <identifiersep> start <identifiersep> job <identifiersep> manager ( uuid leader <identifiersep> session <identifiersep> id ) throws exception { \n \t2 final job <identifiersep> scheduling <identifiersep> status job <identifiersep> scheduling <identifiersep> status = running <identifiersep> jobs <identifiersep> registry . get <identifiersep> job <identifiersep> scheduling <identifiersep> status ( job <identifiersep> graph . get <identifiersep> job <identifiersep> id ( ) ) ; \n \t2 if ( job <identifiersep> scheduling <identifiersep> status == job <identifiersep> scheduling <identifiersep> status . done ) { \n <ect>
\t1 try { \n \t1 string <identifiersep> props = <identifier> <identifiersep> properties . arg <identifiersep> array <identifiersep> to <identifiersep> props ( args , <string_literal> ) ; \n \t1 props . add <identifiersep> properties ( string <identifiersep> props ) ; \n \t1 } catch ( array <identifiersep> index <identifiersep> out <identifiersep> of <identifiersep> bounds <identifiersep> exception ex ) { \n <ect>
\t5 <identifier> = ( item <identifiersep> registry ) bundle <identifiersep> context . get <identifiersep> service ( service <identifiersep> <identifier> ) ; \n \t4 } else { \n \t5 logger . warn ( <string_literal> ) ; } \n \t3 } else { \n <ect>
\t2 code = shell . call ( get <identifiersep> stack <identifiersep> comp <identifiersep> version <identifiersep> cmd , quiet = true ) [ 0 ] \n \t2 out = f . read ( ) \n \t1 if code != 0 or out is none : \n \t2 raise value <identifiersep> error ( <string_literal> ) \n <ect>
\t7 log . error ( <string_literal> , ioe ) ; \n \t7 try { \n \t8 <identifier> . close ( ) ; \n \t7 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( pool != null ) { \n \t4 if ( pool . get <identifiersep> status ( ) == storage <identifiersep> pool <identifiersep> status . up && pool . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) == zone <identifiersep> id ) { \n \t5 prepare <identifiersep> template <identifiersep> in <identifiersep> one <identifiersep> storage <identifiersep> pool ( vm <identifiersep> template , pool ) ; \n \t4 } else { \n <ect>
\t1 connection . close ( ) ; \n \t1 } catch ( exception ex ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t4 throw new timeout <identifiersep> exception ( msg ) ; } \n \t3 for ( final event . record rec : events ) { \n \t4 if ( ! ( rec . snapshot instanceof task . record ) ) { \n <ect>
\t4 consumer = session . create <identifiersep> consumer ( destination ) ; } \n \t3 while ( running && received < message <identifiersep> count ) { \n \t4 message msg = consumer . receive ( receive <identifiersep> time <identifiersep> out ) ; \n \t4 if ( msg != null ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 s2 . start ( ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 s3 . start ( ) ; \n <ect>
\t2 if ( db <identifiersep> connection != null ) { \n \t3 try { \n \t4 this . db <identifiersep> connection . rollback ( ) ; \n \t3 } catch ( sql <identifiersep> exception se ) { \n <ect>
\t1 immutable <identifiersep> map < string , long > result = immutable <identifiersep> map . copy <identifiersep> of ( meta <identifiersep> call <identifiersep> time <identifiersep> map ) ; \n \t1 meta <identifiersep> call <identifiersep> time <identifiersep> map . clear ( ) ; \n \t1 return result ; } \n private boolean log <identifiersep> dump <identifiersep> phase ( string phase ) { \n <ect>
\t4 timeout . cancel ( false ) ; \n \t3 outgoing <identifiersep> file <identifiersep> message file = files . remove ( sequence <identifiersep> number ) ; \n \t3 if ( file != null ) \n \t4 file . complete ( ) ; \n <ect>
\t3 catch ( instantiation <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> + name + <string_literal> + mod . get <identifiersep> name ( ) , e ) ; \n \t4 continue ; } \n \t3 try { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t3 } else { \n \t4 for ( object [ ] dc : <identifier> ) { \n \t5 update <identifiersep> advanced <identifiersep> <identifier> <identifiersep> data <identifiersep> center ( conn , management <identifiersep> network <identifiersep> offering <identifiersep> id , public <identifiersep> network <identifiersep> offering <identifiersep> id , control <identifiersep> network <identifiersep> offering <identifiersep> id , storage <identifiersep> network <identifiersep> offering <identifiersep> id , dc ) ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 org . dspace . content . item item = find <identifiersep> item ( context , item <identifiersep> id , org . dspace . core . constants . write ) ; \n \t3 org . dspace . content . bitstream bitstream = bitstream <identifiersep> service . find <identifiersep> by <identifiersep> id <identifiersep> or <identifiersep> legacy <identifiersep> id ( context , bitstream <identifiersep> id ) ; \n \t3 if ( bitstream == null ) { \n \t4 context . abort ( ) ; \n <ect>
\t5 return ; } \n \t4 <comment> \n \t4 disk <identifiersep> file <identifiersep> upload . base <identifiersep> directory = upload <identifiersep> entity . get <identifiersep> install <identifiersep> path <identifiersep> prefix ( ) ; \n \t4 this . process <identifiersep> timeout = upload <identifiersep> entity . get <identifiersep> process <identifiersep> timeout ( ) ; \n <ect>
\t6 sec <identifiersep> storage <identifiersep> vm . get <identifiersep> public <identifiersep> ip <identifiersep> address ( ) + <string_literal> + sec <identifiersep> storage <identifiersep> vm . get <identifiersep> private <identifiersep> ip <identifiersep> address ( ) ) ; \n \t3 break ; \n \t2 case sec <identifiersep> storage <identifiersep> vm <identifiersep> alert <identifiersep> event <identifiersep> args . ssvm <identifiersep> up : \n <ect>
\t4 else \n \t4 { \n \t5 <identifier> <identifiersep> devices . add ( cdi ) ; \n \t5 if ( logger <identifiersep> is <identifiersep> debug <identifiersep> enabled ) \n <ect>
\t3 parameter . if <identifiersep> present ( basic <identifiersep> name <identifiersep> value <identifiersep> pair - > builder . add <identifiersep> parameter ( basic <identifiersep> name <identifiersep> value <identifiersep> pair . get <identifiersep> name ( ) , basic <identifiersep> name <identifiersep> value <identifiersep> pair . get <identifiersep> value ( ) ) ) ; \n \t3 parameter = get <identifiersep> query <identifiersep> parameter ( context , o <identifiersep> auth20constants . grant <identifiersep> type ) ; \n \t3 parameter . if <identifiersep> present ( basic <identifiersep> name <identifiersep> value <identifiersep> pair - > builder . add <identifiersep> parameter ( basic <identifiersep> name <identifiersep> value <identifiersep> pair . get <identifiersep> name ( ) , basic <identifiersep> name <identifiersep> value <identifiersep> pair . get <identifiersep> value ( ) ) ) ; \n \t3 final string callback <identifiersep> resolved = builder . build ( ) . to <identifiersep> string ( ) ; \n <ect>
\t1 float fraction <identifiersep> of <identifiersep> <identifier> <identifiersep> expected <identifiersep> good = 0 . <identifier> ; \n \t1 for ( int i = 0 ; i < fraction <identifiersep> of <identifiersep> <identifier> <identifiersep> expected <identifiersep> good * desired <identifiersep> rank ; i ++ ) { \n \t1 double s = state . get <identifiersep> <identifier> <identifiersep> value ( i ) ; \n \t1 double e = <identifier> . get ( i ) ; \n <ect>
\t3 zk <identifiersep> client . close ( ) ; \n \t3 zk <identifiersep> client = null ; } } \n \t1 protected void reload <identifiersep> configuration ( ) throws exception { \n \t2 if ( zk <identifiersep> client == null ) { \n <ect>
\t1 public static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( transport <identifiersep> factory . class ) ; \n \t1 public static i <identifiersep> context make <identifiersep> context ( map storm <identifiersep> conf ) { \n \t2 <comment> \n \t2 string transport <identifiersep> plugin <identifiersep> <identifier> <identifiersep> name = ( string ) storm <identifiersep> conf . get ( config . storm <identifiersep> messaging <identifiersep> transport ) ; \n <ect>
\t3 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t2 synchronized ( host <identifiersep> manager . <identifier> ) { \n \t3 host <identifiersep> state state = host <identifiersep> manager . <identifier> . remove ( <identifier> ) ; \n \t3 if ( state != null ) { \n <ect>
\t2 { \n \t3 if ( ! ( packet instanceof stream <identifiersep> <identifier> ) ) \n \t4 return ; \n <ect>
\t3 catalog . remove ( cs ) ; \n \t2 } else { \n \t3 new <identifier> <identifiersep> delete <identifiersep> visitor ( catalog ) . visit ( cs ) ; } \n \t2 clear ( cs ) ; \n <ect>
\t5 element = <identifier> <identifiersep> template ( ) ; \n \t5 cache <identifiersep> entry = new cache <identifiersep> entry ( requested <identifiersep> version , element ) ; \n \t5 <identifier> <identifiersep> cache . take <identifiersep> value <identifiersep> for <identifiersep> key ( cache <identifiersep> entry , cache <identifiersep> key ) ; } } \n \t3 else { <comment> \n <ect>
<comment> \n \t2 try { \n \t3 external <identifiersep> factory . lookup ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 log . info ( <string_literal> , generate <identifiersep> interfaces ( ) ) ; \n \t2 log . info ( <string_literal> , generate <identifiersep> javadoc ( ) ) ; \n \t2 log . info ( <string_literal> , generate <identifiersep> keys ( ) ) ; \n \t2 log . info ( <string_literal> , generate <identifiersep> links ( ) ) ; \n <ect>
\t3 sigar . variant = variant ; \n \t3 sigar <identifiersep> impl = new sigar ( ) ; } \n \t2 if ( sigar == null ) { \n \t3 sigar = sigar <identifiersep> proxy <identifiersep> cache . new <identifiersep> instance ( sigar <identifiersep> impl , <number_literal> ) ; } \n <ect>
\t3 client <identifiersep> app <identifiersep> manager <identifier> = <identifier> <identifiersep> context . client <identifiersep> app <identifiersep> manager ( ) ; \n \t3 if ( <identifier> != null ) \n \t4 <identifier> . unregister ( this ) ; } \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t1 @ override \n \t1 public boolean on <identifiersep> js <identifiersep> prompt ( web <identifiersep> view view , string url , string message , string default <identifiersep> value , \n \t2 js <identifiersep> prompt <identifiersep> result result ) { \n \t1 current <identifiersep> alert <identifiersep> message . add ( message == null ? <string_literal> : message ) ; \n <ect>
\t8 + <string_literal> + <identifier> <identifiersep> current <identifiersep> job ) ; } \n \t4 <comment> \n \t4 if ( diff > <number_literal> ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 p <identifiersep> stmt . set <identifiersep> long ( 1 , info . id ) ; \n \t2 log . debug ( <string_literal> + s + <string_literal> ) ; \n \t2 int upd <identifiersep> count = p <identifiersep> stmt . execute <identifiersep> update ( ) ; \n \t2 if ( upd <identifiersep> count != 1 ) { \n <ect>
\t2 if ( debug <identifiersep> output != null ) { \n \t3 try { \n \t4 debug <identifiersep> output . close ( ) ; \n \t3 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 close <identifiersep> stmt ( p <identifiersep> stmt ) ; \n \t2 db <identifiersep> conn . commit ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 return local <identifiersep> connection ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 try { \n \t2 mark <identifiersep> snapshot <identifiersep> failed ( ) ; \n \t2 log . debug ( <string_literal> + this . snapshot <identifiersep> id + <string_literal> ) ; \n \t1 } catch ( transaction <identifiersep> exception | no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public boolean send <identifiersep> set <identifiersep> time ( ) { \n <ect>
\t3 <identifier> . add ( queued <identifiersep> message ) ; \n \t3 return false ; } \n \t2 else if ( state == state . closed ) \n \t2 { \n <ect>
\t4 out <identifiersep> stream . flush ( ) ; \n \t3 } catch ( io <identifiersep> exception io <identifiersep> exception ) { \n \t4 logger . error ( <string_literal> , io <identifiersep> exception ) ; \n \t4 if ( retry > 0 ) { \n <ect>
\t2 string header = response . get <identifiersep> string <identifiersep> headers ( ) . get <identifiersep> first ( validation . validation <identifiersep> header ) ; \n \t2 assert . assert <identifiersep> not <identifiersep> null ( error <identifiersep> header <identifiersep> message , header ) ; \n \t2 assert . assert <identifiersep> true ( error <identifiersep> header <identifiersep> validation <identifiersep> exception <identifiersep> message , boolean . value <identifiersep> of ( header ) ) ; \n \t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t4 <identifier> title = extract <identifiersep> title <identifiersep> from <identifiersep> content ( document , parameters ) ; \n \t4 if ( title != null ) { \n \t5 return title ; } \n \t3 } catch ( exception e ) { \n <ect>
\t2 <identifier> <identifiersep> <identifier> = create <identifiersep> <identifier> ( <identifier> <identifiersep> receiver <identifiersep> threads , sock , <identifier> <identifiersep> name ) ; \n \t2 if ( ip <identifiersep> mcast ) \n \t3 mcast <identifiersep> <identifier> = create <identifiersep> <identifier> ( multicast <identifiersep> receiver <identifiersep> threads , mcast <identifiersep> sock , mcast <identifiersep> name ) ; } \n \t1 public void stop ( ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 return new pair < boolean , action <identifiersep> on <identifiersep> failed <identifiersep> authentication > ( false , null ) ; } \n \t2 user <identifiersep> account user = <identifier> <identifiersep> user <identifiersep> account <identifiersep> dao . get <identifiersep> user <identifiersep> account ( username , domain <identifiersep> id ) ; \n \t2 if ( user == null ) { \n <ect>
\t3 if ( is <identifiersep> critical ) { \n \t4 throw new general <identifiersep> security <identifiersep> exception ( sb . to <identifiersep> string ( ) ) ; } } } \n \t1 private static void validate <identifiersep> extended <identifiersep> key <identifiersep> usage ( x509certificate [ ] certs , list < string > expected <identifiersep> <identifier> ) throws general <identifiersep> security <identifiersep> exception { \n \t2 if ( expected <identifiersep> <identifier> == null || expected <identifiersep> <identifier> . size ( ) == 0 ) { \n <ect>
\t2 lock . lock ( ) ; \n \t2 try { \n \t3 return consume <identifiersep> element ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 o <identifiersep> spec . set <identifiersep> obj ( mor ) ; \n \t4 o <identifiersep> spec . set <identifiersep> skip ( boolean . true ) ; \n \t4 o <identifiersep> spec . get <identifiersep> select <identifiersep> set ( ) . add ( cluster <identifiersep> host <identifiersep> traversal ) ; \n \t3 } else { \n <ect>
\t2 ensure <identifiersep> <identifier> ( <string_literal> ) ; <comment> \n \t2 <comment> \n \t2 map < string , long [ ] > primary <identifiersep> terms = assert <identifiersep> and <identifiersep> capture <identifiersep> primary <identifiersep> terms ( null ) ; \n \t2 internal <identifiersep> cluster ( ) . full <identifiersep> restart ( ) ; \n <ect>
\t2 common <identifiersep> <identifier> <identifiersep> list . add ( new common <identifiersep> <identifier> <identifiersep> entry ( prefix <identifiersep> entry ) ) ; } \n \t2 reply . set <identifiersep> common <identifiersep> <identifier> <identifiersep> list ( common <identifiersep> <identifier> <identifiersep> list ) ; } \n \t1 return reply ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 dict . assert <identifiersep> same <identifiersep> dictionary ( in . get <identifiersep> file <identifiersep> header ( ) . get <identifiersep> sequence <identifiersep> dictionary ( ) ) ; \n \t3 } catch ( final assertion <identifiersep> error e ) { \n \t4 log . error ( <string_literal> + input <identifiersep> files . get ( 0 ) ) ; \n <ect>
\t2 for ( index <identifiersep> event <identifiersep> listener listener : listeners ) { \n \t3 try { \n \t4 listener . after <identifiersep> index <identifiersep> created ( index <identifiersep> service ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 string log <identifiersep> file <identifiersep> name = dir + file . separator + <string_literal> + action <identifiersep> data . game <identifiersep> id + <string_literal> ; \n \t3 try ( print <identifiersep> writer out = new print <identifiersep> writer ( new buffered <identifiersep> writer ( new file <identifiersep> writer ( log <identifiersep> file <identifiersep> name , true ) ) ) ) { \n \t4 out . println ( action <identifiersep> data . to <identifiersep> json ( ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 int value = ( ( decimal <identifiersep> type ) command ) . int <identifiersep> value ( ) ; \n \t3 http <identifiersep> util . execute <identifiersep> url ( get , create <identifiersep> user <identifiersep> password <identifiersep> hostname <identifiersep> prefix ( ) + suffix <identifiersep> volume + suffix <identifiersep> volume <identifiersep> set + value , \n \t5 this . time <identifiersep> out ) ; \n \t2 } else { \n <ect>
\t6 s . put ( m , mm ) ; \n \t6 p . put ( mm , m ) ; } } \n \t4 nb ++ ; } \n \t3 <identifier> = new <identifiersep> <identifier> ; } \n <ect>
\t4 end <identifiersep> time = end <identifiersep> time ( timeout - delta ) ; \n \t4 ctx . timeout ( ) . add <identifiersep> timeout <identifiersep> object ( this ) ; \n \t4 return ; } \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 return status ; } } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 if ( registered <identifiersep> service instanceof saml <identifiersep> registered <identifiersep> service ) { \n \t4 final url location = build <identifiersep> logout <identifiersep> url ( registered <identifiersep> service , single <identifiersep> logout <identifiersep> service ) ; \n \t4 if ( location != null ) { \n <ect>
\t4 new scheme ( <string_literal> , <number_literal> , new ssl <identifiersep> socket <identifiersep> factory <identifiersep> ex ( ssl <identifiersep> ctx ) ) ; \n \t3 http <identifiersep> client . get <identifiersep> connection <identifiersep> manager ( ) . get <identifiersep> scheme <identifiersep> registry ( ) . register ( sch ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n <ect>
\t4 <comment> \n \t4 min <identifiersep> size = <identifier> . <identifier> <identifiersep> cast ( ( <identifier> <identifiersep> file <identifiersep> store ( conf . commitlog <identifiersep> directory ) . get <identifiersep> total <identifiersep> space ( ) / <number_literal> ) / <number_literal> ) ; } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + template . get <identifiersep> name ( ) + <string_literal> + pool . get <identifiersep> name ( ) ) ; } \n \t3 } else { \n \t4 s <identifiersep> logger . info ( <string_literal> + template . get <identifiersep> name ( ) + <string_literal> + pool . get <identifiersep> name ( ) ) ; } \n \t2 } catch ( storage <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t3 string name = get <identifiersep> log <identifiersep> name ( ) ; \n \t3 if ( name == null ) { \n \t4 name = route <identifiersep> context . get <identifiersep> camel <identifiersep> context ( ) . get <identifiersep> global <identifiersep> option ( exchange . log <identifiersep> <identifier> <identifiersep> name ) ; \n \t4 if ( name != null ) { \n <ect>
\t1 } else { \n \t1 string err <identifiersep> msg = <string_literal> ; \n \t1 log . error ( err <identifiersep> msg ) ; \n \t1 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( err <identifiersep> msg ) ; } \n <ect>
\t3 else \n \t4 success = <identifier> <identifiersep> context . tunnel <identifiersep> dispatcher ( ) . join <identifiersep> participant ( cfg ) ; \n \t3 if ( success ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 if ( binding <identifiersep> config != null ) { \n \t3 <identifier> <identifiersep> binding <identifiersep> config config = parse <identifiersep> binding <identifiersep> config ( item , binding <identifiersep> config , null ) ; \n \t3 add <identifiersep> binding <identifiersep> config ( item , config ) ; \n \t2 } else { \n <ect>
\t3 args . out <identifiersep> transport <identifiersep> factory = transport <identifiersep> factory ; \n \t3 server <identifiersep> engine = new t <identifiersep> server <identifiersep> custom <identifiersep> factory ( database <identifiersep> descriptor . get <identifiersep> rpc <identifiersep> server <identifiersep> type ( ) ) . build <identifiersep> t <identifiersep> server ( args ) ; } \n \t2 public void run ( ) \n \t2 { \n <ect>
\t2 cli <identifiersep> service . cancel <identifiersep> delegation <identifiersep> token ( new session <identifiersep> handle ( req . get <identifiersep> session <identifiersep> handle ( ) ) , \n \t3 hive <identifiersep> auth <identifiersep> factory , req . get <identifiersep> delegation <identifiersep> token ( ) ) ; \n \t2 resp . set <identifiersep> status ( ok <identifiersep> status ) ; \n \t1 } catch ( hive <identifiersep> sql <identifiersep> exception e ) { \n <ect>
\t3 this . average <identifiersep> weight = 1 ; \n \t3 return this ; } \n \t2 public builder < k , v > segment <identifiersep> count ( int segment <identifiersep> count ) { \n \t3 if ( integer . bit <identifiersep> count ( segment <identifiersep> count ) != 1 || segment <identifiersep> count < 0 || segment <identifiersep> count > <number_literal> ) { \n <ect>
\t4 line = br . read <identifiersep> line ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> ) ; \n \t2 } catch ( solr <identifiersep> server <identifiersep> exception e ) { \n <ect>
\t1 public read <identifiersep> external <identifiersep> <identifier> <identifiersep> store ( final key <identifiersep> <identifier> < k , v > key <identifiersep> <identifier> , final byte <identifiersep> store pages , \n \t8 int max <identifiersep> size , int max <identifiersep> weight , boolean collect ) { \n \t2 this . key <identifiersep> <identifier> = key <identifiersep> <identifier> ; \n \t2 this . pages = pages ; \n <ect>
<comment> \n \t1 public static void load <identifiersep> commands ( input <identifiersep> stream is ) { \n \t2 try { \n \t3 prop <identifiersep> commands . load ( is ) ; \n <ect>
\t7 final message <identifiersep> ack ack ) throws exception { \n \t6 consumer <identifiersep> exchange . get <identifiersep> connection <identifiersep> context ( ) . set <identifiersep> dont <identifiersep> send <identifiersep> <identifier> ( true ) ; \n \t6 executors . new <identifiersep> single <identifiersep> thread <identifiersep> executor ( ) . execute ( new runnable ( ) { \n \t7 public void run ( ) { \n <ect>
\t2 <identifier> . set <identifiersep> double ( <number_literal> , value ) ; \n \t2 log . debug ( <string_literal> , set <identifiersep> preference <identifiersep> sql ) ; \n \t2 <identifier> . execute <identifiersep> update ( ) ; } \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n <ect>
\t5 return ( openmrs <identifiersep> serializer ) clazz . new <identifiersep> instance ( ) ; } } \n \t3 catch ( exception e ) { \n \t4 log . info ( <string_literal> + prop + <string_literal> ) ; } \n \t2 } else { \n <ect>
\t1 public list < atmosphere <identifiersep> request > on <identifiersep> binary <identifiersep> stream ( web <identifiersep> socket web <identifiersep> socket , input <identifiersep> stream data ) { \n \t2 log . debug ( <string_literal> , data ) ; \n \t2 string connection <identifiersep> key = store . get <identifiersep> connection <identifiersep> key ( web <identifiersep> socket ) ; \n \t2 consumer . send <identifiersep> message ( connection <identifiersep> key , data ) ; \n <ect>
\t2 if ( ! bindings <identifiersep> exist ( ) ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( name <identifiersep> host <identifiersep> mapper == null ) { \n <ect>
\t6 || value . equals ( <string_literal> ) \n \t6 || value . equals ( <string_literal> ) \n \t4 ) { \n \t5 if ( java <identifiersep> version != 0 && java <identifiersep> version != java <identifiersep> version <identifiersep> <number_literal> ) { \n <ect>
\t1 writer . close ( ) ; \n \t1 <comment> \n \t1 verify <identifiersep> blob <identifiersep> records ( p , num <identifiersep> records , declared <identifiersep> record <identifiersep> len , actual <identifiersep> record <identifiersep> len ) ; } \n private void run <identifiersep> compressed <identifiersep> test ( string codec ) throws exception { \n <ect>
\t5 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , 1 ) ; \n \t5 return ; <comment> \n \t4 if ( <identifier> <identifiersep> context . <identifier> ( ) . is <identifiersep> <identifier> ( from . get <identifiersep> ip ( ) ) ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 <comment> \n \t4 wait <identifiersep> time <identifiersep> secs = update <identifiersep> interval <identifiersep> in <identifiersep> seconds == null ? wait <identifiersep> time <identifiersep> secs : update <identifiersep> interval <identifiersep> in <identifiersep> seconds ; \n \t4 wait <identifiersep> for <identifiersep> data <identifiersep> delivery ( wait <identifiersep> time <identifiersep> secs ) ; } \n \t2 } catch ( amazon <identifiersep> service <identifiersep> exception ase ) { \n <ect>
\t2 if ( result != null ) { \n \t3 throw new io <identifiersep> exception ( <string_literal> ) ; } } \n \t1 protected void update <identifiersep> ssl <identifiersep> keystore ( ) { \n <ect>
\t2 for ( string s : to <identifiersep> enable ) { \n \t3 if ( supported . contains ( s ) ) { \n \t4 if ( selected . add ( s ) ) { \n \t4 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 if ( ! <identifier> . verify ( <identifier> . <identifier> , pn . peer <identifiersep> <identifier> <identifiersep> pub <identifiersep> key , sig , his <identifiersep> <identifier> ) ) { \n \t4 if ( pn . peer <identifiersep> <identifier> <identifiersep> pub <identifiersep> key <identifiersep> hash == null ) { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t2 datagram <identifiersep> packet <identifier> = packet . get <identifiersep> packet ( ) ; \n \t2 byte data [ ] = <identifier> . get <identifiersep> data ( ) ; \n \t2 int off = header <identifiersep> size ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 } catch ( exception e ) { \n \t4 final throwable unwrap = exceptions <identifiersep> helper . unwrap <identifiersep> cause ( e ) ; \n \t4 if ( unwrap instanceof not <identifiersep> master <identifiersep> exception ) { \n \t5 if ( ++ join <identifiersep> attempt == this . join <identifiersep> retry <identifiersep> attempts ) { \n <ect>
\t1 private final file record <identifiersep> folder ; \n \t1 private final object <identifiersep> mapper mapper ; \n \t1 @ inject \n \t1 public work <identifiersep> dir <identifiersep> manager ( @ output <identifiersep> folder file output <identifiersep> folder , object <identifiersep> mapper mapper ) { \n <ect>
\t2 } else if ( this . payload . length == <identifier> <identifiersep> thermostat <identifiersep> control <identifiersep> set <identifiersep> point <identifiersep> only <identifiersep> payload <identifiersep> len ) { \n \t3 desired <identifiersep> temperature = ( this . payload [ 0 ] & <identifier> ) / <number_literal> . 0 ; \n \t3 <identifier> <identifiersep> temperature = null ; \n \t2 } else { \n <ect>
\t3 driver <identifiersep> manager . get <identifiersep> connection ( db <identifiersep> url , db <identifiersep> user <identifiersep> name , db <identifiersep> password ) . use { connection - > connection . meta <identifiersep> data } \n \t2 } catch ( e : exception ) { \n \t3 val out = response . writer \n \t3 out . write ( <string_literal> ) \n <ect>
\t2 assert <identifiersep> that ( state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( state . nodes ( ) . resolve <identifiersep> node ( node <identifiersep> 1 ) . get <identifiersep> id ( ) ) . iterator ( ) . next ( ) . state ( ) , equal <identifiersep> to ( shard <identifiersep> routing <identifiersep> state . relocating ) ) ; \n \t2 assert <identifiersep> that ( state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( state . nodes ( ) . resolve <identifiersep> node ( node <identifiersep> <number_literal> ) . get <identifiersep> id ( ) ) . iterator ( ) . next ( ) . state ( ) , equal <identifiersep> to ( shard <identifiersep> routing <identifiersep> state . initializing ) ) ; \n \t2 health <identifiersep> response = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> wait <identifiersep> for <identifiersep> <identifier> <identifiersep> status ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> no <identifiersep> relocating <identifiersep> shards ( true ) . execute ( ) . action <identifiersep> get ( ) ; \n \t2 assert <identifiersep> that ( health <identifiersep> response . is <identifiersep> timed <identifiersep> out ( ) , equal <identifiersep> to ( false ) ) ; \n <ect>
\t7 class < ? > <identifier> = null ; \n \t7 try { \n \t8 <identifier> = thread . current <identifiersep> thread ( ) . get <identifiersep> context <identifiersep> class <identifiersep> loader ( ) . load <identifiersep> class ( <identifier> ) ; } \n \t7 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t3 final logger <identifiersep> context logger <identifiersep> context = configurator . initialize ( <string_literal> , null , log <identifiersep> configuration <identifiersep> file . get <identifiersep> uri ( ) ) ; \n \t3 logger . debug ( <string_literal> ) ; \n \t3 logger <identifiersep> context . get <identifiersep> configuration ( ) . add <identifiersep> listener ( <identifier> - > logger <identifiersep> context . update <identifiersep> loggers ( <identifier> . <identifier> ( ) ) ) ; \n \t3 return optional . of ( pair . of ( log <identifiersep> configuration <identifiersep> file , logger <identifiersep> context ) ) ; } \n <ect>
\t5 } else if ( ! file . can <identifiersep> write ( ) ) { \n \t6 log . warn ( <string_literal> + output <identifiersep> file ) ; \n \t6 output <identifiersep> file = default <identifiersep> out <identifiersep> target <identifiersep> file ; } } \n \t3 } catch ( exception e ) { \n <ect>
<comment> \n \t1 public void execute <identifiersep> pre <identifiersep> join <identifiersep> tasks <identifiersep> blocking ( boolean had <identifiersep> bootstrap ) \n \t1 { \n <ect>
\t4 @ override \n \t4 public void process <identifiersep> message ( string topic , byte [ ] message ) { \n \t5 string item <identifiersep> name = get <identifiersep> item <identifiersep> name <identifiersep> from <identifiersep> topic ( get <identifiersep> topic ( ) , topic ) ; \n \t5 if ( item <identifiersep> registry == null ) { \n <ect>
\t4 <comment> \n \t4 if ( ! info . is <identifiersep> valid ( ) ) \n \t5 throw new data <identifiersep> format <identifiersep> exception ( <string_literal> ) ; \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 if args . <identifier> : \n \t2 if path . <identifier> ( args . <identifier> ) : \n \t3 logger . debug ( <string_literal> . format ( args . <identifier> ) ) \n \t2 else : \n <ect>
\t4 log . debug ( <string_literal> , ioe ) ; \n \t4 exec <identifiersep> result result = new exec <identifiersep> result ( command , stdout , stderr , exit <identifiersep> value ) ; \n \t4 return result ; } \n \t3 <comment> \n <ect>
\t3 obj . put ( generic <identifiersep> json <identifiersep> keys . update <identifiersep> type . name ( ) , json <identifiersep> values . karma <identifiersep> <identifier> <identifiersep> error . name ( ) ) ; \n \t3 obj . put ( json <identifiersep> keys . <identifier> <identifiersep> error . name ( ) , error <identifiersep> message ) ; \n \t3 pw . println ( obj . to <identifiersep> string ( ) ) ; \n \t2 } catch ( json <identifiersep> exception e ) { \n <ect>
\t1 query <identifiersep> info query <identifiersep> info = query <identifiersep> info <identifiersep> map . get ( q <identifiersep> id ) ; \n \t1 if ( query <identifiersep> info == null ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t4 logger . warn ( <string_literal> \n \t5 + <string_literal> \n \t5 + <string_literal> , resolver . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; } } \n \t2 if ( principal == null ) { \n <ect>
\t2 int total <identifiersep> entries <identifiersep> affected = ( ( filter . get <identifiersep> page <identifiersep> number ( ) + 1 ) * filter . get <identifiersep> page <identifiersep> size ( ) ) ; \n \t2 int start <identifiersep> entry <identifiersep> num = total <identifiersep> entries <identifiersep> affected \n \t4 - ( total <identifiersep> entries <identifiersep> affected - ( filter . get <identifiersep> page <identifiersep> size ( ) * filter . get <identifiersep> page <identifiersep> number ( ) ) ) ; \n \t2 logger . trace ( <string_literal> , start <identifiersep> entry <identifiersep> num ) ; \n <ect>
\t6 conn . start ( ) ; \n \t6 final session sess = conn . create <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n \t6 destination destination = sess . create <identifiersep> queue ( echo <identifiersep> queue <identifiersep> name ) ; \n \t6 message <identifiersep> producer producer = sess . create <identifiersep> producer ( destination ) ; \n <ect>
\t5 connector . update <identifiersep> state <identifiersep> from <identifiersep> cache ( config . get <identifiersep> property ( ) ) ; \n \t4 } else { \n \t5 logger . debug ( <string_literal> , item <identifiersep> name ) ; } \n \t3 } else { \n <ect>
\t1 statement <identifiersep> executor = null ; } } \n private void process <identifiersep> result ( optional < result <identifiersep> set > result <identifiersep> set <identifiersep> optional ) { \n \t1 executing = false ; \n \t1 stop <identifiersep> statement <identifiersep> executor ( ) ; \n <ect>
\t1 { \n \t2 try { \n \t3 if ( subject . is <identifiersep> variable ( ) ) \n \t3 { \n <ect>
\t2 dao . set <identifiersep> order <identifiersep> field ( order <identifiersep> field ) ; \n \t2 dao . set <identifiersep> limit ( limit ) ; \n \t2 dao . set <identifiersep> offset ( offset ) ; \n \t2 dao . set <identifiersep> count <identifiersep> values ( null ) ; \n <ect>
public string body ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> post . body <identifiersep> key ) ; } \n public void set <identifiersep> body ( string value ) { \n <ect>
\t3 { \n \t4 connection . send <identifiersep> message ( message . to <identifiersep> string ( ) ) ; \n \t3 } catch ( io <identifiersep> exception <identifier> ) \n \t3 { \n <ect>
\t7 grid <identifiersep> compute <identifiersep> task <identifiersep> future < ? > task <identifiersep> fut = ( grid <identifiersep> compute <identifiersep> task <identifiersep> future < ? > ) f ; \n \t7 try { \n \t8 task <identifiersep> fut . get ( ) ; <comment> \n \t7 catch ( grid <identifiersep> exception e ) { \n <ect>
\t1 if ( ! backing <identifiersep> store . sync <identifiersep> required ( ) \n \t2 && ! inflight <identifiersep> <identifier> . sync <identifiersep> required ( ) \n \t2 && ! force ) { <comment> \n \t1 <comment> \n <ect>
\t2 query <identifiersep> builder . direction sort <identifiersep> dir = builder . get <identifiersep> sort <identifiersep> direction ( ) ; \n \t2 value bound = builder . get <identifiersep> bound ( ) ; \n \t2 if ( bound != null ) { \n \t3 if ( sort <identifiersep> col == null ) { \n <ect>
\t5 return false ; } \n \t4 try { \n \t5 p = pattern . compile ( regex ) ; \n \t4 } catch ( pattern <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t2 behavior <identifiersep> state modified <identifiersep> state ; \n \t2 try { \n \t3 modified <identifiersep> state = action . modify ( actor , last <identifiersep> state ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 commit <identifiersep> latch . await ( ) ; \n \t6 return null ; \n \t5 } ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 shared <identifiersep> state <identifiersep> registry . default <identifiersep> factory ) ; \n \t2 <comment> \n \t2 for ( master <identifiersep> trigger <identifiersep> restore <identifiersep> hook < ? > hook : master <identifiersep> hooks ) { \n \t3 if ( ! checkpoint <identifiersep> coordinator . add <identifiersep> master <identifiersep> hook ( hook ) ) { \n <ect>
\t3 public long skip ( long n ) throws io <identifiersep> exception { \n \t4 return wrapped . skip ( n ) ; } \n \t3 @ override \n \t3 public void close ( ) throws io <identifiersep> exception { \n <ect>
\t4 continue \n \t3 new <identifiersep> body . append ( line ) \n \t2 self . file <identifiersep> body = new <identifiersep> body + self . file <identifiersep> body [ <number_literal> : ] \n \t2 if removed : \n <ect>
<comment> \n \t1 private reply <identifiersep> <identifier> send <identifiersep> <identifier> <identifiersep> peer ( node <identifiersep> info n <identifiersep> info , info <identifiersep> hash <identifier> , token token , boolean is <identifiersep> seed ) { \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 catch ( exception e ) \n \t2 { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 for ( node n : tree <identifiersep> model . vertex <identifiersep> set ( ) ) { \n \t3 if ( n instanceof column <identifiersep> node ) { \n <ect>
\t3 if ( ! self . get <identifiersep> quorum <identifiersep> listen <identifiersep> on <identifiersep> all <identifiersep> i <identifiersep> ps ( ) ) { \n \t4 ss . bind ( self . get <identifiersep> quorum <identifiersep> address ( ) ) ; } \n \t2 } catch ( bind <identifiersep> exception e ) { \n \t3 if ( self . get <identifiersep> quorum <identifiersep> listen <identifiersep> on <identifiersep> all <identifiersep> i <identifiersep> ps ( ) ) { \n <ect>
\t3 revoke <identifiersep> table <identifiersep> permission <identifiersep> result result = new revoke <identifiersep> table <identifiersep> permission <identifiersep> result ( ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t4 . put ( <string_literal> , <number_literal> ) \n \t4 . put ( throttling <identifiersep> allocation <identifiersep> <identifier> . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> node <identifiersep> concurrent <identifiersep> outgoing <identifiersep> recoveries <identifiersep> setting . get <identifiersep> key ( ) , <number_literal> ) \n \t4 . put ( cluster <identifiersep> rebalance <identifiersep> allocation <identifiersep> <identifier> . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> allow <identifiersep> rebalance <identifiersep> setting . get <identifiersep> key ( ) , <string_literal> ) \n \t4 . put ( <string_literal> , - 1 ) . build ( ) ) ; \n <ect>
\t2 <comment> \n \t2 client . create <identifiersep> stream ( stream <identifiersep> name , 1 ) ; \n \t2 <comment> \n \t2 describe <identifiersep> stream <identifiersep> result status = client . describe <identifiersep> stream ( stream <identifiersep> name ) ; \n <ect>
\t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . build ( ) ; \n \t2 cluster <identifiersep> state cluster <identifiersep> state = cluster <identifiersep> state . builder ( org . elasticsearch . cluster . cluster <identifiersep> name . cluster <identifiersep> name <identifiersep> setting . get <identifiersep> default ( settings . empty ) ) . meta <identifiersep> data ( meta <identifiersep> data ) . routing <identifiersep> table ( initial <identifiersep> routing <identifiersep> table ) . build ( ) ; \n <ect>
\t2 if ( metadata != null ) { \n \t3 class <identifiersep> lookup . put ( clazz , metadata ) ; \n \t3 class <identifiersep> metadata < ? extends t , ? > prev = uri <identifiersep> lookup . put ( uri . get <identifiersep> object <identifiersep> name ( ) , uri . get <identifiersep> module <identifiersep> name ( ) , metadata ) ; \n \t3 if ( prev != null && ! prev . equals ( metadata ) ) { \n <ect>
\t1 private void ensure <identifiersep> vendor <identifiersep> initialized ( ) { \n \t2 if ( vendor != null ) return ; \n \t2 try { \n \t3 string product <identifiersep> name = get <identifiersep> database <identifiersep> product <identifiersep> type ( ) ; \n <ect>
\t4 if ( ignore <identifiersep> first <identifiersep> line ) { \n \t5 <comment> \n \t5 reader . read <identifiersep> line ( ) ; <comment> \n \t4 line = reader . read <identifiersep> line ( ) ; } \n <ect>
\t1 self . drop <identifiersep> table ( table <identifiersep> readable ) \n \t1 self . drop <identifiersep> table ( table <identifiersep> writable ) \n \t1 self . delete <identifiersep> <identifier> <identifiersep> hdfs <identifiersep> test <identifiersep> dir ( ) \n def drop <identifiersep> table ( self , table ) : \n <ect>
\t3 } else if ( pool . get <identifiersep> type ( ) == storage <identifiersep> pool <identifiersep> type . <identifier> ) { \n \t4 return new answer ( cmd , false , \n \t6 <string_literal> ) ; \n \t3 } else if ( pool . get <identifiersep> type ( ) == storage <identifiersep> pool <identifiersep> type . pre <identifiersep> setup ) { \n <ect>
\t4 check <identifiersep> over <identifiersep> flow ( chunk , positions <identifiersep> array [ chunk ] ) ; } \n \t3 count ++ ; } \n \t2 logger . info ( count + <string_literal> ) ; \n \t2 <comment> \n <ect>
\t5 { \n \t6 logger . warn ( <string_literal> , path , e ) ; } } } \n \t3 catch ( final io <identifiersep> exception e ) \n \t3 { \n <ect>
\t6 final long time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t6 final long maximum <identifiersep> shutdown <identifiersep> time = <number_literal> ; \n \t6 while ( ! thread <identifiersep> <identifier> . is <identifiersep> finished ( ) ) { \n \t7 if ( system . current <identifiersep> time <identifiersep> millis ( ) - time > maximum <identifiersep> shutdown <identifiersep> time ) { \n <ect>
\t2 out . write <identifiersep> short ( ( short ) comparator . length ( ) ) ; \n \t2 out . write ( comparator . get <identifiersep> bytes ( charsets . utf <identifiersep> <number_literal> ) ) ; } \n \t2 <comment> \n \t2 <comment> \n <ect>
\t4 cache <identifiersep> qualifier = or <identifiersep> qualifier <identifiersep> in <identifiersep> cache ( ( eo <identifiersep> or <identifiersep> qualifier ) q ) ; \n \t3 } else { \n \t4 log . warn ( <string_literal> + q . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; } \n \t2 } else { \n <ect>
\t4 store <identifiersep> id local <identifiersep> store <identifiersep> id = local <identifiersep> database . store <identifiersep> id ( ) ; \n \t4 <identifier> <identifiersep> result <identifier> <identifiersep> result = remote <identifiersep> store . try <identifiersep> <identifier> <identifiersep> up ( primary , local <identifiersep> store <identifiersep> id , local <identifiersep> database . store <identifiersep> dir ( ) , false ) ; \n \t4 if ( <identifier> <identifiersep> result == e <identifiersep> transaction <identifiersep> <identifier> ) \n \t4 { \n <ect>
\t5 try { \n \t6 count = new stat <identifiersep> count ( now , data <identifiersep> store <identifiersep> source . server , action . get <identifiersep> stats , <string_literal> + thread . current <identifiersep> thread ( ) . get <identifiersep> name ( ) , sys . thread <identifiersep> cpu <identifiersep> time ( ) ) ; \n \t6 queue . put ( count ) ; \n \t5 } catch ( throwable ex ) { \n <ect>
\t2 final repository <identifiersep> chain <identifiersep> module <identifiersep> resolution latest <identifiersep> resolved = find <identifiersep> best <identifiersep> match ( resolve <identifiersep> states , errors ) ; \n \t2 if ( latest <identifiersep> resolved != null ) { \n \t3 logger . debug ( <string_literal> , latest <identifiersep> resolved . module . get <identifiersep> module <identifiersep> version <identifiersep> id ( ) , latest <identifiersep> resolved . repository ) ; \n \t3 for ( throwable error : errors ) { \n <ect>
\t4 log . warn ( e . get <identifiersep> message ( ) ) ; } \n \t3 map < string , string > <identifier> <identifiersep> options = new hash <identifiersep> map < string , string > ( ) ; \n \t3 <identifier> <identifiersep> options . put ( <string_literal> , <string_literal> ) ; \n \t3 try { \n <ect>
\t1 count = count + 1 \n \t1 begin \n \t1 admin . move ( bytes . to <identifiersep> bytes ( r . get <identifiersep> encoded <identifiersep> name ( ) ) , bytes . to <identifiersep> bytes ( new <identifiersep> server ) ) \n \t1 rescue java . lang . <identifier> . <identifier> <identifiersep> throwable <identifiersep> exception = > e \n <ect>
\t2 <comment> \n \t2 long orig <identifiersep> start = start , orig <identifiersep> end = end ; \n \t2 <comment> \n \t2 int start <identifiersep> ix = integer . min <identifiersep> value , end <identifiersep> ix = integer . min <identifiersep> value ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 string item <identifiersep> name = <identifier> <identifiersep> binding . get <identifiersep> key ( ) ; \n \t4 update <identifiersep> item <identifiersep> state ( item <identifiersep> name , <identifier> <identifiersep> binding <identifiersep> config , <identifier> ) ; } \n \t3 last <identifiersep> update = now ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
<comment> \n \t1 public void store ( ) throws io <identifiersep> exception { \n \t2 if ( is <identifiersep> modified ( ) ) { \n <ect>
\t8 config . framework ( ) . add <identifiersep> atmosphere <identifiersep> handler ( path , r , \n \t10 config . get <identifiersep> broadcaster <identifiersep> factory ( ) . lookup ( w . broadcaster . get <identifiersep> class ( ) , path , true ) , w . <identifier> ) ; \n \t8 request . set <identifiersep> attribute ( framework <identifiersep> config . new <identifiersep> mapping , <string_literal> ) ; \n \t7 } catch ( throwable e ) { \n <ect>
\t1 public void <identifier> <identifiersep> ref <identifiersep> cnt ( ) { \n \t2 if ( ref <identifiersep> cnt > 0 ) { \n \t3 ref <identifiersep> cnt -- ; } \n \t2 else { \n <ect>
\t3 final collection < string > values = ( collection < string > ) attribute <identifiersep> value ; \n \t3 values . for <identifiersep> each ( value - > { \n \t4 try { \n \t5 if ( predicate . test ( value ) ) { \n <ect>
\t2 logger . info ( str ) ; \n \t2 response response = target . request ( ) . post ( entity . entity ( str , media <identifiersep> type . wildcard <identifiersep> type ) ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t2 long total <identifiersep> times = 0 ; \n \t2 final long <identifier> = <number_literal> ; \n \t2 for ( int i = 0 ; i < <number_literal> ; ++ i ) { \n \t3 total <identifiersep> times += do <identifiersep> test <identifiersep> one <identifiersep> way <identifiersep> message <identifiersep> through <identifiersep> put ( true ) ; } \n <ect>
\t4 logger . debug ( <string_literal> + database <identifiersep> name + <string_literal> ) ; } \n \t3 return sec ; } \n \t2 <comment> \n <ect>
\t2 { \n \t3 <identifier> <identifiersep> log . info ( <string_literal> + entry + <string_literal> <ect>
\t3 uri old <identifiersep> uri = method . get <identifiersep> uri ( ) ; \n \t3 try { \n \t4 uri new <identifiersep> uri = uri <identifiersep> utils . create <identifiersep> uri ( old <identifiersep> uri . get <identifiersep> scheme ( ) , old <identifiersep> uri . get <identifiersep> host ( ) , - 1 , \n \t6 url <identifiersep> encoder . encode ( old <identifiersep> uri . get <identifiersep> path ( ) , <string_literal> ) , url <identifiersep> encoded <identifiersep> utils . format ( parameters , <string_literal> ) , null ) ; \n <ect>
\t6 if ( ( bundle <identifiersep> job . get <identifiersep> pause <identifiersep> time ( ) == null || bundle <identifiersep> job . get <identifiersep> pause <identifiersep> time ( ) . after ( d ) ) ) { \n \t7 new bundle <identifiersep> <identifier> <identifiersep> x <identifiersep> command ( bundle <identifiersep> job ) . call ( ) ; \n \t7 log . debug ( <string_literal> + bundle <identifiersep> job . get <identifiersep> id ( ) ) ; } } } } \n \t3 catch ( exception ex ) { \n <ect>
\t2 <identifier> < exchange > q = exchanges ; \n \t2 <comment> \n \t2 if ( ! eager <identifiersep> limit <identifiersep> max <identifiersep> messages <identifiersep> per <identifiersep> poll && max <identifiersep> messages <identifiersep> per <identifiersep> poll > 0 ) { \n \t3 if ( files . size ( ) > max <identifiersep> messages <identifiersep> per <identifiersep> poll ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> encode <identifiersep> output <identifiersep> stream ( ) { \n <ect>
\t2 <identifier> <identifiersep> data <identifiersep> entry [ ] meta = request . get <identifiersep> meta <identifiersep> entries ( ) ; \n \t2 s <identifiersep> bucket <identifiersep> dao bucket <identifiersep> dao = new s <identifiersep> bucket <identifiersep> dao ( ) ; \n \t2 s <identifiersep> bucket bucket = bucket <identifiersep> dao . get <identifiersep> by <identifiersep> name ( bucket <identifiersep> name ) ; \n \t2 if ( bucket == null ) { \n <ect>
\t2 } else if ( ! host <identifiersep> name . to <identifiersep> lower <identifiersep> case ( ) . matches ( <string_literal> ) ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t3 return false ; \n \t2 } else if ( host <identifiersep> name . starts <identifiersep> with ( <string_literal> ) || host <identifiersep> name . ends <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t3 return this . map <identifiersep> instance . get ( key ) ; } \n \t2 return null ; } \n \t1 @ override \n \t1 public void set ( final registered <identifiersep> service key , final distributed <identifiersep> cache <identifiersep> object < registered <identifiersep> service > item ) { \n <ect>
\t3 curr <identifiersep> snap . set <identifiersep> snapshot <identifiersep> location ( snapshot <identifiersep> location ) ; \n \t3 curr <identifiersep> snap . set <identifiersep> previous <identifiersep> snapshot <identifiersep> id ( prev <identifiersep> snap <identifiersep> id ) ; \n \t3 return curr <identifiersep> snap ; \n \t2 } else { \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t3 sigar <identifiersep> impl = new sigar ( ) ; } \n \t2 if ( sigar == null ) { \n \t3 sigar = sigar <identifiersep> proxy <identifiersep> cache . new <identifiersep> instance ( sigar <identifiersep> impl , <number_literal> ) ; } \n \t2 logger . info ( <string_literal> , sigar . version <identifiersep> string ) ; \n <ect>
\t4 } catch ( io <identifiersep> exception e ) { \n \t6 s <identifiersep> logger . debug ( log ( seq , <string_literal> + req . to <identifiersep> string ( ) + <string_literal> + i ) ) ; } \n <ect>
\t3 while ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> tick < <identifier> <identifiersep> <identifier> <identifiersep> cmd <identifiersep> timeout ) { \n \t4 result = get <identifiersep> http <identifiersep> request ( json <identifiersep> body . to <identifiersep> string ( ) , agent <identifiersep> uri , <identifier> <identifiersep> <identifier> ) ; \n \t4 json <identifiersep> object response = new json <identifiersep> object ( result ) ; \n \t4 if ( response != null ) { \n <ect>
\t3 success = true ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 final oidc <identifiersep> registered <identifiersep> service oidc <identifiersep> registered <identifiersep> service = ( oidc <identifiersep> registered <identifiersep> service ) registered <identifiersep> service ; \n \t2 final <identifier> <identifiersep> context context = pac4j <identifiersep> utils . get <identifiersep> pac4j <identifiersep> <identifier> <identifiersep> context ( request , response ) ; \n \t2 final profile <identifiersep> manager manager = pac4j <identifiersep> utils . get <identifiersep> pac4j <identifiersep> profile <identifiersep> manager ( request , response ) ; \n \t2 final optional < user <identifiersep> profile > profile = manager . get ( true ) ; \n <ect>
\t3 if ( store == null ) { \n \t4 logger . warning ( <string_literal> + name ) ; } } \n \t2 if ( store == null ) { \n \t3 store = new memory <identifiersep> import <identifiersep> store ( ) ; } \n <ect>
\t2 if ( e instanceof interrupted <identifiersep> io <identifiersep> exception ) { \n \t3 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t1 <comment> \n \t1 <comment> \n <ect>
\t2 create <identifiersep> s <identifiersep> object <identifiersep> result result = template ( ) . request <identifiersep> body ( <string_literal> + suffix , \n \t3 account , create <identifiersep> s <identifiersep> object <identifiersep> result . class ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( result ) ; \n \t2 assert <identifiersep> true ( <string_literal> , result . get <identifiersep> success ( ) ) ; \n <ect>
\t2 writer . end <identifiersep> object ( ) ; } \n \t1 public static semantic <identifiersep> model read <identifiersep> json ( string filename ) throws io <identifiersep> exception { \n \t2 file file = new file ( filename ) ; \n \t2 if ( ! file . exists ( ) ) { \n <ect>
\t4 s <identifiersep> lock <identifiersep> logger . trace ( <string_literal> + time . first ( ) + <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - time . second ( ) ) ) ; } \n \t3 <identifier> <identifiersep> lock <identifiersep> times . clear ( ) ; } } \n \t1 public boolean commit ( ) { \n \t2 if ( ! <identifier> <identifiersep> txn ) { \n <ect>
* public class my <identifiersep> class { \n * private static final logger logger = loggers . get ( <string_literal> ) ; \n * \n * public void do <identifiersep> something ( ) { \n <ect>
\t4 } else { \n \t5 logger . trace ( <string_literal> , rf <identifiersep> address ) ; } \n \t4 break ; \n \t3 default : \n <ect>
\t3 logger . warn ( <string_literal> , r . get <identifiersep> name ( ) , match . get <identifiersep> name ( ) ) ; \n \t3 return true ; } \n \t2 match = this . service <identifiersep> registry . find <identifiersep> service <identifiersep> by <identifiersep> exact <identifiersep> service <identifiersep> id ( r . get <identifiersep> service <identifiersep> id ( ) ) ; \n \t2 if ( match != null ) { \n <ect>
\t2 ambari <identifiersep> ldap <identifiersep> configuration = ldap <identifiersep> facade . detect <identifiersep> attributes ( ambari <identifiersep> ldap <identifiersep> configuration ) ; \n \t2 result <identifiersep> data = collections . singleton <identifiersep> map ( <string_literal> , ambari <identifiersep> ldap <identifiersep> configuration . to <identifiersep> map ( ) ) ; \n \t2 break ; \n \t2 default : \n <ect>
\t2 return result ; } \n \t1 @ override \n \t1 public boolean save <identifiersep> password <identifiersep> to <identifiersep> router ( final network network , final nic <identifiersep> profile nic , final virtual <identifiersep> machine <identifiersep> profile profile , final virtual <identifiersep> router router ) \n \t3 throws resource <identifiersep> unavailable <identifiersep> exception { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 int count <identifiersep> down = <number_literal> ; \n \t2 while ( ! done . get ( ) ) { \n \t3 sys . sleep ( 1 <identifiersep> 000 ) ; \n \t3 if ( count <identifiersep> down < 0 ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t4 if ( ! valid <identifiersep> local <identifiersep> copy <identifiersep> present ) { \n \t5 log . warn ( <string_literal> , \n \t7 local <identifiersep> file <identifiersep> length , remote <identifiersep> file <identifiersep> length , length ) ; } \n \t3 } else { \n <ect>
\t6 break ; \n \t5 else { \n \t6 attempt <identifiersep> <identifier> <identifiersep> <identifier> ( number ) ; } } \n \t4 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) \n <ect>
\t3 logger . info ( <string_literal> , page <identifiersep> object <identifiersep> class , e . get <identifiersep> target <identifiersep> exception ( ) ) ; \n \t3 this <identifiersep> page <identifiersep> object <identifiersep> <identifier> <identifiersep> <identifier> ( page <identifiersep> object <identifiersep> class , <string_literal> + e . get <identifiersep> target <identifiersep> exception ( ) + <string_literal> ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t4 first <identifiersep> seq <identifiersep> num <identifiersep> used = next <identifiersep> seq <identifiersep> num ; \n \t4 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> + this + <string_literal> + first <identifiersep> seq <identifiersep> num <identifiersep> used ) ; \n \t3 } else { \n \t4 if ( next <identifiersep> seq <identifiersep> num == first <identifiersep> seq <identifiersep> num <identifiersep> used ) { \n <ect>
\t5 max <identifiersep> election <identifiersep> id = new <identifiersep> description . get <identifiersep> election <identifiersep> id ( ) ; } } \n \t3 if ( new <identifiersep> description . get <identifiersep> set <identifiersep> version ( ) != null \n \t5 && ( max <identifiersep> set <identifiersep> version == null || new <identifiersep> description . get <identifiersep> set <identifiersep> version ( ) . compare <identifiersep> to ( max <identifiersep> set <identifiersep> version ) > 0 ) ) { \n <ect>
\t3 set <identifiersep> requests <identifiersep> per <identifiersep> second ( new <identifiersep> requests <identifiersep> per <identifiersep> second ) ; \n \t3 delayed <identifiersep> prepare <identifiersep> bulk <identifiersep> request delayed <identifiersep> prepare <identifiersep> bulk <identifiersep> request = this . delayed <identifiersep> prepare <identifiersep> bulk <identifiersep> request <identifiersep> reference . get ( ) ; \n \t3 if ( delayed <identifiersep> prepare <identifiersep> bulk <identifiersep> request == null ) { \n \t4 <comment> \n <ect>
\t2 if ( tgt . get <identifiersep> hard <identifiersep> timeout ( ) . get <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( ) > 0 ) { \n \t3 logger . debug ( <string_literal> , \n \t4 tgt . get <identifiersep> hard <identifiersep> timeout ( ) . get <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( ) ) ; \n \t3 return new hard <identifiersep> timeout <identifiersep> expiration <identifiersep> policy ( tgt . get <identifiersep> hard <identifiersep> timeout ( ) . get <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( ) ) ; } \n <ect>
\t2 for ( int i = 0 ; i < parts . length && is <identifiersep> valid ; i ++ ) { \n \t3 if ( ! is <identifiersep> number ( parts [ i ] . trim ( ) ) ) { \n \t3 is <identifiersep> valid = false ; } } \n \t2 if ( is <identifiersep> valid ) { \n <ect>
\t2 { \n \t3 <identifier> <identifiersep> execute ( ) ; \n \t2 } catch ( exception e ) \n \t2 { \n <ect>
\t4 if ( host == null ) { \n \t5 host = new host ( host <identifiersep> id ) ; \n \t5 host . event <identifiersep> publisher = event <identifiersep> publisher ; \n \t5 host <identifiersep> cache . put ( host <identifiersep> id , host ) ; \n <ect>
\t4 break ; \n \t3 case remote <identifiersep> method <identifiersep> constants . method <identifiersep> unknown : \n \t3 default : \n \t4 assert ( false ) ; \n <ect>
\t1 public rate <identifiersep> stat get <identifiersep> <identifier> <identifiersep> rate ( ) { return <identifier> <identifiersep> reject <identifiersep> rate ; } \n \t1 public rate <identifiersep> stat get <identifiersep> failed <identifiersep> rate ( ) { return <identifier> <identifiersep> fail <identifiersep> rate ; } \n \t1 public void <identifier> <identifiersep> stats ( ) { \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 public void close <identifiersep> connection ( ) { \n \t2 this . write <identifiersep> target . get ( ) . close <identifiersep> connection ( ) ; } \n \t1 @ override \n \t1 protected void timeout <identifiersep> occurred ( ) { \n <ect>
\t2 try { \n \t3 if ( surrogate . equals <identifiersep> ignore <identifiersep> case ( principal . get <identifiersep> id ( ) ) ) { \n \t4 return true ; } \n \t3 final search <identifiersep> filter filter = ldap <identifiersep> utils . new <identifiersep> ldaptive <identifiersep> search <identifiersep> filter ( ldap <identifiersep> properties . get <identifiersep> surrogate <identifiersep> search <identifiersep> filter ( ) , collection <identifiersep> utils . wrap ( surrogate ) ) ; \n <ect>
<number_literal> final registered <identifiersep> service service , \n <number_literal> final principal principal , \n <number_literal> final collection < multifactor <identifiersep> authentication <identifiersep> provider > providers ) { \n \t2 if ( predicate <identifiersep> resource == null || ! resource <identifiersep> utils . does <identifiersep> resource <identifiersep> exist ( predicate <identifiersep> resource ) ) { \n <ect>
\t3 wm <identifiersep> event . end <identifiersep> event ( to <identifiersep> kill ) ; \n \t3 log . debug ( <string_literal> + query <identifiersep> id ) ; \n \t3 return ; \n \t3 } catch ( hive <identifiersep> exception ex ) { \n <ect>
\t2 final string regex = build <identifiersep> pattern <identifiersep> for <identifiersep> configuration <identifiersep> file <identifiersep> discovery ( config , <identifier> ) ; \n \t2 final collection < file > config <identifiersep> files = scan <identifiersep> for <identifiersep> configuration <identifiersep> files <identifiersep> by <identifiersep> pattern ( config , regex ) ; \n \t2 logger . info ( <string_literal> , config , config <identifiersep> files ) ; \n \t2 config <identifiersep> files . for <identifiersep> each ( unchecked . consumer ( f - > { \n <ect>
\t1 public void test <identifiersep> response ( ) throws exception { \n \t2 invocation . builder request = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) ; \n \t2 response response = request . get ( ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n <ect>
\t4 if ( <identifier> != null ) { \n \t5 string server = <identifier> . get <identifiersep> string <identifiersep> value ( <string_literal> ) ; \n \t5 return <string_literal> + server + <string_literal> ; } \n \t3 } catch ( exception e ) { \n <ect>
\t5 result = current <identifiersep> result ; } \n \t3 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n \t4 logger . warn ( <string_literal> , match <identifiersep> result , media <identifiersep> info <identifiersep> value ) ; } } \n \t2 if ( result < = 0 ) { \n <ect>
<comment> \n \t1 @ event <identifiersep> listener \n \t1 public void handle <identifiersep> configuration <identifiersep> modified <identifiersep> event ( final cas <identifiersep> configuration <identifiersep> modified <identifiersep> event event ) { \n \t2 if ( this . context <identifiersep> <identifier> == null ) { \n <ect>
\t3 runner . cleanup ( ) \n \t3 function . fail <identifiersep> outputs . <identifier> ( <identifier> <identifiersep> <identifier> . create <identifiersep> new <identifiersep> file ( ) ) \n \t3 } catch { \n \t3 case <identifier> <identifiersep> <identifier> : throwable = > <comment> } \n <ect>
\t1 cert <identifiersep> gen . add <identifiersep> extension ( <identifier> . basic <identifiersep> constraints , true , new basic <identifiersep> constraints ( true ) ) ; \n \t1 try { \n \t1 cert <identifiersep> gen . add <identifiersep> extension ( <identifier> . subject <identifiersep> key <identifiersep> identifier , false , new <identifier> <identifiersep> <identifier> <identifiersep> utils ( ) . create <identifiersep> subject <identifiersep> key <identifiersep> identifier ( keys . get <identifiersep> public ( ) ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception | cert <identifiersep> runtime <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public void test <identifiersep> block <identifiersep> listener ( ) throws exception { \n \t2 <comment> \n \t2 for ( int i = 0 ; i < <identifier> ; i ++ ) { \n <ect>
\t3 map < string , string > res = ovm <identifiersep> storage <identifiersep> pool . create <identifiersep> template <identifiersep> from <identifiersep> volume ( <identifier> <identifiersep> conn , secondary <identifiersep> storage <identifiersep> mount <identifiersep> path , install <identifiersep> path , volume <identifiersep> path , wait ) ; \n \t3 return new create <identifiersep> private <identifiersep> template <identifiersep> answer ( cmd , true , null , res . get ( <string_literal> ) , long . parse <identifiersep> long ( res . get ( <string_literal> ) ) , long . parse <identifiersep> long ( res . get ( <string_literal> ) ) , \n \t4 res . get ( <string_literal> ) , image <identifiersep> format . raw ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public static connection get <identifiersep> connection <identifiersep> for <identifiersep> global <identifiersep> locks ( string name , boolean for <identifiersep> lock ) { \n \t2 synchronized ( s <identifiersep> connection <identifiersep> for <identifiersep> global <identifiersep> locks ) { \n \t3 if ( for <identifiersep> lock ) { \n \t4 if ( s <identifiersep> connection <identifiersep> for <identifiersep> global <identifiersep> locks . get ( name ) != null ) { \n <ect>
\t3 logger . debug ( <string_literal> + tn . <identifier> ) ; \n \t3 logger . debug ( <string_literal> + tn . early <identifiersep> ends . to <identifiersep> string ( ) + <string_literal> + tn . <identifier> <identifiersep> end + <string_literal> + tn . end + <string_literal> + tn . units . size ( ) ) ; \n \t3 if ( tn . read . size ( ) < <number_literal> ) \n <ect>
\t1 for i in <identifier> ( 0 , len ( <identifier> <identifiersep> json ) ) : \n \t1 datasource <identifiersep> name = <identifier> <identifiersep> json [ i ] [ <string_literal> ] \n \t1 if datasource <identifiersep> name == metrics <identifiersep> <identifier> <identifiersep> datasource <identifiersep> name : \n \t2 create <identifiersep> datasource = false # datasource already exists \n <ect>
\t2 final timeout <identifiersep> runnable after <identifiersep> close = new timeout <identifiersep> runnable ( \n \t3 <identifier> <identifiersep> scheduler , deadline - system . current <identifiersep> time <identifiersep> millis ( ) , time <identifiersep> unit . milliseconds , ( ) - > \n \t2 { \n \t3 callback <identifiersep> shutdown . run ( ) ; \n <ect>
<number_literal> environment <identifiersep> context ) ; } \n \t1 success = <identifier> . commit <identifiersep> transaction ( ) ; \n \t1 } finally { \n \t1 if ( ! success ) { \n <ect>
\t3 } catch ( web <identifiersep> application <identifiersep> exception e ) { \n \t4 send <identifiersep> error <identifiersep> event ( ) ; \n \t4 return e . get <identifiersep> response ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 thread <identifiersep> pool = executors . new <identifiersep> scheduled <identifiersep> thread <identifiersep> pool ( 1 ) ; } \n \t2 thread <identifiersep> pool . submit ( new callable < void > ( ) { \n \t3 @ override \n \t3 public void call ( ) throws exception { \n <ect>
\t1 if ( reporter != null ) { \n \t2 child <identifiersep> operators <identifiersep> array [ i ] . set <identifiersep> reporter ( reporter ) ; } } \n \t1 for ( int i = 0 ; i < child <identifiersep> operators <identifiersep> array . length ; i ++ ) { \n <ect>
\t1 public static double temperature <identifiersep> on = <number_literal> . <number_literal> ; \n \t1 public static double temperature <identifiersep> off = <number_literal> . <number_literal> ; \n \t1 public set <identifiersep> temperature <identifiersep> msg ( string raw <identifiersep> msg ) { \n \t2 super ( raw <identifiersep> msg ) ; \n <ect>
\t7 <comment> \n \t5 } else { \n \t6 break ; } } \n \t4 if ( address == null ) { \n <ect>
\t4 name = ( ( compound <identifiersep> variable ) values [ <number_literal> ] ) . execute ( ) ; } \n \t3 if ( values . length > <number_literal> ) { \n \t4 input <identifiersep> variable = ( ( compound <identifiersep> variable ) values [ <number_literal> ] ) . execute ( ) ; } \n \t2 } catch ( malformed <identifiersep> cache <identifiersep> pattern <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t2 structured <identifiersep> output = gson . from <identifiersep> json ( event . get <identifiersep> command <identifiersep> report ( ) . get <identifiersep> structured <identifiersep> out ( ) , \n \t3 <identifier> <identifiersep> repositories <identifiersep> structured <identifiersep> output . class ) ; \n \t1 } catch ( json <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t2 if ( x . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) \n \t2 { \n \t3 if ( <identifier> <identifiersep> system ) \n \t3 { \n <ect>
\t3 result . <identifier> = ( t <identifiersep> sample <identifiersep> not <identifiersep> present <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t2 this . <identifier> = new <identifier> <identifiersep> <identifier> ( action <identifiersep> context , entity , <identifier> <identifiersep> context ) ; } \n \t1 @ override \n \t1 public object exec <identifiersep> id <identifiersep> call ( final id <identifiersep> function <identifiersep> object f , final context cx , final <identifier> scope , final <identifier> this <identifiersep> obj , final object [ ] args ) { \n \t2 if ( args . length < <number_literal> ) { \n <ect>
\t1 private boolean remove <identifiersep> mapping ( uuid node <identifiersep> id , @ nullable grid <identifiersep> cache <identifiersep> entry <identifiersep> ex < k , v > entry , \n \t2 map < uuid , grid <identifiersep> distributed <identifiersep> tx <identifiersep> mapping < k , v > > map ) { \n \t2 if ( entry != null ) { \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t2 int max = <identifier> . get <identifiersep> configuration ( ) . get <identifiersep> count ( max <identifiersep> threads ) ; \n \t2 if ( tp . get <identifiersep> maximum <identifiersep> pool <identifiersep> size ( ) != max ) { \n <ect>
\t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; \n \t3 } catch ( exception e ) { \n \t4 e . fill <identifiersep> in <identifiersep> stack <identifiersep> trace ( ) ; \n \t4 log . info ( <string_literal> + e . get <identifiersep> stack <identifiersep> trace ( ) . length + <string_literal> ) ; \n <ect>
\t3 key <identifiersep> manager . close <identifiersep> default <identifiersep> key <identifiersep> manager ( ) ; } \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> save <identifiersep> as <identifiersep> gone ( ) throws exception { \n <ect>
\t5 case peer <identifiersep> node <identifiersep> status <identifiersep> no <identifiersep> load <identifiersep> stats : \n \t6 number <identifiersep> of <identifiersep> no <identifiersep> load <identifiersep> stats ++ ; \n \t6 break ; \n \t5 default : \n <ect>
\t1 } catch ( exception e ) { \n \t1 fail ( ) ; } } \n @ test \n public void test <identifiersep> create <identifiersep> data <identifiersep> node ( ) { \n <ect>
\t4 boolean ok = <identifier> <identifiersep> session . send <identifiersep> message ( <identifier> <identifiersep> peer <identifiersep> destination , data , 0 , c ) ; \n \t4 if ( ! ok ) { \n \t5 up = false ; <comment> \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 if ( rc != null ) { \n \t4 answer = codec . <identifier> <identifiersep> exchange ( camel <identifiersep> context , new buffer ( rc ) ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> + exchange <identifiersep> id + <string_literal> + repository <identifiersep> name , e ) ; } \n <ect>
\t2 } catch ( io <identifiersep> exception ioe ) { throw new runtime <identifiersep> exception ( <string_literal> , ioe ) ; } } \n \t1 <comment> \n \t1 public void delete ( ) throws io <identifiersep> exception { \n \t2 if ( is <identifiersep> closed ) { \n <ect>
\t4 switch ( tag ) { \n \t5 case <number_literal> : <comment> \n \t5 case <number_literal> : <comment> \n <ect>
\t1 public void test <identifiersep> rw <identifiersep> rebalance <identifiersep> with <identifiersep> replication <identifiersep> serial ( ) throws exception { \n \t2 try { \n \t3 test <identifiersep> rw <identifiersep> rebalance <identifiersep> with <identifiersep> replication ( true ) ; \n \t2 } catch ( assertion <identifiersep> error ae ) { \n <ect>
\t6 logger . info ( <string_literal> ) ; \n \t6 final properties call = get <identifiersep> git ( ) . gc ( ) . call ( ) ; \n \t6 logger . info ( <string_literal> + call . to <identifiersep> string ( ) ) ; \n \t5 } catch ( final git <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t5 <comment> \n \t5 a <identifiersep> <identifier> = new url ( processed <identifiersep> url ) ; \n \t5 in = a <identifiersep> <identifier> . open <identifiersep> stream ( ) ; \n \t4 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception fe ) { \n <ect>
\t2 } catch ( libvirt <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( e . to <identifiersep> string ( ) ) ; \n \t3 <comment> \n \t3 if ( e . to <identifiersep> string ( ) . contains ( <string_literal> ) ) { \n <ect>
\t2 if ( ! principal <identifiersep> cache . exists ( ) ) { \n \t3 log . debug ( <string_literal> + authorizable <identifiersep> node . get <identifiersep> path ( ) ) ; \n \t3 return null ; } \n \t2 if ( is <identifiersep> valid <identifiersep> cache ( principal <identifiersep> cache ) ) { \n <ect>
\t3 } else { <comment> \n \t4 try { \n \t5 resp = get <identifiersep> jmx <identifiersep> result ( conn , url ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t5 log . debug ( <string_literal> ) ; \n \t5 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n \t5 break ; } \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 final name name = query . get <identifiersep> name ( ) ; \n \t1 final int type = query . get <identifiersep> type ( ) ; \n \t1 response . get <identifiersep> header ( ) . set <identifiersep> flag ( flags . ra ) ; <comment> \n <comment> \n <ect>
\t3 self . apiclient , \n \t3 self . services [ <string_literal> ] ) \n \t2 self . logger . debug ( <string_literal> ) \n \t2 self . vpc <identifiersep> off . update ( self . apiclient , state = 'enabled' ) \n <ect>
\t7 params . set <identifiersep> parameter ( name , boolean . value <identifiersep> of ( value ) ) ; \n \t6 } else if ( type . equals ( <string_literal> ) ) { <comment> \n \t7 params . set <identifiersep> version ( name , value ) ; \n \t6 } else { \n <ect>
\t5 break ; \n \t4 case static <identifiersep> values : \n \t5 <comment> \n \t5 for ( z <identifiersep> wave <identifiersep> command <identifiersep> class zwave <identifiersep> static <identifiersep> class : node . get <identifiersep> command <identifiersep> classes ( ) ) { \n <ect>
\t6 message message = send <identifiersep> session . create <identifiersep> message ( ) ; \n \t6 message . set <identifiersep> string <identifiersep> property ( <string_literal> , filter ? <string_literal> : <string_literal> ) ; \n \t6 producer . send ( topic , message ) ; \n \t6 if ( i > 0 && i % <number_literal> == 0 ) { \n <ect>
\t2 if ( ! extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . exists ( ) ) { \n \t3 logger . error ( this , <string_literal> + extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . get <identifiersep> path ( ) ) ; \n \t3 return false ; } \n \t2 if ( ! extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . is <identifiersep> directory ( ) ) { \n <ect>
\t3 message . set <identifiersep> text ( i + <string_literal> + priority ) ; \n \t3 message . set <identifiersep> int <identifiersep> property ( <string_literal> , i ) ; \n \t3 message . set <identifiersep> jms <identifiersep> priority ( priority ) ; \n \t3 if ( i > 0 && i % <number_literal> == 0 ) { \n <ect>
\t3 new <identifiersep> metadata <identifiersep> url = current <identifiersep> meta <identifiersep> dump <identifiersep> folder . get <identifiersep> absolute <identifiersep> path ( ) ; } \n \t2 instance = ( cube <identifiersep> metadata <identifiersep> upgrade ) upgrade <identifiersep> class . get <identifiersep> constructor ( string . class ) . new <identifiersep> instance ( new <identifiersep> metadata <identifiersep> url ) ; \n \t2 instance . upgrade <identifiersep> non <identifiersep> compatible <identifiersep> meta ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t3 try { \n \t4 simple <identifiersep> name = accumulator . get <identifiersep> unchecked ( ) . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ; \n \t4 local <identifiersep> value = accumulator . get <identifiersep> unchecked ( ) . get <identifiersep> local <identifiersep> value ( ) ; } \n \t3 catch ( runtime <identifiersep> exception exception ) { \n <ect>
\t5 last <identifiersep> exception = e ; \n \t5 <comment> \n \t4 if ( null != retrieved <identifiersep> content ) { \n \t5 if ( log . is <identifiersep> loggable ( fac <identifiersep> keys , level . info ) ) { \n <ect>
\t3 logger . debug ( <string_literal> , db <identifiersep> name ) ; \n \t2 } else { \n \t3 auth <identifiersep> db <identifiersep> name = props . get <identifiersep> authentication <identifiersep> database <identifiersep> name ( ) ; \n \t3 db <identifiersep> name = props . get <identifiersep> database <identifiersep> name ( ) ; \n <ect>
\t7 s <identifiersep> logger . info ( <string_literal> + question . get <identifiersep> text ( ) ) ; \n \t7 if ( question . get <identifiersep> message ( ) != null ) { \n \t8 for ( virtual <identifiersep> machine <identifiersep> message msg : question . get <identifiersep> message ( ) ) { \n <ect>
\t3 logger . debug ( <string_literal> , not <identifiersep> actual <identifiersep> cache ) ; \n \t3 try { \n \t4 file <identifiersep> utils . delete <identifiersep> directory ( not <identifiersep> actual <identifiersep> cache . to <identifiersep> file ( ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 context . write ( new text ( obj . get <identifiersep> string ( <string_literal> ) ) , value ) ; } \n \t5 else { \n \t6 context . write ( new text ( obj . to <identifiersep> string ( ) ) , value ) ; } } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 public void close ( ) { \n \t3 try { \n \t4 this . rocks <identifiersep> db . flush ( new flush <identifiersep> options ( ) ) ; \n \t3 } catch ( rocks <identifiersep> db <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public void start ( bundle <identifiersep> context bundle <identifiersep> context ) throws exception { \n <ect>
\t1 <comment> \n \t1 if ( staging <identifiersep> enabled ) { \n \t1 <comment> \n \t1 try { \n <ect>
\t1 public static void log ( ) \n \t1 { \n \t2 m <identifiersep> bean <identifiersep> server server = management <identifiersep> factory . get <identifiersep> platform <identifiersep> m <identifiersep> bean <identifiersep> server ( ) ; \n \t2 <comment> \n <ect>
\t2 try { \n \t3 get <identifiersep> driver <identifiersep> instance ( ) . <identifier> ( ) ; \n \t3 <identifier> <identifiersep> web <identifiersep> driver = null ; \n \t2 } catch ( web <identifiersep> driver <identifiersep> exception e ) { \n <ect>
\t2 <identifier> . new <identifiersep> kie <identifiersep> session ( <identifier> ) ; \n \t2 <identifier> . new <identifiersep> kie <identifiersep> session ( ) ; \n \t2 string <identifier> = ( ( internal <identifiersep> kie <identifiersep> container ) <identifier> ) . get <identifiersep> container <identifiersep> id ( ) ; \n \t2 m <identifiersep> bean <identifiersep> server <identifier> = management <identifiersep> factory . get <identifiersep> platform <identifiersep> m <identifiersep> bean <identifiersep> server ( ) ; \n <ect>
\t3 if ( schema <identifiersep> name != null ) { \n \t4 statement s = connection . create <identifiersep> statement ( ) ; \n \t4 for ( string sql : get <identifiersep> create <identifiersep> scheme <identifiersep> sql ( ) ) { \n \t5 s . execute ( sql ) ; } } \n <ect>
\t4 if ( prev <identifiersep> levels [ i ] == this ) { \n \t5 prev <identifiersep> levels [ i ] = levels [ i ] ; \n \t4 } else if ( prev <identifiersep> levels [ i ] != null ) { \n \t5 <comment> \n <ect>
\t1 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> , ex ) ; } \n \t1 return res ; } \n public void disable ( ) throws exception { \n \t1 if ( ! this . should <identifiersep> disable ( ) ) { \n <ect>
\t5 ; \n \t3 writer . end <identifiersep> object ( ) ; \n \t3 pw . println ( json <identifiersep> str . to <identifiersep> string ( ) ) ; \n \t2 } catch ( json <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 protected answer execute ( unregister <identifiersep> nic <identifiersep> command cmd ) { \n <ect>
\t2 try { \n \t3 await <identifiersep> inner ( ) ; \n \t3 task . run ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 event <identifiersep> msg . set <identifiersep> description ( event <identifiersep> description ) ; \n \t2 try { \n \t3 s <identifiersep> event <identifiersep> bus . publish ( event <identifiersep> msg ) ; \n \t2 } catch ( org . apache . cloudstack . framework . events . event <identifiersep> bus <identifiersep> exception e ) { \n <ect>
\t2 reset ( ) ; \n \t2 response response = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) . get ( ) ; \n \t2 logger . info ( <string_literal> + response . get <identifiersep> status ( ) ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n <ect>
\t3 <comment> \n <ect>
\t3 pstmt . set <identifiersep> long ( <number_literal> , ( long ) allocated <identifiersep> ip [ 0 ] ) ; \n \t3 pstmt . execute <identifiersep> update ( ) ; \n \t3 pstmt . close ( ) ; } } \n \t1 protected void upgrade <identifiersep> direct <identifiersep> user <identifiersep> ip <identifiersep> address ( connection conn , long dc <identifiersep> id , long network <identifiersep> id , string vlan <identifiersep> type ) throws sql <identifiersep> exception { \n <ect>
\t7 + val . to <identifiersep> string ( ) ) ; \n \t5 assert . assert <identifiersep> equals ( <string_literal> , val ) ; } \n \t4 if ( name . equals ( <string_literal> ) ) { \n \t5 string val = col . get <identifiersep> value ( string <identifiersep> serializer . get ( ) ) ; \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + resource <identifiersep> name , e ) ; \n \t2 } catch ( instantiation <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + resource <identifiersep> name , e ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t1 if ( null != cluster ) { \n \t1 if ( type . is <identifiersep> dynamic ( ) ) { \n \t2 cluster . stop ( ) ; \n \t1 } else { \n <ect>
\t2 if ( proc <identifiersep> ref . get <identifiersep> process ( ) . equals ( zoo <identifiersep> keeper <identifiersep> process ) ) { \n \t2 try { \n \t3 cluster . stop <identifiersep> process <identifiersep> with <identifiersep> timeout ( zoo <identifiersep> keeper <identifiersep> process , <number_literal> , time <identifiersep> unit . seconds ) ; \n \t2 } catch ( execution <identifiersep> exception | timeout <identifiersep> exception e ) { \n <ect>
\t2 logger . info ( <string_literal> + charset . default <identifiersep> charset ( ) ) ; \n \t2 response response = target . request ( ) . post ( entity . entity ( entity <identifiersep> xml , application <identifiersep> xml <identifiersep> <identifier> <identifiersep> type ) ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 keep <identifiersep> charset <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element entity = response . read <identifiersep> entity ( keep <identifiersep> charset <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element . class ) ; \n <ect>
\t4 while ( message . length ( ) >= <number_literal> ) { \n \t5 new <identifiersep> chat . send <identifiersep> message ( message . substring ( 0 , <number_literal> ) ) ; \n \t5 message = message . substring ( <number_literal> ) ; } \n \t4 new <identifiersep> chat . send <identifiersep> message ( message ) ; \n <ect>
\t3 for ( global <identifiersep> property prop : props ) { \n \t4 if ( <string_literal> . equals <identifiersep> ignore <identifiersep> case ( prop . get <identifiersep> property <identifiersep> value ( ) ) ) { \n \t5 mandatory <identifiersep> module <identifiersep> ids . add ( prop . get <identifiersep> property ( ) . replace ( <string_literal> , <string_literal> ) ) ; } } } \n \t2 catch ( exception e ) { \n <ect>
\t2 <identifier> <identifiersep> log . info ( <string_literal> + get <identifiersep> peer <identifiersep> ports <identifiersep> info ( ) ) ; \n \t2 send <identifiersep> command ( <identifier> <identifiersep> host , <identifier> <identifiersep> client <identifiersep> port , <string_literal> ) ; } \n \t1 catch ( io <identifiersep> exception e ) \n \t1 { \n <ect>
\t5 if ( key <identifiersep> field != null ) { \n \t6 long hash <identifiersep> code = key <identifiersep> field . hash <identifiersep> code ( ) ; \n \t6 partition = math . abs ( ( int ) ( hash <identifiersep> code ^ ( hash <identifiersep> code > > > <number_literal> ) ) ) % partition <identifiersep> infos . size ( ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public void serialize ( big <identifiersep> decimal value , byte <identifiersep> buffer out ) { \n \t2 if ( value . scale ( ) > type . get <identifiersep> scale ( ) ) { \n \t3 if ( avoid <identifiersep> verbose ++ % <number_literal> == 0 ) { \n <ect>
\t3 throws invalid <identifiersep> variable <identifiersep> exception { \n \t2 string variable <identifiersep> name = ( ( compound <identifiersep> variable ) values [ 0 ] ) . execute ( ) ; \n \t2 final j <identifiersep> meter <identifiersep> variables vars = get <identifiersep> variables ( ) ; \n \t2 if ( vars == null ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 <comment> \n \t5 for ( int i = 0 ; i < id <identifiersep> list . size ( ) ; i ++ ) { \n \t6 identity <identifiersep> proxy id = id <identifiersep> list . get ( i ) ; \n \t6 ex . add <identifiersep> proxy <identifiersep> object ( id . get <identifiersep> table <identifiersep> name ( ) , id . get <identifiersep> value ( ) , id . getid <identifiersep> field <identifiersep> name ( ) ) ; \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 if ( msg . <identifier> > <number_literal> ) { \n \t4 if ( log != null && log . should <identifiersep> warn ( ) ) \n <ect>
\t2 log . info ( <string_literal> + node . get <identifiersep> context <identifiersep> root ( ) + <string_literal> ) ; \n \t2 return keycloak . get <identifiersep> instance ( node . get <identifiersep> context <identifiersep> root ( ) + <string_literal> , \n \t4 master , admin , admin , constants . admin <identifiersep> cli <identifiersep> client <identifiersep> id ) ; } \n \t1 protected keycloak <identifiersep> testing <identifiersep> client create <identifiersep> testing <identifiersep> client <identifiersep> for ( container <identifiersep> info node ) { \n <ect>
\t1 public string get <identifiersep> deleted <identifiersep> job <identifiersep> config ( string job <identifiersep> id ) throws exception { \n \t2 try { \n \t3 string commit = job <identifiersep> store <identifiersep> git . get <identifiersep> commit <identifiersep> hash <identifiersep> before <identifiersep> job <identifiersep> deletion ( job <identifiersep> id ) ; \n \t3 if ( commit == null ) { \n <ect>
\t7 <string_literal> + \n \t8 <string_literal> , \n \t7 <identifier> ) ; \n \t5 } catch ( sql <identifiersep> exception | io <identifiersep> exception e ) { \n <ect>
\t5 if ( connection <identifiersep> dictionary != null ) { \n \t6 ns <identifiersep> mutable <identifiersep> dictionary mutable <identifiersep> connection <identifiersep> dictionary = connection <identifiersep> dictionary . mutable <identifiersep> clone ( ) ; \n \t6 mutable <identifiersep> connection <identifiersep> dictionary . set <identifiersep> object <identifiersep> for <identifiersep> key ( <string_literal> , <string_literal> ) ; \n \t6 connection <identifiersep> dictionary = mutable <identifiersep> connection <identifiersep> dictionary ; } \n <ect>
\t1 scanner work <identifiersep> scanner ; \n \t1 try { \n \t2 work <identifiersep> scanner = replication <identifiersep> table . get <identifiersep> scanner ( conn ) ; \n \t1 } catch ( replication <identifiersep> table <identifiersep> offline <identifiersep> exception e ) { \n <ect>
\t3 register <identifiersep> found <identifiersep> attempt ( parent <identifiersep> watched <identifiersep> path <identifiersep> info . path <identifiersep> identifier , null , resolved <identifiersep> path ) ; \n \t3 } else if ( event . context ( ) . get <identifiersep> file <identifiersep> name ( ) . to <identifiersep> string ( ) . equals ( shuffle <identifiersep> handler . index <identifiersep> file <identifiersep> name ) ) { \n \t3 register <identifiersep> found <identifiersep> attempt ( parent <identifiersep> watched <identifiersep> path <identifiersep> info . path <identifiersep> identifier , resolved <identifiersep> path , null ) ; \n \t3 } else { \n <ect>
\t3 return ; } \n \t2 z <identifiersep> wave <identifiersep> command <identifiersep> class <identifiersep> converter < z <identifiersep> wave <identifiersep> command <identifiersep> class > converter = ( z <identifiersep> wave <identifiersep> command <identifiersep> class <identifiersep> converter < z <identifiersep> wave <identifiersep> command <identifiersep> class > ) get <identifiersep> converter ( \n \t4 command <identifiersep> class . get <identifiersep> command <identifiersep> class ( ) ) ; \n \t2 if ( converter == null ) { \n <ect>
\t4 user <identifiersep> group <identifiersep> information current <identifiersep> user = user <identifiersep> group <identifiersep> information . get <identifiersep> current <identifiersep> user ( ) ; \n \t4 if ( current <identifiersep> user . has <identifiersep> kerberos <identifiersep> credentials ( ) ) { \n \t5 token <identifiersep> util . obtain <identifiersep> token <identifiersep> for <identifiersep> job ( hbase <identifiersep> conf , current <identifiersep> user , job ) ; \n \t4 } else { \n <ect>
\t5 <comment> \n \t5 bundle <identifiersep> transit ( ) ; \n \t5 last <identifiersep> instance <identifiersep> start <identifiersep> time = cur <identifiersep> date ; } } \n \t3 catch ( exception ex ) { \n <ect>
\t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . error ) ) \n \t5 <identifier> <identifiersep> log . error ( <string_literal> ) ; } \n \t2 } else { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 version = get <identifiersep> token ( <identifier> ) ; \n \t3 log . debug ( <string_literal> + method ) ; \n \t3 log . debug ( <string_literal> + url ) ; <comment> \n <ect>
\t8 active <identifiersep> segments . put <identifiersep> if <identifiersep> absent ( segment . get <identifiersep> segment <identifiersep> id ( ) , new tracker <identifiersep> status ( segment , token ) ) ; \n \t7 } ) ; \n \t6 } catch ( unable <identifiersep> to <identifiersep> claim <identifiersep> token <identifiersep> exception <identifier> ) { \n \t7 <comment> \n <ect>
\t3 bc <identifiersep> log . logger . info ( string . format ( <string_literal> , msg . get <identifiersep> string <identifiersep> value ( ) , msg . get <identifiersep> sender ( ) ) ) ; } } \n \t1 public static void process <identifiersep> <identifier> <identifiersep> recipe <identifiersep> remove <identifiersep> <identifier> ( <identifier> <identifiersep> event event , <identifier> <identifiersep> message msg ) { \n \t2 if ( msg . is <identifiersep> string <identifiersep> message ( ) ) { \n \t3 <identifier> <identifiersep> recipe <identifiersep> manager . instance . remove <identifiersep> recipe ( msg . get <identifiersep> string <identifiersep> value ( ) ) ; \n <ect>
\t2 for ( tuple < shard <identifiersep> id , action <identifiersep> listener < replication <identifiersep> response > > shard <identifiersep> requests : broadcast <identifiersep> replication <identifiersep> action . <identifier> <identifiersep> shard <identifiersep> requests ) { \n \t3 replication <identifiersep> response replication <identifiersep> response = new replication <identifiersep> response ( ) ; \n \t3 replication <identifiersep> response . set <identifiersep> shard <identifiersep> info ( new replication <identifiersep> response . shard <identifiersep> info ( 1 , 1 ) ) ; \n \t3 shard <identifiersep> requests . v2 ( ) . on <identifiersep> response ( replication <identifiersep> response ) ; } \n <ect>
\t8 <identifier> <identifiersep> entry . size ( ) == 0 ) ; \n \t5 } else { \n \t6 assert <identifiersep> true ( <string_literal> , <identifier> <identifiersep> entry . size ( ) > 0 ) ; } } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 object header = response . get <identifiersep> string <identifiersep> headers ( ) . get <identifiersep> first ( validation . validation <identifiersep> header ) ; \n \t2 assert . assert <identifiersep> true ( error <identifiersep> header <identifiersep> message , header instanceof string ) ; \n \t2 assert . assert <identifiersep> true ( error <identifiersep> header <identifiersep> validation <identifiersep> exception <identifiersep> message , boolean . value <identifiersep> of ( string . class . cast ( header ) ) ) ; \n \t2 violation <identifiersep> report r = response . read <identifiersep> entity ( violation <identifiersep> report . class ) ; \n <ect>
\t2 message msg = consumer . receive ( <number_literal> ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , msg ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , ( ( text <identifiersep> message ) msg ) . get <identifiersep> text ( ) ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n <ect>
\t2 assert <identifiersep> acked ( prepare <identifiersep> create ( <string_literal> , 1 , settings . builder ( ) . put ( <string_literal> , <number_literal> ) \n \t4 . put ( <string_literal> , <string_literal> ) \n \t4 . put ( <string_literal> , 0 ) ) . set <identifiersep> wait <identifiersep> for <identifiersep> active <identifiersep> shards ( active <identifiersep> shard <identifiersep> count . none ) . get ( ) ) ; \n \t2 assert <identifiersep> true ( client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> exists ( <string_literal> ) . get ( ) . is <identifiersep> exists ( ) ) ; \n <ect>
\t1 } finally { \n \t2 try { \n \t2 transport . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 catch ( exception e ) \n \t3 { \n \t4 if ( warned <identifiersep> for . add ( state . get <identifiersep> block ( ) . get <identifiersep> registry <identifiersep> name ( ) ) ) \n \t4 { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t4 pms . set <identifiersep> locale ( languages . to <identifiersep> locale ( locale ) ) ; \n \t4 <comment> \n \t4 locale . set <identifiersep> default ( languages . to <identifiersep> locale ( locale ) ) ; \n \t3 } else { \n <ect>
<comment> \n public enum restx <identifiersep> log <identifiersep> level { \n \t1 verbose { \n \t2 public void log ( logger logger , restx <identifiersep> request restx <identifiersep> request , restx <identifiersep> response restx <identifiersep> response , stopwatch stopwatch ) { \n <ect>
\t3 de <identifiersep> ref <identifiersep> counts [ size ] ++ ; } \n \t2 int total = 0 ; \n \t2 for ( int element : de <identifiersep> ref <identifiersep> counts ) \n \t3 total += element ; \n <ect>
\t2 try { \n \t3 binder . run <identifiersep> plan ( args ) ; \n \t2 } catch ( exception e ) { \n \t3 system . out . println ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n <ect>
\t5 break ; <comment> \n \t2 <comment> \n \t2 con . event <identifiersep> occurred ( ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 first <identifiersep> scan <identifiersep> <identifier> = 0 ; \n \t2 grid <identifiersep> uri <identifiersep> deployment <identifiersep> scanner <identifiersep> listener <identifier> = new grid <identifiersep> uri <identifiersep> deployment <identifiersep> scanner <identifiersep> listener ( ) { \n \t3 @ override public void on <identifiersep> new <identifiersep> or <identifiersep> updated <identifiersep> file ( file file , string uri , long <identifier> ) { \n <ect>
\t5 method <identifiersep> filter . apply ( runner ) ; \n \t5 <comment> \n \t5 <identifier> . add ( runner ) ; \n \t4 } catch ( no <identifiersep> tests <identifiersep> <identifier> <identifiersep> exception e ) { \n <ect>
\t4 final jar <identifiersep> entry jar <identifiersep> entry = entries . next <identifiersep> element ( ) ; \n \t4 if ( jar <identifiersep> entry . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) ) { \n \t5 jar <identifiersep> resources . add ( jar <identifiersep> entry . get <identifiersep> name ( ) ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 task . join ( ) . close ( ) ; \n \t4 <comment> \n \t4 completable <identifiersep> future . run <identifiersep> async ( <identifier> <identifiersep> file <identifiersep> directory <identifiersep> cache : : wait <identifiersep> for <identifiersep> write <identifiersep> closure ) . join ( ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 } catch ( null <identifiersep> pointer <identifiersep> exception npe ) { \n \t4 <comment> \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n <ect>
<comment> \n \t1 public void set <identifiersep> encoding ( string encoding ) { \n \t2 if ( ! charset . is <identifiersep> supported ( encoding ) ) { \n <ect>
\t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 <comment> \n \t3 logger . info ( <string_literal> + get <identifiersep> file <identifiersep> name ( file <identifiersep> url <identifiersep> all <identifiersep> name ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 <identifier> <identifiersep> notify ( <string_literal> , api . message ) \n \t1 log . error ( <string_literal> + api . message ) \n \t1 main . show <identifiersep> message <identifiersep> dialog ( this , <string_literal> + api . message ) \n \t1 case <string_literal> = > \n <ect>
\t4 } catch ( configuration <identifiersep> exception e ) { \n \t5 <comment> \n \t5 <comment> \n \t5 <comment> \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 throw new unauthorized <identifiersep> service <identifiersep> exception ( unauthorized <identifiersep> service <identifiersep> exception . code <identifiersep> <identifier> <identifiersep> service ) ; } \n \t2 if ( prop <identifiersep> name . is <identifiersep> assigned <identifiersep> to ( service ) ) { \n \t3 return prop <identifiersep> name . get <identifiersep> property <identifiersep> value ( service ) . get <identifiersep> value ( ) ; } \n <ect>
\t2 } catch ( throwable e ) { } \n \t2 try { \n \t3 stop <identifiersep> broker <identifiersep> two ( ) ; \n \t2 } catch ( throwable e ) { } \n <ect>
\t4 } else { \n \t5 log . warn ( <string_literal> , customer . get <identifiersep> id ( ) , id ) ; } } \n \t3 this . address <identifiersep> ids . clear ( ) ; \n \t3 if ( this . gateway . customer ( ) . delete ( this . customer . get <identifiersep> id ( ) ) . is <identifiersep> success ( ) ) { \n <ect>
\t2 try { \n \t2 try { \n \t3 curr <identifiersep> block . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 check <identifiersep> interest = <identifier> <identifiersep> sent <identifiersep> interests . get ( i ) ; \n \t6 if ( check <identifiersep> interest . matches ( is . content ) ) { \n \t7 <comment> \n \t7 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) \n <ect>
\t6 try { \n \t7 ip <identifiersep> finder . unregister <identifiersep> addresses ( left <identifiersep> node . socket <identifiersep> addresses ( ) ) ; } \n \t6 catch ( grid <identifiersep> spi <identifiersep> exception ignored ) { \n <ect>
\t5 user <identifiersep> log . info ( <string_literal> , cluster <identifiersep> conf ) ; \n \t5 return ; } \n \t4 catch ( interrupted <identifiersep> exception e ) \n \t4 { \n <ect>
\t2 for ( <identifier> <identifiersep> api <identifiersep> authenticator auth <identifiersep> manager : <identifier> ) { \n \t3 if ( auth <identifiersep> manager != null && auth <identifiersep> manager instanceof <identifier> <identifiersep> manager ) { \n \t4 <identifier> <identifiersep> saml <identifiersep> auth <identifiersep> manager = ( <identifier> <identifiersep> manager ) auth <identifiersep> manager ; } } \n \t2 if ( <identifier> <identifiersep> saml <identifiersep> auth <identifiersep> manager == null ) { \n <ect>
\t2 if ( ! <identifier> . is <identifiersep> empty ( ) ) { \n \t3 player player = game . get <identifiersep> state ( ) . get <identifiersep> player ( player <identifiersep> id ) ; \n \t3 priority <identifiersep> timer timer = <identifier> . get ( player <identifiersep> id ) ; \n \t3 if ( timer != null ) { \n <ect>
\t3 run <identifiersep> method <identifiersep> without <identifiersep> <identifier> <identifiersep> exceptions ( ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> + name ( main ) + <string_literal> + e , e ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t2 if ( period == 0 ) \n \t3 return ; \n \t2 assert ( period > 0 ) ; \n \t2 if ( time <identifiersep> end <identifiersep> period ( period ) != 0 ) \n <ect>
\t2 file hints <identifiersep> file = new file ( hints <identifiersep> directory , descriptor . file <identifiersep> name ( ) ) ; \n \t2 if ( hints <identifiersep> file . delete ( ) ) \n \t3 logger . info ( <string_literal> , descriptor . file <identifiersep> name ( ) ) ; \n \t2 else \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { } } \n \t1 private void generate <identifiersep> rdf <identifiersep> from <identifiersep> database <identifiersep> table ( ) throws exception { \n \t2 if ( ! validate <identifiersep> database <identifiersep> command <identifiersep> line <identifiersep> options ( ) ) \n \t2 { \n <ect>
\t6 buffer <identifiersep> pool . dispose ( <identifier> <identifiersep> <identifier> <identifiersep> buffer ) ; \n \t6 <identifier> <identifiersep> <identifier> <identifiersep> buffer = 0 ; } \n \t4 } ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 assigned . return <identifiersep> work <identifiersep> permit ( ) ; \n \t3 if ( task != null ) \n \t4 logger . error ( <string_literal> , t ) ; \n \t3 else \n <ect>
\t4 <identifier> = argument <identifiersep> type . attribute ; \n \t3 else if ( is <identifiersep> instance <identifiersep> of <identifiersep> the <identifiersep> class ( node . as <identifiersep> resource ( ) , variable ) ) \n \t4 <identifier> = argument <identifiersep> type . variable ; \n \t2 } else { \n <ect>
\t1 public void do <identifiersep> task ( chunk <identifiersep> task task ) { \n \t2 try { \n \t3 chunk <identifiersep> generator . put ( task ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 key <identifiersep> store <identifiersep> name = name ; \n \t1 if ( null != key <identifiersep> store <identifiersep> name ) { \n \t1 key <identifiersep> store <identifiersep> name = file <identifiersep> utils . get <identifiersep> resource <identifiersep> path ( key <identifiersep> store <identifiersep> name , get <identifiersep> class ( ) ) ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
<comment> \n \t1 public void activate ( final bundle <identifiersep> context bundle <identifiersep> context , \n \t3 final map < string , object > configuration ) { \n \t2 this . bundle <identifiersep> context = bundle <identifiersep> context ; \n <ect>
\t1 log . warn ( <string_literal> , e ) ; } \n \t1 try { \n \t1 utils . add <identifiersep> dependency <identifiersep> jars ( conf , classes <identifiersep> to <identifiersep> load ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t9 get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t7 failing = false ; } \n \t5 } catch ( throwable t ) { \n \t6 failing = true ; \n <ect>
\t4 final set < object > attribute <identifiersep> values = collection <identifiersep> utils . to <identifiersep> collection ( entry . get <identifiersep> value ( ) ) ; \n \t4 logger . debug ( <string_literal> , attribute <identifiersep> name , attribute <identifiersep> values ) ; \n \t4 final collection < pattern > patterns = create <identifiersep> pattern <identifiersep> for <identifiersep> mapped <identifiersep> attribute ( attribute <identifiersep> name ) ; \n \t4 patterns . for <identifiersep> each ( pattern - > { \n <ect>
\t2 if ( body != null ) { \n \t3 log . debug ( <string_literal> , body , event <identifiersep> bus ) ; \n \t3 event <identifiersep> bus . post ( body ) ; \n \t2 } else { \n <ect>
\t3 out . run ( ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n \t3 <comment> \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 request . accept ( application <identifiersep> xml <identifiersep> <identifier> <identifiersep> type ) ; \n \t1 string str = <string_literal> 1 . 0 \\ <string_literal> \n \t3 + <string_literal> ; \n \t1 log . info ( str ) ; \n <ect>
\t8 ( fast <identifiersep> leader <identifiersep> election ) peer . get <identifiersep> election <identifiersep> alg ( ) ; \n \t7 election . shutdown ( ) ; \n \t7 <comment> \n \t7 assert . assert <identifiersep> equals ( - 1 , election . get <identifiersep> vote ( ) . get <identifiersep> id ( ) ) ; \n <ect>
\t2 try { \n \t3 xen vms = new xen ( c ) ; \n \t3 return vms . get <identifiersep> running <identifiersep> vm <identifiersep> configs ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 final vm <identifiersep> instance vm = task . get <identifiersep> vm <identifiersep> instance ( ) ; \n \t5 if ( vm . get <identifiersep> runtime <identifiersep> state ( ) != null && <string_literal> . equals ( vm . get <identifiersep> runtime <identifiersep> state ( ) . get <identifiersep> guest <identifiersep> state ( ) ) ) { \n \t6 task . set <identifiersep> vm <identifiersep> create <identifiersep> image <identifiersep> task <identifiersep> state ( create <identifiersep> image <identifiersep> state . complete ) ; } \n \t4 } catch ( final exception ex ) { \n <ect>
\t6 statement . close ( ) ; } \n \t5 catch ( throwable ignore ) { \n \t6 <comment> \n \t3 catch ( exception e ) { \n <ect>
\t1 common ( ) ; \n \t1 assert <identifiersep> true ( compare . compare ( temp , <string_literal> ) ) ; } \n void common ( ) { \n \t1 int i = 0 ; \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 send <identifiersep> command ( cmd <identifiersep> <identifier> <identifiersep> finish <identifiersep> now ) ; } \n \t1 else \n \t1 { \n <ect>
<comment> \n \t1 private int stack <identifiersep> <identifier> ( unit from , unit to , block block , int a <identifiersep> context ) \n \t1 { \t4 \n \t2 if ( debug ) { \n <ect>
\t3 return to <identifiersep> transform . set <identifiersep> scope ( compile ) ; } \n \t2 return to <identifiersep> transform ; \n \t2 } ) \n \t2 . collect ( to <identifiersep> list ( ) ) ; \n <ect>
\t4 if ( delete <identifiersep> single <identifiersep> ticket ( ticket <identifiersep> id ) ) { \n \t5 logger . debug ( <string_literal> , ticket <identifiersep> id ) ; \n \t5 count . increment <identifiersep> and <identifiersep> get ( ) ; \n \t4 } else { \n <ect>
\t1 try { \n \t1 db <identifiersep> execute ( <identifier> , <identifier> <identifiersep> test <identifiersep> query ) \n \t1 } catch ( exception e ) { \n \t1 if ( e . message ? . contains ( <identifier> ) ) { \n <ect>
\t3 <comment> \n \t3 return true ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 leader <identifiersep> retrieval <identifiersep> service . stop ( ) ; \n \t3 } catch ( exception fe ) { \n <ect>
\t2 addresses . get <identifiersep> instance ( ) . start ( address , instance ) \n \t1 } catch ( final exception e ) { \n \t2 logger . error ( <string_literal> , e ) } \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t2 else { \n \t3 stomp <identifiersep> connection <identifiersep> handler handler = this . connection <identifiersep> handlers . get ( session <identifiersep> id ) ; \n \t3 if ( handler == null ) { \n <ect>
\t3 it . metadata <identifiersep> vm <identifiersep> type <identifiersep> cpu , \n \t3 it . metadata <identifiersep> vm <identifiersep> type <identifiersep> disk , \n \t3 it . metadata <identifiersep> vm <identifiersep> type <identifiersep> memory ) \n \t2 old <identifiersep> vm <identifiersep> types . put ( old <identifiersep> vm <identifiersep> type <identifiersep> info . name , old <identifiersep> vm <identifiersep> type <identifiersep> info ) \n <ect>
\t1 public void set <identifiersep> up ( ) throws exception { \n \t2 log . info ( <string_literal> , bundle <identifiersep> context ) ; } \n \t1 @ after \n \t1 public void tear <identifiersep> down ( ) throws exception { \n <ect>
\t2 if ( configuration . auto <identifiersep> start <identifiersep> contexts ( ) ) { \n \t3 for ( camel <identifiersep> context context : contexts ) { \n \t4 if ( service <identifiersep> status . started . equals ( context . get <identifiersep> status ( ) ) ) { \n \t5 continue ; } \n <ect>
\t2 try { \n \t3 scheduler sched = std <identifiersep> scheduler <identifiersep> factory . get <identifiersep> default <identifiersep> scheduler ( ) ; \n \t3 sched . delete <identifiersep> job ( job <identifiersep> key ) ; \n \t2 } catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t5 if ( h . get <identifiersep> detail ( <string_literal> ) != null && h . get <identifiersep> detail ( <string_literal> ) . equals <identifiersep> ignore <identifiersep> case ( host <identifiersep> tag ) ) { \n \t6 target = h ; \n \t6 break ; } } } } \n \t2 if ( target == null ) { \n <ect>
\t3 log . trace ( <string_literal> ) ; \n \t3 try { \n \t3 call <identifiersep> on <identifiersep> state <identifiersep> response <identifiersep> command . call ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t7 lists . new <identifiersep> array <identifiersep> list ( meta <identifiersep> type . topology , meta <identifiersep> type . component ) ) ; \n \t5 <comment> \n \t5 metric <identifiersep> context . set <identifiersep> sync <identifiersep> meta ( ! modify ) ; } } \n \t2 } catch ( exception e1 ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> java <identifiersep> api ( ) throws exception { \n \t2 final int wait <identifiersep> time = <number_literal> ; \n <ect>
\t1 try { \n \t2 get <identifiersep> ms ( ) . create <identifiersep> wm <identifiersep> trigger ( request . get <identifiersep> trigger ( ) ) ; \n \t2 return new wm <identifiersep> create <identifiersep> trigger <identifiersep> response ( ) ; \n \t1 } catch ( meta <identifiersep> exception e ) { \n <ect>
\t3 client ( ) . prepare <identifiersep> get ( index <identifiersep> or <identifiersep> alias ( ) , <string_literal> , <string_literal> ) . get ( ) ; \n \t3 fail ( ) ; \n \t2 } catch ( routing <identifiersep> missing <identifiersep> exception e ) { \n \t3 assert <identifiersep> that ( e . get <identifiersep> message ( ) , equal <identifiersep> to ( <string_literal> ) ) ; } \n <ect>
\t2 s <identifiersep> logger . debug ( <string_literal> + l <identifiersep> router <identifiersep> port . get <identifiersep> uuid ( ) + <string_literal> + l <identifiersep> router <identifiersep> port . get <identifiersep> display <identifiersep> name ( ) + <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) + <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> display <identifiersep> name ( ) + <string_literal> ) ; \n \t2 try { \n \t3 nicira <identifiersep> nvp <identifiersep> api . update <identifiersep> logical <identifiersep> router <identifiersep> port <identifiersep> attachment ( logical <identifiersep> router <identifiersep> uuid , l <identifiersep> router <identifiersep> port . get <identifiersep> uuid ( ) , new patch <identifiersep> attachment ( l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) ) ) ; } \n \t2 catch ( nicira <identifiersep> nvp <identifiersep> api <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public static <identifier> <identifiersep> model er <identifiersep> default <identifiersep> model ( ) { \n \t2 if ( ! ( d2w <identifiersep> model . default <identifiersep> model ( ) instanceof <identifier> <identifiersep> model ) ) { \n \t3 d2w <identifiersep> model . set <identifiersep> default <identifiersep> model ( <identifier> <identifiersep> default <identifiersep> model ) ; \n <ect>
\t3 boolean future <identifiersep> succeed = true ; \n \t3 try { \n \t3 future <identifiersep> action . get ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 { \n \t5 method = clz . get <identifiersep> method ( is + name , ( class [ ] ) null ) ; } \n \t4 catch ( exception e ) \n \t4 { \n <ect>
\t2 if ( instances . size ( ) == 0 ) { \n \t3 try { \n \t4 mbean <identifiersep> server . unregister <identifiersep> m <identifiersep> bean ( new object <identifiersep> name ( mbean <identifiersep> name ) ) ; \n \t3 } catch ( throwable ex ) { \n <ect>
\t3 <comment> \n \t3 logger . info ( <string_literal> ) ; \n \t3 device <identifiersep> info <identifiersep> reply dev <identifiersep> info <identifiersep> reply = client . get <identifiersep> device <identifiersep> info ( ) ; \n \t3 if ( dev <identifiersep> info <identifiersep> reply == null ) { \n <ect>
\t3 process <identifiersep> new <identifiersep> identity <identifiersep> request ( message . get <identifiersep> new <identifiersep> identity <identifiersep> request ( ) , ctx ) ; \n \t2 } else if ( message . has <identifiersep> handshake <identifiersep> hello ( ) && message . has <identifiersep> handshake <identifiersep> verification ( ) ) { \n \t3 process <identifiersep> client <identifiersep> handshake ( message . get <identifiersep> handshake <identifiersep> hello ( ) , message . get <identifiersep> handshake <identifiersep> verification ( ) , ctx ) ; } } \n \t1 private void process <identifiersep> client <identifiersep> handshake ( net <identifiersep> data . handshake <identifiersep> hello client <identifiersep> hello , net <identifiersep> data . handshake <identifiersep> verification handshake <identifiersep> verification , channel <identifiersep> handler <identifiersep> context ctx ) { \n <ect>
\t2 expected <identifiersep> no <identifiersep> timestamp ) ; \n \t1 exec ( <string_literal> , true , <string_literal> ) ; } \n @ test \n public void <identifier> <identifiersep> test ( ) throws io <identifiersep> exception { \n <ect>
<comment> \n @ override \n public void kill <identifiersep> jobs ( string tag , long timestamp ) { \n \t1 try { \n <ect>
\t4 if ( user <identifiersep> id == - 1 ) { \n \t5 s <identifiersep> logger . error ( <string_literal> + username + <string_literal> ) ; \n \t5 return - 1 ; } } \n \t2 } else { \n <ect>
\t1 public void stop <identifiersep> <identifier> ( ) { \n \t2 if ( ! samples . is <identifiersep> empty ( ) ) { \n \t3 <identifier> . add ( sort <identifiersep> and <identifiersep> dump ( samples , sample <identifiersep> metadata ) ) ; } \n <ect>
\t4 file <identifiersep> system refresh <identifiersep> fs = refresh <identifiersep> path . get <identifiersep> file <identifiersep> system ( ) ; \n \t4 refresh <identifiersep> dirs . add ( new refresh <identifiersep> location ( refresh <identifiersep> path , refresh <identifiersep> fs ) ) ; \n \t3 } catch ( exception e ) { \n \t4 <comment> \n <ect>
\t3 final host host = host . get <identifiersep> by <identifiersep> uuid ( conn , citrix <identifiersep> resource <identifiersep> base . get <identifiersep> host ( ) . get <identifiersep> uuid ( ) ) ; \n \t3 vm = citrix <identifiersep> resource <identifiersep> base . create <identifiersep> vm <identifiersep> from <identifiersep> template ( conn , vm <identifiersep> spec , host ) ; \n \t3 final gpu <identifiersep> device <identifiersep> to gpu <identifiersep> device = vm <identifiersep> spec . get <identifiersep> gpu <identifiersep> device ( ) ; \n \t3 if ( gpu <identifiersep> device != null ) { \n <ect>
\t4 try { \n \t5 long new <identifiersep> count = insert <identifiersep> count . get ( ) ; \n <comment> \n <comment> \n <ect>
\t3 if ( task != null ) { \n \t4 try { \n \t5 task . destroy ( conn ) ; \n \t4 } catch ( final exception e1 ) { \n <ect>
\t3 assert <identifiersep> true ( incoming . starts <identifiersep> with ( <string_literal> ) ) ; \n \t3 assert <identifiersep> true ( incoming . index <identifiersep> of ( <string_literal> ) >= 0 ) ; \n \t3 assert <identifiersep> true ( incoming . index <identifiersep> of ( <string_literal> ) >= 0 ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 int load <identifiersep> count = load <identifiersep> bean <identifiersep> definitions ( resource ) ; \n \t3 if ( actual <identifiersep> resources != null ) { \n \t4 actual <identifiersep> resources . add ( resource ) ; } \n <ect>
\t3 sub <identifiersep> key = key ; } \n \t3 log . debug ( <string_literal> + existing <identifiersep> list <identifiersep> array ) ; \n \t3 log . debug ( <string_literal> + sub <identifiersep> object ) ; \n <ect>
\t2 this . file <identifiersep> retry <identifiersep> count = file <identifiersep> retry <identifiersep> count ; \n \t2 return this ; } \n \t1 @ override \n \t1 public void do <identifiersep> prepare ( map conf , topology <identifiersep> context topology <identifiersep> context , output <identifiersep> collector collector ) throws io <identifiersep> exception { \n <ect>
\t2 results . add ( result ) ; } } \n \t1 } catch ( naming <identifiersep> exception e ) { \n \t1 if ( generic <identifiersep> ldap <identifiersep> search . logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n \t2 <comment> \n <ect>
\t2 } else { \n \t3 he = new hive <identifiersep> exception ( error , error <identifiersep> msg . spark <identifiersep> job <identifiersep> runtime <identifiersep> error ) ; } \n \t2 set <identifiersep> exception ( he ) ; } } \n \t1 } catch ( exception e ) { \n <ect>
\t1 self . logger . info ( <string_literal> ) \n \t1 put <identifiersep> ranger <identifiersep> hdfs <identifiersep> plugin <identifiersep> property = self . put <identifiersep> property ( configurations , <string_literal> , services ) \n \t1 put <identifiersep> ranger <identifiersep> hdfs <identifiersep> plugin <identifiersep> property ( <string_literal> , hdfs <identifiersep> user ) \n \t1 else : \n <ect>
\t7 this . mode <identifiersep> types . add ( mode <identifiersep> type <identifiersep> to <identifiersep> add ) ; \n \t7 logger . debug ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) , \n \t9 mode <identifiersep> type <identifiersep> to <identifiersep> add . get <identifiersep> label ( ) , index ) ; \n \t6 } else { \n <ect>
\t7 <identifier> <identifiersep> log . warn ( <string_literal> + addresses . to <identifiersep> string ( ip ) + <string_literal> + count + <string_literal> + con ) ; \n \t5 } else { \n \t6 count = 1 ; \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t3 method m = this . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> + <identifier> <identifiersep> num + <string_literal> , string . class ) ; \n \t3 m . invoke ( this , value ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 } catch ( exception ex ) { \n \t3 try { \n \t4 volume <identifiersep> info . get <identifiersep> data <identifiersep> store ( ) . get <identifiersep> driver ( ) . delete <identifiersep> async ( volume <identifiersep> info . get <identifiersep> data <identifiersep> store ( ) , volume <identifiersep> info , null ) ; } \n \t3 catch ( exception exc ) { \n <ect>
\t4 if ( charset . is <identifiersep> supported ( exchange <identifiersep> charset <identifiersep> name ) ) { \n \t5 return charset . for <identifiersep> name ( exchange <identifiersep> charset <identifiersep> name ) ; } \n \t4 log . warn ( <string_literal> , exchange <identifiersep> charset <identifiersep> name ) ; \n \t3 } catch ( exception charset <identifiersep> ex ) { \n <ect>
\t2 result <identifiersep> endpoint . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > list = result <identifiersep> endpoint . get <identifiersep> received <identifiersep> exchanges ( ) ; \n \t2 for ( exchange exchange : list ) { \n \t3 message in = exchange . get <identifiersep> in ( ) ; \n <ect>
\t2 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n \t3 if ( answer != null ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + answer . get <identifiersep> details ( ) ) ; \n \t3 } else { \n <ect>
\t2 stopwatch . start ( ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 if ( i % <number_literal> == 0 ) { \n \t4 stopwatch . stop ( ) ; \n <ect>
\t2 terminal term = runner . reader . terminal \n \t2 if ( log . debug ) { \n \t3 log . debug ( <string_literal> ) \n \t3 log . debug ( <string_literal> ) \n <ect>
\t1 return config <identifiersep> filter <identifiersep> set ; } \n \t1 private set < string > validate <identifiersep> sources ( set < string > channel <identifiersep> set ) { \n \t1 <comment> \n \t1 if ( sources == null || sources . is <identifiersep> empty ( ) ) { \n <ect>
private http <identifiersep> protocol <identifiersep> version get <identifiersep> http <identifiersep> protocol <identifiersep> version ( map < string , ? extends object > properties , string property <identifiersep> key ) \n { \n \t1 if ( properties == null ) \n \t1 { \n <ect>
\t2 string metric <identifiersep> upload <identifiersep> class = config <identifiersep> extension . get <identifiersep> metric <identifiersep> uploader <identifiersep> class ( nimbus <identifiersep> data . get <identifiersep> conf ( ) ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( metric <identifiersep> upload <identifiersep> class ) ) { \n \t3 metric <identifiersep> upload <identifiersep> class = default <identifiersep> metric <identifiersep> uploader . class . get <identifiersep> name ( ) ; } \n \t2 <comment> \n <ect>
\t5 try { \n \t6 server . stop ( ) ; \n \t6 log . info ( <string_literal> ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t4 if ( num <identifiersep> nodes == 1 ) { \n \t5 assert <identifiersep> true ( await <identifiersep> busy ( ( ) - > { \n \t6 logger . info ( <string_literal> ) ; \n \t6 cluster <identifiersep> health <identifiersep> response cluster <identifiersep> health = active <identifiersep> client . admin ( ) . cluster ( ) . health ( cluster <identifiersep> health <identifiersep> request ( ) . wait <identifiersep> for <identifiersep> <identifier> <identifiersep> status ( ) . wait <identifiersep> for <identifiersep> nodes ( <string_literal> ) . wait <identifiersep> for <identifiersep> active <identifiersep> shards ( test . num <identifiersep> primaries * <number_literal> ) ) . action <identifiersep> get ( ) ; \n <ect>
\t4 if ( item == null ) { \n \t5 continue ; } \n \t4 collection < string > <identifier> = item . get <identifiersep> menu <identifiersep> <identifier> ( ) ; \n \t4 if ( <identifier> == null ) { \n <ect>
\t3 pc . set <identifiersep> password ( system . get <identifiersep> property ( <identifier> <identifiersep> super <identifiersep> password ) . to <identifiersep> char <identifiersep> array ( ) ) ; \n \t2 } else if ( credentials . contains <identifiersep> key ( user <identifiersep> name ) ) { \n \t3 pc . set <identifiersep> password ( credentials . get ( user <identifiersep> name ) . to <identifiersep> char <identifiersep> array ( ) ) ; \n \t2 } else { \n <ect>
\t3 if ( on <identifiersep> timeout != null ) \n \t4 on <identifiersep> timeout . run ( ) ; \n \t3 timeout ( sent <identifiersep> to ) ; \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 catch ( io <identifiersep> exception exc ) \n \t2 { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t3 else if ( false \n \t5 || option . equals ( <string_literal> ) \n \t3 ) { \n \t4 if ( ! has <identifiersep> more <identifiersep> options ( ) ) { \n <ect>
\t3 log . info ( <string_literal> + cache <identifiersep> manager . get <identifiersep> address ( ) ) ; \n \t4 cache <identifiersep> manager . stop ( ) ; \n \t3 log . info ( <string_literal> + cache <identifiersep> manager . get <identifiersep> address ( ) + <string_literal> ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 recover ( ) ; \n \t1 <comment> \n \t1 operation <identifiersep> mode = operation <identifiersep> mode <identifiersep> started ; \n \t1 if ( dirty ) { \n <ect>
\t2 try { \n \t2 token <identifiersep> entity . invalidate <identifiersep> all <identifiersep> exports <identifiersep> and <identifiersep> token ( ) ; \n \t2 return true ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 <identifier> <identifiersep> pause <identifiersep> interval = <number_literal> * numbers <identifiersep> util . parse <identifiersep> int ( <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) , <number_literal> ) ; \n \t2 snapshot <identifiersep> backup <identifiersep> retries = backup <identifiersep> retry <identifiersep> attempts . value ( ) ; \n \t2 snapshot <identifiersep> backup <identifiersep> retry <identifiersep> interval = backup <identifiersep> retry <identifiersep> interval . value ( ) ; \n \t2 backup <identifiersep> snapshot <identifiersep> executor = executors . new <identifiersep> scheduled <identifiersep> thread <identifiersep> pool ( <number_literal> , new named <identifiersep> thread <identifiersep> factory ( <string_literal> ) ) ; \n <ect>
\t2 } catch ( socket <identifiersep> exception e ) { \n \t3 started <identifiersep> status <identifiersep> queue . offer ( e ) ; \n \t3 <comment> \n \t3 if ( ! is <identifiersep> interrupted ( ) ) \n <ect>
\t3 if ( field . get <identifiersep> javadoc ( ) . is <identifiersep> present ( ) ) { \n \t4 final configuration <identifiersep> metadata <identifiersep> property prop = create <identifiersep> configuration <identifiersep> property ( field , property ) ; \n \t4 process <identifiersep> nested <identifiersep> class <identifiersep> or <identifiersep> interface <identifiersep> type <identifiersep> if <identifiersep> needed ( field , prop ) ; \n \t3 } else { \n <ect>
\t3 xml <identifiersep> web <identifiersep> application <identifiersep> context ctx = ( xml <identifiersep> web <identifiersep> application <identifiersep> context ) get <identifiersep> web <identifiersep> application <identifiersep> context ( ) ; \n \t3 ctx . stop ( ) ; \n \t3 ctx . close ( ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t7 new <identifiersep> node . set <identifiersep> owner <identifiersep> document ( page ) ; } \n \t5 } else { \n \t6 logger . warn ( <string_literal> , src ) ; } \n \t4 } else { \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t4 this . doing <identifiersep> storage <identifiersep> aggregation = true ; \n \t4 result = new <identifier> <identifiersep> aggregate <identifiersep> scanner ( result , this , <identifier> <identifiersep> enabled ) ; \n \t3 } else { \n <ect>
\t2 snapshot <identifiersep> transfer . set <identifiersep> bucket <identifiersep> name ( names [ 0 ] ) ; \n \t2 snapshot <identifiersep> transfer . set <identifiersep> key <identifiersep> name ( names [ 1 ] ) ; \n \t2 snapshot <identifiersep> transfer . cancel <identifiersep> upload ( ) ; } \n \t1 } catch ( exception e ) { \n <ect>
<comment> \n \t1 protected void start <identifiersep> write ( ) throws io <identifiersep> exception { \n \t2 if ( null == <identifier> <identifiersep> keys ) { \n <ect>
\t1 @ override \n \t1 public boolean host <identifiersep> added ( long host <identifiersep> id ) { \n \t2 host <identifiersep> vo host = host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host <identifiersep> id ) ; \n \t2 if ( host == null ) { \n <ect>
public class request <identifiersep> filter <identifiersep> get <identifiersep> entity implements client <identifiersep> request <identifiersep> filter { \n \t1 private static logger logger = logger . get <identifiersep> logger ( request <identifiersep> filter <identifiersep> get <identifiersep> entity . class ) ; \n \t1 @ override \n \t1 public void filter ( client <identifiersep> request <identifiersep> context request <identifiersep> context ) throws io <identifiersep> exception { \n <ect>
<number_literal> http <identifiersep> entity . empty , \n <number_literal> message <identifiersep> routing <identifiersep> information . class ) ; \n \t3 return response <identifiersep> entity . has <identifiersep> body ( ) ? optional . of ( response <identifiersep> entity . get <identifiersep> body ( ) ) : optional . empty ( ) ; \n \t2 } catch ( http <identifiersep> client <identifiersep> error <identifiersep> exception e ) { \n <ect>
\t1 @ db \n \t1 public boolean shutdown <identifiersep> network ( final long network <identifiersep> id , final reservation <identifiersep> context context , final boolean cleanup <identifiersep> elements ) { \n \t2 network <identifiersep> vo network = <identifier> <identifiersep> networks <identifiersep> dao . find <identifiersep> by <identifiersep> id ( network <identifiersep> id ) ; \n \t2 if ( network . get <identifiersep> state ( ) == network . state . allocated ) { \n <ect>
\t2 network = admin <identifiersep> client . get <identifiersep> network <identifiersep> api ( ) . create <identifiersep> network <identifiersep> in <identifiersep> zone ( \n \t3 template . get <identifiersep> zone <identifiersep> id ( ) , offering . get <identifiersep> id ( ) , prefix + <string_literal> , <string_literal> , \n \t3 create <identifiersep> network <identifiersep> options . builder . start <identifiersep> ip ( <string_literal> ) . end <identifiersep> ip ( <string_literal> ) \n \t3 . netmask ( <string_literal> ) . gateway ( <string_literal> ) . vlan ( <string_literal> ) ) ; \n <ect>
\t3 <comment> \n \t3 try { \n \t4 bytes <identifiersep> of <identifiersep> gateway <identifiersep> password = gateway <identifiersep> password . get <identifiersep> bytes ( <string_literal> ) ; \n \t3 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t3 settings . builder ( ) \n \t4 . put ( <string_literal> , random <identifiersep> repo <identifiersep> path ( ) ) \n \t4 . put ( <string_literal> , random <identifiersep> alpha <identifiersep> of <identifiersep> length ( <number_literal> ) ) \n \t4 . put ( <string_literal> , <number_literal> ) ) . get ( ) ) ; \n <ect>
\t2 try { \n \t3 view . write ( <identifier> <identifiersep> content <identifiersep> md5 , byte <identifiersep> buffer . wrap ( directory <identifiersep> md5 ) ) ; \n \t3 write <identifiersep> common <identifiersep> metadata <identifiersep> attr ( view , blob ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 class having <identifiersep> filter <identifiersep> checker { \n \t3 final having <identifiersep> filter <identifiersep> tuple tuple = new having <identifiersep> filter <identifiersep> tuple ( ) ; \n \t3 final i <identifiersep> filter <identifiersep> code <identifiersep> system cs = new having <identifiersep> filter <identifiersep> code <identifiersep> sys ( ) ; \n \t3 having <identifiersep> filter <identifiersep> checker ( ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 if ( tmp <identifiersep> dir . exists ( ) ) { \n <ect>
\t6 follower <identifiersep> for <identifiersep> thread . <identifier> <identifiersep> leader ( ) ; \n \t5 } catch ( interrupted <identifiersep> exception e ) { \n \t6 log . info ( <string_literal> , e ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t3 { \n \t4 store . close ( ) ; } \n \t3 catch ( messaging <identifiersep> exception ex ) \n \t3 { \n <ect>
\t3 } else { \n \t4 <identifier> <identifiersep> <identifier> ++ ; \n \t4 if ( <identifier> <identifiersep> <identifier> > <number_literal> ) \n \t5 throw new io <identifiersep> exception ( <string_literal> + <identifier> <identifiersep> redirect <identifiersep> location ) ; \n <ect>
\t1 try { \n \t2 if ( null != stmt ) { \n \t2 stmt . close ( ) ; } \n \t1 } catch ( exception ex ) { \n <ect>
\t3 return ; } \n \t2 resource <identifiersep> not <identifiersep> found <identifiersep> exception resource <identifiersep> not <identifiersep> found <identifiersep> exception = get <identifiersep> exception <identifiersep> type ( e , resource <identifiersep> not <identifiersep> found <identifiersep> exception . class ) ; \n \t2 if ( resource <identifiersep> not <identifiersep> found <identifiersep> exception != null ) { \n \t3 notification <identifiersep> util . show <identifiersep> warning <identifiersep> notification ( user <identifiersep> ui <identifiersep> context . get <identifiersep> message ( error <identifiersep> <identifier> <identifiersep> enum . resource <identifiersep> not <identifiersep> found ) ) ; \n <ect>
\t3 try { \n \t4 <identifier> = <identifier> . create <identifiersep> key <identifiersep> manager ( \n \t6 key <identifiersep> store <identifiersep> location <identifiersep> prop , key <identifiersep> store <identifiersep> password <identifiersep> prop ) ; \n \t3 } catch ( key <identifiersep> manager <identifiersep> exception e ) { \n <ect>
\t1 path original <identifiersep> path = new path ( original <identifiersep> value ) ; \n \t1 path absolute <identifiersep> path = file <identifiersep> utils . make <identifiersep> absolute ( local <identifiersep> file <identifiersep> system , original <identifiersep> path ) ; \n \t1 return absolute <identifiersep> path . to <identifiersep> string ( ) ; \n \t1 } catch ( io <identifiersep> exception exception ) { \n <ect>
\t4 <identifier> <identifiersep> output <identifiersep> layout layout = make <identifiersep> <identifier> <identifiersep> output <identifiersep> layout ( ) ; \n \t4 open <identifiersep> outputs ( layout ) ; \n \t4 for ( eval <identifiersep> task task : tasks ) { \n \t5 task . start ( layout ) ; } \n <ect>
\t2 url url = jar . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ; \n \t2 urls . add ( url ) ; \n \t2 log . debug ( <string_literal> , url ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t3 int v = node <identifiersep> factory <identifiersep> extra . node <identifiersep> to <identifiersep> int ( x ) ; \n \t3 limit = ( v < 0 ) ? - 1 : v ; \n \t3 idx ++ ; \n \t3 if ( idx < list . size ( ) ) { \n <ect>
\t2 } ) ; \n \t2 try { \n \t3 remote <identifiersep> <identifier> <identifiersep> future . get ( fail <identifiersep> time - system . nano <identifiersep> time ( ) , time <identifiersep> unit . nanoseconds ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 valid = true ; \n \t1 } else { \n \t2 log . warn ( <string_literal> ) ; } \n \t1 } catch ( parse <identifiersep> exception pe ) { \n <ect>
\t1 m <identifiersep> key <identifiersep> schema = options . get <identifiersep> key <identifiersep> schema ( ) ; \n \t1 this . model = options . get <identifiersep> data <identifiersep> model ( ) ; \n \t1 <comment> \n \t1 path index <identifiersep> file <identifiersep> path = new path ( options . get <identifiersep> path ( ) , index <identifiersep> filename ) ; \n <ect>
<comment> \n final void set <identifiersep> attribute ( final attribute attribute , final object object ) { \n \t1 validate . not <identifiersep> null ( attribute ) ; \n <ect>
\t4 if ( update <identifiersep> rules ) \n \t5 update <identifiersep> <identifier> <identifiersep> rules ( ) ; } \n \t3 catch ( x <identifiersep> cap <identifiersep> exception e ) \n \t3 { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 return null ; \n \t2 } catch ( dom <identifiersep> exception e ) { \n <ect>
\t2 if ( consumer == null ) { \n \t3 if ( endpoint . is <identifiersep> fail <identifiersep> if <identifiersep> no <identifiersep> consumers ( ) ) { \n \t4 exchange . set <identifiersep> exception ( new direct <identifiersep> vm <identifiersep> consumer <identifiersep> not <identifiersep> available <identifiersep> exception ( <string_literal> + endpoint , exchange ) ) ; \n \t3 } else { \n <ect>
\t1 @ action <identifiersep> doc ( text = <string_literal> , returns = <string_literal> ) \n \t1 public static boolean harmony <identifiersep> <identifier> <identifiersep> button ( @ param <identifiersep> doc ( name = <string_literal> ) string device <identifiersep> id , \n \t3 @ param <identifiersep> doc ( name = <string_literal> ) string action ) { \n \t2 if ( ! harmony <identifiersep> hub <identifiersep> action <identifiersep> service . is <identifiersep> properly <identifiersep> configured ( ) ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 socket . send ( packet ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n \t2 byte [ ] buf = new byte [ <number_literal> ] ; \n \t2 datagram <identifiersep> packet receive = new datagram <identifiersep> packet ( buf , buf . length , address , get <identifiersep> port ( ) ) ; \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 if ( message instanceof keep <identifiersep> alive <identifiersep> message ) \n \t5 { \n <ect>
\t2 final string entity <identifiersep> id = pair . get <identifiersep> value ( ) . get <identifiersep> entity <identifiersep> id ( ) ; \n \t2 logger . debug ( <string_literal> , entity <identifiersep> id ) ; \n \t2 final authn <identifiersep> request authn <identifiersep> request = authentication <identifiersep> context . get <identifiersep> key ( ) ; \n \t2 this . response <identifiersep> builder . build ( authn <identifiersep> request , request , response , cas <identifiersep> assertion , pair . get <identifiersep> key ( ) , pair . get <identifiersep> value ( ) , binding ) ; \n <ect>
<comment> \n \t2 res <identifiersep> iterator mapping <identifiersep> iter = \n \t3 config . list <identifiersep> <identifier> <identifiersep> with <identifiersep> property ( rdf . type , <identifier> . d <identifiersep> space <identifiersep> metadata <identifiersep> rdf <identifiersep> mapping ) ; \n \t2 if ( ! mapping <identifiersep> iter . has <identifiersep> next ( ) ) { \n <ect>
\t2 set <identifiersep> cipher <identifiersep> executor ( cipher <identifiersep> executor ) ; } \n \t1 @ override \n \t1 public void add <identifiersep> ticket ( @ non <identifiersep> null final ticket ticket ) { \n \t2 final ticket enc <identifiersep> ticket = encode <identifiersep> ticket ( ticket ) ; \n <ect>
\t1 protected void timestamp ( e o ) { \n \t2 super . timestamp ( o ) ; \n \t2 o . set <identifiersep> enqueue <identifiersep> time ( <identifier> <identifiersep> context . clock ( ) . now ( ) ) ; \n \t2 if ( o . get <identifiersep> priority ( ) < min <identifiersep> priority && <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 try { \n \t4 debug <identifiersep> writer . close ( ) ; \n \t4 debug <identifiersep> writer = null ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 protected bitstream <identifiersep> entry <identifiersep> generator ( sword <identifiersep> service service ) { \n \t2 super ( service ) ; \n <ect>
\t2 assert args != null \n \t2 list < string > my <identifiersep> functions = functions \n \t2 if ( fname in my <identifiersep> functions ) { \n \t3 closure func = load <identifiersep> function ( fname ) \n <ect>
\t2 default : \n \t3 log . warn ( <string_literal> + to <identifiersep> string ( event ) ) ; } \n \t2 break ; \n \t1 default : \n <ect>
\t1 capabilities capabilities = ( ( has <identifiersep> capabilities ) <identifier> ) . get <identifiersep> capabilities ( ) ; \n \t1 log . info ( <string_literal> + capabilities . get <identifiersep> browser <identifiersep> name ( ) + \n \t2 <string_literal> + capabilities . get <identifiersep> version ( ) + <string_literal> + capabilities . get <identifiersep> platform ( ) ) ; \n \t1 } else { \n <ect>
\t3 } else { \n \t4 s <identifiersep> logger . debug ( <string_literal> + api <identifiersep> constants . start + <string_literal> ) ; } \n \t3 vpc = <identifier> <identifiersep> entity <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( vpc . class , get <identifiersep> entity <identifiersep> id ( ) ) ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t4 if ( expression . <identifier> <identifiersep> to <identifiersep> workspace ( workspace <identifiersep> name ) ) { \n \t5 updated = true ; \n \t5 configs . add ( new <identifier> <identifiersep> configuration ( expression , sequencer ) ) ; } } \n \t3 if ( debug && updated ) { \n <ect>
\t3 ex . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t3 logger . warn ( <string_literal> , absolute <identifiersep> path ) ; } \n \t2 return null ; } \n \t1 public static abstract <identifiersep> file get <identifiersep> file <identifiersep> by <identifiersep> uuid ( final security <identifiersep> context security <identifiersep> context , final string uuid ) { \n <ect>
\t3 try { \n \t4 module <identifiersep> file <identifiersep> url = module <identifiersep> util . <identifier> ( tmp <identifiersep> module <identifiersep> jar ) ; \n \t4 result . add ( module <identifiersep> file <identifiersep> url ) ; } \n \t3 catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t2 if ( os <identifiersep> jar <identifiersep> path . is <identifiersep> empty ( ) ) { \n \t3 log . error ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( needs <identifiersep> dest && os <identifiersep> dest <identifiersep> jar [ 0 ] == null ) { \n <ect>
\t3 log . info ( <string_literal> + export . get <identifiersep> host <identifiersep> ip ( ) + <string_literal> + export . get <identifiersep> host <identifiersep> iqn ( ) + <string_literal> + export . get <identifiersep> connection <identifiersep> string ( ) ) ; \n \t2 } else { \n \t3 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> ) ; } \n \t2 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n <ect>
\t5 <identifier> <identifiersep> service <identifiersep> offering = <identifier> <identifiersep> offering <identifiersep> dao . find <identifiersep> by <identifiersep> id ( long . parse <identifiersep> long ( ssvm <identifiersep> <identifier> <identifiersep> off <identifiersep> id <identifiersep> str ) ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + ssvm <identifiersep> <identifier> <identifiersep> off <identifiersep> id <identifiersep> str + <string_literal> ) ; } } \n \t3 if ( <identifier> <identifiersep> service <identifiersep> offering == null ) { \n <ect>
\t3 logger <identifiersep> to <identifiersep> <identifier> . set <identifiersep> level ( level . trace ) ; } \n \t2 this . logger . warn ( <string_literal> + this . test <identifiersep> name . get <identifiersep> method <identifiersep> name ( ) + <string_literal> ) ; } \n \t1 @ after \n \t1 public void after <identifiersep> test ( ) { \n <ect>
\t3 master . log . warn ( <string_literal> , tls . current ) ; } \n \t2 } catch ( not <identifiersep> <identifier> <identifiersep> tablet <identifiersep> exception e ) { \n \t2 master . log . debug ( <string_literal> , e ) ; \n \t2 } catch ( exception e ) { \n <ect>
public go <identifiersep> back ( string mapped <identifiersep> uri ) { \n \t1 super ( mapped <identifiersep> uri ) ; } \n @ override \n public response safe <identifiersep> handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n <ect>
\t6 profiler . get <identifiersep> duration <identifiersep> in <identifiersep> millis ( ) ) ; } \n \t2 } catch ( final http <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + <identifier> <identifiersep> service <identifiersep> url + <string_literal> + method . get <identifiersep> parameter ( <string_literal> ) ) ; \n \t2 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t3 info = builder . build <identifiersep> coverage <identifiersep> store ( store <identifiersep> name ) ; \n \t3 add = true ; \n \t2 } else { \n \t3 <comment> \n <ect>
\t2 } catch ( exception e ) { \n \t3 throw new open <identifiersep> energy <identifiersep> monitor <identifiersep> exception ( e ) ; } } \n \t1 @ override \n \t1 public void disconnect ( ) throws open <identifiersep> energy <identifiersep> monitor <identifiersep> exception { \n <ect>
\t1 } catch ( invalid <identifiersep> object <identifiersep> exception e ) { \n \t2 log . debug ( public + <string_literal> , e ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> object <identifiersep> exception e ) { \n \t2 <comment> \n <ect>
\t3 try { \n \t4 response . send <identifiersep> error ( <number_literal> , <string_literal> ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 log . error ( <string_literal> ) ; \n <ect>
\t4 properties . load ( new file <identifiersep> input <identifiersep> stream ( properties <identifiersep> file ) ) ; \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 logger . warn ( <string_literal> + properties <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 jwe . enable <identifiersep> default <identifiersep> compression ( ) ; \n \t3 jwe . set <identifiersep> algorithm <identifiersep> header <identifiersep> value ( algorithm <identifiersep> header <identifiersep> value ) ; \n \t3 jwe . set <identifiersep> encryption <identifiersep> method <identifiersep> header <identifiersep> parameter ( content <identifiersep> encryption <identifiersep> algorithm <identifiersep> identifier ) ; \n \t3 jwe . set <identifiersep> key ( secret <identifiersep> key <identifiersep> encryption <identifiersep> key ) ; \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 corrupt = true ; \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t2 log . info ( <string_literal> + send <identifiersep> connection ) ; \n \t2 log . info ( <string_literal> + receive <identifiersep> connection ) ; \n \t2 session = send <identifiersep> connection . create <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n \t2 receive <identifiersep> session = receive <identifiersep> connection . create <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n <ect>
\t2 <comment> \n \t2 return null ; } \n \t1 } ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 long start <identifiersep> time = system . nano <identifiersep> time ( ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 initialization <identifiersep> latch . await ( ) ; \n \t2 long duration = system . nano <identifiersep> time ( ) - start <identifiersep> time ; \n <ect>
\t3 con . set <identifiersep> connection <identifiersep> error ( <string_literal> + waited + <string_literal> ) ; \n \t3 con . disconnect ( false ) ; \n \t3 <identifier> ( 0 , con ) ; \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 try { \n \t2 reader . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n \t2 log . warn ( <string_literal> ) ; } } \n <ect>
\t2 <comment> \n \t2 headers . put ( <string_literal> , null ) ; \n \t2 final org . apache . camel . component . <identifier> . api . model . comments result = request <identifiersep> body <identifiersep> and <identifiersep> headers ( <string_literal> , null , headers ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t3 int max <identifiersep> size = camel <identifiersep> context <identifiersep> helper . get <identifiersep> maximum <identifiersep> simple <identifiersep> cache <identifiersep> size ( get <identifiersep> camel <identifiersep> context ( ) ) ; \n \t3 if ( max <identifiersep> size > 0 ) { \n \t4 cache <identifiersep> expression = lru <identifiersep> cache <identifiersep> factory . new <identifiersep> lru <identifiersep> cache ( <number_literal> , max <identifiersep> size , false ) ; \n \t4 cache <identifiersep> predicate = lru <identifiersep> cache <identifiersep> factory . new <identifiersep> lru <identifiersep> cache ( <number_literal> , max <identifiersep> size , false ) ; \n <ect>
\t3 byte reply <identifiersep> iv [ ] = hop <identifiersep> config . get <identifiersep> reply <identifiersep> iv ( ) ; \n \t3 if ( log . should <identifiersep> log ( log . debug ) ) { \n \t4 log . debug ( reply . get <identifiersep> unique <identifiersep> id ( ) + <string_literal> + record <identifiersep> num + <string_literal> + hop + <string_literal> + j + <string_literal> \n \t6 + reply <identifiersep> key . to <identifiersep> base64 ( ) + <string_literal> + base64 . encode ( reply <identifiersep> iv ) + <string_literal> + cfg ) ; \n <ect>
\t7 ) \n \t6 ) ; } \n \t5 catch ( unknown <identifiersep> host <identifiersep> exception e ) \n \t5 { \n <ect>
\t1 @ override \n \t1 public void handle <identifiersep> error ( data <identifiersep> output <identifiersep> stream output <identifiersep> stream , voldemort <identifiersep> exception e ) throws io <identifiersep> exception { \n \t2 response <identifiersep> builder . set <identifiersep> error ( proto <identifiersep> utils . encode <identifiersep> error ( error <identifiersep> code <identifiersep> mapper , e ) ) ; \n \t2 if ( logger . is <identifiersep> enabled <identifiersep> for ( level . error ) ) \n <ect>
\t4 logger . debug ( <string_literal> + tbl . get <identifiersep> table <identifiersep> name ( ) + <string_literal> ) ; \n \t4 return null ; } \n \t4 row <identifiersep> cnt = long . parse <identifiersep> long ( tbl . get <identifiersep> property ( stats <identifiersep> setup <identifiersep> const . row <identifiersep> count ) ) ; \n \t4 if ( row <identifiersep> cnt == null ) { \n <ect>
\t3 log . warn ( <string_literal> + parent <identifiersep> tag ) ; \n \t3 return ; } \n \t2 node <identifiersep> list remove <identifiersep> nodes = parent <identifiersep> element . get <identifiersep> elements <identifiersep> by <identifiersep> tag <identifiersep> name ( remove <identifiersep> node ) ; \n \t2 if ( remove <identifiersep> nodes == null ) { \n <ect>
\t3 result . <identifier> = ( org . apache . accumulo . core . client . impl . thrift . thrift <identifiersep> not <identifiersep> active <identifiersep> service <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 action <identifiersep> event <identifiersep> utils . start <identifiersep> nested <identifiersep> action <identifiersep> event ( event <identifiersep> types . event <identifiersep> ssvm <identifiersep> destroy , <string_literal> ) ; \n \t3 return destroy <identifiersep> secondary <identifiersep> storage <identifiersep> vm ( cmd . get <identifiersep> id ( ) ) ; } } \n \t1 private string sign <identifiersep> request ( final string request , final string key ) { \n \t2 try { \n <ect>
\t3 file <identifiersep> pointer = l ; } } \n \t1 @ override \n \t1 public void did <identifiersep> insert ( ) { \n \t2 super . did <identifiersep> insert ( ) ; \n <ect>
\t3 else if ( node . action instanceof pass <identifiersep> ability && node . <identifier> > <number_literal> && ! ( best <identifiersep> child . action instanceof play <identifiersep> <identifier> <identifiersep> ability ) ) { \n \t4 <comment> \n \t4 double ratio = node . <identifier> / ( node . <identifier> * 1 . 0 ) ; \n \t4 if ( ratio > best <identifiersep> ratio - pass <identifiersep> ratio <identifiersep> tolerance ) { \n <ect>
\t3 } catch ( value <identifiersep> translation <identifiersep> exception <identifier> ) { \n \t4 if ( fail <identifiersep> on <identifiersep> parse <identifiersep> exception ) { \n \t5 throw <identifier> ; \n \t4 } else { \n <ect>
\t3 json <identifiersep> array keys = new json <identifiersep> array ( ) ; \n \t3 json <identifiersep> object output = new json <identifiersep> object ( ) ; \n \t3 for ( cms <identifiersep> json <identifiersep> part part : parts ) { \n \t4 if ( output . has ( part . get <identifiersep> key ( ) ) ) { \n <ect>
\t3 list < expansion <identifiersep> info > <identifier> = expansion <identifiersep> dao . query <identifiersep> for <identifiersep> all ( ) ; \n \t3 for ( expansion <identifiersep> info expansion : <identifier> ) { \n \t4 set <identifiersep> codes . add ( expansion . get <identifiersep> code ( ) ) ; } \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t3 check <identifiersep> <identifier> ( <identifier> , invocation ) ; \n \t3 invoker < t > invoker = select ( <identifier> , invocation , <identifier> , null ) ; \n \t3 return invoker . invoke ( invocation ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t3 string result = <identifier> . run ( sub <identifiersep> directory . scripts , <string_literal> ) ; \n \t3 if ( ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( result ) ) { \n \t4 dispatch <identifiersep> email ( subject , result ) ; } \n \t3 } catch ( exception ex ) { \n <ect>
\t4 builder . without <identifiersep> jmx <identifiersep> reporting ( ) ; } \n \t3 cluster = builder . build ( ) ; \n \t3 if ( ! ( this . cp <identifiersep> monitor instanceof java <identifiersep> driver <identifiersep> connection <identifiersep> pool <identifiersep> monitor <identifiersep> impl ) ) \n \t4 this . cluster . get <identifiersep> metrics ( ) . get <identifiersep> registry ( ) . add <identifiersep> listener ( ( metric <identifiersep> registry <identifiersep> listener ) this . metrics <identifiersep> reg <identifiersep> listener ) ; \n <ect>
\t1 void <identifier> <identifiersep> leader ( ) throws exception { \n \t2 zk . register <identifiersep> jmx ( new observer <identifiersep> bean ( this , zk ) , self . jmx <identifiersep> local <identifiersep> peer <identifiersep> bean ) ; \n \t2 try { \n \t3 quorum <identifiersep> server leader <identifiersep> server = find <identifiersep> leader ( ) ; \n <ect>
\t1 try { \n \t1 new local <identifiersep> map <identifiersep> join <identifiersep> proc <identifiersep> factory . local <identifiersep> map <identifiersep> join <identifiersep> processor ( ) . has <identifiersep> group <identifiersep> by ( map <identifiersep> join <identifiersep> op , \n \t2 context ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 while ( st . has <identifiersep> more <identifiersep> tokens ( ) ) { \n \t4 try { \n \t5 put <identifiersep> extra ( st . next <identifiersep> token ( ) , st . next <identifiersep> token ( ) ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception nsee ) { \n <ect>
\t4 } catch ( interrupted <identifiersep> exception e ) { \n \t5 logger . info ( <string_literal> ) ; \n \t5 break ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 throw ( thread <identifiersep> death ) t ; \n \t4 else \n \t4 { \n \t5 clazz = null ; \n <ect>
public string session <identifiersep> id ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> er <identifiersep> session <identifiersep> info . session <identifiersep> id <identifiersep> key ) ; } \n public void set <identifiersep> session <identifiersep> id ( string value ) { \n <ect>
\t4 encoding = configuration . get <identifiersep> encoding ( ) ; } \n \t3 try { \n \t4 return new string ( short <identifiersep> message , encoding ) ; \n \t3 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t3 this . <identifier> = install <identifiersep> ok ; \n \t3 return this . <identifier> ; \n \t2 } finally { \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t4 try { \n \t5 input <identifiersep> source . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 return com . cloud . host . host . type . routing ; } \n \t1 protected state get <identifiersep> vm <identifiersep> state ( ) { \n \t2 output <identifiersep> <identifier> . all <identifiersep> lines <identifiersep> parser <identifier> = new output <identifiersep> <identifier> . all <identifiersep> lines <identifiersep> parser ( ) ; \n \t2 if ( ! do <identifiersep> script ( <identifier> <identifiersep> get <identifiersep> status <identifiersep> command , <identifier> ) ) { \n <ect>
\t2 check ( ) . before ( <number_literal> , minutes ) . that ( address , port <identifiersep> is <identifiersep> up ) . <identifier> <identifiersep> true ( ) ; } \n \t1 public static void wait <identifiersep> until <identifiersep> port <identifiersep> is <identifiersep> down ( inet <identifiersep> socket <identifiersep> address address ) { \n \t2 check ( ) . before ( <number_literal> , minutes ) . that ( address , port <identifiersep> is <identifiersep> up ) . <identifier> <identifiersep> false ( ) ; } \n \t1 public static boolean ping <identifiersep> port ( inet <identifiersep> address address , int port ) { \n <ect>
\t3 string store <identifiersep> name = this . store <identifiersep> instance . get <identifiersep> store <identifiersep> definition ( ) . get <identifiersep> name ( ) ; \n \t3 <identifier> <identifiersep> resolver < versioned < byte [ ] > > resolver = new <identifier> <identifiersep> resolver < versioned < byte [ ] > > ( new vector <identifiersep> clock <identifiersep> <identifier> <identifiersep> resolver < byte [ ] > ( ) , \n <number_literal> new time <identifiersep> based <identifiersep> <identifier> <identifiersep> resolver < byte [ ] > ( ) ) ; \n \t3 try { \n <ect>
\t3 flush <identifiersep> table <identifiersep> result result = new flush <identifiersep> table <identifiersep> result ( ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t5 update <identifiersep> <identifier> <identifiersep> storage <identifiersep> cmd <identifiersep> response update <identifiersep> <identifier> <identifiersep> storage <identifiersep> cmd <identifiersep> response = <identifier> <identifiersep> util . update <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> storage ( capacity <identifiersep> bytes , storage <identifiersep> pool . get <identifiersep> uuid ( ) ) ; \n \t4 if ( update <identifiersep> <identifier> <identifiersep> storage <identifiersep> cmd <identifiersep> response . get <identifiersep> storage ( ) . get <identifiersep> id ( ) != null ) { \n \t5 <comment> \n \t5 <identifier> <identifiersep> storage <identifiersep> pool <identifiersep> dao . update <identifiersep> capacity <identifiersep> bytes ( storage <identifiersep> pool . get <identifiersep> id ( ) , long . parse <identifiersep> long ( capacity <identifiersep> bytes ) ) ; \n <ect>
\t9 final string binding , \n \t9 final request <identifiersep> abstract <identifiersep> type authn <identifiersep> request , \n \t9 final object assertion ) { \n \t2 final string relay <identifiersep> state = request . get <identifiersep> parameter ( saml <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> saml <identifiersep> relay <identifiersep> state ) ; \n <ect>
\t2 assert <identifiersep> equals ( <number_literal> , result . get ( calendar . year ) ) ; \n \t2 <comment> \n \t2 current = calendar . get <identifiersep> instance ( ) ; \n \t2 current . set ( <number_literal> , calendar . may , <number_literal> , <number_literal> , 0 , <number_literal> ) ; \n <ect>
\t4 target = network <identifiersep> system . get <identifiersep> entity ( message . get <identifiersep> target <identifiersep> id ( ) ) ; } \n \t3 if ( target . exists ( ) ) { \n \t4 target . send ( event ) ; \n \t3 } else { \n <ect>
\t2 close <identifiersep> java <identifiersep> writer ( out ) ; } \n \t1 protected void generate <identifiersep> dao ( table <identifiersep> definition table , java <identifiersep> writer out ) { \n \t2 unique <identifiersep> key <identifiersep> definition key = table . get <identifiersep> primary <identifiersep> key ( ) ; \n \t2 if ( key == null ) { \n <ect>
\t2 if ( hadoop <identifiersep> <identifier> == null ) { \n \t2 try { \n \t3 hadoop <identifiersep> <identifier> = load <identifiersep> <identifier> ( hadoop <identifiersep> <identifier> <identifiersep> classes , hadoop <identifiersep> <identifier> . class ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 try { \n \t3 runner . join ( <number_literal> ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> , e ) ; } \n <ect>
\t2 ldap <identifiersep> trust <identifiersep> map <identifiersep> vo vo = <identifier> <identifiersep> ldap <identifiersep> trust <identifiersep> map <identifiersep> dao . persist ( new ldap <identifiersep> trust <identifiersep> map <identifiersep> vo ( cmd . get <identifiersep> domain <identifiersep> id ( ) , link <identifiersep> type , cmd . get <identifiersep> ldap <identifiersep> domain ( ) , cmd . get <identifiersep> account <identifiersep> type ( ) , account <identifiersep> id ) ) ; \n \t2 domain <identifiersep> vo domain = domain <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vo . get <identifiersep> domain <identifiersep> id ( ) ) ; \n \t2 string domain <identifiersep> uuid = <string_literal> ; \n \t2 if ( domain == null ) { \n <ect>
\t2 <comment> \n \t2 if ( power <identifiersep> of <identifiersep> two == ( int ) power <identifiersep> of <identifiersep> two ) { \n \t3 if ( power <identifiersep> of <identifiersep> two > max <identifiersep> power ) { \n <ect>
\t3 for ( x <identifiersep> wiki <identifiersep> document doc : docs <identifiersep> to <identifiersep> load ) { \n \t4 if ( document <identifiersep> exist <identifiersep> in <identifiersep> package <identifiersep> file ( doc . get <identifiersep> full <identifiersep> name ( ) , doc . get <identifiersep> language ( ) , description ) ) { \n \t5 this . add ( doc , context ) ; \n \t4 } else { \n <ect>
\t3 if ( values . get ( <string_literal> ) == null ) { \n \t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t4 return <number_literal> ; \n \t3 } else { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> update <identifiersep> avro <identifiersep> schema ( ) throws exception { \n \t2 for ( voldemort <identifiersep> server vs : <identifier> . values ( ) ) { \n \t3 assert <identifiersep> null ( vs . get <identifiersep> store <identifiersep> repository ( ) . get <identifiersep> local <identifiersep> store ( <string_literal> ) ) ; } \n <ect>
\t1 public void start ( ) { \n \t2 run <identifiersep> async ( ) ; } \n \t1 public void stop ( ) { \n \t2 if ( stat . compare <identifiersep> and <identifiersep> set ( stat <identifiersep> running , stat <identifiersep> stopped ) ) { \n <ect>
\t3 public void node <identifiersep> not <identifiersep> added ( ) { \n \t4 logger . normal ( this , <string_literal> + seed . user <identifiersep> to <identifiersep> string ( ) + <string_literal> ) ; } \n \t3 @ override \n \t3 public void <identifier> <identifiersep> <identifier> ( ) { \n <ect>
\t2 { \n \t3 history <identifiersep> writer . update <identifiersep> record ( updater ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t5 ret . put ( <string_literal> , pos ) ; \n \t4 } else { \n \t5 error ( ret , <string_literal> ) ; } \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t5 <comment> \n \t5 log ( <string_literal> , id ) ; \n \t5 if ( block == null ) \n \t5 { \n <ect>
\t8 string <identifiersep> utils . substring <identifiersep> after ( message , <string_literal> ) ) ; } } \n \t3 } else { \n \t4 logger . warn ( <string_literal> ) ; } \n \t2 } else { \n <ect>
\t5 continue ; } \n \t4 if ( item . output == null ) { \n \t5 <comment> \n \t5 items . schedule <identifiersep> removal ( item ) ; \n <ect>
\t4 while ( ! client . is <identifiersep> disconnected ( ) ) { \n \t5 try { \n \t6 thread . sleep ( disconnect <identifiersep> interval ) ; \n \t5 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 return ; } \n \t3 try { \n \t4 camel <identifiersep> context . get <identifiersep> management <identifiersep> strategy ( ) . manage <identifiersep> object ( managed <identifiersep> object ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 int value <identifiersep> len = value . length ; \n \t2 int end <identifiersep> offset = output <identifiersep> offset + <identifier> ; \n \t2 if ( value <identifiersep> len > hex <identifiersep> length ) { \n \t3 if ( avoid <identifiersep> verbose ++ % <number_literal> == 0 ) { \n <ect>
\t3 else \n \t4 serialize <identifiersep> from ( object , object . get <identifiersep> class ( ) , node ) ; \n \t3 return object ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 blob <identifiersep> store = blob <identifiersep> store <identifiersep> utils . get <identifiersep> nimbus <identifiersep> blob <identifiersep> store ( nimbus <identifiersep> conf , nimbus <identifiersep> info . from <identifiersep> conf ( nimbus <identifiersep> conf ) ) ; \n \t3 map topology <identifiersep> conf = storm <identifiersep> config . read <identifiersep> nimbus <identifiersep> topology <identifiersep> conf ( topology <identifiersep> id , blob <identifiersep> store ) ; \n \t3 is <identifiersep> enable = get <identifiersep> topology ( topology <identifiersep> conf ) ; \n \t3 setting . put ( topology <identifiersep> name , is <identifiersep> enable ) ; \n <ect>
\t3 list < discovery <identifiersep> node > builder = new array <identifiersep> list < > ( listed <identifiersep> nodes ) ; \n \t3 for ( transport <identifiersep> address transport <identifiersep> address : filtered ) { \n \t4 discovery <identifiersep> node node = new discovery <identifiersep> node ( <string_literal> + temp <identifiersep> node <identifiersep> id <identifiersep> generator . increment <identifiersep> and <identifiersep> get ( ) , \n \t6 transport <identifiersep> address , collections . empty <identifiersep> map ( ) , collections . empty <identifiersep> set ( ) , min <identifiersep> compatibility <identifiersep> version ) ; \n <ect>
\t5 } else if ( action == cache <identifiersep> action . clear ) { \n \t6 cache . clear ( ) ; \n \t5 } else { \n \t6 <comment> \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 log . info ( <string_literal> ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n <ect>
<comment> \n static void check <identifiersep> for <identifiersep> configs <identifiersep> not <identifiersep> mapped <identifiersep> to <identifiersep> service ( ) { \n <ect>
private string secure <identifiersep> password <identifiersep> entry ( ) { \n \t1 try { \n \t1 return new string ( system . console ( ) . read <identifiersep> password ( <string_literal> ) ) ; \n \t1 } catch ( null <identifiersep> pointer <identifiersep> exception e ) { \n <ect>
\t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t3 method m = this . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> + <identifier> <identifiersep> num + <string_literal> , string . class ) ; \n \t3 m . invoke ( this , value ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 database <identifiersep> updater . updates <identifiersep> required ( ) ; } \n \t2 catch ( runtime <identifiersep> exception rex ) { \n <ect>
<comment> \n \t1 public clause parse <identifiersep> <identifier> <identifiersep> frame <identifiersep> clause ( ) { \n \t2 string t = get <identifiersep> parse <identifiersep> tag ( ) ; \n \t2 if ( <string_literal> . equals ( t ) ) { \n <ect>
\t4 } else { \n \t5 logger . debug ( <string_literal> + item . get <identifiersep> state ( ) . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t5 return ; } \n \t3 } catch ( site <identifiersep> where <identifiersep> agent <identifiersep> exception e ) { \n <ect>
\t1 public void close ( ) { \n \t2 list < bridge > connections ; \n \t2 synchronized ( this . connections ) { \n \t3 connections = new array <identifiersep> list < bridge > ( this . connections ) ; } \n <ect>
\t3 for ( int i = 1 ; i < = all ; ++ i ) { \n \t4 ensure <identifiersep> names . add ( <string_literal> + i ) ; } \n \t3 jmx <identifiersep> env . ensure <identifiersep> all ( ensure <identifiersep> names . to <identifiersep> array ( new string [ ensure <identifiersep> names . size ( ) ] ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 log . info ( <string_literal> , name ) ; \n \t5 replay <identifiersep> scheduler ( scheduler , target <identifiersep> store ) ; } } \n \t3 log . info ( <string_literal> ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 state = parse <identifiersep> boolean <identifiersep> value ( value ) == on <identifiersep> off <identifiersep> type . on ? open <identifiersep> closed <identifiersep> type . closed : open <identifiersep> closed <identifiersep> type . open ; \n \t4 logger . debug ( <string_literal> , <identifier> <identifiersep> type . get <identifiersep> command ( ) , state ) ; } \n \t2 } else { \n <ect>
\t2 label = sum / data . size ( ) ; \n \t1 } else { \n \t2 <comment> \n \t2 label = data . <identifier> <identifiersep> label ( <identifier> ) ; } \n <ect>
\t3 string auth <identifiersep> url = web <identifiersep> auth . start ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 logger . info ( <string_literal> , auth <identifiersep> url ) ; \n <ect>
\t4 expansion <identifiersep> set expansion <identifiersep> set = sets . find <identifiersep> set ( set <identifiersep> code ) ; \n \t4 if ( expansion <identifiersep> set != null ) { \n \t5 set <identifiersep> names . add ( expansion <identifiersep> set . get <identifiersep> name ( ) ) ; \n \t4 } else { \n <ect>
\t7 serial <identifiersep> device . initialize ( ) ; \n \t6 } catch ( initialization <identifiersep> exception e ) { \n \t7 logger . error ( <string_literal> + serial <identifiersep> port + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t6 } catch ( throwable e ) { \n <ect>
\t3 r . run ( ) ; \n \t3 e = r . error ( ) ; \n \t3 process <identifiersep> inc ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 @ <identifier> <identifiersep> throws \n \t1 protected void configure <identifiersep> <identifier> <identifiersep> login <identifiersep> config ( ) { \n \t2 final string prop <identifiersep> value = system . get <identifiersep> property ( sys <identifiersep> prop <identifiersep> login <identifiersep> conf ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( prop <identifiersep> value ) ) { \n <ect>
\t2 return false ; } \n \t1 public boolean remove <identifiersep> group ( final string group <identifiersep> id ) { \n \t2 if ( strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( group <identifiersep> id ) ) { \n \t3 return false ; } \n <ect>
\t2 final int num <identifiersep> indices = random <identifiersep> int <identifiersep> between ( 1 , <number_literal> ) ; \n \t2 for ( int i = 0 ; i < num <identifiersep> indices ; i ++ ) { \n \t3 assert <identifiersep> acked ( prepare <identifiersep> create ( <string_literal> + i ) . set <identifiersep> settings ( settings . builder ( ) \n \t4 . put ( setting <identifiersep> number <identifiersep> of <identifiersep> shards , 1 ) . put ( setting <identifiersep> number <identifiersep> of <identifiersep> replicas , 0 ) ) ) ; } \n <ect>
\t4 created = <identifier> <identifiersep> agent <identifiersep> mgr . handle <identifiersep> direct <identifiersep> connect <identifiersep> agent ( host , cmds , resource , for <identifiersep> rebalance , new <identifiersep> host ) ; \n \t4 <comment> \n \t4 host = <identifier> <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host . get <identifiersep> id ( ) ) ; } \n \t2 } catch ( final exception e ) { \n <ect>
\t4 if ( d != null ) { \n \t5 put <identifiersep> cache ( hostname , d ) ; \n \t5 return d ; } \n \t3 } catch ( i2p <identifiersep> session <identifiersep> exception <identifier> ) { \n <ect>
\t4 entry . set <identifiersep> proxy ( false ) ; \n \t4 entry . set <identifiersep> copy ( false ) ; \n \t4 if ( get <identifiersep> map <identifiersep> owner ( ) != null ) get <identifiersep> map <identifiersep> owner ( ) . object <identifiersep> made <identifiersep> <identifier> ( key , entry . get <identifiersep> value ( ) ) ; \n \t3 } catch ( exception x ) { \n <ect>
\t1 if ( o instanceof app <identifiersep> master <identifiersep> event <identifiersep> operator ) { \n \t1 children = new array <identifiersep> list < operator < ? > > ( ) ; \n \t1 children . add <identifiersep> all ( o . get <identifiersep> child <identifiersep> operators ( ) ) ; \n \t1 table <identifiersep> scan <identifiersep> operator ts = ( ( dynamic <identifiersep> <identifier> <identifiersep> event <identifiersep> desc ) o . get <identifiersep> conf ( ) ) . get <identifiersep> table <identifiersep> scan ( ) ; \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return ; } \n \t2 <comment> \n \t2 if ( user == null ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <comment> \n \t1 <comment> \n <ect>
\t3 string app <identifiersep> xml = read <identifiersep> and <identifiersep> validate <identifiersep> xml ( ) ; \n \t3 bundle <identifiersep> bean . set <identifiersep> orig <identifiersep> job <identifiersep> xml ( app <identifiersep> xml ) ; \n \t3 log . debug ( <string_literal> + xml <identifiersep> utils . pretty <identifiersep> print ( app <identifiersep> xml ) . to <identifiersep> string ( ) ) ; } \n \t2 catch ( bundle <identifiersep> job <identifiersep> exception ex ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 if ( ! authorized <identifiersep> user <identifiersep> repository . instance . check <identifiersep> alter <identifiersep> and <identifiersep> migrate <identifiersep> authorized <identifiersep> user ( ) ) { \n \t4 logger . fatal ( <string_literal> ) ; \n \t4 return ; } \n <ect>
\t1 try { \n \t1 if ( ps != null ) { \n \t2 ps . close ( ) ; } \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t4 val content <identifiersep> jcr = app <identifiersep> context <identifiersep> util . get <identifiersep> spring <identifiersep> bean ( content <identifiersep> jcr <identifiersep> dao : : class . java ) \n \t4 val comment <identifiersep> path = attachment <identifiersep> utils . get <identifiersep> comment <identifiersep> attachment <identifiersep> path ( type , <identifier> , <identifier> , <identifier> , id ! ! ) \n \t4 attachments = content <identifiersep> jcr . get <identifiersep> contents ( comment <identifiersep> path ) } \n \t2 } catch ( e : exception ) { \n <ect>
\t6 s <identifiersep> logger . warn ( <string_literal> + left . name + <string_literal> + vm . get <identifiersep> host <identifiersep> id ( ) + <string_literal> + host <identifiersep> id ) ; \n \t6 commands . add <identifiersep> command ( cleanup ( left . name ) ) ; } \n \t5 break ; } } \n \t3 if ( ! found ) { \n <ect>
\t2 } ; \n \t2 try { \n \t3 return index <identifiersep> loader . load <identifiersep> index ( r ) ; \n \t2 } catch ( invalid <identifiersep> index <identifiersep> exception e ) { \n <ect>
\t5 s <identifiersep> logger . trace ( <string_literal> + to <identifiersep> string ( ) ) ; } \n \t4 mark ( name ) ; \n \t4 return false ; } \n <ect>
\t4 logger . info ( <string_literal> , doc <identifiersep> count , index <identifiersep> name ) ; \n \t4 add <identifiersep> random <identifiersep> documents ( index <identifiersep> name , doc <identifiersep> count ) ; } \n \t3 <comment> \n \t3 doc <identifiersep> counts [ i ] = ( int ) client ( ) . prepare <identifiersep> search ( index <identifiersep> name ) . set <identifiersep> size ( 0 ) . get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) ; \n <ect>
\t4 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( proxy . get <identifiersep> protocol ( ) ) ) { \n \t5 logger . debug ( <string_literal> , proxy . get <identifiersep> protocol ( ) ) ; \n \t5 connector . set <identifiersep> protocol ( proxy . get <identifiersep> protocol ( ) ) ; } \n \t4 if ( proxy . get <identifiersep> redirect <identifiersep> port ( ) > 0 ) { \n <ect>
\t6 return integer . parse <identifiersep> int ( value . string <identifiersep> value ( ) ) ; } } \n \t4 return 0 ; \n \t3 } finally { \n \t4 long response <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n <ect>
\t6 <string_literal> + ctx . get <identifiersep> task <identifiersep> session ( ) . get <identifiersep> task <identifiersep> name ( ) + ' ] ' ) ; } \n \t4 else { \n \t5 total <identifiersep> <identifier> <identifiersep> jobs ++ ; \n <ect>
\t3 return ; } \n \t2 session <identifiersep> params sp = <identifier> <identifiersep> sessions . get ( h ) ; \n \t2 if ( sp == null ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 smtp <identifiersep> appender . add <identifiersep> to ( <string_literal> ) ; \n \t2 smtp <identifiersep> appender . start ( ) ; \n \t2 logger logger = logger <identifiersep> context . get <identifiersep> logger ( <string_literal> ) ; \n \t2 logger . add <identifiersep> appender ( smtp <identifiersep> appender ) ; \n <ect>
\t3 storage <identifiersep> network <identifiersep> ip <identifiersep> range <identifiersep> response response = <identifier> <identifiersep> response <identifiersep> generator . create <identifiersep> storage <identifiersep> network <identifiersep> ip <identifiersep> range <identifiersep> response ( result ) ; \n \t3 response . set <identifiersep> response <identifiersep> name ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 server <identifiersep> lock server <identifiersep> lock = server <identifiersep> locks . get ( req . lock <identifiersep> name ) ; \n \t3 if ( server <identifiersep> lock != null ) \n \t4 rsp = server <identifiersep> lock . handle <identifiersep> request ( req ) ; \n \t3 else \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return false ; } \n \t2 final string grant <identifiersep> type = context . get <identifiersep> request <identifiersep> parameter ( o <identifiersep> auth20constants . grant <identifiersep> type ) ; \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . client <identifiersep> id ) ) { \n <ect>
\t2 log . info ( <string_literal> + name + <string_literal> ) ; } \n \t1 } catch ( throwable th ) { \n \t2 script <identifiersep> error = th ; \n <ect>
public void test <identifiersep> pack <identifiersep> un <identifiersep> pack <identifiersep> long ( ) { \n \t1 log . debug ( <string_literal> ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 for ( int i = 1 ; i < <number_literal> ; i ++ ) { \n <ect>
\t1 boolean receive <identifiersep> message ( hash to <identifiersep> hash , destination from <identifiersep> dest , payload payload ) { \n \t2 session <identifiersep> params sp = <identifier> <identifiersep> sessions . get ( to <identifiersep> hash ) ; \n \t2 if ( sp == null ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 if ( ep == null ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + extract <identifiersep> job . get <identifiersep> data <identifiersep> store <identifiersep> id ( ) ) ; \n \t5 continue ; <comment> \n <ect>
\t3 for ( entry <identifiersep> point ep : wm . get <identifiersep> entry <identifiersep> points ( ) ) { \n \t4 internal <identifiersep> working <identifiersep> memory <identifiersep> entry <identifiersep> point wm <identifiersep> ep = ( internal <identifiersep> working <identifiersep> memory <identifiersep> entry <identifiersep> point ) wm . get <identifiersep> working <identifiersep> memory <identifiersep> entry <identifiersep> point ( ep . get <identifiersep> entry <identifiersep> point <identifiersep> id ( ) ) ; \n \t4 class <identifiersep> aware <identifiersep> object <identifiersep> store store = ( ( class <identifiersep> aware <identifiersep> object <identifiersep> store ) wm <identifiersep> ep . get <identifiersep> object <identifiersep> store ( ) ) ; \n \t4 if ( store . clear <identifiersep> class <identifiersep> store ( cls ) ) { \n <ect>
\t2 assertion assertion = null ; \n \t2 try { \n \t3 if ( associated && association <identifiersep> valid ) { \n \t4 assertion = central <identifiersep> authentication <identifiersep> service . validate <identifiersep> service <identifiersep> ticket ( ticket <identifiersep> id , service ) ; \n <ect>
\t6 <string_literal> ; \n \t4 log . error ( msg ) ; \n \t4 throw new runtime <identifiersep> exception ( msg ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t1 logger . info ( ' # # # new property - <string_literal> : <string_literal> ' . format ( config <identifiersep> name , config <identifiersep> value ) ) \n update <identifiersep> config ( cluster , config <identifiersep> type , updater , accessor ) \n return 0 \n def delete <identifiersep> properties ( cluster , config <identifiersep> type , args , accessor ) : \n <ect>
\t4 string <identifiersep> description description = new string <identifiersep> description ( ) ; \n \t4 expected <identifiersep> request . get <identifiersep> body <identifiersep> content <identifiersep> matcher ( ) . describe <identifiersep> to ( description ) ; \n \t4 description . append <identifiersep> text ( <string_literal> ) ; \n \t4 expected <identifiersep> request . get <identifiersep> body <identifiersep> content <identifiersep> matcher ( ) . describe <identifiersep> mismatch ( actual <identifiersep> content , description ) ; \n <ect>
<comment> \n \t1 public void initialize ( string [ ] args , daemon daemon ) { \n <ect>
\t6 results . add ( xml <identifiersep> output . get <identifiersep> writer ( ) . to <identifiersep> string ( ) ) ; } } \n \t3 } else { \n \t4 results . add ( result . to <identifiersep> string ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 txn <identifiersep> mgr . start <identifiersep> <identifier> <identifiersep> mode ( ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 if ( ! container . change ( dsg <identifiersep> current , dsg <identifiersep> compact ) ) { \n <ect>
\t4 if ( ! version . equals ( <string_literal> ) ) bad <identifiersep> policy ( <string_literal> , ( string ) value ) ; } \n \t3 return true ; } \n \t2 public boolean start <identifiersep> array ( ) throws parse <identifiersep> exception \n \t2 { \n <ect>
\t5 utils . parse <identifiersep> template ( utils . get <identifiersep> page ( context . get <identifiersep> request ( ) , exception <identifiersep> template ) , context ) ; \n \t5 return null ; \n \t4 } catch ( x <identifiersep> wiki <identifiersep> exception ex ) { \n \t5 if ( ex . get <identifiersep> code ( ) == x <identifiersep> wiki <identifiersep> exception . error <identifiersep> xwiki <identifiersep> app <identifiersep> send <identifiersep> response <identifiersep> exception ) { \n <ect>
\t1 class < ? > if <identifiersep> class = null ; \n \t1 try { \n \t2 if <identifiersep> class = class . for <identifiersep> name ( input <identifiersep> file <identifiersep> format <identifiersep> class <identifiersep> name ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t4 if ( arg . equals ( <string_literal> ) ) { \n \t5 download <identifiersep> url = iter . next ( ) ; } } \n \t3 final string server = host + <string_literal> + port + <string_literal> ; \n \t3 final string developer <identifiersep> server = host + <string_literal> + dev <identifiersep> port + api <identifiersep> url ; \n <ect>
\t6 { \n \t7 async <identifiersep> requests . add <identifiersep> all ( action <identifiersep> requests ) ; } } \n \t5 catch ( exception ex ) \n \t5 { \n <ect>
\t4 <string_literal> , \n \t4 new object [ ] { thread . current <identifiersep> thread ( ) . get <identifiersep> name ( ) , cassandra <identifiersep> host . get <identifiersep> name ( ) } ) ) ; } \n \t2 } catch ( interrupted <identifiersep> exception ie ) { \n \t2 <comment> \n <ect>
\t9 try { \n \t10 resource <identifiersep> value = ihc . resource <identifiersep> query ( resource <identifiersep> id ) ; \n \t9 } catch ( ihc <identifiersep> execption ex ) { \n \t10 logger . error ( <string_literal> , ex ) ; \n <ect>
\t6 feature <identifiersep> table . add <identifiersep> column <identifiersep> to <identifiersep> description ( column <identifiersep> name <identifiersep> map . get ( node \n \t8 . get <identifiersep> h <identifiersep> node <identifiersep> id ( ) ) , node . get <identifiersep> value ( ) . as <identifiersep> string ( ) ) ; } } \n \t4 <identifier> <identifiersep> table . add ( feature <identifiersep> table ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 out . add <identifiersep> alignment ( record ) ; \n \t3 progress . record ( record ) ; } \n \t2 iterator . close ( ) ; \n \t2 if ( header . get <identifiersep> sort <identifiersep> order ( ) == sort <identifiersep> order . <identifier> ) { \n <ect>
\t3 log . warn ( <string_literal> , consumer <identifiersep> to <identifiersep> abort ) ; } } \n \t1 public void abort <identifiersep> connection ( object <identifiersep> name consumer <identifiersep> to <identifiersep> abort ) { \n \t2 subscription sub = broker . get <identifiersep> subscriber ( consumer <identifiersep> to <identifiersep> abort ) ; \n \t2 if ( sub != null ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 if ( ! has <identifiersep> been <identifiersep> <identifier> ( ) ) { \n \t4 if ( trace <identifiersep> bucket <identifiersep> <identifier> ) \n <ect>
\t2 assert <identifiersep> that ( index . target <identifiersep> throttling ( ) . nanos ( ) , equal <identifiersep> to ( index . unknown ) ) ; \n \t2 index . start ( ) ; \n \t2 for ( file file : files ) { \n \t3 index . add <identifiersep> file <identifiersep> detail ( file . name ( ) , file . length ( ) , file . <identifier> ( ) ) ; } \n <ect>
\t1 stmt . set <identifiersep> double ( <number_literal> , value ) ; \n \t1 log . debug ( <string_literal> , set <identifiersep> preference <identifiersep> sql ) ; \n \t1 stmt . execute <identifiersep> update ( ) ; \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n <ect>
\t3 while ( running ) { \n \t4 thread . sleep ( <number_literal> ) ; \n \t4 string evt = ( seq ++ ) + <string_literal> + random <identifiersep> string <identifiersep> utils . random <identifiersep> <identifier> ( <number_literal> ) ; \n \t4 ctx . collect ( evt ) ; \n <ect>
\t2 try { \n \t3 return data . get <identifiersep> bytes ( charset ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t3 log . info ( <string_literal> + this . get <identifiersep> class ( ) . get <identifiersep> name ( ) \n \t4 + <string_literal> \n \t4 + ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) + <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 boolean host <identifiersep> can <identifiersep> access <identifiersep> s <identifiersep> pool = false ; \n \t2 storage <identifiersep> pool <identifiersep> host <identifiersep> vo host <identifiersep> pool <identifiersep> <identifier> = <identifier> <identifiersep> pool <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> pool <identifiersep> host ( pool . get <identifiersep> id ( ) , host . get <identifiersep> id ( ) ) ; \n \t2 if ( host <identifiersep> pool <identifiersep> <identifier> != null ) { \n \t3 host <identifiersep> can <identifiersep> access <identifiersep> s <identifiersep> pool = true ; } \n <ect>
\t2 this . remove <identifiersep> on <identifiersep> cancel <identifiersep> policy = remove <identifiersep> on <identifiersep> cancel <identifiersep> policy ; \n \t2 if ( this . scheduled <identifiersep> executor instanceof scheduled <identifiersep> thread <identifiersep> pool <identifiersep> executor ) { \n \t3 ( ( scheduled <identifiersep> thread <identifiersep> pool <identifiersep> executor ) this . scheduled <identifiersep> executor ) . set <identifiersep> remove <identifiersep> on <identifiersep> cancel <identifiersep> policy ( remove <identifiersep> on <identifiersep> cancel <identifiersep> policy ) ; } \n \t2 else if ( remove <identifiersep> on <identifiersep> cancel <identifiersep> policy && this . scheduled <identifiersep> executor != null ) { \n <ect>
\t6 if ( message . has <identifiersep> <identifier> ( port <identifiersep> number ) ) { \n \t7 if ( message . get <identifiersep> type ( ) == message <identifiersep> type . a ) { \n \t8 <identifier> <identifiersep> value value = ( ( <identifier> <identifiersep> message ) message ) . get <identifiersep> <identifier> <identifiersep> value ( port <identifiersep> number ) ; \n \t8 if ( value . value != null ) { \n <ect>
\t1 warn ( <identifier> <identifiersep> log , <string_literal> , extract <identifiersep> log <identifiersep> info ( request ) ) ; } } \n @ override \n public void start ( callback < none > callback ) \n { \n <ect>
\t4 for ( inet <identifiersep> address resolved <identifiersep> address : resolved <identifiersep> addresses ) { \n \t5 inet <identifiersep> address <identifier> = inet <identifiersep> address . get <identifiersep> by <identifiersep> address ( address . get <identifiersep> host <identifiersep> string ( ) , resolved <identifiersep> address . get <identifiersep> address ( ) ) ; \n \t5 tmp <identifiersep> list . add ( new inet <identifiersep> socket <identifiersep> address ( <identifier> , address . get <identifiersep> port ( ) ) ) ; } \n \t3 } catch ( unknown <identifiersep> host <identifiersep> exception ex ) { \n <ect>
\t4 <identifier> = <identifier> ? input <identifiersep> streams . get ( 0 ) : input <identifiersep> streams . get ( input <identifiersep> streams . size ( ) - 1 ) ; \n \t3 } catch ( index <identifiersep> out <identifiersep> of <identifiersep> bounds <identifiersep> exception e ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t2 } finally { \n \t3 if ( connection != null ) { \n \t3 connection . close ( ) ; } } \n \t2 } catch ( throwable e ) { \n <ect>
\t3 } else { \n \t4 adapter <identifiersep> url . append <identifiersep> path ( <string_literal> + application ( ) . port ( ) ) ; } \n \t3 adapter <identifiersep> url . append <identifiersep> path ( application ( ) . direct <identifiersep> action <identifiersep> request <identifiersep> handler <identifiersep> key ( ) + <string_literal> ) ; \n \t3 url url = adapter <identifiersep> url . to <identifiersep> url ( ) ; \n <ect>
\t2 worksheet wk = workspace . get <identifiersep> worksheet ( worksheet <identifiersep> id ) ; \n \t2 web <identifiersep> service service = null ; \n \t2 data <identifiersep> source source = null ; \n \t2 if ( ! wk . contain <identifiersep> service ( ) ) { \n <ect>
\t4 <identifier> <identifiersep> log . error ( <string_literal> + <identifier> <identifiersep> port , ioe ) ; } \n \t3 if ( <identifier> <identifiersep> socket != null ) { \n \t4 try { <identifier> <identifiersep> socket . close ( ) ; } catch ( io <identifiersep> exception ioe ) { } \n \t4 <identifier> <identifiersep> socket = null ; } \n <ect>
\t3 if ( job . get <identifiersep> dont <identifiersep> delete <identifiersep> me ( ) ) { \n \t4 return delete <identifiersep> status . job <identifiersep> do <identifiersep> not <identifiersep> delete ; } \n \t3 spawn <identifiersep> state . jobs . remove ( job <identifiersep> uuid ) ; \n \t3 spawn <identifiersep> state . job <identifiersep> dependencies . remove <identifiersep> node ( job <identifiersep> uuid ) ; \n <ect>
\t3 config . put ( prefix + <string_literal> , token <identifiersep> secret ) ; \n \t3 store ( config , file ) ; \n \t3 logger . debug ( <string_literal> , file . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t5 return new event <identifiersep> line ( item <identifiersep> name , state <identifiersep> string , scope , time ) ; } } \n \t2 } else if ( default <identifiersep> item <identifiersep> on <identifiersep> begin != null && ! command <identifiersep> pattern . matcher ( line ) . matches ( ) ) { \n \t3 <comment> \n \t3 return new event <identifiersep> line ( default <identifiersep> item <identifiersep> on <identifiersep> begin , line , scope <identifiersep> begin , event . get <identifiersep> start ( ) ) ; } \n <ect>
\t6 statistics . update <identifiersep> memory ( cache . length ( ) ) ; \n \t5 } else { \n \t6 statistics . update <identifiersep> spool ( cache . length ( ) ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t3 peer . send <identifiersep> extension ( his <identifiersep> msg <identifiersep> code , payload ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t1 if ( byte <identifiersep> output != null ) { \n \t2 try { \n \t2 byte <identifiersep> output . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 samples . for <identifiersep> each ( s - > <identifier> . put ( s , new fingerprint ( s , source , null ) ) ) ; } \n \t3 try { \n \t4 get <identifiersep> fingerprint <identifiersep> from <identifiersep> <identifier> ( <identifier> , ctx ) ; \n \t3 } catch ( final illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t1 public session <identifiersep> key <identifiersep> manager get <identifiersep> client <identifiersep> session <identifiersep> key <identifiersep> manager ( hash dest ) { \n \t2 if ( <identifier> <identifiersep> manager != null ) \n \t3 return <identifier> <identifiersep> manager . get <identifiersep> client <identifiersep> session <identifiersep> key <identifiersep> manager ( dest ) ; \n \t2 else { \n <ect>
\t3 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> + san <identifiersep> volume <identifiersep> id + <string_literal> , e ) ; \n \t4 throw e ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 final string msg = <string_literal> + router <identifiersep> ip + <string_literal> + result . second ( ) ; \n \t5 s <identifiersep> logger . error ( msg ) ; \n \t5 return new answer ( cmd , false , msg ) ; } \n <ect>
\t6 final bind <identifiersep> request bind <identifiersep> request = new bind <identifiersep> request ( ) ; \n \t6 bind <identifiersep> request . set <identifiersep> dn ( l . get <identifiersep> bind <identifiersep> dn ( ) ) ; \n \t6 bind <identifiersep> request . set <identifiersep> credential ( new credential ( l . get <identifiersep> bind <identifiersep> credential ( ) ) ) ; \n \t6 cp . set <identifiersep> passivator ( new bind <identifiersep> passivator ( bind <identifiersep> request ) ) ; \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> + <identifier> <identifiersep> account . get ( ) + <string_literal> + host ) ; \n \t4 boolean is <identifiersep> authenticated = conn . authenticate <identifiersep> with <identifiersep> password ( <string_literal> , \n \t6 password ) ; \n \t4 if ( is <identifiersep> authenticated == false ) { \n <ect>
\t3 final string session <identifiersep> id = session . get <identifiersep> id ( ) ; \n \t3 if ( session <identifiersep> id != null ) { \n \t4 authenticated <identifiersep> sessions . add ( session <identifiersep> id ) ; \n \t3 } else { \n <ect>
\t1 public void sync <identifiersep> dirs ( @ not <identifiersep> null file from , @ not <identifiersep> null file to , @ not <identifiersep> null file snapshots <identifiersep> storage <identifiersep> file ) { \n \t2 try { \n \t3 sync <identifiersep> dirs <identifiersep> impl ( from , to , snapshots <identifiersep> storage <identifiersep> file ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 http <identifiersep> server server = server <identifiersep> map . remove ( key ) ; \n \t3 if ( server != null ) { \n \t4 try { \n <ect>
\t3 if ( ch . is <identifiersep> active ( ) ) { \n \t3 log . channel <identifiersep> still <identifiersep> connected ( ch , ch . remote <identifiersep> address ( ) ) ; } \n \t2 } ) ; } \n <ect>
\t3 cms <identifiersep> <identifier> <identifiersep> dialog <identifiersep> extension extension = new cms <identifiersep> <identifier> <identifiersep> dialog <identifiersep> extension ( a <identifiersep> cms <identifiersep> ui . get ( ) , null ) ; \n \t3 try { \n \t4 extension . open <identifiersep> publish <identifiersep> dialog ( a <identifiersep> cms <identifiersep> ui . get <identifiersep> cms <identifiersep> object ( ) . read <identifiersep> project ( project <identifiersep> id ) ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
public void close ( ) { \n \t1 try { \n \t1 ctx . close ( ) ; \n \t1 } catch ( naming <identifiersep> exception e ) { \n <ect>
\t2 event <identifiersep> loop <identifiersep> group = new nio <identifiersep> event <identifiersep> loop <identifiersep> group ( 0 , new named <identifiersep> thread <identifiersep> factory ( <string_literal> ) ) ; } \n \t1 @ override \n \t1 public void stop ( ) \n \t1 { \n <ect>
\t2 <identifier> <identifiersep> tag <identifiersep> compound data = <identifier> . get <identifiersep> compound <identifiersep> tag ( <string_literal> ) ; \n \t2 resource <identifiersep> location identifier = new resource <identifiersep> location ( id ) ; \n \t2 <identifier> <identifiersep> definition def = pipe <identifiersep> api . <identifier> <identifiersep> registry . get <identifiersep> definition ( identifier ) ; \n \t2 if ( def == null ) { \n <ect>
\t3 throw new io <identifiersep> exception ( <string_literal> ) ; \n \t2 if ( timeout != null ) \n \t3 timeout . cancel ( ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t1 } catch ( streaming <identifiersep> exception e ) { \n \t1 log . warn ( <string_literal> + txn <identifiersep> batch , e ) ; \n \t1 return ; \n \t1 } catch ( timeout <identifiersep> exception e ) { \n <ect>
\t3 <identifier> = site . get <identifiersep> site <identifiersep> root ( ) ; } \n \t2 <comment> \n \t2 cms <identifiersep> user user = m <identifiersep> security <identifiersep> manager . read <identifiersep> user ( null , session <identifiersep> info . get <identifiersep> user <identifiersep> id ( ) ) ; \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + iso <identifiersep> id + <string_literal> + event . get <identifiersep> account <identifiersep> id ( ) ) ; } \n \t3 list < usage <identifiersep> storage <identifiersep> vo > storage <identifiersep> v <identifiersep> os = <identifier> <identifiersep> usage <identifiersep> storage <identifiersep> dao . list <identifiersep> by <identifiersep> id <identifiersep> and <identifiersep> zone ( event . get <identifiersep> account <identifiersep> id ( ) , iso <identifiersep> id , storage <identifiersep> types . iso , zone <identifiersep> id ) ; \n \t3 if ( storage <identifiersep> v <identifiersep> os . size ( ) > 0 ) { \n <ect>
\t3 json <identifiersep> object json <identifiersep> object = ( json <identifiersep> object ) json <identifiersep> parser . parse ( reader ) ; \n \t3 string status = json <identifiersep> object . get ( <string_literal> ) . get <identifiersep> as <identifiersep> string ( ) ; \n \t3 if ( ! status . equals ( <string_literal> ) ) { \n \t4 return false ; } \n <ect>
\t4 try { \n \t5 job <identifiersep> client . close ( ) ; } \n \t4 catch ( exception e ) { \n \t5 if ( exception ) { \n <ect>
\t2 consumers . remove ( consumer . get <identifiersep> path ( ) ) ; } \n \t1 public default <identifiersep> websocket do <identifiersep> web <identifiersep> socket <identifiersep> connect ( servlet <identifiersep> upgrade <identifiersep> request request , string protocol ) { \n \t2 string protocol <identifiersep> key = protocol ; \n \t2 if ( protocol == null || ! socket <identifiersep> factory . contains <identifiersep> key ( protocol ) ) { \n <ect>
\t3 if ( ! policy <identifiersep> model . verify ( controller . get <identifiersep> manager ( ) . get <identifiersep> model <identifiersep> controller ( ) ) ) { \n \t4 policy <identifiersep> model . update ( controller . get <identifiersep> manager ( ) . get <identifiersep> model <identifiersep> controller ( ) ) ; } \n \t3 controller . get <identifiersep> manager ( ) . get <identifiersep> database ( ) . get <identifiersep> network <identifiersep> <identifier> ( ) . add ( policy <identifiersep> model ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 <comment> \n \t1 return batch <identifiersep> load <identifiersep> attributes ( server , object <identifiersep> name , matching <identifiersep> names ) ; \n \t1 } catch ( exception e ) { \n \t1 <comment> \n <ect>
\t5 if ( ( ! has <identifiersep> readers ( ) || readers ) ) { \n \t6 <comment> \n \t6 if ( ! ( marked = mark <identifiersep> <identifier> ( ver , true ) ) ) { \n <ect>
\t4 log . warn ( <string_literal> , ce ) ; } \n \t3 catch ( java . io . io <identifiersep> exception ioe ) { \n \t4 err <identifiersep> msg = ioe . get <identifiersep> message ( ) ; \n \t4 err <identifiersep> code = <string_literal> ; \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t7 @ override \n \t7 public void process ( exchange exchange ) throws exception { \n \t8 string body = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( string . class ) ; \n \t8 if ( <string_literal> . equals ( body ) ) { \n <ect>
\t2 if ( model <identifiersep> <identifier> . get ( <identifier> <identifiersep> model ) == 1 ) { \n \t3 logger . info ( <string_literal> ) ; \n \t3 return ; } \n \t2 <comment> \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t2 return <string_literal> + minion . <identifier> <identifiersep> command + ( minion . copy <identifiersep> bandwidth <identifiersep> limit > 0 ? <string_literal> + minion . copy <identifiersep> bandwidth <identifiersep> limit : <string_literal> ) + <string_literal> + minion . remote <identifiersep> connect <identifiersep> method + <string_literal> + source + <string_literal> + user <identifiersep> at + <string_literal> + target ; } \n \t1 private string create <identifiersep> backup <identifiersep> command ( boolean local , string user <identifiersep> at , string base <identifiersep> dir , string source , string name ) { \n \t2 string source <identifiersep> dir = base <identifiersep> dir + <string_literal> + source ; \n \t2 string target <identifiersep> dir = base <identifiersep> dir + <string_literal> + name ; \n <ect>
\t1 } catch ( exception e ) { \n \t2 throw new messaging <identifiersep> exception ( group . get <identifiersep> message <identifiersep> collection <identifiersep> event ( ) , e ) ; } } } \n @ override \n public void start ( ) throws mule <identifiersep> exception { \n <ect>
\t4 } else if ( <identifier> <identifiersep> state . get <identifiersep> data ( ) . get <identifiersep> type ( ) == database <identifiersep> entry . key <identifiersep> type <identifiersep> <identifier> && \n \t6 ( ( lease <identifiersep> set ) <identifier> <identifiersep> state . get <identifiersep> data ( ) ) . get <identifiersep> lease <identifiersep> count ( ) > <number_literal> && \n \t6 ! supports <identifiersep> big <identifiersep> lease <identifiersep> sets ( ( router <identifiersep> info ) ds ) ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 <comment> <ect>
\t4 } catch ( throwable e ) { \n \t5 reporter . warning ( <string_literal> , this , <identifier> , e ) ; } } \n \t2 } ) \n \t3 . on <identifiersep> failure ( failure - > { \n <ect>
\t1 <comment> \n \t1 public void send <identifiersep> command ( http <identifiersep> client client , connection conn ) { \n \t2 if ( test <identifiersep> case <identifiersep> engine . <identifier> <identifiersep> print <identifiersep> url == true ) \n \t2 { \n <ect>
\t2 init <identifiersep> default <identifiersep> schemas ( ) ; \n \t2 soap <identifiersep> ui . get <identifiersep> settings ( ) . add <identifiersep> settings <identifiersep> listener ( new settings <identifiersep> listener ( ) { \n \t3 public void setting <identifiersep> changed ( string name , string new <identifiersep> value , string old <identifiersep> value ) { \n \t4 if ( name . equals ( wsdl <identifiersep> settings . schema <identifiersep> directory ) ) { \n <ect>
\t5 properties extra = new properties ( ) ; \n \t5 for ( properties prop : properties ) { \n \t6 extra . put <identifiersep> all ( prop ) ; } \n \t5 if ( ! extra . is <identifiersep> empty ( ) ) { \n <ect>
\t3 for ( catalog <identifiersep> info catalog <identifiersep> info : datasource <identifiersep> info . catalog <identifiersep> map . values ( ) ) { \n \t3 try { \n \t4 return get <identifiersep> connection ( catalog <identifiersep> info , server , role <identifiersep> name , props ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 int <identifier> ; \n \t4 while ( input <identifiersep> stream . is <identifiersep> ready ( ) ) { \n \t5 <identifier> = input <identifiersep> stream . read ( buffer ) ; \n \t5 output <identifiersep> stream . write ( buffer , 0 , <identifier> ) ; } \n <ect>
\t6 log . debug ( <string_literal> + entry ) ; \n \t5 tx . clear <identifiersep> entry ( entry . key ( ) ) ; \n <ect>
\t1 @ override \n \t1 public void close <identifiersep> session ( ) { \n \t2 log . debug ( <string_literal> ) ; \n \t2 if ( ! <identifier> ) { \n <ect>
\t3 return null ; } \n \t2 if ( <identifier> <identifiersep> data == null ) { \n \t3 <comment> \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t4 <comment> \n \t4 props . put ( <string_literal> , get <identifiersep> available <identifiersep> script <identifiersep> names ( ) ) ; \n \t4 registration = context . register <identifiersep> service ( language <identifiersep> resolver . class , resolver , props ) ; } \n \t2 } catch ( invalid <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t1 if ( config <identifiersep> dir == null ) { \n \t1 throw new exception ( <string_literal> ) } \n \t1 if ( cli <identifiersep> options . get <identifiersep> job <identifiersep> manager <identifiersep> mode ( ) == null ) { \n \t1 throw new exception ( <string_literal> ) } \n <ect>
\t4 write <identifiersep> filter ( filter <identifiersep> name , argument <identifiersep> definition <identifiersep> field . get <identifiersep> argument <identifiersep> fields ( new parsing <identifiersep> engine ( null ) , filter ) , <identifier> ) ; } \n \t3 write <identifiersep> dependencies ( <identifier> ) ; \n \t3 return 0 ; \n \t2 } catch ( io <identifiersep> exception exception ) { \n <ect>
\t1 } catch ( exception ex ) { \n \t2 log . warn ( <string_literal> + snapshot <identifiersep> id ) ; \n \t2 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> + snapshot <identifiersep> id , ex ) ; } \n \t1 } else { \n <ect>
\t4 string key = header <identifiersep> line . get <identifiersep> key ( ) ; \n \t4 if ( header <identifiersep> line instanceof <identifier> <identifiersep> header <identifiersep> line ) \n \t5 key += <string_literal> + ( ( <identifier> <identifiersep> header <identifiersep> line ) header <identifiersep> line ) . get <identifiersep> id ( ) ; \n \t4 if ( root . has <identifiersep> element ( key ) ) \n <ect>
\t4 utils . get <identifiersep> link <identifiersep> html ( url , <string_literal> ) ) ) ; } \n \t1 @ override \n \t1 public void add <identifiersep> user ( final <identifier> <identifiersep> user user ) { \n \t2 if ( pool == null ) { \n <ect>
\t4 <comment> \n \t4 save <identifiersep> cookies ( exchange , client , cxf <identifiersep> rs <identifiersep> endpoint . get <identifiersep> cookie <identifiersep> handler ( ) ) ; \n \t4 fail ( throwable ) ; \n \t3 } catch ( exception error ) { \n <ect>
\t4 futures . add ( future ) ; \n \t4 futures . add <identifiersep> callback ( future , new future <identifiersep> callback < transaction > ( ) { \n \t5 @ override \n \t5 public void on <identifiersep> success ( transaction transaction ) { \n <ect>
\t3 <identifier> <identifiersep> config = o ; \n \t3 if ( k instanceof n <identifiersep> <identifier> <identifiersep> fingerprint <identifiersep> <identifier> ) { \n \t4 try { \n \t5 int size = <identifier> <identifiersep> config . get <identifiersep> json <identifiersep> object ( <string_literal> ) . get <identifiersep> int ( <string_literal> ) ; \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t5 sent = error <identifiersep> channel . send ( new error <identifiersep> message ( t ) , <number_literal> ) ; } \n \t4 catch ( throwable error <identifiersep> delivery <identifiersep> error ) { <comment> \n \t5 <comment> \n <ect>
\t1 <comment> \n public string export <identifiersep> volume ( string volume <identifiersep> id , string node <identifiersep> iqn ) throws eucalyptus <identifiersep> cloud <identifiersep> exception { \n \t1 san <identifiersep> volume <identifiersep> info volume <identifiersep> info = lookup ( volume <identifiersep> id ) ; \n \t1 string san <identifiersep> volume <identifiersep> id = volume <identifiersep> info . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) ; \n <ect>
\t1 @ post \n \t1 @ consumes ( <string_literal> ) \n \t1 @ path ( <string_literal> ) \n \t1 public string post <identifiersep> multipart <identifiersep> form ( @ multipart <identifiersep> form context <identifiersep> providers <identifiersep> customer <identifiersep> form form ) throws io <identifiersep> exception { \n <ect>
\t4 result . add ( convert <identifiersep> history <identifiersep> record <identifiersep> to <identifiersep> call <identifiersep> record ( <identifier> ) ) ; } \n \t3 remove <identifiersep> history <identifiersep> search <identifiersep> progress <identifiersep> listeners ( history <identifiersep> reader ) ; } \n \t2 catch ( io <identifiersep> exception ex ) \n \t2 { \n <ect>
\t1 gc <identifiersep> time <identifiersep> <identifier> <identifiersep> count = 0 ; \n \t1 } else { \n \t1 gc <identifiersep> time <identifiersep> <identifier> <identifiersep> count ++ ; \n \t1 if ( gc <identifiersep> time <identifiersep> <identifier> <identifiersep> count > <number_literal> && mem < rt . max <identifiersep> memory ( ) * 0 . <number_literal> ) { \n <ect>
\t2 db . commit ( ) ; \n \t1 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n \t2 log . warn ( <string_literal> ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t5 web <identifiersep> view . get <identifiersep> engine ( ) . execute <identifiersep> script ( script ) ; \n \t5 for ( browser <identifiersep> listener listener : listeners ) { \n \t6 listener . java <identifiersep> script <identifiersep> executed ( script , null , null ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t3 m <identifiersep> <identifier> = collections . empty <identifiersep> list ( ) ; \n \t3 init ( false ) ; \n \t3 m <identifiersep> full <identifiersep> loaded = true ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t2 if ( cmd != <number_literal> ) { \n \t3 logger . warn ( <string_literal> , param , value ) ; \n \t3 return false ; \n \t2 } else { \n <ect>
\t2 <identifier> <identifiersep> app . read ( edm , <identifier> + count <identifiersep> option , null , null , count <identifiersep> handler ) ; \n \t2 log . info ( <string_literal> , count <identifiersep> handler . await ( ) ) ; \n \t2 count <identifiersep> handler . reset ( ) ; \n \t2 <identifier> <identifiersep> app . read ( edm , test <identifiersep> manufacturer + count <identifiersep> option , null , null , count <identifiersep> handler ) ; \n <ect>
\t1 function <identifiersep> resource [ ] resources = function . get <identifiersep> resources ( ) ; \n \t1 try { \n \t2 function <identifiersep> task . add <identifiersep> function <identifiersep> resources ( resources ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 auth . remove ( ) ; \n \t4 <identifier> . save ( ) ; \n \t3 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t3 query . append ( s ) ; \n \t3 query . append ( ' \\ '' ) ; } \n \t2 query . append ( <string_literal> ) ; } } \n \t1 query . append ( <string_literal> ) . append ( ext <identifiersep> lock <identifiersep> id ) ; \n <ect>
\t2 return thread . current <identifiersep> thread ( ) . get <identifiersep> context <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ; } \n \t1 } ; \n \t1 <comment> \n \t1 final wro <identifiersep> model model = factory . create ( ) ; \n <ect>
\t3 try { \n \t4 map = storm <identifiersep> config . read <identifiersep> nimbus <identifiersep> topology <identifiersep> conf ( topology <identifiersep> id , data . get <identifiersep> blob <identifiersep> store ( ) ) ; \n \t4 delay <identifiersep> secs = j <identifiersep> storm <identifiersep> utils . parse <identifiersep> int ( map . get ( config . topology <identifiersep> message <identifiersep> timeout <identifiersep> secs ) , default <identifiersep> delay <identifiersep> seconds ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 s <identifiersep> logger . info ( <string_literal> ) ; \n \t6 return false ; } \n \t5 error ++ ; } \n \t4 else if ( api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) != null ) { \n <ect>
\t2 reader . set <identifiersep> content <identifiersep> handler ( handler ) ; \n \t2 try { \n \t3 reader . parse ( new input <identifiersep> source ( new string <identifiersep> reader ( xml ) ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 system . out . println ( <string_literal> + affinity . get <identifiersep> cpu ( ) ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> affinity ( ) throws interrupted <identifiersep> exception { \n \t2 <comment> \n <ect>
\t6 try { \n \t7 is <identifiersep> <identifier> <identifiersep> hook <identifiersep> called = true ; \n \t7 if ( connector <identifiersep> server . is <identifiersep> active ( ) ) { \n \t8 connector <identifiersep> server . stop ( ) ; \n <ect>
\t2 if ( prop . starts <identifiersep> with ( property . table <identifiersep> constraint <identifiersep> prefix . get <identifiersep> key ( ) ) ) \n \t2 reload <identifiersep> constraints ( ) ; \n \t2 else if ( prop . equals ( property . table <identifiersep> default <identifiersep> <identifier> <identifiersep> visibility . get <identifiersep> key ( ) ) ) { \n \t2 try { \n <ect>
\t3 tcp <identifiersep> connection <identifiersep> support wrapped <identifiersep> connection = wrap <identifiersep> connection ( connection ) ; \n \t3 initialize <identifiersep> connection ( wrapped <identifiersep> connection , socket <identifiersep> channel . socket ( ) ) ; \n \t3 return connection ; } \n \t2 catch ( exception e ) { \n <ect>
\t1 driver . destroy ( ) ; } \n \t1 driver = null ; \n \t1 session <identifiersep> state ss = session <identifiersep> state . get ( ) ; \n \t1 if ( ss == null ) { \n <ect>
\t1 @ rule \n \t1 public expected <identifiersep> exception thrown = expected <identifiersep> exception . none ( ) ; \n \t1 @ before <identifiersep> class \n \t1 public static void set <identifiersep> up ( ) throws exception { \n <ect>
\t3 new upload <identifiersep> part <identifiersep> request ( ) . with <identifiersep> bucket <identifiersep> name ( part . get <identifiersep> bucket <identifiersep> name ( ) ) . with <identifiersep> key ( part . get <identifiersep> key <identifiersep> name ( ) ) . with <identifiersep> upload <identifiersep> id ( part . get <identifiersep> upload <identifiersep> id ( ) ) \n \t4 . with <identifiersep> part <identifiersep> number ( part . get <identifiersep> part <identifiersep> number ( ) ) . with <identifiersep> part <identifiersep> size ( part . get <identifiersep> size ( ) ) . with <identifiersep> file ( new file ( part . get <identifiersep> file <identifiersep> name ( ) ) ) , refresh <identifiersep> token <identifiersep> retries ) ; \n \t1 return upload <identifiersep> part <identifiersep> result . get <identifiersep> part <identifiersep> e <identifiersep> tag ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 status = storage <identifiersep> service <identifiersep> worker <identifiersep> status . working ; \n \t2 logger . info ( <string_literal> , action . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t2 new thread ( ( ) - > { \n \t3 action . perform ( this ) ; \n <ect>
\t2 boolean check <identifiersep> sum <identifiersep> comparison = ( byte <identifiersep> utils . compare ( expected <identifiersep> check <identifiersep> sum , computed <identifiersep> check <identifiersep> sum ) == 0 ) ; \n \t2 logger . info ( <string_literal> \n \t5 + new string ( hex . encode <identifiersep> hex ( computed <identifiersep> check <identifiersep> sum ) ) ) ; \n \t2 logger . info ( <string_literal> + new string ( hex . encode <identifiersep> hex ( expected <identifiersep> check <identifiersep> sum ) ) ) ; \n <ect>
\t1 if ( <identifier> == null && id == extension <identifiersep> handler . id <identifiersep> metadata ) { \n \t2 synchronized ( <identifier> <identifiersep> state ) { \n \t3 if ( <identifier> <identifiersep> state . is <identifiersep> complete ( ) ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 active <identifiersep> puts . release ( ) ; } } \n \t2 } ) ; \n \t1 } catch ( throwable t ) { \n \t2 active <identifiersep> puts . release ( ) ; \n <ect>
<number_literal> block <identifiersep> item <identifiersep> component block <identifiersep> item <identifiersep> component , \n <number_literal> box <identifiersep> <identifier> <identifiersep> component box <identifiersep> <identifier> <identifiersep> component ) { \n \t2 block <identifiersep> family block <identifiersep> family = block <identifiersep> item <identifiersep> component . block <identifiersep> family ; \n \t2 if ( block <identifiersep> family == null ) { \n <ect>
\t2 if ( user != null ) { \n \t3 user = session . users ( ) . get <identifiersep> user <identifiersep> by <identifiersep> id ( user . get <identifiersep> id ( ) , realm ) ; <comment> \n \t3 logger . debug ( <string_literal> + username + <string_literal> ) ; \n \t3 if ( ! model . get <identifiersep> id ( ) . equals ( user . get <identifiersep> federation <identifiersep> link ( ) ) ) { \n <ect>
\t2 final string size = get <identifiersep> queue <identifiersep> size ( ) ; \n \t2 try { \n \t3 queue <identifiersep> size = integer . parse <identifiersep> int ( size ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t1 protected void execute ( ) { \n \t2 long now = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 <comment> \n \t2 if ( cache <identifiersep> period > 0 && last <identifiersep> cache <identifiersep> purge + ( cache <identifiersep> period * <number_literal> ) < now ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 client1 . close ( ) ; \n \t2 client2 . close ( ) ; \n \t2 <comment> \n <ect>
\t2 try { \n \t3 string action = request . get <identifiersep> parameter ( <string_literal> ) ; \n \t3 string client <identifiersep> id = request . get <identifiersep> parameter ( <string_literal> ) ; \n \t3 if ( action != null && client <identifiersep> id != null && action . equals ( <string_literal> ) ) { \n <ect>
\t2 string content = exchange . get <identifiersep> in ( ) . get <identifiersep> header ( <identifier> <identifiersep> constants . <identifier> <identifiersep> template , string . class ) ; \n \t2 if ( content != null ) { \n \t3 <comment> \n <ect>
\t10 if ( find <identifiersep> first <identifiersep> matching <identifiersep> binding <identifiersep> provider ( job <identifiersep> key . get <identifiersep> name ( ) . split ( <string_literal> ) [ 0 ] ) == null ) { \n <number_literal> logger . debug ( <string_literal> , job <identifiersep> key , item <identifiersep> name ) ; \n <number_literal> sched . delete <identifiersep> job ( job <identifiersep> key ) ; } } } } \n \t6 } catch ( scheduler <identifiersep> exception e1 ) { \n <ect>
\t1 public void finish <identifiersep> inbound <identifiersep> <identifier> ( session <identifiersep> key key , long clock <identifiersep> <identifier> , byte prev <identifiersep> write <identifiersep> end [ ] , byte prev <identifiersep> read <identifiersep> end [ ] ) { \n \t2 <identifier> <identifiersep> connection to <identifiersep> close = locked <identifiersep> finish <identifiersep> inbound <identifiersep> <identifier> ( key , clock <identifiersep> <identifier> , prev <identifiersep> write <identifiersep> end , prev <identifiersep> read <identifiersep> end ) ; \n \t2 if ( to <identifiersep> close != null ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 for ( routing <identifiersep> node routing <identifiersep> node : routing <identifiersep> nodes ) { \n \t3 for ( shard <identifiersep> routing shard <identifiersep> routing : routing <identifiersep> node ) { \n \t4 assert <identifiersep> that ( shard <identifiersep> routing . state ( ) , <identifier> . equal <identifiersep> to ( shard <identifiersep> routing <identifiersep> state . initializing ) ) ; } } \n \t2 strategy = create <identifiersep> allocation <identifiersep> service ( settings . build ( ) , new noop <identifiersep> gateway <identifiersep> allocator ( ) ) ; \n <ect>
\t4 <identifier> = parts [ 0 ] ; \n \t4 selection <identifiersep> match = parts [ 1 ] ; } \n \t3 o <identifiersep> auth <identifiersep> credentials oauth <identifiersep> credentials = get <identifiersep> o <identifiersep> auth <identifiersep> credentials ( <identifier> ) ; \n \t3 if ( oauth <identifiersep> credentials == null ) { \n <ect>
\t4 request , \n \t4 response , \n \t4 formatter , \n \t4 content ) ; \n <ect>
\t3 } finally { \n \t4 admin <identifiersep> service <identifiersep> request <identifiersep> handler . store <identifiersep> lock . unlock ( ) ; } \n \t2 } catch ( voldemort <identifiersep> exception e ) { \n \t3 response . set <identifiersep> error ( proto <identifiersep> utils . encode <identifiersep> error ( error <identifiersep> code <identifiersep> mapper , e ) ) ; \n <ect>
\t4 . put ( cluster <identifiersep> rebalance <identifiersep> allocation <identifiersep> <identifier> . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> allow <identifiersep> rebalance <identifiersep> setting . get <identifiersep> key ( ) , <string_literal> ) \n \t4 . put ( <string_literal> , - 1 ) \n \t4 . build ( ) ) ; \n \t2 final int number <identifiersep> of <identifiersep> indices = <number_literal> ; \n <ect>
\t1 <identifier> = zoo <identifiersep> reader <identifiersep> writer . get <identifiersep> instance ( ) . get <identifiersep> data ( path , null ) ; \n \t1 } catch ( keeper <identifiersep> exception e ) { \n \t1 if ( e . code ( ) == code . <identifier> ) { \n \t2 return false ; } \n <ect>
\t4 if ( ! <identifier> <identifiersep> empty ) \n \t5 log . warn ( <string_literal> ) ; } \n \t3 for ( catalog catalog : catalogs ) { \n \t4 if ( <string_literal> . equals ( catalog . get <identifiersep> output <identifiersep> catalog ( ) ) ) \n <ect>
\t7 consumer . cancel <identifiersep> consumer ( event <identifiersep> message ) ; \n \t6 } ) ; } } } \n \t3 catch ( interrupted <identifiersep> exception e ) { \n \t4 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n <ect>
\t2 public void print <identifiersep> usage ( string s ) { \n \t3 try { \n \t4 chat . send <identifiersep> message ( <string_literal> + s ) ; \n \t3 } catch ( xmpp <identifiersep> exception e ) { \n <ect>
\t1 @ before <identifiersep> class \n \t1 public static void set <identifiersep> up ( ) \n \t1 { \n \t2 long seed = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t4 event <identifiersep> listener <identifiersep> provider listener = session . get <identifiersep> provider ( event <identifiersep> listener <identifiersep> provider . class , id ) ; \n \t4 if ( listener != null ) { \n \t5 listeners . add ( listener ) ; \n \t4 } else { \n <ect>
\t1 if ( ! is <identifiersep> open ) { \n \t2 is <identifiersep> open = true ; \n \t2 start <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 } else { \n <ect>
<comment> \n \t1 @ pre <identifiersep> destroy \n \t1 public void shutdown ( ) { \n \t2 try { \n <ect>
\t1 @ override \n \t1 public void member <identifiersep> added ( member member ) { \n \t2 try { \n \t3 has <identifiersep> members = channel . has <identifiersep> members ( ) ; \n <ect>
\t6 log . info ( <string_literal> + consumer ) ; \n \t6 consumer . set <identifiersep> message <identifiersep> listener ( listener ) ; \n \t6 consumers . put ( consumer , listener ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t2 get <identifiersep> date <identifiersep> seq <identifiersep> output ( <string_literal> ) ) ; } \n @ test \n public void test <identifiersep> <identifier> ( ) { \n \t1 if ( ! supports <identifiersep> time ( ) ) { \n <ect>
\t3 return ; } \n \t2 try { \n \t3 context . stop ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 string query = <identifier> <identifiersep> helper . get <identifiersep> add <identifiersep> unique <identifiersep> constraint <identifiersep> statement ( table <identifiersep> name , constraint <identifiersep> name , column <identifiersep> names ) ; \n \t1 try { \n \t2 execute <identifiersep> query ( query ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 this . client . subscribe ( topics , granted <identifiersep> <identifier> ) ; \n \t3 for ( int i = 0 ; i < requested <identifiersep> <identifier> . length ; i ++ ) { \n \t4 if ( granted <identifiersep> <identifier> [ i ] != requested <identifiersep> <identifier> [ i ] ) { \n <ect>
\t3 try { \n \t4 fire <identifiersep> interceptor <identifiersep> event ( new <identifier> <identifiersep> event ( <identifier> <identifiersep> event . evt <identifiersep> mbr <identifiersep> add , this , <string_literal> + member . get <identifiersep> name ( ) + <string_literal> ) ) ; \n \t4 if ( started && <identifier> ) start <identifiersep> election ( false ) ; \n \t3 } catch ( channel <identifiersep> exception x ) { \n <ect>
\t3 double <identifier> = ( r != null ? r . get <identifiersep> average <identifiersep> value ( ) : 0 ) ; \n \t3 <identifier> <identifiersep> log . error ( <string_literal> + data <identifiersep> helper . format <identifiersep> size ( ( long ) <identifier> ) + <string_literal> ) ; \n \t3 long max = runtime . get <identifiersep> runtime ( ) . max <identifiersep> memory ( ) ; \n \t3 long used = runtime . get <identifiersep> runtime ( ) . total <identifiersep> memory ( ) - runtime . get <identifiersep> runtime ( ) . free <identifiersep> memory ( ) ; \n <ect>
\t3 logger . error ( this , <string_literal> + version ) ; \n \t3 return ; } \n \t2 if ( ! ( <identifier> <identifiersep> type == <number_literal> ) ) { \n \t3 if ( <identifier> <identifiersep> type > <number_literal> ) \n <ect>
\t7 <string_literal> + \n \t7 <string_literal> + stomp . null ; \n \t2 stomp <identifiersep> connection . send <identifiersep> frame ( connect <identifiersep> frame ) ; \n \t2 string f = stomp <identifiersep> connection . receive <identifiersep> frame ( ) ; \n <ect>
\t4 kubernetes <identifiersep> constants . kubernetes <identifiersep> secret <identifiersep> name , string . class ) ; \n \t2 string namespace <identifiersep> name = exchange . get <identifiersep> in ( ) . get <identifiersep> header ( \n \t4 kubernetes <identifiersep> constants . kubernetes <identifiersep> namespace <identifiersep> name , string . class ) ; \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( secret <identifiersep> name ) ) { \n <ect>
\t3 if ( actor <identifiersep> system != null ) { \n \t4 try { \n \t5 actor <identifiersep> system . shutdown ( ) ; \n \t4 } catch ( throwable tt ) { \n <ect>
\t3 list <identifiersep> response < list <identifiersep> <identifier> <identifiersep> interface <identifiersep> response > response = new list <identifiersep> response < list <identifiersep> <identifier> <identifiersep> interface <identifiersep> response > ( ) ; \n \t3 response . set <identifiersep> responses ( interface <identifiersep> responses ) ; \n \t3 return response ; \n \t2 } catch ( throwable e ) { \n <ect>
\t4 manager . release ( endpoint , state , valid <identifiersep> duration ) ; \n \t3 } else { \n \t4 try { \n \t5 endpoint . close ( ) ; \n <ect>
\t4 exit <identifiersep> value = p . wait <identifiersep> for ( ) ; \n \t4 t . interrupt ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception ex ) { \n \t4 p . destroy ( ) ; \n <ect>
\t3 try { \n \t4 source <identifiersep> data <identifiersep> line line = ( source <identifiersep> data <identifiersep> line ) <identifier> . get <identifiersep> line ( line <identifiersep> info ) ; \n \t4 free <identifiersep> lines . add ( line ) ; \n \t3 } catch ( line <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t1 { \n \t2 try { \n \t3 return this . attachment . get <identifiersep> content <identifiersep> input <identifiersep> stream ( get <identifiersep> x <identifiersep> wiki <identifiersep> context ( ) ) ; \n \t2 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t5 if ( index <identifiersep> str != null ) { \n \t6 index = integer . parse <identifiersep> int ( index <identifiersep> str ) ; \n \t6 parsed <identifiersep> index = true ; } \n \t4 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t2 if ( added <identifiersep> nodes == null ) \n \t3 added <identifiersep> nodes = new hash <identifiersep> set < node > ( ) ; \n \t2 set < semantic <identifiersep> type <identifiersep> mapping > mappings = new hash <identifiersep> set < semantic <identifiersep> type <identifiersep> mapping > ( ) ; \n \t2 if ( semantic <identifiersep> type == null ) { \n <ect>
\t2 case e : exception = > main . show <identifiersep> error <identifiersep> dialog ( <string_literal> , e ) } } \n private def handle <identifiersep> <identifier> <identifiersep> event ( changed : <identifier> <identifiersep> event ) = changed match { \n \t1 case <identifier> <identifiersep> event . <identifier> <identifiersep> end = > \n \t1 <identifier> <identifiersep> notify ( <string_literal> ) \n <ect>
\t4 try { \n \t5 log . info ( <string_literal> + msg + <string_literal> + node <identifiersep> id + \n \t6 <string_literal> + test <identifiersep> topic . topic <identifiersep> 1 + ' ] ' ) ; \n \t5 if ( ! node <identifiersep> id . equals ( grid1 . local <identifiersep> node ( ) . id ( ) ) ) { \n <ect>
\t2 if ( lookup . get <identifiersep> deletion <identifiersep> time ( ) == null ) { \n \t2 lookup . set <identifiersep> deletion <identifiersep> time ( new date ( ) ) ; } \n \t2 tr . commit ( ) ; \n \t1 } catch ( transaction <identifiersep> exception | no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
private <identifier> <identifiersep> simple <identifiersep> authentication <identifiersep> provider simple <identifiersep> authentication <identifiersep> provider ; \n @ override \n public authentication authenticate ( authentication in <identifiersep> authentication ) throws authentication <identifiersep> exception { \n \t1 logger . info ( <string_literal> + in <identifiersep> authentication . get <identifiersep> name ( ) + <string_literal> + in <identifiersep> authentication . to <identifiersep> string ( ) ) ; \n <ect>
\t4 string conf <identifiersep> dir <identifiersep> path = path <identifiersep> utils . get <identifiersep> canonical <identifiersep> path ( conf <identifiersep> dir ) ; \n \t4 if ( conf <identifiersep> dir <identifiersep> path != null ) { \n \t5 access <identifiersep> dirs . add ( conf <identifiersep> dir <identifiersep> path ) ; } } \n \t3 this . conf = conf ; \n <ect>
\t2 if ( ! creds <identifiersep> ok ) { \n \t3 logger . warn ( <string_literal> \n \t4 + <string_literal> , authn . get <identifiersep> credentials ( ) . size ( ) , sum , authn . get <identifiersep> successes ( ) . key <identifiersep> set ( ) ) ; \n \t3 return false ; } \n <ect>
\t3 fos . close ( ) ; \n \t3 fos = null ; \n \t3 file <identifiersep> util . rename <identifiersep> to ( backup , orig ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 for ( computer c : get <identifiersep> <identifier> ( ) ) { \n \t3 try { \n \t4 future . put ( c . get <identifiersep> name ( ) , remoting <identifiersep> diagnostics . get <identifiersep> thread <identifiersep> dump <identifiersep> async ( c . get <identifiersep> channel ( ) ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 int retry = <number_literal> ; \n \t2 while ( -- retry > 0 ) { \n \t3 socket <identifiersep> channel sch = null ; \n \t3 try { \n <ect>
\t3 policy <identifiersep> engine . evaluate <identifiersep> authorization ( context , authorization <identifiersep> match . all , resource <identifiersep> account <identifiersep> number , resource <identifiersep> name , <identifier> ) ; \n \t3 push <identifiersep> to <identifiersep> context ( <identifier> ) ; \n \t3 return true ; \n \t2 } catch ( auth <identifiersep> exception e ) { \n <ect>
\t4 catch ( exception ex ) \n \t4 { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t3 ns <identifiersep> array arr = adaptor <identifiersep> channel . primary <identifiersep> keys <identifiersep> for <identifiersep> new <identifiersep> rows <identifiersep> with <identifiersep> entity ( 1 , entity ) ; \n \t3 if ( arr != null ) { \n \t4 primary <identifiersep> key = ( ns <identifiersep> dictionary ) arr . last <identifiersep> object ( ) ; \n \t3 } else { \n <ect>
\t2 answer answer = null ; \n \t2 try { \n \t3 answer = <identifier> <identifiersep> agent <identifiersep> mgr . send ( host <identifiersep> id , cmd ) ; \n \t2 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public void on <identifiersep> event ( object event , long sequence , boolean end <identifiersep> of <identifiersep> batch ) throws exception { \n \t2 long msg <identifiersep> id = long . parse <identifiersep> long ( ( ( jstorm <identifiersep> event ) event ) . get <identifiersep> msg <identifiersep> id ( ) ) ; \n \t2 <comment> \n <ect>
\t2 if ( bridge != null ) { \n \t3 try { \n \t4 bridge . send ( msg ) ; } \n \t3 catch ( throwable t ) { \n <ect>
\t7 log . info ( <string_literal> , ex ) ; } \n \t6 try { \n \t7 yarn <identifiersep> cluster <identifiersep> descriptor . terminate <identifiersep> cluster ( yarn <identifiersep> application <identifiersep> id ) ; \n \t6 } catch ( flink <identifiersep> exception fe ) { \n <ect>
\t1 log . debug ( <string_literal> , get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; \n \t1 return true ; \n \t1 } catch ( final exception e ) { \n \t1 log . debug ( <string_literal> , e ) ; \n <ect>
\t1 } catch ( exception e1 ) { \n \t2 try { \n \t2 msg = ( base <identifiersep> message ) this . context . get <identifiersep> binding ( ) . from <identifiersep> <identifier> ( http <identifiersep> message . get <identifiersep> <identifier> <identifiersep> message ( ) , this . context . get <identifiersep> namespace ( ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 number <identifiersep> of <identifiersep> bytes = stats <identifiersep> utils . safe <identifiersep> add ( number <identifiersep> of <identifiersep> bytes , source . get <identifiersep> statistics ( ) . get <identifiersep> data <identifiersep> size ( ) ) ; \n \t5 log . debug ( <string_literal> + source + <string_literal> + source . get <identifiersep> statistics ( ) ) ; } \n \t4 } else { \n <ect>
\t2 for ( listener l : listeners ) { \n \t2 try { \n \t3 l . rpc <identifiersep> closed ( this ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t1 log . warn ( <string_literal> , e ) ; \n \t1 return 1 ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 byte [ ] bytes = ! key <identifiersep> bytes . is <identifiersep> empty ( ) ? key <identifiersep> bytes . get ( i ) : null ; \n \t4 collection < grid <identifiersep> cache <identifiersep> <identifier> <identifiersep> candidate < k > > <identifier> = req . candidates <identifiersep> by <identifiersep> index ( i ) ; \n \t4 grid <identifiersep> cache <identifiersep> version dr <identifiersep> ver = req . dr <identifiersep> version <identifiersep> by <identifiersep> index ( i ) ; \n <ect>
\t3 count ++ ; } \n \t2 <comment> \n \t2 if ( count == 0 ) { \n <ect>
\t1 return new <identifiersep> <identifier> ; } \n public void write <identifiersep> model ( path output <identifiersep> path ) throws io <identifiersep> exception { \n \t1 model <identifiersep> <identifier> . persist ( output <identifiersep> path ) ; } \n private static void log <identifiersep> time ( string label , long nanos ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 return convert ( fatal <identifiersep> error <identifiersep> response , scope ) ; } \n \t2 request <identifiersep> <identifier> . make <identifiersep> request <identifiersep> <identifier> ( request ) ; \n \t2 request . add <identifiersep> header ( <string_literal> , via ) ; \n \t2 if ( ! <identifier> <identifiersep> request <identifiersep> policy . is <identifiersep> <identifier> <identifiersep> from <identifiersep> cache ( request ) ) { \n <ect>
\t3 try { \n \t4 int num = integer . parse <identifiersep> int ( max <identifiersep> num <identifiersep> lines ) ; \n \t4 set <identifiersep> max <identifiersep> num <identifiersep> lines ( num ) ; \n \t3 } catch ( throwable t ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t1 try { \n \t2 h <identifiersep> client <identifiersep> pool <identifier> = load <identifiersep> balancing <identifiersep> policy . create <identifiersep> connection ( client <identifiersep> factory , host , monitor ) ; \n \t2 host <identifiersep> pools . put ( host , <identifier> ) ; \n \t1 } catch ( <identifier> <identifiersep> transport <identifiersep> exception <identifier> ) { \n <ect>
\t2 if ( ! extensions . is <identifiersep> empty ( ) ) { \n \t3 logger . info ( <string_literal> ) ; \n \t3 for ( extension <identifiersep> package pkg : extensions ) { \n \t4 for ( expansion <identifiersep> set set : pkg . get <identifiersep> sets ( ) ) { \n <ect>
\t1 assert <identifiersep> ret <identifiersep> val ( <string_literal> , <identifier> . remove ( <identifier> ) ) ; \n \t1 assert <identifiersep> false ( <identifier> . contains <identifiersep> key ( <identifier> ) ) ; \n \t1 assert <identifiersep> false ( <identifier> . contains <identifiersep> key ( <identifier> ) ) ; \n \t1 <identifier> . rollback ( ) ; \n <ect>
\t2 if ( zip <identifiersep> file != null ) { \n \t3 try { \n \t4 zip <identifiersep> file . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 <identifier> . set <identifiersep> sub <identifiersep> id ( sub <identifiersep> id ) ; \n \t3 <identifier> . set <identifiersep> pin ( i ) ; \n \t3 <identifier> . init ( ) ; \n \t3 <identifier> . set <identifiersep> mbrick ( this ) ; \n <ect>
private static final log log = log <identifiersep> factory . get <identifiersep> log ( float <identifiersep> splitter . class ) ; \n private static final double min <identifiersep> increment = <number_literal> * double . min <identifiersep> value ; \n public list < input <identifiersep> split > split ( configuration conf , result <identifiersep> set results , \n \t1 string col <identifiersep> name ) throws sql <identifiersep> exception { \n <ect>
\t4 <string_literal> + global <identifiersep> property <identifiersep> name + <string_literal> , true ) ; \n \t3 if ( results . size ( ) == 1 && results . get ( 0 ) . size ( ) == 1 ) { \n \t4 property <identifiersep> value = results . get ( 0 ) . get ( 0 ) . to <identifiersep> string ( ) ; } } \n \t2 catch ( exception e ) { \n <ect>
\t2 if ( count <identifiersep> of <identifiersep> semantic <identifiersep> type == null ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return mappings ; } \n \t2 if ( domain <identifiersep> uri == null || domain <identifiersep> uri . is <identifiersep> empty ( ) ) { \n <ect>
\t4 try { \n \t5 input <identifiersep> stream . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n \t5 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
public void <identifier> { relationship . capitalized <identifiersep> name } ( <identifier> . actual <identifiersep> destination . class <identifiersep> name <identifiersep> with <identifiersep> default value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value , $ { entity . prefix <identifiersep> class <identifiersep> name <identifiersep> without <identifiersep> package } . $ { relationship . <identifier> <identifiersep> <identifier> <identifiersep> name } <identifier> <identifiersep> key ) ; } \n public void <identifier> { relationship . capitalized <identifiersep> name } relationship ( <identifier> . actual <identifiersep> destination . class <identifiersep> name <identifiersep> with <identifiersep> default value ) { \n <ect>
\t1 parsed <identifiersep> path = hdfs <identifiersep> resource <identifiersep> provider . parse <identifiersep> path ( self . resource . target ) \n \t1 parsed <identifiersep> not <identifiersep> managed <identifiersep> paths = [ hdfs <identifiersep> resource <identifiersep> provider . parse <identifiersep> path ( path ) for path in self . resource . immutable <identifiersep> paths ] \n \t1 self . manage <identifiersep> if <identifiersep> exists = not parsed <identifiersep> path in parsed <identifiersep> not <identifiersep> managed <identifiersep> paths \n \t1 if parsed <identifiersep> path in self . ignored <identifiersep> resources <identifiersep> list : \n <ect>
\t2 em . join <identifiersep> transaction ( ) ; \n \t2 em . persist ( bad <identifiersep> main <identifiersep> object ) ; \n \t2 boolean roll <identifiersep> back <identifiersep> <identifier> = false ; \n \t2 try { \n <ect>
\t3 sql <identifiersep> response sql <identifiersep> response = null ; \n \t3 string sql = sql <identifiersep> request . get <identifiersep> sql ( ) ; \n \t3 string project = sql <identifiersep> request . get <identifiersep> project ( ) ; \n \t3 boolean is <identifiersep> query <identifiersep> cache <identifiersep> enabled = is <identifiersep> query <identifiersep> cache <identifiersep> enabled ( kylin <identifiersep> config ) ; \n <ect>
\t3 native <identifiersep> library <identifiersep> loader . load ( shared <identifiersep> lib <identifiersep> name , cl ) ; \n \t2 } catch ( unsatisfied <identifiersep> link <identifiersep> error e1 ) { \n \t3 try { \n \t4 native <identifiersep> library <identifiersep> loader . load ( static <identifiersep> lib <identifiersep> name , cl ) ; \n <ect>
\t10 e ) ; } \n \t1 } else { \n \t2 item <identifiersep> id = poll <identifiersep> item . get <identifiersep> item <identifiersep> id ( ) . or <identifiersep> else <identifiersep> get ( ( ) - > poll <identifiersep> item . get <identifiersep> result ( ) . get <identifiersep> attributes ( ) . map ( object : : to <identifiersep> string ) . or <identifiersep> else ( <string_literal> ) ) ; \n <ect>
\t3 logger . debug ( <string_literal> , service . get <identifiersep> jwks ( ) ) ; \n \t3 final resource resource = this . resource <identifiersep> loader . get <identifiersep> resource ( service . get <identifiersep> jwks ( ) ) ; \n \t3 final json <identifiersep> web <identifiersep> key <identifiersep> set json <identifiersep> web <identifiersep> key <identifiersep> set = build <identifiersep> json <identifiersep> web <identifiersep> key <identifiersep> set ( resource ) ; \n \t3 if ( json <identifiersep> web <identifiersep> key <identifiersep> set == null || json <identifiersep> web <identifiersep> key <identifiersep> set . get <identifiersep> json <identifiersep> web <identifiersep> keys ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t2 logger . debug ( <string_literal> + to <identifiersep> time <identifiersep> string ( graph <identifiersep> timer , total <identifiersep> time ) ) ; \n \t2 logger . debug ( <string_literal> + to <identifiersep> time <identifiersep> string ( defs <identifiersep> timer , total <identifiersep> time ) ) ; \n \t1 <comment> \n \t1 <comment> \n <ect>
\t3 if ( out <identifiersep> tunnel != null && out <identifiersep> tunnel . get <identifiersep> length ( ) < = 1 ) { \n \t4 if ( peer . equals ( <identifier> <identifiersep> key ) ) { \n \t5 failed ( peer , false ) ; \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 } catch ( daemon <identifiersep> registry . empty <identifiersep> registry <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> ) ; } } \n \t1 public void on <identifiersep> start ( address connector <identifiersep> address ) { \n \t2 logger . info ( <string_literal> , daemon <identifiersep> messages . <identifier> <identifiersep> daemon , connector <identifiersep> address ) ; \n <ect>
\t9 if ( reason == null ) { \n \t10 if ( internet ) { \n <number_literal> s <identifiersep> logger . info ( <string_literal> + s <identifiersep> account . get ( ) ) ; \n \t10 } else { \n <ect>
\t3 <comment> \n \t3 for ( string pid : <identifier> ) { \n \t4 boolean is <identifiersep> dead = j <identifiersep> storm <identifiersep> utils . is <identifiersep> proc <identifiersep> dead ( pid ) ; \n \t4 if ( is <identifiersep> dead ) { \n <ect>
\t3 timer . cancel ( ) ; \n \t3 m <identifiersep> terminal <identifiersep> logger . info ( <string_literal> ) ; \n \t2 } catch ( final script <identifiersep> execution <identifiersep> exception e ) { \n \t3 m <identifiersep> logger . error ( <string_literal> , e . get <identifiersep> short <identifiersep> message ( ) , e ) ; \n <ect>
\t2 { \n \t3 recorder = get <identifiersep> recorder ( ) ; } \n \t2 catch ( operation <identifiersep> failed <identifiersep> exception <identifier> ) \n \t2 { \n <ect>
\t1 public output <identifiersep> stream get <identifiersep> output <identifiersep> stream ( ) throws runtime <identifiersep> io <identifiersep> exception { \n \t2 try { \n \t3 final file temp <identifiersep> file = file . create <identifiersep> temp <identifiersep> file ( <string_literal> , <string_literal> ) ; \n \t3 temp <identifiersep> file . delete <identifiersep> on <identifiersep> exit ( ) ; \n <ect>
\t4 <string_literal> ) ; \n \t2 o <identifiersep> auth <identifiersep> token <identifiersep> credential <identifier> <identifiersep> token <identifiersep> credential = new o <identifiersep> auth <identifiersep> token <identifiersep> credential ( \n \t4 client <identifiersep> id , client <identifiersep> secret , configuration <identifiersep> map ) ; \n \t2 string access <identifiersep> token = <identifier> <identifiersep> token <identifiersep> credential . get <identifiersep> access <identifiersep> token ( ) ; \n <ect>
\t2 if ( <identifier> <identifiersep> use <identifiersep> java <identifiersep> <identifier> ) { \n \t3 try { \n \t4 rv = alt <identifiersep> verify <identifiersep> sig <identifiersep> <identifier> ( signature , signed <identifiersep> data , offset , size , <identifier> <identifiersep> key ) ; \n \t4 if ( ( ! rv ) && <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t8 log . info ( <string_literal> + job <identifiersep> id + <string_literal> + bundle <identifiersep> status [ 0 ] . to <identifiersep> string ( ) \n \t10 + <string_literal> + bundle <identifiersep> job . get <identifiersep> status ( ) + <string_literal> ) ; \n \t8 update <identifiersep> bundle <identifiersep> job ( bundle <identifiersep> action <identifiersep> status , bundle <identifiersep> actions , bundle <identifiersep> job , bundle <identifiersep> status [ 0 ] ) ; } \n \t7 else if ( check <identifiersep> suspend <identifiersep> status ( bundle <identifiersep> action <identifiersep> status , bundle <identifiersep> actions , bundle <identifiersep> status ) ) { \n <ect>
\t5 <identifier> <identifiersep> response = new <identifier> <identifiersep> response ( response <identifiersep> body . get <identifiersep> content ( ) ) ; \n \t4 } else { \n \t5 <identifier> <identifiersep> response = new <identifier> <identifiersep> response ( <string_literal> ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t3 inject <identifiersep> method . invoke ( saga , resource ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , e ) ; \n \t2 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t8 if ( <identifier> <identifiersep> desc != null ) \n \t9 xml <identifiersep> delete <identifiersep> response . append ( <identifier> <identifiersep> desc ) ; \n \t8 xml <identifiersep> delete <identifiersep> response . append ( <string_literal> ) ; } } \n \t6 else { \n <ect>
<number_literal> <identifier> <identifiersep> resolver < versioned < v > > resolver , \n <number_literal> string custom <identifiersep> stores <identifiersep> xml , \n <number_literal> string cluster <identifiersep> xml <identifiersep> string , \n <number_literal> failure <identifiersep> detector fd ) { \n <ect>
\t4 stmt . add <identifiersep> batch ( ) ; } \n \t3 stmt . execute <identifiersep> batch ( ) ; \n \t3 stmt . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t1 <identifier> = lookup <identifiersep> default <identifiersep> route ( ) ; } \n \t1 if ( <identifier> == null ) { \n \t1 log . info ( <string_literal> ) ; \n \t1 <identifier> = <identifier> . get <identifiersep> all <identifiersep> inet <identifiersep> addresses ( ) . get ( 0 ) ; } \n <ect>
\t5 node add <identifiersep> node = parent <identifiersep> node . add <identifiersep> node ( path <identifiersep> str [ path <identifiersep> str . length - 1 ] , <string_literal> ) ; \n \t5 convert <identifiersep> page <identifiersep> to <identifiersep> node ( add <identifiersep> node , page , created <identifiersep> user ) ; \n \t5 session . save ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 string password = this . persistent <identifiersep> login <identifiersep> manager . get <identifiersep> <identifier> <identifiersep> password ( request , response ) ; \n \t4 principal = authenticate ( username , password , context ) ; \n \t4 if ( principal != null ) { \n <ect>
\t5 if ( ! element . shutdown ( network , context , cleanup <identifiersep> elements ) ) { \n \t6 s <identifiersep> logger . warn ( <string_literal> + element . get <identifiersep> name ( ) ) ; \n \t6 success = false ; } \n \t4 } catch ( final resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t4 return class . for <identifiersep> name ( class <identifiersep> name , true , <identifier> ) ; } \n \t3 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex1 ) \n \t3 { \n \t4 <comment> \n <ect>
\t4 try { \n \t5 context <identifiersep> json = io <identifiersep> utils . to <identifiersep> string ( new url ( context <identifiersep> url ) . open <identifiersep> stream ( ) ) ; \t1 } \n \t4 catch ( exception e ) \n \t4 { \n <ect>
\t1 if ( ns instanceof distributed <identifiersep> file <identifiersep> system ) { \n \t1 distributed <identifiersep> file <identifiersep> system dfs = ( distributed <identifiersep> file <identifiersep> system ) ns ; \n \t1 try { \n \t2 if ( ! dfs . recover <identifiersep> lease ( source ) ) { \n <ect>
\t1 <comment> \n \t1 long current <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 if ( all <identifiersep> known <identifiersep> live <identifiersep> collectors . size ( ) == 0 && get <identifiersep> zookeeper <identifiersep> quorum ( ) != null \n \t1 && ( current <identifiersep> time - last <identifiersep> failed <identifiersep> zk <identifiersep> request <identifiersep> time ) > zookeeper <identifiersep> backoff <identifiersep> time <identifiersep> millis ) { \n <ect>
\t2 synchronized ( this ) { \n \t3 reference <identifiersep> count -- ; \n \t3 ref <identifiersep> count = reference <identifiersep> count ; \n \t3 if ( reference <identifiersep> count < 0 ) \n <ect>
\t3 <identifier> <identifiersep> policy result = <identifier> <identifiersep> lb <identifiersep> service . create <identifiersep> lb <identifiersep> <identifier> <identifiersep> policy ( this ) ; \n \t3 this . set <identifiersep> entity <identifiersep> id ( result . get <identifiersep> id ( ) ) ; \n \t3 this . set <identifiersep> entity <identifiersep> uuid ( result . get <identifiersep> uuid ( ) ) ; \n \t2 } catch ( network <identifiersep> rule <identifiersep> conflict <identifiersep> exception e ) { \n <ect>
\t4 . collect ( collectors . to <identifiersep> set ( ) ) ; } \n \t1 @ override \n \t1 public boolean delete <identifiersep> single <identifiersep> ticket ( final string ticket <identifiersep> id <identifiersep> to <identifiersep> delete ) { \n \t2 final string ticket <identifiersep> id = encode <identifiersep> ticket <identifiersep> id ( ticket <identifiersep> id <identifiersep> to <identifiersep> delete ) ; \n <ect>
\t2 assert <identifiersep> busy ( ( ) - > assert <identifiersep> true ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . get ( ) . get <identifiersep> state ( ) . get <identifiersep> routing <identifiersep> table ( ) . index ( <string_literal> ) . all <identifiersep> primary <identifiersep> shards <identifiersep> unassigned ( ) ) ) ; } \n \t1 public void test <identifiersep> not <identifiersep> wait <identifiersep> for <identifiersep> quorum <identifiersep> <identifier> ( ) throws exception { \n \t2 logger . info ( <string_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> nodes ( <number_literal> ) ; \n <ect>
\t2 + <string_literal> , ex ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t1 logger . error ( <string_literal> , e ) ; \n \t1 } catch ( instantiation <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 hts <identifiersep> <identifier> <identifiersep> <identifier> ( <identifier> , <identifier> <identifiersep> <identifier> , str <identifiersep> <identifier> , <identifier> <identifiersep> <identifier> , <identifier> , hts <identifiersep> data , this ) ; \n \t4 put <identifiersep> end <identifiersep> of <identifiersep> stream ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 <comment> \n \t5 ( ( active <identifiersep> mq <identifiersep> session ) consumer <identifiersep> session ) . get <identifiersep> transaction <identifiersep> context ( ) . add <identifiersep> synchronization ( new synchronization ( ) { \n \t6 @ override \n \t6 public void before <identifiersep> end ( ) throws exception { \n <ect>
\t3 try { \n \t4 steps . add ( this . component <identifiersep> manager . < distribution <identifiersep> step > get <identifiersep> instance ( distribution <identifiersep> step . class , \n \t5 <identifier> <identifiersep> distribution <identifiersep> step . id ) ) ; \n \t3 } catch ( component <identifiersep> lookup <identifiersep> exception e ) { \n <ect>
\t7 log . info ( e . get <identifiersep> message ( ) + retry <identifiersep> conn <identifiersep> msg ) ; \n \t6 } else if ( e instanceof rw <identifiersep> server <identifiersep> found <identifiersep> exception ) { \n \t7 log . info ( e . get <identifiersep> message ( ) ) ; \n \t6 } else if ( e instanceof socket <identifiersep> exception ) { \n <ect>
\t3 if ( configuration . contains ( core <identifiersep> options . tmp <identifiersep> dirs ) ) { \n \t4 log . info ( <string_literal> + \n \t5 <string_literal> + configuration . get <identifiersep> value ( core <identifiersep> options . tmp <identifiersep> dirs ) ) ; } \n \t3 else { \n <ect>
\t3 assert <identifiersep> equals ( name , names . next ( ) ) ; \n \t3 log . info ( <string_literal> , name ) ; } \n \t2 long rate = num <identifiersep> nodes * 1000l ; \n \t2 rate = rate / sw . elapsed ( time <identifiersep> unit . milliseconds ) ; \n <ect>
\t2 long zone <identifiersep> id = - 1l ; \n \t2 long id = event . get <identifiersep> resource <identifiersep> id ( ) ; \n \t2 if ( event <identifiersep> types . event <identifiersep> load <identifiersep> balancer <identifiersep> create . equals ( event . get <identifiersep> type ( ) ) ) { \n <ect>
\t6 { \n \t7 if ( parameter <identifiersep> types [ 0 ] . is <identifiersep> assignable <identifiersep> from ( get <identifiersep> method . get <identifiersep> return <identifiersep> type ( ) ) ) \n \t7 { \n \t8 return method ; } } } } \n <ect>
\t3 . with <identifiersep> <identifier> <identifiersep> <identifier> ( new <identifier> <identifiersep> <identifier> ( dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> read <identifiersep> capacity ( ) , \n \t4 dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> write <identifiersep> capacity ( ) ) ) . with <identifiersep> table <identifiersep> name ( dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> table <identifiersep> name ( ) ) ; \n \t2 if ( delete <identifiersep> tables ) { \n \t3 final delete <identifiersep> table <identifiersep> request delete = new delete <identifiersep> table <identifiersep> request ( request . get <identifiersep> table <identifiersep> name ( ) ) ; \n <ect>
\t3 result = result && <identifier> <identifiersep> nw <identifiersep> helper . send <identifiersep> commands <identifiersep> to <identifiersep> router ( router , cmds ) ; \n \t2 } else if ( router . get <identifiersep> state ( ) == state . stopped ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + router + <string_literal> ) ; \n \t2 } else { \n <ect>
\t1 public class internal <identifiersep> interface <identifiersep> listener extends interface <identifiersep> listener <identifiersep> adapter { \n \t2 @ override \n \t2 public void operation <identifiersep> removed ( operation operation ) { \n \t3 if ( operation == wsdl <identifiersep> operation ) { \n <ect>
\t7 log . warn ( <string_literal> + sender . get <identifiersep> destination ( ) . get <identifiersep> name ( ) + <string_literal> ) ; \n \t6 else \n \t7 log . warn ( <string_literal> + sender . get <identifiersep> destination ( ) . get <identifiersep> name ( ) + <string_literal> , x ) ; } } \n \t4 if ( ! is <identifiersep> connected ( ) ) { \n <ect>
\t4 new data <identifiersep> input <identifiersep> stream ( checker . checksum <identifiersep> reader <identifiersep> with <identifiersep> length ( <identifier> , context . temp <identifiersep> bucket <identifiersep> factory , <number_literal> ) ) ; \n \t3 try { \n \t4 <identifier> = new fetch <identifiersep> context ( inner <identifiersep> <identifier> ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <identifier> <identifiersep> token <identifiersep> identifier <identifier> <identifiersep> <identifier> = null ; \n \t2 try { \n \t3 remote <identifiersep> ugi = user <identifiersep> group <identifiersep> information . get <identifiersep> current <identifiersep> user ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<number_literal> target <identifiersep> coverage ) ; } } } } } } \n \t2 return <identifier> <identifiersep> reads <identifiersep> iterator <identifiersep> test . get <identifiersep> tests ( <identifier> <identifiersep> reads <identifiersep> iterator <identifiersep> test . class ) ; } \n \t1 @ test ( data <identifiersep> provider = <string_literal> ) \n \t1 public void run <identifiersep> <identifier> <identifiersep> reads <identifiersep> iterator <identifiersep> test ( <identifier> <identifiersep> reads <identifiersep> iterator <identifiersep> test test ) { \n <ect>
\t2 for ( be <identifiersep> value <identifier> : peers ) { \n \t3 byte [ ] b = <identifier> . get <identifiersep> bytes ( ) ; \n \t3 if ( b . length != hash . hash <identifiersep> length ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t1 column <identifiersep> count = native <identifiersep> result <identifiersep> set . get <identifiersep> meta <identifiersep> data ( ) . get <identifiersep> column <identifiersep> count ( ) ; \n \t1 return column <identifiersep> count ; \n \t1 } catch ( sql <identifiersep> exception ex ) { \n \t1 <comment> \n <ect>
\t4 } else if ( cmd == on <identifiersep> off <identifiersep> type . off ) { \n \t5 msg m = dev . make <identifiersep> extended <identifiersep> message ( ( byte ) <identifier> , ( byte ) <identifier> , ( byte ) 0x00 , \n \t7 new byte [ ] { ( byte ) button , ( byte ) <identifier> , ( byte ) 0x00 } ) ; \n \t5 dev . enqueue <identifiersep> message ( m , m <identifiersep> feature ) ; \n <ect>
\t2 try { \n \t2 if ( in != null ) { \n \t3 in . close ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3 return false ; } } \n \t1 @ override \n \t1 protected boolean is <identifiersep> response <identifiersep> valid ( satel <identifiersep> message response ) { \n \t2 if ( response . get <identifiersep> command ( ) != command <identifiersep> code ) { \n <ect>
\t2 assert <identifiersep> hit <identifiersep> count ( client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> string <identifiersep> query ( <string_literal> ) ) . get ( ) , 1 ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> hit <identifiersep> count ( client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> string <identifiersep> query ( <string_literal> ) . field ( <string_literal> ) . field ( <string_literal> ) ) . get ( ) , 1 ) ; \n \t2 assert <identifiersep> hit <identifiersep> count ( client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> string <identifiersep> query ( <string_literal> ) ) . get ( ) , 1 ) ; \n <ect>
\t5 fire <identifiersep> interceptor <identifiersep> event ( new <identifier> <identifiersep> event ( <identifier> <identifiersep> event . evt <identifiersep> start <identifiersep> <identifier> , this , \n <number_literal> <string_literal> ) ) ; \n \t5 start <identifiersep> election ( true ) ; } } \n \t2 } catch ( exception x ) { \n <ect>
\t3 f = new file ( graph <identifiersep> dir ) ; \n \t3 if ( ! f . exists ( ) ) { \n \t4 f . mkdir ( ) ; } \n \t3 logger . info ( <string_literal> ) ; \n <ect>
\t1 <comment> \n \t1 try { \n \t2 fill <identifiersep> tokenizer ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 boolean <identifier> <identifiersep> ok = ip != null ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t4 socket . connect ( new inet <identifiersep> socket <identifiersep> address ( inet <identifiersep> address . get <identifiersep> <identifier> <identifiersep> address ( ) , params . get <identifiersep> port ( ) ) , v <identifiersep> connect <identifiersep> timeout <identifiersep> millis ) ; \n \t4 localhost <identifiersep> check <identifiersep> state = localhost <identifiersep> check <identifiersep> state . found ; \n \t4 return true ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 final url url = artifact . get <identifiersep> file ( ) . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ; \n \t4 if ( artifact . get <identifiersep> file ( ) . exists ( ) ) { \n \t5 if ( ! preferences . matches <identifiersep> ignored <identifiersep> classpath ( url . to <identifiersep> string ( ) ) ) { \n \t6 urls . add ( url ) ; \n <ect>
\t1 protected list < discovery <identifiersep> node > build <identifiersep> dynamic <identifiersep> nodes ( <identifier> <identifiersep> instances <identifiersep> service <identifiersep> impl <identifier> <identifiersep> instances <identifiersep> service , settings node <identifiersep> settings ) { \n \t2 <identifier> <identifiersep> <identifier> <identifiersep> hosts <identifiersep> provider provider = new <identifier> <identifiersep> <identifier> <identifiersep> hosts <identifiersep> provider ( node <identifiersep> settings , <identifier> <identifiersep> instances <identifiersep> service , \n \t3 transport <identifiersep> service , new network <identifiersep> service ( collections . empty <identifiersep> list ( ) ) ) ; \n \t2 list < discovery <identifiersep> node > discovery <identifiersep> nodes = provider . build <identifiersep> dynamic <identifiersep> nodes ( ) ; \n <ect>
\t1 case close <identifiersep> code <identifiersep> missing <identifiersep> extension : \n \t2 logger . debug ( <string_literal> ) ; \n \t2 break ; \n \t1 case close <identifiersep> code <identifiersep> <identifier> <identifiersep> condition : \n <ect>
\t4 if ( dest <identifiersep> vdi != null ) { \n \t5 try { \n \t6 dest <identifiersep> vdi . destroy ( conn ) ; \n \t5 } catch ( final exception e ) { \n <ect>
<comment> \n \t6 m . add <identifiersep> tag ( new string <identifiersep> tag ( <string_literal> + i + <string_literal> + s ) ) ; \n \t6 if ( opts . print ( ) ) { \n <ect>
\t2 boolean removed <identifiersep> <identifier> = true ; \n \t2 if ( plugin <identifiersep> locator . exists ( ) ) { \n \t3 removed <identifiersep> <identifier> = plugin <identifiersep> locator . delete ( ) ; \n \t3 if ( ! removed <identifiersep> <identifier> ) { \n <ect>
\t2 context <identifiersep> list <identifiersep> command command = new context <identifiersep> list <identifiersep> command ( ) ; \n \t2 command . execute ( controller , ps , null ) ; \n \t2 string out = os . to <identifiersep> string ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( out ) ; \n <ect>
\t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n \t3 if ( success ) \n \t4 <identifier> <identifiersep> log . warn ( <string_literal> + port + <string_literal> + addresses . to <identifiersep> string ( ip , external <identifiersep> port ) ) ; \n \t3 else \n <ect>
\t2 new hive <identifiersep> meta <identifiersep> store <identifiersep> client ( server <identifiersep> conf ) ; \n \t2 return true ; \n \t1 } catch ( meta <identifiersep> exception e ) { \n \t2 <comment> \n <ect>
\t2 <comment> \n \t2 log . debug ( <string_literal> ) ; \n \t2 meta <identifiersep> class <identifiersep> registry meta <identifiersep> class <identifiersep> registry = groovy <identifiersep> system . get <identifiersep> meta <identifiersep> class <identifiersep> registry ( ) ; \n \t2 for ( final class < ? > the <identifiersep> class : classes ) { \n <ect>
<comment> \n \t1 private void new <identifiersep> job <identifiersep> manager <identifiersep> leader <identifiersep> available ( string leader <identifiersep> address , uuid leader <identifiersep> session <identifiersep> id ) { \n <ect>
\t2 <comment> \n \t2 if ( ! is <identifiersep> discovered ( ) ) { \n \t3 if ( configuration <identifiersep> specific <identifiersep> to <identifiersep> renderer . get <identifiersep> folder <identifiersep> limit ( ) && depth <identifiersep> limit ( ) ) { \n \t4 if ( renderer . is <identifiersep> <identifier> ( ) || renderer . is <identifiersep> <identifier> ( ) ) { \n <ect>
\t1 public static < t > binding < list < t > > bind <identifiersep> bean <identifiersep> list <identifiersep> property ( string property , object source , class < t > property <identifiersep> type ) { \n \t2 method getter = reflection <identifiersep> util . find <identifiersep> getter ( property , source . get <identifiersep> class ( ) , list . class ) ; \n \t2 method setter = reflection <identifiersep> util . find <identifiersep> setter ( property , source . get <identifiersep> class ( ) , list . class ) ; \n \t2 if ( getter == null || setter == null ) { \n <ect>
\t4 if ( feature <identifiersep> manager != null ) { \n \t5 log . debug ( <string_literal> + provider . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> \n \t6 + feature <identifiersep> manager . get <identifiersep> name ( ) ) ; \n \t4 } else { \n <ect>
\t5 logger . error ( <string_literal> + node . get <identifiersep> host ( ) + <string_literal> \n \t8 + store <identifiersep> name + <string_literal> , ie ) ; } } \n \t3 return success ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 db <identifiersep> info . set <identifiersep> database <identifiersep> product <identifiersep> version ( db <identifiersep> product <identifiersep> version ) ; \n \t4 db <identifiersep> info . set <identifiersep> database <identifiersep> product <identifiersep> name ( db <identifiersep> product <identifiersep> name ) ; \n \t4 return db <identifiersep> info ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t6 { \n \t7 slave <identifiersep> <identifier> = slave <identifiersep> <identifier> ( new <identifiersep> slave , tx <identifiersep> id , notifier ) ; } \n \t6 catch ( throwable t ) \n \t6 { \n <ect>
\t4 i -- ; \n \t4 continue ; } } \n \t2 <comment> \n \t2 if ( fail > 0 ) { \n <ect>
\t3 <identifier> <identifiersep> body . <identifier> . get <identifiersep> collision <identifiersep> <identifier> ( ) . get <identifiersep> <identifier> <identifiersep> <identifier> ( new <identifier> ( ) , radius ) ; \n \t3 <identifier> <identifiersep> area ( <identifier> <identifiersep> body . get <identifiersep> location ( new org . <identifier> . math . <identifier> . <identifier> ( ) ) , radius [ 0 ] ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t1 @ after \n \t1 public void tear <identifiersep> down ( ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 this . web <identifiersep> server . stop ( ) ; \n <ect>
\t3 print <identifiersep> levels ( ) ; \n \t3 compute <identifiersep> node <identifiersep> span ( sub <identifiersep> model ) ; \n \t3 print <identifiersep> <identifier> ( ) ; \n \t3 update <identifiersep> node <identifiersep> levels <identifiersep> <identifier> <identifiersep> <identifier> ( sub <identifiersep> model ) ; } \n <ect>
\t6 completable <identifiersep> future . complete ( response ) ; } \n \t5 @ override \n \t5 public void on <identifiersep> failure ( exception exception ) { \n \t6 if ( exception instanceof response <identifiersep> exception ) { \n <ect>
\t1 protected void update <identifiersep> <identifier> ( set < string > model <identifiersep> ids ) { \n \t2 if ( model <identifiersep> ids == null || model <identifiersep> ids . is <identifiersep> empty ( ) ) \n \t3 return ; \n <comment> \n <ect>
\t1 final mod <identifiersep> shard <identifiersep> policy \t4 mod <identifiersep> shard <identifiersep> policy ; \n \t1 final function < string , message > \t1 invalid <identifiersep> message <identifiersep> handler = new function < string , message > ( ) { \n <number_literal> @ override \n <number_literal> public message apply ( string input ) { \n <ect>
\t1 log . info ( <string_literal> + arg ) ; \n \t1 this . boolean <identifiersep> true <identifiersep> string = arg ; } \n \t1 if ( cmd <identifiersep> line . has <identifiersep> option ( boolean <identifiersep> false <identifiersep> string ) ) { \n \t1 string arg = cmd <identifiersep> line . get <identifiersep> option <identifiersep> value ( boolean <identifiersep> false <identifiersep> string ) ; \n <ect>
public email <identifiersep> service ( ) throws illegal <identifiersep> argument <identifiersep> exception { \n \t1 logger . debug ( <string_literal> + default <identifiersep> email <identifiersep> config <identifiersep> path + <string_literal> ) ; \n \t1 final string email <identifiersep> config <identifiersep> file <identifiersep> path = \n \t2 pentaho <identifiersep> system . get <identifiersep> application <identifiersep> context ( ) . get <identifiersep> solution <identifiersep> path ( default <identifiersep> email <identifiersep> config <identifiersep> path ) ; \n <ect>
\t8 if ( an <identifiersep> element . channel . channel . equals ( the <identifiersep> datagram <identifiersep> channel ) ) { \n \t9 the <identifiersep> element = an <identifiersep> element ; \n \t9 break ; } } } \n \t6 if ( the <identifiersep> element != null && the <identifiersep> element . buffer != null ) { \n <ect>
\t3 log . info ( <string_literal> ) ; \n \t3 return hbase ; } \n \t2 kill <identifiersep> if <identifiersep> running ( ) ; \n \t2 delete <identifiersep> data ( ) ; \n <ect>
\t1 <comment> \n \t1 builder . environment ( ) . put ( <string_literal> , config . get <identifiersep> dir ( ) . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t1 if ( config . get <identifiersep> hadoop <identifiersep> conf <identifiersep> dir ( ) != null ) \n \t1 builder . environment ( ) . put ( <string_literal> , config . get <identifiersep> hadoop <identifiersep> conf <identifiersep> dir ( ) . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n <ect>
\t2 final string [ ] config <identifiersep> parts = binding <identifiersep> config . split ( <string_literal> ) ; \n \t2 config . system <identifiersep> id = integer . parse <identifiersep> int ( config <identifiersep> parts [ 0 ] ) ; \n \t2 ; \n \t2 config . measure <identifiersep> type = <identifier> <identifiersep> item <identifiersep> type . from <identifiersep> string ( config <identifiersep> parts [ 1 ] ) ; \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 logger . debug ( <string_literal> + is <identifiersep> not <identifiersep> <identifier> ) ; \n \t3 logger . debug ( <string_literal> + is <identifiersep> <identifier> ) ; \n \t3 logger . debug ( <string_literal> + care <identifiersep> for <identifiersep> aliases ) ; \n <ect>
\t2 try { \n \t3 <comment> \n \t3 logger . info ( <string_literal> + file <identifiersep> util . get <identifiersep> file <identifiersep> permissions ( profile <identifiersep> path ) ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 is . read <identifiersep> fully ( buf ) ; \n \t1 string rfb <identifiersep> protocol = new string ( buf ) ; \n \t1 <comment> \n \t1 if ( ! rfb <identifiersep> protocol . contains ( rfb <identifiersep> constants . rfb <identifiersep> protocol <identifiersep> version <identifiersep> major ) ) { \n <ect>
\t5 = <identifier> <identifiersep> <identifier> <identifiersep> fixture . bundle <identifiersep> context . register <identifiersep> service ( \n \t7 protocol <identifiersep> provider <identifiersep> service . class . get <identifiersep> name ( ) , \n \t7 provider , \n \t7 mock <identifiersep> prov <identifiersep> properties ) ; \n <ect>
\t4 log . info ( log . fac <identifiersep> test , <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t4 assert . fail ( ) ; } } \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> + received + <string_literal> ) ; \n \t2 assert . assert <identifiersep> true ( received == bytes <identifiersep> written - <number_literal> ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> that ( files . exists ( shard <identifiersep> directory ( node <identifiersep> 1 , index , 0 ) ) , equal <identifiersep> to ( true ) ) ; \n \t2 assert <identifiersep> that ( files . exists ( <identifier> ) , equal <identifiersep> to ( true ) ) ; \n \t2 assert <identifiersep> that ( files . exists ( shard <identifiersep> directory ( node <identifiersep> <number_literal> , index , 0 ) ) , equal <identifiersep> to ( true ) ) ; \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t2 if ( domain <identifiersep> router <identifiersep> vo . get <identifiersep> state ( ) == state . starting || domain <identifiersep> router <identifiersep> vo . get <identifiersep> state ( ) == state . running ) { \n \t3 <comment> \n \t3 final nic <identifiersep> profile control <identifiersep> nic = get <identifiersep> control <identifiersep> nic ( profile ) ; \n \t3 if ( control <identifiersep> nic == null ) { \n <ect>
\t3 cube <identifiersep> instance . clear <identifiersep> <identifier> ( ) ; \n \t3 cube <identifiersep> instance . set <identifiersep> create <identifiersep> time <identifiersep> utc ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t3 cube <identifiersep> instance . set <identifiersep> status ( realization <identifiersep> status <identifiersep> enum . disabled ) ; \n \t3 dst <identifiersep> store . put <identifiersep> resource ( cube <identifiersep> instance <identifiersep> path , cube <identifiersep> instance , cube <identifiersep> instance <identifiersep> serializer ) ; \n <ect>
\t5 logger . warn ( <string_literal> ) ; } } } } \n \t1 static void get <identifiersep> visibility <identifiersep> <identifier> ( final dom <identifiersep> node this <identifiersep> node , final set < string > <identifier> ) { \n \t2 final page <identifier> <identifiersep> owner <identifiersep> document \t1 = ( page ) this <identifiersep> node . get <identifiersep> owner <identifiersep> document ( ) ; \n \t2 if ( <identifier> <identifiersep> owner <identifiersep> document == null ) { \n <ect>
\t6 input <identifiersep> stream is = null ; \n \t6 try { \n \t7 compressor . compressor <identifiersep> type . <identifier> <identifiersep> new . <identifier> ( is = data . get <identifiersep> input <identifiersep> stream ( ) , os , data . size ( ) , expected <identifiersep> size ) ; \n \t6 } catch ( compression <identifiersep> output <identifiersep> size <identifiersep> exception e ) { \n <ect>
\t9 <string_literal> , \n \t9 <identifier> , value ) ; } \n \t6 if ( <identifier> == null ) { \n \t7 if ( logger != null ) \n <ect>
\t3 } else if ( this . rotation <identifiersep> policy instanceof file <identifiersep> size <identifiersep> rotation <identifiersep> policy ) { \n \t4 long rotation <identifiersep> bytes = ( ( file <identifiersep> size <identifiersep> rotation <identifiersep> policy ) rotation <identifiersep> policy ) . get <identifiersep> max <identifiersep> bytes ( ) ; \n \t4 log . warn ( <string_literal> , rotation <identifiersep> bytes ) ; \n \t4 log . warn ( <string_literal> ) ; \n <ect>
\t1 public void start <identifiersep> service ( ) throws exception { \n \t2 server <identifiersep> socket = new server <identifiersep> socket ( tcp <identifiersep> port ) ; \n \t2 running = true ; \n \t2 start ( ) ; \n <ect>
\t3 stmt . set <identifiersep> int ( <number_literal> , 1 ) ; \n \t3 stmt . execute <identifiersep> update ( ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n \t3 system . out . println ( <string_literal> + ex . get <identifiersep> message ( ) ) ; \n <ect>
\t4 cmd <identifiersep> code | = ( <identifier> <identifiersep> code < < <number_literal> ) ; \n \t4 msg <identifier> = dev . make <identifiersep> <identifier> ( cmd <identifiersep> code , ( byte ) <identifier> ) ; <comment> \n \t4 dev . enqueue <identifiersep> message ( <identifier> , m <identifiersep> feature ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 throw new runtime <identifiersep> exception ( <string_literal> + \n \t5 <string_literal> ) ; } \n \t2 if ( default <identifiersep> fs == null ) { \n \t3 default <identifiersep> fs = string . format ( <string_literal> , hdfs <identifiersep> host <identifiersep> name , hdfs <identifiersep> port ) ; } \n <ect>
\t1 void receive <identifiersep> command ( item item , command command , z <identifiersep> wave <identifiersep> node node , z <identifiersep> wave <identifiersep> thermostat <identifiersep> mode <identifiersep> command <identifiersep> class command <identifiersep> class , \n \t3 int endpoint <identifiersep> id , map < string , string > arguments ) { \n \t2 z <identifiersep> wave <identifiersep> command <identifiersep> converter < ? , ? > converter = this . get <identifiersep> command <identifiersep> converter ( command . get <identifiersep> class ( ) ) ; \n \t2 if ( converter == null ) { \n <ect>
\t2 string value = integer . to <identifiersep> string ( cols ) ; \n \t2 m . put ( value , <string_literal> , value ) ; } \n \t1 bw . add <identifiersep> mutation ( m ) ; } \n \t1 bw . close ( ) ; \n <ect>
public class logging <identifiersep> event <identifiersep> notifier extends event <identifiersep> notifier <identifiersep> support { \n \t1 private logger log = logger <identifiersep> factory . get <identifiersep> logger ( logging <identifiersep> event <identifiersep> notifier . class ) ; \n \t1 private string log <identifiersep> name ; \n \t1 public void notify ( event <identifiersep> object event ) throws exception { \n <ect>
\t7 if ( ! mapping . description ( ) . equals ( <string_literal> ) ) { \n \t8 action <identifiersep> mapping . set <identifiersep> description ( mapping . description ( ) ) ; } \n \t7 action <identifiersep> group . add <identifiersep> mapping ( action <identifiersep> id , action <identifiersep> mapping ) ; } \n \t5 } catch ( throwable e ) { \n <ect>
\t5 synchronized ( this . life <identifiersep> cycle <identifiersep> monitor ) { \n \t6 this . last <identifiersep> send = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t6 if ( ! this . reply <identifiersep> container . is <identifiersep> running ( ) ) { \n <ect>
\t2 if ( loader . is <identifiersep> mod <identifiersep> loaded ( <string_literal> ) ) { \n \t3 transport <identifiersep> <identifier> <identifiersep> <identifier> . load <identifiersep> <identifier> <identifiersep> <identifier> ( ) ; \n \t2 } else { \n \t3 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n <ect>
public final class message <identifiersep> consumer <identifiersep> client { \n \t1 private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( message <identifiersep> consumer <identifiersep> client . class ) ; \n \t1 private message <identifiersep> consumer <identifiersep> client ( ) { } \n \t1 public static void main ( string [ ] args ) throws exception { \n <ect>
\t2 while ( pool <identifiersep> state == pool <identifiersep> normal && should <identifiersep> create <identifiersep> another <identifiersep> connection ( ) ) { \n \t3 final pool <identifiersep> entry pool <identifiersep> entry = create <identifiersep> pool <identifiersep> entry ( ) ; \n \t3 if ( pool <identifiersep> entry != null ) { \n \t3 connection <identifiersep> bag . add ( pool <identifiersep> entry ) ; \n <ect>
\t4 ext . set <identifiersep> module <identifiersep> id ( this . get <identifiersep> module <identifiersep> id ( ) ) ; \n \t4 extensions . add ( ext ) ; \n \t4 log . debug ( get <identifiersep> module <identifiersep> id ( ) + <string_literal> , ext . get <identifiersep> extension <identifiersep> id ( ) , ext . get <identifiersep> class ( ) ) ; } \n \t3 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception | instantiation <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception | no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error e ) { \n <ect>
\t6 try { \n \t7 <identifier> <identifiersep> conn . rollback ( ( savepoint ) ref ) ; \n \t7 rollback = false ; \n \t6 } catch ( final sql <identifiersep> exception e ) { \n <ect>
\t2 if ( host == null ) { \n \t3 s <identifiersep> logger . info ( <string_literal> ) ; \n \t3 system . exit ( 1 ) ; } \n \t2 if ( port == null ) { \n <ect>
\t4 handle <identifiersep> recovery <identifiersep> ack ( ) ; \n \t3 } else { \n \t4 handle <identifiersep> checkpoint <identifiersep> ack ( ) ; } \n \t2 } else { \n <ect>
\t3 log . info ( log . fac <identifiersep> repo , <string_literal> , global <identifiersep> prefix , local <identifiersep> name ) ; } \n \t2 try { \n \t3 <identifier> . set <identifiersep> global <identifiersep> prefix ( global <identifiersep> prefix ) ; \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> repo , level . info ) ) { \n <ect>
\t2 int port = url . get <identifiersep> port ( ) ; \n \t2 string path = url . get <identifiersep> raw <identifiersep> path ( ) ; \n \t2 string query = url . get <identifiersep> raw <identifiersep> query ( ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 <identifier> <identifiersep> <identifier> . set ( true ) ; \n \t4 if ( e . is <identifiersep> rethrow <identifiersep> exception ( ) ) { \n \t5 throw e ; \n \t4 } else { \n <ect>
\t1 check <identifiersep> for <identifiersep> old <identifiersep> root <identifiersep> properties ( ) ; \n \t1 if ( null == this . job <identifiersep> table <identifiersep> name ) { \n \t1 create <identifiersep> job <identifiersep> table ( ) ; } \n \t1 if ( ! table <identifiersep> exists ( this . job <identifiersep> table <identifiersep> name ) ) { \n <ect>
\t2 for ( entry < key , value > entry : conn <identifiersep> peer . create <identifiersep> scanner ( peer <identifiersep> table1 , <identifier> . empty ) ) { \n \t2 count <identifiersep> table ++ ; \n \t2 assert . assert <identifiersep> true ( <string_literal> + entry . get <identifiersep> key ( ) . to <identifiersep> string <identifiersep> no <identifiersep> truncate ( ) + <string_literal> \n \t3 + entry . get <identifiersep> value ( ) , entry . get <identifiersep> key ( ) . get <identifiersep> row ( ) . to <identifiersep> string ( ) . starts <identifiersep> with ( master <identifiersep> table1 ) ) ; } \n <ect>
\t2 if ( ! username <identifiersep> password <identifiersep> credential . class . is <identifiersep> instance ( credential ) ) { \n \t3 logger . debug ( <string_literal> , get <identifiersep> name ( ) ) ; \n \t3 return false ; } \n \t2 if ( this . credential <identifiersep> selection <identifiersep> predicate == null ) { \n <ect>
\t2 namespace <identifiersep> info namespace = catalog . get <identifiersep> namespace <identifiersep> by <identifiersep> prefix ( namespace <identifiersep> name ) ; \n \t2 if ( namespace == null ) { \n \t3 throw new resource <identifiersep> not <identifiersep> found <identifiersep> exception ( <string_literal> + namespace <identifiersep> name + <string_literal> ) ; } \n \t2 logger . info ( <string_literal> + namespace <identifiersep> name ) ; \n <ect>
\t3 string latest <identifiersep> valid <identifiersep> backup = valid <identifiersep> backups <identifiersep> of <identifiersep> this <identifiersep> type . get ( valid <identifiersep> backups <identifiersep> of <identifiersep> this <identifiersep> type . size ( ) - 1 ) ; \n \t3 try { \n \t4 rv . add <identifiersep> all ( valid <identifiersep> backups <identifiersep> of <identifiersep> this <identifiersep> type . sub <identifiersep> list ( 0 , <identifier> ) ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t1 string <identifier> = query \n \t2 . task <identifiersep> definition <identifiersep> key ( <string_literal> ) \n \t2 . single <identifiersep> result ( ) \n \t2 . get <identifiersep> id ( ) ; \n <ect>
\t1 string request <identifiersep> id = optional . of <identifiersep> nullable ( request . get <identifiersep> header ( request <identifiersep> id <identifiersep> util . x <identifiersep> request <identifiersep> id ) ) . or <identifiersep> else ( \n \t1 uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ) ; \n \t1 try { \n <ect>
\t2 catch ( throwable t ) { \n \t3 log . warn ( <string_literal> , t ) ; } } \n \t1 protected synchronized void become <identifiersep> <identifier> ( ) throws exception { \n \t2 if ( srv <identifiersep> sock == null || srv <identifiersep> sock . is <identifiersep> closed ( ) ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n <ect>
\t4 request . answer ( output , start <identifiersep> stop <identifiersep> listener <identifiersep> delegate ) ; } \n \t3 if ( request != null && request . get <identifiersep> input <identifiersep> stream ( ) != null ) { \n \t4 request . get <identifiersep> input <identifiersep> stream ( ) . close ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t2 bucket target <identifiersep> bucket = bucket <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . lookup <identifiersep> <identifier> <identifiersep> bucket ( bucket . get <identifiersep> target <identifiersep> bucket ( ) ) ; \n \t2 <identifier> . set <identifiersep> <identifier> ( target <identifiersep> bucket . get <identifiersep> access <identifiersep> control <identifiersep> policy ( ) . get <identifiersep> access <identifiersep> control <identifiersep> list ( ) . get <identifiersep> <identifier> ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t6 sink . received ( data , off + len - left , left ) ; \n \t5 } else { \n \t6 sink . received ( data , off , len ) ; } } \n \t3 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 db . store ( historic <identifiersep> item ) ; \n \t3 logger . debug ( <string_literal> , historic <identifiersep> item . get <identifiersep> name ( ) , historic <identifiersep> item . get <identifiersep> state ( ) . to <identifiersep> string ( ) ) ; \n \t2 } catch ( <identifier> <identifiersep> exception e ) { \n \t3 db . rollback ( ) ; \n <ect>
\t2 try { \n \t3 connect conn = libvirt <identifiersep> connection . get <identifiersep> connection ( ) ; \n \t3 storage = conn . storage <identifiersep> pool <identifiersep> lookup <identifiersep> by <identifiersep> uuid <identifiersep> string ( uuid ) ; \n \t3 if ( storage . get <identifiersep> info ( ) . state != storage <identifiersep> pool <identifiersep> state . <identifier> <identifiersep> storage <identifiersep> pool <identifiersep> running ) { \n <ect>
\t7 continue ; } \n \t6 try { \n \t7 upload <identifiersep> template <identifiersep> to <identifiersep> swift <identifiersep> from <identifiersep> secondary <identifiersep> storage ( <identifier> <identifiersep> host <identifiersep> ref ) ; \n \t6 } catch ( exception e ) { \n <ect>
\t1 val log <identifiersep> config <identifiersep> file = new file ( s <string_literal> ) \n \t1 if ( log <identifiersep> config <identifiersep> file . exists ) { \n \t1 val content = io . source . from <identifiersep> file ( log <identifiersep> config <identifiersep> file ) . mk <identifiersep> string \n \t1 if ( content == config <identifiersep> content ) { \n <ect>
\t4 } else if ( style . equals ( <string_literal> ) ) { \n \t5 string dir = ( string ) props . remove ( <string_literal> ) ; \n \t5 if ( dir == null ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t6 } catch ( exception e ) { \n \t7 on <identifiersep> apply <identifiersep> error ( <string_literal> + source <identifiersep> name + <string_literal> + e + <string_literal> + entity , e ) ; } } } \n \t3 } else { \n \t4 if ( ! is <identifiersep> allow <identifiersep> create ( ) ) { \n <ect>
\t1 { \n \t2 file <identifiersep> ref f = <identifier> . get ( file <identifiersep> id ) ; \n \t2 if ( f == null ) \n \t2 { \n <ect>
\t3 flink . start ( true ) ; \n \t3 <comment> \n \t3 log . info ( <string_literal> ) ; \n \t3 actor <identifiersep> gateway job <identifiersep> manager = await . result ( flink . leader <identifiersep> gateway ( ) . future ( ) , deadline . time <identifiersep> left ( ) ) ; \n <ect>
<comment> \n \t1 public serial <identifiersep> message get <identifiersep> message ( alarm <identifiersep> type alarm <identifiersep> type ) { \n \t2 if ( is <identifiersep> get <identifiersep> supported == false ) { \n <ect>
\t1 public void test <identifiersep> simple <identifiersep> master <identifiersep> election <identifiersep> without <identifiersep> required <identifiersep> joins ( ) throws interrupted <identifiersep> exception , execution <identifiersep> exception { \n \t2 setup <identifiersep> master <identifiersep> service <identifiersep> and <identifiersep> node <identifiersep> join <identifiersep> controller ( initial <identifiersep> state ( false ) ) ; \n \t2 int node <identifiersep> id = 0 ; \n \t2 final int required <identifiersep> joins = 0 ; \n <ect>
\t1 public console <identifiersep> proxy <identifiersep> vo start <identifiersep> new ( long data <identifiersep> center <identifiersep> id ) throws concurrent <identifiersep> operation <identifiersep> exception { \n \t3 s <identifiersep> logger . debug ( <string_literal> + data <identifiersep> center <identifiersep> id ) ; } \n \t2 if ( ! allow <identifiersep> to <identifiersep> launch <identifiersep> new ( data <identifiersep> center <identifiersep> id ) ) { \n <ect>
\t4 + <string_literal> <comment> \n \t4 + <string_literal> ; <comment> \n \t2 validate ( xml ) ; \n \t2 document doc = post <identifiersep> as <identifiersep> dom ( <string_literal> , xml ) ; \n <ect>
\t2 if ( ! status ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 for ( int i = 0 ; i < expected <identifiersep> list . size ( ) ; i ++ ) { \n \t4 log . info ( i + <string_literal> + expected <identifiersep> list . get ( i ) . to <identifiersep> string ( ) ) ; } \n <ect>
\t3 if ( result ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + host <identifiersep> id + <string_literal> + future <identifiersep> owner <identifiersep> id ) ; \n \t4 finish <identifiersep> rebalance ( host <identifiersep> id , future <identifiersep> owner <identifiersep> id , event . rebalance <identifiersep> completed ) ; \n \t3 } else { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + sec <identifiersep> storage <identifiersep> vm . get <identifiersep> host <identifiersep> name ( ) ) ; } \n \t3 return true ; \n \t2 } else { \n <ect>
\t2 string service <identifiersep> address = <string_literal> ; \n \t2 string service <identifiersep> method = <string_literal> ; \n \t2 <comment> \n \t2 service <identifiersep> uri = model . get <identifiersep> ns <identifiersep> prefix <identifiersep> uri ( <string_literal> ) ; \n <ect>
\t2 if ( ingress <identifiersep> rule != null && ingress <identifiersep> rule . is <identifiersep> ready ( ) ) { \n \t2 client . create <identifiersep> listener <identifiersep> authorize <identifiersep> ingress <identifiersep> rule <identifiersep> rollback ( promise . as <identifiersep> promise ( account <identifiersep> id ) , \n \t3 promise . as <identifiersep> promise ( <identifier> ) , ingress <identifiersep> rule ) ; } \n \t2 state = elb <identifiersep> workflow <identifiersep> state . workflow <identifiersep> failed ; \n <ect>
\t1 for { \n \t1 deck <identifiersep> slot < - image <identifiersep> <identifier> <identifiersep> deck <identifiersep> slot ( image ) \n \t1 if some ( deck <identifiersep> slot ) != <identifier> <identifiersep> state . deck <identifiersep> slot \n \t1 } { \n <ect>
\t2 if ( cluster <identifiersep> context != null ) \n \t3 cluster <identifiersep> context . shutdown ( ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> <identifier> ( ) throws exception { \n <ect>
\t4 final long last <identifiersep> access <identifiersep> time = context . last <identifiersep> access <identifiersep> time ( ) ; \n \t4 if ( last <identifiersep> access <identifiersep> time == - 1l ) { <comment> \n \t5 continue ; } \n \t4 if ( ( time - last <identifiersep> access <identifiersep> time > context . keep <identifiersep> alive ( ) ) ) { \n <ect>
\t3 <identifier> . set <identifiersep> property ( <string_literal> , <string_literal> ) ; \n \t3 <identifier> . set <identifiersep> property ( <string_literal> , <string_literal> ) ; } \n \t2 <identifier> <identifiersep> is <identifiersep> own <identifiersep> session = true ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 save <identifiersep> check <identifiersep> point ( last <identifiersep> check <identifiersep> point <identifiersep> time ) ; \n \t2 } else { \n \t2 if ( last <identifiersep> check <identifiersep> point <identifiersep> time > 0 ) { \n \t3 last <identifiersep> check <identifiersep> point <identifiersep> time = get <identifiersep> <identifier> <identifiersep> check <identifiersep> point <identifiersep> time <identifiersep> millis ( last <identifiersep> check <identifiersep> point <identifiersep> time , get <identifiersep> sleep <identifiersep> interval <identifiersep> millis ( ) ) ; \n <ect>
\t8 output <identifiersep> object . put ( json <identifiersep> keys . update <identifiersep> type . name ( ) , <string_literal> ) ; \t8 \n \t8 pw . println ( output <identifiersep> object . to <identifiersep> string ( ) ) ; \n \t7 } catch ( json <identifiersep> exception e ) { \n \t8 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t2 throws exception \n \t1 { \n \t2 { \n <ect>
\t4 <comment> \n \t4 synchronized ( state ) { \n \t5 if ( ! state . is <identifiersep> initialized ( ) ) { \n \t6 if ( log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t10 this . get <identifiersep> name ( ) , pending <identifiersep> power <identifiersep> state <identifiersep> change . get <identifiersep> state <identifiersep> as <identifiersep> string ( ) , \n \t10 pending <identifiersep> power <identifiersep> state <identifiersep> change . retries ) ; \n \t8 set <identifiersep> power <identifiersep> state ( pending <identifiersep> power <identifiersep> state <identifiersep> change . state ) ; \n \t7 } else { \n <ect>
<comment> \n public class sub <identifiersep> generic <identifiersep> controller extends generic <identifiersep> controller < string > { \n \t1 private static final logger logger = logger <identifiersep> factory . get <identifiersep> logger ( sub <identifiersep> generic <identifiersep> controller . class ) ; \n \t1 public void method ( string string ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> <identifier> <identifiersep> scope ( ) throws exception { \n \t2 client = client <identifiersep> builder . new <identifiersep> client ( ) ; \n <ect>
\t9 i + <string_literal> , \n \t9 <identifier> . get <identifiersep> declaring <identifiersep> class ( ) . get <identifiersep> full <identifiersep> name ( ) , \n \t9 clean <identifiersep> method ( <identifier> . get <identifiersep> name ( ) ) } ) ; } \n \t5 } catch ( runtime <identifiersep> exception re ) { \n <ect>
\t3 if ( type != null ) { \n \t4 final database <identifiersep> service db \t4 = structr <identifiersep> app . get <identifiersep> instance ( security <identifiersep> context ) . get <identifiersep> database <identifiersep> service ( ) ; \n \t4 final node <identifiersep> factory factory \t4 = new node <identifiersep> factory ( security <identifiersep> context ) ; \n \t4 final iterator < abstract <identifiersep> node > node <identifiersep> iterator = iterables . map ( factory , db . get <identifiersep> nodes <identifiersep> by <identifiersep> label ( entity <identifiersep> type <identifiersep> name ) ) . iterator ( ) ; \n <ect>
\t2 do <identifiersep> iterate ( average <identifiersep> aggregation , input <identifiersep> <identifier> , parameter ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t2 if ( ! warned ) { \n \t3 warned = true ; \n <ect>
private set < class < ? > > find <identifiersep> server <identifiersep> <identifier> ( final meta <identifiersep> data <identifiersep> scanner scanner ) { \n \t1 set < class < ? > > server <identifiersep> <identifier> = scanner . get <identifiersep> types <identifiersep> annotated <identifiersep> with ( server <identifiersep> marshaller . class , true ) ; \n \t1 if ( server <identifiersep> <identifier> . is <identifiersep> empty ( ) ) { \n \t1 <comment> \n <ect>
\t3 . set <identifiersep> settings ( <identifier> ) \n \t3 . set <identifiersep> indices <identifiersep> options ( indices <identifiersep> options . from <identifiersep> options ( true , false , true , true ) ) \n \t3 . get ( ) ; \n \t2 assert files . exists ( start <identifiersep> dir ) == false : <string_literal> ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 if ( ! ( client <identifiersep> logger == null || e instanceof transformer <identifiersep> exception || e instanceof sax <identifiersep> parse <identifiersep> exception ) ) \n <ect>
\t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 return null ; \n \t2 } catch ( dom <identifiersep> exception e ) { \n <ect>
\t3 { \n \t4 logger . error ( <string_literal> , ex ) ; } \n \t3 catch ( illegal <identifiersep> argument <identifiersep> exception ex ) \n \t3 { \n <ect>
\t3 native . register ( <string_literal> ) ; \n \t2 } catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error e ) { \n \t3 logger . info ( <string_literal> ) ; \n \t2 } catch ( unsatisfied <identifiersep> link <identifiersep> error e ) { \n <ect>
\t4 new <identifiersep> driver . add <identifiersep> url ( path ) ; \n \t4 log . info ( <string_literal> , path ) ; \n \t3 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
\t1 public v <identifiersep> admin <identifiersep> proto . set <identifiersep> offline <identifiersep> state <identifiersep> response handle <identifiersep> set <identifiersep> offline <identifiersep> state ( v <identifiersep> admin <identifiersep> proto . set <identifiersep> offline <identifiersep> state <identifiersep> request request ) { \n \t2 v <identifiersep> admin <identifiersep> proto . set <identifiersep> offline <identifiersep> state <identifiersep> response . builder response = v <identifiersep> admin <identifiersep> proto . set <identifiersep> offline <identifiersep> state <identifiersep> response . new <identifiersep> builder ( ) ; \n \t2 try { \n \t3 boolean set <identifiersep> to <identifiersep> offline = request . get <identifiersep> offline <identifiersep> mode ( ) ; \n <ect>
\t2 public void report <identifiersep> payload ( final resource <identifiersep> id resource <identifiersep> id , final slot <identifiersep> report slot <identifiersep> report ) { \n \t3 run <identifiersep> async ( new runnable ( ) { \n \t4 @ override \n \t4 public void run ( ) { \n <ect>
\t3 return registered <identifiersep> service ; } \n \t2 return process <identifiersep> expired <identifiersep> registered <identifiersep> service ( registered <identifiersep> service ) ; } \n \t1 private registered <identifiersep> service process <identifiersep> expired <identifiersep> registered <identifiersep> service ( final registered <identifiersep> service registered <identifiersep> service ) { \n \t2 final registered <identifiersep> service <identifiersep> expiration <identifiersep> policy policy = registered <identifiersep> service . get <identifiersep> expiration <identifiersep> policy ( ) ; \n <ect>
\t5 sd . post ( span , exchange , route . get <identifiersep> endpoint ( ) ) ; \n \t5 span . finish ( ) ; \n \t5 active <identifiersep> span <identifiersep> manager . deactivate ( exchange ) ; \n \t4 } else { \n <ect>
\t2 protected void channel <identifiersep> <identifier> ( channel <identifiersep> handler <identifiersep> context ctx , object msg ) throws exception { \n \t3 executor <identifiersep> service . submit ( new possibly <identifiersep> slow <identifiersep> runnable ( ctx , msg ) ) ; } \n \t2 @ override \n \t2 public void exception <identifiersep> caught ( channel <identifiersep> handler <identifiersep> context ctx , throwable cause ) throws exception { \n <ect>
\t3 log . info ( <string_literal> + prev <identifiersep> client \n \t4 + <string_literal> ) ; \n \t3 <identifier> . set <identifiersep> provider <identifiersep> client ( prev <identifiersep> client ) ; \n \t2 } else { <comment> \n <ect>
<comment> \n \t1 public void send ( peer <identifiersep> context destination , message m , byte <identifiersep> counter ctr ) throws not <identifiersep> connected <identifiersep> exception { \n \t2 if ( m . get <identifiersep> spec ( ) . is <identifiersep> internal <identifiersep> only ( ) ) { \n <ect>
\t2 try { \n \t2 execute <identifiersep> tests ( parallel <identifiersep> work <identifiersep> queue , isolated <identifiersep> work <identifiersep> queue , failed <identifiersep> test <identifiersep> results ) ; \n \t2 } finally { \n \t2 stopwatch . stop ( ) ; \n <ect>
\t2 public void exception <identifiersep> caught ( channel <identifiersep> handler <identifiersep> context ctx , exception <identifiersep> event e ) \n \t2 { \n \t3 if ( ! ( e . get <identifiersep> cause ( ) instanceof connect <identifiersep> exception ) ) \n \t3 { \n <ect>
\t5 <comment> \n \t5 if ( get <identifiersep> context ( ) . random ( ) . next <identifiersep> int ( <number_literal> ) > 0 ) { \n \t6 sig <identifiersep> type <identifiersep> changed = false ; \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t4 <identifier> <identifiersep> value <identifiersep> vs . append ( <string_literal> ) . append ( scale <identifiersep> width ) . append ( <string_literal> ) . append ( scale <identifiersep> height ) ; } \n \t3 <comment> \n \t3 if ( int <identifiersep> <identifier> > 0 || int <identifiersep> <identifier> > 0 ) { \n \t4 <identifier> <identifiersep> value <identifiersep> complete . append ( <identifier> <identifiersep> value <identifiersep> <identifier> <identifiersep> <identifier> ) . append ( <identifier> <identifiersep> value <identifiersep> <identifier> <identifiersep> middle ) . append ( <string_literal> ) ; \n <ect>
\t2 if ( existing <identifiersep> nic <identifiersep> map != null ) { \n \t3 find <identifiersep> logical <identifiersep> switch <identifiersep> port <identifiersep> command find <identifiersep> cmd = new find <identifiersep> logical <identifiersep> switch <identifiersep> port <identifiersep> command ( existing <identifiersep> nic <identifiersep> map . get <identifiersep> logical <identifiersep> switch <identifiersep> uuid ( ) , existing <identifiersep> nic <identifiersep> map . get <identifiersep> logical <identifiersep> switch <identifiersep> port <identifiersep> uuid ( ) ) ; \n \t3 find <identifiersep> logical <identifiersep> switch <identifiersep> port <identifiersep> answer answer = ( find <identifiersep> logical <identifiersep> switch <identifiersep> port <identifiersep> answer ) agent <identifiersep> mgr . <identifier> <identifiersep> send ( nicira <identifiersep> nvp <identifiersep> host . get <identifiersep> id ( ) , find <identifiersep> cmd ) ; \n \t3 if ( answer . get <identifiersep> result ( ) ) { \n <ect>
\t2 try { \n \t3 configuration . set <identifiersep> endpoint <identifiersep> parameter ( endpoint , <string_literal> , <number_literal> ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( invalid <identifiersep> property <identifiersep> exception e ) { \n <ect>
\t6 properties . get <identifiersep> <identifier> ( ) ) ; \n \t4 if ( string <identifiersep> utils . is <identifiersep> blank ( properties . get <identifiersep> secret ( ) ) ) { \n \t5 logger . debug ( <string_literal> ) ; \n \t5 return new b <identifiersep> crypt <identifiersep> password <identifiersep> encoder ( properties . get <identifiersep> <identifier> ( ) ) ; } \n <ect>
\t3 <comment> \n \t3 if ( e instanceof svn <identifiersep> exception && file <identifiersep> entry . get <identifiersep> file <identifiersep> type ( ) == file <identifiersep> type . dir ) { \n \t4 if ( svn <identifiersep> error <identifiersep> code . fs <identifiersep> already <identifiersep> exists . equals ( ( ( svn <identifiersep> exception ) e ) . get <identifiersep> error <identifiersep> message ( ) . get <identifiersep> error <identifiersep> code ( ) ) ) { \n \t5 return ; } } \n <ect>
\t7 <comment> \n \t7 <comment> \n \t7 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , 1 , \n <number_literal> data . get <identifiersep> type ( ) ) ; \n <ect>
\t8 assert <identifiersep> equals ( 1 , size ) ; \n \t8 collection < async <identifiersep> processor <identifiersep> await <identifiersep> manager . await <identifiersep> thread > threads = context . get <identifiersep> async <identifiersep> processor <identifiersep> await <identifiersep> manager ( ) . browse ( ) ; \n \t8 async <identifiersep> processor <identifiersep> await <identifiersep> manager . await <identifiersep> thread thread = threads . iterator ( ) . next ( ) ; \n \t8 long wait = thread . get <identifiersep> wait <identifiersep> duration ( ) ; \n <ect>
\t3 throw new servlet <identifiersep> exception ( e ) ; } } \n \t1 @ override \n \t1 public void destroy ( ) { \n <ect>
\t1 public language resolve <identifiersep> language ( string name , camel <identifiersep> context context ) { \n \t2 try { \n \t3 object bean = context . get <identifiersep> registry ( ) . lookup <identifiersep> by <identifiersep> name ( <string_literal> + name ) ; \n \t3 if ( bean instanceof language <identifiersep> resolver ) { \n <ect>
\t4 logger . warn ( <string_literal> , item <identifiersep> name , command ) ; \n \t4 return ; } \n \t3 state prev <identifiersep> state = <identifier> <identifiersep> <identifier> <identifiersep> state . get ( ) ; \n \t3 if ( ! ( prev <identifiersep> state instanceof number ) ) { \n <ect>
\t1 try { \n \t1 <comment> \n \t1 user <identifiersep> record . parse ( val ) ; \n \t1 } catch ( record <identifiersep> parser . parse <identifiersep> error pe ) { \n <ect>
\t3 rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( ! rs . next ( ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> ) ; \n \t3 } else if ( ! rs . get <identifiersep> string ( 1 ) . equals ( <string_literal> ) ) { \n <ect>
\t2 <identifier> <identifiersep> clock <identifiersep> <identifier> = clock <identifiersep> <identifier> ; \n \t2 <identifier> <identifiersep> prev <identifiersep> write <identifiersep> end = prev <identifiersep> write <identifiersep> end ; \n \t2 system . arraycopy ( prev <identifiersep> read <identifiersep> end , prev <identifiersep> read <identifiersep> end . length - block <identifiersep> size , <identifier> <identifiersep> prev <identifiersep> read <identifiersep> block , 0 , block <identifiersep> size ) ; \n \t2 <comment> \n <ect>
\t2 try { \n \t3 reader = new <identifiersep> sam <identifiersep> stream <identifiersep> session <identifiersep> socket <identifiersep> reader ( s , id ) ; \n \t3 sender = new <identifiersep> stream <identifiersep> sender ( s , id ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> equals ( http <identifiersep> status <identifiersep> codes . no <identifiersep> content . get <identifiersep> status <identifiersep> code ( ) , status <identifiersep> code ) ; \n \t2 log . info ( <string_literal> , status <identifiersep> code ) ; \n \t2 status <identifiersep> code = response <identifiersep> parts . get ( <number_literal> ) . get <identifiersep> status <identifiersep> code ( ) ; \n \t2 assert <identifiersep> equals ( http <identifiersep> status <identifiersep> codes . no <identifiersep> content . get <identifiersep> status <identifiersep> code ( ) , status <identifiersep> code ) ; \n <ect>
\t1 } ) ; \n \t1 ctx . flush ( ) ; } \n \t1 catch ( <identifier> e ) \n \t1 { \n <ect>
\t2 string evaluate <identifiersep> <identifier> = context <identifiersep> parameters . get <identifiersep> parameter <identifiersep> value ( context <identifiersep> parameter . evaluate <identifiersep> <identifier> ) + sm . get <identifiersep> name ( ) + <string_literal> + index + <string_literal> ; \n \t2 try { \n \t3 sm . write <identifiersep> json ( model <identifiersep> json ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 } else if ( get <identifiersep> first <identifiersep> throwable <identifiersep> of <identifiersep> type ( e , cancellation <identifiersep> exception . class ) != null ) { \n \t3 logger . warn ( e , <string_literal> , input , find <identifiersep> or <identifiersep> break , e . get <identifiersep> message ( ) ) ; \n \t3 return false ; \n \t3 } else if ( get <identifiersep> first <identifiersep> throwable <identifiersep> of <identifiersep> type ( e , timeout <identifiersep> exception . class ) != null ) { \n <ect>
\t1 for ( int i = 0 ; i < order . length ; i ++ ) { \n \t2 order <identifiersep> <identifier> [ i ] = ( int ) order [ i ] ; } \n \t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + arrays . to <identifiersep> string ( order <identifiersep> <identifier> ) ) ; \n \t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + ( int ) pos <identifiersep> big <identifiersep> table ) ; \n <ect>
\t3 limit = ( v < 0 ) ? - 1 : v ; } \n \t2 <comment> \n \t2 lang = lang == null ? extract <identifiersep> arg ( <string_literal> , list ) : lang ; \n \t2 if ( lang != null && text <identifiersep> index . get <identifiersep> doc <identifiersep> def ( ) . get <identifiersep> lang <identifiersep> field ( ) == null ) \n <ect>
\t4 except exception . not <identifiersep> connected <identifiersep> exception : \n \t5 log . debug ( <string_literal> ) \n \t4 except exception : \n \t5 <identifier> <identifiersep> <identifier> , e , <identifier> <identifiersep> <identifier> = sys . exc <identifiersep> info ( ) \n <ect>
\t3 if ( consent <identifiersep> policy . get <identifiersep> include <identifiersep> only <identifiersep> attributes ( ) != null && ! consent <identifiersep> policy . get <identifiersep> include <identifiersep> only <identifiersep> attributes ( ) . is <identifiersep> empty ( ) ) { \n \t4 attributes . key <identifiersep> set ( ) . retain <identifiersep> all ( consent <identifiersep> policy . get <identifiersep> include <identifiersep> only <identifiersep> attributes ( ) ) ; \n \t4 logger . debug ( <string_literal> , attributes ) ; \n \t3 } else { \n <ect>
\t2 } finally { \n \t3 close <identifiersep> auto <identifiersep> closeable ( pstmt <identifiersep> update ) ; } } \n \t1 private void encrypt <identifiersep> config ( connection conn ) { \n \t2 <comment> \n <ect>
public boolean <identifier> ( ) { \n \t1 return ( boolean ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> er <identifiersep> attachment . <identifier> <identifiersep> key ) ; } \n public void set <identifiersep> <identifier> ( boolean value ) { \n <ect>
\t2 if ( <string_literal> . equals <identifiersep> ignore <identifiersep> case ( scheme ) ) { \n \t3 try { \n \t4 url . set <identifiersep> secure ( true ) ; \n \t3 } catch ( portlet <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t2 for ( int i = 0 ; i < msg . get <identifiersep> record <identifiersep> count ( ) ; i ++ ) { \n \t3 if ( i != our <identifiersep> hop ) { \n \t4 encrypted <identifiersep> build <identifiersep> record data = msg . get <identifiersep> record ( i ) ; \n \t4 <comment> \n <ect>
\t2 boolean entity <identifiersep> exists = false ; \n \t2 for ( container <identifiersep> info <identifier> <identifiersep> node : get <identifiersep> current <identifiersep> <identifier> <identifiersep> nodes ( ) ) { \n \t3 t test <identifiersep> entity <identifiersep> on <identifiersep> <identifier> <identifiersep> node = read <identifiersep> entity ( test <identifiersep> entity <identifiersep> on <identifiersep> fail <identifiersep> node , <identifier> <identifiersep> node ) ; \n \t3 if ( test <identifiersep> entity <identifiersep> on <identifiersep> <identifier> <identifiersep> node == null ) { \n <ect>
\t4 backoff <identifiersep> handler . <identifier> <identifiersep> backoff <identifiersep> <identifier> <identifiersep> delay ( 100l , <number_literal> , retry <identifiersep> count <identifiersep> limit , command \n \t6 . get <identifiersep> failure <identifiersep> count ( ) , command . to <identifiersep> string ( ) ) ; \n \t4 return true ; } \n \t3 } catch ( http <identifiersep> exception e ) { \n <ect>
\t4 } else { \n \t5 <comment> \n \t5 forward <identifiersep> success <identifiersep> complete ( request , response ) ; } } } \n \t2 protected void retry <identifiersep> on <identifiersep> failure ( <identifier> <identifiersep> http <identifiersep> request request , http <identifiersep> conversation conversation , integer retries , abstract <identifiersep> client <identifiersep> base client , throwable failure ) { \n <ect>
\t5 j <identifiersep> <identifier> <identifiersep> box <identifier> = find <identifiersep> <identifier> <identifiersep> in <identifiersep> component ( panel ) ; \n \t5 if ( <identifier> != null ) { \n \t6 t <identifiersep> options . get <identifiersep> <identifier> <identifiersep> options ( ) . get <identifiersep> set <identifiersep> codes ( ) . add ( ( ( expansion <identifiersep> info ) <identifier> . get <identifiersep> selected <identifiersep> item ( ) ) . get <identifiersep> code ( ) ) ; \n \t5 } else { \n <ect>
\t3 case types . ref : { \n \t4 logger . warn ( <string_literal> , type ) ; \n \t4 return null ; } \n \t3 case types . <identifier> : { \n <ect>
\t4 if ( outstanding <identifiersep> requests . decrement <identifiersep> and <identifiersep> get ( ) < 1 || \n \t5 zk <identifiersep> server . get <identifiersep> in <identifiersep> process ( ) < outstanding <identifiersep> limit ) { \n \t5 enable <identifiersep> recv ( ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 <identifier> . flush ( ) \n \t2 return base64 . get <identifiersep> encoder ( ) . encode <identifiersep> to <identifiersep> string ( os . to <identifiersep> byte <identifiersep> array ( ) ) } \n \t1 private fun <identifier> <identifiersep> context . add <identifiersep> <identifier> <identifiersep> options ( plugin <identifiersep> options : mutable <identifiersep> list < <identifier> <identifiersep> option > ) { \n \t2 if ( <identifier> <identifiersep> extension . generate <identifiersep> <identifier> ) { \n <ect>
\t3 task = client . power <identifiersep> on <identifiersep> v <identifiersep> app ( v <identifiersep> app <identifiersep> response . get <identifiersep> href ( ) ) ; \n \t3 if ( ! task <identifiersep> tester . apply ( task . get <identifiersep> href ( ) ) ) { \n \t4 throw new runtime <identifiersep> exception ( string . format ( <string_literal> , <string_literal> , v <identifiersep> app <identifiersep> response . get <identifiersep> name ( ) , \n \t6 task ) ) ; } \n <ect>
\t4 . set <identifiersep> user ( user ) \n \t4 . set <identifiersep> password ( password ) \n \t4 . set <identifiersep> locale ( locale . get <identifiersep> default ( ) ) \n \t4 . set <identifiersep> time <identifiersep> zone ( time <identifiersep> zone . get <identifiersep> default ( ) ) ; \n <ect>
\t5 <identifier> . put <identifiersep> single ( <string_literal> , mime <identifiersep> override ) ; \n \t4 <comment> \n \t4 <comment> \n \t4 if ( data == null ) { \n <ect>
\t3 response . set <identifiersep> status ( <number_literal> ) ; \n \t3 end <identifiersep> response ( response , <string_literal> + e . to <identifiersep> string ( ) ) ; \t2 } \n \t2 catch ( permission <identifiersep> denied <identifiersep> exception e ) { \n \t3 persist <identifiersep> context . rollback <identifiersep> transaction ( ) ; \n <ect>
\t4 catch ( io <identifiersep> exception ioe ) \n \t4 { \n \t5 <comment> \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 context <identifiersep> access <identifiersep> controller . set <identifiersep> security <identifiersep> token ( get <identifiersep> name ( ) , container ) ; \n \t4 context <identifiersep> access <identifiersep> controller . set <identifiersep> security <identifiersep> token ( container , container ) ; \n \t4 context <identifiersep> bindings . bind <identifiersep> context ( container , naming <identifiersep> context , container ) ; \n <ect>
\t4 script command = new script ( <string_literal> , wait , s <identifiersep> logger ) ; \n \t4 command . add ( <string_literal> ) ; \n \t4 command . add ( <string_literal> , src <identifiersep> <identifier> <identifiersep> file <identifiersep> name ) ; \n \t4 command . set <identifiersep> work <identifiersep> dir ( secondary <identifiersep> mount <identifiersep> point + <string_literal> + sec <identifiersep> storage <identifiersep> dir + <string_literal> + snapshot <identifiersep> dir ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void updated ( dictionary < string , ? > config ) throws configuration <identifiersep> exception { \n \t2 if ( config != null ) { \n <ect>
\t6 acl <identifiersep> node <identifiersep> name , acl <identifiersep> name , acl <identifiersep> name <identifiersep> list . signed <identifiersep> info ( ) . get <identifiersep> type <identifiersep> name ( ) ) ; } \n \t3 acl <identifiersep> object <identifier> = new acl <identifiersep> object ( acl <identifiersep> name <identifiersep> list , handle ( ) ) ; \n \t3 if ( <identifier> . is <identifiersep> gone ( ) ) { \n \t4 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> accesscontrol , level . info ) ) { \n <ect>
\t3 try { \n \t4 s <identifiersep> logger . trace ( <string_literal> ) ; \n \t4 cleanup <identifiersep> storage ( true ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 i . remove ( ) ; \n \t6 try { \n \t7 is . close ( ) ; \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public void set <identifiersep> service ( java <identifiersep> config <identifiersep> service service ) { \n \t2 logger . info ( <string_literal> + service ) ; \n \t2 this . service = service ; } \n \t1 public java <identifiersep> config <identifiersep> resource ( ) { \n <ect>
\t4 return null ; } \n \t3 return error . get <identifiersep> phrase ( ) ; } \n \t2 catch ( parsing <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 this . set = set ; } \n \t1 @ pre <identifiersep> destroy \n \t1 public void pre <identifiersep> destroy ( ) { \n \t2 destroy <identifiersep> counter . increment <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t2 <comment> \n \t2 app . get <identifiersep> bean ( scheduler . class ) . shutdown ( ) ; \n \t2 io <identifiersep> helper . close ( app ) ; \n \t2 log . warn ( <string_literal> ) ; \n <ect>
\t3 storage <identifiersep> manager = write <identifiersep> save <identifiersep> <identifier> <identifiersep> enabled \n \t5 ? new read <identifiersep> write <identifiersep> storage <identifiersep> manager ( save <identifiersep> path , environment , entity <identifiersep> manager , block <identifiersep> manager , biome <identifiersep> manager ) \n \t5 : new read <identifiersep> only <identifiersep> storage <identifiersep> manager ( save <identifiersep> path , environment , entity <identifiersep> manager , block <identifiersep> manager , biome <identifiersep> manager ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 <identifier> <identifiersep> first <identifiersep> <identifier> <identifiersep> about ( profile ) ; \n \t3 return profile ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 if ( ! iterables . all ( volume <identifiersep> entity . get <identifiersep> attachment <identifiersep> tokens ( ) , invalidate <identifiersep> exports ) ) { \n \t3 <comment> \n \t3 log . error ( <string_literal> ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 executors . execute ( ( ) - > { \n \t3 try { \n \t4 future . get ( ) ; \n <ect>
\t5 v . before <identifiersep> close ( c ) ; \n \t5 s . close ( ) ; \n \t5 v . after <identifiersep> close ( c ) ; \n \t4 } catch ( throwable e ) { <comment> \n <ect>
\t1 if ( null != prev <identifiersep> endpoint ) { \n \t1 if ( prev <identifiersep> endpoint . equals ( next <identifiersep> incremental <identifiersep> value ) ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 return false ; } \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + config . get <identifiersep> uuid ( ) ) ; } \n \t2 } else { \n <ect>
\t1 } catch ( stack <identifiersep> advisor <identifiersep> request <identifiersep> exception e ) { \n \t1 log . warn ( <string_literal> , e ) ; \n \t1 throw new illegal <identifiersep> argument <identifiersep> exception ( e . get <identifiersep> message ( ) , e ) ; \n \t1 } catch ( stack <identifiersep> advisor <identifiersep> exception e ) { \n <ect>
\t2 { \n \t3 if ( self == null ) \n \t4 return true ; <comment> \n \t3 <comment> \n <ect>
\t5 if ( <identifier> == null ) { \n \t6 warning ( <string_literal> , c ) ; \n \t5 } else \n \t6 packages . put ( <identifier> , attrs ) ; \n <ect>
\t5 } else { \n \t6 final properties props = properties <identifiersep> util . load <identifiersep> from <identifiersep> file ( props <identifiersep> file ) ; \n \t6 search = props . get <identifiersep> property ( <string_literal> ) ; } \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 long elapsed <identifiersep> time <identifiersep> millis = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n \t2 float elapsed <identifiersep> time <identifiersep> sec = elapsed <identifiersep> time <identifiersep> millis / 1000f ; \n \t2 if ( this . steiner <identifiersep> tree != null ) { \n \t3 logger . debug ( <string_literal> + this . steiner <identifiersep> tree . vertex <identifiersep> set ( ) . size ( ) ) ; \n <ect>
\t3 if ( number >= <identifier> <identifiersep> configuration . get <identifiersep> num <identifiersep> candidate <identifiersep> mappings ( ) ) \n \t4 break ; } \n \t2 collections . sort ( <identifier> <identifiersep> semantic <identifiersep> models , new <identifier> <identifiersep> semantic <identifiersep> model <identifiersep> comparator ( ) ) ; \n <comment> \n <ect>
\t4 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t3 } else { \n \t4 throw new server <identifiersep> api <identifiersep> exception ( base <identifiersep> cmd . internal <identifiersep> error , <string_literal> ) ; } \n \t2 } catch ( internal <identifiersep> error <identifiersep> exception ex ) { \n <ect>
public string create <identifiersep> collection ( ) throws exception { \n \t1 list < string > collections = list <identifiersep> collections ( ) ; \n \t1 if ( ! collections . contains ( get <identifiersep> collection ( ) ) ) { \n \t1 string collection = new create <identifiersep> collection <identifiersep> command ( get <identifiersep> retry <identifiersep> times ( ) , get <identifiersep> interval ( ) ) . run ( this ) ; \n <ect>
\t3 <identifier> . register <identifiersep> m <identifiersep> bean ( bean , bean . object <identifiersep> name ) ; \n \t3 beans . add ( bean ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t4 ctx . io ( ) . send ( dst <identifiersep> node <identifiersep> id , topic , msg , grid <identifiersep> io <identifiersep> policy . system <identifiersep> pool ) ; \n \t4 return ; } \n \t3 catch ( grid <identifiersep> exception e ) { \n <ect>
\t1 are not correct \n \t1 <string_literal> <string_literal> <ect>
\t5 log . warn ( <string_literal> ) ; \n \t4 if ( ! string <identifiersep> utils . is <identifiersep> blank ( d . get <identifiersep> output <identifiersep> catalog ( ) ) ) \n \t5 log . warn ( <string_literal> ) ; \n \t4 if ( ! string <identifiersep> utils . is <identifiersep> blank ( d . get <identifiersep> input <identifiersep> schema ( ) ) ) \n <ect>
\t3 this . delegate = delegate ; } \n \t2 @ override \n \t2 public void on <identifiersep> exception ( jms <identifiersep> exception exception ) { \n \t3 <comment> \n <ect>
\t2 cfs . force <identifiersep> blocking <identifiersep> flush ( ) ; \n \t2 util . compact <identifiersep> all ( cfs , integer . max <identifiersep> value ) . get ( ) ; \n \t2 assert <identifiersep> equals ( 1 , cfs . get <identifiersep> ss <identifiersep> tables ( ) . size ( ) ) ; \n \t2 <comment> \n <ect>
\t2 <identifier> <identifiersep> public <identifiersep> nic = get <identifiersep> network <identifiersep> interface ( public <identifiersep> nic ) ; \n \t2 <identifier> <identifiersep> storage <identifiersep> nic = get <identifiersep> network <identifiersep> interface ( storage <identifiersep> nic ) ; \n \t2 <identifier> <identifiersep> storage <identifiersep> <identifier> = get <identifiersep> network <identifiersep> interface ( storage <identifiersep> <identifier> ) ; \n \t2 if ( <identifier> <identifiersep> private <identifiersep> nic == null ) { \n <ect>
\t8 s <identifiersep> logger . info ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; } } } } \n \t4 else if ( ( api . get <identifiersep> response <identifiersep> type ( ) != response <identifiersep> type . error ) && ( api . get <identifiersep> response <identifiersep> code ( ) != <number_literal> ) ) { \n \t5 s <identifiersep> logger . error ( <string_literal> + api . get <identifiersep> name ( ) + <string_literal> + api . get <identifiersep> response <identifiersep> code ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; \n \t5 if ( api . get <identifiersep> required ( ) == true ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t2 collection < t > result = new array <identifiersep> list < > ( ) ; \n \t2 try { \n \t3 service <identifiersep> loader . load ( type ) . for <identifiersep> each ( result : : add ) ; \n \t2 } catch ( service <identifiersep> configuration <identifiersep> error e ) { \n <ect>
\t2 args . start <identifiersep> thread <identifiersep> pool ( this . context ( ) . get <identifiersep> executor <identifiersep> service <identifiersep> manager ( ) . new <identifiersep> single <identifiersep> thread <identifiersep> executor ( this , <string_literal> ) ) ; \n \t2 args . context ( this . context ( ) ) ; \n \t2 server = new thrift <identifiersep> thread <identifiersep> pool <identifiersep> server ( args ) ; \n \t2 server . <identifier> ( ) ; \n <ect>
\t2 { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t5 template = app . create ( template . class , new node <identifiersep> attribute ( abstract <identifiersep> node . id , uuid ) ) ; \n \t5 properties . put ( template . name , name ) ; \n \t4 } else { \n \t5 <comment> \n <ect>
\t3 <identifier> <identifiersep> zk <identifiersep> flag <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t1 balancer . enable <identifiersep> backup ( get <identifiersep> startup <identifiersep> or <identifiersep> logger <identifiersep> callback ( ) ) ; } \n \t1 else \n \t1 { \n <ect>
\t4 } catch ( exception e ) { \n \t5 <comment> \n \t5 logger . warn ( <string_literal> ) ; \n \t5 try { \n <ect>
\t2 logger . warn ( <string_literal> + prop <identifiersep> name ) ; \n \t2 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + prop <identifiersep> name ) ; } \n \t2 string result = ( string ) props . get ( prop <identifiersep> value ) ; \n \t2 if ( result == null || result . is <identifiersep> empty ( ) ) { \n <ect>
\t3 try { \n \t4 status . add ( req . get <identifiersep> status ( ) ) ; \n \t3 } catch ( throwable t ) { \n \t4 <comment> \n <ect>
\t1 log . debug ( <string_literal> + user ) ; \n \t1 throw new ldap <identifiersep> exception ( <string_literal> , e ) ; \n \t1 } catch ( ldap <identifiersep> exception e ) { \n \t1 log . error ( e , e ) ; \n <ect>
\t4 mime <identifiersep> body <identifiersep> part part = ( mime <identifiersep> body <identifiersep> part ) <identifier> . get <identifiersep> body <identifiersep> part ( i ) ; \n \t4 string serialized <identifiersep> <identifier> = part . get <identifiersep> header ( rest <identifiersep> message <identifiersep> headers . x <identifiersep> <identifier> <identifiersep> vector <identifiersep> clock ) [ 0 ] ; \n \t4 int content <identifiersep> length = integer . parse <identifiersep> int ( part . get <identifiersep> header ( rest <identifiersep> message <identifiersep> headers . content <identifiersep> length ) [ 0 ] ) ; \n <ect>
\t5 if ( <identifier> <identifiersep> header ) { \n \t6 try { \n \t7 value = <identifier> <identifiersep> function . get <identifiersep> <identifier> ( locale , value , header <identifiersep> <identifier> <identifiersep> domain ) ; \n \t6 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t5 try ( thread <identifiersep> activity ignored = thread <identifiersep> monitor . start <identifiersep> thread <identifiersep> activity ( task . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ) { \n \t6 task . run ( ) ; \n \t5 } catch ( rejected <identifiersep> execution <identifiersep> exception e ) { \n \t6 thread <identifiersep> monitor . add <identifiersep> error ( e ) ; \n <ect>
\t3 current <identifiersep> pos = 0 ; \n \t3 previous <identifiersep> byte = 0 ; } \n \t2 void mark <identifiersep> start ( int position ) { \n \t3 if ( is <identifiersep> started ( ) ) { \n <ect>
\t5 break ; \n \t4 case remote <identifiersep> method <identifiersep> constants . method <identifiersep> unknown : \n \t4 default : \n \t5 assert false ; \n <ect>
\t7 ? power <identifiersep> max <identifiersep> panel <identifiersep> settings . get <identifiersep> the <identifiersep> panel <identifiersep> settings ( ) . get <identifiersep> first <identifiersep> pin <identifiersep> code ( ) : pin <identifiersep> code ) ; \n \t4 } else if ( command <identifiersep> str . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t5 if ( ( current <identifiersep> state . is <identifiersep> <identifier> <identifiersep> mode ( ) == null ) \n \t7 || current <identifiersep> state . is <identifiersep> <identifier> <identifiersep> mode ( ) . equals ( boolean . false ) ) { \n <ect>
\t1 if ( ! props . contains <identifiersep> key ( <string_literal> ) ) { \n \t1 system . err . println ( <string_literal> ) ; \n \t1 system . exit ( 1 ) ; } \n \t1 if ( use <identifiersep> mini ) { \n <ect>
<comment> \n \t1 public boolean receive ( int fragment <identifiersep> num , byte payload [ ] , int offset , int length , boolean is <identifiersep> last ) { \n \t2 if ( fragment <identifiersep> num < = 0 || fragment <identifiersep> num >= max <identifiersep> <identifier> ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 } else { \n \t2 final throwable response <identifiersep> ex = more <identifiersep> objects . first <identifiersep> non <identifiersep> null ( messaging <identifiersep> ex . get <identifiersep> cause ( ) , messaging <identifiersep> ex ) ; \n \t2 contexts . response ( new exception <identifiersep> response <identifiersep> type ( msg , response <identifiersep> ex . get <identifiersep> message ( ) , http <identifiersep> response <identifiersep> status . not <identifiersep> acceptable , response <identifiersep> ex ) ) ; } \n \t1 } else { \n <ect>
\t5 email . set <identifiersep> subject ( subject ) ; } \n \t4 if ( ! is <identifiersep> empty ( message ) ) { \n \t5 email . set <identifiersep> msg ( message ) ; } \n \t4 email . send ( ) ; \n <ect>
\t1 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n \t1 <comment> \n \t1 throw iae ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 return true ; } \n \t2 return false ; } \n \t1 public static boolean is <identifiersep> css <identifiersep> transform ( string value ) { \n \t2 value = value . trim ( ) ; \n <ect>
\t3 if ( fail <identifiersep> safe ) { \n \t4 <comment> \n \t4 log . warn ( <string_literal> , executor <identifiersep> service ) ; \n \t3 } else { \n <ect>
<comment> \n \t1 @ override \n \t1 public boolean test ( string key ) { \n <ect>
\t4 if ( rows <identifiersep> updated == 0 ) { \n \t5 <comment> \n \t5 return false ; } \n \t4 database . commit ( ) ; \n <ect>
\t1 assert <identifiersep> true ( jar <identifiersep> base <identifiersep> name . length ( ) > <string_literal> . length ( ) ) ; \n \t1 string class <identifiersep> name = jar <identifiersep> base <identifiersep> name . substring ( 0 , jar <identifiersep> base <identifiersep> name . length ( ) \n \t2 - <string_literal> . length ( ) ) ; \n \t1 log . info ( <string_literal> + jar <identifiersep> file <identifiersep> name ) ; \n <ect>
\t1 public void set <identifiersep> name ( string name ) \n \t1 { \n \t2 if ( name . length ( ) > files <identifiersep> constants . object <identifiersep> name <identifiersep> length ) \n \t2 { \n <ect>
\t4 if ( port == - 1 ) \n \t5 port = <number_literal> ; \n \t4 if ( <identifier> <identifiersep> should <identifiersep> proxy ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 try { \n \t2 thread . sleep ( wait <identifiersep> time ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n \t2 current <identifiersep> thread ( ) . interrupt ( ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void test <identifiersep> ended ( ) { \n <ect>
\t3 if ( packet . get <identifiersep> send <identifiersep> stream <identifiersep> id ( ) > 0 ) { \n \t4 if ( con . get <identifiersep> options ( ) . get <identifiersep> answer <identifiersep> <identifier> ( ) ) \n \t5 receive <identifiersep> ping ( con , packet ) ; \n \t4 else if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 try { \n \t2 <identifier> . start ( ) ; \n \t2 break ; \n \t1 } catch ( zoo <identifiersep> keeper <identifiersep> bind <identifiersep> exception e ) { \n <ect>
\t4 if ( decoded == null ) { \n \t5 decoded = o ; } \n \t4 object object <identifiersep> to <identifiersep> encode = null ; \n \t4 if ( m . method . get <identifiersep> parameter <identifiersep> types ( ) . length > <number_literal> ) { \n <ect>
\t2 log . info ( <string_literal> + <identifier> . size ( ) + <string_literal> ) ; \n \t2 <comment> \n \t2 for ( final per <identifiersep> tile <identifiersep> pf <identifiersep> metrics <identifiersep> extractor extractor : <identifier> ) { \n \t3 if ( extractor . get <identifiersep> exception ( ) != null ) { \n <ect>
\t3 if ( rollback ) { \n \t4 try { \n \t5 rollback = ! jdbc <identifiersep> connection . get <identifiersep> auto <identifiersep> commit ( ) ; \n \t4 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 final password <identifiersep> management <identifiersep> properties . ldap ldap = properties . get <identifiersep> ldap ( ) ; \n \t3 final search <identifiersep> filter filter = ldap <identifiersep> utils . new <identifiersep> ldaptive <identifiersep> search <identifiersep> filter ( ldap . get <identifiersep> search <identifiersep> filter ( ) , \n \t4 ldap <identifiersep> utils . ldap <identifiersep> search <identifiersep> filter <identifiersep> default <identifiersep> param <identifiersep> name , \n \t4 collection <identifiersep> utils . wrap ( username ) ) ; \n <ect>
\t3 if ( <identifier> <identifiersep> parser <identifiersep> factory == null ) { \n \t4 try { \n \t5 <identifier> <identifiersep> parser <identifiersep> factory = sax <identifiersep> parser <identifiersep> factory . new <identifiersep> instance ( ) ; \n \t4 } catch ( exception exception ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 <comment> \n \t3 <comment> \n \t3 throw new runtime <identifiersep> exception ( e ) ; } \n <ect>
\t3 while ( ( line = reader . read <identifiersep> line ( ) ) != null ) { \n \t4 output = output + line ; } \n \t3 reader . close ( ) ; \n \t3 if ( output . length ( ) > 0 ) { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
<comment> \n public void release ( ) throws io <identifiersep> exception { \n \t1 lock <identifiersep> file <identifiersep> stream . close ( ) ; \n \t1 if ( ! fs . delete ( lock <identifiersep> file , false ) ) { \n <ect>
\t2 public void on <identifiersep> next ( void a <identifiersep> void ) { \n \t3 <comment> \n \t2 @ override \n \t2 public void on <identifiersep> error ( throwable ex ) { \n <ect>
\t2 response . add <identifiersep> cookie ( <identifier> ) ; } \n \t2 log . info ( <string_literal> + client <identifiersep> user <identifiersep> name ) ; } \n \t1 super . do <identifiersep> post ( request , response ) ; } \n \t1 catch ( http <identifiersep> authentication <identifiersep> exception e ) { \n <ect>
\t6 . collect ( collectors . to <identifiersep> list ( ) ) ; \n \t3 if ( ! algorithms . is <identifiersep> empty ( ) ) { \n \t4 logger . info ( <string_literal> , provider . get <identifiersep> name ( ) , provider . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; \n \t4 for ( final string algorithm : algorithms ) { \n <ect>
\t1 @ override \n \t1 public boolean apply <identifiersep> static <identifiersep> routes ( vpc vpc , list < static <identifiersep> route <identifiersep> profile > routes ) \n \t3 throws resource <identifiersep> unavailable <identifiersep> exception { \n \t2 <comment> \n <ect>
\t1 @ <identifier> <identifiersep> throws \n \t1 public pair < ? extends <identifier> <identifiersep> saml <identifiersep> object , message <identifiersep> context > extract ( final http <identifiersep> servlet <identifiersep> request request , \n <number_literal> final base <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> xml <identifiersep> message <identifiersep> decoder decoder , \n <number_literal> final class < ? extends <identifier> <identifiersep> saml <identifiersep> object > clazz ) { \n <ect>
\t2 do <identifiersep> stop <identifiersep> camel <identifiersep> context ( context , camel <identifiersep> context <identifiersep> service ) ; } \n \t1 @ after <identifiersep> class ( always <identifiersep> run = true ) \n \t1 public static void tear <identifiersep> down <identifiersep> after <identifiersep> class ( ) throws exception { \n \t2 init . remove ( ) ; \n <ect>
\t4 stats = get <identifiersep> host <identifiersep> stats <identifiersep> raw <identifiersep> xml ( conn ) ; } \n \t3 if ( flag == <number_literal> ) { \n \t4 stats = get <identifiersep> vm <identifiersep> stats <identifiersep> raw <identifiersep> xml ( conn ) ; } \n \t2 } catch ( exception e1 ) { \n <ect>
<comment> \n \t2 public void got <identifiersep> message ( conversation c , message <identifiersep> info <identifier> ) \n \t2 { \n <ect>
\t3 self . command = command \n \t2 else : \n \t3 self . command = which ( <string_literal> ) \n \t2 if not self . command : \n <ect>
\t3 catch ( asynchronous <identifiersep> close <identifiersep> exception e ) { \n \t4 logger . warn ( string . format ( <string_literal> , file . get <identifiersep> absolute <identifiersep> path ( ) ) ) ; \n \t4 lock <identifiersep> acquired = false ; } \n \t3 catch ( closed <identifiersep> channel <identifiersep> exception e ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 ctx . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 <comment> \n \t4 restore <identifiersep> service . check <identifiersep> index <identifiersep> closing ( current <identifiersep> state , indices <identifiersep> to <identifiersep> close ) ; \n \t4 <comment> \n \t4 snapshots <identifiersep> service . check <identifiersep> index <identifiersep> closing ( current <identifiersep> state , indices <identifiersep> to <identifiersep> close ) ; \n <ect>
\t4 <comment> \n \t4 if ( <identifier> <identifiersep> header == null ) \n \t4 { \n <ect>
\t2 integer number <identifiersep> of <identifiersep> pages = exchange . get <identifiersep> in ( ) . get <identifiersep> header ( twitter <identifiersep> constants . twitter <identifiersep> number <identifiersep> of <identifiersep> pages , integer . class ) ; \n \t2 if ( number <identifiersep> of <identifiersep> pages == null ) { \n \t3 number <identifiersep> of <identifiersep> pages = endpoint . get <identifiersep> properties ( ) . get <identifiersep> number <identifiersep> of <identifiersep> pages ( ) ; } \n \t2 twitter twitter = endpoint . get <identifiersep> properties ( ) . get <identifiersep> twitter ( ) ; \n <ect>
\t6 bundle = ns <identifiersep> bundle . bundle <identifiersep> for <identifiersep> name ( prop <identifiersep> framework ) ; \n \t5 if ( bundle != null ) \n \t6 prop <identifiersep> file <identifiersep> url = bundle . path <identifiersep> url <identifiersep> for <identifiersep> resource <identifiersep> path ( prop <identifiersep> file <identifiersep> name ) ; \n \t5 if ( prop <identifiersep> file <identifiersep> url == null ) \n <ect>
\t1 protected void close ( cube <identifiersep> segment <identifiersep> scanner scanner ) { \n \t2 try { \n \t3 scanner . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 protected void handle <identifiersep> callback <identifiersep> profile <identifiersep> request ( final http <identifiersep> servlet <identifiersep> response response , final http <identifiersep> servlet <identifiersep> request request ) throws exception { \n \t2 logger . info ( <string_literal> , request . get <identifiersep> request <identifiersep> uri ( ) ) ; \n \t2 final authn <identifiersep> request authn <identifiersep> request = retrieve <identifiersep> saml <identifiersep> authentication <identifiersep> request <identifiersep> from <identifiersep> http <identifiersep> request ( request ) ; \n \t2 if ( authn <identifiersep> request == null ) { \n <ect>
\t3 case usage <identifiersep> db : \n \t4 if ( s <identifiersep> usage <identifiersep> ds != null ) { \n \t5 <identifier> <identifiersep> conn = s <identifiersep> usage <identifiersep> ds . get <identifiersep> connection ( ) ; \n \t4 } else { \n <ect>
\t2 math <identifiersep> transform transform ; \n \t2 try { \n \t3 transform = <identifier> . find <identifiersep> math <identifiersep> transform ( source <identifiersep> <identifier> , target <identifiersep> <identifier> , true ) ; \n \t2 } catch ( factory <identifiersep> exception e ) { \n <ect>
\t4 if ( resource <identifiersep> worker <identifiersep> slot . get <identifiersep> tasks ( ) . contains ( topology <identifiersep> master <identifiersep> id ) ) { \n \t5 resource <identifiersep> worker <identifiersep> slot . set <identifiersep> mem <identifiersep> size ( tm <identifiersep> worker <identifiersep> mem ) ; } } } \n \t2 ret . add <identifiersep> all ( assignment ) ; \n \t2 log . info ( <string_literal> + keep <identifiersep> <identifier> ) ; \n <ect>
\t2 dir <identifiersep> exists = not dfs <identifiersep> ret <identifiersep> code # dfs - test - d returns 0 in case the dir exists \n \t1 if not dir <identifiersep> exists : \n \t2 raise fail ( <string_literal> + dir <identifiersep> path + <string_literal> ) \n \t1 else : \n <ect>
\t4 <comment> \n \t4 return ; } \n \t3 manage <identifiersep> object ( me ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 with timing <identifiersep> out ( <identifier> - <identifier> ) : \n \t5 <identifier> = self . read ( <identifier> ) \n \t3 except timeout <identifiersep> error : \n \t4 break \n <ect>
\t1 long empty <identifiersep> map <identifiersep> size = reflection <identifiersep> size <identifiersep> of . size <identifiersep> of ( map ) ; \n \t1 map . put ( new long ( 1 ) , new double ( <number_literal> . 0 ) ) ; \n \t1 long size <identifiersep> of <identifiersep> map <identifiersep> one <identifiersep> entry = reflection <identifiersep> size <identifiersep> of . <identifier> <identifiersep> size <identifiersep> of ( default <identifiersep> max <identifiersep> depth , default <identifiersep> abort <identifiersep> when <identifiersep> max <identifiersep> depth <identifiersep> exceeded , map ) . get <identifiersep> <identifier> ( ) ; \n \t1 this . size <identifiersep> of <identifiersep> map <identifiersep> entry <identifiersep> <identifier> = size <identifiersep> of <identifiersep> map <identifiersep> one <identifiersep> entry - ( empty <identifiersep> map <identifiersep> size + this . size <identifiersep> of <identifiersep> map <identifiersep> entry ) ; \n <ect>
\t2 for ( string s : <identifier> <identifiersep> sel ) { \n \t3 try { \n \t4 <identifier> . add ( uuid . from <identifiersep> string ( s ) ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t3 if ( exchange . get <identifiersep> exception ( ) != null ) { \n \t4 throw new job <identifiersep> execution <identifiersep> exception ( exchange . get <identifiersep> exception ( ) ) ; } \n \t2 } catch ( exception e ) { \n \t3 if ( exchange != null ) { \n <ect>
\t2 invocation . builder request = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) ; \n \t2 response response = request . get ( ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string str = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t1 if ( ! sig <identifiersep> valid ) { \n \t1 log . warn ( <string_literal> ) ; } \n \t1 boolean <identifier> <identifiersep> valid = validate <identifiersep> <identifier> ( jwt <identifiersep> token ) ; \n \t1 if ( ! <identifier> <identifiersep> valid ) { \n <ect>
\t3 } catch ( sql <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 if ( after != null ) \n \t5 after . run ( ) ; \n \t3 } catch ( throwable th ) { \n <ect>
\t1 conf . set <identifiersep> boolean ( <string_literal> , false ) ; } \n private void init <identifiersep> from <identifiersep> script ( ) throws io <identifiersep> exception { \n \t1 file script <identifiersep> file = new file ( this . init <identifiersep> script ) ; \n \t1 if ( ! script <identifiersep> file . is <identifiersep> file ( ) ) { \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + host <identifiersep> state ) ; } \n \t4 return status . down ; } } \n \t2 <comment> \n <ect>
\t4 if ( test <identifiersep> window . parent . frames [ i ] == test <identifiersep> window ) { \n \t5 missing = false ; \n \t5 break ; } } } \n \t2 if ( missing ) { \n <ect>
\t5 . http <identifiersep> request ( uri . to <identifiersep> string ( ) ) \n \t5 . status ( response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) ) \n \t5 . body ( entity <identifiersep> utils . to <identifiersep> string ( response . get <identifiersep> entity ( ) ) ) \n \t5 . build ( ) ; \n <ect>
\t5 stream . close ( ) ; \n \t5 <identifier> . close ( ) ; } } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t1 update <identifiersep> guaranteed <identifiersep> count ( request . get <identifiersep> guaranteed <identifiersep> task <identifiersep> count ( ) ) ; } } \n void set <identifiersep> task <identifiersep> <identifier> ( llap <identifiersep> task <identifiersep> <identifier> <identifier> ) { \n \t1 this . <identifier> = <identifier> ; } \n protected void send <identifiersep> update <identifiersep> message <identifiersep> async ( task <identifiersep> info ti , boolean new <identifiersep> state ) { \n <ect>
\t4 log . info ( <string_literal> + min <identifiersep> output <identifiersep> <identifier> + <string_literal> + \n \t6 default <identifiersep> min <identifiersep> <identifier> ) ; \n \t4 min <identifiersep> output <identifiersep> <identifier> = default <identifiersep> min <identifiersep> <identifier> ; } } \n \t2 if ( percent <identifiersep> usage < = 0 ) { \n <ect>
\t4 message m = consumer . receive ( 1 ) ; \n \t4 if ( m != null ) { \n \t5 if ( m instanceof text <identifiersep> message ) { \n \t6 text <identifiersep> message message = ( text <identifiersep> message ) m ; \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> it <identifiersep> mgr . stop ( proxy . get <identifiersep> uuid ( ) ) ; \n \t3 return true ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t6 reflection <identifiersep> utils . make <identifiersep> accessible ( field ) ; \n \t6 final expression exp = ( expression ) reflection <identifiersep> utils . get <identifiersep> field ( field , ( ( view <identifiersep> state ) state ) . get <identifiersep> view <identifiersep> factory ( ) ) ; \n \t6 state <identifiersep> map . put ( <string_literal> , string <identifiersep> utils . default <identifiersep> if <identifiersep> blank ( exp . get <identifiersep> expression <identifiersep> string ( ) , exp . get <identifiersep> value ( null ) . to <identifiersep> string ( ) ) ) ; \n \t5 } else { \n <ect>
<comment> \n \t1 private void copy ( jar dest , jar <identifier> , string path , boolean overwrite ) { \n <ect>
\t3 block <identifiersep> manager . <identifier> <identifiersep> volume <identifiersep> from <identifiersep> all ( volume <identifiersep> id ) ; \n \t2 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception ex ) { \n \t3 log . error ( <string_literal> + volume <identifiersep> id + <string_literal> , ex ) ; } \n \t2 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t3 } catch ( cms <identifiersep> exception e ) { \n \t4 log . error ( e . get <identifiersep> localized <identifiersep> message ( ) , e ) ; } } \n \t2 result . add <identifiersep> all ( online <identifiersep> and <identifiersep> not <identifiersep> offline ) ; \n <ect>
\t6 bytes <identifiersep> sent <identifiersep> and <identifiersep> received [ 0 ] = 0 ; } } \n \t3 } else { \n \t4 bytes <identifiersep> sent <identifiersep> and <identifiersep> received = lb <identifiersep> answer . ip <identifiersep> bytes . get ( public <identifiersep> ip ) ; } \n \t3 if ( bytes <identifiersep> sent <identifiersep> and <identifiersep> received == null ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t3 throw e ; } \n \t2 system . out . println ( i ) ; } \n <ect>
\t7 channel <identifiersep> listener < object > l = en . get <identifiersep> value ( ) ; \n \t7 if ( l instanceof message <identifiersep> listener ) { \n \t8 ( ( message <identifiersep> listener ) l ) . on <identifiersep> binary <identifiersep> message ( en . get <identifiersep> key ( ) , bb , <identifier> ) ; } \n \t6 } catch ( throwable e ) { \n <ect>
\t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 @ override \n \t1 protected void internal <identifiersep> receive <identifiersep> command ( string item <identifiersep> name , command command ) { \n \t2 if ( ! is <identifiersep> properly <identifiersep> configured ( ) ) { \n <ect>
\t2 protocol <identifiersep> provider <identifiersep> service provider = ( protocol <identifiersep> provider <identifiersep> service ) <identifier> <identifiersep> <identifier> <identifiersep> fixture . \n \t3 bc . get <identifiersep> service ( <identifier> <identifiersep> service <identifiersep> ref ) ; \n \t2 registration <identifiersep> failed <identifiersep> event <identifiersep> collector reg <identifiersep> failed <identifiersep> evt <identifiersep> collector = \n \t3 new registration <identifiersep> failed <identifiersep> event <identifiersep> collector ( ) ; \n <ect>
\t1 this . component <identifiersep> name = component <identifiersep> name ; \n \t1 log = log ; } \n @ override \n public void on <identifiersep> success ( void result ) { \n <ect>
\t1 @ get \n \t1 public json <identifiersep> collection <identifiersep> foo [ ] get ( ) throws exception { \n \t2 json <identifiersep> collection <identifiersep> foo [ ] foo = { new json <identifiersep> collection <identifiersep> foo ( <string_literal> ) , new json <identifiersep> collection <identifiersep> foo ( <string_literal> } <string_literal> start <string_literal> <ect>
<comment> \n \t1 protected void run <identifiersep> suite ( wsdl <identifiersep> test <identifiersep> suite suite ) { \n \t2 try { \n <ect>
<comment> \n \t1 public static content <identifiersep> name get <identifiersep> policy <identifiersep> name ( content <identifiersep> name global <identifiersep> prefix ) { \n \t2 return new content <identifiersep> name ( global <identifiersep> prefix , repo <identifiersep> data , repo <identifiersep> policy ) ; } \n \t1 public static policy <identifiersep> xml create <identifiersep> policy <identifiersep> xml ( input <identifiersep> stream stream ) throws content <identifiersep> decoding <identifiersep> exception { \n <ect>
\t3 tez <identifiersep> map <identifiersep> reduce <identifiersep> splits <identifiersep> <identifier> . tez <identifiersep> grouping <identifiersep> split <identifiersep> min <identifiersep> size , \n \t3 tez <identifiersep> map <identifiersep> reduce <identifiersep> splits <identifiersep> <identifier> . tez <identifiersep> grouping <identifiersep> split <identifiersep> min <identifiersep> size <identifiersep> default ) ; \n \t2 final long preferred <identifiersep> split <identifiersep> size = math . min ( block <identifiersep> size / <number_literal> , min <identifiersep> grouping ) ; \n \t2 hive <identifiersep> conf . set <identifiersep> long <identifiersep> var ( job <identifiersep> conf , hive <identifiersep> conf . conf <identifiersep> vars . <identifier> , preferred <identifiersep> split <identifiersep> size ) ; \n <ect>
\t2 final message <identifiersep> <identifier> message <identifiersep> <identifier> = get <identifiersep> message <identifiersep> <identifier> ( ) ; \n \t2 retry <identifiersep> interceptor . set <identifiersep> <identifier> ( ( args , cause ) - > { \n \t3 message message = ( message ) args [ 1 ] ; \n \t3 if ( message <identifiersep> <identifier> == null ) { \n <ect>
\t9 return iterators . for <identifiersep> enumeration ( net <identifiersep> iface . get <identifiersep> inet <identifiersep> addresses ( ) ) ; } \n \t7 } ) ) ) ; } \n \t2 catch ( socket <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 <comment> \n \t3 file <identifier> = new file ( curr <identifiersep> dir , utils . <identifier> <identifiersep> file <identifiersep> name ) ; \n \t3 if ( <identifier> . exists ( ) && <identifier> . can <identifiersep> read ( ) ) { \n \t4 string <identifier> = <identifier> . get <identifiersep> absolute <identifiersep> path ( ) ; \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> set <identifier> <identifiersep> <identifier> = mary <identifiersep> runtime <identifiersep> utils . need <identifiersep> <identifier> <identifiersep> set ( <string_literal> ) ; \n \t3 <identifier> . put ( locale . us , <identifier> <identifiersep> <identifier> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 try { \n \t7 if ( new <identifiersep> block <identifiersep> type == new <identifiersep> block <identifiersep> type . best <identifiersep> chain ) \n \t8 registration . listener . notify <identifiersep> new <identifiersep> best <identifiersep> block ( new <identifiersep> stored <identifiersep> block ) ; \n \t6 } catch ( verification <identifiersep> exception e ) { \n <ect>
\t3 total <identifiersep> blocks += num ; \n \t3 was <identifiersep> <identifier> = block <identifiersep> set <identifiersep> <identifier> ; } \n \t2 if ( was <identifiersep> <identifier> ) { \n \t3 if ( log <identifiersep> level . minor . matches <identifiersep> threshold ( logger . global <identifiersep> get <identifiersep> threshold <identifiersep> new ( ) ) ) \n <ect>
public class initial <identifiersep> task <identifiersep> manager implements initializing <identifiersep> bean { \n \t1 private static final logger logger = logger <identifiersep> factory . get <identifiersep> logger ( initial <identifiersep> task <identifiersep> manager . class ) ; \n \t1 @ override \n \t1 public void after <identifiersep> properties <identifiersep> set ( ) throws exception { \n <ect>
\t1 writer . write ( engine . process ( content ) ) ; \n \t1 } catch ( final wro <identifiersep> runtime <identifiersep> exception e ) { \n \t1 on <identifiersep> exception ( e ) ; \n \t1 final string resource <identifiersep> uri = resource == null ? string <identifiersep> utils . empty : <string_literal> + resource . get <identifiersep> uri ( ) + <string_literal> ; \n <ect>
\t2 ctx . io ( ) . remove <identifiersep> message <identifiersep> listener ( topic <identifiersep> <identifier> ) ; \n \t2 u . interrupt ( threads ) ; \n \t2 u . join <identifiersep> threads ( threads , log ) ; \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 s <identifiersep> logger . debug ( <string_literal> + vm + <string_literal> ) ; \n \t4 if ( cleanup <identifiersep> vm <identifiersep> resources ( vm . get <identifiersep> id ( ) ) ) { \n <ect>
\t1 public static void tear <identifiersep> down <identifiersep> class ( ) throws exception { \n \t2 try { \n \t3 testing <identifiersep> server . stop ( ) ; } \n \t2 catch ( io <identifiersep> exception e ) { \n <ect>
\t1 private void commands ( cli <identifiersep> request cli <identifiersep> request ) \n \t1 { \n \t2 if ( cli <identifiersep> request . show <identifiersep> errors ) \n \t2 { \n <ect>
\t1 <comment> \n \t1 thread setup <identifiersep> thread = new thread ( <string_literal> + solr <identifiersep> props <identifiersep> config . get <identifiersep> alias <identifiersep> name <identifiersep> in ( ) ) { \n \t1 @ override \n \t1 public void run ( ) { \n <ect>
\t2 public <identifiersep> key <identifiersep> object <identifier> = new public <identifiersep> key <identifiersep> object ( key <identifiersep> name , null ) ; <comment> \n \t2 assert . assert <identifiersep> true ( <identifier> . available ( ) ) ; \n \t2 assert . assert <identifiersep> equals ( <identifier> . get <identifiersep> versioned <identifiersep> name ( ) , pko . get <identifiersep> versioned <identifiersep> name ( ) ) ; \n \t2 if ( ! <identifier> . public <identifiersep> key ( ) . equals ( pko . public <identifiersep> key ( ) ) ) { \n <ect>
\t3 boolean call = true ; \n \t3 <comment> \n \t3 meta . put ( invocation <identifiersep> attempt <identifiersep> time , invocation <identifiersep> time ) ; \n \t3 if ( ! enabled ) { \n <ect>
\t2 thread . sleep ( <number_literal> ) ; \n \t2 <comment> \n \t2 int min <identifiersep> interests = ( int ) math . <identifier> ( ( double ) <identifier> / versioning <identifiersep> interest <identifiersep> manager . max <identifiersep> fill ) ; \n \t2 int max <identifiersep> interests = ( int ) math . floor ( ( double ) <identifier> / versioning <identifiersep> interest <identifiersep> manager . min <identifiersep> fill ) ; \n <ect>
\t2 j <identifiersep> meter <identifiersep> context context = get <identifiersep> thread <identifiersep> context ( ) ; \n \t2 sample <identifiersep> result previous <identifiersep> result = context . get <identifiersep> previous <identifiersep> result ( ) ; \n \t2 if ( previous <identifiersep> result == null ) { \n \t3 return ; } \n <ect>
\t1 private udp <identifiersep> socket <identifiersep> listener socket <identifiersep> listener = new udp <identifiersep> socket <identifiersep> listener ( received <identifiersep> traces ) ; \n \t1 private executor <identifiersep> service executor <identifiersep> service = executors . new <identifiersep> single <identifiersep> thread <identifiersep> executor ( ) ; \n \t1 @ override \n \t1 protected void before ( ) throws throwable { \n <ect>
\t5 <comment> \n \t5 big <identifiersep> card big <identifiersep> card = ( big <identifiersep> card ) card <identifiersep> preview <identifiersep> <identifier> ; \n \t5 display <identifiersep> card <identifiersep> info ( mage <identifiersep> card , image , big <identifiersep> card ) ; \n \t4 } else { \n <ect>
\t5 logger . debug ( <string_literal> , proxy . get <identifiersep> proxy <identifiersep> port ( ) ) ; \n \t5 connector . set <identifiersep> proxy <identifiersep> port ( proxy . get <identifiersep> proxy <identifiersep> port ( ) ) ; } \n \t4 connector . add <identifiersep> upgrade <identifiersep> protocol ( new <identifier> ( ) ) ; \n \t4 proxy . get <identifiersep> attributes ( ) . for <identifiersep> each ( connector : : set <identifiersep> attribute ) ; \n <ect>
\t1 @ override \n \t1 protected void run <identifiersep> internal ( ) throws exception \n \t1 { \n \t2 string wiki <identifiersep> id = get <identifiersep> request ( ) . get <identifiersep> wiki <identifiersep> id ( ) ; \n <ect>
\t6 make <identifiersep> <identifier> ( disk <identifiersep> settings ) ) ) ) ; \n \t2 cluster <identifiersep> info <identifiersep> service <identifier> = new cluster <identifiersep> info <identifiersep> service ( ) { \n \t3 @ override \n \t3 public cluster <identifiersep> info get <identifiersep> cluster <identifiersep> info ( ) { \n <ect>
\t3 try { \n \t4 run <identifiersep> wf <identifiersep> action <identifiersep> check ( ) ; \n \t4 run <identifiersep> coord <identifiersep> action <identifiersep> check ( ) ; } \n \t3 catch ( command <identifiersep> exception ce ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; \n \t3 if ( response <identifiersep> code == <number_literal> ) { \n \t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 try { \n \t3 channel <identifiersep> row <identifiersep> field = region <identifiersep> coprocessor <identifiersep> rpc <identifiersep> channel . class . get <identifiersep> declared <identifiersep> field ( <string_literal> ) ; \n \t3 channel <identifiersep> row <identifiersep> field . set <identifiersep> accessible ( true ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 attached <identifiersep> <identifier> . add ( process ) ; } \n \t1 public void run ( ) { \n \t2 process <identifiersep> builder <identifier> = new process <identifiersep> builder ( cmd <identifiersep> array ) ; \n \t2 try { \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> set de <identifiersep> <identifier> = mary <identifiersep> runtime <identifiersep> utils . need <identifiersep> <identifier> <identifiersep> set ( <string_literal> ) ; \n \t3 <identifier> . put ( locale . <identifier> , de <identifiersep> <identifier> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 list < string > list <identifiersep> hooks = config . get <identifiersep> topology <identifiersep> auto <identifiersep> task <identifiersep> hooks ( storm <identifiersep> conf ) ; \n \t2 for ( string hook : list <identifiersep> hooks ) { \n \t3 i <identifiersep> task <identifiersep> hook i <identifiersep> task <identifiersep> hook = ( i <identifiersep> task <identifiersep> hook ) utils . new <identifiersep> instance ( hook ) ; \n \t3 user <identifiersep> context . add <identifiersep> task <identifiersep> hook ( i <identifiersep> task <identifiersep> hook ) ; } \n <ect>
\t2 if ( ! hypervisor . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . param <identifiersep> error , <string_literal> ) ; } \n \t2 success <identifiersep> response response = new success <identifiersep> response ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t2 try { \n <ect>
\t1 protected principal get <identifiersep> access <identifiersep> token <identifiersep> authentication <identifiersep> principal ( final access <identifiersep> token access <identifiersep> token , final <identifier> <identifiersep> context context ) { \n \t2 final service service = access <identifiersep> token . get <identifiersep> service ( ) ; \n \t2 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 final principal current <identifiersep> principal = access <identifiersep> token . get <identifiersep> authentication ( ) . get <identifiersep> principal ( ) ; \n <ect>
\t4 <identifier> <identifiersep> storage = component <identifiersep> context . inject ( clazz ) ; \n \t3 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 throw new configuration <identifiersep> exception ( <string_literal> + value ) ; } } \n \t2 if ( ! <identifier> <identifiersep> storage . mkdirs ( <identifier> <identifiersep> parent ) ) { \n <ect>
\t1 while ( runner . is <identifiersep> alive ( ) ) { \n \t1 thread . sleep ( <identifier> ) ; } \n \t1 assert . assert <identifiersep> equals ( num <identifiersep> events - 1 , runner . get <identifiersep> count ( ) ) ; \n \t1 for ( exception ex : runner . get <identifiersep> errors ( ) ) { \n <ect>
\t1 <comment> \n \t1 try { \n \t2 in <identifiersep> reader . close ( ) ; \n \t1 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 appender < i <identifiersep> logging <identifiersep> event > appender = it . next ( ) ; \n \t3 if ( appender instanceof output <identifiersep> stream <identifiersep> appender && ! ( appender instanceof console <identifiersep> appender < ? > ) ) { \n \t4 <comment> \n \t4 ( ( output <identifiersep> stream <identifiersep> appender < i <identifiersep> logging <identifiersep> event > ) appender ) . set <identifiersep> immediate <identifiersep> flush ( ! buffered ) ; } } \n <ect>
\t3 } else { \n \t4 if ( attache == null ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + host <identifiersep> id + <string_literal> + <identifier> <identifiersep> node <identifiersep> id + <string_literal> ) ; \n \t4 } else { \n <ect>
\t3 if ( stmt != null ) { \n \t4 try { \n \t5 stmt . close ( ) ; } \n \t4 catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 . filter ( optional : : is <identifiersep> present ) \n \t3 . map ( optional : : get ) \n \t3 . map ( saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade : : get <identifiersep> metadata <identifiersep> resolver ) \n \t3 . collect ( collectors . to <identifiersep> list ( ) ) ; \n <ect>
\t3 log . warn ( <string_literal> , <identifier> ) ; \n \t3 throw new command <identifiersep> exception ( <identifier> ) ; } \n \t2 catch ( illegal <identifiersep> argument <identifiersep> exception <identifier> ) { \n \t3 exception <identifiersep> occured = true ; \n <ect>
\t2 return jms <identifiersep> producer ; } \n \t1 public message <identifiersep> producer create <identifiersep> jms <identifiersep> producer ( destination dest ) throws jms <identifiersep> exception { \n \t2 jms <identifiersep> producer = get <identifiersep> session ( ) . create <identifiersep> producer ( dest ) ; \n \t2 if ( client . get <identifiersep> delivery <identifiersep> mode ( ) . equals <identifiersep> ignore <identifiersep> case ( jms <identifiersep> producer <identifiersep> properties . delivery <identifiersep> mode <identifiersep> persistent ) ) { \n <ect>
\t5 string [ ] proxy <identifiersep> mappings = config . get <identifiersep> array ( <string_literal> ) ; \n \t5 truststore <identifiersep> provider truststore <identifiersep> provider = session . get <identifiersep> provider ( truststore <identifiersep> provider . class ) ; \n \t5 boolean disable <identifiersep> trust <identifiersep> manager = truststore <identifiersep> provider == null || truststore <identifiersep> provider . get <identifiersep> truststore ( ) == null ; \n \t5 if ( disable <identifiersep> trust <identifiersep> manager ) { \n <ect>
\t4 final string network = split <identifiersep> address . get ( 0 ) . trim ( ) ; \n \t4 final string netmask = split <identifiersep> address . get ( 1 ) . trim ( ) ; \n \t4 try { \n \t5 this . inet <identifiersep> network <identifiersep> range = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( network ) ; \n <ect>
\t4 clustered <identifiersep> agent <identifiersep> attache forward <identifiersep> attache = ( clustered <identifiersep> agent <identifiersep> attache ) create <identifiersep> attache ( host <identifiersep> id ) ; \n \t4 if ( forward <identifiersep> attache == null ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + host <identifiersep> id + <string_literal> ) ; \n \t5 return false ; } \n <ect>
\t2 <identifier> = value ; \n \t2 logger . info ( <string_literal> , <identifier> , agent <identifiersep> name ) ; \n \t2 return true ; \n \t2 } else { \n <ect>
\t2 for ( iterator < resource > iter = this . results . iterator ( ) ; iter . has <identifiersep> next ( ) ; ) { \n \t3 try { \n \t4 compile <identifiersep> result ( m , iter . next ( ) , dso <identifiersep> iri , name , value , lang ) ; \n \t3 } catch ( metadata <identifiersep> mapping <identifiersep> exception ex ) { \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name + <string_literal> + repl <identifiersep> dump <identifiersep> id , driver ) ; \n \t1 string incremental <identifiersep> dump <identifiersep> <identifier> = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 string incremental <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t7 break ; \n \t6 default : \n \t7 throw new io <identifiersep> exception ( <string_literal> + command . get <identifiersep> type ( ) ) ; } \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 container = action <identifiersep> context . get <identifiersep> context ( ) . get <identifiersep> container ( ) ; \n \t3 if ( container != null ) { \n \t4 boolean dev <identifiersep> mode = boolean . parse <identifiersep> boolean ( container . get <identifiersep> instance ( string . class , <identifier> <identifiersep> constants . <identifier> <identifiersep> <identifier> ) ) ; \n \t4 if ( dev <identifiersep> mode ) { \n <ect>
\t6 <comment> \n \t5 try { \n \t6 <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> ts <identifiersep> a <identifiersep> padding <identifiersep> <identifier> <identifiersep> sig . write ( <identifier> <identifiersep> cur <identifiersep> <identifier> ) ; \n \t5 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 web <identifiersep> socket <identifiersep> handler handler , string session <identifiersep> id , string transport ) throws sock <identifiersep> js <identifiersep> exception { \n \t2 transport <identifiersep> type transport <identifiersep> type = transport <identifiersep> type . from <identifiersep> value ( transport ) ; \n \t2 if ( transport <identifiersep> type == null ) { \n <ect>
\t3 conf , hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> <identifier> <identifiersep> resource <identifiersep> wait <identifiersep> interval , time <identifiersep> unit . milliseconds ) ; \n \t2 <comment> \n \t2 if ( ! check <identifiersep> or <identifiersep> wait <identifiersep> for <identifiersep> the <identifiersep> file ( \n \t3 src <identifiersep> fs , src , dest , conf , notifier <identifiersep> old , wait <identifiersep> attempts , sleep <identifiersep> interval , true ) ) { \n <ect>
\t2 <comment> \n \t2 throw e ; \n \t1 } catch ( exception ex ) { \n \t2 <comment> \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t6 dev . enqueue <identifiersep> message ( m , m <identifiersep> feature ) ; \n \t6 logger . info ( <string_literal> , <identifier> ( ) , dev . get <identifiersep> address ( ) ) ; \n \t6 m <identifiersep> feature . publish ( on <identifiersep> off <identifiersep> type . off , state <identifiersep> change <identifiersep> type . always , <string_literal> , <string_literal> ) ; \n \t5 } else { \n <ect>
\t4 } catch ( jms <identifiersep> exception e ) { \n \t5 assert <identifiersep> true ( e instanceof transaction <identifiersep> rolled <identifiersep> back <identifiersep> exception ) ; \n \t5 log . info ( <string_literal> , e ) ; } \n \t4 commit <identifiersep> done <identifiersep> latch . count <identifiersep> down ( ) ; \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 string passphrase <identifiersep> srvr = configs . get <identifiersep> configs <identifiersep> map ( ) . get ( configuration . \n \t2 passphrase . get <identifiersep> key ( ) ) . trim ( ) ; \n \t1 if ( ! passphrase <identifiersep> srvr . equals ( passphrase <identifiersep> agent . trim ( ) ) ) { \n <ect>
\t3 result <identifiersep> set rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( rs . next ( ) ) { \n \t4 return long . value <identifiersep> of ( rs . get <identifiersep> long ( 1 ) ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t5 final http <identifiersep> message msg = new http <identifiersep> message ( url , io <identifiersep> utils . to <identifiersep> string ( entity . get <identifiersep> content ( ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ) ; \n \t5 msg . set <identifiersep> content <identifiersep> type ( entity . get <identifiersep> content <identifiersep> type ( ) . get <identifiersep> value ( ) ) ; \n \t5 msg . set <identifiersep> response <identifiersep> code ( response <identifiersep> code ) ; \n \t5 return msg ; } } \n <ect>
\t3 s <identifiersep> logger . error ( <string_literal> + vmware <identifiersep> helper . get <identifiersep> exception <identifiersep> message ( e ) , e ) ; } \n \t2 return new check <identifiersep> health <identifiersep> answer ( cmd , false ) ; } \n \t1 protected answer execute ( stop <identifiersep> command cmd ) { \n <ect>
\t1 final string result = io <identifiersep> utils . to <identifiersep> string ( new auto <identifiersep> close <identifiersep> input <identifiersep> stream ( process . get <identifiersep> input <identifiersep> stream ( ) ) , encoding ) ; \n \t1 final int exit <identifiersep> status = process . wait <identifiersep> for ( ) ; <comment> \n \t1 if ( exit <identifiersep> status != 0 ) { \n \t2 final string compile <identifiersep> error = result ; \n <ect>
\t1 public int min <identifiersep> mapping <identifiersep> <identifier> <identifiersep> score = <number_literal> ; \n \t1 @ override \n \t1 public void initialize ( genome <identifiersep> analysis <identifiersep> engine engine ) { \n \t2 if ( min <identifiersep> mapping <identifiersep> <identifier> <identifiersep> score > 0 ) \n <ect>
\t1 public void setter <identifiersep> injection ( method method , object bean , string bean <identifiersep> name , string endpoint <identifiersep> uri , string endpoint <identifiersep> ref , string endpoint <identifiersep> property ) { \n \t2 class < ? > [ ] parameter <identifiersep> types = method . get <identifiersep> parameter <identifiersep> types ( ) ; \n \t2 if ( parameter <identifiersep> types != null ) { \n \t3 if ( parameter <identifiersep> types . length != 1 ) { \n <ect>
\t4 <comment> \n \t4 if ( concurrent == 0 ) { \n \t5 <comment> \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 } catch ( final io <identifiersep> exception ex ) { \n \t5 s <identifiersep> logger . trace ( <string_literal> + ex ) ; } \n \t3 } catch ( final http <identifiersep> exception ex ) { \n <ect>
\t9 return iterators . for <identifiersep> enumeration ( net <identifiersep> iface . get <identifiersep> inet <identifiersep> addresses ( ) ) ; } \n \t7 } ) ) ) ; } \n \t2 catch ( socket <identifiersep> exception e ) \n \t2 { \n <ect>
<number_literal> ) ; \n \t3 <comment> \n \t3 if ( interest . matches ( potential <identifiersep> collection <identifiersep> name , null ) ) { \n \t4 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> repo , level . info ) ) { \n <ect>
\t1 public void init <identifiersep> from <identifiersep> storm <identifiersep> conf ( map storm <identifiersep> conf ) { \n \t2 logger . info ( <string_literal> ) ; \n \t2 configuration conf = make <identifiersep> conf ( storm <identifiersep> conf ) ; \n \t2 h <identifiersep> table <identifiersep> pool = new h <identifiersep> table <identifiersep> pool ( conf , table <identifiersep> pool <identifiersep> size ) ; \n <ect>
\t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , e ) ; } } \n \t1 @ override \n \t1 public void release <identifiersep> ip <identifiersep> address ( string ip <identifiersep> address , long dc <identifiersep> id , long instance <identifiersep> id ) { \n <ect>
\t2 if ( ! http <identifiersep> credential . get <identifiersep> service ( ) . get <identifiersep> proxy <identifiersep> policy ( ) . is <identifiersep> allowed <identifiersep> proxy <identifiersep> callback <identifiersep> url ( http <identifiersep> credential . get <identifiersep> callback <identifiersep> url ( ) ) ) { \n \t3 logger . warn ( <string_literal> , \n \t5 http <identifiersep> credential . get <identifiersep> service ( ) . get <identifiersep> service <identifiersep> id ( ) , http <identifiersep> credential . get <identifiersep> callback <identifiersep> url ( ) ) ; \n \t3 throw new failed <identifiersep> login <identifiersep> exception ( http <identifiersep> credential . get <identifiersep> callback <identifiersep> url ( ) + <string_literal> ) ; } \n <ect>
\t5 upgrade ( index , index <identifiersep> folder <identifiersep> path , index <identifiersep> folder <identifiersep> path . resolve <identifiersep> <identifier> ( index . get <identifiersep> uuid ( ) ) ) ; \n \t4 } else { \n \t5 logger . debug ( <string_literal> , index <identifiersep> folder <identifiersep> path ) ; } \n \t3 } else { \n <ect>
\t5 if ( val != null && ( empty <identifiersep> ok || val . length > 0 ) ) { \n \t6 cached = cache <identifiersep> put ( <identifier> , less <identifiersep> bytes . to <identifiersep> string ( val ) ) ; \n \t6 break ; \n \t5 } else if ( trace ) { \n <ect>
\t3 if ( transfer <identifiersep> encoding <identifiersep> header <identifiersep> value != null ) { \n \t4 is <identifiersep> chunked = transfer <identifiersep> encoding <identifiersep> header <identifiersep> value . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ; <comment> \n \t4 <comment> \n \t4 if ( ! is <identifiersep> chunked ) { \n <ect>
\t7 warn ( <string_literal> , pig <identifiersep> warning . unable <identifiersep> to <identifiersep> close <identifiersep> <identifier> <identifiersep> file , e ) ; } } } \n \t4 <comment> \n \t4 for ( file f : files <identifiersep> to <identifiersep> delete ) { \n \t5 if ( f . delete ( ) == false ) { \n <ect>
\t1 string json <identifiersep> data = null ; \n \t1 try { \n \t1 json <identifiersep> data = mapper . write <identifiersep> value <identifiersep> as <identifiersep> string ( list ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 mdc . put ( <string_literal> , <string_literal> ) ; \n \t2 mdc . put ( <string_literal> , <string_literal> ) ; \n <ect>
\t4 if ( session <identifiersep> valid ) { \n \t5 logger . debug ( <string_literal> + session <identifiersep> id ) ; \n \t5 set <identifiersep> authenticated ( session <identifiersep> id , user ) ; \n \t4 } else { \n <ect>
\t3 <string_literal> . format ( llap <identifiersep> app <identifiersep> name , llap <identifiersep> app <identifiersep> info [ <identifier> ] ) ) \n \t3 logger . info ( llap <identifiersep> app <identifiersep> info ) \n \t3 return false \n \t2 if desired <identifiersep> instances == 0 : \n <ect>
private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( simple <identifiersep> timer . class ) ; \n private static class exception <identifiersep> handler implements thread . uncaught <identifiersep> exception <identifiersep> handler { \n \t1 @ override \n \t1 public void uncaught <identifiersep> exception ( thread t , throwable e ) { \n <ect>
\t3 if ( zk <identifiersep> cluster <identifiersep> state . node <identifiersep> <identifier> ( storm <identifiersep> base , false ) ) { \n \t4 try { \n \t5 zk <identifiersep> cluster <identifiersep> state . delete <identifiersep> node ( storm <identifiersep> base ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 iface . set <identifiersep> binding <identifiersep> name ( binding . get <identifiersep> q <identifiersep> name ( ) ) ; \n \t2 iface . set <identifiersep> soap <identifiersep> version ( soap <identifiersep> version . <identifier> ) ; \n \t2 string [ ] endpoints = wsdl <identifiersep> utils . get <identifiersep> endpoints <identifiersep> for <identifiersep> binding ( wsdl <identifiersep> context . get <identifiersep> definition ( ) , binding ) ; \n \t2 for ( int i = 0 ; i < endpoints . length ; i ++ ) { \n <ect>
\t1 if ( to <identifiersep> parse != null ) { \n \t2 try { \n \t3 val = long . value <identifiersep> of ( to <identifiersep> parse ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 vault <identifiersep> option . get ( <string_literal> ) . set ( salt ) ; \n \t2 vault <identifiersep> option . get ( <string_literal> ) . set ( integer . to <identifiersep> string ( iter <identifiersep> count ) ) ; \n \t2 vault <identifiersep> option . get ( <string_literal> ) . set ( resource <identifiersep> location ) ; \n \t2 utils . apply <identifiersep> update ( op , management <identifiersep> client . get <identifiersep> controller <identifiersep> client ( ) ) ; \n <ect>
\t6 thread . sleep ( <number_literal> ) ; \n \t5 } catch ( interrupted <identifiersep> exception e1 ) { \n \t6 log . warn ( <string_literal> , e ) ; } \n \t5 if ( shutdown ) { \n <ect>
\t1 } else { \n \t2 logger . info ( <string_literal> + function . description ) } \n \t1 logger . info ( <string_literal> + function . job <identifiersep> output <identifiersep> file ) \n \t1 if ( function . job <identifiersep> error <identifiersep> file != null ) \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> verify <identifiersep> scopes <identifiersep> local <identifiersep> ejb ( ) throws exception { \n <ect>
\t3 int index = find <identifiersep> contact <identifiersep> group <identifiersep> index ( group ) ; \n \t3 if ( index == - 1 ) \n \t3 { \n <ect>
\t3 if ( agent . initialize ( instrumentation , args ) ) { \n \t4 if ( agent . get <identifiersep> configuration ( ) . is <identifiersep> start <identifiersep> <identifier> <identifiersep> agent ( ) ) { \n \t5 jvm <identifiersep> agent . <identifier> ( args , instrumentation ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t1 { \n \t2 storage <identifiersep> service . instance . confirm <identifiersep> replication ( msg . from ) ; \n \t2 message <identifiersep> out response = new message <identifiersep> out ( messaging <identifiersep> service . verb . internal <identifiersep> response ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 2l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> size ( 0 ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 2l ) ) ; } \n <ect>
\t2 if ( map <identifiersep> to != null ) { \n \t2 map <identifiersep> to . put ( resource <identifiersep> name , xml <identifiersep> <identifier> <identifiersep> helper . get <identifiersep> node <identifiersep> text ( <string_literal> , resource <identifiersep> node , resource <identifiersep> name ) ) ; <comment> \n \t1 return i <identifiersep> sequence <identifiersep> definition . action <identifiersep> sequence <identifiersep> definition <identifiersep> ok ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 builder builder = new async <identifiersep> http <identifiersep> client <identifiersep> config . builder ( ) ; \n \t2 builder . set <identifiersep> request <identifiersep> timeout <identifiersep> in <identifiersep> ms ( request <identifiersep> timeout <identifiersep> ms ) ; \n \t2 return builder . build ( ) ; } \n \t1 private synchronized void refresh <identifiersep> sessions ( ) { \n <ect>
\t7 log . error ( <string_literal> + e . get <identifiersep> localized <identifiersep> message ( ) , e ) ; \n \t6 } catch ( interrupted <identifiersep> exception e ) { \n \t7 log . info ( <string_literal> ) ; } } } \n \t3 } catch ( jms <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 return false ; } \n \t1 private void setup <identifiersep> agent <identifiersep> security ( final connection ssh <identifiersep> connection , final string agent <identifiersep> ip , final string agent <identifiersep> hostname ) { \n \t2 if ( ! ca <identifiersep> manager . can <identifiersep> provision <identifiersep> certificates ( ) ) { \n <ect>
\t3 load <identifiersep> data ( false ) ; \n \t3 if ( this . n <identifiersep> keys > 0 ) \n \t4 this . first <identifiersep> key = this . keys [ 0 ] ; \n \t3 flush ( ) ; \n <ect>
\t3 collection < mx <identifiersep> bean > mx <identifiersep> beans = mx <identifiersep> bean <identifiersep> storage . get <identifiersep> instance ( ) . get <identifiersep> mx <identifiersep> beans ( ) ; \n \t3 for ( mx <identifiersep> bean mx <identifiersep> bean : mx <identifiersep> beans ) { \n \t4 data <identifiersep> collector collector = mx <identifiersep> bean . <identifier> <identifiersep> data <identifiersep> collector ( agent <identifiersep> config . get <identifiersep> home ( ) . get <identifiersep> directory ( ) ) ; \n \t4 scheduler . schedule <identifiersep> with <identifiersep> fixed <identifiersep> delay ( collector , 0l , get <identifiersep> interval ( ) , time <identifiersep> unit . seconds ) ; \n <ect>
public void test <identifiersep> sequence <identifiersep> file <identifiersep> export ( ) throws exception { \n \t1 final int total <identifiersep> records = <number_literal> ; \n \t1 <comment> \n \t1 <comment> \n <ect>
\t2 } catch ( t <identifiersep> exception e ) { \n \t3 log . info ( <string_literal> , e ) ; \n \t3 throw e ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( type == 0 ) { \n \t3 token <identifiersep> data = list . get ( 0 ) ; \n \t2 } else { \n \t3 if ( type > list . size ( ) ) { \n <ect>
\t2 <comment> \n \t2 ctx . get <identifiersep> pipeline ( ) . remove ( this ) ; \n \t2 channel <identifiersep> authenticated ( ctx ) ; } \n \t1 private void process <identifiersep> new <identifiersep> identity ( net <identifiersep> data . provision <identifiersep> identity provision <identifiersep> identity , channel <identifiersep> handler <identifiersep> context ctx ) { \n <ect>
\t5 string path = context . get <identifiersep> context <identifiersep> path ( ) . replace ( ' / ' , <identifier> ) ; \n \t5 string interface <identifiersep> name = controller . get <identifiersep> name ( ) + <string_literal> + path ; \n \t5 link <identifiersep> to <identifiersep> interface = create <identifiersep> link <identifiersep> to <identifiersep> interface ( controller , interface <identifiersep> name ) ; \n \t5 interfaces . put ( controller , link <identifiersep> to <identifiersep> interface ) ; \n <ect>
\t4 this . get <identifiersep> node ( ) . set <identifiersep> device <identifiersep> type ( temp <identifiersep> device <identifiersep> type ) ; \n \t4 this . get <identifiersep> node ( ) . set <identifiersep> device <identifiersep> id ( temp <identifiersep> device <identifiersep> id ) ; \n \t4 logger . debug ( string . format ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) , \n \t6 this . get <identifiersep> node ( ) . get <identifiersep> manufacturer ( ) ) ) ; \n <ect>
\t2 final cluster cluster = clusters . get ( ) . get <identifiersep> cluster ( context . get <identifiersep> cluster <identifiersep> name ( ) ) ; \n \t2 version <identifiersep> definition <identifiersep> xml xml = repo <identifiersep> version . get <identifiersep> repository <identifiersep> xml ( ) ; \n \t2 summary = xml . get <identifiersep> cluster <identifiersep> summary ( cluster ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 { \n \t3 <comment> \n \t3 <comment> \n \t3 t . add <identifiersep> suppressed ( error . cause ( ) ) ; \n <ect>
\t2 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n \t2 log . error ( <string_literal> , cluster <identifiersep> id , e ) ; \n \t2 throw new illegal <identifiersep> cluster <identifiersep> exception ( e ) ; \n \t2 } catch ( cluster <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 log . trace ( <string_literal> + in <identifiersep> key + <string_literal> + in <identifiersep> value ) ; } \n \t2 if ( in <identifiersep> value == null ) \n \t2 { \n \t3 <comment> \n <ect>
\t2 try { \n \t3 file <identifiersep> utils . write <identifiersep> string <identifiersep> to <identifiersep> file ( file , content ) ; \n \t3 logger . debug ( <string_literal> , file . get <identifiersep> absolute <identifiersep> path ( ) , content ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 fail ( <string_literal> ) ; } \n \t2 this . store . put ( key <identifiersep> byte <identifiersep> array , versioned <identifiersep> val , null ) ; \n \t2 <comment> \n \t2 try { \n <ect>
@ override \n public synchronized < t extends indexed > list < t > load <identifiersep> all ( class < t > model , filtering <identifiersep> strategy filter ) { \n \t1 array <identifiersep> list < t > list = new array <identifiersep> list < t > ( ) ; \n \t1 string model <identifiersep> indexing <identifiersep> prop <identifiersep> name = get <identifiersep> index <identifiersep> property <identifiersep> name ( model ) ; \n <ect>
\t2 log . debug ( <string_literal> , name ( ) ) ; } \n \t1 @ override \n \t1 public void did <identifiersep> update ( ) { \n \t2 super . did <identifiersep> update ( ) ; \n <ect>
\t3 try { \n \t4 t . join ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception ie ) { \n <ect>
\t6 ++ number <identifiersep> optional <identifiersep> fields ; } \n \t5 int pos = data <identifiersep> field . pos ( ) ; \n \t5 if ( annotated <identifiersep> fields . contains <identifiersep> key ( pos ) ) { \n \t6 field f = annotated <identifiersep> fields . get ( pos ) ; \n <ect>
\t3 <identifier> <identifiersep> shell . get <identifiersep> backoff <identifiersep> algorithm ( ) . wait <identifiersep> before <identifiersep> retry ( ) ; \n \t3 s <identifiersep> logger . info ( <string_literal> + last <identifiersep> connected <identifiersep> host + <string_literal> ) ; \n \t3 in <identifiersep> progress = <identifier> <identifiersep> in <identifiersep> progress . get ( ) ; \n \t3 if ( in <identifiersep> progress > 0 ) { \n <ect>
\t5 try { \n \t6 <comment> \n \t6 record <identifiersep> metadata response = response <identifiersep> <identifier> . get ( ) ; \n \t6 if ( response . topic ( ) == null ) { \n <ect>
\t3 try { \n \t4 binding . add ( var . alloc ( n ) , x . as <identifiersep> node ( ) ) ; } \n \t3 catch ( <identifier> <identifiersep> internal <identifiersep> error <identifiersep> exception ex ) { \n \t4 <comment> \n <ect>
\t2 { \n \t3 delete <identifiersep> on <identifiersep> halt <identifiersep> hook . run <identifiersep> hooks ( ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n <ect>
\t4 log . info ( <string_literal> + in <identifiersep> gadget <identifiersep> definition . get <identifiersep> gadget <identifiersep> <identifier> ( ) ) ; \n \t4 in <identifiersep> gadget <identifiersep> definition . set <identifiersep> gadget <identifiersep> title ( metadata . get <identifiersep> title ( ) ) ; \n \t4 log . info ( <string_literal> + in <identifiersep> gadget <identifiersep> definition . get <identifiersep> gadget <identifiersep> title ( ) ) ; \n \t4 in <identifiersep> gadget <identifiersep> definition . set <identifiersep> gadget <identifiersep> description ( metadata . get <identifiersep> description ( ) ) ; \n <ect>
\t2 save <identifiersep> site <identifiersep> config ( file <identifiersep> for <identifiersep> site <identifiersep> config ( ) , generate <identifiersep> site <identifiersep> config <identifiersep> xml ( ) , false ) ; } \n \t1 public void save <identifiersep> site <identifiersep> config ( file sc , string value , boolean compress ) { \n \t2 try { \n \t3 if ( sc . exists ( ) && ! sc . can <identifiersep> write ( ) ) { \n <ect>
\t4 final <identifier> . record <identifier> = new <identifier> . record ( ) ; \n \t4 <identifier> . vm = <identifier> ; \n \t4 <identifier> . device = get <identifiersep> <identifier> <identifiersep> available <identifiersep> <identifier> <identifiersep> device <identifiersep> num ( conn , <identifier> ) ; \n \t4 if ( <identifier> . device == null ) { \n <ect>
\t1 log . debug ( <string_literal> , best . get <identifiersep> attr ( ) , best . get <identifiersep> split ( ) , best . get <identifiersep> <identifier> ( ) ) ; \n \t1 boolean already <identifiersep> selected = selected [ best . get <identifiersep> attr ( ) ] ; \n \t1 if ( already <identifiersep> selected ) { \n \t1 <comment> \n <ect>
\t5 logger . info ( <string_literal> , <identifier> ( ) , dev . get <identifiersep> address ( ) ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> , <identifier> ( ) , e ) ; \n \t3 } catch ( field <identifiersep> exception e ) { \n <ect>
\t3 <identifier> <identifiersep> nodes . clear ( ) ; \n \t3 removing <identifiersep> node = null ; } \n \t2 else \n \t2 { \n <ect>
def object run ( final object . . . args ) { \n \t1 def principal = args [ 0 ] \n \t1 def principal <identifiersep> attributes = args [ 1 ] \n \t1 def logger = args [ <number_literal> ] \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 if ( checkpoint <identifiersep> thread != null && ! checkpoint <identifiersep> thread . is <identifiersep> alive ( ) ) { \n \t4 start <identifiersep> checkpoint ( ) ; } \n \t3 return location ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 ssh . disconnect ( ) ; \n \t2 } catch ( assertion <identifiersep> error e ) { \n \t3 <comment> \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 conn . table <identifiersep> operations ( ) . create ( table <identifiersep> name ) ; \n \t1 add <identifiersep> splits ( conn , table <identifiersep> name ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 generate <identifiersep> sample <identifiersep> data ( conn , table <identifiersep> name ) ; \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t5 return false ; } \n \t4 success = <identifier> <identifiersep> auto <identifiersep> scale <identifiersep> policy <identifiersep> condition <identifiersep> map <identifiersep> dao . remove <identifiersep> by <identifiersep> auto <identifiersep> scale <identifiersep> policy <identifiersep> id ( id ) ; \n \t4 if ( ! success ) { \n <ect>
\t3 if ( ! ( class <identifiersep> name . starts <identifiersep> with ( <string_literal> ) || class <identifiersep> name . starts <identifiersep> with ( <string_literal> ) ) ) { \n \t4 try { \n \t5 <identifier> . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> , new class [ ] { string . class } ) . invoke ( <identifier> , url ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception ex ) { \n <ect>
\t2 return result ; } \n \t1 protected static boolean has <identifiersep> command <identifiersep> succeeded ( satel <identifiersep> message response ) { \n \t2 <comment> \n \t2 if ( response . get <identifiersep> command ( ) != command <identifiersep> result <identifiersep> code ) { \n <ect>
\t3 out . close ( ) ; \n \t3 out = null ; } \n \t2 catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) \n \t2 { \n <ect>
<comment> \n \t1 public void test <identifiersep> log ( ) { \n <ect>
\t5 specified <identifiersep> default <identifiersep> value = <string_literal> , \n \t5 <identifier> <identifiersep> default <identifiersep> value = <string_literal> , \n \t5 option <identifiersep> context = <string_literal> ) final string directory ) { \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( file ) && string <identifiersep> utils . is <identifiersep> blank ( directory ) ) { \n <ect>
\t2 ci = compaction <identifiersep> info . load <identifiersep> full <identifiersep> from <identifiersep> compaction <identifiersep> queue ( rs ) ; \n \t2 string s = <string_literal> ; \n \t2 p <identifiersep> stmt = db <identifiersep> conn . prepare <identifiersep> statement ( s ) ; \n \t2 p <identifiersep> stmt . set <identifiersep> long ( 1 , ci . id ) ; \n <ect>
\t3 assert <identifiersep> equals ( requests , success <identifiersep> counter . get ( ) + timeout <identifiersep> counter . get ( ) ) ; \n \t3 return timeout <identifiersep> counter . get ( ) ; } \n \t2 finally { \n \t3 logger . info ( <string_literal> + context <identifiersep> config ) ; \n <ect>
\t1 this . events . clear ( ) ; } \n private t <identifiersep> protocol next ( ) { \n \t1 return events . remove <identifiersep> first ( ) ; } \n public t <identifiersep> message read <identifiersep> message <identifiersep> begin ( ) throws t <identifiersep> exception { \n <ect>
\t4 multi <identifiersep> callback . on <identifiersep> error ( e ) ; } \n \t3 @ override \n \t3 public void on <identifiersep> success ( none result ) \n \t3 { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t3 if ( replaced ) { \n \t4 object <identifiersep> mapper . enable ( serialization <identifiersep> feature . indent <identifiersep> output ) ; \n \t4 object <identifiersep> mapper . write <identifiersep> value ( f , root <identifiersep> node ) ; } \n \t2 } catch ( json <identifiersep> processing <identifiersep> exception ex ) { \n <ect>
\t3 log . warn ( <string_literal> , index <identifiersep> path , watch ) ; } \n \t2 if ( clean <identifiersep> work <identifiersep> dir ) { \n \t3 file <identifiersep> utils . delete <identifiersep> quietly ( work <identifiersep> dir ) ; \n \t2 } else if ( work <identifiersep> dir != null ) { \n <ect>
\t4 try { \n \t5 final inet <identifiersep> address by <identifiersep> name = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( get <identifiersep> cluster <identifiersep> host <identifiersep> name ( ) ) ; \n \t5 port = network <identifiersep> utils . check <identifiersep> port <identifiersep> availability ( by <identifiersep> name , port , <number_literal> ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e2 ) { \n \t1 logger . error ( <string_literal> , e2 ) ; \n \t1 <identifier> . set <identifiersep> error ( <string_literal> + e2 . get <identifiersep> message ( ) ) ; \n \t1 } catch ( property <identifiersep> <identifier> <identifiersep> exception e ) { \n <ect>
\t4 if ( result != null ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + result ) ; \n \t5 return new create <identifiersep> private <identifiersep> template <identifiersep> answer ( command , false , result ) ; } \n \t3 } else { \n <ect>
\t2 wo <identifiersep> response response = <identifier> <identifiersep> app . create <identifiersep> response <identifiersep> in <identifiersep> context ( null ) ; \n \t2 wo <identifiersep> resource <identifiersep> manager resource <identifiersep> manager = <identifier> <identifiersep> app . resource <identifiersep> manager ( ) ; \n \t2 <identifier> <identifiersep> <identifier> <identifiersep> element <identifiersep> data a <identifiersep> resource <identifiersep> data <identifiersep> object = resource <identifiersep> manager . <identifier> <identifiersep> cached <identifiersep> data <identifiersep> for <identifiersep> key ( a <identifiersep> resource <identifiersep> key ) ; \n \t2 if ( a <identifiersep> resource <identifiersep> data <identifiersep> object == null ) { \n <ect>
\t6 + previous <identifiersep> message <identifiersep> id + <string_literal> + b <identifiersep> message <identifiersep> receipt <identifiersep> is <identifiersep> ordered + <string_literal> \n \t6 + <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - message . get <identifiersep> long <identifiersep> property ( <string_literal> ) ) + <string_literal> + <string_literal> \n \t6 + counter . get ( ) ) ; \n \t4 if ( ! b <identifiersep> fake <identifiersep> fail ) { \n <ect>
\t4 continue ; } \n \t3 <comment> \n \t3 partition p = resolve <identifiersep> partition ( ci ) ; \n \t3 if ( p == null && ci . part <identifiersep> name != null ) { \n <ect>
\t5 @ override \n \t5 public void run ( ) { \n \t6 <identifier> ( latch ) ; } \n \t4 } ) ; } \n <ect>
\t2 assert <identifiersep> that ( routing <identifiersep> node <identifiersep> <identifier> . number <identifiersep> of <identifiersep> shards <identifiersep> with <identifiersep> state ( started ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 routing <identifiersep> node routing <identifiersep> node <identifiersep> <identifier> = cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( node2 ) ; \n \t2 assert <identifiersep> that ( routing <identifiersep> node <identifiersep> <identifier> . number <identifiersep> of <identifiersep> shards <identifiersep> with <identifiersep> state ( initializing ) , equal <identifiersep> to ( 0 ) ) ; \n \t2 assert <identifiersep> that ( routing <identifiersep> node <identifiersep> <identifier> . number <identifiersep> of <identifiersep> shards <identifiersep> with <identifiersep> state ( started ) , equal <identifiersep> to ( <number_literal> ) ) ; \n <ect>
\t3 super ( p ) ; } \n \t2 @ override \n \t2 public void handle <identifiersep> message ( int group , byte <identifier> , msg msg , device <identifiersep> feature f , string from <identifiersep> port ) { \n \t3 insteon <identifiersep> address a = f . get <identifiersep> device ( ) . get <identifiersep> address ( ) ; \n <ect>
\t8 sync . lock <identifiersep> page ( 0 ) ; \n \t8 thread . sleep ( 1 ) ; \n \t8 logger . debug ( thread . current <identifiersep> thread ( ) . get <identifiersep> name ( ) + <string_literal> ) ; \n \t8 sync . unlock <identifiersep> all <identifiersep> pages ( ) ; \n <ect>
<comment> \n \t1 void received ( int block <identifiersep> num , byte [ ] data , int offset , int length ) { \n \t2 if ( block <identifiersep> num > blocks ) { \n <ect>
\t3 <comment> \n \t3 <identifier> <identifiersep> current <identifiersep> request . wait <identifiersep> for <identifiersep> next <identifiersep> allocation ( ) ; \n \t3 if ( <identifier> <identifiersep> current <identifiersep> request . get <identifiersep> aborted ( ) ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 broadcast <identifiersep> on <identifiersep> resume . clear ( ) ; } } \n \t1 @ override \n \t1 public future < object > broadcast ( object msg , set < atmosphere <identifiersep> resource > <identifier> ) { \n \t2 if ( destroyed . get ( ) ) { \n <ect>
\t3 message = version \n \t5 + ( ! message <identifiersep> tail . starts <identifiersep> with ( <string_literal> ) ? <string_literal> + message <identifiersep> tail . length ( ) + <string_literal> : <string_literal> ) \n \t5 + message <identifiersep> tail + checksum ; \n \t2 } else { \n <ect>
\t3 status <identifiersep> task <identifiersep> port port = ( status <identifiersep> task <identifiersep> port ) core ; \n \t3 job = get <identifiersep> job ( port . get <identifiersep> job <identifiersep> uuid ( ) ) ; \n \t3 task = get <identifiersep> task ( port . get <identifiersep> job <identifiersep> uuid ( ) , port . get <identifiersep> node <identifiersep> id ( ) ) ; \n \t3 if ( task != null ) { \n <ect>
\t4 } catch ( not <identifiersep> connected <identifiersep> exception e1 ) { \n \t5 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> + uid ) ; \n \t5 return ; \n \t4 } catch ( waited <identifiersep> too <identifiersep> long <identifiersep> exception e1 ) { \n <ect>
\t3 execute ( <string_literal> , 1 , 0 , 0 , 0 ) ; \n \t3 execute ( <string_literal> , 1 , 0 , 1 , 0 ) ; \n \t3 execute ( <string_literal> , 1 , 1 , 0 , 0 ) ; \n \t3 execute ( <string_literal> , 1 , 1 , 1 , 0 ) ; \n <ect>
\t4 return clazz . get <identifiersep> method ( method <identifiersep> name , ( class < ? > [ ] ) null ) ; \n \t3 } else { \n \t4 return clazz . get <identifiersep> method ( method <identifiersep> name , value . get <identifiersep> class ( ) ) ; } \n \t2 } catch ( security <identifiersep> exception e ) { \n <ect>
\t3 channel . start ( channel <identifiersep> start <identifiersep> options ) ; \n \t3 if ( cluster <identifiersep> deployer != null ) cluster <identifiersep> deployer . start ( ) ; \n \t3 register <identifiersep> member ( channel . get <identifiersep> local <identifiersep> member ( false ) ) ; \n \t2 } catch ( exception x ) { \n <ect>
\t2 input <identifiersep> stream in ; \n \t2 try { \n \t3 in = new buffered <identifiersep> input <identifiersep> stream ( new file <identifiersep> input <identifiersep> stream ( file ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 marshal <identifiersep> credentials ( loc <identifiersep> node ) ; \n \t2 while ( true ) { \n \t3 if ( ! send <identifiersep> join <identifiersep> request <identifiersep> message ( ) ) { \n <ect>
\t2 final string local <identifiersep> node <identifiersep> id = state . nodes ( ) . get <identifiersep> local <identifiersep> node <identifiersep> id ( ) ; \n \t2 assert local <identifiersep> node <identifiersep> id != null ; \n \t2 for ( index index : event . indices <identifiersep> deleted ( ) ) { \n <ect>
\t2 <comment> \n \t2 query <identifiersep> user = session <identifiersep> state . get <identifiersep> user <identifiersep> from <identifiersep> authenticator ( ) ; \n \t2 if ( query <identifiersep> user == null ) { \n \t2 query <identifiersep> user = user <identifiersep> group <identifiersep> information . get <identifiersep> current <identifiersep> user ( ) . get <identifiersep> user <identifiersep> name ( ) ; \n <ect>
elif options . action == <string_literal> : \n \t1 if options . left <identifiersep> input <identifiersep> dir and os . path . <identifier> ( options . left <identifiersep> input <identifiersep> dir ) : \n \t1 config <identifiersep> merge . left <identifiersep> input <identifiersep> dir = options . left <identifiersep> input <identifiersep> dir \n \t1 else : \n <ect>
\t5 } else { \n \t6 in . set <identifiersep> body ( xml <identifiersep> fragment ) ; } } \n \t3 } ) ; } \n \t2 result <identifiersep> endpoint . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n <ect>
\t5 p <identifiersep> stmt . set <identifiersep> int ( <number_literal> , ids . get ( i ) ) ; \n \t5 duplicate <identifiersep> name <identifiersep> id += 1 ; \n \t5 p <identifiersep> stmt . execute <identifiersep> update ( ) ; } } } \n \t2 catch ( batch <identifiersep> update <identifiersep> exception e ) { \n <ect>
\t1 public serial <identifiersep> message build <identifiersep> get <identifiersep> message ( int type , integer . . . arg <identifiersep> bytes ) { \n \t2 if ( type != user <identifiersep> number <identifiersep> get && type != user <identifiersep> code <identifiersep> get ) { \n \t3 logger . error ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) , ( 0xff & type ) ) ; \n \t3 return null ; } \n <ect>
\t5 resume <identifiersep> on <identifiersep> next <identifiersep> or <identifiersep> previous <identifiersep> is <identifiersep> ok = false ; \n \t5 <comment> \n \t5 next <identifiersep> expected <identifiersep> seq <identifiersep> num -= <identifier> <identifiersep> batch ; } \n \t3 } catch ( throwable e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 log . info ( <string_literal> + lock <identifiersep> acquire <identifiersep> sleep <identifiersep> interval + <string_literal> ) ; \n \t3 try { \n \t4 thread . sleep ( lock <identifiersep> acquire <identifiersep> sleep <identifiersep> interval ) ; \n \t3 } catch ( interrupted <identifiersep> exception ie ) { \n <ect>
\t2 add <identifiersep> content <identifiersep> to <identifiersep> repo ( <identifier> + <string_literal> ) ; \n \t2 <comment> \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 test <identifiersep> get <identifiersep> response ( <number_literal> ) ; \n <ect>
\t4 logger . error ( <string_literal> , item . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , \n \t6 status <identifiersep> address . get <identifiersep> address <identifiersep> type ( ) ) ; \n \t4 break ; \n \t3 case output : \n <ect>
\t5 for ( string item <identifiersep> name : get <identifiersep> item <identifiersep> names <identifiersep> for <identifiersep> pin ( <identifier> <identifiersep> id , <identifier> <identifiersep> binding <identifiersep> config . binding <identifiersep> type . in , \n \t7 pin <identifiersep> number ) ) { \n \t6 update <identifiersep> item <identifiersep> state ( item <identifiersep> name , pin <identifiersep> value ) ; } } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 string principal <identifiersep> name , principal <identifiersep> type principal <identifiersep> type , query <identifiersep> wrapper query <identifiersep> wrapper ) { \n \t1 boolean success = false ; \n \t1 list < m <identifiersep> table <identifiersep> privilege > m <identifiersep> security <identifiersep> tab <identifiersep> part <identifiersep> list = null ; \n \t1 try { \n <ect>
\t3 throw new file <identifiersep> not <identifiersep> found <identifiersep> exception ( <string_literal> ) ; } \n \t2 try { \n \t3 charset = get <identifiersep> file <identifiersep> charset ( input <identifiersep> file ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t8 the <identifiersep> binding . channels . set <identifiersep> all <identifiersep> <identifier> ( the <identifiersep> channel . channel , false ) ; \n \t8 the <identifiersep> channel . channel . connect ( the <identifiersep> channel . remote ) ; \n \t8 logger . info ( <string_literal> , the <identifiersep> channel . remote ) ; } \n \t6 } catch ( exception e ) { \n <ect>
\t2 logger . trace ( <string_literal> , prefix ) ; \n \t2 try { \n \t3 return blob <identifiersep> store . list <identifiersep> blobs <identifiersep> by <identifiersep> prefix ( key <identifiersep> path , prefix ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception | storage <identifiersep> exception e ) { \n <ect>
\t5 try { \n \t6 fs . rename ( tmp <identifiersep> path , path ) ; \n \t6 fs . set <identifiersep> permission ( path , fs <identifiersep> permission . create <identifiersep> immutable ( ( short ) <number_literal> ) ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 user <identifiersep> selection <identifiersep> action <identifiersep> config user <identifiersep> selection = create <identifiersep> user <identifiersep> assignment <identifiersep> action <identifiersep> config ( user <identifiersep> selection <identifiersep> action <identifiersep> id ) ; \n \t3 return new step ( step <identifiersep> id , workflow , role , user <identifiersep> selection , get <identifiersep> step <identifiersep> action <identifiersep> configs ( step <identifiersep> node ) , \n \t7 get <identifiersep> step <identifiersep> <identifier> ( step <identifiersep> node ) , get <identifiersep> nb <identifiersep> required <identifiersep> user ( step <identifiersep> node ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
public final class test <identifiersep> stored <identifiersep> function { \n \t1 private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( test <identifiersep> stored <identifiersep> function . class ) ; \n \t1 private test <identifiersep> stored <identifiersep> function ( ) { } \n \t1 public static int <identifier> ( int <identifier> , int <identifier> ) { \n <ect>
<comment> \n \t1 @ override \n \t1 protected string submit ( ) throws command <identifiersep> exception { \n \t2 string job <identifiersep> id = null ; \n <ect>
\t7 current <identifiersep> stage . to <identifiersep> string ( ) ) ; \n \t5 if ( current <identifiersep> stage . is <identifiersep> stage <identifiersep> mandatory ( ) == false ) { \n \t6 <comment> \n \t6 <comment> \n <ect>
\t4 i2p <identifiersep> server <identifiersep> socket <identifier> = mgr . get <identifiersep> server <identifiersep> socket ( ) ; \n \t4 <identifier> <identifiersep> log . debug ( <string_literal> ) ; \n \t4 while ( true ) { \n \t5 i2p <identifiersep> socket socket = <identifier> . accept ( ) ; \n <ect>
\t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public boolean close <identifiersep> socket ( ) { \n \t2 try { \n \t3 if ( out != null ) { \n <ect>
\t5 logger . debug ( <string_literal> + <identifier> <identifiersep> hosts ) ; \n \t5 if ( exclude <identifiersep> host != null ) { \n \t6 <identifier> <identifiersep> hosts . remove ( exclude <identifiersep> host ) ; } \n \t5 if ( <identifier> <identifiersep> hosts . is <identifiersep> empty ( ) ) { \n <ect>
\t2 if ( sources == null ) { \n \t2 sources = value ; \n \t2 return true ; \n \t2 } else { \n <ect>
\t3 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t3 object = versioning <identifiersep> profile . get <identifiersep> first <identifiersep> block <identifiersep> of <identifiersep> latest <identifiersep> version ( base <identifiersep> name , null , null , timeout , ver , get <identifiersep> handle ) ; \n \t3 responder . check <identifiersep> error ( ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( object ) ; \n <ect>
\t5 } else if ( block <identifiersep> on <identifiersep> data <identifiersep> files ) { \n \t6 block <identifiersep> execution <identifiersep> and <identifiersep> maybe <identifiersep> wait ( blob <identifiersep> name ) ; } \n \t4 } else { \n \t5 if ( should <identifiersep> fail ( blob <identifiersep> name , random <identifiersep> control <identifiersep> io <identifiersep> exception <identifiersep> rate ) && ( increment <identifiersep> and <identifiersep> get <identifiersep> failure <identifiersep> count ( ) < maximum <identifiersep> number <identifiersep> of <identifiersep> failures ) ) { \n <ect>
\t2 ret . <identifier> . put ( entry . get <identifiersep> key ( ) , entry . get <identifiersep> value ( ) ) ; } } } \n \t1 string tablet <identifiersep> dir = tablet <identifiersep> files . dir ; \n \t1 string <identifier> <identifiersep> dir = switch <identifiersep> volume ( tablet <identifiersep> dir , file <identifiersep> type . table , <identifier> ) ; \n \t1 if ( <identifier> <identifiersep> dir != null ) { \n <ect>
<comment> \n \t1 public void create <identifiersep> state <identifiersep> default <identifiersep> transition ( final <identifier> <identifiersep> state state , final string target <identifiersep> state ) { \n \t2 if ( state == null ) { \n <ect>
\t1 transactions . find ( new bucket <identifiersep> info ( bucket <identifiersep> name ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 throw new no <identifiersep> such <identifiersep> bucket <identifiersep> exception ( bucket <identifiersep> name ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public void on <identifiersep> message ( message message ) { \n \t2 received <identifiersep> messages . release ( ) ; \n \t2 if ( count . increment <identifiersep> and <identifiersep> get ( ) % <number_literal> == 0 ) { \n <ect>
\t3 state = new peer <identifiersep> test <identifiersep> state ( <identifier> , <identifier> == <number_literal> , nonce , now ) ; \n \t2 } else { \n \t3 if ( state . get <identifiersep> receive <identifiersep> <identifier> <identifiersep> time ( ) > now - ( resend <identifiersep> timeout / <number_literal> ) ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 whiteboard whiteboard = null ; \n \t2 if ( provider instanceof whiteboard <identifiersep> aware ) { \n \t3 whiteboard = ( ( whiteboard <identifiersep> aware ) provider ) . get <identifiersep> whiteboard ( ) ; \n \t2 } else { \n <ect>
\t2 assert <identifiersep> null ( durable <identifiersep> sub . receive ( <number_literal> ) ) ; \n \t2 log . debug ( <string_literal> + msg <identifiersep> count + <string_literal> ) ; \n \t2 for ( int i = 0 ; i < msg <identifiersep> count ; i ++ ) { \n \t3 publisher . publish ( session . create <identifiersep> message ( ) ) ; } \n <ect>
\t5 count ++ ; } \n \t4 i ++ ; } \n \t3 association <identifiersep> persister . flush <identifiersep> to <identifiersep> datastore ( ) ; \n <ect>
\t1 final list < string > reduce <identifiersep> q = q . get ( <string_literal> ) ; \n \t1 final list < string > job <identifiersep> q = q . get ( <string_literal> ) ; \n \t1 final list < string > dag <identifiersep> id <identifiersep> q = q . get ( <string_literal> ) ; \n <ect>
\t2 config <identifiersep> locator config <identifiersep> locator = new config <identifiersep> locator ( config <identifiersep> file ) ; \n \t2 heat <identifiersep> pump <identifiersep> configuration = config <identifiersep> locator . get <identifiersep> config ( ) ; \n \t2 if ( heat <identifiersep> pump <identifiersep> configuration != null && ! heat <identifiersep> pump <identifiersep> configuration . is <identifiersep> empty ( ) ) { \n \t3 logger . info ( <string_literal> , config <identifiersep> file ) ; \n <ect>
\t2 final resource location = l . get <identifiersep> password <identifiersep> policy ( ) . get <identifiersep> groovy ( ) . get <identifiersep> location ( ) ; \n \t2 if ( l . get <identifiersep> password <identifiersep> policy ( ) . get <identifiersep> strategy ( ) == password <identifiersep> policy <identifiersep> properties . password <identifiersep> policy <identifiersep> handling <identifiersep> options . groovy && location != null ) { \n \t3 logger . debug ( <string_literal> , location ) ; \n \t3 return new groovy <identifiersep> ldap <identifiersep> password <identifiersep> policy <identifiersep> handling <identifiersep> strategy ( location ) ; } \n <ect>
\t3 write <identifiersep> error <identifiersep> response ( message <identifiersep> event , \n \t7 http <identifiersep> response <identifiersep> status . requested <identifiersep> range <identifiersep> not <identifiersep> <identifier> , \n \t7 <string_literal> ) ; \n \t2 } else if ( exception instanceof persistence <identifiersep> failure <identifiersep> exception ) { \n <ect>
\t5 thread . sleep ( timeout ) ; \n \t4 <comment> \n \t4 if ( spi <identifiersep> state <identifiersep> copy ( ) != connected ) { \n <ect>
\t3 try { \n \t4 <identifier> . set <identifiersep> length ( size * <number_literal> ) ; \n \t4 write <identifiersep> buffer ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 logger . trace ( <string_literal> + request ) ; \n \t3 return target ; } \n \t2 else \n \t2 { \n <ect>
\t2 string namespace = get <identifiersep> namespace ( ) ; \n \t2 string id = get <identifiersep> name ( service <identifiersep> account ) ; \n \t2 objects . not <identifiersep> null ( id , <string_literal> + service <identifiersep> account + <string_literal> + source <identifiersep> name ) ; \n \t2 if ( is <identifiersep> services <identifiersep> only <identifiersep> mode ( ) ) { \n <ect>
\t3 log . trace ( <string_literal> + local <identifiersep> addr + <string_literal> + ( dest == null ? <string_literal> : dest ) + <string_literal> + req ) ; \n \t2 try { \n \t3 down <identifiersep> prot . down ( msg ) ; } \n \t2 catch ( exception ex ) { \n <ect>
\t2 executor <identifiersep> service . shutdown ( ) ; \n \t2 int succeed <identifiersep> build = 0 ; \n \t2 for ( int i = 0 ; i < futures . size ( ) ; i ++ ) { \n \t3 executable <identifiersep> state result = futures . get ( i ) . get ( <number_literal> , time <identifiersep> unit . minutes ) ; \n <ect>
\t3 logger . error ( <string_literal> , e . get <identifiersep> message ( ) ) ; \n \t2 } finally { \n \t3 <comment> \n \t3 if ( exception <identifiersep> occurred ) { \n <ect>
\t1 table <identifiersep> def <identifiersep> writer = new table <identifiersep> def <identifiersep> writer ( options , manager , input <identifiersep> table <identifiersep> name , output <identifiersep> table <identifiersep> name , \n \t2 options . get <identifiersep> conf ( ) , false ) ; \n \t1 string stmt = table <identifiersep> def <identifiersep> writer . get <identifiersep> create <identifiersep> table <identifiersep> stmt ( ) ; \n \t1 boolean is <identifiersep> hive <identifiersep> external <identifiersep> table <identifiersep> set = ! string <identifiersep> utils . is <identifiersep> blank ( options . get <identifiersep> hive <identifiersep> external <identifiersep> table <identifiersep> dir ( ) ) ; \n <ect>
\t4 } catch ( io <identifiersep> exception ioe ) { \n \t5 log . error ( <string_literal> , ioe ) ; \n \t5 op <identifiersep> failed . set ( true ) ; \n \t4 } catch ( interrupted <identifiersep> exception ie ) { \n <ect>
\t1 { \n \t1 <identifier> <identifiersep> store . remove ( property <identifiersep> name ) ; } \n \t1 catch ( property <identifiersep> store <identifiersep> exception e ) \n \t1 { \n <ect>
\t4 if ( target . exists ( ) ) { \n \t5 if ( objects . equal ( network <identifiersep> system . get <identifiersep> owner ( target ) , this ) ) { \n \t6 target . send ( event ) ; \n \t5 } else { \n <ect>
\t3 try { \n \t4 open <identifiersep> cms . get <identifiersep> org <identifiersep> unit <identifiersep> manager ( ) . add <identifiersep> resource <identifiersep> to <identifiersep> org <identifiersep> unit ( m <identifiersep> cms , m <identifiersep> selected <identifiersep> <identifier> , site <identifiersep> root <identifiersep> resource . get <identifiersep> root <identifiersep> path ( ) ) ; \n \t4 <identifier> <identifiersep> name = m <identifiersep> selected <identifiersep> <identifier> . substring ( 0 , ( m <identifiersep> selected <identifiersep> <identifier> ) . length ( ) - 1 ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t2 intent intent = <identifier> . create <identifiersep> start <identifiersep> activity <identifiersep> intent ( instrumentation . get <identifiersep> target <identifiersep> context ( ) , activity <identifiersep> class <identifiersep> name ) ; \n \t2 instrumentation . get <identifiersep> target <identifiersep> context ( ) . start <identifiersep> activity ( intent ) ; } \n \t1 @ override \n \t1 public void start <identifiersep> server ( ) { \n <ect>
\t4 response . set <identifiersep> status <identifiersep> code ( http <identifiersep> status ) ; } } \n \t2 return response . set <identifiersep> complete ( ) ; } \n \t1 private <identifier> < void > service <identifiersep> unavailable <identifiersep> response ( server <identifiersep> web <identifiersep> exchange exchange ) { \n <ect>
\t4 received . get <identifiersep> headers ( ) . get ( stomp . headers . message . ack <identifiersep> id ) + <string_literal> + stomp . null ; \n \t2 stomp <identifiersep> connection . send <identifiersep> frame ( frame ) ; \n \t2 received = stomp <identifiersep> connection . receive ( ) ; \n \t2 assert <identifiersep> true ( received . get <identifiersep> action ( ) . equals ( <string_literal> ) ) ; \n <ect>
\t5 if ( ! downloaded ) continue ; \n \t5 throw new plugin <identifiersep> not <identifiersep> found <identifiersep> exception ( <string_literal> ) ; } \n \t4 attributes main <identifiersep> attributes = manifest . get <identifiersep> main <identifiersep> attributes ( ) ; \n \t4 if ( main <identifiersep> attributes == null ) { \n <ect>
\t2 <comment> \n \t2 log . info ( <string_literal> ) ; \n \t2 for ( container <identifiersep> info node : suite <identifiersep> context . get <identifiersep> auth <identifiersep> server <identifiersep> <identifier> <identifiersep> info ( ) ) { \n \t3 if ( ! controller . is <identifiersep> started ( node . get <identifiersep> qualifier ( ) ) ) { \n <ect>
\t2 if ( account != null ) { \n \t3 if ( create <identifiersep> account <identifiersep> invitation ( project , account . get <identifiersep> id ( ) ) != null ) { \n \t4 return true ; \n \t3 } else { \n <ect>
\t5 final class <identifier> = structr <identifiersep> app . resolve <identifiersep> schema <identifiersep> id ( implemented <identifiersep> interface ) ; \n \t5 if ( <identifier> != null ) { \n \t6 interfaces . add ( <identifier> . get <identifiersep> name ( ) ) ; \n \t5 } else { \n <ect>
\t5 if ( response . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> created ) \n \t5 { \n \t6 return response . get <identifiersep> response <identifiersep> header ( files <identifiersep> constants . e <identifiersep> tag ) . get <identifiersep> value ( ) ; } \n \t5 else { \n <ect>
\t3 throw io <identifiersep> exception <identifiersep> support . create ( e ) ; } } \n \t1 @ override \n \t1 public void on <identifiersep> socket <identifiersep> outbound <identifiersep> binary ( byte <identifiersep> buffer data ) throws io <identifiersep> exception { \n \t2 if ( ! transport <identifiersep> started <identifiersep> at <identifiersep> least <identifiersep> once ( ) ) { \n <ect>
\t4 crc <identifiersep> util . append <identifiersep> <identifier> ( status <identifiersep> change <identifiersep> cmd + crc <identifiersep> util . append <identifiersep> crc ( command . to <identifiersep> string ( ) ) ) ) ; \n \t2 try { \n \t3 binding . send <identifiersep> command ( cmd ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , obis <identifiersep> data <identifiersep> line , obis <identifiersep> message ) ; \n \t3 if ( obis <identifiersep> message != null ) { \n \t4 obis <identifiersep> messages . add ( obis <identifiersep> message ) ; \n \t3 } else { \n <ect>
\t7 update <identifiersep> index ++ ; } } } \n \t4 more <identifiersep> results = cs . get <identifiersep> more <identifiersep> results ( ) ; \n \t4 update <identifiersep> count = cs . get <identifiersep> update <identifiersep> count ( ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void init ( filter <identifiersep> config filter <identifiersep> config ) throws servlet <identifiersep> exception { \n <ect>
\t5 log . warn ( \n \t6 <string_literal> \n \t7 + type . get <identifiersep> type <identifiersep> name ( ) ) ; } \n \t3 } else { \n <ect>
\t2 < p > reload this page with open console , enter text and hit the log button . . . < / p > \n \t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n <ect>
\t4 if ( ! received <identifiersep> disconnect . get ( ) ) { \n \t5 get <identifiersep> protocol <identifiersep> converter ( ) . on <identifiersep> transport <identifiersep> error ( ) ; } \n \t4 get <identifiersep> protocol <identifiersep> converter ( ) . on <identifiersep> mqtt <identifiersep> command ( new disconnect ( ) . encode ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 public void destroy <identifiersep> queue ( ) { \n \t2 try { \n \t3 broker broker = this . broker . get <identifiersep> broker ( ) ; \n \t3 if ( ! broker . is <identifiersep> stopped ( ) ) { \n <ect>
\t6 data <identifiersep> callback dc = new my <identifiersep> data <identifiersep> callback ( my <identifiersep> node , my <identifiersep> instance , ver ) ; \n \t6 watcher watcher = new my <identifiersep> watcher ( my <identifiersep> node , dc ) ; \n \t6 zk . get <identifiersep> data ( my <identifiersep> node , watcher , dc , watcher ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t2 eo = null ; \n \t2 if ( <identifier> . count ( ) == 1 ) { \n \t3 eo = ( eo <identifiersep> enterprise <identifiersep> object ) <identifier> . object <identifiersep> at <identifiersep> index ( 0 ) ; \n <ect>
\t5 specified <identifiersep> default <identifiersep> value = <string_literal> , \n \t5 <identifier> <identifiersep> default <identifiersep> value = <string_literal> , \n \t5 option <identifiersep> context = <string_literal> ) final string directory ) { \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( file ) && string <identifiersep> utils . is <identifiersep> blank ( directory ) ) { \n <ect>
\t5 m <identifiersep> upload <identifiersep> handler = ( i <identifiersep> cms <identifiersep> post <identifiersep> upload <identifiersep> dialog <identifiersep> handler ) ( upload <identifiersep> handler <identifiersep> class . new <identifiersep> instance ( ) ) ; \n \t4 } else { \n \t5 log . error ( <string_literal> + upload <identifiersep> handler <identifiersep> name ) ; } \n \t3 } catch ( instantiation <identifiersep> exception e ) { \n <ect>
\t2 boolean in <identifiersep> transaction = false ; \n \t2 try { \n \t3 in <identifiersep> transaction = ! statement . get <identifiersep> connection <identifiersep> proxy ( ) . get <identifiersep> auto <identifiersep> commit ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t5 create <identifiersep> vm <identifiersep> disk <identifiersep> helper <identifiersep> entry ( aggregated <identifiersep> disk <identifiersep> stats . get ( key ) , current <identifiersep> vm <identifiersep> disk <identifiersep> stats , end <identifiersep> date <identifiersep> millis ) ; \n \t5 num <identifiersep> <identifier> <identifiersep> processed ++ ; } \n \t4 <identifier> <identifiersep> usage <identifiersep> vm <identifiersep> disk <identifiersep> dao . save <identifiersep> usage <identifiersep> vm <identifiersep> disks ( usage <identifiersep> vm <identifiersep> disks ) ; \n <ect>
\t3 try { \n \t4 info . instance = ( system <identifiersep> <identifier> <identifiersep> checker ) create <identifiersep> instance ( info . clazz , false , info . singleton ) ; \n \t4 info . instance . check ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 if ( ! <identifier> <identifiersep> ip <identifiersep> addr <identifiersep> mgr . apply <identifiersep> static <identifiersep> nats ( static <identifiersep> nats , continue <identifiersep> on <identifiersep> error , for <identifiersep> revoke ) ) { \n \t5 return false ; } \n \t3 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
<comment> \n \t1 public void set <identifiersep> upload <identifiersep> status ( string job <identifiersep> id , status status ) { \n \t2 upload <identifiersep> job <identifier> = jobs . get ( job <identifiersep> id ) ; \n \t2 if ( <identifier> == null ) { \n <ect>
\t2 public void stop <identifiersep> running ( ) { \n \t3 stop = true ; } \n \t2 public void run ( ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
public boolean process <identifiersep> class ( class candidate ) throws exception { \n \t1 if ( key . class . is <identifiersep> assignable <identifiersep> from ( candidate ) && ats . from ( candidate ) . has ( policy <identifiersep> key . class ) ) { \n \t1 string key = ats . from ( candidate ) . get ( policy <identifiersep> key . class ) . value ( ) ; \n \t1 if ( key != null && ! <string_literal> . equals ( key ) ) { \n <ect>
\t3 if ( s != null ) { \n \t4 try { \n \t5 s . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 registered <identifiersep> service <identifiersep> access <identifiersep> strategy <identifiersep> utils . ensure <identifiersep> service <identifiersep> access <identifiersep> is <identifiersep> allowed ( service , registered <identifiersep> service ) ; \n \t3 return true ; \n \t2 } catch ( final unauthorized <identifiersep> service <identifiersep> exception e ) { \n <ect>
\t3 if ( <identifier> <identifiersep> set . contains ( query <identifiersep> name ) ) { \n \t4 continue ; } \n \t3 string sql = get <identifiersep> text <identifiersep> from <identifiersep> file ( sql <identifiersep> file ) ; \n \t3 <comment> \n <ect>
\t1 log . debug ( <string_literal> , prefix , range , column <identifiersep> <identifier> , <identifier> ) ; \n \t1 super . seek ( range , column <identifiersep> <identifier> , <identifier> ) ; } \n @ override \n public void next ( ) throws io <identifiersep> exception { \n <ect>
\t4 remote <identifiersep> module remote <identifiersep> module = new remote <identifiersep> module ( meta ) ; \n \t4 modules . add ( remote <identifiersep> module ) ; } \n \t3 reader . end <identifiersep> array ( ) ; \n \t3 int count = modules . size ( ) ; \n <ect>
\t4 log . debug ( <string_literal> , exchange . get <identifiersep> exchange <identifiersep> id ( ) + <string_literal> ) ; } \n \t4 log . trace ( <string_literal> + e . get <identifiersep> localized <identifiersep> message ( ) , e ) ; } \n \t3 exchange . set <identifiersep> exception ( e ) ; } \n <ect>
<comment> \n \t1 private int handle <identifiersep> status ( string line ) { \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 <comment> \n \t2 try { \n \t3 producer . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 s <identifiersep> logger . info ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> ) ; } } } \n \t3 } else if ( ( api . get <identifiersep> response <identifiersep> type ( ) != response <identifiersep> type . error ) && ( api . get <identifiersep> response <identifiersep> code ( ) != <number_literal> ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; \n \t4 if ( api . get <identifiersep> required ( ) == true ) { \n <ect>
\t2 logger . info ( <string_literal> , configuration . get <identifiersep> profile <identifiersep> name ( ) ) ; \n \t2 string web <identifiersep> conf <identifiersep> path = configuration . get <identifiersep> web <identifiersep> conf <identifiersep> path ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> , web <identifiersep> conf <identifiersep> path ) ; \n <ect>
\t4 lock <identifier> <identifiersep> lock = em . get <identifiersep> reference ( lock . class , lock . get <identifiersep> id ( ) ) ; \n \t4 em . lock ( <identifier> <identifiersep> lock , lock <identifiersep> mode <identifiersep> type . <identifier> <identifiersep> write ) ; \n \t4 final integer id = <identifier> <identifiersep> lock . get <identifiersep> id ( ) ; \n \t4 <identifier> <identifiersep> lock . get <identifiersep> name ( ) ; \t2 <comment> \n <ect>
\t6 interrupt ( entry . get <identifiersep> exchange ( ) ) ; \n \t5 } catch ( throwable e ) { \n \t6 log . warn ( <string_literal> + entry . get <identifiersep> blocked <identifiersep> thread ( ) . get <identifiersep> name ( ) + <string_literal> , e ) ; } } \n \t3 } else { \n <ect>
\t2 url instance <identifiersep> url ; \n \t2 try { \n \t3 instance <identifiersep> url = dest . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ; \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t3 self . logger . info ( <string_literal> \\ \n \t5 . format ( llap <identifiersep> queue <identifiersep> name , llap <identifiersep> queue <identifiersep> cap <identifiersep> <identifier> , adjusted <identifiersep> default <identifiersep> queue <identifiersep> cap ) ) \n \t2 else : # queue <identifier> , only <identifier> done . \n \t3 self . logger . info ( <string_literal> . format ( llap <identifiersep> queue <identifiersep> name , llap <identifiersep> queue <identifiersep> cap <identifiersep> <identifier> ) ) \n <ect>
\t5 <identifier> <identifiersep> type = bricklet <identifiersep> led <identifiersep> strip . <identifier> <identifiersep> type <identifiersep> <identifier> ; \n \t4 } else if ( <identifier> <identifiersep> type <identifiersep> string . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t5 <identifier> <identifiersep> type = bricklet <identifiersep> led <identifiersep> strip . <identifier> <identifiersep> type <identifiersep> <identifier> ; \n \t4 } else { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 reset <identifiersep> context ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
public list <identifiersep> bucket <identifiersep> response <identifiersep> type list <identifiersep> bucket ( list <identifiersep> bucket <identifiersep> type request ) throws s3exception { \n \t1 try { \n \t1 return proxy <identifiersep> request ( request , com . eucalyptus . <identifier> . msgs . list <identifiersep> bucket <identifiersep> type . class , com . eucalyptus . <identifier> . msgs . list <identifiersep> bucket <identifiersep> response <identifiersep> type . class ) ; \n \t1 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n <ect>
\t1 public void test <identifiersep> map <identifiersep> produce <identifiersep> collection ( ) throws exception { \n \t2 final feature <identifiersep> source < simple <identifiersep> feature <identifiersep> type , simple <identifiersep> feature > fs = test <identifiersep> ds \n \t4 . get <identifiersep> feature <identifiersep> source ( <string_literal> ) ; \n \t2 final referenced <identifiersep> envelope env = new referenced <identifiersep> envelope ( fs . get <identifiersep> bounds ( ) , wgs84 ) ; \n <ect>
\t2 <comment> \n \t2 headers . put ( <string_literal> , null ) ; \n \t2 final com . <identifier> . result result = request <identifiersep> body <identifiersep> and <identifiersep> headers ( <string_literal> , null , headers ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t1 public nicira <identifiersep> nvp <identifiersep> tag ( ) { } \n \t1 public nicira <identifiersep> nvp <identifiersep> tag ( string scope , string tag ) { \n \t2 this . scope = scope ; \n \t2 if ( tag . length ( ) > <number_literal> ) { \n <ect>
\t2 { \n \t3 exp <identifiersep> header = header <identifiersep> factory . create <identifiersep> expires <identifiersep> header ( expires ) ; } \n \t2 catch ( invalid <identifiersep> argument <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 state . marked <identifiersep> <identifier> ( ! state . marked <identifiersep> <identifier> ( ) ) ; \n \t3 try { \n \t4 listener . <identifier> <identifiersep> changed ( state . stream ) ; \n \t3 } catch ( throwable cause ) { \n <ect>
\t2 { \n \t3 object <identifiersep> <identifier> . add ( ref ) ; } } \n \t1 public void apply <identifiersep> object <identifiersep> <identifier> ( ) \n \t1 { \n <ect>
\t4 for ( nic <identifiersep> vo nic : nics ) { \n \t5 long vm <identifiersep> id = nic . get <identifiersep> instance <identifiersep> id ( ) ; \n \t5 vm <identifiersep> instance <identifiersep> vo vm = <identifier> <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t5 if ( vm == null ) { \n <ect>
\t5 consumer <identifiersep> started . count <identifiersep> down ( ) ; \n \t5 active <identifiersep> mq <identifiersep> object <identifiersep> message message = ( active <identifiersep> mq <identifiersep> object <identifiersep> message ) consumer . receive ( <number_literal> ) ; \n \t5 if ( message != null ) { \n \t6 my <identifiersep> object object = ( my <identifiersep> object ) message . get <identifiersep> object ( ) ; \n <ect>
\t5 <string_literal> ) ; \n \t4 try { \n \t5 this . group <identifiersep> service = ( x <identifiersep> wiki <identifiersep> group <identifiersep> service ) class . for <identifiersep> name ( group <identifiersep> class ) . new <identifiersep> instance ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 mem <identifiersep> page <identifiersep> writer page <identifiersep> writer = page <identifiersep> writers . get ( descriptor ) ; \n \t1 if ( page <identifiersep> writer == null ) { \n \t1 throw new unknown <identifiersep> column <identifiersep> exception ( descriptor ) ; } \n \t1 list < data <identifiersep> page > pages = new array <identifiersep> list < data <identifiersep> page > ( page <identifiersep> writer . get <identifiersep> pages ( ) ) ; \n <ect>
\t2 @ override \n \t2 protected dag <identifiersep> node < component , dependency > build <identifiersep> recommender <identifiersep> graph ( data <identifiersep> access <identifiersep> object dao ) { \n \t3 dag <identifiersep> node < component , dependency > graph = super . build <identifiersep> recommender <identifiersep> graph ( dao ) ; \n \t3 if ( merge <identifiersep> pool != null ) { \n <ect>
\t2 simple <identifiersep> trigger trigger = ( simple <identifiersep> trigger ) get <identifiersep> trigger ( camel , <string_literal> ) ; \n \t2 long repeat <identifiersep> interval = trigger . get <identifiersep> repeat <identifiersep> interval ( ) ; \n \t2 app . stop ( ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t4 throw new general <identifiersep> security <identifiersep> exception ( <string_literal> \n \t6 + <string_literal> + duo <identifiersep> credential ) ; } \n \t3 final duo <identifiersep> security <identifiersep> authentication <identifiersep> service duo <identifiersep> authentication <identifiersep> service = get <identifiersep> duo <identifiersep> authentication <identifiersep> service ( ) ; \n \t3 final string duo <identifiersep> verify <identifiersep> response = duo <identifiersep> authentication <identifiersep> service . authenticate ( duo <identifiersep> credential ) . get <identifiersep> value ( ) ; \n <ect>
\t4 if ( new <identifiersep> top <identifiersep> ver == top <identifiersep> ver ) \n \t5 <identifier> ( dep , top <identifiersep> ver ) ; } \n \t3 catch ( grid <identifiersep> exception e ) { \n \t4 if ( ! ( e instanceof grid <identifiersep> topology <identifiersep> exception ) ) \n <ect>
\t3 log . warn ( \n \t4 <string_literal> + name <identifiersep> max <identifiersep> size + <string_literal> + fname + <string_literal> ) ; \n \t3 fname = fname . substring ( 0 , name <identifiersep> max <identifiersep> size ) ; } \n \t2 if ( <identifier> != null && <identifier> . length ( ) > name <identifiersep> max <identifiersep> size ) { \n <ect>
\t4 answer = copy <identifiersep> object ( src <identifiersep> data , dest <identifiersep> data , dest <identifiersep> host ) ; } \n \t3 if ( answer != null && ! answer . get <identifiersep> result ( ) ) { \n \t4 err <identifiersep> msg = answer . get <identifiersep> details ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 log . debug ( <string_literal> ) ; } } } \n \t1 if ( tmp <identifiersep> file == null || input != null ) { \n \t1 tmp <identifiersep> file = file . create <identifiersep> temp <identifiersep> file ( <string_literal> , <string_literal> , parent <identifiersep> file ) ; \n <ect>
\t2 try { \n \t3 object mc = get <identifiersep> management <identifiersep> object <identifiersep> strategy ( ) . get <identifiersep> managed <identifiersep> object <identifiersep> for <identifiersep> component ( camel <identifiersep> context , component , name ) ; \n \t3 <identifier> <identifiersep> object ( mc ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } catch ( no <identifiersep> such <identifiersep> padding <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( illegal <identifiersep> block <identifiersep> size <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 authenticate <identifiersep> client <identifiersep> principal ( ) ; } \n \t2 catch ( exception e ) { \n \t3 <comment> \n <ect>
\t2 if ( attribute <identifiersep> value == null ) { \n \t3 logger . debug ( <string_literal> , this . attribute <identifiersep> name ) ; \n \t3 attribute <identifiersep> value = request . get <identifiersep> attribute ( attribute <identifiersep> name ) ; } \n \t2 if ( attribute <identifiersep> value == null ) { \n <ect>
\t2 <comment> \n \t2 @ suppress <identifiersep> warnings ( { <string_literal> , <string_literal> } ) \n \t2 @ override public void on <identifiersep> message ( final uuid node <identifiersep> id , object msg ) { \n <ect>
\t5 protocol <identifiersep> version attempted <identifiersep> version = e . get <identifiersep> unsupported <identifiersep> version ( ) ; \n \t5 protocol <identifiersep> version retry <identifiersep> version = attempted <identifiersep> version . get <identifiersep> lower <identifiersep> supported ( ) ; \n \t5 if ( retry <identifiersep> version == null ) { \n \t6 throw e ; } \n <ect>
\t3 logger . error ( <string_literal> , data <identifiersep> dir ) ; \n \t3 return false ; } \n \t2 else if ( ! file <identifiersep> action . has <identifiersep> privilege ( dir , file <identifiersep> action . x ) ) \n \t2 { \n <ect>
\t3 output <identifiersep> stream . write ( return <identifiersep> okay ) ; \n \t3 blob <identifiersep> key . write <identifiersep> to <identifiersep> output <identifiersep> stream ( output <identifiersep> stream ) ; } \n \t2 catch ( socket <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t2 public void run ( ) { \n \t3 try { \n \t4 trigger <identifiersep> checkpoint ( system . current <identifiersep> time <identifiersep> millis ( ) , true ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t1 log . info ( <string_literal> , ( props . is <identifiersep> enable <identifiersep> dictionary ( ) ? <string_literal> : <string_literal> ) ) ; \n \t1 log . info ( <string_literal> , ( <identifier> ? <string_literal> : <string_literal> ) ) ; \n \t1 log . info ( <string_literal> , props . get <identifiersep> writer <identifiersep> version ( ) ) ; \n \t1 log . info ( <string_literal> , max <identifiersep> padding <identifiersep> size ) ; \n <ect>
\t1 try { \n \t2 if ( null != stmt ) { \n \t2 stmt . close ( ) ; } \n \t1 } catch ( exception ex ) { \n <ect>
\t3 <comment> \n \t3 ctx . get <identifiersep> pipeline ( ) . remove ( this ) ; \n \t3 channel <identifiersep> authenticated ( ctx ) ; \n \t2 } catch ( invalid <identifiersep> protocol <identifiersep> buffer <identifiersep> exception e ) { \n <ect>
\t4 return null ; \n \t3 return new http <identifiersep> response <identifiersep> result ( result , http <identifiersep> client ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n <ect>
\t1 if ( f . exists ( ) ) { \n \t2 try { \n \t3 f . delete ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t2 case t : throwable = > { \n \t2 stopwatch . log . error ( s <string_literal> , t ) \n \t2 user <identifiersep> end . instance ! session . mark <identifiersep> as <identifiersep> failed } } \n \t1 case failure ( message ) = > { \n <ect>
\t2 <comment> \n \t2 set < url > recover <identifiersep> registered = new hash <identifiersep> set < url > ( get <identifiersep> registered ( ) ) ; \n \t2 if ( ! recover <identifiersep> registered . is <identifiersep> empty ( ) ) { \n <ect>
\t3 list < domain <identifiersep> group <identifiersep> model <identifiersep> view > groups = group <identifiersep> by <identifiersep> short <identifiersep> name <identifiersep> mapper . execute ( collections . singleton <identifiersep> list ( settings \n \t5 . get <identifiersep> support <identifiersep> stream <identifiersep> group <identifiersep> short <identifiersep> name ( ) ) ) ; \n \t3 if ( groups . size ( ) == 1 ) \n \t3 { \n <ect>
<comment> \n protected void init ( ) { \n \t1 long start <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t3 transaction txn = transaction . current <identifiersep> txn ( ) ; \n \t3 try { \n \t4 prepared <identifiersep> statement <identifier> = txn . prepare <identifiersep> auto <identifiersep> close <identifiersep> statement ( insert <identifiersep> <identifier> ) ; \n \t4 <identifier> . execute <identifiersep> update ( ) ; \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( received ) ; \n \t2 string remote <identifiersep> reply <identifiersep> to = received . get <identifiersep> headers ( ) . get ( stomp . headers . send . reply <identifiersep> to ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( remote <identifiersep> reply <identifiersep> to ) ; \n \t2 assert <identifiersep> true ( remote <identifiersep> reply <identifiersep> to . starts <identifiersep> with ( string . format ( <string_literal> , type ) ) ) ; \n <ect>
\t2 command . add ( <string_literal> , vm <identifiersep> name ) ; \n \t2 command . add ( <string_literal> , cmd <identifiersep> line . replace <identifiersep> all ( <string_literal> , <string_literal> ) ) ; \n \t2 result = command . execute ( ) ; \n \t2 if ( result != null ) { \n <ect>
\t2 } finally { \n \t3 if ( lock != null ) { \n \t4 <identifier> <identifiersep> network <identifiersep> dao . release <identifiersep> from <identifiersep> lock <identifiersep> table ( lock . get <identifiersep> id ( ) ) ; \n <ect>
\t1 session = sw . session ; \n \t1 sw . session = null ; \n \t1 } finally { \n \t1 sw . lock . unlock ( ) ; } \n <ect>
\t2 boolean success = shutdown <identifiersep> network <identifiersep> elements <identifiersep> and <identifiersep> resources ( context , cleanup <identifiersep> elements , network ) ; \n \t2 txn . start ( ) ; \n \t2 if ( success ) { \n <ect>
\t3 if ( shutdown <identifiersep> await <identifiersep> termination > 0 ) { \n \t4 try { \n \t5 if ( ! await <identifiersep> termination ( executor <identifiersep> service , shutdown <identifiersep> await <identifiersep> termination ) ) { \n \t6 warned = true ; \n <ect>
\t2 logger . info ( <string_literal> , connector <identifiersep> address ) ; \n \t2 try { \n \t3 daemon <identifiersep> registry . mark <identifiersep> state ( connector <identifiersep> address , idle ) ; \n \t2 } catch ( daemon <identifiersep> registry . empty <identifiersep> registry <identifiersep> exception e ) { \n <ect>
\t1 public void tear <identifiersep> down ( ) throws exception { \n \t2 try { \n \t3 stop <identifiersep> broker ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( boolean . get <identifiersep> boolean ( disable <identifiersep> output ) ) { \n \t3 execution . proceed ( ) ; \n \t3 return ; } \n \t2 dispatcher = new asynchronous <identifiersep> log <identifiersep> dispatcher ( execution . get <identifiersep> connection ( ) , build . get <identifiersep> parameters ( ) . get <identifiersep> log <identifiersep> level ( ) ) ; \n <ect>
\t6 if ( socket <identifiersep> tester . apply ( socket ) ) { \n \t6 <comment> \n \t6 reachable <identifiersep> socket . compare <identifiersep> and <identifiersep> set ( null , socket ) ; } \n \t5 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t2 ) \n \t2 self . logger . debug ( <string_literal> % ( self . vm <identifiersep> 1 . id , self . vm <identifiersep> <number_literal> . id ) ) \n \t2 self . test <identifiersep> ssh <identifiersep> command ( self . vm <identifiersep> 1 , nat <identifiersep> <identifier> , <string_literal> ) \n \t2 self . test <identifiersep> ssh <identifiersep> command ( self . vm <identifiersep> <number_literal> , nat <identifiersep> <identifier> , <string_literal> ) \n <ect>
\t5 https <identifiersep> url <identifiersep> connection . set <identifiersep> default <identifiersep> ssl <identifiersep> socket <identifiersep> factory ( sc . get <identifiersep> socket <identifiersep> factory ( ) ) ; \n \t5 log . trace ( <string_literal> ) ; } \n \t4 catch ( exception e ) \n \t4 { \n <ect>
\t2 } else if ( string <identifiersep> utils . is <identifiersep> null <identifiersep> or <identifiersep> empty ( model <identifiersep> item . get <identifiersep> path ( ) ) ) { \n \t3 ui <identifiersep> support . show <identifiersep> error <identifiersep> message ( <string_literal> + model <identifiersep> item . get <identifiersep> name ( ) + <string_literal> ) ; \n \t3 return ; } \n <ect>
\t7 c . to <identifiersep> prev <identifiersep> token ( ) ; \n \t7 xml <identifiersep> generator . create <identifiersep> sample <identifiersep> for <identifiersep> type ( element . get <identifiersep> type ( ) , c ) ; \n \t7 c . dispose ( ) ; \n \t6 } else { \n <ect>
\t4 logger . info ( <string_literal> + ex . get <identifiersep> message ( ) ) ; \n \t3 } catch ( evaluator <identifiersep> exception ex ) { \n \t4 logger . info ( <string_literal> + ex . get <identifiersep> message ( ) ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 { \n \t3 audio <identifiersep> stream = audio <identifiersep> system . get <identifiersep> audio <identifiersep> input <identifiersep> stream ( uri ) ; } \n \t2 catch ( io <identifiersep> exception ioex ) \n \t2 { \n <ect>
\t4 attache = <identifier> <identifiersep> agent <identifiersep> mgr . handle <identifiersep> direct <identifiersep> connect <identifiersep> agent ( host , cmds , resource , for <identifiersep> rebalance ) ; \n \t4 <comment> \n \t4 host = <identifier> <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host . get <identifiersep> id ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 } catch ( interrupted <identifiersep> exception e ) { \n \t2 log . error ( e . to <identifiersep> string ( ) ) ; } } } \n \t1 log . debug ( <string_literal> ) ; \n \t1 t <identifiersep> server <identifiersep> utils . stop <identifiersep> t <identifiersep> server ( this . repl <identifiersep> server ) ; \n <ect>
\t2 res = json . load ( conf <identifiersep> file ) \n \t2 if ( 0 == len ( res ) ) : \n \t2 res = none \n \t1 except exception , e : \n <ect>
\t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 throw new <identifier> <identifiersep> <identifier> <identifiersep> exception ( <string_literal> , e ) ; } } \n \t1 public void close ( ) { \n \t2 if ( <identifier> <identifiersep> stream != null ) { \n <ect>
\t4 string resource <identifiersep> path = rest <identifiersep> base <identifiersep> controller . root <identifiersep> path + <string_literal> + workspace + <string_literal> + type <identifiersep> name ; \n \t4 response = get <identifiersep> as <identifiersep> servlet <identifiersep> response ( resource <identifiersep> path + <string_literal> ) ; \n \t4 assert <identifiersep> equals ( <number_literal> , response . get <identifiersep> status ( ) ) ; \n \t4 <comment> \n <ect>
\t1 @ override \n \t1 public boolean validate ( final <identifier> <identifiersep> context context ) { \n \t2 final http <identifiersep> servlet <identifiersep> request request = context . get <identifiersep> request ( ) ; \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . grant <identifiersep> type ) ) { \n <ect>
\t4 continue ; } \n \t3 <comment> \n \t3 string version = props . get <identifiersep> property ( base <identifiersep> name + <string_literal> ) ; \n \t3 if ( version == null ) { \n <ect>
\t5 remote <identifiersep> j <identifiersep> meter <identifiersep> engine <identifiersep> impl . start <identifiersep> server ( rmi <identifiersep> utils . get <identifiersep> rmi <identifiersep> registry <identifiersep> port ( ) ) ; <comment> \n \t5 start <identifiersep> optional <identifiersep> servers ( ) ; \n \t4 } catch ( exception ex ) { \n \t5 system . err . println ( <string_literal> + ex ) ; <comment> \n <ect>
\t4 if ( cat <identifiersep> metric <identifiersep> util . is <identifiersep> cat <identifiersep> metric ( p . name ) ) { \n \t5 http <identifiersep> cat <identifiersep> client . send <identifiersep> metric ( get <identifiersep> topology <identifiersep> name ( ) , \n \t7 cat <identifiersep> metric <identifiersep> util . get <identifiersep> cat <identifiersep> metric <identifiersep> key ( p . name ) , <string_literal> , string . value <identifiersep> of ( p . value ) ) ; } } \n \t3 catch ( exception e ) { \n <ect>
\t8 exceptions . error ( config . get <identifiersep> full <identifiersep> name ( ) \n \t9 + <string_literal> + config . get <identifiersep> full <identifiersep> name ( ) + <string_literal> \n \t9 + hosts . get <identifiersep> coordinator ( ) ) ) ; \n \t2 } else { \n <ect>
\t4 this . driver <identifiersep> properties . set <identifiersep> property ( user , this . username ) ; } } \n \t2 <comment> \n \t2 if ( ! this . external <identifiersep> auth && this . datasource <identifiersep> bean == null && this . driver <identifiersep> properties != null ) { \n \t3 if ( ( this . driver <identifiersep> properties . get ( password ) == null ) && this . password == null ) { \n <ect>
\t3 <identifier> <identifiersep> stream = new wait <identifiersep> buffered <identifiersep> input <identifiersep> stream ( this ) ; \n \t3 input <identifiersep> streams . add ( <identifier> <identifiersep> stream ) ; \n \t2 } else { \n \t3 if ( configuration . get <identifiersep> <identifier> <identifiersep> keep <identifiersep> first <identifiersep> connections ( ) ) { \n <ect>
\t7 possible <identifiersep> entities . add <identifiersep> object ( root ) ; } } } \n \t3 if ( possible <identifiersep> entities . count ( ) > 0 ) { \n \t4 result = ( eo <identifiersep> entity ) possible <identifiersep> entities . last <identifiersep> object ( ) ; } \n \t3 if ( log . is <identifiersep> enabled <identifiersep> for ( level . warn ) && possible <identifiersep> entities . count ( ) > 1 ) \n <ect>
\t6 tcp <identifiersep> channel . close <identifiersep> channel ( channel , false ) ; } \n \t4 } ; \n \t4 internal <identifiersep> send <identifiersep> message ( channel , message , close <identifiersep> channel ) ; } \n \t2 } else { \n <ect>
\t2 if ( session == null ) { \n \t3 logger . trace ( <string_literal> + session <identifiersep> id + <string_literal> ) ; \n \t3 return optional . empty ( ) ; } \n \t2 if ( session . get <identifiersep> user <identifiersep> id ( ) != null && user <identifiersep> manager . instance . get <identifiersep> user ( session . get <identifiersep> user <identifiersep> id ( ) ) == null ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 logger = logger . get <identifiersep> logger ( target <identifiersep> logger <identifiersep> name ) ; \n \t3 logger . set <identifiersep> <identifier> ( false ) ; \n \t3 logger . set <identifiersep> level ( level . fatal ) ; } \n \t2 <comment> \n <ect>
\t3 command . add ( <string_literal> , tmplt <identifiersep> path ) ; \n \t3 command . add ( <string_literal> , cmd . get <identifiersep> unique <identifiersep> name ( ) + <string_literal> ) ; \n \t3 string result = command . execute ( ) ; \n \t3 if ( result != null ) { \n <ect>
\t4 . put ( <string_literal> , random <identifiersep> int <identifiersep> between ( <number_literal> , <number_literal> ) , byte <identifiersep> size <identifiersep> unit . bytes ) ) ) ; \n \t2 assert <identifiersep> acked ( prepare <identifiersep> create ( <string_literal> , 0 , settings . builder ( ) \n \t3 . put ( <string_literal> , <number_literal> ) . put ( <string_literal> , 0 ) ) ) ; \n \t2 ensure <identifiersep> green ( ) ; \n <ect>
\t3 http <identifiersep> request . get <identifiersep> session ( ) . set <identifiersep> attribute ( filter <identifiersep> util . locale <identifiersep> attribute , locale . to <identifiersep> string ( ) ) ; \n \t3 log . info ( <string_literal> + locale . to <identifiersep> string ( ) ) ; \n \t2 } else if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( system <identifiersep> default <identifiersep> locale ) ) { \n \t3 http <identifiersep> request . get <identifiersep> session ( ) . set <identifiersep> attribute ( filter <identifiersep> util . locale <identifiersep> attribute , system <identifiersep> default <identifiersep> locale ) ; \n <ect>
import params \n if params . <identifier> <identifiersep> skip <identifiersep> setup <identifiersep> jce : \n \t1 logger . info ( <string_literal> ) \n elif not custom <identifiersep> jdk <identifiersep> name : \n <ect>
\t3 logger . trace ( <string_literal> ) ; \n \t3 ( ( load <identifiersep> cell <identifiersep> weight ) m <identifiersep> device ) . <identifier> ( ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t2 logger . info ( foo ) ; \n \t2 response response = target . request ( ) . accept ( text <identifiersep> plain <identifiersep> <identifier> <identifiersep> type ) . post ( entity . entity ( foo , text <identifiersep> plain <identifiersep> <identifier> <identifiersep> type ) ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
public ns <identifiersep> data data ( ) { \n \t1 return ( ns <identifiersep> data ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> er <identifiersep> attachment <identifiersep> data . data <identifiersep> key ) ; } \n public void set <identifiersep> data ( ns <identifiersep> data value ) { \n <ect>
mapreduce <identifiersep> temp <identifiersep> dir = <identifier> . <identifier> ( prefix = <string_literal> , dir = temp <identifiersep> dir ) \n tez <identifiersep> temp <identifiersep> dir = <identifier> . <identifier> ( prefix = <string_literal> , dir = temp <identifiersep> dir ) \n sudo . <identifier> ( mapreduce <identifiersep> temp <identifiersep> dir , <number_literal> ) \n sudo . <identifier> ( tez <identifiersep> temp <identifiersep> dir , <number_literal> ) \n <ect>
\t2 logger . debug ( <string_literal> , graph . get <identifiersep> reachable <identifiersep> nodes ( ) . size ( ) ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 recommender <identifiersep> <identifier> <identifier> = recommender <identifiersep> <identifier> . create ( graph ) ; \n \t2 dag <identifiersep> node < component , dependency > <identifier> = <identifier> . simulate ( ) ; \n <ect>
\t6 <comment> \n \t6 <identifier> <identifiersep> storage . cleanup ( path , volume <identifiersep> dir ) ; \n \t6 continue ; } \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 output <identifiersep> copy . set <identifiersep> destination ( output . get <identifiersep> destination ( ) ) ; \n \t1 simulate <identifiersep> outputs . add ( output <identifiersep> copy ) ; \n \t1 super . add <identifiersep> output ( output <identifiersep> copy ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 if ( admin <identifiersep> pool != null ) { \n \t3 try { \n \t4 admin <identifiersep> pool . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 if ( err . get <identifiersep> cause ( ) instanceof java . net . connect <identifiersep> exception ) { \n \t7 throw new j <identifiersep> meter <identifiersep> error ( <string_literal> , err ) ; } \n \t6 log . error ( <string_literal> , err ) ; } \n \t4 } else { \n <ect>
\t1 timeline <identifiersep> metrics . set <identifiersep> metrics ( total <identifiersep> metrics ) ; \n \t1 try { \n \t1 emit <identifiersep> metrics ( timeline <identifiersep> metrics ) ; \n \t1 } catch ( unable <identifiersep> to <identifiersep> connect <identifiersep> exception e ) { \n <ect>
\t3 server <identifiersep> address = create <identifiersep> non <identifiersep> blocking <identifiersep> server ( address , processor , protocol <identifiersep> factory , server <identifiersep> name , \n \t4 thread <identifiersep> name , num <identifiersep> threads , num <identifiersep> st <identifiersep> threads , time <identifiersep> between <identifiersep> thread <identifiersep> checks , max <identifiersep> message <identifiersep> size ) ; } \n \t2 break ; \n \t1 } catch ( t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ deprecated \n \t1 public void set <identifiersep> connection <identifiersep> timeout ( long connection <identifiersep> timeout ) { \n <ect>
\t6 per <identifiersep> ip <identifiersep> count = old ; } } \n \t4 if ( per <identifiersep> ip <identifiersep> count . increment <identifiersep> and <identifiersep> get ( ) > per <identifiersep> ip <identifiersep> limit ) \n \t4 { \n \t5 <comment> \n <ect>
\t2 <identifier> <identifiersep> port = numbers <identifiersep> util . parse <identifiersep> int ( value , <number_literal> ) ; \n \t2 value = ( string ) params . get ( <string_literal> ) ; \n \t2 <identifier> <identifiersep> each <identifiersep> timeout = duration . standard <identifiersep> seconds ( numbers <identifiersep> util . parse <identifiersep> int ( value , ( int ) vr <identifiersep> scripts . vr <identifiersep> script <identifiersep> exec <identifiersep> timeout . get <identifiersep> standard <identifiersep> seconds ( ) ) ) ; \n <ect>
\t2 ( prev <identifiersep> snap <identifiersep> to <identifiersep> assign = prev <identifiersep> eligible <identifiersep> snap <identifiersep> list . get ( 0 ) ) != null ) { \n \t2 <comment> \n \t2 <comment> \n \t2 if ( prev <identifiersep> snap <identifiersep> to <identifiersep> assign . get <identifiersep> snapshot <identifiersep> location ( ) != null && prev <identifiersep> snap <identifiersep> to <identifiersep> assign . get <identifiersep> is <identifiersep> origin ( ) != null ) { \n <ect>
\t2 storm <identifiersep> topology raw <identifiersep> topology = storm <identifiersep> config . read <identifiersep> nimbus <identifiersep> topology <identifiersep> code ( topology <identifiersep> id , nimbus <identifiersep> data . get <identifiersep> blob <identifiersep> store ( ) ) ; \n \t2 ret . set <identifiersep> raw <identifiersep> topology ( raw <identifiersep> topology ) ; \n \t2 map storm <identifiersep> conf = new hash <identifiersep> map ( ) ; \n \t2 log . info ( <string_literal> , utils . read <identifiersep> default <identifiersep> config ( ) ) ; \n <ect>
\t4 <comment> \n \t4 if ( current <identifiersep> locale == null ) { \n \t5 current <identifiersep> locale = read <identifiersep> system <identifiersep> default <identifiersep> locale ( connection ) ; } } \n \t3 catch ( exception e ) { \n <ect>
\t4 job <identifiersep> result . set <identifiersep> job <identifiersep> status ( async <identifiersep> job <identifiersep> result . status <identifiersep> failed ) ; \n \t4 job <identifiersep> result . set <identifiersep> result ( <string_literal> + job <identifiersep> id + <string_literal> ) ; } \n \t3 txt . commit ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 logger . error ( <string_literal> ) ; \n \t3 return null ; } \n \t2 <identifier> = sid <identifiersep> pattern . matcher ( login <identifiersep> xml ) ; \n \t2 if ( ! <identifier> . find ( ) ) { \n <ect>
<comment> \n \t1 public static object invoke <identifiersep> method ( object proxy , api <identifiersep> method method , map < string , object > properties ) \n \t2 throws runtime <identifiersep> camel <identifiersep> exception { \n <ect>
\t2 if ( code <identifiersep> fragment . context ! is <identifier> <identifiersep> element ) { \n \t3 val attachments = array <identifiersep> of ( attachment <identifiersep> by <identifiersep> <identifier> <identifiersep> file ( position . file ) , \n \t9 attachment <identifiersep> by <identifiersep> <identifier> <identifiersep> file ( code <identifiersep> fragment ) , \n \t9 attachment ( <string_literal> , <string_literal> ) ) \n <ect>
<comment> \n \t1 @ override \n \t1 public void close ( ) throws voldemort <identifiersep> exception { \n <ect>
\t3 return get <identifiersep> <identifier> <identifiersep> state ( flow , name , action <identifiersep> state . class ) ; } \n \t2 final action <identifiersep> state action <identifiersep> state = new action <identifiersep> state ( flow , name ) ; \n \t2 logger . debug ( <string_literal> , action <identifiersep> state . get <identifiersep> id ( ) ) ; \n \t2 action <identifiersep> state . get <identifiersep> action <identifiersep> list ( ) . add <identifiersep> all ( actions ) ; \n <ect>
\t5 list < call > calls = phone . get <identifiersep> calls ( ) ; } \n \t4 assert <identifiersep> equals ( <number_literal> , <identifier> . size ( ) ) ; \n \t3 } ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t8 } catch ( io <identifiersep> exception ex ) { \n \t9 <comment> \n \t8 break ; } } \n \t5 } catch ( socket <identifiersep> timeout <identifiersep> exception e ) { \n <ect>
\t1 if ( on <identifiersep> complete != null ) { \n \t2 try { \n \t2 on <identifiersep> complete . run ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 protected boolean is <identifiersep> available ( ) { \n \t2 try { \n \t3 final string [ ] endpoints = client . get <identifiersep> <identifier> <identifiersep> urls ( ) ; \n \t3 for ( final string endpoint : endpoints ) { \n <ect>
\t2 } catch ( illegal <identifiersep> argument <identifiersep> exception <identifier> ) { \n \t3 return response . ok ( <string_literal> ) \n \t5 . build ( ) ; \n \t2 } catch ( throwable th ) { \n <ect>
\t3 <comment> \n \t3 return false ; } \n \t2 <comment> \n \t2 <comment> \n <ect>
<number_literal> key , \n <number_literal> versioned , \n <number_literal> <identifier> ) ; \n <ect>
\t6 database <identifiersep> utils . get <identifiersep> db <identifiersep> column <identifiersep> type ( metadata . get <identifiersep> column <identifiersep> type ( i ) ) , metadata . get <identifiersep> column <identifiersep> display <identifiersep> size ( i ) ) ; \n \t4 columns . add ( dc ) ; } \n \t3 return columns ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t5 received <identifiersep> one <identifiersep> condition . count <identifiersep> down ( ) ; \n \t5 received . increment <identifiersep> and <identifiersep> get ( ) ; \n \t5 wait <identifiersep> condition . await ( <number_literal> , time <identifiersep> unit . minutes ) ; \n <ect>
public class default <identifiersep> principal <identifiersep> attributes <identifiersep> repository extends abstract <identifiersep> principal <identifiersep> attributes <identifiersep> repository { \n \t1 private static final long serial <identifiersep> version <identifiersep> uid = - <identifier> ; \n \t1 @ override \n \t1 protected void add <identifiersep> principal <identifiersep> attributes ( final string id , final map < string , object > attributes ) { \n <ect>
\t2 boolean b = interceptor <identifiersep> book . class . equals ( type ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 return b ; } \n \t1 public long get <identifiersep> size ( interceptor <identifiersep> book t , class < ? > type , type generic <identifiersep> type , annotation [ ] annotations , media <identifiersep> type media <identifiersep> type ) { \n <ect>
\t3 super ( names ) ; } \n \t2 @ override \n \t2 public command <identifiersep> response run ( zoo <identifiersep> keeper <identifiersep> server zk <identifiersep> server , map < string , string > <identifier> ) { \n \t3 command <identifiersep> response response = initialize <identifiersep> response ( ) ; \n <ect>
\t2 final string <identifiersep> buffer buf = new string <identifiersep> buffer ( ) ; \n \t2 final count <identifiersep> down <identifiersep> latch latch = \n \t4 async <identifiersep> request ( http <identifiersep> client , <string_literal> + port + <string_literal> , buf , session <identifiersep> id ) ; \n \t2 latch . await ( ) ; \n <ect>
\t5 <comment> \n \t5 set <identifiersep> need <identifiersep> to <identifiersep> restart ( true ) ; } \n \t4 remove <identifiersep> request ( request ) ; \n \t4 throw new io <identifiersep> exception ( <string_literal> + name ( ) + <string_literal> ) ; } } \n <ect>
\t2 try { \n \t3 prepared <identifiersep> statement stmt = txn . prepare <identifiersep> auto <identifiersep> close <identifiersep> statement ( insert <identifiersep> sql ) ; \n \t3 stmt . execute <identifiersep> update ( ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t1 public clients built <identifiersep> clients ( ) { \n \t2 final set < base <identifiersep> client > clients = pac4j <identifiersep> delegated <identifiersep> client <identifiersep> factory ( ) . build ( ) ; \n \t2 logger . debug ( <string_literal> , clients ) ; \n \t2 if ( clients . is <identifiersep> empty ( ) ) { \n <ect>
\t4 default : \n \t5 log . error ( util . get <identifiersep> message ( <string_literal> ) , local <identifiersep> addr , hdr . type ) ; \n \t5 break ; } } \n \t2 catch ( throwable t ) { <comment> \n <ect>
\t1 public void test <identifiersep> simple <identifiersep> search <identifiersep> routing ( ) { \n \t2 create <identifiersep> index ( <string_literal> ) ; \n \t2 ensure <identifiersep> green ( ) ; \n \t2 string routing <identifiersep> value = find <identifiersep> non <identifiersep> matching <identifiersep> routing <identifiersep> value ( <string_literal> , <string_literal> ) ; \n <ect>
\t2 root <identifiersep> node . add <identifiersep> content ( record ) ; \n \t2 xml <identifiersep> output . output ( doc , new file <identifiersep> writer ( configuration <identifiersep> check <identifiersep> implementation . get <identifiersep> home <identifiersep> dir ( ) + <string_literal> ) ) ; \n \t1 } catch ( jdom <identifiersep> exception e ) { \n \t2 <comment> \n <ect>
\t1 kdc . create <identifiersep> principal ( keytab , user ) ; \n \t1 <comment> \n \t1 user <identifiersep> group <identifiersep> information ugi = user <identifiersep> group <identifiersep> information . login <identifiersep> user <identifiersep> from <identifiersep> keytab <identifiersep> and <identifiersep> return <identifiersep> ugi ( user , \n \t2 keytab . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n <ect>
\t3 return null ; } \n \t2 final map < string , multifactor <identifiersep> authentication <identifiersep> provider > provider <identifiersep> map = \n \t4 multifactor <identifiersep> authentication <identifiersep> utils . get <identifiersep> available <identifiersep> multifactor <identifiersep> authentication <identifiersep> providers ( this . application <identifiersep> context ) ; \n \t2 if ( provider <identifiersep> map == null || provider <identifiersep> map . is <identifiersep> empty ( ) ) { \n <ect>
\t6 try ( file <identifiersep> input <identifiersep> stream fis = new file <identifiersep> input <identifiersep> stream ( prop <identifiersep> file ) ) { \n \t7 remote <identifiersep> props . load ( fis ) ; \n \t6 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { <comment> \n <ect>
\t2 final long min <identifiersep> local <identifiersep> checkpoint = <identifier> . values ( ) . stream ( ) . min ( long : : compare ) . or <identifiersep> else ( unassigned <identifiersep> seq <identifiersep> no ) ; \n \t2 final allocation <identifiersep> id primary <identifiersep> id = active . iterator ( ) . next ( ) ; \n \t2 final replication <identifiersep> tracker tracker = new <identifiersep> tracker ( primary <identifiersep> id ) ; \n \t2 assert <identifiersep> that ( tracker . get <identifiersep> global <identifiersep> checkpoint ( ) , equal <identifiersep> to ( unassigned <identifiersep> seq <identifiersep> no ) ) ; \n <ect>
\t4 thread . sleep ( <number_literal> ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 throw new runtime <identifiersep> exception ( e ) ; } } \n \t2 if ( status != <number_literal> ) { \n <ect>
\t2 } ; } \n \t1 public synchronized void close ( ) { \n \t2 utilities . close ( socket ) ; } \n \t1 private void monitor <identifiersep> socket ( final socket socket <identifiersep> to <identifiersep> monitor ) { \n <ect>
\t3 return null ; } \n \t2 } ; \n \t2 entities . as <identifiersep> transaction ( volume <identifiersep> info . class , update <identifiersep> function ) . apply ( volume <identifiersep> id ) ; \n \t1 } catch ( exception e1 ) { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + stats <identifiersep> entry <identifiersep> identifier ) ; \n \t5 } else { \n \t6 s <identifiersep> logger . debug ( <string_literal> + stats <identifiersep> entry <identifiersep> identifier ) ; } \n \t4 } else { \n <ect>
\t3 } else { \n \t4 <comment> \n \t4 file jar <identifiersep> file = new file ( jar <identifiersep> path ) ; \n \t4 if ( ! jar <identifiersep> file . exists ( ) ) { \n <ect>
\t3 new file <identifiersep> transfer <identifiersep> progress <identifiersep> thread ( \n \t4 transfer , outgoing <identifiersep> transfer ) . start ( ) ; } \n \t2 catch ( xmpp <identifiersep> exception e ) \n \t2 { \n <ect>
\t4 throw new io <identifiersep> exception ( <string_literal> ) ; } \n \t3 n <identifiersep> split ++ ; } } \n \t1 @ override \n \t1 protected void do <identifiersep> cleanup ( context context ) throws io <identifiersep> exception , interrupted <identifiersep> exception { \n <ect>
\t3 fill <identifiersep> host <identifiersep> hardware <identifiersep> info ( service <identifiersep> context , cmd ) ; \n \t3 fill <identifiersep> host <identifiersep> network <identifiersep> info ( service <identifiersep> context , cmd ) ; \n \t3 fill <identifiersep> host <identifiersep> details <identifiersep> info ( service <identifiersep> context , details ) ; \n \t2 } catch ( runtime <identifiersep> fault e ) { \n <ect>
\t5 get <identifiersep> controller ( table . get <identifiersep> id ( ) ) . if <identifiersep> present ( table <identifiersep> controller - > { \n \t6 if ( ( table . is <identifiersep> tournament ( ) && ! table <identifiersep> controller . is <identifiersep> tournament <identifiersep> still <identifiersep> valid ( ) ) \n \t8 || ( ! table . is <identifiersep> tournament ( ) && ! table <identifiersep> controller . is <identifiersep> match <identifiersep> table <identifiersep> still <identifiersep> valid ( ) ) ) { \n \t7 try { \n <ect>
\t2 output <identifiersep> stream byte <identifiersep> output = new byte <identifiersep> array <identifiersep> output <identifiersep> stream ( ) ; \n \t2 try { \n \t3 content . write <identifiersep> to ( byte <identifiersep> output ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 format formatter = dr <identifiersep> criteria . formatter <identifiersep> for <identifiersep> format ( <identifier> <identifiersep> format ) ; \n \t3 try { \n \t4 s = formatter . format ( ts ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 log . info ( <string_literal> , cache . get <identifiersep> name ( ) , endpoint . get <identifiersep> query ( ) ) ; \n \t2 maybe <identifiersep> fire <identifiersep> existing <identifiersep> query <identifiersep> results ( ) ; } \n \t1 private void maybe <identifiersep> fire <identifiersep> existing <identifiersep> query <identifiersep> results ( ) { \n \t2 if ( ! endpoint . is <identifiersep> fire <identifiersep> existing <identifiersep> query <identifiersep> results ( ) ) { \n <ect>
\t7 dirs . put ( run <identifiersep> level , string <identifiersep> utils . remove <identifiersep> end ( dir , <string_literal> ) + <string_literal> + run <identifiersep> level ) ; } \n \t5 } else { \n \t6 log . debug ( <string_literal> , dir ) ; } \n \t4 } else { \n <ect>
\t5 write <identifiersep> object <identifiersep> to <identifiersep> cell ( sheet . get <identifiersep> cell <identifiersep> by <identifiersep> position ( address ) , val ) ; } } \n \t3 <identifier> . save ( output . get <identifiersep> file <identifiersep> on <identifiersep> disk ( ) . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 <identifier> . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 continue ; } \n \t5 has <identifiersep> non <identifiersep> temp <identifiersep> <identifier> = true ; } \n \t4 addresses . add ( addr ) ; \n \t3 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t1 @ get : output <identifiersep> directory \n \t1 var output : file ? = null \n \t1 @ task <identifiersep> action \n \t1 fun <identifier> <identifiersep> classes ( ) { \n <ect>
<comment> \n \t1 public static string get <identifiersep> token <identifiersep> name ( ) { \n \t2 http <identifiersep> parameters params = action <identifiersep> context . get <identifiersep> context ( ) . get <identifiersep> parameters ( ) ; \n \t2 if ( ! params . contains ( token <identifiersep> name <identifiersep> field ) ) { \n <ect>
\t6 hash <identifier> = convert <identifiersep> to <identifiersep> hash . get <identifiersep> hash ( <identifier> ) ; \n \t6 if ( <identifier> != null ) \n \t7 new <identifiersep> set . add ( <identifier> ) ; \n \t6 else \n <ect>
promise < list < string > > get <identifiersep> queues ( final promise < map < string , string > > queue <identifiersep> map ) { \n \t1 return promise . as <identifiersep> promise ( lists . new <identifiersep> array <identifiersep> list ( queue <identifiersep> map . get ( ) . values ( ) ) ) ; } \n @ asynchronous \n void wait <identifiersep> for ( final promise < void > task ) { \n <ect>
\t3 optional < <identifier> <identifiersep> room > room = <identifier> <identifiersep> room <identifiersep> manager . instance . get <identifiersep> room ( room <identifiersep> id ) ; \n \t3 if ( room . is <identifiersep> present ( ) ) { \n \t4 table <identifiersep> view table = room . get ( ) . create <identifiersep> table ( user <identifiersep> id , options ) ; \n <ect>
\t3 try { \n \t4 skip <identifiersep> list < string , dest <identifiersep> entry > <identifier> = <identifier> <identifiersep> bf . get <identifiersep> index ( <identifier> , <identifier> <identifiersep> string <identifiersep> serializer , <identifier> <identifiersep> dest <identifiersep> serializer ) ; \n \t4 if ( <identifier> == null ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 return null ; } \n \t2 <identifier> <identifiersep> unit = name <identifiersep> unit <identifiersep> mapper . get ( unit <identifiersep> name ) ; \n \t2 <comment> \n \t2 if ( <identifier> <identifiersep> unit == null ) { \n <ect>
\t3 return true ; \n \t2 } catch ( auth <identifiersep> exception e ) { \n \t3 log . debug ( <string_literal> + context . describe ( resource <identifiersep> account <identifiersep> number , resource <identifiersep> name ) + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 uri base = new uri ( api <identifiersep> url ) ; \n \t3 req . set <identifiersep> uri ( new uri ( base . get <identifiersep> scheme ( ) , base . get <identifiersep> user <identifiersep> info ( ) , base . get <identifiersep> host ( ) , \n \t5 base . get <identifiersep> port ( ) , path , null , null ) ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
<number_literal> + group <identifiersep> id + <string_literal> , e ) ; } \n \t8 schedule <identifiersep> group <identifiersep> to <identifiersep> force <identifiersep> complete ( group <identifiersep> id ) ; } \n \t6 } , new date ( system . current <identifiersep> time <identifiersep> millis ( ) + group <identifiersep> timeout ) ) ; \n <ect>
\t6 node <identifiersep> builder child = parent . get <identifiersep> child <identifiersep> node ( child <identifiersep> name ) ; \n \t6 if ( permission <identifiersep> util . check <identifiersep> acl <identifiersep> path ( child , access <identifiersep> <identifier> <identifiersep> path ) ) { \n \t7 child . remove ( ) ; } } } \n \t3 } else { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 list < long > activity <identifiersep> ids = get <identifiersep> activity <identifiersep> ids <identifiersep> with <identifiersep> first <identifiersep> or <identifiersep> last <identifiersep> comments <identifiersep> <identifier> <identifiersep> by <identifiersep> person <identifiersep> id <identifiersep> db <identifiersep> mapper . execute ( in <identifiersep> person \n \t4 . get <identifiersep> id ( ) ) ; \n \t2 { \n <ect>
\t4 dest . get <identifiersep> child <identifiersep> node ( name ) . remove ( ) ; \n \t3 } else if ( action == ignore ) { \n \t4 <comment> \n \t3 } else if ( action == initialize ) { \n <ect>
\t5 <comment> \n \t4 return true ; \n \t3 } else { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 } catch ( exception e ) { \n \t5 s <identifiersep> logger . error ( <string_literal> , e ) ; } } \n \t2 } else { \n <ect>
\t1 synchronized ( tx <identifiersep> counter <identifiersep> lock ) { \n \t1 if ( this . tx <identifiersep> counter > 0 ) { \n \t2 tx <identifiersep> counter = -- this . tx <identifiersep> counter ; } } \n <ect>
<comment> \n \t1 public static boolean is <identifiersep> <identifier> <identifiersep> at <identifiersep> public <identifiersep> <identifier> ( final request <identifiersep> context ctx ) { \n \t2 if ( ctx . get <identifiersep> flow <identifiersep> scope ( ) . contains ( public <identifiersep> <identifier> <identifiersep> attribute ) ) { \n <ect>
\t2 for ( int i = 0 ; i < total ; i ++ ) { \n \t3 producer . send ( session . create <identifiersep> text <identifiersep> message ( <string_literal> + i ) ) ; } \n \t2 <comment> \n \t2 message <identifiersep> list . assert <identifiersep> messages <identifiersep> <identifier> ( total ) ; \n <ect>
\t8 total <identifiersep> term <identifiersep> bytes , terms . size ( ) , terms . get <identifiersep> sum <identifiersep> doc <identifiersep> freq ( ) ) ; } \n \t5 long total <identifiersep> bytes = total <identifiersep> term <identifiersep> bytes + ( <number_literal> * terms . size ( ) ) + ( <number_literal> * terms . get <identifiersep> sum <identifiersep> doc <identifiersep> freq ( ) ) ; \n \t5 return total <identifiersep> bytes ; } \n \t3 } catch ( exception e ) { \n <ect>
\t2 integer <identifier> <identifiersep> length = <identifier> <identifiersep> <identifier> <identifiersep> length ; \n \t2 if ( <identifier> <identifiersep> length != null && ( <identifier> <identifiersep> length < <number_literal> || <identifier> <identifiersep> length > <number_literal> ) ) { \n \t3 throw new configuration <identifiersep> exception ( <string_literal> ) ; \n \t2 } else if ( <identifier> <identifiersep> length == null ) { \n <ect>
\t2 allocation <identifiersep> service strategy = create <identifiersep> allocation <identifiersep> service ( settings . builder ( ) \n \t4 . put ( <string_literal> , <number_literal> ) \n \t4 . put ( cluster <identifiersep> rebalance <identifiersep> allocation <identifiersep> <identifier> . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> allow <identifiersep> rebalance <identifiersep> setting . get <identifiersep> key ( ) , <string_literal> ) \n \t4 . build ( ) ) ; \n <ect>
\t3 handle ( <identifier> ( <string_literal> , key ) , e ) ; } } \n \t1 @ override \n \t1 public key <identifiersep> value <identifiersep> iterable < string , versioned <identifiersep> entry < string , byte [ ] > > search ( final string start <identifiersep> key ) { \n \t2 init <identifiersep> if <identifiersep> needed ( ) ; \n <ect>
\t1 response . set <identifiersep> return ( true ) ; \n \t1 log . debug ( <string_literal> + response . get <identifiersep> status <identifiersep> message ( ) ) ; \n \t1 return response ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 throws repository <identifiersep> exception { \n \t1 if ( pentaho <identifiersep> session <identifiersep> holder . get <identifiersep> session ( ) == null || pentaho <identifiersep> session <identifiersep> holder . get <identifiersep> session ( ) . get <identifiersep> id ( ) == null \n \t2 || pentaho <identifiersep> session <identifiersep> holder . get <identifiersep> session ( ) . get <identifiersep> id ( ) . trim ( ) . equals ( <string_literal> ) ) { <comment> \n <ect>
\t6 log . info ( <string_literal> + msg . get <identifiersep> text ( ) + <string_literal> + received . get <identifiersep> and <identifiersep> increment ( ) + <string_literal> + msg . get <identifiersep> jms <identifiersep> message <identifiersep> id ( ) ) ; \n \t6 assert <identifiersep> true ( msg . get <identifiersep> jms <identifiersep> redelivered ( ) ) ; \n \t6 session . commit ( ) ; \n \t5 } else { \n <ect>
\t2 return true ; \n \t1 } else if ( ats . from ( candidate ) . has ( <identifier> <identifiersep> metric <identifiersep> function . class ) && function . class . is <identifiersep> assignable <identifiersep> from ( candidate ) ) { \n \t2 <identifier> <identifiersep> metric <identifiersep> function <identifier> = ats . from ( candidate ) . get ( <identifier> <identifiersep> metric <identifiersep> function . class ) ; \n \t2 class < ? > <identifier> <identifiersep> type = <identifier> . value ( ) ; \n <ect>
@ deprecated \n public void set <identifiersep> <identifier> <identifiersep> test ( boolean use <identifiersep> is <identifiersep> valid ) \n { \n \t1 if ( <identifier> ) throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; \n <ect>
\t2 log . error ( <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - begin <identifiersep> time <identifiersep> ms ) + <string_literal> + \n \t3 <string_literal> ) ; \n \t2 break ; \n \t2 } else { \n <ect>
\t6 ec . set <identifiersep> fetch <identifiersep> timestamp ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t6 a <identifiersep> job <identifiersep> description = ( <identifier> <identifiersep> job <identifiersep> description ) ec . fault <identifiersep> for <identifiersep> global <identifiersep> id ( id , ec ) ; \n \t6 ec . refresh <identifiersep> object ( ( eo <identifiersep> enterprise <identifiersep> object ) a <identifiersep> job <identifiersep> description ) ; \n <ect>
\t1 public void apply <identifiersep> limit <identifiersep> push <identifiersep> down ( i <identifiersep> realization realization , storage <identifiersep> limit <identifiersep> level storage <identifiersep> limit <identifiersep> level ) { \n \t2 if ( storage <identifiersep> limit <identifiersep> level == storage <identifiersep> limit <identifiersep> level . no <identifiersep> limit ) { \n \t3 return ; } \n \t2 if ( ! realization . supports <identifiersep> limit <identifiersep> push <identifiersep> down ( ) ) { \n <ect>
\t1 private consumer <identifiersep> connection create <identifiersep> deprecated <identifiersep> connection ( abstract <identifiersep> consumer <identifiersep> connection <identifier> <identifiersep> connection , connection <identifiersep> parameters connection <identifiersep> parameters ) { \n \t2 return new deprecated <identifiersep> version <identifiersep> consumer <identifiersep> connection ( create <identifiersep> connection ( <identifier> <identifiersep> connection , connection <identifiersep> parameters ) , <identifier> <identifiersep> connection . get <identifiersep> version <identifiersep> details ( ) ) ; } \n \t1 private class <identifiersep> loader create <identifiersep> implementation <identifiersep> class <identifiersep> loader ( distribution distribution , progress <identifiersep> logger <identifiersep> factory progress <identifiersep> logger <identifiersep> factory , internal <identifiersep> build <identifiersep> progress <identifiersep> listener progress <identifiersep> listener , file user <identifiersep> home <identifiersep> dir , build <identifiersep> cancellation <identifiersep> token cancellation <identifiersep> token ) { \n \t2 class <identifiersep> path implementation <identifiersep> classpath = distribution . get <identifiersep> <identifier> <identifiersep> implementation <identifiersep> classpath ( progress <identifiersep> logger <identifiersep> factory , progress <identifiersep> listener , user <identifiersep> home <identifiersep> dir , cancellation <identifiersep> token ) ; \n <ect>
\t3 <comment> \n \t3 logger . trace ( <string_literal> , recovery <identifiersep> target ) ; \n \t3 return store . metadata <identifiersep> snapshot . empty ; \n \t2 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t4 resources . put ( resource , details ) ; } \n \t2 } catch ( session <identifiersep> authentication <identifiersep> failed e ) { \n \t3 throw new discovered <identifiersep> with <identifiersep> error <identifiersep> exception ( <string_literal> ) ; \n \t2 } catch ( xen <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t1 log . debug ( <string_literal> , report ) ; \n \t1 <comment> \n \t1 host host = cluster <identifiersep> <identifier> . get <identifiersep> host ( host <identifiersep> name ) ; \n \t1 if ( host == null ) { \n <ect>
\t2 <identifier> <identifiersep> executor . submit ( new disconnect <identifiersep> task ( attache , event , true ) ) ; } \n \t1 protected boolean is <identifiersep> host <identifiersep> owner <identifiersep> <identifier> ( final long host <identifiersep> id ) { \n \t2 final host <identifiersep> vo host = <identifier> <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host <identifiersep> id ) ; \n \t2 if ( host == null ) { \n <ect>
\t1 public void test <identifiersep> with <identifiersep> encoder ( ) { \n \t2 this . application <identifiersep> context . get <identifiersep> bean ( single <identifiersep> connection <identifiersep> factory . class ) . create <identifiersep> connection ( ) . close ( ) ; \n \t2 logger log = ( logger ) logger <identifiersep> factory . get <identifiersep> logger ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t1 private void fail ( string msg , exception . . . suppressed ) { \n \t3 <comment> \n \t3 command <identifiersep> string . each <identifiersep> line { line - > logger . error ( line ) } } \n <ect>
\t1 for ( column <identifiersep> generator gen : extra <identifiersep> cols ) { \n \t1 sb . append ( <string_literal> ) . append ( col <identifiersep> num ++ ) . append ( ' ' ) . append ( gen . get <identifiersep> type ( ) ) ; } \n \t1 sb . append ( <string_literal> ) ; \n \t1 sql <identifiersep> statement = sb . to <identifiersep> string ( ) ; \n <ect>
\t2 final markup <identifiersep> parser parser = new markup <identifiersep> parser ( \n \t3 <string_literal> ) ; \n \t2 parser . set <identifiersep> wicket <identifiersep> namespace ( <string_literal> ) ; \n \t2 final i <identifiersep> markup <identifiersep> fragment tokens = parser . parse ( ) ; \n <ect>
\t3 return <identifier> . iterator ( ) ; \n \t2 } catch ( <identifier> <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t2 @ override \n \t2 protected void run <identifiersep> in <identifiersep> context ( ) { \n \t3 try { \n \t4 final list < domain <identifiersep> router <identifiersep> vo > routers = <identifier> <identifiersep> router <identifiersep> dao . list <identifiersep> isolated <identifiersep> by <identifiersep> host <identifiersep> id ( null ) ; \n <ect>
\t2 } catch ( sql <identifiersep> exception e ) { \n \t3 handle ( <identifier> ( <string_literal> , key , <string_literal> , entry ) , e ) ; } } \n \t1 private void init <identifiersep> if <identifiersep> needed ( ) { \n \t2 if ( closed ) { \n <ect>
\t2 assert <identifiersep> equals ( count , candidates ) ; } \n \t1 @ test \n \t1 public void gc <identifiersep> long <identifiersep> running <identifiersep> blob <identifiersep> collection ( ) throws exception { \n \t2 data <identifiersep> store <identifiersep> state state = set <identifiersep> up ( ) ; \n <ect>
\t5 event . event ( event <identifiersep> type . identity <identifiersep> provider <identifiersep> response ) ; \n \t5 event . error ( errors . invalid <identifiersep> signature ) ; \n \t5 return error <identifiersep> page . error ( session , null , response . status . bad <identifiersep> request , messages . invalid <identifiersep> <identifier> ) ; } } \n \t3 if ( request <identifiersep> abstract <identifiersep> type instanceof logout <identifiersep> request <identifiersep> type ) { \n <ect>
\t5 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> \n \t7 + cluster <identifiersep> name + <string_literal> + pod . get <identifiersep> id ( ) + <string_literal> \n \t7 + zone <identifiersep> id , e ) ; } } } \n <ect>
\t1 set < uri > src <identifiersep> uris = new hash <identifiersep> set < > ( ) ; \n \t1 for ( function fn : <identifier> ) { \n \t1 string <identifier> = fn . get <identifiersep> db <identifiersep> name ( ) + <string_literal> + fn . get <identifiersep> function <identifiersep> name ( ) ; \n \t1 if ( <identifier> . contains <identifiersep> key ( fn . get <identifiersep> class <identifiersep> name ( ) ) ) { \n <ect>
\t4 new <identifiersep> window <identifiersep> size = 1 ; \n \t3 con . get <identifiersep> options ( ) . set <identifiersep> window <identifiersep> size ( new <identifiersep> window <identifiersep> size ) ; \n \t3 con . set <identifiersep> <identifier> <identifiersep> window <identifiersep> end ( new <identifiersep> window <identifiersep> size + <identifier> ) ; \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 scheduler . shutdown <identifiersep> now ( ) ; \n \t3 while ( ! scheduler . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . milliseconds ) ) { \n \t4 log . info ( <string_literal> ) ; \n \t4 if ( system . current <identifiersep> time <identifiersep> millis ( ) > limit ) { \n <ect>
\t3 { \n \t4 if ( get <identifiersep> state ( ) == call <identifiersep> peer <identifiersep> state . connected ) \n \t4 { \n <ect>
\t3 a . add <identifiersep> all ( b ) ; \n \t3 return a ; \n \t2 } ) ; \n \t2 if ( instances . is <identifiersep> empty ( ) ) { \n <ect>
\t2 if ( user != null ) { \n \t3 account = account <identifiersep> mgr . get <identifiersep> account ( user . get <identifiersep> account <identifiersep> id ( ) ) ; } \n \t2 if ( ( user == null ) || ( user . get <identifiersep> removed ( ) != null ) || ! user . get <identifiersep> state ( ) . equals ( account . state . enabled ) || ( account == null ) || \n \t4 ! account . get <identifiersep> state ( ) . equals ( account . state . enabled ) ) { \n <ect>
\t1 boolean res = true ; \n \t1 int flags = 0 ; \n \t1 try { \n \t1 command <identifiersep> state . get <identifiersep> instance ( editor ) . pop <identifiersep> state ( ) ; \n <ect>
\t4 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n \t5 assert ( false ) ; \n \t5 return url ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t6 config . properties ( ) . put ( framework <identifiersep> config . need <identifiersep> runtime <identifiersep> injection , true ) ; \n \t6 request <identifiersep> scoped <identifiersep> <identifier> . add <identifiersep> first ( <identifier> ) ; } } \n \t4 if ( ! i . get <identifiersep> class ( ) . is <identifiersep> annotation <identifiersep> present ( request <identifiersep> scoped . class ) ) { \n \t5 if ( ! i . get <identifiersep> class ( ) . is <identifiersep> annotation <identifiersep> present ( application <identifiersep> scoped . class ) ) { \n <ect>
\t3 if ( candidate . get <identifiersep> value ( ) . starts <identifiersep> with ( <identifier> <identifiersep> scheme ) ) { \n \t4 found = candidate ; \n \t4 break ; } } \n \t2 if ( null != found ) { \n <ect>
<comment> \n \t1 public void start ( ) { \n \t2 if ( purge <identifiersep> task <identifiersep> status . started == purge <identifiersep> task <identifiersep> status ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t3 try { \n \t4 <identifier> <identifiersep> pool <identifiersep> model . update ( get <identifiersep> model <identifiersep> controller ( ) ) ; \n \t4 <identifier> <identifiersep> model . set <identifiersep> <identifier> <identifiersep> pool <identifiersep> model ( <identifier> <identifiersep> pool <identifiersep> model ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 return false ; } \n \t2 if ( this . retrieved <identifiersep> on . is <identifiersep> after ( this . not <identifiersep> on <identifiersep> or <identifiersep> after ) ) { \n \t3 logger . warn ( <string_literal> , this . retrieved <identifiersep> on , this . not <identifiersep> on <identifiersep> or <identifiersep> after ) ; \n \t3 return false ; } \n <ect>
\t4 <comment> \n \t4 response = <identifier> . execute ( http <identifiersep> post ) ; \n \t3 } else { \n \t4 <comment> \n <ect>
\t2 resource <identifiersep> bundle names ; \n \t2 if ( null == locale ) { \n \t3 locale = locale . us ; } \n \t2 if ( null == <identifier> <identifiersep> code ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 int missing <identifiersep> bytes = size - available ; \n <ect>
\t3 <comment> \n \t3 do <identifiersep> run ( ) ; \n \t3 <comment> \n \t3 if ( logging <identifiersep> level . error == run <identifiersep> logging <identifiersep> level ) { \n <ect>
\t2 if ( interceptor == null ) { \n \t3 throw new interception <identifiersep> exception ( <string_literal> + type . get <identifiersep> name ( ) \n \t5 + <string_literal> ) ; } \n \t2 if ( interceptor . accepts ( method ) ) { \n <ect>
\t2 classes = immutable <identifiersep> set . copy <identifiersep> of ( local <identifiersep> classes ) ; \n \t2 <identifier> = immutable <identifiersep> set . copy <identifiersep> of ( local <identifiersep> <identifier> ) ; \n \t2 methods = immutable <identifiersep> set . copy <identifiersep> of ( local <identifiersep> methods ) ; \n \t2 fields = immutable <identifiersep> set . copy <identifiersep> of ( local <identifiersep> fields ) ; \n <ect>
\t3 return ; } \n \t2 cube <identifiersep> signature <identifiersep> <identifier> metadata <identifiersep> upgrade = new cube <identifiersep> signature <identifiersep> <identifier> ( args ) ; \n \t2 metadata <identifiersep> upgrade . update ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t2 create <identifiersep> index ( <string_literal> , <string_literal> ) ; \n \t2 ensure <identifiersep> green ( ) ; \n \t2 assert <identifiersep> acked ( admin ( ) . indices ( ) . prepare <identifiersep> aliases ( ) \n \t4 . add <identifiersep> alias <identifiersep> action ( alias <identifiersep> actions . add ( ) . index ( <string_literal> ) . alias ( <string_literal> ) . routing ( <string_literal> ) ) ) ; \n <ect>
\t3 if ( ex . get <identifiersep> cause ( ) instanceof exception ) { \n \t4 ex = ( exception ) ex . get <identifiersep> cause ( ) ; \n \t4 return do <identifiersep> resolve <identifiersep> exception ( request , response , handler , ex ) ; } } \n \t2 catch ( exception resolve <identifiersep> ex ) { \n <ect>
\t3 if ( ! <identifier> <identifiersep> dispatch <identifiersep> <identifier> ) \n \t4 <identifier> <identifiersep> context . job <identifiersep> queue ( ) . add <identifiersep> job ( <identifier> <identifiersep> short <identifiersep> <identifier> <identifiersep> data <identifiersep> job ) ; } } \n \t1 private void do <identifiersep> short <identifiersep> <identifier> <identifiersep> tunnel <identifiersep> data ( <identifier> <identifiersep> message message <identifiersep> body , hash from ) { \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 if ( ! file . exists ( ) ) { \n \t4 if ( <identifier> <identifiersep> storage . mkdir ( <identifier> <identifiersep> pt ) ) { \n \t5 mount <identifiersep> point = <identifier> <identifiersep> pt ; \n \t5 break ; } } \n <ect>
\t2 answer . bind ( <string_literal> , amq ) ; \n \t2 return answer ; } \n \t1 protected class my <identifiersep> bean { \n \t2 public void on <identifiersep> message ( string body ) { \n <ect>
\t9 call <identifiersep> event ce = new call <identifiersep> event ( line ) ; \n \t9 if ( ce . parse <identifiersep> raw <identifiersep> event ( ) ) { \n \t10 handle <identifiersep> call <identifiersep> event ( ce ) ; \n \t9 } else { \n <ect>
\t2 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t1 method m = this . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> + action <identifiersep> num ) ; \n \t1 return ( string ) m . invoke ( this ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t1 throw new runtime <identifiersep> exception ( e ) ; } \n \t1 for ( entry < string , string > property : properties ) { \n \t1 if ( property . table <identifiersep> formatter <identifiersep> class . get <identifiersep> key ( ) . equals ( property . get <identifiersep> key ( ) ) ) { \n \t2 if ( ! status <identifiersep> formatter <identifiersep> class <identifiersep> name . equals ( property . get <identifiersep> value ( ) ) ) { \n <ect>
\t3 logger . debug ( <string_literal> , crls ) ; \n \t3 revoked <identifiersep> crls = crls . stream ( ) . map ( crl - > crl . get <identifiersep> revoked <identifiersep> certificate ( cert ) ) . filter ( objects : : non <identifiersep> null ) . collect ( collectors . to <identifiersep> list ( ) ) ; \n \t3 if ( revoked <identifiersep> crls . size ( ) == crls . size ( ) ) { \n \t4 final x509crl <identifiersep> entry entry = revoked <identifiersep> crls . get ( 0 ) ; \n <ect>
\t2 { \n \t3 if ( ! new <identifiersep> compaction <identifiersep> params . equals ( schema <identifiersep> compaction <identifiersep> params ) ) \n \t4 logger . debug ( <string_literal> , cfs . keyspace . get <identifiersep> name ( ) , cfs . get <identifiersep> table <identifiersep> name ( ) ) ; \n \t3 else if ( current <identifiersep> <identifier> . is <identifiersep> out <identifiersep> of <identifiersep> date ( ) ) \n <ect>
\t1 case skipped <identifiersep> failed : \n \t2 rs . num <identifiersep> skipped ++ ; \n \t2 break ; \n \t1 default : \n <ect>
\t4 broker <identifiersep> view view = broker . get <identifiersep> admin <identifiersep> view ( ) ; \n \t4 if ( view != null ) { \n \t5 object <identifiersep> name [ ] subs = broker . get <identifiersep> admin <identifiersep> view ( ) . get <identifiersep> inactive <identifiersep> durable <identifiersep> topic <identifiersep> subscribers ( ) ; \n \t5 if ( subs != null ) { \n <ect>
\t1 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n \t1 log . error ( <string_literal> + volume <identifiersep> id + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t1 throw e ; \n \t1 } catch ( final throwable e ) { \n <ect>
\t3 try { \n \t4 job <identifiersep> update <identifiersep> event = spawn . get <identifiersep> job <identifiersep> update <identifiersep> event ( job ) ; \n \t4 jobs . put ( job <identifiersep> update <identifiersep> event ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 if ( future . cancel ( true ) ) { \n \t2 <comment> \n <ect>
\t7 <identifier> <identifiersep> log . warn ( <identifier> . get <identifiersep> identity ( ) . calculate <identifiersep> hash ( ) + <string_literal> + <identifier> <identifiersep> key + <string_literal> + <identifier> <identifiersep> router <identifiersep> file ) ; \n \t5 } else if ( <identifier> . get <identifiersep> published ( ) < = <identifier> <identifiersep> known <identifiersep> date ) { \n \t6 <comment> \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 entities . flush ( merged <identifiersep> entity ) ; <comment> \n \t1 trans . commit ( ) ; \n \t1 return merged <identifiersep> entity ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 string s1 = url . to <identifiersep> string ( ) ; \n \t2 string s2 = null ; \n \t2 if ( <identifier> != null ) { \n \t3 s2 = <identifier> . to <identifiersep> string ( ) ; } \n <ect>
\t2 map < string , string > log <identifiersep> level <identifiersep> config ; \n \t2 try { \n \t3 log <identifiersep> level <identifiersep> config = config <identifiersep> extension . get <identifiersep> change <identifiersep> log <identifiersep> level <identifiersep> config ( conf ) ; \n \t2 } catch ( class <identifiersep> cast <identifiersep> exception e ) { \n <ect>
\t3 msg m = d . make <identifiersep> extended <identifiersep> message ( ( byte ) <identifier> , a <identifiersep> <identifier> , a <identifiersep> <identifier> ) ; \n \t3 m . set <identifiersep> quiet <identifiersep> time ( <identifier> ) ; \n \t3 d . enqueue <identifiersep> message ( m , f ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 initialize <identifiersep> shared <identifiersep> data ( ) ; \n \t2 <comment> \n \t2 er <identifiersep> core <identifiersep> user <identifiersep> preferences . user <identifiersep> preferences ( ) . register <identifiersep> handlers ( ) ; \n <ect>
\t2 params . add ( <number_literal> . 00 ) ; \n \t2 sink output = new mock <identifiersep> sink ( ) { \n \t3 @ override \n \t3 public void index ( indexable <identifiersep> object object , boolean create ) throws io <identifiersep> exception { \n <ect>
\t2 < p > reload this page with open console , enter text and hit the log button . . . < / p > \n \t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 final authentication <identifiersep> result authentication <identifiersep> result = this . authentication <identifiersep> system <identifiersep> support . handle <identifiersep> and <identifiersep> finalize <identifiersep> single <identifiersep> authentication <identifiersep> transaction ( service , credential ) ; \n \t3 logger . debug ( <string_literal> ) ; \n \t3 web <identifiersep> utils . put <identifiersep> ticket <identifiersep> granting <identifiersep> ticket <identifiersep> in <identifiersep> scopes ( context , this . central <identifiersep> authentication <identifiersep> service . create <identifiersep> ticket <identifiersep> granting <identifiersep> ticket ( authentication <identifiersep> result ) ) ; \n <ect>
\t1 public representation <identifier> ( final variant variant ) throws resource <identifiersep> exception \n \t1 { \n \t2 { \n <ect>
\t2 try ( input <identifiersep> stream is = plugin <identifiersep> class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ) { \n \t3 plugin <identifiersep> descriptor = from <identifiersep> xml <identifiersep> stream ( is ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 log . info ( <string_literal> , plugin <identifiersep> class ) ; \n <ect>
\t3 } else { \n \t4 try { \n \t5 init <identifiersep> <identifier> = codec <identifiersep> registry . codec <identifiersep> for ( state <identifiersep> type ) . parse ( raw <identifiersep> init <identifiersep> <identifier> ) ; \n \t4 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t3 mbean <identifiersep> registration = whiteboard . register ( synchronization <identifiersep> m <identifiersep> bean . class , bean , immutable <identifiersep> map . of ( \n \t7 <string_literal> , \n \t7 new object <identifiersep> name ( <string_literal> , table ) ) \n \t3 ) ; \n <ect>
\t2 internal <identifiersep> cluster ( ) . ensure <identifiersep> at <identifiersep> most <identifiersep> num <identifiersep> data <identifiersep> nodes ( <number_literal> ) ; \n \t2 allow <identifiersep> nodes ( <string_literal> , <number_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> health = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> wait <identifiersep> for <identifiersep> green <identifiersep> status ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> active <identifiersep> shards ( num <identifiersep> shards . num <identifiersep> primaries * <number_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> nodes ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) ; \n <ect>
\t2 boolean result ; \n \t2 try { \n \t3 result = delete <identifiersep> cisco <identifiersep> nexus <identifiersep> vsm ( cmd . get <identifiersep> cisco <identifiersep> nexus <identifiersep> vsm <identifiersep> device <identifiersep> id ( ) ) ; \n \t2 } catch ( resource <identifiersep> in <identifiersep> use <identifiersep> exception e ) { \n <ect>
\t8 long . parse <identifiersep> long ( args . get ( <string_literal> ) ) ) ; \n \t6 final citrix <identifiersep> request <identifiersep> wrapper citrix <identifiersep> request <identifiersep> wrapper = citrix <identifiersep> request <identifiersep> wrapper . get <identifiersep> instance ( ) ; \n \t6 final ovs <identifiersep> set <identifiersep> tag <identifiersep> and <identifiersep> flow <identifiersep> answer r = ( ovs <identifiersep> set <identifiersep> tag <identifiersep> and <identifiersep> flow <identifiersep> answer ) citrix <identifiersep> request <identifiersep> wrapper . execute ( flow <identifiersep> cmd , citrix <identifiersep> resource <identifiersep> base ) ; \n \t6 if ( ! r . get <identifiersep> result ( ) ) { \n <ect>
\t5 if ( name . ends <identifiersep> with ( <string_literal> ) ) { \n \t6 return true ; } } } \n \t3 return false ; \n \t2 } catch ( storage <identifiersep> exception | uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 try { \n \t4 db <identifiersep> major <identifiersep> version = meta . get <identifiersep> database <identifiersep> major <identifiersep> version ( ) ; \n <ect>
\t6 try { \n \t7 <comment> \n \t7 rel . set <identifiersep> property ( dest <identifiersep> property <identifiersep> key , rel . get <identifiersep> property ( source <identifiersep> property <identifiersep> key ) ) ; \n \t6 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 last <identifiersep> activity <identifiersep> on = - 1 ; \n \t2 started <identifiersep> on = clock . get <identifiersep> instance ( ) . now ( ) ; \n \t2 <identifier> <identifiersep> log = i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( get <identifiersep> class ( ) ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 <comment> \n \t1 public void activate ( final bundle <identifiersep> context bundle <identifiersep> context , final map < string , object > configuration ) { \n <ect>
\t3 <identifier> <identifiersep> rest <identifiersep> request . get <identifiersep> uri ( ) ) ; \n \t2 callback . on <identifiersep> error ( new timeout <identifiersep> exception ( <string_literal> + delay + <string_literal> + <identifier> <identifiersep> rest <identifiersep> request . get <identifiersep> uri ( ) ) ) ; } \n \t1 else if ( ! <identifier> <identifiersep> health <identifiersep> check <identifiersep> response <identifiersep> validator . validate <identifiersep> response ( response . get <identifiersep> response ( ) ) ) \n \t1 { \n <ect>
\t2 reader reader = null ; \n \t2 try { \n \t3 file file = kie <identifiersep> builder <identifiersep> impl . find <identifiersep> pom <identifiersep> properties ( new file ( root <identifiersep> path ) ) ; \n \t3 if ( file == null ) { \n <ect>
\t2 self . set <identifiersep> llap <identifiersep> daemon <identifiersep> queue <identifiersep> prop <identifiersep> attributes ( services , configurations ) \n \t1 else : \n \t2 self . logger . debug ( <string_literal> . format ( llap <identifiersep> queue <identifiersep> name , list ( leaf <identifiersep> queue <identifiersep> names ) ) ) \n \t1 else : \n <ect>
\t2 int received = 0 ; \n \t2 while ( enumeration . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t3 message m = ( message ) enumeration . next <identifiersep> element ( ) ; \n \t3 received ++ ; \n <ect>
\t2 + file . separator + extension <identifiersep> <identifier> <identifiersep> file <identifiersep> name ) ; \n \t1 <comment> \n \t1 if ( extension <identifiersep> meta <identifiersep> info <identifiersep> file . exists ( ) ) { \n <ect>
\t7 valid = false ; } \n \t6 string value = actual <identifiersep> attributes . get ( name ) ; \n \t6 if ( value == null ) \n \t6 { \n <ect>
public void test <identifiersep> override <identifiersep> with <identifiersep> <identifier> <identifiersep> and <identifiersep> compaction ( ) throws interrupted <identifiersep> exception { \n \t1 <comment> \n \t1 store . write ( <identifier> <identifiersep> entry ( internal <identifiersep> cache <identifiersep> entry ( <string_literal> , <string_literal> , - 1 ) ) ) ; \n \t1 write <identifiersep> <identifier> ( ) ; <comment> \n <ect>
\t4 log . warn ( <string_literal> ) ; } \n \t3 string method = ( string ) form . get <identifiersep> parameters ( ) . get ( <string_literal> ) ; \n \t3 if ( ! <string_literal> . equals <identifiersep> ignore <identifiersep> case ( method ) ) { \n \t4 <comment> \n <ect>
\t3 long num <identifiersep> tags = data <identifiersep> helper . from <identifiersep> long ( <identifier> , cur , <number_literal> ) ; \n \t3 if ( ( num <identifiersep> tags < 0 ) || ( num <identifiersep> tags > max <identifiersep> tags <identifiersep> received ) ) throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; \n \t3 if ( num <identifiersep> tags > 0 ) tags = new array <identifiersep> list < session <identifiersep> tag > ( ( int ) num <identifiersep> tags ) ; \n \t3 cur += <number_literal> ; \n <ect>
\t3 <comment> \n \t2 if ( ( obj != null ) && ( obj instanceof boolean ) ) { \n \t3 answer = ( boolean ) obj ; \n \t2 } else { \n <ect>
\t5 logger . debug ( <string_literal> , uri , resolved . get <identifiersep> failure ( ) ) ; \n \t5 <identifier> . fail ( resolved . get <identifiersep> failure ( ) ) ; \n \t4 } ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 audio <identifiersep> double = <identifier> . hts <identifiersep> <identifier> <identifiersep> <identifier> ( <identifier> , <identifier> <identifiersep> <identifier> , str <identifiersep> <identifier> , <identifier> <identifiersep> <identifier> , <identifier> , hts <identifiersep> data , null ) ; \n \t2 <comment> \n \t2 long length <identifiersep> in <identifiersep> samples = ( audio <identifiersep> double . length * <number_literal> ) / ( <identifier> . get <identifiersep> sample <identifiersep> size <identifiersep> in <identifiersep> bits ( ) / <number_literal> ) ; \n <ect>
public void start ( ) { \n \t1 if ( web <identifiersep> socket <identifiersep> channel != null && is <identifiersep> connected ( web <identifiersep> socket <identifiersep> channel ) ) { \n \t1 return ; } \n \t1 long <identifiersep> polling <identifiersep> transport . start ( ) ; \n <ect>
\t2 <comment> \n \t2 string blocked <identifiersep> node = block <identifiersep> node <identifiersep> with <identifiersep> index ( <string_literal> , <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 client . admin ( ) . cluster ( ) . prepare <identifiersep> create <identifiersep> snapshot ( <string_literal> , <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( false ) . set <identifiersep> indices ( <string_literal> ) . get ( ) ; \n <ect>
\t5 if ( allowed <identifiersep> media . contains ( m ) ) { \n \t6 allowed = true ; \n \t6 break ; } \n \t4 if ( ! allowed ) { \n <ect>
\t7 log . debug ( <string_literal> ) ; \n \t7 log . debug ( <string_literal> ) ; \n \t7 log . debug ( <string_literal> , key ) ; \n <ect>
\t4 logger . error ( <string_literal> , request ) ; \n \t4 break ; \n \t3 default : \n \t4 queue <identifiersep> invalid <identifiersep> source ( request ) ; \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + network . get <identifiersep> id ( ) + <string_literal> + ( handled ? <string_literal> : <string_literal> ) + <string_literal> + ne . get <identifiersep> name ( ) ) ; \n \t3 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n \t4 if ( ! continue <identifiersep> on <identifiersep> error ) { \n \t5 throw e ; } \n <ect>
\t3 long remaining <identifiersep> delay = future . get <identifiersep> delay ( time <identifiersep> unit . nanoseconds ) ; \n \t3 <comment> \n \t3 if ( false == future <identifiersep> utils . cancel ( future ) ) { \n \t4 <comment> \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
\t3 thread . current <identifiersep> thread ( ) . set <identifiersep> context <identifiersep> class <identifiersep> loader ( get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) ) ; \n \t3 cloud <identifiersep> blob <identifiersep> directory meta <identifiersep> dir = get <identifiersep> azure <identifiersep> container ( ) . get <identifiersep> directory <identifiersep> reference ( meta <identifiersep> dir <identifiersep> name ) ; \n \t3 cloud <identifiersep> block <identifiersep> blob blob = meta <identifiersep> dir . get <identifiersep> block <identifiersep> blob <identifiersep> reference ( name ) ; \n \t3 if ( ! blob . exists ( ) ) { \n <ect>
\t4 log . debug ( <string_literal> + init <identifiersep> conn + <string_literal> + servers [ i ] ) ; \n \t3 for ( int j = 0 ; j < init <identifiersep> conn ; j ++ ) { \n \t4 sock <identifiersep> io socket = create <identifiersep> socket ( servers [ i ] ) ; \n \t4 if ( socket == null ) { \n <ect>
\t4 else \n \t5 chat <identifiersep> transport . send <identifiersep> <identifier> <identifiersep> message ( message ) ; } } \n \t2 catch ( illegal <identifiersep> state <identifiersep> exception ex ) \n \t2 { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 for ( int i = 0 ; i < message <identifiersep> count ; ++ i ) { \n <ect>
\t3 if ( ! group <identifiersep> <identifier> . contains <identifiersep> key ( group <identifiersep> id ) ) \n \t3 { \n \t4 group <identifiersep> <identifier> . put ( group <identifiersep> id , new array <identifiersep> list < long > ( ) ) ; } \n \t3 group <identifiersep> <identifier> . get ( group <identifiersep> id ) . add ( coordinator <identifiersep> id ) ; } \n <ect>
\t1 } catch ( s3exception e ) { \n \t1 log . warn ( <string_literal> + contexts . lookup ( ) . get <identifiersep> correlation <identifiersep> id ( ) + <string_literal> , e ) ; \n \t1 throw e ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 if ( r != null ) { \n \t4 <identifier> . write <identifiersep> record ( r , tag ) ; } \n \t3 baos . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 logger . lifecycle ( daemon <identifiersep> will <identifiersep> stop <identifiersep> message + reason ) ; \n \t3 lock . lock ( ) ; \n \t3 try { \n \t4 if ( state == state . busy ) { \n <ect>
\t3 <identifier> . close ( ) ; \n \t2 } finally { \n \t3 if ( ! fs . delete <identifiersep> <identifier> ( output <identifiersep> file . path ( ) ) ) \n \t3 if ( fs . exists ( output <identifiersep> file . path ( ) ) ) \n <ect>
\t4 result = this . get <identifiersep> protected <identifiersep> plugin ( ) . add <identifiersep> tags <identifiersep> to <identifiersep> document ( tags , document , this . context ) ; \n \t3 } else { \n \t4 result = tag <identifiersep> operation <identifiersep> result . not <identifiersep> allowed ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t1 log . error ( <string_literal> + cnfe . to <identifiersep> string ( ) ) ; \n \t1 } catch ( exception e ) { \n \t1 log . error ( <string_literal> + e . to <identifiersep> string ( ) ) ; } \n \t1 if ( null == this . user <identifiersep> record ) { \n <ect>
\t3 try { \n \t4 store . put ( key , versioned , null ) ; \n \t4 return versioned . get <identifiersep> version ( ) ; \n \t3 } catch ( invalid <identifiersep> metadata <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void mapping <identifiersep> context <identifiersep> null ( ) { \n <ect>
\t3 . filter ( objects : : non <identifiersep> null ) \n \t3 . for <identifiersep> each ( new <identifiersep> service - > { \n \t4 final registered <identifiersep> service old <identifiersep> service = service <identifiersep> registry <identifiersep> dao . find <identifiersep> service <identifiersep> by <identifiersep> id ( new <identifiersep> service . get <identifiersep> id ( ) ) ; \n \t4 if ( ! new <identifiersep> service . equals ( old <identifiersep> service ) ) { \n <ect>
\t3 return false ; \n \t2 } else if ( <string_literal> . equals <identifiersep> ignore <identifiersep> case ( arg ) ) { \n \t3 return true ; \n \t2 } else { \n <ect>
\t2 j <identifiersep> meter <identifiersep> utils . run <identifiersep> safe ( true , ( ) - > { \n \t3 try { \n \t4 model . add <identifiersep> component ( controller , node ) ; \n \t3 } catch ( illegal <identifiersep> user <identifiersep> action <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public list < registered <identifiersep> service > get <identifiersep> all ( ) { \n \t2 final list < registered <identifiersep> service > services = new array <identifiersep> list < > ( ) ; \n \t2 final scan <identifiersep> request scan = new scan <identifiersep> request ( dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> table <identifiersep> name ( ) ) ; \n <ect>
\t8 . put ( <string_literal> , true ) \n \t8 . put ( <string_literal> , json <identifiersep> mapper . write <identifiersep> value <identifiersep> as <identifiersep> bytes ( segment ) ) \n \t8 . build ( ) \n \t4 ) ; \n <ect>
\t1 private static logger logger = logger . get <identifiersep> logger ( validation <identifiersep> class <identifiersep> validator . class . get <identifiersep> name ( ) ) ; \n \t1 int length ; \n \t1 public void initialize ( validation <identifiersep> class <identifiersep> constraint constraint <identifiersep> annotation ) { \n \t2 length = constraint <identifiersep> annotation . value ( ) ; \n <ect>
\t2 double confidence = semantic <identifiersep> type . get <identifiersep> confidence <identifiersep> score ( ) ; \n \t2 origin origin = semantic <identifiersep> type . get <identifiersep> origin ( ) ; \n \t2 integer count <identifiersep> of <identifiersep> semantic <identifiersep> type = semantic <identifiersep> types <identifiersep> count . get ( domain <identifiersep> uri + property <identifiersep> uri ) ; \n \t2 if ( count <identifiersep> of <identifiersep> semantic <identifiersep> type == null ) { \n <ect>
\t4 set <identifiersep> current <identifiersep> stage ( current <identifiersep> stage . get <identifiersep> next <identifiersep> stage ( ) ) ; \n \t4 stage <identifiersep> advanced = true ; \n \t4 <comment> \n \t4 retry <identifiersep> timer = backoff <identifiersep> timer <identifiersep> start ; \n <ect>
\t2 update <identifiersep> supervisor <identifiersep> info ( ) ; \n \t2 try { \n \t3 storm <identifiersep> cluster <identifiersep> state . supervisor <identifiersep> heartbeat ( supervisor <identifiersep> id , supervisor <identifiersep> info ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 return create <identifiersep> volume ( cmd ) ; \n \t2 } else if ( data . get <identifiersep> object <identifiersep> type ( ) == data <identifiersep> object <identifiersep> type . snapshot ) { \n \t3 return create <identifiersep> snapshot ( cmd ) ; \n \t2 } else if ( data . get <identifiersep> object <identifiersep> type ( ) == data <identifiersep> object <identifiersep> type . template ) { \n <ect>
\t2 if ( get <identifiersep> count ( ) > max <identifiersep> calls * <number_literal> ) { \n \t3 error <identifiersep> msg = <string_literal> + max <identifiersep> calls * <number_literal> + <string_literal> \n \t4 + get <identifiersep> count ( ) + <string_literal> ; } \n \t2 <comment> \n <ect>
\t3 if ( s != null ) \n \t4 description = base64 . decode <identifiersep> utf8 ( s ) ; \n \t3 uri = new <identifier> <identifiersep> uri ( fs . get ( <string_literal> ) ) ; \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t1 storage <identifiersep> layer <identifier> <identifiersep> storage ; \n \t1 @ override \n \t1 public format <identifiersep> info process ( string template <identifiersep> path , image <identifiersep> format format , string template <identifiersep> name ) { \n \t2 if ( format != null ) { \n <ect>
\t1 public void on <identifiersep> exception ( io <identifiersep> exception error ) { \n \t2 log . info ( <string_literal> + error ) ; \n \t2 error . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t1 public void transport <identifiersep> interupted ( ) { \n <ect>
\t2 @ override \n \t2 public void set <identifiersep> meta <identifiersep> class <identifiersep> call <identifiersep> handle <identifiersep> if <identifiersep> <identifier> ( boolean standard <identifiersep> meta <identifiersep> class ) { \n \t3 if ( handle != null ) return ; \n \t3 use <identifiersep> meta <identifiersep> class = true ; \n <ect>
\t7 msg = <string_literal> ; } \n \t6 time <identifiersep> unit . seconds . sleep ( 1 ) ; } \n \t5 msg = <string_literal> ; \n \t4 } catch ( exception ex ) { \n <ect>
\t3 success = false ; } \n \t2 <comment> \n \t2 list < firewall <identifiersep> rule <identifiersep> vo > firewall <identifiersep> rules <identifiersep> to <identifiersep> apply = <identifier> <identifiersep> firewall <identifiersep> dao . list <identifiersep> by <identifiersep> network <identifiersep> and <identifiersep> purpose ( network <identifiersep> id , purpose . firewall ) ; \n \t2 if ( ! <identifier> <identifiersep> firewall <identifiersep> mgr . apply <identifiersep> firewall <identifiersep> rules ( firewall <identifiersep> rules <identifiersep> to <identifiersep> apply , false , caller ) ) { \n <ect>
\t2 style multiple <identifiersep> rules <identifiersep> style = get <identifiersep> catalog ( ) . get <identifiersep> style <identifiersep> by <identifiersep> name ( \n \t4 mock <identifiersep> data . <identifier> <identifiersep> segments . get <identifiersep> local <identifiersep> part ( ) ) . get <identifiersep> style ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( multiple <identifiersep> rules <identifiersep> style ) ; \n \t2 rule rule = multiple <identifiersep> rules <identifiersep> style . get <identifiersep> feature <identifiersep> type <identifiersep> <identifier> ( ) [ 0 ] . get <identifiersep> rules ( ) [ 0 ] ; \n <ect>
\t4 if ( ! up . add <identifiersep> key ( <identifier> , signer ) ) { \n \t5 <comment> \n \t5 f . delete ( ) ; \n \t5 to . delete ( ) ; \n <ect>
\t1 cipher = ciphers . rsa <identifiersep> <identifier> . get ( ) ; \n \t1 cipher . init ( cipher . encrypt <identifiersep> mode , sc <identifiersep> public <identifiersep> key , crypto . get <identifiersep> secure <identifiersep> random <identifiersep> supplier ( ) . get ( ) ) ; \n \t1 return new string ( base64 . encode ( cipher . do <identifiersep> final ( password . get <identifiersep> bytes ( ) ) ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 if ( h <identifiersep> fn == null ) { \n \t1 try { \n \t2 h <identifiersep> fn = handle <identifiersep> explicit <identifiersep> cast ( op , dt ) ; \n \t1 } catch ( semantic <identifiersep> exception e ) { \n <ect>
\t3 return new string <identifiersep> type ( ( string ) value ) ; \n \t2 } else if ( value == null ) { \n \t3 return null ; \n \t2 } else { \n <ect>
\t10 <identifier> ) ; \n \t7 res . get <identifiersep> request ( ) . set <identifiersep> header ( <identifier> <identifiersep> header ) ; } \n \t6 catch ( parse <identifiersep> exception ex ) \n \t6 { \n <ect>
\t5 server . refresh <identifiersep> node <identifiersep> id <identifiersep> from <identifiersep> metadata ( ) ; } \n \t4 logger . info ( <string_literal> + key <identifiersep> string + <string_literal> ) ; } \n \t2 } catch ( voldemort <identifiersep> exception e ) { \n \t3 response . set <identifiersep> error ( proto <identifiersep> utils . encode <identifiersep> error ( error <identifiersep> code <identifiersep> mapper , e ) ) ; \n <ect>
\t1 public void add <identifiersep> to <identifiersep> <identifier> <identifiersep> index ( final indexable indexable ) throws framework <identifiersep> exception { \n \t2 logger . warn ( <string_literal> ) ; } \n \t1 @ override \n \t1 public graph <identifiersep> object <identifiersep> map get <identifiersep> context <identifiersep> object ( string search <identifiersep> term , string text , int context <identifiersep> length ) { \n <ect>
protected void run <identifiersep> one <identifiersep> iteration ( ) throws exception { \n \t1 map < string , cluster > cluster <identifiersep> map = m <identifiersep> clusters <identifiersep> provider . get ( ) . get <identifiersep> clusters ( ) ; \n \t1 for ( cluster cluster : cluster <identifiersep> map . values ( ) ) { \n \t1 try { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + network . get <identifiersep> id ( ) + <string_literal> + account <identifiersep> id + <string_literal> ) ; } } } \n \t3 <comment> \n \t3 list < ? extends ip <identifiersep> address > ips <identifiersep> to <identifiersep> release = <identifier> <identifiersep> ip <identifiersep> address <identifiersep> dao . list <identifiersep> by <identifiersep> account ( account <identifiersep> id ) ; \n \t3 for ( ip <identifiersep> address ip : ips <identifiersep> to <identifiersep> release ) { \n <ect>
\t2 merged <identifiersep> hive <identifiersep> interactive <identifiersep> site [ <identifier> . exec . post . <identifier> ] = updated <identifiersep> hooks <identifiersep> str \n \t2 logger . info ( <string_literal> \n \t5 . format ( existing <identifiersep> hive <identifiersep> exec <identifiersep> post <identifiersep> hooks , updated <identifiersep> hooks <identifiersep> str ) ) \n \t1 else : \n <ect>
\t2 <comment> \n \t2 producer . close ( ) ; \n \t2 session . close ( ) ; \n \t2 xa <identifiersep> connection . close ( ) ; \n <ect>
\t2 final map < string , object > attributes = this . cassandra <identifiersep> repository . get <identifiersep> user ( username ) ; \n \t2 if ( attributes == null || attributes . is <identifiersep> empty ( ) \n \t4 || ! attributes . contains <identifiersep> key ( cassandra <identifiersep> authentication <identifiersep> properties . get <identifiersep> username <identifiersep> attribute ( ) ) \n \t4 || ! attributes . contains <identifiersep> key ( cassandra <identifiersep> authentication <identifiersep> properties . get <identifiersep> password <identifiersep> attribute ( ) ) ) { \n <ect>
\t3 challenge = challenge <identifiersep> response ( exchange , oidc <identifiersep> authentication <identifiersep> error . reason . no <identifiersep> <identifier> <identifiersep> token , null , null ) ; \n \t3 return auth <identifiersep> outcome . not <identifiersep> attempted ; } \n \t2 return ( authenticate <identifiersep> token ( exchange , token <identifiersep> string ) ) ; } \n \t1 protected auth <identifiersep> outcome authenticate <identifiersep> token ( http <identifiersep> facade exchange , string token <identifiersep> string ) { \n <ect>
\t6 result = ( ( linked <identifiersep> list < person <identifiersep> model <identifiersep> view > ) service <identifiersep> action <identifiersep> controller . execute ( current <identifiersep> context , \n \t8 get <identifiersep> people <identifiersep> action ) ) . get <identifiersep> first ( ) ; } \n \t5 catch ( exception e ) \n \t5 { \n <ect>
protected void generate <identifiersep> content ( output <identifiersep> stream output <identifiersep> stream , final mime <identifiersep> type <identifiersep> callback callback ) throws exception { \n \t1 try { \n \t1 http <identifiersep> servlet <identifiersep> response . set <identifiersep> character <identifiersep> encoding ( locale <identifiersep> helper . get <identifiersep> system <identifiersep> encoding ( ) ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t2 scalar <identifiersep> type <identifiersep> wrapper <identifier> = new scalar <identifiersep> type <identifiersep> wrapper ( logical <identifiersep> type , wrapped <identifiersep> type , new attribute <identifiersep> converter <identifiersep> adapter ( converter ) ) ; \n \t2 logger . debug ( <string_literal> , logical <identifiersep> type , persist <identifiersep> type , found <identifiersep> type ) ; \n \t2 add ( <identifier> ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 this . zip <identifiersep> file <identifiersep> name = null ; \n \t2 this . found <identifiersep> file = null ; } \n \t1 public dependencies resolve ( soot <identifiersep> class sc ) { \n \t2 if ( options . v ( ) . verbose ( ) ) \n <ect>
\t3 log . info ( <string_literal> , eol <identifiersep> byte ) ; } \n \t2 set <identifiersep> charset ( charset ) ; \n \t2 string configured <identifiersep> charset = j <identifiersep> meter <identifiersep> utils . get <identifiersep> property ( <string_literal> ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> empty ( configured <identifiersep> charset ) ) { \n <ect>
\t2 logger . info ( <string_literal> , lightwave <identifiersep> ports <identifiersep> to <identifiersep> receive <identifiersep> on ) ; \n \t2 logger . info ( <string_literal> , lightwave <identifiersep> port <identifiersep> to <identifiersep> send <identifiersep> to ) ; \n \t2 logger . info ( <string_literal> , send <identifiersep> register <identifiersep> on <identifiersep> startup ) ; \n \t2 logger . info ( <string_literal> , time <identifiersep> between <identifiersep> sent <identifiersep> messages <identifiersep> ms ) ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t2 latest <identifiersep> config = cluster <identifiersep> config <identifiersep> entity <identifiersep> map . get ( latest <identifiersep> config ) ; \n \t2 <comment> \n \t2 config <identifiersep> types <identifiersep> for <identifiersep> service . add ( latest <identifiersep> config . get <identifiersep> type ( ) ) ; \n \t2 <comment> \n <ect>
\t2 <comment> \n \t2 if ( page <identifiersep> <identifier> ) { \n \t3 log . log <identifiersep> hook = function ( ) { \n \t3 } ; \n <ect>
\t1 ) : <identifier> <identifiersep> descriptor <identifiersep> renderer { \n \t2 val first <identifiersep> unknown <identifiersep> variable = <identifier> <identifiersep> error <identifiersep> data . constraint <identifiersep> system . type <identifiersep> variables . first <identifiersep> or <identifiersep> null { variable - > \n \t3 <identifier> <identifiersep> error <identifiersep> data . constraint <identifiersep> system . get <identifiersep> type <identifiersep> bounds ( variable ) . values . is <identifiersep> empty ( ) \n \t2 } ? : return result . apply { \n <ect>
<comment> \n function register <identifiersep> commands ( ) { \n <ect>
\t5 logger . debug ( <string_literal> , e ) ; } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t4 thread <identifier> = new thread ( new runnable ( ) { \n \t5 public void run ( ) { \n \t6 try { \n \t7 thread . sleep ( <number_literal> ) ; \n <ect>
\t3 read <identifiersep> concern <identifiersep> level <identifier> <identifiersep> level = read <identifiersep> concern <identifiersep> level ( mongo <identifiersep> connection . get <identifiersep> default <identifiersep> read <identifiersep> concern ( db ) ) ; \n \t3 if ( current <identifiersep> level == null ) { \n \t4 log . warn ( <string_literal> + <identifier> <identifiersep> level + <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 thread . sleep ( <number_literal> ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> , duration <identifiersep> open <identifiersep> window ) ; \n \t4 logger . debug ( <string_literal> , <identifier> <identifiersep> duration ) ; \n \t4 logger . debug ( <string_literal> , <identifier> <identifiersep> valve ) ; \n \t4 logger . debug ( <string_literal> , <identifier> ) ; \n <ect>
\t4 <identifier> <identifiersep> log . debug ( <string_literal> + state ) ; \n \t3 <identifier> <identifiersep> transport . send ( packet ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception uhe ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 boolean success = false ; \n \t2 try { \n \t3 success = apply <identifiersep> ip <identifiersep> associations ( network , false ) ; \n \t3 if ( success ) { \n <ect>
\t3 new <identifiersep> link = new compact <identifiersep> object <identifiersep> property <identifiersep> link ( new <identifiersep> id , ( ( compact <identifiersep> object <identifiersep> property <identifiersep> link ) this ) . get <identifiersep> object <identifiersep> property <identifiersep> type ( ) ) ; \n \t2 else if ( this instanceof compact <identifiersep> sub <identifiersep> class <identifiersep> link ) \n \t3 new <identifiersep> link = new compact <identifiersep> sub <identifiersep> class <identifiersep> link ( new <identifiersep> id ) ; \n \t2 else \n <ect>
\t2 response response = client . target ( generate <identifiersep> url ( <string_literal> , url <identifiersep> prefix + ext ) ) . request ( ) \n \t4 . post ( entity . entity ( bar , <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> + response . get <identifiersep> status ( ) ) ; \n \t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t4 return result ; \n \t3 } catch ( final exception e ) { \n \t4 logger . warn ( <string_literal> , e ) ; \n \t4 if ( attempts >= retries ) { \n <ect>
\t2 test <identifiersep> expected ( queue . poll ( ) , segments [ <number_literal> ] ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> puts <identifiersep> ordered ( ) throws throwable { \t1 \n <ect>
\t2 to <identifiersep> create . remove <identifiersep> all ( created ) ; \n \t2 if ( created . is <identifiersep> empty ( ) ) { \n \t3 log . info ( super . <identifier> + <string_literal> ) ; \n \t2 } else if ( created . size ( ) == to <identifiersep> create . size ( ) ) { \n <ect>
\t3 if ( broker <identifiersep> context != null ) { \n \t4 config <identifiersep> to <identifiersep> monitor = utils . resource <identifiersep> from <identifiersep> string ( broker <identifiersep> context . get <identifiersep> configuration <identifiersep> url ( ) ) ; \n \t4 info ( <string_literal> + config <identifiersep> to <identifiersep> monitor ) ; \n \t3 } else { \n <ect>
\t2 if ( reader != null ) { \n \t2 try { \n \t3 reader . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 begin \n \t1 is <identifiersep> successful <identifiersep> scan ( admin , r ) \n \t1 exists = true \n \t1 rescue org . apache . hadoop . hbase . not <identifiersep> <identifier> <identifiersep> region <identifiersep> exception = > e \n <ect>
\t2 return get <identifiersep> <identifier> ( pms . get <identifiersep> configuration ( ) . get <identifiersep> web <identifiersep> height ( ) , height , default <identifiersep> height ) ; } \n \t1 public static int get <identifiersep> width ( ) { \n \t2 return get <identifiersep> <identifier> ( pms . get <identifiersep> configuration ( ) . get <identifiersep> web <identifiersep> width ( ) , width , default <identifiersep> width ) ; } \n \t1 public static boolean trans <identifiersep> <identifier> ( string mime , dlna <identifiersep> media <identifiersep> info media ) { \n <ect>
<comment> \n \t1 public void connection <identifiersep> closed ( ) { \n \t2 lock . lock ( ) ; \n \t2 try { \n <ect>
\t3 try { \n \t4 final constructor < ? > <identifier> = clazz . get <identifiersep> declared <identifiersep> constructor ( param <identifiersep> classes ) ; \n \t4 return ( token <identifiersep> filter ) <identifier> . new <identifiersep> instance ( param <identifiersep> values ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception | instantiation <identifiersep> exception | invocation <identifiersep> target <identifiersep> exception | security <identifiersep> exception e ) { \n <ect>
\t1 if ( delivery <identifiersep> handler instanceof buffered ) { \n \t1 return ( ( buffered ) delivery <identifiersep> handler ) . copy <identifiersep> from <identifiersep> buffer ( time <identifiersep> unit , time , this , stream ) ; } \n \t1 else { \n \t1 <comment> \n <ect>
\t2 msg . set <identifiersep> status ( status ) ; \n \t2 try { \n \t3 do <identifiersep> send ( msg ) ; \n \t2 } catch ( <identifier> <identifiersep> message <identifiersep> exception <identifier> ) { \n <ect>
\t2 build <identifiersep> request <identifiersep> record req = <identifier> <identifiersep> processor . decrypt ( state . msg , <identifier> <identifiersep> context . router <identifiersep> hash ( ) , <identifier> <identifiersep> context . key <identifiersep> manager ( ) . get <identifiersep> private <identifiersep> key ( ) ) ; \n \t2 long decrypt <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) - before <identifiersep> decrypt ; \n \t2 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , decrypt <identifiersep> time ) ; \n \t2 if ( decrypt <identifiersep> time > <number_literal> && <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n \t2 < button ng - click = <string_literal> > info < / button > \n <ect>
\t4 queue . put ( e ) ; \n \t4 long t2 = system . nano <identifiersep> time ( ) ; \n \t4 queue <identifiersep> wait <identifiersep> time += t2 - t1 ; } \n \t2 } catch ( exception err ) { \n <ect>
\t4 streaming <identifiersep> config . set <identifiersep> uuid ( uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ) ; \n \t4 streaming <identifiersep> service . create <identifiersep> streaming <identifiersep> config ( streaming <identifiersep> config , project ) ; \n \t4 save <identifiersep> streaming <identifiersep> success = true ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 registered <identifiersep> service <identifiersep> access <identifiersep> strategy <identifiersep> utils . ensure <identifiersep> service <identifiersep> access <identifiersep> is <identifiersep> allowed ( service , registered <identifiersep> service ) ; \n \t2 final boolean token <identifiersep> as <identifiersep> response = registered <identifiersep> service <identifiersep> property . registered <identifiersep> service <identifiersep> properties . token <identifiersep> as <identifiersep> response . is <identifiersep> assigned <identifiersep> to ( registered <identifiersep> service ) \n \t3 || registered <identifiersep> service <identifiersep> property . registered <identifiersep> service <identifiersep> properties . token <identifiersep> as <identifiersep> service <identifiersep> ticket . is <identifiersep> assigned <identifiersep> to ( registered <identifiersep> service ) ; \n \t2 if ( ! token <identifiersep> as <identifiersep> response ) { \n <ect>
\t1 if ( <identifier> <identifiersep> wrapper . logical <identifiersep> volume <identifiersep> exists ( absolute <identifiersep> lv <identifiersep> name ) ) { \n \t2 try { \n \t2 ( ( iscsi <identifiersep> manager ) manager ) . <identifier> <identifiersep> target ( volume <identifiersep> info . get <identifiersep> volume <identifiersep> id ( ) , iscsi <identifiersep> volume <identifiersep> info . get <identifiersep> tid ( ) , iscsi <identifiersep> volume <identifiersep> info . get <identifiersep> lun ( ) , absolute <identifiersep> lv <identifiersep> name ) ; \n \t2 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n <ect>
\t3 for ( process <identifier> : tablet <identifiersep> server <identifiersep> <identifier> ) { \n \t3 try { \n \t4 cluster . stop <identifiersep> process <identifiersep> with <identifiersep> timeout ( <identifier> , <number_literal> , time <identifiersep> unit . seconds ) ; \n \t3 } catch ( execution <identifiersep> exception | timeout <identifiersep> exception e ) { \n <ect>
\t3 log . error ( <string_literal> ) ; \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( \n \t5 <string_literal> ) ; } \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( namespace <identifiersep> name ) ) { \n <ect>
\t1 public boolean apply ( final class entity <identifiersep> class ) { \n \t1 try ( final transaction <identifiersep> resource tx = entities . transaction <identifiersep> for ( <identifier> <identifiersep> configuration . class ) ) { \n \t2 final <identifier> <identifiersep> configuration configuration = <identifier> <identifiersep> configuration . get <identifiersep> <identifier> <identifiersep> configuration ( ) ; \n \t2 if ( configuration . get <identifiersep> <identifier> <identifiersep> head <identifiersep> response ( ) == null ) { \n <ect>
\t5 jobs . put ( job <identifiersep> id , <identifier> ) ; \n \t5 thread <identifiersep> pool . execute ( td ) ; \n \t5 return job <identifiersep> id ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 log . warn ( <string_literal> ) ; \n \t5 authenticate ( ) ; \n \t5 return read <identifiersep> object ( container <identifiersep> name , object <identifiersep> name ) ; \n \t4 } else { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 ctx . aes ( ) . encrypt ( rv , 0 , rv , 0 , reply <identifiersep> key , reply <identifiersep> iv , rv . length ) ; \n \t2 <comment> \n <ect>
\t2 try { \n \t3 if ( stopping ) \n \t4 throw new grid <identifiersep> exception ( <string_literal> + batch ) ; \n <ect>
\t3 <comment> \n \t3 if ( entry . get <identifiersep> key ( ) . equals ( unreachable ) || entry . get <identifiersep> key ( ) . equals ( my <identifiersep> version ) ) \n \t4 continue ; \n \t3 for ( string host : entry . get <identifiersep> value ( ) ) \n <ect>
\t1 root . log ( level . fatal , <string_literal> + i ) ; \n \t1 exception e = new exception ( <string_literal> ) ; \n \t1 logger . debug ( <string_literal> + ++ i , e ) ; \n \t1 logger . info ( <string_literal> + ++ i , e ) ; \n <ect>
\t3 try { \n \t4 pdu . wait ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { } } \n <ect>
\t1 @ post <identifiersep> construct \n \t1 public void build <identifiersep> factory ( ) { \n \t1 instance = validation . by <identifiersep> default <identifiersep> provider ( ) . configure ( ) \n \t2 . constraint <identifiersep> validator <identifiersep> factory ( constraint <identifiersep> validator <identifiersep> factory ) . build <identifiersep> validator <identifiersep> factory ( ) ; \n <ect>
\t2 string seconds = string . value <identifiersep> of ( system . current <identifiersep> time <identifiersep> millis ( ) / second <identifiersep> <identifier> ) ; \n \t2 string path = write <identifiersep> dir + file . separator + seconds ; \n \t2 try { \n \t3 path <identifiersep> utils . <identifier> ( path ) ; \n <ect>
\t1 if ( protocol == null ) { \n \t1 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t1 protocol = protocol . trim ( ) . to <identifiersep> lower <identifiersep> case ( ) ; \n \t1 if ( protocol . equals ( <string_literal> ) ) { \n <ect>
<comment> \n \t1 public void add <identifiersep> cookie ( final http <identifiersep> servlet <identifiersep> request request , final http <identifiersep> servlet <identifiersep> response response , final string cookie <identifiersep> value ) { \n \t2 final string the <identifiersep> cookie <identifiersep> value = this . cas <identifiersep> cookie <identifiersep> value <identifiersep> manager . build <identifiersep> cookie <identifiersep> value ( cookie <identifiersep> value , request ) ; \n <ect>
\t4 if ( ( verify == true ) && ! ( api . get <identifiersep> response <identifiersep> type ( ) == response <identifiersep> type . error || api . get <identifiersep> response <identifiersep> type ( ) == response <identifiersep> type . empty ) ) { \n \t5 s <identifiersep> logger . error ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; \n \t5 error ++ ; } \n \t4 else if ( ( verify == true ) && ( api . get <identifiersep> response <identifiersep> type ( ) == response <identifiersep> type . error || api . get <identifiersep> response <identifiersep> type ( ) == response <identifiersep> type . empty ) ) { \n <ect>
\t4 if ( target <identifiersep> source != null ) { \n \t5 try { \n \t6 target = target <identifiersep> source . get <identifiersep> target ( ) ; } \n \t5 catch ( exception e ) { \n <ect>
\t3 if ( <identifier> == null ) return ; \n \t3 try { \n \t4 <identifier> . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 log . debug ( <string_literal> , get <identifiersep> extent ( ) ) ; \n \t1 } catch ( io <identifiersep> exception ioe ) { \n \t1 log . error ( <string_literal> + get <identifiersep> extent ( ) , ioe ) ; \n \t1 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t4 final class < authentication <identifiersep> response <identifiersep> handler > clazz = ( class < authentication <identifiersep> response <identifiersep> handler > ) \n \t6 class . for <identifiersep> name ( custom <identifiersep> policy <identifiersep> class ) ; \n \t4 handlers . add ( clazz . get <identifiersep> declared <identifiersep> constructor ( ) . new <identifiersep> instance ( ) ) ; \n \t3 } catch ( final exception e ) { \n <ect>
\t6 . put ( <string_literal> , - 1 ) <comment> \n \t6 . put ( index <identifiersep> service . global <identifiersep> checkpoint <identifiersep> sync <identifiersep> interval <identifiersep> setting . get <identifiersep> key ( ) , <string_literal> ) ) \n \t4 . get ( ) ; \n \t2 for ( int i = 1 ; i < number <identifiersep> of <identifiersep> nodes ; i ++ ) { \n <ect>
\t1 @ before \n \t1 public void clean <identifiersep> database ( ) { \n \t2 try ( final tx tx = app . tx ( ) ) { \n \t3 final list < ? extends node <identifiersep> interface > nodes = app . node <identifiersep> query ( ) . get <identifiersep> as <identifiersep> list ( ) ; \n <ect>
\t3 if ( report <identifiersep> data . char <identifiersep> at ( report <identifiersep> data . length ( ) - 1 ) == ' , ' ) { \n \t4 report <identifiersep> data . delete <identifiersep> char <identifiersep> at ( report <identifiersep> data . length ( ) - 1 ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , e . get <identifiersep> message ( ) ) ; \n <ect>
\t3 clean <identifiersep> internal ( ) ; \n \t2 } catch ( final exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; \n \t2 } finally { \n <ect>
\t7 raise value <identifiersep> error ( err <identifiersep> msg ) \n \t5 self . log . warn ( err <identifiersep> msg ) \n \t4 else : \n \t5 # digest was verified log for debugging purposes \n <ect>
\t1 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t2 if ( i < <number_literal> ) { \n \t2 logger . debug ( <string_literal> + i ) ; \n \t2 } else if ( i < <number_literal> ) { \n <ect>
\t2 try { \n \t3 class . for <identifiersep> name ( vfs <identifiersep> <identifier> ) ; \n \t3 return true ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t4 while ( ! <identifier> <identifiersep> context . throttle ( ) . accept <identifiersep> network <identifiersep> message ( ) ) \n \t5 try { thread . sleep ( <number_literal> ) ; } catch ( interrupted <identifiersep> exception ie ) { } \n \t4 try { \n \t5 <comment> \n <ect>
\t2 <comment> \n \t2 headers . put ( <string_literal> , null ) ; \n \t2 final org . apache . camel . component . <identifier> . api . model . <identifier> <identifiersep> <identifier> <identifiersep> statistics result = request <identifiersep> body <identifiersep> and <identifiersep> headers ( <string_literal> , null , headers ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t6 logger . debug ( <string_literal> , <identifier> . get <identifiersep> name ( ) , \n \t8 ( ( souliss <identifiersep> <identifier> ) <identifier> ) . get <identifiersep> state ( ) , ( ( souliss <identifiersep> <identifier> ) <identifier> ) . state <identifiersep> red , \n \t8 ( ( souliss <identifiersep> <identifier> ) <identifier> ) . state <identifiersep> green , ( ( souliss <identifiersep> <identifier> ) <identifier> ) . state <identifiersep> <identifier> ) ; \n \t5 } else if ( <identifier> . get <identifiersep> type ( ) == constants . souliss <identifiersep> <identifier> ) { \n <ect>
\t9 logger . trace ( <string_literal> + header <identifiersep> name + \n <number_literal> <string_literal> ) ; } } \n <ect>
\t2 new connection ( channel . accept ( ) ) ; \n \t2 } catch ( closed <identifiersep> channel <identifiersep> exception e ) { \n \t2 return ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 final sr sr = create <identifiersep> local <identifiersep> iso <identifiersep> sr ( conn , <identifier> <identifiersep> config <identifiersep> drive <identifiersep> sr <identifiersep> name + <identifier> <identifiersep> host . get <identifiersep> ip ( ) ) ; \n \t2 if ( sr == null ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 return false ; } \n <ect>
\t5 for ( property <identifiersep> key <identifiersep> vertex v : keys ) { \n \t6 try { \n \t7 prop <identifiersep> names . add ( v . name ( ) ) ; \n \t6 } catch ( throwable t ) { \n <ect>
\t3 { \n \t4 load <identifiersep> properties <identifiersep> from <identifiersep> classpath ( ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t1 state <identifiersep> lock . write <identifiersep> lock ( ) . lock ( ) ; \n \t1 try { \n \t1 if ( channel != null ) { \n \t2 if ( cause != null ) { \n <ect>
\t2 log . debug ( <string_literal> , tte ) ; \n \t2 sleep <identifiersep> uninterruptibly ( <number_literal> , time <identifiersep> unit . milliseconds ) ; \n \t1 } catch ( thrift <identifiersep> not <identifiersep> active <identifiersep> service <identifiersep> exception e ) { \n \t2 <comment> \n <ect>
\t1 order <identifiersep> section . add ( m , table <identifiersep> id , value ) ; \n \t1 try { \n \t2 replication <identifiersep> writer . add <identifiersep> mutation ( m ) ; \n \t1 } catch ( mutations <identifiersep> rejected <identifiersep> exception e ) { \n <ect>
\t2 + <string_literal> , e ) ; \n \t1 } catch ( jms <identifiersep> exception e ) { \n \t1 log . error ( <string_literal> , e ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t4 cms <identifiersep> user user = a <identifiersep> cms <identifiersep> ui . get <identifiersep> cms <identifiersep> object ( ) . read <identifiersep> user ( \n \t5 open <identifiersep> cms . get <identifiersep> session <identifiersep> manager ( ) . get <identifiersep> session <identifiersep> info ( new cms <identifiersep> uuid ( id ) ) . get <identifiersep> user <identifiersep> id ( ) ) ; \n \t4 ret . add ( cms <identifiersep> accounts <identifiersep> app . get <identifiersep> principal <identifiersep> info ( user ) ) ; } \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t3 long start <identifiersep> timestamp = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 execution <identifiersep> result result = apply <identifiersep> config <identifiersep> to <identifiersep> vr ( cmd . get <identifiersep> router <identifiersep> access <identifiersep> ip ( ) , config <identifiersep> item , vr <identifiersep> scripts . vr <identifiersep> script <identifiersep> exec <identifiersep> timeout ) ; \n \t4 long elapsed = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> timestamp ; \n <ect>
\t4 logger . warn ( <string_literal> ) ; } \n \t2 } catch ( port <identifiersep> in <identifiersep> use <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , m <identifiersep> serial <identifiersep> device <identifiersep> name ) ; \n \t2 } catch ( unsupported <identifiersep> comm <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , name <identifiersep> id <identifiersep> type . transient ) ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( service . get <identifiersep> required <identifiersep> name <identifiersep> id <identifiersep> format ( ) ) ) { \n \t3 final string fmt = parse <identifiersep> and <identifiersep> build <identifiersep> required <identifiersep> name <identifiersep> id <identifiersep> format ( service ) ; \n \t3 supported <identifiersep> name <identifiersep> formats . add ( 0 , fmt ) ; \n <ect>
\t3 object value = message . get <identifiersep> object <identifiersep> property ( <string_literal> ) ; \n \t3 if ( value instanceof number ) { \n \t4 number n = ( number ) value ; \n \t4 return n . int <identifiersep> value ( ) ; } \n <ect>
\t10 ! collection <identifiersep> utils . contains <identifiersep> instance ( beans . values ( ) , bean <identifiersep> instance ) ) ) { \n \t7 <comment> \n \t7 beans . put ( bean <identifiersep> name , ( bean <identifiersep> instance != null ? bean <identifiersep> instance : bean <identifiersep> name ) ) ; \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 tez <identifiersep> am <identifiersep> pool . replace <identifiersep> session ( to <identifiersep> restart ) ; \n \t2 wm <identifiersep> event . end <identifiersep> event ( to <identifiersep> restart ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 <identifier> = new dhcp <identifiersep> <identifier> <identifiersep> <identifier> ( <number_literal> , ( byte ) <number_literal> ) ; \n \t3 <identifier> . add <identifiersep> discovery <identifiersep> listener ( this ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t3 if ( <identifier> . last <identifiersep> access <identifiersep> time == remove <identifiersep> time && <identifier> . state == state . <identifier> ) { \n \t4 <identifier> . state = state . removed ; \n \t4 should <identifiersep> remove = true ; } } \n \t3 if ( should <identifiersep> remove ) { \n <ect>
\t1 private boolean connect ( ) { \n \t2 try { \n \t3 client <identifiersep> socket = new socket ( host , cli <identifiersep> port ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 for ( result result : scanner ) { \n \t5 cell cell = result . get <identifiersep> column <identifiersep> latest <identifiersep> cell ( cf , <identifier> ) ; \n \t5 byte [ ] value = cell . get <identifiersep> value <identifiersep> array ( ) ; \n \t5 if ( cell . get <identifiersep> value <identifiersep> length ( ) != cell <identifiersep> size ) { \n <ect>
\t5 end <identifiersep> result = false ; \n \t4 } else { \n \t5 results [ i ++ ] = null ; } \n \t3 } catch ( final throwable e ) { \n <ect>
\t3 if ( headers <identifiersep> found && line != null && string <identifiersep> utils . is <identifiersep> blank ( line ) ) { \n \t4 line = input . read <identifiersep> line ( ) ; \n \t3 } else { \n \t4 if ( headers <identifiersep> found ) { \n <ect>
\t2 binding <identifiersep> set . add ( candidate ) ; \n \t2 } else { \n \t2 logger . debug ( <string_literal> , candidate ) ; } } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 context . commit ( ) ; \n \t2 } catch ( <identifier> <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 internal <identifiersep> node copy <identifiersep> node = null ; \n \t2 if ( node instanceof internal <identifiersep> node ) { \n \t3 copy <identifiersep> node = this . copy <identifiersep> node ( ( internal <identifiersep> node ) node , copy <identifiersep> links <identifiersep> to <identifiersep> column <identifiersep> nodes ) ; \n \t2 } else { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 continue ; \n \t5 } catch ( cancelled <identifiersep> key <identifiersep> exception x ) { \n \t6 <comment> \n <ect>
\t2 return get <identifiersep> password ( realm , user ) != null ; } \n \t1 @ override \n \t1 public boolean is <identifiersep> valid ( realm <identifiersep> model realm , user <identifiersep> model user , credential <identifiersep> input input ) { \n \t2 if ( ! ( input instanceof user <identifiersep> credential <identifiersep> model ) ) { \n <ect>
\t1 logger . info ( <string_literal> ) \n \t1 logger . info ( <string_literal> ) \n \t1 self . check <identifiersep> hive <identifiersep> server ( env , <identifier> <identifier> , <identifier> <identifiersep> cmd , params . hive <identifiersep> interactive <identifiersep> hosts , \n \t7 int ( format ( <string_literal> ) ) ) \n <ect>
\t4 sch . connect ( addr ) ; \n \t4 return null ; \n \t3 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t6 log . info ( <string_literal> + rsrc4 ) ; \n \t6 log . info ( <string_literal> + rsrc5 ) ; \n \t6 log . info ( <string_literal> + rsrc6 ) ; \n \t6 log . info ( <string_literal> + rsrc7 ) ; \n <ect>
\t1 return values ; } \n @ test \n public void test <identifiersep> pack <identifiersep> un <identifiersep> pack <identifiersep> against <identifiersep> <identifier> <identifiersep> written ( ) throws io <identifiersep> exception { \n \t1 log . debug ( <string_literal> ) ; \n <ect>
\t4 return xa <identifiersep> resource . xa <identifiersep> ok ; } \n \t3 } ) ; \n \t3 t1 . commit ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 for ( ws <identifiersep> consumer consumer : consumers ) { \n \t5 consumer . send <identifiersep> message ( t ) ; } } } \n \t2 @ override \n \t2 public void on <identifiersep> binary <identifiersep> frame ( byte [ ] message , boolean final <identifiersep> fragment , int <identifier> ) { \n <ect>
\t4 client = new http <identifiersep> client ( ) ; \n \t4 method = new get <identifiersep> method ( url ) ; \n \t4 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n \t4 s <identifiersep> logger . info ( <string_literal> + url ) ; \n <ect>
\t4 if ( this . selector <identifiersep> expression . get <identifiersep> value ( this . evaluation <identifiersep> context , message , boolean . class ) ) { \n \t5 filtered <identifiersep> messages . add ( message ) ; } \n \t4 else { \n <ect>
\t3 if ( source != null ) \n \t4 props . set <identifiersep> property ( prop <identifiersep> source , source ) ; \n \t3 add <identifiersep> entry ( <identifier> , key , dest , props ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 if ( <identifier> <identifiersep> state == null && <identifier> <identifiersep> states . contains ( current <identifiersep> state ) ) { \n \t3 <identifier> <identifiersep> state = current <identifiersep> state ; } \n \t3 if ( current <identifiersep> state . equals ( state . complete ) ) { \n \t3 if ( <identifier> <identifiersep> state != null || options . is <identifiersep> <identifier> ( ) ) { \n <ect>
\t4 { \n \t5 parse <identifiersep> <identifier> ( node . get <identifiersep> child <identifiersep> nodes ( ) ) ; } \n \t4 else \n \t4 { \n <ect>
\t3 if ( current == - 1 ) { \n \t4 log . warn ( <string_literal> , label ) ; \n \t4 return null ; <comment> \n \t3 if ( current < = previous ) { \n <ect>
<number_literal> map < string , string > request <identifiersep> properties , \n <number_literal> boolean run <identifiersep> <identifier> <identifiersep> test ) \n \t1 throws ambari <identifiersep> exception , authorization <identifiersep> exception { \n \t1 if ( requests . is <identifiersep> empty ( ) ) { \n <ect>
\t6 browser . <identifier> ( ) ; \n \t5 } else { \n \t6 browser . close ( ) ; } } \n \t3 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t3 m <identifiersep> report <identifiersep> times <identifiersep> to <identifiersep> console = properties . get <identifiersep> boolean ( <string_literal> , true ) ; \n \t3 m <identifiersep> logback <identifiersep> logger <identifiersep> context = configure <identifiersep> logging ( worker <identifiersep> name , log <identifiersep> directory ) ; \n \t3 m <identifiersep> logger = logger <identifiersep> factory . get <identifiersep> logger ( <string_literal> + worker <identifiersep> name ) ; \n \t3 m <identifiersep> data <identifiersep> logger = logger <identifiersep> factory . get <identifiersep> logger ( <string_literal> ) ; \n <ect>
\t2 if ( zone . get <identifiersep> network <identifiersep> type ( ) == network <identifiersep> type . basic ) { \n \t3 list < vm <identifiersep> instance <identifiersep> vo > system <identifiersep> vms = <identifier> <identifiersep> vm <identifiersep> dao . list <identifiersep> non <identifiersep> removed <identifiersep> vms <identifiersep> by <identifiersep> type <identifiersep> and <identifiersep> network ( network . get <identifiersep> id ( ) , \n \t5 type . console <identifiersep> proxy , type . secondary <identifiersep> storage <identifiersep> vm ) ; \n \t3 if ( system <identifiersep> vms != null && ! system <identifiersep> vms . is <identifiersep> empty ( ) ) { \n <ect>
\t5 { \n \t6 socket . set <identifiersep> send <identifiersep> buffer <identifiersep> size ( database <identifiersep> descriptor . get <identifiersep> <identifier> <identifiersep> send <identifiersep> buffer <identifiersep> size ( ) ) ; } \n \t5 catch ( socket <identifiersep> exception se ) \n \t5 { \n <ect>
\t4 log . debug ( <string_literal> , job , trigger . get <identifiersep> key ( ) ) ; \n \t4 quartz <identifiersep> scheduler . <identifier> <identifiersep> job ( trigger <identifiersep> key , trigger ) ; \n \t3 } else { \n \t4 <comment> \n <ect>
\t3 final <identifier> <identifiersep> violation <identifiersep> metrics m = <identifier> <identifiersep> iterator . next ( ) ; \n \t3 final set < string > <identifier> = collection <identifiersep> util . make <identifiersep> set ( m . <identifier> , m . <identifier> , m . <identifier> ) ; \n \t3 <identifier> . remove <identifiersep> all ( all <identifiersep> samples ) ; \n \t3 if ( ! <identifier> . is <identifiersep> empty ( ) ) { \n <ect>
\t4 throw e ; \n \t3 } else if ( ex instanceof server <identifiersep> api <identifiersep> exception ) { \n \t4 throw ( server <identifiersep> api <identifiersep> exception ) ex ; \n \t3 } else { \n <ect>
<comment> \n \t1 public static void main ( string args [ ] ) { \n \t2 logger . info ( <string_literal> + version ) ; \n <ect>
\t3 while ( ! interrupted ) { \n \t4 try { \n \t5 wait <identifiersep> state <identifiersep> messages ( ) ; \n \t4 } catch ( <identifier> <identifiersep> exception e ) { \n <ect>
\t2 final security <identifiersep> context security <identifiersep> context = ws . get <identifiersep> security <identifiersep> context ( ) ; \n \t2 final app app = structr <identifiersep> app . get <identifiersep> instance ( security <identifiersep> context ) ; \n \t2 try ( final tx tx = app . tx ( ) ) { \n \t3 if ( ! ( obj . is <identifiersep> granted ( permission . delete , security <identifiersep> context ) ) ) { \n <ect>
\t6 if ( buf . length ( ) < = 0 ) { \n \t7 if ( <identifier> <identifiersep> last <identifiersep> ping > 0 ) { \n \t8 if ( now - <identifier> <identifiersep> last <identifiersep> ping >= read <identifiersep> timeout ) { \n \t9 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
@ override \n public void execute ( ) throws exception { \n \t1 logger . info ( <string_literal> ) ; \n \t1 new repository <identifiersep> cleaner ( ) . gc ( ) ; \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> debug <identifiersep> short <identifiersep> <identifier> ( ) \n \t1 { \n \t2 inner . set <identifiersep> level ( level . off ) ; \n <ect>
\t3 } else if ( ports <identifiersep> not <identifiersep> <identifier> . length >= <number_literal> ) { \n \t4 sb . append ( <identifier> ( <string_literal> , new string [ ] { <string_literal> , <string_literal> } , \n \t6 new string [ ] { integer . to <identifiersep> string ( math . abs ( ports <identifiersep> not <identifiersep> <identifier> [ 0 ] ) ) , integer . to <identifiersep> string ( math . abs ( ports <identifiersep> not <identifiersep> <identifier> [ 1 ] ) ) } ) ) ; \n \t4 if ( ports <identifiersep> not <identifiersep> <identifier> . length > <number_literal> ) \n <ect>
\t3 } else if ( <string_literal> == action ) { \n \t4 <comment> \n \t4 note <identifiersep> to <identifiersep> self ( intent , append <identifiersep> text ) \n \t3 } else if ( constants . intent <identifiersep> background <identifiersep> task == action ) { \n <ect>
\t6 . get <identifiersep> bytes ( ) ) ) ; \n \t4 state s = convert <identifiersep> to <identifiersep> state ( vms . get <identifiersep> info ( ) . state ) ; \n \t4 return s ; \n \t3 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t6 collections . sort ( alias <identifiersep> list ) ; \n \t6 aliases . add <identifiersep> all ( alias <identifiersep> list ) ; \n \t6 alias <identifiersep> locations . add <identifiersep> all ( alias <identifiersep> location <identifiersep> list ) ; } \n \t4 } catch ( visitor <identifiersep> exception e ) { \n <ect>
\t1 string config <identifiersep> dir = home + <string_literal> + history <identifiersep> dir <identifiersep> name ; \n \t1 string history <identifiersep> path = config <identifiersep> dir + <string_literal> + history <identifiersep> file <identifiersep> name ; \n \t1 file accumulo <identifiersep> dir = new file ( config <identifiersep> dir ) ; \n \t1 if ( ! accumulo <identifiersep> dir . exists ( ) && ! accumulo <identifiersep> dir . mkdirs ( ) ) \n <ect>
\t4 try { \n \t5 init <identifiersep> network <identifiersep> connection ( ) ; \n \t5 add <identifiersep> notification <identifiersep> listener ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 ) ) ) { \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n <ect>
\t3 <identifier> <identifiersep> span <identifiersep> receiver <identifier> <identifiersep> span <identifiersep> receiver = new <identifier> <identifiersep> span <identifiersep> receiver ( h <identifiersep> trace <identifiersep> configuration . from <identifiersep> map ( conf <identifiersep> map ) ) ; \n \t3 <identifier> . add ( <identifier> <identifiersep> span <identifiersep> receiver ) ; \n \t3 for ( span <identifiersep> receiver receiver : <identifier> ) { \n \t4 trace . add <identifiersep> receiver ( receiver ) ; \n <ect>
\t3 m <identifiersep> sub <identifiersep> device <identifiersep> holder . get <identifiersep> <identifier> ( ) . clear ( ) ; } \n \t2 if ( device != null ) { \n \t3 <identifier> <identifiersep> util . remove ( device ) ; } \n \t2 <comment> \n <ect>
<comment> \n \t1 public wo <identifiersep> response report <identifiersep> exception ( throwable exception , wo <identifiersep> context context , ns <identifiersep> dictionary extra <identifiersep> info ) { \n <ect>
\t6 + <string_literal> ) ; \n \t4 final modify <identifiersep> operation operation = new modify <identifiersep> operation ( modify <identifiersep> connection ) ; \n \t4 final response response = operation . execute ( new modify <identifiersep> request ( current <identifiersep> dn , \n \t6 new attribute <identifiersep> modification ( attribute <identifiersep> modification <identifiersep> type . replace , new <identifier> <identifiersep> pwd <identifiersep> attribute ( new <identifiersep> password ) ) ) ) ; \n <ect>
\t5 s <identifiersep> logger . info ( <string_literal> ) ; \n \t4 } catch ( exception ex ) { \n \t5 s <identifiersep> logger . error ( <string_literal> + ex ) ; } \n \t4 if ( conn == null ) { \n <ect>
\t4 initial <identifiersep> settings <identifiersep> builder . put ( block <identifiersep> setting , true ) ; } \n \t3 settings initial <identifiersep> settings = initial <identifiersep> settings <identifiersep> builder . build ( ) ; \n \t3 logger . info ( <string_literal> , initial <identifiersep> settings ) ; \n \t3 if ( ! initial <identifiersep> settings . is <identifiersep> empty ( ) ) { \n <ect>
\t3 log . error ( <string_literal> , e ) ; \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t3 throw ns <identifiersep> forward <identifiersep> exception . <identifier> <identifiersep> runtime <identifiersep> exception <identifiersep> for <identifiersep> throwable ( e ) ; \n \t2 } catch ( transformer <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 object <identifier> <identifiersep> value = handler . deserialize ( data , context ) ; \n \t4 field <identifiersep> metadata . set <identifiersep> value ( target , <identifier> <identifiersep> value ) ; \n \t3 } catch ( <identifier> <identifiersep> exception e ) { \n <ect>
\t3 } catch ( exception e ) { \n \t4 fail ( <string_literal> , e ) ; } \n \t3 switch ( next <identifiersep> reconnect ) { \n \t4 case succeed : \n <ect>
\t4 class < serializer > clazz = ( class < serializer > ) io <identifiersep> utils . load <identifiersep> class ( serializer . class , default <identifiersep> serializer <identifiersep> class <identifiersep> name ) ; \n \t4 if ( serializer . class . is <identifiersep> assignable <identifiersep> from ( clazz ) ) { \n \t5 default <identifiersep> serializer <identifiersep> class = clazz ; \n \t4 } else { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 if ( ! retry ) { \n \t3 reason = <string_literal> + retry <identifiersep> policy <identifiersep> factory + <string_literal> ; \n \t2 } else { \n \t3 if ( enable <identifiersep> logging ) { \n <ect>
\t3 if ( result instanceof output ) { \n \t4 output = ( output ) result ; \n \t4 s <identifiersep> logger . info ( output ) ; } \n \t2 } catch ( final jaxb <identifiersep> exception e ) { \n <ect>
\t7 . build <identifiersep> view ( blob <identifiersep> store <identifiersep> context . class ) ; \n \t3 context . get <identifiersep> blob <identifiersep> store ( ) . create <identifiersep> container <identifiersep> in <identifiersep> location ( null , cloud <identifiersep> container ) ; \n \t3 log . info ( <string_literal> + cloud <identifiersep> container ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 reload <identifiersep> constraints ( ) ; \n \t2 try { \n \t2 setup <identifiersep> default <identifiersep> security <identifiersep> labels ( extent ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> , binding , authn <identifiersep> request . get <identifiersep> issuer ( ) . get <identifiersep> value ( ) ) ; \n \t2 logger . debug ( <string_literal> , facade . get <identifiersep> entity <identifiersep> id ( ) , binding ) ; \n \t2 @ non <identifiersep> null \n \t2 final assertion <identifiersep> consumer <identifiersep> service svc = facade . get <identifiersep> assertion <identifiersep> consumer <identifiersep> service ( binding ) ; \n <ect>
\t2 <comment> \n \t2 if ( id <identifiersep> manager . is <identifiersep> partitioned <identifiersep> vertex ( vertex <identifiersep> id ) ) { \n \t3 preconditions . check <identifiersep> state ( setup . get <identifiersep> filter <identifiersep> partitioned <identifiersep> <identifier> ( ) , \n \t5 <string_literal> , vertex <identifiersep> id ) ; \n <ect>
\t1 int i = - 1 ; \n \t1 logger . trace ( <string_literal> + ++ i ) ; \n \t1 logger . debug ( <string_literal> + ++ i ) ; \n \t1 logger . warn ( <string_literal> + ++ i ) ; \n <ect>
\t2 @ override \n \t2 protected void finalize ( ) throws throwable { \n \t3 super . finalize ( ) ; \n \t3 if ( ! reference <identifiersep> config . this . destroyed ) { \n <ect>
\t1 @ test ( timeout = <number_literal> ) \n \t1 public void test <identifiersep> connections <identifiersep> are <identifiersep> closed ( ) throws exception { \n \t2 active <identifiersep> mq <identifiersep> admin . enable <identifiersep> jms <identifiersep> frame <identifiersep> tracing ( ) ; \n \t2 final connector <identifiersep> view <identifiersep> m <identifiersep> bean connector = get <identifiersep> proxy <identifiersep> to <identifiersep> connection <identifiersep> view ( get <identifiersep> target <identifiersep> connector <identifiersep> name ( ) ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public sampler next ( ) { \n \t2 fire <identifiersep> iter <identifiersep> events ( ) ; \n <ect>
\t1 public authentication <identifiersep> event <identifiersep> execution <identifiersep> plan <identifiersep> configurer file <identifiersep> authentication <identifiersep> event <identifiersep> execution <identifiersep> plan <identifiersep> configurer ( ) { \n \t2 return plan - > { \n \t3 final resource file = cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> file ( ) . get <identifiersep> filename ( ) ; \n \t3 if ( file != null ) { \n <ect>
\t3 assert . assert <identifiersep> array <identifiersep> equals ( <identifier> . public <identifiersep> key ( ) . get <identifiersep> encoded ( ) , pko . public <identifiersep> key ( ) . get <identifiersep> encoded ( ) ) ; \n \t2 } else { \n \t3 assert . assert <identifiersep> equals ( <identifier> . public <identifiersep> key ( ) , pko . public <identifiersep> key ( ) ) ; } \n \t2 if ( null != optional2nd <identifiersep> key ) { \n <ect>
\t2 logger . info ( <string_literal> , encrypted ) ; \n \t2 try { \n \t3 cipher . decrypt <identifiersep> value ( encrypted ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t3 <identifier> = ref . get <identifiersep> bundle ( ) . get <identifiersep> bundle <identifiersep> context ( ) ; \n \t3 <comment> \n \t3 install <identifiersep> bundles ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t5 <identifier> = endpoint . create <identifiersep> <identifier> ( ) ; } \n \t4 <identifier> . <identifier> ( body ) ; \n \t4 populate <identifiersep> result ( exchange , <identifier> ) ; } \n \t2 } else if ( body instanceof problem <identifiersep> fact <identifiersep> change ) { \n <ect>
\t4 result = new dynamic <identifiersep> html <identifiersep> view ( action . get <identifiersep> content ( ) ) ; \n \t3 } else { \n \t4 final uri <identifiersep> builder builder = new uri <identifiersep> builder ( action . get <identifiersep> location ( ) ) ; \n \t4 final string url = builder . to <identifiersep> string ( ) ; \n <ect>
\t3 <comment> \n \t3 descriptor desc = descriptor . from <identifiersep> filename ( filename . trim ( ) ) ; \n \t3 if ( schema . instance . get <identifiersep> table <identifiersep> metadata <identifiersep> ref ( desc ) == null ) \n \t3 { \n <ect>
\t3 test <identifiersep> zk <identifiersep> client <identifiersep> principal = test <identifiersep> zk <identifiersep> client <identifiersep> principal + <string_literal> + kdc . get <identifiersep> realm ( ) ; \n \t3 test <identifiersep> kafka <identifiersep> server <identifiersep> principal = test <identifiersep> kafka <identifiersep> server <identifiersep> principal + <string_literal> + kdc . get <identifiersep> realm ( ) ; \n \t3 hadoop <identifiersep> service <identifiersep> principal = hadoop <identifiersep> service <identifiersep> principal + <string_literal> + kdc . get <identifiersep> realm ( ) ; \n \t3 log . info ( <string_literal> ) ; \n <ect>
\t3 try { \n \t4 generator . generate <identifiersep> rdf ( true ) ; \n \t4 logger . info ( <string_literal> ) ; \n \t3 } catch ( io <identifiersep> exception e1 ) { \n <ect>
\t3 for ( <identifier> <identifiersep> session <identifiersep> listener listener : listeners ) { \n \t4 try { \n \t5 listener . on <identifiersep> logout ( ) ; \n \t4 } catch ( throwable t ) { \n <ect>
\t3 } else if ( msg <identifiersep> clazz == add <identifiersep> credit . class ) { \n \t4 add <identifiersep> credit request = ( add <identifiersep> credit ) msg ; \n \t4 outbound <identifiersep> queue . add <identifiersep> credit ( request . receiver <identifiersep> id , request . credit ) ; \n \t3 } else { \n <ect>
\t1 { \n \t2 endpoint <identifiersep> state <identifier> = endpoint <identifiersep> state <identifiersep> map . get ( fb <identifiersep> utilities . get <identifiersep> broadcast <identifiersep> address <identifiersep> and <identifiersep> port ( ) ) ; \n \t2 if ( <identifier> != null && ! is <identifiersep> <identifier> <identifiersep> shutdown <identifiersep> state ( <identifier> ) && storage <identifiersep> service . instance . is <identifiersep> joined ( ) ) \n \t2 { \n <ect>
\t4 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> , <string_literal> , <string_literal> ) , \n \t4 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> , <string_literal> , <string_literal> ) , \n \t4 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> , <string_literal> , <string_literal> ) , \n \t4 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> , <string_literal> , <string_literal> ) ) ; \n <ect>
<comment> \n \t2 void on <identifiersep> result ( throwable e ) { \n <ect>
\t5 } else { \n \t6 exception <identifiersep> queue . add ( id ) ; \n \t6 total <identifiersep> deleted += 1 ; } \n \t4 } catch ( exception e ) { \n <ect>
\t2 if ( cube <identifiersep> instance == null ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( cube <identifiersep> instance . get <identifiersep> segments ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t3 if ( field . get <identifiersep> javadoc ( ) . is <identifiersep> present ( ) ) { \n \t4 final configuration <identifiersep> metadata <identifiersep> property prop = create <identifiersep> configuration <identifiersep> property ( field , property ) ; \n \t4 process <identifiersep> nested <identifiersep> class <identifiersep> or <identifiersep> interface <identifiersep> type <identifiersep> if <identifiersep> needed ( field , prop ) ; \n \t3 } else { \n <ect>
\t1 @ reflection <identifiersep> use \n \t1 private pair < job <identifiersep> info . status , string > <identifier> <identifiersep> remove <identifiersep> vm <identifiersep> from <identifiersep> network ( final vm <identifiersep> work <identifiersep> remove <identifiersep> vm <identifiersep> from <identifiersep> network work ) throws exception { \n \t2 final vm <identifiersep> instance <identifiersep> vo vm = <identifier> <identifiersep> entity <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( vm <identifiersep> instance <identifiersep> vo . class , work . get <identifiersep> vm <identifiersep> id ( ) ) ; \n \t2 if ( vm == null ) { \n <ect>
\t3 try { \n \t4 root system <identifiersep> root = root <identifiersep> provider . create <identifiersep> system <identifiersep> root ( store , null ) ; \n \t4 new privilege <identifiersep> definition <identifiersep> writer ( system <identifiersep> root ) . write <identifiersep> built <identifiersep> in <identifiersep> definitions ( ) ; \n \t3 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t2 if ( master <identifiersep> realm == null ) \n \t3 throw new not <identifiersep> found <identifiersep> exception ( <string_literal> ) ; \n \t2 boolean create <identifiersep> realm = false ; \n \t2 if ( realm . equals ( master <identifiersep> realm ) ) { \n <ect>
\t3 logger . debug ( <string_literal> , get <identifiersep> name ( ) , <identifier> , version ) ; \n \t3 return null ; } \n \t2 content <identifiersep> capability content = resource <identifiersep> utils . get <identifiersep> content <identifiersep> capability ( resource ) ; \n \t2 if ( content == null ) { \n <ect>
\t3 self . file <identifiersep> body = [ self . file <identifiersep> body [ 0 ] ] + self . copy <identifiersep> right <identifiersep> txt + self . file <identifiersep> body [ 1 : ] \n \t2 else : \n \t3 self . file <identifiersep> body = self . copy <identifiersep> right <identifiersep> txt + self . file <identifiersep> body \n \t2 file ( self . target <identifiersep> file , <identifier> ) . write ( <string_literal> . join ( self . file <identifiersep> body ) ) \n <ect>
\t1 iterator < entry < string , table . id > > <identifier> <identifiersep> logs = logs . entries ( ) . iterator ( ) ; \n \t1 while ( <identifier> <identifiersep> logs . has <identifiersep> next ( ) ) { \n \t1 entry < string , table . id > <identifier> <identifiersep> log = <identifier> <identifiersep> logs . next ( ) ; \n \t1 if ( replication <identifiersep> table <identifiersep> id . equals ( <identifier> <identifiersep> log . get <identifiersep> value ( ) . canonical <identifiersep> id ( ) ) ) { \n <ect>
\t1 public void start ( bundle <identifiersep> context context ) throws exception { \n \t2 logger . debug ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context context ) throws exception { \n <ect>
\t5 if ( method != null ) { \n \t6 factory . set <identifiersep> feature ( xml <identifiersep> constants . feature <identifiersep> secure <identifiersep> processing , true ) ; \n \t6 for ( object extension <identifiersep> function : <identifier> <identifiersep> extension <identifiersep> functions ) { \n \t7 if ( extension <identifiersep> class . is <identifiersep> instance ( extension <identifiersep> function ) ) { \n <ect>
\t1 split <identifiersep> infos result = null ; \n \t1 try { \n \t2 result = get <identifiersep> file <identifiersep> format <identifiersep> proxy ( ) . apply <identifiersep> <identifier> <identifiersep> to <identifiersep> metadata ( <identifier> , metadata ) ; \n \t1 } catch ( io <identifiersep> exception ex ) { \n <ect>
<comment> \n <comment> \n <comment> \n <ect>
\t1 protected boolean handle <identifiersep> system <identifiersep> lb <identifiersep> ip <identifiersep> release ( load <identifiersep> balancer <identifiersep> vo lb ) { \n \t2 ip <identifiersep> address ip = <identifier> <identifiersep> ip <identifiersep> address <identifiersep> dao . find <identifiersep> by <identifiersep> id ( lb . get <identifiersep> source <identifiersep> ip <identifiersep> address <identifiersep> id ( ) ) ; \n \t2 boolean success = true ; \n \t2 if ( ip . get <identifiersep> system ( ) ) { \n <ect>
\t2 if ( user != null ) { \n \t3 account = <identifier> <identifiersep> account <identifiersep> mgr . get <identifiersep> account ( user . get <identifiersep> account <identifiersep> id ( ) ) ; } \n \t2 if ( ( user == null ) || ( user . get <identifiersep> removed ( ) != null ) || ! user . get <identifiersep> state ( ) . equals ( account . state . enabled ) \n \t3 || ( account == null ) || ! account . get <identifiersep> state ( ) . equals ( account . state . enabled ) ) { \n <ect>
\t2 <identifier> <identifiersep> rs <identifiersep> to <identifiersep> remove . add ( rs ) ; } } \n \t1 for ( reduce <identifiersep> sink <identifiersep> operator rs : <identifier> <identifiersep> rs <identifiersep> to <identifiersep> remove ) { \n \t1 table <identifiersep> scan <identifiersep> operator ts = map . get ( rs ) . get <identifiersep> ts <identifiersep> op ( ) ; \n <ect>
\t5 try { \n \t6 if ( resource != null ) { \n \t7 answer = resource . execute <identifiersep> request ( cmds [ i ] ) ; \n \t7 if ( answer == null ) { \n <ect>
\t1 } catch ( connection <identifiersep> exception e ) { \n \t1 logger . error ( <string_literal> , e ) ; \n \t1 throw new runtime <identifiersep> exception ( <string_literal> , e ) ; } } \n public static void main ( string [ ] args ) { \n <ect>
\t10 context resources ) { \n \t2 int last <identifiersep> upgrade <identifiersep> id = last <identifiersep> id ; \n \t2 for ( upgrade <identifiersep> operation op : operations ) { \n \t3 if ( op . get <identifiersep> id ( ) < = last <identifiersep> id ) continue ; \n <ect>
protected final atomic <identifiersep> boolean cleanup <identifiersep> thread <identifiersep> started = new atomic <identifiersep> boolean ( false ) ; \n protected void close <identifiersep> unused <identifiersep> <identifier> ( ) { \n \t1 for ( thread thread : all <identifiersep> web <identifiersep> <identifier> <identifiersep> threads ) { \n \t1 if ( ! thread . is <identifiersep> alive ( ) ) { \n <ect>
\t5 <comment> \n \t5 request . get <identifiersep> <identifier> <identifiersep> request ( ) . scheme ( ) . set <identifiersep> string ( <string_literal> ) ; \n \t5 set <identifiersep> ports ( request , http <identifiersep> server <identifiersep> port ) ; } } \n <ect>
\t3 logger . warn ( <string_literal> , entity <identifiersep> id ) ; \n \t3 return optional . empty ( ) ; } \n \t2 logger . debug ( <string_literal> , entity <identifiersep> id ) ; \n \t2 if ( entity <identifiersep> descriptor . get <identifiersep> valid <identifiersep> until ( ) != null && entity <identifiersep> descriptor . get <identifiersep> valid <identifiersep> until ( ) . is <identifiersep> before <identifiersep> now ( ) ) { \n <ect>
\t3 } else { \n \t4 <identifier> . set <identifiersep> ip <identifiersep> address ( resp . get <identifiersep> ip <identifiersep> address ( ) ) ; } \n \t3 return <identifier> ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 throw new login <identifiersep> exception ( <string_literal> + principal <identifiersep> attr ) ; } \n \t3 if ( principal <identifiersep> attr . size ( ) > 1 ) { \n \t4 if ( ! this . allow <identifiersep> multiple <identifiersep> principal <identifiersep> attribute <identifiersep> values ) { \n \t5 throw new login <identifiersep> exception ( <string_literal> + principal <identifiersep> attr ) ; } \n <ect>
\t1 private static ns <identifiersep> array < eo <identifiersep> attribute > attributes <identifiersep> from <identifiersep> entity ( eo <identifiersep> entity entity ) { \n \t2 ns <identifiersep> array < eo <identifiersep> attribute > result = ns <identifiersep> array . empty <identifiersep> array ( ) ; \n \t2 if ( entity != null ) { \n \t3 result = entity . attributes ( ) ; \n <ect>
\t2 this . logger = logger ; } \n \t1 @ override \n \t1 public void artifact <identifiersep> <identifier> ( repository <identifiersep> event event ) \n \t1 { \n <ect>
\t3 peer <identifiersep> address <identifiersep> tracker <identifiersep> item peer <identifiersep> item = peer <identifiersep> <identifier> . get ( peer ) ; \n \t3 if ( peer <identifiersep> item == null ) { \n \t4 peer <identifiersep> item = new peer <identifiersep> address <identifiersep> tracker <identifiersep> item ( time <identifiersep> <identifier> <identifiersep> no <identifiersep> packets <identifiersep> received <identifiersep> peer , time <identifiersep> <identifier> <identifiersep> no <identifiersep> packets <identifiersep> sent <identifiersep> peer , peer ) ; \n \t4 if ( peer <identifiersep> <identifier> . size ( ) > max <identifiersep> items ) { \n <ect>
\t4 if ( ! read <identifiersep> connection . get <identifiersep> auto <identifiersep> commit ( ) ) { \n \t5 read <identifiersep> connection . commit ( ) ; } \n \t4 read <identifiersep> connection . close ( ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> equals ( grpc <identifiersep> test <identifiersep> ping <identifiersep> id , pong <identifiersep> response . get <identifiersep> pong <identifiersep> id ( ) ) ; \n \t2 assert <identifiersep> equals ( grpc <identifiersep> test <identifiersep> ping <identifiersep> value + grpc <identifiersep> test <identifiersep> pong <identifiersep> value , pong <identifiersep> response . get <identifiersep> pong <identifiersep> name ( ) ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> with <identifiersep> correct <identifiersep> jwt ( ) throws exception { \n <ect>
\t3 pair customer = <identifier> <identifiersep> customer . get <identifiersep> customer ( ) ; \n \t3 collector . emit ( sequence <identifiersep> topology <identifiersep> def . <identifier> <identifiersep> stream <identifiersep> id , new values ( tuple <identifiersep> id , <identifier> ) ) ; \n \t3 collector . emit ( sequence <identifiersep> topology <identifiersep> def . customer <identifiersep> stream <identifiersep> id , new values ( tuple <identifiersep> id , customer ) ) ; \n \t2 } else if ( obj != null ) { \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 if ( packet . get <identifiersep> address ( ) instanceof <identifier> ) { \n \t4 logger . normal ( this , <string_literal> + destination + <string_literal> + e ) ; \n \t3 } else { \n <ect>
\t3 logger . error ( <string_literal> , device <identifiersep> id ) ; \n \t3 return ; } \n \t2 <identifier> <identifiersep> projector <identifiersep> device remote <identifiersep> controller = device . get <identifiersep> connection ( ) ; \n \t2 if ( remote <identifiersep> controller == null ) { \n <ect>
\t3 <identifier> = new file <identifiersep> input <identifiersep> stream ( <identifier> ) ; \n \t3 <identifier> . skip ( <number_literal> ) ; \n \t3 <identifier> . read ( b ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 { \n \t4 <identifier> . close ( ) ; } \n \t3 catch ( io <identifiersep> exception exception ) \n \t3 { \n <ect>
\t3 logger . debug ( service <identifiersep> table . get <identifiersep> print <identifiersep> info ( ) ) ; \n \t3 logger . info ( <string_literal> + service . get <identifiersep> uri ( ) + <string_literal> ) ; \n \t3 return service <identifiersep> table ; \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t5 case delete : \n \t6 if ( f . delete ( ) ) { \n \t7 break ; \n \t6 } else { \n <ect>
\t4 pstmt . execute <identifiersep> update ( ) ; \n \t4 while ( rs . next ( ) ) { \n \t5 long network <identifiersep> id = rs . get <identifiersep> long ( 1 ) ; \n \t5 long network <identifiersep> offering <identifiersep> id = rs . get <identifiersep> long ( <number_literal> ) ; \n <ect>
\t4 logger . info ( <string_literal> + url ) ; \n \t4 shared <identifiersep> resource sr = find <identifiersep> or <identifiersep> insert <identifiersep> shared <identifiersep> resource <identifiersep> mapper . execute ( new shared <identifiersep> resource <identifiersep> request ( url , null ) ) ; \n \t4 if ( sr != null ) \n \t4 { \n <ect>
\t3 logger . warn ( <string_literal> , <identifier> ) ; \n \t3 int code = http <identifiersep> servlet <identifiersep> response . sc <identifiersep> bad <identifiersep> request ; \n \t3 response . set <identifiersep> status ( code ) ; \n \t2 } catch ( json <identifiersep> parse <identifiersep> exception <identifier> ) { \n <ect>
\t1 public boolean choose <identifiersep> use ( outcome outcome , string message , ability source , game game ) { \n \t2 return this . choose <identifiersep> use ( outcome , message , null , null , null , source , game ) ; } \n \t1 @ override \n \t1 public boolean choose <identifiersep> use ( outcome outcome , string message , string second <identifiersep> message , string true <identifiersep> text , string false <identifiersep> text , ability source , game game ) { \n <ect>
<comment> \n \t1 protected http <identifiersep> context create <identifiersep> http <identifiersep> context ( ) { \n \t2 if ( http <identifiersep> service == null ) { \n <ect>
\t3 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n \t3 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t2 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 request <identifiersep> holder = <identifier> <identifiersep> and <identifiersep> extract <identifiersep> access <identifiersep> token <identifiersep> grant <identifiersep> request ( request , response ) ; \n \t3 logger . debug ( <string_literal> , request <identifiersep> holder ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t9 get <identifiersep> <identifier> <identifiersep> value ( formatter , <identifier> <identifiersep> evaluator , cell ) , \n \t9 merged <identifiersep> col <identifiersep> start ) ; \n \t6 } catch ( runtime <identifiersep> exception e ) { \n \t7 <comment> \n <ect>
\t4 create <identifiersep> <identifier> <identifiersep> menu <identifiersep> item ( peer ) ; } \n \t3 if ( em instanceof j <identifiersep> menu && peer . <identifier> <identifiersep> menu <identifiersep> item != null ) \n \t3 { \n \t4 j <identifiersep> menu m = ( j <identifiersep> menu ) em ; \n <ect>
\t1 for ( session s : session <identifiersep> cache . as <identifiersep> map ( ) . values ( ) ) { \n \t2 try { \n \t3 session <identifiersep> api . logout ( s . get <identifiersep> token ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 logger . info ( msg ) ; \n \t1 throw new io <identifiersep> exception ( msg ) ; } \n \t1 file <identifiersep> lock second <identifiersep> lock = try <identifiersep> lock ( dir ) ; \n \t1 if ( second <identifiersep> lock != null ) { \n <ect>
\t5 if ( account <identifiersep> id != null ) { \n \t6 if ( d <identifiersep> pod . get <identifiersep> account <identifiersep> id ( ) . equals ( account <identifiersep> id ) ) { \n \t7 pods <identifiersep> to <identifiersep> release . add ( d <identifiersep> pod ) ; \n \t6 } else { \n <ect>
\t3 relocation <identifiersep> source = relocation <identifiersep> target ; \n \t3 if ( indexing <identifiersep> thread . is <identifiersep> alive ( ) == false ) { <comment> \n \t4 break ; } \n \t3 if ( i > 0 && i % <number_literal> == 0 ) { \n <ect>
\t2 transaction <identifiersep> legacy txn = transaction <identifiersep> legacy . open ( transaction <identifiersep> legacy . usage <identifiersep> db ) ; \n \t2 try { \n \t3 return list <identifiersep> latest <identifiersep> events ( end <identifiersep> date ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 try { \n \t3 blueprint . validate <identifiersep> topology ( ) ; \n \t2 } catch ( invalid <identifiersep> topology <identifiersep> exception e ) { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( e . get <identifiersep> message ( ) ) ; } } \n <ect>
\t7 listener . node <identifiersep> changed ( ) ; } \n \t6 catch ( exception e ) \n \t6 { \n \t7 thread <identifiersep> utils . check <identifiersep> interrupted ( e ) ; \n <ect>
\t3 log . info ( <identifier> . get <identifiersep> email ( ) + <string_literal> ) ; \n \t3 return authentication <identifiersep> method . success ; \n \t2 } catch ( throwable t ) { \n \t3 <comment> \n <ect>
public void test <identifiersep> state <identifiersep> transfer <identifiersep> restart ( ) throws throwable { \n \t1 final int num <identifiersep> keys = <number_literal> ; \n \t1 add <identifiersep> cluster <identifiersep> enabled <identifiersep> cache <identifiersep> manager ( cfg <identifiersep> builder , new transport <identifiersep> flags ( ) . with <identifiersep> fd ( true ) ) ; \n \t1 add <identifiersep> cluster <identifiersep> enabled <identifiersep> cache <identifiersep> manager ( <identifier> <identifiersep> builder , cfg <identifiersep> builder , new transport <identifiersep> flags ( ) . with <identifiersep> fd ( true ) ) ; \n <ect>
\t6 log . info ( <string_literal> + exec ) ; \n \t6 log . info ( <string_literal> + <identifier> <identifiersep> home ) ; \n \t6 log . info ( <string_literal> + grid <identifiersep> name ) ; \n \t6 log . info ( <string_literal> + spring <identifiersep> ctx ) ; \n <ect>
\t5 txn . commit ( ) ; \n \t5 return no <identifiersep> duplicate ; \n \t3 } catch ( exception e ) \n \t3 { \n <ect>
\t5 <string_literal> , \n \t5 this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) , command <identifiersep> class . get <identifiersep> label ( ) , command <identifiersep> class <identifiersep> code , endpoint <identifiersep> id ) ) ; \n \t3 zwave <identifiersep> command <identifiersep> class = this . get <identifiersep> node ( ) . get <identifiersep> command <identifiersep> class ( command <identifiersep> class ) ; } \n \t2 if ( zwave <identifiersep> command <identifiersep> class == null ) { \n <ect>
\t4 <comment> \n \t4 log . debug ( string . format ( <string_literal> , fname ) ) ; } \n \t3 <comment> \n \t3 if ( local <identifiersep> file <identifiersep> ret == null ) { \n <ect>
\t3 wait <identifiersep> write ( <number_literal> ) ; \n \t3 room . send <identifiersep> message ( messages <identifiersep> to <identifiersep> send [ <number_literal> ] ) ; \n \t3 wait <identifiersep> write ( <number_literal> ) ; \n \t3 test <identifiersep> msg <identifiersep> history <identifiersep> service <identifiersep> multi <identifiersep> chat . control <identifiersep> <identifier> = new date ( ) ; \n <ect>
\t3 hbase <identifiersep> admin . enable <identifiersep> table ( table <identifiersep> name ) ; \n \t3 break ; } \n \t2 case copy <identifiersep> file <identifiersep> in <identifiersep> meta : { \n \t3 <comment> \n <ect>
\t1 <identifier> . when ( component <identifiersep> location . get <identifiersep> file <identifiersep> name ( ) ) . then <identifiersep> return ( empty ( ) ) ; \n \t1 component . set <identifiersep> annotations ( collections . singleton <identifiersep> map ( location <identifiersep> key , component <identifiersep> location ) ) ; } \n private static final transient string thread <identifiersep> result <identifiersep> line = string <identifiersep> utils . repeat ( ' - ' , <number_literal> ) ; \n private static void log <identifiersep> threads <identifiersep> result ( string result ) { \n <ect>
\t2 if ( ability . activate ( sim , false ) && ability . is <identifiersep> uses <identifiersep> stack ( ) ) { \n \t3 game . fire <identifiersep> event ( new game <identifiersep> event ( game <identifiersep> event . event <identifiersep> type . triggered <identifiersep> ability , ability . get <identifiersep> id ( ) , ability . get <identifiersep> source <identifiersep> id ( ) , ability . get <identifiersep> controller <identifiersep> id ( ) ) ) ; } \n \t2 sim . apply <identifiersep> <identifier> ( ) ; \n \t2 simulation <identifiersep> node2 new <identifiersep> node = new simulation <identifiersep> node2 ( parent , sim , depth , player <identifiersep> id ) ; \n <ect>
\t1 <identifier> <identifiersep> info <identifier> <identifiersep> info = null ; \n \t1 try { \n \t1 <identifier> <identifiersep> info = transactions . find ( new <identifier> <identifiersep> info ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 } ) ) ; \n \t3 logger . trace ( <string_literal> ) ; \n \t2 } catch ( exception ex ) { \n \t3 <comment> \n <ect>
<number_literal> <string_literal> , consistency <identifiersep> level . name ( ) ) ; \n \t3 tracing . instance . begin ( <string_literal> , trace <identifiersep> parameters ) ; } \n \t2 else \n \t2 { \n <ect>
\t5 if ( <identifier> <identifiersep> heap <identifiersep> histogram ) \n \t6 return ; \n \t5 <identifier> <identifiersep> heap <identifiersep> histogram = true ; } \n \t4 heap <identifiersep> utils . log <identifiersep> heap <identifiersep> histogram ( ) ; } \n <ect>
\t2 do <identifiersep> socket <identifiersep> close ( socket , log <identifiersep> message , true ) ; } \n \t1 void do <identifiersep> socket <identifiersep> close ( socket socket , string log <identifiersep> message , boolean reset ) { \n \t2 if ( socket != null && socket . is <identifiersep> connected ( ) && ! socket . is <identifiersep> closed ( ) ) { \n \t3 if ( log <identifiersep> message != null && ! log <identifiersep> message . is <identifiersep> empty ( ) ) { \n <ect>
\t1 for ( transaction <identifiersep> callback callback : callback <identifiersep> list ) { \n \t2 try { \n \t2 callback . pre <identifiersep> commit ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 command <identifiersep> listener . command <identifiersep> succeeded ( new command <identifiersep> succeeded <identifiersep> event ( message . get <identifiersep> id ( ) , connection <identifiersep> description , command <identifiersep> name , response , \n \t5 elapsed <identifiersep> time <identifiersep> nanos ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 jpa <identifiersep> service . execute ( new workflow <identifiersep> action <identifiersep> update <identifiersep> jpa <identifiersep> executor ( wf <identifiersep> action ) ) ; } \n \t5 catch ( jpa <identifiersep> executor <identifiersep> exception je ) { \n \t6 throw new command <identifiersep> exception ( je ) ; } \n \t5 catch ( exception ex ) { \n <ect>
\t8 log . warn ( <string_literal> , e . get <identifiersep> localized <identifiersep> message ( ) ) ; } \n \t6 } catch ( io <identifiersep> exception e ) { <comment> \n <ect>
\t1 protected void internal <identifiersep> transform ( body body , string phase <identifiersep> name , map < string , string > options ) { \n \t2 if ( this . throw <identifiersep> analysis == null ) \n \t3 this . throw <identifiersep> analysis = scene . v ( ) . get <identifiersep> default <identifiersep> throw <identifiersep> analysis ( ) ; \n \t2 if ( options . v ( ) . verbose ( ) ) \n <ect>
\t3 try { \n \t4 s <identifiersep> logger . trace ( <string_literal> ) ; \n \t4 <identifier> <identifiersep> conn . set <identifiersep> auto <identifiersep> commit ( false ) ; \n \t3 } catch ( final sql <identifiersep> exception e ) { \n <ect>
\t2 err <identifiersep> thread . interrupt ( ) ; } \n \t1 try { \n \t2 err <identifiersep> reader . close ( ) ; \n \t1 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t5 if ( from <identifiersep> last <identifiersep> host ) { \n \t6 <comment> \n \t7 s <identifiersep> logger . debug ( <string_literal> ) ; \n <ect>
\t1 current <identifiersep> bean <identifiersep> store . set ( sync <identifiersep> bean <identifiersep> store ) ; \n \t1 if ( request <identifiersep> context . associate ( sync <identifiersep> bean <identifiersep> store ) ) { \n \t2 request <identifiersep> context . activate ( ) ; } \n \t1 else { \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t4 return broker <identifiersep> a . get <identifiersep> destination ( new active <identifiersep> mq <identifiersep> queue ( <string_literal> ) ) \n \t6 . get <identifiersep> consumers ( ) . size ( ) == <number_literal> ; } \n \t2 } ) ; \n \t2 current <identifiersep> count = producer <identifiersep> tester . get <identifiersep> sent <identifiersep> count ( ) ; \n <ect>
\t2 synchronized ( reconnect <identifiersep> mutex ) { \n \t3 if ( started ) { \n \t4 if ( rebalance ) { \n \t5 do <identifiersep> rebalance = true ; } \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 try { \n \t3 index <identifiersep> writer . commit ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public void test <identifiersep> <identifier> <identifiersep> in <identifiersep> feature <identifiersep> chaining ( ) { \n \t2 string path = <string_literal> ; \n \t2 document doc = get <identifiersep> as <identifiersep> dom ( path ) ; \n \t2 if ( print <identifiersep> doc ) { \n <ect>
\t2 * log . info ( <string_literal> + list ) ; \n \t2 * assert <identifiersep> equals ( <string_literal> + list , 1 , list . size ( ) ) ; list = \n \t2 * <identifier> . get <identifiersep> instances <identifiersep> of ( injector , <identifier> . <identifier> <identifiersep> of ( route <identifiersep> builder \n \t2 * . class ) . and ( <identifier> . annotated <identifiersep> with ( names . named ( <string_literal> ) ) ) ) ; \n <ect>
\t4 create <identifiersep> internal <identifiersep> item ( item <identifiersep> name , prov ) ; \n \t3 } catch ( <identifier> <identifiersep> device <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> , item <identifiersep> name ) ; } \n \t2 } else { \n <ect>
\t4 return ; \n \t3 chan . configure <identifiersep> blocking ( false ) ; \n \t3 if ( ! <identifier> <identifiersep> transport . allow <identifiersep> connection ( ) ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 segment . get <identifiersep> table <identifiersep> entry ( ) . set <identifiersep> segment <identifiersep> offset ( segment <identifiersep> offset ) ; \n \t2 header . get <identifiersep> start <identifiersep> mark ( ) . write ( out ) ; \n \t2 segment . write ( out ) ; } \n \t1 long index <identifiersep> table <identifiersep> start <identifiersep> pos = tell ( ) ; <comment> \n <ect>
\t6 default : \n \t7 unreachable <identifiersep> code ( ) ; } \n \t4 } catch ( exception e ) { \n \t5 <comment> \n <ect>
\t4 log . debug ( <string_literal> ) ; \n \t3 } else if ( param <identifiersep> type . is <identifiersep> array ( ) && list . class . is <identifiersep> assignable <identifiersep> from ( object <identifiersep> type ) ) { \n \t4 <comment> \n \t4 log . debug ( <string_literal> ) ; \n <ect>
\t1 def test <identifiersep> <identifier> <identifiersep> enable <identifiersep> ha <identifiersep> when <identifiersep> host <identifiersep> disabled ( self ) : \n \t2 <string_literal> <string_literal> <string_literal> \n <ect>
\t3 final string result = this . <identifier> <identifiersep> instance . decrypt ( enc <identifiersep> value ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( result ) ) { \n \t4 logger . debug ( <string_literal> , enc <identifiersep> value ) ; \n \t4 return result ; } \n <ect>
\t3 return ; } \n \t2 <comment> \n \t2 id = <identifier> <identifiersep> runner . get <identifiersep> session <identifiersep> id ( dest . calculate <identifiersep> hash ( ) ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 if ( ! <identifier> <identifiersep> set . is <identifiersep> empty ( ) ) \n \t1 { \n \t1 for ( string param <identifiersep> value : <identifier> <identifiersep> set ) \n \t1 { \n <ect>
\t4 thread . sleep ( 1000l ) ; \n \t4 string text = ( ( text <identifiersep> message ) message ) . get <identifiersep> text ( ) ; \n \t4 log . info ( <string_literal> + text ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 logger . info ( <string_literal> + mage <identifiersep> object . get <identifiersep> name ( ) ) ; \n \t5 } else { \n \t6 player player = game . get <identifiersep> player ( a . get <identifiersep> first <identifiersep> target ( ) ) ; \n \t6 if ( player != null ) { \n <ect>
\t1 stack <identifiersep> event <identifiersep> helper . create <identifiersep> global <identifiersep> stack <identifiersep> event ( stack <identifiersep> id , account <identifiersep> id , resource <identifiersep> status , resource <identifiersep> status <identifiersep> reason , stack <identifiersep> version ) ; \n \t1 return <string_literal> ; <comment> \n @ override \n public string init <identifiersep> create <identifiersep> resource ( string resource <identifiersep> id , string stack <identifiersep> id , string account <identifiersep> id , string effective <identifiersep> user <identifiersep> id , string reverse <identifiersep> dependent <identifiersep> resources <identifiersep> json , int stack <identifiersep> version ) { \n <ect>
\t3 security <identifiersep> log . info ( subject , <string_literal> , role <identifiersep> name ) ; \n \t3 return new <identifiersep> role ; } \n \t2 catch ( authorization <identifiersep> violation <identifiersep> exception | io <identifiersep> exception | invalid <identifiersep> arguments <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 else if ( this . requires <identifiersep> reply && ! is <identifiersep> async ( ) ) { \n \t3 throw new reply <identifiersep> required <identifiersep> exception ( message , <string_literal> + \n \t5 get <identifiersep> component <identifiersep> name ( ) + <string_literal> ) ; } \n <ect>
\t3 get <identifiersep> camel <identifiersep> context ( ) . remove <identifiersep> component ( this . component <identifiersep> scheme ) ; \n \t3 <comment> \n \t3 get <identifiersep> camel <identifiersep> context ( ) . add <identifiersep> service ( component , true , true ) ; \n \t3 get <identifiersep> camel <identifiersep> context ( ) . add <identifiersep> component ( this . component <identifiersep> scheme , component ) ; } \n <ect>
\t1 map < string , set < string > > persisted <identifiersep> data = null ; \n \t1 try { \n \t2 persisted <identifiersep> data = cache <identifiersep> manager . get <identifiersep> <identifier> <identifiersep> apps <identifiersep> from <identifiersep> store ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t5 } catch ( io <identifiersep> exception e ) { \n \t6 string error <identifiersep> message = <string_literal> ; \n \t6 log . error ( error <identifiersep> message , e ) ; \n \t6 throw new mllp <identifiersep> j <identifiersep> unit <identifiersep> resource <identifiersep> exception ( error <identifiersep> message , e ) ; } } } \n <ect>
\t2 channel <identifiersep> buffer response <identifiersep> content = channel <identifiersep> buffers . dynamic <identifiersep> buffer ( ) ; \n \t2 response <identifiersep> content . write <identifiersep> bytes ( output <identifiersep> stream . to <identifiersep> byte <identifiersep> array ( ) ) ; \n \t2 response . set <identifiersep> content ( response <identifiersep> content ) ; \n <ect>
\t2 if ( i % <number_literal> == 0 ) log . warn ( <string_literal> + i + <string_literal> ) ; \n \t2 <identifier> . add ( fqn ) ; } \n \t1 system . gc ( ) ; \n \t1 long duration = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n <ect>
\t6 <identifier> <identifiersep> nic <identifiersep> dao . update ( nic <identifiersep> id , nic ) ; } \n \t5 if ( answer . get <identifiersep> details ( ) != null ) { \n \t6 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> id + answer . get <identifiersep> details ( ) ) ; } } \n \t3 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t2 log . debug ( <string_literal> + this . snapshot <identifiersep> id + <string_literal> ) ; \n \t2 if ( upload <identifiersep> future . get ( ) != null ) { \n \t2 log . info ( <string_literal> + this . snapshot <identifiersep> id + <string_literal> + upload <identifiersep> future . get ( ) ) ; \n \t2 } else { \n <ect>
\t3 log . error ( <string_literal> + ase . get <identifiersep> error <identifiersep> code ( ) ) ; \n \t3 log . error ( <string_literal> + ase . get <identifiersep> error <identifiersep> message ( ) , ase ) ; \n \t2 } catch ( amazon <identifiersep> client <identifiersep> exception <identifier> ) { \n \t3 log . error ( <string_literal> ) ; \n <ect>
\t5 broker <identifiersep> stamp += <string_literal> + get <identifiersep> broker <identifiersep> name ( ) ; } \n \t4 message <identifiersep> dispatch . get <identifiersep> message ( ) . set <identifiersep> property ( get <identifiersep> stamp <identifiersep> property ( ) , broker <identifiersep> stamp ) ; \n \t4 message <identifiersep> dispatch . get <identifiersep> message ( ) . set <identifiersep> <identifier> <identifiersep> properties ( null ) ; } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t5 log . warn ( <string_literal> , \n \t7 key , value <comment> ) ; \n \t5 log . debug ( <string_literal> , key , value , re ) ; } \n \t3 } catch ( runtime <identifiersep> exception re ) { \n <ect>
\t1 { \n \t2 if ( row <identifiersep> size > database <identifiersep> descriptor . get <identifiersep> compaction <identifiersep> large <identifiersep> partition <identifiersep> warning <identifiersep> threshold ( ) ) \n \t2 { \n \t3 string key <identifiersep> string = metadata ( ) . partition <identifiersep> key <identifiersep> type . get <identifiersep> string ( key . get <identifiersep> key ( ) ) ; \n <ect>
\t1 final bit <identifiersep> <identifier> <identifiersep> writer writer = bit <identifiersep> <identifier> . get <identifiersep> bit <identifiersep> <identifier> <identifiersep> writer ( i , manual <identifiersep> out ) ; \n \t1 for ( int j = 0 ; j < values . length ; j ++ ) { \n \t2 writer . write ( values [ j ] ) ; } \n \t1 final byte [ ] packed <identifiersep> manual <identifiersep> as <identifiersep> bytes = manual <identifiersep> out . to <identifiersep> byte <identifiersep> array ( ) ; \n <ect>
\t3 this . is <identifiersep> channel <identifiersep> connecting = true ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception ex ) { \n \t3 logger . warn ( string . format ( <string_literal> , ex . get <identifiersep> message ( ) ) ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 assert . assert <identifiersep> null ( object ) ; \n \t2 assert . assert <identifiersep> true ( <string_literal> + ( <identifier> - <identifier> ) + <string_literal> , <identifier> - <identifier> >= timeout ) ; \n \t2 if ( <identifier> - <identifier> > <number_literal> * timeout ) { \n \t3 log . warning ( <string_literal> ) ; } \n <ect>
\t3 if ( dir != null ) { \n \t4 less <identifiersep> files . delete <identifiersep> dir ( dir ) ; } } } \n \t1 @ test \n \t1 public void delete <identifiersep> one <identifiersep> thread ( ) throws exception { \n <ect>
\t2 client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> refresh ( <string_literal> ) . get ( ) ; \n \t2 <comment> \n \t2 num <identifiersep> shards number <identifiersep> of <identifiersep> shards = get <identifiersep> num <identifiersep> shards ( <string_literal> ) ; \n \t2 logger . debug ( <string_literal> , number <identifiersep> of <identifiersep> shards . total <identifiersep> num <identifiersep> shards , number <identifiersep> of <identifiersep> shards . num <identifiersep> primaries ) ; \n <ect>
\t3 bulk <identifiersep> node <identifiersep> client . flush <identifiersep> <identifier> ( ) ; \n \t3 bulk <identifiersep> node <identifiersep> client . wait <identifiersep> for <identifiersep> responses ( time <identifiersep> value . time <identifiersep> value <identifiersep> seconds ( <number_literal> ) ) ; \n \t3 for ( string index : index <identifiersep> replica <identifiersep> map . key <identifiersep> set ( ) ) { \n \t4 try { \n <ect>
\t1 try { \n \t1 final <identifier> <identifiersep> css <identifiersep> compressor compressor = new <identifier> <identifiersep> css <identifiersep> compressor ( reader ) ; \n \t1 compressor . compress ( writer , <identifier> ) ; \n \t1 } catch ( final exception e ) { \n <ect>
\t1 tr . commit ( ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 throw new no <identifiersep> such <identifiersep> entity <identifiersep> exception ( src <identifiersep> object <identifiersep> key ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 st . close ( ) ; } \n \t2 if ( null != manager ) { \n \t2 manager . close ( ) ; } \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t3 synchronized ( this . socket <identifiersep> server <identifiersep> lock ) \n \t3 { \n \t4 if ( this . socket <identifiersep> server == null ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 if ( audio <identifiersep> codec != null ) { \n \t4 try { \n \t5 p <identifiersep> audio <identifiersep> codec = pattern . compile ( audio <identifiersep> codec ) ; \n \t4 } catch ( pattern <identifiersep> syntax <identifiersep> exception <identifier> ) { \n <ect>
public void status ( string message ) { reporter . set <identifiersep> status ( message . to <identifiersep> string ( ) ) ; } \n public void count ( string group , string name , long amount ) { \n \t1 reporter . get <identifiersep> counter ( group . to <identifiersep> string ( ) , name . to <identifiersep> string ( ) ) . increment ( amount ) ; } \n public synchronized void fail ( string message ) { \n <ect>
\t3 filter <identifiersep> chain . do <identifiersep> filter ( request , response ) ; } \n \t2 finally { \n \t3 reset <identifiersep> context <identifiersep> <identifier> ( ) ; \n <ect>
\t1 num <identifiersep> llap <identifiersep> nodes = <identifier> <identifiersep> env <identifiersep> properties [ <identifier> <identifiersep> llap <identifiersep> <identifier> ] \n \t1 elif <identifier> <identifiersep> env and <identifier> <identifiersep> llap <identifiersep> <identifier> in <identifier> <identifiersep> env : \n \t1 num <identifiersep> llap <identifiersep> nodes = <identifier> <identifiersep> env [ <identifier> <identifiersep> llap <identifiersep> <identifier> ] \n \t1 else : \n <ect>
\t4 <comment> \n \t4 final <identifiersep> resource = resource <identifiersep> chain . get ( 0 ) ; } \n \t3 return final <identifiersep> resource ; \n \t2 } else { \n <ect>
\t2 if ( providers != null && ! providers . is <identifiersep> empty ( ) ) { \n \t3 final multifactor <identifiersep> authentication <identifiersep> provider provider = this . multifactor <identifiersep> authentication <identifiersep> provider <identifiersep> selector . resolve ( providers , service , principal ) ; \n \t3 logger . debug ( <string_literal> , provider ) ; \n \t3 if ( ! provider . is <identifiersep> available ( service ) ) { \n <ect>
\t2 avg . add <identifiersep> <identifier> ( err ) ; \n \t2 log . info ( <string_literal> \n \t5 + <string_literal> , slice . index ( ) , e . index ( ) , pref , confidence , estimate ) ; } } } \n \t1 double rmse = math . sqrt ( avg . get <identifiersep> average ( ) ) ; \n <ect>
\t2 stub <identifiersep> manager . for <identifiersep> each ( stub - > { \n \t3 try { \n \t4 stub . get <identifiersep> members ( <identifier> . this . cluster <identifiersep> name , <identifier> . this ) ; } \n \t3 catch ( throwable t ) { \n <ect>
\t3 final object value = resolved <identifiersep> attributes . get ( mapped <identifiersep> attr ) ; \n \t3 logger . debug ( <string_literal> , mapped <identifiersep> attr , value , claim ) ; \n \t3 return pair . of ( claim , value ) ; } \n \t2 final object value = resolved <identifiersep> attributes . get ( claim ) ; \n <ect>
\t4 + <string_literal> , ticket <identifiersep> id , ticket <identifiersep> metadata <identifiersep> map . key <identifiersep> set ( ) ) ; } \n \t2 return defn ; } \n \t1 @ override \n \t1 public ticket <identifiersep> definition find ( final ticket ticket ) { \n <ect>
\t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n \t2 logger . info ( <string_literal> + entity ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> no <identifiersep> content , response . get <identifiersep> status ( ) ) ; } \n \t1 void do <identifiersep> dtd <identifiersep> fails ( string ext ) throws exception { \n <ect>
\t1 <comment> \n \t1 try { \n \t2 log . trace ( <string_literal> + sr . get <identifiersep> path ( ) ) ; \n \t2 if ( ! files . delete <identifiersep> if <identifiersep> exists ( paths . get ( sr . get <identifiersep> path ( ) ) ) ) { \n <ect>
\t6 <identifier> <identifiersep> context . <identifier> ( ) . <identifier> <identifiersep> router <identifiersep> <identifier> ( peer , reason , buf . to <identifiersep> string ( ) ) ; \n \t6 return ; } } \n \t3 } catch ( io <identifiersep> exception ioe ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n \t4 return ; } \n \t3 <identifier> ++ ; } \n \t2 if ( <identifier> == 0 ) { \n <ect>
\t2 assert <identifiersep> equals ( num <identifiersep> messages , msg <identifiersep> committed . size ( ) ) ; \n \t2 assert <identifiersep> equals ( msg <identifiersep> sent , msg <identifiersep> committed ) ; } \n \t1 protected void tear <identifiersep> down ( ) throws exception { \n \t2 if ( connection != null ) { \n <ect>
\t1 for ( string bean <identifiersep> name : bean <identifiersep> factory . get <identifiersep> bean <identifiersep> definition <identifiersep> names ( ) ) { \n \t2 validate <identifiersep> bean <identifiersep> scope ( bean <identifiersep> name , bean <identifiersep> factory . get <identifiersep> bean <identifiersep> definition ( bean <identifiersep> name ) ) ; } } } \n protected void validate <identifiersep> bean <identifiersep> scope ( string bean <identifiersep> name , bean <identifiersep> definition bd ) { \n \t1 if ( bd != null && string <identifiersep> utils . is <identifiersep> empty ( bd . get <identifiersep> scope ( ) ) ) { \n <ect>
\t4 string suffix = child <identifiersep> name . substring ( prefix . length ( ) ) ; \n \t4 long child <identifiersep> id = new long ( suffix ) ; \n \t4 ordered <identifiersep> children . put ( child <identifiersep> id , child <identifiersep> name ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void member <identifiersep> is <identifiersep> failed ( instance <identifiersep> id instance <identifiersep> id ) \n \t1 { \n <ect>
\t1 log . info ( <string_literal> ) ; } \n public void add ( final cassandra <identifiersep> host cassandra <identifiersep> host ) { \n \t1 <identifier> <identifiersep> host <identifiersep> queue . add ( cassandra <identifiersep> host ) ; \n <ect>
\t1 public void complete ( transaction transaction ) { \n \t2 txn <identifiersep> step ( <string_literal> , transaction ) ; } \n \t1 @ override \n \t1 public sys <identifiersep> trans <identifiersep> state detach ( ) { \n <ect>
\t1 <comment> \n \t1 try { \n \t1 temp <identifiersep> file = file . create <identifiersep> temp <identifiersep> file ( <string_literal> , <string_literal> ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 log . info ( <string_literal> , \n \t5 listing . size ( ) , ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) ) ; \n \t4 return true ; \n \t3 } catch ( amazon <identifiersep> service <identifiersep> exception e ) { \n <ect>
\t2 service <identifiersep> capability <identifiersep> map . put ( service . connectivity , connectivity <identifiersep> service <identifiersep> capability <identifiersep> map ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 if ( firewall <identifiersep> provider != null ) { \n <ect>
\t2 throw new timeout <identifiersep> exception ( ) ; } \n \t1 if ( op == operation . clear ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 cache ( 0 ) . clear ( ) ; \n <ect>
\t5 start . await ( ) ; \n \t5 <identifier> . add <identifiersep> all ( retrieve ( store ) ) ; \n \t5 done . count <identifiersep> down ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> + state . host + <string_literal> + udp <identifiersep> state <identifiersep> request ) ; \n \t2 try { \n \t3 connector . send <identifiersep> datagram ( udp <identifiersep> state <identifiersep> request . get <identifiersep> bytes ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 s <identifiersep> logger . trace ( <string_literal> + result ) ; } \n \t3 return result . replace ( <string_literal> , <string_literal> ) . replace ( <string_literal> , <string_literal> ) . replace ( <string_literal> , <string_literal> ) ; \n \t2 } catch ( types . handle <identifiersep> invalid e ) { \n <ect>
<comment> \n \t1 private final int socket <identifiersep> timeout <identifiersep> ms = <number_literal> ; \n \t1 private boolean network <identifiersep> connect ( ) { \n <ect>
\t4 if ( <identifier> ) \n \t5 security . insert <identifiersep> provider <identifiersep> at ( <identifier> <identifiersep> provider , 1 ) ; \n \t4 else \n \t5 security . add <identifiersep> provider ( <identifier> <identifiersep> provider ) ; \n <ect>
\t2 for ( thread <identifiersep> context context : contexts ) { \n \t3 try { \n \t4 context . mb . execute ( ) ; \n \t3 } catch ( connection <identifiersep> exception e ) { \n <ect>
<number_literal> public void run ( ) { \n <number_literal> try { \n <number_literal> ( ( start <identifiersep> stop <identifiersep> listener ) listener ) . done <identifiersep> playing ( get <identifiersep> media ( ) , self ) ; \n <number_literal> } catch ( throwable t ) { \n <ect>
\t3 completable <identifiersep> future . run <identifiersep> async ( task : : task <identifiersep> complete ) . join ( ) ; \n \t2 } catch ( throwable t ) { \n \t3 log <identifiersep> bundle <identifiersep> <identifier> ( ) ; \n \t3 handle <identifiersep> uncaught <identifiersep> throwable ( t ) ; } \n <ect>
\t4 fatal <identifiersep> error <identifiersep> occurred fatal <identifiersep> error <identifiersep> occurred = ( fatal <identifiersep> error <identifiersep> occurred ) message ; \n \t4 fatal <identifiersep> error ( fatal <identifiersep> error <identifiersep> occurred . message ( ) , fatal <identifiersep> error <identifiersep> occurred . error ( ) ) ; } \n \t3 <comment> \n \t3 else { \n <ect>
\t2 map < file , file > global <identifiersep> analysis <identifiersep> map = create <identifiersep> or <identifiersep> get <identifiersep> global <identifiersep> analysis <identifiersep> map ( ) ; \n \t2 hash <identifiersep> map < file , file > filtered <identifiersep> map = filter <identifiersep> for <identifiersep> classpath ( global <identifiersep> analysis <identifiersep> map , spec . get <identifiersep> compile <identifiersep> classpath ( ) ) ; \n \t2 spec . set <identifiersep> analysis <identifiersep> map ( filtered <identifiersep> map ) ; \n <ect>
\t2 logger . debug ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) , value , \n \t4 mode <identifiersep> types . is <identifiersep> empty ( ) ) ; \n \t2 <comment> \n \t2 if ( mode <identifiersep> types . is <identifiersep> empty ( ) ) { \n <ect>
\t3 assert ! endpoint . equals ( <identifier> <identifiersep> node . get ( ) ) : <string_literal> ; \n \t3 logger . info ( <string_literal> , endpoint , <identifier> <identifiersep> node . get ( ) , tokens ) ; \n \t3 if ( failure <identifiersep> detector . instance . is <identifiersep> alive ( <identifier> <identifiersep> node . get ( ) ) ) \n \t3 { \n <ect>
\t2 arrays . stream ( callbacks ) \n \t4 . filter ( ws <identifiersep> password <identifiersep> callback . class : : is <identifiersep> instance ) \n \t4 . map ( ws <identifiersep> password <identifiersep> callback . class : : cast ) \n \t4 . for <identifiersep> each ( c - > { \n <ect>
\t1 private registered <identifiersep> service process <identifiersep> expired <identifiersep> registered <identifiersep> service ( final registered <identifiersep> service registered <identifiersep> service ) { \n \t2 final registered <identifiersep> service <identifiersep> expiration <identifiersep> policy policy = registered <identifiersep> service . get <identifiersep> expiration <identifiersep> policy ( ) ; \n \t2 logger . warn ( <string_literal> , registered <identifiersep> service . get <identifiersep> service <identifiersep> id ( ) , policy . get <identifiersep> expiration <identifiersep> date ( ) ) ; \n \t2 if ( policy . is <identifiersep> delete <identifiersep> when <identifiersep> expired ( ) ) { \n <ect>
\t3 method value <identifiersep> of = type . get <identifiersep> method ( <string_literal> , string . class ) ; \n \t3 if ( value <identifiersep> of != null ) { \n \t4 converted <identifiersep> object = value <identifiersep> of . invoke ( null , value . to <identifiersep> string ( ) ) ; \n \t3 } else { \n <ect>
\t7 if ( value instanceof double ) \n \t8 value = string . format ( <string_literal> , ( double ) value ) ; \n \t7 map . put ( attribute <identifiersep> name , value != null ? value . to <identifiersep> string ( ) : null ) ; } \n \t6 catch ( exception e ) { \n <ect>
\t2 indices <identifiersep> meta <identifiersep> data = get <identifiersep> indices <identifiersep> meta <identifiersep> data <identifiersep> on <identifiersep> node ( data <identifiersep> node ) ; \n \t2 assert <identifiersep> that ( indices <identifiersep> meta <identifiersep> data . get ( index ) . get <identifiersep> state ( ) , equal <identifiersep> to ( index <identifiersep> meta <identifiersep> data . state . open ) ) ; } \n \t1 protected void assert <identifiersep> index <identifiersep> directory <identifiersep> deleted ( final string node <identifiersep> name , final index index ) throws exception { \n \t2 assert <identifiersep> busy ( ( ) - > { \n <ect>
\t2 key <identifiersep> info <identifiersep> provider <identifiersep> list . add ( new rsa <identifiersep> key <identifiersep> value <identifiersep> provider ( ) ) ; \n \t2 key <identifiersep> info <identifiersep> provider <identifiersep> list . add ( new <identifier> <identifiersep> key <identifiersep> value <identifiersep> provider ( ) ) ; \n \t2 key <identifiersep> info <identifiersep> provider <identifiersep> list . add ( new <identifier> <identifiersep> encoded <identifiersep> key <identifiersep> value <identifiersep> provider ( ) ) ; \n \t2 key <identifiersep> info <identifiersep> provider <identifiersep> list . add ( new inline <identifiersep> <identifier> <identifiersep> provider ( ) ) ; \n <ect>
\t8 extensions ) ; \n \t2 } catch ( rule <identifiersep> model <identifiersep> <identifier> <identifiersep> persistence <identifiersep> exception e ) { \n \t3 throw new runtime <identifiersep> exception ( e ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 answer answer = null ; \n \t5 try { \n \t6 answer = <identifier> <identifiersep> agent <identifiersep> mgr . send <identifiersep> to <identifiersep> ssvm ( dc <identifiersep> id , cmd ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t8 out += <string_literal> + resources . get ( i ) . get <identifiersep> root <identifiersep> path ( ) ; } \n \t7 if ( resources . size ( ) > i ) { \n \t8 out += <string_literal> ; } } } \n \t4 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t3 answer answer = send <identifiersep> to <identifiersep> pool ( pool , cmd ) ; \n \t3 if ( answer != null && answer . get <identifiersep> result ( ) ) { \n \t4 remove <identifiersep> volume = true ; \n \t3 } else { \n <ect>
\t1 workflow <identifiersep> update <identifiersep> num <identifiersep> completed <identifiersep> ps . set <identifiersep> long ( <number_literal> , history <identifiersep> event . get <identifiersep> finish <identifiersep> time ( ) ) ; \n \t1 workflow <identifiersep> update <identifiersep> num <identifiersep> completed <identifiersep> ps . set <identifiersep> string ( <number_literal> , history <identifiersep> event . get <identifiersep> <identifier> ( ) . to <identifiersep> string ( ) ) ; \n \t1 workflow <identifiersep> update <identifiersep> num <identifiersep> completed <identifiersep> ps . execute <identifiersep> update ( ) ; \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n <ect>
\t2 try { \n \t3 return ( list < string > ) context . get <identifiersep> wiki ( ) . get <identifiersep> group <identifiersep> service ( context ) \n \t4 . get <identifiersep> all <identifiersep> matched <identifiersep> users ( null , false , 0 , 0 , null , context ) ; \n \t2 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t2 injection <identifiersep> path <identifiersep> called = true ; \n \t2 thread t = new thread ( new runnable ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n <ect>
\t4 <identifier> <identifiersep> log . error ( <string_literal> + line + <string_literal> , e ) ; \n \t4 return ; } \n \t3 string size = props . get <identifiersep> property ( <string_literal> ) ; \n \t3 if ( ( size == null ) || ( ! size . equals ( <string_literal> ) ) ) { \n <ect>
\t3 logger . error ( <string_literal> { } \\ <string_literal> , system . get <identifiersep> property ( <string_literal> ) ) ; \n \t3 return new int [ ] { 0 , 0 , 0 } ; } \n \t2 string [ ] parts = system . get <identifiersep> property ( <string_literal> ) . split ( <string_literal> ) ; \n \t2 if ( parts . length != <number_literal> && parts . length != <number_literal> ) { \n <ect>
\t5 . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) . set <identifiersep> indices ( index <identifiersep> name ) ) ; } \n \t2 int restore <identifiersep> operations = random <identifiersep> int <identifiersep> between ( 1 , <number_literal> ) ; \n \t2 for ( int i = 0 ; i < restore <identifiersep> operations ; i ++ ) { \n \t3 int iteration <identifiersep> to <identifiersep> restore = random <identifiersep> int <identifiersep> between ( 0 , iteration <identifiersep> count - 1 ) ; \n <ect>
\t1 } catch ( invalid <identifiersep> state <identifiersep> transition <identifiersep> exception e ) { \n \t1 if ( ignore <identifiersep> transition <identifiersep> exception ) { \n \t2 log . debug ( <string_literal> , e ) ; \n \t1 } else { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 long max = ( long ) ( scale <identifiersep> <identifier> * <number_literal> ) ; \n <ect>
\t2 reader <identifiersep> thread = new serial <identifiersep> reader ( in ) ; \n \t2 reader <identifiersep> thread . start ( ) ; } \n \t1 @ override \n \t1 public void disconnect ( ) { \n <ect>
\t4 control <identifiersep> nic = nic ; \n \t4 buf . append ( create <identifiersep> redundant <identifiersep> router <identifiersep> args ( control <identifiersep> nic , router ) ) ; \n \t4 <comment> \n \t4 if ( dest . get <identifiersep> host ( ) . get <identifiersep> hypervisor <identifiersep> type ( ) == hypervisor <identifiersep> type . v <identifiersep> mware || dest . get <identifiersep> host ( ) . get <identifiersep> hypervisor <identifiersep> type ( ) == hypervisor <identifiersep> type . <identifier> ) { \n <ect>
\t1 @ context \n \t1 private servlet <identifiersep> context context ; \n \t1 @ post \n \t1 public string post ( string content ) throws exception { \n <ect>
\t4 if ( result != 0 ) { \n \t5 logger . warn ( <string_literal> , <identifier> . error <identifiersep> text ( result ) ) ; \n \t5 reconnect <identifiersep> <identifier> ( <identifier> <identifiersep> <identifier> ) ; } \n \t3 } else { \n <ect>
\t3 logger . info ( <string_literal> . format ( service <identifiersep> name ) ) \n \t3 logger . warning ( <string_literal> . format ( service <identifiersep> name , <identifier> <identifiersep> json <identifiersep> file ) ) \n \t3 break \n \t1 except exception , err : \n <ect>
\t4 return new answer ( command , true , result ) ; \n \t3 } else { \n \t4 return new answer ( command , false , result ) ; } \n \t2 } catch ( final exception e ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 c . add ( new alignment <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> update ( worksheet <identifiersep> id ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 for ( net <identifiersep> data . event <identifiersep> message event : message . get <identifiersep> event <identifiersep> list ( ) ) { \n \t4 try { \n \t5 process <identifiersep> event ( event ) ; \n \t4 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t4 if ( url != null ) { \n \t5 logger . debug ( <string_literal> , url ) ; } \n \t4 web <identifiersep> utils . put <identifiersep> unauthorized <identifiersep> redirect <identifiersep> url <identifiersep> into <identifiersep> flow <identifiersep> scope ( context , url ) ; } \n \t3 if ( web <identifiersep> utils . get <identifiersep> warning <identifiersep> cookie ( context ) ) { \n <ect>
\t2 try { \n \t2 max <identifiersep> n <identifiersep> <identifier> <identifiersep> size = integer . parse <identifiersep> int ( cmd <identifiersep> line . get <identifiersep> value ( max <identifiersep> n <identifiersep> <identifier> <identifiersep> size <identifiersep> opt ) . to <identifiersep> string ( ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n \t2 log . warn ( <string_literal> ) ; } } \n <ect>
\t10 + engine . get <identifiersep> name ( ) ) ; } \n \t5 } finally { \n \t6 executor . shutdown ( ) ; } \n \t4 } else { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 signature sig = <identifier> <identifiersep> context . <identifier> ( ) . sign ( pre <identifiersep> sign , <identifier> <identifiersep> context . key <identifiersep> manager ( ) . get <identifiersep> signing <identifiersep> private <identifiersep> key ( ) ) ; \n \t4 <comment> \n <ect>
\t6 } else { \n \t7 success = true ; } } \n \t5 s <identifiersep> logger . info ( <string_literal> + system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <comment> \n \t1 list < entry < string , long > > sorted <identifiersep> tables = rank <identifiersep> tables <identifiersep> by <identifiersep> <identifier> <identifiersep> size ( <identifier> ) ; \n <ect>
\t1 try { \n \t1 writer . write ( less <identifiersep> css . less ( content ) ) ; \n \t1 } catch ( final wro <identifiersep> runtime <identifiersep> exception e ) { \n \t1 final string resource <identifiersep> uri = resource == null ? string <identifiersep> utils . empty : <string_literal> + resource . get <identifiersep> uri ( ) + <string_literal> ; \n <ect>
\t4 <comment> \n \t4 context . set <identifiersep> dont <identifiersep> send <identifiersep> <identifier> ( true ) ; \n \t4 executors . new <identifiersep> single <identifiersep> thread <identifiersep> executor ( ) . execute ( new runnable ( ) { \n \t5 public void run ( ) { \n <ect>
\t1 job <identifiersep> impl ats <identifiersep> job ; \n \t1 try { \n \t1 ats <identifiersep> job = new job <identifiersep> impl ( property <identifiersep> utils . describe ( view <identifiersep> job ) ) ; \n \t1 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t4 logger . error ( this , <string_literal> + t , t ) ; \n \t4 req . on <identifiersep> failure ( new low <identifiersep> level <identifiersep> get <identifiersep> exception ( low <identifiersep> level <identifiersep> get <identifiersep> exception . internal <identifiersep> error ) , context ) ; \n \t4 return true ; } \n \t2 } catch ( throwable t ) { \n <ect>
\t1 return get <identifiersep> group ( ) . get <identifiersep> capacity ( ) ; } \n \t1 @ override \n \t1 list < terminate <identifiersep> instance <identifiersep> scaling <identifiersep> activity <identifiersep> task > build <identifiersep> activity <identifiersep> tasks ( ) { \n <ect>
\t1 send <identifiersep> request ( db . get <identifiersep> name ( ) , null , nodes , status <identifiersep> task , get <identifiersep> next <identifiersep> message <identifiersep> id <identifiersep> counter ( ) , o <identifiersep> distributed <identifiersep> request . execution <identifiersep> mode . response , \n \t2 null , null , null ) ; } } \n protected boolean request <identifiersep> full <identifiersep> database ( final o <identifiersep> distributed <identifiersep> database <identifiersep> impl <identifier> <identifiersep> database , final string database <identifiersep> name , \n \t1 final boolean backup <identifiersep> database , final o <identifiersep> <identifier> <identifiersep> distributed <identifiersep> configuration cfg ) { \n <ect>
\t3 logger . trace ( <string_literal> , participant , session <identifiersep> id ) ; \n \t3 set <identifiersep> participant <identifiersep> state ( participant , state . finalize <identifiersep> <identifier> ) ; \n \t3 if ( get <identifiersep> state ( ) == state . finalize <identifiersep> <identifier> ) \n \t3 { \n <ect>
\t4 s <identifiersep> logger . warn ( <string_literal> + src <identifiersep> host <identifiersep> id ) ; \n \t4 <identifier> <identifiersep> resource <identifiersep> mgr . maintenance <identifiersep> failed ( src <identifiersep> host <identifiersep> id ) ; } \n \t3 return null ; \n \t2 } catch ( insufficient <identifiersep> server <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t3 result . add ( <identifier> <identifiersep> sub <identifiersep> rule ) ; \n \t2 } else { \n \t3 result . add <identifiersep> all ( dst <identifiersep> sub <identifiersep> rule ) ; } \n \t2 if ( ( <identifier> <identifiersep> sub <identifiersep> rule != null ) && ! dests <identifiersep> available ) { \n <ect>
\t2 } catch ( concurrent <identifiersep> operation <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( resource <identifiersep> allocation <identifiersep> exception ex ) { \n <ect>
\t5 <identifier> . add ( line ) ; } } \n \t3 br . close ( ) ; \n \t3 <identifier> . add ( <string_literal> ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<number_literal> key . cancel ( ) ; \n <number_literal> break ; } } } \n \t8 state . set <identifiersep> last <identifiersep> activity ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t7 } catch ( final exception e ) { \n <ect>
\t2 <comment> \n \t2 do <identifiersep> tear <identifiersep> down ( ) ; \n \t2 do <identifiersep> set <identifiersep> up ( false ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n <ect>
\t2 update . set <identifiersep> state ( load <identifiersep> balancer <identifiersep> <identifier> <identifiersep> instance . state . error ) ; \n \t2 entities . persist ( update ) ; \n \t2 db . commit ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
<comment> \n @ override \n public void after <identifiersep> properties <identifiersep> set ( ) throws exception { \n \t1 assert <identifiersep> correctly <identifiersep> configured ( ) ; \n <ect>
\t1 } catch ( access <identifiersep> denied <identifiersep> exception e ) { \n \t1 log . debug ( <string_literal> + contexts . lookup ( ) . get <identifiersep> correlation <identifiersep> id ( ) + <string_literal> ) ; \n \t1 throw e ; \n \t1 } catch ( s3exception e ) { \n <ect>
\t3 num <identifiersep> waiting <identifiersep> for = ( int ) math . <identifier> ( ( peers . size ( ) - num <identifiersep> to <identifiersep> broadcast <identifiersep> to ) / <number_literal> . 0 ) ; \n \t3 collections . shuffle ( peers , random ) ; \n \t3 peers = peers . sub <identifiersep> list ( 0 , num <identifiersep> to <identifiersep> broadcast <identifiersep> to ) ; \n \t3 log . info ( <string_literal> , num <identifiersep> connected , tx . get <identifiersep> hash <identifiersep> as <identifiersep> string ( ) ) ; \n <ect>
\t3 @ override \n \t3 public void run ( ) { \n \t4 try { \n \t5 sync . count <identifiersep> down ( ) ; \n <ect>
\t4 <identifier> <identifiersep> log . debug ( <string_literal> ) ; \n \t3 <identifier> <identifiersep> context . job <identifiersep> queue ( ) . add <identifiersep> job ( search <identifiersep> job ) ; \n \t2 } else { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 throw ( e ) ; } \n \t2 try { \n \t3 data <identifiersep> output <identifiersep> stream . write ( <identifier> ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 this . executor . schedule <identifiersep> with <identifiersep> fixed <identifiersep> delay ( reaper <identifiersep> task , interval <identifiersep> ms , interval <identifiersep> ms , time <identifiersep> unit . milliseconds ) ; } \n \t2 void register ( connection connection , long terminate <identifiersep> time ) { \n \t3 if ( shutdown ) { \n \t4 <comment> \n <ect>
\t1 if ( string <identifiersep> utils . is <identifiersep> blank ( target <identifiersep> level ) && string <identifiersep> utils . is <identifiersep> blank ( category ) ) { \n \t1 return response . not <identifiersep> modified ( <string_literal> ) . build ( ) ; } \n \t1 logger root = log <identifiersep> manager . get <identifiersep> root <identifiersep> logger ( ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( target <identifiersep> level ) ) { \n <ect>
\t7 queue <identifiersep> callable ( new signal <identifiersep> command ( action . get <identifiersep> job <identifiersep> id ( ) , action . get <identifiersep> id ( ) ) ) ; } } \n \t5 else if ( action . get <identifiersep> status ( ) == workflow <identifiersep> action <identifiersep> bean . status . user <identifiersep> retry ) { \n \t6 queue <identifiersep> callable ( new action <identifiersep> start <identifiersep> x <identifiersep> command ( action . get <identifiersep> id ( ) , action . get <identifiersep> type ( ) ) ) ; } } } \n \t3 catch ( exception ex ) { \n <ect>
\t1 try { \n \t1 if ( client . parse <identifiersep> command <identifiersep> line ( args ) ) { \n \t2 client . run ( ) ; } \n \t1 } catch ( parse <identifiersep> exception e ) { \n <ect>
\t1 public pair < list < ? extends storage <identifiersep> pool > , list < ? extends storage <identifiersep> pool > > list <identifiersep> storage <identifiersep> pools <identifiersep> for <identifiersep> migration <identifiersep> of <identifiersep> volume ( final long volume <identifiersep> id ) { \n \t2 final account caller = get <identifiersep> caller ( ) ; \n \t2 if ( ! <identifier> <identifiersep> account <identifiersep> mgr . is <identifiersep> root <identifiersep> admin ( caller . get <identifiersep> id ( ) ) ) { \n <ect>
\t2 return method . invoke ( object , ( object [ ] ) null ) ; } \n \t1 @ override \n \t1 public void set <identifiersep> method <identifiersep> value ( object object , method method , object value ) throws illegal <identifiersep> argument <identifiersep> exception , illegal <identifiersep> access <identifiersep> exception , \n \t1 invocation <identifiersep> target <identifiersep> exception { \n <ect>
\t2 if ( xml <identifiersep> response == null ) { \n \t3 s <identifiersep> logger . error ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( ! xml <identifiersep> response . contains ( <string_literal> ) ) { \n <ect>
\t2 object val <identifiersep> de <identifiersep> ser = props . get ( consumer <identifiersep> config . value <identifiersep> deserializer <identifiersep> class <identifiersep> config ) ; \n \t2 if ( key <identifiersep> de <identifiersep> ser != null && ! key <identifiersep> de <identifiersep> ser . equals ( de <identifiersep> ser <identifiersep> name ) ) { \n \t3 log . warn ( <string_literal> , consumer <identifiersep> config . key <identifiersep> deserializer <identifiersep> class <identifiersep> config ) ; } \n \t2 if ( val <identifiersep> de <identifiersep> ser != null && ! val <identifiersep> de <identifiersep> ser . equals ( de <identifiersep> ser <identifiersep> name ) ) { \n <ect>
\t5 list < group > groups = authentication <identifiersep> service \n \t6 . get <identifiersep> special <identifiersep> groups ( context , null ) ; \n \t5 for ( group group : groups ) { \n \t6 context . set <identifiersep> special <identifiersep> group ( group . get <identifiersep> id ( ) ) ; \n <ect>
\t4 with dest <identifiersep> <identifier> : \n \t5 bytes = self . <identifier> <identifiersep> download <identifiersep> parts <identifiersep> to <identifiersep> <identifier> ( \n \t6 manifest = manifest , dest <identifiersep> <identifier> = dest <identifiersep> <identifier> ) \n \t3 # done with the download , now check the <identifier> image size . \n <ect>
\t2 if ( uri == null ) { \n \t3 uri = <string_literal> + reference <identifiersep> sequence . get <identifiersep> reference <identifiersep> file ( ) . get <identifiersep> absolute <identifiersep> path ( ) ; } \n \t2 if ( output == null ) { \n \t3 output = reference <identifiersep> sequence <identifiersep> file <identifiersep> factory . get <identifiersep> default <identifiersep> dictionary <identifiersep> for <identifiersep> reference <identifiersep> sequence ( reference <identifiersep> sequence . get <identifiersep> reference <identifiersep> file ( ) ) ; \n <ect>
\t1 <identifier> <identifiersep> db = <identifier> <identifiersep> db <identifiersep> name ; } \n \t1 string <identifiersep> builder url = new string <identifiersep> builder ( <identifier> <identifiersep> jdbc <identifiersep> url <identifiersep> prefix ) ; \n \t1 url . append ( <string_literal> ) . append ( <identifier> <identifiersep> host ) . append ( ' : ' ) . append ( <identifier> <identifiersep> port ) ; \n \t1 url . append ( ' / ' ) . append ( <identifier> <identifiersep> db ) ; \n <ect>
\t2 validator validator = schema . new <identifiersep> validator ( ) ; \n \t2 try { \n \t3 validator . validate ( new stream <identifiersep> source ( new string <identifiersep> reader ( xml <identifiersep> content ) ) ) ; } \n \t2 catch ( sax <identifiersep> exception ex ) { \n <ect>
\t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . client <identifiersep> id ) ) { \n \t3 logger . warn ( <string_literal> , grant <identifiersep> type ) ; \n \t3 return false ; } \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . secret ) ) { \n <ect>
\t6 token <identifiersep> metadata . remove <identifiersep> endpoint ( endpoint ) ; \n \t6 endpoints <identifiersep> to <identifiersep> remove . add ( endpoint ) ; } \n \t5 else if ( gossiper . instance . compare <identifiersep> endpoint <identifiersep> startup ( endpoint , existing ) > 0 ) \n \t5 { \n <ect>
\t1 private static logger logger = logger . get <identifiersep> logger ( resource <identifiersep> with <identifiersep> interface <identifiersep> resource <identifiersep> with <identifiersep> interface . class ) ; \n \t1 public string get <identifiersep> <identifier> ( ) { \n \t2 return <string_literal> ; } \n \t1 public string get <identifiersep> basic ( ) { \n <ect>
\t2 if ( answer ) { \n \t3 long to = time <identifiersep> to . to <identifiersep> millis ( ) ; \n \t3 answer = delta < = to ; } \n <ect>
\t4 } else if ( is <identifiersep> io ) { \n \t5 final int io <identifiersep> nr = integer . parse <identifiersep> int ( cmd . name ( ) . substring ( <number_literal> ) ) ; \n \t5 connector <identifiersep> thread . send <identifiersep> io ( io <identifiersep> nr , new <identifiersep> state <identifiersep> boolean ) ; } \n \t3 } else { \n <ect>
\t5 log . debug ( <string_literal> + key ) ; \n \t4 return provider ; } } \n \t2 <comment> \n <ect>
\t3 channels . close <identifiersep> channel ( temp ) ; <comment> \n \t3 if ( get <identifiersep> state ( ) . compare <identifiersep> to ( state . closing ) >= 0 ) \n \t4 return closed <identifiersep> future ; } \n \t2 if ( get <identifiersep> state ( ) . ordinal ( ) < state . ready . ordinal ( ) ) { \n <ect>
\t4 return retry ( cmd , num <identifiersep> retries ) ; \n \t3 } else { \n \t4 return new answer ( cmd , e ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 for ( <identifier> <identifiersep> volume <identifiersep> info found <identifiersep> volume <identifiersep> info : volume <identifiersep> infos ) { \n \t2 try { \n \t2 <comment> \n \t2 if ( found <identifiersep> volume <identifiersep> info . get <identifiersep> <identifier> <identifiersep> dev <identifiersep> name ( ) != null && found <identifiersep> volume <identifiersep> info . get <identifiersep> <identifier> <identifiersep> name ( ) != null ) { \n <ect>
\t2 if ( table <identifiersep> col <identifiersep> stats != null ) { \n \t3 shared <identifiersep> cache . refresh <identifiersep> table <identifiersep> col <identifiersep> stats <identifiersep> in <identifiersep> cache ( string <identifiersep> utils . normalize <identifiersep> identifier ( db <identifiersep> name ) , \n \t4 string <identifiersep> utils . normalize <identifiersep> identifier ( tbl <identifiersep> name ) , table <identifiersep> col <identifiersep> stats . get <identifiersep> stats <identifiersep> obj ( ) ) ; } } \n \t1 } catch ( meta <identifiersep> exception | no <identifiersep> such <identifiersep> object <identifiersep> exception e ) { \n <ect>
\t1 var frame <identifiersep> element = this . <identifier> <identifiersep> get <identifiersep> frame <identifiersep> element ( window <identifiersep> object ) ; \n \t1 <comment> \n \t1 var <identifier> <identifiersep> sub <identifiersep> frame = this . <identifier> <identifiersep> is <identifiersep> <identifier> <identifiersep> sub <identifiersep> frame ( window <identifiersep> object ) ; \n \t1 if ( frame <identifiersep> element && ! <identifier> <identifiersep> sub <identifiersep> frame ) { \n <ect>
\t2 } catch ( service <identifiersep> component <identifiersep> not <identifiersep> found <identifiersep> exception <identifier> ) { \n \t2 log . warn ( <string_literal> , <identifier> ) ; \n \t2 } catch ( invalid <identifiersep> state <identifiersep> transition <identifiersep> exception ex ) { \n <ect>
\t6 <string_literal> + ring + ' ] ' ) ; \n \t4 return ; } \n \t3 if ( is <identifiersep> local <identifiersep> node <identifiersep> coordinator ( ) && ! loc <identifiersep> node <identifiersep> id . equals ( msg . creator <identifiersep> node <identifiersep> id ( ) ) ) { \n <ect>
\t3 err <identifiersep> cnt = 0 ; \n \t3 logger . debug ( <string_literal> , url ) ; \n \t3 class . for <identifiersep> name ( driver <identifiersep> class ) . new <identifiersep> instance ( ) ; \n \t3 connection = driver <identifiersep> manager . get <identifiersep> connection ( url , user , password ) ; \n <ect>
\t2 input <identifiersep> properties input <identifiersep> type <identifiersep> parameters = new input <identifiersep> properties ( ) ; \n \t2 <identifier> <identifiersep> configuration m <identifiersep> conf = <identifier> <identifiersep> configuration <identifiersep> registry . get <identifiersep> instance ( ) . get <identifiersep> <identifier> <identifiersep> configuration ( context <identifiersep> parameters . get <identifiersep> id ( ) ) ; \n \t2 m <identifiersep> conf . set <identifiersep> train <identifiersep> on <identifiersep> apply <identifiersep> history ( train ) ; \n \t2 m <identifiersep> conf . set <identifiersep> <identifier> <identifiersep> on <identifiersep> apply <identifiersep> history ( <identifier> ) ; \n <ect>
\t1 public mongo <identifiersep> profile <identifiersep> service mongo <identifiersep> authenticator <identifiersep> profile <identifiersep> service ( ) { \n \t2 final mongo <identifiersep> authentication <identifiersep> properties mongo = cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> mongo ( ) ; \n \t2 final mongo <identifiersep> client <identifiersep> uri uri = new mongo <identifiersep> client <identifiersep> uri ( mongo . get <identifiersep> mongo <identifiersep> host <identifiersep> uri ( ) ) ; \n \t2 final mongo <identifiersep> client client = new mongo <identifiersep> client ( uri ) ; \n <ect>
\t1 } catch ( exception e ) { \n \t1 if ( persistence <identifiersep> exceptions . is <identifiersep> stale <identifiersep> update ( e ) ) { \n \t2 logger . debug ( <string_literal> + nat <identifiersep> gateway <identifiersep> id + <string_literal> ) ; \n \t1 } else { \n <ect>
\t5 thread . sleep ( <number_literal> ) ; } \n \t4 log . info ( <string_literal> + destination <identifiersep> name + <string_literal> + this . latch . get <identifiersep> count ( ) \n \t6 + <string_literal> + this . to <identifiersep> string ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 public type <identifiersep> handler < ? > get <identifiersep> handler <identifiersep> for ( type generic <identifiersep> type ) { \n \t2 class < ? > type <identifiersep> class = reflection <identifiersep> util . get <identifiersep> class <identifiersep> of <identifiersep> type ( generic <identifiersep> type ) ; \n \t2 if ( type <identifiersep> class == null ) { \n <ect>
\t2 <comment> \n \t2 final string command = string . format ( <string_literal> , <string_literal> , vr <identifiersep> scripts . password , <string_literal> , vm <identifiersep> ip <identifiersep> address , <string_literal> , password ) ; \n \t3 final string debug <identifiersep> command = string . format ( <string_literal> , <string_literal> , vr <identifiersep> scripts . password , <string_literal> , vm <identifiersep> ip <identifiersep> address , <string_literal> , string <identifiersep> utils . get <identifiersep> <identifier> <identifiersep> password <identifiersep> for <identifiersep> display ( cmd . get <identifiersep> password ( ) ) ) ; \n <ect>
\t8 break ; \n \t7 default : \n \t8 log . warn ( <string_literal> , command ) ; } } } \n \t3 } catch ( throwable e ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + cmd + <string_literal> + get <identifiersep> args <identifiersep> string ( args ) + <string_literal> + e . clazz + <string_literal> + e . handle ) ; \n \t2 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + cmd + <string_literal> + get <identifiersep> args <identifiersep> string ( args ) + <string_literal> + e . to <identifiersep> string ( ) , e ) ; \n \t2 } catch ( final xml <identifiersep> rpc <identifiersep> exception e ) { \n <ect>
\t2 if ( object <identifiersep> storage <identifiersep> properties . form <identifiersep> field . is <identifiersep> http <identifiersep> field ( form <identifiersep> key ) ) { \n \t3 <comment> \n \t3 <comment> \n \t3 continue ; } \n <ect>
\t3 drain <identifiersep> job <identifiersep> task <identifiersep> update <identifiersep> queue ( ) ; \n \t2 } catch ( exception ex ) { \n \t3 log . warn ( <string_literal> , ex ) ; } \n \t2 try { \n <ect>
\t3 assert . assert <identifiersep> true ( test <identifiersep> list . has <identifiersep> child ( <identifier> ) ) ; \n \t3 <comment> \n \t3 for ( int i = 0 ; i < <number_literal> ; ++ i ) { \n \t4 latest <identifiersep> name = add <identifiersep> content <identifiersep> to <identifiersep> repo ( <identifier> , handle ) ; \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + network <identifiersep> id + <string_literal> ) ; } \n \t2 <comment> \n \t2 try { \n \t3 if ( <identifier> <identifiersep> firewall <identifiersep> mgr . revoke <identifiersep> all <identifiersep> firewall <identifiersep> rules <identifiersep> for <identifiersep> network ( network <identifiersep> id , caller <identifiersep> user <identifiersep> id , caller ) ) { \n <ect>
\t1 if ( result . is <identifiersep> successful ( ) ) { \n \t1 result = shell <identifiersep> command <identifiersep> util . set <identifiersep> file <identifiersep> group ( file <identifiersep> path , group <identifiersep> name ) ; \n \t1 if ( ! result . is <identifiersep> successful ( ) ) { \n \t2 <comment> \n <ect>
\t1 vote <identifiersep> for ( clazz . get <identifiersep> name ( ) ) ; } \n private static void vote <identifiersep> for ( final string topic ) { \n \t1 synchronized ( lock ) { \n \t1 if ( wait <identifiersep> for <identifiersep> set . remove ( topic ) ) { \n <ect>
\t3 list < string > wiki <identifiersep> servers = new array <identifiersep> list < string > ( ) ; \n \t3 try { \n \t4 wiki <identifiersep> servers = xcontext . get <identifiersep> wiki ( ) . get <identifiersep> virtual <identifiersep> <identifier> <identifiersep> database <identifiersep> names ( xcontext ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 string hex <identifiersep> ascii <identifiersep> value = response <identifiersep> payload . substring ( i , i + <number_literal> ) ; \n \t3 try { \n \t4 sb . append ( ( char ) integer . parse <identifiersep> int ( hex <identifiersep> ascii <identifiersep> value , <number_literal> ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
<comment> \n static void check <identifiersep> for <identifiersep> large <identifiersep> tables ( ) { \n <ect>
<comment> \n \t1 public void run <identifiersep> pre <identifiersep> state <identifiersep> <identifier> <identifiersep> plugins ( crawler <identifiersep> context context , \n \t3 immutable <identifiersep> list < candidate <identifiersep> element > candidate <identifiersep> elements , state <identifiersep> vertex state ) { \n <ect>
<comment> \n \t1 @ override \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 public repository get <identifiersep> repository ( map parameters ) throws repository <identifiersep> exception { \n <ect>
\t3 { \n \t3 if ( init ) \n \t3 { \n \t4 <identifier> <identifiersep> event <identifiersep> bus . publish <identifiersep> initialize ( property , value ) ; \n <ect>
\t3 <identifier> . add ( get <identifiersep> package <identifiersep> name ( <string_literal> ) . replace ( <string_literal> , <string_literal> ) ) ; \n \t3 <identifier> . add ( get <identifiersep> package <identifiersep> name ( <string_literal> ) . replace ( <string_literal> , <string_literal> ) ) ; \n \t3 <identifier> . add ( get <identifiersep> package <identifiersep> name ( <string_literal> ) . replace ( <string_literal> , <string_literal> ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 for ( inet <identifiersep> address <identifiersep> and <identifiersep> port ep : live <identifiersep> endpoints ) \n \t4 messaging <identifiersep> service . instance ( ) . send <identifiersep> one <identifiersep> way ( message , ep ) ; \n \t3 <identifier> . sleep <identifiersep> uninterruptibly ( integer . get <identifiersep> integer ( <string_literal> , <number_literal> ) , time <identifiersep> unit . milliseconds ) ; } \n \t2 else \n <ect>
\t3 int want = ( int ) max <identifiersep> burst <identifiersep> in ; \n \t3 if ( want > ( <identifier> <identifiersep> max <identifiersep> inbound - <identifier> ) ) \n \t4 want = <identifier> <identifiersep> max <identifiersep> inbound - <identifier> ; \n \t3 <comment> \n <ect>
\t5 <identifier> . update ( client , site ) ; \n \t4 } else { \n \t5 <identifier> . add ( client , site ) ; } \n <ect>
\t1 public host <identifier> ( final prepare <identifiersep> for <identifiersep> maintenance <identifiersep> cmd cmd ) { \n \t2 final long host <identifiersep> id = cmd . get <identifiersep> id ( ) ; \n \t2 final host <identifiersep> vo host = <identifier> <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host <identifiersep> id ) ; \n \t2 if ( host == null ) { \n <ect>
\t2 string token <identifiersep> param = request . get <identifiersep> parameter ( token <identifiersep> constants . parameter <identifiersep> name <identifiersep> token ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( token <identifiersep> param ) ) { \n \t3 token <identifiersep> param = request . get <identifiersep> header ( token <identifiersep> constants . parameter <identifiersep> name <identifiersep> token ) ; \t1 } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( token <identifiersep> param ) || ! boolean <identifiersep> utils . to <identifiersep> boolean ( token <identifiersep> param ) ) { \n <ect>
\t2 ctx . pipeline ( ) . remove ( this ) ; \n \t2 <identifier> <identifiersep> <identifier> <identifiersep> promise . set <identifiersep> success ( ) ; } \n \t2 else \n \t2 { \n <ect>
\t5 transport . connect ( session . get <identifiersep> property ( <string_literal> + smtp <identifiersep> protocol + <string_literal> ) , user <identifiersep> name , password ) ; } \n \t4 else { \n \t5 transport . connect ( ) ; } } \n \t2 } catch ( messaging <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . error ( <string_literal> ) ; \n \t3 } else { \n \t4 s <identifiersep> logger . info ( <string_literal> ) ; } \n \t2 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t1 } catch ( throwable t ) { \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t1 @ override \n \t1 public boolean abort ( ) throws login <identifiersep> exception { \n \t2 clear ( ) ; \n \t2 if ( debug ) { \n <ect>
public void populate <identifiersep> resource ( resource resource , input <identifiersep> stream input <identifiersep> stream ) throws system <identifiersep> exception { \n \t1 try { \n \t1 map < string , object > response <identifiersep> map = gson . from <identifiersep> json ( io <identifiersep> utils . to <identifiersep> string ( input <identifiersep> stream , <string_literal> ) , map <identifiersep> type ) ; \n \t1 if ( response <identifiersep> map == null ) { \n <ect>
boolean limit <identifiersep> reached <identifiersep> for <identifiersep> local <identifiersep> copy ( long size , long number <identifiersep> of <identifiersep> files ) { \n \t1 boolean result = size > max <identifiersep> copy <identifiersep> file <identifiersep> size && number <identifiersep> of <identifiersep> files > max <identifiersep> number <identifiersep> of <identifiersep> files ; \n \t1 if ( result ) { \n \t1 log . info ( <string_literal> , size , max <identifiersep> copy <identifiersep> file <identifiersep> size ) ; \n <ect>
\t2 else \n \t3 config . put <identifiersep> configuration ( <identifier> <identifiersep> configuration . <identifier> <identifiersep> master <identifiersep> key , \n \t5 switch <identifiersep> to <identifiersep> value ) ; \n \t2 <comment> \n <ect>
\t2 resource = new <identifiersep> markup <identifiersep> resource <identifiersep> stream ( locator , get <identifiersep> class ( ) , <string_literal> , null , null , <string_literal> ) ; \n \t2 parser = new markup <identifiersep> parser ( resource ) ; \n \t2 parser . set <identifiersep> wicket <identifiersep> namespace ( <string_literal> ) ; \n \t2 tokens = parser . parse ( ) ; \n <ect>
\t1 host <identifiersep> role <identifiersep> command map <identifiersep> red <identifiersep> cmd <identifiersep> <identifier> = null ; \n \t1 for ( stage stage : stages ) { \n \t1 list < host <identifiersep> role <identifiersep> command > <identifier> = stage . get <identifiersep> ordered <identifiersep> host <identifiersep> role <identifiersep> commands ( ) ; \n \t1 for ( host <identifiersep> role <identifiersep> command <identifier> : <identifier> ) { \n <ect>
\t3 if ( hash <identifiersep> partitions [ i ] . is <identifiersep> hash <identifiersep> map <identifiersep> on <identifiersep> disk ( ) ) { \n \t3 try { \n \t4 continue <identifiersep> process ( i ) ; \t1 <comment> \n \t3 } catch ( kryo <identifiersep> exception ke ) { \n <ect>
\t1 protected transformer get <identifiersep> transformer ( string direction ) { \n \t2 if ( transform <identifiersep> file == null ) { \n \t3 string my <identifiersep> alias = get <identifiersep> plugin <identifiersep> instance <identifiersep> name ( ) ; \n \t3 if ( my <identifiersep> alias == null ) { \n <ect>
\t3 logger . normal ( this , <string_literal> + item , new exception ( <string_literal> ) ) ; \n \t3 return long . max <identifiersep> value ; } \n \t2 if ( is <identifiersep> insert ) return - 1 ; \n \t2 if ( ! ( item instanceof base <identifiersep> <identifier> <identifiersep> get ) ) { \n <ect>
\t1 protected set < authentication <identifiersep> handler > get <identifiersep> authentication <identifiersep> handlers <identifiersep> for <identifiersep> this <identifiersep> transaction ( final authentication <identifiersep> transaction transaction ) { \n \t2 final set < authentication <identifiersep> handler > handlers = authentication <identifiersep> event <identifiersep> execution <identifiersep> plan . get <identifiersep> authentication <identifiersep> handlers <identifiersep> for <identifiersep> transaction ( transaction ) ; \n \t2 logger . debug ( <string_literal> , handlers ) ; \n \t2 final collection < authentication <identifiersep> handler <identifiersep> resolver > handler <identifiersep> resolvers = authentication <identifiersep> event <identifiersep> execution <identifiersep> plan . get <identifiersep> authentication <identifiersep> handler <identifiersep> resolvers ( transaction ) ; \n <ect>
\t8 list < url > urls = entry . get <identifiersep> value ( ) ; \n \t8 listener . notify ( urls ) ; \n \t8 values . remove ( listener ) ; \n \t7 } catch ( throwable t ) { <comment> \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; \n \t3 throw new permanent <identifiersep> backend <identifiersep> exception ( e ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 store <identifiersep> version <identifiersep> manager store <identifiersep> version <identifiersep> manager = ( store <identifiersep> version <identifiersep> manager ) \n \t6 storage <identifiersep> engine . get <identifiersep> capability ( store <identifiersep> capability <identifiersep> type . disable <identifiersep> store <identifiersep> version ) ; \n \t4 if ( store <identifiersep> version <identifiersep> manager . has <identifiersep> any <identifiersep> disabled <identifiersep> version ( ) ) { \n \t5 list <identifiersep> of <identifiersep> disabled <identifiersep> stores . add ( storage <identifiersep> engine ) ; \n <ect>
\t3 string key = test <identifiersep> <identifier> . get ( i ) ; \n \t3 string expected = test <identifiersep> <identifier> . get ( i ) ; \n \t3 string result = <identifier> . <identifier> ( <identifier> . <identifier> <identifiersep> <identifier> ( key ) ) ; \n \t3 if ( ! expected . equals ( result ) ) \n <ect>
\t2 if ( ! string <identifiersep> utils . equals ( user <identifiersep> home <identifiersep> from <identifiersep> env , user <identifiersep> home <identifiersep> from <identifiersep> property ) ) { \n \t3 core <identifiersep> logger . logger . warn ( <string_literal> ) ; \n \t3 core <identifiersep> logger . logger . warn ( <string_literal> + user <identifiersep> home <identifiersep> from <identifiersep> env ) ; \n \t3 core <identifiersep> logger . logger . warn ( <string_literal> + user <identifiersep> home <identifiersep> from <identifiersep> property ) ; \n <ect>
\t3 if ( source == null ) { \n \t4 return null ; } \n \t3 return <identifier> <identifiersep> configuration <identifiersep> factory . get <identifiersep> <identifier> <identifiersep> json <identifiersep> configuration ( source ) ; \n \t2 } catch ( final io <identifiersep> exception ex ) { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 update ( vo , sc ) ; } \n \t1 @ override \n \t1 public void release <identifiersep> ip <identifiersep> address ( long nic <identifiersep> id , string reservation <identifiersep> id ) { \n <ect>
\t3 for ( int i = empty <identifiersep> attributes . get <identifiersep> length ( ) - 1 ; i >= 0 ; i -- ) { \n \t4 attr empty <identifiersep> attribute = ( attr ) empty <identifiersep> attributes . item ( i ) ; \n \t4 empty <identifiersep> attribute . get <identifiersep> owner <identifiersep> element ( ) . remove <identifiersep> attribute <identifiersep> node ( empty <identifiersep> attribute ) ; } \n \t2 } catch ( transformer <identifiersep> exception e ) { \n <ect>
\t3 while ( may <identifiersep> run ( ) ) { \n \t4 try { \n \t5 thread . sleep ( sleep <identifiersep> period <identifiersep> ms ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t7 <identifier> <identifiersep> log . warn ( <string_literal> + type + <string_literal> + auth + <string_literal> + packet ) ; \n \t6 break ; } \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 : <identifier> . util . try [ t ] = { \n \t1 def sleep <identifiersep> before <identifiersep> retry ( ) : unit = { \n \t1 if ( max <identifiersep> sleep <identifiersep> between <identifiersep> retries > 0 ) { \n \t2 val sleep <identifiersep> time = ( math . random ( ) * max <identifiersep> sleep <identifiersep> between <identifiersep> retries ) . as <identifiersep> instance <identifiersep> of [ long ] \n <ect>
\t2 server <identifiersep> http <identifiersep> request request = exchange . get <identifiersep> request ( ) ; \n \t2 http <identifiersep> method method = request . get <identifiersep> method ( ) ; \n \t2 http <identifiersep> headers headers = request . get <identifiersep> headers ( ) ; \n <ect>
\t2 <comment> \n \t2 string access <identifiersep> key = build <identifiersep> access <identifiersep> cache <identifiersep> key ( caller , entity , access <identifiersep> type , action ) ; \n \t2 check <identifiersep> access <identifiersep> result allow <identifiersep> <identifier> = ( check <identifiersep> access <identifiersep> result ) <identifier> <identifiersep> <identifier> <identifiersep> srv . get <identifiersep> from <identifiersep> <identifier> <identifiersep> cache ( access <identifiersep> key ) ; \n \t2 if ( allow <identifiersep> <identifier> != null ) { \n <ect>
\t3 try { \n \t4 logger . info ( <string_literal> , d ) ; \n \t4 d . delete <identifiersep> <identifier> ( ) ; \n \t3 } catch ( runtime <identifiersep> exception exc ) { \n <ect>
\t1 channel . get <identifiersep> transaction ( ) . commit ( ) ; \n \t1 } finally { \n \t1 channel . get <identifiersep> transaction ( ) . close ( ) ; } \n \t1 <comment> \n <ect>
\t2 this . user <identifiersep> id = user . get <identifiersep> id ( ) ; \n \t2 if ( reconnect ) { <comment> \n \t3 optional < <identifier> <identifiersep> room > room = <identifier> <identifiersep> room <identifiersep> manager . instance . get <identifiersep> room ( <identifier> <identifiersep> room <identifiersep> manager . instance . get <identifiersep> main <identifiersep> room <identifiersep> id ( ) ) ; \n \t3 if ( ! room . is <identifiersep> present ( ) ) { \n <ect>
\t5 property <identifiersep> name . equals ( <string_literal> ) || property <identifiersep> name . equals ( <string_literal> ) || \n \t5 property <identifiersep> name . equals ( <string_literal> ) || property <identifiersep> name . equals ( <string_literal> ) || \n \t5 property <identifiersep> name . equals ( <string_literal> ) || property <identifiersep> name . equals ( <string_literal> ) || \n \t5 property <identifiersep> name . equals ( <string_literal> ) ) { \n <ect>
\t1 } catch { \n \t1 case ie : interrupted <identifiersep> exception = > { \n \t2 result ( failure ( <string_literal> ) , <identifier> , start , start , true ) } \n \t1 case e : throwable = > { \n <ect>
\t1 private string encode <identifiersep> parameter ( string parameter ) { \n \t2 try { \n \t3 return url <identifiersep> encoder . encode ( parameter , encoding <identifiersep> handler . get <identifiersep> encoding ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 for ( int i = 0 ; i < initial <identifiersep> pool . length ; i ++ ) { \n \t4 initial <identifiersep> pool [ i ] = this . <identifier> <identifiersep> connection ( 0 , null , null ) ; <comment> \n \t3 } <comment> \n \t2 } catch ( sql <identifiersep> exception x ) { \n <ect>
\t1 { \n \t2 log . error ( <string_literal> + format <identifiersep> uri ( req . get <identifiersep> request <identifiersep> uri ( ) ) ) ; \n \t2 if ( started <identifiersep> <identifier> . compare <identifiersep> and <identifiersep> set ( false , true ) ) \n \t2 { \n <ect>
\t4 string output = j <identifiersep> storm <identifiersep> utils . launch <identifiersep> process ( cmd , new hash <identifiersep> map < string , string > ( ) , false ) ; \n \t4 sb . append ( output ) ; \n \t4 log . info ( <string_literal> + cmd ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 return false ; } } \n \t1 protected void write <identifiersep> unit <identifiersep> features <identifiersep> to ( data <identifiersep> output out ) throws io <identifiersep> exception , unsupported <identifiersep> encoding <identifiersep> exception , file <identifiersep> not <identifiersep> found <identifiersep> exception { \n \t2 int num <identifiersep> units = listener <identifiersep> units . get <identifiersep> number <identifiersep> of <identifiersep> units ( ) ; \n \t2 out . write <identifiersep> int ( num <identifiersep> units ) ; \n <ect>
<comment> \n public static void add <identifiersep> jars ( job job , sqoop <identifiersep> options options ) throws io <identifiersep> exception { \n \t1 if ( configuration <identifiersep> helper . is <identifiersep> local <identifiersep> job <identifiersep> tracker ( job . get <identifiersep> configuration ( ) ) ) { \n <ect>
\t2 register ( bean . get <identifiersep> object <identifiersep> name ( ) , bean ) ; } \n \t1 <identifier> . put ( monitor . get <identifiersep> config ( ) , monitor ) ; \n \t1 update <identifiersep> pending . set ( true ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 bootstrap <identifiersep> tokens = boot <identifiersep> <identifier> . get <identifiersep> random <identifiersep> tokens ( token <identifiersep> metadata , database <identifiersep> descriptor . get <identifiersep> num <identifiersep> tokens ( ) ) ; \n \t5 if ( database <identifiersep> descriptor . get <identifiersep> num <identifiersep> tokens ( ) == 1 ) \n \t6 logger . warn ( <string_literal> + bootstrap <identifiersep> tokens + <string_literal> ) ; \n \t5 else \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 service . deactivate ( ) ; \n <ect>
\t3 final user <identifiersep> profile profile = this . profile <identifiersep> creator . create ( credentials , get <identifiersep> web <identifiersep> context ( ) ) ; \n \t3 logger . debug ( <string_literal> , profile ) ; \n \t3 return create <identifiersep> result ( new client <identifiersep> credential ( credentials , authenticator . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) , profile ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t1 return policy ; } \n private string fetch <identifiersep> response <identifiersep> from <identifiersep> ranger ( string ranger <identifiersep> url , string username , string password , string database , string table ) { \n \t1 string service <identifiersep> name = context . get <identifiersep> properties ( ) . get ( <string_literal> ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> empty ( service <identifiersep> name ) ) { \n <ect>
\t3 copy <identifiersep> back <identifiersep> to <identifiersep> <identifier> ( topology <identifiersep> id , topology <identifiersep> code <identifiersep> location ) ; \n \t3 log . info ( <string_literal> + name ) ; \n \t3 notify <identifiersep> topology <identifiersep> action <identifiersep> listener ( name , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 log . info ( <string_literal> + base <identifiersep> destination <identifiersep> b . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> store <identifiersep> usage ( ) . get <identifiersep> usage ( ) + <string_literal> + base <identifiersep> destination <identifiersep> b . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> store <identifiersep> usage ( ) . get <identifiersep> percent <identifiersep> usage ( ) ) ; \n \t2 log . info ( <string_literal> + broker . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> store <identifiersep> usage ( ) . get <identifiersep> usage ( ) + <string_literal> + broker . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> store <identifiersep> usage ( ) . get <identifiersep> percent <identifiersep> usage ( ) ) ; \n \t2 consume ( queue <identifiersep> a ) ; \n \t2 consume ( queue <identifiersep> b ) ; \n <ect>
\t1 test . new <identifiersep> instance ( ) ; \n \t1 return true ; \n \t1 } catch ( class <identifiersep> cast <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception | instantiation <identifiersep> exception \n \t2 | class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t5 host = host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( id ) ; } \n \t3 } catch ( sql <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> , e ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 append <identifiersep> to <identifiersep> store ( key ) ; \n \t4 <comment> \n \t4 if ( max <identifiersep> file <identifiersep> store <identifiersep> size > 0 && file <identifiersep> store . length ( ) > max <identifiersep> file <identifiersep> store <identifiersep> size ) { \n <ect>
\t6 log . error ( e . get <identifiersep> localized <identifiersep> message ( ) , e ) ; } } \n \t4 cms <identifiersep> list <identifiersep> info <identifiersep> bean info <identifiersep> bean = build <identifiersep> <identifier> <identifiersep> type <identifiersep> info ( <identifier> <identifiersep> type ) ; \n \t4 <identifier> <identifiersep> folder <identifiersep> type <identifiersep> infos . add ( info <identifiersep> bean ) ; \n \t3 } catch ( cms <identifiersep> loader <identifiersep> exception e ) { \n <ect>
\t6 break ; } \n \t4 } else { \n \t5 break ; } } \n \t2 } catch ( exception ex ) { \n <ect>
\t5 task . exec <identifiersep> replicate ( replicate . get <identifiersep> rebalance <identifiersep> source ( ) , replicate . get <identifiersep> rebalance <identifiersep> target ( ) , true , true , replicate . was <identifiersep> queued ( ) ) ; \n \t4 } catch ( exception e ) { \n \t5 log . warn ( <string_literal> + task . get <identifiersep> job <identifiersep> key ( ) + <string_literal> + e , e ) ; } \n \t3 } else { \n <ect>
\t1 public read <identifiersep> test ( ) throws throwable { \n \t2 super ( ) ; } \n \t1 @ test \n \t1 public void get <identifiersep> next <identifiersep> test ( ) throws throwable { \n <ect>
\t3 last <identifiersep> current <identifiersep> peak <identifiersep> size = current <identifiersep> peak <identifiersep> size ; } } \n \t1 @ override \n \t1 public void created ( channel <identifiersep> context resource ) \n \t1 { \n <ect>
\t3 if ( answer == null ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + vm + <string_literal> ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + vm + <string_literal> + dest <identifiersep> host ) ; \n \t3 } else if ( ! answer . get <identifiersep> result ( ) ) { \n <ect>
<comment> \n \t1 public object handle ( message req ) throws exception { \n \t2 if ( server <identifiersep> obj == null ) { \n <ect>
\t1 @ override \n \t1 public metric <identifiersep> result measure <identifiersep> user ( recommender rec , test <identifiersep> user user , int target <identifiersep> length , long <identifiersep> list <identifier> , context context ) { \n \t2 long <identifiersep> set good = good <identifiersep> items . select <identifiersep> items ( context . <identifier> , rec , user ) ; \n \t2 if ( good . is <identifiersep> empty ( ) ) { \n <ect>
public storage get <identifiersep> storage ( ) { \n \t1 string file <identifiersep> name = context . get <identifiersep> properties ( ) . get ( <string_literal> ) ; \n \t1 storage storage <identifiersep> instance ; \n \t1 if ( file <identifiersep> name != null ) { \n <ect>
\t1 rex <identifiersep> util . apply ( first <identifiersep> usage <identifiersep> finder , immutable <identifiersep> list . < rex <identifiersep> node > of ( ) , first ) ; \n \t1 rex <identifiersep> util . apply ( second <identifiersep> usage <identifiersep> finder , immutable <identifiersep> list . < rex <identifiersep> node > of ( ) , second ) ; \n \t1 <comment> \n \t1 if ( ! check <identifiersep> support ( first <identifiersep> usage <identifiersep> finder , second <identifiersep> usage <identifiersep> finder ) ) { \n <ect>
\t4 create <identifiersep> namespace = false ; \n \t4 log . debug ( <string_literal> ) ; } } \n \t2 if ( create <identifiersep> namespace ) { \n \t3 session . get <identifiersep> workspace ( ) . get <identifiersep> namespace <identifiersep> registry ( ) . register <identifiersep> namespace ( <string_literal> , <string_literal> ) ; \n <ect>
\t4 log . debug ( <string_literal> + concept <identifiersep> id + <string_literal> + for <identifiersep> locale ) ; } \n \t3 return null ; \n \t2 } else if ( for <identifiersep> locale == null ) { \n <ect>
\t3 <comment> \n \t3 if ( cache <identifiersep> only ) { \n \t4 <comment> \n <ect>
\t1 } ; \n \t1 return response . ok ( result ) \n \t2 . header ( <string_literal> , <string_literal> <string_literal> \\ <string_literal> ) . build ( ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
\t5 final schema <identifiersep> node parent <identifiersep> schema <identifiersep> node = structr <identifiersep> app . get <identifiersep> instance ( ) . node <identifiersep> query ( schema <identifiersep> node . class ) . and <identifiersep> name ( string <identifiersep> utils . substring <identifiersep> after <identifiersep> last ( parent <identifiersep> class , <string_literal> ) ) . get <identifiersep> first ( ) ; \n \t5 if ( parent <identifiersep> schema <identifiersep> node != null ) { \n \t6 <identifier> = get <identifiersep> <identifier> ( parent <identifiersep> schema <identifiersep> node , property <identifiersep> name <identifiersep> to <identifiersep> check ) ; } } \n \t3 } catch ( framework <identifiersep> exception ex ) { \n <ect>
\t2 log . info ( lower <identifiersep> bound <identifiersep> lower <identifiersep> bound . get <identifiersep> type <identifiersep> argument ( ) . to <identifiersep> string ( ) ) ; \n \t2 log . info ( upper <identifiersep> bound <identifiersep> lower <identifiersep> bound . get <identifiersep> type <identifiersep> argument ( ) . to <identifiersep> string ( ) ) ; \n \t2 boolean result = true ; \n \t2 if ( ! wildcard <identifiersep> object . get <identifiersep> type <identifiersep> argument ( ) . equals ( object . class ) ) { \n <ect>
\t8 assert <identifiersep> equals ( <string_literal> , mdc . get ( <string_literal> ) ) ; \n \t8 assert <identifiersep> equals ( exchange . get <identifiersep> exchange <identifiersep> id ( ) , mdc . get ( <string_literal> ) ) ; \n \t8 assert <identifiersep> equals ( exchange . get <identifiersep> in ( ) . get <identifiersep> message <identifiersep> id ( ) , mdc . get ( <string_literal> ) ) ; \n \t8 mdc . put ( <string_literal> , <string_literal> ) ; \n <ect>
\t3 } else { \n \t4 log . info ( <string_literal> ) ; \n \t4 <identifier> . wait <identifiersep> until <identifiersep> stopped ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 final http <identifiersep> servlet <identifiersep> response response = web <identifiersep> utils . get <identifiersep> http <identifiersep> servlet <identifiersep> response <identifiersep> from <identifiersep> external <identifiersep> webflow <identifiersep> context ( context ) ; \n \t2 final spnego <identifiersep> credential spnego <identifiersep> credentials = ( spnego <identifiersep> credential ) credential ; \n \t2 final byte [ ] next <identifiersep> token = spnego <identifiersep> credentials . get <identifiersep> next <identifiersep> token ( ) ; \n \t2 if ( next <identifiersep> token != null ) { \n <ect>
public void set <identifiersep> talent ( er . distribution . example . client . eo . talent value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value , <identifier> <identifiersep> talent <identifiersep> photo . talent <identifiersep> key ) ; } \n public void set <identifiersep> talent <identifiersep> relationship ( er . distribution . example . client . eo . talent value ) { \n <ect>
\t2 } ) . collect ( collectors . to <identifiersep> map ( simple <identifiersep> entry : : get <identifiersep> key , simple <identifiersep> entry : : get <identifiersep> value ) ) ; \n \t2 <comment> \n \t2 if ( logger . is <identifiersep> loggable ( level . fine ) ) { \n \t3 parameters . key <identifiersep> set ( ) . for <identifiersep> each ( parameter - > \n <ect>
\t2 map < string , camel <identifiersep> cluster <identifiersep> service > cluster <identifiersep> services = application <identifiersep> context . get <identifiersep> beans <identifiersep> of <identifiersep> type ( camel <identifiersep> cluster <identifiersep> service . class ) ; \n \t2 if ( cluster <identifiersep> services != null && ! cluster <identifiersep> services . is <identifiersep> empty ( ) ) { \n \t3 for ( map . entry < string , camel <identifiersep> cluster <identifiersep> service > entry : cluster <identifiersep> services . entry <identifiersep> set ( ) ) { \n \t4 camel <identifiersep> cluster <identifiersep> service service = entry . get <identifiersep> value ( ) ; \n <ect>
\t1 for ( path path : paths ) { \n \t2 file <identifiersep> system fs = vm . get <identifiersep> volume <identifiersep> by <identifiersep> path ( path ) . get <identifiersep> file <identifiersep> system ( ) ; \n \t2 map <identifiersep> file <identifiersep> sizes . put ( path , fs . get <identifiersep> content <identifiersep> summary ( path ) . get <identifiersep> length ( ) ) ; } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t2 return null ; } \n \t1 @ override \n \t1 public user <identifiersep> vm upgrade <identifiersep> virtual <identifiersep> machine ( upgrade <identifiersep> vm <identifiersep> cmd cmd ) { \n <ect>
\t2 settings . builder index <identifiersep> settings = settings . builder ( ) \n \t4 . put ( index <identifiersep> settings ( ) ) \n \t4 . put ( setting <identifiersep> number <identifiersep> of <identifiersep> replicas , between ( 0 , 1 ) ) \n \t4 . put ( index <identifiersep> refresh <identifiersep> interval <identifiersep> setting . get <identifiersep> key ( ) , <string_literal> ) ; \n <ect>
\t4 mime <identifiersep> type = media <identifiersep> type . to <identifiersep> string ( ) ; \n \t4 if ( mime <identifiersep> type != null ) { \n \t5 return mime <identifiersep> type ; } } \n \t2 } catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error t ) { \n <ect>
\t7 . size ( ) ] ) ) ; \n \t4 } else { \n \t5 failed = true ; } } } \n \t2 if ( failed ) { \n <ect>
\t2 map < string , string > cluster <identifiersep> details = null ; \n \t2 try { \n \t3 traffic <identifiersep> label <identifiersep> obj = new vmware <identifiersep> traffic <identifiersep> label ( zone <identifiersep> <identifier> <identifiersep> traffic <identifiersep> label , traffic <identifiersep> type , default <identifiersep> virtual <identifiersep> switch <identifiersep> type ) ; \n \t2 } catch ( invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private query create <identifiersep> user <identifiersep> search <identifiersep> query ( string name , list < role > roles , boolean include <identifiersep> <identifier> , string hql <identifiersep> select <identifiersep> start ) { \n <ect>
<comment> \n \t1 private int create <identifiersep> nodes ( zoo <identifiersep> keeper zk , int start , int count ) throws exception { \n <ect>
\t1 public int get <identifiersep> message <identifiersep> count ( ) { \n \t2 synchronized ( semaphore ) { \n \t3 return message <identifiersep> ids . size ( ) ; } } \n \t1 public void wait <identifiersep> for <identifiersep> messages <identifiersep> to <identifiersep> <identifier> ( int message <identifiersep> count ) { \n <ect>
\t1 { \n \t2 ch . event <identifiersep> loop ( ) . schedule ( ( ) - > { \n \t3 if ( handshake <identifiersep> client . fail <identifiersep> if <identifiersep> not <identifiersep> done ( <string_literal> + timeout ) ) \n \t3 { \n <ect>
\t2 if ( ! <identifier> && ( ( row <identifiersep> <identifier> > 0 && result . size ( ) > row <identifiersep> <identifier> ) || ( mem <identifiersep> <identifier> > 0 && <identifier> <identifiersep> mem > mem <identifiersep> <identifier> ) ) ) { \n \t3 try { \n \t4 file tmp = create <identifiersep> temp <identifiersep> file ( ) ; \n <ect>
\t1 for ( boolean sel : selected ) { \n \t1 if ( ! sel ) { \n \t2 nb <identifiersep> non <identifiersep> selected ++ ; } } \n \t1 if ( nb <identifiersep> non <identifiersep> selected == 0 ) { \n <ect>
\t2 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) . set <identifiersep> refresh <identifiersep> policy ( refresh <identifiersep> policy . immediate ) . get ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) . set <identifiersep> refresh <identifiersep> policy ( refresh <identifiersep> policy . immediate ) . get ( ) ; \n \t2 search <identifiersep> response search <identifiersep> response = client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> search <identifiersep> type ( search <identifiersep> type . query <identifiersep> then <identifiersep> fetch ) . set <identifiersep> size ( 1 ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) ; \n <ect>
\t5 return cms <identifiersep> menu <identifiersep> item <identifiersep> visibility <identifiersep> mode . visibility <identifiersep> active ; \n \t4 } else { \n \t5 return cms <identifiersep> menu <identifiersep> item <identifiersep> visibility <identifiersep> mode . visibility <identifiersep> <identifier> ; } \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t3 if ( folder == null ) { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + store <identifiersep> name + <string_literal> ) ; } \n \t3 folder . open ( folder . read <identifiersep> write ) ; \n \t3 message [ ] messages = folder . get <identifiersep> messages ( ) ; \n <ect>
\t3 log . info ( <string_literal> + get <identifiersep> repository <identifiersep> name ( ) ) ; } \n \t2 if ( completed > 0 ) { \n \t3 log . warn ( <string_literal> + completed + <string_literal> + get <identifiersep> repository <identifiersep> name <identifiersep> completed ( ) ) ; \n \t2 } else { \n <ect>
\t4 rmi <identifiersep> utils . create <identifiersep> client <identifiersep> socket <identifiersep> factory ( ) ) ; \t2 \n \t2 try { \n \t3 reg . <identifier> ( <identifier> <identifiersep> engine <identifiersep> rmi <identifiersep> name ) ; \n \t2 } catch ( not <identifiersep> bound <identifiersep> exception e ) { \n <ect>
\t2 boolean task <identifiersep> output <identifiersep> caching <identifiersep> enabled = state . get <identifiersep> task <identifiersep> output <identifiersep> caching ( ) . is <identifiersep> enabled ( ) ; \n \t2 sorted <identifiersep> set < resolved <identifiersep> task <identifiersep> output <identifiersep> file <identifiersep> property <identifiersep> spec > output <identifiersep> properties = null ; \n \t2 if ( task <identifiersep> output <identifiersep> caching <identifiersep> enabled ) { \n \t3 if ( task . is <identifiersep> has <identifiersep> custom <identifiersep> actions ( ) ) { \n <ect>
\t2 best = split ; } } \n \t1 boolean already <identifiersep> selected = selected [ best . get <identifiersep> attr ( ) ] ; \n \t1 if ( already <identifiersep> selected ) { \n \t1 <comment> \n <ect>
\t3 image = new byte [ in . available ( ) ] ; \n \t3 in . read ( image ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 if ( event <identifiersep> types . event <identifiersep> iso <identifiersep> create . equals ( event . get <identifiersep> type ( ) ) || event <identifiersep> types . event <identifiersep> iso <identifiersep> copy . equals ( event . get <identifiersep> type ( ) ) ) { \n \t3 iso <identifiersep> size = event . get <identifiersep> size ( ) ; } \n \t2 if ( event <identifiersep> types . event <identifiersep> iso <identifiersep> create . equals ( event . get <identifiersep> type ( ) ) || event <identifiersep> types . event <identifiersep> iso <identifiersep> copy . equals ( event . get <identifiersep> type ( ) ) ) { \n <ect>
\t2 case <identifier> <identifiersep> predicate : \n \t3 log . info ( <string_literal> , host . get <identifiersep> host <identifiersep> name ( ) ) ; \n \t3 predicate <identifiersep> rejected = true ; \n \t3 break ; } } \n <ect>
\t2 } ; \n \t1 try { \n \t2 return input <identifiersep> supplier . class . cast ( byte <identifiersep> streams . new <identifiersep> input <identifiersep> stream <identifiersep> supplier ( byte <identifiersep> streams . to <identifiersep> byte <identifiersep> array ( from ) ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 protected void do <identifiersep> start ( ) throws exception { \n \t2 if ( i <identifiersep> series == null ) { \n \t3 i <identifiersep> series = get <identifiersep> i <identifiersep> series <identifiersep> endpoint ( ) . get <identifiersep> system ( ) ; } \n \t2 if ( ! i <identifiersep> series . is <identifiersep> connected ( <identifier> . command ) ) { \n <ect>
\t2 if ( opts == null ) { \n \t3 logger . debug ( <string_literal> , default <identifiersep> step ) ; } \n \t2 short step = tools . get <identifiersep> short <identifiersep> opt ( config <identifiersep> opts <identifiersep> <identifier> . step . to <identifiersep> string ( ) , opts , default <identifiersep> step ) ; \n \t2 if ( increase <identifiersep> decrease == null ) { \n <ect>
\t6 if ( ! d . pending <identifiersep> undeploy ( ) && ! d . <identifier> ( ) && ! deps <identifiersep> to <identifiersep> check . contains ( d ) ) \n \t7 retry = true ; } \n \t5 if ( retry ) { \n <ect>
\t2 <identifier> <identifiersep> negative <identifiersep> cache . clear ( ) ; } \n \t1 public synchronized void restart ( ) { \n \t2 <identifier> <identifiersep> db <identifiersep> dir = <identifier> <identifiersep> context . router ( ) . get <identifiersep> config <identifiersep> setting ( prop <identifiersep> db <identifiersep> dir ) ; \n \t2 if ( <identifier> <identifiersep> db <identifiersep> dir == null ) { \n <ect>
\t4 if ( command . int <identifiersep> value ( ) > 0 && command . int <identifiersep> value ( ) < <number_literal> ) { \n \t5 int new <identifiersep> command = ( command . int <identifiersep> value ( ) * ( <identifier> <identifiersep> steps - <number_literal> ) / <number_literal> + <number_literal> ) ; \n \t5 thread . sleep ( <number_literal> ) ; \n \t5 string message <identifiersep> bytes = <string_literal> + integer . to <identifiersep> hex <identifiersep> string ( new <identifiersep> command ) + <string_literal> ; \n <ect>
\t2 for ( int i = 1 ; i < = <number_literal> ; i ++ ) { \n \t3 calendar next <identifiersep> timeout = calendar <identifiersep> timeout . get <identifiersep> next <identifiersep> timeout ( previous <identifiersep> timeout ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( time <identifiersep> zone <identifiersep> display <identifiersep> name , next <identifiersep> timeout ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( time <identifiersep> zone <identifiersep> display <identifiersep> name , next <identifiersep> timeout . after ( previous <identifiersep> timeout ) ) ; \n <ect>
\t3 <identifier> <identifiersep> root <identifiersep> logger . error ( <string_literal> ) ; \n \t3 <identifier> <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 <identifier> <identifiersep> logger . info ( <string_literal> ) ; \n \t3 <identifier> <identifiersep> logger . warn ( <string_literal> ) ; \n <ect>
\t2 return <string_literal> ; } \n \t1 @ override \n \t1 protected void do <identifiersep> start ( ) { \n <ect>
\t2 xml <identifiersep> object [ ] paths = msg <identifiersep> xml . select <identifiersep> path ( <string_literal> \n \t4 + wsdl <identifiersep> context . get <identifiersep> soap <identifiersep> version ( ) . get <identifiersep> envelope <identifiersep> namespace ( ) + <string_literal> \n \t4 + wsdl <identifiersep> context . get <identifiersep> soap <identifiersep> version ( ) . get <identifiersep> fault <identifiersep> detail <identifiersep> namespace ( ) + <string_literal> ) ; \n \t2 if ( paths . length == 0 ) { \n <ect>
\t5 log . info ( <string_literal> , transaction <identifiersep> count , message . get <identifiersep> src ( ) ) ; \n \t6 log . debug ( <string_literal> , remote <identifiersep> change . remote <identifiersep> cache <identifiersep> changes ( ) ) ; } } \n \t4 catch ( io <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , message ) ; } \n \t2 try { \n \t3 signal = get <identifiersep> int <identifiersep> from <identifiersep> text ( signal <identifiersep> reg <identifiersep> exp , message ) ; \n \t2 } catch ( lightwave <identifiersep> rf <identifiersep> message <identifiersep> exception le ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 record <identifiersep> comments ( unit , compilation <identifiersep> unit <identifiersep> node ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 record <identifiersep> <identifier> ( unit , compilation <identifiersep> unit <identifiersep> node ) ; \n <ect>
\t1 long flush <identifiersep> id ; \n \t1 try { \n \t1 flush <identifiersep> id = get <identifiersep> flush <identifiersep> id ( ) ; \n \t1 } catch ( no <identifiersep> node <identifiersep> exception e ) { \n <ect>
\t3 event <identifiersep> container . get <identifiersep> event <identifiersep> list ( ) . add ( cal <identifiersep> dav <identifiersep> event ) ; \n \t3 event <identifiersep> container . set <identifiersep> last <identifiersep> changed ( cal <identifiersep> dav <identifiersep> event . get <identifiersep> last <identifiersep> changed ( ) ) ; \n \t3 this . add <identifiersep> event <identifiersep> to <identifiersep> map ( event <identifiersep> container , false ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t3 collections . sort ( \n \t4 handlers , \n \t4 rest <identifiersep> handler <identifiersep> url <identifiersep> comparator . instance ) ; \n \t3 handlers . for <identifiersep> each ( handler - > { \n <ect>
\t2 try { \n \t3 key <identifiersep> pair = <identifier> . get <identifiersep> key <identifiersep> pair <identifiersep> services ( ) . import <identifiersep> key <identifiersep> pair <identifiersep> in <identifiersep> region ( region , <string_literal> + group , \n \t5 public <identifiersep> key <identifiersep> material ) ; \n \t3 key <identifiersep> pair = add <identifiersep> fingerprint <identifiersep> to <identifiersep> key <identifiersep> pair ( public <identifiersep> key <identifiersep> material , key <identifiersep> pair ) ; \n <ect>
\t3 public void life <identifiersep> cycle <identifiersep> failure ( life <identifiersep> cycle lc , throwable t ) \n \t3 { \n \t4 if ( verbose ) \n \t4 { \n <ect>
\t3 disable <identifiersep> plugin ( app <identifiersep> name ) ; \n \t3 foo = <identifier> ( <string_literal> , max <identifiersep> version , ctx ) ; \n \t3 throw new exception ( foo ) ; } \n \t2 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 public void <identifier> <identifiersep> aborted ( ) { \n \t3 logger . info ( <string_literal> ) ; } \n \t2 @ override \n \t2 public void <identifier> <identifiersep> progress ( final string message ) { \n <ect>
\t5 md <identifiersep> pairs . put ( parsed <identifiersep> pair [ 0 ] . trim ( ) , new <identifiersep> field ) ; \n \t6 log . debug ( <string_literal> + parsed <identifiersep> pair [ 0 ] + <string_literal> + parsed <identifiersep> pair [ 1 ] ) ; } } \n \t3 } else { \n <ect>
<comment> \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 public void handle <identifiersep> take <identifiersep> value <identifiersep> for <identifiersep> <identifier> <identifiersep> key ( object value , string key ) { \n <ect>
\t4 if ( context . get <identifiersep> current <identifiersep> user ( ) != null ) { \n \t5 log . error ( \n \t6 <string_literal> + context . get <identifiersep> current <identifiersep> user ( ) . get <identifiersep> email ( ) + <string_literal> ) ; \n \t4 } else { \n <ect>
\t3 <comment> \n \t3 string [ ] cidr = network . get <identifiersep> cidr ( ) . split ( <string_literal> ) ; \n \t3 boolean is <identifiersep> same <identifiersep> cidr = net <identifiersep> utils . same <identifiersep> subnet <identifiersep> cidr ( requested <identifiersep> ip , net <identifiersep> utils . <identifier> ( array [ 0 ] ) , integer . parse <identifiersep> int ( cidr [ 1 ] ) ) ; \n \t3 if ( ! is <identifiersep> same <identifiersep> cidr ) { \n <ect>
\t4 source <identifiersep> data <identifiersep> line . open ( audio <identifiersep> format ) ; \n \t4 volume = ( float <identifiersep> control ) source <identifiersep> data <identifiersep> line . get <identifiersep> control ( float <identifiersep> control . type . master <identifiersep> <identifier> ) ; \n \t4 source <identifiersep> data <identifiersep> line . start ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t8 <comment> \n \t8 <comment> \n \t8 <comment> \n \t8 if ( down <identifiersep> host . <identifier> <identifiersep> policy . has <identifiersep> active <identifiersep> connections ( ) ) { \n <ect>
\t1 throw t ; } \n \t1 return artifact <identifiersep> location ; } \n private void log <identifiersep> deployment <identifiersep> failure ( throwable t , string artifact <identifiersep> name ) { \n \t1 if ( contains <identifiersep> type ( t , deployment <identifiersep> start <identifiersep> exception . class ) ) { \n <ect>
\t2 if ( code == code . <identifier> ) { \n \t3 log . error ( <string_literal> + e . get <identifiersep> path ( ) , e ) ; \n \t2 } else if ( code == code . <identifier> || code == code . <identifier> \n \t3 || code == code . <identifier> ) { \n <ect>
\t3 private final atomic <identifiersep> integer counter = new atomic <identifiersep> integer ( ) ; \n \t3 private final thread . uncaught <identifiersep> exception <identifiersep> handler handler = new thread . uncaught <identifiersep> exception <identifiersep> handler ( ) { \n \t4 @ override \n \t4 public void uncaught <identifiersep> exception ( thread t , throwable e ) { \n <ect>
\t3 processing <identifiersep> result . <identifier> ( <string_literal> , pom <identifiersep> path <identifiersep> in <identifiersep> svn ) ; \n \t3 logger . info ( <string_literal> , pom <identifiersep> path <identifiersep> in <identifiersep> svn , dist <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t2 } else { \n \t3 processing <identifiersep> result . <identifier> ( <string_literal> , pom <identifiersep> path <identifiersep> in <identifiersep> svn ) ; \n <ect>
\t2 zoo <identifiersep> keeper <identifiersep> leader <identifiersep> retrieval <identifiersep> service leader <identifiersep> retrieval <identifiersep> service = null ; \n \t2 testing <identifiersep> listener listener = new testing <identifiersep> listener ( ) ; \n \t2 try { \n \t3 leader <identifiersep> retrieval <identifiersep> service = zoo <identifiersep> keeper <identifiersep> utils . create <identifiersep> leader <identifiersep> retrieval <identifiersep> service ( client , configuration ) ; \n <ect>
\t4 <identifier> <identifiersep> file . delete ( ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 <identifier> <identifiersep> log . error ( <string_literal> + base <identifiersep> name , ioe ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t7 if ( cache . cache ( ) . affinity ( ) . is <identifiersep> primary ( ctx . discovery ( ) . local <identifiersep> node ( ) , key ) ) { \n \t8 try { \n \t9 cache . remove ( key ) ; } \n \t8 catch ( grid <identifiersep> exception ex ) { \n <ect>
\t2 public void process ( exchange exchange ) throws exception { \n \t3 hits hits = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( hits . class ) ; \n \t3 print <identifiersep> results ( hits ) ; } \n \t2 private void print <identifiersep> results ( hits hits ) { \n <ect>
<comment> \n \t1 <comment> \n \t1 public static void destroy <identifiersep> all ( ) { \n <ect>
\t3 on <identifiersep> exception ( trans <identifiersep> status ) ; \n \t3 logger . warn ( <string_literal> , <identifier> ) ; \n \t3 for ( entry < string , string > current <identifiersep> error : <identifier> . get <identifiersep> errors ( ) . entry <identifiersep> set ( ) ) \n \t3 { \n <ect>
\t2 try { \n \t3 list < cms <identifiersep> resource > site <identifiersep> files = m <identifiersep> guest <identifiersep> cms . read <identifiersep> resources ( m <identifiersep> site <identifiersep> root , filter , true ) ; \n \t3 result . add <identifiersep> all ( site <identifiersep> files ) ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t3 <identifier> <identifiersep> semantic <identifiersep> model <identifier> <identifiersep> semantic <identifiersep> model = new <identifier> <identifiersep> semantic <identifiersep> model ( sm , null , true ) ; \n \t3 <identifier> <identifiersep> semantic <identifiersep> models . add ( <identifier> <identifiersep> semantic <identifiersep> model ) ; \n \t3 return <identifier> <identifiersep> semantic <identifiersep> models ; } \n \t2 logger . info ( <string_literal> + this . graph <identifiersep> builder . get <identifiersep> graph ( ) . vertex <identifiersep> set ( ) . size ( ) ) ; \n <ect>
\t3 } ) ; } \n \t2 return super . create <identifiersep> repository ( fixture ) ; } \n \t1 private void initialize <identifiersep> provider ( ) throws exception { \n \t2 if ( server == null || <string_literal> . equals ( server ) ) { \n <ect>
<comment> \n \t1 private void process <identifiersep> near <identifiersep> tx <identifiersep> finish <identifiersep> request ( uuid node <identifiersep> id , grid <identifiersep> near <identifiersep> tx <identifiersep> finish <identifiersep> request < k , v > req ) { \n \t2 assert is <identifiersep> affinity <identifiersep> node ( cache <identifiersep> cfg ) ; \n <ect>
\t7 size . increment <identifiersep> and <identifiersep> get ( ) ; \n \t7 session . commit ( ) ; } } \n \t4 } finally { \n \t5 connection . close ( ) ; \n <ect>
\t2 if ( generic <identifiersep> devices <identifiersep> list . size ( ) != 0 ) { \n \t3 for ( m <identifiersep> sub <identifiersep> device < ? > <identifier> : generic <identifiersep> devices <identifiersep> list ) { \n \t4 if ( ! <identifier> . get <identifiersep> sub <identifiersep> id ( ) . equals ( sub <identifiersep> id ) && <identifier> . get <identifiersep> enabled <identifiersep> a ( ) . get ( ) ) { \n \t5 is <identifiersep> duplicate = true ; \n <ect>
\t3 logger . warn ( <string_literal> , entity <identifiersep> id ) ; \n \t3 return optional . empty ( ) ; } \n \t2 logger . debug ( <string_literal> , entity <identifiersep> id ) ; \n \t2 if ( entity <identifiersep> descriptor . get <identifiersep> valid <identifiersep> until ( ) != null && entity <identifiersep> descriptor . get <identifiersep> valid <identifiersep> until ( ) . is <identifiersep> before <identifiersep> now ( ) ) { \n <ect>
\t1 try { \n \t1 download <identifiersep> request request = get <identifiersep> download <identifiersep> request ( request <identifiersep> id ) ; \n \t1 return download <identifiersep> g <identifiersep> zip ( request ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
\t2 { \n \t3 listeners \n \t4 = new array <identifiersep> list < file <identifiersep> transfer <identifiersep> status <identifiersep> listener > ( status <identifiersep> listeners ) ; } \n <ect>
\t3 if ( use <identifiersep> common <identifiersep> fork <identifiersep> join <identifiersep> pool ) \n \t4 return fork <identifiersep> join <identifiersep> pool . common <identifiersep> pool ( ) ; \n \t3 int num <identifiersep> cores = runtime . get <identifiersep> runtime ( ) . available <identifiersep> processors ( ) ; \n \t3 if ( max <identifiersep> threads > num <identifiersep> cores ) \n <ect>
\t2 return something <identifiersep> else + <string_literal> + more ; } \n \t1 public void set <identifiersep> something <identifiersep> else ( string something <identifiersep> else ) { \n \t2 this . something <identifiersep> else = something <identifiersep> else ; } \n \t1 public void start ( ) { \n <ect>
\t3 params . put ( storage <identifiersep> layer . instance <identifiersep> config <identifiersep> key , <identifier> <identifiersep> storage ) ; \n \t3 processor . configure ( <string_literal> , params ) ; \n \t3 return processor . get <identifiersep> virtual <identifiersep> size ( file ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 servlet <identifiersep> context . add <identifiersep> servlet ( new servlet <identifiersep> holder ( new my <identifiersep> http <identifiersep> servlet ( ) ) , <string_literal> ) ; \n \t2 try { \n \t3 server . start ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 result . <identifier> = ( table <identifiersep> not <identifiersep> found <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 { \n \t4 if ( ! current <identifiersep> user <identifiersep> id . get <identifiersep> user <identifiersep> id ( token ) . equals ( <string_literal> ) ) \n \t4 { \n \t5 user <identifiersep> id <identifiersep> list . add ( current <identifiersep> user <identifiersep> id . get <identifiersep> user <identifiersep> id ( token ) ) ; } } \n <ect>
\t7 logger . warn ( string . format ( \n \t8 <string_literal> , \n \t8 entry . get <identifiersep> key ( ) , entry . get <identifiersep> value ( ) , e . get <identifiersep> message ( ) ) ) ; } } \n \t4 } catch ( x <identifiersep> wiki <identifiersep> velocity <identifiersep> exception ex ) { \n <ect>
\t4 return ( ( connection <identifiersep> factory ) connection <identifiersep> factory ) . create <identifiersep> connection ( key . get <identifiersep> user <identifiersep> name ( ) , key . get <identifiersep> password ( ) ) ; } \n \t2 } else { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } } \n \t1 public void start ( ) { \n <ect>
\t1 if ( tbl == null ) { \n \t2 string err <identifiersep> msg = <string_literal> + table <identifiersep> name + <string_literal> ; \n \t2 write <identifiersep> to <identifiersep> file ( err <identifiersep> msg , show <identifiersep> tbl <identifiersep> <identifier> . get <identifiersep> res <identifiersep> file ( ) ) ; \n \t2 return 0 ; } \n <ect>
\t4 } else if ( capacity <identifiersep> vo <identifiersep> mem . get <identifiersep> used <identifiersep> capacity ( ) + capacity <identifiersep> vo <identifiersep> mem . get <identifiersep> reserved <identifiersep> capacity ( ) > new <identifiersep> total <identifiersep> mem && capacity <identifiersep> vo <identifiersep> mem . get <identifiersep> used <identifiersep> capacity ( ) < new <identifiersep> total <identifiersep> mem ) { \n \t5 capacity <identifiersep> vo <identifiersep> mem . set <identifiersep> reserved <identifiersep> capacity ( 0 ) ; \n \t5 capacity <identifiersep> vo <identifiersep> mem . set <identifiersep> total <identifiersep> capacity ( new <identifiersep> total <identifiersep> mem ) ; \n \t4 } else { \n <ect>
\t6 build <identifiersep> cache . store ( build <identifiersep> cache <identifiersep> command <identifiersep> factory . create <identifiersep> store ( cache <identifiersep> key , output <identifiersep> properties , output <identifiersep> snapshots , task , context . get <identifiersep> execution <identifiersep> time ( ) ) ) ; \n \t5 } catch ( exception e ) { \n \t6 logger . warn ( <string_literal> , cache <identifiersep> key . get <identifiersep> display <identifiersep> name ( ) , task , e ) ; } \n \t4 } else { \n <ect>
<comment> \n int [ ] [ ] parse <identifiersep> output ( job <identifiersep> context job ) throws io <identifiersep> exception { \n \t1 configuration conf = job . get <identifiersep> configuration ( ) ; \n \t1 int num <identifiersep> maps = conf . get <identifiersep> int ( <string_literal> , - 1 ) ; \n <ect>
\t4 log . info ( string . format ( locale . us , <string_literal> + \n \t6 <string_literal> , tx . get <identifiersep> hash <identifiersep> as <identifiersep> string ( ) , value <identifiersep> sent <identifiersep> from <identifiersep> me . to <identifiersep> friendly <identifiersep> string ( ) , \n \t6 value <identifiersep> sent <identifiersep> to <identifiersep> me . to <identifiersep> friendly <identifiersep> string ( ) ) ) ; } \n \t3 if ( tx . get <identifiersep> confidence ( ) . get <identifiersep> source ( ) . equals ( transaction <identifiersep> confidence . source . unknown ) ) { \n <ect>
\t2 thread . sleep ( ttl <identifiersep> interval ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t2 log . error ( e ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t10 final http <identifiersep> servlet <identifiersep> request request , final http <identifiersep> servlet <identifiersep> response response , \n \t10 final saml <identifiersep> registered <identifiersep> service service , \n \t10 final saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade adaptor ) throws saml <identifiersep> exception { \n \t2 if ( service . is <identifiersep> encrypt <identifiersep> assertions ( ) ) { \n <ect>
\t3 return ; } \n \t2 if ( ! started . compare <identifiersep> and <identifiersep> set ( false , true ) ) { \n \t3 logger . info ( <string_literal> ) ; \n \t3 return ; } \n <ect>
\t4 } catch ( exception e ) { \n \t5 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + custom <identifiersep> factory , \n \t7 e ) ; } } \n \t2 } catch ( kylin <identifiersep> config <identifiersep> cannot <identifiersep> init <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t3 server . start ( ) ; \n \t3 if ( gui <identifiersep> package . get <identifiersep> instance ( ) != null ) { \n \t4 gui <identifiersep> package . get <identifiersep> instance ( ) . register ( server ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ <identifier> <identifiersep> throws \n \t1 protected set < authentication <identifiersep> handler > get <identifiersep> authentication <identifiersep> handlers <identifiersep> for <identifiersep> this <identifiersep> transaction ( final authentication <identifiersep> transaction transaction ) { \n \t2 final set < authentication <identifiersep> handler > handlers = authentication <identifiersep> event <identifiersep> execution <identifiersep> plan . get <identifiersep> authentication <identifiersep> handlers <identifiersep> for <identifiersep> transaction ( transaction ) ; \n <ect>
\t4 global = true ; \n \t4 break ; \n \t3 } else { \n \t4 thread . sleep ( <number_literal> ) ; \n <ect>
\t8 context <identifiersep> parameters . get <identifiersep> parameter <identifiersep> value ( context <identifiersep> parameter . csv <identifiersep> publish <identifiersep> relative <identifiersep> dir ) + csv <identifiersep> file <identifiersep> name ) ; \n \t6 output <identifiersep> object . put ( json <identifiersep> keys . worksheet <identifiersep> id . name ( ) , worksheet <identifiersep> id ) ; \n \t6 pw . println ( output <identifiersep> object . to <identifiersep> string ( ) ) ; \n \t5 } catch ( json <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private item <identifiersep> map determine <identifiersep> item <identifiersep> mapping <identifiersep> by <identifiersep> item <identifiersep> command ( string item <identifiersep> command ) { \n \t2 item <identifiersep> map found <identifiersep> mapping = <identifier> <identifiersep> all <identifiersep> item <identifiersep> map . get ( item <identifiersep> command ) ; \n \t2 if ( found <identifiersep> mapping == null ) { \n <ect>
\t2 if ( response <identifiersep> code == <number_literal> ) { \n \t3 input <identifiersep> stream is = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t3 map < string , string > user <identifiersep> id <identifiersep> values = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> } ) ; \n \t3 string user <identifiersep> id <identifiersep> str = user <identifiersep> id <identifiersep> values . get ( <string_literal> ) ; \n <ect>
<comment> \n \t1 protected input <identifiersep> stream get <identifiersep> resource <identifiersep> input <identifiersep> stream ( final resource resource , final string entity <identifiersep> id ) throws io <identifiersep> exception { \n <ect>
\t2 if ( ! subject . is <identifiersep> authenticated ( ) ) \n \t2 { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 } ; \n \t2 assert <identifiersep> equals ( <string_literal> , data . length - 1 , dlq <identifiersep> messages . size ( ) ) ; \n \t2 final queue <identifiersep> view <identifiersep> m <identifiersep> bean queue <identifiersep> view = get <identifiersep> proxy <identifiersep> to <identifiersep> queue <identifiersep> view <identifiersep> m <identifiersep> bean ( ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> <identifier> <identifiersep> count ( ) ) ; \n <ect>
\t1 long stripe <identifiersep> offset , boolean has <identifiersep> file <identifiersep> id , identity <identifiersep> hash <identifiersep> map < byte <identifiersep> buffer , boolean > to <identifiersep> release ) \n \t2 throws io <identifiersep> exception { \n \t1 disk <identifiersep> range <identifiersep> list . <identifier> <identifiersep> helper to <identifiersep> read = new disk <identifiersep> range <identifiersep> list . <identifier> <identifiersep> helper ( list <identifiersep> to <identifiersep> read ) ; \n <ect>
\t3 system . set <identifiersep> property ( camel <identifiersep> test <identifiersep> support . route <identifiersep> coverage <identifiersep> enabled , <string_literal> ) ; \n \t3 camel <identifiersep> spring <identifiersep> test <identifiersep> helper . do <identifiersep> to <identifiersep> spring <identifiersep> camel <identifiersep> contexts ( context , new do <identifiersep> to <identifiersep> spring <identifiersep> camel <identifiersep> contexts <identifiersep> strategy ( ) { \n \t4 @ override \n \t4 public void execute ( string context <identifiersep> name , spring <identifiersep> camel <identifiersep> context camel <identifiersep> context ) throws exception { \n <ect>
\t2 for ( string file : dir . list <identifiersep> all ( ) ) { \n \t3 size += dir . file <identifiersep> length ( file ) ; } \n \t2 dir . close ( ) ; \n \t2 double bytes <identifiersep> per <identifiersep> doc = ( double ) size / num <identifiersep> docs ; \n <ect>
\t2 m . put ( value , <string_literal> , value ) ; \n \t2 master <identifiersep> <identifier> ++ ; } \n \t2 bw . add <identifiersep> mutation ( m ) ; } \n \t1 bw . close ( ) ; \n <ect>
\t2 <comment> \n \t2 long physical <identifiersep> network <identifiersep> id = network . get <identifiersep> physical <identifiersep> network <identifiersep> id ( ) ; \n \t2 list < <identifier> <identifiersep> <identifier> <identifiersep> device <identifiersep> vo > devices = <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> dao . list <identifiersep> by <identifiersep> physical <identifiersep> network ( physical <identifiersep> network <identifiersep> id ) ; \n \t2 if ( devices . is <identifiersep> empty ( ) ) { \n <ect>
\t4 rs . close ( ) ; \n \t4 stmt . close ( ) ; \n \t4 con . commit ( ) ; \n \t3 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t4 datastore . delete <identifiersep> metadata <identifiersep> record ( rec . get <identifiersep> identifier ( ) . to <identifiersep> string ( ) ) ; \n \t4 log . debug ( <string_literal> , rec . get <identifiersep> identifier ( ) . to <identifiersep> string ( ) ) ; } \n \t3 log . info ( <string_literal> , watch . elapsed ( time <identifiersep> unit . milliseconds ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 long start ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 <identifier> <identifiersep> do <identifiersep> runnable <identifiersep> tasks ( after <identifiersep> tasks , block <identifiersep> builder ) ; \n <ect>
\t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . build ( ) ; \n \t2 cluster <identifiersep> state cluster <identifiersep> state = cluster <identifiersep> state . builder ( org . elasticsearch . cluster . cluster <identifiersep> name . cluster <identifiersep> name <identifiersep> setting . get <identifiersep> default ( settings . empty ) ) . meta <identifiersep> data ( meta <identifiersep> data ) . routing <identifiersep> table ( initial <identifiersep> routing <identifiersep> table ) . build ( ) ; \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 fml <identifiersep> <identifier> <identifiersep> mod <identifiersep> <identifier> . send <identifiersep> message ( <string_literal> , <string_literal> , tile <identifiersep> <identifier> . class . get <identifiersep> canonical <identifiersep> name ( ) ) ; } \n \t1 @ mod . event <identifiersep> handler \n \t1 public void <identifier> ( fml <identifiersep> missing <identifiersep> mappings <identifiersep> event event ) { \n \t2 throwable error = null ; \n <ect>
\t4 s <identifiersep> logger . error ( <string_literal> + url ) ; \n \t4 return null ; } \n \t3 return method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 sink <identifiersep> counter . start ( ) ; } \n @ override \n public final void stop ( ) { \n <ect>
\t3 && <string_literal> . equals ( buckets [ 0 ] . get <identifiersep> path ( ) . get <identifiersep> name ( ) ) && <identifier> == buckets [ 0 ] \n \t4 . get <identifiersep> len ( ) ) \n \t2 ) ; \n \t1 } else { \n <ect>
\t2 <comment> \n \t2 set < ip > vms <identifiersep> to <identifiersep> destroy = get <identifiersep> vms <identifiersep> to <identifiersep> destroy ( network , rules ) ; \n \t2 <comment> \n \t2 map < ip , list < load <identifiersep> balancing <identifiersep> rule > > rules <identifiersep> to <identifiersep> apply = get <identifiersep> lb <identifiersep> rules <identifiersep> to <identifiersep> apply ( rules ) ; \n <ect>
\t4 content <identifiersep> generator . put <identifiersep> variable ( <string_literal> , comments ) \n \t4 <identifier> . for <identifiersep> each { \n \t5 val notifier <identifiersep> full <identifiersep> name = it . display <identifiersep> name \n \t5 if ( notifier <identifiersep> full <identifiersep> name == null ) { \n <ect>
\t3 if ( not <identifiersep> present != null ) \n \t4 not <identifiersep> present . add ( node ) ; \n \t3 return ; } \n \t2 if ( id == node <identifiersep> id . node <identifiersep> id <identifiersep> any ) { \n <ect>
\t2 self . command <identifiersep> statuses . report ( ) \n \t1 except : \n \t2 logger . exception ( <string_literal> ) \n \t1 self . stop <identifiersep> event . wait ( self . command <identifiersep> reports <identifiersep> interval ) \n <ect>
\t2 ) ; \n \t2 list < string > cluster <identifiersep> instances = new <identifiersep> array <identifiersep> list ( ) ; \n \t2 for ( reservation that : r . get <identifiersep> <identifier> ( ) ) { \n \t3 for ( instance i : that . get <identifiersep> instances ( ) ) { \n <ect>
\t2 } catch ( not <identifiersep> <identifier> <identifiersep> m <identifiersep> bean <identifiersep> exception e ) { \n \t3 <comment> \n \t3 log . debug ( <string_literal> , e ) ; \n \t2 } catch ( instance <identifiersep> already <identifiersep> exists <identifiersep> exception e ) { \n <ect>
\t4 } finally { \n \t5 sec <identifiersep> storage <identifiersep> vm <identifiersep> lock . release <identifiersep> ref ( ) ; } \n \t4 if ( sec <identifiersep> storage <identifiersep> vm == null ) { \n <ect>
\t6 element el = query <identifiersep> async <identifiersep> job <identifiersep> result ( server , input ) ; \n \t6 map < string , string > success = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( el , new string [ ] { <string_literal> } ) ; \n \t6 s <identifiersep> logger . info ( cmd <identifiersep> name + <string_literal> + success . get ( <string_literal> ) ) ; \n \t5 } else { \n <ect>
\t9 log . info ( log . fac <identifiersep> io , <string_literal> ) ; \n \t8 update <identifiersep> in <identifiersep> background ( true ) ; \n \t7 } else { \n \t8 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t7 logger . debug ( <string_literal> ) ; \n \t7 logger . debug ( <string_literal> , device <identifiersep> token . access <identifiersep> token ) ; \n \t7 logger . debug ( <string_literal> , device <identifiersep> token . token <identifiersep> type ) ; \n <ect>
\t1 public void populate ( final gadget <identifiersep> definition in <identifiersep> gadget <identifiersep> definition , final string in <identifiersep> gadget <identifiersep> definition <identifiersep> url ) \n \t1 { \n \t2 final map < string , general <identifiersep> gadget <identifiersep> definition > gadget <identifiersep> defs = new hash <identifiersep> map < string , general <identifiersep> gadget <identifiersep> definition > ( ) ; \n \t2 gadget <identifiersep> defs . put ( in <identifiersep> gadget <identifiersep> definition <identifiersep> url , in <identifiersep> gadget <identifiersep> definition ) ; \n <ect>
<comment> \n \t1 private long <identifier> ( string <identifier> , string key , long inc , integer hash <identifiersep> code ) { \n \t2 if ( key == null ) { \n <ect>
\t4 logger . debug ( <string_literal> , query . get <identifiersep> condition ( ) , response . get <identifiersep> elapsed <identifiersep> time ( ) ) ; \n \t3 int total <identifiersep> hits = response . get <identifiersep> results ( ) . size ( ) ; \n \t3 if ( ! query . has <identifiersep> limit ( ) && total <identifiersep> hits >= max <identifiersep> results ) \n <ect>
\t4 data <identifiersep> record rec = backend . get <identifiersep> record ( data <identifiersep> identifier ) ; \n \t4 return new file <identifiersep> cache <identifiersep> data <identifiersep> record ( this , backend , data <identifiersep> identifier , rec . get <identifiersep> length ( ) , \n \t5 rec . get <identifiersep> last <identifiersep> modified ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 if ( ! connection . is <identifiersep> connected ( ) ) { \n \t3 throw new runtime <identifiersep> camel <identifiersep> exception ( <string_literal> + connection . get <identifiersep> host ( ) ) ; } \n \t2 if ( msg != null ) { \n \t3 if ( is <identifiersep> message <identifiersep> a <identifiersep> command ( msg ) ) { \n <ect>
\t2 <identifier> <identifiersep> metrics . start <identifiersep> operation ( <identifier> <identifiersep> action . delete <identifiersep> volume , volume <identifiersep> id , start <identifiersep> time ) ; \n \t2 found <identifiersep> volume . set <identifiersep> status ( storage <identifiersep> properties . status . deleting . to <identifiersep> string ( ) ) ; \n \t1 } else if ( status . equals ( storage <identifiersep> properties . status . deleting . to <identifiersep> string ( ) ) || status . equals ( storage <identifiersep> properties . status . deleted . to <identifiersep> string ( ) ) \n \t2 || status . equals ( storage <identifiersep> properties . status . failed . to <identifiersep> string ( ) ) ) { \n <ect>
\t2 final boolean fail = authentication . get <identifiersep> failures ( ) . values ( ) \n \t3 . stream ( ) \n \t3 . any <identifiersep> match ( failure - > failure . get <identifiersep> class ( ) . is <identifiersep> assignable <identifiersep> from ( <identifier> <identifiersep> exception . class ) ) ; \n \t2 if ( fail ) { \n <ect>
\t2 user <identifiersep> vm result ; \n \t2 try { \n \t3 result = <identifier> <identifiersep> user <identifiersep> vm <identifiersep> service . upgrade <identifiersep> virtual <identifiersep> machine ( this ) ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t2 try { \n \t3 convert <identifiersep> sub <identifiersep> tree ( sub <identifiersep> tree ) ; \n \t2 } catch ( exception err ) { \n <ect>
\t1 try { \n \t1 result <identifiersep> set . before <identifiersep> first ( ) ; \n \t1 sender ( ) . tell ( new cursor <identifiersep> reset ( ) , self ( ) ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 @ override \n \t3 public void on <identifiersep> message ( message message ) { \n \t4 try { \n \t5 if ( message instanceof text <identifiersep> message ) { \n <ect>
\t4 boolean success = ses . unregister <identifiersep> resource ( rsrc <identifiersep> id , res ) ; \n \t4 assert success : <string_literal> + ggfs . name ( ) + <string_literal> + rsrc <identifiersep> id + \n \t5 <string_literal> + res + ' ] ' ; \n <ect>
\t4 return new execute <identifiersep> result ( execute <identifiersep> result . state . <identifier> , output . to <identifiersep> string ( ) ) ; \n \t3 } else { \n \t4 return new execute <identifiersep> result ( execute <identifiersep> result . state . stopped , output . to <identifiersep> string ( ) ) ; } \n \t2 } catch ( reflective <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t4 <identifier> , html <identifiersep> filter . filter ( message . to <identifiersep> string ( ) ) ) ; \n \t2 broadcast ( filtered <identifiersep> message ) ; } \n \t1 @ on <identifiersep> error \n \t1 public void on <identifiersep> error ( throwable t ) throws throwable { \n <ect>
\t4 widget <identifiersep> dialog instanceof cms <identifiersep> dialog ? ( ( cms <identifiersep> dialog ) widget <identifiersep> dialog ) . get <identifiersep> param <identifiersep> resource ( ) : null , \n \t4 widget <identifiersep> dialog . get <identifiersep> messages ( ) , \n \t4 param ) ; \n \t2 } catch ( json <identifiersep> exception e ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t4 config . get ( <identifier> <identifiersep> clustering <identifiersep> settings . transaction <identifiersep> <identifier> <identifiersep> address ) , \n \t4 config . get ( <identifier> <identifiersep> clustering <identifiersep> settings . <identifier> <identifiersep> listen <identifiersep> address ) , \n \t4 config . get ( <identifier> <identifiersep> clustering <identifiersep> settings . <identifier> <identifiersep> <identifier> <identifiersep> address ) , \n \t4 client <identifiersep> connector <identifiersep> addresses . extract <identifiersep> from <identifiersep> config ( config ) ) ; \n <ect>
\t5 int cnt = 0 ; \n \t5 int pub <identifiersep> cnt = 0 ; \n \t5 while ( e != null ) { \n \t6 cnt ++ ; \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \t4 logger . debug ( <string_literal> + min <identifiersep> time <identifiersep> scale <identifiersep> factor ) ; \n \t4 logger . debug ( <string_literal> + max <identifiersep> time <identifiersep> scale <identifiersep> factor ) ; \n \t4 logger . debug ( <string_literal> + min <identifiersep> <identifier> <identifiersep> scale <identifiersep> factor ) ; \n <ect>
\t2 } ) ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> <identifier> <identifiersep> count ( ) ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> dispatch <identifiersep> count ( ) ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> enqueue <identifiersep> count ( ) ) ; \n <ect>
\t2 try { \n \t3 if ( decoded <identifiersep> data . length ( ) > 0 ) { \n \t4 node <identifiersep> root = new json <identifiersep> object ( decoded <identifiersep> data ) ; \n \t3 } else { \n <ect>
\t1 <identifier> . lock ( ) ; \n \t1 try { \n \t1 if ( <identifier> <identifiersep> pointer == 0 ) { \n \t2 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n <ect>
<comment> \n \t1 public static connection <identifiersep> config new <identifiersep> ldaptive <identifiersep> connection <identifiersep> config ( final abstract <identifiersep> ldap <identifiersep> properties l ) { \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( l . get <identifiersep> ldap <identifiersep> url ( ) ) ) { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t2 try { \n \t3 prepared <identifiersep> statement stmt = txn . prepare <identifiersep> auto <identifiersep> close <identifiersep> statement ( insert <identifiersep> sql ) ; \n \t3 stmt . execute <identifiersep> update ( ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t4 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t4 t obj = ( t ) <identifier> <identifiersep> response . create <identifiersep> unmarshaller ( ) . unmarshal ( io <identifiersep> utils . to <identifiersep> input <identifiersep> stream ( result ) ) ; \n \t4 return obj ; } \n \t2 } catch ( jaxb <identifiersep> exception e ) { \n <ect>
\t2 <string_literal> + release . get <identifiersep> version , \n \t2 <string_literal> + release . get <identifiersep> <identifier> <identifiersep> asset . get <identifiersep> id , \n \t2 <string_literal> + bundle <identifiersep> path . get <identifiersep> absolute <identifiersep> path , \n \t2 <string_literal> + extraction <identifiersep> folder + <string_literal> + release . get <identifiersep> version + <string_literal> ) \n <ect>
\t5 publisher . publish ( data ) ; \n \t4 } else { \n \t5 log . warn ( <string_literal> ) ; } \n \t3 } catch ( exception ex ) { \n <ect>
\t1 timeline <identifiersep> metrics . set <identifiersep> metrics ( metric <identifiersep> list ) ; \n \t1 try { \n \t2 emit <identifiersep> metrics ( timeline <identifiersep> metrics ) ; \n \t1 } catch ( unable <identifiersep> to <identifiersep> connect <identifiersep> exception <identifier> ) { \n <ect>
\t4 boolean success = remove <identifiersep> entry ( <identifier> , key ) != null ; \n \t4 if ( success ) \n \t5 <identifier> <identifiersep> log . error ( <string_literal> <string_literal> \\ <string_literal> + list ) ; \n \t4 else \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t4 logger . warn ( <string_literal> + old <identifiersep> uri . get <identifiersep> path ( ) ) ; \n \t4 logger . warn ( <string_literal> + new <identifiersep> uri ) ; \n \t4 method . set <identifiersep> uri ( new <identifiersep> uri ) ; } \n \t3 catch ( unsupported <identifiersep> encoding <identifiersep> exception uee ) { \n <ect>
\t3 for ( module module : modules ) { \n \t4 if ( module . has ( type ) ) { \n \t5 <identifier> = module . get <identifiersep> provider <identifiersep> info ( type ) ; \n \t5 break ; } } \n <ect>
\t2 try { \n \t3 init <identifiersep> <identifier> ( ) ; \n \t3 index = new int [ info . channels ] ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 ftp <identifiersep> files . add ( ftp <identifiersep> file ) ; } \n \t3 tx . success ( ) ; \n \t3 return ftp <identifiersep> files ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t1 try : \n \t1 if config . has <identifiersep> option ( user <identifiersep> section , user <identifiersep> key ) : \n \t2 property <identifiersep> map [ user <identifiersep> section ] = config . get ( user <identifiersep> section , user <identifiersep> key ) . split ( ' , ' ) \n \t1 except : \n <ect>
\t1 <comment> \n \t1 boolean is <identifiersep> array = data . get <identifiersep> class ( ) . is <identifiersep> array ( ) ; \n \t1 if ( ! is <identifiersep> array && ! ( data instanceof list ) ) { \n \t1 if ( ! warned ) { \n <ect>
\t3 string results = sw . to <identifiersep> string ( ) ; \n \t3 if ( ! results . equals ( <string_literal> ) ) { \n \t4 write <identifiersep> rdf ( tuple , results ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 return mini <identifiersep> accumulo <identifiersep> cluster . class . cast ( cluster <identifiersep> impl ) ; \n \t1 } catch ( exception e ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t3 if ( this . secret <identifiersep> key <identifiersep> encryption <identifiersep> key == null ) { \n \t4 logger . debug ( <string_literal> ) ; \n \t4 this . secret <identifiersep> key <identifiersep> encryption <identifiersep> key = encoding <identifiersep> utils . generate <identifiersep> json <identifiersep> web <identifiersep> key ( secret <identifiersep> key <identifiersep> to <identifiersep> use ) ; } \n \t3 this . content <identifiersep> encryption <identifiersep> algorithm <identifiersep> identifier = content <identifiersep> encryption <identifiersep> algorithm <identifiersep> identifier ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t4 <identifier> <identifiersep> log . warn ( <string_literal> + rc ) ; } } \n \t1 public void unregister ( checker updater , update <identifiersep> type type , update <identifiersep> method method ) { \n \t2 registered <identifiersep> checker rc = new registered <identifiersep> checker ( updater , type , method , 0 ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 final string ticket <identifiersep> id = encode <identifiersep> ticket <identifiersep> id ( ticket <identifiersep> id <identifiersep> to <identifiersep> delete ) ; \n \t2 try { \n \t3 client <identifiersep> from <identifiersep> pool . delete ( ticket <identifiersep> id ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , <string_literal> , \n \t4 concurrent <identifiersep> consumers <identifiersep> config . get <identifiersep> name ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , int . class , \n \t4 concurrent <identifiersep> consumers <identifiersep> config . get <identifiersep> parameter <identifiersep> type ( ) ) ; \n <ect>
\t4 for ( transaction <identifiersep> context ctx : l ) { \n \t5 try { \n \t6 ctx . after <identifiersep> commit ( ) ; \n \t5 } catch ( exception ignored ) { \n <ect>
\t3 actor <identifiersep> ref resource <identifiersep> master = actor <identifiersep> system . actor <identifiersep> of ( resource <identifiersep> master <identifiersep> props ) ; \n \t3 <comment> \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 public void run ( ) { \n \t3 try { \n \t4 global <identifiersep> lock lock = global <identifiersep> lock . get <identifiersep> <identifier> <identifiersep> lock ( <string_literal> ) ; \n \t4 if ( lock == null ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 final resource resource = resource <identifiersep> utils . get <identifiersep> resource <identifiersep> from ( this . groovy <identifiersep> script ) ; \n \t3 return <identifier> <identifiersep> utils . execute <identifiersep> groovy <identifiersep> script ( resource , args , map . class ) ; \n \t2 } catch ( final exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } \n <ect>
\t3 thread <identifiersep> factory . new <identifiersep> thread ( ( ) - > { \n \t4 try { \n \t5 producer . run ( ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 logger . error ( <string_literal> + formatter . format ( buffer . length ) + <string_literal> ) ; \n \t4 logger . error ( <string_literal> + mb ) ; \n \t4 logger . error ( <string_literal> + formatter . format ( buf . length ) + <string_literal> ) ; \n \t4 logger . error ( <string_literal> + off ) ; \n <ect>
\t4 result = this . get <identifiersep> protected <identifiersep> plugin ( ) . rename <identifiersep> tag ( tag , new <identifiersep> tag , this . context ) ; \n \t3 } else { \n \t4 result = tag <identifiersep> operation <identifiersep> result . not <identifiersep> allowed ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t3 thread . current <identifiersep> thread ( ) . set <identifiersep> context <identifiersep> class <identifiersep> loader ( lucene <identifiersep> index <identifiersep> editor <identifiersep> context . class . get <identifiersep> class <identifiersep> loader ( ) ) ; \n \t3 log . info ( <string_literal> , config <identifiersep> holder ) ; \n \t3 return new auto <identifiersep> detect <identifiersep> parser ( config <identifiersep> holder . config ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } else if ( response . get <identifiersep> type ( ) . index <identifiersep> of ( <string_literal> ) != - 1 ) { <comment> \n \t3 this . json <identifiersep> response = response . get <identifiersep> stream ( ) ; \n \t3 json <identifiersep> manager . get <identifiersep> json <identifiersep> flat ( response . get <identifiersep> stream ( ) , columns , results . get <identifiersep> values ( ) ) ; \n \t2 } else { \n <ect>
\t3 api <identifiersep> context api <identifiersep> context = new api <identifiersep> context ( client <identifiersep> id , client <identifiersep> secret , mode ) ; \n \t3 <comment> \n \t3 <comment> \n \t3 <identifier> <identifier> = <identifier> . get ( api <identifiersep> context , <string_literal> ) ; \n <ect>
\t1 object <identifiersep> info . set <identifiersep> meta <identifiersep> data ( manifest . clone <identifiersep> meta <identifiersep> data ( ) ) ; \n \t1 object <identifiersep> info . set <identifiersep> object <identifiersep> name ( null ) ; <comment> \n \t1 tr . commit ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t8 ctx . <identifier> ( ) . <identifier> ( entry , top <identifiersep> ver ) ; \n \t7 break ; } \n \t6 catch ( grid <identifiersep> cache <identifiersep> entry <identifiersep> removed <identifiersep> exception ignore ) { \n <ect>
\t3 final appender appender = this . config . get <identifiersep> appender ( ref <identifiersep> name ) ; \n \t3 if ( appender != null ) { \n \t4 appender . append ( new <identifiersep> log <identifiersep> event ) ; \n \t3 } else { \n <ect>
\t2 for ( int i = 0 ; i < sub <identifiersep> table <identifiersep> count ; i ++ ) { \n \t3 int sub <identifiersep> table <identifiersep> offset = rf . read <identifiersep> short ( ) ; \n \t3 sub <identifiersep> table <identifiersep> offsets . add ( sub <identifiersep> table <identifiersep> offset ) ; } \n \t2 for ( int sub <identifiersep> table <identifiersep> offset : sub <identifiersep> table <identifiersep> offsets ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t1 * { @ <identifier> <identifiersep> doc } \n \t1 ** / \n \t1 @ override \n \t1 public void close ( ) { \n <ect>
\t2 <comment> \n \t2 for ( path path = dir ; path != null ; path = file <identifiersep> tree <identifiersep> <identifier> <identifiersep> supported ? path . get <identifiersep> parent ( ) : null ) { \n \t3 watch <identifiersep> key previous <identifiersep> watch <identifiersep> key = watch <identifiersep> keys . get ( path ) ; \n \t3 if ( previous <identifiersep> watch <identifiersep> key != null && previous <identifiersep> watch <identifiersep> key . is <identifiersep> valid ( ) ) { \n <ect>
\t7 . invoke ( logger , ( object [ ] ) null ) ; \n \t5 <identifier> . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> , string . class ) \n \t7 . invoke ( <identifier> , logger <identifiersep> name ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t1 @ test \n \t1 public void gc <identifiersep> check <identifiersep> deleted <identifiersep> size ( ) throws exception { \n \t2 log . info ( <string_literal> ) ; \n \t2 blob <identifiersep> store <identifiersep> state state = set <identifiersep> up ( <number_literal> , <number_literal> , <number_literal> ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t3 if ( ! exec <identifiersep> plan . is <identifiersep> empty ( ) ) { \n \t4 <identifier> = exec <identifiersep> plan . get <identifiersep> <identifier> ( ) ; \n \t4 <comment> \n \t4 leaf = <identifier> . get ( 0 ) ; } \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 mdc . put ( <string_literal> , string . value <identifiersep> of ( number ) ) ; \n <ect>
\t2 if ( channel != null ) { \n \t3 try { \n \t4 channel . close ( ) ; \n \t3 } catch ( io <identifiersep> exception <identifier> ) { \n <ect>
\t4 <comment> \n \t4 http <identifiersep> method http <identifiersep> method = request . get <identifiersep> method ( ) ; \n \t4 if ( http <identifiersep> method . equals ( http <identifiersep> method . get ) ) { \n <ect>
\t2 tablet <identifiersep> location <identifiersep> state tls = null ; \n \t2 try { \n \t2 tls = new tablet <identifiersep> location <identifiersep> state ( extent , null , instance , null , null , null , false ) ; \n \t2 } catch ( bad <identifiersep> location <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t2 final consent <identifiersep> properties consent = cas <identifiersep> properties . get <identifiersep> consent ( ) ; \n \t2 final encryption <identifiersep> jwt <identifiersep> signing <identifiersep> jwt <identifiersep> <identifier> <identifiersep> properties crypto = consent . get <identifiersep> crypto ( ) ; \n \t2 if ( crypto . is <identifiersep> enabled ( ) ) { \n \t3 return new attribute <identifiersep> release <identifiersep> consent <identifiersep> cipher <identifiersep> executor ( crypto . get <identifiersep> encryption ( ) . get <identifiersep> key ( ) , crypto . get <identifiersep> signing ( ) . get <identifiersep> key ( ) , crypto . get <identifiersep> alg ( ) ) ; } \n <ect>
\t1 if ( null != this . cache <identifiersep> manager ) { \n \t1 try { \n \t2 this . cache <identifiersep> manager . stop ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t2 protected message <identifiersep> digest initial <identifiersep> value ( ) { \n \t3 try { \n \t4 return message <identifiersep> digest . get <identifiersep> instance ( <string_literal> ) ; } \n \t3 catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t5 cpu <identifiersep> core <identifiersep> cap . set <identifiersep> used <identifiersep> capacity ( used <identifiersep> cpu <identifiersep> core ) ; } } \n \t3 try { \n \t4 <identifier> <identifiersep> capacity <identifiersep> dao . update ( cpu <identifiersep> core <identifiersep> cap . get <identifiersep> id ( ) , cpu <identifiersep> core <identifiersep> cap ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 accumulo <identifiersep> ser <identifiersep> de <identifiersep> parameters . get <identifiersep> ser <identifiersep> de <identifiersep> parameters ( ) , accumulo <identifiersep> ser <identifiersep> de <identifiersep> parameters . get <identifiersep> column <identifiersep> mappings ( ) , \n \t2 accumulo <identifiersep> ser <identifiersep> de <identifiersep> parameters . get <identifiersep> table <identifiersep> visibility <identifiersep> label ( ) , \n \t2 accumulo <identifiersep> ser <identifiersep> de <identifiersep> parameters . get <identifiersep> row <identifiersep> id <identifiersep> factory ( ) ) ; \n <ect>
\t2 return current <identifiersep> watch <identifiersep> points ; } \n \t1 protected void watch <identifiersep> dir ( path dir ) throws io <identifiersep> exception { \n \t2 log . debug ( <string_literal> , dir ) ; \n \t2 if ( thread . current <identifiersep> thread ( ) . is <identifiersep> interrupted ( ) ) { \n <ect>
\t6 continue ; } \n \t5 try { \n \t6 write <identifiersep> method . invoke ( answer , value ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n <ect>
\t1 } catch ( solr <identifiersep> exception | solr <identifiersep> server <identifiersep> exception | io <identifiersep> exception e ) { \n \t2 log . error ( <string_literal> + solr <identifiersep> client . get <identifiersep> default <identifiersep> collection ( ) , e ) ; } \n \t1 if ( schema <identifiersep> response != null ) { \n \t2 extract <identifiersep> schema <identifiersep> fields <identifiersep> name ( <identifier> <identifiersep> responses , schema <identifiersep> response , schema <identifiersep> field <identifiersep> name <identifiersep> map , schema <identifiersep> field <identifiersep> type <identifiersep> map ) ; \n <ect>
\t1 llap <identifiersep> app <identifiersep> status <identifiersep> cmd <identifiersep> timeout = 0 \n \t1 llap <identifiersep> status <identifiersep> cmd = format ( <string_literal> ) \n \t1 code , output , error = shell . checked <identifiersep> call ( llap <identifiersep> status <identifiersep> cmd , user = status <identifiersep> params . hive <identifiersep> user , stderr = <identifier> . pipe , \n <number_literal> <identifier> = false ) \n <ect>
\t4 usage <identifiersep> event <identifiersep> utils . publish <identifiersep> usage <identifiersep> event ( event <identifiersep> types . event <identifiersep> snapshot <identifiersep> create , snapshot . get <identifiersep> account <identifiersep> id ( ) , snapshot . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , snapshot <identifiersep> id , snapshot . get <identifiersep> name ( ) , \n \t5 null , null , volume . get <identifiersep> size ( ) , snapshot . get <identifiersep> class ( ) . get <identifiersep> name ( ) , snapshot . get <identifiersep> uuid ( ) ) ; } \n \t3 <identifier> <identifiersep> resource <identifiersep> limit <identifiersep> mgr . increment <identifiersep> resource <identifiersep> count ( snapshot <identifiersep> owner . get <identifiersep> id ( ) , resource <identifiersep> type . snapshot ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 remote <identifiersep> port = r <identifiersep> port ; \n \t6 <comment> <ect>
\t3 try { \n \t4 scanner = new scanner ( found <identifiersep> file ) ; \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 assert . fail ( <string_literal> + e . get <identifiersep> message ( ) + <string_literal> + found <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n <ect>
\t2 } catch ( zone <identifiersep> transfer <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> + this . secondary <identifiersep> zone . get <identifiersep> zone <identifiersep> name ( ) + <string_literal> + this . secondary <identifiersep> zone . get <identifiersep> remote <identifiersep> server <identifiersep> address ( ) + <string_literal> + e ) ; \n \t3 check <identifiersep> expired ( ) ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t2 string message = string . value <identifiersep> of ( cause . get <identifiersep> message ( ) ) ; \n \t2 if ( <identifier> <identifiersep> error <identifiersep> message . matcher ( message ) . matches ( ) ) { \n \t2 log . debug ( <string_literal> , cause ) ; \n \t2 return ; } } \n <ect>
\t1 log . info ( <string_literal> + log <identifiersep> file ) ; } \n \t1 log . info ( <string_literal> + sink <identifiersep> runner . get <identifiersep> count ( ) ) ; \n \t1 log . info ( <string_literal> + source <identifiersep> runner . get <identifiersep> count ( ) ) ; \n \t1 for ( exception ex : source <identifiersep> runner . get <identifiersep> errors ( ) ) { \n <ect>
\t4 class < ? > console <identifiersep> proxy <identifiersep> clazz = loader . load <identifiersep> class ( <string_literal> ) ; \n \t4 method method <identifiersep> setup = console <identifiersep> proxy <identifiersep> clazz . get <identifiersep> method ( <string_literal> , string . class ) ; \n \t4 method <identifiersep> setup . invoke ( null , <identifier> <identifiersep> password ) ; \n \t3 } catch ( security <identifiersep> exception e ) { \n <ect>
\t4 if ( stdout <identifiersep> consumer != null ) { \n \t5 stdout <identifiersep> consumer . join ( <number_literal> ) ; } \n \t3 } catch ( interrupted <identifiersep> exception e ) { } \n \t2 } catch ( exception e ) { \n <ect>
\t6 <identifier> = true ; \n \t6 logger . debug ( <string_literal> + <identifier> . get <identifiersep> name ( ) ) ; \n \t5 } else if ( line . length ( ) > 0 && line . equals ( <string_literal> ) ) { \n \t6 <identifier> = true ; \n <ect>
\t5 || option . equals ( <string_literal> ) \n \t5 || option . equals ( <string_literal> ) \n \t3 ) { \n \t4 if ( ! has <identifiersep> more <identifiersep> options ( ) ) { \n <ect>
\t3 public listenable <identifiersep> future < ? extends drive <identifiersep> info > apply ( string input ) { \n \t4 try { \n \t5 return futures . immediate <identifiersep> future ( cache . get <identifiersep> unchecked ( input ) ) ; \n \t4 } catch ( cache <identifiersep> loader . invalid <identifiersep> cache <identifiersep> load <identifiersep> exception e ) { \n <ect>
\t6 if ( read > 0 ) { \n \t7 try { \n \t8 this . out . write ( buf , 0 , read ) ; \n \t7 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 l <identifiersep> router <identifiersep> port = nicira <identifiersep> nvp <identifiersep> api . create <identifiersep> logical <identifiersep> router <identifiersep> port ( logical <identifiersep> router <identifiersep> uuid , l <identifiersep> router <identifiersep> port ) ; } \n \t2 catch ( nicira <identifiersep> nvp <identifiersep> api <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + logical <identifiersep> router <identifiersep> uuid + <string_literal> + e . get <identifiersep> message ( ) + <string_literal> ) ; \n \t3 return handle <identifiersep> exception ( e , command , nicira <identifiersep> nvp <identifiersep> resource ) ; } \n <ect>
\t2 } catch ( exception e ) { \n \t3 <comment> \n \t3 string buffer = output <identifiersep> buffer . to <identifiersep> string ( ) \n \t3 if ( buffer . is <identifiersep> empty ( ) == false ) { \n <ect>
\t2 log . debug ( string . format ( <string_literal> + account <identifiersep> id + <string_literal> ) ) ; \n \t1 } else { \n \t2 log . warn ( <string_literal> + account <identifiersep> id ) ; } \n \t1 } catch ( final unsupported <identifiersep> encoding <identifiersep> exception ex ) { \n <ect>
\t4 if ( auth <identifiersep> scheme != null ) { \n \t5 final string id = auth <identifiersep> scheme . get <identifiersep> name ( ) ; \n \t5 final auth <identifiersep> challenge challenge = challenge <identifiersep> map . get ( id . to <identifiersep> lower <identifiersep> case ( locale . root ) ) ; \n \t5 if ( challenge != null ) { \n <ect>
\t2 sheet sheet ; \n \t2 row row ; \n \t2 int last <identifiersep> row <identifiersep> num ; \n \t2 this . csv <identifiersep> data = new array <identifiersep> list < > ( ) ; \n <ect>
\t4 if ( distance > geo <identifiersep> fence ) { \n \t5 logger . debug ( <string_literal> , item <identifiersep> config . get <identifiersep> item <identifiersep> name ( ) , distance ) ; \n \t5 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> config . get <identifiersep> item <identifiersep> name ( ) , on <identifiersep> off <identifiersep> type . off ) ; \n \t4 } else { \n <ect>
\t3 } ) ; } \n \t1 <comment> \n \t1 @ override public boolean on <identifiersep> owner <identifiersep> changed ( grid <identifiersep> cache <identifiersep> entry <identifiersep> ex < k , v > entry , grid <identifiersep> cache <identifiersep> <identifier> <identifiersep> candidate < k > owner ) { \n <ect>
\t3 { \n \t4 presence <identifiersep> op <identifiersep> set . publish <identifiersep> presence <identifiersep> status ( current <identifiersep> status , message ) ; } \n \t3 catch ( illegal <identifiersep> argument <identifiersep> exception e1 ) \n \t3 { \n <ect>
\t3 log . debug ( <string_literal> + endpoint ) ; \n \t2 sock . connect ( endpoint ) ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
public class history <identifiersep> handler extends command <identifiersep> handler { \n public history <identifiersep> handler ( ) { \n \t1 super ( <string_literal> , <string_literal> , range <identifiersep> forbidden | argument <identifiersep> optional ) ; } \n public boolean execute ( @ not <identifiersep> null editor editor , @ not <identifiersep> null final data <identifiersep> context context , @ not <identifiersep> null ex <identifiersep> command cmd ) throws ex <identifiersep> exception { \n <ect>
\t5 if ( ! session . is <identifiersep> closed ( ) ) { \n \t6 session . close ( ) ; } \n \t4 } catch ( jms <identifiersep> exception ignored ) { \n <ect>
<comment> \n \t1 public void deactivate ( ) { \n \t2 the <identifiersep> manager . stop <identifiersep> all <identifiersep> media <identifiersep> handlers ( ) ; \n <ect>
\t2 } catch ( final libvirt <identifiersep> exception e ) { \n \t3 if ( attach ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + vm <identifiersep> name + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 } else { \n <ect>
\t2 element e <identifiersep> job = xml <identifiersep> utils . parse <identifiersep> xml ( job <identifiersep> xml ) ; \n \t2 date actual <identifiersep> time = new date ( ) ; \n \t2 string action <identifiersep> xml = coord <identifiersep> command <identifiersep> utils . <identifier> <identifiersep> one <identifiersep> instance ( job <identifiersep> id , <identifier> , ( element ) e <identifiersep> job . clone ( ) , coord <identifiersep> action \n \t4 . get <identifiersep> <identifier> <identifiersep> time ( ) , actual <identifiersep> time , coord <identifiersep> action . get <identifiersep> action <identifiersep> number ( ) , job <identifiersep> conf , coord <identifiersep> action ) ; \n <ect>
\t3 catch ( throwable ex ) \n \t3 { \n \t4 if ( ae <identifiersep> config . instance ( ) . is <identifiersep> remove <identifiersep> <identifier> <identifiersep> items <identifiersep> on <identifiersep> load ( ) ) \n \t4 { \n <ect>
\t5 if ( handler != null ) { \n \t6 try { \n \t7 handler . on <identifiersep> response ( this , new response ( ) ) ; \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t2 public void run ( ) { \n \t3 string local <identifiersep> address = client <identifiersep> socket . get <identifiersep> local <identifiersep> address ( ) . to <identifiersep> string ( ) ; \n \t3 string remote <identifiersep> address = client <identifiersep> socket . get <identifiersep> remote <identifiersep> socket <identifiersep> address ( ) . to <identifiersep> string ( ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 out = store . update <identifiersep> blob ( <string_literal> ) ; \n \t2 out . write ( <number_literal> ) ; \n \t2 out . flush ( ) ; \n <ect>
\t4 result = result && routes <identifiersep> rules . accept ( <identifier> <identifiersep> advanced <identifiersep> visitor , router ) ; \n \t3 } else if ( router . get <identifiersep> state ( ) == state . stopped || router . get <identifiersep> state ( ) == state . stopping ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + router . get <identifiersep> instance <identifiersep> name ( ) + <string_literal> + router . get <identifiersep> state ( ) + <string_literal> ) ; \n \t3 } else { \n <ect>
\t5 . post ( entity . entity ( big <identifiersep> jaxb <identifiersep> element , <string_literal> ) ) ; \n \t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n \t3 int len = math . min ( entity . length ( ) , <number_literal> ) ; \n <ect>
<comment> \n \t1 public <identifier> <identifiersep> ssl <identifiersep> manager ( provider provider ) { \n <ect>
\t1 public void start <identifiersep> replay ( final uuid game <identifiersep> id , final string session <identifiersep> id ) throws mage <identifiersep> exception { \n \t2 execute ( <string_literal> , session <identifiersep> id , ( ) - > { \n \t3 optional < session > session = session <identifiersep> manager . instance . get <identifiersep> session ( session <identifiersep> id ) ; \n \t3 if ( ! session . is <identifiersep> present ( ) ) { \n <ect>
\t3 logger . error ( this , <string_literal> + e , e ) ; \n \t3 file <identifiersep> util . copy ( is , new null <identifiersep> output <identifiersep> stream ( ) , len ) ; \n \t3 throw new message <identifiersep> invalid <identifiersep> exception ( protocol <identifiersep> error <identifiersep> message . internal <identifiersep> error , e . to <identifiersep> string ( ) , get <identifiersep> identifier ( ) , is <identifiersep> global ( ) ) ; \n \t2 } catch ( persistence <identifiersep> disabled <identifiersep> exception e ) { \n <ect>
\t1 public map stats <identifiersep> cache <identifiersep> dump ( string [ ] servers , int <identifier> <identifiersep> number , int limit ) { \n \t2 return stats ( servers , string . format ( <string_literal> , <identifier> <identifiersep> number , limit ) , item ) ; } \n \t1 private map stats ( string [ ] servers , string command , string line <identifiersep> start ) { \n \t2 if ( command == null || command . trim ( ) . equals ( <string_literal> ) ) { \n <ect>
\t3 return grid <identifiersep> compute <identifiersep> job <identifiersep> result <identifiersep> policy . failover ; } \n \t2 <comment> \n \t2 @ override public integer reduce ( list < grid <identifiersep> compute <identifiersep> job <identifiersep> result > results ) { \n <ect>
\t2 unhandled . add ( exception ) ; } } \n \t1 <comment> \n \t1 <comment> \n \t1 <comment> \n <ect>
\t3 try ( set <identifiersep> thread <identifiersep> name ignored = new set <identifiersep> thread <identifiersep> name ( <string_literal> , \n \t5 system . identity <identifiersep> hash <identifiersep> code ( distributed <identifiersep> scheduler . this ) , executable . get <identifiersep> id ( ) ) ) { \n \t4 string segment <identifiersep> id = executable . get <identifiersep> param ( segment <identifiersep> id ) ; \n \t4 if ( job <identifiersep> lock . lock ( get <identifiersep> lock <identifiersep> path ( segment <identifiersep> id ) ) ) { \n <ect>
\t7 ( 1 - byte <identifiersep> capacity <identifiersep> buffer <identifiersep> percentage * . 01 ) ) / avg <identifiersep> event <identifiersep> size ) ; \n \t1 if ( byte <identifiersep> capacity < 1 ) { \n \t2 byte <identifiersep> capacity = integer . max <identifiersep> value ; } \n \t1 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public void enable <identifiersep> parameter <identifiersep> <identifier> ( ) { \n \t2 if ( m <identifiersep> <identifier> == null ) { \n <ect>
\t2 try { \n \t3 if ( <identifier> <identifiersep> conn != null ) { \n \t4 <identifier> <identifiersep> conn . rollback ( sp ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 public void correct <identifiersep> null <identifiersep> receiver ( ) { \n \t3 if ( args [ 0 ] != null ) return ; \n \t3 handle = handle . bind <identifiersep> to ( null <identifiersep> object . get <identifiersep> null <identifiersep> object ( ) ) ; \n \t3 handle = method <identifiersep> handles . drop <identifiersep> arguments ( handle , 0 , target <identifiersep> type . parameter <identifiersep> type ( 0 ) ) ; \n <ect>
\t3 created = null ; \n \t3 long pod <identifiersep> id = pod . get <identifiersep> id ( ) ; \n \t3 pod = <identifier> <identifiersep> pod <identifiersep> dao . find <identifiersep> by <identifiersep> id ( pod <identifiersep> id ) ; \n \t3 if ( pod == null ) { \n <ect>
\t2 logger . debug ( <string_literal> + result ) ; \n \t2 return result ; } \n \t1 public void start <identifiersep> visit ( ) \n \t1 { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t2 final string script <identifiersep> file = <string_literal> ; \n \t2 final input <identifiersep> stream script = thread . current <identifiersep> thread ( ) . get <identifiersep> context <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( script <identifiersep> file ) ; \n \t2 if ( script == null ) { \n <ect>
\t2 base <identifiersep> name \n \t1 ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n \t1 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n <ect>
\t3 shutdown <identifiersep> tablet <identifiersep> server <identifiersep> result result = new shutdown <identifiersep> tablet <identifiersep> server <identifiersep> result ( ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t3 if ( result . get <identifiersep> error ( ) != null ) { \n \t4 logger . error ( result . get <identifiersep> error ( ) ) ; \n \t4 continue ; } \n \t3 if ( <identifier> == null ) { \n <ect>
\t2 log . debug ( <string_literal> + metric . metrics <identifiersep> name + <string_literal> + curr <identifiersep> count + <string_literal> + \n \t3 metric . prev <identifiersep> publish <identifiersep> value ) ; \n \t2 continue ; } \n \t1 metric . publish <identifiersep> count ++ ; \n <ect>
\t4 storage <identifiersep> v <identifiersep> os = <identifier> <identifiersep> usage <identifiersep> storage <identifiersep> dao . list <identifiersep> by <identifiersep> id <identifiersep> and <identifiersep> zone ( event . get <identifiersep> account <identifiersep> id ( ) , template <identifiersep> id , storage <identifiersep> types . template , zone <identifiersep> id ) ; \n \t3 } else { \n \t4 storage <identifiersep> v <identifiersep> os = <identifier> <identifiersep> usage <identifiersep> storage <identifiersep> dao . list <identifiersep> by <identifiersep> id ( event . get <identifiersep> account <identifiersep> id ( ) , template <identifiersep> id , storage <identifiersep> types . template ) ; } \n \t3 if ( storage <identifiersep> v <identifiersep> os . size ( ) > 1 ) { \n <ect>
\t2 try { \n \t2 for ( final vfs . file file : vfs . from <identifiersep> url ( url ) . get <identifiersep> files ( ) ) { \n \t3 scan ( file ) ; } } \n \t2 catch ( <identifier> <identifiersep> exception e ) { \n <ect>
\t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + <identifier> . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + key <identifiersep> path ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 if ( <identifier> <identifiersep> xml <identifiersep> bin <identifiersep> file . exists ( ) ) { \n \t3 final boolean success = <identifier> <identifiersep> xml <identifiersep> bin <identifiersep> file . delete ( ) ; \n \t3 if ( ! success ) { \n <ect>
\t4 case none : \n \t4 default : \n \t5 do <identifiersep> validate = false ; } \n \t3 <comment> \n <ect>
\t6 else \n \t7 <identifier> . entry <identifiersep> added ( this , hostname , d , options ) ; } } \n \t4 return true ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 url [ ] jar <identifiersep> ur <identifiersep> ls = new url [ jars . size ( ) ] ; \n \t2 jars . to <identifiersep> array ( jar <identifiersep> ur <identifiersep> ls ) ; \n \t2 if ( update <identifiersep> label != null ) { \n \t3 update <identifiersep> label . set <identifiersep> text ( <string_literal> ) ; } \n <ect>
\t4 logger . debug ( <string_literal> , location ) ; \n \t4 return new json <identifiersep> resource <identifiersep> password <identifiersep> management <identifiersep> service ( password <identifiersep> management <identifiersep> cipher <identifiersep> executor ( ) , \n \t6 cas <identifiersep> properties . get <identifiersep> server ( ) . get <identifiersep> prefix ( ) , \n \t6 cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> pm ( ) , location ) ; } \n <ect>
\t3 assert . fail ( <string_literal> ) ; \n \t2 } catch ( voldemort <identifiersep> exception e ) { } \n \t2 <comment> \n \t2 try { \n <ect>
\t6 checkpoint <identifiersep> coordinator . fail <identifiersep> <identifier> <identifiersep> pending <identifiersep> checkpoints <identifiersep> for ( execution . get <identifiersep> attempt <identifiersep> id ( ) , ex ) ; } \n \t5 failover <identifiersep> strategy . on <identifiersep> task <identifiersep> failure ( execution , ex ) ; } \n \t4 catch ( throwable t ) { \n \t5 <comment> \n <ect>
\t4 try { \n \t5 get <identifiersep> cms ( ) . delete <identifiersep> property <identifiersep> definition ( prop <identifiersep> name ) ; \n \t5 runnable . run ( ) ; \n \t4 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t4 try { \n \t5 statement . evaluate ( ) ; \n \t5 break ; <comment> \n \t4 catch ( throwable t ) { \n <ect>
\t4 detected <identifiersep> ip [ ] detected = null ; \n \t4 try { \n \t5 detected = plugin . get <identifiersep> address ( ) ; \n \t4 } catch ( throwable t ) { \n <ect>
\t2 throw new invalid <identifiersep> column <identifiersep> mapping <identifiersep> exception ( \n \t3 <string_literal> ) ; } \n \t1 index = column <identifiersep> spec . index <identifiersep> of ( accumulo <identifiersep> hive <identifiersep> constants . <identifier> , index ) ; \n \t1 if ( - 1 == index ) { \n <ect>
\t6 list < be <identifiersep> value > error = map . get ( <string_literal> ) . get <identifiersep> list ( ) ; \n \t6 receive <identifiersep> error ( <identifier> , error ) ; } \n \t4 } else { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 storage <identifiersep> adaptor adaptor = get <identifiersep> storage <identifiersep> adaptor ( pool . get <identifiersep> type ( ) ) ; \n \t4 <comment> \n \t4 boolean sub <identifiersep> result = adaptor . disconnect <identifiersep> physical <identifiersep> disk ( vol . get <identifiersep> path ( ) , pool ) ; \n \t4 if ( ! sub <identifiersep> result ) { \n <ect>
\t3 logger . debug ( <string_literal> , credential . get <identifiersep> id ( ) ) ; \n \t3 final authentication authentication = authenticate <identifiersep> <identifier> <identifiersep> request ( credential , authentication <identifiersep> context ) ; \n \t3 logger . debug ( <string_literal> , \n \t4 credential . get <identifiersep> id ( ) , authentication . get <identifiersep> principal ( ) ) ; \n <ect>
\t2 try { \n \t3 class . for <identifiersep> name ( <string_literal> ) ; \n \t3 this . conn = driver <identifiersep> manager . get <identifiersep> connection ( <string_literal> + param . get ( <string_literal> ) + <string_literal> , <string_literal> , db <identifiersep> password ) ; \n \t3 if ( ! this . conn . is <identifiersep> valid ( 0 ) ) { \n <ect>
\t5 add ( parser <identifiersep> request <identifiersep> context . upload <identifiersep> size <identifiersep> limit <identifiersep> exceeded , boolean . true ) ; \n \t5 log . warn ( <string_literal> , e ) ; \n \t4 } catch ( upload <identifiersep> exception e ) { \n \t5 add ( parser <identifiersep> request <identifiersep> context . upload <identifiersep> failed , boolean . true ) ; \n <ect>
\t1 json <identifiersep> object result = new json <identifiersep> object ( ) ; \n \t1 result . put ( <string_literal> , all <identifiersep> jobs ) ; \n \t1 return response . ok ( result ) . build ( ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
\t5 } catch ( exception e ) { \n \t6 on <identifiersep> apply <identifiersep> error ( <string_literal> + source <identifiersep> name + <string_literal> + e + <string_literal> + entity , e ) ; } } } \n \t2 } else { \n \t3 if ( ! is <identifiersep> allow <identifiersep> create ( ) ) { \n <ect>
\t5 global <identifiersep> queue <identifiersep> semaphore . acquire ( ) ; \n \t5 store . acquire <identifiersep> local <identifiersep> async <identifiersep> lock ( ) ; \n \t5 message . increment <identifiersep> reference <identifiersep> count ( ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 key <identifiersep> batch ( results , key <identifiersep> load <identifiersep> list , true ) ; \n \t2 return ( map < string , versioned <identifiersep> entry < string , byte [ ] > > ) ( object ) results ; } \n \t1 @ override \n \t1 public list < version <identifiersep> key > load <identifiersep> all <identifiersep> version <identifiersep> info <identifiersep> by <identifiersep> keys ( collection < string > keys ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> , result , this . groovy <identifiersep> script ) ; \n \t4 return result . to <identifiersep> string ( ) ; } \n \t2 } catch ( final exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } \n <ect>
\t5 s <identifiersep> logger . debug ( string . format ( <string_literal> , source <identifiersep> ip . addr ( ) ) ) ; \n \t5 return <identifier> <identifiersep> internal <identifiersep> lb <identifiersep> mgr . destroy <identifiersep> internal <identifiersep> lb <identifiersep> vm ( vms . get ( 0 ) . get <identifiersep> id ( ) , <identifier> <identifiersep> account <identifiersep> mgr . get <identifiersep> account ( account . account <identifiersep> id <identifiersep> system ) , \n \t7 <identifier> <identifiersep> account <identifiersep> mgr . get <identifiersep> user <identifiersep> <identifier> <identifiersep> removed ( user . uid <identifiersep> system ) . get <identifiersep> id ( ) ) ; \n \t4 } catch ( concurrent <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t3 prefix = host <identifiersep> object . get <identifiersep> prefix ( ) ; \n \t3 if ( ! prefix . ends <identifiersep> with ( <string_literal> ) ) { \n \t4 prefix = prefix + <string_literal> ; } } \n \t2 } catch ( ambari <identifiersep> exception e ) { \n <ect>
\t2 } else { \n \t3 try { \n \t4 template = io <identifiersep> <identifier> . load <identifiersep> fully ( url ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 action <identifiersep> <identifier> . add ( ( action <identifiersep> mapper ) obj ) ; } } } \n \t1 public action <identifiersep> mapping get <identifiersep> mapping ( http <identifiersep> servlet <identifiersep> request request , configuration <identifiersep> manager config <identifiersep> manager ) { \n \t2 for ( action <identifiersep> mapper action <identifiersep> mapper : action <identifiersep> <identifier> ) { \n \t3 action <identifiersep> mapping action <identifiersep> mapping = action <identifiersep> mapper . get <identifiersep> mapping ( request , config <identifiersep> manager ) ; \n <ect>
\t4 listener . on <identifiersep> failure ( ex ) ; <comment> \n \t3 } catch ( connect <identifiersep> transport <identifiersep> exception | io <identifiersep> exception | illegal <identifiersep> state <identifiersep> exception ex ) { \n \t4 <comment> \n \t4 if ( seed <identifiersep> nodes . has <identifiersep> next ( ) ) { \n <ect>
\t2 if ( ! is <identifiersep> hypervisor <identifiersep> type <identifiersep> supported ) { \n \t3 string msg = <string_literal> + hypervisor <identifiersep> type + <string_literal> + url ; \n \t3 s <identifiersep> logger . warn ( msg ) ; \n \t3 throw new discovery <identifiersep> exception ( msg ) ; } \n <ect>
\t1 log . error ( <string_literal> + \n \t2 create <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; \n \t1 throw new hive <identifiersep> meta <identifiersep> exception ( e ) ; \n \t1 } catch ( hive <identifiersep> meta <identifiersep> exception e ) { \n <ect>
\t1 string response = proxy <identifiersep> helper . get <identifiersep> response ( url , new hash <identifiersep> map < string , string > ( ) , get <identifiersep> auth <identifiersep> type ( ) ) ; \n \t1 json <identifiersep> object json <identifiersep> object = ( json <identifiersep> object ) json <identifiersep> value . parse ( response ) ; \n \t1 if ( json <identifiersep> object == null ) { \n \t1 log . debug ( <string_literal> , url , response ) ; \n <ect>
\t2 break ; \n \t1 } catch ( exception e ) { \n \t2 if ( try <identifiersep> num >= num <identifiersep> retries <identifiersep> for <identifiersep> un <identifiersep> lock ) { \n \t2 string name = ( ( zoo <identifiersep> keeper <identifiersep> hive <identifiersep> lock ) hive <identifiersep> lock ) . get <identifiersep> path ( ) ; \n <ect>
\t2 configuration run <identifiersep> conf = null ; \n \t2 try { \n \t3 run <identifiersep> conf = new x <identifiersep> configuration ( new string <identifiersep> reader ( created <identifiersep> conf ) ) ; } \n \t2 catch ( io <identifiersep> exception e1 ) { \n <ect>
\t1 check <identifiersep> point . trigger ( <string_literal> + <string_literal> ) ; \n \t1 <comment> \n \t1 log . info ( <string_literal> ) ; \n \t1 add <identifiersep> cluster <identifiersep> enabled <identifiersep> cache <identifiersep> manager ( builder <identifiersep> used ) ; \n <ect>
\t4 <identifier> <identifiersep> log . debug ( get <identifiersep> job <identifiersep> id ( ) + <string_literal> ) ; \n \t3 return ; } \n \t2 if ( <identifier> <identifiersep> state . is <identifiersep> aborted ( ) ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 @ ignore ( <string_literal> ) \n \t1 @ test \n \t1 public void test <identifiersep> scheduler <identifiersep> pool ( ) throws interrupted <identifiersep> exception { \n <ect>
\t1 case session <identifiersep> log . off : \n \t2 <comment> \n \t2 return ; \n \t1 default : \n <ect>
\t4 delete . add ( path ) ; \n \t3 } else { \n \t4 resource <identifier> = a . get <identifiersep> resource ( path ) ; \n \t4 if ( is <identifiersep> equal ( <identifier> , br ) ) { \n <ect>
\t5 s <identifiersep> logger . info ( <string_literal> ) ; } \n \t4 try { \n \t5 scp <identifiersep> client scp = new scp <identifiersep> client ( conn ) ; \n \t5 scp . put ( <string_literal> , <string_literal> , <string_literal> , <string_literal> ) ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t1 public void initialize ( map < string , param > params ) throws tika <identifiersep> config <identifiersep> exception { \n \t2 try { \n \t3 if ( ! model <identifiersep> file . exists ( ) ) { \n \t4 model <identifiersep> file . get <identifiersep> parent <identifiersep> file ( ) . mkdirs ( ) ; \n <ect>
\t2 if ( con . get <identifiersep> hard <identifiersep> disconnected ( ) ) { \n \t3 if ( ( seq <identifiersep> num > 0 ) || ( packet . get <identifiersep> payload <identifiersep> size ( ) > 0 ) || \n \t4 ( packet . is <identifiersep> flag <identifiersep> set ( packet . flag <identifiersep> <identifier> | packet . flag <identifiersep> close ) ) ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
<comment> \n \t1 @ override \n \t1 public void refresh ( final boolean keep <identifiersep> changes ) throws repository <identifiersep> exception { \n \t2 if ( ! keep <identifiersep> changes ) { \n <ect>
\t1 if ( base <identifiersep> event <identifiersep> stmt != null ) { \n \t2 try { \n \t2 base <identifiersep> event <identifiersep> stmt . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t1 self . install <identifiersep> packages ( env ) \n @ os <identifiersep> family <identifiersep> impl ( os <identifiersep> family = os <identifiersep> family <identifiersep> impl . default ) \n class journal <identifiersep> node <identifiersep> default ( journal <identifiersep> node ) : \n def pre <identifiersep> upgrade <identifiersep> restart ( self , env , upgrade <identifiersep> type = none ) : \n <ect>
\t2 int write <identifiersep> register = get <identifiersep> start ( ) + write <identifiersep> index ; \n \t2 register new <identifiersep> value ; \n \t2 if ( command instanceof increase <identifiersep> decrease <identifiersep> type || command instanceof up <identifiersep> down <identifiersep> type ) { \n \t3 if ( ! <identifier> <identifiersep> <identifier> <identifiersep> state . is <identifiersep> present ( ) ) { \n <ect>
\t3 queue <identifiersep> callable ( new coord <identifiersep> resume <identifiersep> command ( job <identifiersep> id ) , lock <identifiersep> failure <identifiersep> requeue <identifiersep> interval ) ; \n \t3 log . warn ( <string_literal> + <string_literal> + e . get <identifiersep> message ( ) + <string_literal> \n \t5 + job <identifiersep> id + <string_literal> ) ; } \n \t2 finally { \n <ect>
\t2 logger . debug ( this + <string_literal> ) ; } \n \t1 return ; } \n <ect>
\t4 zip <identifiersep> entry <identifier> = <identifier> . next <identifiersep> element ( ) ; \n \t4 add <identifiersep> child ( new <identifier> <identifiersep> entry ( file , <identifier> . get <identifiersep> name ( ) , <identifier> . get <identifiersep> size ( ) ) ) ; } \n \t3 zip . close ( ) ; \n \t2 } catch ( zip <identifiersep> exception e ) { \n <ect>
\t3 while ( rs . next ( ) ) { \n \t4 list . add ( rs . get <identifiersep> string ( 1 ) ) ; } \n \t3 return list ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 this . in <identifiersep> use . remove ( item ) ; } \n \t4 this . <identifier> . release ( ) ; } } \n \t2 else { \n <ect>
\t2 } catch ( exception e ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> , e ) ; } } \n \t1 @ after <identifiersep> class \n \t1 public static void <identifier> <identifiersep> secure <identifiersep> cluster ( ) throws exception { \n <ect>
\t2 class <identifiersep> loader context <identifiersep> class <identifiersep> loader = thread . current <identifiersep> thread ( ) . get <identifiersep> context <identifiersep> class <identifiersep> loader ( ) ; \n \t2 try { \n \t3 thread . current <identifiersep> thread ( ) . set <identifiersep> context <identifiersep> class <identifiersep> loader ( get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) ) ; \n \t3 add <identifiersep> metadata <identifiersep> record <identifiersep> impl ( new file <identifiersep> input <identifiersep> stream ( input ) , name , input . length ( ) ) ; \n <ect>
\t6 assert ( start <identifiersep> pos > 0 ) ; \n \t6 assert ( end <identifiersep> pos > 0 ) ; \n \t6 <identifier> <identifiersep> base <identifiersep> file <identifiersep> name = line . substring ( start <identifiersep> pos + 1 , end <identifiersep> pos ) ; \n \t5 } else { \n <ect>
\t3 public long length ( ) { \n \t4 try { \n \t5 return blob <identifiersep> store . get <identifiersep> blob <identifiersep> length ( id ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 thread . sleep ( <number_literal> ) ; <comment> \n \t4 } else { \n \t5 break ; } } \n \t2 } catch ( throwable t ) { \n <ect>
\t3 return registered <identifiersep> service ; } \n \t2 return process <identifiersep> expired <identifiersep> registered <identifiersep> service ( registered <identifiersep> service ) ; } \n \t1 private registered <identifiersep> service process <identifiersep> expired <identifiersep> registered <identifiersep> service ( final registered <identifiersep> service registered <identifiersep> service ) { \n \t2 final registered <identifiersep> service <identifiersep> expiration <identifiersep> policy policy = registered <identifiersep> service . get <identifiersep> expiration <identifiersep> policy ( ) ; \n <ect>
\t2 string name = get <identifiersep> <identifier> ( ) . trim ( ) ; \n \t2 try { \n \t3 return class . for <identifiersep> name ( name , false , thread . current <identifiersep> thread ( ) . get <identifiersep> context <identifiersep> class <identifiersep> loader ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 executor . submit ( new runnable ( ) { \n \t4 @ override \n \t4 public void run ( ) { \n \t5 string reply = template . request <identifiersep> body ( <string_literal> , <string_literal> + num , string . class ) ; \n <ect>
\t2 if ( buf == null ) { \n \t3 return ; } \n \t2 synchronized ( buf ) { \n \t3 if ( buf . is <identifiersep> bad ( buf ) ) { \n <ect>
\t1 public boolean start <identifiersep> vm ( string repo <identifiersep> id , string vm <identifiersep> id ) throws xml <identifiersep> rpc <identifiersep> exception { \n \t2 xen host = new xen ( c ) ; \n \t2 try { \n \t3 if ( host . get <identifiersep> running <identifiersep> vm <identifiersep> config ( vm <identifiersep> id ) == null ) { \n <ect>
<comment> \n \t1 public event setup <identifiersep> form ( request <identifiersep> context context ) throws exception { \n <ect>
\t1 public x509crl fetch ( final resource crl ) throws io <identifiersep> exception , crl <identifiersep> exception , certificate <identifiersep> exception { \n \t2 final collection < x509crl > results = fetch ( collection <identifiersep> utils . wrap ( crl ) ) ; \n \t2 if ( ! results . is <identifiersep> empty ( ) ) { \n \t3 return results . iterator ( ) . next ( ) ; } \n <ect>
\t4 } else { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t6 <identifier> <identifiersep> log . warn ( <string_literal> + port ) ; } } \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t3 log . info ( <string_literal> , debugger ) ; \n \t3 get <identifiersep> context ( ) . set <identifiersep> debugger ( debugger ) ; } \n \t2 uuid <identifiersep> generator uuid <identifiersep> generator = get <identifiersep> bean <identifiersep> for <identifiersep> type ( uuid <identifiersep> generator . class ) ; \n \t2 if ( uuid <identifiersep> generator != null ) { \n <ect>
\t2 invocation . builder request = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) ; \n \t2 response response = request . get ( ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string str = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t1 thread . sleep ( 1000l ) ; <comment> \n \t1 try { \n \t2 server . join ( ) ; \n \t1 } catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 return new org . apache . thrift . async . async <identifiersep> method <identifiersep> callback < void > ( ) { \n \t2 public void on <identifiersep> complete ( void o ) { } \n \t2 public void on <identifiersep> error ( java . lang . exception e ) { \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t1 } catch ( cancellation <identifiersep> exception ce ) { \n \t1 throw new interrupted <identifiersep> exception ( \n \t2 <string_literal> ) ; \n \t1 } catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t5 labels [ i / <number_literal> ] = pairs . get ( i ) ; \n \t5 values [ i / <number_literal> ] = pairs . get ( i + 1 ) ; } \n \t4 log . debug ( <string_literal> + <identifier> ) ; \n \t3 } else { \n <ect>
\t3 <identifier> . set <identifiersep> length ( pos ) ; \n \t3 <identifier> . close ( ) ; \n \t3 while ( <identifier> . go <identifiersep> to <identifiersep> next <identifiersep> log ( ) ) { \n \t4 if ( ! <identifier> . log <identifiersep> file . delete ( ) ) { \n <ect>
\t3 try { \n \t4 thread . sleep ( <number_literal> ) ; \n \t3 } catch ( exception e ) { \n \t4 log . info ( <string_literal> ) ; } } \n <ect>
\t3 return multifactor <identifiersep> authentication <identifiersep> utils . get <identifiersep> available <identifiersep> multifactor <identifiersep> authentication <identifiersep> providers ( application <identifiersep> context ) . values ( ) . stream ( ) \n \t4 . filter ( p - > p . matches ( provider <identifiersep> id ) ) \n \t4 . find <identifiersep> first ( ) ; \n \t2 } catch ( final exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void saml <identifiersep> error <identifiersep> page <identifiersep> forward <identifiersep> error ( string error <identifiersep> page , throwable t ) { \n <ect>
\t2 } else { \n \t3 try { \n \t4 width = integer . parse <identifiersep> int ( ( string ) prop <identifiersep> value ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 try { \n \t5 if ( validate <identifiersep> using <identifiersep> key <identifiersep> selector ( signature <identifiersep> node , new key <identifiersep> selector <identifiersep> <identifier> <identifiersep> key ( key ) ) ) { \n \t6 return true ; } \n \t4 } catch ( xml <identifiersep> signature <identifiersep> exception ex ) { <comment> \n <ect>
\t2 if ( backup != null && ! backup . is <identifiersep> empty ( ) ) { \n \t3 <comment> \n \t3 this . su <identifiersep> executor . after ( backup . pop ( ) ) ; \n \t2 } else { \n <ect>
<comment> \n private boolean reload <identifiersep> ldap <identifiersep> server <identifiersep> properties ( ) { \n \t1 ldap <identifiersep> server <identifiersep> properties properties = ldap <identifiersep> configuration <identifiersep> provider . get ( ) . get <identifiersep> ldap <identifiersep> server <identifiersep> properties ( ) ; \n \t1 if ( ! properties . equals ( ldap <identifiersep> server <identifiersep> properties . get ( ) ) ) { \n <ect>
\t1 <comment> \n \t1 private void <identifier> <identifiersep> entry ( long id ) { \n \t2 block block = write <identifiersep> cache . get <identifiersep> if <identifiersep> present ( id ) ; \n \t2 if ( block == null ) { \n <ect>
\t3 if ( ! actions . pre <identifiersep> destroy <identifiersep> actions . is <identifiersep> empty ( ) ) { \n \t4 if ( is <identifiersep> shutdown . get ( ) == false ) { \n \t5 pre <identifiersep> destroy <identifiersep> monitor . register ( <identifier> , provision . get <identifiersep> binding ( ) , actions . pre <identifiersep> destroy <identifiersep> actions ) ; } \n \t4 else { \n <ect>
\t4 return s . split ( <string_literal> ) ; } } \n \t2 private static final string wrong <identifiersep> format = <string_literal> + \n \t2 <string_literal> ; \n \t2 public quorum <identifiersep> server ( long sid , string address <identifiersep> str ) throws config <identifiersep> exception { \n <ect>
\t1 public static int find <identifiersep> node <identifiersep> id ( cluster cluster , host <identifiersep> matcher matcher ) { \n \t2 logger . info ( <string_literal> + matcher . get <identifiersep> debug <identifiersep> info ( ) ) ; \n \t2 if ( is <identifiersep> single <identifiersep> local <identifiersep> cluster ( cluster , matcher ) ) { \n \t3 int node <identifiersep> id = cluster . get <identifiersep> node <identifiersep> ids ( ) . iterator ( ) . next ( ) ; \n <ect>
\t5 comp = { \n \t6 val str = lua <identifiersep> <identifier> . on <identifiersep> sort <identifiersep> callback ( module <identifiersep> name , it ) \n \t6 str } } \n \t4 else - > { \n <ect>
\t2 try { \n \t3 log . info ( <string_literal> , web <identifiersep> root <identifiersep> dir ) ; \n \t3 file <identifiersep> utils . delete <identifiersep> directory ( web <identifiersep> root <identifiersep> dir ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t6 <comment> \n \t6 boolean is <identifiersep> read <identifiersep> only = read <identifiersep> only <identifiersep> storage <identifiersep> configuration . type <identifiersep> name . equals ( def . get <identifiersep> type ( ) ) ; \n \t6 storage <identifiersep> service . remove <identifiersep> engine ( engine , is <identifiersep> read <identifiersep> only , def . get <identifiersep> type ( ) , true ) ; \n \t6 throw new voldemort <identifiersep> exception ( e ) ; } \n <ect>
\t1 log . info ( <string_literal> , ( new <identifiersep> time - start <identifiersep> time ) / 1 . 0e6 ) ; \n \t1 start <identifiersep> time = new <identifiersep> time ; \n \t1 write <identifiersep> model . stop ( ) ; \n \t1 new <identifiersep> time = system . nano <identifiersep> time ( ) ; \n <ect>
\t5 break ; } } \n \t3 if ( cleanup <identifiersep> needed ) { \n \t4 cleanup <identifiersep> result = shutdown <identifiersep> network <identifiersep> resources ( network . get <identifiersep> id ( ) , context . get <identifiersep> account ( ) , context . get <identifiersep> caller ( ) . get <identifiersep> id ( ) ) ; } \n \t2 } catch ( final exception ex ) { \n <ect>
\t3 info . reason = get <identifiersep> root <identifiersep> <identifier> ( <identifier> ) ; \n \t3 info . package <identifiersep> diff = <identifier> ; \n \t3 info . package <identifiersep> name = <identifier> . get <identifiersep> name ( ) ; \n \t3 info . attributes = n <identifiersep> exports . get ( info . package <identifiersep> name ) ; \n <ect>
\t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; \n \t3 em . get <identifiersep> transaction ( ) . rollback ( ) ; \n \t2 } finally { \n \t3 em . close ( ) ; } \n <ect>
\t2 for ( string <identifier> <identifiersep> feed : out <identifiersep> of <identifiersep> order <identifiersep> <identifier> ) \n \t2 { \n \t3 if ( feed . get <identifiersep> url ( ) . contains ( <identifier> <identifiersep> feed ) ) \n \t3 { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t3 return null ; } \n \t2 keystore <identifiersep> vo ks <identifiersep> vo = <identifier> <identifiersep> ks <identifiersep> dao . find <identifiersep> by <identifiersep> name ( console <identifiersep> proxy <identifiersep> manager . certificate <identifiersep> name ) ; \n \t2 if ( proxy . is <identifiersep> ssl <identifiersep> enabled ( ) && ks <identifiersep> vo == null ) { \n <ect>
\t2 log . info ( <string_literal> + class <identifiersep> name + <string_literal> + instance ) ; \n \t2 return instance ; } \n \t1 @ override \n \t1 public void destroy ( t instance , creational <identifiersep> context < t > creational <identifiersep> context ) { \n <ect>
\t4 } else if ( str . contains ( process <identifiersep> <identifier> . class . get <identifiersep> name ( ) ) ) { \n \t5 continue ; \n \t4 } else if ( ! str . contains ( port ) ) { \n \t5 continue ; } \n <ect>
\t4 + <string_literal> ) ; \n \t3 ignored <identifiersep> <identifier> . add ( artifact ) ; } } \n \t1 public void update <identifiersep> scope ( artifact artifact , string scope ) \n \t1 { \n <ect>
\t5 return null ; } \n \t4 finally \n \t4 { \n \t5 if ( ! is <identifiersep> final ) \n <ect>
\t5 ignore <identifiersep> tags , \n \t5 new json <identifiersep> array ( mapping . get <identifiersep> worksheet <identifiersep> history <identifiersep> string ( ) ) ) ; } \n \t2 catch ( command <identifiersep> exception | karma <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 throw new sql <identifiersep> exception ( <string_literal> ) ; } \n \t1 <comment> \n \t1 <comment> \n \t1 if ( ! auto <identifiersep> commit ) { \n <ect>
\t3 final string session <identifiersep> id = session . get <identifiersep> id ( ) ; \n \t3 if ( session <identifiersep> id != null ) { \n \t4 return authenticated <identifiersep> sessions . contains ( session <identifiersep> id ) ; \n \t3 } else { \n <ect>
\t2 object [ ] values = get <identifiersep> parameters <identifiersep> for ( method ) ; \n \t2 validator . add <identifiersep> all ( errors ) ; \n \t2 if ( ! errors . is <identifiersep> empty ( ) ) { \n \t3 logger . debug ( <string_literal> , errors ) ; } \n <ect>
\t2 } catch ( exception ex ) { \n \t3 server <identifiersep> log . error ( <string_literal> + ex . get <identifiersep> message ( ) , ex ) ; \n \t3 throw new fuseki <identifiersep> exception ( <string_literal> + ex . get <identifiersep> message ( ) , ex ) ; } \n \t2 string now = date <identifiersep> time <identifiersep> utils . now <identifiersep> as <identifiersep> string ( ) ; \n <ect>
\t2 scan <identifiersep> request . clear <identifiersep> scan <identifiersep> ranges ( ) ; <comment> \n \t2 scan <identifiersep> request <identifiersep> byte <identifiersep> string = serialize <identifiersep> <identifier> <identifiersep> scan <identifiersep> req ( scan <identifiersep> request ) ; \n \t2 final expected <identifiersep> size <identifiersep> iterator ep <identifiersep> result <identifiersep> <identifier> = new expected <identifiersep> size <identifiersep> iterator ( query <identifiersep> context , shard <identifiersep> num , coprocessor <identifiersep> timeout ) ; \n \t2 logger . info ( <string_literal> , scan <identifiersep> request <identifiersep> byte <identifiersep> string . size ( ) , raw <identifiersep> scan <identifiersep> byte <identifiersep> string . size ( ) ) ; \n <ect>
\t4 logger . info ( <string_literal> + get <identifiersep> user <identifiersep> name ( ) + <string_literal> + connection . get <identifiersep> host ( ) + ' : ' + connection . get <identifiersep> port ( ) ) ; \n \t4 boolean register <identifiersep> result = server . register <identifiersep> user ( session <identifiersep> id , connection . get <identifiersep> username ( ) , \n \t6 connection . get <identifiersep> password ( ) , connection . get <identifiersep> email ( ) ) ; \n \t4 if ( register <identifiersep> result ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + instance + <string_literal> + retry ) ; } \n \t3 final state state = instance . get <identifiersep> state ( ) ; \n \t3 if ( state == state . running ) { \n <ect>
\t3 log . info ( <string_literal> , event <identifiersep> factory ) ; \n \t3 camel <identifiersep> context . get <identifiersep> management <identifiersep> strategy ( ) . set <identifiersep> event <identifiersep> factory ( event <identifiersep> factory ) ; } \n \t2 unit <identifiersep> of <identifiersep> work <identifiersep> factory unit <identifiersep> of <identifiersep> work <identifiersep> factory = get <identifiersep> single <identifiersep> bean <identifiersep> of <identifiersep> type ( application <identifiersep> context , unit <identifiersep> of <identifiersep> work <identifiersep> factory . class ) ; \n \t2 if ( unit <identifiersep> of <identifiersep> work <identifiersep> factory != null ) { \n <ect>
\t5 if ( debug ) \n \t6 logger . warn ( string . format ( <string_literal> , \n \t8 new <identifiersep> read . get <identifiersep> alignment <identifiersep> start ( ) , read . get <identifiersep> read <identifiersep> name ( ) , read . get <identifiersep> alignment <identifiersep> start ( ) , read . get <identifiersep> <identifier> <identifiersep> insert <identifiersep> size ( ) , read . get <identifiersep> <identifier> <identifiersep> alignment <identifiersep> start ( ) ) ) ; \n \t5 break ; } } \n <ect>
\t1 try { \n \t1 log . debug ( <string_literal> + snapshot <identifiersep> id ) ; \n \t1 connection <identifiersep> manager . complete <identifiersep> snapshot <identifiersep> delta <identifiersep> <identifier> ( san <identifiersep> volume <identifiersep> id , iqn ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 } catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error ex ) { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( \n \t5 <string_literal> \n \t7 + <string_literal> , ex ) ; } \n <ect>
\t6 call <identifiersep> after <identifiersep> creation <identifiersep> hook ( prot , after <identifiersep> creation <identifiersep> hook ( ) ) ; \n \t6 prot . init ( ) ; \n \t6 prot . start ( ) ; } \n \t5 catch ( exception e ) { \n <ect>
\t6 orig <identifiersep> request <identifiersep> uri = request <identifiersep> uri ; \n \t6 if ( request <identifiersep> uri . get <identifiersep> raw <identifiersep> user <identifiersep> info ( ) != null || request <identifiersep> uri . get <identifiersep> raw <identifiersep> fragment ( ) != null ) { \n \t7 <comment> \n \t7 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n <ect>
\t2 event event = null ; \n \t2 while ( event == null ) { \n \t2 event = provider . remove <identifiersep> event ( channel ) ; \n \t2 if ( event == null ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 <identifier> <identifiersep> log . error ( <string_literal> , rest <identifiersep> request . get <identifiersep> uri ( ) ) ; \n \t2 assert . fail ( <string_literal> ) ; } \n \t2 transport <identifiersep> callback < rest <identifiersep> response > rest <identifiersep> callback = ( response ) - > { \n \t2 <comment> \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> properties . load ( new file <identifiersep> input <identifiersep> stream ( file ) ) ; \n \t3 <identifier> <identifiersep> file = file ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . client <identifiersep> id ) ) { \n \t3 logger . warn ( <string_literal> , grant <identifiersep> type ) ; \n \t3 return false ; } \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . secret ) ) { \n <ect>
\t1 object instance = null ; \n \t1 try { \n \t1 instance = class . for <identifiersep> name ( class <identifiersep> full <identifiersep> name ) . get <identifiersep> constructor ( ) . new <identifiersep> instance ( ) ; \n \t1 } catch ( exception exception ) { \n <ect>
\t4 log . info ( <string_literal> , \n \t6 transaction <identifiersep> key , redelivered , ids , e . get <identifiersep> message ( ) ) ; } \n \t3 if ( rollback <identifiersep> only ) { \n <ect>
\t2 if ( groovy <identifiersep> script == null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( ! resource <identifiersep> utils . does <identifiersep> resource <identifiersep> exist ( groovy <identifiersep> script ) ) { \n <ect>
\t2 unregister <identifiersep> transport <identifiersep> m <identifiersep> bean ( ) ; \n \t1 } catch ( exception e ) { \n \t2 throw new cache <identifiersep> exception ( e ) ; } \n \t1 if ( is <identifiersep> debug ) \n <ect>
\t2 catch ( ssl <identifiersep> exception e ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t1 public void load <identifiersep> models <identifiersep> from <identifiersep> loaded <identifiersep> bundles ( ) { \n \t2 eo <identifiersep> model <identifiersep> group . set <identifiersep> default <identifiersep> group ( this ) ; \n \t2 ns <identifiersep> array < ns <identifiersep> bundle > framework <identifiersep> bundles = ns <identifiersep> bundle . framework <identifiersep> bundles ( ) ; \n <ect>
\t2 right . write ( ) ; \n \t2 <comment> \n \t2 if ( logging ( ) ) \n \t2 { \n <ect>
\t4 ns <identifiersep> array < string > filtered <identifiersep> out <identifiersep> addresses = eo <identifiersep> qualifier . filtered <identifiersep> array <identifiersep> with <identifiersep> qualifier ( filtered <identifiersep> addresses , <identifier> <identifiersep> list <identifiersep> qualifier ( ) ) ; \n \t4 if ( filtered <identifiersep> out <identifiersep> addresses . count ( ) > 0 ) \n \t5 filtered <identifiersep> addresses . remove <identifiersep> objects <identifiersep> in <identifiersep> array ( filtered <identifiersep> out <identifiersep> addresses ) ; \n <ect>
\t4 component <identifiersep> builder component = build <identifiersep> audit <identifiersep> block ( ( simple <identifiersep> audit <identifiersep> log ) activity ) ; \n \t4 if ( component != null ) { \n \t5 title <identifiersep> content . add ( component , <identifier> . <identifier> <identifiersep> <identifier> ( <number_literal> ) ) ; } \n \t3 } else { \n <ect>
\t3 } catch ( io <identifiersep> exception e ) { \n \t4 <comment> \n \t4 log . info ( <string_literal> , <identifier> , e ) ; \n \t3 } catch ( ssl <identifiersep> context <identifiersep> exception e ) { \n <ect>
\t1 for ( set < operator < ? > > component : components ) { \n \t2 log . debug ( <string_literal> ) ; \n \t2 for ( operator < ? > co : component ) { \n <ect>
\t2 finally : \n \t2 if self . recovery <identifiersep> manager . enabled ( ) : \n \t3 self . recovery <identifiersep> manager . on <identifiersep> execution <identifiersep> command <identifiersep> finish ( ) \n \t1 else : \n <ect>
\t3 parameters . add ( src ) ; \n \t3 if ( event instanceof linked <identifiersep> entity <identifiersep> event ) { \n \t4 parameters . add ( ( ( linked <identifiersep> entity <identifiersep> event ) event ) . get <identifiersep> linked ( ) ) ; } \n <ect>
\t3 if ( ! current <identifiersep> svc <identifiersep> provider <identifiersep> map . contains <identifiersep> entry ( service , provider ) ) { \n \t4 vpc <identifiersep> offering <identifiersep> service <identifiersep> map <identifiersep> vo off <identifiersep> service = new vpc <identifiersep> offering <identifiersep> service <identifiersep> map <identifiersep> vo ( offering . get <identifiersep> id ( ) , service , provider ) ; \n \t4 <identifier> <identifiersep> vpc <identifiersep> off <identifiersep> svc <identifiersep> map <identifiersep> dao . persist ( off <identifiersep> service ) ; \n <ect>
\t1 self . logger . info ( <string_literal> ) \n \t1 put <identifiersep> ranger <identifiersep> kafka <identifiersep> plugin <identifiersep> property = self . put <identifiersep> property ( configurations , <string_literal> , services ) \n \t1 put <identifiersep> ranger <identifiersep> kafka <identifiersep> plugin <identifiersep> property ( <string_literal> , kafka <identifiersep> user ) \n \t1 else : \n <ect>
\t3 if ( cmd . is <identifiersep> managed ( ) ) { \n \t4 hypervisor <identifiersep> resource . handle <identifiersep> sr <identifiersep> and <identifiersep> vdi <identifiersep> detach ( cmd . get <identifiersep> i <identifiersep> <identifier> <identifiersep> name ( ) , conn ) ; } \n \t3 return new <identifier> <identifiersep> answer ( disk ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t4 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( <string_literal> ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( <string_literal> ) . shards <identifiersep> with <identifiersep> state ( started ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( <string_literal> ) . size ( ) , equal <identifiersep> to ( 0 ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( <string_literal> ) . shards <identifiersep> with <identifiersep> state ( started ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n <ect>
\t6 string url = xml <identifiersep> utils . get <identifiersep> text <identifiersep> content ( <identifier> <identifiersep> url , url ) ; \n \t6 <identifier> <identifiersep> <identifier> <identifiersep> url <identifier> <identifiersep> url = new <identifier> <identifiersep> <identifier> <identifiersep> url ( url <identifiersep> name , url ) ; \n \t6 <identifier> . add <identifiersep> <identifier> <identifiersep> url ( <identifier> <identifiersep> url ) ; } } } \n \t2 } catch ( x <identifiersep> path <identifiersep> expression <identifiersep> exception e ) { \n <ect>
\t3 object <identifiersep> name network <identifiersep> mbean = create <identifiersep> network <identifiersep> connector <identifiersep> object <identifiersep> name ( connector ) ; \n \t3 try { \n \t4 get <identifiersep> management <identifiersep> context ( ) . get <identifiersep> object <identifiersep> instance ( network <identifiersep> mbean ) ; \n \t3 } catch ( instance <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 list < long > top <identifiersep> three = new array <identifiersep> list < > ( item <identifiersep> i <identifiersep> ds ) ; \n \t1 if ( top <identifiersep> three . size ( ) > <number_literal> ) { \n \t1 top <identifiersep> three = top <identifiersep> three . sub <identifiersep> list ( 0 , <number_literal> ) ; \n \t1 } else if ( top <identifiersep> three . size ( ) < <number_literal> ) { \n <ect>
\t2 container container = containers . get ( 0 ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , container ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <string_literal> , container . get <identifiersep> name ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <string_literal> , container . get <identifiersep> image ( ) ) ; \n <ect>
\t2 this . set <identifiersep> title ( <string_literal> ) ; \n \t2 custom <identifiersep> button <identifiersep> action abort <identifiersep> action = new custom <identifiersep> button <identifiersep> action ( <string_literal> , new runnable ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n <ect>
\t4 <identifier> <identifiersep> <identifier> <identifiersep> binding . add ( ns <identifiersep> service , monitor <identifiersep> binding ) ; \n \t3 } catch ( final exception e ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t2 recoverable <identifiersep> random <identifiersep> access <identifiersep> file random <identifiersep> access <identifiersep> file = data <identifiersep> file . open <identifiersep> random <identifiersep> access <identifiersep> file ( ) ; \n \t2 array <identifiersep> list < integer > batch <identifiersep> positions = find <identifiersep> batch ( random <identifiersep> access <identifiersep> file , integer . max <identifiersep> value ) ; \n \t2 log . info ( <string_literal> + batch <identifiersep> positions ) ; \n \t2 int pos = batch <identifiersep> positions . get ( 1 ) ; \n <ect>
\t2 response = verify <identifiersep> response ( response ) ; \n \t2 string json = <identifier> <identifiersep> response ( response ) ; \n \t2 response response <identifiersep> object = response . status ( <number_literal> ) . entity ( json ) . build ( ) ; \n \t2 long t2 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t1 query <identifiersep> wrapper query <identifiersep> wrapper ) { \n \t1 boolean success = false ; \n \t1 list < m <identifiersep> role <identifiersep> map > m <identifiersep> role <identifiersep> <identifier> = null ; \n \t1 try { \n <ect>
\t1 logger . error ( <string_literal> , e ) ; <comment> \n \t1 throw new runtime <identifiersep> exception ( e . get <identifiersep> localized <identifiersep> message ( ) , e ) ; } } \n public boolean validate ( ) { \n \t1 if ( query == null ) { \n <ect>
<comment> \n \t3 return 1 ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 save <identifiersep> document <identifiersep> <identifier> <identifiersep> content <identifiersep> <identifier> ( document , <string_literal> , false ) ; \n \t3 this . logger . info ( <string_literal> , \n \t4 document . get <identifiersep> document <identifiersep> reference <identifiersep> with <identifiersep> locale ( ) , old <identifiersep> target , new <identifiersep> target ) ; \n \t2 } else { \n <ect>
\t3 deallocate <identifiersep> thread = thread . to <identifiersep> string ( ) ; \n \t3 deallocate <identifiersep> trace = thread . get <identifiersep> stack <identifiersep> trace ( ) ; } \n \t2 synchronized void log ( string id ) \n \t2 { \n <ect>
\t2 } catch ( unknown <identifiersep> host <identifiersep> exception uhe ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , uhe ) ; \n \t3 throw new server <identifiersep> exception ( <string_literal> , uhe ) ; \n \t2 } catch ( na <identifiersep> api <identifiersep> failed <identifiersep> exception <identifier> ) { \n <ect>
\t1 log . error ( <string_literal> \n \t3 + <string_literal> ) ; \n \t1 <identifier> . propagate ( ex ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t3 return result ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n \t3 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t1 integer col <identifiersep> id = name <identifiersep> id <identifiersep> map . get ( <identifier> . get <identifiersep> column <identifiersep> name ( ) ) ; \n \t1 string new <identifiersep> col <identifiersep> name = record <identifiersep> reader <identifiersep> impl . encode <identifiersep> translated <identifiersep> <identifier> <identifiersep> column ( root <identifiersep> column , col <identifiersep> id ) ; \n \t1 search <identifiersep> argument <identifiersep> factory . set <identifiersep> predicate <identifiersep> leaf <identifiersep> column ( <identifier> , new <identifiersep> col <identifiersep> name ) ; } \n <ect>
\t6 application <identifiersep> master . timeline <identifiersep> client , container , \n \t6 application <identifiersep> master . jstorm <identifiersep> master <identifiersep> context . domain <identifiersep> id , application <identifiersep> master . app <identifiersep> <identifier> <identifiersep> ugi ) ; } } \n \t2 @ override \n \t2 public void on <identifiersep> start <identifiersep> container <identifiersep> error ( container <identifiersep> id container <identifiersep> id , throwable t ) { \n <ect>
\t2 try { \n \t3 connection ( ) . exec ( <string_literal> ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) \n \t2 { \n <ect>
\t4 mem <identifiersep> cache = new timeout <identifiersep> mem <identifiersep> cache ( ) ; \n \t4 mem <identifiersep> cache . init ( conf ) ; } \n \t2 } catch ( java . lang . unsupported <identifiersep> class <identifiersep> version <identifiersep> error e ) { \n \t3 if ( e . get <identifiersep> message ( ) . contains ( <string_literal> ) ) { \n <ect>
\t2 if ( gossiper . instance . get <identifiersep> live <identifiersep> members ( ) . contains ( endpoint ) ) \n \t3 throw new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> + endpoint + <string_literal> ) ; \n \t2 <comment> \n \t2 if ( token <identifiersep> metadata . is <identifiersep> <identifier> ( endpoint ) ) \n <ect>
\t2 <identifier> = ref . get <identifiersep> <identifier> ( ) ; \n \t2 if ( <identifier> instanceof unique <identifiersep> file <identifiersep> <identifier> ) { \n \t3 ( ( unique <identifiersep> file <identifiersep> <identifier> ) <identifier> ) . close ( ) ; } \n \t2 } catch ( file <identifiersep> system <identifiersep> exception e ) { \n <ect>
\t8 <identifier> = self . service <identifiersep> offering . id , \n \t8 <identifier> = [ str ( network . id ) ] \n \t8 ) \n \t2 self . logger . debug ( <string_literal> % network . id ) \n <ect>
\t1 @ produces ( media <identifiersep> type . text <identifiersep> plain ) \n \t1 @ decorators <identifiersep> filter <identifiersep> binding \n \t1 @ decorators <identifiersep> resource <identifiersep> binding \n \t1 public response create <identifiersep> book ( ejb <identifiersep> book book ) { \n <ect>
\t1 logger . info ( <string_literal> % req . get <identifiersep> full <identifiersep> url ( ) ) \n \t1 logger . debug ( <string_literal> % data ) \n \t1 resp = self . url <identifiersep> <identifier> . open ( req ) \n \t1 if resp : \n <ect>
\t4 if ( column . get <identifiersep> attribute ( <string_literal> ) . equals ( <string_literal> ) ) { \n \t5 assert <identifiersep> equals ( expected <identifiersep> first <identifiersep> name [ counter ] , column . get <identifiersep> text <identifiersep> content ( ) ) ; \n \t5 first <identifiersep> name <identifiersep> found = true ; } } \n \t3 assert <identifiersep> true ( first <identifiersep> name <identifiersep> found ) ; \n <ect>
\t2 assert <identifiersep> that ( state <identifiersep> response . get <identifiersep> state ( ) . routing <identifiersep> table ( ) . index ( <string_literal> ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . started ) . size ( ) , \n \t3 equal <identifiersep> to ( test . total <identifiersep> num <identifiersep> shards ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) . get ( ) ; \n <ect>
\t5 bridge . set <identifiersep> jms <identifiersep> connector ( this ) ; \n \t5 bridge . start ( ) ; \n \t5 log . info ( <string_literal> , reply <identifiersep> to <identifiersep> producer <identifiersep> queue ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 method . set <identifiersep> request <identifiersep> entity ( new byte <identifiersep> array <identifiersep> request <identifiersep> entity ( data ) ) ; \n \t3 try { \n \t4 r <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 try { \n \t3 if ( ! <identifier> <identifiersep> firewall <identifiersep> mgr . apply <identifiersep> rules ( static <identifiersep> nat <identifiersep> rules , continue <identifiersep> on <identifiersep> error , true ) ) { \n \t4 return false ; } \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t4 get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , \n \t4 this , \n \t4 grid <identifiersep> kernal <identifiersep> m <identifiersep> bean . class ) ; \n <ect>
\t3 delayed <identifiersep> load <identifiersep> plugins . add ( plugin ) ; } } \n \t1 private void register <identifiersep> plugin ( <identifier> <identifiersep> plugin plugin ) { \n \t2 if ( ! can <identifiersep> register <identifiersep> plugin ( plugin ) ) { \n <ect>
\t6 need <identifiersep> restart = true ; \n \t5 } catch ( exception e ) { \n \t6 <identifier> . append ( o . get <identifiersep> name ( ) ) . append ( ' ' ) . append ( e ) \n \t8 . append ( ' \\ n' ) ; \n <ect>
\t2 map < long , long > <identifier> <identifiersep> with <identifiersep> stats = maps . new <identifiersep> hash <identifiersep> map <identifiersep> with <identifiersep> expected <identifiersep> size ( cuboid <identifiersep> ids . size ( ) ) ; \n \t2 for ( long cuboid : cuboid <identifiersep> ids ) { \n \t3 long row <identifiersep> estimate = <identifier> <identifiersep> with <identifiersep> stats <identifiersep> all . get ( cuboid ) ; \n \t3 if ( row <identifiersep> estimate == null ) { \n <ect>
public void remove <identifiersep> from <identifiersep> roles ( webobjectsexamples . businesslogic . eo . movie <identifiersep> role object ) { \n \t1 exclude <identifiersep> object <identifiersep> from <identifiersep> property <identifiersep> with <identifiersep> key ( object , <identifier> <identifiersep> talent . roles <identifiersep> key ) ; } \n public void add <identifiersep> to <identifiersep> roles <identifiersep> relationship ( webobjectsexamples . businesslogic . eo . movie <identifiersep> role object ) { \n <ect>
\t1 conn = get <identifiersep> data <identifiersep> source ( ) . get <identifiersep> connection ( ) ; \n \t1 stmt = conn . prepare <identifiersep> statement ( set <identifiersep> preference <identifiersep> sql ) ; \n \t1 set <identifiersep> long <identifiersep> parameter ( stmt , 1 , user <identifiersep> id ) ; \n \t1 set <identifiersep> long <identifiersep> parameter ( stmt , <number_literal> , item <identifiersep> id ) ; \n <ect>
\t1 } else { \n \t2 k = ( orc <identifiersep> file <identifiersep> key <identifiersep> wrapper ) key ; } \n \t1 <comment> \n \t1 if ( k . is <identifiersep> <identifier> <identifiersep> file ( ) ) { \n <ect>
protected void debug <identifiersep> before ( exchange exchange , processor processor , \n \t6 processor <identifiersep> definition < ? > definition , string id , string short <identifiersep> name ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> , e ) ; } \n \t4 return false ; } } \n \t2 firewall <identifiersep> rule <identifiersep> vo related <identifiersep> rule = <identifier> <identifiersep> firewall <identifiersep> dao . find <identifiersep> by <identifiersep> related <identifiersep> id ( lb . get <identifiersep> id ( ) ) ; \n \t2 if ( related <identifiersep> rule != null ) { \n <ect>
\t3 assert . assert <identifiersep> true ( versioning <identifiersep> profile . is <identifiersep> later <identifiersep> version <identifiersep> of ( <identifier> . get <identifiersep> versioned <identifiersep> name ( ) , pko . get <identifiersep> versioned <identifiersep> name ( ) ) ) ; \n \t3 pko . update ( ) ; \n \t3 assert . assert <identifiersep> equals ( <identifier> . get <identifiersep> versioned <identifiersep> name ( ) , pko . get <identifiersep> versioned <identifiersep> name ( ) ) ; \n \t3 if ( ! <identifier> . public <identifiersep> key ( ) . equals ( pko . public <identifiersep> key ( ) ) ) { \n <ect>
\t6 logger . debug ( <string_literal> + vm . get <identifiersep> id ( ) + <string_literal> + resp . get <identifiersep> job <identifiersep> id ( ) ) ; } \n \t4 instances . add <identifiersep> instance ( vm ) ; } \n \t3 return instances ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 deleted <identifiersep> date = date <identifiersep> util . parse <identifiersep> date <identifiersep> string ( s <identifiersep> <identifier> <identifiersep> time <identifiersep> zone , deleted <identifiersep> ts ) ; } \n \t4 usage <identifiersep> records . add ( new usage <identifiersep> port <identifiersep> forwarding <identifiersep> rule <identifiersep> vo ( pf <identifiersep> id , zone <identifiersep> id , acct <identifiersep> id , d <identifiersep> id , created <identifiersep> date , deleted <identifiersep> date ) ) ; } \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t1 public void error ( transformer <identifiersep> exception e ) throws transformer <identifiersep> exception { \n \t1 log . error ( <string_literal> + e . get <identifiersep> message <identifiersep> and <identifiersep> location ( ) , e ) ; \n \t1 throw e ; } \n \t1 public void fatal <identifiersep> error ( transformer <identifiersep> exception e ) throws transformer <identifiersep> exception { \n <ect>
\t3 string msg <identifiersep> to = <string_literal> ; \n \t3 text <identifiersep> message message = session . create <identifiersep> text <identifiersep> message ( msg <identifiersep> to ) ; \n \t3 producer . send ( message ) ; \n \t3 connection . close ( ) ; \n <ect>
\t5 <identifier> = get <identifiersep> rmi <identifiersep> server <identifiersep> socket <identifiersep> factory ( host <identifiersep> address ) ; \n \t4 } else { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t1 private static void log <identifiersep> <identifier> ( ) { \n \t2 if ( ! logged <identifiersep> <identifier> ) { \n \t3 <comment> \n \t3 logged <identifiersep> <identifier> = true ; \n <ect>
\t4 return new configurations ( ) . properties ( file ) ; \n \t3 } catch ( exception e ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t3 for ( map . entry < alarm <identifiersep> type , alarm > entry : this . <identifier> . entry <identifiersep> set ( ) ) { \n \t4 entry . get <identifiersep> value ( ) . reset <identifiersep> <identifier> ( ) ; } } \n \t2 logger . debug ( <string_literal> , refresh ) ; \n \t2 for ( map . entry < alarm <identifiersep> type , alarm > entry : this . <identifier> . entry <identifiersep> set ( ) ) { \n <ect>
\t10 try { \n <number_literal> state value = obj . convert <identifiersep> to <identifiersep> state ( value <identifiersep> selector ) ; \n <number_literal> event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , value ) ; \n \t10 } catch ( <identifier> <identifiersep> com <identifiersep> exception e ) { \n <ect>
\t1 string pattern ; \n \t1 public void initialize ( validation <identifiersep> complex <identifiersep> class <identifiersep> <identifier> <identifiersep> sub <identifiersep> constraint constraint <identifiersep> annotation ) { \n \t2 pattern = constraint <identifiersep> annotation . value ( ) ; } \n \t1 public boolean is <identifiersep> valid ( validation <identifiersep> complex <identifiersep> interface <identifiersep> sub value , constraint <identifiersep> validator <identifiersep> context context ) { \n <ect>
\t3 storage <identifiersep> strategy . delete <identifiersep> container ( container ) ; \n \t3 else \n \t3 return <identifiersep> val = false ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 } else { \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( error ) ; } } } \n \t1 @ override \n \t1 public boolean delete <identifiersep> storage <identifiersep> pool ( string uuid ) { \n <ect>
\t6 not <identifiersep> modified = true ; \n \t6 response . set <identifiersep> status ( http <identifiersep> servlet <identifiersep> response . sc <identifiersep> not <identifiersep> modified ) ; \n \t6 response . set <identifiersep> header ( <string_literal> , <string_literal> ) ; } \n \t4 } catch ( parse <identifiersep> exception ex ) { \n <ect>
\t2 if ( fetcher . get <identifiersep> retry <identifiersep> delay <identifiersep> ms ( ) > 0 ) { \n \t3 try { \n \t4 thread . sleep ( fetcher . get <identifiersep> retry <identifiersep> delay <identifiersep> ms ( ) ) ; \n \t3 } catch ( interrupted <identifiersep> exception ie ) { \n <ect>
\t3 image image = toolkit . get <identifiersep> default <identifiersep> toolkit ( ) . get <identifiersep> image ( url ) ; \n \t3 set <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> image . invoke ( application , image ) ; \n \t2 } catch ( exception e ) { \n \t3 if ( log . should <identifiersep> warn ( ) ) \n <ect>
\t5 public void run ( ) { \n \t6 try { \n \t7 <identifier> . <identifier> ( body ) ; \n \t6 } catch ( throwable e ) { \n <ect>
\t2 string job <identifiersep> id = request . get <identifiersep> job <identifiersep> id ( ) ; \n \t2 try { \n \t3 logger . info ( <string_literal> + job <identifiersep> id ) ; \n \t3 scheduler . terminate ( job <identifiersep> id ) ; \n <ect>
\t1 @ override \n \t1 public void run ( ) throws exception { \n \t2 <comment> \n \t2 connector conn = mac . get <identifiersep> connector ( qualified <identifiersep> <identifier> , new kerberos <identifiersep> token ( ) ) ; \n <ect>
\t1 if ( vector instanceof named <identifiersep> vector ) { \n \t2 id <identifiersep> set . add ( ( ( named <identifiersep> vector ) vector ) . get <identifiersep> name ( ) ) ; } } \n \t1 int num <identifiersep> docs = reader . num <identifiersep> docs ( ) ; \n \t1 fixed <identifiersep> bit <identifiersep> set cluster <identifiersep> doc <identifiersep> <identifier> = get <identifiersep> cluster <identifiersep> doc <identifiersep> <identifier> ( reader , id <identifiersep> set , this . id <identifiersep> field ) ; \n <ect>
\t4 return ; } \n \t3 zone <identifier> <identifiersep> zone = new zone ( this . secondary <identifiersep> zone . get <identifiersep> zone <identifiersep> name ( ) , records . to <identifiersep> array ( new record [ records . size ( ) ] ) ) ; \n \t3 log . debug ( <string_literal> + this . secondary <identifiersep> zone . get <identifiersep> zone <identifiersep> name ( ) + <string_literal> + this . secondary <identifiersep> zone . get <identifiersep> remote <identifiersep> server <identifiersep> address ( ) ) ; \n \t3 if ( ! <identifier> <identifiersep> zone . get <identifiersep> <identifier> ( ) . get <identifiersep> name ( ) . equals ( this . secondary <identifiersep> zone . get <identifiersep> zone <identifiersep> name ( ) ) ) { \n <ect>
\t3 pstmt . execute <identifiersep> update ( ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t1 public list < executable <identifiersep> po > get <identifiersep> jobs ( ) throws persistent <identifiersep> exception { \n \t2 try { \n \t3 return store . get <identifiersep> all <identifiersep> resources ( resource <identifiersep> store . execute <identifiersep> resource <identifiersep> root , executable <identifiersep> po . class , job <identifiersep> serializer ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 ae <identifiersep> log . error ( <string_literal> ) ; \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( e ) ; } \n \t3 catch ( final invocation <identifiersep> target <identifiersep> exception e ) \n \t3 { \n <ect>
\t1 private void update <identifiersep> offset ( list < update > updates ) { \n \t2 optional <identifiersep> long <identifier> = updates . stream ( ) . map <identifiersep> to <identifiersep> long ( update : : get <identifiersep> update <identifiersep> id ) . max ( ) ; \n \t2 if ( <identifier> . is <identifiersep> present ( ) ) { \n \t3 this . offset = <identifier> . get <identifiersep> as <identifiersep> long ( ) + 1 ; \n <ect>
\t4 log . info ( <string_literal> ) ; \n \t4 connected . count <identifiersep> down ( ) ; \n \t3 } else { \n \t4 if ( event . get <identifiersep> state ( ) == keeper <identifiersep> state . disconnected ) { \n <ect>
<comment> \n public static void drop <identifiersep> instance <identifiersep> cache ( string instance <identifiersep> name ) { \n <ect>
\t3 } ) ; } \n \t2 return super . create <identifiersep> repository ( fixture ) ; } \n \t1 @ override \n \t1 protected void before <identifiersep> suite ( ) throws exception { \n <ect>
\t4 for ( final string <identifier> : <identifier> ) { \n \t5 try { \n \t6 new <identifiersep> classes . add ( loader . load <identifiersep> class ( <identifier> ) ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t6 else if ( current <identifiersep> token . equals ( end <identifiersep> token ) ) { \n \t7 return true ; } \n \t5 } catch ( exception e ) { \n \t6 error . compare <identifiersep> and <identifiersep> set ( null , e ) ; \n <ect>
\t1 @ override \n \t1 public exchange recover ( camel <identifiersep> context camel <identifiersep> context , string exchange <identifiersep> id ) { \n \t2 final string key = exchange <identifiersep> id ; \n \t2 exchange answer = get ( key , get <identifiersep> repository <identifiersep> name <identifiersep> completed ( ) , camel <identifiersep> context ) ; \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t2 file <identifiersep> system file <identifiersep> system = job <identifiersep> scratch <identifiersep> dir . get <identifiersep> file <identifiersep> system ( hive <identifiersep> conf ) ; \n \t2 file <identifiersep> system . delete ( job <identifiersep> scratch <identifiersep> dir , true ) ; } \n \t1 <comment> \n \t1 catch ( throwable e ) { \n <ect>
\t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n <ect>
\t2 m <identifiersep> broadcast <identifiersep> receiver ? . let { \n \t3 local <identifiersep> broadcast <identifiersep> manager ! ! . unregister <identifiersep> receiver ( it ) } } \n \t1 override fun on <identifiersep> resume ( ) { \n \t2 super . on <identifiersep> resume ( ) \n <ect>
\t5 arr [ 0 ] = slave ; \n \t5 slave . send <identifiersep> message <identifiersep> to <identifiersep> <identifier> <identifiersep> route ( <string_literal> , 0 ) ; \n \t5 wait <identifiersep> for <identifiersep> second <identifiersep> route <identifiersep> completed <identifiersep> latch . count <identifiersep> down ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t6 handle <identifiersep> error <identifiersep> response ( input <identifiersep> stream , status <identifiersep> code , connection . get <identifiersep> response <identifiersep> message ( ) ) ; } } \n \t3 } catch ( io <identifiersep> exception io <identifiersep> exception ) { \n \t4 if ( ! retry <identifiersep> policy . should <identifiersep> retry ( retries <identifiersep> attempted ++ , credentials <identifiersep> endpoint <identifiersep> retry <identifiersep> parameters . builder ( ) . with <identifiersep> exception ( io <identifiersep> exception ) . build ( ) ) ) { \n \t5 throw io <identifiersep> exception ; } \n <ect>
\t3 hash h = hash . create ( b ) ; \n \t3 return h ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t1 else : \n \t1 current <identifiersep> admin <identifiersep> users = <string_literal> . format ( oozie <identifiersep> user ) \n \t1 self . logger . info ( <string_literal> % current <identifiersep> admin <identifiersep> users ) \n \t1 if falcon <identifiersep> user in current <identifiersep> admin <identifiersep> users : \n <ect>
\t3 file script = scripts [ i ] ; \n \t3 if ( script . get <identifiersep> name ( ) . equals ( <string_literal> ) ) { \n \t4 continue ; } \n <ect>
\t3 return false ; } \n \t2 <comment> \n \t2 list < cisco <identifiersep> <identifier> <identifiersep> controller <identifiersep> vo > devices = <identifier> <identifiersep> cisco <identifiersep> <identifier> <identifiersep> dao . list <identifiersep> by <identifiersep> physical <identifiersep> network ( network . get <identifiersep> physical <identifiersep> network <identifiersep> id ( ) ) ; \n \t2 if ( devices . is <identifiersep> empty ( ) ) { \n <ect>
\t2 attr <identifiersep> names = new string [ names . size ( ) ] ; \n \t2 names . to <identifiersep> array ( attr <identifiersep> names ) ; } } \n \t1 print ( model <identifiersep> name , dataset <identifiersep> name , attr <identifiersep> names ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 super ( <string_literal> , <string_literal> , 1 , x <identifiersep> log . std ) ; \n \t2 this . action <identifiersep> id = action <identifiersep> id ; } \n \t1 @ override \n \t1 protected void call ( coordinator <identifiersep> store store ) throws store <identifiersep> exception , command <identifiersep> exception { \n <ect>
\t7 logger . debug ( <string_literal> ) ; } } } \n \t4 this . process <identifiersep> nio <identifiersep> <identifier> ( selection <identifiersep> count , this . selector , null , this . channel <identifiersep> map ) ; } } \n \t2 catch ( closed <identifiersep> selector <identifiersep> exception <identifier> ) { \n \t3 if ( this . is <identifiersep> active ( ) ) { \n <ect>
\t4 if ( req . <identifier> ( ) instanceof grid <identifiersep> ggfs <identifiersep> <identifier> <identifiersep> request ) { \n \t5 grid <identifiersep> ggfs <identifiersep> <identifier> <identifiersep> request <identifier> <identifiersep> req = ( grid <identifiersep> ggfs <identifiersep> <identifier> <identifiersep> request ) req . <identifier> ( ) ; \n \t5 if ( ! rw . try <identifiersep> read <identifiersep> lock ( ) ) { \n <ect>
\t5 out <identifiersep> data . set <identifiersep> audio ( <identifier> ) ; \n \t5 out <identifiersep> data . set <identifiersep> audio <identifiersep> file <identifiersep> format ( audio <identifiersep> file <identifiersep> format ) ; \n \t5 return out <identifiersep> data ; } \n \t3 } catch ( exception e ) { \n <ect>
\t2 bc <identifiersep> log . logger . info ( <string_literal> + item <identifiersep> stack + <string_literal> ) ; \n \t2 bc <identifiersep> log . logger . info ( <string_literal> + type + <string_literal> ) ; \n \t2 bc <identifiersep> log . logger . info ( <string_literal> + source + <string_literal> ) ; \n \t2 if ( type <identifiersep> tags == null ) { \n <ect>
\t3 if ( existing <identifiersep> cluster != null ) { \n \t4 cluster = existing <identifiersep> cluster ; \n \t3 } else { \n <ect>
\t5 . post ( entity . entity ( big <identifiersep> collection , <string_literal> ) ) ; \n \t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n \t3 int len = math . min ( entity . length ( ) , <number_literal> ) ; \n <ect>
\t4 logger . warn ( <string_literal> , \n \t7 total <identifiersep> <identifier> , active , pending , completed ) ; \n \t4 break ; } } \n \t2 if ( total <identifiersep> <identifier> > gossip <identifiersep> <identifier> <identifiersep> poll <identifiersep> successes <identifiersep> required ) \n <ect>
\t4 ae <identifiersep> log . error ( <string_literal> ) ; \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( e ) ; } \n \t3 catch ( final instantiation <identifiersep> exception e ) \n \t3 { \n <ect>
\t5 <identifier> . evaluate <identifiersep> <identifier> ( action <identifiersep> context , null , new <identifier> ( ( script ) script ) ) ; \n \t4 } else if ( script instanceof string ) { \n \t5 <identifier> . evaluate ( action <identifiersep> context , null , ( string ) script , job <identifiersep> name ) ; \n \t4 } else if ( script != null ) { \n <ect>
\t5 final string value = attr <identifiersep> <identifier> . get ( 1 ) . trim ( ) ; \n \t5 logger . debug ( <string_literal> , name , value ) ; \n \t5 multimap . put ( name , value ) ; \n \t4 } else { \n <ect>
public class primary <identifiersep> election <identifiersep> routing <identifiersep> tests extends es <identifiersep> allocation <identifiersep> test <identifiersep> case { \n \t1 private final logger logger = loggers . get <identifiersep> logger ( primary <identifiersep> election <identifiersep> routing <identifiersep> tests . class ) ; \n \t1 public void test <identifiersep> backup <identifiersep> election <identifiersep> to <identifiersep> primary <identifiersep> when <identifiersep> primary <identifiersep> can <identifiersep> be <identifiersep> allocated <identifiersep> to <identifiersep> another <identifiersep> node ( ) { \n \t2 allocation <identifiersep> service strategy = create <identifiersep> allocation <identifiersep> service ( settings . builder ( ) . put ( <string_literal> , <number_literal> ) . build ( ) ) ; \n <ect>
\t5 if ( media . get <identifiersep> image <identifiersep> count ( ) == 0 ) { \n \t6 media . set <identifiersep> image <identifiersep> count ( 1 ) ; } \n \t4 } catch ( io <identifiersep> exception e ) { \n \t5 if ( media . get <identifiersep> image <identifiersep> count ( ) > 0 ) { \n <ect>
\t2 list < camel <identifiersep> context > camel <identifiersep> contexts = new array <identifiersep> list < camel <identifiersep> context > ( ) ; \n \t2 try { \n \t3 camel <identifiersep> contexts . add <identifiersep> all ( bean <identifiersep> factory . get <identifiersep> beans <identifiersep> of <identifiersep> type ( camel <identifiersep> context . class ) . values ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public void remove <identifiersep> node ( object addr ) { \n \t2 node n ; \n \t2 object a ; \n \t2 if ( addr == null ) { \n <ect>
\t3 return ; } \n \t2 scheduled <identifiersep> future = thread <identifiersep> pool . schedule <identifiersep> with <identifiersep> fixed <identifiersep> delay ( new jvm <identifiersep> monitor ( gc <identifiersep> <identifier> , gc <identifiersep> <identifier> <identifiersep> threshold ) { \n \t3 @ override \n \t3 void on <identifiersep> monitor <identifiersep> failure ( exception e ) { \n <ect>
\t6 <comment> \n \t6 for ( final image tn : old <identifiersep> <identifier> ) { \n \t7 app . delete ( tn ) ; } } \n \t4 } else { \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 <identifier> <identifiersep> executor . submit ( new agent <identifiersep> request <identifiersep> handler ( get <identifiersep> type ( ) , get <identifiersep> link ( ) , request ) ) ; } \n \t4 } catch ( final class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 this . snmp = new snmp ( transport ) ; \n \t2 this . snmp . add <identifiersep> command <identifiersep> responder ( this ) ; \n \t2 <comment> \n <ect>
\t2 int index = operations . index <identifiersep> of ( wsdl <identifiersep> operation ) ; \n \t2 int c = operations . index <identifiersep> of ( wsdl <identifiersep> operation ) ; \n \t2 if ( c < 0 ) { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( wsdl <identifiersep> operation . get <identifiersep> name ( ) + <string_literal> ) ; } \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + control <identifiersep> ip + debug <identifiersep> command ) ; } \n \t2 try { \n \t3 final pair < boolean , string > result = ssh <identifiersep> helper . ssh <identifiersep> execute ( control <identifiersep> ip , default <identifiersep> domr <identifiersep> <identifier> , <string_literal> , get <identifiersep> system <identifiersep> vm <identifiersep> key <identifiersep> file ( ) , null , command ) ; \n \t3 if ( ! result . first ( ) ) { \n <ect>
\t6 log . warn ( <string_literal> , old <identifiersep> dest ) ; } } } \n \t2 } catch ( invalid <identifiersep> name <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , new object [ ] { old <identifiersep> binding . get <identifiersep> name ( ) , new <identifiersep> binding . get <identifiersep> name ( ) } , e ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 ! ( verify <identifiersep> strings <identifiersep> in <identifiersep> named <identifiersep> log <identifiersep> files ( \n \t6 new string [ ] { <string_literal> } , <string_literal> ) && \n \t6 verify <identifiersep> strings <identifiersep> in <identifiersep> named <identifiersep> log <identifiersep> files ( \n \t8 new string [ ] { <string_literal> } , <string_literal> ) ) ) { \n <ect>
<comment> \n \t1 static void log <identifiersep> failed <identifiersep> request ( log logger , http <identifiersep> uri <identifiersep> request request , http <identifiersep> host host , exception e ) { \n <ect>
\t1 case t : exception = > log . error ( <string_literal> , t ) } \n \t1 try { \n \t1 task <identifiersep> manager <identifiersep> local <identifiersep> state <identifiersep> stores <identifiersep> manager . shutdown ( ) \n \t1 } catch { \n <ect>
\t4 close <identifiersep> <identifier> <identifiersep> for ( msg . get <identifiersep> src ( ) ) ; \n \t4 try { \n \t5 handle <identifiersep> exception ( util . exception <identifiersep> from <identifiersep> buffer ( msg . get <identifiersep> raw <identifiersep> buffer ( ) , msg . get <identifiersep> offset ( ) , msg . get <identifiersep> length ( ) ) ) ; } \n \t4 catch ( throwable t ) { \n <ect>
\t2 <comment> \n \t2 timer <identifiersep> task = new idle <identifiersep> timer <identifiersep> task ( ) ; \n \t2 <comment> \n \t2 timer . schedule ( timer <identifiersep> task , retry <identifiersep> timer ) ; \n <ect>
\t4 engine . eval ( files . new <identifiersep> buffered <identifiersep> reader ( the <identifiersep> script <identifiersep> file . to <identifiersep> path ( ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ) ; \n \t4 final invocable invocable = ( invocable ) engine ; \n \t4 logger . debug ( <string_literal> , args ) ; \n \t4 final object result = invocable . invoke <identifiersep> function ( <string_literal> , args ) ; \n <ect>
\t2 validate . not <identifiersep> null ( out , <string_literal> ) ; <comment> \n \t2 try { \n \t3 set <identifiersep> writer ( new output <identifiersep> stream <identifiersep> writer ( out , charset ) ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t3 int bytes = is . read ( buffer ) ; \n \t3 string setting = new string ( buffer , 0 , bytes , utf <identifiersep> <number_literal> ) ; \n \t3 setting = setting . trim ( ) ; \n \t3 if ( bytes > 0 && integer . parse <identifiersep> int ( setting ) > <number_literal> ) { \n <ect>
\t2 script <identifiersep> pid . wait <identifiersep> for ( ) ; } \n \t2 <comment> \n \t2 timer . cancel ( ) ; \n \t2 <comment> \n <ect>
\t1 public void close ( ) { \n \t2 if ( shutting <identifiersep> down . compare <identifiersep> and <identifiersep> set ( false , true ) ) { \n \t3 log . info ( <string_literal> , pre <identifiersep> opened . size ( ) , queue . size ( ) ) ; \n \t3 try { \n <ect>
\t3 <comment> \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( <identifier> <identifiersep> show <identifiersep> conditions ) && boolean . false . equals ( <identifier> . evaluate ( render <identifiersep> context , this , <string_literal> . concat ( <identifier> <identifiersep> show <identifiersep> conditions ) . concat ( <string_literal> ) , <string_literal> ) ) ) { \n \t4 return false ; } \n \t2 } catch ( <identifier> <identifiersep> exception | framework <identifiersep> exception ex ) { \n <ect>
\t7 try { \n \t8 a <identifiersep> cms <identifiersep> ui . get <identifiersep> cms <identifiersep> object ( ) . delete <identifiersep> project ( project <identifiersep> id ) ; \n \t8 cms <identifiersep> app <identifiersep> <identifier> <identifiersep> ui . get ( ) . reload ( ) ; \n \t7 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t2 return obj ; } \n \t1 return arr ; } \n \t1 catch ( exception e ) \n \t1 { \n <ect>
\t2 if ( connection != null && ! connection . is <identifiersep> closed ( ) ) { \n \t3 try { \n \t4 connection . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 if ( callback <identifiersep> <identifier> == null ) { \n \t6 callback <identifiersep> <identifier> = new concurrent <identifiersep> hash <identifiersep> set < invoker < ? > > ( 1 ) ; \n \t6 callback <identifiersep> <identifier> . add ( invoker ) ; \n \t6 channel . set <identifiersep> attribute ( constants . channel <identifiersep> callback <identifiersep> key , callback <identifiersep> <identifier> ) ; } \n <ect>
<comment> \n \t1 boolean have <identifiersep> delivered ( ) { \n \t2 for ( array <identifiersep> blocking <identifiersep> queue < byte <identifiersep> buffer > queue : queue <identifiersep> send <identifiersep> map . values ( ) ) { \n <ect>
\t3 } ) ; \n \t3 channel <identifiersep> future cf = b . connect ( destination ) . channel ( ) . close <identifiersep> future ( ) ; \n \t3 boolean finished = cf . await ( timeout * <number_literal> , time <identifiersep> unit . milliseconds ) ; \n \t3 finished & = test <identifiersep> handler . latch . await ( timeout * <number_literal> , time <identifiersep> unit . milliseconds ) ; \n <ect>
\t5 assertion <identifiersep> element = document <identifiersep> util . get <identifiersep> element ( holder . get <identifiersep> saml <identifiersep> document ( ) , new q <identifiersep> name ( j <identifiersep> boss <identifiersep> saml <identifiersep> constants . assertion . get ( ) ) ) ; } \n \t4 boolean signed = assertion <identifiersep> util . is <identifiersep> signed <identifiersep> element ( assertion <identifiersep> element ) ; \n \t4 if ( ( config . is <identifiersep> want <identifiersep> assertions <identifiersep> signed ( ) && ! signed ) \n \t6 || ( signed && config . is <identifiersep> validate <identifiersep> signature ( ) && ! assertion <identifiersep> util . is <identifiersep> signature <identifiersep> valid ( assertion <identifiersep> element , get <identifiersep> idp <identifiersep> key <identifiersep> locator ( ) ) ) ) { \n <ect>
\t5 my <identifiersep> home <identifiersep> socket <identifiersep> factory . disconnect ( monitor <identifiersep> <identifier> ) ; \n \t4 } catch ( io <identifiersep> exception e1 ) { } \n \t4 retry ++ ; \n \t4 thread . sleep ( <number_literal> ) ; \n <ect>
\t1 wm <identifiersep> tez <identifiersep> session wm <identifiersep> tez <identifiersep> session = ensure <identifiersep> <identifier> <identifiersep> session ( session ) ; \n \t1 hive <identifiersep> conf session <identifiersep> conf = wm <identifiersep> tez <identifiersep> session . get <identifiersep> conf ( ) ; \n \t1 if ( session <identifiersep> conf == null ) { \n \t1 <comment> \n <ect>
\t2 final file <identifiersep> system <identifiersep> saml <identifiersep> id <identifiersep> p <identifiersep> metadata <identifiersep> generator generator = new file <identifiersep> system <identifiersep> saml <identifiersep> id <identifiersep> p <identifiersep> metadata <identifiersep> generator ( entity <identifiersep> id , this . resource <identifiersep> loader , \n \t3 server <identifiersep> prefix , scope , locator , writer ) ; \n \t2 boolean generate <identifiersep> metadata = true ; \n \t2 if ( ! locator . exists ( ) ) { \n <ect>
\t3 } else if ( is <identifiersep> <identifier> <identifiersep> jna <identifiersep> affinity <identifiersep> usable ( ) ) { \n \t4 logger . trace ( <string_literal> ) ; \n \t4 affinity <identifiersep> impl = <identifier> <identifiersep> jna <identifiersep> affinity . instance ; \n \t3 } else { \n <ect>
\t2 ) ; \n \t2 ensure <identifiersep> green ( <string_literal> ) ; \n \t2 cluster <identifiersep> state state = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . get ( ) . get <identifiersep> state ( ) ; \n \t2 index index = state . meta <identifiersep> data ( ) . index ( <string_literal> ) . get <identifiersep> index ( ) ; \n <ect>
\t2 int day <identifiersep> of <identifiersep> year = erx <identifiersep> timestamp <identifiersep> utilities . day <identifiersep> of <identifiersep> year ( value ) ; \n \t3 log . debug ( <string_literal> , day <identifiersep> of <identifiersep> year ) ; \n \t3 log . debug ( <string_literal> , day <identifiersep> of <identifiersep> <identifier> ) ; \n <ect>
\t1 logger . info ( <string_literal> + user + <string_literal> + number <identifiersep> <identifier> + 1 + <string_literal> \n \t2 + favorite <identifiersep> color ) ; \n \t1 } else { \n \t1 string favorite <identifiersep> color = get <identifiersep> favorite <identifiersep> color ( user ) ; \n <ect>
\t3 <identifier> . skip ( target <identifiersep> file . length ( ) ) ; \n \t3 int line <identifiersep> number = <identifier> . get <identifiersep> line <identifiersep> number ( ) + 1 ; \n \t3 interval = math . max ( line <identifiersep> number / point <identifiersep> count , 1 ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 } catch ( final sql <identifiersep> exception e ) { \n \t5 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + account <identifiersep> id + <string_literal> + vm <identifiersep> id , e ) ; } } \n \t2 } catch ( final sql <identifiersep> exception e ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , e ) ; } \n <ect>
\t6 logger . debug ( <string_literal> + template <identifiersep> svn <identifiersep> dir + <string_literal> + username + <string_literal> + user <identifiersep> directory + <string_literal> ) ; } \n \t5 final boolean <identifier> <identifiersep> file <identifiersep> date = true ; \n \t5 file <identifiersep> utils . copy <identifiersep> directory ( template <identifiersep> svn <identifiersep> dir , user <identifiersep> directory , <identifier> <identifiersep> file <identifiersep> date ) ; \n \t4 } else { \n <ect>
\t2 <identifier> = assertion <identifiersep> ccn <identifiersep> handle . open ( <identifier> ) ; \n \t2 <comment> \n \t2 read <identifiersep> face <identifiersep> id = get <identifiersep> face <identifiersep> id ( readhandle , <string_literal> ) ; \n \t2 listener <identifiersep> face <identifiersep> id = get <identifiersep> face <identifiersep> id ( <identifier> , <string_literal> ) ; \n <ect>
\t2 logger . debug ( <string_literal> , client , service ) ; \n \t2 if ( service != null ) { \n \t3 request . set <identifiersep> attribute ( cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> service , service . get <identifiersep> id ( ) ) ; \n \t3 if ( ! is <identifiersep> delegated <identifiersep> client <identifiersep> authorized <identifiersep> for <identifiersep> service ( client , service ) ) { \n <ect>
\t6 message message = send <identifiersep> session . create <identifiersep> message ( ) ; \n \t6 message . set <identifiersep> string <identifiersep> property ( <string_literal> , filter ? <string_literal> : <string_literal> ) ; \n \t6 producer . send ( topic , message ) ; \n \t6 if ( i > 0 && i % <number_literal> == 0 ) { \n <ect>
\t3 { \n \t4 var ret <identifiersep> val = sc . initiate <identifiersep> shutdown ( true , <string_literal> ) ; \n \t4 if ( ret <identifiersep> val != return <identifiersep> code . completed ) \n \t4 { \n <ect>
\t2 <comment> \n \t2 if ( ! must <identifiersep> be <identifiersep> jaxb <identifiersep> element ) { \n \t3 <comment> \n <ect>
\t2 super . shutdown ( ) ; } \n \t1 @ override \n \t1 public void create <identifiersep> test <identifiersep> topic ( string topic , int number <identifiersep> of <identifiersep> partitions , int replication <identifiersep> factor , properties topic <identifiersep> config ) { \n \t2 <comment> \n <ect>
\t2 throw e ; } } \n \t1 try { \n \t1 fire <identifiersep> usage <identifiersep> event ( snap , snap <identifiersep> <identifier> <identifiersep> event . for <identifiersep> snap <identifiersep> <identifier> <identifiersep> create ( snap . get <identifiersep> volume <identifiersep> size ( ) , vol <identifiersep> ready . get <identifiersep> <identifier> <identifiersep> id ( ) , snap . get <identifiersep> display <identifiersep> name ( ) ) ) ; \n \t1 } catch ( throwable report <identifiersep> ex ) { \n <ect>
\t2 if ( counter . get <identifiersep> repeat <identifiersep> counter ( ) >= <number_literal> ) { \n \t3 <comment> \n \t3 logger . info ( <string_literal> + counter . get <identifiersep> tuple <identifiersep> counter ( ) ) ; \n \t3 if ( counter . get <identifiersep> tuple <identifiersep> counter ( ) < = <number_literal> ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; \n \t3 if ( response <identifiersep> code == <number_literal> ) { \n \t4 input <identifiersep> stream is = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t4 map < string , string > success = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> } ) ; \n <ect>
\t8 list < string > list = util . parse <identifiersep> comma <identifiersep> <identifier> <identifiersep> strings ( endpoints ) ; \n \t8 if ( list != null ) { \n \t9 boolean changed = server <identifiersep> destinations . add <identifiersep> all ( list ) ; \n <ect>
\t4 return ; } \n \t3 <comment> \n \t3 if ( cancellation <identifiersep> handle . cancellation <identifiersep> requested ( ) ) \n \t3 { \n <ect>
<number_literal> request <identifiersep> format , \n <number_literal> request <identifiersep> routing <identifiersep> type , \n <number_literal> key ) ; \n <ect>
\t2 class <identifiersep> name = class <identifiersep> name . trim ( ) ; <comment> \n \t2 manager <identifiersep> factory factory = reflection <identifiersep> utils . new <identifiersep> instance ( \n \t3 ( class < ? extends manager <identifiersep> factory > ) \n \t3 conf . get <identifiersep> class <identifiersep> by <identifiersep> name ( class <identifiersep> name ) , conf ) ; \n <ect>
\t4 return retry ( cmd , num <identifiersep> retries ) ; \n \t3 } else { \n \t4 return new health <identifiersep> check <identifiersep> lb <identifiersep> config <identifiersep> answer ( <identifier> <identifiersep> lb ) ; } \n \t2 } catch ( final exception e ) { \n <ect>
\t2 mdc . put ( <string_literal> , <string_literal> ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 <comment> \n \t2 mdc . put ( <string_literal> , <string_literal> ) ; \n <ect>
\t5 add <identifiersep> alt <identifiersep> entry ( name , alt <identifiersep> name ) ; \n \t5 log . debug ( <string_literal> + name + <string_literal> + alt <identifiersep> name ) ; \n \t4 } catch ( jena <identifiersep> exception ex ) \n \t4 { \n <ect>
\t5 + <string_literal> + binding <identifiersep> config + <string_literal> ) ; } \n \t2 for ( string property : properties ) { \n \t3 string [ ] key <identifiersep> value <identifiersep> structure = property . split ( <string_literal> ) ; \n \t3 if ( key <identifiersep> value <identifiersep> structure . length != <number_literal> ) { \n <ect>
\t2 if ( unique <identifiersep> key == null ) { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + object ) ; } \n \t2 string key = erx <identifiersep> string <identifiersep> utilities . safe <identifiersep> identifier <identifiersep> name ( unique <identifiersep> key . to <identifiersep> string ( ) ) ; \n \t2 if ( <identifier> <identifiersep> debug <identifiersep> hash <identifiersep> codes != null && <identifier> <identifiersep> debug <identifiersep> hash <identifiersep> codes . boolean <identifiersep> value <identifiersep> in <identifiersep> component ( component ) ) { \n <ect>
\t2 processors == [ \n \t3 new annotation <identifiersep> processor <identifiersep> declaration ( <string_literal> , incremental <identifiersep> annotation <identifiersep> processor <identifiersep> type . unknown ) , \n \t3 new annotation <identifiersep> processor <identifiersep> declaration ( <string_literal> , incremental <identifiersep> annotation <identifiersep> processor <identifiersep> type . unknown ) \n \t2 ] \n <ect>
\t3 connection . close ( ) ; \n \t3 log <identifiersep> filter . log ( logger , log <identifiersep> level . debug , <string_literal> , connection ) ; \n \t2 } catch ( exception e ) { \n \t3 if ( ! suppress <identifiersep> warning ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + vm . get <identifiersep> instance <identifiersep> name ( ) + <string_literal> + vm . get <identifiersep> state ( ) + <string_literal> ) ; \n \t3 try { \n \t4 state <identifiersep> transit <identifiersep> to ( vm , virtual <identifiersep> machine . event . <identifier> <identifiersep> agent <identifiersep> power <identifiersep> on <identifiersep> report , vm . get <identifiersep> power <identifiersep> host <identifiersep> id ( ) ) ; \n \t3 } catch ( final no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t1 private byte [ ] [ ] citrix <identifiersep> creator <identifiersep> app = { { <identifier> , <identifier> , <identifier> , 0x00 } , { <identifier> , <identifier> , <identifier> , <identifier> } } ; <comment> \n \t1 @ override \n \t1 public format <identifiersep> info process ( string template <identifiersep> path , image <identifiersep> format format , string template <identifiersep> name ) throws internal <identifiersep> error <identifiersep> exception { \n \t2 if ( format != null ) { \n <ect>
\t3 return ; } \n \t2 this . root <identifiersep> ts = root <identifiersep> rev <identifiersep> for <identifiersep> local <identifiersep> instance . get <identifiersep> timestamp ( ) ; \n \t2 if ( ! replica <identifiersep> active ) { \n \t3 replica <identifiersep> active = true ; \n <ect>
\t4 conf . max = integer . parse <identifiersep> int ( array . get ( <string_literal> ) . to <identifiersep> string ( ) ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n \t4 logger . warn ( <string_literal> ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t6 al <identifiersep> delete <identifiersep> buffers ( buffer <identifiersep> id ) ; \n \t6 open <identifiersep> al <identifiersep> exception . check <identifiersep> state ( <string_literal> ) ; } \n \t4 } ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> health <identifiersep> response cluster <identifiersep> health = \n \t3 client ( ) . admin ( ) . cluster ( ) . health ( cluster <identifiersep> health <identifiersep> request ( ) . wait <identifiersep> for <identifiersep> green <identifiersep> status ( ) . wait <identifiersep> for <identifiersep> nodes ( <string_literal> ) ) . action <identifiersep> get ( ) ; \n <ect>
\t1 this . jaxb <identifiersep> present = server <identifiersep> config . get <identifiersep> class <identifiersep> load <identifiersep> config ( ) . is <identifiersep> javax <identifiersep> jaxb <identifiersep> present ( ) ; \n \t1 this . generate <identifiersep> ddl = server <identifiersep> config . is <identifiersep> ddl <identifiersep> generate ( ) ; \n \t1 this . create <identifiersep> only = server <identifiersep> config . is <identifiersep> ddl <identifiersep> create <identifiersep> only ( ) ; \n \t1 if ( ! server <identifiersep> config . get <identifiersep> tenant <identifiersep> mode ( ) . is <identifiersep> ddl <identifiersep> enabled ( ) && server <identifiersep> config . is <identifiersep> ddl <identifiersep> run ( ) ) { \n <ect>
\n \n ! function ( e , t ) { <string_literal> == typeof exports && <string_literal> == typeof module ? module . exports = t ( require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) ) : <string_literal> == typeof define && define . <identifier> ? define ( [ <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> ] , t ) : <string_literal> == typeof exports ? exports . <identifier> <identifiersep> ui <identifiersep> core = t ( require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) , require ( <string_literal> ) ) : e . <identifier> <identifiersep> ui <identifiersep> core = t ( e [ <string_literal> ] , e [ <string_literal> ] , e . <identifier> , e . immutable , e [ <string_literal> ] , e [ <string_literal> ] , e [ <string_literal> ] , e . <identifier> , e . xml , e . <identifier> , e . <identifier> , e [ <string_literal> ] , e . <identifier> , e [ <string_literal> ] , e [ <string_literal> ] , e [ <string_literal> ] , e [ <string_literal> ] , e . <identifier> , e [ <string_literal> ] , e [ <string_literal> ] , e [ <string_literal> ] , e [ <string_literal> ] , e [ <string_literal> ] ) } ( this , function ( e , t , r , n , o , a , u , i , s , c , l , p , f , d , y , h , m , v , b , g , <identifier> <identifiersep> <identifier> , e , j ) { return function ( e ) { function t ( n ) { if ( r [ n ] ) return r [ n ] . exports ; var o = r [ n ] = { exports : { } , id : n , loaded : ! 1 } ; return e [ n ] . call ( o . exports , o , o . exports , t ) , o . loaded = ! 0 , o . exports } var r = { } ; return t . m = e , t . c = r , t . p = <string_literal> , t ( 0 ) } ( function ( e ) { for ( var t in e ) if ( object . prototype . has <identifiersep> own <identifiersep> property . call ( e , t ) ) switch ( typeof e [ t ] ) { case <string_literal> : break ; case <string_literal> : e [ t ] = function ( t ) { var r = t . slice ( 1 ) , n = e [ t [ 0 ] ] ; return function ( e , t , o ) { n . apply ( this , [ e , t , o ] . concat ( r ) ) } } ( e [ t ] ) ; break ; default : e [ t ] = e [ e [ t ] ] } return e } ( [ function ( e , t , r ) { r ( 1 ) , r ( <number_literal> ) , e . exports = r ( <number_literal> ) } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t ) { } , function ( e , t , r ) { <string_literal> ; function n ( e ) { if ( e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ) return e ; var t = { } ; if ( null != e ) for ( var r in e ) object . prototype . has <identifiersep> own <identifiersep> property . call ( e , r ) && ( t [ r ] = e [ r ] ) ; return t . default = e , t } function o ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } var a = <string_literal> == typeof symbol && <string_literal> == typeof symbol . iterator ? function ( e ) { return typeof e } : function ( e ) { return e && <string_literal> == typeof symbol && e . constructor == = symbol && e != = symbol . prototype ? <string_literal> : typeof e } , u = r ( <number_literal> ) , i = o ( u ) , s = r ( <number_literal> ) , c = o ( s ) , l = r ( <number_literal> ) , p = o ( l ) , f = r ( <number_literal> ) , d = n ( f ) , y = r ( <number_literal> ) , h = r ( <number_literal> ) ; e . exports = function ( e ) { var t = { dom <identifiersep> id : null , spec : { } , url : <string_literal> , layout : <string_literal> , configs : { validator <identifiersep> url : <string_literal> } , <identifier> : [ ] , plugins : [ ] , fn : { } , components : { } , state : { } , store : { } } , r = ( 0 , i . default ) ( { } , t , e ) , n = ( 0 , i . default ) ( { } , r . store , { system : { configs : r . configs } , plugins : r . <identifier> , state : { layout : { layout : r . layout } , spec : { spec : <string_literal> , url : r . url } } } ) , o = function ( ) { return { fn : r . fn , components : r . components , state : r . state } } , u = new c . default ( n ) ; u . register ( [ r . plugins , o ] ) ; var s = u . get <identifiersep> system ( ) , l = ( 0 , h . parse <identifiersep> <identifier> ) ( ) , p = function ( ) { if ( <string_literal> != = ( <string_literal> == typeof r ? <string_literal> : a ( r ) ) ) return s ; var e = s . spec <identifiersep> selectors . get <identifiersep> local <identifiersep> config ? s . spec <identifiersep> selectors . get <identifiersep> local <identifiersep> config ( ) : { } , t = ( 0 , i . default ) ( { } , r , e , l ) ; return u . set <identifiersep> configs ( ( 0 , y . filter <identifiersep> configs ) ( t ) ) , ! l . url && <string_literal> == = a ( t . spec ) && object . keys ( t . spec ) . length ? ( s . spec <identifiersep> actions . update <identifiersep> url ( <string_literal> ) , s . spec <identifiersep> actions . update <identifiersep> loading <identifiersep> status ( <string_literal> ) , s . spec <identifiersep> actions . update <identifiersep> spec ( json . <identifier> ( t . spec ) ) ) : s . spec <identifiersep> actions . download && t . url && ( s . spec <identifiersep> actions . update <identifiersep> url ( t . url ) , s . spec <identifiersep> actions . download ( t . url ) ) , t . dom <identifiersep> id ? s . render ( t . dom <identifiersep> id , <string_literal> ) : console . error ( <string_literal> ) , s } ; if ( ! s . spec <identifiersep> actions . get <identifiersep> config <identifiersep> by <identifiersep> url || s . spec <identifiersep> actions . get <identifiersep> config <identifiersep> by <identifiersep> url && ! s . spec <identifiersep> actions . get <identifiersep> config <identifiersep> by <identifiersep> url ( p ) ) return p ( ) } , e . exports . <identifier> = { <identifier> : p . default } , e . exports . plugins = d } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( e , t , r ) { return t in e ? object . define <identifiersep> property ( e , t , { value : r , <identifier> : ! 0 , configurable : ! 0 , writable : ! 0 } ) : e [ t ] = r , e } function a ( e , t ) { if ( ! ( e instanceof t ) ) throw new type <identifiersep> error ( <string_literal> ) } function u ( e , t , r ) { var n = [ ( 0 , s . system <identifiersep> <identifier> <identifiersep> <identifier> ) ( r ) ] , o = t . default . <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> extension <identifiersep> compose <identifiersep> <identifier> <identifiersep> <identifier> || y . compose ; return ( 0 , y . create <identifiersep> store ) ( e , t , o ( y . apply <identifiersep> <identifier> . apply ( void 0 , n ) ) ) } function i ( e , t ) { return ( 0 , s . is <identifiersep> object ) ( e ) && ! ( 0 , s . is <identifiersep> array ) ( e ) ? e : ( 0 , s . is <identifiersep> func ) ( e ) ? i ( e ( t ) , t ) : ( 0 , s . is <identifiersep> array ) ( e ) ? e . map ( function ( e ) { return i ( e , t ) } ) . reduce ( s , { } ) : { } } function s ( ) { var e = arguments . length > 0 && void 0 != = arguments [ 0 ] ? arguments [ 0 ] : { } , t = arguments . length > 1 && void 0 != = arguments [ 1 ] ? arguments [ 1 ] : { } ; if ( ! ( 0 , s . is <identifiersep> object ) ( e ) ) return { } ; if ( ! ( 0 , s . is <identifiersep> object ) ( t ) ) return e ; var r = e . state <identifiersep> plugins ; if ( ( 0 , s . is <identifiersep> object ) ( r ) ) for ( var n in r ) { var o = r [ n ] ; if ( ( 0 , s . is <identifiersep> object ) ( o ) && ( 0 , s . is <identifiersep> object ) ( o . wrap <identifiersep> actions ) ) { var a = o . wrap <identifiersep> actions ; for ( var u in a ) { var i = a [ u ] ; array . is <identifiersep> array ( i ) || ( i = [ i ] , a [ u ] = i ) , t && t . state <identifiersep> plugins && t . state <identifiersep> plugins [ n ] && t . state <identifiersep> plugins [ n ] . wrap <identifiersep> actions && t . state <identifiersep> plugins [ n ] . wrap <identifiersep> actions [ u ] && ( t . state <identifiersep> plugins [ n ] . wrap <identifiersep> actions [ u ] = a [ u ] . concat ( t . state <identifiersep> plugins [ n ] . wrap <identifiersep> actions [ u ] ) ) } } } return ( 0 , b . default ) ( e , t ) } function c ( e ) { var t = ( 0 , s . obj <identifiersep> map ) ( e , function ( e ) { return e . reducers } ) ; return l ( t ) } function l ( e ) { var t = object . keys ( e ) . reduce ( function ( t , r ) { return t [ r ] = p ( e [ r ] ) , t } , { } ) ; return object . keys ( t ) . length ? ( 0 , g . combine <identifiersep> reducers ) ( t ) : x } function p ( e ) { return function ( ) { var t = arguments . length > 0 && void 0 != = arguments [ 0 ] ? arguments [ 0 ] : new h . map , r = arguments [ 1 ] ; if ( ! e ) return t ; var n = e [ r . type ] ; return n ? n ( t , r ) : t } } function f ( e , t , r ) { var n = u ( e , t , r ) ; return n } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) ; var d = function ( ) { function e ( e , t ) { for ( var r = 0 ; r < t . length ; r ++ ) { var n = t [ r ] ; n . <identifier> = n . <identifier> || ! 1 , n . configurable = ! 0 , <string_literal> in n && ( n . writable = ! 0 ) , object . define <identifiersep> property ( e , n . key , n ) } } return function ( t , r , n ) { return r && e ( t . prototype , r ) , n && e ( t , n ) , t } } ( ) , y = r ( <number_literal> ) , h = r ( <number_literal> ) , m = n ( h ) , v = r ( <number_literal> ) , b = n ( v ) , g = r ( <number_literal> ) , <identifier> <identifiersep> <identifier> = r ( <number_literal> ) , e = n ( <identifier> <identifiersep> <identifier> ) , j = r ( <number_literal> ) , w = n ( j ) , o = r ( <number_literal> ) , p = r ( <number_literal> ) , t = n ( p ) , s = r ( <number_literal> ) , x = function ( e ) { return e } , c = function ( ) { function e ( ) { var t = arguments . length > 0 && void 0 != = arguments [ 0 ] ? arguments [ 0 ] : { } ; a ( this , e ) , ( 0 , b . default ) ( this , { state : { } , plugins : [ ] , system : { configs : { } , fn : { } , components : { } , root <identifiersep> <identifier> : { } , state <identifiersep> plugins : { } } , bound <identifiersep> system : { } , <identifier> : { } } , t ) , this . get <identifiersep> system = this . <identifier> <identifiersep> get <identifiersep> system . bind ( this ) , this . store = f ( x , ( 0 , h . from <identifiersep> js ) ( this . state ) , this . get <identifiersep> system ) , this . build <identifiersep> system ( ! 1 ) , this . register ( this . plugins ) } return d ( e , [ { key : <string_literal> , value : function ( ) { return this . store } } , { key : <string_literal> , value : function ( e ) { var t = ! ( arguments . length > 1 && void 0 != = arguments [ 1 ] ) || arguments [ 1 ] , r = i ( e , this . get <identifiersep> system ( ) ) ; s ( this . system , r ) , t && this . build <identifiersep> system ( ) } } , { key : <string_literal> , value : function ( ) { var e = ! ( arguments . length > 0 && void 0 != = arguments [ 0 ] ) || arguments [ 0 ] , t = this . get <identifiersep> store ( ) . dispatch , r = this . get <identifiersep> store ( ) . get <identifiersep> state ; this . bound <identifiersep> system = ( 0 , e . default ) ( { } , this . get <identifiersep> root <identifiersep> <identifier> ( ) , this . get <identifiersep> wrapped <identifiersep> and <identifiersep> bound <identifiersep> actions ( t ) , this . get <identifiersep> bound <identifiersep> selectors ( r , this . get <identifiersep> system ) , this . get <identifiersep> state <identifiersep> <identifier> ( r ) , this . get <identifiersep> fn ( ) , this . get <identifiersep> configs ( ) ) , e && this . rebuild <identifiersep> reducer ( ) } } , { key : <string_literal> , value : function ( ) { return this . bound <identifiersep> system } } , { key : <string_literal> , value : function ( ) { return ( 0 , e . default ) ( { get <identifiersep> system : this . get <identifiersep> system , get <identifiersep> store : this . get <identifiersep> store . bind ( this ) , get <identifiersep> components : this . get <identifiersep> components . bind ( this ) , get <identifiersep> state : this . get <identifiersep> store ( ) . get <identifiersep> state , get <identifiersep> configs : this . <identifier> <identifiersep> get <identifiersep> configs . bind ( this ) , <identifier> : m . default } , this . system . root <identifiersep> <identifier> || { } ) } } , { key : <string_literal> , value : function ( ) { return this . system . configs } } , { key : <string_literal> , value : function ( ) { return { configs : this . system . configs } } } , { key : <string_literal> , value : function ( e ) { this . system . configs = e } } , { key : <string_literal> , value : function ( ) { this . store . replace <identifiersep> reducer ( c ( this . system . state <identifiersep> plugins ) ) } } , { key : <string_literal> , value : function ( e ) { var t = e [ 0 ] . to <identifiersep> upper <identifiersep> case ( ) + e . slice ( 1 ) ; return ( 0 , s . obj <identifiersep> reduce ) ( this . system . state <identifiersep> plugins , function ( r , n ) { var a = r [ e ] ; if ( a ) return o ( { } , n + t , a ) } ) } } , { key : <string_literal> , value : function ( ) { return this . get <identifiersep> type ( <string_literal> ) } } , { key : <string_literal> , value : function ( ) { var e = this . get <identifiersep> type ( <string_literal> ) ; return ( 0 , s . obj <identifiersep> map ) ( e , function ( e ) { return ( 0 , s . obj <identifiersep> reduce ) ( e , function ( e , t ) { if ( ( 0 , s . is <identifiersep> fn ) ( e ) ) return o ( { } , t , e ) } ) } ) } } , { key : <string_literal> , value : function ( e ) { var t = this , r = this . get <identifiersep> bound <identifiersep> actions ( e ) ; return ( 0 , s . obj <identifiersep> map ) ( r , function ( e , r ) { var n = t . system . state <identifiersep> plugins [ r . slice ( 0 , - <number_literal> ) ] . wrap <identifiersep> actions ; return n ? ( 0 , s . obj <identifiersep> map ) ( e , function ( e , r ) { var o = n [ r ] ; return o ? ( array . is <identifiersep> array ( o ) || ( o = [ o ] ) , o . reduce ( function ( e , r ) { var n = function ( ) { return r ( e , t . get <identifiersep> system ( ) ) . apply ( void 0 , arguments ) } ; if ( ! ( 0 , s . is <identifiersep> fn ) ( n ) ) throw new type <identifiersep> error ( <string_literal> ) ; return n } , e || function . prototype ) ) : e } ) : e } ) } } , { key : <string_literal> , value : function ( e ) { return object . keys ( this . system . state <identifiersep> plugins ) . reduce ( function ( t , r ) { return t [ r ] = e . get ( r ) , t } , { } ) } } , { key : <string_literal> , value : function ( e ) { return object . keys ( this . system . state <identifiersep> plugins ) . reduce ( function ( t , r ) { return t [ r ] = function ( ) { return e ( ) . get ( r ) } , t } , { } ) } } , { key : <string_literal> , value : function ( ) { return { fn : this . system . fn } } } , { key : <string_literal> , value : function ( e ) { return <string_literal> != typeof e ? this . system . components [ e ] : this . system . components } } , { key : <string_literal> , value : function ( e , t ) { return ( 0 , s . obj <identifiersep> map ) ( this . get <identifiersep> selectors ( ) , function ( r , n ) { var o = [ n . slice ( 0 , - <number_literal> ) ] , a = function ( ) { return e ( ) . get <identifiersep> in ( o ) } ; return ( 0 , s . obj <identifiersep> map ) ( r , function ( e ) { return function ( ) { for ( var r = arguments . length , n = array ( r ) , o = 0 ; o < r ; o ++ ) n [ o ] = arguments [ o ] ; var u = e . apply ( null , [ a ( ) ] . concat ( n ) ) ; return <string_literal> == typeof u && ( u = u ( t ( ) ) ) , u } } ) } ) } } , { key : <string_literal> , value : function ( e ) { e = e || this . get <identifiersep> store ( ) . dispatch ; var t = function e ( t ) { return <string_literal> != typeof t ? ( 0 , s . obj <identifiersep> map ) ( t , function ( t ) { return e ( t ) } ) : function ( ) { var e = null ; try { e = t . apply ( void 0 , arguments ) } catch ( t ) { e = { type : o . new <identifiersep> thrown <identifiersep> err , error : ! 0 , payload : ( 0 , w . default ) ( t ) } } finally { return e } } } ; return ( 0 , s . obj <identifiersep> map ) ( this . get <identifiersep> actions ( ) , function ( r ) { return ( 0 , y . bind <identifiersep> action <identifiersep> <identifier> ) ( t ( r ) , e ) } ) } } , { key : <string_literal> , value : function ( ) { var e = this ; return function ( ) { var t = ( 0 , e . default ) ( { } , e . get <identifiersep> system ( ) ) ; return t } } } , { key : <string_literal> , value : function ( e ) { var t = this ; return function ( r ) { return ( 0 , b . default ) ( { } , t . get <identifiersep> wrapped <identifiersep> and <identifiersep> bound <identifiersep> actions ( r ) , t . get <identifiersep> fn ( ) , e ) } } } ] ) , e } ( ) ; t . default = c } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( e , t ) { return { type : p , payload : { action : t , error : ( 0 , l . default ) ( e ) } } } function a ( e ) { return { type : f , payload : e } } function u ( e ) { return { type : d , payload : e } } function i ( e ) { return { type : y , payload : e } } function s ( ) { var e = arguments . length > 0 && void 0 != = arguments [ 0 ] ? arguments [ 0 ] : { } ; return { type : h , payload : e } } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . clear = t . new <identifiersep> auth <identifiersep> err = t . new <identifiersep> spec <identifiersep> err = t . new <identifiersep> thrown <identifiersep> err <identifiersep> batch = t . new <identifiersep> thrown <identifiersep> err = void 0 , t . new <identifiersep> thrown <identifiersep> err = o , t . new <identifiersep> thrown <identifiersep> err <identifiersep> batch = a , t . new <identifiersep> spec <identifiersep> err = u , t . new <identifiersep> auth <identifiersep> err = i , t . clear = s ; var c = r ( <number_literal> ) , l = n ( c ) , p = t . new <identifiersep> thrown <identifiersep> err = <string_literal> , f = t . new <identifiersep> thrown <identifiersep> err <identifiersep> batch = <string_literal> , d = t . new <identifiersep> spec <identifiersep> err = <string_literal> , y = t . new <identifiersep> auth <identifiersep> err = <string_literal> , h = t . clear = <string_literal> } , function ( e , t ) { <string_literal> ; function r ( ) { var e = { location : { } , history : { } , open : function ( ) { } , close : function ( ) { } } ; if ( <string_literal> == typeof window ) return e ; try { e = window ; var t = [ <string_literal> , <string_literal> , <string_literal> ] , r = ! 0 , n = ! 1 , o = void 0 ; try { for ( var a , u = t [ symbol . iterator ] ( ) ; ! ( r = ( a = u . next ( ) ) . done ) ; r = ! 0 ) { var i = a . value ; i in window && ( e [ i ] = window [ i ] ) } } catch ( e ) { n = ! 0 , o = e } finally { try { ! r && u . return && u . return ( ) } finally { if ( n ) throw o } } } catch ( e ) { console . error ( e ) } return e } e . exports = r ( ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( e ) { return l ( e ) ? v ( e ) ? e . to <identifiersep> object ( ) : e : { } } function a ( e ) { return e ? e . to <identifiersep> array ? e . to <identifiersep> array ( ) : s ( e ) : [ ] } function u ( e ) { return v ( e ) ? e : l ( e ) ? array . is <identifiersep> array ( e ) ? s . default . seq ( e ) . map ( u ) . to <identifiersep> list ( ) : s . default . seq ( e ) . map ( u ) . to <identifiersep> ordered <identifiersep> map ( ) : e } function i ( e , t ) { var r = { } ; return object . keys ( e ) . filter ( function ( t ) { return <string_literal> == typeof e [ t ] } ) . for <identifiersep> each ( function ( n ) { return r [ n ] = e [ n ] . bind ( null , t ) } ) , r } function s ( e ) { return array . is <identifiersep> array ( e ) ? e : [ e ] } function c ( e ) { return <string_literal> == typeof e } function l ( e ) { return ! ! e && <string_literal> == = ( <string_literal> == typeof e ? <string_literal> : p ( e ) ) } function p ( e ) { return <string_literal> == typeof e } function f ( e ) { return array . is <identifiersep> array ( e ) } function d ( e , t ) { return object . keys ( e ) . reduce ( function ( r , n ) { return r [ n ] = t ( e [ n ] , n ) , r } , { } ) } function y ( e , t ) { return object . keys ( e ) . reduce ( function ( r , n ) { var o = t ( e [ n ] , n ) ; return o && <string_literal> == = ( <string_literal> == typeof o ? <string_literal> : p ( o ) ) && ( 0 , c . default ) ( r , o ) , r } , { } ) } function h ( e ) { return function ( t ) { t . dispatch , t . get <identifiersep> state ; return function ( t ) { return function ( r ) { return <string_literal> == typeof r ? r ( e ( ) ) : t ( r ) } } } } function m ( e ) { var t = e . key <identifiersep> seq ( ) ; return t . contains ( b ) ? b : t . filter ( function ( e ) { return <string_literal> == = ( e + <string_literal> ) [ 0 ] } ) . sort ( ) . first ( ) } function v ( e , t ) { if ( ! s . default . iterable . is <identifiersep> iterable ( e ) ) return s . default . list ( ) ; var r = e . get <identifiersep> in ( array . is <identifiersep> array ( t ) ? t : [ t ] ) ; return s . default . list . is <identifiersep> list ( r ) ? r : s . default . list ( ) } function b ( e ) { var t , r , n , o , a , u , i , s , c , l , p , f ; for ( l = / ( > ) ( < ) ( \\ <comment> <string_literal> span <string_literal> style <string_literal> color : # <number_literal> ; font - weight : <identifier> ; <string_literal> <string_literal> <string_literal> color : # <number_literal> ; <string_literal> <string_literal> <string_literal> / <string_literal> < <string_literal> ' == f , <string_literal> == f , f + p + c [ l + 1 ] + c [ l + <number_literal> ] == <string_literal> , f + p == <string_literal> , f + p == <string_literal> , <string_literal> == f ] [ -- y ] ; ) ; d += f } } ; return a ( e ) } function <identifier> <identifiersep> <identifier> ( e ) { var t = arguments . length > 1 && void 0 != = arguments [ 1 ] ? arguments [ 1 ] : <string_literal> , r = arguments . length > <number_literal> && void 0 != = arguments [ <number_literal> ] ? arguments [ <number_literal> ] : s . default . map ( ) ; if ( ! s . default . map . is <identifiersep> map ( e ) || ! e . size ) return s . default . list ( ) ; if ( array . is <identifiersep> array ( t ) || ( t = [ t ] ) , t . length < 1 ) return e . merge ( r ) ; var n = s . default . list ( ) , o = t [ 0 ] , a = ! 0 , u = ! 1 , i = void 0 ; try { for ( var s , c = e . entries ( ) [ symbol . iterator ] ( ) ; ! ( a = ( s = c . next ( ) ) . done ) ; a = ! 0 ) { var l = s . value , p = o ( l , <number_literal> ) , f = p [ 0 ] , d = p [ 1 ] , y = <identifier> <identifiersep> <identifier> ( d , t . slice ( 1 ) , r . set ( o , f ) ) ; n = s . default . list . is <identifiersep> list ( y ) ? n . concat ( y ) : n . push ( y ) } } catch ( e ) { u = ! 0 , i = e } finally { try { ! a && c . return && c . return ( ) } finally { if ( u ) throw i } } return n } function e ( e ) { return ( 0 , n . default ) ( ( 0 , q . default ) ( e ) ) } function j ( e ) { return e ( e . replace ( / \\ . [ ^ . \\ / ] * $ / , <string_literal> ) ) } function w ( e , t , r ) { return ! ! r . find ( function ( r ) { return ! ( 0 , a . default ) ( e [ r ] , t [ r ] ) } ) } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . parse <identifiersep> <identifier> = t . get <identifiersep> sample <identifiersep> schema = t . validate <identifiersep> param = t . prop <identifiersep> checker = t . error <identifiersep> log = t . <identifier> = t . is <identifiersep> immutable = void 0 ; var o = function ( ) { function e ( e , t ) { var r = [ ] , n = ! 0 , o = ! 1 , a = void 0 ; try { for ( var u , i = e [ symbol . iterator ] ( ) ; ! ( n = ( u = i . next ( ) ) . done ) && ( r . push ( u . value ) , ! t || r . length != = t ) ; n = ! 0 ) ; } catch ( e ) { o = ! 0 , a = e } finally { try { ! n && i . return && i . return ( ) } finally { if ( o ) throw a } } return r } return function ( t , r ) { if ( array . is <identifiersep> array ( t ) ) return t ; if ( symbol . iterator in object ( t ) ) return e ( t , r ) ; throw new type <identifiersep> error ( <string_literal> ) } } ( ) , p = <string_literal> == typeof symbol && <string_literal> == typeof symbol . iterator ? function ( e ) { return typeof e } : function ( e ) { return e && <string_literal> == typeof symbol && e . constructor == = symbol && e != = symbol . prototype ? <string_literal> : typeof e } ; t . <identifier> = o , t . <identifier> = a , t . from <identifiersep> js <identifiersep> ordered = u , t . bind <identifiersep> to <identifiersep> state = i , t . normalize <identifiersep> array = s , t . is <identifiersep> fn = c , t . is <identifiersep> object = l , t . is <identifiersep> func = p , t . is <identifiersep> array = f , t . obj <identifiersep> map = d , t . obj <identifiersep> reduce = y , t . system <identifiersep> <identifier> <identifiersep> <identifier> = h , t . default <identifiersep> status <identifiersep> code = m , t . get <identifiersep> list = v , t . format <identifiersep> xml = b , t . highlight = g , t . map <identifiersep> to <identifiersep> list = <identifier> <identifiersep> <identifier> , t . <identifier> <identifiersep> case = e , t . <identifier> <identifiersep> case <identifiersep> filename = j , t . <identifier> <identifiersep> equal <identifiersep> keys = w ; var t = r ( <number_literal> ) , s = n ( t ) , x = r ( <number_literal> ) , c = n ( x ) , k = r ( <number_literal> ) , a = n ( k ) , r = r ( <number_literal> ) , q = n ( r ) , m = r ( <number_literal> ) , n = n ( m ) , i = r ( <number_literal> ) , z = n ( i ) , u = r ( <number_literal> ) , l = n ( u ) , d = r ( <number_literal> ) , j = n ( d ) , f = r ( <number_literal> ) , b = <string_literal> , v = t . is <identifiersep> immutable = function ( e ) { return s . default . iterable . is <identifiersep> iterable ( e ) } , w = ( t . <identifier> = z . default , t . error <identifiersep> log = function ( e ) { return function ( ) { return function ( t ) { return function ( r ) { try { t ( r ) } catch ( t ) { e ( ) . err <identifiersep> actions . new <identifiersep> thrown <identifiersep> err ( t , r ) } } } } } , t . prop <identifiersep> checker = function ( e , t ) { var r = arguments . length > <number_literal> && void 0 != = arguments [ <number_literal> ] ? arguments [ <number_literal> ] : [ ] , n = arguments . length > <number_literal> && void 0 != = arguments [ <number_literal> ] ? arguments [ <number_literal> ] : [ ] ; return object . keys ( e ) . length != = object . keys ( t ) . length || ( ( 0 , l . default ) ( e , function ( e , r ) { if ( n . includes ( r ) ) return ! 1 ; var o = t [ r ] ; return s . default . iterable . is <identifiersep> iterable ( e ) ? ! s . default . is ( e , o ) : ( <string_literal> != = ( <string_literal> == typeof e ? <string_literal> : p ( e ) ) || <string_literal> != = ( <string_literal> == typeof o ? <string_literal> : p ( o ) ) ) && e != = o } ) || r . some ( function ( r ) { return ! ( 0 , j . default ) ( e [ r ] , t [ r ] ) } ) ) } , function ( e ) { if ( ! / ^ \\ d + ( . ? \\ d + ) ? $ / . test ( e ) ) return <string_literal> } ) , h = function ( e ) { if ( ! / ^ \\ d + $ / . test ( e ) ) return <string_literal> } ; t . validate <identifiersep> param = function ( e , t ) { var r = [ ] , n = t && <string_literal> == = e . get ( <string_literal> ) ? e . get ( <string_literal> ) : e . get ( <string_literal> ) , o = e . get ( <string_literal> ) , a = e . get ( <string_literal> ) ; if ( o && ( ! n || <string_literal> == = a && array . is <identifiersep> array ( n ) && ! n . length ) ) return r . push ( <string_literal> ) , r ; if ( ! n ) return r ; if ( <string_literal> == = a ) { var u = w ( n ) ; if ( ! u ) return r ; r . push ( u ) } else if ( <string_literal> == = a ) { var i = h ( n ) ; if ( ! i ) return r ; r . push ( i ) } else if ( <string_literal> == = a ) { var s = void 0 ; if ( ! n . count ( ) ) return r ; s = e . get <identifiersep> in ( [ <string_literal> , <string_literal> ] ) , n . for <identifiersep> each ( function ( e , t ) { var n = void 0 ; <string_literal> == = s ? n = w ( e ) : <string_literal> == = s && ( n = h ( e ) ) , n && r . push ( { index : t , error : n } ) } ) } return r } , t . get <identifiersep> sample <identifiersep> schema = function ( e ) { var t = arguments . length > 1 && void 0 != = arguments [ 1 ] ? arguments [ 1 ] : <string_literal> , r = arguments . length > <number_literal> && void 0 != = arguments [ <number_literal> ] ? arguments [ <number_literal> ] : { } ; if ( / xml / . test ( t ) ) { if ( ! e . xml || ! e . xml . name ) { if ( e . xml = e . xml || { } , ! e . <identifier> ) return e . type || e . items || e . properties || e . additional <identifiersep> properties ? ' < ? xml version = <string_literal> encoding = <string_literal> ? > \\ n < ! -- xml example cannot be generated -- > ' : null ; var n = e . <identifier> . match ( / \\ s * \\ / ( \\ s + ) $ / ) ; e . xml . name = n [ 1 ] } return ( 0 , f . <identifier> <identifiersep> create <identifiersep> xml <identifiersep> example ) ( e , r ) } return json . <identifier> ( ( 0 , f . <identifier> <identifiersep> sample <identifiersep> from <identifiersep> schema ) ( e , r ) , null , <number_literal> ) } , t . parse <identifiersep> <identifier> = function ( ) { var e = { } , t = window . location . search ; if ( <string_literal> != t ) { var r = t . <identifier> ( 1 ) . split ( <string_literal> ) ; for ( var n in r ) n = r [ n ] . split ( <string_literal> ) , e [ decode <identifiersep> uri <identifiersep> component ( n [ 0 ] ) ] = decode <identifiersep> uri <identifiersep> component ( n [ 1 ] ) } return e } } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t , r ) { var n = r ( <number_literal> ) , o = r ( <number_literal> ) , a = o ( function ( e , t , r ) { return t = t . to <identifiersep> lower <identifiersep> case ( ) , e + ( r ? n ( t ) : t ) } ) ; e . exports = a } , function ( e , t , r ) { function n ( e ) { return a ( o ( e ) . to <identifiersep> lower <identifiersep> case ( ) ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { function n ( e ) { return null == e ? <string_literal> : o ( e ) } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { function n ( e ) { if ( <string_literal> == typeof e ) return e ; if ( u ( e ) ) return a ( e , n ) + <string_literal> ; if ( i ( e ) ) return l ? l . call ( e ) : <string_literal> ; var t = e + <string_literal> ; return <string_literal> == t && 1 / e == - s ? <string_literal> : t } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = r ( <number_literal> ) , s = 1 / 0 , c = o ? o . prototype : void 0 , l = c ? c . to <identifiersep> string : void 0 ; e . exports = n } , function ( e , t , r ) { var n = r ( <number_literal> ) , o = n . symbol ; e . exports = o } , function ( e , t , r ) { var n = r ( <number_literal> ) , o = <string_literal> == typeof self && self && self . object == = object && self , a = n || o || function ( <string_literal> ) ( ) ; e . exports = a } , function ( e , t ) { ( function ( t ) { var r = <string_literal> == typeof t && t && t . object == = object && t ; e . exports = r } ) . call ( t , function ( ) { return this } ( ) ) } , function ( e , t ) { function r ( e , t ) { for ( var r = - 1 , n = null == e ? 0 : e . length , o = array ( n ) ; ++ r < n ; ) o [ r ] = t ( e [ r ] , r , e ) ; return o } e . exports = r } , function ( e , t ) { var r = array . is <identifiersep> array ; e . exports = r } , function ( e , t , r ) { function n ( e ) { return <string_literal> == typeof e || a ( e ) && o ( e ) == u } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = <string_literal> ; e . exports = n } , function ( e , t , r ) { function n ( e ) { return null == e ? void 0 == = e ? s : i : ( e = object ( e ) , c && c in e ? a ( e ) : u ( e ) ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = <string_literal> , s = <string_literal> , c = o ? o . to <identifiersep> string <identifiersep> tag : void 0 ; e . exports = n } , function ( e , t , r ) { function n ( e ) { var t = u . call ( e , s ) , r = e [ s ] ; try { e [ s ] = void 0 ; var n = ! 0 } catch ( e ) { } var o = i . call ( e ) ; return n && ( t ? e [ s ] = r : delete e [ s ] ) , o } var o = r ( <number_literal> ) , a = object . prototype , u = a . has <identifiersep> own <identifiersep> property , i = a . to <identifiersep> string , s = o ? o . to <identifiersep> string <identifiersep> tag : void 0 ; e . exports = n } , function ( e , t ) { function r ( e ) { return o . call ( e ) } var n = object . prototype , o = n . to <identifiersep> string ; e . exports = r } , function ( e , t ) { function r ( e ) { return null != e && <string_literal> == typeof e } e . exports = r } , function ( e , t , r ) { var n = r ( <number_literal> ) , o = n ( <string_literal> ) ; e . exports = o } , function ( e , t , r ) { function n ( e ) { return function ( t ) { t = i ( t ) ; var r = a ( t ) ? u ( t ) : void 0 , n = r ? r [ 0 ] : t . char <identifiersep> at ( 0 ) , s = r ? o ( r , 1 ) . join ( <string_literal> ) : t . slice ( 1 ) ; return n [ e ] ( ) + s } } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { function n ( e , t , r ) { var n = e . length ; return r = void 0 == = r ? n : r , ! t && r >= n ? e : o ( e , t , r ) } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e , t , r ) { var n = - 1 , o = e . length ; t < 0 && ( t = - t > o ? 0 : o + t ) , r = r > o ? o : r , r < 0 && ( r += o ) , o = t > r ? 0 : r - t > > > 0 , t > > >= 0 ; for ( var a = array ( o ) ; ++ n < o ; ) a [ n ] = e [ n + t ] ; return a } e . exports = r } , function ( e , t ) { function r ( e ) { return l . test ( e ) } var n = <string_literal> , o = <string_literal> , a = <string_literal> , u = <string_literal> , i = o + a + u , s = <string_literal> , c = <string_literal> , l = reg <identifiersep> exp ( <string_literal> + c + n + i + s + <string_literal> ) ; e . exports = r } , function ( e , t , r ) { function n ( e ) { return a ( e ) ? u ( e ) : o ( e ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e ) { return e . split ( <string_literal> ) } e . exports = r } , function ( e , t ) { function r ( e ) { return e . match ( j ) || [ ] } var n = <string_literal> , o = <string_literal> , a = <string_literal> , u = <string_literal> , i = o + a + u , s = <string_literal> , c = <string_literal> + n + <string_literal> , l = <string_literal> + i + <string_literal> , p = <string_literal> , f = <string_literal> + l + <string_literal> + p + <string_literal> , d = <string_literal> + n + <string_literal> , y = <string_literal> , h = <string_literal> , m = <string_literal> , v = f + <string_literal> , b = <string_literal> + s + <string_literal> , g = <string_literal> + m + <string_literal> + [ d , y , h ] . join ( <string_literal> ) + <string_literal> + b + v + <string_literal> , <identifier> <identifiersep> <identifier> = b + v + g , e = <string_literal> + [ d + l + <string_literal> , l , y , h , c ] . join ( <string_literal> ) + <string_literal> , j = reg <identifiersep> exp ( p + <string_literal> + p + <string_literal> + e + <identifier> <identifiersep> <identifier> , <string_literal> ) ; e . exports = r } , function ( e , t , r ) { function n ( e ) { return function ( t ) { return o ( u ( a ( t ) . replace ( s , <string_literal> ) ) , e , <string_literal> ) } } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = <string_literal> , s = reg <identifiersep> exp ( i , <string_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e , t , r , n ) { var o = - 1 , a = null == e ? 0 : e . length ; for ( n && a && ( r = e [ ++ o ] ) ; ++ o < a ; ) r = t ( r , e [ o ] , o , e ) ; return r } e . exports = r } , function ( e , t , r ) { function n ( e ) { return e = a ( e ) , e && e . replace ( u , o ) . replace ( f , <string_literal> ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = / [ \\ <identifier> - \\ <identifier> \\ <identifier> - \\ <identifier> \\ <identifier> - \\ <identifier> \\ <identifier> - \\ <identifier> ] / g , i = <string_literal> , s = <string_literal> , c = <string_literal> , l = i + s + c , p = <string_literal> + l + <string_literal> , f = reg <identifiersep> exp ( p , <string_literal> ) ; e . exports = n } , function ( e , t , r ) { var n = r ( <number_literal> ) , o = { <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> : <string_literal> , <string_literal> == t || <string_literal> == t ) } e . exports = r } , function ( e , t , r ) { function n ( e ) { return ! ! a && a in e } var o = r ( <number_literal> ) , a = function ( ) { var e = / [ ^ . ] + $ / . exec ( o && o . keys && o . keys . ie <identifiersep> proto || <string_literal> ) ; return e ? <string_literal> + e : <string_literal> } ( ) ; e . exports = n } , function ( e , t , r ) { var n = r ( <number_literal> ) , o = n [ <string_literal> ] ; e . exports = o } , function ( e , t ) { function r ( e ) { if ( null != e ) { try { return o . call ( e ) } catch ( e ) { } try { return e + <string_literal> } catch ( e ) { } } return <string_literal> } var n = function . prototype , o = n . to <identifiersep> string ; e . exports = r } , function ( e , t ) { function r ( e , t ) { return null == e ? void 0 : e [ t ] } e . exports = r } , function ( e , t ) { function r ( e ) { var t = this . has ( e ) && delete this . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> [ e ] ; return this . size -= t ? 1 : 0 , t } e . exports = r } , function ( e , t , r ) { function n ( e ) { var t = this . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> ; if ( o ) { var r = t [ e ] ; return r == = a ? void 0 : r } return i . call ( t , e ) ? t [ e ] : void 0 } var o = r ( <number_literal> ) , a = <string_literal> , u = object . prototype , i = u . has <identifiersep> own <identifiersep> property ; e . exports = n } , function ( e , t , r ) { function n ( e ) { var t = this . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> ; return o ? void 0 != = t [ e ] : u . call ( t , e ) } var o = r ( <number_literal> ) , a = object . prototype , u = a . has <identifiersep> own <identifiersep> property ; e . exports = n } , function ( e , t , r ) { function n ( e , t ) { var r = this . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> ; return this . size += this . has ( e ) ? 0 : 1 , r [ e ] = o && void 0 == = t ? a : t , this } var o = r ( <number_literal> ) , a = <string_literal> ; e . exports = n } , function ( e , t , r ) { function n ( e ) { var t = - 1 , r = null == e ? 0 : e . length ; for ( this . clear ( ) ; ++ t < r ; ) { var n = e [ t ] ; this . set ( n [ 0 ] , n [ 1 ] ) } } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = r ( <number_literal> ) , s = r ( <number_literal> ) ; n . prototype . clear = o , n . prototype . delete = a , n . prototype . get = u , n . prototype . has = i , n . prototype . set = s , e . exports = n } , function ( e , t ) { function r ( ) { this . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> = [ ] , this . size = 0 } e . exports = r } , function ( e , t , r ) { function n ( e ) { var t = this . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> , r = o ( t , e ) ; if ( r < 0 ) return ! 1 ; var n = t . length - 1 ; return r == n ? t . pop ( ) : u . call ( t , r , 1 ) , -- this . size , ! 0 } var o = r ( <number_literal> ) , a = array . prototype , u = a . <identifier> ; e . exports = n } , function ( e , t , r ) { function n ( e , t ) { for ( var r = e . length ; r -- ; ) if ( o ( e [ r ] [ 0 ] , t ) ) return r ; return - 1 } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e , t ) { return e == = t || e != = e && t != = t } e . exports = r } , function ( e , t , r ) { function n ( e ) { var t = this . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> , r = o ( t , e ) ; return r < 0 ? void 0 : t [ r ] [ 1 ] } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { function n ( e ) { return o ( this . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> , e ) > - 1 } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { function n ( e , t ) { var r = this . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> , n = o ( r , e ) ; return n < 0 ? ( ++ this . size , r . push ( [ e , t ] ) ) : r [ n ] [ 1 ] = t , this } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { var n = r ( <number_literal> ) , o = r ( <number_literal> ) , a = n ( o , <string_literal> ) ; e . exports = a } , function ( e , t , r ) { function n ( e ) { var t = o ( this , e ) . delete ( e ) ; return this . size -= t ? 1 : 0 , t } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { function n ( e , t ) { var r = e . <identifier> <identifiersep> <identifier> <identifiersep> data <identifiersep> <identifier> <identifiersep> <identifier> ; return o ( t ) ? r [ <string_literal> == typeof t ? <string_literal> : <string_literal> ] : r . map } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e ) { var t = typeof e ; return <string_literal> ) , e . replace ( a , function ( e , r , n , o ) { t . push ( n ? o . replace ( u , <string_literal> ) : r || e ) } ) , t } ) ; e . exports = i } , function ( e , t , r ) { function n ( e ) { var t = o ( e , function ( e ) { return r . size == = a && r . clear ( ) , e } ) , r = t . cache ; return t } var o = r ( <number_literal> ) , a = <number_literal> ; e . exports = n } , function ( e , t , r ) { function n ( e ) { if ( <string_literal> == typeof e || o ( e ) ) return e ; var t = e + <string_literal> ; return <string_literal> == t && 1 / e == - a ? <string_literal> : t } var o = r ( <number_literal> ) , a = 1 / 0 ; e . exports = n } , function ( e , t , r ) { function n ( e , t ) { return null != e && a ( e , t , o ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e , t ) { return null != e && t in object ( e ) } e . exports = r } , function ( e , t , r ) { function n ( e , t , r ) { t = o ( t , e ) ; for ( var n = - 1 , l = t . length , p = ! 1 ; ++ n < l ; ) { var f = c ( t [ n ] ) ; if ( ! ( p = null != e && r ( e , f ) ) ) break ; e = e [ f ] } return p || ++ n != l ? p : ( l = null == e ? 0 : e . length , ! ! l && s ( l ) && i ( f , l ) && ( u ( e ) || a ( e ) ) ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = r ( <number_literal> ) , s = r ( <number_literal> ) , c = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e ) { return e } e . exports = r } , function ( e , t , r ) { function n ( e ) { return u ( e ) ? o ( i ( e ) ) : a ( e ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e ) { return function ( t ) { return null == t ? void 0 : t [ e ] } } e . exports = r } , function ( e , t , r ) { function n ( e ) { return function ( t ) { return o ( t , e ) } } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { function n ( e , t ) { var r ; return o ( e , function ( e , n , o ) { return r = t ( e , n , o ) , ! r } ) , ! ! r } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { var n = r ( <number_literal> ) , o = r ( <number_literal> ) , a = o ( n ) ; e . exports = a } , function ( e , t , r ) { function n ( e , t ) { return e && o ( e , t , a ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { var n = r ( <number_literal> ) , o = n ( ) ; e . exports = o } , function ( e , t ) { function r ( e ) { return function ( t , r , n ) { for ( var o = - 1 , a = object ( t ) , u = n ( t ) , i = u . length ; i -- ; ) { var s = u [ e ? i : ++ o ] ; if ( r ( a [ s ] , s , a ) == = ! 1 ) break } return t } } e . exports = r } , function ( e , t , r ) { function n ( e , t ) { return function ( r , n ) { if ( null == r ) return r ; if ( ! o ( r ) ) return e ( r , n ) ; for ( var a = r . length , u = t ? a : - 1 , i = object ( r ) ; ( t ? u -- : ++ u < a ) && n ( i [ u ] , u , i ) != = ! 1 ; ) ; return r } } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { function n ( e , t , r ) { if ( ! i ( r ) ) return ! 1 ; var n = typeof t ; return ! ! ( <string_literal> == n ? a ( r ) && u ( t , r . length ) : <string_literal> == n && t in r ) && o ( r [ t ] , e ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = r ( <number_literal> ) ; e . exports = n } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( e , t ) { var r = d ( e , t ) ; if ( r ) return ( 0 , i . default ) ( r , { declaration : ! 0 , indent : <string_literal> } ) } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . <identifier> <identifiersep> sample <identifiersep> from <identifiersep> schema = t . <identifier> <identifiersep> create <identifiersep> xml <identifiersep> example = t . sample <identifiersep> xml <identifiersep> from <identifiersep> schema = t . <identifier> <identifiersep> schema = t . sample <identifiersep> from <identifiersep> schema = void 0 , t . create <identifiersep> xml <identifiersep> example = o ; var a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = n ( u ) , s = r ( <number_literal> ) , c = n ( s ) , l = { string : function ( ) { return <string_literal> } , string <identifiersep> email : function ( ) { return <string_literal> } , <string_literal> : function ( ) { return ( new date ) . to <identifiersep> iso <identifiersep> string ( ) } , number : function ( ) { return 0 } , number <identifiersep> float : function ( ) { return 0 } , integer : function ( ) { return 0 } , boolean : function ( ) { return ! 0 } } , p = function ( e ) { e = ( 0 , a . <identifier> ) ( e ) ; var t = e , r = t . type , n = t . format , o = l [ r + <string_literal> + n ] || l [ r ] ; return ( 0 , a . is <identifiersep> func ) ( o ) ? o ( e ) : <string_literal> + e . type } , f = t . sample <identifiersep> from <identifiersep> schema = function e ( t ) { var r = arguments . length > 1 && void 0 != = arguments [ 1 ] ? arguments [ 1 ] : { } , n = ( 0 , a . <identifier> ) ( t ) , o = n . type , u = n . example , i = n . properties , s = n . additional <identifiersep> properties , c = n . items , l = r . include <identifiersep> read <identifiersep> only ; if ( void 0 != = u ) return u ; if ( ! o ) if ( i ) o = <string_literal> ; else { if ( ! c ) return ; o = <string_literal> } if ( <string_literal> == = o ) { var f = ( 0 , a . <identifier> ) ( i ) , d = { } ; for ( var y in f ) f [ y ] . read <identifiersep> only && ! l || ( d [ y ] = e ( f [ y ] ) ) ; if ( s == = ! 0 ) d . additional <identifiersep> <identifier> = { } ; else if ( s ) for ( var h = ( 0 , a . <identifier> ) ( s ) , m = e ( h ) , v = 1 ; v < <number_literal> ; v ++ ) d [ <string_literal> + v ] = m ; return d } return <string_literal> == = o ? [ e ( c ) ] : t . enum ? t . default ? t . default : ( 0 , a . normalize <identifiersep> array ) ( t . enum ) [ 0 ] : p ( t ) } , d = ( t . <identifier> <identifiersep> schema = function ( e ) { return e . schema && ( e = e . schema ) , e . properties && ( e . type = <string_literal> ) , e } , t . sample <identifiersep> xml <identifiersep> from <identifiersep> schema = function e ( t ) { var r = arguments . length > 1 && void 0 != = arguments [ 1 ] ? arguments [ 1 ] : { } , n = ( 0 , a . <identifier> ) ( t ) , o = n . type , u = n . properties , i = n . additional <identifiersep> properties , s = n . items , c = n . example , l = r . include <identifiersep> read <identifiersep> only , f = n . default , d = { } , y = { } , h = t . xml , m = h . name , v = h . prefix , b = h . namespace , g = n . enum , <identifier> <identifiersep> <identifier> = void 0 , e = void 0 ; if ( ! o ) if ( u || i ) o = <string_literal> ; else { if ( ! s ) return ; o = <string_literal> } if ( m = m || <string_literal> , <identifier> <identifiersep> <identifier> = ( v ? v + <string_literal> : <string_literal> ) + m , b ) { var j = v ? <string_literal> + v : <string_literal> ; y [ j ] = b } if ( <string_literal> == = o && s ) { if ( s . xml = s . xml || h || { } , s . xml . name = s . xml . name || h . name , h . wrapped ) return d [ <identifier> <identifiersep> <identifier> ] = [ ] , array . is <identifiersep> array ( c ) ? c . for <identifiersep> each ( function ( t ) { s . example = t , d [ <identifier> <identifiersep> <identifier> ] . push ( e ( s , r ) ) } ) : array . is <identifiersep> array ( f ) ? f . for <identifiersep> each ( function ( t ) { s . default = t , d [ <identifier> <identifiersep> <identifier> ] . push ( e ( s , r ) ) } ) : d [ <identifier> <identifiersep> <identifier> ] = [ e ( s , r ) ] , y && d [ <identifier> <identifiersep> <identifier> ] . push ( { <identifier> <identifiersep> attr : y } ) , d ; var w = [ ] ; return array . is <identifiersep> array ( c ) ? ( c . for <identifiersep> each ( function ( t ) { s . example = t , w . push ( e ( s , r ) ) } ) , w ) : array . is <identifiersep> array ( f ) ? ( f . for <identifiersep> each ( function ( t ) { s . default = t , w . push ( e ( s , r ) ) } ) , w ) : e ( s , r ) } if ( <string_literal> == = o ) { var o = ( 0 , a . <identifier> ) ( u ) ; d [ <identifier> <identifiersep> <identifier> ] = [ ] , c = c || { } ; for ( var p in o ) if ( ! o [ p ] . read <identifiersep> only || l ) if ( o [ p ] . xml = o [ p ] . xml || { } , o [ p ] . xml . attribute ) { var t = array . is <identifiersep> array ( o [ p ] . enum ) && o [ p ] . enum [ 0 ] , s = o [ p ] . example , x = o [ p ] . default ; y [ o [ p ] . xml . name || p ] = void 0 != = s && s || void 0 != = c [ p ] && c [ p ] || void 0 != = x && x || t || p ( o [ p ] ) } else { o [ p ] . xml . name = o [ p ] . xml . name || p , o [ p ] . example = void 0 != = o [ p ] . example ? o [ p ] . example : c [ p ] ; var c = e ( o [ p ] ) ; array . is <identifiersep> array ( c ) ? d [ <identifier> <identifiersep> <identifier> ] = d [ <identifier> <identifiersep> <identifier> ] . concat ( c ) : d [ <identifier> <identifiersep> <identifier> ] . push ( c ) } return i == = ! 0 ? d [ <identifier> <identifiersep> <identifier> ] . push ( { additional <identifiersep> prop : <string_literal> } ) : i && d [ <identifier> <identifiersep> <identifier> ] . push ( { additional <identifiersep> prop : p ( i ) } ) , y && d [ <identifier> <identifiersep> <identifier> ] . push ( { <identifier> <identifiersep> attr : y } ) , d } return e = void 0 != = c ? c : void 0 != = f ? f : array . is <identifiersep> array ( g ) ? g [ 0 ] : p ( t ) , d [ <identifier> <identifiersep> <identifier> ] = y ? [ { <identifier> <identifiersep> attr : y } , e ] : e , d } ) ; t . <identifier> <identifiersep> create <identifiersep> xml <identifiersep> example = ( 0 , c . default ) ( o ) , t . <identifier> <identifiersep> sample <identifiersep> from <identifiersep> schema = ( 0 , c . default ) ( f ) } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( ) { return [ u . default ] } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . default = o ; var a = r ( <number_literal> ) , u = n ( a ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { if ( e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ) return e ; var t = { } ; if ( null != e ) for ( var r in e ) object . prototype . has <identifiersep> own <identifiersep> property . call ( e , r ) && ( t [ r ] = e [ r ] ) ; return t . default = e , t } function o ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . default = function ( ) { var e = { components : { app : k . default , authorization <identifiersep> popup : r . default , authorize <identifiersep> <identifier> : m . default , authorize <identifiersep> operation <identifiersep> <identifier> : i . default , <identifier> : u . default , auth <identifiersep> error : d . default , <identifier> : h . default , api <identifiersep> key <identifiersep> auth : f . default , basic <identifiersep> auth : v . default , clear : k . default , live <identifiersep> response : z . default , info : te . default , online <identifiersep> validator <identifiersep> <identifier> : q . default , operations : ee . default , operation : re . default , highlight <identifiersep> code : <identifier> . default , responses : <identifier> . default , response : se . default , response <identifiersep> body : le . default , parameters : fe . default , parameter <identifiersep> row : <identifier> . default , execute : me . default , headers : be . default , errors : <identifier> <identifiersep> e . default , content <identifiersep> type : je . default , <identifier> : <identifier> . default , footer : <identifier> . default , param <identifiersep> body : ke . default , <identifier> : re . default , <identifier> : me . default , model <identifiersep> example : ie . default , model : <identifier> . default , models : de . default , try <identifiersep> it <identifiersep> out <identifiersep> button : fe . default } } , t = { components : <identifier> } , r = { components : he } ; return [ o . default , m . default , f . default , l . default , u . default , s . default , y . default , e , t , <identifier> <identifiersep> <identifier> . default , r , j . default , b . default , t . default , x . default ] } ; var a = r ( <number_literal> ) , u = o ( a ) , i = r ( <number_literal> ) , s = o ( i ) , c = r ( <number_literal> ) , l = o ( c ) , p = r ( <number_literal> ) , f = o ( p ) , d = r ( <number_literal> ) , y = o ( d ) , h = r ( <number_literal> ) , m = o ( h ) , v = r ( <number_literal> ) , b = o ( v ) , g = r ( <number_literal> ) , <identifier> <identifiersep> <identifier> = o ( g ) , e = r ( <number_literal> ) , j = o ( e ) , w = r ( <number_literal> ) , o = o ( w ) , p = r ( <number_literal> ) , t = o ( p ) , s = r ( <number_literal> ) , x = o ( s ) , c = r ( <number_literal> ) , k = o ( c ) , a = r ( <number_literal> ) , r = o ( a ) , q = r ( <number_literal> ) , m = o ( q ) , n = r ( <number_literal> ) , i = o ( n ) , z = r ( <number_literal> ) , u = o ( z ) , l = r ( <number_literal> ) , d = o ( l ) , j = r ( <number_literal> ) , f = o ( j ) , b = r ( <number_literal> ) , v = o ( b ) , w = r ( <number_literal> ) , h = o ( w ) , $ = r ( <number_literal> ) , k = o ( $ ) , x = r ( <number_literal> ) , z = o ( x ) , g = r ( <number_literal> ) , q = o ( g ) , y = r ( <number_literal> ) , ee = o ( y ) , te = r ( <number_literal> ) , re = o ( te ) , ne = r ( <number_literal> ) , <identifier> = o ( ne ) , ae = r ( <number_literal> ) , <identifier> = o ( ae ) , ie = r ( <number_literal> ) , se = o ( ie ) , ce = r ( <number_literal> ) , le = o ( ce ) , pe = r ( <number_literal> ) , fe = o ( pe ) , de = r ( <number_literal> ) , <identifier> = o ( de ) , he = r ( <number_literal> ) , me = o ( he ) , <identifier> = r ( <number_literal> ) , be = o ( <identifier> ) , <identifier> = r ( <number_literal> ) , <identifier> <identifiersep> e = o ( <identifier> ) , ee = r ( <number_literal> ) , je = o ( ee ) , we = r ( <number_literal> ) , <identifier> = o ( we ) , pe = r ( <number_literal> ) , te = o ( pe ) , se = r ( <number_literal> ) , <identifier> = o ( se ) , ce = r ( <number_literal> ) , ke = o ( ce ) , ae = r ( <number_literal> ) , re = o ( ae ) , <identifier> = r ( <number_literal> ) , me = o ( <identifier> ) , ne = r ( <number_literal> ) , ie = o ( ne ) , <identifier> = r ( <number_literal> ) , <identifier> = o ( <identifier> ) , le = r ( <number_literal> ) , de = o ( le ) , je = r ( <number_literal> ) , fe = o ( je ) , be = r ( <number_literal> ) , <identifier> = n ( be ) , we = r ( <number_literal> ) , he = n ( we ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { if ( e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ) return e ; var t = { } ; if ( null != e ) for ( var r in e ) object . prototype . has <identifiersep> own <identifiersep> property . call ( e , r ) && ( t [ r ] = e [ r ] ) ; return t . default = e , t } function o ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . default = function ( e ) { return { state <identifiersep> plugins : { err : { reducers : ( 0 , u . default ) ( e ) , actions : s , selectors : l } } } } ; var a = r ( <number_literal> ) , u = o ( a ) , i = r ( <number_literal> ) , s = n ( i ) , c = r ( <number_literal> ) , l = n ( c ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( e , t , r ) { return t in e ? object . define <identifiersep> property ( e , t , { value : r , <identifier> : ! 0 , configurable : ! 0 , writable : ! 0 } ) : e [ t ] = r , e } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . default = function ( e ) { var t ; return t = { } , o ( t , a . new <identifiersep> thrown <identifiersep> err , function ( t , r ) { var n = r . payload , o = object . assign ( f , n , { type : <string_literal> } ) ; return t . update ( <string_literal> , function ( e ) { return ( e || ( 0 , s . list ) ( ) ) . push ( ( 0 , s . from <identifiersep> js ) ( o ) ) } ) . update ( <string_literal> , function ( t ) { return ( 0 , p . default ) ( t , e . get <identifiersep> system ( ) ) } ) } ) , o ( t , a . new <identifiersep> thrown <identifiersep> err <identifiersep> batch , function ( t , r ) { var n = r . payload ; return n = n . map ( function ( e ) { return ( 0 , s . from <identifiersep> js ) ( object . assign ( f , e , { type : <string_literal> } ) ) } ) , t . update ( <string_literal> , function ( e ) { return ( e || ( 0 , s . list ) ( ) ) . concat ( ( 0 , s . from <identifiersep> js ) ( n ) ) } ) . update ( <string_literal> , function ( t ) { return ( 0 , p . default ) ( t , e . get <identifiersep> system ( ) ) } ) } ) , o ( t , a . new <identifiersep> spec <identifiersep> err , function ( t , r ) { var n = r . payload , o = ( 0 , s . from <identifiersep> js ) ( n ) ; return o = o . set ( <string_literal> , <string_literal> ) , t . update ( <string_literal> , function ( e ) { return ( e || ( 0 , s . list ) ( ) ) . push ( ( 0 , s . from <identifiersep> js ) ( o ) ) . sort <identifiersep> by ( function ( e ) { return e . get ( <string_literal> ) } ) } ) . update ( <string_literal> , function ( t ) { return ( 0 , p . default ) ( t , e . get <identifiersep> system ( ) ) } ) } ) , o ( t , a . new <identifiersep> auth <identifiersep> err , function ( t , r ) { var n = r . payload , o = ( 0 , s . from <identifiersep> js ) ( object . assign ( { } , n ) ) ; return o = o . set ( <string_literal> , <string_literal> ) , t . update ( <string_literal> , function ( e ) { return ( e || ( 0 , s . list ) ( ) ) . push ( ( 0 , s . from <identifiersep> js ) ( o ) ) } ) . update ( <string_literal> , function ( t ) { return ( 0 , p . default ) ( t , e . get <identifiersep> system ( ) ) } ) } ) , o ( t , a . clear , function ( e , t ) { var r = t . payload ; if ( r ) { var n = c . default . from <identifiersep> js ( ( 0 , i . default ) ( ( e . get ( <string_literal> ) || ( 0 , s . list ) ( ) ) . to <identifiersep> js ( ) , r ) ) ; return e . merge ( { errors : n } ) } } ) , t } ; var a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = n ( u ) , s = r ( <number_literal> ) , c = n ( s ) , l = r ( <number_literal> ) , p = n ( l ) , f = { line : 0 , level : <string_literal> , message : <string_literal> } } , function ( e , t , r ) { function n ( e , t ) { var r = i ( e ) ? o : a ; return r ( e , s ( u ( t , <number_literal> ) ) ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = r ( <number_literal> ) , s = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e , t ) { for ( var r = - 1 , n = null == e ? 0 : e . length , o = 0 , a = [ ] ; ++ r < n ; ) { var u = e [ r ] ; t ( u , r , e ) && ( a [ o ++ ] = u ) } return a } e . exports = r } , function ( e , t , r ) { function n ( e , t ) { var r = [ ] ; return o ( e , function ( e , n , o ) { t ( e , n , o ) && r . push ( e ) } ) , r } var o = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e ) { if ( <string_literal> != typeof e ) throw new type <identifiersep> error ( n ) ; return function ( ) { var t = arguments ; switch ( t . length ) { case 0 : return ! e . call ( this ) ; case 1 : return ! e . call ( this , t [ 0 ] ) ; case <number_literal> : return ! e . call ( this , t [ 0 ] , t [ 1 ] ) ; case <number_literal> : return ! e . call ( this , t [ 0 ] , t [ 1 ] , t [ <number_literal> ] ) } return ! e . apply ( this , t ) } } var n = <string_literal> ; e . exports = r } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( e , t ) { var r = { js <identifiersep> spec : t . spec <identifiersep> selectors . spec <identifiersep> json ( ) . to <identifiersep> js ( ) } , n = ( 0 , i . default ) ( c , function ( e , t ) { try { var n = t . transform ( e , r ) ; return n . filter ( function ( e ) { return ! ! e } ) } catch ( t ) { return console . error ( <string_literal> , t ) , e } } , e ) ; return n . filter ( function ( e ) { return ! ! e } ) . map ( function ( e ) { return ! e . get ( <string_literal> ) && e . get ( <string_literal> ) , e } ) } function a ( e ) { return e . split ( <string_literal> ) . map ( function ( e ) { return e [ 0 ] . to <identifiersep> upper <identifiersep> case ( ) + e . slice ( 1 ) } ) . join ( <string_literal> ) } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . default = o ; var u = r ( <number_literal> ) , i = n ( u ) , s = r ( <number_literal> ) , c = [ ] ; s . keys ( ) . for <identifiersep> each ( function ( e ) { <string_literal> != = e && e . match ( / <identifier> / ) && ( e . slice ( <number_literal> ) . index <identifiersep> of ( <string_literal> ) > - 1 || c . push ( { name : a ( e ) . replace ( <string_literal> , <string_literal> ) . replace ( <string_literal> , <string_literal> ) , transform : s ( e ) . transform } ) ) } ) } , function ( e , t , r ) { function n ( e , t , r ) { var n = s ( e ) ? o : i , c = arguments . length < <number_literal> ; return n ( e , u ( t , <number_literal> ) , r , c , a ) } var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = r ( <number_literal> ) , i = r ( <number_literal> ) , s = r ( <number_literal> ) ; e . exports = n } , function ( e , t ) { function r ( e , t , r , n , o ) { return o ( e , function ( e , o , a ) { r = n ? ( n = ! 1 , e ) : t ( r , e , o , a ) } ) , r } e . exports = r } , function ( e , t , r ) { function n ( e ) { return r ( o ( e ) ) } function o ( e ) { return a [ e ] || function ( ) { throw new error ( <string_literal> + e + <string_literal> ) } ( ) } var a = { <string_literal> : <number_literal> , <string_literal> : <number_literal> , <string_literal> : <number_literal> } ; n . keys = function ( ) { return object . keys ( a ) } , n . resolve = o , e . exports = n , n . id = <number_literal> } , function ( e , t ) { <string_literal> ; function r ( e ) { return e . map ( function ( e ) { var t = <string_literal> , r = e . get ( <string_literal> ) . index <identifiersep> of ( t ) ; if ( r > - 1 ) { var o = e . get ( <string_literal> ) . slice ( r + t . length ) . split ( <string_literal> ) ; return e . set ( <string_literal> , e . get ( <string_literal> ) . slice ( 0 , r ) + n ( o ) ) } return e } ) } function n ( e ) { return e . reduce ( function ( e , t , r , n ) { return r == = n . length - 1 && n . length > 1 ? e + <string_literal> + t : n [ r + 1 ] && n . length > <number_literal> ? e + t + <string_literal> : n [ r + 1 ] ? e + t + <string_literal> : e + t } , <string_literal> ) } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . transform = r } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( e , t ) { t . js <identifiersep> spec ; return e } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . transform = o ; var a = r ( <number_literal> ) ; n ( a ) , r ( <number_literal> ) } , function ( e , t ) { <string_literal> ; function r ( e ) { return e . map ( function ( e ) { return e . set ( <string_literal> , n ( e . get ( <string_literal> ) , <string_literal> ) ) } ) } function n ( e , t ) { return e . replace ( new reg <identifiersep> exp ( t , <string_literal> ) , <string_literal> ) } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . transform = r } , function ( e , t , r ) { <string_literal> ; object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . last <identifiersep> error = t . all <identifiersep> errors = void 0 ; var n = r ( <number_literal> ) , o = r ( <number_literal> ) , a = function ( e ) { return e } , u = t . all <identifiersep> errors = ( 0 , o . create <identifiersep> selector ) ( a , function ( e ) { return e . get ( <string_literal> , ( 0 , n . list ) ( ) ) } ) ; t . last <identifiersep> error = ( 0 , o . create <identifiersep> selector ) ( u , function ( e ) { return e . last ( ) } ) } , function ( e , t ) { e . exports = require ( <string_literal> ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { if ( e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ) return e ; var t = { } ; if ( null != e ) for ( var r in e ) object . prototype . has <identifiersep> own <identifiersep> property . call ( e , r ) && ( t [ r ] = e [ r ] ) ; return t . default = e , t } function o ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . default = function ( ) { return { state <identifiersep> plugins : { layout : { reducers : u . default , actions : s , selectors : l } } } } ; var a = r ( <number_literal> ) , u = o ( a ) , i = r ( <number_literal> ) , s = n ( i ) , c = r ( <number_literal> ) , l = n ( c ) } , function ( e , t , r ) { <string_literal> ; function n ( e , t , r ) { return t in e ? object . define <identifiersep> property ( e , t , { value : r , <identifier> : ! 0 , configurable : ! 0 , writable : ! 0 } ) : e [ t ] = r , e } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) ; var o , a = r ( <number_literal> ) ; t . default = ( o = { } , n ( o , a . update <identifiersep> layout , function ( e , t ) { return e . set ( <string_literal> , t . payload ) } ) , n ( o , a . show , function ( e , t ) { var r = t . payload . thing , n = t . payload . <identifier> ; return e . set <identifiersep> in ( [ <string_literal> ] . concat ( r ) , n ) } ) , n ( o , a . update <identifiersep> mode , function ( e , t ) { var r = t . payload . thing , n = t . payload . mode ; return e . set <identifiersep> in ( [ <string_literal> ] . concat ( r ) , ( n || <string_literal> ) + <string_literal> ) } ) , o ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return { type : i , payload : e } } function o ( e ) { var t = ! ( arguments . length > 1 && void 0 != = arguments [ 1 ] ) || arguments [ 1 ] ; return e = ( 0 , u . normalize <identifiersep> array ) ( e ) , { type : c , payload : { thing : e , <identifier> : t } } } function a ( e ) { var t = arguments . length > 1 && void 0 != = arguments [ 1 ] ? arguments [ 1 ] : <string_literal> ; return e = ( 0 , u . normalize <identifiersep> array ) ( e ) , { type : s , payload : { thing : e , mode : t } } } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . show = t . update <identifiersep> mode = t . update <identifiersep> layout = void 0 , t . update <identifiersep> layout = n , t . show = o , t . change <identifiersep> mode = a ; var u = r ( <number_literal> ) , i = t . update <identifiersep> layout = <string_literal> , s = t . update <identifiersep> mode = <string_literal> , c = t . show = <string_literal> } , function ( e , t , r ) { <string_literal> ; function n ( e ) { if ( array . is <identifiersep> array ( e ) ) { for ( var t = 0 , r = array ( e . length ) ; t < e . length ; t ++ ) r [ t ] = e [ t ] ; return r } return array . from ( e ) } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . show <identifiersep> summary = t . what <identifiersep> mode = t . is <identifiersep> <identifier> = t . current = void 0 ; var o = r ( <number_literal> ) , a = r ( <number_literal> ) , u = function ( e ) { return e } , i = ( t . current = function ( e ) { return e . get ( <string_literal> ) } , t . is <identifiersep> <identifier> = function ( e , t , r ) { return t = ( 0 , a . normalize <identifiersep> array ) ( t ) , boolean ( e . get <identifiersep> in ( [ <string_literal> ] . concat ( n ( t ) ) , r ) ) } ) ; t . what <identifiersep> mode = function ( e , t ) { var r = arguments . length > <number_literal> && void 0 != = arguments [ <number_literal> ] ? arguments [ <number_literal> ] : <string_literal> ; return t = ( 0 , a . normalize <identifiersep> array ) ( t ) , e . get <identifiersep> in ( [ <string_literal> ] . concat ( n ( t ) ) , r ) } , t . show <identifiersep> summary = ( 0 , o . create <identifiersep> selector ) ( u , function ( e ) { return ! i ( e , <string_literal> ) } ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { if ( e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ) return e ; var t = { } ; if ( null != e ) for ( var r in e ) object . prototype . has <identifiersep> own <identifiersep> property . call ( e , r ) && ( t [ r ] = e [ r ] ) ; return t . default = e , t } function o ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . default = function ( ) { return { state <identifiersep> plugins : { spec : { wrap <identifiersep> actions : f , reducers : u . default , actions : s , selectors : l } } } } ; var a = r ( <number_literal> ) , u = o ( a ) , i = r ( <number_literal> ) , s = n ( i ) , c = r ( <number_literal> ) , l = n ( c ) , p = r ( <number_literal> ) , f = n ( p ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( e , t , r ) { return t in e ? object . define <identifiersep> property ( e , t , { value : r , <identifier> : ! 0 , configurable : ! 0 , writable : ! 0 } ) : e [ t ] = r , e } function a ( e ) { if ( array . is <identifiersep> array ( e ) ) { for ( var t = 0 , r = array ( e . length ) ; t < e . length ; t ++ ) r [ t ] = e [ t ] ; return r } return array . from ( e ) } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) ; var u , i = r ( <number_literal> ) , s = r ( <number_literal> ) , c = r ( <number_literal> ) , l = n ( c ) , p = r ( <number_literal> ) ; t . default = ( u = { } , o ( u , p . update <identifiersep> spec , function ( e , t ) { return <string_literal> == typeof t . payload ? e . set ( <string_literal> , t . payload ) : e } ) , o ( u , p . update <identifiersep> url , function ( e , t ) { return e . set ( <string_literal> , t . payload + <string_literal> ) } ) , o ( u , p . update <identifiersep> json , function ( e , t ) { return e . set ( <string_literal> , ( 0 , s . from <identifiersep> js <identifiersep> ordered ) ( t . payload ) ) } ) , o ( u , p . update <identifiersep> resolved , function ( e , t ) { return e . set <identifiersep> in ( [ <string_literal> ] , ( 0 , s . from <identifiersep> js <identifiersep> ordered ) ( t . payload ) ) } ) , o ( u , p . update <identifiersep> param , function ( e , t ) { var r = t . payload , n = r . path , o = r . param <identifiersep> name , u = r . value , c = r . is <identifiersep> xml ; return e . update <identifiersep> in ( [ <string_literal> , <string_literal> ] . concat ( a ( n ) , [ <string_literal> ] ) , ( 0 , i . from <identifiersep> js ) ( [ ] ) , function ( e ) { var t = e . find <identifiersep> index ( function ( e ) { return e . get ( <string_literal> ) == = o } ) ; return u instanceof l . default . file || ( u = ( 0 , s . from <identifiersep> js <identifiersep> ordered ) ( u ) ) , e . set <identifiersep> in ( [ t , c ? <string_literal> : <string_literal> ] , u ) } ) } ) , o ( u , p . validate <identifiersep> params , function ( e , t ) { var r = t . payload . path <identifiersep> method , n = e . get <identifiersep> in ( [ <string_literal> , <string_literal> ] . concat ( a ( r ) ) ) , o = / xml / i . test ( n . get ( <string_literal> ) ) ; return e . update <identifiersep> in ( [ <string_literal> , <string_literal> ] . concat ( a ( r ) , [ <string_literal> ] ) , ( 0 , i . from <identifiersep> js ) ( [ ] ) , function ( e ) { return e . with <identifiersep> mutations ( function ( e ) { for ( var t = 0 , r = e . count ( ) ; t < r ; t ++ ) { var n = ( 0 , s . validate <identifiersep> param ) ( e . get ( t ) , o ) ; e . set <identifiersep> in ( [ t , <string_literal> ] , ( 0 , i . from <identifiersep> js ) ( n ) ) } } ) } ) } ) , o ( u , p . cl <identifiersep> <identifier> <identifiersep> validate <identifiersep> params , function ( e , t ) { var r = t . payload . path <identifiersep> method ; return e . update <identifiersep> in ( [ <string_literal> , <string_literal> ] . concat ( a ( r ) , [ <string_literal> ] ) , ( 0 , i . from <identifiersep> js ) ( [ ] ) , function ( e ) { return e . with <identifiersep> mutations ( function ( e ) { for ( var t = 0 , r = e . count ( ) ; t < r ; t ++ ) e . set <identifiersep> in ( [ t , <string_literal> ] , ( 0 , i . from <identifiersep> js ) ( { } ) ) } ) } ) } ) , o ( u , p . set <identifiersep> response , function ( e , t ) { var r = t . payload , n = r . res , o = r . path , a = r . method , u = void 0 ; u = n . error ? object . assign ( { error : ! 0 } , n . err ) : n , u . headers = u . headers || { } ; var i = e . set <identifiersep> in ( [ <string_literal> , o , a ] , ( 0 , s . from <identifiersep> js <identifiersep> ordered ) ( u ) ) ; return n . data instanceof l . default . blob && ( i = i . set <identifiersep> in ( [ <string_literal> , o , a , <string_literal> ] , n . data ) ) , i } ) , o ( u , p . set <identifiersep> request , function ( e , t ) { var r = t . payload , n = r . req , o = r . path , a = r . method ; return e . set <identifiersep> in ( [ <string_literal> , o , a ] , ( 0 , s . from <identifiersep> js <identifiersep> ordered ) ( n ) ) } ) , o ( u , p . update <identifiersep> operation <identifiersep> value , function ( e , t ) { var r = t . payload , n = r . path , o = r . value , u = r . key ; return e . set <identifiersep> in ( [ <string_literal> , <string_literal> ] . concat ( a ( n ) , [ u ] ) , ( 0 , i . from <identifiersep> js ) ( o ) ) } ) , o ( u , p . clear <identifiersep> response , function ( e , t ) { var r = t . payload , n = r . path , o = r . method ; return e . delete <identifiersep> in ( [ <string_literal> , n , o ] ) } ) , o ( u , p . clear <identifiersep> request , function ( e , t ) { var r = t . payload , n = r . path , o = r . method ; return e . delete <identifiersep> in ( [ <string_literal> , n , o ] ) } ) , o ( u , p . set <identifiersep> scheme , function ( e , t ) { var r = t . payload , n = r . scheme , o = r . path , a = r . method ; return o && a ? e . set <identifiersep> in ( [ <string_literal> , o , a ] , n ) : o || a ? void 0 : e . set <identifiersep> in ( [ <string_literal> , <string_literal> ] , n ) } ) , u ) } , function ( e , t , r ) { <string_literal> ; function n ( e ) { return e && e . <identifier> <identifiersep> <identifier> <identifiersep> es <identifiersep> module ? e : { default : e } } function o ( e , t ) { var r = { } ; for ( var n in e ) t . index <identifiersep> of ( n ) >= 0 || object . prototype . has <identifiersep> own <identifiersep> property . call ( e , n ) && ( r [ n ] = e [ n ] ) ; return r } function a ( e ) { return e instanceof error ? { type : w , error : ! 0 , payload : e } : <string_literal> == typeof e ? { type : w , payload : e . replace ( / \\ t / g , <string_literal> ) || <string_literal> } : { type : w , payload : <string_literal> } } function u ( e ) { return { type : n , payload : e } } function i ( e ) { return { type : o , payload : e } } function s ( e ) { if ( ! e || <string_literal> != = ( <string_literal> == typeof e ? <string_literal> : b ( e ) ) ) throw new error ( <string_literal> ) ; return { type : p , payload : e } } function c ( e , t , r , n ) { return { type : t , payload : { path : e , value : r , param <identifiersep> name : t , is <identifiersep> xml : n } } } function l ( e ) { return { type : s , payload : { path <identifiersep> method : e } } } function p ( e ) { return { type : q , payload : { path <identifiersep> method : e } } } function f ( e , t ) { return { type : m , payload : { path : e , value : t , key : <string_literal> } } } function d ( e , t ) { return { type : m , payload : { path : e , value : t , key : <string_literal> } } } function y ( e , t ) { return { type : a , payload : { path : e , method : t } } } function h ( e , t ) { return { type : r , payload : { path : e , method : t } } } function m ( e , t , r ) { return { type : i , payload : { scheme : e , path : t , method : r } } } object . define <identifiersep> property ( t , <string_literal> , { value : ! 0 } ) , t . execute = t . execute <identifiersep> request = t . log <identifiersep> request = t . set <identifiersep> request = t . set <identifiersep> response = t . format <identifiersep> into <identifiersep> yaml = t . resolve <identifiersep> spec = t . parse <identifiersep> to <identifiersep> json = t . set <identifiersep> scheme = t . update <identifiersep> resolved = t . update <identifiersep> operation <identifiersep> value = t . cl <identifiersep> <identifier> <identifiersep> validate <identifiersep> params = t . clear <identifiersep> request = t . clear <identifiersep> response = t . log <identifiersep> request = t . set <identifiersep> request = t . set <identifiersep> response = t . validate <identifiersep> params = t . update <identifiersep> param = t . update <identifiersep> json = t . update <identifiersep> url = t . update <identifiersep> spec = void 0 ; var v = object . assign || function ( e ) { for ( var t = 1 ; t < arguments . length ; t ++ ) { var r = arguments [ t ] ; for ( var n in r ) object . prototype . has <identifiersep> own <identifiersep> property . call ( r , n ) && ( e [ n ] = r [ n ] ) } return e } , b = <string_literal> == typeof symbol && <string_literal> == typeof symbol . iterator ? function ( e ) { return typeof e } : function ( e ) { return e && <string_literal> == typeof symbol && e . constructor == = symbol && e != = symbol . prototype ? <string_literal> : typeof e } ; t . update <identifiersep> spec = a , t . update <identifiersep> resolved = u , t . update <identifiersep> url = i , t . update <identifiersep> json <identifiersep> spec = s , t . change <identifiersep> param = c , t . validate <identifiersep> params = l , t . clear <identifiersep> validate <identifiersep> params = p , t . change <identifiersep> consumes <identifiersep> value = f , t . change <identifiersep> produces <identifiersep> value = d , t . clear <identifiersep> response = y , t . clear <identifiersep> request = h , t . set <identifiersep> scheme = m ; var g = r ( <number_literal> ) , <identifier> <identifiersep> <identifier> = n ( g ) , e = r ( <number_literal> ) , j = n ( e ) , w = t . update <identifiersep> spec = <string_literal> , o = t . update <identifiersep> url = <string_literal> , p = t . update <identifiersep> json = <string_literal> , t = t . update <identifiersep> param = <string_literal> , s = t . validate <identifiersep> params = <string_literal> , x = t . set <identifiersep> response = <string_literal> , c = t . set <identifiersep> request = <string_literal> , k = t . log <identifiersep> request = <string_literal> , a = t . clear <identifiersep> response = <string_literal> , r = t . clear <identifiersep> request = <string_literal> , q = t . cl <identifiersep> <identifier> <identifiersep> validate <identifiersep> params = <string_literal> , m = t . update <identifiersep> operation <identifiersep> value = <string_literal> , n = t . update <identifiersep> resolved = <string_literal> , i = t . set <identifiersep> scheme = <string_literal> , z = ( t . parse <identifiersep> to <identifiersep> json = function ( e ) { \n <ect>
\t2 return handlers ; } \n \t1 private static predicate < ldap <identifiersep> authentication <identifiersep> properties > ldap <identifiersep> instance <identifiersep> configuration <identifiersep> predicate ( ) { \n \t2 return l - > { \n \t3 if ( l . get <identifiersep> type ( ) == null ) { \n <ect>
<comment> \n \t1 private void fill <identifiersep> pk <identifiersep> cache ( stack s , string <identifier> ) { \n \t2 long pk <identifiersep> value <identifiersep> start = get <identifiersep> next <identifiersep> pk <identifiersep> value <identifiersep> for <identifiersep> entity <identifiersep> increase <identifiersep> by ( <identifier> , <number_literal> , increase <identifiersep> by ( ) ) ; \n \t2 long value = pk <identifiersep> value <identifiersep> start . long <identifiersep> value ( ) ; \n <ect>
<comment> \n \t1 private list < metadata <identifiersep> resolver > load <identifiersep> metadata <identifiersep> from <identifiersep> resource ( final metadata <identifiersep> filter metadata <identifiersep> filter , final resource resource , final string entity <identifiersep> id ) { \n <ect>
\t2 { \n \t3 match <identifiersep> index = new <identifiersep> match <identifiersep> index ; } \n \t2 else \n \t2 { \n <ect>
\t4 if not repo <identifiersep> type : \n \t5 logger . error ( <string_literal> . \n \t8 format ( <identifier> ) ) \n \t5 continue \n <ect>
\t6 for ( user <identifiersep> vm <identifiersep> vo vm : vms ) { \n \t7 try { \n \t8 expunge <identifiersep> vm ( vm . get <identifiersep> id ( ) ) ; \n \t7 } catch ( exception e ) { \n <ect>
\t2 return true ; } \n \t1 protected void do <identifiersep> shutdown ( ) { \n \t2 locks <identifiersep> by <identifiersep> name . for <identifiersep> each ( ( key , lock ) - > { \n \t3 if ( release <identifiersep> lock ( lock ) ) { \n <ect>
<comment> \n \t1 protected object new <identifiersep> session <identifiersep> bean <identifiersep> instance ( ) throws naming <identifiersep> exception , invocation <identifiersep> target <identifiersep> exception { \n <ect>
\t8 public void do <identifiersep> in <identifiersep> transaction <identifiersep> without <identifiersep> result ( final transaction <identifiersep> status status ) { \n \t9 final user <identifiersep> statistics <identifiersep> vo stats = <identifier> <identifiersep> user <identifiersep> stats <identifiersep> dao . lock ( router . get <identifiersep> account <identifiersep> id ( ) , router . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , network . get <identifiersep> id ( ) , \n <number_literal> for <identifiersep> vpc ? router <identifiersep> nic . get <identifiersep> i <identifiersep> pv4address ( ) : null , router . get <identifiersep> id ( ) , router <identifiersep> type ) ; \n \t9 if ( stats == null ) { \n <ect>
\t1 try { \n \t1 statement stmt = manager . get <identifiersep> connection ( ) . create <identifiersep> statement ( ) ; \n \t1 stmt . execute ( <string_literal> + get <identifiersep> table <identifiersep> name ( ) ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 mark <identifiersep> as <identifiersep> non <identifiersep> default ( original <identifiersep> nic ) ; \n \t2 <identifier> <identifiersep> network <identifiersep> mgr . remove <identifiersep> nic ( vm <identifiersep> profile , original <identifiersep> nic ) ; \n <ect>
\t1 <comment> \n \t1 if ( metastore <identifiersep> conf . get <identifiersep> var ( conf , conf <identifiersep> vars . thrift <identifiersep> uris ) != null ) { \n \t1 resolve <identifiersep> uris ( ) ; \n \t1 } else { \n <ect>
\t4 string result = <identifier> <identifiersep> label <identifiersep> tag <identifiersep> action ( label , req ) ; \n \t4 get <identifiersep> previous <identifiersep> out ( ) . print ( result ) ; \n \t3 } catch ( exception ex ) { \n \t4 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t2 if ( client . get <identifiersep> delivery <identifiersep> mode ( ) . equals <identifiersep> ignore <identifiersep> case ( jms <identifiersep> producer <identifiersep> properties . delivery <identifiersep> mode <identifiersep> persistent ) ) { \n \t3 log . info ( <string_literal> + dest . to <identifiersep> string ( ) + <string_literal> ) ; \n \t3 jms <identifiersep> producer . set <identifiersep> delivery <identifiersep> mode ( delivery <identifiersep> mode . persistent ) ; \n \t2 } else if ( client . get <identifiersep> delivery <identifiersep> mode ( ) . equals <identifiersep> ignore <identifiersep> case ( jms <identifiersep> producer <identifiersep> properties . delivery <identifiersep> mode <identifiersep> non <identifiersep> persistent ) ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 @ override \n \t1 public void on <identifiersep> fatal <identifiersep> error ( throwable exception ) { \n <ect>
\t1 try { \n \t2 for ( i <identifiersep> pentaho <identifiersep> object <identifiersep> factory fact : factories ) { \n \t2 if ( fact . object <identifiersep> defined ( key ) ) { \n \t3 t object = fact . get ( interface <identifiersep> class , key , session ) ; \n <ect>
\t2 <identifier> = new <identifier> <identifiersep> routing <identifiersep> support ( c , configuration , <identifier> ) ; \n \t2 set <identifiersep> config <identifiersep> params ( params ) ; \n \t2 return true ; } \n \t1 public void set <identifiersep> connection ( connection con ) { \n <ect>
<number_literal> final class < t > clazz ) { \n \t2 try { \n \t3 final script <identifiersep> engine engine = new script <identifiersep> engine <identifiersep> manager ( ) . get <identifiersep> engine <identifiersep> by <identifiersep> name ( <string_literal> ) ; \n \t3 if ( engine == null ) { \n <ect>
\t4 } , null ) ; \n \t3 synchronized ( result ) { \n \t4 if ( result [ 0 ] == integer . max <identifiersep> value ) { \n \t5 result . wait ( <number_literal> ) ; } } \n <ect>
\t1 private iterable < result < <identifier> <identifiersep> element > > execute ( element <identifiersep> category result <identifiersep> type ) { \n \t2 preconditions . check <identifiersep> not <identifiersep> null ( index <identifiersep> name ) ; \n \t2 preconditions . check <identifiersep> not <identifiersep> null ( query ) ; \n \t2 if ( tx . has <identifiersep> <identifier> ( ) ) \n <ect>
\t2 <comment> \n \t2 channel <identifiersep> pipeline pipeline = channels . pipeline ( ) ; \n \t2 ssl <identifiersep> handler ssl <identifiersep> handler = configure <identifiersep> server <identifiersep> ssl <identifiersep> on <identifiersep> <identifier> ( ) ; \n \t2 if ( ssl <identifiersep> handler != null ) { \n <ect>
\t1 logger . info ( <string_literal> ) ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 logger . info ( <string_literal> + start <identifiersep> date ) ; \n <ect>
\t4 if ( attribute != null ) { \n \t5 logger . debug ( <string_literal> , key ) ; \n \t5 final collection < string > attribute <identifiersep> names = ( collection < string > ) names ; \n \t5 attribute <identifiersep> names . for <identifiersep> each ( s - > { \n <ect>
\t1 public static final string reg <identifiersep> ex <identifiersep> param <identifiersep> values <identifiersep> <identifier> <identifiersep> nr = <string_literal> ; <comment> \n \t1 @ override \n \t1 public void process ( ) { \n <ect>
\t3 <identifier> <identifiersep> socket <identifiersep> address from <identifiersep> address = topology <identifiersep> service . find <identifiersep> <identifier> <identifiersep> address ( <identifier> ) . or <identifiersep> else <identifiersep> throw ( ( ) - > new topology <identifiersep> lookup <identifiersep> exception ( <identifier> ) ) ; \n \t3 store <identifiersep> copy <identifiersep> process . replace <identifiersep> with <identifiersep> store <identifiersep> from ( <identifier> <identifiersep> address <identifiersep> provider . from <identifiersep> single <identifiersep> address ( from <identifiersep> address ) , local <identifiersep> store <identifiersep> id ) ; } \n \t2 catch ( io <identifiersep> exception | store <identifiersep> copy <identifiersep> failed <identifiersep> exception | streaming <identifiersep> transactions <identifiersep> failed <identifiersep> exception | topology <identifiersep> lookup <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 if ( ! file <identifiersep> to <identifiersep> delete . delete ( ) ) { \n \t4 try { \n \t5 file <identifiersep> utils . write ( plugin <identifiersep> delete <identifiersep> list <identifiersep> file , file <identifiersep> to <identifiersep> delete . get <identifiersep> name ( ) + <string_literal> , true ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 for ( node node : <identifier> <identifiersep> strategy . route <identifiersep> hint ( failed <identifiersep> node ) ) { \n \t3 int node <identifiersep> id = node . get <identifiersep> id ( ) ; \n \t3 if ( ! failed <identifiersep> nodes . contains ( node ) && failure <identifiersep> detector . is <identifiersep> available ( node ) ) { \n <ect>
\t4 . collect ( collectors . to <identifiersep> map ( map . entry : : get <identifiersep> key , map . entry : : get <identifiersep> value ) ) ; } \n \t1 @ override \n \t1 protected void internal <identifiersep> transform ( string phase <identifiersep> name , map < string , string > options ) { \n \t2 if ( is <identifiersep> verbose ( ) ) { \n <ect>
\t3 } catch ( concurrency <identifiersep> exception e ) { \n \t4 logger . info ( <string_literal> ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 if ( response <identifiersep> code == <number_literal> ) { \n \t3 input <identifiersep> stream is = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t3 map < string , string > user <identifiersep> id <identifiersep> values = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> } ) ; \n \t3 string user <identifiersep> id <identifiersep> str = user <identifiersep> id <identifiersep> values . get ( <string_literal> ) ; \n <ect>
\t1 case start <identifiersep> <identifier> : { \n \t1 logger . info ( ix + <string_literal> + get <identifiersep> second <identifiersep> int ( log [ ix ] ) ) ; \n \t1 return ix + 1 ; } \n \t1 case start <identifiersep> col : { \n <ect>
\t3 if ( storage <identifiersep> v <identifiersep> os . size ( ) > 1 ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + iso <identifiersep> id + <string_literal> + event . get <identifiersep> account <identifiersep> id ( ) + <string_literal> ) ; } \n \t3 for ( usage <identifiersep> storage <identifiersep> vo storage <identifiersep> vo : storage <identifiersep> v <identifiersep> os ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <comment> \n \t1 <comment> \n <ect>
\t2 if ( receive instanceof no <identifiersep> more <identifiersep> items ) { \n \t2 break ; } \n \t2 if ( receive instanceof fetch <identifiersep> failed ) { \n \t2 fetch <identifiersep> failed error = ( fetch <identifiersep> failed ) receive ; \n <ect>
\t1 throws io <identifiersep> exception { \n \t1 path file <identifiersep> listing = new path ( data <identifiersep> path , <identifier> <identifiersep> util . files <identifiersep> name ) ; \n \t1 log . debug ( <string_literal> , file <identifiersep> listing . to <identifiersep> uri ( ) ) ; \n \t1 if ( ! fs . exists ( file <identifiersep> listing ) ) { \n <ect>
\t2 <identifier> = conn . prepare <identifiersep> statement ( set <identifiersep> preference <identifiersep> sql ) ; \n \t2 set <identifiersep> long <identifiersep> parameter ( <identifier> , 1 , user <identifiersep> id ) ; \n \t2 set <identifiersep> long <identifiersep> parameter ( <identifier> , <number_literal> , item <identifiersep> id ) ; \n \t2 <identifier> . set <identifiersep> double ( <number_literal> , value ) ; \n <ect>
\t1 public boolean revoke <identifiersep> all <identifiersep> pf <identifiersep> static <identifiersep> nat <identifiersep> rules <identifiersep> for <identifiersep> network ( long network <identifiersep> id , long user <identifiersep> id , account caller ) throws resource <identifiersep> unavailable <identifiersep> exception { \n \t2 list < firewall <identifiersep> rule > rules = new array <identifiersep> list < firewall <identifiersep> rule > ( ) ; \n \t2 list < port <identifiersep> forwarding <identifiersep> rule <identifiersep> vo > pf <identifiersep> rules = <identifier> <identifiersep> port <identifiersep> forwarding <identifiersep> dao . list <identifiersep> by <identifiersep> network ( network <identifiersep> id ) ; \n <ect>
\t5 return new reboot <identifiersep> answer ( cmd , <string_literal> , true ) ; \n \t4 } catch ( tools <identifiersep> unavailable <identifiersep> fault <identifiersep> msg e ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t4 } catch ( exception e ) { \n <ect>
<comment> \n \t1 public void init ( ) throws io <identifiersep> exception { \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( get <identifiersep> aws <identifiersep> access <identifiersep> key ( ) ) || string <identifiersep> utils . is <identifiersep> blank ( get <identifiersep> aws <identifiersep> secret <identifiersep> key ( ) ) ) { \n <ect>
\t6 nginx <identifiersep> clojure <identifiersep> rt . log . debug ( <string_literal> , total ) ; } } \n \t4 @ override \n \t4 public void on <identifiersep> close ( nginx <identifiersep> http <identifiersep> server <identifiersep> channel req , long status , string reason ) { \n <ect>
\t4 chan . socket ( ) . set <identifiersep> keep <identifiersep> alive ( true ) ; \n \t3 selection <identifiersep> key <identifier> = chan . register ( <identifier> <identifiersep> selector , selection <identifiersep> key . op <identifiersep> read ) ; \n \t3 new <identifier> <identifiersep> connection ( <identifier> <identifiersep> context , <identifier> <identifiersep> transport , chan , <identifier> ) ; \n \t3 <comment> \n <ect>
\t2 public object get <identifiersep> result ( ) { \n \t3 log . info ( <string_literal> + id <identifiersep> str ) ; \n \t3 return - 1 ; } } \n \t1 public boolean deserializer ( kryo <identifiersep> tuple <identifiersep> deserializer deserializer , boolean force <identifiersep> consume ) { \n <ect>
\t3 if ( ! <identifier> <identifiersep> model . verify ( get <identifiersep> model <identifiersep> controller ( ) ) ) { \n \t4 <identifier> <identifiersep> model . update ( get <identifiersep> model <identifiersep> controller ( ) ) ; } \n \t3 get <identifiersep> database ( ) . get <identifiersep> virtual <identifiersep> networks ( ) . add ( <identifier> <identifiersep> model ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 } else { \n \t3 new <identifier> <identifiersep> delete <identifiersep> visitor ( catalog ) . visit ( ds ) ; } \n \t2 catalog . remove ( ds ) ; \n \t2 clear ( ds ) ; \n <ect>
\t1 static { \n \t2 try { \n \t3 <identifier> = new oid ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 account <identifiersep> login <identifiersep> page . click <identifiersep> social ( bc . get <identifiersep> idp <identifiersep> alias ( ) ) ; \n \t2 wait <identifiersep> for <identifiersep> page ( driver , <string_literal> , true ) ; \n \t2 assert . assert <identifiersep> true ( <string_literal> , \n \t2 driver . get <identifiersep> current <identifiersep> url ( ) . contains ( <string_literal> + bc . provider <identifiersep> realm <identifiersep> name ( ) + <string_literal> ) ) ; \n <ect>
\t2 if ( null != new <identifiersep> head ) { \n \t3 push ( new <identifiersep> head , <identifier> <identifiersep> current ) ; \n \t3 <identifier> <identifiersep> current <identifiersep> root = new <identifiersep> head ; \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> sync , level . info ) ) \n <ect>
\t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 public boolean sync <identifiersep> generic ( class < ? > cls , list < ? > db <identifiersep> list , list < ? > vnc <identifiersep> list ) throws exception { \n \t2 sync <identifiersep> stats stats = new sync <identifiersep> stats ( ) ; \n \t2 stats . log ( <string_literal> + get <identifiersep> class <identifiersep> name ( cls ) + <string_literal> ) ; \n <ect>
\t2 z <identifiersep> wave <identifiersep> state <identifiersep> converter < ? , ? > converter = this . get <identifiersep> state <identifiersep> converter ( item , event . get <identifiersep> value ( ) ) ; \n \t2 string alarm <identifiersep> type = arguments . get ( <string_literal> ) ; \n \t2 z <identifiersep> wave <identifiersep> alarm <identifiersep> value <identifiersep> event alarm <identifiersep> event = ( z <identifiersep> wave <identifiersep> alarm <identifiersep> value <identifiersep> event ) event ; \n \t2 if ( converter == null ) { \n <ect>
\t6 log . info ( <string_literal> + rsrc4 ) ; \n \t6 log . info ( <string_literal> + rsrc5 ) ; \n \t6 log . info ( <string_literal> + rsrc6 ) ; \n \t6 log . info ( <string_literal> + rsrc7 ) ; \n <ect>
\t3 result = ( statement . execute <identifiersep> update ( ) == 1 ) ; \n \t3 if ( ! result ) { \n \t4 report <identifiersep> <identifier> <identifiersep> owner <identifiersep> <identifier> <identifiersep> and <identifiersep> duration ( connection ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 protected void add <identifiersep> ticket <identifiersep> to <identifiersep> registry ( final o <identifiersep> auth <identifiersep> token ticket , final ticket <identifiersep> granting <identifiersep> ticket ticket <identifiersep> granting <identifiersep> ticket ) { \n \t2 logger . debug ( <string_literal> , ticket ) ; \n \t2 this . ticket <identifiersep> registry . add <identifiersep> ticket ( ticket ) ; \n \t2 if ( ticket <identifiersep> granting <identifiersep> ticket != null ) { \n <ect>
public timeline <identifiersep> metric <identifiersep> metadata <identifiersep> sync ( timeline <identifiersep> metric <identifiersep> metadata <identifiersep> manager cache <identifiersep> manager ) { \n \t1 this . cache <identifiersep> manager = cache <identifiersep> manager ; } \n @ override \n public void run ( ) { \n <ect>
\t6 <string_literal> , <string_literal> , \n \t6 <string_literal> , <string_literal> , \n \t6 <string_literal> , <string_literal> , <string_literal> , <string_literal> } , \n \t4 <string_literal> , null , run <identifiersep> types . yarn <identifiersep> session , 0 ) ; \n <ect>
\t5 s <identifiersep> logger . error ( <string_literal> + tag <identifiersep> names [ i ] + <string_literal> ) ; \n \t4 } else { \n \t5 return <identifiersep> values . put ( tag <identifiersep> names [ i ] , target <identifiersep> nodes . item ( 0 ) . get <identifiersep> text <identifiersep> content ( ) ) ; } } \n \t2 } catch ( exception ex ) { \n <ect>
\t1 return pos ; } \n private static int add <identifiersep> start <identifiersep> time ( condition condition , int pos , prepared <identifiersep> statement stmt ) throws sql <identifiersep> exception { \n \t1 if ( condition . get <identifiersep> start <identifiersep> time ( ) != null ) { \n <ect>
\t3 return get <identifiersep> process <identifiersep> ids <identifiersep> unix ( ) ; } } \n \t1 private static list < long > get <identifiersep> process <identifiersep> ids <identifiersep> windows ( ) { \n \t2 string commands = <string_literal> ; \n \t2 string message = commands ; \n <ect>
<number_literal> final object [ ] args , \n <number_literal> final class < t > expected <identifiersep> type ) { \n \t2 try { \n \t3 if ( resource == null ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 cleanup ( ) ; \n \t3 } catch ( runtime <identifiersep> exception t ) { \n <ect>
\t2 try { \n \t3 content <identifiersep> length = header <identifiersep> accessor . get <identifiersep> content <identifiersep> length ( ) ; } \n \t2 catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t2 try { \n \t3 logger . debug ( <string_literal> , ticket <identifiersep> id ) ; \n \t3 final string enc <identifiersep> ticket <identifiersep> id = encode <identifiersep> ticket <identifiersep> id ( ticket <identifiersep> id ) ; \n \t3 if ( enc <identifiersep> ticket <identifiersep> id == null ) { \n <ect>
\t1 cert <identifiersep> gen . add <identifiersep> extension ( <identifier> . basic <identifiersep> constraints , true , new basic <identifiersep> constraints ( true ) ) ; \n \t1 try { \n \t1 cert <identifiersep> gen . add <identifiersep> extension ( <identifier> . subject <identifiersep> key <identifiersep> identifier , false , new <identifier> <identifiersep> <identifier> <identifiersep> utils ( ) . create <identifiersep> subject <identifiersep> key <identifiersep> identifier ( key ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception | cert <identifiersep> runtime <identifiersep> exception e ) { \n <ect>
\t5 signal = waiting <identifiersep> <identifier> . take ( ) ; \n \t5 if ( signal != null ) { \n \t6 handle ( signal ) ; } \n \t4 } catch ( throwable e ) { \n <ect>
private void failed ( throwable e ) { \n \t1 while ( e . get <identifiersep> cause ( ) != null && e . get <identifiersep> class ( ) == runtime <identifiersep> exception . class ) { \n \t1 e = e . get <identifiersep> cause ( ) ; } \n \t1 set <identifiersep> exception ( e ) ; \n <ect>
\t1 system . out . println ( <string_literal> + image <identifiersep> <identifier> <identifiersep> command <identifiersep> list ) ; \n \t1 result result = erx <identifiersep> runtime <identifiersep> utilities . execute ( image <identifiersep> <identifier> <identifiersep> commands , null , null , 0 ) ; \n \t1 int exit <identifiersep> value = result . get <identifiersep> exit <identifiersep> value ( ) ; \n \t1 if ( exit <identifiersep> value != 0 ) { \n <ect>
\t5 log . debug ( <string_literal> , part <identifiersep> path ) ; \n \t5 <comment> \n \t5 fs . rename ( part <identifiersep> in <identifiersep> progress <identifiersep> path , part <identifiersep> path ) ; \n \t4 } else if ( fs . exists ( part <identifiersep> path ) ) { \n <ect>
\t5 <comment> \n \t5 invocation . get <identifiersep> invocation <identifiersep> context ( ) . get <identifiersep> context <identifiersep> map ( ) . put ( <string_literal> , parameters ) ; } } \n \t3 <comment> \n \t3 if ( dispatcher == null ) { \n <ect>
\t1 assert <identifiersep> true ( query <identifiersep> iterator . has <identifiersep> next ( ) ) ; \n \t1 assert <identifiersep> true ( query <identifiersep> iterator . has <identifiersep> next ( ) ) ; \n \t1 assert <identifiersep> true ( query <identifiersep> iterator . has <identifiersep> next ( ) ) ; \n \t1 customer first = query <identifiersep> iterator . next ( ) ; \n <ect>
\t3 } ) ; \n \t3 try { \n \t4 <identifier> . add ( <identifier> <identifiersep> <identifier> ) ; \n \t3 } catch ( <identifier> <identifiersep> exception e ) { \n <ect>
\t2 } catch ( final io <identifiersep> exception ioe ) { \n \t3 logger . warn ( <string_literal> , ioe ) ; \n \t3 return null ; \n \t2 } catch ( final document <identifiersep> exception de ) { \n <ect>
\t4 i ++ ; } } \n \t2 service <identifiersep> provider = <identifier> <identifiersep> service <identifiersep> provider . get <identifiersep> instance ( ) ; \n \t2 service <identifiersep> provider . init ( get <identifiersep> server <identifiersep> base <identifiersep> url ( ) ) ; \n \t2 <comment> \n <ect>
\t3 final <identifier> <identifiersep> test <identifiersep> definition test <identifiersep> definition = entry . get <identifiersep> value ( ) ; \n \t3 try { \n \t4 verify <identifiersep> <identifier> <identifiersep> consistent <identifiersep> definition ( test <identifiersep> name , matrix <identifiersep> source , test <identifiersep> definition ) ; \n \t3 } catch ( incompatible <identifiersep> test <identifiersep> matrix <identifiersep> exception e ) { \n <ect>
\t4 if ( <identifier> <identifiersep> last <identifiersep> segment <identifiersep> number == - 1 || <identifier> <identifiersep> last <identifiersep> requested <identifiersep> pipeline <identifiersep> segment < <identifier> <identifiersep> last <identifiersep> segment <identifiersep> number ) { \n \t5 <comment> \n \t5 i = segmentation <identifiersep> profile . segment <identifiersep> interest ( <identifier> <identifiersep> base <identifiersep> pipeline <identifiersep> name , <identifier> <identifiersep> last <identifiersep> requested <identifiersep> pipeline <identifiersep> segment + 1 , <identifier> <identifiersep> publisher ) ; \n \t5 <comment> \n <ect>
\t3 priority , false , null , true , update <identifiersep> manager . node . client <identifiersep> core . client <identifiersep> context , null , - 1 ) ; \n \t2 try { \n \t3 update <identifiersep> manager . node . client <identifiersep> core . client <identifiersep> context . start ( putter ) ; \n \t2 } catch ( insert <identifiersep> exception e1 ) { \n <ect>
\t3 try { \n \t4 send <identifiersep> mail ( mail , context ) ; \n \t4 return 0 ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 public void test <identifiersep> assertion <identifiersep> <identifier> ( ) throws exception { \n \t2 assertion . set <identifiersep> x <identifiersep> path <identifiersep> string ( <string_literal> ) ; \n \t2 assertion <identifiersep> result res = assertion . get <identifiersep> result ( result ) ; \n \t2 test <identifiersep> log . debug ( <string_literal> , res . is <identifiersep> error ( ) , res . is <identifiersep> failure ( ) ) ; \n <ect>
\t3 completable <identifiersep> future . run <identifiersep> async ( task : : task <identifiersep> complete ) . join ( ) ; \n \t2 } catch ( throwable t ) { \n \t3 log <identifiersep> bundle <identifiersep> <identifier> ( ) ; \n \t3 handle <identifiersep> uncaught <identifiersep> throwable ( t ) ; } \n <ect>
\t2 } ; \n \t2 log . info ( <string_literal> ) ; \n \t2 for ( string s : iterables . transform ( task . get <identifiersep> src <identifiersep> <identifier> <identifiersep> commands ( ) , command <identifiersep> debug <identifiersep> printer ) ) { \n \t2 log . info ( s ) ; } \n <ect>
\t3 public < t > object execute ( t . . . args ) { \n \t4 try { \n \t5 init ( data . get <identifiersep> conf ( ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t5 bindings , no <identifiersep> mappings ) ; \n \t3 string path = null ; \n \t3 for ( result <identifiersep> row rr : result . get <identifiersep> rows ( ) ) { \n \t4 if ( path != null ) { \n <ect>
\t2 matcher m = p . matcher ( member <identifiersep> attribute <identifiersep> value ) ; \n \t2 log . debug ( <string_literal> , member <identifiersep> attribute <identifiersep> value , pattern ) ; \n \t2 if ( m . matches ( ) ) { \n \t2 member <identifiersep> attribute <identifiersep> value = m . replace <identifiersep> all ( member <identifiersep> attribute <identifiersep> replace <identifiersep> string ) ; \n <ect>
\t3 if ( semantic <identifiersep> type . get <identifiersep> domain ( ) == null ) { \n \t4 logger . error ( <string_literal> ) ; \n \t4 continue ; } \n \t3 if ( semantic <identifiersep> type . get <identifiersep> type ( ) == null ) { \n <ect>
\t4 { \n \t5 hint = compute <identifiersep> next <identifiersep> internal ( ) ; } \n \t4 catch ( eof <identifiersep> exception e ) \n \t4 { \n <ect>
\t2 set < string > members ; \n \t2 try { \n \t3 members = objects . require <identifiersep> non <identifiersep> null ( pull <identifiersep> cluster <identifiersep> members ( ) , <string_literal> ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t1 log . debug ( <string_literal> + snapshot <identifiersep> id + <string_literal> + snapshot <identifiersep> iqn ) ; \n \t1 return volume <identifiersep> exists ( snapshot <identifiersep> id , snapshot <identifiersep> iqn ) ; } \n @ override \n public string create <identifiersep> snapshot <identifiersep> point ( string parent <identifiersep> volume <identifiersep> id , string snapshot <identifiersep> id , string parent <identifiersep> volume <identifiersep> iqn ) throws eucalyptus <identifiersep> cloud <identifiersep> exception { \n <ect>
\t1 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n \t1 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t1 <identifier> . set <identifiersep> error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 url = server + <string_literal> + zone <identifiersep> id + <string_literal> + <identifier> <identifiersep> account . get ( ) + <string_literal> ; \n \t3 client = new http <identifiersep> client ( ) ; \n \t3 method = new get <identifiersep> method ( url ) ; \n \t3 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t4 log . info ( <string_literal> ) ; \n \t4 system . clear <identifiersep> property ( jmx <identifiersep> system <identifiersep> property <identifiersep> keys . disabled ) ; } \n \t2 } else if ( ! test <identifiersep> class . is <identifiersep> annotation <identifiersep> present ( enable <identifiersep> route <identifiersep> coverage . class ) ) { \n \t3 <comment> \n <ect>
\t3 case error : \n \t3 case expunging : \n \t4 return false ; \n \t3 default : \n <ect>
\t4 lifecycle <identifiersep> mojo mojo = <identifier> . get ( i ) ; \n \t4 <identifier> <identifiersep> spec <identifier> = parse <identifiersep> <identifier> <identifiersep> spec ( mojo . get <identifiersep> <identifier> ( ) ) ; \n \t4 if ( <identifier> == null ) \n \t4 { \n <ect>
\t9 <comment> \n \t9 <comment> \n \t9 <comment> \n \t9 <comment> \n <ect>
\t5 public void operation <identifiersep> complete ( channel <identifiersep> future future ) { \n \t6 try { \n \t7 input <identifiersep> stream . close ( ) ; \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 final document document = this . config <identifiersep> bean . get <identifiersep> parser <identifiersep> pool ( ) . parse ( in ) ; \n \t4 return build <identifiersep> single <identifiersep> metadata <identifiersep> resolver ( metadata <identifiersep> filter , resource , document ) ; } \n \t3 logger . warn ( <string_literal> , resource . get <identifiersep> filename ( ) ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t2 if ( player . get <identifiersep> next <identifiersep> action ( ) == null ) { \n \t3 logger . fatal ( <string_literal> ) ; } \n \t2 switch ( player . get <identifiersep> next <identifiersep> action ( ) ) { \n \t3 case priority : \n <ect>
\t4 return false ; \n \t3 case abort : \n \t3 case object : \n \t3 case checkpoint : \n <ect>
\t4 default : \n \t5 break ; } \n \t4 final vm <identifiersep> template <identifiersep> vo template = <identifier> <identifiersep> template <identifiersep> dao . find <identifiersep> routing <identifiersep> template ( h <identifiersep> type , template <identifiersep> name ) ; \n \t4 if ( template == null ) { \n <ect>
\t1 thread . sleep ( <number_literal> ) ; \n \t1 constraints = client . list <identifiersep> constraints ( creds , table <identifiersep> name ) ; } \n \t1 assert <identifiersep> equals ( 1 , client . list <identifiersep> constraints ( creds , table <identifiersep> name ) . size ( ) ) ; \n \t1 log . debug ( <string_literal> ) ; \n <ect>
\t3 assert . assert <identifiersep> equals ( 1 , <identifier> ( read <identifiersep> face <identifiersep> id ) ) ; \n \t3 assert . assert <identifiersep> equals ( <number_literal> , <identifier> ( listener <identifiersep> face <identifiersep> id ) ) ; \n \t3 so <identifiersep> in . close ( ) ; \n \t3 readhandle . check <identifiersep> error ( short <identifiersep> timeout ) ; \n <ect>
\t2 <identifier> <identifiersep> <identifier> = new instruction [ high - low + 1 ] ; \n \t2 for ( i = 0 ; i < high - low + 1 ; i ++ ) { \n \t3 <identifier> <identifiersep> <identifier> [ i ] = bc . locate <identifiersep> inst ( <identifier> <identifiersep> offsets [ i ] + label ) ; \n \t3 if ( <identifier> <identifiersep> <identifier> [ i ] == null ) { \n <ect>
\t2 { \n \t3 logger . info ( <string_literal> + instance <identifiersep> location . get <identifiersep> url ( ) ) ; } \n \t2 logger . debug ( <string_literal> + platform . get <identifiersep> user <identifiersep> location ( ) . get <identifiersep> url ( ) ) ; \n \t2 logger . debug ( <string_literal> + platform . get <identifiersep> install <identifiersep> location ( ) . get <identifiersep> url ( ) ) ; \n <ect>
\t8 entry . set <identifiersep> value ( snap <identifiersep> saved . get <identifiersep> resource <identifiersep> path ( ) ) ; } } } \n \t5 dst <identifiersep> store . put <identifiersep> resource ( cube <identifiersep> res <identifiersep> path , cube , cube <identifiersep> serializer ) ; \n \t5 logger . info ( <string_literal> + item + <string_literal> + snap <identifiersep> saved . get <identifiersep> resource <identifiersep> path ( ) + <string_literal> ) ; } \n \t3 } else { \n <ect>
\t3 public void call ( ) { \n \t4 try { \n \t5 execution <identifiersep> hook . on <identifiersep> success ( <identifier> <identifiersep> cmd ) ; \n \t4 } catch ( throwable hook <identifiersep> ex ) { \n <ect>
\t7 tf <identifiersep> config . e <identifiersep> set ( feature , short . parse <identifiersep> short ( device <identifiersep> config . get ( property ) ) ) ; \n \t6 } else if ( class <identifiersep> name . equals ( <string_literal> ) || class <identifiersep> name . equals ( <string_literal> ) ) { \n \t7 tf <identifiersep> config . e <identifiersep> set ( feature , long . parse <identifiersep> long ( device <identifiersep> config . get ( property ) ) ) ; \n \t6 } else if ( class <identifiersep> name . equals ( <string_literal> ) || class <identifiersep> name . equals ( <string_literal> ) ) { \n <ect>
\t3 synchronized ( lock ) \n \t3 { \n \t4 method <identifiersep> name = <string_literal> ; <comment> \n \t4 remote . <identifier> ( test <identifiersep> tree , host <identifiersep> and <identifiersep> port , base <identifiersep> dir <identifiersep> relative , script <identifiersep> name ) ; } \n <ect>
\t4 if ( policy == policy . fifo ) { \n \t5 <comment> \n \t5 atmosphere <identifiersep> resource resource = resources . poll ( ) ; \n \t5 try { \n <ect>
\t1 @ override \n \t1 public void collect ( context context , most <identifiersep> recent <identifiersep> checksum info ) throws sql <identifiersep> exception { \n \t2 bitstream bitstream = info . get <identifiersep> bitstream ( ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t1 <identifier> = format ( <string_literal> ) \n \t1 if not sudo . path <identifiersep> exists ( <identifier> ) : \n \t1 logger . warning ( <string_literal> ) \n \t1 else : \n <ect>
\t4 async . resume ( output <identifiersep> stream . to <identifiersep> string ( <string_literal> ) ) ; \n \t4 logger . info ( <string_literal> ) ; } \n \t3 @ override \n \t3 public void on <identifiersep> error ( throwable t ) { \n <ect>
\t2 boolean success = true ; \n \t2 <comment> \n \t2 list < port <identifiersep> forwarding <identifiersep> rule <identifiersep> vo > pf <identifiersep> rules = <identifier> <identifiersep> port <identifiersep> forwarding <identifiersep> rules <identifiersep> dao . list <identifiersep> by <identifiersep> network ( network <identifiersep> id ) ; \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 long new <identifiersep> count = insert <identifiersep> count . get ( ) ; \n <comment> \n <ect>
\t2 try { \n \t3 exec <identifiersep> command ( <string_literal> + pid ) ; \n \t3 log . info ( <string_literal> + pid ) ; \n \t2 } catch ( execute <identifiersep> exception e ) { \n <ect>
\t3 log . error ( <string_literal> , first <identifiersep> thread <identifiersep> events , second <identifiersep> thread <identifiersep> events ) ; \n \t3 fail ( <string_literal> ) ; } \n \t2 else if ( first <identifiersep> thread <identifiersep> events . size ( ) < = 1 && second <identifiersep> thread <identifiersep> events . size ( ) < = 1 ) \n \t2 { \n <ect>
\t1 load <identifiersep> balancer <identifiersep> auto <identifiersep> scaling <identifiersep> group scale <identifiersep> group = null ; \n \t1 try { \n \t2 scale <identifiersep> group = load <identifiersep> balancer <identifiersep> auto <identifiersep> scaling <identifiersep> group <identifiersep> entity <identifiersep> transform . instance . apply ( group ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t5 trigger <identifiersep> forward <identifiersep> <identifier> ( screen ) ; \n \t4 } catch ( exception e ) { \n \t5 string msg = <string_literal> + e . to <identifiersep> string ( ) ; \n \t5 get <identifiersep> manager ( ) . push <identifiersep> screen ( message <identifiersep> popup . asset <identifiersep> uri , message <identifiersep> popup . class ) . set <identifiersep> message ( <string_literal> , msg ) ; \n <ect>
\t3 logger . trace ( <string_literal> , addr ) ; \n \t2 local <identifiersep> state . mark <identifiersep> dead ( ) ; \n \t2 live <identifiersep> endpoints . remove ( addr ) ; \n \t2 unreachable <identifiersep> endpoints . put ( addr , system . nano <identifiersep> time ( ) ) ; \n <ect>
\t1 final string value ; \n \t1 if ( configuration <identifiersep> map . contains <identifiersep> key ( ambari <identifiersep> server <identifiersep> configuration <identifiersep> key . key ( ) ) ) { \n \t1 value = configuration <identifiersep> map . get ( ambari <identifiersep> server <identifiersep> configuration <identifiersep> key . key ( ) ) ; \n \t1 } else { \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t2 io <identifiersep> utils . copy ( client <identifiersep> socket . get <identifiersep> input <identifiersep> stream ( ) , target <identifiersep> socket . get <identifiersep> output <identifiersep> stream ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 self . check <identifiersep> hive <identifiersep> server ( env , <identifier> <identifier> , <identifier> <identifiersep> cmd , params . hive <identifiersep> server <identifiersep> hosts , \n \t6 int ( format ( <string_literal> ) ) , params . hive <identifiersep> ssl <identifiersep> keystore <identifiersep> path , params . hive <identifiersep> ssl <identifiersep> keystore <identifiersep> password ) \n \t1 if params . has <identifiersep> hive <identifiersep> interactive and params . hive <identifiersep> interactive <identifiersep> enabled : \n \t1 logger . info ( <string_literal> ) \n <ect>
\t1 <identifier> <identifiersep> c . close ( ) \n \t1 mx <identifiersep> c } } \n @ inline \n private def jvm <identifiersep> <identifier> ( a : matrix , b : matrix , r : option [ matrix ] = none ) : matrix = { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 selector = selector . open ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public boolean add ( channel <identifiersep> message msg , member [ ] destination , interceptor <identifiersep> payload payload ) { \n \t2 boolean ok = true ; \n \t2 if ( ! enabled ) { \n <ect>
\t5 bean <identifiersep> type = obtain <identifiersep> application <identifiersep> context ( ) . get <identifiersep> type ( bean <identifiersep> name ) ; } \n \t4 catch ( throwable ex ) { \n \t5 <comment> \n <ect>
\t2 if ( i == j ) { \n \t2 assert <identifiersep> true ( <string_literal> + dot + <string_literal> + i + ' ) ' , math . abs ( 1 . 0 - dot ) < error <identifiersep> <identifier> ) ; \n \t2 } else { \n \t2 if ( math . abs ( dot ) > error <identifiersep> <identifier> ) { \n <ect>
protected void apply <identifiersep> extra <identifiersep> arguments ( command <identifiersep> line cmd <identifiersep> line ) { \n \t1 super . apply <identifiersep> extra <identifiersep> arguments ( cmd <identifiersep> line ) ; \n \t1 if ( cmd <identifiersep> line . has <identifiersep> option ( boolean <identifiersep> true <identifiersep> string ) ) { \n \t1 string arg = cmd <identifiersep> line . get <identifiersep> option <identifiersep> value ( boolean <identifiersep> true <identifiersep> string ) ; \n <ect>
\t4 t . append ( bag ) ; \n \t4 po <identifiersep> reduce . get <identifiersep> pkg <identifiersep> op ( ) . get <identifiersep> <identifier> ( ) . attach <identifiersep> input ( key , new data <identifiersep> bag [ ] { ( data <identifiersep> bag ) t . get ( 1 ) } , new boolean [ ] { true } ) ; \n \t4 tuple <identifier> <identifiersep> tuple = ( tuple ) po <identifiersep> reduce . get <identifiersep> pkg <identifiersep> op ( ) . get <identifiersep> <identifier> ( ) . get <identifiersep> next ( ) . result ; \n \t4 <comment> \n <ect>
\t5 assert false ; \n \t5 s <identifiersep> logger . error ( <string_literal> + n <identifiersep> method ) ; \n \t5 break ; } \n \t2 } catch ( final throwable e ) { \n <ect>
\t1 protected void debug <identifiersep> before ( exchange exchange , processor processor , \n \t7 processor <identifiersep> definition < ? > definition , string id , string short <identifiersep> name ) { \n \t2 <comment> \n \t2 <comment> \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + format + <string_literal> ) ; \n \t3 return null ; } \n \t2 string iso <identifiersep> path = template <identifiersep> path + file . separator + template <identifiersep> name + <string_literal> + image <identifiersep> format . iso . get <identifiersep> file <identifiersep> extension ( ) ; \n \t2 if ( ! <identifier> <identifiersep> storage . exists ( iso <identifiersep> path ) ) { \n <ect>
\t3 try { \n \t4 skip <identifiersep> list < string , dest <identifiersep> entry > <identifier> = <identifier> <identifiersep> bf . get <identifiersep> index ( <identifier> , <identifier> <identifiersep> string <identifiersep> serializer , <identifier> <identifiersep> dest <identifiersep> serializer ) ; \n \t4 if ( <identifier> == null ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 path <identifier> <identifiersep> xml <identifiersep> file = fs . get <identifiersep> path ( xml <identifiersep> file <identifiersep> source ) \n \t2 node root = new xml <identifiersep> parser ( ) . parse ( <identifier> <identifiersep> xml <identifiersep> file . to <identifiersep> file ( ) ) \n \t2 node dependencies = root . dependencies [ 0 ] \n \t2 <comment> \n <ect>
\t5 <comment> \n \t5 continue ; } } \n \t4 try { \n \t5 int backup = integer . parse <identifiersep> int ( files [ i ] . substring ( index + 1 , files [ i ] . length ( ) ) ) ; \n <ect>
\t2 && cause . get <identifiersep> message ( ) . contains ( llap <identifiersep> token <identifiersep> name ) ) { \n \t2 break ; } \n \t1 cause = cause . get <identifiersep> cause ( ) ; } \n \t1 if ( cause == null ) return false ; \n <ect>
<comment> \n \t1 public collection < email <identifiersep> alias > get <identifiersep> user <identifiersep> email <identifiersep> alias ( string user <identifiersep> id ) { \n \t2 try { \n <ect>
\t3 if ( <identifier> <identifiersep> session != null && <identifier> <identifiersep> session . is <identifiersep> authenticated ( ) ) { \n \t4 final string <identifiersep> writer writer = new string <identifiersep> writer ( ) ; \n \t4 marshaller . marshal ( <identifier> <identifiersep> session , writer ) ; \n \t4 final string <identifier> <identifiersep> xml <identifiersep> session = writer . to <identifiersep> string ( ) ; \n <ect>
\t1 { \n \t2 <comment> \n \t2 if ( feature <identifiersep> class . equals ( feature . get <identifiersep> class ( ) ) ) \n \t2 { \n <ect>
\t4 self ! <identifier> <identifiersep> message ( recover <identifiersep> submitted <identifiersep> job ( submitted <identifiersep> job <identifiersep> graph ) ) } \n \t3 case none = > log . info ( s <string_literal> ) } } \n \t2 } catch { \n \t2 case t : throwable = > { \n <ect>
\t5 pstmt . close ( ) ; } \n \t3 } catch ( sql <identifiersep> exception e ) { } } } \n \t1 @ override \n \t1 public boolean release <identifiersep> lock <identifiersep> as <identifiersep> last <identifiersep> <identifier> <identifiersep> and <identifiersep> i <identifiersep> really <identifiersep> know <identifiersep> what <identifiersep> i <identifiersep> am <identifiersep> doing ( string key ) { \n <ect>
\t5 approval <identifiersep> store . add <identifiersep> <identifier> ( <identifier> ) ; \n \t5 authorization <identifiersep> request . set <identifiersep> <identifier> ( true ) ; \n \t5 return authorization <identifiersep> request ; } } \n \t3 catch ( client <identifiersep> registration <identifiersep> exception e ) { \n <ect>
\t4 ssl <identifiersep> engine <identifier> = <identifier> . create <identifiersep> ssl <identifiersep> engine ( ) ; \n \t4 ssl <identifiersep> parameters params = <identifier> . get <identifiersep> default <identifiersep> ssl <identifiersep> parameters ( ) ; \n \t4 string [ ] s = <identifier> . get <identifiersep> supported <identifiersep> protocols ( ) ; \n \t4 arrays . sort ( s ) ; \n <ect>
\t3 app <identifiersep> id = tez <identifiersep> client . get <identifiersep> app <identifiersep> master <identifiersep> application <identifiersep> id ( ) ; \n \t3 log . info ( <string_literal> + dag . get <identifiersep> name ( ) + <string_literal> + app <identifiersep> id ) ; \n \t2 } catch ( exception e ) { \n \t3 if ( tez <identifiersep> client != null ) { \n <ect>
\t3 <comment> \n \t3 boolean only <identifiersep> <identifier> = true ; \n \t3 if ( <identifier> <identifiersep> <identifier> <identifiersep> peers <identifiersep> exhausted && only <identifiersep> <identifier> && <identifier> <identifiersep> state . get <identifiersep> pending ( ) . is <identifiersep> empty ( ) ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 create <identifiersep> port <identifiersep> group ( v <identifiersep> switch , port <identifiersep> group <identifiersep> name , vlan <identifiersep> id , sec <identifiersep> policy , <identifier> <identifiersep> policy ) ; \n \t3 <comment> \n \t3 wait <identifiersep> for <identifiersep> port <identifiersep> group ( port <identifiersep> group <identifiersep> name , time <identifiersep> out <identifiersep> ms ) ; } \n <ect>
\t3 return false ; } \n \t2 final string token = request . get <identifiersep> parameter ( o <identifiersep> auth20constants . refresh <identifiersep> token ) ; \n \t2 final ticket refresh <identifiersep> token = ticket <identifiersep> registry . get <identifiersep> ticket ( token ) ; \n \t2 if ( refresh <identifiersep> token == null ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 if ( ( null == <identifier> <identifiersep> key <identifiersep> store <identifiersep> directory ) || ( null == <identifier> <identifiersep> configuration <identifiersep> file <identifiersep> name ) ) { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> keys , level . info ) ) { \n <ect>
\t2 int received <identifiersep> endpoint <identifiersep> id = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset ) & <identifier> ; \n \t2 boolean dynamic = ( ( serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset ) & <identifier> ) != 0 ) ; \n \t2 int generic <identifiersep> device <identifiersep> class = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset + 1 ) ; \n \t2 int specific <identifiersep> device <identifiersep> class = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset + <number_literal> ) ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 physical <identifiersep> plan com <identifiersep> <identifier> = need <identifiersep> <identifier> ( merge <identifiersep> list ) ? \n \t4 create <identifiersep> <identifier> <identifiersep> plan ( same <identifiersep> key <identifiersep> type , true ) : null ; \n <ect>
\t3 invalid <identifiersep> name = content <identifiersep> name . from <identifiersep> uri ( <string_literal> ) ; \n \t2 } catch ( malformed <identifiersep> content <identifiersep> name <identifiersep> string <identifiersep> exception e ) { \n \t3 assert . fail ( <string_literal> ) ; } \n \t2 try { \n <ect>
\t9 context . authenticate ( <string_literal> , <string_literal> ) ; \n \t9 context . get <identifiersep> user <identifiersep> service ( ) . change <identifiersep> password ( <string_literal> , <identifier> <identifiersep> model . admin <identifiersep> user <identifiersep> password ) ; \n \t9 context . logout ( ) ; } \n \t8 catch ( context <identifiersep> authentication <identifiersep> exception ex ) { \n <ect>
\t5 add <identifiersep> random <identifiersep> documents ( index , random <identifiersep> int <identifiersep> between ( <number_literal> , <number_literal> ) ) ; \n \t4 } else { \n \t5 int doc <identifiersep> count = ( int ) client ( ) . prepare <identifiersep> search ( index ) . set <identifiersep> size ( 0 ) . get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) ; \n \t5 int delete <identifiersep> count = random <identifiersep> int <identifiersep> between ( 1 , doc <identifiersep> count ) ; \n <ect>
\t2 try { \n \t3 part = part <identifiersep> queue . take ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception ex ) { <comment> \n \t3 error = boolean . true ; \n <ect>
\t1 { \n \t2 try { \n \t3 listener . on <identifiersep> response <identifiersep> received ( response ) ; } \n \t2 catch ( throwable t ) { \n <ect>
\t2 value <identifiersep> map map ; \n \t2 try { \n \t3 map = value . as <identifiersep> map ( ) ; \n \t2 } catch ( value <identifiersep> translation <identifiersep> exception <identifier> ) { \n <ect>
\t3 user <identifiersep> manager . suspend <identifiersep> user ( username ) ; \n \t3 security <identifiersep> log . info ( subject , <string_literal> , username ) ; } \n \t2 catch ( authorization <identifiersep> violation <identifiersep> exception | io <identifiersep> exception | invalid <identifiersep> arguments <identifiersep> exception e ) \n \t2 { \n <ect>
\t4 executor <identifiersep> service . shutdown <identifiersep> now ( ) ; \n \t3 } else { \n \t4 try { \n \t5 if ( ! executor <identifiersep> service . await <identifiersep> termination ( time <identifiersep> left , time <identifiersep> unit . milliseconds ) ) { \n <ect>
\t2 else \n \t3 rv = new byte <identifiersep> array ( new byte [ len ] ) ; \n \t1 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error <identifier> ) { \n \t1 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 <identifier> = new array <identifiersep> list < file > ( ) ; } \n \t1 <comment> \n \t1 @ test \n \t1 public void test <identifiersep> <identifier> ( ) { \n <ect>
\t6 for ( string s : database <identifiersep> descriptor . get <identifiersep> all <identifiersep> data <identifiersep> file <identifiersep> locations ( ) ) \n \t7 valid <identifiersep> folder | = file <identifiersep> utils . is <identifiersep> sub <identifiersep> directory ( new file ( s ) , f ) ; \n \t6 if ( ! valid <identifiersep> folder ) \n \t6 { \n <ect>
\t3 <comment> \n \t3 int <identifier> = <identifier> <identifiersep> rule ( segment ) ; \n \t3 int duration = ( normal <identifiersep> duration * <identifier> ) / <number_literal> ; \n \t3 segment . set <identifiersep> attribute ( <string_literal> , string . value <identifiersep> of ( duration ) ) ; \n <ect>
public string fee <identifiersep> type ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> fee <identifiersep> type . fee <identifiersep> type <identifiersep> key ) ; } \n public void set <identifiersep> fee <identifiersep> type ( string value ) { \n <ect>
\t1 if ( op <identifiersep> handle != null ) { \n \t2 try { \n \t2 close <identifiersep> operation ( op <identifiersep> handle ) ; \n \t2 } catch ( hive <identifiersep> sql <identifiersep> exception e ) { \n <ect>
\t5 if ( delivery != null ) { \n \t6 minion . channel . basic <identifiersep> <identifier> ( delivery . get <identifiersep> envelope ( ) . get <identifiersep> delivery <identifiersep> tag ( ) , false , true ) ; } \n \t4 } catch ( exception e ) { \n \t5 log . warn ( <string_literal> , ex ) ; } \n <ect>
\t1 public void receive <identifiersep> command ( item item , command command , z <identifiersep> wave <identifiersep> node node , z <identifiersep> wave <identifiersep> <identifier> <identifiersep> command <identifiersep> class command <identifiersep> class , \n \t3 int endpoint <identifiersep> id , map < string , string > arguments ) { \n \t2 z <identifiersep> wave <identifiersep> command <identifiersep> converter < ? , ? > converter = this . get <identifiersep> command <identifiersep> converter ( command . get <identifiersep> class ( ) ) ; \n \t2 if ( converter == null ) { \n <ect>
\t4 . get ( ) ; \n \t2 assert <identifiersep> hit <identifiersep> count ( response , <number_literal> ) ; \n \t2 assert <identifiersep> that ( response . get <identifiersep> hits ( ) . get <identifiersep> at ( 0 ) . get <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 assert <identifiersep> that ( response . get <identifiersep> hits ( ) . get <identifiersep> at ( 1 ) . get <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n <ect>
\t1 } catch ( io <identifiersep> exception e ) { \n \t1 log . error ( <string_literal> , e ) ; \n \t1 next <identifiersep> object = null ; \n \t1 } catch ( end <identifiersep> of <identifiersep> document <identifiersep> exception e ) { \n <ect>
\t1 catch ( io <identifiersep> exception ioe ) \n \t1 { \n \t2 <comment> \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 for ( int i = 1 ; i < tokens . length ; i ++ ) { \n \t3 args [ i - 1 ] = integer . value <identifiersep> of ( tokens [ i ] ) ; } \n \t2 try { \n \t3 retry <identifiersep> backoff <identifiersep> strategy <identifier> = instantiate ( policy <identifiersep> class <identifiersep> name , args , desc ) ; \n <ect>
\t1 if ( ! m . matches ( ) ) { \n \t1 <identifier> <identifiersep> rows <identifiersep> count ++ ; \n \t2 if ( ! already <identifiersep> logged <identifiersep> no <identifiersep> match ) { \n \t2 <comment> \n <ect>
\t1 public <identifier> <identifiersep> set < activity <identifiersep> dto > execute ( final get <identifiersep> <identifier> <identifiersep> activities <identifiersep> request in <identifiersep> request ) \n \t1 { \n \t2 if ( in <identifiersep> request . get <identifiersep> <identifier> <identifiersep> user <identifiersep> account <identifiersep> id ( ) == null ) \n \t2 { \n <ect>
\t4 long total <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n \t4 if ( content <identifiersep> raw == null ) { \n \t5 <comment> \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t2 sources = get <identifiersep> source <identifiersep> list ( shards ) ; \n \t2 if ( hash ) { \n \t3 sources = new stream <identifiersep> source <identifiersep> <identifier> ( sources , shards , shard <identifiersep> total ) ; } \n \t2 cache <identifiersep> <identifier> <identifiersep> service . execute ( new cache <identifiersep> <identifier> ( ) ) ; \n <ect>
\t2 return ret <identifiersep> code \n \t2 pass \n \t1 pass \n \t1 except <identifier> . http <identifiersep> error , e : \n <ect>
\t5 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t4 } finally { \n \t5 lock . unlock ( ) ; } \n \t3 } catch ( final exception e ) { \n <ect>
\t2 log . warn ( <string_literal> + san <identifiersep> snapshot <identifiersep> id + <string_literal> , att <identifiersep> ex ) ; \n \t2 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( \n \t3 <string_literal> + snapshot <identifiersep> id + <string_literal> + san <identifiersep> snapshot <identifiersep> id + <string_literal> , att <identifiersep> ex ) ; } \n \t2 if ( lun == null ) { \n <ect>
\t1 protected void close <identifiersep> all <identifiersep> streams ( ) { \n \t2 io <identifiersep> utils . close <identifiersep> quietly ( in , out ) ; } \n \t1 @ override \n \t1 public void notify <identifiersep> error ( ssh <identifiersep> exception error ) { \n <ect>
\t2 string version = dao . get <identifiersep> current <identifiersep> version ( ) ; \n \t2 if ( ! version . equals ( <string_literal> ) ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + version ) ; \n \t2 } else { \n <ect>
\t3 context . write ( in <identifiersep> line . substring ( <identifier> <identifiersep> len , in <identifiersep> line . length ( ) - <number_literal> ) \n \t4 + <string_literal> , null ) ; \n \t3 counters . add <identifiersep> bytes ( 1 + len ) ; } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 semantic <identifiersep> model . write <identifiersep> json ( context <identifiersep> parameters . get <identifiersep> parameter <identifiersep> value ( context <identifiersep> parameter . json <identifiersep> models <identifiersep> dir ) + \n \t5 semantic <identifiersep> model . get <identifiersep> name ( ) + \n \t5 <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 assert rsrc != null ; \n \t3 assert spring <identifiersep> bean != null ; \n \t3 <comment> \n \t3 assert job <identifiersep> ctx == null ; \n <ect>
\t2 if ( cache <identifiersep> type . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t3 cache <identifiersep> operator = new rocks <identifiersep> db <identifiersep> cache <identifiersep> operator ( context , cache <identifiersep> dir ) ; \n \t2 } else { \n \t3 cache <identifiersep> operator = new default <identifiersep> cache <identifiersep> operator ( ) ; } \n <ect>
\t3 sock . close ( ) ; \n \t3 long after <identifiersep> sending = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 system . out . println ( <string_literal> + ( size / <number_literal> ) + <string_literal> + ( after <identifiersep> sending - before <identifiersep> sending ) + <string_literal> ) ; \n \t2 } catch ( interrupted <identifiersep> io <identifiersep> exception <identifier> ) { \n <ect>
\t1 private void set <identifiersep> constraint ( @ nonnull string constraint ) { \n \t2 try { \n \t3 pattern = pattern . compile ( constraint ) ; \n \t2 } catch ( pattern <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t5 if ( stat <identifiersep> entry == null ) { \n \t6 continue ; } \n \t5 vm <identifiersep> network <identifiersep> stats <identifiersep> name <identifiersep> map . put ( vm <identifiersep> name , stat <identifiersep> entry ) ; \n \t4 } catch ( libvirt <identifiersep> exception e ) { \n <ect>
\t2 smtp <identifiersep> appender . start ( ) ; \n \t2 logger logger = logger <identifiersep> context . get <identifiersep> logger ( <string_literal> ) ; \n \t2 logger . add <identifiersep> appender ( smtp <identifiersep> appender ) ; \n \t2 logger . debug ( <string_literal> ) ; \n <ect>
\t6 for ( map . entry < string , string > entry : segment . get <identifiersep> <identifier> ( ) . entry <identifiersep> set ( ) ) { \n \t7 if ( entry . get <identifiersep> value ( ) . equals <identifiersep> ignore <identifiersep> case ( item ) ) { \n \t8 entry . set <identifiersep> value ( dict <identifiersep> saved . get <identifiersep> resource <identifiersep> path ( ) ) ; } } } \n \t5 dst <identifiersep> store . put <identifiersep> resource ( cube <identifiersep> res <identifiersep> path , cube , cube <identifiersep> serializer ) ; \n <ect>
\t3 before <identifiersep> class ( ) ; \n \t3 build <identifiersep> cube <identifiersep> with <identifiersep> stream = new build <identifiersep> cube <identifiersep> with <identifiersep> stream ( ) ; \n \t3 build <identifiersep> cube <identifiersep> with <identifiersep> stream . before ( ) ; \n \t3 build <identifiersep> cube <identifiersep> with <identifiersep> stream . build ( ) ; \n <ect>
\t2 for ( int i = 0 ; i < message <identifiersep> count ; i ++ ) { \n \t3 final string text = <string_literal> + i ; \n \t3 template . send ( destination , new message <identifiersep> creator ( ) { \n \t4 public message create <identifiersep> message ( session session ) throws jms <identifiersep> exception { \n <ect>
\t9 storage <identifiersep> service . remove <identifiersep> engine ( store <identifiersep> repository . get <identifiersep> storage <identifiersep> engine ( store <identifiersep> def . get <identifiersep> name ( ) ) , \n <number_literal> is <identifiersep> read <identifiersep> only , \n <number_literal> store <identifiersep> def . get <identifiersep> type ( ) , \n <number_literal> false ) ; \n <ect>
\t1 if ( null != bw ) { \n \t2 try { \n \t2 bw . close ( ) ; \n \t2 } catch ( mutations <identifiersep> rejected <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . warn ( warning + <string_literal> + old <identifiersep> current <identifiersep> bytes <identifiersep> sent + <string_literal> + new <identifiersep> current <identifiersep> bytes <identifiersep> sent + <string_literal> ) ; \n \t4 user <identifiersep> stats . set <identifiersep> net <identifiersep> bytes <identifiersep> sent ( old <identifiersep> net <identifiersep> bytes <identifiersep> sent + old <identifiersep> current <identifiersep> bytes <identifiersep> sent ) ; } \n \t3 user <identifiersep> stats . set <identifiersep> current <identifiersep> bytes <identifiersep> received ( new <identifiersep> current <identifiersep> bytes <identifiersep> received ) ; \n \t3 if ( old <identifiersep> current <identifiersep> bytes <identifiersep> received > new <identifiersep> current <identifiersep> bytes <identifiersep> received ) { \n <ect>
\t5 break ; \n \t4 case handshake <identifiersep> fail : \n \t5 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + ctx . channel ( ) . remote <identifiersep> address ( ) ) ; \n \t4 default : \n <ect>
\t1 } else { \n \t2 logger . warn ( messages . get <identifiersep> instance ( ) . get <identifiersep> error <identifiersep> string ( <string_literal> ) ) ; } \n \t1 return <identifier> <identifiersep> cache ; \n \t1 } else { \n <ect>
\t3 if ( element == null ) { \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + service . user <identifiersep> data . get <identifiersep> name ( ) + <string_literal> ) ; } \n \t3 boolean result = element . save <identifiersep> user <identifiersep> data ( network , nic <identifiersep> profile , vm <identifiersep> profile ) ; \n \t3 if ( ! result ) { \n <ect>
\t3 for ( concept c : <identifier> <identifiersep> parents ) { \n \t4 parents . add <identifiersep> all ( get <identifiersep> parents ( c ) ) ; } \n \t3 parents . add ( current ) ; \n <ect>
\t1 @ before \n \t1 public void set <identifiersep> up ( ) throws exception { \n \t2 super . set <identifiersep> up ( ) ; \n \t2 number <identifiersep> of <identifiersep> entries = random <identifiersep> int <identifiersep> between ( <number_literal> , <number_literal> ) ; \n <ect>
\t4 if ( <identifier> != null ) try { <identifier> . close ( ) ; } catch ( io <identifiersep> exception ioe ) { } \n \t4 break ; \n \t3 } catch ( connect <identifiersep> exception ce ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t3 properties . put <identifiersep> all ( config ) ; \n \t3 log . info ( <string_literal> + properties ) ; \n \t3 return get <identifiersep> caching <identifiersep> data <identifiersep> store ( properties , context ) ; \n \t2 } else { \n <ect>
\t1 for ( field <identifiersep> mapping field <identifiersep> <identifier> : entity <identifiersep> <identifier> . get <identifiersep> field <identifiersep> mappings ( ) ) { \n \t1 if ( field <identifiersep> <identifier> . get <identifiersep> mapping <identifiersep> type ( ) == mapping <identifiersep> type . column ) { \n \t2 string value = field <identifiersep> <identifier> . get <identifiersep> mapping <identifiersep> value ( ) ; \n \t2 if ( entity <identifiersep> <identifier> . contains ( value ) ) { \n <ect>
\t1 log . info ( <string_literal> , llap <identifiersep> daemon <identifiersep> info . instance . get <identifiersep> pid ( ) ) ; \n \t1 <comment> \n \t1 } catch ( throwable t ) { \n \t1 <comment> \n <ect>
\t4 return true ; \n \t3 if ( logger . is <identifiersep> enabled <identifiersep> for ( level . warn ) ) { \n \t4 long allowed <identifiersep> time = expiration - start <identifiersep> time ; \n \t4 long elapsed <identifiersep> time = now <identifiersep> ns - start <identifiersep> time ; \n <ect>
\t1 @ after \n \t1 public void tear <identifiersep> down ( ) throws exception { \n \t2 pooled <identifiersep> conn <identifiersep> fact . stop ( ) ; \n \t2 stop <identifiersep> broker ( ) ; \n <ect>
\t10 real <identifiersep> file real <identifiersep> file = new real <identifiersep> file ( new file ( image <identifiersep> path . to <identifiersep> string ( ) ) ) ; \n \t10 virtual <identifiersep> folder . add <identifiersep> child ( real <identifiersep> file ) ; } } } \n \t7 i <identifiersep> photo <identifiersep> virtual <identifiersep> folder . add <identifiersep> child ( virtual <identifiersep> folder ) ; } } \n \t4 } else { \n <ect>
\t4 continue ; } \n \t3 list < virtual <identifiersep> router > routers = <identifier> <identifiersep> <identifier> <identifiersep> mgr . get <identifiersep> routers <identifiersep> for <identifiersep> network ( nic . get <identifiersep> network <identifiersep> id ( ) ) ; \n \t3 if ( routers == null || routers . is <identifiersep> empty ( ) ) { \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 digital <identifiersep> actor <identifiersep> digital <identifiersep> <identifier> <identifier> = factory . create <identifiersep> digital <identifiersep> actor <identifiersep> digital <identifiersep> <identifier> ( ) ; \n \t3 <identifier> . set <identifiersep> uid ( get <identifiersep> uid ( ) ) ; \n \t3 string sub <identifiersep> id = <string_literal> + string . value <identifiersep> of ( i ) ; \n <ect>
\t3 actions [ i ] = new <identifier> <identifiersep> test <identifiersep> nodes <identifiersep> action ( cluster <identifiersep> settings , <string_literal> , thread <identifiersep> pool , test <identifiersep> nodes [ i ] \n \t4 . cluster <identifiersep> service , test <identifiersep> nodes [ i ] . transport <identifiersep> service , should <identifiersep> block , action <identifiersep> latch ) ; } \n \t2 task task = actions [ 0 ] . execute ( request , listener ) ; \n \t2 if ( wait <identifiersep> for <identifiersep> action <identifiersep> to <identifiersep> start ) { \n <ect>
\t1 { \n \t2 try \n \t2 { \n \t3 i <identifiersep> crypt crypt = ( i <identifiersep> crypt ) ( crypt <identifiersep> class . get ( ) ) . new <identifiersep> instance ( ) ; \n <ect>
\t2 if ( flush <identifiersep> mode == flush <identifiersep> mode . always ) { \n \t3 log . debug ( <string_literal> ) ; \n \t3 return flush <identifiersep> mode <identifiersep> type . auto ; } \n \t2 else if ( flush <identifiersep> mode == flush <identifiersep> mode . manual ) { \n <ect>
\t2 boolean alive = null ; \n \t2 if ( work . get <identifiersep> step ( ) == step . <identifier> ) { \n \t3 if ( ! is <identifiersep> host <identifiersep> removed ) { \n \t4 if ( vm . get <identifiersep> host <identifiersep> id ( ) == null || vm . get <identifiersep> host <identifiersep> id ( ) != work . get <identifiersep> host <identifiersep> id ( ) ) { \n <ect>
\t1 elif reduce ( lambda a , b : a and b , [ not e . is <identifiersep> succeeded for e in <identifier> <identifiersep> snapshot ] ) : \n \t2 log . error ( <string_literal> ) \n \t2 os . <identifier> [ build <identifiersep> aggregate <identifiersep> status ] = <string_literal> \n \t1 else : \n <ect>
\t3 try { \n \t4 if ( session != null ) { \n \t5 session . close ( ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t1 expr <identifiersep> node <identifiersep> desc mod <identifiersep> expr = type <identifiersep> check <identifiersep> proc <identifiersep> factory . default <identifiersep> expr <identifiersep> processor \n \t2 . get <identifiersep> func <identifiersep> expr <identifiersep> node <identifiersep> desc ( <string_literal> , and <identifiersep> expr , <identifier> <identifiersep> expr ) ; \n \t1 assert ( mod <identifiersep> expr != null ) ; \n \t1 log . info ( <string_literal> + mod <identifiersep> expr ) ; \n <ect>
\t4 list <identifiersep> <identifier> . add ( null ) ; \n \t3 } else { \n \t4 string property = p . get <identifiersep> property ( trimmed ) ; \n \t4 if ( property == null ) { \n <ect>
\t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 return null ; \n \t2 } catch ( dom <identifiersep> exception e ) { \n <ect>
\t3 final ticket <identifiersep> definition metadata = this . ticket <identifiersep> catalog . find ( ticket <identifiersep> id <identifiersep> to <identifiersep> delete ) ; \n \t3 final string collection <identifiersep> name = get <identifiersep> ticket <identifiersep> collection <identifiersep> instance <identifiersep> by <identifiersep> metadata ( metadata ) ; \n \t3 final query query = new query ( criteria . where ( ticket <identifiersep> holder . field <identifiersep> name <identifiersep> id ) . is ( ticket <identifiersep> id ) ) ; \n \t3 final write <identifiersep> result res = this . mongo <identifiersep> template . remove ( query , collection <identifiersep> name ) ; \n <ect>
\t9 . get <identifiersep> basedir ( ) , \n \t9 session . get <identifiersep> local <identifiersep> repository <identifiersep> manager ( ) \n \t10 . get <identifiersep> path <identifiersep> for <identifiersep> local <identifiersep> artifact ( artifact ) ) ; \n \t8 if ( ! to <identifiersep> use . exists ( ) ) { \n <ect>
\t2 if ( <string_literal> . equals ( txt . trim ( ) ) ) { \n \t3 return ; } \n \t2 log . verbose ( <string_literal> + txt ) ; \n \t2 if ( classpath != null ) { \n <ect>
\t4 return ; } \n \t3 <identifier> . sign ( key ) ; \n \t3 get <identifiersep> context ( ) . router ( ) . set <identifiersep> router <identifiersep> info ( <identifier> ) ; \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t6 <comment> \n \t6 process <identifiersep> <identifier> <identifiersep> <identifier> ( payload , <number_literal> , null , reply <identifiersep> to , false , true , setup <identifiersep> type , <identifier> <identifiersep> type ) ; } } \n \t3 } ) ; \n \t2 } else { \n <ect>
\t5 files <identifiersep> util . recursive <identifiersep> delete ( world ) ; \n \t5 game <identifiersep> list . get <identifiersep> list ( ) . remove ( game <identifiersep> info ) ; \n \t5 game <identifiersep> list . set <identifiersep> selection ( null ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 logger . info ( <string_literal> + plugins <identifiersep> folder . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t2 try { \n \t3 file <identifiersep> permissions permissions = new file <identifiersep> permissions ( plugins <identifiersep> folder ) ; \n \t3 if ( ! permissions . is <identifiersep> folder ( ) ) { \n <ect>
\t2 current <identifiersep> execution . set <identifiersep> discovered <identifiersep> input <identifiersep> files <identifiersep> snapshot ( discovered <identifiersep> files <identifiersep> snapshot ) ; } \n \t1 private static file <identifiersep> collection <identifiersep> snapshot snapshot <identifiersep> discovered <identifiersep> inputs ( task task , input <identifiersep> <identifier> <identifiersep> strategy <identifier> <identifiersep> strategy , collection < file > discovered <identifiersep> inputs , file <identifiersep> collection <identifiersep> <identifier> <identifiersep> registry <identifier> <identifiersep> registry , file <identifiersep> collection <identifiersep> factory file <identifiersep> collection <identifiersep> factory ) { \n \t2 file <identifiersep> collection <identifiersep> <identifier> <identifier> = <identifier> <identifiersep> registry . get <identifiersep> <identifier> ( generic <identifiersep> file <identifiersep> <identifier> . class ) ; \n \t2 if ( discovered <identifiersep> inputs . is <identifiersep> empty ( ) ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
<comment> \n \t1 public udp <identifiersep> packet build <identifiersep> <identifier> <identifiersep> <identifier> ( inet <identifiersep> address to , int port ) { \n \t2 udp <identifiersep> packet packet = udp <identifiersep> packet . acquire ( <identifier> <identifiersep> context , false ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 for ( json <identifiersep> index < signer <identifiersep> config <identifiersep> json <identifiersep> helper , signer <identifiersep> config > index : signer <identifiersep> indexes ) { \n \t4 string region = index . get <identifiersep> key ( ) ; \n \t4 signer <identifiersep> config prev = map . put ( region , index . new <identifiersep> read <identifiersep> only <identifiersep> config ( ) ) ; \n \t4 if ( prev != null ) { \n <ect>
\t3 <comment> \n \t3 call <identifiersep> context . current ( ) . put <identifiersep> context <identifiersep> parameter ( snapshot <identifiersep> policy . class , policy . get <identifiersep> uuid ( ) ) ; \n \t3 return policy ; \n \t2 } else { \n <ect>
\t3 pstmt . execute <identifiersep> update ( ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t2 <string_literal> \n \t1 } , \n \t1 <string_literal> + \n \t1 <string_literal> + \n <ect>
\t2 requests . content <identifiersep> type = x <identifiersep> content <identifiersep> type . <identifier> ; \n \t2 requests . index <identifiersep> content <identifiersep> type = x <identifiersep> content <identifiersep> type . json ; } \n \t1 @ before \n \t1 public final void before ( ) { \n <ect>
\t3 this . session = session ; } \n \t2 @ override \n \t2 public void run ( ) { \n \t3 while ( ! thread . current <identifiersep> thread ( ) . is <identifiersep> interrupted ( ) ) { \n <ect>
<comment> \n \t3 if ( refresh <identifiersep> info ) { \n <ect>
\t4 if ( entry . get <identifiersep> value ( ) . is <identifiersep> empty ( ) ) { <comment> \n \t5 try { \n \t6 io <identifiersep> utils . close ( remote ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 private inline fun < r > if <identifiersep> alive <identifiersep> checks <identifiersep> impl ( min <identifiersep> <identifier> : <identifier> = <identifier> . last <identifiersep> session , body : ( ) - > compile <identifiersep> service . call <identifiersep> result < r > ) : compile <identifiersep> service . call <identifiersep> result < r > { \n \t2 val cur <identifiersep> state = state . alive . get ( ) \n \t2 return when { \n \t3 cur <identifiersep> state < min <identifiersep> <identifier> . ordinal - > { \n <ect>
\t1 } else { \n \t2 label = data . <identifier> <identifiersep> label ( <identifier> ) ; } \n \t1 log . debug ( <string_literal> , label ) ; \n \t1 return new leaf ( label ) ; } \n <ect>
\t4 null , <string_literal> , false ) ; \n \t3 assert . assert <identifiersep> true ( mor <identifiersep> host == null ) ; \n \t3 context . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 rep . set <identifiersep> expiration <identifiersep> date ( new date ( ) ) ; \n \t3 return rep ; } \n \t2 else \n \t2 { \n <ect>
\t3 get <identifiersep> metrics ( con , filter , metrics , name ) ; \n \t3 } catch ( exception e ) { \n \t3 logger . warn ( <string_literal> + name , e ) ; } } } } \n \t1 } catch ( exception e ) { \n <ect>
\t3 schema <identifiersep> property <identifiersep> cell <identifiersep> renderer <identifier> = \n \t4 new schema <identifiersep> property <identifiersep> cell <identifiersep> renderer ( <identifier> ) ; \n \t3 property <identifiersep> table . set <identifiersep> default <identifiersep> renderer ( object . class , <identifier> ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 { \n \t2 log . info ( <string_literal> + this + <string_literal> ) ; } \n \t1 void emit <identifiersep> start ( log log , diagnostics <identifiersep> provider provider ) \n \t1 { \n <ect>
\t1 if ( ! executor <identifiersep> service . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . milliseconds ) ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 executor <identifiersep> service . shutdown <identifiersep> now ( ) ; \n \t2 while ( ! executor <identifiersep> service . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . milliseconds ) ) { \n <ect>
\t1 public void init ( game <identifiersep> initialization <identifiersep> event event ) { \n \t2 <identifier> <identifiersep> channel <identifiersep> handler . init ( ) ; } \n \t1 @ listener \n \t1 public void post <identifiersep> init ( game <identifiersep> post <identifiersep> initialization <identifiersep> event event ) { \n <ect>
\t4 string [ ] data = get <identifiersep> message <identifiersep> codec ( ) . decode ( frame <identifiersep> data ) ; \n \t4 if ( data != null && data . length == <number_literal> ) { \n \t5 close <identifiersep> status = new close <identifiersep> status ( integer . value <identifiersep> of ( data [ 0 ] ) , data [ 1 ] ) ; } \n <ect>
@ after <identifiersep> class \n public static void tear <identifiersep> down ( ) throws io <identifiersep> exception , interrupted <identifiersep> exception { \n \t1 log . debug ( <string_literal> ) ; \n \t1 service . stop ( ) ; \n <ect>
\t2 class <identifiersep> file [ ] [ ] lists = <identifier> <identifiersep> class . fix <identifiersep> <identifier> ( ) ; \n \t2 for ( binding <identifiersep> definition def : binding <identifiersep> defs . values ( ) ) { \n \t3 def . add <identifiersep> class <identifiersep> list ( lists [ 0 ] , lists [ 1 ] ) ; } \n \t2 <identifier> <identifiersep> class . write <identifiersep> changes ( ) ; \n <ect>
\t4 items prev <identifiersep> items = null ; \n \t4 for ( items items : non <identifiersep> empty <identifiersep> items <identifiersep> with <identifiersep> id ) { \n \t5 long this <identifiersep> time = items . time <identifiersep> last <identifiersep> sent ; \n \t5 if ( this <identifiersep> time < prev ) \n <ect>
\t1 buckets = search <identifiersep> criteria . list ( ) ; \n \t1 trans . commit ( ) ; \n \t1 return buckets ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \t4 m <identifiersep> device = factory . create <identifiersep> m <identifiersep> bricklet <identifiersep> <identifier> ( ) ; \n \t4 m <identifiersep> device . set <identifiersep> device <identifiersep> identifier ( bricklet <identifiersep> <identifier> . device <identifiersep> identifier ) ; \n \t3 } else if ( device <identifiersep> identifier == bricklet <identifiersep> <identifier> . device <identifiersep> identifier ) { \n <ect>
\t2 enc <identifiersep> <identifier> <identifiersep> key , \n \t2 <identifier> <identifiersep> <identifier> ) ; \n \t1 this . alloc <identifiersep> info . set <identifiersep> credential ( credential ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t1 log <identifiersep> log . error ( <string_literal> <string_literal> \\ <string_literal> <string_literal> \\ <string_literal> ) ; \n \t1 log <identifiersep> log . error ( <string_literal> <string_literal> \\ <string_literal> ) ; \n \t1 log <identifiersep> log . error ( <string_literal> + super <identifiersep> class . get <identifiersep> class <identifiersep> loader ( ) + <string_literal> ) ; \n <ect>
\t1 if ( ! command <identifiersep> params . contains <identifiersep> key ( user <identifiersep> hook <identifiersep> params . cmd <identifiersep> input <identifiersep> file . param ( ) ) ) { \n \t1 logger . error ( <string_literal> , user <identifiersep> hook <identifiersep> params . cmd <identifiersep> input <identifiersep> file . param ( ) ) ; \n \t1 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + user <identifiersep> hook <identifiersep> params . cmd <identifiersep> input <identifiersep> file . param ( ) + <string_literal> ) ; } \n \t1 if ( ! command <identifiersep> params . contains <identifiersep> key ( user <identifiersep> hook <identifiersep> params . cluster <identifiersep> security <identifiersep> type . param ( ) ) ) { \n <ect>
\t3 if ( dag <identifiersep> status . is <identifiersep> completed ( ) ) { \n \t4 try { \n \t5 dag <identifiersep> status = dag <identifiersep> client . get <identifiersep> dag <identifiersep> status ( status <identifiersep> get <identifiersep> opts ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 boolean is <identifiersep> local <identifiersep> ip = my <identifiersep> host <identifiersep> name . equals ( <string_literal> ) || my <identifiersep> host <identifiersep> name . equals ( <string_literal> ) ; \n \t4 if ( is <identifiersep> local <identifiersep> ip ) { \n \t5 throw new exception ( <string_literal> ) ; } \n \t3 } catch ( exception e1 ) { \n <ect>
\t1 @ interceptor <identifiersep> method <identifiersep> binding \n \t1 @ interceptor <identifiersep> filter <identifiersep> binding \n \t1 public interceptor <identifiersep> book lookup <identifiersep> book <identifiersep> by <identifiersep> id ( @ path <identifiersep> param ( <string_literal> ) int id ) { \n \t2 log . info ( <string_literal> + id + <string_literal> ) ; \n <ect>
\t3 <comment> \n \t3 for ( int j = 0 ; j < num <identifiersep> options ; j ++ ) { \n \t4 if ( i % <identifier> [ j ] == 0 ) { \n \t5 values [ j ] = ! values [ j ] ; } } \n <ect>
\t2 final path home <identifiersep> dir = fs . get <identifiersep> home <identifiersep> directory ( ) ; \n \t2 <comment> \n \t2 if ( ! fs . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) . equals ( <string_literal> ) && \n \t4 fs . get <identifiersep> scheme ( ) . starts <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t2 if ( ! configured <identifiersep> name <identifiersep> formats . is <identifiersep> empty ( ) && configured <identifiersep> name <identifiersep> formats . contains <identifiersep> key ( attribute . get <identifiersep> name ( ) ) ) { \n \t3 final string name <identifiersep> format = configured <identifiersep> name <identifiersep> formats . get ( attribute . get <identifiersep> name ( ) ) ; \n \t3 logger . debug ( <string_literal> , name <identifiersep> format , attribute . get <identifiersep> name ( ) ) ; \n \t3 configure <identifiersep> attribute <identifiersep> name <identifiersep> format ( attribute , name <identifiersep> format ) ; \n <ect>
\t2 <identifier> . add ( <identifier> ) ; \n \t2 i ++ ; } \n \t1 connection . commit ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 contact <identifiersep> group root <identifiersep> <identifier> \n \t3 = ( ( operation <identifiersep> set <identifiersep> persistent <identifiersep> presence ) op <identifiersep> set <identifiersep> <identifier> ) . \n \t3 get <identifiersep> server <identifiersep> stored <identifiersep> contact <identifiersep> list <identifiersep> root ( ) ; \n <ect>
\t3 indexer . assert <identifiersep> no <identifiersep> failures ( ) ; \n \t3 logger . info ( <string_literal> , total <identifiersep> num <identifiersep> docs ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 indexer . stop ( ) ; \n <ect>
\t2 while ( true ) { \n \t3 if ( semaphore . try <identifiersep> write <identifiersep> lock ( remaining , time <identifiersep> unit . nanoseconds ) == 0 ) { \n \t4 <identifier> <identifiersep> file <identifiersep> ref <identifiersep> <identifier> = concurrent <identifiersep> hash <identifiersep> <identifier> . create ( ) ; \n \t4 short <identifiersep> <identifier> = true ; \n <ect>
\t1 @ override \n \t1 public void close ( ) { \n \t2 logger . debug ( <string_literal> , role . get <identifiersep> display <identifiersep> name ( ) ) ; \n \t2 if ( disabled ) { \n <ect>
\t2 } finally { \n \t3 if ( ! is <identifiersep> use <identifiersep> context <identifiersep> class <identifiersep> loader ( ) ) { \n \t3 thread . current <identifiersep> thread ( ) . set <identifiersep> context <identifiersep> class <identifiersep> loader ( <identifier> ) ; } } \n <ect>
\t5 stats . set <identifiersep> current <identifiersep> bytes <identifiersep> sent ( bytes <identifiersep> sent ) ; \n \t5 stats . set <identifiersep> current <identifiersep> bytes <identifiersep> received ( bytes <identifiersep> rcvd ) ; \n \t5 collected <identifiersep> stats . add ( stats ) ; } } \n \t3 if ( collected <identifiersep> stats . size ( ) == 0 ) { \n <ect>
\t2 } else if ( ! string <identifiersep> utils . is <identifiersep> blank ( component ) ) { \n \t3 log . info ( <string_literal> , component ) ; \n \t3 list < integer > tasks = topology <identifiersep> context . get <identifiersep> component <identifiersep> tasks ( component ) ; \n \t3 if ( tasks == null ) { \n <ect>
\t3 try { \n \t4 pdu . wait ( ) ; \n \t3 } catch ( final interrupted <identifiersep> exception e ) { } } \n <ect>
\t3 logger . info ( <string_literal> , endpoint ) ; \n \t3 token <identifiersep> metadata . update <identifiersep> normal <identifiersep> tokens ( tokens , endpoint ) ; } \n \t2 else if ( ! token <identifiersep> metadata . get <identifiersep> tokens ( endpoint ) . contains <identifiersep> all ( tokens ) ) \n \t2 { \n <ect>
\t3 assert <identifiersep> false ( success ) ; \n \t3 ret = <identifier> . run ( <string_literal> + db <identifiersep> name + <string_literal> + db <identifiersep> name + <string_literal> ) ; \n \t3 success = ( ret . get <identifiersep> exception ( ) == null ) ; \n \t3 assert <identifiersep> false ( success ) ; \n <ect>
<comment> \n private string generate <identifiersep> diff ( request request ) throws io <identifiersep> exception { \n \t1 list < string > pending <identifiersep> <identifier> = request . get <identifiersep> pending <identifiersep> <identifier> ( ) ; \n \t1 if ( ! pending <identifiersep> <identifier> . is <identifiersep> empty ( ) ) { \n <ect>
\t4 string value = param <identifiersep> tokens [ 1 ] + <string_literal> + param <identifiersep> tokens [ <number_literal> ] ; \n \t4 map . put ( name , value ) ; \n \t3 } else { \n <ect>
\t4 } ) ; \n \t3 } else { \n \t4 process <identifiersep> builder process <identifiersep> builder = get <identifiersep> builders ( ) [ 0 ] ; \n \t4 list < string > program <identifiersep> and <identifiersep> args = process <identifiersep> builder . command ( ) ; \n <ect>
\t6 <comment> \n \t6 worker <identifiersep> vm . detach <identifiersep> all <identifiersep> disks ( ) ; \n \t6 worker <identifiersep> vm . destroy ( ) ; } \n \t4 } catch ( throwable e ) { \n <ect>
\t3 create <identifiersep> file ( file , file . get <identifiersep> file <identifiersep> name ( ) . to <identifiersep> string ( ) ) ; } \n \t2 return file <identifiersep> visit <identifiersep> result . continue ; } \n \t1 @ override \n \t1 public file <identifiersep> visit <identifiersep> result visit <identifiersep> file <identifiersep> failed ( final path file , final io <identifiersep> exception exc ) throws io <identifiersep> exception { \n <ect>
\t5 exchange . get <identifiersep> out ( ) . set <identifiersep> body ( reply ) ; \n \t5 <comment> \n \t5 exchange . get <identifiersep> out ( ) . set <identifiersep> headers ( exchange . get <identifiersep> in ( ) . get <identifiersep> headers ( ) ) ; \n \t5 log . info ( <string_literal> + reply ) ; } \n <ect>
private void delete ( path operator <identifiersep> output <identifiersep> path , file <identifiersep> system fs ) { \n \t1 try { \n \t1 fs . delete ( operator <identifiersep> output <identifiersep> path , true ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
public class application extends erx <identifiersep> application { \n \t1 public static void main ( string [ ] <identifier> ) { \n \t2 erx <identifiersep> application . main ( <identifier> , application . class ) ; } \n \t1 public application ( ) { \n <ect>
\t2 try { \n \t3 client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> delete ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t3 } else { \n \t4 logger . info ( <string_literal> ) ; \n \t4 system . clear <identifiersep> property ( jmx <identifiersep> system <identifiersep> property <identifiersep> keys . disabled ) ; } \n \t2 } else { \n <ect>
\t5 locked <identifiersep> <identifier> <identifiersep> inbound <identifiersep> available ( satisfied ) ; \n \t4 } else { \n \t5 <comment> \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t5 throw new configuration <identifiersep> exception ( <string_literal> , <string_literal> ) ; } \n \t4 if ( ! tmp . matches ( <string_literal> ) ) { \n \t5 throw new configuration <identifiersep> exception ( <string_literal> , <string_literal> ) ; } \n \t4 units = tmp . char <identifiersep> at ( 0 ) ; } \n <ect>
\t6 log . info ( <string_literal> + tmp <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n \t4 } else { \n \t5 log . info ( <string_literal> + response <identifiersep> code ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t3 } else if ( url <identifiersep> provider . get . equals <identifiersep> ignore <identifiersep> case ( include <identifiersep> params ) || ( include <identifiersep> params == null && url <identifiersep> component . get <identifiersep> value ( ) == null && url <identifiersep> component . get <identifiersep> action ( ) == null ) ) { \n \t4 include <identifiersep> get <identifiersep> parameters ( url <identifiersep> component ) ; \n \t4 include <identifiersep> extra <identifiersep> parameters ( url <identifiersep> component ) ; \n \t3 } else if ( include <identifiersep> params != null ) { \n <ect>
\t6 log . warn ( <string_literal> ) ; } } \n \t4 log . debug ( <string_literal> ) ; \n \t4 connection . commit ( ) ; } \n \t3 catch ( batch <identifiersep> update <identifiersep> exception be ) { \n <ect>
\t4 return data ; } \n \t3 throw new io <identifiersep> exception ( <string_literal> + data ) ; \n \t2 } catch ( connect <identifiersep> exception <identifier> ) { \n \t3 if ( hm <identifiersep> interface . <identifier> == hm <identifiersep> interface || hm <identifiersep> interface . <identifier> == hm <identifiersep> interface ) { \n <ect>
\t4 logger . debug ( <string_literal> , path ) ; \n \t4 failures . remove ( <identifier> . url ) ; \n \t4 return ; \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t4 restored <identifiersep> reader <identifiersep> state = new array <identifiersep> list < > ( ) ; \n \t4 for ( <identifier> <identifiersep> file <identifiersep> input <identifiersep> split split : <identifier> <identifiersep> state . get ( ) ) { \n \t5 restored <identifiersep> reader <identifiersep> state . add ( split ) ; } \n <ect>
\t4 synchronized ( thread <identifiersep> <identifier> ) { \n \t5 queue . put ( flush <identifiersep> signal ) ; \n \t5 thread <identifiersep> <identifier> . wait ( ) ; } } \n \t3 catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 } finally { \n \t4 try { \n \t5 connection . close ( ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t5 check <identifiersep> index . status status = store . check <identifiersep> index ( out ) ; \n \t5 out . flush ( ) ; \n \t5 if ( ! status . clean ) { \n \t6 es <identifiersep> test <identifiersep> case . check <identifiersep> index <identifiersep> failed = true ; \n <ect>
\t4 configuration job <identifiersep> conf = null ; \n \t4 try { \n \t5 job <identifiersep> conf = new x <identifiersep> configuration ( new string <identifiersep> reader ( coord <identifiersep> job . get <identifiersep> conf ( ) ) ) ; } \n \t4 catch ( io <identifiersep> exception e1 ) { \n <ect>
\t1 vm <identifiersep> type vm <identifiersep> type = null ; \n \t1 try { \n \t2 vm <identifiersep> type = vm <identifiersep> types . lookup ( input . get <identifiersep> instance <identifiersep> type ( ) . get <identifiersep> name ( ) ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t4 if ( cookies <identifiersep> value <identifiersep> set . is <identifiersep> empty ( ) ) \n \t5 log . debug ( <string_literal> , cookie <identifiersep> name , cookie <identifiersep> value ) ; \n \t4 else if ( cookies <identifiersep> value <identifiersep> set . contains ( <string_literal> ) ) \n <ect>
<comment> \n <comment> \n <comment> \n <ect>
\t5 return is <identifiersep> local ; } \n \t4 else \n \t4 { \n \t5 if ( dfa . print <identifiersep> debug ( ) ) \n <ect>
\t2 } catch ( mutations <identifiersep> rejected <identifiersep> exception e ) { \n \t2 log . error ( <string_literal> , table <identifiersep> name ) ; \n \t2 throw new remote <identifiersep> replication <identifiersep> exception ( remote <identifiersep> replication <identifiersep> error <identifiersep> code . could <identifiersep> not <identifiersep> apply , \n \t3 <string_literal> + table <identifiersep> name ) ; } } } \n <ect>
\t4 try { \n \t5 s <identifiersep> logger . debug ( <string_literal> + vsm <identifiersep> ip + <string_literal> ) ; \n \t5 <identifier> <identifiersep> nexus <identifiersep> element . delete <identifiersep> cisco <identifiersep> nexus <identifiersep> vsm ( vsm <identifiersep> info . second ( ) . long <identifiersep> value ( ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t5 if ( wf . get <identifiersep> status ( ) == workflow <identifiersep> job . status . killed ) { \n \t6 coord <identifiersep> action . set <identifiersep> status ( coordinator <identifiersep> action . status . killed ) ; \n \t6 <identifier> <identifiersep> status = status . killed ; } \n \t5 else { \n <ect>
\t6 volume <identifiersep> info . process <identifiersep> event ( event . operation <identifiersep> <identifier> ) ; } \n \t5 else { \n \t6 volume <identifiersep> info . process <identifiersep> event ( event . operation <identifiersep> failed ) ; } } \n \t4 catch ( exception ex ) { \n <ect>
\t2 this . job <identifiersep> graph . remove <identifiersep> all <identifiersep> edges ( <identifier> <identifiersep> <identifier> ) \n \t2 prune ( ) \n \t2 logger . info ( <string_literal> ) \n \t2 added <identifiersep> functions . <identifier> ( function = > if ( running ) this . add ( function ) ) \n <ect>
\t4 send <identifiersep> my <identifiersep> configuration <identifiersep> to ( member . endpoint ( ) , false , membership <identifiersep> version . get ( ) ) ; } \n \t4 logger . info ( <string_literal> , joined <identifiersep> member , load <identifiersep> factor ) ; \n \t3 } else { \n <ect>
\t3 else if ( ( tmp = pig <identifiersep> context . get <identifiersep> properties ( ) . get <identifiersep> property ( <string_literal> , null ) ) != null ) { \n \t4 try { \n \t5 max <identifiersep> combined <identifiersep> split <identifiersep> size = long . parse <identifiersep> long ( tmp ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t4 if ( attempt < num <identifiersep> fetch <identifiersep> retries ) { \n \t6 log . error ( message + <string_literal> , t ) ; \n \t5 } else { \n <ect>
\t3 exchange . get <identifiersep> in ( ) . set <identifiersep> header ( ftp <identifiersep> constants . ftp <identifiersep> reply <identifiersep> string , client . get <identifiersep> reply <identifiersep> string ( ) ) ; \n \t3 <comment> \n \t3 string <identifier> = endpoint . get <identifiersep> configuration ( ) . get <identifiersep> <identifier> ( ) ; \n \t3 if ( object <identifiersep> helper . is <identifiersep> not <identifiersep> empty ( <identifier> ) ) { \n <ect>
\t2 if ( object <identifiersep> helper . is <identifiersep> empty ( deployment <identifiersep> name ) ) { \n \t3 log . error ( <string_literal> ) ; \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( namespace <identifiersep> name ) ) { \n <ect>
\t1 if ( resources . contains <identifiersep> key ( key ) ) { \n \t1 throw new illegal <identifiersep> transaction <identifiersep> state <identifiersep> exception ( core <identifiersep> messages . transaction <identifiersep> resource <identifiersep> already <identifiersep> listed <identifiersep> for <identifiersep> key ( key ) ) ; } \n \t1 resources . put ( normalized <identifiersep> key , resource ) ; \n \t1 if ( key == null ) { \n <ect>
\t3 throw t ; } } \n \t1 <comment> \n \t1 protected export <identifiersep> import <identifiersep> manager migrate <identifiersep> and <identifiersep> bootstrap ( ) { \n \t2 export <identifiersep> import <identifiersep> manager export <identifiersep> import <identifiersep> manager ; \n <ect>
\t2 try { \n \t3 while ( ( line = reader . read <identifiersep> line ( ) ) != null ) { \n \t4 sb . append ( line + <string_literal> ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 create <identifiersep> task ( sampler ) ; } \n \t1 @ override \n \t1 public void sample <identifiersep> ended ( final sampler sampler ) { \n <ect>
\t3 { \n \t4 content = new string ( req . get <identifiersep> raw <identifiersep> content ( ) , get <identifiersep> charset ( req ) ) ; } \n \t3 catch ( unsupported <identifiersep> encoding <identifiersep> exception ex ) \n \t3 { \n <ect>
\t3 logger . error ( <string_literal> , e ) ; \n \t3 <comment> \n \t3 if ( completed <identifiersep> cluster <identifiersep> and <identifiersep> stores <identifiersep> change ) { \n \t4 try { \n <ect>
\t1 private static void safe <identifiersep> close ( file key <identifiersep> file , output <identifiersep> stream key <identifiersep> out ) { \n \t2 try { \n \t3 key <identifiersep> out . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 for ( target target : targets <identifiersep> table . values ( ) ) { \n \t2 for ( string <identifier> : target . get <identifiersep> <identifier> ( ) . key <identifiersep> set ( ) ) { \n \t3 abstract <identifiersep> action action = new abstract <identifiersep> action ( target . get <identifiersep> <identifier> ( ) . get ( <identifier> ) . get ( <string_literal> ) ) { \n \t4 public void action <identifiersep> performed ( action <identifiersep> event <identifier> ) { \n <ect>
\t3 assert grid <identifiersep> size == <number_literal> ; \n \t3 log . info ( <string_literal> + rsrc1 ) ; \n \t3 log . info ( <string_literal> + rsrc2 ) ; \n \t3 log . info ( <string_literal> + rsrc3 ) ; \n <ect>
\t4 width = integer . parse <identifiersep> int ( w ) ; \n \t3 if ( null != h ) \n \t4 height = integer . parse <identifiersep> int ( h ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t4 feature <identifiersep> type <identifiersep> info feature <identifiersep> type = read <identifiersep> feature <identifiersep> type ( <identifier> <identifiersep> info <identifiersep> reader , feature <identifiersep> type <identifiersep> directory ) ; \n \t4 if ( feature <identifiersep> type == null ) { \n \t5 continue ; } \n \t4 catalog . add ( feature <identifiersep> type ) ; \n <ect>
\t3 logger . warn ( <string_literal> + index <identifiersep> file + <string_literal> + \n \t6 ( disable <identifiersep> auto <identifiersep> index <identifiersep> creation ? <string_literal> : <string_literal> ) ) ; \n \t2 if ( ! disable <identifiersep> auto <identifiersep> index <identifiersep> creation ) { \n \t3 boolean deleted = index <identifiersep> file . delete ( ) ; \n <ect>
\t2 boolean enable <identifiersep> copy <identifiersep> on <identifiersep> read = properties <identifiersep> util . to <identifiersep> boolean ( config . get ( prop <identifiersep> copy <identifiersep> on <identifiersep> read ) , true ) ; \n \t2 index <identifiersep> tracker tracker ; \n \t2 if ( enable <identifiersep> copy <identifiersep> on <identifiersep> read ) { \n \t3 initialize <identifiersep> index <identifiersep> <identifier> ( bundle <identifiersep> context , config ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
\t3 <comment> \n \t3 migrate <identifiersep> with <identifiersep> storage <identifiersep> receive <identifiersep> command receive <identifiersep> cmd = new migrate <identifiersep> with <identifiersep> storage <identifiersep> receive <identifiersep> command ( to , volume <identifiersep> to <identifiersep> storage <identifiersep> uuid ) ; \n \t3 migrate <identifiersep> with <identifiersep> storage <identifiersep> receive <identifiersep> answer receive <identifiersep> answer = ( migrate <identifiersep> with <identifiersep> storage <identifiersep> receive <identifiersep> answer ) agent <identifiersep> mgr . send ( dest <identifiersep> host . get <identifiersep> id ( ) , receive <identifiersep> cmd ) ; \n \t3 if ( receive <identifiersep> answer == null ) { \n <ect>
\t2 public void unable <identifiersep> to <identifiersep> monitor <identifiersep> lock <identifiersep> node ( final throwable e ) { \n \t2 halt . halt ( 1 , new runnable ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n <ect>
\t4 . initial <identifiersep> capacity ( initial <identifiersep> cache <identifiersep> size ) \n \t4 . maximum <identifiersep> size ( max <identifiersep> cache <identifiersep> size ) \n \t4 . expire <identifiersep> after <identifiersep> write ( trusted . get <identifiersep> expiration ( ) , trusted . get <identifiersep> time <identifiersep> unit ( ) ) \n \t4 . build ( s - > { \n <ect>
\t2 async <identifiersep> loop <identifiersep> thread executor <identifiersep> threads = new async <identifiersep> loop <identifiersep> thread ( base <identifiersep> executor , false , thread . max <identifiersep> priority , true ) ; \n \t2 task <identifiersep> receiver = mk <identifiersep> task <identifiersep> receiver ( ) ; \n \t2 list < async <identifiersep> loop <identifiersep> thread > all <identifiersep> threads = new array <identifiersep> list < > ( ) ; \n \t2 all <identifiersep> threads . add ( executor <identifiersep> threads ) ; \n <ect>
\t3 if ( image <identifiersep> processor == null ) { \n \t3 try { \n \t4 image <identifiersep> processor = image <identifiersep> <identifier> <identifiersep> image <identifiersep> processor . image <identifiersep> <identifier> <identifiersep> image <identifiersep> processor ( ) ; } \n \t3 catch ( throwable t ) { \n <ect>
\t1 break ; \n \t1 case <identifier> : \n \t1 pc = new location <identifiersep> pattern <identifiersep> converter ( formatting <identifiersep> info , \n \t5 line <identifiersep> location <identifiersep> converter ) ; \n <ect>
\t6 log . info ( <string_literal> \n \t8 + <string_literal> ) ; \n \t5 } else if ( key . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { <comment> \n \t6 file <identifiersep> encoding = val ; \n <ect>
\t1 try { \n \t2 if ( null != stmt ) { \n \t2 stmt . close ( ) ; } \n \t1 } catch ( exception ex ) { \n <ect>
\t1 try { \n \t2 if ( new <identifiersep> value instanceof string ) { \n \t2 time = integer . parse <identifiersep> int ( ( string ) new <identifiersep> value ) ; } \n \t1 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 existing <identifiersep> snap . set <identifiersep> iqn ( parts [ 0 ] ) ; <comment> \n \t2 entities . merge ( existing <identifiersep> snap ) ; \n \t2 <identifier> . commit ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t4 fail ( <string_literal> ) ; \n \t4 return false ; \n \t4 } , slow <identifiersep> service . class ) . sleep ( <number_literal> ) ; \n \t2 final client <identifiersep> message <identifiersep> bus bus = ( client <identifiersep> message <identifiersep> bus ) <identifier> <identifiersep> bus . get ( ) ; \n <ect>
\t2 cors <identifiersep> rule converted = convert <identifiersep> cors <identifiersep> rule ( rule <identifiersep> info , bucket <identifiersep> uuid ) ; \n \t2 entities . merge ( converted ) ; } } \n \t1 <identifier> . commit ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t1 <comment> \n \t1 public void clear ( ) { \n <ect>
\t3 throw new runtime <identifiersep> exception ( e ) ; } \n \t2 set <identifiersep> mode ( mode . <identifier> , <string_literal> , true ) ; \n \t2 future < stream <identifiersep> state > hints <identifiersep> success = stream <identifiersep> hints ( ) ; \n \t2 <comment> \n <ect>
\t4 <comment> \n \t4 handlers . add <identifiersep> all ( web <identifiersep> submission <identifiersep> extension . get <identifiersep> handlers ( ) ) ; \n \t3 } catch ( flink <identifiersep> exception e ) { \n <ect>
\t7 writer . write ( msg ) ; \n \t6 } else { \n \t7 put <identifiersep> in <identifiersep> context ( msg ) ; } \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 final authentication authentication = authentication <identifiersep> result . get <identifiersep> authentication ( ) ; \n \t3 final principal principal = authentication . get <identifiersep> principal ( ) ; \n \t3 final o <identifiersep> auth <identifiersep> user <identifiersep> profile profile = new o <identifiersep> auth <identifiersep> user <identifiersep> profile ( ) ; \n \t3 final string id = registered <identifiersep> service . get <identifiersep> username <identifiersep> attribute <identifiersep> provider ( ) . resolve <identifiersep> username ( principal , service , registered <identifiersep> service ) ; \n <ect>
\t1 private final map < set < annotation > , bean < <identifier> <identifiersep> key <identifiersep> value <identifiersep> adapter > > <identifier> <identifiersep> key <identifiersep> value <identifiersep> adapters = new hash <identifiersep> map < > ( ) ; \n \t1 private final map < set < annotation > , bean < key <identifiersep> value <identifiersep> operations > > <identifier> <identifiersep> key <identifiersep> value <identifiersep> templates = new hash <identifiersep> map < > ( ) ; \n \t1 private final map < set < annotation > , bean < <identifier> <identifiersep> operations < ? , ? > > > <identifier> <identifiersep> operations = new hash <identifiersep> map < > ( ) ; \n \t1 public <identifier> <identifiersep> repository <identifiersep> extension ( ) { \n <ect>
\t2 { \n \t3 <identifier> . on <identifiersep> error ( e ) ; } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t4 current <identifiersep> config . set ( new <identifiersep> config ) ; \n \t4 <identifier> <identifiersep> provider . set <identifiersep> connection <identifiersep> string ( connection <identifiersep> string ) ; } \n \t3 else \n \t3 { \n <ect>
\t3 if ( ! use <identifiersep> system <identifiersep> class <identifiersep> loader ) { \n \t4 cls = openmrs <identifiersep> class <identifiersep> loader . get <identifiersep> instance ( ) . load <identifiersep> class ( class <identifiersep> string ) ; \n \t5 try { \n <ect>
\t5 table <identifiersep> property . project . get <identifiersep> localized <identifiersep> message ( ) \n \t6 + <string_literal> \n \t6 + a <identifiersep> cms <identifiersep> ui . get <identifiersep> cms <identifiersep> object ( ) . read <identifiersep> project ( current <identifiersep> session . get <identifiersep> project ( ) ) . get <identifiersep> name ( ) ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t9 <comment> \n \t9 <comment> \n \t9 if ( reason == null ) { \n \t10 if ( internet ) { \n <ect>
\t8 right <identifiersep> tuple = ( tuple ) right ; } \n \t7 for ( int i = 0 ; i < right <identifiersep> tuple . size ( ) ; i ++ ) { \n \t8 result . append ( right <identifiersep> tuple . get ( i ) ) ; } \n <ect>
\t3 if ( <identifier> <identifiersep> private <identifiersep> nic == null ) { \n \t4 throw new configuration <identifiersep> exception ( <string_literal> ) ; } } \n \t2 string infos [ ] = net <identifiersep> utils . get <identifiersep> network <identifiersep> params ( <identifier> <identifiersep> private <identifiersep> nic ) ; \n \t2 if ( infos == null ) { \n <ect>
public class full <identifiersep> rolling <identifiersep> restart <identifiersep> it extends es <identifiersep> <identifier> <identifiersep> test <identifiersep> case { \n \t1 protected void assert <identifiersep> timeout ( cluster <identifiersep> health <identifiersep> request <identifiersep> builder request <identifiersep> builder ) { \n \t2 cluster <identifiersep> health <identifiersep> response cluster <identifiersep> health = request <identifiersep> builder . get ( ) ; \n \t2 if ( cluster <identifiersep> health . is <identifiersep> timed <identifiersep> out ( ) ) { \n <ect>
\t3 if ( serial <identifiersep> port != null ) { \n \t4 logger . info ( <string_literal> , serial <identifiersep> port , \n \t6 connected ? <string_literal> : <string_literal> ) ; \n \t3 } else if ( ip <identifiersep> address != null ) { \n <ect>
\t1 if ( rs != null ) { \n \t2 try { \n \t2 rs . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + element <identifiersep> name ) ; } \n \t2 try { \n \t3 return clz . new <identifiersep> instance ( ) ; \n \t2 } catch ( instantiation <identifiersep> exception e ) { \n <ect>
\t2 this . m <identifiersep> cfg = cfg ; \n \t2 this . m <identifiersep> method = m ; \n \t2 this . m <identifiersep> class = c ; \n \t2 if ( options . v ( ) . verbose ( ) ) \n <ect>
\t4 if ( source instanceof boolean ) { \n \t5 return ( boolean ) source ; } \n \t4 if ( source instanceof string ) { \n \t5 <comment> \n <ect>
\t3 srv <identifiersep> sock = create <identifiersep> server <identifiersep> socket ( ) ; \n \t3 srv <identifiersep> sock <identifiersep> handler = new runner ( get <identifiersep> thread <identifiersep> factory ( ) , ssl <identifiersep> key <identifiersep> exchange . class . get <identifiersep> simple <identifiersep> name ( ) + <string_literal> , \n \t10 this : : accept , ( ) - > util . close ( srv <identifiersep> sock ) ) ; \n \t3 srv <identifiersep> sock <identifiersep> handler . start ( ) ; \n <ect>
\t5 int jvm <identifiersep> version <identifiersep> int = integer . parse <identifiersep> int ( java <identifiersep> version ) ; \n \t5 if ( jvm <identifiersep> version <identifiersep> int < = <number_literal> && jvm <identifiersep> version <identifiersep> int >= <number_literal> ) <comment> \n \t6 jvm <identifiersep> has <identifiersep> <identifier> <identifiersep> char <identifiersep> conversion <identifiersep> bug = true ; } \n \t4 catch ( throwable t ) { \n <ect>
\t4 return ; } \n \t3 long elapsed = new date ( ) . get <identifiersep> time ( ) - start ; \n \t3 if ( pause <identifiersep> on <identifiersep> early <identifiersep> termination <identifiersep> millis > - 1 && \n \t5 elapsed > pause <identifiersep> on <identifiersep> early <identifiersep> termination <identifiersep> millis ) { \n <ect>
\t2 else \n \t3 servlet <identifiersep> ops . error ( http <identifiersep> sc . method <identifiersep> not <identifiersep> allowed <identifiersep> <number_literal> ) ; } \n \t1 private void exec <identifiersep> get ( http <identifiersep> action action , string name ) { \n \t2 if ( name == null ) \n <ect>
\t3 return error <identifiersep> response . exists ( <string_literal> ) ; \n \t2 } catch ( model <identifiersep> exception me ) { \n \t3 if ( session . get <identifiersep> transaction <identifiersep> manager ( ) . is <identifiersep> active ( ) ) { \n \t4 session . get <identifiersep> transaction <identifiersep> manager ( ) . set <identifiersep> rollback <identifiersep> only ( ) ; } \n <ect>
\t2 if <identifier> <identifiersep> sources <identifiersep> list <identifiersep> tmp <identifiersep> dir : \n \t2 logger . info ( <string_literal> . format ( <identifier> <identifiersep> sources <identifiersep> list <identifiersep> tmp <identifiersep> dir ) ) \n \t2 os . <identifier> ( <identifier> <identifiersep> sources <identifiersep> list <identifiersep> tmp <identifiersep> dir ) \n \t1 else : \n <ect>
\t2 if ( shutdown . get ( ) ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 break ; \n \t2 } else { \n <ect>
\t4 method method = class <identifiersep> loader . get <identifiersep> class ( ) . get <identifiersep> <identifier> ( ) \n \t6 . get <identifiersep> declared <identifiersep> method ( <string_literal> , new class [ ] { java . net . url . class } ) ; \n \t4 method . set <identifiersep> accessible ( true ) ; \n \t4 method . invoke ( class <identifiersep> loader , new object [ ] { u } ) ; \n <ect>
\t1 if ( rc != 0 ) { \n \t1 session <identifiersep> state . get ( ) . out . println ( response ) ; } \n \t1 assert <identifiersep> equals ( <string_literal> + rc , 0 , rc ) ; } \n private void remove <identifiersep> encryption <identifiersep> zone ( ) throws exception { \n <ect>
\t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 t . send <identifiersep> response <identifiersep> headers ( <number_literal> , - 1 ) ; \t2 <comment> \n \t2 } catch ( throwable e ) { \n <ect>
\t5 iterator < column > column <identifiersep> iterator = property . get <identifiersep> column <identifiersep> iterator ( ) ; \n \t5 if ( column <identifiersep> iterator . has <identifiersep> next ( ) ) { \n \t6 column column = column <identifiersep> iterator . next ( ) ; \n \t6 if ( column <identifiersep> iterator . has <identifiersep> next ( ) ) { \n <ect>
\t2 } else { \n \t3 refund <identifiersep> tx . add <identifiersep> output ( total <identifiersep> value , legacy <identifiersep> address . from <identifiersep> key ( params , my <identifiersep> key ) ) ; \n \t3 refund <identifiersep> <identifier> = <identifier> <identifiersep> fee ; } \n \t2 refund <identifiersep> tx . get <identifiersep> confidence ( ) . set <identifiersep> source ( transaction <identifiersep> confidence . source . self ) ; \n <ect>
\t1 public column <identifiersep> definition get <identifiersep> column <identifiersep> definition ( ) { \n \t2 return column <identifiersep> definition ; } \n \t1 @ override \n \t1 public void init ( ) { \n <ect>
\t1 throw new hive <identifiersep> exception ( e ) ; } } \n protected void flush <identifiersep> to <identifiersep> file ( ) throws io <identifiersep> exception , hive <identifiersep> exception { \n \t1 <comment> \n \t1 path tmp <identifiersep> uri = get <identifiersep> exec <identifiersep> context ( ) . get <identifiersep> local <identifiersep> work ( ) . get <identifiersep> tmp <identifiersep> path ( ) ; \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t1 row <identifiersep> schema rs = parent . get <identifiersep> schema ( ) ; \n \t1 column <identifiersep> info ci = rs . get <identifiersep> column <identifiersep> info ( desc . get <identifiersep> column ( ) ) ; \n \t1 if ( ci == null ) { \n \t1 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t3 vdi = create <identifiersep> vdi ( sr , vdi <identifiersep> name <identifiersep> label , volume <identifiersep> size ) ; \n \t2 } else { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t4 } catch ( interrupted <identifiersep> exception e ) { \n \t5 <comment> \n \t3 count ++ ; } \n <ect>
\t1 return containers . build ( ) ; } \n @ override \n public boolean create <identifiersep> container <identifiersep> in <identifiersep> location ( string container , location location , create <identifiersep> container <identifiersep> options options ) { \n \t1 <comment> \n <ect>
\t3 if ( ! title <identifiersep> property . is <identifiersep> null <identifiersep> property ( ) ) { \n \t4 title <identifiersep> property . set <identifiersep> value ( m <identifiersep> site . get <identifiersep> title ( ) , cms <identifiersep> property . type <identifiersep> <identifier> ) ; \n \t4 m <identifiersep> cms . write <identifiersep> property <identifiersep> object ( res . get <identifiersep> root <identifiersep> path ( ) , title <identifiersep> property ) ; \n \t3 } else { \n <ect>
\t3 account <identifiersep> registration <identifiersep> <identifier> . class . get <identifiersep> name ( ) , irc <identifiersep> <identifier> , \n \t3 container <identifiersep> filter ) ; \n \t2 { \n <ect>
\t6 - iv <identifiersep> size \t3 <comment> \n \t6 - <number_literal> \t4 <comment> \n \t6 - 1 \t4 <comment> \n \t6 - fragment <identifiersep> length ; \t1 <comment> \n <ect>
\t1 @ path ( <string_literal> ) \n \t1 @ consumes ( media <identifiersep> type . application <identifiersep> json ) \n \t1 public void update <identifiersep> realm <identifiersep> events <identifiersep> config ( final realm <identifiersep> events <identifiersep> config <identifiersep> representation rep ) { \n \t2 auth . realm ( ) . require <identifiersep> manage <identifiersep> events ( ) ; \n <ect>
\t2 } catch ( security <identifiersep> exception e ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 list < ? > list = null ; \n \t2 try { \n \t3 list = mapper . read <identifiersep> value ( json , list . class ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t9 s <identifiersep> logger . debug ( <string_literal> + answer . get <identifiersep> router <identifiersep> name ( ) + <string_literal> + answer . get <identifiersep> bytes <identifiersep> received ( ) + <string_literal> + answer . get <identifiersep> bytes <identifiersep> sent ( ) ) ; \n \t9 continue ; } \n \t8 if ( stats . get <identifiersep> current <identifiersep> bytes <identifiersep> received ( ) > answer . get <identifiersep> bytes <identifiersep> received ( ) ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <comment> \n \t1 <comment> \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> + vm + <string_literal> + state . migrating + <string_literal> ) ; \n \t5 return false ; } } \n \t3 if ( vm . get <identifiersep> last <identifiersep> host <identifiersep> id ( ) != null ) { \n \t4 if ( ! send <identifiersep> stop ( guru , profile , force ) ) { \n <ect>
\t2 } catch ( management <identifiersep> server <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( virtual <identifiersep> machine <identifiersep> migration <identifiersep> exception ex ) { \n <ect>
\t2 } finally { \n \t3 this . secondary <identifiersep> zone . set <identifiersep> downloaded ( new timestamp ( system . current <identifiersep> time <identifiersep> millis ( ) ) ) ; } } \n \t1 private void check <identifiersep> expired ( ) { \n \t2 if ( this . secondary <identifiersep> zone . get <identifiersep> zone <identifiersep> copy ( ) != null && ( system . current <identifiersep> time <identifiersep> millis ( ) - this . secondary <identifiersep> zone . get <identifiersep> downloaded ( ) . get <identifiersep> time ( ) ) > ( this . secondary <identifiersep> zone . get <identifiersep> zone <identifiersep> copy ( ) . get <identifiersep> <identifier> ( ) . get <identifiersep> expire ( ) * <number_literal> ) ) { \n <ect>
\t4 toolkit = get <identifiersep> default <identifiersep> toolkit <identifiersep> method . invoke ( null ) ; \n \t4 <identifier> <identifiersep> method = toolkit . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> ) ; } \n \t3 catch ( throwable t ) \n \t3 { \n <ect>
\t3 final list < metadata <identifiersep> resolver > resolvers = new array <identifiersep> list < > ( ) ; \n \t3 resolvers . add ( metadata <identifiersep> provider ) ; \n \t3 return resolvers ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t3 this . listeners . add ( this . map . on <identifiersep> add ( this : : on <identifiersep> event ) . join ( ) ) ; \n \t3 this . listeners . add ( this . map . on <identifiersep> remove ( this : : on <identifiersep> event ) . join ( ) ) ; \n \t3 this . listeners . add ( this . map . on <identifiersep> update ( this : : on <identifiersep> event ) . join ( ) ) ; \n \t2 } else { \n <ect>
\t4 iterator < integer > <identifier> <identifiersep> iterator = task <identifiersep> ids . <identifier> <identifiersep> iterator ( ) ; \n \t4 while ( -- removed <identifiersep> task <identifiersep> num >= 0 ) { \n \t5 int task <identifiersep> id = <identifier> <identifiersep> iterator . next ( ) ; \n \t5 remove <identifiersep> task ( topology <identifiersep> id , task <identifiersep> id , cluster <identifiersep> state ) ; \n <ect>
\t1 assert <identifiersep> equals ( <number_literal> , result . size ( ) ) ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 list < version <identifiersep> summary > v <identifiersep> result = repo . get <identifiersep> version <identifiersep> summary <identifiersep> in <identifiersep> batch ( arrays . as <identifiersep> list ( file1 , simple <identifiersep> file ) ) ; \n \t1 assert <identifiersep> equals ( <number_literal> , v <identifiersep> result . size ( ) ) ; \n <ect>
\t4 if ( processed <identifiersep> targets <identifiersep> with <identifiersep> removed . add ( target ) ) { \n \t5 total <identifiersep> removed <identifiersep> files += removed <identifiersep> files <identifiersep> in <identifiersep> target . size } } } \n \t2 val module <identifiersep> file = kotlin <identifiersep> builder <identifiersep> module <identifiersep> script <identifiersep> generator . generate <identifiersep> module <identifiersep> description ( context , chunk , files <identifiersep> to <identifiersep> compile , total <identifiersep> removed <identifiersep> files != 0 ) \n \t2 if ( module <identifiersep> file == null ) { \n <ect>
\t2 val system = <identifier> <identifiersep> error <identifiersep> data . constraint <identifiersep> system \n \t2 val errors = system . status . constraint <identifiersep> errors \n \t2 val type <identifiersep> variable <identifiersep> with <identifiersep> <identifier> <identifiersep> constraint = errors . first <identifiersep> is <identifiersep> instance <identifiersep> or <identifiersep> null < cannot <identifiersep> capture > ( ) ? . type <identifiersep> variable \n \t2 if ( type <identifiersep> variable <identifiersep> with <identifiersep> <identifier> <identifiersep> constraint == null ) { \n <ect>
\t2 <comment> <ect>
\t6 if ( jm <identifiersep> dns <identifiersep> factory . on <identifiersep> close ( get <identifiersep> local <identifiersep> address ( ) ) ) { \n \t7 close <identifiersep> target . close ( ) ; \n \t6 } ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 hierarchy <identifiersep> dynamic <identifiersep> m <identifiersep> bean <identifier> = new hierarchy <identifiersep> dynamic <identifiersep> m <identifiersep> bean ( ) ; \n \t1 server . register <identifiersep> m <identifiersep> bean ( <identifier> , new object <identifiersep> name ( <string_literal> ) ) ; \n \t1 } catch ( jm <identifiersep> exception e ) { \n <ect>
\t1 assert . assert <identifiersep> equals ( <string_literal> , value ) ; \n \t1 web <identifiersep> resource = client . resource ( string . format ( <string_literal> , get <identifiersep> test <identifiersep> port ( ) ) ) ; \n \t1 output = web <identifiersep> resource . get ( string . class ) ; \n \t1 assert . assert <identifiersep> equals ( <string_literal> , output ) ; \n <ect>
public hardware apply ( v <identifiersep> app <identifiersep> template from ) { \n \t1 check <identifiersep> not <identifiersep> null ( from , <string_literal> ) ; \n \t1 envelope ovf = template <identifiersep> to <identifiersep> envelope . apply ( from ) ; \n \t1 if ( ovf . get <identifiersep> virtual <identifiersep> system ( ) . get <identifiersep> virtual <identifiersep> hardware <identifiersep> <identifier> ( ) . size ( ) > 1 ) { \n <ect>
\t4 hash h = socket . get <identifiersep> peer <identifiersep> destination ( ) . calculate <identifiersep> hash ( ) ; \n \t4 if ( socket . get <identifiersep> local <identifiersep> port ( ) == <number_literal> ) { \n \t5 <identifier> <identifiersep> bad <identifiersep> counter . increment ( h ) ; \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 logger . error ( ( ) - > new parameterized <identifiersep> message ( <string_literal> , source ) , e ) ; \n \t5 gateway <identifiersep> recovery <identifiersep> listener . this . on <identifiersep> failure ( <string_literal> ) ; } \n \t4 @ override \n \t4 public void cluster <identifiersep> state <identifiersep> processed ( string source , cluster <identifiersep> state old <identifiersep> state , cluster <identifiersep> state new <identifiersep> state ) { \n <ect>
\t1 public void set <identifiersep> sample <identifiersep> frequency ( string media <identifiersep> info <identifiersep> value ) { \n \t2 this . sample <identifiersep> frequency = get <identifiersep> sample <identifiersep> frequency <identifiersep> from <identifiersep> lib <identifiersep> media <identifiersep> info ( media <identifiersep> info <identifiersep> value ) ; } \n \t1 public static int get <identifiersep> channels <identifiersep> number <identifiersep> from <identifiersep> lib <identifiersep> media <identifiersep> info ( string media <identifiersep> info <identifiersep> value ) { \n \t2 if ( is <identifiersep> empty ( media <identifiersep> info <identifiersep> value ) ) { \n <ect>
\t7 store <identifiersep> to <identifiersep> max <identifiersep> version . put ( store <identifiersep> name , current <identifiersep> node <identifiersep> versions . get ( store <identifiersep> name ) ) ; } } \n \t4 } catch ( voldemort <identifiersep> exception e ) { \n \t5 node <identifiersep> failures ++ ; \n \t5 if ( node <identifiersep> failures > max <identifiersep> node <identifiersep> failures ) { \n <ect>
\t2 log . info ( <string_literal> + chunk <identifiersep> dest ) ; \n \t2 <comment> \n \t2 for ( int i = 0 ; i < num <identifiersep> <identifier> / <number_literal> ; i ++ ) { \n \t3 final db <identifiersep> object chunk = <identifier> . find <identifiersep> one ( new basic <identifiersep> db <identifiersep> object ( <string_literal> , chunk <identifiersep> source ) ) ; \n <ect>
\t1 @ override \n \t1 public format <identifiersep> info process ( string template <identifiersep> path , image <identifiersep> format format , string template <identifiersep> name , long process <identifiersep> timeout ) throws internal <identifiersep> error <identifiersep> exception { \n \t2 if ( format != null ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 final principal principal = create <identifiersep> principal ( <identifier> . get <identifiersep> username ( ) , response . get <identifiersep> ldap <identifiersep> entry ( ) ) ; \n \t3 return create <identifiersep> handler <identifiersep> result ( <identifier> , principal , message <identifiersep> list ) ; } \n \t2 if ( authentication <identifiersep> result <identifiersep> code . dn <identifiersep> resolution <identifiersep> failure == response . get <identifiersep> authentication <identifiersep> result <identifiersep> code ( ) ) { \n <ect>
\t2 int index = data . writer <identifiersep> index ( ) ; \n \t2 network <identifiersep> utils . write <identifiersep> <identifier> ( data , tag ) ; \n \t2 index = data . writer <identifiersep> index ( ) - index ; \n \t2 if ( index > <number_literal> ) { \n <ect>
\t1 cfg . set <identifiersep> property ( property . instance <identifiersep> zk <identifiersep> timeout , <string_literal> ) ; } \n @ test \n public void test ( ) throws exception { \n \t1 connector c = get <identifiersep> connector ( ) ; \n <ect>
\t3 logger . debug ( <string_literal> , <identifier> <identifiersep> cycle , free <identifiersep> memory <identifiersep> slots ) ; } } \n \t1 private boolean socket <identifiersep> connect ( ) throws unknown <identifiersep> host <identifiersep> exception , io <identifiersep> exception { \n \t2 socket = new socket ( ip , port ) ; \n \t2 socket . set <identifiersep> so <identifiersep> timeout ( <number_literal> ) ; \n <ect>
\t2 @ <identifier> int max <identifiersep> <identifier> ) { \n \t2 <identifier> <identifiersep> preconditions \n \t3 . check <identifiersep> not <identifiersep> negative ( max <identifiersep> <identifier> , <string_literal> ) ; \n \t2 object max = max <identifiersep> <identifier> == 0 ? <string_literal> : integer . value <identifiersep> of ( max <identifiersep> <identifier> ) ; \n <ect>
\t1 } catch ( exception e ) { \n \t1 err . set ( true ) ; \n \t1 log <identifiersep> err ( <string_literal> , e , updated . get ( ) , num <identifiersep> metrics ) ; } \n \t1 if ( updated . get ( ) < num <identifiersep> metrics && ! err . get ( ) ) { \n <ect>
\t1 <comment> \n \t1 server . start ( ) ; \n <ect>
\t3 <comment> \n \t3 for ( thread thread : created <identifiersep> threads ) { \n \t4 if ( thread . is <identifiersep> alive ( ) ) { \n \t5 assert false : <string_literal> + thread . get <identifiersep> name ( ) + <string_literal> ; \n <ect>
\t3 result . set <identifiersep> success <identifiersep> is <identifiersep> set ( true ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 script <identifiersep> name ) ; \n \t3 } catch ( exception e ) { \n \t4 log . error ( <string_literal> ) ; \n \t4 try { \n <ect>
\t3 rule <identifiersep> vo . set <identifiersep> state ( firewall <identifiersep> rule . state . revoke ) ; \n \t3 static <identifiersep> nat <identifiersep> rules . add ( new static <identifiersep> nat <identifiersep> rule <identifiersep> impl ( rule <identifiersep> vo , dst <identifiersep> ip ) ) ; } \n \t2 try { \n \t3 if ( ! <identifier> <identifiersep> firewall <identifiersep> mgr . apply <identifiersep> rules ( static <identifiersep> nat <identifiersep> rules , true , false ) ) { \n <ect>
\t4 file <identifiersep> import <identifiersep> visitor <identifier> = new file <identifiersep> import <identifiersep> visitor ( files , files <identifiersep> conf ) ; \n \t4 files . <identifier> <identifiersep> file <identifiersep> tree ( files , <identifier> ) ; \n \t4 <identifier> . handle <identifiersep> deferred <identifiersep> files ( ) ; \n \t3 } catch ( io <identifiersep> exception ioex ) { \n <ect>
\t1 private void inject <identifiersep> version <identifiersep> property ( class <identifiersep> node class <identifiersep> node ) { \n \t2 final boolean has <identifiersep> version = <comment> has <identifiersep> property ( class <identifiersep> node , <comment> version ) ; \n \t2 if ( ! has <identifiersep> version ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void retrieve <identifiersep> put <identifiersep> concurrent ( ) throws exception { \n <ect>
\t4 <identifier> <identifiersep> log . warn ( <string_literal> ) ; \n \t3 return null ; \n \t2 } else if ( ! is <identifiersep> nat <identifiersep> present ( ) ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 console <identifiersep> proxy <identifiersep> management <identifiersep> state state = console <identifiersep> proxy <identifiersep> management <identifiersep> state . value <identifiersep> of ( value ) ; \n \t3 if ( state == null ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + value ) ; } \n \t3 return state ; } \n <ect>
\t1 public response get <identifiersep> alert ( @ query <identifiersep> param ( <string_literal> ) string alert <identifiersep> id ) { \n \t2 try { \n \t3 return response . ok ( spawn . get <identifiersep> alert ( alert <identifiersep> id ) ) . build ( ) ; } \n \t2 catch ( exception ex ) { \n <ect>
\t2 boolean ok = <identifier> <identifiersep> engine . get <identifiersep> instance ( ) . verify <identifiersep> signature ( get <identifiersep> signature ( ) , data , \n <number_literal> get <identifiersep> destination ( ) . get <identifiersep> signing <identifiersep> public <identifiersep> key ( ) ) ; \n \t2 if ( ! ok ) { \n \t3 log log = i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( session <identifiersep> config . class ) ; \n <ect>
\t2 if ( rv != null ) { \n \t3 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , <identifier> <identifiersep> to . equals ( rv . get <identifiersep> far <identifiersep> end ( ) ) ? 1 : 0 ) ; \n \t2 } else { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 try { \n \t3 connection ( ) . exec ( <string_literal> ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) \n \t2 { \n <ect>
\t2 <identifier> <identifiersep> writer <identifiersep> thread = new thread ( new bolt <identifiersep> writer <identifiersep> runnable ( ) ) ; \n \t2 <identifier> <identifiersep> writer <identifiersep> thread . start ( ) ; \n \t2 heart <identifiersep> beat <identifiersep> executor <identifiersep> service = more <identifiersep> executors . get <identifiersep> <identifier> <identifiersep> scheduled <identifiersep> executor <identifiersep> service ( new scheduled <identifiersep> thread <identifiersep> pool <identifiersep> executor ( 1 ) ) ; \n \t2 heart <identifiersep> beat <identifiersep> executor <identifiersep> service . schedule <identifiersep> at <identifiersep> fixed <identifiersep> rate ( new bolt <identifiersep> heartbeat <identifiersep> timer <identifiersep> task ( this ) , 1 , 1 , time <identifiersep> unit . seconds ) ; \n <ect>
\t2 <comment> \n \t2 account <identifiersep> vo account = <identifier> <identifiersep> account <identifiersep> dao . find <identifiersep> by <identifiersep> id ( account <identifiersep> id ) ; \n \t2 if ( account == null || account . get <identifiersep> removed ( ) != null ) { \n \t3 if ( account != null ) { \n <ect>
\t2 return upd ; } \n \t1 private map < node , boolean > get <identifiersep> all <identifiersep> classes ( workspace workspace ) { \n \t2 final ontology <identifiersep> manager ont <identifiersep> mgr = workspace . get <identifiersep> ontology <identifiersep> manager ( ) ; \n \t2 hash <identifiersep> map < string , label > all <identifiersep> classes = ont <identifiersep> mgr . get <identifiersep> classes ( ) ; \n <ect>
public void initialize <identifiersep> ha <identifiersep> controller ( ) throws exception { \n \t1 string cluster <identifiersep> name = get <identifiersep> cluster <identifiersep> name ( ) ; \n \t1 admin = new zk <identifiersep> <identifier> <identifiersep> admin ( zk <identifiersep> connect <identifiersep> url ) ; \n \t1 <comment> \n <ect>
\t2 if ( second <identifiersep> input . is <identifiersep> empty ( ) ) { \n \t3 log . info ( <string_literal> + <identifier> <identifiersep> by + <string_literal> ) ; \n \t3 num <identifiersep> unexpected = <identifier> <identifiersep> check <identifiersep> <identifier> ( <identifier> <identifiersep> map , <identifier> <identifiersep> map , metrics , get <identifiersep> fingerprint <identifiersep> id <identifiersep> details <identifiersep> string <identifiersep> function ( <identifier> <identifiersep> by ) , <identifier> <identifiersep> by ) ; \n \t2 } else { \n <ect>
\t9 <identifier> <identifiersep> nic . get <identifiersep> network <identifiersep> id ( ) , null , false ) ; } \n \t6 <identifier> <identifiersep> router <identifiersep> alias <identifiersep> ip = router <identifiersep> public <identifiersep> ip . get <identifiersep> address ( ) . addr ( ) ; } \n \t4 } catch ( final insufficient <identifiersep> address <identifiersep> capacity <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . info ( e . get <identifiersep> message ( ) ) ; \n <ect>
\t2 protected void run <identifiersep> in <identifiersep> context ( ) { \n \t3 try { \n \t4 work ( ) ; \n \t3 } catch ( throwable th ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public serial <identifiersep> message get <identifiersep> value <identifiersep> message ( ) { \n \t2 if ( is <identifiersep> get <identifiersep> supported == false ) { \n <ect>
<comment> \n \t1 public string greet <identifiersep> me ( string me ) { \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t4 log . error ( <string_literal> ) ; \n \t4 return false ; } \n \t3 if ( first != data [ 0 ] ) \n \t3 { \n <ect>
\t5 internet = boolean . parse <identifiersep> boolean ( iter . next ( ) ) ; } } \n \t3 final string server = host + <string_literal> + port + test <identifiersep> url ; \n \t3 s <identifiersep> logger . info ( <string_literal> + server + <string_literal> + num <identifiersep> threads + <string_literal> ) ; \n \t3 if ( clean <identifiersep> up ) \n <ect>
\t2 start <identifiersep> time <identifiersep> is <identifiersep> set = true ; \n \t2 this . start <identifiersep> time = system . nano <identifiersep> time ( ) ; } \n \t1 public void set <identifiersep> finish <identifiersep> time ( ) { \n \t2 if ( finish <identifiersep> time <identifiersep> is <identifiersep> set ) \n <ect>
@ override \n public void set <identifiersep> <identifier> <identifiersep> predicate ( expression e ) throws io <identifiersep> exception { \n \t1 log . info ( <string_literal> , e ) ; \n \t1 filter <identifiersep> predicate pred = build <identifiersep> filter ( e ) ; \n <ect>
\t2 assert . assert <identifiersep> true ( cm . before ( <identifier> ) ) ; \n \t2 assert . assert <identifiersep> true ( cl . after ( <identifier> ) ) ; \n \t2 assert . assert <identifiersep> true ( cl . after ( <identifier> ) ) ; \n \t2 <comment> \n <ect>
\t6 <comment> \n \t7 my <identifiersep> user . retrieve <identifiersep> public <identifiersep> ip ( <identifier> <identifiersep> zone <identifiersep> id ) ; \n \t7 single <identifiersep> public <identifiersep> ip = my <identifiersep> user . get <identifiersep> public <identifiersep> ip ( ) . get ( my <identifiersep> user . get <identifiersep> public <identifiersep> ip ( ) . size ( ) - 1 ) ; \n \t7 if ( single <identifiersep> public <identifiersep> ip != null ) { \n <ect>
\t2 db . commit ( ) ; \n \t2 return conf ; \n \t2 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t2 try ( final transaction <identifiersep> resource db = entities . transaction <identifiersep> for ( persistent <identifiersep> system <identifiersep> configuration . class ) ) { \n <ect>
<comment> \n \t1 @ override \n \t1 protected void print <identifiersep> formatted <identifiersep> payload ( ) { \n <ect>
\t1 if ( ! is <identifiersep> connected ) { \n \t1 log . warn ( <string_literal> + \n \t2 <string_literal> ) \n \t1 return } \n <ect>
\t4 try { \n \t5 get <identifiersep> ratings <identifiersep> manager ( document <identifiersep> ref ) . update <identifiersep> user <identifiersep> <identifier> ( doc . get <identifiersep> creator <identifiersep> reference ( ) , <identifier> <identifiersep> <identifier> ) ; \n \t4 } catch ( ratings <identifiersep> exception re ) { \n \t5 if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t2 else \n \t3 ont <identifiersep> handler . get <identifiersep> ont <identifiersep> model ( ) . read ( s , null ) ; <comment> \n \t2 <comment> \n \t2 this . notify <identifiersep> listeners ( ) ; \n <ect>
\t8 new file ( output <identifiersep> file ) , \n \t8 new combined <identifiersep> term <identifiersep> iterator ( parts ) ) ; } \n \t4 catch ( exception | fs <identifiersep> error e ) \n \t4 { \n <ect>
<comment> \n public class class <identifiersep> util { \n \t1 private static final org . slf4j . logger logger = logger <identifiersep> factory . get <identifiersep> logger ( class <identifiersep> util . class ) ; \n \t1 public static void add <identifiersep> classpath ( string path ) { \n <ect>
\t2 cluster <identifiersep> state . builder builder = cluster <identifiersep> service . new <identifiersep> cluster <identifiersep> state <identifiersep> builder ( ) ; \n \t2 builder . meta <identifiersep> data ( meta <identifiersep> data <identifiersep> builder ) ; \n \t2 listener . on <identifiersep> success ( builder . build ( ) ) ; } \n \t1 private void log <identifiersep> unknown <identifiersep> setting ( string setting <identifiersep> type , map . entry < string , string > e ) { \n <ect>
\t3 } else if ( type == binding <identifiersep> type . net <identifiersep> <identifier> ) { \n \t4 if ( command instanceof decimal <identifiersep> type ) { \n \t5 proxy . set <identifiersep> net <identifiersep> <identifier> ( ( ( decimal <identifiersep> type ) command ) . int <identifiersep> value ( ) ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 e <identifiersep> person <identifiersep> service e <identifiersep> person <identifiersep> service = e <identifiersep> person <identifiersep> service <identifiersep> factory . get <identifiersep> instance ( ) . get <identifiersep> e <identifiersep> person <identifiersep> service ( ) ; \n \t3 <identifier> = e <identifiersep> person <identifiersep> service . find <identifiersep> by <identifiersep> email ( context , <string_literal> ) ; \n \t3 if ( <identifier> == null ) { \n \t4 <comment> \n <ect>
\t2 session . commit ( ) ; \n \t2 <comment> \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 msg = ( text <identifiersep> message ) consumer . receive ( <number_literal> ) ; \n <ect>
\t1 process <identifiersep> files ( file <identifiersep> processing <identifiersep> mode . scan ) ; \n \t1 if ( binding <identifiersep> file <identifiersep> search . instance . check ( ) ) { \n \t2 log . info ( <string_literal> ) ; \n \t1 } else { \n <ect>
\t1 logger . info ( <string_literal> ) \n \t1 stop <identifiersep> cmd = [ <string_literal> , <string_literal> , params . llap <identifiersep> app <identifiersep> name ] \n \t1 code , output , error = shell . call ( stop <identifiersep> cmd , user = params . hive <identifiersep> user , stderr = <identifier> . pipe , <identifier> = true ) \n \t1 if code == 0 : \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 enabled <identifiersep> ssl <identifiersep> protocols = null ; \n \t3 ssl <identifiersep> context . get <identifiersep> instance ( <string_literal> ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t3 if ( get <identifiersep> reset <identifiersep> safe <identifiersep> power <identifiersep> state ( ) == virtual <identifiersep> machine <identifiersep> power <identifiersep> state . <identifier> <identifiersep> off ) { \n \t4 <comment> \n \t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t4 return true ; } \n <ect>
\t1 lock <identifiersep> request request = request <identifiersep> builder . set <identifiersep> user ( user ) . build ( ) ; \n \t1 return request ; } \n private void initiate <identifiersep> heartbeat ( ) { \n \t1 int heartbeat <identifiersep> period = get <identifiersep> heartbeat <identifiersep> period ( ) ; \n <ect>
\t2 string resources <identifiersep> html = <string_literal> ; \n \t2 try { \n \t3 resources <identifiersep> html = get <identifiersep> resources <identifiersep> html ( job ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception | cms <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 status = new status ( status <identifiersep> code , status <identifiersep> line . get <identifiersep> reason <identifiersep> phrase ( ) ) ; \n \t3 if ( status . get <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> ok ) { \n \t4 string message = read <identifiersep> response ( response . get <identifiersep> entity ( ) . get <identifiersep> content ( ) ) ; \n <ect>
\t3 log . info ( <string_literal> , runtime <identifiersep> endpoint <identifiersep> registry ) ; \n \t3 get <identifiersep> context ( ) . set <identifiersep> runtime <identifiersep> endpoint <identifiersep> registry ( runtime <identifiersep> endpoint <identifiersep> registry ) ; } \n \t2 headers <identifiersep> map <identifiersep> factory headers <identifiersep> map <identifiersep> factory = get <identifiersep> bean <identifiersep> for <identifiersep> type ( headers <identifiersep> map <identifiersep> factory . class ) ; \n \t2 if ( headers <identifiersep> map <identifiersep> factory != null ) { \n <ect>
\t3 public void on <identifiersep> publish <identifiersep> message ( string sender <identifiersep> address , string subject , object args ) { \n \t4 try { \n \t5 final domain <identifiersep> vo domain = ( domain <identifiersep> vo ) args ; \n \t5 if ( ! remove <identifiersep> group ( domain ) ) { \n <ect>
\t4 return true ; \n \t3 } else { \n \t4 <comment> \n \t4 if ( ! is <identifiersep> command <identifiersep> available ( command <identifiersep> name ) && ! command <identifiersep> name . equals ( <string_literal> ) && ! command <identifiersep> name . equals ( <string_literal> ) ) { \n <ect>
\t2 log . info ( <string_literal> , exception ) ; \n \t2 exceptions . add ( exception ) ; } \n \t1 @ override \n \t1 public void uncaught <identifiersep> exception ( thread thread , throwable exception ) { \n <ect>
\t1 raise exception ( <string_literal> ) \n \t1 # use the uri lookup keys to get a final uri value to query \n \t1 alert <identifiersep> uri = self . <identifier> <identifiersep> get <identifiersep> uri <identifiersep> from <identifiersep> structure ( self . uri <identifiersep> property <identifiersep> keys ) \n \t1 if logger . is <identifiersep> enabled <identifiersep> for ( logging . debug ) : \n <ect>
\t2 web <identifiersep> client . get <identifiersep> config ( spi ) . get <identifiersep> in <identifiersep> <identifier> ( ) . add ( new logging <identifiersep> in <identifiersep> interceptor ( ) ) ; \n \t2 web <identifiersep> client . get <identifiersep> config ( spi ) . get <identifiersep> out <identifiersep> <identifier> ( ) . add ( new logging <identifiersep> out <identifiersep> interceptor ( ) ) ; \n \t2 if ( this . authentication != null ) { \n \t3 this . authentication . configure <identifiersep> authentication ( spi ) ; } \n <ect>
\t4 salt = <identifier> <identifiersep> parameters . get <identifiersep> salt ( ) . to <identifiersep> byte <identifiersep> array ( ) ; \n \t3 } else { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t6 if ( fail <identifiersep> reading <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> field && <identifier> <identifiersep> <identifier> <identifiersep> field . equals ( f ) ) { \n \t7 throw new io <identifiersep> exception ( <string_literal> ) ; } \n \t6 doc <identifiersep> cnt <identifiersep> for <identifiersep> field = reader . get <identifiersep> doc <identifiersep> count ( f ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( ordered <identifiersep> handlers . put <identifiersep> if <identifiersep> absent ( topic , c ) == null ) { \n \t3 cctx . grid <identifiersep> io ( ) . add <identifiersep> message <identifiersep> listener ( topic , new ordered <identifiersep> message <identifiersep> listener ( \n \t4 ( grid <identifiersep> bi <identifiersep> in <identifiersep> closure < uuid , grid <identifiersep> cache <identifiersep> message < k , v > > ) c ) ) ; \n <ect>
\t4 } else { \n \t5 log . debug ( <string_literal> , \n \t7 name , date <identifiersep> object , ( date <identifiersep> object != null ? date <identifiersep> object . get <identifiersep> class ( ) : <string_literal> ) ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t6 list < storage <identifiersep> pool <identifiersep> vo > storage <identifiersep> pools = <identifier> <identifiersep> storage <identifiersep> pool <identifiersep> dao . list <identifiersep> all ( ) ; \n \t6 for ( storage <identifiersep> pool <identifiersep> vo pool : storage <identifiersep> pools ) { \n \t7 try { \n \t8 list < vm <identifiersep> template <identifiersep> storage <identifiersep> pool <identifiersep> vo > unused <identifiersep> templates <identifiersep> in <identifiersep> pool = <identifier> <identifiersep> tmplt <identifiersep> mgr . get <identifiersep> unused <identifiersep> templates <identifiersep> in <identifiersep> pool ( pool ) ; \n <ect>
\t2 return ; } \n \t2 try { \n \t2 file <identifiersep> utils . delete <identifiersep> directory ( mini <identifiersep> dir ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 packet . payload ( settings . get ( index ) ) ; \n \t5 session . write ( packet ) ; \n \t5 set < string > types = indices . get ( index ) ; \n \t5 create <identifiersep> index <identifiersep> request . settings ( settings . get ( index ) ) ; \n <ect>
\t1 log = logger . get <identifiersep> logger ( standalone <identifiersep> persistence . class ) ; \n \t1 log . info ( string . format ( <string_literal> , <string_literal> , euca <identifiersep> home ) ) ; \n \t1 log . info ( string . format ( <string_literal> , <string_literal> , euca <identifiersep> old ) ) ; \n \t1 log . info ( string . format ( <string_literal> , <string_literal> , euca <identifiersep> source ) ) ; \n <ect>
\t3 m . invoke ( shared <identifiersep> <identifier> <identifiersep> engine <identifiersep> instance ( ) , new object [ ] { eo } ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e1 ) { \n \t3 log . error ( <string_literal> , e1 ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e2 ) { \n <ect>
\t3 source <identifiersep> partition . get <identifiersep> values ( ) , target <identifiersep> partition . get <identifiersep> values ( ) ) ; \n \t2 assert . assert <identifiersep> equals ( <string_literal> , \n \t3 source <identifiersep> partition . get <identifiersep> sd ( ) . get <identifiersep> location ( ) , target <identifiersep> partition . get <identifiersep> sd ( ) . get <identifiersep> location ( ) ) ; } } \n \t1 catch ( throwable t ) { \n <ect>
\t1 statement stmt = null ; \n \t1 string encoding = metrics <identifiersep> conf . get ( hbase <identifiersep> encoding <identifiersep> scheme , default <identifiersep> encoding ) ; \n \t1 string compression = metrics <identifiersep> conf . get ( hbase <identifiersep> compression <identifiersep> scheme , default <identifiersep> table <identifiersep> compression ) ; \n \t1 try { \n <ect>
\t2 <comment> \n \t2 log . info ( <string_literal> + old <identifiersep> name + <string_literal> + new <identifiersep> name ) ; \n \t2 sql . execute ( string . format ( <string_literal> , table , old <identifiersep> name , new <identifiersep> name ) ) ; \n \t2 } else { \n <ect>
\t2 uri uri ; \n \t2 try { \n \t3 uri = new uri ( url ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> api <identifiersep> result result = conn . do <identifiersep> request ( request <identifiersep> get <identifiersep> play <identifiersep> info <identifiersep> text ) ; \n \t3 return result . get <identifiersep> value <identifiersep> <identifier> <identifiersep> as <identifiersep> string ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 if ( vm <identifiersep> already <identifiersep> exists <identifiersep> in <identifiersep> <identifier> ) { \n \t4 start <identifiersep> answer . set <identifiersep> context <identifiersep> param ( <string_literal> , <string_literal> ) ; } \n \t3 <comment> \n \t3 if ( existing <identifiersep> vm <identifiersep> name != null && existing <identifiersep> vm <identifiersep> file <identifiersep> info != null ) { \n <ect>
\t3 log . debug ( <string_literal> + exch <identifiersep> id + <string_literal> + map <identifiersep> string ( parts ) + ' ] ' ) ; \n \t2 if ( ! cctx . discovery ( ) . alive ( parts . node <identifiersep> id ( ) ) ) { \n <ect>
\t8 enabled <identifiersep> renderer <identifiersep> <identifier> . add ( r ) ; \n \t7 } else { \n \t8 logger . debug ( <string_literal> { } \\ <string_literal> , renderer <identifiersep> name ) ; } \n \t6 } catch ( configuration <identifiersep> exception ce ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t2 meta <identifiersep> store <identifiersep> client . unlock ( lock <identifiersep> id ) ; \n \t2 log . debug ( <string_literal> , lock <identifiersep> id ) ; \n \t2 lock <identifiersep> id = null ; } \n \t1 } catch ( t <identifiersep> exception e ) { \n <ect>
\t3 <identifier> <identifiersep> dhcp <identifiersep> response response = mgr . generate <identifiersep> api <identifiersep> response ( vo ) ; \n \t3 response . set <identifiersep> response <identifiersep> name ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( block <identifiersep> region . <identifier> ( block <identifiersep> x , block <identifiersep> y , block <identifiersep> z ) ) { \n \t3 int chunk <identifiersep> index = rel <identifiersep> chunk <identifiersep> index ( block <identifiersep> x , block <identifiersep> y , block <identifiersep> z ) ; \n \t3 <identifier> [ chunk <identifiersep> index ] . set <identifiersep> light ( chunk <identifiersep> math . <identifier> <identifiersep> block <identifiersep> pos ( block <identifiersep> x , block <identifiersep> y , block <identifiersep> z , chunk <identifiersep> filter <identifiersep> size ) , light ) ; \n \t2 } else { \n <ect>
\t3 rv = new array <identifiersep> list < hash > ( 1 ) ; } \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t7 msg <identifiersep> context . set <identifiersep> message <identifiersep> reference ( message ) ; \n \t7 if ( subscription . matches ( message , msg <identifiersep> context ) ) { \n \t8 subscription . add ( message ) ; } \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 if ( ! string <identifiersep> utils . is <identifiersep> blank ( type . get <identifiersep> user <identifiersep> type ( ) ) ) { \n \t5 log . warn ( <string_literal> + type ) ; \n \t5 type . set <identifiersep> user <identifiersep> type ( null ) ; } \n \t4 if ( ! string <identifiersep> utils . is <identifiersep> blank ( type . get <identifiersep> binding ( ) ) ) { \n <ect>
\t2 } else { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t4 <identifier> <identifiersep> log . warn ( <string_literal> + primary ) ; } \n \t1 } else { \n <ect>
\t2 if ( ! component . can <identifiersep> call <identifiersep> listener ( ) ) \n \t2 { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( color <identifiersep> string ) ) { \n \t3 try { \n \t4 return new subtitle <identifiersep> color ( color <identifiersep> string ) ; \n \t3 } catch ( invalid <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t3 return ; } \n \t2 <identifier> <identifiersep> <identifier> <identifiersep> size = count - removed ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) { \n \t3 <identifier> <identifiersep> log . info ( <string_literal> ) ; \n <ect>
\t1 private final persistence <identifiersep> adapter <identifiersep> choice persistence <identifiersep> adapter <identifiersep> choice ; \n \t1 @ parameterized . parameters \n \t1 public static collection < persistence <identifiersep> adapter <identifiersep> choice [ ] > get <identifiersep> test <identifiersep> parameters ( ) { \n \t2 string os <identifiersep> name = system . get <identifiersep> property ( <string_literal> ) ; \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> mgr . notify <identifiersep> provision <identifiersep> done ( this ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( new success <identifiersep> response ( get <identifiersep> command <identifiersep> name ( ) ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 final set < base <identifiersep> client > clients = pac4j <identifiersep> delegated <identifiersep> client <identifiersep> factory ( ) . build ( ) ; \n \t2 logger . debug ( <string_literal> , clients ) ; \n \t2 if ( clients . is <identifiersep> empty ( ) ) { \n \t3 logger . warn ( <string_literal> ) ; } \n <ect>
\t1 public void node <identifiersep> changed ( ) throws exception { \n \t2 synchronized ( lock ) { \n \t3 if ( running ) { \n \t4 try { \n <ect>
\t4 int val = integer . parse <identifiersep> int ( value ) ; \n \t4 if ( val < = 0 ) { \n \t5 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> + name ) ; } \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t3 return true ; } \n \t2 return false ; } \n \t1 public ns <identifiersep> array attribute <identifiersep> list <identifiersep> at <identifiersep> depth ( ) { \n \t2 number <identifier> = integer . value <identifiersep> of ( depth ) ; \n <ect>
\t1 try { \n \t1 bean <identifiersep> info bi = <identifier> . get <identifiersep> bean <identifiersep> info ( obj . get <identifiersep> class ( ) ) ; \n \t1 props = bi . get <identifiersep> property <identifiersep> descriptors ( ) ; \n \t1 } catch ( introspection <identifiersep> exception ex ) { \n <ect>
\t1 <comment> \n \t1 if ( roll <identifiersep> interval > 0 ) { \n \t1 callable < void > action = new callable < void > ( ) { \n \t2 public void call ( ) throws exception { \n <ect>
\t2 echo <identifiersep> svc . start ( ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t1 if ( request . get <identifiersep> hostname ( ) != null ) { \n \t1 try { \n \t2 if ( ! clusters . get <identifiersep> clusters <identifiersep> for <identifiersep> host ( request . get <identifiersep> hostname ( ) ) . contains ( cluster ) ) { \n \t2 <comment> \n <ect>
\t5 ( ( bundle ) plugin <identifiersep> table . get <identifiersep> model ( ) \n \t7 . get <identifiersep> value <identifiersep> at ( selected <identifiersep> rows [ i ] , 0 ) ) . <identifier> ( ) ; } \n \t4 catch ( bundle <identifiersep> exception ex ) \n \t4 { \n <ect>
\t5 try { \n \t6 j <identifiersep> storm <identifiersep> utils . launch <identifiersep> process ( cmd + <string_literal> + fork <identifiersep> times , environment , true ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n \t6 <comment> \n <ect>
\t1 } catch ( sql <identifiersep> exception e ) { \n \t2 log . warn ( <string_literal> , constraint <identifiersep> name , table <identifiersep> name ) ; \n \t2 throw e ; } \n \t1 } else { \n <ect>
\t2 self . logger . debug ( <string_literal> % <identifier> . id ) \n \t2 <identifier> <identifiersep> response = vpn . create <identifiersep> vpn <identifiersep> gateway ( self . apiclient , <identifier> . id ) \n \t2 self . assert <identifiersep> <identifier> ( \n \t3 <identifier> <identifiersep> response is not none , <string_literal> ) \n <ect>
\t7 default : \n \t8 assert false ; \n \t8 break ; } \n \t6 } catch ( final throwable e ) { \n <ect>
\t3 @ override \n \t3 public void on <identifiersep> <identifier> ( exception e ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t8 immediate <identifiersep> <identifier> <identifiersep> transacted <identifiersep> ack ( md ) ; \n \t7 } else { \n \t8 session . send <identifiersep> ack ( new message <identifiersep> ack ( md , message <identifiersep> ack . delivered <identifiersep> ack <identifiersep> type , 1 ) ) ; } \n \t6 } else if ( ( consumer <identifiersep> with <identifiersep> pending <identifiersep> transaction = redelivery <identifiersep> pending <identifiersep> in <identifiersep> <identifier> <identifiersep> transaction ( md ) ) != null ) { \n <ect>
\t4 var <identifier> <identifiersep> db <identifiersep> node = { \n \t5 label : key , \n \t5 data : tables , \n \t5 on <identifiersep> select : function ( branch ) { \n <ect>
\t1 last <identifiersep> offset = offset ; \n \t1 last <identifiersep> dir = dir ; \n \t1 logger . debug ( <string_literal> + last <identifiersep> search ) ; \n <ect>
\t5 if ( ! send <identifiersep> stop ( guru , profile , force ) ) { \n \t6 s <identifiersep> logger . warn ( <string_literal> + vm + <string_literal> + state . starting + <string_literal> ) ; \n \t6 return false ; } } } \n \t3 if ( step != step . release && step != step . prepare && step != step . started && step != step . starting ) { \n <ect>
\t2 ensure <identifiersep> server <identifiersep> hostname <identifiersep> is <identifiersep> set <identifiersep> up ( ) \n \t2 val jvm <identifiersep> arguments = management <identifiersep> factory . get <identifiersep> runtime <identifiersep> mx <identifiersep> bean ( ) . input <identifiersep> arguments \n \t2 log . info ( <string_literal> + ( load <identifiersep> version <identifiersep> from <identifiersep> resource ( ) ? : <string_literal> ) ) \n \t2 log . info ( <string_literal> + jvm <identifiersep> arguments . join <identifiersep> to <identifiersep> string ( <string_literal> ) ) \n <ect>
\t2 s <identifiersep> logger . debug ( <string_literal> + arg0 . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> + arg0 . get <identifiersep> uuid ( ) ) ; \n \t2 <identifier> <identifiersep> <identifier> . delete ( arg0 ) ; } \n \t1 @ override \n \t1 public void delete ( class < ? extends api <identifiersep> object <identifiersep> base > arg0 , string <identifier> ) throws io <identifiersep> exception { \n <ect>
\t5 channel <identifiersep> state ( channel ) . consumers <identifiersep> with <identifiersep> manual <identifiersep> ack . add ( consumer <identifiersep> tag ) ; \n \t4 } finally { \n \t5 channel <identifiersep> state . lock . unlock ( ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 return false ; } \n \t1 private void add <identifiersep> idp <identifiersep> to <identifiersep> map ( entity <identifiersep> descriptor descriptor , map < string , saml <identifiersep> provider <identifiersep> metadata > idp <identifiersep> map ) { \n \t2 saml <identifiersep> provider <identifiersep> metadata idp <identifiersep> metadata = new saml <identifiersep> provider <identifiersep> metadata ( ) ; \n \t2 idp <identifiersep> metadata . set <identifiersep> entity <identifiersep> id ( descriptor . get <identifiersep> entity <identifiersep> id ( ) ) ; \n <ect>
\t5 <identifier> [ 0 ] = nicira <identifiersep> nvp <identifiersep> api . create <identifiersep> logical <identifiersep> router <identifiersep> nat <identifiersep> rule ( command . get <identifiersep> logical <identifiersep> router <identifiersep> uuid ( ) , <identifier> [ 0 ] ) ; \n \t5 s <identifiersep> logger . debug ( <string_literal> + nicira <identifiersep> nvp <identifiersep> resource . nat <identifiersep> rule <identifiersep> to <identifiersep> string ( <identifier> [ 0 ] ) ) ; \n \t5 try { \n \t6 <identifier> [ 1 ] = nicira <identifiersep> nvp <identifiersep> api . create <identifiersep> logical <identifiersep> router <identifiersep> nat <identifiersep> rule ( command . get <identifiersep> logical <identifiersep> router <identifiersep> uuid ( ) , <identifier> [ 1 ] ) ; \n <ect>
\t3 int process <identifiersep> count = ( ( double ) engine . eval ( <string_literal> + new <identifiersep> <identifier> + <string_literal> ) ) . int <identifiersep> value ( ) ; \n \t3 int thread <identifiersep> count = ( ( double ) engine . eval ( <string_literal> + new <identifiersep> <identifier> + <string_literal> ) ) . int <identifiersep> value ( ) ; \n \t3 return new process <identifiersep> and <identifiersep> thread ( process <identifiersep> count , thread <identifiersep> count ) ; \n \t2 } catch ( script <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t2 return conn . prepare <identifiersep> statement ( stmt ) ; \n \t1 } catch ( sql <identifiersep> transient <identifiersep> exception e ) { \n \t2 if ( failures >= max <identifiersep> retries ) { \n <ect>
\t1 public obs save <identifiersep> obs ( obs obs ) throws api <identifiersep> exception { \n \t2 <comment> \n \t2 complex <identifiersep> data complex <identifiersep> data = obs . get <identifiersep> complex <identifiersep> data ( ) ; \n \t2 if ( complex <identifiersep> data == null ) { \n <ect>
\t3 session <identifiersep> config <identifier> = <identifier> <identifiersep> runner . get <identifiersep> primary <identifiersep> config ( ) ; \n \t3 if ( <identifier> != null ) { \n \t4 props . put <identifiersep> all ( <identifier> . get <identifiersep> options ( ) ) ; \n \t3 } else { \n <ect>
\t1 logger . warn ( this . get <identifiersep> class ( ) , <string_literal> + + i <identifiersep> logger . warn , new throwable ( ) ) ; <comment> \n \t1 logger . warn ( <string_literal> , <string_literal> + + i <identifiersep> logger . warn , new throwable ( ) ) ; <comment> \n \t1 logger . debug ( this . get <identifiersep> class ( ) , <string_literal> + + i <identifiersep> logger . debug ) ; <comment> \n \t1 logger . debug ( <string_literal> , <string_literal> + i <identifiersep> logger . debug ) ; <comment> \n <ect>
\t1 protected set < file > retrieve <identifiersep> matching <identifiersep> files ( file root <identifiersep> dir , string pattern ) throws io <identifiersep> exception { \n \t2 if ( ! root <identifiersep> dir . exists ( ) ) { \n \t3 <comment> \n <ect>
\t3 query . add <identifiersep> criteria ( criteria . where ( <string_literal> ) . is ( key ) ) ; \n \t3 final write <identifiersep> result res = this . mongo <identifiersep> template . remove ( query , multifactor <identifiersep> authentication <identifiersep> trust <identifiersep> record . class , this . collection <identifiersep> name ) ; \n \t3 logger . info ( <string_literal> , res . get <identifiersep> n ( ) ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t1 ) throws grid <identifiersep> cache <identifiersep> entry <identifiersep> removed <identifiersep> exception { \n \t2 assert top <identifiersep> ver != - 1 ; \n \t2 collection < grid <identifiersep> node > dht <identifiersep> nodes = dht ( ) . topology ( ) . nodes ( entry . partition ( ) , top <identifiersep> ver ) ; \n <ect>
\t3 connection . start ( ) ; \n \t3 cdi <identifiersep> injection <identifiersep> book <identifier> = new cdi <identifiersep> injection <identifiersep> book ( <string_literal> ) ; \n \t3 text <identifiersep> message message = session . create <identifiersep> text <identifiersep> message ( <identifier> . get <identifiersep> name ( ) ) ; \n \t3 producer . send ( message ) ; \n <ect>
\t4 thread . sleep ( ( long ) ( <number_literal> + sleep * random . next <identifiersep> double ( ) ) ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 return false ; } \n \t3 if ( lock ( lock <identifiersep> path ) ) { \n <ect>
\t2 string response = <identifier> <identifiersep> send <identifiersep> request ( \n \t3 location , company <identifiersep> id , ip <identifiersep> address , user <identifiersep> agent , <identifier> , <identifier> , \n \t3 comment <identifiersep> type , user <identifiersep> name , email <identifiersep> address , content ) ; \n \t2 if ( validator . is <identifiersep> null ( response ) ) { \n <ect>
\t4 custom <identifiersep> aggr <identifiersep> privs . add ( privilege ) ; \n \t3 } else { \n \t4 p <identifiersep> mgr . register <identifiersep> privilege ( privilege <identifiersep> name , privilege . is <identifiersep> abstract ( ) , new string [ 0 ] ) ; \n \t4 logger . info ( <string_literal> + privilege <identifiersep> name ) ; } } \n <ect>
\t1 <comment> \n \t1 first <identifiersep> tree <identifiersep> id = 0 ; \n \t1 for ( int p = 0 ; p < partition ; p ++ ) { \n \t1 first <identifiersep> tree <identifiersep> id += nb <identifiersep> <identifier> ( num <identifiersep> map <identifiersep> tasks , num <identifiersep> <identifier> , p ) ; } \n <ect>
\t2 if ( cached <identifiersep> attributes != null && ! cached <identifiersep> attributes . is <identifiersep> empty ( ) ) { \n \t3 logger . debug ( <string_literal> , cached <identifiersep> attributes . size ( ) , p . get <identifiersep> id ( ) , cached <identifiersep> attributes ) ; \n \t3 return cached <identifiersep> attributes ; } \n \t2 if ( get <identifiersep> attribute <identifiersep> repository ( ) == null ) { \n <ect>
+ \t2 try { \n + \t2 metrics <identifiersep> factory . init ( conf ) ; \n + \t2 } catch ( exception e ) { \n + \t2 <comment> \n <ect>
\t1 on permission problems \n \t1 <string_literal> <string_literal> <ect>
\t1 s = conn . create <identifiersep> statement ( ) ; \n \t1 rs = s . execute <identifiersep> query ( query ) ; \n \t1 if ( ! rs . next ( ) ) { \n \t2 <comment> \n <ect>
\t7 log . info ( <string_literal> , stopped ) ; \n \t6 } else { \n \t7 log . info ( <string_literal> , address . get <identifiersep> port ( ) ) ; } \n \t5 } catch ( exception e ) { \n <ect>
\t6 logger . debug ( <string_literal> ) ; \n \t6 set <identifiersep> switch <identifiersep> state ( on <identifiersep> off <identifiersep> value . off ) ; \n \t6 return ; } \n \t4 } else { \n <ect>
\t1 catch ( exception e ) { \n \t1 if ( e instanceof interrupted <identifiersep> io <identifiersep> exception || e instanceof interrupted <identifiersep> exception ) { \n \t2 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t1 log <identifiersep> log . error ( <string_literal> + config <identifiersep> file <identifiersep> name + <string_literal> , e ) ; \n <ect>
\t1 <identifier> <identifiersep> log . debug ( <string_literal> + service <identifiersep> <identifier> ) ; \n \t1 <identifier> <identifiersep> zk <identifiersep> connection . start ( ) ; \n \t1 try \n \t1 { \n <ect>
\t2 if ( ! <identifier> <identifiersep> <identifier> . is <identifiersep> empty ( ) ) \n \t2 { \n \t3 for ( map . entry < string , list < mojo <identifiersep> execution > > fork : <identifier> <identifiersep> <identifier> . entry <identifiersep> set ( ) ) \n \t3 { \n <ect>
\t1 public io <identifiersep> c <identifiersep> component <identifiersep> provider get <identifiersep> component <identifiersep> provider ( class < ? > c ) { \n \t2 return get <identifiersep> component <identifiersep> provider ( null , c ) ; } \n \t1 @ override \n \t1 public io <identifiersep> c <identifiersep> component <identifiersep> provider get <identifiersep> component <identifiersep> provider ( component <identifiersep> context cc , class < ? > clazz ) { \n <ect>
\t3 <comment> \n \t2 log . debug ( <string_literal> ) ; \n \t2 db <identifiersep> conn . commit ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 def registry = logging <identifiersep> service <identifiersep> registry . new <identifiersep> command <identifiersep> line <identifiersep> process <identifiersep> logging ( ) \n \t2 def logger = logger <identifiersep> factory . get <identifiersep> logger ( <string_literal> ) \n \t2 when : \n \t2 def logging <identifiersep> manager = registry . new <identifiersep> instance ( logging <identifiersep> manager <identifiersep> internal ) \n <ect>
\t3 if ( <identifier> <identifiersep> node == null ) { \n \t4 logger . error ( <string_literal> ) ; \n \t4 return ; } \n \t3 if ( current <identifiersep> node == null ) { \n <ect>
\t1 int retries = 0 ; \n \t1 while ( ( ! success ) && ( retries ++ < queue <identifiersep> timeout ) ) { \n \t2 success = buffers . offer ( buffer , queue <identifiersep> timeout , time <identifiersep> unit . seconds ) ; } \n \t1 if ( ! success ) { \n <ect>
\t3 if ( ! success ) { \n \t4 try { \n \t5 socket . close ( ) ; \n \t4 } catch ( throwable t ) { \n <ect>
\t3 <comment> \n \t3 new <identifiersep> snapshot . set <identifiersep> path ( disk . get <identifiersep> path ( ) + file . separator + snapshot <identifiersep> name ) ; \n \t3 return new create <identifiersep> object <identifiersep> answer ( new <identifiersep> snapshot ) ; \n \t2 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t1 } finally { \n \t2 <comment> \n \t2 this . last <identifiersep> <identifier> <identifiersep> check = system . current <identifiersep> time <identifiersep> millis ( ) ; } } \n \t1 if ( migrations <identifiersep> out . size ( ) > 0 ) { \n <ect>
\t3 unregister <identifiersep> member ( member ) ; \n \t3 <comment> \n \t3 fire <identifiersep> lifecycle <identifiersep> event ( after <identifiersep> <identifier> <identifiersep> event , member ) ; \n \t2 } catch ( exception x ) { \n <ect>
\t3 this . <identifier> = new fixed <identifiersep> length <identifiersep> record <identifiersep> <identifier> < in > ( this . serializer , <identifier> <identifiersep> comparator . duplicate ( ) , this . memory ) ; \n \t2 } else { \n \t3 this . <identifier> = new normalized <identifiersep> key <identifiersep> <identifier> < in > ( this . serializer , <identifier> <identifiersep> comparator . duplicate ( ) , this . memory ) ; } \n <ect>
\t3 sc . and ( sc . entity ( ) . get <identifiersep> name ( ) , search <identifiersep> criteria . op . eq , name ) ; \n \t3 sc . and ( sc . entity ( ) . get <identifiersep> deleted ( ) , search <identifiersep> criteria . op . null ) ; \n \t3 list < usage <identifiersep> snapshot <identifiersep> on <identifiersep> primary <identifiersep> vo > <identifier> = sc . list ( ) ; \n \t3 if ( <identifier> . size ( ) > 1 ) { \n <ect>
\t2 boolean complete = true ; \n \t2 boolean do <identifiersep> cancel = false ; \n \t2 synchronized ( this ) { \n \t3 if ( finished ) { \n <ect>
\t2 if ( context <identifiersep> size != null ) { \n \t3 try { \n \t4 browser <identifiersep> size = integer . parse <identifiersep> int ( context <identifiersep> size ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
private void load <identifiersep> properties ( ) throws configuration <identifiersep> exception { \n \t2 final file file = properties <identifiersep> util . find <identifiersep> config <identifiersep> file ( <string_literal> ) ; \n \t2 if ( file == null ) { \n \t3 throw new configuration <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 public void reset ( ) throws io <identifiersep> exception { \n \t2 connection c = <identifier> <identifiersep> connection ; \n \t2 if ( c == null ) return ; \n \t2 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t6 opt <identifiersep> params . put ( value <identifiersep> of <identifiersep> tag . to <identifiersep> string ( ) , integer . value <identifiersep> of ( ( ( org . <identifier> . bean . optional <identifiersep> parameter . int ) opt <identifiersep> <identifier> ) . get <identifiersep> value ( ) ) ) ; \n \t5 } else if ( null . class . is <identifiersep> instance ( opt <identifiersep> <identifier> ) ) { \n \t6 opt <identifiersep> params . put ( value <identifiersep> of <identifiersep> tag . to <identifiersep> string ( ) , null ) ; } \n \t4 } else { \n <ect>
\t4 <comment> \n \t4 file socket <identifiersep> file = new file ( local . path ( ) ) ; \n \t4 boolean success = socket <identifiersep> file . delete ( ) ; \n <ect>
<comment> \n \t1 public static void execute <identifiersep> <identifier> ( string <identifier> , map < string , object > user <identifiersep> input ) throws database <identifiersep> update <identifiersep> exception , \n \t3 input <identifiersep> required <identifiersep> exception { \n <ect>
\t3 send <identifiersep> message ( from , new status <identifiersep> response ( session <identifiersep> id , failed ) ) ; } \n \t2 else \n \t2 { \n \t3 send <identifiersep> message ( from , new status <identifiersep> response ( session <identifiersep> id , session . get <identifiersep> state ( ) ) ) ; \n <ect>
\t4 return ; } \n \t3 confidence . set <identifiersep> depth <identifiersep> in <identifiersep> blocks ( confidence <identifiersep> proto . get <identifiersep> depth ( ) ) ; } \n \t2 if ( confidence <identifiersep> proto . has <identifiersep> <identifier> <identifiersep> transaction ( ) ) { \n \t3 if ( confidence . get <identifiersep> confidence <identifiersep> type ( ) != confidence <identifiersep> type . dead ) { \n <ect>
\t1 try { \n \t1 long timeout = direct <identifiersep> storage <identifiersep> info . get <identifiersep> storage <identifiersep> info ( ) . get <identifiersep> timeout <identifiersep> in <identifiersep> millis ( ) ; \n \t1 log . debug ( <string_literal> + tid + <string_literal> + lun + <string_literal> + volume <identifiersep> id ) ; \n \t1 if ( tgt <identifiersep> service . target <identifiersep> exists ( volume <identifiersep> id , tid , path , timeout ) ) { \n <ect>
private h <identifiersep> base <identifiersep> client init <identifiersep> h <identifiersep> base <identifiersep> client ( ) { \n \t1 logger . info ( <string_literal> ) ; \n \t1 sink <identifiersep> callback <identifiersep> pool = executors . new <identifiersep> cached <identifiersep> thread <identifiersep> pool ( new thread <identifiersep> factory <identifiersep> builder ( ) \n \t2 . set <identifiersep> name <identifiersep> format ( this . get <identifiersep> name ( ) + <string_literal> ) . build ( ) ) ; \n <ect>
\t6 log . debug ( header ) ; } } \n \t4 transport . send <identifiersep> message ( a <identifiersep> message , a <identifiersep> message . get <identifiersep> all <identifiersep> <identifier> ( ) ) ; \n \t4 message . <identifier> <identifiersep> delivery <identifiersep> succeeded ( ) ; \n \t4 if ( debug ) \n <ect>
\t4 if ( access <identifiersep> control <identifiersep> max <identifiersep> age != null ) { \n \t5 response . set <identifiersep> access <identifiersep> control <identifiersep> max <identifiersep> age ( access <identifiersep> control <identifiersep> max <identifiersep> age ) ; } \n \t3 } else { \n \t4 <comment> \n <ect>
\t1 private void read <identifiersep> module <identifiersep> property ( ) { \n \t2 <comment> \n \t2 file f = get <identifiersep> path ( ) ; \n <ect>
\t3 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , remaining , lifetime ) ; \n \t2 if ( removed > 0 ) \n \t3 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , removed , remaining ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 log . info ( <string_literal> ) ; \n \t4 for ( string s : options ) { \n \t5 log . info ( <string_literal> + s ) ; } } \n \t3 if ( command <identifiersep> line <identifiersep> args == null || command <identifiersep> line <identifiersep> args . length == 0 ) { \n <ect>
\t4 response . get <identifiersep> output <identifiersep> stream ( ) . write ( <string_literal> . get <identifiersep> bytes ( <string_literal> ) ) ; \n \t4 return ; } \n \t3 tx . success ( ) ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void check <identifiersep> server <identifiersep> trusted ( x509certificate [ ] certificates , string auth <identifiersep> type ) throws certificate <identifiersep> exception { \n <ect>
\t4 final response <identifiersep> status status = response . get <identifiersep> status ( ) ; \n \t4 if ( status . compare <identifiersep> to ( response <identifiersep> status . ok ) == 0 ) { \n \t5 logger . debug ( <string_literal> , status , response . get <identifiersep> timestamp ( ) ) ; \n \t5 return true ; } \n <ect>
\t2 + <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t1 try { \n \t1 out . write <identifiersep> object ( payload ) ; \n \t1 } catch ( not <identifiersep> serializable <identifiersep> exception e ) { \n <ect>
\t2 configuration job <identifiersep> conf = null ; \n \t2 try { \n \t3 job <identifiersep> conf = new x <identifiersep> configuration ( new string <identifiersep> reader ( coord <identifiersep> job . get <identifiersep> conf ( ) ) ) ; } \n \t2 catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 checkpoint ( stateful , read , end ) ; \n \t3 return null ; } \n \t2 <comment> \n \t2 else { \n <ect>
\t1 public int get <identifiersep> max <identifiersep> <identifier> <identifiersep> tree <identifiersep> size ( ) { \n \t2 return max <identifiersep> <identifier> <identifiersep> tree <identifiersep> size ; } \n \t1 void set <identifiersep> max <identifiersep> <identifier> <identifiersep> tree <identifiersep> size ( int max <identifiersep> <identifier> <identifiersep> tree <identifiersep> size ) { \n \t2 this . max <identifiersep> <identifier> <identifiersep> tree <identifiersep> size = max <identifiersep> <identifier> <identifiersep> tree <identifiersep> size ; \n <ect>
\t2 assert <identifiersep> successful <identifiersep> snapshot ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> create <identifiersep> snapshot ( repo <identifiersep> name , snapshot <identifiersep> name ) \n \t4 . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) . set <identifiersep> indices ( index <identifiersep> names ) ) ; \n \t2 list < string > delete <identifiersep> indices = random <identifiersep> <identifier> <identifiersep> of ( random <identifiersep> int <identifiersep> between ( 0 , index <identifiersep> count ) , index <identifiersep> names ) ; \n \t2 if ( delete <identifiersep> indices . size ( ) > 0 ) { \n <ect>
@ override \n public void close ( ) throws io <identifiersep> exception { \n \t1 try { \n \t2 if ( conn <identifiersep> manager != null ) { \n <ect>
\t2 if ( delegated <identifiersep> consumer instanceof startup <identifiersep> listener ) { \n \t3 get <identifiersep> endpoint ( ) . get <identifiersep> camel <identifiersep> context ( ) . add <identifiersep> startup <identifiersep> listener ( ( startup <identifiersep> listener ) delegated <identifiersep> consumer ) ; } \n \t2 service <identifiersep> helper . start <identifiersep> service ( delegated <identifiersep> endpoint ) ; \n \t2 service <identifiersep> helper . start <identifiersep> service ( delegated <identifiersep> consumer ) ; \n <ect>
\t1 private string generate <identifiersep> stats <identifiersep> rule ( final load <identifiersep> balancer <identifiersep> config <identifiersep> command lb <identifiersep> cmd , final string rule <identifiersep> name , final string stats <identifiersep> ip ) { \n \t2 final string <identifiersep> builder rule = new string <identifiersep> builder ( <string_literal> ) . append ( rule <identifiersep> name ) . append ( <string_literal> ) . append ( stats <identifiersep> ip ) . append ( <string_literal> ) . append ( lb <identifiersep> cmd . lb <identifiersep> stats <identifiersep> port ) ; \n \t2 <comment> \n \t2 if ( ! lb <identifiersep> cmd . keep <identifiersep> alive <identifiersep> enabled ) { \n <ect>
\t4 timer . mark ( <string_literal> ) ; \n \t4 connection . bind ( user . get <identifiersep> external <identifiersep> id ( ) . get <identifiersep> id ( ) , new string ( creds . get <identifiersep> password ( ) ) ) ; \n \t4 timer . mark ( <string_literal> ) ; \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <comment> \n \t2 logger . debug ( <string_literal> + to <identifiersep> time <identifiersep> string ( uses <identifiersep> timer , total <identifiersep> time ) ) ; \n <ect>
\t3 http <identifiersep> client = new default <identifiersep> http <identifiersep> client ( <identifier> ) ; \n \t2 } catch ( final key <identifiersep> management <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( final <identifier> <identifiersep> key <identifiersep> exception e ) { \n <ect>
\t3 public listenable <identifiersep> future < ? extends drive <identifiersep> info > apply ( string input ) { \n \t4 try { \n \t5 return futures . immediate <identifiersep> future ( cache . get <identifiersep> unchecked ( input ) ) ; \n \t4 } catch ( cache <identifiersep> loader . invalid <identifiersep> cache <identifiersep> load <identifiersep> exception e ) { \n <ect>
\t1 path bulk = new path ( root <identifiersep> path , <string_literal> ) ; \n \t1 log . info ( <string_literal> , bulk ) ; \n \t1 assert <identifiersep> true ( fs . mkdirs ( bulk ) ) ; \n \t1 path err = new path ( root <identifiersep> path , <string_literal> ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public object [ ] remove ( k key , skip <identifiersep> list < k , v > <identifier> ) { \n \t2 if ( bf . log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 else { \n \t3 try { \n \t4 return data <identifiersep> source . get <identifiersep> connection ( ) ; \n \t3 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 || <identifier> > unique <identifiersep> <identifier> . max <identifiersep> <identifier> ) { \n \t2 <comment> \n \t2 return false ; } } \n \t1 <comment> \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 try { \n \t1 thread <identifiersep> pool . shutdown ( ) ; \n \t1 if ( ! thread <identifiersep> pool . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n <ect>
\t2 set < k > set = new tree <identifiersep> set < k > ( ) ; \n \t2 for ( row < k , c > row : rows ) { \n \t3 if ( set . contains ( row . get <identifiersep> key ( ) ) ) \n \t4 assert . fail ( <string_literal> + row . get <identifiersep> key ( ) ) ; \n <ect>
\t2 if ( zoo . is <identifiersep> lock <identifiersep> held ( zoo <identifiersep> lock . get <identifiersep> lock <identifiersep> id ( ) ) ) { \n \t2 op . run ( zoo ) ; } \n \t2 break ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 log . info ( file + <string_literal> + f . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 if ( ! ( f . exists ( ) && f . can <identifiersep> read ( ) ) ) { \n \t4 log . error ( <string_literal> + file ) ; \n \t4 return ; } } \n <ect>
\t3 if ( lock == null ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 return ; } \n \t3 if ( ! lock . lock ( <number_literal> ) ) { \n <ect>
\t1 protected void remove <identifiersep> job ( job <identifiersep> id job <identifiersep> id ) { \n \t2 try { \n \t3 job <identifiersep> leader <identifiersep> id <identifiersep> service . remove <identifiersep> job ( job <identifiersep> id ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 <identifier> . reload <identifiersep> ss <identifiersep> table <identifiersep> metadata ( ) ; \n \t2 pending <identifiersep> <identifier> <identifiersep> compaction . acquisition <identifiersep> callable acquisition <identifiersep> callable = new pending <identifiersep> <identifier> <identifiersep> compaction . acquisition <identifiersep> callable ( cfs , full <identifiersep> range , uuid <identifiersep> gen . get <identifiersep> time <identifiersep> uuid ( ) ) ; \n \t2 pending <identifiersep> <identifier> <identifiersep> compaction . acquire <identifiersep> result result = acquisition <identifiersep> callable . call ( ) ; \n \t2 assert . assert <identifiersep> not <identifiersep> null ( result ) ; \n <ect>
\t2 default <identifiersep> config . set <identifiersep> thread <identifiersep> model ( executor <identifiersep> thread <identifiersep> model . get <identifiersep> instance ( <string_literal> ) ) ; \n \t2 <identifier> . bind ( this . addr , new server <identifiersep> session <identifiersep> handler ( cache , memcached <identifiersep> version , verbose , idle <identifiersep> time ) ) ; \n \t2 protocol <identifiersep> codec <identifiersep> factory codec = new memcached <identifiersep> protocol <identifiersep> codec <identifiersep> factory ( ) ; \n \t2 <identifier> . get <identifiersep> filter <identifiersep> chain ( ) . add <identifiersep> first ( <string_literal> , new protocol <identifiersep> codec <identifiersep> filter ( codec ) ) ; \n <ect>
\t4 } else if ( <string_literal> . equals ( event ) ) { \n \t5 return type . <identifier> <identifiersep> tweet ; } \n \t3 } catch ( json <identifiersep> exception <identifier> ) { \n \t4 try { \n <ect>
\t4 address = host <identifiersep> and <identifiersep> port . from <identifiersep> parts ( url . get <identifiersep> host ( ) , url . get <identifiersep> port ( ) ) ; } \n \t3 catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n \t4 <comment> \n \t4 throw new assertion <identifiersep> error ( e ) ; } \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 final object <identifiersep> entity <identifier> <identifiersep> object = entity ; \n \t1 callable < copy <identifiersep> object <identifiersep> response <identifiersep> type > put <identifiersep> callable = new callable < copy <identifiersep> object <identifiersep> response <identifiersep> type > ( ) { \n \t2 @ override \n \t2 public copy <identifiersep> object <identifiersep> response <identifiersep> type call ( ) throws exception { \n <ect>
\t1 } catch ( invalid <identifiersep> parameter <identifiersep> exception e ) { \n \t1 logger . error ( get <identifiersep> messages <identifiersep> instance ( ) . get <identifiersep> string ( <string_literal> , e . get <identifiersep> message ( ) ) , e ) ; \n \t1 return build <identifiersep> status <identifiersep> response ( response . status . bad <identifiersep> request ) ; \n \t1 } catch ( illegal <identifiersep> selector <identifiersep> exception e ) { \n <ect>
\t4 { \n \t5 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( e ) ; \n \t5 <comment> \n \t5 <comment> \n <ect>
\t2 long time <identifiersep> find <identifiersep> minimal <identifiersep> cover = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 elapsed <identifiersep> time <identifiersep> sec = ( time <identifiersep> find <identifiersep> minimal <identifiersep> cover - time <identifiersep> sort <identifiersep> patterns ) / 1000f ; \n \t2 logger . info ( <string_literal> + elapsed <identifiersep> time <identifiersep> sec + <string_literal> ) ; \n \t2 if ( minimal <identifiersep> set == null || minimal <identifiersep> set . is <identifiersep> empty ( ) ) { \n <ect>
\t3 predicate = false ; } \n \t2 return predicate ; } \n \t1 synchronized void update <identifiersep> <identifier> ( long leader , long zxid , long epoch ) { \n <ect>
\t1 for ( final file f : created <identifiersep> tmp <identifiersep> files ) { \n \t1 final boolean deleted = delete <identifiersep> directory ( f ) ; \n \t1 if ( ! deleted ) { \n \t2 <comment> \n <ect>
\t4 return auth <identifiersep> result ; } \n \t3 if ( result != null && result instanceof string ) { \n \t4 auth <identifiersep> result = new gson ( ) . from <identifiersep> json ( ( string ) result , console <identifiersep> proxy <identifiersep> authentication <identifiersep> result . class ) ; \n \t3 } else { \n <ect>
\t2 event <identifiersep> msg . set <identifiersep> description ( event <identifiersep> description ) ; \n \t2 try { \n \t3 s <identifiersep> event <identifiersep> bus . publish ( event <identifiersep> msg ) ; \n \t2 } catch ( event <identifiersep> bus <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 protected model <identifiersep> and <identifiersep> view handle <identifiersep> http <identifiersep> message <identifiersep> not <identifiersep> writable ( http <identifiersep> message <identifiersep> not <identifiersep> writable <identifiersep> exception ex , \n \t3 http <identifiersep> servlet <identifiersep> request request , http <identifiersep> servlet <identifiersep> response response , @ nullable object handler ) throws io <identifiersep> exception { \n <ect>
\t3 try { \n \t4 file <identifiersep> store . write <identifiersep> file ( export <identifiersep> file , config . lua <identifiersep> config ) \n \t4 show <identifiersep> <identifier> <identifiersep> short ( this , <string_literal> ) \n \t3 } catch ( e : exception ) { \n <ect>
\t2 log . debug ( <string_literal> + <identifier> . get <identifiersep> last <identifiersep> modified ( ) ) ; \n \t2 <comment> \n \t2 sleep ( <number_literal> ) ; \n \t2 long update <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t2 mock . expected <identifiersep> minimum <identifiersep> message <identifiersep> count ( 1 ) ; \n \t2 mock . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > <identifier> = mock . get <identifiersep> exchanges ( ) ; \n \t2 for ( exchange e : <identifier> ) { \n <ect>
\t1 <comment> \n \t1 locale <identifiersep> helper . set <identifiersep> locale ( locale . get <identifiersep> default ( ) ) ; \n \t1 string session <identifiersep> id = event . get <identifiersep> session ( ) . get <identifiersep> id ( ) ; \n \t1 if ( pentaho <identifiersep> http <identifiersep> session <identifiersep> listener . debug ) { \n <ect>
\t2 } catch ( keeper <identifiersep> exception ex ) { \n \t2 <comment> \n \t2 if ( e . code ( ) == code . <identifier> ) { \n \t3 throw new table <identifiersep> not <identifiersep> found <identifiersep> exception ( null , table , <string_literal> ) ; } \n <ect>
\t4 print <identifiersep> summary ( ) ; \n \t3 } catch ( exception e ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t6 result = new <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> result ( false , null , null ) ; } } \n \t3 } finally { \n \t4 table <identifiersep> lock . read <identifiersep> lock ( ) . unlock ( ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 method getter = introspection <identifiersep> support . get <identifiersep> property <identifiersep> getter ( get <identifiersep> entity <identifiersep> type ( ) , get <identifiersep> key <identifiersep> property <identifiersep> name ( ) ) ; \n \t3 return getter . get <identifiersep> return <identifiersep> type ( ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t3 broadcast <identifiersep> filter bf = null ; \n \t3 try { \n \t4 bf = config . framework ( ) . new <identifiersep> class <identifiersep> instance ( broadcast <identifiersep> filter . class , ( class < broadcast <identifiersep> filter > ) io <identifiersep> utils . load <identifiersep> class ( get <identifiersep> class ( ) , broadcast <identifiersep> filter ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 } catch ( interrupted <identifiersep> exception e ) { \n \t7 throw new io <identifiersep> exception ( <string_literal> , e ) ; } } } \n \t4 log . info ( <string_literal> + duration + <string_literal> ) ; } \n \t2 } else { \n <ect>
\t3 this . address <identifiersep> ids . clear ( ) ; \n \t3 if ( this . gateway . customer ( ) . delete ( this . customer . get <identifiersep> id ( ) ) . is <identifiersep> success ( ) ) { \n \t4 log . info ( <string_literal> , this . customer . get <identifiersep> id ( ) ) ; \n \t3 } else { \n <ect>
\t2 boolean was <identifiersep> in <identifiersep> form = context . is <identifiersep> in <identifiersep> form ( ) ; \n \t2 if ( <identifier> <identifiersep> should <identifiersep> append <identifiersep> form <identifiersep> tags ( context , was <identifiersep> in <identifiersep> form ) ) { \n \t3 boolean was <identifiersep> form <identifiersep> submitted = context . was <identifiersep> form <identifiersep> submitted ( ) ; \n \t3 <identifier> <identifiersep> enter <identifiersep> form <identifiersep> in <identifiersep> context ( context ) ; \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> get <identifiersep> all <identifiersep> identifiers ( ) { \n \t2 try { \n \t3 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t2 field field = null ; \n \t2 try { \n \t3 field = clazz . get <identifiersep> field ( property ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> field <identifiersep> exception e ) { \n <ect>
\t3 { \n \t3 @ override \n \t3 public void on <identifiersep> error ( throwable e ) \n \t3 { \n <ect>
\t5 iter . remove ( ) ; \n \t5 <comment> \n \t4 } else { \n \t5 if ( state . is <identifiersep> complete ( ) ) { \n <ect>
\t1 set < string > user <identifiersep> set = sets . new <identifiersep> hash <identifiersep> set ( ) ; \n \t1 for ( string member : members ) { \n \t1 set < string > group <identifiersep> members = groups . get ( member ) ; \n \t1 if ( group <identifiersep> members == null ) { \n <ect>
\t1 string types = types <identifiersep> sb . to <identifiersep> string ( ) ; \n \t1 <identifier> = new lazy <identifiersep> simple <identifiersep> ser <identifiersep> de ( ) ; \n \t1 properties props = new properties ( ) ; \n \t1 if ( names . length ( ) > 0 ) { \n <ect>
\t1 config . set ( credential <identifiersep> store <identifiersep> provider <identifiersep> path <identifiersep> property , credential <identifiersep> store <identifiersep> provider <identifiersep> path ) ; \n \t1 char [ ] password <identifiersep> chars = config . get <identifiersep> password ( property <identifiersep> name ) ; \n \t1 return ( array <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( password <identifiersep> chars ) ) ? new string ( password <identifiersep> chars ) : null ; \n \t1 } catch ( exception e ) { \n <ect>
\t6 old <identifiersep> remote <identifiersep> model ) ; \n \t4 return new <identifiersep> model ; } \n \t3 catch ( throwable t ) { \n <ect>
\t7 return optional . empty ( ) ; } \n \t6 if ( it . is <identifiersep> version <identifiersep> property ( ) ) { \n \t7 return optional . empty ( ) ; } \n \t6 if ( it . is <identifiersep> entity ( ) && ! writer . is <identifiersep> <identifier> ( ) ) { \n <ect>
\t2 <comment> \n \t2 coordinate <identifiersep> reference <identifiersep> system <identifier> = <identifier> . decode ( <string_literal> ) ; \n \t2 assert <identifiersep> equals ( <identifier> <identifiersep> order . <identifier> <identifiersep> <identifier> , <identifier> . get <identifiersep> <identifier> <identifiersep> order ( <identifier> ) ) ; \n \t2 document doc = get <identifiersep> as <identifiersep> dom ( <string_literal> ) ; \n <ect>
<comment> \n \t2 void write ( byte [ ] b ) throws io <identifiersep> exception { \n \t3 if ( sock == null || ! sock . is <identifiersep> connected ( ) ) { \n <ect>
\t8 if ( is <identifiersep> <identifier> <identifiersep> class ( a <identifiersep> class ) ) { \n \t9 try { \n \t10 instrumentation . <identifier> <identifiersep> classes ( new class [ ] { a <identifiersep> class } ) ; \n \t9 } catch ( throwable e ) { \n <ect>
\t2 <comment> \n \t2 exception e = new io <identifiersep> exception ( <string_literal> ) ; \n \t2 helper . init ( <string_literal> , e , null ) ; \n \t2 reset ( log ) ; \n <ect>
\t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n <ect>
\t3 return action . get <identifiersep> execution <identifiersep> strategy ( ) . execute ( \n \t5 new task <identifiersep> handler <identifiersep> action <identifiersep> context <identifiersep> impl ( child <identifiersep> context , context . get <identifiersep> user <identifiersep> action <identifiersep> requests ( ) ) ) ; } \n \t2 catch ( validation <identifiersep> exception ex ) \n \t2 { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 out . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e <identifiersep> io ) { \n <ect>
<comment> \n \t1 @ override \n \t1 protected void do <identifiersep> accept ( final selector selector , server <identifiersep> socket <identifiersep> channel server , long now ) throws io <identifiersep> exception { \n <ect>
\t1 log . debug ( <string_literal> , out . get <identifiersep> pos ( ) ) ; \n \t1 long headers <identifiersep> size = bytes . size ( ) - compressed <identifiersep> total <identifiersep> page <identifiersep> size ; \n \t1 this . uncompressed <identifiersep> length += uncompressed <identifiersep> total <identifiersep> page <identifiersep> size + headers <identifiersep> size ; \n \t1 this . compressed <identifiersep> length += compressed <identifiersep> total <identifiersep> page <identifiersep> size + headers <identifiersep> size ; \n <ect>
\t6 <string_literal> ) ; } } \n \t2 solution . get <identifiersep> unassigned <identifiersep> jobs ( ) . add <identifiersep> all ( all <identifiersep> jobs ) ; \n \t2 solution . set <identifiersep> cost ( get <identifiersep> <identifier> <identifiersep> function ( ) . get <identifiersep> costs ( solution ) ) ; \n \t2 <comment> \n <ect>
\t9 . build ( ) ; \n \t7 sched . schedule <identifiersep> job ( job , trigger ) ; \n \t7 logger . debug ( <string_literal> , ip , monitor <identifiersep> port ) ; } \n \t5 } catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t2 if ( file <identifiersep> exists ) { \n \t2 throw new <identifier> <identifiersep> web <identifiersep> exception ( error <identifiersep> code . workflow <identifiersep> path <identifiersep> exists ) ; } } \n \t1 post <identifiersep> body = utils . format <identifiersep> xml ( post <identifiersep> body ) ; \n \t1 string file <identifiersep> path = workflow <identifiersep> files <identifiersep> service . create <identifiersep> file ( app <identifiersep> path , post <identifiersep> body , overwrite ) ; \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return false ; } \n \t2 final string grant <identifiersep> type = context . get <identifiersep> request <identifiersep> parameter ( o <identifiersep> auth20constants . grant <identifiersep> type ) ; \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . client <identifiersep> id ) ) { \n <ect>
\t3 <identifier> <identifiersep> resolved <identifiersep> methods = true ; \n \t3 try { \n \t4 <identifier> <identifiersep> debug <identifiersep> enabled <identifiersep> for <identifiersep> component <identifiersep> method = wo <identifiersep> application . application ( ) . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> , string . class ) ; } \n \t3 catch ( throwable e ) { \n <ect>
\t1 this . opts = opts ; \n \t1 this . fs = fs ; \n \t1 long gc <identifiersep> delay = get <identifiersep> configuration ( ) . get <identifiersep> time <identifiersep> in <identifiersep> millis ( property . gc <identifiersep> cycle <identifiersep> delay ) ; \n \t1 log . info ( <string_literal> , get <identifiersep> start <identifiersep> delay ( ) ) ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 string max = dao . do <identifiersep> max <identifiersep> query ( col , table <identifiersep> name , id ) ; \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 for ( string quote : <identifier> <identifiersep> <identifier> ) { \n \t3 send <identifiersep> request ( quote ) ; } \n \t2 mock <identifiersep> endpoint . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n <ect>
\t3 super ( type , link , data ) ; } \n \t2 @ override \n \t2 protected void do <identifiersep> task ( task task ) throws exception { \n \t3 final type type = task . get <identifiersep> type ( ) ; \n <ect>
\t2 propagate ( ) ; \n \t2 if ( true ) \n \t2 { \n \t3 logger . debug ( <string_literal> + new date ( ) ) ; \n <ect>
\t3 sc . add <identifiersep> and ( <string_literal> , search <identifiersep> criteria . op . eq , usage <identifiersep> types . allocated <identifiersep> vm ) ; \n \t3 list < usage <identifiersep> vm <identifiersep> instance <identifiersep> vo > usage <identifiersep> instances = <identifier> <identifiersep> usage <identifiersep> instance <identifiersep> dao . search ( sc , null ) ; \n \t3 if ( usage <identifiersep> instances != null ) { \n \t4 if ( usage <identifiersep> instances . size ( ) > 1 ) { \n <ect>
\t2 check <identifiersep> not <identifiersep> null ( home ) ; \n \t2 this . <identifier> <identifiersep> watch <identifiersep> <identifier> = new file <identifiersep> <identifier> ( get <identifiersep> home ( ) . get <identifiersep> sub <identifiersep> file ( <string_literal> ) . get <identifiersep> absolute <identifiersep> path ( ) ) { \n \t3 @ override \n \t3 protected void do <identifiersep> on <identifiersep> change ( ) { \n <ect>
\t4 log . debug ( <string_literal> ) ; \n \t3 session <identifiersep> id <identifiersep> generator . generate <identifiersep> session <identifiersep> id ( ) ; \n <ect>
\t1 map < string , list < string > > cluster <identifiersep> to <identifiersep> <identifier> <identifiersep> clusters <identifiersep> mapping = new hash <identifiersep> map < string , list < string > > ( ) ; \n \t1 <comment> \n \t1 <comment> \n \t1 map < string , list < string > > regular <identifiersep> cluster <identifiersep> to <identifiersep> services <identifiersep> mapping = new hash <identifiersep> map < > ( ) ; \n <ect>
\t3 if ( ! claims . get <identifiersep> string <identifiersep> claim <identifiersep> value ( <string_literal> ) . equals ( holder . get <identifiersep> server <identifiersep> ip <identifiersep> address ( ) ) ) { \n \t4 logger . error ( <string_literal> ) ; \n \t4 return null ; } \n \t3 if ( ! claims . get <identifiersep> string <identifiersep> claim <identifiersep> value ( <string_literal> ) . equals ( holder . get <identifiersep> client <identifiersep> ip <identifiersep> address ( ) ) ) { \n <ect>
\t2 try { \n \t3 log . debug ( <string_literal> + <string_literal> ) ; \n \t3 log . info ( <string_literal> + <string_literal> ) ; \n \t3 log . warn ( <string_literal> + <string_literal> ) ; \n <ect>
\t4 <comment> \n \t4 iso <identifiersep> vbd . insert ( conn , iso <identifiersep> vdi ) ; } \n \t3 return new attach <identifiersep> answer ( disk ) ; \n \t2 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 try { \n \t3 cancellation <identifiersep> token . cancel ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 usage <identifiersep> vm <identifiersep> instance <identifiersep> vo usage <identifiersep> instance <identifiersep> new = new usage <identifiersep> vm <identifiersep> instance <identifiersep> vo ( usage <identifiersep> types . running <identifiersep> vm , zone <identifiersep> id , event . get <identifiersep> account <identifiersep> id ( ) , vm <identifiersep> id , vm <identifiersep> name , \n \t6 so <identifiersep> id , template <identifiersep> id , hypervisor <identifiersep> type , event . get <identifiersep> create <identifiersep> date ( ) , null ) ; \n \t4 m <identifiersep> usage <identifiersep> instance <identifiersep> dao . persist ( usage <identifiersep> instance <identifiersep> new ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 return <string_literal> + entity <identifiersep> class <identifiersep> name + <string_literal> + key + <string_literal> + job . get <identifiersep> id ( ) ; } \n \t2 t entity = entities . remove ( key ) ; \n \t2 if ( entity != null ) { \n \t3 spawn <identifiersep> data <identifiersep> store . delete <identifiersep> child ( data <identifiersep> store <identifiersep> path , key ) ; \n <ect>
\t4 if ( dest == null ) { \n \t5 avoid . add <identifiersep> pod ( plan . get <identifiersep> pod <identifiersep> id ( ) ) ; } \n \t4 return dest ; \n \t3 } else { \n <ect>
\t8 <identifier> = vpc . id \n \t8 ) \n \t2 self . logger . debug ( <string_literal> % network . id ) \n \t2 self . cleanup . insert ( 0 , network ) \n <ect>
\t2 } catch ( bad <identifiersep> padding <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( invalid <identifiersep> key <identifiersep> exception e ) { \n <ect>
\t3 default : \n \t3 case end : \n \t4 return prefix + <string_literal> + local ; \n \t3 case fast : \n <ect>
\t1 } catch ( end <identifiersep> of <identifiersep> document <identifiersep> exception e ) { \n \t1 log . debug ( <string_literal> ) ; \n \t1 next <identifiersep> object = null ; \n \t1 } catch ( xml <identifiersep> stream <identifiersep> exception e ) { \n <ect>
\t3 jetty . start ( ) ; \n \t3 <identifier> <identifiersep> server server = <identifier> <identifiersep> server . from <identifiersep> servlet <identifiersep> context ( context . get <identifiersep> servlet <identifiersep> context ( ) ) ; \n \t3 if ( server == null || server . error <identifiersep> on <identifiersep> startup ( ) ) { \n \t4 jetty . stop ( ) ; \n <ect>
\t3 h <identifiersep> table <identifiersep> descriptor table <identifiersep> desc = new h <identifiersep> table <identifiersep> descriptor ( table <identifiersep> name ) ; \n \t3 table <identifiersep> desc . set <identifiersep> value ( h <identifiersep> table <identifiersep> descriptor . split <identifiersep> policy , disabled <identifiersep> region <identifiersep> split <identifiersep> policy . class . get <identifiersep> name ( ) ) ; \n \t3 kylin <identifiersep> config kylin <identifiersep> config = kylin <identifiersep> config . get <identifiersep> instance <identifiersep> from <identifiersep> env ( ) ; \n \t3 table <identifiersep> desc . add <identifiersep> family ( create <identifiersep> column <identifiersep> family ( kylin <identifiersep> config , cf <identifiersep> name , false ) ) ; \n <ect>
\t1 super ( mapped <identifiersep> uri ) ; } \n @ override \n public response safe <identifiersep> handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n \t1 date expiry = null ; \n <ect>
\t4 if ( is <identifiersep> not <identifiersep> blank ( e . get <identifiersep> message ( ) ) ) { \n \t5 logger . debug ( <string_literal> , e . bytes <identifiersep> <identifier> , e . get <identifiersep> message ( ) ) ; \n \t4 } else { \n <ect>
\t2 { \n \t3 stream . inject <identifiersep> packet ( <identifier> , false , this ) ; } \n \t2 catch ( <identifier> <identifiersep> failed <identifiersep> exception e ) \n \t2 { \n <ect>
\t7 if ( ! target . is <identifiersep> not <identifiersep> target ( ) ) { \n \t8 game . add <identifiersep> <identifier> <identifiersep> event ( game <identifiersep> event . get <identifiersep> event ( game <identifiersep> event . event <identifiersep> type . <identifier> , id , ability . get <identifiersep> source <identifiersep> id ( ) , ability . get <identifiersep> controller <identifiersep> id ( ) ) ) ; } } } \n \t5 player player = game . get <identifiersep> player ( ability . get <identifiersep> first <identifiersep> target ( ) ) ; \n \t5 if ( player != null ) { \n <ect>
\t4 . with <identifiersep> name ( web <identifiersep> security <identifiersep> domain ) . build ( ) ; \n \t2 ps . create ( cli ) ; \n \t2 domain <identifiersep> mapper = <identifier> <identifiersep> domain <identifiersep> mapper . builder ( ) . with <identifiersep> name ( web <identifiersep> security <identifiersep> domain ) . build ( ) ; \n \t2 domain <identifiersep> mapper . create ( cli ) ; \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return false ; } \n \t2 final string grant <identifiersep> type = context . get <identifiersep> request <identifiersep> parameter ( o <identifiersep> auth20constants . grant <identifiersep> type ) ; \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . client <identifiersep> id ) ) { \n <ect>
\t6 ip <identifiersep> to <identifiersep> bytes ( ip <identifiersep> part , network , must <identifiersep> <identifier> ) ; \n \t7 log . debug ( <string_literal> + full <identifiersep> mask ) ; \n \t7 for ( int i = 0 ; i < network . length ; i ++ ) { \n <ect>
\t3 <comment> \n \t3 if ( logging <identifiersep> level . error == run <identifiersep> logging <identifiersep> level ) { \n \t4 log . error ( <string_literal> , this . get <identifiersep> endpoint ( ) ) ; \n \t3 } else if ( logging <identifiersep> level . warn == run <identifiersep> logging <identifiersep> level ) { \n <ect>
\t5 f . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) || \n \t5 f . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) || \n \t5 f . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) || \n \t5 f . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t1 assert <identifiersep> equals ( <string_literal> , <string_literal> , json <identifiersep> params . remove ( <string_literal> ) ) ; \n \t1 assert <identifiersep> true ( <string_literal> , json <identifiersep> params . is <identifiersep> empty ( ) ) ; } \n @ test \n public void test <identifiersep> filter <identifiersep> key <identifiersep> value <identifiersep> extraction <identifiersep> with <identifiersep> <identifier> ( ) throws exception { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 private integer request ( string [ ] endpoints , string body , mutable <identifiersep> int retry ) throws io <identifiersep> exception { \n \t2 rotation = ( rotation + 1 ) % endpoints . length ; \n \t2 string endpoint = endpoints [ rotation ] ; \n \t2 if ( retry . get <identifiersep> value ( ) > 0 ) { \n <ect>
\t1 @ jmx <identifiersep> operation ( description = <string_literal> , <identifier> = m <identifiersep> bean <identifiersep> operation <identifiersep> info . action ) \n \t1 public void enable ( string id ) { \n \t2 if ( all <identifiersep> jobs . contains <identifiersep> key ( id ) && ! scheduled <identifiersep> job <identifiersep> results . contains <identifiersep> key ( id ) ) { \n \t3 scheduled <identifiersep> runnable scheduled <identifiersep> runnable = all <identifiersep> jobs . get ( id ) ; \n <ect>
\t6 for ( virtual <identifiersep> destination added <identifiersep> virtual <identifiersep> dest : added <identifiersep> virtual <identifiersep> dests ) { \n \t7 plugin . virtual <identifiersep> destination <identifiersep> added ( connection <identifiersep> context , added <identifiersep> virtual <identifiersep> dest ) ; \n \t7 log . info ( <string_literal> , added <identifiersep> virtual <identifiersep> dest ) ; } } \n \t4 } catch ( exception e ) { \n <ect>
\t5 if ( meta <identifiersep> <identifier> ) return ; \n \t5 meta <identifiersep> <identifier> = true ; \n \t4 } else { \n \t5 if ( state != <identifier> ) { \n <ect>
\t2 <identifier> . close ( ) ; } \n \t2 if ( writer != null ) { \n \t2 writer . close ( ) ; } } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 pre <identifiersep> <identifier> <identifiersep> database { \n \t1 @ override \n \t1 public boolean call ( ) { \n <comment> \n <ect>
\t3 list < object > row = new array <identifiersep> list < object > ( db <identifiersep> columns . size ( ) ) ; \n \t3 for ( database <identifiersep> column cd : db <identifiersep> columns ) { \n \t4 row . add ( cd . get <identifiersep> name ( ) ) ; } \n \t3 used <identifiersep> headers = true ; \n <ect>
\t5 log . info ( <string_literal> + key + <string_literal> ) ; } \n \t3 else { \n \t4 log . error ( <string_literal> + key ) ; \n <ect>
\t3 return ; \n \t2 if ( <identifier> . version ( ) == 1 ) \n \t3 return ; \n \t2 if ( <identifier> . compare <identifiersep> to ( u2 ) != exp <identifiersep> c ) \n <ect>
\t1 } finally { \n \t1 <comment> \n \t2 log . debug ( <string_literal> , log <identifiersep> message ) ; } \n <ect>
\t1 <identifier> <identifiersep> snapshot = [ el for el in final <identifiersep> snapshot if not el . is <identifiersep> leader ] \n \t1 if reduce ( lambda a , b : a and b , [ e . is <identifiersep> succeeded for e in <identifier> <identifiersep> snapshot ] ) : \n \t2 os . <identifier> [ build <identifiersep> aggregate <identifiersep> status ] = <string_literal> \n \t1 elif reduce ( lambda a , b : a and b , [ not e . is <identifiersep> succeeded for e in <identifier> <identifiersep> snapshot ] ) : \n <ect>
\t4 integer . parse <identifiersep> int ( path . substring ( local <identifiersep> port <identifiersep> index + 1 , path . length ( ) ) ) ; \n \t4 string local <identifiersep> string = location . get <identifiersep> scheme ( ) + <string_literal> + path ; \n \t4 local <identifiersep> location = new uri ( local <identifiersep> string ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 assert e . get <identifiersep> cause ( ) != null ; \n \t5 final string message = <string_literal> + hostname + <string_literal> ; \n \t5 logger . warn ( message , e . get <identifiersep> cause ( ) ) ; } \n \t3 } else { \n <ect>
\t2 vm <identifiersep> type . set <identifiersep> memory ( old <identifiersep> vm <identifiersep> type <identifiersep> info . get <identifiersep> memory ( ) ) \n \t2 vm <identifiersep> types . update ( vm <identifiersep> type ) \n \t2 log . info ( <string_literal> + vm <identifiersep> type . dump ( ) ) \n \t1 } else { \n <ect>
\t7 delete <identifiersep> one <identifiersep> off <identifiersep> jobs ( m <identifiersep> hostname , m <identifiersep> pid ) ; } } \n \t4 } finally { \n \t5 m <identifiersep> heartbeat <identifiersep> lock . unlock ( ) ; } \n \t3 } catch ( exception ex ) { \n <ect>
\t4 elastic <identifiersep> lb <identifiersep> vm <identifiersep> map <identifiersep> vo elb <identifiersep> vm <identifiersep> map = <identifier> <identifiersep> elb <identifiersep> vm <identifiersep> map <identifiersep> dao . find <identifiersep> one <identifiersep> by <identifiersep> ip ( ip <identifiersep> id ) ; \n \t4 if ( elb <identifiersep> vm <identifiersep> map != null ) { \n \t5 elb <identifiersep> vm = <identifier> <identifiersep> router <identifiersep> dao . find <identifiersep> by <identifiersep> id ( elb <identifiersep> vm <identifiersep> map . get <identifiersep> elb <identifiersep> vm <identifiersep> id ( ) ) ; } } \n \t3 if ( elb <identifiersep> vm == null ) { \n <ect>
\t2 int <identifier> = strategy <identifiersep> manager . get <identifiersep> ss <identifiersep> table <identifiersep> count <identifiersep> per <identifiersep> level ( ) [ <number_literal> ] ; \n \t2 if ( <identifier> == 0 || <identifier> == 0 ) \n \t2 { \n \t3 logger . error ( <string_literal> ) ; \n <ect>
\t2 template <identifiersep> info tmplt = prepare <identifiersep> iso ( iso <identifiersep> id , vm . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , vm . get <identifiersep> host <identifiersep> id ( ) , null ) ; \n \t2 string vm <identifiersep> name = vm . get <identifiersep> instance <identifiersep> name ( ) ; \n \t2 host <identifiersep> vo host = <identifier> <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm . get <identifiersep> host <identifiersep> id ( ) ) ; \n \t2 if ( host == null ) { \n <ect>
\t2 kerberos <identifiersep> component <identifiersep> descriptor new <identifiersep> value = new <identifiersep> service <identifiersep> components . get ( name ) ; \n \t2 log . debug ( <string_literal> , updated <identifiersep> service . get <identifiersep> name ( ) , name ) ; \n \t2 process <identifiersep> component ( old <identifiersep> value , new <identifiersep> value , user <identifiersep> value ) ; \n \t2 } else { \n <ect>
\t2 byte [ ] all <identifiersep> rows ; \n \t2 string debug <identifiersep> git <identifiersep> tag = <string_literal> ; \n \t2 cube <identifiersep> visit <identifiersep> <identifier> . cube <identifiersep> visit <identifiersep> response . error <identifiersep> info error <identifiersep> info = null ; \n \t2 string query <identifiersep> id = request . has <identifiersep> query <identifiersep> id ( ) ? request . get <identifiersep> query <identifiersep> id ( ) : <string_literal> ; \n <ect>
\t4 string session <identifiersep> id = session . get <identifiersep> id ( ) ; \n \t4 synchronized ( session <identifiersep> id . <identifier> ( ) ) { \n \t5 invocation . get <identifiersep> invocation <identifiersep> context ( ) . get <identifiersep> session ( ) . put ( attribute <identifiersep> name , locale ) ; } \n \t3 } else { \n <ect>
\t5 snapshot <identifiersep> data <identifiersep> store <identifiersep> vo dest <identifiersep> snapshot <identifiersep> store = snapshot <identifiersep> data <identifiersep> store <identifiersep> dao . find <identifiersep> by <identifiersep> store <identifiersep> snapshot ( data <identifiersep> store . get <identifiersep> role ( ) , data <identifiersep> store . get <identifiersep> id ( ) , obj <identifiersep> id ) ; \n \t5 if ( dest <identifiersep> snapshot <identifiersep> store != null ) { \n \t6 return snapshot <identifiersep> data <identifiersep> store <identifiersep> dao . remove ( dest <identifiersep> snapshot <identifiersep> store . get <identifiersep> id ( ) ) ; \n \t5 } else { \n <ect>
\t2 <comment> \n \t2 thread putter = new thread ( new put <identifiersep> thread ( count , id ) ) ; \n \t2 thread getter = new thread ( new get <identifiersep> server ( count , id ) ) ; \n \t2 generic <identifiersep> get <identifiersep> put ( putter , getter ) ; \n <ect>
\t5 <string_literal> + \n \t5 <string_literal> + addrs + ' ] ' ) ; \n \t3 throw <identifier> ; } \n <ect>
\t1 node <identifiersep> c = tree <identifiersep> cache . get <identifiersep> node ( fqn . from <identifiersep> relative <identifiersep> fqn ( node <identifiersep> b . get <identifiersep> fqn ( ) , c ) ) ; \n \t1 log . info ( <string_literal> + tree <identifiersep> cache ) ; \n \t1 log . info ( <string_literal> + node <identifiersep> c + <string_literal> + util . hex <identifiersep> id <identifiersep> hash <identifiersep> code ( node <identifiersep> c ) ) ; \n \t1 node x = tree <identifiersep> cache . get <identifiersep> root ( ) . get <identifiersep> child ( fqn . from <identifiersep> string ( <string_literal> ) ) ; \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 final string original <identifiersep> declaration = get <identifiersep> original <identifiersep> declaration ( matcher ) ; \n \t2 final string original <identifiersep> url = get <identifiersep> original <identifiersep> url ( matcher ) ; \n \t2 log . debug ( <string_literal> , original <identifiersep> declaration ) ; \n <ect>
\t5 <comment> \n \t5 try { \n \t6 in . close ( ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 line = reader . read <identifiersep> line ( ) ; \n \t3 try { \n \t4 props = sam <identifiersep> utils . parse <identifiersep> params ( line ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 string ticket <identifiersep> id = produce <identifiersep> ticket <identifiersep> identifier ( service , ticket <identifiersep> granting <identifiersep> ticket , credential <identifiersep> provided ) ; \n \t2 if ( this . cipher <identifiersep> executor != null ) { \n \t3 logger . debug ( <string_literal> , ticket <identifiersep> id ) ; \n \t3 ticket <identifiersep> id = this . cipher <identifiersep> executor . encode ( ticket <identifiersep> id ) ; \n <ect>
\t5 attributes . get <identifiersep> access <identifiersep> log ( ) . get <identifiersep> emit <identifiersep> interval ( ) ) ; } \n \t1 @ override \n \t1 protected void do <identifiersep> catch ( throwable e ) throws throwable { \n \t2 if ( e instanceof cancellation <identifiersep> exception ) { \n <ect>
\t4 try { \n \t5 log . debug ( <string_literal> ) ; \n \t5 thread . sleep ( <number_literal> ) ; } \n \t4 catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 try { \n \t1 return block <identifiersep> storage <identifiersep> util . decrypt <identifiersep> with <identifiersep> cloud ( token <identifiersep> cipher ) ; \n \t1 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n <ect>
\t2 samples . add <identifiersep> all ( samples <identifiersep> from <identifiersep> file ) ; \n \t2 logger . debug ( utils . join ( <string_literal> , command <identifiersep> line <identifiersep> unique <identifiersep> samples ) ) ; \n \t3 if ( ! command <identifiersep> line <identifiersep> unique <identifiersep> samples . is <identifiersep> empty ( ) ) { \n \t4 if ( allow <identifiersep> non <identifiersep> <identifier> <identifiersep> command <identifiersep> line <identifiersep> samples ) { \n <ect>
\t4 } else { <comment> \n \t5 oak <identifiersep> solr <identifiersep> configuration configuration = oak <identifiersep> solr <identifiersep> configuration <identifiersep> provider . get <identifiersep> configuration ( ) ; \n \t5 editor = get <identifiersep> editor ( configuration , solr <identifiersep> server <identifiersep> provider . get <identifiersep> indexing <identifiersep> solr <identifiersep> server ( ) , callback ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t3 } else if ( nested <identifiersep> <identifier> <identifiersep> supported . boolean <identifiersep> value ( ) ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> spec . get <identifiersep> name ( ) ) ; \n \t4 vm <identifiersep> config <identifiersep> spec . set <identifiersep> nested <identifiersep> <identifier> <identifiersep> enabled ( true ) ; \n \t3 } else { \n <ect>
\t2 log . warn ( <string_literal> ) ; \n \t2 } else if ( ex instanceof cancellation <identifiersep> exception ) { \n \t2 ; \n \t2 } else { \n <ect>
\t3 attempt <identifiersep> item <identifiersep> advance <identifiersep> final ( role . <identifier> , false ) ; \n \t3 context <identifiersep> reload ( ) ; \n \t2 } catch ( exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t2 index index = cluster <identifiersep> state . get <identifiersep> meta <identifiersep> data ( ) . index ( <string_literal> ) . get <identifiersep> index ( ) ; \n \t2 move <identifiersep> allocation <identifiersep> command command = new move <identifiersep> allocation <identifiersep> command ( index . get <identifiersep> name ( ) , 0 , <string_literal> , <string_literal> ) ; \n \t2 routing <identifiersep> allocation routing <identifiersep> allocation = new routing <identifiersep> allocation ( new allocation <identifiersep> <identifier> ( settings . empty , collections . empty <identifiersep> list ( ) ) , \n \t3 new routing <identifiersep> nodes ( cluster <identifiersep> state , false ) , cluster <identifiersep> state , cluster <identifiersep> info . empty , system . nano <identifiersep> time ( ) ) ; \n <ect>
\t4 synchronized ( lock ) { \n \t5 <comment> \n \t5 <comment> \n \t5 if ( ! checkpoint . is <identifiersep> <identifier> ( ) ) { \n <ect>
\t1 app <identifiersep> status <identifiersep> builder . set <identifiersep> <identifier> <identifiersep> instances ( llap <identifiersep> extra <identifiersep> instances . size ( ) ) ; \n \t1 if ( validated <identifiersep> instances . size ( ) >= app <identifiersep> status <identifiersep> builder . get <identifiersep> desired <identifiersep> instances ( ) ) { \n \t2 app <identifiersep> status <identifiersep> builder . set <identifiersep> state ( state . running <identifiersep> all ) ; \n \t2 if ( validated <identifiersep> instances . size ( ) > app <identifiersep> status <identifiersep> builder . get <identifiersep> desired <identifiersep> instances ( ) ) { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 string connection <identifiersep> key = uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ; \n \t2 store . add <identifiersep> web <identifiersep> socket ( connection <identifiersep> key , web <identifiersep> socket ) ; \n \t2 send <identifiersep> event <identifiersep> notification ( connection <identifiersep> key , websocket <identifiersep> constants . <identifier> <identifiersep> event <identifiersep> type ) ; \n <ect>
\t4 } catch ( framework <identifiersep> exception fex ) { \n \t5 logger . warn ( <string_literal> , fex . get <identifiersep> message ( ) ) ; } \n \t4 return ; } \n \t2 } else { \n <ect>
\t1 public shared <identifiersep> resource <identifiersep> dto execute ( final shared <identifiersep> resource <identifiersep> request in <identifiersep> request ) \n \t1 { \n \t2 shared <identifiersep> resource <identifiersep> dto dto = new shared <identifiersep> resource <identifiersep> dto ( ) ; \n \t2 dto . set <identifiersep> key ( in <identifiersep> request . get <identifiersep> unique <identifiersep> key ( ) ) ; \n <ect>
\t4 logger . info ( <string_literal> + skip <identifiersep> counter ) ; } \n \t3 return ; } \n \t2 context . get <identifiersep> counter ( batch <identifiersep> constants . mapreduce <identifiersep> counter <identifiersep> group <identifiersep> name , <string_literal> ) . increment ( 1l ) ; \n \t2 if ( handle <identifiersep> counter ++ % batch <identifiersep> constants . normal <identifiersep> record <identifiersep> log <identifiersep> threshold == 0 ) { \n <ect>
\t4 for ( event <identifiersep> handler < t > h : reverse <identifiersep> handler ) { \n \t5 try { \n \t6 h . rollback ( ) ; \n \t5 } catch ( exception ex ) { \n <ect>
\t5 assert ( annotation != null ) ; \n \t5 if ( match ( annotation . topic ( ) , subject ) ) { \n \t6 return method ; } } \n \t3 } else { \n <ect>
\t2 try { \n \t3 if ( instance . init ( ) ) { \n \t4 logger . info ( <string_literal> , pms . name ) ; \n \t3 } else { \n <ect>
\t1 public boolean do <identifiersep> with <identifiersep> connection ( ldap <identifiersep> connection connection ) throws ldap <identifiersep> exception { \n \t2 return connection . is <identifiersep> connected ( ) && connection . is <identifiersep> authenticated ( ) ; } \n \t1 } ) ; \n \t1 if ( ! is <identifiersep> connected ) { \n <ect>
\t9 project . get <identifiersep> columns ( ) , project . get <identifiersep> result <identifiersep> type ( ) ) ; } \n \t6 if ( plan . get <identifiersep> <identifier> ( node ) == null ) \n \t7 node = null ; \n \t6 else if ( plan . get <identifiersep> <identifier> ( node ) . size ( ) != 1 ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t1 byte [ ] bytes ; \n \t1 try { \n \t2 bytes = serialize <identifiersep> to <identifiersep> avro ( avro <identifiersep> schema , docs ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public void visit <identifiersep> spark <identifiersep> op ( spark <identifiersep> operator spark <identifiersep> operator ) throws visitor <identifiersep> exception { \n \t2 list < po <identifiersep> local <identifiersep> <identifier> > <identifier> = plan <identifiersep> helper . get <identifiersep> physical <identifiersep> operators ( spark <identifiersep> operator . physical <identifiersep> plan , po <identifiersep> local <identifiersep> <identifier> . class ) ; \n \t2 if ( <identifier> . is <identifiersep> empty ( ) ) { \n <ect>
<comment> \n \t1 public message get ( string id ) { \n \t2 place <identifiersep> holder holder = table . remove ( id ) ; \n <ect>
\t4 } catch ( final agent <identifiersep> unavailable <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t5 return null ; \n \t4 } catch ( final operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t2 do <identifiersep> in <identifiersep> background ( context . get <identifiersep> m <identifiersep> bean <identifiersep> server <identifiersep> connection ( ) ) ; \n \t2 return null ; } \n \t1 protected void do <identifiersep> in <identifiersep> background ( m <identifiersep> bean <identifiersep> server <identifiersep> connection conn ) { \n \t2 if ( conn == null ) { \n <ect>
\t3 logger . warn ( <string_literal> , <identifier> . get <identifiersep> message ( ) , <identifier> ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , e ) ; } \n \t2 while ( ! connected && retries <identifiersep> remaining > 0 ) { \n <ect>
\t2 <comment> \n \t2 if ( ! queue . offer ( end <identifiersep> of <identifiersep> events ) ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t2 } else { \n <ect>
\t1 public static void main ( string [ ] args ) { \n \t2 <comment> \n \t2 <comment> \n \t2 locale . set <identifiersep> default ( locale . english ) ; \n <ect>
\t7 write . data = buffer ; } } } \n \t3 while ( true ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n <ect>
\t2 assert <identifier> <identifiersep> def != null : <string_literal> ; \n \t2 try { \n \t3 <comment> \n \t3 s = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( new file <identifiersep> input <identifiersep> stream ( <identifier> <identifiersep> file ) ) ) ; \n <ect>
\t2 assert . assert <identifiersep> equals ( true , response . get <identifiersep> column <identifiersep> by <identifiersep> name ( <string_literal> ) . has <identifiersep> value ( ) ) ; \n \t2 assert . assert <identifiersep> equals ( false , response . get <identifiersep> column <identifiersep> by <identifiersep> name ( <string_literal> ) . has <identifiersep> value ( ) ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> delete ( ) throws exception { \n <ect>
\t5 solr <identifiersep> document doc = ( solr <identifiersep> document ) iter . next ( ) ; \n \t5 string handle = ( string ) doc . get <identifiersep> field <identifiersep> value ( handle <identifiersep> field ) ; \n \t5 d <identifiersep> space <identifiersep> object o = handle <identifiersep> service . resolve <identifiersep> to <identifiersep> object ( context , handle ) ; \n \t5 if ( o == null ) { \n <ect>
\t2 check <identifiersep> usage <identifiersep> count ( create <identifiersep> <identifier> , grid <identifiersep> user <identifiersep> external <identifiersep> resource2 . class , <number_literal> ) ; \n \t2 check <identifiersep> usage <identifiersep> count ( deploy <identifiersep> <identifier> , grid <identifiersep> user <identifiersep> external <identifiersep> resource1 . class , <number_literal> ) ; \n \t2 check <identifiersep> usage <identifiersep> count ( deploy <identifiersep> <identifier> , grid <identifiersep> user <identifiersep> external <identifiersep> resource2 . class , <number_literal> ) ; \n \t2 log . info ( <string_literal> + rsrc1 ) ; \n <ect>
\t3 log . debug ( <string_literal> , m . group ( <number_literal> ) ) ; \n \t3 try { \n \t4 wait <identifiersep> time = integer . parse <identifiersep> int ( m . group ( 1 ) ) * <number_literal> ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 disconnect <identifiersep> and <identifiersep> clean <identifiersep> connection ( ) ; \n <ect>
\t4 } catch ( exception e ) { \n \t5 fail ( <string_literal> + e ) ; } } \n \t2 } ) ; \n \t2 consumer <identifiersep> thread . start ( ) ; \n <ect>
\t2 try { \n \t3 cloudstack <identifiersep> plugin plug = new cloudstack <identifiersep> plugin ( c ) ; \n \t3 integer vnc <identifiersep> port = integer . value <identifiersep> of ( plug . get <identifiersep> vnc <identifiersep> port ( vm <identifiersep> name ) ) ; \n \t3 if ( vnc <identifiersep> port == 0 ) { \n <ect>
\t1 while ( true ) { \n \t1 try { \n \t2 do <identifiersep> one <identifiersep> cleanup <identifiersep> round ( ) ; \n \t1 } catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t3 connection <identifiersep> reader = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( \n \t4 connection . get <identifiersep> input <identifiersep> stream ( ) ) ) ; \n \t3 if ( ! connection <identifiersep> reader . read <identifiersep> line ( ) . contains ( <string_literal> ) ) \n \t3 { \n <ect>
\t5 } catch ( final exception e ) { \n \t6 final string msg = <string_literal> + vm <identifiersep> name + <string_literal> + e . get <identifiersep> message ( ) ; \n \t6 s <identifiersep> logger . warn ( msg , e ) ; \n \t5 } finally { \n <ect>
\t3 grid <identifiersep> service cp = m . unmarshal ( bytes , svc . get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) ) ; \n \t3 ctx . resource ( ) . inject ( cp ) ; \n \t3 return cp ; } \n \t2 catch ( grid <identifiersep> exception e ) { \n <ect>
\t4 } else if ( config <identifiersep> update <identifiersep> type . equals ( option ) ) { \n \t5 connection . set <identifiersep> <identifier> ( value . equals ( config <identifiersep> update <identifiersep> type <identifiersep> <identifier> ) ) ; \n \t5 connection . set <identifiersep> http ( value . equals ( config <identifiersep> update <identifiersep> type <identifiersep> http ) ) ; \n \t5 if ( ! value . equals ( config <identifiersep> update <identifiersep> type <identifiersep> <identifier> ) && ! value . equals ( config <identifiersep> update <identifiersep> type <identifiersep> http ) ) { \n <ect>
\t4 string [ ] sep <identifiersep> name <identifiersep> list = h <identifiersep> table . split ( <string_literal> ) ; \n \t4 logger . info ( sep <identifiersep> name <identifiersep> list [ 0 ] + <string_literal> + sep <identifiersep> name <identifiersep> list [ 1 ] ) ; } \n \t3 logger . info ( <string_literal> ) ; } } \n \t1 public void print <identifiersep> issue <identifiersep> existing <identifiersep> h <identifiersep> tables ( ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return null ; } \n \t2 final rsa <identifiersep> json <identifiersep> web <identifiersep> key key = ( rsa <identifiersep> json <identifiersep> web <identifiersep> key ) jwks . get <identifiersep> json <identifiersep> web <identifiersep> keys ( ) . get ( 0 ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( key . get <identifiersep> algorithm ( ) ) ) { \n <ect>
<comment> \n \t1 protected boolean locate <identifiersep> matching <identifiersep> http <identifiersep> request ( final authentication authentication , final http <identifiersep> servlet <identifiersep> request request ) { \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( bypass <identifiersep> properties . get <identifiersep> http <identifiersep> request <identifiersep> remote <identifiersep> address ( ) ) ) { \n \t3 if ( http <identifiersep> request <identifiersep> remote <identifiersep> address <identifiersep> pattern . matcher ( request . get <identifiersep> remote <identifiersep> addr ( ) ) . find ( ) ) { \n <ect>
\t5 up ( msg ) ; } \n \t3 catch ( socket <identifiersep> exception socket <identifiersep> ex ) { \n \t4 break ; } \n \t3 catch ( throwable ex ) { \n <ect>
\t1 catch ( java . io . io <identifiersep> exception e ) { \n \t2 log . debug ( <string_literal> , e ) ; \n \t1 } <comment> \n \t1 catch ( java . lang . class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t6 printed <identifiersep> <identifier> = true ; } \n \t5 if ( scene . v ( ) . get <identifiersep> reachable <identifiersep> methods ( ) . contains ( tn . method ) ) \n \t6 logger . debug ( <string_literal> + tn . name + <string_literal> <string_literal> \\ <string_literal> <identifier> ( <number_literal> ) \\ <string_literal> ) ; \n \t5 else \n <ect>
\t5 config <identifiersep> stream = config <identifiersep> url . open <identifiersep> stream ( ) ; } } \n \t3 if ( config <identifiersep> stream != null ) { \n \t4 return new tika <identifiersep> config <identifiersep> holder ( new tika <identifiersep> config ( config <identifiersep> stream ) , config <identifiersep> source ) ; } \n \t2 } catch ( tika <identifiersep> exception | io <identifiersep> exception | sax <identifiersep> exception e ) { \n <ect>
\t2 stores . add ( node3 ) ; \n \t2 async <identifiersep> start ( node2 ) ; \n \t2 async <identifiersep> start ( node3 ) ; \n \t2 master <identifiersep> start . await ( ) ; \n <ect>
\t2 } catch ( socket <identifiersep> exception e ) { \n \t3 <comment> \n \t3 log . debug ( <string_literal> , e ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t1 if ( local <identifiersep> read <identifiersep> only ) { \n \t2 <comment> \n \t2 connection . set <identifiersep> read <identifiersep> only ( false ) ; } \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public boolean handle <identifiersep> request ( z <identifiersep> wave <identifiersep> controller z <identifiersep> controller , serial <identifiersep> message last <identifiersep> sent <identifiersep> message , \n \t3 serial <identifiersep> message incoming <identifiersep> message ) { \n \t2 int node <identifiersep> id = last <identifiersep> sent <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( 0 ) ; \n <ect>
\t1 private json <identifiersep> array read <identifiersep> optional <identifiersep> array ( json <identifiersep> object json , string key ) { \n \t2 try { \n \t3 return json . get <identifiersep> json <identifiersep> array ( key ) ; \n \t2 } catch ( json <identifiersep> exception e ) { \n <ect>
\t3 bundle <identifiersep> context . register <identifiersep> service ( \n \t4 custom <identifiersep> resolver . class . get <identifiersep> name ( ) , \n \t4 new configurable <identifiersep> <identifier> <identifiersep> resolver ( new extended <identifiersep> resolver ( ) ) , \n \t4 null ) ; \n <ect>
\t1 } catch ( execution <identifiersep> exception e ) { \n \t2 log . debug ( <string_literal> + object <identifiersep> uuid , e ) ; \n \t2 throw e ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 java . add ( get <identifiersep> main <identifiersep> type <identifiersep> name ( ) ) ; \n \t2 java . add <identifiersep> all ( <identifier> ) ; \n \t2 if ( timeout != 0 ) \n \t3 java . set <identifiersep> timeout ( timeout + <number_literal> , time <identifiersep> unit . milliseconds ) ; \n <ect>
\t4 session <identifiersep> factory <identifiersep> service <identifiersep> registry service <identifiersep> registry ) { \n \t3 boolean is <identifiersep> security <identifiersep> enabled = properties \n \t5 . contains <identifiersep> key ( available <identifiersep> settings . <identifier> <identifiersep> enabled ) ; \n \t3 if ( ! is <identifiersep> security <identifiersep> enabled ) { \n <ect>
public void tear <identifiersep> down ( ) { \n \t1 try { \n \t1 drop <identifiersep> table <identifiersep> if <identifiersep> exists ( get <identifiersep> table <identifiersep> name ( ) ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 self . admin <identifiersep> server . set <identifiersep> zoo <identifiersep> keeper <identifiersep> server ( null ) ; \n \t2 try { \n \t3 ss . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 <identifier> . add <identifiersep> context <identifiersep> <identifier> ( valve ) ; } } \n \t1 private void configure <identifiersep> extended <identifiersep> access <identifiersep> log <identifiersep> valve ( final <identifier> <identifiersep> embedded <identifiersep> servlet <identifiersep> container <identifiersep> factory <identifier> ) { \n \t2 final cas <identifiersep> embedded <identifiersep> apache <identifiersep> <identifier> <identifiersep> extended <identifiersep> access <identifiersep> log <identifiersep> properties ext = cas <identifiersep> properties . get <identifiersep> server ( ) . get <identifiersep> ext <identifiersep> access <identifiersep> log ( ) ; \n \t2 if ( ext . is <identifiersep> enabled ( ) && string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( ext . get <identifiersep> pattern ( ) ) ) { \n <ect>
\t1 @ test ( groups = <string_literal> ) \n \t1 public void test <identifiersep> <identifier> ( ) { \n \t2 event <identifiersep> type event <identifiersep> type = create <identifiersep> event <identifiersep> type ( ) ; \n \t2 assert . assert <identifiersep> equals ( event <identifiersep> type . to <identifiersep> json ( ) . length ( ) == 0 , false ) ; \n <ect>
\t3 for ( nic <identifiersep> profile nic : profile . get <identifiersep> nics ( ) ) { \n \t4 if ( nic . get <identifiersep> traffic <identifiersep> type ( ) == traffic <identifiersep> type . control && nic . get <identifiersep> <identifier> ( ) != null ) { \n \t5 control <identifiersep> nic = nic ; } } } \n \t2 if ( control <identifiersep> nic == null ) { \n <ect>
\t2 } else { \n \t3 <identifier> <identifiersep> reader = org . apache . avro . specific . specific <identifiersep> record <identifiersep> base . class . is <identifiersep> assignable <identifiersep> from ( avro <identifiersep> value <identifiersep> type ) \n \t4 ? new specific <identifiersep> <identifier> <identifiersep> reader < e > ( avro <identifiersep> value <identifiersep> type ) : new <identifier> <identifiersep> <identifier> <identifiersep> reader < e > ( avro <identifiersep> value <identifiersep> type ) ; } \n <ect>
\t1 if ( ! matched <identifiersep> to <identifiersep> request ) { \n \t2 boolean add <identifiersep> to <identifiersep> available <identifiersep> list = true ; \n \t2 for ( host <identifiersep> impl registered : available <identifiersep> hosts ) { \n \t2 if ( registered . get <identifiersep> host <identifiersep> id ( ) == host . get <identifiersep> host <identifiersep> id ( ) ) { \n <ect>
\t3 <identifier> <identifiersep> props . set <identifiersep> property ( format <identifiersep> extension + <string_literal> , long . to <identifiersep> string ( info . virtual <identifiersep> size ) ) ; } \n \t2 try ( file <identifiersep> output <identifiersep> stream <identifier> = new file <identifiersep> output <identifiersep> stream ( <identifier> <identifiersep> file ) ; ) { \n \t3 <identifier> <identifiersep> props . store ( <identifier> , <string_literal> ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public void run <identifiersep> job ( async <identifiersep> job job ) { \n \t2 try { \n \t3 list < async <identifiersep> job <identifiersep> join <identifiersep> map <identifiersep> vo > join <identifiersep> records = <identifier> <identifiersep> join <identifiersep> map <identifiersep> dao . list <identifiersep> join <identifiersep> records ( job . get <identifiersep> id ( ) ) ; \n \t3 if ( join <identifiersep> records . size ( ) != 1 ) { \n <ect>
\t6 <identifier> . dispatch ( ) ; \n \t5 } catch ( interrupted <identifiersep> exception x ) { \n \t6 log . error ( <string_literal> , x ) ; \n \t5 } catch ( illegal <identifiersep> state <identifiersep> exception x ) { \n <ect>
public boolean is <identifiersep> <identifier> <identifiersep> via <identifiersep> multicast <identifiersep> dns ( ) { \n \t1 return <identifier> <identifiersep> via <identifiersep> multicast <identifiersep> dns ; } \n void fire <identifiersep> connector ( ) { \n \t1 if ( connector == null ) { \n <ect>
\t6 repository . login ( credentials ) , context ) ) ; \n \t4 jobs . add ( thread ) ; \n \t4 thread . start ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 catch ( rejected <identifiersep> execution <identifiersep> exception <identifier> ) { \n \t5 wrapper . remove <identifiersep> from <identifiersep> unique <identifiersep> <identifier> ( ) ; \n \t5 throw <identifier> ; } } } \n \t2 else { \n <ect>
\t4 <identifier> <identifiersep> log . debug ( <string_literal> ) ; \n \t4 <comment> \n \t3 } catch ( exception e ) { \n \t4 fail ( e . get <identifiersep> message ( ) ) ; \n <ect>
\t6 if ( vm == null ) { \n \t7 s <identifiersep> logger . info ( <string_literal> + work . get <identifiersep> instance <identifiersep> id ( ) + <string_literal> ) ; \n \t7 locked = true ; \n \t7 return ; } \n <ect>
\t6 obj . put ( json <identifiersep> keys . update <identifiersep> type . name ( ) , <string_literal> ) ; \n \t6 obj . put ( json <identifiersep> keys . properties . name ( ) , props <identifiersep> json ) ; \n \t6 pw . println ( obj . to <identifiersep> string ( ) ) ; \n \t5 } catch ( json <identifiersep> exception e ) { \n <ect>
\t7 = document <identifiersep> access <identifiersep> bridge . get <identifiersep> property ( user , class <identifiersep> reference , <string_literal> ) ; \n \t5 if ( is <identifiersep> default <identifiersep> interval ( user <identifiersep> interval ) || is <identifiersep> same <identifiersep> interval ( user <identifiersep> interval ) ) { \n \t6 next <identifiersep> user = user ; } } } \n \t2 } catch ( exception e ) { \n <ect>
\t3 <identifier> <identifiersep> doc <identifiersep> response = doc <identifiersep> builder . parse ( new input <identifiersep> source ( new string <identifiersep> reader ( <identifier> <identifiersep> xml <identifiersep> response ) ) ) ; \n \t3 if ( <identifier> <identifiersep> doc <identifiersep> response != null ) { \n \t4 parse ( <identifier> <identifiersep> doc <identifiersep> response . get <identifiersep> document <identifiersep> element ( ) ) ; } \n \t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n <ect>
\t1 } catch ( io <identifiersep> exception | runtime <identifiersep> exception e ) { \n \t1 try { \n \t2 hbase <identifiersep> connection . close ( ) ; \n \t1 } catch ( io <identifiersep> exception io <identifiersep> exception ) { \n <ect>
\t3 <identifier> . add <identifiersep> additional <identifiersep> <identifier> <identifiersep> connectors ( connector ) ; } } \n \t1 private void configure <identifiersep> http <identifiersep> proxy ( final <identifier> <identifiersep> embedded <identifiersep> servlet <identifiersep> container <identifiersep> factory <identifier> ) { \n \t2 final cas <identifiersep> embedded <identifiersep> apache <identifiersep> <identifier> <identifiersep> http <identifiersep> proxy <identifiersep> properties proxy = cas <identifiersep> properties . get <identifiersep> server ( ) . get <identifiersep> http <identifiersep> proxy ( ) ; \n \t2 if ( proxy . is <identifiersep> enabled ( ) ) { \n <ect>
<comment> \n \t1 @ deprecated \n \t1 public long get <identifiersep> idle <identifiersep> max <identifiersep> age ( ) { \n <ect>
\t1 if ( should <identifiersep> run <identifiersep> next <identifiersep> phase ( parsed <identifiersep> args , current <identifiersep> phase ) && from <identifiersep> <identifier> != null && msg <identifiersep> id <identifiersep> <identifier> != null ) { \n \t1 <comment> \n \t1 <comment> \n \t1 <comment> \n <ect>
\t3 <comment> \n \t3 http <identifiersep> client client = service <identifiersep> context . get ( service . query <identifiersep> client ) ; \n \t3 if ( client != null ) { \n <ect>
\t2 { \n \t3 logger . error ( <string_literal> , e ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> method <identifiersep> error e ) \n \t2 { \n <ect>
\t3 if ( http <identifiersep> request <identifiersep> remote <identifiersep> address <identifiersep> pattern . matcher ( request . get <identifiersep> remote <identifiersep> addr ( ) ) . find ( ) ) { \n \t4 logger . debug ( <string_literal> , bypass <identifiersep> properties . get <identifiersep> http <identifiersep> request <identifiersep> remote <identifiersep> address ( ) , request . get <identifiersep> remote <identifiersep> addr ( ) ) ; \n \t4 return true ; } \n \t3 if ( http <identifiersep> request <identifiersep> remote <identifiersep> address <identifiersep> pattern . matcher ( request . get <identifiersep> remote <identifiersep> host ( ) ) . find ( ) ) { \n <ect>
\t5 logger . debug ( <string_literal> , count , command ) ; \n \t5 retry = false ; \n \t4 } else { \n \t5 <comment> \n <ect>
\t1 @ inject \n \t1 private logger log ; \n \t1 @ override \n \t1 public object around <identifiersep> read <identifiersep> from ( reader <identifiersep> interceptor <identifiersep> context context ) throws io <identifiersep> exception , web <identifiersep> application <identifiersep> exception { \n <ect>
\t4 logger . error ( <string_literal> ) \n \t4 node . start <identifiersep> log . each <identifiersep> line { line - > logger . error ( <string_literal> ) } } \n \t3 if ( node . pid <identifiersep> file . exists ( ) && node . failed <identifiersep> marker . exists ( ) == false && \n \t4 ( node . http <identifiersep> ports <identifiersep> file . exists ( ) == false || node . transport <identifiersep> ports <identifiersep> file . exists ( ) == false ) ) { \n <ect>
\t2 if ( principal == null ) { \n \t3 logger . warn ( <string_literal> , handler . get <identifiersep> name ( ) ) ; \n \t2 } else { \n \t3 builder . set <identifiersep> principal ( principal ) ; } \n <ect>
\t2 s = <string_literal> + txnid ; \n \t2 log . debug ( <string_literal> + s + <string_literal> ) ; \n \t2 mod <identifiersep> count = stmt . execute <identifiersep> update ( s ) ; \n \t2 s = <string_literal> + txnid ; \n <ect>
\t2 if ( ! ip <identifiersep> range <identifiersep> config . valid <identifiersep> or <identifiersep> blank <identifiersep> ip ( end <identifiersep> ip ) ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + end <identifiersep> ip + <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( ! ip <identifiersep> range <identifiersep> config . valid <identifiersep> ip <identifiersep> range ( start <identifiersep> ip , end <identifiersep> ip ) ) { \n <ect>
\t6 new type <identifiersep> reference < collection < test <identifiersep> result <identifiersep> summary > > ( ) { } ) ; \n \t4 for ( test <identifiersep> result <identifiersep> summary summary : <identifier> ) { \n \t5 results . put ( summary . get <identifiersep> name ( ) , summary ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 ) . get ( ) ; \n \t2 assert <identifiersep> that ( put <identifiersep> repository <identifiersep> response . is <identifiersep> acknowledged ( ) , equal <identifiersep> to ( true ) ) ; \n \t2 <comment> \n \t2 string blocked <identifiersep> node = block <identifiersep> node <identifiersep> with <identifiersep> index ( <string_literal> , <string_literal> ) ; \n <ect>
\t4 s <identifiersep> logger . warn ( <string_literal> + vm + <string_literal> + state . running + <string_literal> ) ; \n \t4 return false ; } } \n \t2 try { \n \t3 <identifier> <identifiersep> network <identifiersep> mgr . release ( profile , force ) ; \n <ect>
\t1 { \n \t2 try { \n \t3 return get <identifiersep> activity <identifiersep> stream ( ) . search <identifiersep> <identifier> <identifiersep> pages ( optional <identifiersep> where <identifiersep> clause , max <identifiersep> items , start <identifiersep> at , this . context ) ; \n \t2 } catch ( activity <identifiersep> stream <identifiersep> exception ex ) { \n <ect>
\t6 . start <identifiersep> object ( <string_literal> ) . field ( <string_literal> , <string_literal> ) . end <identifiersep> object ( ) \n \t6 . end <identifiersep> object ( ) . end <identifiersep> object ( ) . end <identifiersep> object ( ) ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> that ( ensure <identifiersep> green ( ) , equal <identifiersep> to ( cluster <identifiersep> health <identifiersep> status . green ) ) ; \n <ect>
\t3 release <identifiersep> job <identifiersep> lock ( ) ; } } \n \t1 private response <identifier> <identifiersep> single <identifiersep> job ( string job <identifiersep> uuid , string user , string token , string sudo ) { \n \t2 job job = get <identifiersep> job ( job <identifiersep> uuid ) ; \n \t2 if ( job == null ) { \n <ect>
\t3 if ( <identifier> . is <identifiersep> empty ( ) ) { \n \t4 log . warn ( <string_literal> , job ) ; } \n \t3 i <identifiersep> job <identifier> = get <identifiersep> job ( job ) ; \n \t3 if ( <identifier> == null ) { \n <ect>
\t3 logger . error ( <string_literal> ) ; \n \t3 return error ( ) ; } \n \t2 final string username = password <identifiersep> management <identifiersep> service . parse <identifiersep> token ( token ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( username ) ) { \n <ect>
\t3 message <identifiersep> digest digest = message <identifiersep> digest . get <identifiersep> instance ( <string_literal> ) ; \n \t3 byte [ ] hash = digest . digest ( mac <identifiersep> address ) ; \n \t3 user <identifiersep> id = base64 . get <identifiersep> encoder ( ) . without <identifiersep> padding ( ) . encode <identifiersep> to <identifiersep> string ( hash ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 transaction txn = ebean . current <identifiersep> transaction ( ) ; \n \t1 if ( txn == null ) { \n \t1 logger . error ( <string_literal> ) ; \n \t1 } else { \n <ect>
\t2 update <identifiersep> task <identifiersep> cleanup <identifiersep> timeout ( download <identifiersep> <identifier> ) ; } \n \t1 public void remove <identifiersep> <identifier> <identifiersep> topology ( map < string , string > topology <identifiersep> codes , list < string > downloaded <identifiersep> topology <identifiersep> ids ) { \n \t2 for ( string topology <identifiersep> id : downloaded <identifiersep> topology <identifiersep> ids ) { \n \t3 if ( ! topology <identifiersep> codes . contains <identifiersep> key ( topology <identifiersep> id ) ) { \n <ect>
\t2 if ( ! eq ) \n \t3 throw new <identifier> <identifiersep> message <identifiersep> exception ( <string_literal> + size + <string_literal> + get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t2 <comment> \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 list < data <identifiersep> tree <identifiersep> node > list = process <identifiersep> path ( path , 0 ) ; \n \t2 if ( ( debug > 0 ) && ( ( list == null ) || list . is <identifiersep> empty ( ) ) ) { \n \t3 log . warn ( <string_literal> , list ) ; \n \t3 log . warn ( <string_literal> , less <identifiersep> strings . join ( path , <string_literal> ) ) ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 <identifier> ( <identifier> , <number_literal> , <number_literal> * <number_literal> , 1 ) ; \n \t4 if ( ! <identifier> <identifiersep> is <identifiersep> running ) \n \t5 return ; } \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 final basic <identifiersep> auth <identifiersep> extractor extractor = new basic <identifiersep> auth <identifiersep> extractor ( ) ; \n \t3 final web <identifiersep> context web <identifiersep> context = pac4j <identifiersep> utils . get <identifiersep> pac4j <identifiersep> <identifier> <identifiersep> context ( request , response ) ; \n \t3 final username <identifiersep> password <identifiersep> credentials credentials = extractor . extract ( web <identifiersep> context ) ; \n \t3 if ( credentials != null ) { \n <ect>
\t3 } else { \n \t4 break ; <comment> \n \t2 <comment> \n \t2 if ( get <identifiersep> system <identifiersep> avail <identifiersep> mb ( ) < alert <identifiersep> mb ) { \n <ect>
\t3 chat . add <identifiersep> message <identifiersep> listener ( this ) ; \n \t2 } else { \n \t3 try { \n \t4 chat . send <identifiersep> message ( <string_literal> ) ; \n <ect>
\t3 if ( ce instanceof controller <identifiersep> error <identifiersep> event ) \n \t4 logger . warn ( <string_literal> + ce ) ; \n \t3 else \n <ect>
\t4 if ( scope . exec <identifiersep> runtime . is <identifiersep> execution <identifiersep> aborted ( ) ) { \n \t5 throw new request <identifiersep> failed <identifiersep> exception ( <string_literal> ) ; } \n \t4 final http <identifiersep> entity request <identifiersep> entity = request . get <identifiersep> entity ( ) ; \n \t4 if ( request <identifiersep> entity != null && ! request <identifiersep> entity . is <identifiersep> <identifier> ( ) ) { \n <ect>
\t1 } catch ( keeper <identifiersep> exception . no <identifiersep> node <identifiersep> exception <identifier> ) { \n \t1 <comment> \n \t1 <comment> \n \t1 <comment> \n <ect>
\t5 custom <identifiersep> batch = j <identifiersep> storm <identifiersep> utils . mk <identifiersep> list ( ) ; \n \t5 ret . put ( out , custom <identifiersep> batch ) ; } \n \t4 custom <identifiersep> batch . add ( msg ) ; } \n \t2 } else { \n <ect>
\t4 continue ; } \n \t3 converter <identifiersep> handler . receive <identifiersep> command ( provider , item <identifiersep> name , command ) ; \n \t3 handled = true ; } \n \t2 if ( ! handled ) { \n <ect>
\t1 <comment> \n \t1 string name = mapping . get <identifiersep> name ( ) ; \n \t1 form <identifiersep> bean <identifiersep> config config = module <identifiersep> config . find <identifiersep> form <identifiersep> bean <identifiersep> config ( name ) ; \n \t1 if ( config == null ) { \n <ect>
\t3 new network <identifiersep> disruption . network <identifiersep> disconnect ( ) ) ; \n \t2 internal <identifiersep> cluster ( ) . set <identifiersep> disruption <identifiersep> scheme ( partition ) ; \n \t2 final count <identifiersep> down <identifiersep> latch latch = new count <identifiersep> down <identifiersep> latch ( 1 ) ; \n \t2 final atomic <identifiersep> reference < exception > failure = new atomic <identifiersep> reference < > ( ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bundle <identifiersep> context ) throws exception { \n <ect>
\t3 configurer . configure <identifiersep> http <identifiersep> client ( client <identifiersep> builder ) ; } \n \t2 if ( is <identifiersep> bridge <identifiersep> endpoint ( ) ) { \n \t3 <comment> \n \t3 client <identifiersep> builder . set <identifiersep> default <identifiersep> cookie <identifiersep> store ( new noop <identifiersep> cookie <identifiersep> store ( ) ) ; } \n <ect>
\t2 list < path > paths = new array <identifiersep> list < > ( ) ; \n \t2 try ( directory <identifiersep> stream < path > stream = files . new <identifiersep> directory <identifiersep> stream ( fuseki <identifiersep> system . dir <identifiersep> backups , filter <identifiersep> visible <identifiersep> files ) ) { \n \t3 stream . for <identifiersep> each ( paths : : add ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t6 log . info ( <string_literal> + rsrc5 ) ; \n \t6 log . info ( <string_literal> + rsrc6 ) ; \n \t6 log . info ( <string_literal> + rsrc7 ) ; \n \t6 log . info ( <string_literal> + rsrc8 ) ; \n <ect>
\t5 } catch ( no <identifiersep> transition <identifiersep> exception e ) { \n \t6 s <identifiersep> logger . warn ( <string_literal> + vm ) ; } \n \t5 return false ; \n \t4 } else { \n <ect>
\t6 async <identifiersep> call <identifiersep> future < template <identifiersep> api <identifiersep> result > data <identifiersep> disk <identifiersep> copy <identifiersep> future = <identifier> <identifiersep> tmplt <identifiersep> <identifier> . copy <identifiersep> template ( src <identifiersep> data <identifiersep> disk <identifiersep> template , dst <identifiersep> sec <identifiersep> store ) ; \n \t6 try { \n \t7 template <identifiersep> api <identifiersep> result data <identifiersep> disk <identifiersep> copy <identifiersep> result = data <identifiersep> disk <identifiersep> copy <identifiersep> future . get ( ) ; \n \t7 if ( data <identifiersep> disk <identifiersep> copy <identifiersep> result . is <identifiersep> failed ( ) ) { \n <ect>
\t2 } else { \n \t4 s <identifiersep> logger . debug ( <string_literal> + username + <string_literal> + domain <identifiersep> id ) ; } \n \t3 if ( user <identifiersep> account == null ) { \n <ect>
\t3 list < snapshot <identifiersep> vo > snapshots = list <identifiersep> <identifier> <identifiersep> volume ( volume <identifiersep> id ) ; \n \t3 for ( snapshot <identifiersep> vo snapshot : snapshots ) { \n \t4 snapshot <identifiersep> strategy snapshot <identifiersep> strategy = <identifier> <identifiersep> storage <identifiersep> strategy <identifiersep> factory . get <identifiersep> snapshot <identifiersep> strategy ( snapshot , snapshot <identifiersep> operation . delete ) ; \n \t4 if ( snapshot <identifiersep> strategy == null ) { \n <ect>
\t3 web <identifiersep> utils . put <identifiersep> service ( context , service ) ; \n \t3 if ( registered <identifiersep> service != null ) { \n \t4 final uri url = registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . get <identifiersep> unauthorized <identifiersep> redirect <identifiersep> url ( ) ; \n \t4 if ( url != null ) { \n <ect>
\t3 <identifier> < tuple2 < integer , string > > merger = new <identifier> <identifiersep> sort <identifiersep> merger < > ( this . memory <identifiersep> manager , this . io <identifiersep> manager , \n \t5 source , this . parent <identifiersep> task , this . <identifier> <identifiersep> record <identifiersep> serializer , this . <identifier> <identifiersep> record <identifiersep> comparator , \n \t5 ( double ) <number_literal> / <number_literal> , <number_literal> , <number_literal> , 0 . <identifier> , true <comment> , false ) ; \n \t3 <comment> \n <ect>
\t1 <identifier> <identifiersep> service . set <identifiersep> doc ( mock <identifiersep> document ) ; \n \t1 assert <identifiersep> not <identifiersep> null ( <identifier> <identifiersep> service . get <identifiersep> doc ( ) ) ; } \n @ test \n public void test <identifiersep> object <identifiersep> parent ( ) { \n <ect>
\t3 attribute . set <identifiersep> friendly <identifiersep> name ( e . get <identifiersep> key ( ) ) ; } \n \t2 add <identifiersep> attribute <identifiersep> values <identifiersep> to <identifiersep> <identifier> ( e . get <identifiersep> key ( ) , e . get <identifiersep> value ( ) , attribute . get <identifiersep> attribute <identifiersep> values ( ) ) ; \n \t2 if ( ! configured <identifiersep> name <identifiersep> formats . is <identifiersep> empty ( ) && configured <identifiersep> name <identifiersep> formats . contains <identifiersep> key ( attribute . get <identifiersep> name ( ) ) ) { \n \t3 final string name <identifiersep> format = configured <identifiersep> name <identifiersep> formats . get ( attribute . get <identifiersep> name ( ) ) ; \n <ect>
\t1 load <identifiersep> <identifier> <identifiersep> <identifier> ( <string_literal> ) \n \t1 load <identifiersep> <identifier> <identifiersep> <identifier> ( <string_literal> ) \n \t1 } catch { \n \t1 case e : throwable = > { \n <ect>
\t2 final view <identifiersep> entity view <identifiersep> definition = new view <identifiersep> entity ( view <identifiersep> config , configuration , extracted <identifiersep> archive <identifiersep> dir <identifiersep> path ) ; \n \t2 add <identifiersep> definition ( view <identifiersep> definition ) ; \n \t2 read <identifiersep> view <identifiersep> archive ( view <identifiersep> definition , archive <identifiersep> file , extracted <identifiersep> archive <identifiersep> dir <identifiersep> file , ambari <identifiersep> meta <identifiersep> info <identifiersep> provider . get ( ) . get <identifiersep> server <identifiersep> version ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 string alerts <identifiersep> enabled <identifiersep> string = null ; \n \t2 try { \n \t3 alerts <identifiersep> enabled <identifiersep> string = spawn <identifiersep> data <identifiersep> store . get ( spawn <identifiersep> common <identifiersep> alert <identifiersep> path ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 try { \n \t1 statement stmt = conn . create <identifiersep> statement ( ) ; \n \t1 stmt . execute ( get <identifiersep> drop <identifiersep> table <identifiersep> statement ( get <identifiersep> table <identifiersep> name ( ) ) ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t1 public boolean is <identifiersep> diff ( ) \n \t1 { \n \t2 if ( this . content != null ) { \n \t3 if ( this . is <identifiersep> diff != is <identifiersep> content <identifiersep> diff ( ) ) { \n <ect>
\t4 wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t5 @ override \n \t5 public boolean is <identifiersep> satisified ( ) throws exception { \n \t6 broker . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> store <identifiersep> usage ( ) . is <identifiersep> full ( ) ; \n <ect>
\t1 config <identifiersep> group <identifiersep> responses . add ( response ) ; } \n \t1 return config <identifiersep> group <identifiersep> responses ; } \n private synchronized void update <identifiersep> config <identifiersep> groups ( set < config <identifiersep> group <identifiersep> request > requests ) throws ambari <identifiersep> exception , authorization <identifiersep> exception { \n \t1 if ( requests . is <identifiersep> empty ( ) ) { \n <ect>
\t5 still <identifiersep> running = false ; \n \t5 try { \n \t6 server <identifiersep> socket . close ( ) ; \n \t5 } catch ( i2p <identifiersep> exception e ) { \n <ect>
\t3 service = <identifier> <identifiersep> service ; } \n \t2 action remove = service . get <identifiersep> action ( <string_literal> ) ; \n \t2 if ( remove == null ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 if ( data != null && data instanceof map ) { \n \t3 try { \n \t4 return property <identifiersep> map . input <identifiersep> type <identifiersep> to <identifiersep> java <identifiersep> type ( security <identifiersep> context . get <identifiersep> super <identifiersep> user <identifiersep> instance ( ) , page . class , ( map < string , object > ) data ) ; \n \t3 } catch ( framework <identifiersep> exception ex ) { \n <ect>
\t1 <comment> \n \t1 log . info ( <string_literal> ) ; \n \t1 create <identifiersep> sequence <identifiersep> file ( 0 , total <identifiersep> records , class <identifiersep> name ) ; \n \t1 <comment> \n <ect>
\t2 future < t > future = <identifier> <identifiersep> executors . submit ( new fetcher < t > ( clazz , <identifier> , key , is <identifiersep> random ) ) ; \n \t2 try { \n \t3 return future . get ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 remove <identifiersep> from <identifiersep> all <identifiersep> <identifier> ( ) ; \n \t4 try { \n \t5 req . set <identifiersep> attribute ( application <identifiersep> config . resumed <identifiersep> on <identifiersep> timeout , boolean . false ) ; \n \t4 } catch ( exception ex ) { \n <ect>
\t7 this . handler . on <identifiersep> message ( message ) ; } \n \t6 <comment> \n \t6 if ( session . get <identifiersep> transacted ( ) ) { \n \t7 session . commit ( ) ; } } \n <ect>
<comment> \n \t1 @ test \n \t1 public void concurrent <identifiersep> add <identifiersep> get ( ) throws exception { \n <ect>
\t3 logger . debug ( <string_literal> , cached <identifiersep> attribute <identifiersep> name ) ; \n \t3 final string encoded <identifiersep> value = cipher . encode ( cached <identifiersep> attribute , registered <identifiersep> service ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( encoded <identifiersep> value ) ) { \n \t4 attributes . put ( cached <identifiersep> attribute <identifiersep> name , encoded <identifiersep> value ) ; \n <ect>
private int get <identifiersep> failed <identifiersep> compaction <identifiersep> <identifier> ( ) { \n \t1 int failed <identifiersep> threshold = metastore <identifiersep> conf . get <identifiersep> int <identifiersep> var ( conf , conf <identifiersep> vars . <identifier> <identifiersep> initiator <identifiersep> failed <identifiersep> threshold ) ; \n \t1 int failed <identifiersep> <identifier> = metastore <identifiersep> conf . get <identifiersep> int <identifiersep> var ( conf , conf <identifiersep> vars . <identifier> <identifiersep> history <identifiersep> <identifier> <identifiersep> failed ) ; \n \t1 if ( failed <identifiersep> <identifier> < failed <identifiersep> threshold ) { \n <ect>
\t3 object sc = shared <identifiersep> state . get ( shared <identifiersep> key <identifiersep> credentials ) ; \n \t3 if ( sc instanceof credentials ) { \n \t4 shared = ( credentials ) sc ; \n \t3 } else { \n <ect>
\t1 public boolean is <identifiersep> singleton ( ) { \n \t2 return true ; } \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 public void initialize <identifiersep> connection ( ) throws exception { \n <ect>
\t3 <comment> \n \t3 indices <identifiersep> stats <identifiersep> response indices <identifiersep> stats <identifiersep> response = client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> stats ( ) . get ( ) ; \n \t3 for ( shard <identifiersep> stats shard <identifiersep> stats : indices <identifiersep> stats <identifiersep> response . get <identifiersep> shards ( ) ) { \n \t4 docs <identifiersep> stats docs <identifiersep> stats = shard <identifiersep> stats . get <identifiersep> stats ( ) . docs ; \n <ect>
\t2 string extension = ( i == - 1 ) ? <string_literal> : path . substring ( i + 1 ) ; \n \t2 string content <identifiersep> type = get <identifiersep> content <identifiersep> type ( extension ) ; \n \t2 if ( ! validate <identifiersep> path ( <identifier> ) ) { \n <ect>
<comment> \n \t1 public void stop <identifiersep> dc ( cluster cluster , int dc ) { \n <ect>
\t2 super . destroy ( ) ; \n \t2 try { \n \t3 zk <identifiersep> client . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 e <identifiersep> tag , \n \t6 content <identifiersep> type , \n \t6 string . value <identifiersep> of ( value1 . get <identifiersep> bytes ( ) . length ) ) ; \n \t3 response <identifiersep> code = conn . get <identifiersep> response <identifiersep> code ( ) ; \n <ect>
\t4 tbl <identifiersep> col <identifiersep> ref tbl <identifiersep> col <identifiersep> ref = model . find <identifiersep> column ( column <identifiersep> name ) ; \n \t4 row <identifiersep> key <identifiersep> col <identifiersep> desc row <identifiersep> key <identifiersep> col <identifiersep> desc = row <identifiersep> key <identifiersep> col <identifiersep> desc <identifiersep> map . get ( tbl <identifiersep> col <identifiersep> ref . get <identifiersep> identity ( ) ) ; \n \t4 <comment> \n \t4 if ( row <identifiersep> key <identifiersep> col <identifiersep> desc == null ) { \n <ect>
\t7 invoker . destroy ( ) ; \n \t8 logger . debug ( <string_literal> + invoker . get <identifiersep> url ( ) + <string_literal> ) ; } \n \t6 } catch ( exception e ) { \n <ect>
\t2 string encoding = detector . get <identifiersep> detected <identifiersep> charset ( ) ; \n \t2 if ( encoding != null ) { \n \t3 logger . debug ( <string_literal> + encoding ) ; \n \t2 } else { \n <ect>
\t3 if ( <identifier> <identifiersep> storage <identifiersep> network <identifiersep> <identifier> != null ) { \n \t4 storage <identifiersep> <identifier> = get <identifiersep> network <identifiersep> by <identifiersep> name ( conn , <identifier> <identifiersep> storage <identifiersep> network <identifiersep> <identifier> ) ; \n \t4 if ( storage <identifiersep> <identifier> != null ) { \n \t5 <identifier> <identifiersep> host . set <identifiersep> storage <identifiersep> <identifier> ( storage <identifiersep> <identifier> . get <identifiersep> pif <identifiersep> record ( conn ) . uuid ) ; } } \n <ect>
\t6 items . add ( <identifier> <identifiersep> item ) ; } \n \t5 ts += step ; } \n \t4 return items ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 file file = new file ( <string_literal> ) ; \n \t2 assert <identifiersep> true ( file + <string_literal> , file . exists ( ) ) ; \n \t2 long size = file . length ( ) ; \n <ect>
\t2 } else if ( clazz == stop <identifiersep> command . class ) { \n \t3 return execute ( ( stop <identifiersep> command ) cmd ) ; \n \t2 } else if ( clazz == reboot <identifiersep> command . class ) { \n \t3 return execute ( ( reboot <identifiersep> command ) cmd ) ; } \n <ect>
\t4 . get <identifiersep> service <identifiersep> reference ( notification <identifiersep> service . class . get <identifiersep> name ( ) ) ; \n \t3 notification <identifiersep> service = ( notification <identifiersep> service ) bundle <identifiersep> context \n \t4 . get <identifiersep> service ( <identifier> <identifiersep> reference ) ; \n \t3 new notification <identifiersep> manager ( ) . init ( ) ; \n <ect>
\t2 servlet <identifiersep> context servlet <identifiersep> context = ( servlet <identifiersep> context ) invocation . get <identifiersep> invocation <identifiersep> context ( ) . get ( servlet <identifiersep> context ) ; \n \t2 return servlet <identifiersep> context . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( location ) ; } \n \t1 protected void log <identifiersep> wrong <identifiersep> stream ( string final <identifiersep> location , input <identifiersep> stream resource <identifiersep> as <identifiersep> stream ) { \n \t2 if ( resource <identifiersep> as <identifiersep> stream == null ) { \n <ect>
\t3 logger . debug ( <string_literal> , \n \t4 requested <identifiersep> provider , <identifier> <identifiersep> id ) ; } \n \t2 final collection < multifactor <identifiersep> authentication <identifiersep> provider > satisfied <identifiersep> providers = get <identifiersep> satisfied <identifiersep> authentication <identifiersep> providers ( authentication , provider <identifiersep> map . values ( ) ) ; \n \t2 if ( satisfied <identifiersep> providers == null ) { \n <ect>
\t1 public void delete <identifiersep> host ( string <identifier> ) { \n \t2 host <identifiersep> fail <identifiersep> worker . fail <identifiersep> state fail <identifiersep> state = host <identifiersep> fail <identifiersep> worker . get <identifiersep> failure <identifiersep> state ( <identifier> ) ; \n \t2 if ( ( fail <identifiersep> state == host <identifiersep> fail <identifiersep> worker . fail <identifiersep> state . failing <identifiersep> fs <identifiersep> dead ) || ( fail <identifiersep> state \n <number_literal> == host <identifiersep> fail <identifiersep> worker . fail <identifiersep> state . failing <identifiersep> fs <identifiersep> okay ) ) { \n <ect>
\t1 { \n \t2 @ override \n \t2 public void on <identifiersep> error ( throwable e ) \n \t2 { \n <ect>
public er . neo4jadaptor . test . eo . first <identifiersep> entity first <identifiersep> entity ( ) { \n \t1 return ( er . neo4jadaptor . test . eo . first <identifiersep> entity ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <string_literal> ) ; } \n public void set <identifiersep> first <identifiersep> entity <identifiersep> relationship ( er . neo4jadaptor . test . eo . first <identifiersep> entity value ) { \n <ect>
<comment> \n \t1 private string get <identifiersep> remote <identifiersep> ip ( final request <identifiersep> context context ) { \n \t2 final http <identifiersep> servlet <identifiersep> request request = web <identifiersep> utils . get <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> from <identifiersep> external <identifiersep> webflow <identifiersep> context ( context ) ; \n \t2 string user <identifiersep> address = request . get <identifiersep> remote <identifiersep> addr ( ) ; \n <ect>
\t3 if ( value != null ) { \n \t4 date value <identifiersep> time = get <identifiersep> date ( 0 , 0 , 0 , value . get <identifiersep> <identifier> ( ) , value . get <identifiersep> <identifier> ( ) , value . get <identifiersep> second ( ) ) ; \n \t4 obs . set <identifiersep> value <identifiersep> datetime ( value <identifiersep> time ) ; \n \t3 } else { \n <ect>
\t3 else { \n \t4 current += value ; } } \n \t2 @ override \n \t2 public list < <identifier> <identifiersep> sink > snapshot <identifiersep> state ( long checkpoint <identifiersep> id , long timestamp ) throws exception { \n <ect>
\t6 final long host <identifiersep> id = host . get <identifiersep> id ( ) ; \n \t6 s <identifiersep> logger . debug ( <string_literal> + node . get <identifiersep> msid ( ) + <string_literal> + host <identifiersep> id ) ; \n \t6 boolean result = true ; \n \t6 if ( <identifier> <identifiersep> host <identifiersep> transfer <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host <identifiersep> id ) != null ) { \n <ect>
\t2 json <identifiersep> array patch <identifiersep> array = new json <identifiersep> array ( ) ; \n \t2 patch <identifiersep> array . add ( patch <identifiersep> url ) ; \n \t2 patch <identifiersep> array . add ( patch <identifiersep> event <identifiersep> type ) ; \n \t2 string patch <identifiersep> request = patch <identifiersep> array . to <identifiersep> string ( ) ; \n <ect>
\t2 <comment> \n \t2 list < long > following <identifiersep> user <identifiersep> ids = get <identifiersep> ids <identifiersep> for <identifiersep> users <identifiersep> following <identifiersep> destination <identifiersep> stream ( in <identifiersep> request . get <identifiersep> activity ( ) ) ; \n \t2 for ( long follower <identifiersep> id : following <identifiersep> user <identifiersep> ids ) \n \t2 { \n <ect>
\t2 ns <identifiersep> array <identifier> <identifiersep> vals = null ; \n \t2 if ( <identifier> <identifiersep> vals instanceof string ) { \n \t3 <identifier> <identifiersep> decoder decoder = <identifier> <identifiersep> decoder . decoder ( ) ; \n \t3 string xml <identifiersep> string = new string ( base64 . decode <identifiersep> base64 ( ( string ) <identifier> <identifiersep> vals ) ) ; \n <ect>
\t3 try { \n \t4 completed <identifiersep> checkpoint checkpoint <identifiersep> to <identifiersep> <identifier> = checkpoints . remove <identifiersep> first ( ) ; \n \t4 checkpoint <identifiersep> to <identifiersep> <identifier> . discard <identifiersep> on <identifiersep> <identifier> ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 settings . set <identifiersep> <identifier> <identifiersep> enabled ( true ) ; \n \t2 settings . set <identifiersep> <identifier> <identifiersep> database <identifiersep> path ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 return boolean . true ; } \n \t4 } ; \n \t4 <identifier> . execute ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 if ( child . get <identifiersep> name ( ) . equals ( new <identifiersep> child <identifiersep> name ) ) { \n \t6 copied <identifiersep> file = child ; \n \t6 break ; } } \n \t4 if ( copied <identifiersep> file == null ) { \n <ect>
\t6 add <identifiersep> link ( target , source , link ) ; \n \t6 target <identifiersep> connected <identifiersep> to <identifiersep> source = true ; } } \n \t4 if ( <identifier> <identifiersep> configuration . get <identifiersep> properties <identifiersep> <identifier> ( ) ) { \n \t5 if ( ! source <identifiersep> connected <identifiersep> to <identifiersep> target && this . ontology <identifiersep> manager . is <identifiersep> connected <identifiersep> by <identifiersep> <identifier> <identifiersep> property ( source <identifiersep> uri , target <identifiersep> uri ) ) { \n <ect>
\t2 client <identifiersep> socket = new socket ( ) ; \n \t2 client <identifiersep> socket . set <identifiersep> so <identifiersep> timeout ( <number_literal> ) ; \n \t2 client <identifiersep> socket . connect ( server <identifiersep> socket . get <identifiersep> local <identifiersep> socket <identifiersep> address ( ) , <number_literal> ) ; \n \t2 client <identifiersep> socket . set <identifiersep> tcp <identifiersep> no <identifiersep> delay ( true ) ; \n <ect>
\t3 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n \t4 log . info ( <string_literal> ) ; } } \n \t2 return wait <identifiersep> time ; } \n \t1 private void go <identifiersep> back <identifiersep> one <identifiersep> state ( ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 iterable < box <identifiersep> item . info > it = root <identifiersep> folder . search ( <string_literal> + camel <identifiersep> test <identifiersep> folder + <string_literal> ) ; \n \t2 int search <identifiersep> results = size <identifiersep> of <identifiersep> iterable ( it ) ; \n \t2 boolean exists = search <identifiersep> results > 0 ? true : false ; \n \t2 assert <identifiersep> equals ( <string_literal> , false , exists ) ; \n <ect>
\t4 if ( datacenter . get <identifiersep> network <identifiersep> type ( ) == network <identifiersep> type . advanced ) { \n \t5 <comment> \n \t5 create <identifiersep> or <identifiersep> update <identifiersep> vlan <identifiersep> capacity ( dc <identifiersep> id , datacenter . get <identifiersep> allocation <identifiersep> state ( ) ) ; } } \n <ect>
\t3 try { \n \t4 token <identifiersep> name <identifiersep> finder <identifiersep> model model = new token <identifiersep> name <identifiersep> finder <identifiersep> model ( model <identifiersep> url ) ; \n \t4 this . name <identifiersep> finder = new name <identifiersep> finder <identifiersep> me ( model ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 method . invoke ( logger <identifiersep> <identifier> , params ) ; \n \t3 log . info ( <string_literal> , log <identifiersep> level <identifiersep> upper , logger <identifiersep> name ) ; \n \t3 return true ; \n \t2 } catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error e ) { \n <ect>
\t7 this . get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) ) ; \n \t3 } catch ( throwable t ) { \n \t4 exception <identifiersep> utils . handle <identifiersep> throwable ( t ) ; \n \t4 <comment> \n <ect>
\t4 logger . debug ( <string_literal> , provider , service ) ; \n \t4 final map < string , object > attributes = build <identifiersep> event <identifiersep> attribute <identifiersep> map ( authentication . get <identifiersep> principal ( ) , service , provider ) ; \n \t4 final event event = validate <identifiersep> event <identifiersep> id <identifiersep> for <identifiersep> matching <identifiersep> transition <identifiersep> in <identifiersep> context ( provider . get <identifiersep> id ( ) , context , attributes ) ; \n \t4 return collection <identifiersep> utils . wrap <identifiersep> set ( event ) ; } \n <ect>
\t2 coordinator . add <identifiersep> session <identifiersep> info ( session <identifiersep> info ) ; \n \t2 fire <identifiersep> stream <identifiersep> event ( event ) ; } \n \t1 void handle <identifiersep> session <identifiersep> complete ( stream <identifiersep> session session ) \n \t1 { \n <ect>
\t3 buf . append ( <identifier> <identifiersep> auth <identifiersep> state . get <identifiersep> auth <identifiersep> header ( <string_literal> , url <identifiersep> to <identifiersep> send ) ) ; \n \t3 buf . append ( <string_literal> ) ; } \n \t2 buf . append ( <string_literal> ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t6 logger . info ( <string_literal> ) ; \n \t6 try { \n \t7 thread . current <identifiersep> thread ( ) . sleep ( base <identifiersep> test <identifiersep> case . get <identifiersep> random <identifiersep> milliseconds ( <number_literal> , <number_literal> ) ) ; \n \t6 } catch ( interrupted <identifiersep> exception e ) { } \n <ect>
<comment> \n \t2 new timeout ( <string_literal> , <number_literal> ) . sleep ( ) ; \n <ect>
\t6 if ( <identifier> ) { \n \t7 <identifier> <identifiersep> message = <string_literal> ; } \n \t5 } catch ( exception e ) { \n \t6 if ( <identifier> ) { \n <ect>
\t4 logger . info ( <string_literal> , \n \t7 event <identifiersep> message . get <identifiersep> payload <identifiersep> type ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t4 } else if ( task . get <identifiersep> type ( ) == task . type . disconnect ) { \n \t5 s <identifiersep> logger . info ( <string_literal> ) ; \n \t5 stop <identifiersep> client ( ) ; \n \t4 } else if ( task . get <identifiersep> type ( ) == task . type . other ) { \n <ect>
\t2 inet <identifiersep> address local <identifiersep> host = null ; \n \t2 try { \n \t3 local <identifiersep> host = inet <identifiersep> address . get <identifiersep> local <identifiersep> host ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 privilege <identifiersep> dao . remove ( privilege <identifiersep> entity ) ; } \n public void <identifier> <identifiersep> view <identifiersep> instance ( view <identifiersep> instance <identifiersep> entity instance <identifiersep> entity ) { \n \t1 log . info ( <string_literal> , instance <identifiersep> entity ) ; \n \t1 view <identifiersep> entity view <identifiersep> entity = view <identifiersep> dao . find <identifiersep> by <identifiersep> name ( instance <identifiersep> entity . get <identifiersep> view <identifiersep> name ( ) ) ; \n <ect>
\t1 llap <identifiersep> allocator <identifiersep> buffer [ ] initial = prepare <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> allocator ( a , base <identifiersep> size , pair <identifiersep> count , true ) ; \n \t1 int alloc <identifiersep> fraction = <identifier> * <number_literal> ; \n \t1 int big <identifiersep> alloc <identifiersep> size = pair <identifiersep> count * <number_literal> * base <identifiersep> size / alloc <identifiersep> fraction ; \n \t1 llap <identifiersep> allocator <identifiersep> buffer [ ] after = allocate ( a , <identifier> , big <identifiersep> alloc <identifiersep> size , 1 + initial . length ) ; \n <ect>
\t2 { \n \t3 multi <identifiersep> user <identifiersep> chat . destroy ( reason , <identifier> <identifiersep> address ) ; } \n \t2 catch ( xmpp <identifiersep> exception e ) \n \t2 { \n <ect>
\t4 log . info ( entity <identifiersep> utils . to <identifiersep> string ( entity ) ) ; } \n \t3 entity <identifiersep> utils . consume ( entity ) ; \n \t3 ret = true ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 ) ; \n \t5 } catch ( null <identifiersep> pointer <identifiersep> exception e2 ) { \n \t6 <comment> \n \t4 } else { \n <ect>
\t1 static { \n \t2 try { \n \t3 tika = new tika ( new tika <identifiersep> config ( tika <identifiersep> utils . class . get <identifiersep> resource ( <string_literal> ) ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t8 if ( <identifier> != null ) { \n \t9 <identifier> = new signing <identifiersep> public <identifiersep> key ( type , <identifier> ) ; } } \n \t6 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t7 if ( <identifier> <identifiersep> log . should <identifiersep> info ( ) ) \n <ect>
\t2 try { \n \t3 if ( this . sys <identifiersep> repository != null ) { \n \t4 this . sys <identifiersep> repository . close ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 terminate <identifiersep> internal ( node ) ; \n \t2 log . warn ( <string_literal> + node + <string_literal> \n \t3 + new date ( terminated <identifiersep> hosts . get ( ip ) ) ) ; \n \t1 } else if ( ! m <identifiersep> live <identifiersep> hosts . contains <identifiersep> key ( ip ) ) { \n <ect>
<number_literal> @ nonnull debug <identifiersep> timer timer ) throws repository <identifiersep> exception { \n \t2 default <identifiersep> synced <identifiersep> identity sync <identifiersep> id = create <identifiersep> synced <identifiersep> identity ( authorizable ) ; \n \t2 sync <identifiersep> result . status status ; \n \t2 if ( authorizable . is <identifiersep> group ( ) && ( ( group ) authorizable ) . get <identifiersep> declared <identifiersep> members ( ) . has <identifiersep> next ( ) ) { \n <ect>
\t5 log . info ( <string_literal> + tgt . get <identifiersep> client ( ) ) ; \n \t5 tgt . refresh ( ) ; \n \t5 save <identifiersep> tgt ( tgt , credentials ) ; \n \t4 } catch ( refresh <identifiersep> failed <identifiersep> exception e ) { \n <ect>
\t1 path parent <identifiersep> path = new path ( get <identifiersep> custom <identifiersep> partition <identifiersep> root <identifiersep> location ( job <identifiersep> info , conf ) ) ; \n \t1 if ( fs . exists ( parent <identifiersep> path ) ) { \n \t1 fs . delete ( parent <identifiersep> path , true ) ; } } \n private void cancel <identifiersep> delegation <identifiersep> tokens ( job <identifiersep> context context ) throws io <identifiersep> exception { \n <ect>
\t4 int <identifier> = ( ( integer ) iter . next ( ) ) . int <identifiersep> value ( ) ; \n \t4 bf . log . info ( <string_literal> + key . to <identifiersep> string ( ) + <string_literal> + <identifier> ) ; \n \t3 } else { \n \t4 string cls = iter . next ( ) . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ; \n <ect>
\t1 <identifier> <identifiersep> info = ( string ) properties . get ( host <identifiersep> resource <identifiersep> provider . host <identifiersep> <identifier> <identifiersep> info <identifiersep> property <identifiersep> id ) ; \n \t1 } else if ( properties . contains <identifiersep> key ( host <identifiersep> resource <identifiersep> provider . <identifier> <identifiersep> info <identifiersep> property <identifiersep> id ) ) { \n \t1 <identifier> <identifiersep> info = ( string ) properties . get ( host <identifiersep> resource <identifiersep> provider . <identifier> <identifiersep> info <identifiersep> property <identifiersep> id ) ; \n \t1 } else { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t1 public void test <identifiersep> filters <identifiersep> with <identifiersep> customer <identifiersep> read <identifiersep> and <identifiersep> write ( ) { \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t5 . meter ( ) . count ( ) ) ; \n \t3 thread . sleep ( <number_literal> ) ; } \n \t2 connect <identifiersep> <identifier> . channel ( ) . close ( ) . sync ( ) ; \n \t2 connect <identifiersep> <identifier> . channel ( ) . close ( ) . sync ( ) ; \n <ect>
\t1 check <identifiersep> not <identifiersep> null ( id , <string_literal> ) ; \n \t1 logger . debug ( <string_literal> , id ) ; \n \t1 atomic <identifiersep> reference < node <identifiersep> metadata > node = <identifier> . new <identifiersep> reference ( resume <identifiersep> node <identifiersep> strategy . resume <identifiersep> node ( id ) ) ; \n \t1 boolean successful = node <identifiersep> running . apply ( node ) ; \n <ect>
\t4 elb <identifiersep> vm = find <identifiersep> elb <identifiersep> vm <identifiersep> with <identifiersep> capacity ( network , ip <identifiersep> addr ) ; \n \t4 if ( elb <identifiersep> vm == null ) { \n \t5 elb <identifiersep> vm = deploy <identifiersep> load <identifiersep> balancer <identifiersep> vm ( network <identifiersep> id , ip <identifiersep> addr , account . get <identifiersep> id ( ) ) ; \n \t5 if ( elb <identifiersep> vm == null ) { \n <ect>
\t3 string val = null ; \n \t3 try { \n \t4 val = system . get <identifiersep> property ( var ) ; \n \t3 } catch ( security <identifiersep> exception se ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t3 } catch ( http <identifiersep> exception e ) { \n \t4 logger . warn ( <string_literal> , e ) ; \n \t4 return false ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 baos . write ( i ) ; } \n \t2 response response = target . request ( ) . post ( entity . entity ( baos . to <identifiersep> byte <identifiersep> array ( ) , media <identifiersep> type . application <identifiersep> <identifier> <identifiersep> stream ) ) ; \n \t2 assert . assert <identifiersep> equals ( test <identifiersep> util . get <identifiersep> error <identifiersep> message <identifiersep> for <identifiersep> known <identifiersep> issue ( <string_literal> ) , http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string response <identifiersep> content = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t6 if ( <identifier> ) { \n \t7 try { \n \t8 structr <identifiersep> app . get <identifiersep> instance ( security <identifiersep> context ) . delete ( node ) ; \n \t7 } catch ( framework <identifiersep> exception ex ) { \n <ect>
\t3 log . error ( <string_literal> ) ; \n \t3 return false ; } \n \t2 <comment> \n \t2 if ( ! insert && current <identifiersep> map == null ) { \n <ect>
\t1 public boolean check <identifiersep> connection ( ) { \n \t2 try { \n \t3 dynamo . list <identifiersep> tables ( 1 ) . first <identifiersep> page ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 throw new resource <identifiersep> unavailable <identifiersep> exception ( <string_literal> , data <identifiersep> center . class , network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; } \n \t3 try { \n \t4 return <identifier> <identifiersep> router <identifiersep> mgr . remove <identifiersep> dhcp <identifiersep> support <identifiersep> for <identifiersep> subnet ( network , routers ) ; \n \t3 } catch ( final resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t3 post <identifiersep> method post = new post <identifiersep> method ( string . format ( <string_literal> , agent <identifiersep> ip , get <identifiersep> port ( ) ) ) ; \n \t3 try { \n \t4 post . add <identifiersep> request <identifiersep> header ( <string_literal> , <string_literal> ) ; \n \t4 if ( http <identifiersep> client . execute <identifiersep> method ( post ) != <number_literal> ) { \n <ect>
\t3 response <identifiersep> handler < string > handler = new basic <identifiersep> response <identifiersep> handler ( ) ; \n \t3 string response <identifiersep> body = http <identifiersep> client . execute ( method , handler ) ; \n \t3 log . debug ( <string_literal> + url + <string_literal> + response <identifiersep> body ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 topic <identifiersep> subscriber non <identifiersep> durable <identifiersep> subscriber = session . create <identifiersep> subscriber ( topic ) ; \n \t2 <comment> \n \t2 publish <identifiersep> to <identifiersep> topic ( session , topic ) ; \n <ect>
\t4 try <identifiersep> terminate ( false ) ; } \n \t2 @ override \n \t2 public void user <identifiersep> event <identifiersep> triggered ( channel <identifiersep> handler <identifiersep> context ctx , object evt ) throws exception { \n \t3 if ( is <identifiersep> initialized && ! is <identifiersep> closed ( ) && evt instanceof idle <identifiersep> state <identifiersep> event && ( ( idle <identifiersep> state <identifiersep> event ) evt ) . state ( ) == reader <identifiersep> idle ) { \n <ect>
\t2 if ( url != null ) { \n \t3 try { \n \t4 bi = image <identifiersep> io . read ( <identifier> <identifiersep> frame . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( url ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( null != statement ) { \n \t3 try { \n \t4 statement . close ( ) ; \n \t3 } catch ( sql <identifiersep> exception e1 ) { \n <ect>
\t1 private boolean check <identifiersep> list <identifiersep> of <identifiersep> paths ( string <identifiersep> builder exist <identifiersep> list , string <identifiersep> builder non <identifiersep> exist <identifiersep> list , configuration conf ) \n \t3 throws io <identifiersep> exception { \n \t2 string [ ] uri <identifiersep> list = non <identifiersep> exist <identifiersep> list . to <identifiersep> string ( ) . split ( coord <identifiersep> el <identifiersep> functions . instance <identifiersep> separator ) ; \n \t2 if ( uri <identifiersep> list [ 0 ] != null ) { \n <ect>
\t3 final appender appender = this . config . get <identifiersep> appender ( ref <identifiersep> name ) ; \n \t3 if ( appender != null ) { \n \t4 appender . append ( new <identifiersep> log <identifiersep> event ) ; \n \t3 } else { \n <ect>
\t3 render <identifiersep> request render <identifiersep> request , render <identifiersep> response render <identifiersep> response , \n \t3 filter <identifiersep> chain filter <identifiersep> chain ) \n \t2 throws io <identifiersep> exception , portlet <identifiersep> exception { \n \t2 log log = log <identifiersep> factory <identifiersep> util . get <identifiersep> log ( test <identifiersep> render <identifiersep> filter . class ) ; \n <ect>
\t2 java <identifiersep> class <identifiersep> source clazz = ( java <identifiersep> class <identifiersep> source ) <identifier> . parse ( new file ( <string_literal> ) ) ; \n \t2 method <identifiersep> source < java <identifiersep> class <identifiersep> source > method = clazz . get <identifiersep> method ( <string_literal> ) ; \n \t2 list < parser <identifiersep> result > list = camel <identifiersep> java <identifiersep> parser <identifiersep> helper . parse <identifiersep> camel <identifiersep> consumer <identifiersep> uris ( method , true , true ) ; \n \t2 for ( parser <identifiersep> result result : list ) { \n <ect>
\t1 int average = ( int ) timing . get <identifiersep> average ( ) ; \n \t1 log . info ( <string_literal> , average ) ; \n \t1 long total <identifiersep> memory = runtime . total <identifiersep> memory ( ) ; \n \t1 long memory = total <identifiersep> memory - runtime . free <identifiersep> memory ( ) ; \n <ect>
<comment> \n \t6 if ( t instanceof thread <identifiersep> death ) \n \t7 throw ( thread <identifiersep> death ) t ; \n \t6 else \n <ect>
\t2 this . option <identifiersep> <identifier> = option <identifiersep> <identifier> ; } \n \t1 public boolean try <identifiersep> activate ( channel <identifiersep> master meshy , map < string , string > query <identifiersep> options ) { \n \t2 if ( option <identifiersep> <identifier> . try <identifiersep> acquire ( ) ) { \n \t3 activate ( meshy , query <identifiersep> options ) ; \n <ect>
\t2 } finally { \n \t2 try { \n \t3 hive <identifiersep> connection <identifiersep> wrapper . disconnect ( ) ; } \n \t2 catch ( connection <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( exchange <identifiersep> helper . get <identifiersep> binding ( exchange , jms <identifiersep> binding . class ) ) ; \n \t2 jms <identifiersep> message in = ( jms <identifiersep> message ) exchange . get <identifiersep> in ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( in ) ; \n \t2 byte [ ] bytes = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( byte [ ] . class ) ; \n <ect>
\t3 doc <identifiersep> builder <identifiersep> factory . set <identifiersep> namespace <identifiersep> aware ( true ) ; \n \t3 try { \n \t4 doc <identifiersep> builder <identifiersep> factory . set <identifiersep> x <identifiersep> include <identifiersep> aware ( true ) ; \n \t3 } catch ( unsupported <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t2 <identifier> . click <identifiersep> on <identifiersep> cell ( row , 1 ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 j <identifiersep> button <identifiersep> operator <identifier> = new j <identifiersep> button <identifiersep> operator ( wo , <string_literal> ) ; \n \t2 <identifier> . push <identifiersep> no <identifiersep> block ( ) ; \n <ect>
\t2 map < string , map < string , string > > metrics <identifiersep> map = jmx <identifiersep> poll <identifiersep> util . get <identifiersep> all <identifiersep> m <identifiersep> beans ( ) ; \n \t2 long current <identifiersep> time <identifiersep> millis = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 for ( string component : metrics <identifiersep> map . key <identifiersep> set ( ) ) { \n \t2 map < string , string > attribute <identifiersep> map = metrics <identifiersep> map . get ( component ) ; \n <ect>
\t2 if ( secret <identifiersep> key == null ) { \n \t3 s <identifiersep> logger . error ( <string_literal> ) ; \n \t3 system . exit ( 1 ) ; } \n \t2 if ( api <identifiersep> key == null ) { \n <ect>
\t6 public boolean invoke ( field field ) { \n \t7 return <identifier> <identifiersep> button <identifiersep> enum <identifiersep> model . class . is <identifiersep> assignable <identifiersep> from ( field . get <identifiersep> type ( ) ) ; } } \n \t3 ) ; \n \t3 if ( model <identifiersep> field == null ) { \n <ect>
\t2 so <identifiersep> proc <identifiersep> ctx . stop <identifiersep> process = true ; \n \t2 <identifier> . set <identifiersep> fetch <identifiersep> task ( null ) ; } } } \n \t1 private column <identifiersep> statistics <identifiersep> data validate <identifiersep> single <identifiersep> col <identifiersep> stat ( list < column <identifiersep> statistics <identifiersep> obj > stat <identifiersep> obj ) { \n \t1 if ( stat <identifiersep> obj . size ( ) > 1 ) { \n <ect>
\t2 for ( string supervisor <identifiersep> id : used <identifiersep> nodes ) { \n \t3 if ( all <identifiersep> node <identifiersep> host . contains <identifiersep> key ( supervisor <identifiersep> id ) ) { \n \t4 ret . put ( supervisor <identifiersep> id , all <identifiersep> node <identifiersep> host . get ( supervisor <identifiersep> id ) ) ; \n \t3 } else { \n <ect>
\t3 } catch ( throwable t ) { \n \t4 logger . warn ( <string_literal> , t ) ; } } \n \t2 servers . clear ( ) ; \n <ect>
\t4 log . info ( <string_literal> , path ) ; \n \t4 @ syntax ( <string_literal> ) string content = new string ( files . read <identifiersep> all <identifiersep> bytes ( path ) ) ; \n \t4 manager = configs . decode <identifiersep> object ( authentication <identifiersep> manager <identifiersep> static . class , content ) ; } \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 hive <identifiersep> auth <identifiersep> factory , req . get <identifiersep> owner ( ) , req . get <identifiersep> <identifier> ( ) ) ; \n \t2 resp . set <identifiersep> delegation <identifiersep> token ( token ) ; \n \t2 resp . set <identifiersep> status ( ok <identifiersep> status ) ; \n \t1 } catch ( hive <identifiersep> sql <identifiersep> exception e ) { \n <ect>
\t4 string value = next <identifiersep> option ( ) ; \n \t4 if ( android <identifiersep> api <identifiersep> version == - 1 ) \n \t5 android <identifiersep> api <identifiersep> version = integer . value <identifiersep> of ( value ) ; \n \t4 else { \n <ect>
\t2 } ) ; \n \t2 string [ ] journal = new file ( kaha <identifiersep> data <identifiersep> dir , dest <identifiersep> name ) . list ( new filename <identifiersep> filter ( ) { \n \t3 @ override \n \t3 public boolean accept ( file dir , string name ) { \n <ect>
\t3 message message = null ; \n \t3 try { \n \t4 log . debug ( <string_literal> + ( messages <identifiersep> received + 1 ) + <string_literal> + messages <identifiersep> expected ) ; \n \t4 message = consumer . receive ( <number_literal> ) ; \n <ect>
\t3 if ( params . <identifier> != null ) { \n \t4 params . <identifier> . push ( process . get <identifiersep> output <identifiersep> stream ( ) ) ; } \n \t3 integer pid = process <identifiersep> util . get <identifiersep> process <identifiersep> id ( process ) ; \n \t3 if ( pid != null ) { \n <ect>
\t2 if ( <identifier> <identifiersep> firewall <identifiersep> mgr . revoke <identifiersep> firewall <identifiersep> rules <identifiersep> for <identifiersep> vm ( vm <identifiersep> id ) ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> id + <string_literal> ) ; \n \t2 } else { \n \t3 success = false ; \n <ect>
\t2 <identifier> <identifiersep> <identifier> <identifiersep> performed = true ; } \n \t2 catch ( concurrent <identifiersep> modification <identifiersep> exception <identifier> ) { \n \t2 <comment> \n \t1 if ( <identifier> > 0 || killed > 0 ) { \n <ect>
\t7 return engine ; } } \n \t5 log . debug ( <string_literal> , factory . get <identifiersep> engine <identifiersep> name ( ) , name ) ; \n \t5 return null ; } \n \t3 } catch ( exception e ) { \n <ect>
\t2 string <identifier> = tools . get <identifiersep> string <identifiersep> opt ( config <identifiersep> opts <identifiersep> move . <identifier> . to <identifiersep> string ( ) , opts ) ; \n \t2 short speed = null ; \n \t2 logger . trace ( <string_literal> , <identifier> , opts ) ; \n \t2 if ( opts == null ) { \n <ect>
public string get <identifiersep> config <identifiersep> file <identifiersep> name ( ) { \n \t1 return solr <identifiersep> config <identifiersep> file ; } \n @ override \n public void upload <identifiersep> missing <identifiersep> config <identifiersep> files ( solr <identifiersep> zk <identifiersep> client zk <identifiersep> client , zk <identifiersep> config <identifiersep> manager zk <identifiersep> config <identifiersep> manager , string config <identifiersep> name ) throws io <identifiersep> exception { \n <ect>
\t5 total = integer . parse <identifiersep> int ( <identifier> ) ; \n \t5 result = new choice [ total ] ; \n \t5 if ( total > 0 ) { \n \t6 result [ 0 ] = new choice ( ) ; \n <ect>
\t3 gc <identifiersep> inspector . register ( ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n \t3 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( t ) ; \n <ect>
\t3 if ( in != null ) { \n \t4 try { \n \t5 in . close ( ) ; \n \t4 } catch ( io <identifiersep> exception ioe ) { \n <ect>
<comment> \n @ override \n public void initialize ( ) { \n \t1 byte <identifiersep> buffer payload = context . get <identifiersep> user <identifiersep> payload ( ) . get <identifiersep> payload ( ) ; \n <ect>
\t2 logger . debug ( <string_literal> , url , \n \t4 pm . get <identifiersep> reset ( ) . get <identifiersep> expiration <identifiersep> minutes ( ) ) ; \n \t2 if ( send <identifiersep> password <identifiersep> reset <identifiersep> email <identifiersep> to <identifiersep> account ( to , url ) ) { \n \t3 return success ( ) ; } \n <ect>
\t2 boolean success = true ; \n \t2 for ( int i = 0 ; i < servers . length ; i ++ ) { \n \t3 sock <identifiersep> io <identifiersep> pool . sock <identifiersep> io sock = pool . get <identifiersep> connection ( servers [ i ] ) ; \n \t3 if ( sock == null ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( offset < 0 || buffer . length < = offset ) \n \t2 { \n <ect>
\t3 if ( entry . get <identifiersep> key ( ) . starts <identifiersep> with ( <identifier> <identifiersep> callback <identifiersep> name <identifiersep> prefix ) ) { \n \t4 try { \n \t5 ( ( runnable ) entry . get <identifiersep> value ( ) ) . run ( ) ; } \n \t4 catch ( throwable ex ) { \n <ect>
\t3 return ; } \n \t2 long agent <identifiersep> id = agent . get <identifiersep> id ( ) ; \n \t2 startup <identifiersep> routing <identifiersep> command startup = ( startup <identifiersep> routing <identifiersep> command ) cmd ; \n \t2 if ( startup . get <identifiersep> hypervisor <identifiersep> type ( ) != hypervisor <identifiersep> type . xen <identifiersep> server ) { \n <ect>
\t5 if ( lock != null ) { \n \t6 logger . info ( <string_literal> , path , lock ) ; \n \t6 fire <identifiersep> leadership <identifiersep> changed <identifiersep> event ( optional . of ( local <identifiersep> member ) ) ; \n \t5 } else { \n <ect>
\t2 broker <identifiersep> service . add <identifiersep> connector ( broker <identifiersep> url ) ; \n \t2 broker <identifiersep> service . start ( ) ; } \n \t1 public static class consumer { \n \t2 public void consume ( @ body string message ) { \n <ect>
\t1 path output <identifiersep> path = new path ( args [ <number_literal> ] ) ; \n \t1 configuration conf = new configuration ( ) ; \n \t1 file <identifiersep> system fs = file <identifiersep> system . get ( output <identifiersep> path . to <identifiersep> uri ( ) , conf ) ; \n \t1 preconditions . check <identifiersep> argument ( <identifier> <identifiersep> data <identifiersep> dir != null , <string_literal> ) ; \n <ect>
\t3 if ( rollback <identifiersep> only ) { \n \t4 log . warn ( <string_literal> , \n \t6 transaction <identifiersep> key , redelivered , ids ) ; \n \t3 } else { \n <ect>
\t1 public void set <identifiersep> diff ( boolean is <identifiersep> diff ) \n \t1 { \n \t2 if ( this . content != null ) { \n \t3 if ( is <identifiersep> diff != is <identifiersep> content <identifiersep> diff ( ) ) { \n <ect>
\t7 <identifier> <identifiersep> vpn <identifiersep> users <identifiersep> dao . remove ( user . get <identifiersep> id ( ) ) ; \n \t7 usage <identifiersep> event <identifiersep> utils . publish <identifiersep> usage <identifiersep> event ( event <identifiersep> types . event <identifiersep> vpn <identifiersep> user <identifiersep> remove , user . get <identifiersep> account <identifiersep> id ( ) , 0 , user . get <identifiersep> id ( ) , user . get <identifiersep> username ( ) , user . get <identifiersep> class ( ) \n \t8 . get <identifiersep> name ( ) , user . get <identifiersep> uuid ( ) ) ; } \n \t5 } ) ; } \n <ect>
\t5 case <string_literal> : \n \t6 term = new x <identifiersep> term <identifiersep> terminal <identifiersep> <identifier> ( in , out , this ) ; \n \t6 break ; \n \t5 default : \n <ect>
\t6 } else if ( context <identifiersep> type . <identifier> <identifiersep> <identifier> . equals ( type ) ) { \n \t7 app <identifiersep> id = cms <identifiersep> <identifier> <identifiersep> editor <identifiersep> configuration . app <identifiersep> id ; } \n \t5 } catch ( exception e ) { \n \t6 type = context <identifiersep> type . app <identifiersep> <identifier> ; \n <ect>
\t2 if ( ! time . is <identifiersep> empty ( ) ) { \n \t3 try { \n \t4 date = received <identifiersep> <identifier> . parse ( time ) ; \n \t3 } catch ( parse <identifiersep> exception e ) { \n <ect>
\t2 return gson <identifiersep> builder . set <identifiersep> field <identifiersep> naming <identifiersep> policy ( field <identifiersep> naming <identifiersep> policy . lower <identifiersep> case <identifiersep> with <identifiersep> <identifier> ) . create ( ) ; } \n \t1 public static builder create ( ) { \n \t2 return new builder ( ) ; } \n \t1 public < t > void execute <identifiersep> update <identifiersep> object ( final t new <identifiersep> object , final string path , final map < string , string > parameters ) throws cloudstack <identifiersep> rest <identifiersep> exception { \n <ect>
\t2 finally \n \t2 { \n \t3 throwable post <identifiersep> shutdown <identifiersep> hook <identifiersep> throwable = <identifier> . perform ( null , post <identifiersep> shutdown <identifiersep> hooks . stream ( ) . map ( h - > h : : run ) ) ; \n \t3 if ( post <identifiersep> shutdown <identifiersep> hook <identifiersep> throwable != null ) \n <ect>
\t4 } catch ( not <identifiersep> connected <identifiersep> exception e ) { \n \t5 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> ) ; \n \t5 return ; \n \t4 } catch ( sync <identifiersep> send <identifiersep> waited <identifiersep> too <identifiersep> long <identifiersep> exception e ) { \n <ect>
private void update <identifiersep> guid ( update <identifiersep> yarn <identifiersep> ats <identifiersep> guid message ) { \n \t1 hive <identifiersep> statement statement = message . get <identifiersep> statement ( ) ; \n \t1 string job <identifiersep> id = message . get <identifiersep> job <identifiersep> id ( ) ; \n \t1 string yarn <identifiersep> ats <identifiersep> guid = statement . get <identifiersep> yarn <identifiersep> ats <identifiersep> guid ( ) ; \n <ect>
\t3 <comment> \n \t3 org . apache . hadoop . conf . configuration hadoop <identifiersep> config = this . hadoop <identifiersep> config ; \n \t3 if ( hadoop <identifiersep> config == null ) { \n \t4 if ( flink <identifiersep> config != null ) { \n <ect>
\t4 throw new web <identifiersep> application <identifiersep> exception ( response . status . not <identifiersep> found ) ; } \n \t3 org . dspace . content . metadata <identifiersep> field field = metadata <identifiersep> field <identifiersep> service \n \t4 . find <identifiersep> by <identifiersep> element ( context , schema , element , qualifier ) ; \n \t3 if ( field == null ) { \n <ect>
\t2 kryo . set <identifiersep> auto <identifiersep> reset ( this . auto <identifiersep> reset ) ; \n \t2 kryo . set <identifiersep> references ( this . replace <identifiersep> objects <identifiersep> by <identifiersep> references ) ; \n \t2 kryo . set <identifiersep> registration <identifiersep> required ( this . registration <identifiersep> required ) ; \n \t2 logger . debug ( <string_literal> ) ; \n <ect>
<comment> \n \t1 private tag <identifiersep> image <identifiersep> cmd execute <identifiersep> tag <identifiersep> image <identifiersep> request ( docker <identifiersep> client client , message message ) { \n <ect>
\t7 thread . sleep ( <identifier> ) ; \n \t6 } catch ( interrupted <identifiersep> exception e ) { \n \t7 interrupted = true ; } } } } \n \t2 } catch ( <identifier> <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> + cluster <identifiersep> id ) ; } \n \t3 return null ; } \n \t2 if ( cluster . get <identifiersep> hypervisor <identifiersep> type ( ) != hypervisor <identifiersep> type . <identifier> ) { \n <ect>
\t5 <identifier> <identifiersep> log . debug ( <string_literal> + peer ) ; \n \t4 if ( <identifier> <identifiersep> threshold <identifiersep> speed <identifiersep> value < = profile . get <identifiersep> speed <identifiersep> value ( ) ) { \n \t5 if ( ! profile . get <identifiersep> is <identifiersep> active ( ) ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t5 try { \n \t6 <identifier> <identifiersep> vm <identifiersep> mgr . destroy <identifiersep> vm ( vm . get <identifiersep> id ( ) , false ) ; \n \t5 } catch ( exception e ) { \n \t6 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t2 archive <identifiersep> deployer . undeploy <identifiersep> artifact ( artifact <identifiersep> name ) ; \n \t2 logger . debug ( format ( <string_literal> , artifact <identifiersep> name ) ) ; } \n \t1 } catch ( throwable t ) { \n <ect>
\t3 } else { \n \t4 if ( verbose ) { \n \t5 puts ( <string_literal> , message ) ; } } \n \t2 } catch ( exception ex ) { \n <ect>
\t2 for ( iterator < integer > lv <identifiersep> iterator = cv <identifiersep> schedule <identifiersep> map . key <identifiersep> set ( ) . iterator ( ) ; lv <identifiersep> iterator . has <identifiersep> next ( ) ; ) { \n \t3 int auto <identifiersep> refresh <identifiersep> time <identifiersep> in <identifiersep> secs = lv <identifiersep> iterator . next ( ) ; \n \t3 list < string > lv <identifiersep> item <identifiersep> <identifier> = cv <identifiersep> schedule <identifiersep> map . get ( auto <identifiersep> refresh <identifiersep> time <identifiersep> in <identifiersep> secs ) ; \n \t3 synchronized ( lv <identifiersep> item <identifiersep> <identifier> ) { \n <ect>
\t4 locked = false ; \n \t4 locked <identifiersep> files . put ( file , prev ) ; \t1 <comment> \n \t2 if ( locked ) { \n <ect>
\t8 mbean <identifiersep> server = <identifier> ; \n \t8 break ; } } } \n \t5 if ( mbean <identifiersep> server == null ) \n \t5 { \n <ect>
\t2 if ( ! is <identifiersep> kafka <identifiersep> broker <identifiersep> up ) { \n \t2 log . error ( <string_literal> + failed <identifiersep> retry <identifiersep> interval + <string_literal> ) ; \n \t2 thread . sleep ( failed <identifiersep> retry <identifiersep> interval * <number_literal> ) ; \n \t2 } else { \n <ect>
\t6 <identifier> . add ( creator ) ; } \n \t4 } catch ( exception e ) { \n \t5 log . error ( <string_literal> , menu <identifiersep> creator . class , str <identifiersep> class <identifiersep> name , e ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 for ( int i = 0 ; i < data . length ; i ++ ) { \n \t3 message message = create <identifiersep> message ( i ) ; \n \t3 configure <identifiersep> message ( message ) ; \n \t3 if ( verbose ) { \n <ect>
\t3 service <identifiersep> a . register <identifiersep> request <identifiersep> handler ( <string_literal> , string <identifiersep> message <identifiersep> request : : new , thread <identifiersep> pool . names . generic , \n \t4 ( request , channel ) - > { \n \t5 try { \n \t6 <identifier> . await ( ) ; \n <ect>
\t3 try { \n \t4 final credential c = it . next ( ) ; \n \t4 logger . debug ( <string_literal> , c . get <identifiersep> entity <identifiersep> id ( ) ) ; \n \t4 signature <identifiersep> validator . validate ( signature , c ) ; \n <ect>
\t5 { \n \t6 populator . populate ( def , def . get <identifiersep> url ( ) ) ; } \n \t5 catch ( validation <identifiersep> exception <identifier> ) \n \t5 { \n <ect>
\t2 if ( logger <identifiersep> context == null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return ; \n \t2 } else if ( ! is <identifiersep> active ( ) ) { \n <ect>
\t4 log . warn ( <string_literal> , service <identifiersep> name , l . get <identifiersep> error <identifiersep> string ( ) ) ; } \n \t2 } catch ( text <identifiersep> parse <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , service <identifiersep> name , e ) ; \n \t2 } catch ( class <identifiersep> cast <identifiersep> exception e ) { \n <ect>
\t2 service <identifiersep> info <identifiersep> list . add ( service ) ; } \n \t1 for ( service <identifiersep> info service <identifiersep> info : service <identifiersep> info <identifiersep> list ) { \n \t2 list < theme <identifiersep> info > service <identifiersep> <identifier> = new array <identifiersep> list < > ( ) ; \n \t2 if ( theme <identifiersep> file <identifiersep> name != null ) { \n <ect>
\t2 { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t2 this . cause <identifiersep> of <identifiersep> <identifier> = cause ; \n \t2 this . <identifier> = false ; \n <ect>
\t2 long <identifier> = long . value <identifiersep> of ( id ) ; \n \t2 routed <identifiersep> context rc = routed <identifiersep> contexts . get ( <identifier> ) ; \n \t2 if ( rc == null ) { \n \t3 <comment> \n <ect>
\t3 if ( ! removed ) { \n \t4 return ; <comment> \n <ect>
\t1 if ( file <identifiersep> upload <identifiersep> part == null ) { \n \t1 log . info ( <string_literal> ) ; \n \t1 error <identifiersep> response ( request , response , <string_literal> ) ; \n \t1 } else { \n <ect>
\t2 log . debug ( <string_literal> + volume <identifiersep> id ) ; \n \t2 try { \n \t2 do <identifiersep> <identifier> ( volume <identifiersep> id ) ; \n \t2 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n <ect>
\t2 kie <identifiersep> module <identifiersep> model kie <identifiersep> project = kie <identifiersep> module <identifiersep> model <identifiersep> impl . from <identifiersep> xml ( url ) ; \n \t2 set <identifiersep> <identifier> <identifiersep> empty <identifiersep> kie <identifiersep> module ( kie <identifiersep> project ) ; \n \t2 string pom <identifiersep> properties = get <identifiersep> pom <identifiersep> properties ( fixed <identifiersep> url ) ; \n \t2 if ( pom <identifiersep> properties == null ) { \n <ect>
\t2 try { \n \t3 record = vm . get <identifiersep> record ( conn ) ; \n \t3 set < console > <identifier> = record . <identifier> ; \n \t3 if ( <identifier> . is <identifiersep> empty ( ) ) { \n <ect>
\t5 public cluster <identifiersep> state execute ( cluster <identifiersep> state current <identifiersep> state ) throws exception { \n \t6 return cluster <identifiersep> state . builder ( current <identifiersep> state ) . build ( ) ; } \n \t5 @ override \n \t5 public void on <identifiersep> failure ( string source , exception e ) { \n <ect>
\t5 return ; } \n \t4 if ( <identifier> <identifiersep> facade . lookup <identifiersep> <identifier> <identifiersep> without <identifiersep> validation ( peer ) == null ) { \n \t5 failed ( peer , false ) ; \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 if ( user <identifiersep> name == null ) { \n \t4 return null ; } \n \t3 return new x <identifiersep> wiki <identifiersep> user ( user <identifiersep> name ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 snapshot . await <identifiersep> ready ( <number_literal> ) ; } \n \t4 <comment> \n \t4 pending <identifiersep> snapshot = null ; \n <ect>
\t4 logger . warn ( <string_literal> , e ) ; \n \t4 this . rollback <identifiersep> transaction ( ) ; } \n \t3 throw e ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 return false ; } \n \t2 <comment> \n \t2 kick <identifiersep> on <identifiersep> complete = task . get <identifiersep> state ( ) . is <identifiersep> queued <identifiersep> state ( ) ; \n \t2 if ( ! spawn . prepare <identifiersep> task <identifiersep> states <identifiersep> for <identifiersep> rebalance ( job , task , is <identifiersep> migration ) ) { \n <ect>
\t3 try { \n \t4 list < string > lines = io <identifiersep> utils . read <identifiersep> lines ( new file <identifiersep> input <identifiersep> stream ( file ) ) ; \n \t4 return callback . execute ( lines ) ; \n \t3 } catch ( exception e ) { \n <ect>
public integer number <identifiersep> of <identifiersep> <identifier> ( ) { \n \t1 return ( integer ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> voting . number <identifiersep> of <identifiersep> <identifier> <identifiersep> key ) ; } \n public void set <identifiersep> number <identifiersep> of <identifiersep> <identifier> ( integer value ) { \n <ect>
\t6 + <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> tick ) ) ; } \n \t2 } catch ( http <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + <identifier> <identifiersep> service <identifiersep> url + <string_literal> + method . get <identifiersep> parameter ( <string_literal> ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 if ( last <identifiersep> <identifier> <identifiersep> index >= 0 ) { \n \t6 file package <identifiersep> directory = new file ( scripts <identifiersep> directory , path <identifiersep> to <identifiersep> script . substring ( 0 , last <identifiersep> <identifier> <identifiersep> index ) ) ; \n \t6 if ( ! package <identifiersep> directory . exists ( ) || ! package <identifiersep> directory . is <identifiersep> directory ( ) ) { \n \t7 if ( ! package <identifiersep> directory . mkdirs ( ) ) { \n <ect>
\t1 for ( naming <identifiersep> enumeration < search <identifiersep> result > search <identifiersep> result : search <identifiersep> results ) { \n \t2 try { \n \t2 search <identifiersep> result . close ( ) ; \n \t2 } catch ( naming <identifiersep> exception ex ) { \n <ect>
\t4 m <identifiersep> knx <identifiersep> bus <identifiersep> reader <identifiersep> scheduler . read <identifiersep> once ( datapoint ) ; \n \t4 int auto <identifiersep> refresh <identifiersep> time <identifiersep> in <identifiersep> secs = knx <identifiersep> provider . get <identifiersep> auto <identifiersep> refresh <identifiersep> time ( datapoint ) ; \n \t4 if ( auto <identifiersep> refresh <identifiersep> time <identifiersep> in <identifiersep> secs > 0 ) { \n \t5 if ( ! m <identifiersep> knx <identifiersep> bus <identifiersep> reader <identifiersep> scheduler . schedule <identifiersep> read ( datapoint , auto <identifiersep> refresh <identifiersep> time <identifiersep> in <identifiersep> secs ) ) { \n <ect>
\t2 public void on <identifiersep> failure ( final string source , final exception e ) { \n \t3 logger . error ( ( ) - > new parameterized <identifiersep> message ( <string_literal> , source ) , e ) ; } \n \t2 @ override \n \t2 public void on <identifiersep> no <identifiersep> longer <identifiersep> master ( string source ) { \n <ect>
\t2 when ( severity ) { \n \t3 compiler <identifiersep> message <identifiersep> severity . error , \n \t3 compiler <identifiersep> message <identifiersep> severity . exception - > { \n \t4 has <identifiersep> errors = true \n <ect>
\t1 protected void assert <identifiersep> url <identifiersep> string <identifiersep> with <identifiersep> local <identifiersep> table ( string param <identifiersep> string <identifiersep> from <identifiersep> db , \n <number_literal> object [ ] [ ] data <identifiersep> table , string config <identifiersep> name , int column ) { \n \t2 final string <identifier> <identifiersep> header = <string_literal> ; \n \t2 log . warn ( <string_literal> + config <identifiersep> name + <string_literal> ) ; \n <ect>
\t2 client client = client <identifiersep> builder . new <identifiersep> client ( ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 web <identifiersep> target base = client . target ( port <identifiersep> provider <identifiersep> util . generate <identifiersep> url ( <string_literal> , alternative <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> test . class . get <identifiersep> simple <identifiersep> name ( ) ) ) ; \n \t2 response response = base . request ( ) . get ( ) ; \n <ect>
\t3 delete <identifiersep> rows <identifiersep> result result = new delete <identifiersep> rows <identifiersep> result ( ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t4 string s <identifiersep> cost <identifiersep> class = mary <identifiersep> properties . need <identifiersep> property ( header + <string_literal> ) ; \n \t4 s <identifiersep> cost <identifiersep> function = ( <identifier> <identifiersep> cost <identifiersep> function ) class . for <identifiersep> name ( s <identifiersep> cost <identifiersep> class ) . new <identifiersep> instance ( ) ; \n \t4 s <identifiersep> cost <identifiersep> function . init ( header ) ; } \n \t3 <comment> \n <ect>
\t2 delete <identifiersep> tablets ( info , delete <identifiersep> range , bw , conn ) ; \n \t1 } finally { \n \t2 bw . close ( ) ; } \n \t1 if ( following <identifiersep> tablet != null ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 re <identifiersep> connect = true ; } \n \t3 } catch ( exception e ) { \n \t4 get <identifiersep> exception <identifiersep> handler ( ) . handle <identifiersep> exception ( <string_literal> + thread <identifiersep> id + <string_literal> , e ) ; \n \t3 } finally { \n <ect>
\t2 for ( index <identifiersep> event <identifiersep> listener listener : listeners ) { \n \t3 try { \n \t4 listener . on <identifiersep> shard <identifiersep> inactive ( index <identifiersep> shard ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 private void set <identifiersep> metadata <identifiersep> version ( collection < integer > node <identifiersep> ids , versioned < properties > props ) throws exception { \n \t3 if ( props == null || props . get <identifiersep> value ( ) == null ) { \n \t4 return ; } \n \t3 if ( node <identifiersep> ids == null || node <identifiersep> ids . size ( ) == 0 ) { \n <ect>
\t3 this . third <identifiersep> field = triple <identifiersep> class . get <identifiersep> field ( <string_literal> ) ; \n \t3 this . available = true ; \n \t2 } catch ( exception e ) { \n \t3 log . warn ( <string_literal> , e . get <identifiersep> message ( ) , model <identifiersep> path ) ; } \n <ect>
\t3 attempt <identifiersep> item <identifiersep> advance <identifiersep> final ( role . <identifier> , false ) ; \n \t3 context <identifiersep> reload ( ) ; \n \t2 } catch ( exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 success = false ; } \n \t2 try { \n \t3 if ( ! <identifier> <identifiersep> lb <identifiersep> mgr . revoke <identifiersep> load <identifiersep> balancers <identifiersep> for <identifiersep> network ( network <identifiersep> id , scheme . internal ) ) { \n <ect>
\t4 connector . connect ( ) ; \n \t4 m <identifiersep> bean <identifiersep> server <identifiersep> connection connection = connector . get <identifiersep> m <identifiersep> bean <identifiersep> server <identifiersep> connection ( ) ; \n \t4 set < object <identifiersep> name > brokers = find <identifiersep> brokers ( connection ) ; \n \t4 if ( brokers . size ( ) > 0 ) { \n <ect>
\t3 peers . remove ( peer ) ; \n \t3 peer <identifiersep> address address = peer . get <identifiersep> address ( ) ; \n \t3 log . info ( <string_literal> , address , peers . size ( ) , pending <identifiersep> peers . size ( ) , max <identifiersep> connections ) ; \n \t3 if ( peer == download <identifiersep> peer ) { \n <ect>
\t1 public < t , u > field <identifiersep> accessor < t , u > create <identifiersep> field <identifiersep> accessor ( class < t > owner <identifiersep> type , field field , class < u > field <identifiersep> type ) throws <identifier> <identifiersep> field <identifiersep> exception { \n \t2 try { \n \t3 return new <identifier> <identifiersep> <identifier> <identifiersep> field <identifiersep> accessor < > ( owner <identifiersep> type , field , field <identifiersep> type ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception | <identifier> <identifiersep> field <identifiersep> exception e ) { \n <ect>
\t2 if ( ip <identifiersep> model == null ) { \n \t3 ip <identifiersep> model = new instance <identifiersep> ip <identifiersep> model ( vm . get <identifiersep> instance <identifiersep> name ( ) , nic . get <identifiersep> device <identifiersep> id ( ) ) ; \n \t3 ip <identifiersep> model . add <identifiersep> to <identifiersep> vm <identifiersep> interface ( <identifier> <identifiersep> model ) ; \n \t2 } else { \n <ect>
\t3 for ( volume <identifiersep> info vol <identifiersep> on <identifiersep> cache : cache <identifiersep> vols ) { \n \t4 s <identifiersep> logger . info ( <string_literal> + vol <identifiersep> on <identifiersep> cache . get <identifiersep> data <identifiersep> store ( ) . get <identifiersep> name ( ) ) ; \n \t4 vol <identifiersep> on <identifiersep> cache . delete ( ) ; } \n \t2 } catch ( interrupted <identifiersep> exception | execution <identifiersep> exception | no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t5 log . debug ( <string_literal> + message . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; } \n \t3 } catch ( throwable e ) { \n <ect>
\t3 try { \n \t4 serial <identifiersep> port . add <identifiersep> event <identifiersep> listener ( this ) ; \n \t4 serial <identifiersep> port . notify <identifiersep> on <identifiersep> data <identifiersep> available ( true ) ; \n \t3 } catch ( too <identifiersep> many <identifiersep> listeners <identifiersep> exception e ) { \n <ect>
\t2 byte checksum = power <identifiersep> max <identifiersep> comm <identifiersep> driver . compute <identifiersep> crc ( data , len ) ; \n \t2 byte expected = data [ len - <number_literal> ] ; \n \t2 if ( checksum != expected ) { \n \t3 byte [ ] log <identifiersep> data = arrays . copy <identifiersep> of ( data , len ) ; \n <ect>
\t4 reset <identifiersep> state ( editor <identifiersep> contents ) ; \n \t4 set <identifiersep> <identifier> <identifiersep> changes <identifiersep> present ( true ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> file <identifiersep> exception ignored ) { \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( <identifier> . vertex <identifiersep> set ( ) . size ( ) < <number_literal> ) { \n \t3 this . tree = new weighted <identifiersep> multigraph < > ( default <identifiersep> link . class ) ; \n \t3 for ( node n : <identifier> . vertex <identifiersep> set ( ) ) this . tree . add <identifiersep> vertex ( n ) ; \n \t3 return ; } \n <ect>
\t2 logger . info ( <string_literal> + param <identifiersep> value + <string_literal> + expected <identifiersep> value ) ; \n \t2 if ( param <identifiersep> value != null && param <identifiersep> value . equals ( expected <identifiersep> value ) ) { \n \t3 string logged <identifiersep> user = context . get <identifiersep> authenticator <identifiersep> config ( ) . get <identifiersep> config ( ) . get ( logged <identifiersep> user ) ; \n \t3 if ( logged <identifiersep> user == null ) { \n <ect>
\t5 try { \n \t6 byte [ ] data = compose <identifiersep> send <identifiersep> data ( e <identifiersep> bus <identifiersep> provider , item <identifiersep> name , null ) ; \n \t6 if ( data != null && data . length > 0 ) { \n \t7 if ( connector == null ) { \n <ect>
\t8 ) ; \n \t8 query . set <identifiersep> lock <identifiersep> mode ( lock <identifiersep> mode <identifiersep> type . <identifier> <identifiersep> read ) ; \n \t8 list < lock > result <identifiersep> list = query . get <identifiersep> result <identifiersep> list ( ) ; \n \t8 string name = result <identifiersep> list . get ( 0 ) . get <identifiersep> name ( ) ; <comment> \n <ect>
\t1 log <identifiersep> and <identifiersep> print <identifiersep> to <identifiersep> error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t1 system . out . println ( <string_literal> ) ; \n \t1 return false ; } \n \t1 log . debug ( <string_literal> + arrays . to <identifiersep> string ( schema <identifiersep> tables . to <identifiersep> array ( ) ) + <string_literal> ) ; \n <ect>
\t2 boolean multi <identifiersep> part <identifiersep> content = portlet <identifiersep> file <identifiersep> upload . is <identifiersep> multipart <identifiersep> content ( \n \t3 action <identifiersep> request ) ; \n \t3 if ( multi <identifiersep> part <identifiersep> content ) { \n <ect>
\t4 <comment> \n \t4 throw new job <identifiersep> execution <identifiersep> exception ( exchange . get <identifiersep> exception ( ) ) ; } \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t2 if ( <identifier> <identifiersep> injector == null ) { \n \t2 create <identifiersep> injector ( ) ; } } } \n \t1 return <identifier> <identifiersep> injector . get <identifiersep> instance ( clazz ) ; } \n private void create <identifiersep> injector ( ) { \n <ect>
\t4 commands <identifiersep> to <identifiersep> abort . put ( cmd , failed <identifiersep> events . get ( event ) ) ; \n \t4 break ; } } } \n \t2 } else { \n \t3 log . warn ( <string_literal> , stage . get <identifiersep> cluster <identifiersep> name ( ) ) ; } } \n <ect>
\t2 return delay <identifiersep> request <identifiersep> until <identifiersep> allowed ( command , response ) ; } } \n private boolean delay <identifiersep> request <identifiersep> until <identifiersep> allowed ( final http <identifiersep> command command , final http <identifiersep> response response ) { \n \t1 optional < long > millis <identifiersep> to <identifiersep> next <identifiersep> available <identifiersep> request = millis <identifiersep> to <identifiersep> next <identifiersep> available <identifiersep> request ( command , response ) ; \n \t1 if ( ! millis <identifiersep> to <identifiersep> next <identifiersep> available <identifiersep> request . is <identifiersep> present ( ) ) { \n <ect>
\t3 payload payload = serializer . broadcast ( message ) ; \n \t3 atomic <identifiersep> broadcast . broadcast ( payload ) ; } \n \t2 catch ( throwable e ) \n \t2 { \n <ect>
<comment> \n \t1 private stop <identifiersep> container <identifiersep> cmd execute <identifiersep> stop <identifiersep> container <identifiersep> request ( docker <identifiersep> client client , message message ) { \n <ect>
logger . info ( ' <comment> ' ) \n logger . info ( ' \t4 parameters used for script run \t8 ' ) \n logger . info ( <identifier> <identifier> ) \n logger . info ( <string_literal> . format ( server <identifiersep> url ) ) \n <ect>
\t2 if ( filename <identifiersep> exists && ! filename . can <identifiersep> write ( ) ) { \n \t3 logger . error ( file <identifiersep> persistent <identifiersep> config . class , <string_literal> + filename ) ; \n \t3 system . err . println ( <string_literal> + filename ) ; } \n \t2 if ( temp <identifiersep> filename <identifiersep> exists && ! temp <identifiersep> filename . can <identifiersep> write ( ) ) { \n <ect>
\t1 return <string_literal> ; } \n @ override \n public string init <identifiersep> update <identifiersep> rollback <identifiersep> resource ( string resource <identifiersep> id , string stack <identifiersep> id , string account <identifiersep> id , string effective <identifiersep> user <identifiersep> id , int rolled <identifiersep> back <identifiersep> resource <identifiersep> version ) { \n \t1 int updated <identifiersep> stack <identifiersep> version = rolled <identifiersep> back <identifiersep> resource <identifiersep> version - 1 ; \n <ect>
\t6 <identifier> = str <identifiersep> con . new <identifiersep> instance ( str <identifiersep> params ) ; \n \t5 } else if ( con != null ) { \n \t6 <identifier> = con . new <identifiersep> instance ( params ) ; \n \t5 } else { \n <ect>
\t3 . get <identifiersep> bytes ( utf <identifiersep> <number_literal> ) ) ; \n \t1 get <identifiersep> connector ( login ) ; <comment> \n \t1 return login ; \n \t1 } catch ( accumulo <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 if ( ! quorum <identifiersep> peer <identifiersep> config . is <identifiersep> <identifier> <identifiersep> enabled ( ) ) { \n \t5 log . error ( <string_literal> ) ; \n \t5 throw new keeper <identifiersep> exception . <identifier> <identifiersep> disabled <identifiersep> exception ( ) ; } \n \t4 if ( skip <identifiersep> acl ) { \n <ect>
\t5 managed <identifiersep> object <identifiersep> reference dc <identifiersep> mor = hyper <identifiersep> host . get <identifiersep> hyper <identifiersep> host <identifiersep> datacenter ( ) ; \n \t5 datacenter <identifiersep> mo data <identifiersep> center <identifiersep> mo = new datacenter <identifiersep> mo ( context , dc <identifiersep> mor ) ; \n \t5 managed <identifiersep> object <identifiersep> reference <identifier> <identifiersep> mor = data <identifiersep> center <identifiersep> mo . get <identifiersep> dv <identifiersep> switch <identifiersep> mor ( network <identifiersep> info . first ( ) ) ; \n \t5 dv <identifiersep> switch <identifiersep> uuid = data <identifiersep> center <identifiersep> mo . get <identifiersep> dv <identifiersep> switch <identifiersep> uuid ( <identifier> <identifiersep> mor ) ; \n <ect>
\t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( proxy <identifiersep> port <identifiersep> string ) ) { \n \t4 try { \n \t5 proxy <identifiersep> port = integer . value <identifiersep> of ( proxy <identifiersep> port <identifiersep> string ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> failed <identifiersep> lookup <identifiersep> rate . load ( props , <string_literal> , true ) ; \n \t3 <identifier> <identifiersep> log . debug ( <string_literal> ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t7 } finally { \n \t8 send <identifiersep> shutdown . count <identifiersep> down ( ) ; } } \n \t5 } , <string_literal> ) ; \n \t5 if ( ! send <identifiersep> shutdown . await ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n <ect>
\t3 + <string_literal> + part . get <identifiersep> table ( ) . get <identifiersep> table <identifiersep> name ( ) ; } \n \t1 } else { \n \t1 <comment> \n \t1 full <identifiersep> scan <identifiersep> msg = is <identifiersep> mm <identifiersep> table ? <string_literal> : <string_literal> ; } \n <ect>
\t3 } catch ( invalid <identifiersep> class <identifiersep> exception e1 ) { \n \t4 throw new binding <identifiersep> config <identifiersep> parse <identifiersep> exception ( \n \t6 <string_literal> + value <identifiersep> selector <identifiersep> string + <string_literal> ) ; } \n \t2 } else { \n <ect>
\t2 . add <identifiersep> allowed <identifiersep> <identifier> ( <string_literal> ) \n \t2 . server <identifiersep> authentication <identifiersep> provider ( create <identifiersep> authentication <identifiersep> provider ( ) ) ; \n \t1 server <identifiersep> builder . authentication ( ) . <identifier> <identifiersep> properties ( <identifier> <identifiersep> properties ) ; \n \t1 <identifier> <identifiersep> server . start ( server <identifiersep> builder . build ( ) , cache <identifiersep> manager ) ; \n <ect>
\t1 if ( null != client ) { \n \t2 <identifier> = client . get <identifiersep> active <identifiersep> <identifier> ( <identifier> , context . rpc <identifiersep> creds ( ) ) ; } \n \t1 } catch ( t <identifiersep> exception e ) { \n \t1 <comment> \n <ect>
\t2 contexts = new hash <identifiersep> map < > ( script <identifiersep> module . core <identifiersep> contexts ) ; \n \t2 <identifier> = new hash <identifiersep> map < > ( ) ; \n \t2 <identifier> . put ( script <identifiersep> engine . get <identifiersep> type ( ) , script <identifiersep> engine ) ; \n \t2 <identifier> . put ( <string_literal> , new mock <identifiersep> script <identifiersep> engine ( <string_literal> , scripts ) ) ; \n <ect>
\t1 static rest <identifiersep> method <identifiersep> result send <identifiersep> message ( kafka <identifiersep> client this <identifiersep> client , final string topic , final string message ) throws framework <identifiersep> exception { \n \t2 if ( get <identifiersep> producer ( this <identifiersep> client ) == null && this <identifiersep> client . get <identifiersep> servers ( ) != null && this <identifiersep> client . get <identifiersep> servers ( ) . length > 0 ) { \n \t3 set <identifiersep> producer ( this <identifiersep> client , new kafka <identifiersep> producer < > ( get <identifiersep> configuration ( this <identifiersep> client , kafka <identifiersep> producer . class ) ) ) ; \n \t2 } else if ( this <identifiersep> client . get <identifiersep> servers ( ) == null || this <identifiersep> client . get <identifiersep> servers ( ) . length == 0 ) { \n <ect>
\t2 string ex <identifiersep> home <identifiersep> from <identifiersep> env = system . <identifier> ( <string_literal> ) ; \n \t2 string ex <identifiersep> home <identifiersep> from <identifiersep> property = system . get <identifiersep> property ( <string_literal> ) ; \n \t2 if ( ! string <identifiersep> utils . equals ( ex <identifiersep> home <identifiersep> from <identifiersep> env , ex <identifiersep> home <identifiersep> from <identifiersep> property ) ) { \n \t3 core <identifiersep> logger . logger . warn ( <string_literal> ) ; \n <ect>
\t5 } catch ( interrupted <identifiersep> exception ie ) { } \n \t4 } <comment> \n \t3 } catch ( throwable t ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t3 core . alerts . register ( event ) ; \n \t2 } else if ( req instanceof client <identifiersep> put <identifiersep> dir ) { \n \t3 <identifier> <identifiersep> uri uri = ( ( client <identifiersep> put <identifiersep> dir ) req ) . get <identifiersep> final <identifiersep> uri ( ) ; \n \t3 if ( uri == null ) { \n <ect>
\t1 public boolean <identifier> ( ) { \n \t2 return is <identifiersep> closed . get ( ) ; } \n \t1 public synchronized boolean lease ( ) { \n \t2 if ( is <identifiersep> closed . get ( ) ) { \n <ect>
\t3 assert <identifiersep> equals ( <string_literal> , expected . get <identifiersep> destination ( ) , actual . get <identifiersep> destination ( ) ) ; \n \t3 assert <identifiersep> equals ( <string_literal> , expected . get <identifiersep> text ( ) , actual . get <identifiersep> text ( ) ) ; \n \t3 log . info ( <string_literal> + actual . get <identifiersep> text ( ) . length ( ) + <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 ( info <identifiersep> message <identifiersep> listener <identifiersep> rpc <identifiersep> gateway gateway , throwable failure ) - > { \n \t5 if ( failure != null ) { \n \t6 log . warn ( <string_literal> , address ) ; \n \t5 } else { \n <ect>
\t2 if ( count <identifiersep> of <identifiersep> semantic <identifiersep> type == null ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return mappings ; } \n \t2 if ( domain <identifiersep> uri == null || domain <identifiersep> uri . is <identifiersep> empty ( ) ) { \n <ect>
\t2 context tls = slot . get ( ) ; \n \t2 if ( tls == null ) { \n \t3 if ( is <identifiersep> strict <identifiersep> mode ) { \n \t4 log . error ( <string_literal> ) ; \n <ect>
\t2 { \n \t3 connection <identifiersep> pool <identifiersep> data <identifiersep> source <identifier> = assert <identifiersep> <identifier> ( ) ; \n \t3 pool <identifiersep> manager = new <identifier> <identifiersep> connection <identifiersep> pool <identifiersep> manager ( <identifier> , null , null , this . get <identifiersep> num <identifiersep> helper <identifiersep> threads ( ) , this . get <identifiersep> identity <identifiersep> token ( ) , this . get <identifiersep> data <identifiersep> source <identifiersep> name ( ) ) ; \n \t3 if ( logger . is <identifiersep> loggable ( m <identifiersep> level . info ) ) \n <ect>
\t2 } else { \n \t3 consumer <identifiersep> destination = session . create <identifiersep> queue ( get <identifiersep> consumer <identifiersep> subject ( ) ) ; \n \t3 producer <identifiersep> destination = session . create <identifiersep> queue ( get <identifiersep> producer <identifiersep> subject ( ) ) ; } \n \t2 log . info ( <string_literal> + consumer <identifiersep> destination + <string_literal> + consumer <identifiersep> destination . get <identifiersep> class ( ) ) ; \n <ect>
\t1 } catch ( sql <identifiersep> exception ex ) { \n \t1 try { \n \t2 connection . rollback ( ) ; \n \t1 } catch ( sql <identifiersep> exception ex2 ) { \n <ect>
\t3 <identifier> . unlock ( ) ; } \n \t2 if ( need <identifiersep> op <identifiersep> packet && ! need <identifiersep> snap ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t3 } catch ( io <identifiersep> exception ioe ) { \n \t4 <identifier> <identifiersep> log . error ( <string_literal> , ioe ) ; \n \t4 return false ; \n \t3 } catch ( runtime <identifiersep> exception re ) { \n <ect>
\t2 for ( file <identifiersep> <identifier> <identifiersep> iterator reader : readers ) { \n \t2 try { \n \t3 reader . close ( ) ; \n \t2 } catch ( throwable e2 ) { \n <ect>
\t4 string <identifier> = photo <identifiersep> url . split ( <string_literal> ) [ 1 ] ; \n \t4 try { \n \t5 image = javax . xml . bind . datatype <identifiersep> converter . parse <identifiersep> <identifier> ( <identifier> ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t6 <comment> \n \t6 if ( contains <identifiersep> key ( key ) ) { \n \t7 keys . add ( key ) ; } } } \n \t3 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t1 public void event <identifiersep> <identifier> ( cal <identifiersep> dav <identifiersep> event event ) { \n \t2 if ( ! read <identifiersep> <identifier> . contains ( event . get <identifiersep> calendar <identifiersep> id ( ) ) ) { \n \t3 return ; } \n \t2 if ( this . item <identifiersep> registry == null ) { \n <ect>
\t2 if ( broker <identifiersep> name == null ) { \n \t3 throw new null <identifiersep> pointer <identifiersep> exception ( <string_literal> ) ; } \n \t2 string str = broker <identifiersep> name . replace <identifiersep> all ( broker <identifiersep> name <identifiersep> replaced <identifiersep> chars <identifiersep> reg <identifiersep> exp , <string_literal> ) ; \n \t2 if ( ! str . equals ( broker <identifiersep> name ) ) { \n <ect>
\t7 grid <identifiersep> discovery <identifiersep> event disco <identifiersep> evt = exch <identifiersep> fut . discovery <identifiersep> event ( ) ; \n \t7 cctx . events ( ) . add <identifiersep> <identifier> <identifiersep> event ( p , evt <identifiersep> cache <identifiersep> <identifier> <identifiersep> part <identifiersep> data <identifiersep> lost , disco <identifiersep> evt . event <identifiersep> node ( ) , \n \t8 disco <identifiersep> evt . type ( ) , disco <identifiersep> evt . timestamp ( ) ) ; } \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
\t5 p . set <identifiersep> privilege ( privilege <identifiersep> name ) ; \n \t5 p . set <identifiersep> description ( entry . get <identifiersep> value ( ) ) ; \n \t5 context . get <identifiersep> user <identifiersep> service ( ) . save <identifiersep> privilege ( p ) ; } } } \n \t2 catch ( exception e ) { \n <ect>
\t2 public void on <identifiersep> mode ( string string , irc <identifiersep> user irc <identifiersep> user , irc <identifiersep> mode <identifiersep> parser irc <identifiersep> mode <identifiersep> parser ) { \n \t3 super . on <identifiersep> mode ( string , irc <identifiersep> user , irc <identifiersep> mode <identifiersep> parser ) ; \n \t3 log . info ( <string_literal> + string ) ; \n \t3 log . info ( <string_literal> + irc <identifiersep> user ) ; \n <ect>
\t1 if ( table <identifiersep> exists ( table <identifiersep> name ) ) { \n \t1 string query = <identifier> <identifiersep> helper . get <identifiersep> drop <identifiersep> table <identifiersep> statement ( table <identifiersep> name ) ; \n \t1 execute <identifiersep> query ( query ) ; \n \t1 } else { \n <ect>
\t5 log . info ( <string_literal> + handle + <string_literal> ) ; \n \t5 break ; \n \t4 case constants . community : \n \t5 build <identifiersep> document ( context , ( community ) dso ) ; \n <ect>
\t2 finally \n \t2 { \n \t3 if ( ! get <identifiersep> store <identifiersep> ok ( ) ) \n \t3 { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t4 user <identifiersep> arg <identifiersep> map . for <identifiersep> each ( new <identifiersep> args : : add <identifiersep> argument ) ; \n \t4 class <identifiersep> name = new <identifiersep> class <identifiersep> name ; \n \t4 args <identifiersep> panel . configure ( new <identifiersep> args ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public web <identifiersep> application <identifiersep> service extract <identifiersep> service ( final http <identifiersep> servlet <identifiersep> request request ) { \n \t2 final web <identifiersep> application <identifiersep> service service = extract <identifiersep> service <identifiersep> internal ( request ) ; \n \t2 if ( service == null ) { \n <ect>
\t3 entity <identifiersep> ref result = block <identifiersep> region <identifiersep> lookup . get ( block <identifiersep> position ) ; \n \t3 if ( result == null ) { \n \t4 return get <identifiersep> existing <identifiersep> block <identifiersep> entity <identifiersep> at ( block <identifiersep> position ) ; } \n \t3 return result ; } \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t2 <identifier> . drain ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 bucket <identifiersep> adapter . delete <identifiersep> object ( host <identifiersep> <identifier> <identifiersep> pair . get <identifiersep> second ( ) , service <identifiersep> provider . get <identifiersep> instance ( ) . get <identifiersep> multipart <identifiersep> dir ( ) , parts [ i ] . get <identifiersep> path ( ) ) ; } \n \t3 upload <identifiersep> dao . delete <identifiersep> upload ( upload <identifiersep> id ) ; \n \t3 return <number_literal> ; } \n \t2 catch ( permission <identifiersep> denied <identifiersep> exception e ) { \n <ect>
\t3 <identifier> <identifiersep> in = in ; } \n \t2 @ override \n \t2 public void stream <identifiersep> status <identifiersep> received ( string result , string id , string message ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 <identifier> <identifiersep> management <identifiersep> agent . get <identifiersep> instance ( ) . register <identifiersep> m <identifiersep> bean ( <identifier> , \n <number_literal> adapter , \n <number_literal> name ) ; \n \t2 } catch ( not <identifiersep> <identifier> <identifiersep> m <identifiersep> bean <identifiersep> exception e ) { \n <ect>
\t3 log . error ( <string_literal> , property <identifiersep> file <identifiersep> path , e . get <identifiersep> message ( ) ) ; } \n \t2 } else { \n \t2 log . error ( <string_literal> , property <identifiersep> file <identifiersep> path ) ; } \n \t1 } else { \n <ect>
\t3 for ( int j = 1 + random <identifiersep> int ( <number_literal> ) ; j > 0 ; j -- ) { \n \t4 nodes <identifiersep> to <identifiersep> join . add ( node ) ; } } \n \t2 <comment> \n \t2 shuffle ( nodes <identifiersep> to <identifiersep> join , random ( ) ) ; \n <ect>
\t2 } else { \n \t3 method = <string_literal> ; \n \t3 <identifier> = new reload <identifiersep> hz <identifiersep> <identifier> ( cluster , geo <identifiersep> server ) ; } \n \t2 <identifier> . initialize ( config <identifiersep> watcher ) ; \n <ect>
\t5 continue ; \n \t4 } catch ( i2p <identifiersep> exception <identifier> ) { \n \t5 log log = i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( <identifier> <identifiersep> <identifier> <identifiersep> session . class ) ; \n \t5 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 <identifier> = log <identifiersep> every <identifiersep> n <identifiersep> rows == 0 ? <identifier> * <number_literal> : num <identifiersep> rows + log <identifiersep> every <identifiersep> n <identifiersep> rows ; \n \t2 if ( <identifier> < 0 || num <identifiersep> rows < 0 ) { \n \t2 <identifier> = 0 ; \n \t2 num <identifiersep> rows = 1 ; } \n <ect>
\t2 try { \n \t3 update <identifiersep> offset <identifiersep> to <identifiersep> zk ( current <identifiersep> offsets ) ; \n \t3 switch <identifiersep> offset <identifiersep> map ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 management <identifiersep> server <identifiersep> host <identifiersep> peer <identifiersep> vo peer = new management <identifiersep> server <identifiersep> host <identifiersep> peer <identifiersep> vo ( owner <identifiersep> mshost , peer <identifiersep> mshost , peer <identifiersep> <identifier> , peer <identifiersep> state ) ; \n \t4 persist ( peer ) ; } \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 invocation . set <identifiersep> input ( <string_literal> , <string_literal> ) ; \n \t4 } else { \n \t5 return false ; } \n \t3 } catch ( invalid <identifiersep> value <identifiersep> exception ex ) { \n <ect>
\t3 assert rsrc3 == rsrc7 ; \n \t3 assert rsrc4 == rsrc8 ; \n \t3 log . info ( <string_literal> + rsrc1 ) ; \n \t3 log . info ( <string_literal> + rsrc2 ) ; \n <ect>
\t2 <identifier> <identifiersep> availability <identifiersep> notifier . stop <identifiersep> <identifier> ( ) ; \n \t2 if ( ( <identifier> <identifiersep> options != null ) && \n \t3 ( i2p <identifiersep> client . prop <identifiersep> <identifier> <identifiersep> guaranteed . equals ( <identifier> <identifiersep> options . get <identifiersep> property ( i2p <identifiersep> client . prop <identifiersep> <identifier> , i2p <identifiersep> client . prop <identifiersep> <identifier> <identifiersep> best <identifiersep> <identifier> ) ) ) ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t1 if ( ! assigned <identifiersep> to <identifiersep> dead <identifiersep> servers . is <identifiersep> empty ( ) ) { \n \t1 int max <identifiersep> servers <identifiersep> to <identifiersep> show = min ( assigned <identifiersep> to <identifiersep> dead <identifiersep> servers . size ( ) , <number_literal> ) ; \n \t1 master . log . debug ( <string_literal> , assigned <identifiersep> to <identifiersep> dead <identifiersep> servers . size ( ) , \n \t2 assigned <identifiersep> to <identifiersep> dead <identifiersep> servers . sub <identifiersep> list ( 0 , max <identifiersep> servers <identifiersep> to <identifiersep> show ) ) ; \n <ect>
\t5 answer [ ] answers = <identifier> <identifiersep> agent <identifiersep> mgr . send ( i , cmds ) ; \n \t5 handle <identifiersep> create <identifiersep> tunnel <identifiersep> answer ( answers ) ; } \n \t3 } catch ( <identifier> <identifiersep> tunnel <identifiersep> exception | operation <identifiersep> timedout <identifiersep> exception | agent <identifiersep> unavailable <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
@ path ( <string_literal> ) \n public response delete <identifiersep> file ( @ path <identifiersep> param ( <string_literal> ) string file <identifiersep> path ) throws io <identifiersep> exception , interrupted <identifiersep> exception { \n \t1 try { \n \t1 file <identifiersep> path = sanitize <identifiersep> file <identifiersep> path ( file <identifiersep> path ) ; \n <ect>
\t2 s <identifiersep> instance . cleanup <identifiersep> this <identifiersep> server ( ) ; \n \t2 try { \n \t3 jmx <identifiersep> util . register <identifiersep> m <identifiersep> bean ( <string_literal> , <string_literal> , s <identifiersep> instance ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 response <identifiersep> cache . flush <identifiersep> cache <identifiersep> entries <identifiersep> <identifier> <identifiersep> by <identifiersep> request ( target , request ) ; \n \t3 return call <identifiersep> backend ( target , request , scope , chain ) ; } \n \t2 final http <identifiersep> cache <identifiersep> entry entry = response <identifiersep> cache . get <identifiersep> cache <identifiersep> entry ( target , request ) ; \n \t2 if ( entry == null ) { \n <ect>
\t2 if ( notification . type . alert . equals ( notification . get <identifiersep> type ( ) ) ) { \n \t3 try { \n \t4 alert <identifiersep> notification = ( alert <identifiersep> notification ) notification ; \n \t3 } catch ( class <identifiersep> cast <identifiersep> exception e ) { \n <ect>
\t3 logger . info ( \n \t5 <string_literal> + new <identifiersep> min <identifiersep> port + <string_literal> \n \t6 + new <identifiersep> max <identifiersep> port + <string_literal> ) ; \n <ect>
\t3 inet <identifiersep> socket <identifiersep> address addr = new inet <identifiersep> socket <identifiersep> address ( ip <identifiersep> of <identifiersep> node ( n ) , binary <identifiersep> port ) ; \n \t3 logger . debug ( <string_literal> , addr ) ; \n \t3 test <identifiersep> utils . wait <identifiersep> until <identifiersep> port <identifiersep> is <identifiersep> up ( addr ) ; \n \t2 } catch ( <identifier> <identifiersep> exception e ) { \n <ect>
\t4 system . exit ( 1 ) ; } \n \t3 uri = args [ 1 ] ; \n \t3 idx += <number_literal> ; } \n \t2 string queue <identifiersep> name = args [ idx ] ; \n <ect>
\t2 logger . warn ( <string_literal> ) ; \n \t2 return this ; } \n \t1 @ override \n \t1 public broadcaster <identifiersep> cache add <identifiersep> broadcaster <identifiersep> cache <identifiersep> listener ( broadcaster <identifiersep> cache <identifiersep> listener l ) { \n <ect>
\t1 if ( image == null ) { \n \t1 debug <identifiersep> log . warn ( <string_literal> , filename ) ; \n \t1 return ; \n \t1 } else if ( string <identifiersep> utils . is <identifiersep> blank ( filename ) ) { \n <ect>
\t3 if ( result ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + host <identifiersep> id + <string_literal> + future <identifiersep> owner <identifiersep> id ) ; \n \t4 finish <identifiersep> rebalance ( host <identifiersep> id , future <identifiersep> owner <identifiersep> id , event . rebalance <identifiersep> completed ) ; \n \t3 } else { \n <ect>
\t3 return decoder . to <identifiersep> date ( expires ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { \n \t3 logger . trace ( <string_literal> , expires , decoder ) ; \n \t3 <comment> \n <ect>
\t1 while ( iter . has <identifiersep> next ( ) ) { \n \t1 file <identifiersep> status file = iter . next ( ) ; \n \t1 if ( file == null ) continue ; \n \t1 if ( is <identifiersep> pipe ( fs , file ) ) { \n <ect>
\t2 log . info ( <string_literal> + server <identifiersep> boss <identifiersep> pool <identifiersep> total <identifiersep> mem + <string_literal> + new <identifiersep> server <identifiersep> boss <identifiersep> pool <identifiersep> total <identifiersep> mem ) ; \n \t2 server <identifiersep> boss <identifiersep> pool <identifiersep> total <identifiersep> mem = new <identifiersep> server <identifiersep> boss <identifiersep> pool <identifiersep> total <identifiersep> mem ; \n \t2 different = true ; } \n \t2 if ( ! server <identifiersep> boss <identifiersep> pool <identifiersep> timeout <identifiersep> millis . equals ( new <identifiersep> server <identifiersep> boss <identifiersep> pool <identifiersep> timeout <identifiersep> millis ) ) { \n <ect>
\t2 string query = <string_literal> + table <identifiersep> name ; \n \t2 try ( statement statement = connection . create <identifiersep> statement ( ) ) { \n \t2 statement . execute ( query ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 final long account <identifiersep> id = select <identifiersep> result <identifiersep> set . get <identifiersep> long ( 1 ) ; \n \t4 final short account <identifiersep> type = select <identifiersep> result <identifiersep> set . get <identifiersep> short ( <number_literal> ) ; \n \t4 final long role <identifiersep> id = role <identifiersep> type . get <identifiersep> by <identifiersep> account <identifiersep> type ( account <identifiersep> type ) . get <identifiersep> id ( ) ; \n \t4 if ( role <identifiersep> id < 1l || role <identifiersep> id > <identifier> ) { \n <ect>
\t5 <comment> \n \t5 aborted = true ; } \n \t4 publish <identifiersep> consumer <identifiersep> failed <identifiersep> event ( <string_literal> , aborted , ex ) ; } \n \t3 catch ( fatal <identifiersep> listener <identifiersep> startup <identifiersep> exception ex ) { \n <ect>
\t2 matcher m = volume <identifiersep> pattern . matcher ( result ) ; \n \t2 if ( m . find ( ) ) { \n \t3 double current <identifiersep> volume = integer . parse <identifiersep> int ( m . group ( 1 ) ) ; \n \t3 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , new decimal <identifiersep> type ( current <identifiersep> volume ) ) ; \n <ect>
\t6 log . debug ( <string_literal> ) ; \n \t5 return ; } \n \t4 if ( is <identifiersep> local <identifiersep> node <identifiersep> coordinator ( ) && ring . node ( msg . creator <identifiersep> node <identifiersep> id ( ) ) == null ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 factory = locate <identifiersep> factories ( identifier <identifiersep> factory . class . get <identifiersep> class <identifiersep> loader ( ) , <string_literal> ) ; } \n \t2 if ( factory == null ) { \n \t3 factory = new default <identifiersep> identifier <identifiersep> factory ( ) ; \n <ect>
\t1 logger . debug ( <string_literal> , providers . size ( ) , providers ) ; \n \t1 return new js <identifiersep> array < > ( providers . to <identifiersep> array ( new js <identifiersep> type <identifiersep> provider < ? > [ providers . size ( ) ] ) ) ; } \n @ override \n public boolean has <identifiersep> provider ( final string name ) { \n <ect>
\t1 } else { \n \t2 return false ; } } \n \t1 upgrade <identifiersep> state next ( ) { \n \t1 upgrade <identifiersep> state next = upgrade <identifiersep> state . values ( ) [ this . ordinal ( ) + 1 ] ; \n <ect>
\t2 try { \n \t3 synchronized ( get <identifiersep> storage <identifiersep> pool ( pool . get <identifiersep> uuid <identifiersep> string ( ) ) ) { \n \t4 refresh <identifiersep> pool ( pool ) ; } \n \t2 } catch ( libvirt <identifiersep> exception e ) { \n <ect>
\t6 <string_literal> ) ; } } \n \t2 catch ( throwable t ) { \n \t3 <comment> \n \t3 if ( logger != null ) { \n <ect>
\t1 return this ; } \n @ override \n public configuration <identifiersep> builder consistent <identifiersep> hash <identifiersep> impl ( int version , class < ? extends consistent <identifiersep> hash > consistent <identifiersep> hash <identifiersep> class ) { \n \t1 if ( version == 1 ) { \n <ect>
\t2 else { \n \t3 try { \n \t4 reply = reply <identifiersep> queue . poll ( this . receive <identifiersep> timeout , time <identifiersep> unit . milliseconds ) ; } \n \t3 catch ( interrupted <identifiersep> exception e ) { \n <ect>
public void handle ( request request , response response ) { \n \t1 if ( ! web <identifiersep> server . is <identifiersep> standalone ( ) ) { \n \t1 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t1 user <identifiersep> session . check <identifiersep> is <identifiersep> system <identifiersep> <identifier> ( ) ; \n <ect>
\t1 load <identifiersep> instance ( ) ; \n \t1 logger . info ( <string_literal> ) ; } \n @ subscribe \n public void jpa <identifiersep> initialized ( jpa <identifiersep> initialized <identifiersep> event event ) { \n <ect>
\t3 imaging <identifiersep> tasks . transit <identifiersep> state ( task , import <identifiersep> task <identifiersep> state . <identifier> , import <identifiersep> task <identifiersep> state . cancelled , null ) ; \t1 \n \t2 } catch ( final exception ex ) { \n \t3 log . warn ( <string_literal> + task . get <identifiersep> display <identifiersep> name ( ) ) ; } } \n \t1 } catch ( final exception ex ) { \n <ect>
\t3 attempt <identifiersep> item <identifiersep> advance <identifiersep> final ( role . <identifier> , false ) ; \n \t3 context <identifiersep> reload ( ) ; \n \t2 } catch ( exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t3 public void handle <identifiersep> exception ( exception e , logger log , string name ) { \n \t4 if ( get <identifiersep> exception ( no <identifiersep> such <identifiersep> component <identifiersep> exception . class , e ) != null ) { \n \t5 <comment> \n \t4 } else if ( get <identifiersep> exception ( component <identifiersep> definition <identifiersep> exception . class , e ) != null ) { \n <ect>
\t5 list < <identifier> <identifiersep> definition > r = get <identifiersep> <identifier> ( ) ; \n \t5 <identifier> = sort ( filter <identifiersep> exclude <identifiersep> include ( r ) ) ; \n \t5 log . info ( <string_literal> , <identifier> <identifiersep> size ( r , <identifier> ) ) ; } \n \t4 catch ( exception e ) { \n <ect>
\t3 file <identifiersep> utils . make <identifiersep> part <identifiersep> name ( new array <identifiersep> list < > ( old <identifiersep> part <identifiersep> spec . key <identifiersep> set ( ) ) , new array <identifiersep> list < > ( old <identifiersep> part <identifiersep> spec . values ( ) ) ) ) ; } \n \t1 return 0 ; } \n \t1 string names [ ] = utilities . get <identifiersep> db <identifiersep> table <identifiersep> name ( table <identifiersep> name ) ; \n \t1 if ( utils . is <identifiersep> bootstrap <identifiersep> dump <identifiersep> in <identifiersep> progress ( db , names [ 0 ] ) ) { \n <ect>
\t3 } catch ( exception e ) { \n \t5 log . trace ( <string_literal> , e ) ; \n \t4 } else { \n <ect>
\t6 peer <identifiersep> discovery . shutdown ( ) ; } \n \t5 v <identifiersep> running = false ; \n \t5 log . info ( <string_literal> ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t4 return ; } \n \t2 } else { \n \t3 command <identifiersep> class = resolve <identifiersep> converter ( provider . get <identifiersep> item ( item <identifiersep> name ) , node , binding <identifiersep> configuration . get <identifiersep> endpoint ( ) ) ; } \n \t2 if ( command <identifiersep> class == null ) { \n <ect>
\t2 try { \n \t3 output <identifiersep> buffer = byte <identifiersep> buffer . allocate ( udp <identifiersep> command <identifiersep> name . get <identifiersep> bytes ( charset ) . length ) ; \n \t3 output <identifiersep> buffer . put ( udp <identifiersep> command <identifiersep> name . get <identifiersep> bytes ( charset ) ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t2 log . error ( e ) ; \n \t2 throw new metrics <identifiersep> system <identifiersep> initialization <identifiersep> exception ( <string_literal> + \n \t3 <string_literal> , e ) ; } \n \t1 } else { \n <ect>
\t2 status status ; \n \t2 try { \n \t2 status = status . parse <identifiersep> from ( entry . get <identifiersep> value ( ) . get ( ) ) ; \n \t2 } catch ( invalid <identifiersep> protocol <identifiersep> buffer <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + vm ) ; } \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + vm ) ; } \n \t2 list < volume <identifiersep> vo > vols = <identifier> <identifiersep> vols <identifiersep> dao . find <identifiersep> usable <identifiersep> volumes <identifiersep> for <identifiersep> instance ( vm . get <identifiersep> id ( ) ) ; \n <ect>
\t4 + <string_literal> ) ; } } \n \t1 } catch ( hive <identifiersep> exception e ) { \n \t2 throw e ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 return false ; } \n \t1 private void fix <identifiersep> properties ( node <identifiersep> builder node ) { \n \t2 node <identifiersep> state version <identifiersep> history = get <identifiersep> version <identifiersep> history <identifiersep> node <identifiersep> state ( version <identifiersep> storage . get <identifiersep> node <identifiersep> state ( ) , node . get <identifiersep> string ( jcr <identifiersep> uuid ) ) ; \n \t2 if ( ! version <identifiersep> history . exists ( ) ) { \n <ect>
\t3 } else { \n \t4 try { \n \t5 virtual <identifiersep> <identifier> <identifiersep> card <identifiersep> type . value <identifiersep> of ( nic <identifiersep> device <identifiersep> type ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 else { \n \t4 <comment> \n \t4 <comment> \n \t4 ns <identifiersep> log . err . <identifier> ( <string_literal> <string_literal> \\ <string_literal> ) ; \n <ect>
@ override \n public string [ ] get <identifiersep> partition <identifiersep> keys ( string location , job job ) throws io <identifiersep> exception { \n \t1 string job <identifiersep> to <identifiersep> string = string . format ( <string_literal> , job . get <identifiersep> job <identifiersep> id ( ) , job . get <identifiersep> job <identifiersep> name ( ) ) ; \n <ect>
\t6 <comment> \n \t6 <identifier> <identifiersep> search . new <identifiersep> peer <identifiersep> to <identifiersep> try ( peer ) ; \n \t6 old <identifiersep> peers ++ ; } } \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 throw new runtime <identifiersep> exception ( <string_literal> + uploaded <identifiersep> jar <identifiersep> location , e ) ; } \n \t2 try { \n \t3 flink <identifiersep> client . add <identifiersep> storm <identifiersep> config <identifiersep> to <identifiersep> topology ( topology , conf ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 object mc = get <identifiersep> management <identifiersep> object <identifiersep> strategy ( ) . get <identifiersep> managed <identifiersep> object <identifiersep> for <identifiersep> component ( camel <identifiersep> context , component , name ) ; \n \t3 manage <identifiersep> object ( mc ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 m <identifiersep> direct <identifiersep> ack <identifiersep> timeout = integer . parse <identifiersep> int ( s ) ; \n \t4 logger . trace ( <string_literal> , m <identifiersep> direct <identifiersep> ack <identifiersep> timeout ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 return rv ; } \n \t1 private class null <identifiersep> scheduler implements task <identifiersep> scheduler { \n \t2 public void event <identifiersep> occurred ( connection con ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 self . assert <identifiersep> true ( stats , <string_literal> ) \n \t1 @ <identifier> \n \t1 def tear <identifiersep> down <identifiersep> class ( cls ) : \n \t2 try : \n <ect>
\t1 public void tear <identifiersep> down ( ) { \n \t2 call <identifiersep> context . unregister ( ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> <identifier> <identifiersep> public <identifiersep> ip <identifiersep> range ( ) throws exception { \n <ect>
\t2 integer seq = integer . value <identifiersep> of ( prop . get <identifiersep> property ( <string_literal> ) ) & <identifier> ; \n \t2 long ts = long . value <identifiersep> of ( prop . get <identifiersep> property ( <string_literal> ) ) ; \n \t2 clock <identifiersep> seq . set ( seq ) ; \n \t2 time <identifiersep> stamp . set ( ts ) ; \n <ect>
\t3 m . set <identifiersep> text ( <string_literal> ) ; \n \t3 producer . send ( m ) ; \n \t3 <comment> \n \t3 array <identifiersep> list < long > db <identifiersep> seq = db <identifiersep> message <identifiersep> count ( check <identifiersep> on <identifiersep> store <identifiersep> connection ) ; \n <ect>
\t6 local <identifiersep> event . set <identifiersep> source ( <identifier> <identifiersep> <identifier> <identifiersep> document ( remote <identifiersep> event . get <identifiersep> source ( ) , xcontext ) ) ; \n \t5 } else { \n \t6 local <identifiersep> event . set <identifiersep> source ( <identifier> <identifiersep> document ( remote <identifiersep> event . get <identifiersep> source ( ) ) ) ; } } \n \t3 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t3 solr <identifiersep> server <identifiersep> configuration <identifiersep> provider solr <identifiersep> server <identifiersep> configuration <identifiersep> provider = solr <identifiersep> server <identifiersep> configuration <identifiersep> providers . get ( server <identifiersep> type ) ; \n \t3 if ( solr <identifiersep> server <identifiersep> configuration <identifiersep> provider != null ) { \n \t4 try { \n \t5 solr <identifiersep> server = new oak <identifiersep> solr <identifiersep> server ( solr <identifiersep> server <identifiersep> configuration <identifiersep> provider ) ; \n <ect>
\t4 failing = true ; \n \t4 <comment> \n \t4 failing <identifiersep> since = latest <identifiersep> error <identifiersep> time ; \n \t4 latest <identifiersep> error <identifiersep> warn = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t2 if ( r <identifiersep> service == null || ! r <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed ( ) ) { \n \t3 logger . warn ( <string_literal> , service , get <identifiersep> default <identifiersep> theme <identifiersep> name ( ) ) ; \n \t3 return remember <identifiersep> theme <identifiersep> name ( request ) ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( r <identifiersep> service . get <identifiersep> theme ( ) ) ) { \n <ect>
\t2 final double log <identifiersep> <number_literal> = math . <identifier> ( <number_literal> ) ; \n \t2 for ( int n = 0 ; n < n ; n ++ ) quality <identifiersep> sum <identifiersep> <identifier> . add ( <number_literal> * ( n * log <identifiersep> <number_literal> + log <identifiersep> <identifier> <identifiersep> threshold ) ) ; \n \t2 <comment> \n \t2 <comment> \n <ect>
\t5 } catch ( io <identifiersep> exception ioe ) { \n \t7 log . trace ( <string_literal> , ioe ) ; \n \t6 } else { \n <ect>
\t2 public void run ( ) { \n \t3 try { \n \t4 <identifier> ( ) ; \n \t3 } catch ( runtime <identifiersep> exception re ) { \n <ect>
\t2 message <identifiersep> consumer message <identifiersep> consumer = create <identifiersep> consumer ( ) ; \n \t2 <comment> \n \t2 send <identifiersep> messages ( messages <identifiersep> to <identifiersep> send ) ; \n \t2 final broker <identifiersep> view <identifiersep> m <identifiersep> bean broker <identifiersep> view = get <identifiersep> broker <identifiersep> view ( broker ) ; \n <ect>
\t4 protected string apply <identifiersep> null <identifiersep> safe ( @ nonnull <identifier> <identifiersep> request request ) { \n \t5 try { \n \t6 return io <identifiersep> utils . to <identifiersep> string ( request . get <identifiersep> input <identifiersep> stream ( ) , charsets . utf <identifiersep> <number_literal> ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 log . warning ( log . fac <identifiersep> test , <string_literal> + e . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 log . log <identifiersep> stack <identifiersep> trace ( log . fac <identifiersep> test , level . warning , e ) ; \n \t3 assert . fail ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n <ect>
\t1 throw e ; } } \n @ override \n public void replay ( string directory ) throws io <identifiersep> exception \n { \n <ect>
\t2 } catch ( storage <identifiersep> unavailable <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( insufficient <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t6 } else { \n \t7 cause = new persistence <identifiersep> exception ( e ) ; } } \n \t5 if ( cause != null ) { \n \t6 if ( ! is <identifiersep> transacted ( ) ) { \n <ect>
\t3 param . set <identifiersep> username ( username ) ; \n \t3 param . set <identifiersep> password ( password ) ; \n \t3 viewer = console <identifiersep> proxy . get <identifiersep> ajax <identifiersep> vnc <identifiersep> viewer ( param , ajax <identifiersep> session <identifiersep> id <identifiersep> str ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 <comment> \n \t3 return ( class < ? extends object > ) <identifier> <identifiersep> utils . get <identifiersep> class <identifiersep> for <identifiersep> doc ( doc ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 commands fetch <identifiersep> iface <identifiersep> cmds = \n \t5 new commands ( new ovs <identifiersep> fetch <identifiersep> interface <identifiersep> command ( <identifier> <identifiersep> net <identifiersep> label ) ) ; \n <ect>
\t3 <identifier> <identifiersep> transport . failed ( state , false ) ; \n \t3 return ; } \n \t2 if ( state . get <identifiersep> peer ( ) != this ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 o = request . get <identifiersep> input <identifiersep> stream ( ) ; \n \t4 } else if ( o == null ) { \n \t5 o = read <identifiersep> <identifier> ( resource ) ; \n \t5 if ( is <identifiersep> body <identifiersep> empty ( o ) ) { \n <ect>
\t3 ps . set <identifiersep> string ( <number_literal> , jdbc <identifiersep> message <identifiersep> store . this . region ) ; \n \t2 } ) ; \n \t2 this . jdbc <identifiersep> template . update ( get <identifiersep> query ( query . delete <identifiersep> message <identifiersep> group ) , ps - > { \n <ect>
\t3 b = this . add ( conversion <identifiersep> utils . make <identifiersep> relative <identifiersep> url ( base <identifiersep> url , url ) ) ; \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception <identifier> ) { \n \t3 <comment> \n <ect>
\t3 final response < search <identifiersep> result > response = ldap <identifiersep> utils \n \t4 . execute <identifiersep> search <identifiersep> operation ( this . connection <identifiersep> factory , this . ldap . get <identifiersep> base <identifiersep> dn ( ) , filter , att ) ; \n \t3 if ( ldap <identifiersep> utils . contains <identifiersep> result <identifiersep> entry ( response ) ) { \n \t4 final collection < ldap <identifiersep> entry > results = response . get <identifiersep> result ( ) . get <identifiersep> entries ( ) ; \n <ect>
\t7 break ; \n \t6 case <string_literal> : \n \t7 final boolean <identifier> <identifiersep> state = <identifier> . get <identifiersep> <identifier> ( ) ; \n \t7 if ( state <identifiersep> changed ( device <identifiersep> id , property , <identifier> <identifiersep> state ) ) { \n <ect>
\t3 <identifier> ++ ; \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n \t4 <identifier> <identifiersep> log . info ( <string_literal> + key . to <identifiersep> base64 ( ) + <string_literal> + peer . to <identifiersep> base64 ( ) ) ; } \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 internal <identifiersep> cluster ( ) . full <identifiersep> restart ( ) ; \n \t2 ensure <identifiersep> <identifier> ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> state = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . get ( ) . get <identifiersep> state ( ) ; \n <ect>
\t4 assert <identifiersep> equals ( <string_literal> + \n \t8 <string_literal> , parser . text ( ) ) ; \n \t4 verify <identifiersep> stale <identifiersep> shard <identifiersep> copy <identifiersep> node <identifiersep> decisions ( parser , 1 , collections . empty <identifiersep> set ( ) ) ; } } } \n \t1 public void test <identifiersep> unassigned <identifiersep> replica <identifiersep> delayed <identifiersep> allocation ( ) throws exception { \n <ect>
private void add <identifiersep> client <identifiersep> to <identifiersep> pool <identifiersep> <identifier> ( h <identifiersep> client client ) { \n \t1 try { \n \t1 available <identifiersep> client <identifiersep> queue . add ( client ) ; \n \t1 } catch ( illegal <identifiersep> state <identifiersep> exception ise ) { \n <ect>
\t2 break ; \n \t1 case node <identifiersep> created : \n \t2 <comment> \n \t2 if ( null == path ) { \n <ect>
<comment> \n \t1 public boolean verify <identifiersep> signature ( ) { \n \t2 if ( get <identifiersep> signature ( ) == null ) { \n <ect>
\t5 + <string_literal> , item . get <identifiersep> value ( ) ) ; \n \t4 if ( properties . get <identifiersep> replication <identifiersep> mode ( ) == streaming <identifiersep> service <identifiersep> registry <identifiersep> properties . replication <identifiersep> modes . active <identifiersep> active ) { \n \t5 service <identifiersep> registry . save ( item . get <identifiersep> value ( ) ) ; } \n \t4 return item . get <identifiersep> value ( ) ; } \n <ect>
\t3 string translation = context . get <identifiersep> message <identifiersep> source <identifiersep> service ( ) . get <identifiersep> message ( code , args , l ) ; \n \t3 if ( translation != null ) { \n \t4 return translation ; } } \n \t2 catch ( no <identifiersep> such <identifiersep> message <identifiersep> exception e ) { \n <ect>
\t4 { \n \t5 update <identifiersep> <identifier> . pull <identifiersep> updates ( ) ; } \n \t4 catch ( interrupted <identifiersep> exception e ) \n \t4 { \n <ect>
\t1 worker <identifiersep> executor . shutdown ( ) ; \n \t1 try { \n \t1 worker <identifiersep> executor . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 logger . warn ( <string_literal> , get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t3 return false ; } \n \t2 satisfied = ! this . renew || assertion . is <identifiersep> from <identifiersep> new <identifiersep> login ( ) ; \n \t2 if ( ! satisfied ) { \n <ect>
\t3 { \n \t4 ae <identifiersep> log . info ( <string_literal> ) ; } } \n \t2 this . registration . initialize ( event , this . recipe <identifiersep> directory , this . custom <identifiersep> recipe <identifiersep> config ) ; \n \t2 integration <identifiersep> registry . instance . init ( ) ; \n <ect>
\t2 servlet <identifiersep> session <identifiersep> config cookie <identifiersep> config = deployment <identifiersep> info . get <identifiersep> servlet <identifiersep> session <identifiersep> config ( ) ; \n \t2 if ( cookie <identifiersep> config == null ) { \n \t3 cookie <identifiersep> config = new servlet <identifiersep> session <identifiersep> config ( ) ; } \n \t2 if ( cookie <identifiersep> config . get <identifiersep> path ( ) == null ) { \n <ect>
\t3 log . trace ( <string_literal> , ignored ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> + os <identifiersep> kernel <identifiersep> copy <identifiersep> template <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 break ; } \n \t4 prefix = prefix . substring ( 0 , ix <identifiersep> <identifier> ) ; } } \n \t2 if ( accept <identifiersep> extension ( ext ) == false ) \n \t2 { \n <ect>
\t1 { \n \t2 p . shutdown ( true ) ; } \n \t1 catch ( exception e ) \n \t1 { \n <ect>
private void remove <identifiersep> temp <identifiersep> logs ( path table <identifiersep> path ) throws io <identifiersep> exception { \n \t1 file <identifiersep> system fs = table <identifiersep> path . get <identifiersep> file <identifiersep> system ( configuration ) ; \n \t1 path logs <identifiersep> path = new path ( table <identifiersep> path , <string_literal> ) ; \n \t1 if ( fs . exists ( logs <identifiersep> path ) ) { \n <ect>
\t3 for ( integer ssh <identifiersep> key <identifiersep> id : generated <identifiersep> ssh <identifiersep> key <identifiersep> ids ) { \n \t3 try { \n \t4 api . key <identifiersep> api ( ) . delete ( ssh <identifiersep> key <identifiersep> id ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 if ( transport != null ) { \n \t5 transport . close ( ) ; } \n \t3 } catch ( messaging <identifiersep> exception ex ) { \n \t4 logger . error ( <string_literal> , ex ) ; } \n <ect>
\t3 license = <string_literal> ; \n \t3 while ( ( line <identifiersep> in = br . read <identifiersep> line ( ) ) != null ) { \n \t4 license = license + line <identifiersep> in + ' \\ n' ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 @ <identifier> \n \t1 public static class handler <identifiersep> interceptor { \n \t2 @ before ( <string_literal> ) \n \t2 public void around ( string input ) { \n <ect>
\t3 client = new http <identifiersep> client ( ) ; \n \t3 method = new get <identifiersep> method ( url ) ; \n \t3 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n \t3 s <identifiersep> logger . info ( <string_literal> + url ) ; \n <ect>
\t2 log log = new log ( ) ; \n \t2 array <identifiersep> list < string > os <identifiersep> jar <identifiersep> path = new array <identifiersep> list < > ( ) ; \n \t2 string [ ] os <identifiersep> dest <identifiersep> jar = { null } ; \n \t2 if ( ! process <identifiersep> args ( log , args , os <identifiersep> jar <identifiersep> path , os <identifiersep> dest <identifiersep> jar ) ) { \n <ect>
\t2 if ( result != null && result . size ( ) > 0 ) { \n \t3 ip <identifiersep> addr = result . get ( 0 ) . get <identifiersep> ip <identifiersep> address ( ) ; \n \t3 private <identifiersep> ip <identifiersep> addr = result . get ( 0 ) . get <identifiersep> private <identifiersep> ip <identifiersep> address ( ) ; } } \n \t1 } catch ( final exception ex ) { \n <ect>
\t5 document . set <identifiersep> parent <identifiersep> reference ( <identifier> <identifiersep> parent ) ; \n \t5 save = true ; } } \n \t3 if ( save ) { \n \t4 wiki . save <identifiersep> document ( document , <string_literal> , true , context ) ; \n <ect>
\t3 initialize <identifiersep> connect <identifiersep> and <identifiersep> login ( authority , \n \t4 security <identifiersep> authority . authentication <identifiersep> required ) ; } \n \t2 catch ( xmpp <identifiersep> exception ex ) \n \t2 { \n <ect>
\t3 logger . debug ( <string_literal> , this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms ) ; } \n \t2 if ( override <identifiersep> white <identifiersep> listed <identifiersep> algorithms != null && ! override <identifiersep> white <identifiersep> listed <identifiersep> algorithms . is <identifiersep> empty ( ) ) { \n \t3 validation <identifiersep> params . set <identifiersep> whitelisted <identifiersep> algorithms ( this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms ) ; \n \t3 logger . debug ( <string_literal> , this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms ) ; } \n <ect>
\t2 int <identifier> = 0 ; \n \t2 try { \n \t3 <identifier> = integer . parse <identifiersep> int ( <identifier> . get <identifiersep> attribute ( <string_literal> ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 desc <identifiersep> tbl <identifiersep> desc ) ) ; \n \t1 root <identifiersep> tasks . add ( ddl <identifiersep> task ) ; \n \t1 string schema = desc <identifiersep> table <identifiersep> desc . get <identifiersep> schema ( show <identifiersep> col <identifiersep> stats ) ; \n \t1 set <identifiersep> fetch <identifiersep> task ( create <identifiersep> fetch <identifiersep> task ( schema ) ) ; \n <ect>
\t4 if ( remove <identifiersep> volume ) { \n \t5 pstmt = conn . prepare <identifiersep> statement ( <string_literal> ) ; \n \t5 pstmt . set <identifiersep> long ( 1 , id ) ; \n \t5 pstmt . execute <identifiersep> update ( ) ; \n <ect>
\t2 m <identifiersep> version = c . get <identifiersep> package ( ) . get <identifiersep> implementation <identifiersep> version ( ) ; \n \t2 if ( m <identifiersep> version == null ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + user <identifiersep> id + <string_literal> + owner <identifiersep> id ) ; } \n \t3 account <identifiersep> to <identifiersep> lock = <identifier> <identifiersep> account <identifiersep> dao . acquire <identifiersep> in <identifiersep> lock <identifiersep> table ( owner <identifiersep> id ) ; \n \t3 if ( account <identifiersep> to <identifiersep> lock == null ) { \n <ect>
\t3 job . wait <identifiersep> for <identifiersep> completion ( true ) ; } \n \t2 catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; } \n \t2 catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t10 throw le ; } \n \t8 } else { \n \t9 log . error ( <string_literal> , principal , le ) ; } } } \n \t5 } catch ( login <identifiersep> exception le ) { \n <ect>
\t2 <comment> \n \t2 calendar cache <identifiersep> expire = ( calendar ) now . clone ( ) ; \n \t2 cache <identifiersep> expire . add ( calendar . <identifier> , <number_literal> ) ; \n \t2 if ( expires . after ( cache <identifiersep> expire ) ) \n <ect>
\t2 } catch ( index <identifiersep> closed <identifiersep> exception e ) { \n \t3 <comment> \n \t2 logger . info ( <string_literal> ) ; \n \t2 client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> open ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) ; \n <ect>
\t2 while ( ! interrupted ( ) && ! soft <identifiersep> interrupted ) { \n \t3 try { \n \t4 wait <identifiersep> condition ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 volume v = fs . get <identifiersep> volume <identifiersep> by <identifiersep> path ( tmp <identifiersep> dir ) ; \n \t1 if ( v . get <identifiersep> file <identifiersep> system ( ) . exists ( tmp <identifiersep> dir ) ) { \n \t2 fs . delete <identifiersep> <identifier> ( tmp <identifiersep> dir ) ; \n \t2 return ; } \n <ect>
<comment> \n \t1 public void handle <identifiersep> task ( final user <identifiersep> action <identifiersep> request in <identifiersep> user <identifiersep> action <identifiersep> request ) \n \t1 { \n \t2 <comment> \n <ect>
\t5 log . debug ( <string_literal> + node <identifiersep> id + <string_literal> + msg + ' ] ' ) ; \n \t4 return ; } \n <ect>
\t5 read ++ ; \n \t5 extract <identifiersep> content ( buffer , prop <identifiersep> buffer , msg , read == loop ) ; } \n \t3 } catch ( jms <identifiersep> exception e ) { \n \t4 string error <identifiersep> code = optional . of <identifiersep> nullable ( e . get <identifiersep> error <identifiersep> code ( ) ) . or <identifiersep> else ( <string_literal> ) ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 unregister <identifiersep> request = sip <identifiersep> provider . get <identifiersep> message <identifiersep> factory ( ) \n \t4 . create <identifiersep> un <identifiersep> register <identifiersep> request ( register <identifiersep> request , get <identifiersep> next <identifiersep> c <identifiersep> seq <identifiersep> value ( ) ) ; } \n \t2 catch ( invalid <identifiersep> argument <identifiersep> exception ex ) \n \t2 { \n <ect>
\t3 client . disconnected ( ask <identifiersep> for <identifiersep> reconnect ) ; <comment> \n \t3 ping <identifiersep> time . clear ( ) ; } } \n \t1 @ override \n \t1 public synchronized void reconnect ( throwable throwable ) { \n <ect>
\t4 thread <identifiersep> monitor . add <identifiersep> error ( e ) ; \n \t4 logger . error ( <string_literal> , e ) ; \n \t3 } catch ( runtime <identifiersep> exception e ) { \n \t4 thread <identifiersep> monitor . add <identifiersep> error ( e ) ; \n <ect>
\t5 logger . warn ( <string_literal> + line ) ; } \n \t3 } else { \n \t4 logger . warn ( <string_literal> + line ) ; } \n \t2 } else { \n <ect>
\t3 try { \n \t4 ( ( <identifier> <identifiersep> bean ) connection <identifiersep> provider ) . destroy ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 ( t instanceof out <identifiersep> of <identifiersep> memory <identifiersep> error && task <identifiersep> manager <identifiersep> config . should <identifiersep> exit <identifiersep> jvm <identifiersep> on <identifiersep> out <identifiersep> of <identifiersep> memory <identifiersep> error ( ) ) ) { \n \t5 <comment> \n \t5 <comment> \n \t5 try { \n <ect>
\t1 return optional . absent ( ) ; } \n \t1 for ( string entry : key <identifiersep> values . split ( <string_literal> ) ) { \n \t1 string [ ] kv = entry . split ( <string_literal> ) ; \n \t1 if ( kv . length != <number_literal> ) { \n <ect>
\t3 try ( output <identifiersep> stream output <identifiersep> stream = response . get <identifiersep> output <identifiersep> stream ( ) ) { \n \t4 response . set <identifiersep> content <identifiersep> type ( <string_literal> ) ; \n \t4 response . set <identifiersep> content <identifiersep> length ( 0 ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 string xsd <identifiersep> name = xml <identifiersep> reader . get <identifiersep> attribute <identifiersep> value ( xml <identifiersep> constants . <identifier> <identifiersep> xml <identifiersep> schema <identifiersep> instance <identifiersep> ns <identifiersep> uri , <string_literal> ) ; \n \t1 input <identifiersep> stream xsd <identifiersep> stream = null ; \n \t1 if ( null != xsd <identifiersep> name ) { \n \t1 if ( log <identifiersep> xsd ) { \n <ect>
\t2 super . start ( ) ; } \n \t1 public void run ( ) { \n \t2 try { \n \t3 while ( true ) { \n <ect>
\t3 string decoded <identifiersep> data = comm . decode <identifiersep> message ( rec <identifiersep> data ) ; \n \t3 if ( decoded <identifiersep> data == null ) { \n \t4 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t3 if ( decoded <identifiersep> data == <string_literal> ) { \n <ect>
\t2 if ( result <identifiersep> set == null && boolean <identifiersep> result == null ) { \n \t3 <identifier> . warn ( <string_literal> ) ; \n \t3 throw new fuseki <identifiersep> exception ( <string_literal> ) ; } \n \t2 if ( result <identifiersep> set != null && boolean <identifiersep> result != null ) { \n <ect>
<number_literal> sword <identifiersep> validation <identifiersep> info <identifiersep> type . error ) ; \n \t6 info . set <identifiersep> content <identifiersep> description ( element . get <identifiersep> value ( ) ) ; \n \t6 validation <identifiersep> items . add ( info ) ; } } } \n \t2 } catch ( exception ex ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> initialize ( ) throws exception { \n \t2 new context ( ) { { \n \t3 start <identifiersep> resource <identifiersep> manager ( ) ; \n <ect>
\t3 stopping <identifiersep> condition = stop ; } \n \t2 @ override \n \t2 public least <identifiersep> <identifier> <identifiersep> item <identifiersep> <identifier> get ( ) { \n \t3 collection < <identifier> <identifiersep> matrix <identifiersep> entry > ratings = snapshot . get <identifiersep> ratings ( ) ; \n <ect>
\t4 string str = kie <identifiersep> builder <identifiersep> impl . generate <identifiersep> pom <identifiersep> properties ( <identifier> ) ; \n \t4 log . info ( <string_literal> + file ) ; \n \t4 return str ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 transport <identifiersep> <identifier> <identifiersep> <identifier> . load <identifiersep> <identifier> <identifiersep> <identifier> ( ) ; \n \t2 } else { \n \t3 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n \t3 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n <ect>
\t1 transactions . find ( new bucket <identifiersep> info ( bucket <identifiersep> name ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 throw new no <identifiersep> such <identifiersep> bucket <identifiersep> exception ( bucket <identifiersep> name ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 if ( is <identifiersep> document <identifiersep> enabled ( document <identifiersep> reference ) ) { \n \t4 write <identifiersep> document ( document <identifiersep> reference , filter , proxy <identifiersep> filter ) ; \n \t3 } else { \n \t4 if ( this . properties . is <identifiersep> verbose ( ) ) { \n <ect>
\t2 this . spool <identifiersep> folder = spool <identifiersep> folder ; \n \t2 try { \n \t3 management <identifiersep> factory . get <identifiersep> platform <identifiersep> m <identifiersep> bean <identifiersep> server ( ) . register <identifiersep> m <identifiersep> bean ( new standard <identifiersep> m <identifiersep> bean ( this , client <identifiersep> <identifier> <identifiersep> status <identifiersep> m <identifiersep> bean . class ) , new object <identifiersep> name ( this . get <identifiersep> m <identifiersep> bean <identifiersep> name ( ) ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 } catch ( exception e ) { \n \t1 try { \n \t2 config = transactions . save ( new block <identifiersep> storage <identifiersep> global <identifiersep> configuration ( ) ) ; \n \t1 } catch ( exception e1 ) { \n <ect>
\t2 while ( tok . has <identifiersep> more <identifiersep> tokens ( ) ) { \n \t3 string elem = tok . next <identifiersep> token ( ) . trim ( ) ; \n \t3 file f = new file ( elem ) ; \n \t3 if ( ! f . is <identifiersep> absolute ( ) ) { \n <ect>
\t5 if ( networks <identifiersep> for <identifiersep> account == null ) { \n \t6 continue ; } \n \t5 for ( network <identifiersep> vo network : networks <identifiersep> for <identifiersep> account ) { \n \t6 if ( ! <identifier> <identifiersep> network <identifiersep> model . network <identifiersep> is <identifiersep> configured <identifiersep> for <identifiersep> external <identifiersep> <identifier> ( zone <identifiersep> id , network . get <identifiersep> id ( ) ) ) { \n <ect>
\t6 + register <identifiersep> link , e1 ) ; } \n \t2 catch ( io <identifiersep> exception e1 ) \n \t2 { \n <ect>
\t2 <comment> \n \t2 date <identifiersep> format date <identifiersep> format = new simple <identifiersep> date <identifiersep> format ( <string_literal> ) ; \n \t2 date current <identifiersep> date = new date ( ) ; \n \t2 string end <identifiersep> date = date <identifiersep> format . format ( current <identifiersep> date ) ; \n <ect>
\t1 @ override \n \t1 protected void verify <identifiersep> <identifier> ( ) throws command <identifiersep> exception , <identifier> <identifiersep> exception { \n \t2 if ( coord <identifiersep> job . get <identifiersep> status ( ) == coordinator <identifiersep> job . status . killed \n \t4 || coord <identifiersep> job . get <identifiersep> status ( ) == coordinator <identifiersep> job . status . failed ) { \n <ect>
\t3 assert rsrc3 != null ; \n \t3 assert rsrc4 != null ; \n \t3 assert log != null ; \n \t3 log . info ( <string_literal> + rsrc1 ) ; \n <ect>
\t2 work <identifiersep> item <identifiersep> producer . send ( master <identifiersep> session \n \t4 . create <identifiersep> object <identifiersep> message ( new work <identifiersep> message ( 1 ) ) ) ; \n \t2 if ( ! latch . get ( ) . await ( wait <identifiersep> timeout , time <identifiersep> unit . milliseconds ) ) { \n \t3 fail ( <string_literal> + acks <identifiersep> received + <string_literal> ) ; } \n <ect>
\t6 <comment> \n \t6 for ( system <identifiersep> metric m : result ) { \n \t7 <identifier> <identifiersep> service . offer ( m ) ; } \n \t5 } catch ( exception e ) { \n <ect>
\t2 logger . info ( <string_literal> + start <identifiersep> time ) ; \n \t2 list < long > <identifier> <identifiersep> cuboid <identifiersep> list = algorithm . <identifier> ( kylin <identifiersep> conf . get <identifiersep> cube <identifiersep> planner <identifiersep> expansion <identifiersep> rate <identifiersep> threshold ( ) ) ; \n \t2 logger . info ( <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ) ) ; \n \t2 if ( <identifier> <identifiersep> cuboid <identifiersep> list . size ( ) < all <identifiersep> cuboid <identifiersep> count ) { \n <ect>
\t1 # : <identifier> <identifiersep> mb = > <string_literal> \n \t1 try : \n \t1 return int ( self . data <identifiersep> return <identifiersep> first ( <string_literal> <ect>
\t3 string <identifiersep> builder sb = new string <identifiersep> builder ( ) ; \n \t3 string line ; \n \t3 while ( ( line = <identifier> . read <identifiersep> line ( ) ) != null ) { \n \t4 sb . append ( line ) ; } \n <ect>
\t2 <comment> \n \t2 string <identifiersep> writer writer = new string <identifiersep> writer ( ) ; \n \t2 log log = new <identifiersep> formatted <identifiersep> log ( writer ) ; \n \t2 <comment> \n <ect>
\t3 catch ( exception ex ) { \n \t4 provider p = ps . get <identifiersep> provider <identifiersep> by <identifiersep> uuid ( text ) ; \n \t4 set <identifiersep> value ( p ) ; \n \t4 if ( p == null ) { \n <ect>
\t2 if ( context != null ) { \n \t3 context . stop ( ) ; \n \t3 exchange . remove <identifiersep> property ( property <identifiersep> name ) ; \n \t2 } else { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> id ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + info . is <identifiersep> info <identifiersep> found ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . is <identifiersep> deleted ( ) ) ; \n <ect>
\t1 @ override \n \t1 protected void init <identifiersep> repository ( ) throws sql <identifiersep> exception { \n \t2 if ( repository ( ) != null ) { \n \t3 return ; } \n <ect>
<comment> \n \t1 private boolean send <identifiersep> key <identifiersep> sequence ( string key <identifiersep> sequence ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 queued <identifiersep> packets . put ( <identifier> <identifiersep> of <identifiersep> death ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 @ override public object execute ( ) throws grid <identifiersep> exception { \n \t6 assert task <identifiersep> ses != null ; \n \t7 log . info ( <string_literal> + this + <string_literal> + argument ( 0 ) + ' ] ' ) ; \n <ect>
\t3 return auth <identifiersep> result . auth <identifiersep> good ; } \n \t2 if ( authorization == null ) \n \t3 return auth <identifiersep> result . auth <identifiersep> bad ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
<comment> \n \t1 @ override \n \t1 public void init ( filter <identifiersep> config filter <identifiersep> config ) throws servlet <identifiersep> exception { \n \t2 super . init ( filter <identifiersep> config ) ; \n <ect>
\t2 put <identifiersep> execution <identifiersep> latch . release ( ) ; \n \t2 <identifier> . put ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n \t2 <comment> \n <ect>
\t6 . start <identifiersep> object ( <string_literal> ) . field ( <string_literal> , <string_literal> ) . end <identifiersep> object ( ) \n \t6 . end <identifiersep> object ( ) . end <identifiersep> object ( ) . end <identifiersep> object ( ) ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> that ( ensure <identifiersep> green ( ) , equal <identifiersep> to ( cluster <identifiersep> health <identifiersep> status . green ) ) ; \n <ect>
\t2 <comment> \n \t2 string metrics <identifiersep> reporter <identifiersep> config <identifiersep> file = system . get <identifiersep> property ( <string_literal> ) ; \n \t2 if ( metrics <identifiersep> reporter <identifiersep> config <identifiersep> file != null ) \n \t2 { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 if ( connection != null && ! connection . is <identifiersep> closed ( ) ) { \n \t3 if ( get <identifiersep> endpoint ( ) . get <identifiersep> nats <identifiersep> configuration ( ) . is <identifiersep> flush <identifiersep> connection ( ) ) { \n <ect>
\t5 contexts . add ( <identifier> ) ; } \n \t4 <comment> \n \t4 if ( ! entry . is <identifiersep> directory ( ) && starts <identifiersep> with ( path , type , <string_literal> ) && ! string <identifiersep> util . starts <identifiersep> with ( file <identifiersep> name ( entry ) , ' . ' ) ) { \n \t5 <identifier> = path . substring ( <number_literal> ) ; \n <ect>
\t3 line = <identifier> <identifiersep> line ( ) ; \n \t3 if ( line == null ) { \n \t4 <comment> \n \t4 queue . add ( mage <identifiersep> <identifier> ) ; \n <ect>
\t1 private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( durable <identifiersep> subscription <identifiersep> <identifier> . class ) ; \n \t1 @ parameterized . parameters ( name = <string_literal> ) \n \t1 public static collection < persistence <identifiersep> adapter <identifiersep> choice [ ] > get <identifiersep> test <identifiersep> parameters ( ) { \n \t2 string os <identifiersep> name = system . get <identifiersep> property ( <string_literal> ) ; \n <ect>
\t2 log . debug ( <string_literal> , bean <identifiersep> name ) ; \n \t2 if ( ! skip <identifiersep> bean <identifiersep> names . contains ( bean <identifiersep> name ) ) { \n \t3 application <identifiersep> context an <identifiersep> app <identifiersep> context = get <identifiersep> application <identifiersep> context ( extra <identifiersep> context ) ; \n \t3 try { \n <ect>
\t2 publisher = new publisher ( get <identifiersep> use <identifiersep> jndi <identifiersep> properties <identifiersep> as <identifiersep> boolean ( ) , get <identifiersep> jndi <identifiersep> initial <identifiersep> context <identifiersep> factory ( ) , get <identifiersep> provider <identifiersep> url ( ) , \n \t4 get <identifiersep> connection <identifiersep> factory ( ) , get <identifiersep> destination ( ) , is <identifiersep> use <identifiersep> auth ( ) , get <identifiersep> username ( ) , get <identifiersep> password ( ) , \n \t4 is <identifiersep> destination <identifiersep> static ( ) ) ; \n \t2 client <identifiersep> pool . add <identifiersep> client ( publisher ) ; \n <ect>
\t2 cube <identifiersep> desc . set <identifiersep> engine <identifiersep> type ( i <identifiersep> engine <identifiersep> aware . id <identifiersep> mr <identifiersep> v2 ) ; \n \t2 cube <identifiersep> desc . set <identifiersep> storage <identifiersep> type ( i <identifiersep> storage <identifiersep> aware . id <identifiersep> <identifier> <identifiersep> hbase ) ; \n \t2 cube <identifiersep> desc . calculate <identifiersep> signature ( ) ; \n \t2 cube <identifiersep> desc <identifiersep> manager . update <identifiersep> cube <identifiersep> desc ( cube <identifiersep> desc ) ; \n <ect>
\t1 double time <identifiersep> ms = ( system . nano <identifiersep> time ( ) - start <identifiersep> time ) / <number_literal> . 0 ; \n \t1 log . debug ( <string_literal> + len + <string_literal> + time <identifiersep> ms + <string_literal> ) ; \n \t1 return result ; \n \t1 } catch ( hive <identifiersep> exception ex ) { \n <ect>
\t2 } catch ( io <identifiersep> exception x ) { \n \t3 log . error ( <string_literal> , x ) ; \n \t3 return ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception x ) { \n <ect>
public ns <identifiersep> timestamp date <identifiersep> out ( ) { \n \t1 return ( ns <identifiersep> timestamp ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> <identifier> . date <identifiersep> out <identifiersep> key ) ; } \n public void set <identifiersep> date <identifiersep> out ( ns <identifiersep> timestamp value ) { \n <ect>
\t2 ssl <identifiersep> session session = ssl <identifiersep> socket . get <identifiersep> session ( ) ; \n \t2 ssl <identifiersep> socket . start <identifiersep> handshake ( ) ; \n \t2 log . info ( <string_literal> + session . get <identifiersep> cipher <identifiersep> suite ( ) ) ; \n \t2 log . info ( <string_literal> + session . get <identifiersep> peer <identifiersep> port ( ) ) ; \n <ect>
\t1 @ category ( slow <identifiersep> test . class ) \n \t1 public void get <identifiersep> or <identifiersep> create <identifiersep> slow ( ) throws exception { \n \t2 get <identifiersep> or <identifiersep> create <identifiersep> multi <identifiersep> thread ( slow <identifiersep> num <identifiersep> elements , slow <identifiersep> num <identifiersep> threads ) ; } \n \t1 private void get <identifiersep> or <identifiersep> create <identifiersep> multi <identifiersep> thread ( int num <identifiersep> elements , int num <identifiersep> threads ) throws exception { \n <ect>
\t1 set <identifiersep> accumulo <identifiersep> index <identifiersep> table <identifiersep> name ( job , index <identifiersep> table <identifiersep> name ) ; \n \t1 set <identifiersep> accumulo <identifiersep> index <identifiersep> columns ( job , indexed <identifiersep> columns ) ; \n \t1 set <identifiersep> accumulo <identifiersep> string <identifiersep> encoding ( job , ! binary <identifiersep> encoding ) ; \n \t1 } catch ( accumulo <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t2 long batch <identifiersep> id = ( ( tuple <identifiersep> impl <identifiersep> ext ) input ) . get <identifiersep> batch <identifiersep> id ( ) ; \n \t2 if ( batch <identifiersep> id > 0 ) \n \t3 bolt . fail ( batch <identifiersep> id ) ; \n \t2 else \n <ect>
\t1 write <identifiersep> response <identifiersep> callback . on <identifiersep> response ( transport <identifiersep> response <identifiersep> impl . < rest <identifiersep> response > error ( ex , collections . < string , string > empty <identifiersep> map ( ) ) ) ; } } \n @ override \n public void exception <identifiersep> caught ( channel <identifiersep> handler <identifiersep> context ctx , throwable cause ) throws exception \n { \n <ect>
\t3 try { \n \t4 cmd = msg . get <identifiersep> byte ( <string_literal> ) ; \n \t4 <identifier> = msg . get <identifiersep> byte ( <string_literal> ) ; \n \t3 } catch ( field <identifiersep> exception e ) { \n <ect>
\t5 + <string_literal> + <string_literal> + hl7in <identifiersep> queue . get <identifiersep> <identifier> <identifiersep> key ( ) + <string_literal> ) ; \n \t2 } else { \n \t3 hl7in <identifiersep> queue . set <identifiersep> message <identifiersep> state ( <identifier> . <identifier> <identifiersep> status <identifiersep> processing ) ; } \n <ect>
\t4 log . warn ( <string_literal> ) ; \n \t3 } else if ( action == compute ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t4 appender . append ( new <identifiersep> log <identifiersep> event ) ; \n \t3 } else { \n \t4 logger . warn ( <string_literal> , ref <identifiersep> name ) ; } \n \t2 } else { \n <ect>
\t2 try { \n \t3 update <identifiersep> user ( account , user , users . get ( user ) ) ; \n \t2 } catch ( auth <identifiersep> exception e ) { \n \t3 log . error ( e , e ) ; \n <ect>
\t4 while ( i < split <identifiersep> result . length - 1 ) { \n \t5 stats [ 0 ] += long . parse <identifiersep> long ( split <identifiersep> result [ i ++ ] ) ; \n \t5 stats [ 1 ] += long . parse <identifiersep> long ( split <identifiersep> result [ i ++ ] ) ; } \n \t3 } catch ( throwable e ) { \n <ect>
\t2 final string command = string . format ( <string_literal> , <string_literal> , vr <identifiersep> scripts . <identifier> , <string_literal> , json ) ; \n \t2 try { \n \t3 final pair < boolean , string > result = ssh <identifiersep> helper . ssh <identifiersep> execute ( control <identifiersep> ip , default <identifiersep> domr <identifiersep> <identifier> , <string_literal> , get <identifiersep> system <identifiersep> vm <identifiersep> key <identifiersep> file ( ) , null , command ) ; \n \t3 if ( ! result . first ( ) ) { \n <ect>
when ( connected <identifiersep> state ) { \n \t1 case event ( msg : stop , <identifier> <identifiersep> <identifier> ) = > \n \t1 <identifier> ( stopped <identifiersep> state ) \n \t1 case event ( msg : disconnected , <identifier> <identifiersep> <identifier> ) = > \n <ect>
\t1 @ delete \n \t1 @ consumes ( media <identifiersep> type . application <identifiersep> json ) \n \t1 public void delete <identifiersep> realm <identifiersep> role <identifiersep> mappings ( list < role <identifiersep> representation > roles ) { \n \t2 manage <identifiersep> permission . require ( ) ; \n <ect>
<comment> \n \t1 public void initialize <identifiersep> process ( ) throws exception { \n <ect>
\t5 if ( msg . message . verb == messaging <identifiersep> service . verb . request <identifiersep> response ) \n \t6 tracing . instance . done <identifiersep> with <identifiersep> non <identifiersep> local <identifiersep> session ( state ) ; } } } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t6 <comment> \n \t6 geo <identifiersep> cache . put ( cache <identifiersep> key , result ) ; } \n \t4 } catch ( io <identifiersep> exception ioex ) { \n \t5 <comment> \n <ect>
\t2 if ( server != null ) { \n \t3 try { \n \t4 server . stop ( ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 string <identifiersep> builder log = new string <identifiersep> builder ( ) ; \n \t3 try { \n \t4 result = mr <identifiersep> util . run <identifiersep> mr <identifiersep> job ( job , args ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 <identifier> <identifiersep> <identifier> <identifiersep> install <identifier> <identifiersep> <identifier> = new <identifier> <identifiersep> <identifier> <identifiersep> install ( <string_literal> + <identifier> <identifiersep> <identifier> <identifiersep> display <identifiersep> version , <identifier> <identifiersep> <identifier> <identifiersep> dir , <identifier> <identifiersep> <identifier> <identifiersep> version , <identifier> <identifiersep> <identifier> ) ; \n \t3 found <identifiersep> <identifier> . put ( <identifier> <identifiersep> <identifier> <identifiersep> dir , <identifier> <identifiersep> <identifier> ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t2 fml <identifiersep> common <identifiersep> handler . instance ( ) . bus ( ) . post ( new fml <identifiersep> network <identifiersep> event . client <identifiersep> connected <identifiersep> to <identifiersep> server <identifiersep> event ( manager , this . connection <identifiersep> type . name ( ) ) ) ; } \n \t1 private void complete <identifiersep> server <identifiersep> side <identifiersep> connection ( connection <identifiersep> type type ) \n \t1 { \n \t2 this . connection <identifiersep> type = type ; \n <ect>
\t4 s <identifiersep> logger . warn ( <string_literal> + job . get <identifiersep> id ( ) + <string_literal> ) ; \n \t4 try { \n \t5 <identifier> <identifiersep> queue <identifiersep> mgr . return <identifiersep> item ( item . get <identifiersep> id ( ) ) ; \n \t4 } catch ( exception e2 ) { \n <ect>
\t2 for ( path f : files ) { \n \t3 if ( thread . current <identifiersep> thread ( ) . is <identifiersep> interrupted ( ) ) { \n \t4 throw new interrupted <identifiersep> exception ( <string_literal> ) ; } \n \t3 if ( ! files . is <identifiersep> readable ( f ) ) { \n <ect>
\t4 return binding ; \n \t3 return null ; \n \t2 } catch ( expr <identifiersep> exception ex ) \n \t2 { <comment> \n <ect>
\t3 if ( cmd . get <identifiersep> seq <identifiersep> num ( ) > curr <identifiersep> <identifier> ) { \n \t4 s <identifiersep> logger . info ( <string_literal> + cmd . get <identifiersep> seq <identifiersep> num ( ) + <string_literal> + curr <identifiersep> <identifier> ) ; \n \t4 update <identifiersep> seqno <identifiersep> and <identifiersep> sig = true ; \n \t4 if ( ! cmd . get <identifiersep> signature ( ) . equals ( curr <identifiersep> sig ) ) { \n <ect>
\t2 params [ 0 ] = string . class ; \n \t2 params [ 1 ] = object . class ; \n \t2 execute <identifiersep> m = find <identifiersep> method ( c , <string_literal> , params ) ; \n \t2 if ( execute <identifiersep> m == null ) { \n <ect>
\t3 <comment> \n \t3 <identifier> <identifiersep> runner . do <identifiersep> send ( new set <identifiersep> date <identifiersep> message ( client <identifiersep> version != null ? core <identifiersep> version . version : null ) ) ; \n \t2 } catch ( <identifier> <identifiersep> message <identifiersep> exception <identifier> ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t2 collection < token > tokens ; \n \t2 <comment> \n \t2 tokens = get <identifiersep> tokens <identifiersep> for ( endpoint ) ; \n <ect>
\t2 return full <identifiersep> key [ 1 ] ; } \n \t1 public static byte [ ] routing <identifiersep> key <identifiersep> from <identifiersep> full <identifiersep> key ( byte [ ] key <identifiersep> buf ) { \n \t2 if ( key <identifiersep> buf . length == key <identifiersep> length ) return key <identifiersep> buf ; \n \t2 if ( key <identifiersep> buf . length != full <identifiersep> key <identifiersep> length ) { \n <ect>
\t3 if ( ! <identifier> <identifiersep> nw <identifiersep> helper . send <identifiersep> commands <identifiersep> to <identifiersep> router ( router , cmds ) ) { \n \t4 throw new agent <identifiersep> unavailable <identifiersep> exception ( <string_literal> , router . get <identifiersep> host <identifiersep> id ( ) ) ; } \n \t3 answer answer = cmds . get <identifiersep> answer ( <string_literal> ) ; \n \t3 if ( ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t1 ctx . fire <identifiersep> user <identifiersep> event <identifiersep> triggered ( frame <identifiersep> event . settings <identifiersep> complete ) ; \n \t1 <identifier> <identifiersep> settings <identifiersep> complete <identifiersep> event <identifiersep> <identifier> = true ; } } \n @ override \n public void on <identifiersep> window <identifiersep> update <identifiersep> read ( channel <identifiersep> handler <identifiersep> context ctx , int stream <identifiersep> id , int window <identifiersep> size <identifiersep> increment ) throws <identifier> { \n <ect>
\t1 <comment> \n \t1 public static void move ( path src , path dst ) { \n \t2 try { files . move ( src , dst , standard <identifiersep> copy <identifiersep> option . atomic <identifiersep> move ) ; } \n \t2 catch ( io <identifiersep> exception ex ) { \n <ect>
\t1 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t1 this . conf = get <identifiersep> configuration ( type ) ; \n \t1 this . sasl <identifiersep> enabled = true \n \t2 . equals ( system . get <identifiersep> property ( mini <identifiersep> cluster <identifiersep> <identifier> . use <identifiersep> kerberos <identifiersep> for <identifiersep> it <identifiersep> option ) ) ; \n <ect>
\t4 { \n \t5 index . maybe <identifiersep> refresh <identifiersep> blocking ( ) ; } } \n \t3 catch ( throwable e ) \n \t3 { \n <ect>
\t3 throw new invalid <identifiersep> o <identifiersep> auth <identifiersep> parameters <identifiersep> exception ( messages . get <identifiersep> message ( <string_literal> , <string_literal> ) ) ; } \n \t3 <comment> \n \t3 consumer <identifiersep> details consumer <identifiersep> details = get <identifiersep> consumer <identifiersep> details <identifiersep> service ( ) . load <identifiersep> consumer <identifiersep> by <identifiersep> consumer <identifiersep> key ( consumer <identifiersep> key ) ; \n <ect>
<comment> \n \t1 public synchronized void startup ( ) throws socket <identifiersep> exception { \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 system . exit ( 0 ) ; \n \t3 } catch ( exception ex ) { \n \t4 system . out . print ( <string_literal> ) ; \n \t4 ex . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t3 logger . error ( <string_literal> , e . get <identifiersep> message ( ) , m <identifiersep> serial <identifiersep> device <identifiersep> name ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> port <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , m <identifiersep> serial <identifiersep> device <identifiersep> name ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t3 for ( <identifier> <identifiersep> simulator <identifier> : sim . groups . get ( i ) . blockers ) { \n \t4 groups . get ( i ) . add <identifiersep> blocker ( <identifier> . id , player <identifiersep> id , game ) ; } } } \n \t1 @ override \n \t1 public int choose <identifiersep> replacement <identifiersep> effect ( map < string , string > r <identifiersep> <identifier> , game game ) { \n <ect>
\t2 } finally { \n \t3 <comment> \n \t3 results . sample <identifiersep> end ( ) ; } \n <ect>
\t1 public object peek <identifiersep> params ( ) { \n \t2 try { \n \t3 return ( params . peek ( ) ) ; \n \t2 } catch ( empty <identifiersep> stack <identifiersep> exception e ) { \n <ect>
public string <identifier> ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> employee . <identifier> <identifiersep> key ) ; } \n public void set <identifiersep> <identifier> ( string value ) { \n <ect>
<number_literal> . ssl <identifiersep> provider ( ssl <identifiersep> provider . <identifier> ) . build ( ) ) ; \n \t3 client <identifiersep> contexts . add ( ssl <identifiersep> context <identifiersep> builder . for <identifiersep> client ( ) . ssl <identifiersep> provider ( ssl <identifiersep> provider . <identifier> ) \n <number_literal> . trust <identifiersep> manager ( cert <identifiersep> file ) . build ( ) ) ; \n \t2 } else { \n <ect>
\t1 router . stop ( ) ; } } \n log . info ( <string_literal> ) \n try { \n \t1 router . start ( ) ; \n <ect>
\t2 return app <identifiersep> container ; } \n \t1 public void register ( class < ? > required <identifiersep> type , class < ? > type ) { \n \t1 logger . debug ( <string_literal> , required <identifiersep> type . get <identifiersep> name ( ) , type . get <identifiersep> name ( ) ) ; \n \t1 if ( already <identifiersep> registered ( required <identifiersep> type ) ) { \n <ect>
\t5 logger . error ( <string_literal> , \n \t6 service <identifiersep> ticket <identifiersep> id , service <identifiersep> ticket . get <identifiersep> service ( ) . get <identifiersep> id ( ) , service ) ; \n \t5 throw new <identifier> <identifiersep> service <identifiersep> for <identifiersep> service <identifiersep> ticket <identifiersep> validation <identifiersep> exception ( service <identifiersep> ticket . get <identifiersep> service ( ) ) ; } } \n \t3 final service selected <identifiersep> service = resolve <identifiersep> service <identifiersep> from <identifiersep> authentication <identifiersep> request ( service <identifiersep> ticket . get <identifiersep> service ( ) ) ; \n <ect>
\t3 if ( ( user != null ) && ( password != null ) ) { \n \t4 client . get <identifiersep> params ( ) . set <identifiersep> authentication <identifiersep> <identifier> ( true ) ; \n \t4 credentials <identifier> = new username <identifiersep> password <identifiersep> credentials ( user , password ) ; \n \t4 client . get <identifiersep> state ( ) . set <identifiersep> credentials ( new auth <identifiersep> scope ( host <identifiersep> and <identifiersep> port . first ( ) , host <identifiersep> and <identifiersep> port . second ( ) , auth <identifiersep> scope . any <identifiersep> realm ) , <identifier> ) ; \n <ect>
\t1 logout ( ) ; \n \t1 login ( username <identifiersep> admin , main <identifiersep> tenant <identifiersep> 1 , new string [ ] { tenant <identifiersep> admin <identifiersep> role <identifiersep> name , tenant <identifiersep> authenticated <identifiersep> role <identifiersep> name } ) ; \n \t1 list < string > all <identifiersep> roles <identifiersep> for <identifiersep> default <identifiersep> tenant = service . get <identifiersep> all <identifiersep> roles ( ) ; \n \t1 list < string > all <identifiersep> roles <identifiersep> for <identifiersep> tenant = service . get <identifiersep> all <identifiersep> roles ( main <identifiersep> tenant <identifiersep> <number_literal> ) ; \n <ect>
\t2 ip <identifiersep> address = context . get <identifiersep> ip <identifiersep> address ( ) ; \n \t2 command = context . get <identifiersep> command ( ) ; \n \t2 command <identifiersep> type = context . get <identifiersep> hive <identifiersep> operation ( ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t2 if ( object instanceof proxy <identifiersep> target <identifiersep> factory ) { \n \t3 try { \n \t4 return ( t ) ( ( proxy <identifiersep> target <identifiersep> factory ) object ) . get <identifiersep> object ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 return ; } \n \t2 string path = virtual <identifiersep> file . get <identifiersep> path ( ) ; \n \t2 buf b = state . get <identifiersep> buf <identifiersep> by <identifiersep> path ( path ) ; \n \t2 if ( b != null ) { \n <ect>
\t9 + partitions <identifiersep> to <identifiersep> get <identifiersep> offsets <identifiersep> for + <string_literal> + exception ) ; } \n \t6 <comment> \n \t6 log . warn ( <string_literal> , partitions <identifiersep> to <identifiersep> get <identifiersep> offsets <identifiersep> for ) ; \n \t6 request <identifiersep> and <identifiersep> set <identifiersep> specific <identifiersep> time <identifiersep> offsets <identifiersep> from <identifiersep> kafka ( consumer , partitions <identifiersep> to <identifiersep> get <identifiersep> offsets <identifiersep> for , invalid <identifiersep> offset <identifiersep> behavior ) ; \n <ect>
\t3 stop = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 if ( rc ) <comment> \n \t4 log . trace ( <string_literal> + host + <string_literal> + ( stop - start ) + <string_literal> ) ; \n \t3 else { <comment> \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t9 fix <identifiersep> property ( node , ( property ) key ) ; } } } } \n \t4 } ) ; \n \t4 logger . info ( <string_literal> , node <identifiersep> count ) ; \n \t4 return ; } } \n <ect>
\t3 result . <identifier> = ( accumulo <identifiersep> security <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 transaction . execute ( new transaction <identifiersep> callback <identifiersep> no <identifiersep> return ( ) { \n \t4 @ override \n \t4 public void do <identifiersep> in <identifiersep> transaction <identifiersep> without <identifiersep> result ( transaction <identifiersep> status status ) { \n \t5 if ( add <identifiersep> <identifier> <identifiersep> final != null ) { \n <ect>
\t3 assert . assert <identifiersep> equals ( <string_literal> + next , col <identifiersep> c ) ; \n \t3 count ++ ; \n \t3 next ++ ; } \n \t2 assert . assert <identifiersep> equals ( test <identifiersep> row <identifiersep> count - <number_literal> , count ) ; \n <ect>
\t1 if ( platform == null ) { \n \t2 platform <identifiersep> preferences = new hash <identifiersep> map ( base . get <identifiersep> platform <identifiersep> preferences ( ) ) ; \n \t1 } else { \n \t2 platform <identifiersep> preferences = new hash <identifiersep> map ( base . get <identifiersep> platform <identifiersep> preferences ( platform ) ) ; } \n <ect>
<comment> \n \t1 public static void close <identifiersep> entity <identifiersep> manager ( @ nullable entity <identifiersep> manager em ) { \n \t2 if ( em != null ) { \n <ect>
\t2 if ( result ) { \n \t3 try { \n \t4 current <identifiersep> cursor = get <identifiersep> next <identifiersep> cursor ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 target . add <identifiersep> all ( value ) ; \n \t3 return true ; } \n \t2 catch ( final exception unmodifiable ) \n \t2 { \n <ect>
\t1 <comment> \n \t1 key <identifiersep> store update <identifiersep> key <identifiersep> store ( string port , string host ) throws io <identifiersep> exception , general <identifiersep> security <identifiersep> exception { \n \t2 synchronized ( cert <identifiersep> path ) { <comment> \n \t3 if ( ! key <identifiersep> store . contains <identifiersep> alias ( host ) ) { \n <ect>
\t2 list < string > args = [ ] \n \t2 command command = find <identifiersep> command ( line , args ) \n \t2 def result = null \n \t2 if ( command ) { \n <ect>
\t2 auth <identifiersep> caller . call ( new remote <identifiersep> callback < user > ( ) { \n \t2 @ override \n \t2 public void callback ( user user ) { \n \t3 final string name = ( user . get <identifiersep> property ( first <identifiersep> name ) != null ) ? user . get <identifiersep> property ( first <identifiersep> name ) : <string_literal> ; \n <ect>
\t1 public static synchronized void open ( string file , string alias ) { \n \t2 log . info ( <string_literal> + file + <string_literal> + alias ) ; \n \t2 file = check <identifiersep> default ( file ) ; \n \t2 if ( alias . length ( ) == 0 ) { \n <ect>
\t7 continue ; } \n \t6 filter <identifiersep> values . add ( string ) ; } \n \t5 for ( int i = 0 ; i < filter <identifiersep> <identifier> . size ( ) ; i ++ ) { \n \t6 string info = filter <identifiersep> <identifier> . get ( i ) ; \n <ect>
\t3 <comment> \n \t3 job <identifiersep> client <identifiersep> actor . tell ( <identifier> <identifiersep> <identifier> . get <identifiersep> instance ( ) , actor <identifiersep> ref . no <identifiersep> sender ( ) ) ; } \n \t2 <comment> \n \t2 if ( answer instanceof job <identifiersep> manager <identifiersep> messages . job <identifiersep> result <identifiersep> success ) { \n <ect>
\t2 p . send ( message ) ; \n \t2 <comment> \n \t2 restart <identifiersep> broker ( connection , session ) ; \n \t2 string selector = <string_literal> + message . get <identifiersep> jms <identifiersep> message <identifiersep> id ( ) + <string_literal> ; \n <ect>
\t3 this . ssl <identifiersep> context = create <identifiersep> ssl <identifiersep> context ( producer ) ; \n \t2 } catch ( exception e ) { \n \t3 throw object <identifiersep> helper . wrap <identifiersep> runtime <identifiersep> camel <identifiersep> exception ( e ) ; } \n \t2 if ( ssl <identifiersep> context != null ) { \n <ect>
\t2 private boolean has <identifiersep> blocked ( ) { \n \t3 return recovery <identifiersep> blocked . get <identifiersep> count ( ) == 0 ; } \n \t2 private void block <identifiersep> if <identifiersep> needed ( recovery <identifiersep> state . stage current <identifiersep> stage ) { \n \t3 if ( current <identifiersep> stage == stage <identifiersep> to <identifiersep> block ) { \n <ect>
\t4 <comment> \n \t4 if ( ! key . equals ( <string_literal> ) && ! key . equals ( <string_literal> ) ) { \n \t5 matcher matcher = extract <identifiersep> <identifier> <identifiersep> config <identifiersep> pattern . matcher ( key ) ; \n \t5 if ( ! matcher . matches ( ) ) { \n <ect>
\t1 private void destroy <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> name <identifiersep> label ( final connection conn , final string name <identifiersep> label ) { \n \t2 try { \n \t3 final set < vdi > <identifier> = vdi . get <identifiersep> by <identifiersep> name <identifiersep> label ( conn , name <identifiersep> label ) ; \n \t3 if ( <identifier> . size ( ) != 1 ) { \n <ect>
\t1 max <identifiersep> lifetime <identifiersep> count = <number_literal> \n \t1 enabled <identifiersep> components = <string_literal> \n \t1 if dictionary and <string_literal> in dictionary : \n \t1 if logger . is <identifiersep> enabled <identifiersep> for ( logging . info ) : \n <ect>
\t3 return false ; } \n \t2 if ( is <identifiersep> user <identifiersep> agent <identifiersep> rejected ( user <identifiersep> agent ) ) { \n \t3 logger . warn ( <string_literal> , user <identifiersep> agent ) ; \n \t3 return false ; } \n <ect>
\t3 key <identifiersep> manager . close <identifiersep> default <identifiersep> key <identifiersep> manager ( ) ; } \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> update <identifiersep> does <identifiersep> not <identifiersep> exist ( ) throws exception { \n <ect>
\t6 part . <identifier> ( false ) ; \n \t6 update <identifiersep> local ( part . id ( ) , loc <identifiersep> id , part . state ( ) , update <identifiersep> seq ) ; \n \t6 changed = true ; \n <ect>
\t4 eo <identifiersep> adaptor <identifiersep> operation adaptor <identifiersep> op = ( eo <identifiersep> adaptor <identifiersep> operation ) user <identifiersep> info . object <identifiersep> for <identifiersep> key ( eo <identifiersep> adaptor <identifiersep> channel . failed <identifiersep> adaptor <identifiersep> operation <identifiersep> key ) ; \n \t4 eo <identifiersep> database <identifiersep> operation database <identifiersep> op = ( eo <identifiersep> database <identifiersep> operation ) user <identifiersep> info . object <identifiersep> for <identifiersep> key ( eo <identifiersep> database <identifiersep> context . failed <identifiersep> database <identifiersep> operation <identifiersep> key ) ; \n \t4 was <identifiersep> handled = ( adaptor <identifiersep> op != null && database <identifiersep> op != null ) ; \n \t3 } else { \n <ect>
\t4 self . fail ( <string_literal> % ( public <identifiersep> ip . ipaddress . ipaddress ) ) \n \t1 @ attr ( tags = [ <string_literal> , <string_literal> ] , required <identifiersep> hardware = <string_literal> ) \n \t1 def test <identifiersep> 01 <identifiersep> create <identifiersep> redundant <identifiersep> vpc <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> ms <identifiersep> <identifier> <identifiersep> ps <identifiersep> <identifier> <identifiersep> acl ( self ) : \n \t2 <string_literal> <string_literal> <string_literal> \n <ect>
\t1 return ; } \n \t1 sender ( ) . tell ( optional . from <identifiersep> nullable ( result <identifiersep> set <identifiersep> iterator ) , self ( ) ) ; } \n private void cancel <identifiersep> job ( cancel <identifiersep> job message ) { \n \t1 if ( ! executing || connection <identifiersep> delegate == null ) { \n <ect>
\t1 file <identifiersep> status file = children [ i ] ; \n \t1 path child <identifiersep> path = file . get <identifiersep> path ( ) ; \n \t1 long write <identifiersep> id = java <identifiersep> utils . extract <identifiersep> write <identifiersep> id ( child <identifiersep> path ) ; \n \t1 if ( ! file . is <identifiersep> directory ( ) || write <identifiersep> id == null || ! valid <identifiersep> write <identifiersep> id <identifiersep> list . is <identifiersep> write <identifiersep> id <identifiersep> valid ( write <identifiersep> id ) ) { \n <ect>
\t3 return elb <identifiersep> vm ; \n \t2 } finally { \n \t3 <identifier> <identifiersep> network <identifiersep> dao . release <identifiersep> from <identifiersep> lock <identifiersep> table ( guest <identifiersep> network <identifiersep> id ) ; } } \n \t1 private void release <identifiersep> ip ( final long ip <identifiersep> id , final long user <identifiersep> id , final account caller ) { \n <ect>
\t1 channel . get <identifiersep> transaction ( ) . close ( ) ; } \n \t1 <comment> \n \t1 logger . info ( <string_literal> ) ; \n \t1 sink . process ( ) ; <comment> \n <ect>
\t2 if ( use <identifiersep> mem ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t2 } else { \n \t3 if ( ! loc . is <identifiersep> absolute ( ) ) { \n <ect>
\t3 compute <identifiersep> local <identifiersep> defs <identifiersep> and <identifiersep> local <identifiersep> uses <identifiersep> info ( ) ; \n \t3 if ( debug ) { logger . debug ( <string_literal> ) ; } \n \t3 optimize <identifiersep> load <identifiersep> stores ( ) ; \n \t3 if ( phase <identifiersep> options . get <identifiersep> boolean ( g <identifiersep> options , <string_literal> ) ) { \n <ect>
\t2 service <identifiersep> support . stop ( ) ; } \n \t1 protected void handle <identifiersep> start ( ) throws exception { \n \t2 if ( local <identifiersep> uri == null ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t2 for ( resource <identifiersep> tag resource <identifiersep> tag : resource <identifiersep> tags ) { \n \t3 <comment> \n \t4 s <identifiersep> logger . debug ( <string_literal> + resource <identifiersep> tag . get <identifiersep> resource <identifiersep> id ( ) ) ; \n <ect>
\t2 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } } \n \t1 tree <identifiersep> map < string , topology <identifiersep> cluster > topology <identifiersep> updates = new tree <identifiersep> map < > ( ) ; \n \t1 for ( host <identifiersep> request request : requests ) { \n <ect>
\t1 if ( user == null ) { \n \t1 logger . error ( <string_literal> ) ; \n \t1 throw new bad <identifiersep> credentials <identifiersep> exception ( <string_literal> ) ; } \n \t1 if ( string <identifiersep> utils . is <identifiersep> empty ( user . get <identifiersep> password ( ) ) ) { \n <ect>
\t4 model = encoder . decode ( value , factory ) ; \n \t4 if ( model != null ) { \n \t5 break ; } } \n \t3 if ( model == null ) { \n <ect>
\t8 + <string_literal> ) ; \n \t6 break ; } } \n \t4 <comment> \n \t4 if ( string <identifiersep> utils . is <identifiersep> empty ( auth <identifiersep> pin ) ) { \n <ect>
\t3 <identifier> <identifiersep> logger . root <identifiersep> logger . debug ( <string_literal> , ex ) ; \n \t2 } catch ( <identifier> <identifiersep> already <identifiersep> active ex ) { \n \t3 <identifier> <identifiersep> logger . root <identifiersep> logger . debug ( <string_literal> , ex ) ; \n \t2 } catch ( object <identifiersep> already <identifiersep> active ex ) { \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> + vm + <string_literal> + guest <identifiersep> network + \n \t6 <string_literal> , ex ) ; \n \t5 success = false ; } \n \t4 if ( ! success ) { \n <ect>
\t1 formatting <identifiersep> info . dump ( ) ; \n \t1 current <identifiersep> literal . set <identifiersep> length ( 0 ) ; \n \t1 i ++ ; } \n \t1 else \n <ect>
\t4 if ( charset . is <identifiersep> supported ( charset <identifiersep> name ) ) { \n \t5 return charset . for <identifiersep> name ( charset <identifiersep> name ) ; } \n \t4 log . warn ( <string_literal> , charset <identifiersep> name ) ; \n \t3 } catch ( exception charset <identifiersep> ex ) { \n <ect>
<number_literal> . get ( 0 ) \n <number_literal> . get <identifiersep> value ( ) , \n <number_literal> <string_literal> ) \n <number_literal> . compare <identifiersep> to ( voldemort <identifiersep> state . rebalancing <identifiersep> master <identifiersep> server . to <identifiersep> string ( ) ) == 0 ) { \n <ect>
<number_literal> http <identifiersep> response <identifiersep> status . bad <identifiersep> request , \n <number_literal> <string_literal> \n <number_literal> + origin <identifiersep> time ) ; } \n \t2 } else { \n <ect>
\t1 @ <identifier> <identifiersep> throws \n \t1 public pair < ? extends <identifier> <identifiersep> saml <identifiersep> object , message <identifiersep> context > extract ( final http <identifiersep> servlet <identifiersep> request request , \n <number_literal> final base <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> xml <identifiersep> message <identifiersep> decoder decoder , \n <number_literal> final class < ? extends <identifier> <identifiersep> saml <identifiersep> object > clazz ) { \n <ect>
\t1 status status = file <identifiersep> to <identifiersep> status . get ( wal <identifiersep> name ) ; \n \t1 assert . assert <identifiersep> equals ( <string_literal> , false , status . get <identifiersep> closed ( ) ) ; \n \t1 set < string > files <identifiersep> for <identifiersep> table = get <identifiersep> files <identifiersep> for <identifiersep> table ( table ) ; \n \t1 assert . assert <identifiersep> equals ( <string_literal> , 1 , files <identifiersep> for <identifiersep> table . size ( ) ) ; \n <ect>
\t1 { \n \t2 server . mark <identifiersep> down ( ) ; } \n \t1 catch ( exception e ) \n \t1 { \n <ect>
\t3 if ( target <identifiersep> dir . file <identifiersep> length ( file ) != source <identifiersep> dir . file <identifiersep> length ( file ) ) { \n \t4 file <identifiersep> size <identifiersep> status file <identifiersep> status = new file <identifiersep> size <identifiersep> status ( file , target <identifiersep> dir . file <identifiersep> length ( file ) , source <identifiersep> dir . file <identifiersep> length ( file ) ) ; \n \t4 dir <identifiersep> status . files <identifiersep> with <identifiersep> size <identifiersep> mismatch . add ( file <identifiersep> status ) ; \n \t4 clean = false ; \n <ect>
\t2 super . send <identifiersep> initial <identifiersep> messages ( ) ; \n \t2 try { \n \t3 send <identifiersep> visibility ( ) ; \n \t2 } catch ( not <identifiersep> connected <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + parsed + <string_literal> + account . get <identifiersep> account <identifiersep> name ( ) + <string_literal> + account . get <identifiersep> id ( ) + <string_literal> ) ; } } \n \t2 parsed = volume <identifiersep> usage <identifiersep> parser . parse ( account , current <identifiersep> start <identifiersep> date , current <identifiersep> end <identifiersep> date ) ; \n \t3 if ( ! parsed ) { \n <ect>
\t2 resource = new <identifiersep> markup <identifiersep> resource <identifiersep> stream ( locator , get <identifiersep> class ( ) , <string_literal> , null , null , <string_literal> ) ; \n \t2 parser = new markup <identifiersep> parser ( resource ) ; \n \t2 parser . set <identifiersep> wicket <identifiersep> namespace ( <string_literal> ) ; \n \t2 tokens = parser . parse ( ) ; \n <ect>
\t7 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , <identifier> ) ; \n \t7 fail ( <string_literal> , new exception ( <string_literal> + <identifier> ) ) ; \n \t7 return ; } \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 for ( int attempt = 1 ; attempt < = get <identifiersep> max <identifiersep> attempts ( ) ; attempt ++ ) { \n \t3 try { \n \t4 return fs . is <identifiersep> file ( root <identifiersep> path ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 get ( ) . get <identifiersep> server ( ) . stop ( ) ; \n \t5 thread . sleep ( <number_literal> ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n \t5 logger . debug ( <string_literal> , e ) ; } \n <ect>
\t1 else \n \t1 { \n \t2 if ( <identifier> <identifiersep> lifecycle . validate <identifiersep> put ( item ) ) \n \t2 { \n <ect>
\t2 assert <identifiersep> equals ( 1 , failover <identifiersep> transport . get <identifiersep> backup <identifiersep> pool <identifiersep> size ( ) ) ; \n \t2 assert <identifiersep> true ( <string_literal> , wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n <ect>
\t3 if ( authentication <identifiersep> from <identifiersep> tgt == null ) { \n \t4 logger . debug ( <string_literal> , ticket <identifiersep> granting <identifiersep> ticket ) ; \n \t4 this . central <identifiersep> authentication <identifiersep> service . destroy <identifiersep> ticket <identifiersep> granting <identifiersep> ticket ( ticket <identifiersep> granting <identifiersep> ticket ) ; \n \t3 } else if ( are <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> equal ( authentication , authentication <identifiersep> from <identifiersep> tgt ) ) { \n <ect>
\t1 data <identifiersep> queue . offer ( queue <identifiersep> item ) ; } } \n private static class db <identifiersep> cleanup <identifiersep> service implements runnable { \n \t1 @ override \n \t1 public void run ( ) { \n <ect>
\t3 final relation <identifiersep> property relation <identifiersep> property = ( relation <identifiersep> property ) property <identifiersep> key ; \n \t3 final class source <identifiersep> node <identifiersep> type = source <identifiersep> node . get <identifiersep> class ( ) ; \n \t3 node <identifiersep> interface new <identifiersep> node = null ; \n \t3 if ( property <identifiersep> key . is <identifiersep> read <identifiersep> only ( ) ) { \n <ect>
\t4 throw new not <identifiersep> alive <identifiersep> exception ( <string_literal> + id ) ; } \n \t3 map < object , object > topology <identifiersep> conf = ( map < object , object > ) storm <identifiersep> config . read <identifiersep> nimbus <identifiersep> topology <identifiersep> conf ( id , data . get <identifiersep> blob <identifiersep> store ( ) ) ; \n \t3 topology = common . system <identifiersep> topology ( topology <identifiersep> conf , <identifier> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public void check ( node <identifiersep> store global <identifiersep> store , mounted <identifiersep> node <identifiersep> store mounted <identifiersep> store ) { \n \t2 error <identifiersep> holder error <identifiersep> holder = new error <identifiersep> holder ( ) ; \n \t2 <identifier> . for <identifiersep> each ( c - > { \n <ect>
\t2 if ( <identifier> <identifiersep> data . length < = 0 ) \n \t3 throw new <identifier> <identifiersep> message <identifiersep> exception ( <string_literal> + <identifier> <identifiersep> data . length + <string_literal> ) ; \n \t2 if ( <identifier> <identifiersep> had <identifiersep> cache && <identifier> <identifiersep> data <identifiersep> buf == null ) { \n \t3 <identifier> <identifiersep> message <identifiersep> exception e = new <identifier> <identifiersep> message <identifiersep> exception ( <string_literal> ) ; \n <ect>
\t10 + vm <identifiersep> disk <identifiersep> stat . get <identifiersep> bytes <identifiersep> read ( ) + <string_literal> + vm <identifiersep> disk <identifiersep> stat . get <identifiersep> bytes <identifiersep> write ( ) ) ; \n \t8 continue ; } \n \t7 if ( vm <identifiersep> disk <identifiersep> stat <identifiersep> lock . get <identifiersep> current <identifiersep> io <identifiersep> read ( ) > vm <identifiersep> disk <identifiersep> stat . get <identifiersep> io <identifiersep> read ( ) ) { \n <ect>
\t7 <comment> \n \t6 } else { \n \t7 log . warn ( <string_literal> + dc <identifiersep> field ) ; } } \n \t4 } else { \n <ect>
\t3 if ( provider . provides <identifiersep> binding <identifiersep> for ( item <identifiersep> name ) ) { \n \t4 command <identifiersep> handled = true ; \n \t4 insteon <identifiersep> <identifier> <identifiersep> binding <identifiersep> config c = provider . get <identifiersep> insteon <identifiersep> <identifier> <identifiersep> binding <identifiersep> config ( item <identifiersep> name ) ; \n \t4 if ( c == null ) { \n <ect>
\t5 statement = connection . prepare <identifiersep> statement ( update ) ; \n \t5 statement . set <identifiersep> string ( 1 , locale ) ; \n \t5 statement . set <identifiersep> string ( <number_literal> , openmrs <identifiersep> constants . global <identifiersep> property <identifiersep> default <identifiersep> locale ) ; \n \t5 if ( statement . execute <identifiersep> update ( ) != 1 ) { \n <ect>
\t1 status = get <identifiersep> policy ( ) . is <identifiersep> allowed ( repository <identifiersep> read <identifiersep> action . name ) \n \t2 && get <identifiersep> policy ( ) . is <identifiersep> allowed ( repository <identifiersep> create <identifiersep> action . name ) \n \t2 && get <identifiersep> policy ( ) . is <identifiersep> allowed ( <identifier> <identifiersep> security <identifiersep> action . name ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t6 int cache = entry . get <identifiersep> slot <identifiersep> filter <identifiersep> entry ( ) ; \n \t6 try { \n \t7 slot <identifiersep> filter . put ( ( int ) entry . cur <identifiersep> offset , cache , true ) ; \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 logger . error ( <string_literal> ) \n \t3 logger . error ( <string_literal> ) \n \t3 logger . error ( <string_literal> ) \n \t3 logger . error ( <string_literal> ) \n <ect>
\t4 log . info ( <string_literal> ) ; \n \t4 flag . increment <identifiersep> and <identifiersep> get ( ) ; } \n \t2 } ) ; \n \t2 send <identifiersep> <identifier> <identifiersep> to <identifiersep> wallet ( abstract <identifiersep> block <identifiersep> chain . new <identifiersep> block <identifiersep> type . best <identifiersep> chain , coin ) ; \n <ect>
\t3 final string result = this . <identifier> <identifiersep> instance . decrypt ( enc <identifiersep> value ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( result ) ) { \n \t4 logger . debug ( <string_literal> , enc <identifiersep> value ) ; \n \t4 return result ; } \n <ect>
\t2 try { \n \t3 return request <identifiersep> from <identifiersep> map <identifiersep> factory . create <identifiersep> request ( message ) ; \n \t2 } catch ( exception ex ) { \n \t3 logger . error ( <string_literal> , message , <string_literal> ) ; \n <ect>
\t3 new file ( blob <identifiersep> utils . get <identifiersep> storage <identifiersep> location <identifiersep> path ( storage <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) , job <identifiersep> id , key ) ) ; \n \t2 read <identifiersep> write <identifiersep> lock . write <identifiersep> lock ( ) . lock ( ) ; \n \t2 try { \n \t3 if ( ! local <identifiersep> file . delete ( ) && local <identifiersep> file . exists ( ) ) { \n <ect>
\t1 public void test <identifiersep> <identifier> ( ) { \n \t2 string path = <string_literal> ; \n \t2 document doc = get <identifiersep> as <identifiersep> dom ( path ) ; \n \t2 if ( print <identifiersep> doc ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t2 assert <identifiersep> that ( client . prepare <identifiersep> get <identifiersep> snapshots ( repository <identifiersep> name ) . get ( ) . get <identifiersep> snapshots ( ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t2 <comment> \n \t2 client . prepare <identifiersep> delete <identifiersep> snapshot ( repository <identifiersep> name , <string_literal> ) . get ( ) ; \n \t2 client . prepare <identifiersep> delete <identifiersep> repository ( repository <identifiersep> name ) . get ( ) ; \n <ect>
\t2 io . read <identifiersep> fully ( in , raw , 0 , len ) ; \n \t2 if ( raw [ len - 1 ] == ' \\ n' ) \n \t3 len -- ; \n \t2 string s = raw <identifiersep> parse <identifiersep> utils . decode ( constants . charset , raw , 0 , len ) ; \n <ect>
\t3 else if ( current <identifiersep> state == <identifier> || current <identifiersep> state == failed ) { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t2 table <identifiersep> desc table = get <identifiersep> table <identifiersep> manager ( ) . get <identifiersep> table <identifiersep> desc ( table <identifiersep> name , <identifier> ) ; \n \t2 final table <identifiersep> ext <identifiersep> desc table <identifiersep> ext = get <identifiersep> table <identifiersep> manager ( ) . get <identifiersep> table <identifiersep> ext ( table <identifiersep> name , <identifier> ) ; \n \t2 if ( table == null ) { \n \t3 bad <identifiersep> request <identifiersep> exception e = new bad <identifiersep> request <identifiersep> exception ( string . format ( msg . get <identifiersep> table <identifiersep> desc <identifiersep> not <identifiersep> found ( ) , table <identifiersep> name ) ) ; \n <ect>
\t4 <identifier> <identifiersep> cmds = s <identifiersep> gson . from <identifiersep> json ( json <identifiersep> reader , ( type ) command [ ] . class ) ; \n \t3 } catch ( json <identifiersep> parse <identifiersep> exception e ) { \n \t4 <identifier> <identifiersep> cmds = new command [ ] { new bad <identifiersep> command ( ) } ; \n \t3 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t3 return ; } \n \t2 final ldap <identifiersep> attribute attribute = response . get <identifiersep> ldap <identifiersep> entry ( ) . get <identifiersep> attribute ( this . warn <identifiersep> attribute <identifiersep> name ) ; \n \t2 boolean matches = false ; \n \t2 if ( attribute != null ) { \n <ect>
\t2 left <identifiersep> led . set <identifiersep> position ( dual <identifiersep> button <identifiersep> device <identifiersep> position . left ) ; \n \t2 left <identifiersep> led . set <identifiersep> uid ( get <identifiersep> uid ( ) ) ; \n \t2 string <identifier> <identifiersep> left <identifiersep> led = <string_literal> ; \n \t2 left <identifiersep> led . set <identifiersep> sub <identifiersep> id ( <identifier> <identifiersep> left <identifiersep> led ) ; \n <ect>
\t3 for ( int i = 0 ; i < headers . size ( ) ; i ++ ) { \n \t4 soap <identifiersep> header header = headers . get ( i ) ; \n \t4 message message = wsdl <identifiersep> context . get <identifiersep> definition ( ) . get <identifiersep> message ( header . get <identifiersep> message ( ) ) ; \n \t4 if ( message == null ) { \n <ect>
\t6 } else if ( an <identifiersep> item . page <identifiersep> name ( ) != null && an <identifiersep> item . page <identifiersep> name ( ) . equals ( a <identifiersep> child . page <identifiersep> name ( ) ) ) { \n \t7 an <identifiersep> item . set <identifiersep> default <identifiersep> child ( a <identifiersep> child . name ( ) ) ; \n \t7 break ; } \n \t5 } else { \n <ect>
\t2 byte [ ] bytes = serializer . serialize ( s ) ; \n \t2 try { \n \t3 return data <identifiersep> set . has ( bytes ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 throw new execution <identifiersep> exception ( e . get <identifiersep> message ( ) ) ; } \n \t2 return answer ; } \n \t1 private answer retry ( final command cmd , final int num <identifiersep> retries ) { \n \t2 final int num <identifiersep> retries <identifiersep> remaining = num <identifiersep> retries - 1 ; \n <ect>
\t3 this . <identifier> . get <identifiersep> bucket ( ) . <identifier> ( document ) ; } \n \t2 return service ; } \n \t1 @ override \n \t1 public boolean delete ( final registered <identifiersep> service service ) { \n <ect>
\t7 + <string_literal> + is <identifiersep> last \n \t6 <comment> ) ; \n \t3 } catch ( array <identifiersep> index <identifiersep> out <identifiersep> of <identifiersep> bounds <identifiersep> exception <identifier> ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 nodes . put ( node , node <identifiersep> failure <identifiersep> count ) ; } } } \n \t1 class connection <identifiersep> checker extends abstract <identifiersep> runnable { \n \t2 @ override \n \t2 public void on <identifiersep> failure ( exception e ) { \n <ect>
\t1 s = os . path . <identifier> ( \n \t1 self . config . get ( <identifier> , <identifier> ) ) + os . sep + <string_literal> \n \t1 server <identifiersep> crt <identifiersep> exists = os . path . exists ( s ) \n \t1 if not server <identifiersep> crt <identifiersep> exists : \n <ect>
\t3 obj . put ( generic <identifiersep> json <identifiersep> keys . update <identifiersep> type . name ( ) , json <identifiersep> values . karma <identifiersep> info . name ( ) ) ; \n \t3 obj . put ( json <identifiersep> keys . info . name ( ) , info <identifiersep> message ) ; \n \t3 pw . println ( obj . to <identifiersep> string ( ) ) ; \n \t2 } catch ( json <identifiersep> exception e ) { \n <ect>
\t3 ) \n \t2 ) . list ( ) ; \n \t2 for ( final certificate <identifiersep> entity entity : entities ) { \n \t2 if ( entity . revoked ) { \n <ect>
<comment> \n public static string generate <identifiersep> work <identifiersep> item <identifiersep> uid ( final string input <identifiersep> file <identifiersep> path , \n <number_literal> final string user <identifiersep> name ) { \n \t1 if ( string <identifiersep> util . is <identifiersep> empty ( input <identifiersep> file <identifiersep> path ) ) { \n <ect>
\t2 object new <identifiersep> object = null ; \n \t2 try { \n \t2 new <identifiersep> object = collection <identifiersep> type <identifiersep> class . new <identifiersep> instance ( ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception | instantiation <identifiersep> exception ex ) { \n <ect>
\t2 logger . debug ( <string_literal> + test <identifiersep> name ) ; } \n \t1 @ override \n \t1 public void test <identifiersep> ended ( string test <identifiersep> name ) \n \t1 { \n <ect>
\t4 + <string_literal> , \n \t4 subject , signing <identifiersep> secret <identifiersep> size , signing <identifiersep> algorithm , encryption <identifiersep> secret <identifiersep> size , encryption <identifiersep> method , encryption <identifiersep> algorithm ) ; \n \t2 logger . debug ( string <identifiersep> utils . repeat ( ' = ' , sep <identifiersep> length ) ) ; \n \t2 final string token = g . generate ( profile ) ; \n <ect>
<comment> \n \t1 protected void do <identifiersep> load ( ) throws class <identifiersep> not <identifiersep> found <identifiersep> exception , io <identifiersep> exception { \n <ect>
\t3 persist <identifiersep> context . get <identifiersep> session ( ) . save ( item ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; \n \t2 } catch ( out <identifiersep> of <identifiersep> storage <identifiersep> exception e ) { \n <ect>
\t3 connection . close ( ) ; } \n \t2 test <identifiersep> case . assert <identifiersep> true ( <string_literal> , got <identifiersep> exception <identifiersep> event . await ( <number_literal> , time <identifiersep> unit . seconds ) ) ; \n \t2 <comment> \n \t2 <comment> \n <ect>
\t2 graph . reset ( ) ; \n \t2 <identifier> checksum = new <identifier> ( ) ; \n \t2 checksum . update ( b ) ; \n \t2 if ( <identifier> != ( int ) checksum . get <identifiersep> value ( ) ) { \n <ect>
\t1 for ( byte [ ] value <identifiersep> as <identifiersep> byte : values <identifiersep> as <identifiersep> bytes ) { \n \t1 try { \n \t2 values . add ( deserialize ( value <identifiersep> as <identifiersep> byte ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 } else { \n \t4 child <identifiersep> adapter = get <identifiersep> adapter <identifiersep> factory ( ) . <identifier> <identifiersep> node ( this , <string_literal> , value ) ; } \n \t3 if ( child <identifiersep> adapter != null ) \n \t4 children . add ( child <identifiersep> adapter ) ; \n <ect>
\t3 string tez <identifiersep> <identifier> = conf . get ( tez <identifiersep> configuration . tez <identifiersep> lib <identifiersep> uris ) ; \n \t3 if ( tez <identifiersep> <identifier> == null ) { \n \t3 log . warn ( <string_literal> ) ; } \n <ect>
\t3 spark <identifiersep> client <identifiersep> utilities . is <identifiersep> local <identifiersep> master ( hive <identifiersep> conf . get ( <string_literal> ) ) ) ) { \n \t1 int min <identifiersep> executors = get <identifiersep> executors <identifiersep> to <identifiersep> <identifier> ( ) ; \n \t1 if ( min <identifiersep> executors < = 0 ) { \n \t2 return ; } \n <ect>
\t1 else { \n \t2 log . error ( <string_literal> , ex ) ; \n \t2 throw new <identifier> <identifiersep> exception ( http <identifiersep> response <identifiersep> status . internal <identifiersep> server <identifiersep> error , <identifier> <identifiersep> exception . internal <identifiersep> failure ) ; } \n \t1 } catch ( final exception ex ) { \n <ect>
\t4 throw ex ; } } \n \t2 return success ; } \n \t1 @ override \n \t1 public boolean assign <identifiersep> ssl <identifiersep> cert <identifiersep> to <identifiersep> load <identifiersep> balancer <identifiersep> rule ( long lb <identifiersep> id , string cert <identifiersep> name , string public <identifiersep> cert , string private <identifiersep> key ) { \n <ect>
\t3 if ( <identifier> . compare <identifiersep> to ( required <identifiersep> version ) < = 0 ) { \n \t4 logger . error ( <string_literal> ) ; } } \n \t2 <comment> \n \t2 if ( registry . is <identifiersep> <identifier> <identifiersep> firewall ( ) ) { \n <ect>
\t2 realm = realm . to <identifiersep> upper <identifiersep> case ( ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( realm ) || ! realm <identifiersep> map . contains <identifiersep> key ( realm ) ) { \n \t3 logger . warn ( <string_literal> , realm ) ; \n \t3 throw new sts <identifiersep> exception ( <string_literal> + realm ) ; } \n <ect>
\t3 get <identifiersep> query ( ) ; \n \t3 for ( string wiki <identifiersep> name : get <identifiersep> <identifier> ( ) ) { \n \t4 size += ( long ) count <identifiersep> query . set <identifiersep> wiki ( wiki <identifiersep> name ) . execute ( ) . get ( 0 ) ; } \n \t2 } catch ( query <identifiersep> exception e ) { \n <ect>
\t2 string [ ] cidr = network . get <identifiersep> cidr ( ) . split ( <string_literal> ) ; \n \t2 set < long > all <identifiersep> possible <identifiersep> ips = net <identifiersep> utils . get <identifiersep> all <identifiersep> ips <identifiersep> from <identifiersep> cidr ( cidr [ 0 ] , integer . parse <identifiersep> int ( cidr [ 1 ] ) ) ; \n \t2 set < long > used <identifiersep> ips = new tree <identifiersep> set < long > ( ) ; \n \t2 if ( requested <identifiersep> ip != null && requested <identifiersep> ip . equals ( network . get <identifiersep> gateway ( ) ) ) { \n <ect>
\t6 if ( ! user . is <identifiersep> present ( ) || ! user . get ( ) . is <identifiersep> active ( ) ) { \n \t7 logger . warn ( <string_literal> + match <identifiersep> player . get <identifiersep> name ( ) ) ; \n \t7 logger . warn ( <string_literal> + match . get <identifiersep> id ( ) ) ; \n \t7 logger . warn ( <string_literal> + user <identifiersep> player <identifiersep> entry . get <identifiersep> key ( ) ) ; \n <ect>
\t2 send <identifiersep> message ( message <identifiersep> bytes , bridge <identifiersep> id ) ; \n \t2 set <identifiersep> current <identifiersep> state ( bulb , bridge <identifiersep> id , new <identifiersep> value , binding <identifiersep> type . <identifier> ) ; \n \t2 return new <identifiersep> value ; } \n \t1 private percent <identifiersep> type send <identifiersep> decrease ( int bulb , int <identifier> <identifiersep> steps , string bridge <identifiersep> id ) { \n <ect>
\t1 if ( number <identifiersep> of <identifiersep> rows < = 0 || ! iterator ( ) . has <identifiersep> next ( ) ) \n \t2 break ; \n \t1 r = iterator ( ) . next ( ) ; } \n \t1 if ( preview <identifiersep> rows . size ( ) < = 0 ) { \n <ect>
\t4 if ( match <identifiersep> player == null ) { \n \t5 logger . warn ( <string_literal> ) ; \n \t5 logger . warn ( <string_literal> + match . get <identifiersep> id ( ) ) ; \n \t5 logger . warn ( <string_literal> + user <identifiersep> player <identifiersep> entry . get <identifiersep> key ( ) ) ; \n <ect>
\t4 host <identifiersep> iterator . remove ( ) ; \n \t4 hosts . add ( host ) ; \n \t4 execute <identifiersep> host <identifiersep> failure <identifiersep> recovery ( task , failed <identifiersep> host <identifiersep> uuid , host ) ; \n \t4 return ; } } \n <ect>
\t2 try { \n \t3 test <identifiersep> util . startup <identifiersep> bridge ( <number_literal> ) ; \n \t3 run <identifiersep> test ( <string_literal> , <number_literal> , con <identifiersep> options ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t3 <identifier> <identifiersep> manager . get <identifiersep> database ( ) . get <identifiersep> virtual <identifiersep> <identifier> ( ) . add ( vm <identifiersep> model ) ; \n \t3 try { \n \t4 vm <identifiersep> model . update ( <identifier> <identifiersep> manager . get <identifiersep> model <identifiersep> controller ( ) ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 get <identifiersep> <identifier> ( ) . register <identifiersep> service ( si ) ; } \n \t1 <comment> \n \t1 <comment> \n \t1 public void add <identifiersep> service ( jm <identifiersep> dns jm <identifiersep> dns , string type , string name ) { \n <ect>
\t6 break ; \n \t5 } else { \n \t6 break ; } } \n \t4 catch ( exception e ) { \n <ect>
\t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) ) ; \n \t3 get . release <identifiersep> connection ( ) ; \n \t3 <comment> \n \t3 files . copy ( from , to , standard <identifiersep> copy <identifiersep> option . replace <identifiersep> existing ) ; \n <ect>
\t3 for ( int i = index ; i >= 0 ; -- i ) { \n \t4 try { \n \t5 <identifier> ( operations . get ( i ) ) ; \n \t4 } catch ( exception ee ) { \n <ect>
\t3 if ( new file ( <string_literal> ) . exists ( ) ) { \n \t4 cpu <identifiersep> layout = <identifier> <identifiersep> cpu <identifiersep> layout . from <identifiersep> cpu <identifiersep> info ( ) ; \n \t4 processors = cpu <identifiersep> layout . <identifier> ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 } catch ( cannot <identifiersep> resolve <identifiersep> class <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> + report <identifiersep> file ) ; \n \t3 return optional . absent ( ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 return true ; } \n \t1 public boolean do <identifiersep> import ( file source <identifiersep> file , string encoding ) throws io <identifiersep> exception { \n \t2 if ( source <identifiersep> file == null ) { \n <ect>
\t2 <comment> \n \t2 date start = new date ( ) ; \n \t2 int counter <identifiersep> so <identifiersep> far = counter ; \n \t2 if ( print <identifiersep> messages ) \n <ect>
\t4 replicate <identifiersep> start <identifiersep> time = 0 ; \n \t4 backup <identifiersep> start <identifiersep> time = 0 ; \n \t4 send <identifiersep> end <identifiersep> status ( 0 ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t5 reader reader = new file <identifiersep> reader ( catalog <identifiersep> file ) ; \n \t5 catalog . load ( reader ) ; \n \t5 reader . close ( ) ; \n \t4 } catch ( io <identifiersep> exception io <identifiersep> e ) { \n <ect>
\t1 public void close ( ) { \n \t2 try { \n \t3 closer . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <identifier> <identifiersep> appender < i <identifiersep> logging <identifiersep> event > <identifier> <identifiersep> appender = new <identifier> <identifiersep> appender < i <identifiersep> logging <identifiersep> event > ( ) ; \n \t2 <identifier> <identifiersep> appender . start ( ) ; \n \t2 ( ( ch . <identifier> . logback . <identifier> . logger ) logger ) . add <identifiersep> appender ( <identifier> <identifiersep> appender ) ; \n \t2 for ( long i = 0 ; i < len ; i ++ ) { \n <ect>
\t3 <identifier> <identifiersep> executor = executors . new <identifiersep> cached <identifiersep> thread <identifiersep> pool ( new named <identifiersep> thread <identifiersep> factory ( <string_literal> ) ) ; \n \t3 try { \n \t4 <identifier> <identifiersep> server <identifiersep> socket = new server <identifiersep> socket ( port ) ; \n \t3 } catch ( io <identifiersep> exception ioex ) { \n <ect>
\t5 . post ( entity . entity ( big <identifiersep> jaxb <identifiersep> element , <string_literal> ) ) ; \n \t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n \t3 int len = math . min ( entity . length ( ) , <number_literal> ) ; \n <ect>
\t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; \n \t2 try { \n \t3 object <identifiersep> name obj <identifiersep> name = get <identifiersep> object <identifiersep> name ( obj , name ) ; \n \t3 if ( server . is <identifiersep> registered ( obj <identifiersep> name ) ) { \n <ect>
\t3 throw new grid <identifiersep> spi <identifiersep> exception ( <string_literal> + cur <identifiersep> dir <identifiersep> path ) ; \n \t2 register <identifiersep> m <identifiersep> bean ( grid <identifiersep> name , this , grid <identifiersep> shared <identifiersep> fs <identifiersep> checkpoint <identifiersep> spi <identifiersep> m <identifiersep> bean . class ) ; \n \t2 <comment> \n <ect>
\t2 for ( int i = 0 ; i < test <identifiersep> nodes . length ; i ++ ) { \n \t3 all <identifiersep> nodes [ i ] = test <identifiersep> nodes [ i ] . get <identifiersep> node <identifiersep> id ( ) ; } \n \t2 int filter <identifiersep> nodes <identifiersep> size = random <identifiersep> int ( all <identifiersep> nodes . length ) ; \n \t2 set < string > filter <identifiersep> nodes = new hash <identifiersep> set < > ( random <identifiersep> <identifier> <identifiersep> of ( filter <identifiersep> nodes <identifiersep> size , all <identifiersep> nodes ) ) ; \n <ect>
\t3 logger . info ( e . get <identifiersep> message ( ) ) ; \n \t3 if ( <identifier> <identifiersep> rest <identifiersep> client ) { \n \t4 logger . info ( <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 disable <identifiersep> blocks ( plugins ) ; \n \t2 search <identifiersep> response response = ensure <identifiersep> search <identifiersep> was <identifiersep> cancelled ( search <identifiersep> response ) ; \n \t2 if ( response != null ) { \n \t3 <comment> \n <ect>
\t1 accumulo <identifiersep> server <identifiersep> user = new cluster <identifiersep> user ( <identifier> <identifiersep> user ( accumulo <identifiersep> principal ) , accumulo <identifiersep> keytab ) ; \n \t1 <comment> \n \t1 string root <identifiersep> principal = <string_literal> ; \n \t1 file root <identifiersep> keytab = new file ( keytab <identifiersep> dir , root <identifiersep> principal + <string_literal> ) ; \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 record <identifiersep> compiler <identifiersep> messages ( unit , compilation <identifiersep> unit <identifiersep> node ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 final node pkg <identifiersep> node = record <identifiersep> package ( unit , compilation <identifiersep> unit <identifiersep> node ) ; \n <ect>
\t2 try { \n \t3 final jaxb <identifiersep> context jaxb <identifiersep> context = jaxb <identifiersep> context . new <identifiersep> instance ( session . class ) ; \n \t3 this . marshaller = jaxb <identifiersep> context . create <identifiersep> marshaller ( ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t2 } ; \n \t2 num <identifiersep> task . increment <identifiersep> and <identifiersep> get ( ) ; \n \t2 thread <identifiersep> pool . execute ( task ) ; } \n \t1 } catch ( throwable t ) { \n <ect>
\t1 logger . debug ( <string_literal> ) \n else : \n \t1 jce <identifiersep> policy <identifiersep> info = jce <identifiersep> policy <identifiersep> info ( custom <identifiersep> java <identifiersep> home ) \n \t1 if jce <identifiersep> policy <identifiersep> info . is <identifiersep> <identifier> <identifiersep> key <identifiersep> jce <identifiersep> policy ( ) : \n <ect>
\t2 private throttled <identifiersep> submission <identifiersep> handler <identifiersep> interceptor handler <identifiersep> interceptor ; \n \t2 @ override \n \t2 public void add <identifiersep> <identifier> ( final interceptor <identifiersep> registry registry ) { \n \t3 if ( handler <identifiersep> interceptor != null ) { \n <ect>
\t7 cms <identifiersep> xml <identifiersep> content content = cms <identifiersep> xml <identifiersep> content <identifiersep> factory . unmarshal ( m <identifiersep> cms , file ) ; \n \t7 try { \n \t8 content . validate <identifiersep> xml <identifiersep> structure ( new cms <identifiersep> xml <identifiersep> entity <identifiersep> resolver ( m <identifiersep> cms ) ) ; \n \t7 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t4 bytes <identifiersep> counter = get <identifiersep> runtime <identifiersep> context ( ) . get <identifiersep> long <identifiersep> counter ( bytes <identifiersep> copied <identifiersep> cnt <identifiersep> name ) ; \n \t4 file <identifiersep> counter = get <identifiersep> runtime <identifiersep> context ( ) . get <identifiersep> long <identifiersep> counter ( files <identifiersep> copied <identifiersep> cnt <identifiersep> name ) ; } \n \t3 @ override \n \t3 public void flat <identifiersep> map ( file <identifiersep> copy <identifiersep> task task , collector < object > out ) throws exception { \n <ect>
\t2 log . warn ( e ) ; } \n \t1 } else { \n \t1 file s = new file ( get <identifiersep> <identifier> <identifiersep> dir ( ) ) ; \n \t1 if ( ! s . delete ( ) ) { \n <ect>
\t2 return producer ; } \n \t1 public static synchronized void rm <identifiersep> instance ( string producer <identifiersep> id ) { \n \t2 producer producer = producers . remove ( producer <identifiersep> id ) ; \n \t2 if ( producer == null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t2 logger . error ( <string_literal> , entry . get <identifiersep> value ( ) , e ) ; } } \n \t1 for ( entry < string , source <identifiersep> runner > entry : \n \t2 materialized <identifiersep> configuration . get <identifiersep> source <identifiersep> <identifier> ( ) . entry <identifiersep> set ( ) ) { \n \t1 try { \n <ect>
\t3 task <identifiersep> ses . set <identifiersep> attribute ( arg , i ) ; \n \t2 <comment> \n \t2 task <identifiersep> ses . set <identifiersep> attribute ( arg , val ) ; \n <ect>
\t3 futures . add <identifiersep> callback ( current <identifiersep> task , new future <identifiersep> callback < tree <identifiersep> response > ( ) \n \t3 { \n \t4 public void on <identifiersep> success ( tree <identifiersep> response result ) \n \t4 { \n <ect>
\t1 } catch ( sql <identifiersep> exception e1 ) { \n \t2 logger . error ( <string_literal> , \n \t4 e1 ) ; } \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 assert <identifiersep> equals ( <string_literal> , <identifier> ) ; \n \t3 assert <identifiersep> equals ( <string_literal> , <identifier> ) ; \n \t3 session . rollback ( ) ; \n \t3 session . close ( ) ; } \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> get <identifiersep> qualifiers ( ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 set < annotation > qualifiers = utilities . get <identifiersep> qualifiers ( c . class ) ; \n <ect>
\t2 persistence <identifiersep> adapter . set <identifiersep> filtered <identifiersep> persistence <identifiersep> adapters ( stores ) ; \n \t2 create <identifiersep> broker ( persistence <identifiersep> adapter ) . start ( ) ; \n \t2 produce <identifiersep> messages ( queue <identifiersep> a , <number_literal> ) ; \n \t2 produce <identifiersep> messages ( queue <identifiersep> b , 0 ) ; \n <ect>
\t2 remove <identifiersep> interceptor ( client . get <identifiersep> endpoint ( ) . get <identifiersep> binding ( ) . get <identifiersep> in <identifiersep> <identifier> ( ) , \n \t6 soap <identifiersep> header <identifiersep> interceptor . class ) ; \n \t2 client . get <identifiersep> endpoint ( ) . get <identifiersep> binding ( ) . get <identifiersep> in <identifiersep> <identifier> ( ) . add ( new configure <identifiersep> doc <identifiersep> <identifier> <identifiersep> wrapper <identifiersep> interceptor ( true ) ) ; \n \t2 reset <identifiersep> part <identifiersep> types ( client . get <identifiersep> endpoint ( ) . get <identifiersep> binding ( ) ) ; \n <ect>
\t5 power <identifiersep> max <identifiersep> comm <identifiersep> driver . get <identifiersep> the <identifiersep> comm <identifiersep> driver ( ) . start <identifiersep> download ( ) ; } \n \t3 } else { \n \t4 logger . debug ( <string_literal> ) ; } \n \t2 } else if ( trigger <identifiersep> items <identifiersep> update ) { \n <ect>
<comment> \n @ override \n public void resume <identifiersep> node ( string id ) { \n \t1 check <identifiersep> not <identifiersep> null ( id , <string_literal> ) ; \n <ect>
\t2 for ( <identifier> <identifiersep> <identifier> <identifiersep> message message : copied <identifiersep> buffer ) { \n \t3 if ( message . get <identifiersep> <identifier> ( ) == constants . message <identifiersep> active <identifiersep> source \n \t5 && message . get <identifiersep> source ( ) == address ) { \n \t4 m <identifiersep> device . on <identifiersep> message ( message ) ; \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + queue <identifiersep> id + <string_literal> ) ; } \n \t3 txt . commit ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 try { \n \t3 service <identifiersep> configurations . lookup <identifiersep> by <identifiersep> name ( dns , dns <identifiersep> service <identifiersep> name ) \n \t3 logger . warn ( <string_literal> + dns <identifiersep> service <identifiersep> name ) \n \t3 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception nsee ) { \n <ect>
\t1 public boolean next <identifiersep> key <identifiersep> value ( ) throws io <identifiersep> exception \n \t1 { \n \t2 if ( ! iter . has <identifiersep> next ( ) ) \n \t2 { \n <ect>
\t2 if ( use <identifiersep> native <identifiersep> <identifier> ) { \n \t3 try { \n \t4 return net . <identifier> . platform . native . get ( process <identifiersep> <identifier> . class ) ; \n \t3 } catch ( native <identifiersep> integration <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t3 logger . error ( e . get <identifiersep> message ( ) ) ; } } \n \t1 public static void load <identifiersep> commands <identifiersep> to <identifiersep> states ( input <identifiersep> stream is ) { \n \t2 try { \n \t3 prop <identifiersep> commands <identifiersep> to <identifiersep> states . load ( is ) ; \n <ect>
\t2 response = client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> query ( \n \t4 new more <identifiersep> like <identifiersep> this <identifiersep> query <identifiersep> builder ( null , new item [ ] { new item ( <string_literal> , <string_literal> , <string_literal> ) } ) . min <identifiersep> term <identifiersep> freq ( 1 ) . min <identifiersep> doc <identifiersep> freq ( 1 ) ) . get ( ) ; \n \t2 assert <identifiersep> hit <identifiersep> count ( response , 1l ) ; \n \t2 assert <identifiersep> that ( response . get <identifiersep> hits ( ) . get <identifiersep> at ( 0 ) . get <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + vm . get <identifiersep> id ( ) + <string_literal> + so . get <identifiersep> ram <identifiersep> size ( ) + <string_literal> + host <identifiersep> id + <string_literal> + used <identifiersep> capacity + <string_literal> ) ; } \n \t3 } else if ( capacity <identifiersep> type == capacity <identifiersep> vo . capacity <identifiersep> type <identifiersep> cpu ) { \n \t4 used <identifiersep> capacity += so . get <identifiersep> cpu ( ) * so . get <identifiersep> speed ( ) ; \n <ect>
\t8 final transaction <identifiersep> confidence confidence ) throws <identifier> <identifiersep> wallet <identifiersep> exception { \n \t2 <comment> \n \t2 <comment> \n \t2 if ( ! confidence <identifiersep> proto . has <identifiersep> type ( ) ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + mshost . get <identifiersep> service <identifiersep> ip ( ) + <string_literal> + mshost . get <identifiersep> msid ( ) ) ; } } \n \t2 for ( management <identifiersep> server <identifiersep> host <identifiersep> vo mshost : args . get <identifiersep> joined <identifiersep> nodes ( ) ) { \n \t3 if ( mshost . get <identifiersep> id ( ) == args . get <identifiersep> self ( ) . long <identifiersep> value ( ) ) { \n <ect>
\t2 synchronized ( thread <identifiersep> lock ) { \n \t3 thread <identifiersep> lock . notify ( ) ; } \n \t2 long elapsed = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n \t2 if ( elapsed > <number_literal> ) { \n <ect>
\t1 return range ; } \n private static void set <identifiersep> unknown <identifiersep> rc <identifiersep> ds <identifiersep> to <identifiersep> average ( \n \t1 list < long > row <identifiersep> counts , list < long > data <identifiersep> sizes , int avg <identifiersep> row <identifiersep> size ) { \n <ect>
\t5 if ( is <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> invalid ) \n \t6 err <identifiersep> cause += <string_literal> ; \n \t5 if ( failed ) \n \t6 err <identifiersep> cause += <string_literal> ; \n <ect>
\t6 s <identifiersep> logger . info ( <string_literal> + elb <identifiersep> vm ) ; \n \t6 <identifier> <identifiersep> it <identifiersep> mgr . expunge ( elb <identifiersep> vm . get <identifiersep> uuid ( ) ) ; \n \t6 <identifier> <identifiersep> router <identifiersep> dao . remove ( elb <identifiersep> vm . get <identifiersep> id ( ) ) ; \n \t5 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t3 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . successful <identifiersep> shards ( ) , greater <identifiersep> than ( 0 ) ) ; \n \t3 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . failed <identifiersep> shards ( ) , greater <identifiersep> than ( 0 ) ) ; \n \t3 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . successful <identifiersep> shards ( ) , less <identifiersep> than ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . total <identifiersep> shards ( ) ) ) ; \n \t2 } else { \n <ect>
\t2 } else if ( check <identifiersep> is <identifiersep> equal ( operation , cache <identifiersep> constants . cache <identifiersep> operation <identifiersep> url <identifiersep> <identifier> ) ) { \n \t3 log . debug ( <string_literal> ) ; \n \t3 cache . remove <identifiersep> all ( ) ; \n \t2 } else if ( check <identifiersep> is <identifiersep> equal ( operation , cache <identifiersep> constants . cache <identifiersep> operation <identifiersep> url <identifiersep> delete ) ) { \n <ect>
\t3 mbean <identifiersep> registration . unregister ( ) ; \n \t3 mbean <identifiersep> registration = null ; \n \t3 log . debug ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t2 assert delegate . get <identifiersep> class ( ) . get <identifiersep> name ( ) . equals ( task . get <identifiersep> delegate ( ) ) : <string_literal> + delegate . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> + task . get <identifiersep> delegate ( ) ; \n \t2 int result = delegate . cleanup ( this ) ; \n \t2 if ( result < = 0 ) { \n \t3 if ( result == 0 ) { \n <ect>
\t3 catch ( io <identifiersep> exception e ) \n \t3 { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t1 synchronized ( zoo <identifiersep> cache ) { \n \t2 zoo <identifiersep> cache . clear ( ) ; \n \t2 if ( zoo . exists ( zk <identifiersep> user <identifiersep> path ) ) { \n \t2 zoo . recursive <identifiersep> delete ( zk <identifiersep> user <identifiersep> path , node <identifiersep> missing <identifiersep> policy . skip ) ; \n <ect>
\t2 super . stop ( ) ; } \n \t1 @ override \n \t1 public void add <identifiersep> session ( connection <identifiersep> context context , session <identifiersep> info info ) throws exception { \n \t2 if ( is <identifiersep> log <identifiersep> all ( ) || is <identifiersep> log <identifiersep> session <identifiersep> events ( ) ) { \n <ect>
\t2 log . debug ( <string_literal> , in <identifiersep> session . get <identifiersep> session <identifiersep> id ( ) ) ; \n \t2 property <identifiersep> change <identifiersep> support . fire <identifiersep> property <identifiersep> change ( sessions <identifiersep> property , null , sessions ) ; } \n \t1 public void remove <identifiersep> dynamic <identifiersep> session ( session <identifiersep> id in <identifiersep> session <identifiersep> id ) { \n \t2 sessions . remove ( in <identifiersep> session <identifiersep> id ) ; \n <ect>
\t3 if ( old <identifiersep> <identifier> != null ) { \n \t4 int comp = old <identifiersep> <identifier> . compare <identifiersep> to ( new <identifiersep> <identifier> ) ; \n \t4 if ( comp > 0 ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 } ; \n \t1 try { \n \t1 report <identifiersep> executor . execute ( new logging <identifiersep> runnable ( log , r ) ) ; \n \t1 } catch ( rejected <identifiersep> execution <identifiersep> exception <identifier> ) { \n <ect>
\t1 { \n \t2 try { \n \t3 return create <identifiersep> attachment <identifiersep> url ( filename , <identifier> , name , <identifier> , context ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 for ( curator <identifiersep> framework curator : cache . values ( ) ) { \n \t6 try { \n \t7 curator . close ( ) ; \n \t6 } catch ( exception ex ) { \n <ect>
\t1 { \n \t2 log . error ( <string_literal> , e ) ; } \n \t1 catch ( m <identifiersep> bean <identifiersep> registration <identifiersep> exception e ) \n \t1 { \n <ect>
\t7 image . snap <identifiersep> remove ( snapshot <identifiersep> name ) ; } \n \t6 rbd . close ( image ) ; \n \t6 r . io <identifiersep> ctx <identifiersep> destroy ( io ) ; \n \t5 } catch ( final exception e ) { \n <ect>
\t3 output <identifiersep> stream out = s . get <identifiersep> output <identifiersep> stream ( ) ; \n \t3 out . write ( data <identifiersep> helper . get <identifiersep> ascii ( <string_literal> ) ) ; \n \t3 buffered <identifiersep> reader reader = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( s . get <identifiersep> input <identifiersep> stream ( ) ) ) ; \n \t3 string line = reader . read <identifiersep> line ( ) ; \n <ect>
\t3 return response . ok ( random <identifiersep> instance ) . build ( ) ; } \n \t2 catch ( exception e ) \n \t2 { \n \t3 thread <identifiersep> utils . check <identifiersep> interrupted ( e ) ; \n <ect>
\t2 close <identifiersep> consistency <identifiersep> check ( ) ; \n \t2 err = null ; \n \t2 } catch ( runtime <identifiersep> exception t ) { \n \t2 err = t ; \n <ect>
\t3 attach <identifiersep> segment <identifiersep> metadata <identifiersep> with <identifiersep> dict ( original <identifiersep> segment , job . get <identifiersep> configuration ( ) ) ; \n \t3 this . delete <identifiersep> path ( job . get <identifiersep> configuration ( ) , output ) ; \n \t3 return wait <identifiersep> for <identifiersep> completion ( job ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 log . error ( <string_literal> , e ) ; } } } \n \t2 } ) ; } \n \t1 public void shutdown ( ) { \n \t2 try { \n <ect>
\t3 } catch ( exception x ) { \n \t4 if ( <identifier> != null && ! async <identifiersep> reply ) { \n \t5 <identifier> . reply <identifiersep> failed ( <identifier> . message , reply , sender , x ) ; \n \t4 } else { \n <ect>
\t2 s <identifiersep> logger . warn ( <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) + <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> display <identifiersep> name ( ) + <string_literal> + logical <identifiersep> switch <identifiersep> uuid ) ; \n \t2 try { \n \t3 nicira <identifiersep> nvp <identifiersep> api . delete <identifiersep> logical <identifiersep> switch <identifiersep> port ( logical <identifiersep> switch <identifiersep> uuid , l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) ) ; \n \t2 } catch ( nicira <identifiersep> nvp <identifiersep> api <identifiersep> exception exception <identifiersep> delete <identifiersep> l <identifiersep> switch <identifiersep> port ) { \n <ect>
\t1 public boolean can <identifiersep> process ( proxy <identifiersep> details proxy ) { \n \t2 return proxy instanceof proxy <identifiersep> place <identifiersep> details ; } \n \t1 @ override \n \t1 public type process ( proxy <identifiersep> details proxy ) { \n <ect>
public string password ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <string_literal> ) ; } \n public void set <identifiersep> password ( string value ) { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 log . warning ( <string_literal> ) ; \n \t2 log . warning ( <string_literal> , new exception ( <string_literal> ) ) ; \n <ect>
\t4 <comment> \n \t4 response <identifiersep> token = sasl <identifiersep> server . evaluate <identifiersep> response ( client <identifiersep> token ) ; \n \t4 if ( sasl <identifiersep> server . is <identifiersep> complete ( ) ) { \n \t5 string authorization <identifiersep> id = sasl <identifiersep> server . get <identifiersep> authorization <identifiersep> id ( ) ; \n <ect>
\t3 start <identifiersep> latch . await ( ) ; \n \t3 in . add <identifiersep> all ( put <identifiersep> events ( channel , <string_literal> , <number_literal> , <number_literal> , true ) ) ; \n \t2 } catch ( throwable t ) { \n \t3 error . set ( true ) ; \n <ect>
\t6 log . warn ( <string_literal> , delimiter <identifiersep> for <identifiersep> reporter , named <identifiersep> reporter , global <identifiersep> delimiter ) ; \n \t6 delimiter <identifiersep> for <identifiersep> reporter = string . value <identifiersep> of ( global <identifiersep> delimiter ) ; } \n \t5 this . delimiters . add ( delimiter <identifiersep> for <identifiersep> reporter . char <identifiersep> at ( 0 ) ) ; } \n \t4 catch ( throwable t ) { \n <ect>
\t2 factory . set <identifiersep> singleton ( false ) ; \n \t2 final private <identifiersep> key private <identifiersep> key = factory . get <identifiersep> object ( ) ; \n \t2 logger . debug ( <string_literal> , private <identifiersep> key . get <identifiersep> algorithm ( ) ) ; \n \t2 final cipher cipher = cipher . get <identifiersep> instance ( private <identifiersep> key . get <identifiersep> algorithm ( ) ) ; \n <ect>
\t2 return new create <identifiersep> entity <identifiersep> download <identifiersep> url <identifiersep> answer ( <string_literal> , create <identifiersep> entity <identifiersep> download <identifiersep> url <identifiersep> answer . result <identifiersep> success ) ; } \n \t1 @ override \n \t1 public answer handle <identifiersep> delete <identifiersep> entity <identifiersep> download <identifiersep> url <identifiersep> command ( delete <identifiersep> entity <identifiersep> download <identifiersep> url <identifiersep> command cmd ) { \n \t2 <comment> \n <ect>
\t1 private string encode <identifiersep> param ( string value ) { \n \t2 try { \n \t3 return url <identifiersep> encoder . encode ( value , <string_literal> ) . replace <identifiersep> all ( <string_literal> , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public void print <identifiersep> issue <identifiersep> existing <identifiersep> h <identifiersep> tables ( ) { \n \t2 logger . info ( <string_literal> ) ; \n \t2 for ( string seg <identifiersep> full <identifiersep> name : issue <identifiersep> exist <identifiersep> h <identifiersep> tables ) { \n \t3 string [ ] sep <identifiersep> name <identifiersep> list = seg <identifiersep> full <identifiersep> name . split ( <string_literal> ) ; \n <ect>
\t5 . set <identifiersep> credentials <identifiersep> provider ( user ) \n \t5 . set <identifiersep> timeout ( pull <identifiersep> push <identifiersep> timeout <identifiersep> seconds ) \n \t5 . call ( ) ; \n \t2 } catch ( git <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t1 if ( uses <identifiersep> <identifier> <identifiersep> <identifier> ) { \n \t1 user <identifiersep> y = user <identifiersep> features <identifiersep> mapping ( data <identifiersep> model . get <identifiersep> user <identifiersep> i <identifiersep> ds ( ) , data <identifiersep> model . get <identifiersep> num <identifiersep> users ( ) , features . get <identifiersep> u ( ) ) ; \n \t1 item <identifiersep> y = item <identifiersep> features <identifiersep> mapping ( data <identifiersep> model . get <identifiersep> item <identifiersep> i <identifiersep> ds ( ) , data <identifiersep> model . get <identifiersep> num <identifiersep> items ( ) , features . get <identifiersep> m ( ) ) ; } \n \t1 for ( int iteration = 0 ; iteration < num <identifiersep> iterations ; iteration ++ ) { \n <ect>
\t1 gen . write <identifiersep> end <identifiersep> object ( ) ; \n \t1 gen . flush ( ) ; \n \t1 query <identifiersep> logger . info ( writer . to <identifiersep> string ( ) ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( ejb != null && ! this . home <identifiersep> as <identifiersep> component ) { \n \t3 try { \n \t4 ejb . remove ( ) ; } \n \t3 catch ( throwable ex ) { \n <ect>
\t3 try { \n \t4 <comment> \n \t4 response . get <identifiersep> writer ( ) . close ( ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t5 deleted <identifiersep> date = date <identifiersep> util . parse <identifiersep> date <identifiersep> string ( s <identifiersep> <identifier> <identifiersep> time <identifiersep> zone , deleted <identifiersep> ts ) ; } \n \t4 usage <identifiersep> records . add ( new usage <identifiersep> vpn <identifiersep> user <identifiersep> vo ( zone <identifiersep> id , acct <identifiersep> id , d <identifiersep> id , user <identifiersep> id , user <identifiersep> name , created <identifiersep> date , deleted <identifiersep> date ) ) ; } \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t2 logger . debug ( <string_literal> , hz . get <identifiersep> cluster ( ) . get <identifiersep> instance <identifiersep> name ( ) ) ; \n \t2 final hazelcast <identifiersep> instance instance = hazelcast . get <identifiersep> hazelcast <identifiersep> instance <identifiersep> by <identifiersep> name ( hz . get <identifiersep> cluster ( ) . get <identifiersep> instance <identifiersep> name ( ) ) ; \n \t2 instance . get <identifiersep> config ( ) . get <identifiersep> map <identifiersep> configs ( ) . key <identifiersep> set ( ) . for <identifiersep> each ( key - > { \n \t3 final i <identifiersep> map map = instance . get <identifiersep> map ( key ) ; \n <ect>
\t3 <comment> \n \t3 <identifier> . send <identifiersep> opennet <identifiersep> ref ( true , uid , next , <identifier> . crypto . my <identifiersep> compressed <identifiersep> full <identifiersep> ref ( ) , this ) ; \n \t3 orig <identifiersep> tag . finished <identifiersep> waiting <identifiersep> for <identifiersep> opennet ( next ) ; \n \t2 } catch ( fs <identifiersep> parse <identifiersep> exception e ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 <identifier> <identifiersep> in <identifiersep> system <identifiersep> vm = true ; } \n \t2 <identifier> <identifiersep> storage <identifiersep> ip = ( string ) params . get ( <string_literal> ) ; \n \t2 if ( <identifier> <identifiersep> storage <identifiersep> ip == null && <identifier> <identifiersep> in <identifiersep> system <identifiersep> vm ) { \n <ect>
\t3 if ( session . is <identifiersep> connected ( ) ) { \n \t4 session . do <identifiersep> work ( new rollback <identifiersep> work ( ) ) ; } \n \t3 session . close ( ) ; \n \t3 session = null ; \n <ect>
\t1 throw <identifier> <identifiersep> exception ; } } \n @ after <identifiersep> class \n public static void stop <identifiersep> web <identifiersep> hcat <identifiersep> in <identifiersep> mem ( ) { \n \t1 if ( <identifier> <identifiersep> server != null ) { \n <ect>
\t9 instance <identifiersep> id + <string_literal> + vm <identifiersep> ip ) ; } } } \n \t4 load <identifiersep> balancer . set <identifiersep> state ( backup <identifiersep> state ) ; \n \t4 <identifier> <identifiersep> lb <identifiersep> dao . persist ( load <identifiersep> balancer ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + load <identifiersep> balancer <identifiersep> id + <string_literal> ) ; } \n <ect>
\t2 break ; } \n \t1 } while ( retry <identifiersep> count ++ < op <identifiersep> max <identifiersep> retry ) ; \n \t1 <comment> \n \t1 if ( retry <identifiersep> count >= op <identifiersep> max <identifiersep> retry && ! tgt <identifiersep> service . target <identifiersep> has <identifiersep> lun ( volume <identifiersep> id , tid , lun , timeout ) ) { \n <ect>
\t3 assert <identifiersep> equals ( <string_literal> , true , broker . is <identifiersep> use <identifiersep> jmx ( ) ) ; \n \t3 assert <identifiersep> equals ( <string_literal> , true , broker . is <identifiersep> persistent ( ) ) ; \n \t3 assert <identifiersep> equals ( <string_literal> , false , broker . is <identifiersep> use <identifiersep> shutdown <identifiersep> hook ( ) ) ; \n \t3 assert <identifiersep> equals ( <string_literal> , true , broker . is <identifiersep> delete <identifiersep> all <identifiersep> messages <identifiersep> on <identifiersep> startup ( ) ) ; \n <ect>
\t1 public void after <identifiersep> test <identifiersep> suite ( ) { \n \t2 logger . info ( <string_literal> ) ; } \n \t1 @ before \n \t1 public void set <identifiersep> up ( ) throws exception { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . initializing ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . relocating ) . get ( 0 ) . relocating <identifiersep> node <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n <ect>
\t1 public static final boolean debug = bc <identifiersep> debugging . should <identifiersep> debug <identifiersep> log ( <string_literal> ) ; \n \t1 public static item <identifiersep> stack load <identifiersep> complex <identifiersep> item <identifiersep> stack ( string line ) { \n \t2 string [ ] args = line . split ( <string_literal> ) ; \n \t2 if ( args . length == 0 ) { \n <ect>
\t2 } catch ( management <identifiersep> server <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( virtual <identifiersep> machine <identifiersep> migration <identifiersep> exception ex ) { \n <ect>
public void handle <identifiersep> error ( throwable ex ) { \n \t1 assert ex != null ; \n \t1 synchronized ( my <identifiersep> lock ) { \n \t1 current <identifiersep> exception = ex ; } \n <ect>
\t3 log . info ( <string_literal> , url ) ; } \n \t3 catch ( exception e ) { \n \t3 log . error ( <string_literal> , jar . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; } } \n \t2 } else { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t3 switch ( result . return <identifiersep> status ) { \n \t3 case po <identifiersep> status . status <identifiersep> ok : \n \t4 <comment> \n <ect>
\t2 if ( ! ( appender instanceof appender <identifiersep> <identifier> ) ) { \n \t3 <comment> \n \t3 log . debug ( <string_literal> + name + <string_literal> + appender . get <identifiersep> class ( ) + <string_literal> ) ; } \n \t2 if ( level != null ) { \n <ect>
\t3 string extension = <string_literal> ; \n \t3 if ( <identifier> . length > 1 ) { \n \t3 extension = <identifier> [ <identifier> . length - 1 ] ; \n \t3 if ( ! file <identifiersep> operations . get <identifiersep> valid <identifiersep> extensions ( ) . contains ( extension ) ) { \n <ect>
\t2 map < string , i <identifiersep> cms <identifiersep> preference > prefs = open <identifiersep> cms . get <identifiersep> <identifier> <identifiersep> manager ( ) . get <identifiersep> default <identifiersep> user <identifiersep> settings ( ) . get <identifiersep> preferences ( ) ; \n \t2 if ( prefs . contains <identifiersep> key ( key ) ) { \n \t3 prefs . get ( key ) . set <identifiersep> value ( m <identifiersep> current <identifiersep> preferences , value ) ; \n \t2 } else { \n <ect>
\t4 if ( ctx . profile <identifiersep> <identifier> ( ) . is <identifiersep> <identifier> ( peer ) ) { \n \t5 rv . add ( peer ) ; \n \t4 } else { \n \t5 if ( log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 first <identifiersep> processor . process <identifiersep> request ( si ) ; \n \t4 if ( si . cnxn != null ) { \n \t5 inc <identifiersep> in <identifiersep> process ( ) ; } \n \t3 } else { \n <ect>
\t1 <comment> \n \t1 try { \n \t1 ss = new server <identifiersep> socket ( port ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 create <identifiersep> ticket <identifiersep> collections ( ) ; \n \t2 logger . info ( <string_literal> , mongo <identifiersep> template . get <identifiersep> collection <identifiersep> names ( ) ) ; } \n \t1 private db <identifiersep> collection create <identifiersep> ticket <identifiersep> collection ( final ticket <identifiersep> definition ticket , final mongo <identifiersep> db <identifiersep> connection <identifiersep> factory factory ) { \n \t2 final string collection <identifiersep> name = ticket . get <identifiersep> properties ( ) . get <identifiersep> storage <identifiersep> name ( ) ; \n <ect>
\t3 int first <identifiersep> <identifier> <identifiersep> controller <identifiersep> bus <identifiersep> num = 0 ; \n \t3 int num <identifiersep> <identifier> <identifiersep> controller <identifiersep> for <identifiersep> system <identifiersep> vm = 1 ; \n \t3 boolean has <identifiersep> snapshot = false ; \n \t3 if ( vm <identifiersep> mo != null ) { \n <ect>
\t2 avg . add <identifiersep> <identifier> ( pref . get <identifiersep> value ( ) ) ; } \n \t1 return avg . get <identifiersep> average ( ) ; } } \n @ override \n public <identifier> <identifier> ( ) throws taste <identifiersep> exception { \n <ect>
\t1 @ override \n \t1 public synchronized void init ( job <identifiersep> engine <identifiersep> config job <identifiersep> engine <identifiersep> config , job <identifiersep> lock job <identifiersep> lock ) throws scheduler <identifiersep> exception { \n \t2 string server <identifiersep> mode = job <identifiersep> engine <identifiersep> config . get <identifiersep> config ( ) . get <identifiersep> server <identifiersep> mode ( ) ; \n \t2 if ( ! ( <string_literal> . equals ( server <identifiersep> mode . to <identifiersep> lower <identifiersep> case ( ) ) || <string_literal> . equals ( server <identifiersep> mode . to <identifiersep> lower <identifiersep> case ( ) ) ) ) { \n <ect>
\t2 if ( <identifier> <identifiersep> rules <identifiersep> mgr . revoke <identifiersep> port <identifiersep> forwarding <identifiersep> rules <identifiersep> for <identifiersep> vm ( vm <identifiersep> id ) ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> id + <string_literal> ) ; \n \t2 } else { \n \t3 success = false ; \n <ect>
<comment> \n \t1 public int load <identifiersep> bean <identifiersep> definitions ( encoded <identifiersep> resource encoded <identifiersep> resource ) throws bean <identifiersep> definition <identifiersep> store <identifiersep> exception { \n \t2 assert . not <identifiersep> null ( encoded <identifiersep> resource , <string_literal> ) ; \n <ect>
\t3 discard discard = new discard ( ) ; \n \t3 discard . set <identifiersep> discard <identifiersep> all ( true ) ; \n \t3 channel . get <identifiersep> protocol <identifiersep> stack ( ) . insert <identifiersep> protocol ( discard , protocol <identifiersep> stack . position . above , tp . class ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 network <identifiersep> needs <identifiersep> migration ( network , new <identifiersep> physical <identifiersep> network <identifiersep> id , old <identifiersep> ntwk <identifiersep> off , new <identifiersep> ntwk <identifiersep> off ) ; } } \n \t1 private void verify <identifiersep> already <identifiersep> migrated <identifiersep> <identifier> ( long migrated <identifiersep> vpc <identifiersep> id , long vpc <identifiersep> offering <identifiersep> id , map < string , string > network <identifiersep> to <identifiersep> offering ) { \n \t2 vpc migrated <identifiersep> vpc = <identifier> <identifiersep> vpc <identifiersep> dao . find <identifiersep> by <identifiersep> id ( migrated <identifiersep> vpc <identifiersep> id ) ; \n \t2 if ( migrated <identifiersep> vpc . get <identifiersep> vpc <identifiersep> offering <identifiersep> id ( ) != vpc <identifiersep> offering <identifiersep> id ) { \n <ect>
<comment> \n \t2 public void handle <identifiersep> your <identifiersep> extra <identifiersep> info ( list < extra <identifiersep> info <identifiersep> block > extra <identifiersep> infos ) \n \t2 { \n <ect>
\t6 <string_literal> + e . to <identifiersep> string ( ) ) ; \n \t5 valid = false ; } } \n \t3 else \n \t3 { \n <ect>
\t2 zoo <identifiersep> keeper <identifiersep> server <identifiersep> main main = new zoo <identifiersep> keeper <identifiersep> server <identifiersep> main ( ) ; \n \t2 try { \n \t3 main . initialize <identifiersep> and <identifiersep> run ( args ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t1 if ( response . get <identifiersep> payload ( ) != null ) { \n \t2 try { \n \t3 return <identifier> . to <identifiersep> string ( response . get <identifiersep> payload ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 channel = bootstrap . bind ( address ) ; \n \t4 group . add ( channel ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 private list < string > <identifier> <identifiersep> fields ; \n \t1 private string id <identifiersep> alias = null ; \n \t1 private string signature ; \n \t1 public mongo <identifiersep> loader ( ) { \n <ect>
\t1 return instance ; } \n public boolean should <identifiersep> disable ( ) { \n \t1 if ( is <identifiersep> <identifier> <identifiersep> locked ( <identifier> <identifiersep> id ) ) { \n \t1 <comment> \n <ect>
\t2 if ( dest <identifiersep> ip <identifiersep> or <identifiersep> cidr == null ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( ! net <identifiersep> utils . is <identifiersep> valid <identifiersep> ip ( dest <identifiersep> ip <identifiersep> or <identifiersep> cidr ) && ! net <identifiersep> utils . is <identifiersep> valid <identifiersep> cidr ( dest <identifiersep> ip <identifiersep> or <identifiersep> cidr ) ) { \n <ect>
\t4 invocation . set <identifiersep> input ( <string_literal> , <string_literal> ) ; \n \t3 } catch ( invalid <identifiersep> value <identifiersep> exception ex ) { \n \t4 logger . error ( <string_literal> , ex . get <identifiersep> message ( ) ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t2 final boolean connected = ping <identifiersep> peer ( ) ; \n \t2 if ( ! connected ) { \n \t3 erl <identifiersep> logger . error ( otp <identifiersep> node <identifiersep> proxy . could <identifiersep> not <identifiersep> connect , label ) ; \n \t3 throw new exception ( string . format ( otp <identifiersep> node <identifiersep> proxy . could <identifiersep> not <identifiersep> connect , label ) ) ; } \n <ect>
\t1 public void cleanup ( ) { \n \t2 log . info ( <string_literal> , root <identifiersep> dir ) ; \n \t2 if ( db != null ) { \n \t3 db . close ( ) ; } \n <ect>
\t3 return ; } \n \t2 long <identifier> <identifiersep> id = ss <identifiersep> host . get <identifiersep> id ( ) ; \n \t2 long zone <identifiersep> id = ss <identifiersep> host . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ; \n \t2 if ( ! ( ss <identifiersep> host . get <identifiersep> type ( ) == host . type . secondary <identifiersep> storage || ss <identifiersep> host . get <identifiersep> type ( ) == host . type . local <identifiersep> secondary <identifiersep> storage ) ) { \n <ect>
\t2 if ( result . equals ( <string_literal> ) ) { \n \t3 <identifier> <identifiersep> context . wait <identifiersep> for <identifiersep> task <identifiersep> progress <identifiersep> done ( mor <identifiersep> task ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t1 public void test <identifiersep> query <identifiersep> contact <identifiersep> status ( ) \n \t2 throws exception \n \t1 { \n \t2 <comment> \n <ect>
\t2 log . info ( <string_literal> + class <identifiersep> name + <string_literal> ) ; \n \t2 return qualifiers ; } \n \t1 @ override \n \t1 public class < ? extends annotation > get <identifiersep> scope ( ) { \n <ect>
\t2 expect <identifiersep> successful <identifiersep> response <identifiersep> from <identifiersep> token <identifiersep> endpoint ( code , expected <identifiersep> scope , client <identifiersep> secret ) ; } \n \t1 private void expect <identifiersep> successful <identifiersep> response <identifiersep> from <identifiersep> token <identifiersep> endpoint ( string code , string expected <identifiersep> scope , string client <identifiersep> secret ) throws exception { \n \t2 o <identifiersep> auth <identifiersep> client . access <identifiersep> token <identifiersep> response response = oauth . do <identifiersep> access <identifiersep> token <identifiersep> request ( code , client <identifiersep> secret ) ; \n \t2 assert <identifiersep> equals ( <number_literal> , response . get <identifiersep> status <identifiersep> code ( ) ) ; \n <ect>
\t6 user <identifiersep> log . info ( <string_literal> , hosts . to <identifiersep> string ( ) ) ; \n \t6 user <identifiersep> log . info ( <string_literal> , config . get <identifiersep> cluster <identifiersep> name ( ) ) ; \n \t6 cluster . create ( config . get <identifiersep> cluster <identifiersep> name ( ) ) ; \n \t6 break ; } \n <ect>
\t3 <comment> \n \t3 if ( error <identifiersep> handler != null ) \n \t4 error <identifiersep> handler . handle <identifiersep> error <identifiersep> on <identifiersep> set ( this , e , key ) ; \n \t3 <comment> \n <ect>
\t1 logger . debug ( <string_literal> + count ) ; \n \t1 logger . debug ( <string_literal> + dir ) ; \n \t1 logger . debug ( <string_literal> + is <identifiersep> outer ) ; \n \t1 logger . debug ( <string_literal> + is <identifiersep> big ) ; \n <ect>
\t3 for ( int j = 0 ; j < <number_literal> ; j ++ ) { \n \t4 int <identifier> = incoming <identifiersep> byte & ( int ) math . <identifier> ( <number_literal> . <identifier> , j ) ; \n \t4 int <identifier> = ( int ) math . <identifier> ( <number_literal> . <identifier> , j ) ; \n \t4 if ( <identifier> == <identifier> ) { \n <ect>
\t8 <identifier> <identifiersep> tunnel = info ; } } } \n \t5 <comment> \n \t5 if ( <identifier> <identifiersep> tunnel != null ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 run <identifiersep> <identifier> <identifiersep> test <identifiersep> <identifier> ( <identifier> ) ; } } \n \t1 private void run <identifiersep> test <identifiersep> <identifier> ( string <identifier> <identifiersep> binary ) throws exception { \n \t2 string utils = find <identifiersep> utils <identifiersep> file ( ) ; \n \t2 for ( string file : find <identifiersep> test <identifiersep> files ( ) ) { \n <ect>
\t1 protected abstract failure <identifiersep> detector init <identifiersep> failure <identifiersep> detector ( final client <identifiersep> config config , \n <number_literal> cluster cluster ) ; \n \t1 public failure <identifiersep> detector get <identifiersep> failure <identifiersep> detector ( ) { \n \t2 if ( this . cluster == null ) { \n <ect>
\t1 log . warn ( <string_literal> + snapshot <identifiersep> id + <string_literal> , e ) ; \n \t1 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> + snapshot <identifiersep> id + <string_literal> , e ) ; } \n \t1 <comment> \n \t1 try { \n <ect>
\t2 if ( response == null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( ! response . get <identifiersep> result ( ) ) { \n <ect>
\t4 new <identifiersep> snapshot . set <identifiersep> path ( key ) ; \n \t4 ret <identifiersep> obj = new <identifiersep> snapshot ; } \n \t3 return new copy <identifiersep> cmd <identifiersep> answer ( ret <identifiersep> obj ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 <identifier> <identifiersep> agent <identifiersep> mgr . send ( agent <identifiersep> id , cmds , <identifier> <identifiersep> answer <identifiersep> listener ) ; \n \t6 s <identifiersep> logger . trace ( <string_literal> + vm . get <identifiersep> instance <identifiersep> name ( ) + <string_literal> + <identifier> <identifiersep> work <identifiersep> queue . size ( ) ) ; } \n \t4 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t1 sb . append ( mount <identifiersep> entry ) ; } \n \t1 byte <identifiersep> array <identifiersep> input <identifiersep> stream is = new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( sb . to <identifiersep> string ( ) . get <identifiersep> bytes ( utf <identifiersep> <number_literal> ) ) ; \n \t1 buffered <identifiersep> reader reader = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( is ) ) ; \n \t1 list < mount > mounts = file <identifiersep> system <identifiersep> monitor . get <identifiersep> mounts <identifiersep> from <identifiersep> file ( reader ) ; \n <ect>
\t2 try { \n \t3 new <identifiersep> page = d2w . factory ( ) . page <identifiersep> for <identifiersep> configuration <identifiersep> named ( an <identifiersep> action <identifiersep> name , session ( ) ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception ex ) { \n \t3 <comment> \n <ect>
\t2 crypto <identifiersep> module = instantiate <identifiersep> crypto <identifiersep> module ( crypto <identifiersep> module <identifiersep> <identifier> ) ; \n \t2 crypto <identifiersep> modules <identifiersep> cache . put ( crypto <identifiersep> module <identifiersep> <identifier> , crypto <identifiersep> module ) ; } } \n \t1 return crypto <identifiersep> module ; } \n private static crypto <identifiersep> module instantiate <identifiersep> crypto <identifiersep> module ( string crypto <identifiersep> module <identifiersep> <identifier> ) { \n <ect>
\t7 <identifier> . close ( stream , threw ) ; } } \n \t4 } ) ; \n \t4 return new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( content ) ; \n \t3 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t3 grpc <identifiersep> server . shutdown ( ) ; \n \t3 log . info ( <string_literal> ) ; } } \n \t1 @ test \n \t1 public void test <identifiersep> ping <identifiersep> sync <identifiersep> sync <identifiersep> method <identifiersep> invocation ( ) throws exception { \n <ect>
\t1 public void cleanup <identifiersep> on <identifiersep> success ( string location , job job ) { } \n \t1 @ override \n \t1 public void check <identifiersep> schema ( resource <identifiersep> schema s ) throws io <identifiersep> exception { \n \t2 if ( ! ( <identifier> instanceof load <identifiersep> store <identifiersep> <identifier> ) ) { \n <ect>
\t1 @ override \n \t1 public void enable ( ) { \n \t2 if ( tf <identifiersep> config != null ) { \n \t3 if ( tf <identifiersep> config . e <identifiersep> is <identifiersep> set ( tf <identifiersep> config . e <identifiersep> class ( ) . get <identifiersep> e <identifiersep> structural <identifiersep> feature ( <string_literal> ) ) ) { \n <ect>
\t4 primary <identifiersep> key = ( ns <identifiersep> dictionary ) arr . last <identifiersep> object ( ) ; \n \t3 } else { \n \t4 log . warn ( <string_literal> + entity <identifiersep> name + <string_literal> ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 for ( realization <identifiersep> entry project <identifiersep> data <identifiersep> model : project . get <identifiersep> realization <identifiersep> entries ( ) ) { \n \t3 if ( project <identifiersep> data <identifiersep> model . get <identifiersep> type ( ) == realization <identifiersep> type . cube ) { \n \t4 cube <identifiersep> instance cube = get <identifiersep> cube <identifiersep> manager ( ) . get <identifiersep> cube ( project <identifiersep> data <identifiersep> model . get <identifiersep> realization ( ) ) ; \n \t4 if ( cube == null ) { \n <ect>
\t2 if ( registry == null ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( publisher == null ) { \n <ect>
\t5 if ( break <identifiersep> on <identifiersep> null ) { \n \t6 break ; } } \n \t4 if ( session . get <identifiersep> transacted ( ) ) { \n \t5 if ( batch <identifiersep> size > 0 && received > 0 && received % batch <identifiersep> size == 0 ) { \n <ect>
\t6 s <identifiersep> logger . info ( <string_literal> ) ; \n \t5 break ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> , uhe ) ; \n \t3 throw new server <identifiersep> exception ( <string_literal> , uhe ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t1 { \n \t2 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 for ( int i = days <identifiersep> to <identifiersep> generate ; i >= 1 ; i -- ) \n \t2 { \n <ect>
\t1 res = <identifier> <identifiersep> client . get <identifiersep> instance ( ) . upload <identifiersep> server <identifiersep> certificate ( \n \t2 accounts . lookup <identifiersep> system <identifiersep> account <identifiersep> by <identifiersep> alias ( account <identifiersep> identifiers . imaging <identifiersep> system <identifiersep> account ) . get <identifiersep> user <identifiersep> id ( ) , \n \t2 server <identifiersep> certificate <identifiersep> name , default <identifiersep> server <identifiersep> cert <identifiersep> path , cert <identifiersep> pem , pk <identifiersep> pem , \n \t2 null ) ; \n <ect>
\t4 org . <identifier> . context . annotation . property <identifiersep> source . class ) ) { \n \t3 if ( this . environment instanceof configurable <identifiersep> environment ) { \n \t4 process <identifiersep> property <identifiersep> source ( property <identifiersep> source ) ; } \n \t3 else { \n <ect>
\t2 stack <identifiersep> resource <identifiersep> entity . set <identifiersep> description ( <string_literal> ) ; <comment> \n \t2 stack <identifiersep> resource <identifiersep> entity = stack <identifiersep> resource <identifiersep> entity <identifiersep> manager . update <identifiersep> resource <identifiersep> info ( stack <identifiersep> resource <identifiersep> entity , resource <identifiersep> info ) ; \n \t2 stack <identifiersep> resource <identifiersep> entity <identifiersep> manager . update <identifiersep> stack <identifiersep> resource ( stack <identifiersep> resource <identifiersep> entity ) ; } \n \t1 } catch ( not <identifiersep> a <identifiersep> resource <identifiersep> failure <identifiersep> exception ex ) { \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , counter . initial <identifiersep> value + 1 , id2 ) ; \n \t2 <comment> \n \t2 base = client . target ( generate <identifiersep> url ( <string_literal> + id1 ) ) ; \n \t2 response = base . request ( ) . accept ( constants . media <identifiersep> type <identifiersep> test <identifiersep> xml ) . get ( ) ; \n <ect>
\t5 } else { \n \t6 mod . set <identifiersep> download <identifiersep> url ( null ) ; \n \t6 mod . set <identifiersep> update <identifiersep> version ( null ) ; } } \n \t4 catch ( module <identifiersep> exception e ) { \n <ect>
\t3 if ( conf <identifiersep> dir != null ) \n \t4 trigger <identifiersep> dir = new file ( conf <identifiersep> dir . get <identifiersep> file ( ) ) ; } \n \t2 if ( trigger <identifiersep> dir == null || ! trigger <identifiersep> dir . exists ( ) ) \n \t2 { \n <ect>
\t3 return ; \n \t2 if ( file == null ) \n \t3 return ; \n <ect>
\t2 this . log = log ; } \n \t1 public void log ( fault fault ) { \n \t2 <comment> \n \t2 logger tmp <identifiersep> logger = logger . get <identifiersep> logger ( fault <identifiersep> logger . class ) ; \n <ect>
\t1 public view on <identifiersep> create <identifiersep> view ( @ non <identifiersep> null layout <identifiersep> inflater inflater , view <identifiersep> group container , \n \t7 @ nullable bundle saved <identifiersep> instance <identifiersep> state ) { \n \t2 log . debug ( tag , <string_literal> + this + <string_literal> + saved <identifiersep> instance <identifiersep> state ) ; \n \t2 bundle arguments = get <identifiersep> arguments ( ) ; \n <ect>
\t7 e . get <identifiersep> out ( ) . set <identifiersep> body ( <string_literal> ) ; \n \t7 e . get <identifiersep> out ( ) . set <identifiersep> header ( <string_literal> , <string_literal> ) ; } \n \t6 e . set <identifiersep> property ( <string_literal> , <string_literal> ) ; \n \t6 e . set <identifiersep> property ( <string_literal> , charset . default <identifiersep> charset ( ) ) ; \n <ect>
\t4 logger . normal ( this , <string_literal> + this + <string_literal> + ref ) ; \n \t3 else \n \t4 logger . normal ( this , <string_literal> + this ) ; \n \t2 } catch ( fs <identifiersep> parse <identifiersep> exception e ) { \n <ect>
\t1 netty <identifiersep> channel . close ( ) ; \n \t1 try { \n \t2 netty <identifiersep> channel . get <identifiersep> close <identifiersep> future ( ) . await ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 read <identifiersep> intercept <identifiersep> event . fire ( <string_literal> ) ; \n \t2 object result = context . proceed ( ) ; \n <ect>
\t4 <comment> \n \t4 qu . execute ( runnable ) ; } \n \t2 } catch ( rejected <identifiersep> execution <identifiersep> exception rex ) { \n \t3 if ( ! has <identifiersep> logged <identifiersep> async <identifiersep> warning ) { \n <ect>
\t3 string path = structr <identifiersep> file . get <identifiersep> path ( ) ; \n \t3 tx . success ( ) ; \n \t3 return path ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t5 return setup <identifiersep> ca ( ) ; \n \t4 } finally { \n \t5 ca <identifiersep> lock . unlock ( ) ; } \n \t3 } else { \n <ect>
\t2 final int num <identifiersep> of <identifiersep> states = <identifier> <identifiersep> random <identifiersep> int <identifiersep> between ( <number_literal> , <number_literal> ) ; \n \t2 for ( int i = 1 ; i < = num <identifiersep> of <identifiersep> states ; i ++ ) { \n \t3 states . add ( cluster <identifiersep> state . builder ( node . cluster <identifiersep> state ) . version ( i ) . state <identifiersep> uuid ( cluster <identifiersep> state . unknown <identifiersep> uuid ) . build ( ) ) ; } \n \t2 final cluster <identifiersep> state final <identifiersep> state = states . get ( num <identifiersep> of <identifiersep> states - 1 ) ; \n <ect>
\t3 attributes . put <identifiersep> all ( protocol <identifiersep> attributes ) ; \n \t3 logger . debug ( <string_literal> , protocol <identifiersep> attributes . key <identifiersep> set ( ) ) ; } \n \t2 <identifier> <identifiersep> if <identifiersep> credential <identifiersep> password <identifiersep> should <identifiersep> be <identifiersep> released <identifiersep> as <identifiersep> attribute ( attributes , model , registered <identifiersep> service ) ; \n \t2 <identifier> <identifiersep> if <identifiersep> proxy <identifiersep> granting <identifiersep> ticket <identifiersep> should <identifiersep> be <identifiersep> released <identifiersep> as <identifiersep> attribute ( attributes , model , registered <identifiersep> service ) ; \n <ect>
\t5 val = transform . transform <identifiersep> value ( val ) ; \n \t5 log . debug ( <string_literal> , val ) ; } \n \t3 } else if ( val instanceof number <identifiersep> property ) { \n \t4 val = transform . transform <identifiersep> value ( val ) ; \n <ect>
\t5 public void set <identifiersep> group ( group <identifiersep> principal <identifier> ) throws io <identifiersep> exception { \n \t6 logger . info ( <string_literal> ) ; } \n \t5 @ override \n \t5 public void set <identifiersep> times ( file <identifiersep> time <identifier> , file <identifiersep> time <identifier> , file <identifiersep> time <identifier> ) throws io <identifiersep> exception { \n <ect>
\t4 break ; \n \t3 } catch ( throttling <identifiersep> exception e ) { \n \t4 <comment> \n \t4 if ( i >= ( num <identifiersep> retries - 1 ) ) { \n <ect>
\t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> \n <number_literal> + <string_literal> \n <number_literal> + <identifier> . scheme + <identifier> <identifiersep> row . get <identifiersep> <identifier> ( ) + <string_literal> , ex ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t3 <identifier> <identifiersep> <identifier> . set ( <string_literal> , jmctx . get <identifiersep> previous <identifiersep> result ( ) ) ; <comment> \n \t3 <identifier> <identifiersep> <identifier> . set ( <string_literal> , j <identifiersep> meter <identifiersep> utils . get <identifiersep> j <identifiersep> meter <identifiersep> properties ( ) ) ; \n \t3 <identifier> <identifiersep> <identifier> . set ( <string_literal> , vars ) ; <comment> \n \t2 } catch ( j <identifiersep> meter <identifiersep> exception e ) { \n <ect>
\t3 cache . remove ( key ) ; } \n \t2 } ) ; } \n \t1 exec . stop ( ) ; \n \t1 long duration = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n <ect>
\t1 public void prepare ( ) { \n \t2 execution <identifiersep> config execution <identifiersep> config = task <identifiersep> context . get <identifiersep> execution <identifiersep> config ( ) ; \n \t2 this . object <identifiersep> reuse <identifiersep> enabled = execution <identifiersep> config . is <identifiersep> object <identifiersep> reuse <identifiersep> enabled ( ) ; \n <ect>
\t2 if ( ss <identifiersep> a <identifiersep> host . get <identifiersep> type ( ) != host . type . secondary <identifiersep> storage <identifiersep> vm ) { \n \t3 return false ; } \n \t2 secondary <identifiersep> storage <identifiersep> vm <identifiersep> vo sec <identifiersep> storage <identifiersep> vm = <identifier> <identifiersep> sec <identifiersep> storage <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> instance <identifiersep> name ( ss <identifiersep> a <identifiersep> host . get <identifiersep> name ( ) ) ; \n \t2 if ( sec <identifiersep> storage <identifiersep> vm == null ) { \n <ect>
\t2 <comment> \n \t2 add <identifiersep> jmx ( ds <identifiersep> desc ) ; } \n \t1 private static server config <identifiersep> server ( string jetty <identifiersep> config ) { \n \t2 try { \n <ect>
\t3 if ( ! bean <identifiersep> definition . is <identifiersep> <identifier> <identifiersep> managed <identifiersep> config <identifiersep> member ( member ) ) { \n \t4 bean <identifiersep> definition . register <identifiersep> <identifier> <identifiersep> managed <identifiersep> config <identifiersep> member ( member ) ; \n \t4 checked <identifiersep> elements . add ( element ) ; \n <ect>
\t2 string <identifiersep> writer writer = new string <identifiersep> writer ( ) ; \n \t2 formatted <identifiersep> log <identifiersep> provider log <identifiersep> provider = new <identifiersep> formatted <identifiersep> log <identifiersep> provider ( writer ) ; \n \t2 formatted <identifiersep> log log = log <identifiersep> provider . get <identifiersep> log ( string <identifiersep> writer . class ) ; \n \t2 <comment> \n <ect>
\t2 if ( resource == null ) { \n \t3 log . error ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( resource <identifiersep> item == null ) { \n <ect>
\t2 return snapshot ; } \n \t1 public snapshot <identifiersep> table try <identifiersep> save <identifiersep> new <identifiersep> snapshot ( snapshot <identifiersep> table snapshot <identifiersep> table ) throws io <identifiersep> exception { \n \t2 string dup <identifiersep> table = check <identifiersep> dup <identifiersep> by <identifiersep> content ( snapshot <identifiersep> table ) ; \n \t2 if ( dup <identifiersep> table != null ) { \n <ect>
\t3 final write <identifiersep> result res = this . mongo <identifiersep> template . remove ( query , collection <identifiersep> name ) ; \n \t3 logger . debug ( <string_literal> , ticket <identifiersep> id <identifiersep> to <identifiersep> delete , res ) ; \n \t3 return true ; \n \t2 } catch ( final exception e ) { \n <ect>
\t4 notify <identifiersep> stream <identifiersep> result ( true , <string_literal> , null ) ; \n \t4 return true ; \n \t3 } catch ( sam <identifiersep> exception e ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 } catch ( interrupted <identifiersep> exception e ) { \n \t5 break ; } } \n \t2 } catch ( exception e ) { \n \t3 logger . warn ( <string_literal> , e ) ; } \n <ect>
\t3 } catch ( interrupted <identifiersep> exception ie ) { } \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n \t4 <identifier> <identifiersep> log . debug ( <string_literal> ) ; \n \t3 if ( to <identifiersep> send != <identifier> <identifiersep> total <identifiersep> sent ) \n <ect>
\t2 final map < discovery <identifiersep> node , indices <identifiersep> cluster <identifiersep> state <identifiersep> service > cluster <identifiersep> state <identifiersep> service <identifiersep> map = new hash <identifiersep> map < > ( ) ; \n \t2 cluster <identifiersep> state state = random <identifiersep> initial <identifiersep> cluster <identifiersep> state ( cluster <identifiersep> state <identifiersep> service <identifiersep> map , mock <identifiersep> indices <identifiersep> service : : new ) ; \n \t2 <comment> \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 ex = e ; } \n \t1 if ( db == null ) { \n <ect>
\t4 if ( application <identifiersep> context . contains <identifiersep> bean ( <string_literal> ) ) { \n \t5 logger . debug ( <string_literal> ) ; \n \t5 repository = application <identifiersep> context . get <identifiersep> bean ( <string_literal> , principal <identifiersep> attributes <identifiersep> repository . class ) ; \n \t4 } else { \n <ect>
\t3 plugins . instance . add <identifiersep> <identifier> <identifiersep> <identifier> ( ) ; } } \n \t1 protected void draft <identifiersep> started ( uuid draft <identifiersep> id , uuid player <identifiersep> id ) { \n \t2 try { \n \t3 frame . show <identifiersep> draft ( draft <identifiersep> id ) ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t5 <comment> \n \t5 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , 1 ) ; \n \t5 <identifier> <identifiersep> exec . build <identifiersep> complete ( cfg , cfg . get <identifiersep> tunnel <identifiersep> pool ( ) ) ; \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 public boolean test ( string key ) { \n \t2 log . info ( <string_literal> + key + <string_literal> ) ; \n \t2 hash <identifiersep> map < string , object > <identifier> = store . get ( key ) ; \n \t2 int saved <identifiersep> secret = integer . class . cast ( <identifier> . get ( <string_literal> ) ) ; \n <ect>
\t1 throw new export <identifiersep> exception ( msg ) ; } \n \t1 if ( ! options . is <identifiersep> batch <identifiersep> mode ( ) ) { \n \t1 if ( ! netezza <identifiersep> manager . batch <identifiersep> mode <identifiersep> warning <identifiersep> printed ) { \n \t2 log . warn ( <string_literal> ) ; \n <ect>
\t5 arr [ 1 ] = third ; \n \t5 third . send <identifiersep> message <identifiersep> to <identifiersep> <identifier> <identifiersep> route ( <string_literal> , 0 ) ; \n \t5 wait <identifiersep> for <identifiersep> non <identifiersep> active <identifiersep> routes <identifiersep> latch . count <identifiersep> down ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 if ( this . command . contains ( input <identifiersep> file <identifiersep> token ) ) { \n \t4 p <identifiersep> command = this . command . replace ( input <identifiersep> file <identifiersep> token , <identifier> . get <identifiersep> file ( ) \n \t6 . get <identifiersep> path ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t4 <identifier> . set <identifiersep> <identifier> ( info . virtual <identifiersep> size ) ; \n \t4 <identifier> . set <identifiersep> template <identifiersep> physical <identifiersep> size ( info . size ) ; \n \t4 break ; } } \n \t2 if ( ! loc . save ( ) ) { \n <ect>
\t8 } catch ( framework <identifiersep> exception fex ) { } } \n \t6 } catch ( io <identifiersep> exception ex ) { \n \t7 logger . warn ( <string_literal> , path , ex . get <identifiersep> message ( ) ) ; } \n \t5 } else { \n <ect>
\t2 log . info ( <string_literal> , plan <identifiersep> mode , \n \t3 g <identifiersep> work . get <identifiersep> name ( ) , human <identifiersep> readable <identifiersep> byte <identifiersep> count ( serialized <identifiersep> size ) ) ; \n \t2 g <identifiersep> work <identifiersep> map . get ( conf ) . put ( path , g <identifiersep> work ) ; \n \t1 } else { \n <ect>
\t9 consistency <identifiersep> level . one ) ; \n \t4 logger . info ( <string_literal> , default <identifiersep> <identifier> <identifiersep> name ) ; } } \n \t2 catch ( request <identifiersep> execution <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 if ( get <identifiersep> roles ( ) != null ) { \n \t3 base <identifiersep> roles . add <identifiersep> all ( get <identifiersep> roles ( ) ) ; \n \t3 total <identifiersep> roles . add <identifiersep> all ( get <identifiersep> roles ( ) ) ; } \n <ect>
\t2 test <identifiersep> consumer . set <identifiersep> message <identifiersep> listener ( new message <identifiersep> listener ( ) { \n \t3 @ override \n \t3 public void on <identifiersep> message ( message message ) { \n \t4 try { \n <ect>
\t2 if ( trusted . get <identifiersep> json ( ) . get <identifiersep> location ( ) != null ) { \n \t3 logger . debug ( <string_literal> , trusted . get <identifiersep> json ( ) . get <identifiersep> location ( ) ) ; \n \t3 m = new json <identifiersep> multifactor <identifiersep> authentication <identifiersep> trust <identifiersep> storage ( trusted . get <identifiersep> json ( ) . get <identifiersep> location ( ) ) ; \n \t2 } else { \n <ect>
\t4 resource = load <identifiersep> resources <identifiersep> without <identifiersep> hypervisor ( host ) ; \n \t3 } else { \n \t4 resource = <identifier> . reload <identifiersep> resource ( host ) ; } \n \t3 if ( resource == null ) { \n <ect>
\t2 break ; } \n \t1 default : throw new assertion <identifiersep> error ( <string_literal> + <identifier> ) ; } } \n \t1 <comment> \n \t1 if ( e . has <identifiersep> cluster <identifiersep> state <identifiersep> changed ) { \n <ect>
\t5 job . set <identifiersep> last <identifiersep> <identifier> ( date <identifiersep> util . current <identifiersep> <identifier> <identifiersep> time ( ) ) ; \n \t5 <identifier> <identifiersep> job <identifiersep> dao . update ( job <identifiersep> id , job ) ; } \n \t3 } else { \n <ect>
public class file <identifiersep> watcher <identifiersep> service extends path <identifiersep> watcher <identifiersep> service { \n \t1 public file <identifiersep> watcher <identifiersep> service ( final file <identifier> <identifiersep> file , final consumer < file > on <identifiersep> modify ) { \n \t2 super ( <identifier> <identifiersep> file . get <identifiersep> parent <identifiersep> file ( ) , file - > { \n \t3 if ( file . get <identifiersep> path ( ) . equals ( <identifier> <identifiersep> file . get <identifiersep> path ( ) ) ) { \n <ect>
\t4 ( ( <identifier> <identifiersep> <identifier> <identifiersep> session ) stream <identifiersep> session ) . accept ( this , verbose ) ; \n \t4 return true ; \n \t3 } catch ( interrupted <identifiersep> io <identifiersep> exception e ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 private static events download <identifiersep> event <identifiersep> feed ( ) { \n \t2 <comment> \n \t2 <comment> \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( calendar <identifiersep> name ) ) { \n <ect>
\t3 . filter ( <identifier> - > <identifier> < = hours <identifiersep> from <identifiersep> now && <identifier> >= hours <identifiersep> before <identifiersep> now ) \n \t3 . count ( ) ; \n \t2 logger . debug ( <string_literal> , timestamp , window <identifiersep> in <identifiersep> hours , count ) ; \n \t2 if ( count == events . size ( ) ) { \n <ect>
\t2 true ) ; \n \t1 heartbeat <identifiersep> timer <identifiersep> task task = new heartbeat <identifiersep> timer <identifiersep> task ( meta <identifiersep> store <identifiersep> client , listener , transaction <identifiersep> id , table <identifiersep> descriptors , lock <identifiersep> id ) ; \n \t1 heartbeat <identifiersep> timer . schedule ( task , time <identifiersep> unit . seconds . to <identifiersep> millis ( heartbeat <identifiersep> period ) , \n \t2 time <identifiersep> unit . seconds . to <identifiersep> millis ( heartbeat <identifiersep> period ) ) ; \n <ect>
\t2 people . add ( new person ( <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 for ( person person : people ) { \n \t3 for ( property <identifiersep> change <identifiersep> listener listener : person . get <identifiersep> bound <identifiersep> support ( ) . get <identifiersep> property <identifiersep> change <identifiersep> listeners ( ) ) { \n <ect>
\t8 if ( e instanceof exception ) { \n \t9 ee = ( exception ) e ; \n \t8 } else { \n \t9 ee = new runtime <identifiersep> exception ( <string_literal> , e ) ; } \n <ect>
\t3 else if ( name . starts <identifiersep> with ( <string_literal> ) ) { \n \t4 return new web <identifiersep> logic <identifiersep> load <identifiersep> time <identifiersep> <identifier> ( class <identifiersep> loader ) ; } } \n \t2 catch ( exception ex ) { \n <ect>
\t4 <identifier> . add <identifiersep> page ( page ) ; \n \t4 if ( log . should <identifiersep> log ( log . debug ) ) \n \t5 log . debug ( <string_literal> + page + <string_literal> + <identifier> ) ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 super . tear <identifiersep> down ( ) ; \n \t1 try { \n \t1 connection . close ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 if ( unknown <identifiersep> initiator ) { \n \t4 <comment> \n \t4 logger . normal ( this , <string_literal> ) ; \n \t3 } else { \n <ect>
\t1 if ( null != manager ) { \n \t1 try { \n \t2 manager . close ( ) ; \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t3 pstmt . set <identifiersep> long ( 1 , id ) ; \n \t3 changed <identifiersep> rows = pstmt . execute <identifiersep> update ( ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 assert <identifiersep> that ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . set <identifiersep> master <identifiersep> node <identifiersep> timeout ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> state ( ) . nodes ( ) . get <identifiersep> master <identifiersep> node <identifiersep> id ( ) , null <identifiersep> value ( ) ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( master <identifiersep> not <identifiersep> discovered <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t2 <comment> \n \t2 private void populate <identifiersep> cache ( ) throws exception { \n <ect>
\t1 backing <identifiersep> store . close ( ) ; \n \t1 inflight <identifiersep> puts . close ( ) ; \n \t1 inflight <identifiersep> <identifier> . close ( ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 if ( uuid != null && ! uuid . is <identifiersep> empty ( ) ) \n \t6 return uuid ; \n \t5 return identity <identifiersep> string ; } \n \t3 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 if ( ! claims . get <identifiersep> issuer ( ) . equals ( issuer ) ) { \n \t4 logger . error ( <string_literal> ) ; \n \t4 return null ; } \n \t3 if ( claims . get <identifiersep> audience ( ) . is <identifiersep> empty ( ) || ! claims . get <identifiersep> audience ( ) . get ( 0 ) . equals ( issuer ) ) { \n <ect>
\t2 for ( consumer <identifiersep> id consumer <identifiersep> id : session . get <identifiersep> consumer <identifiersep> ids ( ) ) { \n \t3 try { \n \t4 process <identifiersep> remove <identifiersep> consumer ( consumer <identifiersep> id , last <identifiersep> delivered <identifiersep> sequence <identifiersep> id ) ; \n \t3 } catch ( throwable e ) { \n <ect>
\t2 hive <identifiersep> conf . get <identifiersep> var ( job <identifiersep> conf , conf <identifiersep> vars . hive <identifiersep> execution <identifiersep> engine ) . equals ( <string_literal> ) ? \n \t3 new tez <identifiersep> context ( is <identifiersep> map , job <identifiersep> conf ) : new mapred <identifiersep> context ( is <identifiersep> map , job <identifiersep> conf ) ; \n \t1 contexts . set ( context ) ; \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name + <string_literal> + repl <identifiersep> dump <identifiersep> id , driver ) ; \n \t1 incremental <identifiersep> dump <identifiersep> <identifier> = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 incremental <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t5 } else { \n \t6 logging <identifiersep> initializer . logger . warning ( <string_literal> ) ; } } \n \t3 <comment> \n \t3 if ( suppress <identifiersep> std <identifiersep> out <identifiersep> logging ) { \n <ect>
\t3 request <identifiersep> handler . maybe <identifiersep> kick <identifiersep> job <identifiersep> or <identifiersep> task ( kv , job ) ; \n \t3 log . info ( <string_literal> , user , job . get <identifiersep> id ( ) , job <identifiersep> update <identifiersep> action ( id ) ) ; \n \t3 return response . ok ( <string_literal> id \\ <string_literal> <string_literal> \\ <string_literal> updated \\ <string_literal> true \\ <string_literal> ) . build ( ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
public t <identifiersep> field read <identifiersep> field <identifiersep> begin ( ) throws t <identifiersep> exception { \n \t1 log . debug ( <string_literal> ) ; \n \t1 return next ( ) . read <identifiersep> field <identifiersep> begin ( ) ; } \n public void read <identifiersep> field <identifiersep> end ( ) throws t <identifiersep> exception { \n <ect>
\t5 ) ) ; \n \t3 values <identifiersep> count <identifiersep> read <identifiersep> so <identifiersep> far += data <identifiersep> header <identifiersep> v2 . get <identifiersep> num <identifiersep> values ( ) ; \n \t3 break ; \n \t2 default : \n <ect>
\t1 <comment> \n \t1 public void create <identifiersep> consumer ( string interest , int max <identifiersep> msgs ) { \n \t2 int message <identifiersep> received = 0 ; \n \t2 int messages <identifiersep> not <identifiersep> received = 0 ; \n <ect>
\t3 log . error ( <string_literal> + src <identifiersep> path + <string_literal> + dest <identifiersep> path , e ) ; \n \t3 throw new invalid <identifiersep> operation <identifiersep> exception ( <string_literal> \n \t4 + tbl . get <identifiersep> db <identifiersep> name ( ) + <string_literal> + tbl . get <identifiersep> table <identifiersep> name ( ) + <string_literal> + new <identifiersep> part . get <identifiersep> values ( ) ) ; \n \t2 } catch ( meta <identifiersep> exception me ) { \n <ect>
\t2 final t <identifiersep> key <identifiersep> extent <identifier> ) { \n \t1 try { \n \t2 check <identifiersep> permission ( credentials , lock , <string_literal> ) ; \n \t1 } catch ( thrift <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t1 search <identifiersep> bucket . set <identifiersep> owner <identifiersep> <identifier> <identifiersep> user <identifiersep> id ( user <identifiersep> <identifier> <identifiersep> id ) ; \n \t1 try ( transaction <identifiersep> resource db = entities . transaction <identifiersep> for ( bucket . class ) ) { \n \t1 return entities . count ( search <identifiersep> bucket , <identifier> . ne ( <string_literal> , bucket <identifiersep> state . deleting ) , new hash <identifiersep> map < string , string > ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t7 string backing <identifiersep> base <identifiersep> name = ds <identifiersep> backing <identifiersep> file . get <identifiersep> file <identifiersep> base <identifiersep> name ( ) ; \n \t7 if ( match <identifiersep> exactly ) { \n \t8 if ( backing <identifiersep> base <identifiersep> name . equals <identifiersep> ignore <identifiersep> case ( src <identifiersep> base <identifiersep> name ) ) { \n \t9 string device <identifiersep> <identifier> = get <identifiersep> device <identifiersep> bus <identifiersep> name ( devices , device ) ; \n <ect>
\t3 map < string , list < invoker < t > > > new <identifiersep> method <identifiersep> invoker <identifiersep> map = to <identifiersep> method <identifiersep> <identifier> ( new <identifiersep> url <identifiersep> invoker <identifiersep> map ) ; <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 if ( new <identifiersep> url <identifiersep> invoker <identifiersep> map == null || new <identifiersep> url <identifiersep> invoker <identifiersep> map . size ( ) == 0 ) { \n <ect>
\t2 log . debug ( public + <string_literal> , e ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> object <identifiersep> exception e ) { \n \t2 <comment> \n \t2 log . warn ( <string_literal> + public + <string_literal> , e ) ; } \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t3 if ( strings . is <identifiersep> null <identifiersep> or <identifiersep> blank ( address ) ) { \n \t4 log . warn ( <string_literal> + namespace + <string_literal> + kubernetes . get <identifiersep> master <identifiersep> url ( ) ) ; \n \t4 return null ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3 } else { \n \t4 <identifier> <identifiersep> smtp <identifiersep> session = null ; } } \n \t2 public void send <identifiersep> quota <identifiersep> alert ( list < string > <identifier> , string subject , string body ) throws messaging <identifiersep> exception , unsupported <identifiersep> encoding <identifiersep> exception { \n \t3 if ( <identifier> <identifiersep> smtp <identifiersep> session == null ) { \n <ect>
\t1 file <identifiersep> system fs = load <identifiersep> path . get <identifiersep> file <identifiersep> system ( conf ) ; \n \t1 int num <identifiersep> <identifier> <identifiersep> cols = <identifier> <identifiersep> ctx . get <identifiersep> num <identifiersep> <identifier> <identifiersep> cols ( ) ; \n \t1 list < file <identifiersep> status > status = hive <identifiersep> stats <identifiersep> utils . get <identifiersep> file <identifiersep> status <identifiersep> <identifier> ( load <identifiersep> path , num <identifiersep> <identifier> <identifiersep> cols , fs ) ; \n \t1 if ( status . is <identifiersep> empty ( ) ) { \n <ect>
\t2 if ( so . <identifier> ( ) ) \n \t2 throw new runtime <identifiersep> exception ( <string_literal> ) ; \n \t2 call <identifiersep> graph call <identifiersep> graph = scene . v ( ) . get <identifiersep> call <identifiersep> graph ( ) ; \n \t2 <comment> \n <ect>
\t4 tuple out = tf . new <identifiersep> tuple ( <number_literal> ) ; \n \t4 out . set ( 0 , key ) ; \n \t4 out . set ( 1 , new iterator <identifiersep> union < tuple > ( tuple <identifiersep> iterators . iterator ( ) ) ) ; \n <ect>
\t1 } else { \n \t2 try { \n \t2 acl <identifiersep> utils . lookup <identifiersep> principal <identifiersep> by <identifiersep> canonical <identifiersep> id ( owner <identifiersep> canonical <identifiersep> id ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 new <identifiersep> <identifier> . add ( server ) ; } \n \t3 string new <identifiersep> connection <identifiersep> string <identifiersep> value = new <identifiersep> connection <identifiersep> string . to <identifiersep> string ( ) ; \n \t3 if ( ! new <identifiersep> connection <identifiersep> string <identifiersep> value . equals ( connection <identifiersep> string . get ( ) ) ) \n \t3 { \n <ect>
\t4 pc = ( properties <identifiersep> component ) camel <identifiersep> context <identifiersep> helper . lookup <identifiersep> properties <identifiersep> component ( this , true ) ; } \n \t3 if ( pc != null && text . contains ( pc . get <identifiersep> prefix <identifiersep> token ( ) ) ) { \n \t4 <comment> \n \t4 string answer = pc . parse <identifiersep> uri ( text ) ; \n <ect>
\t5 log . debug ( <string_literal> , order , route . get <identifiersep> id ( ) ) ; } \n \t4 if ( resume <identifiersep> only && route . supports <identifiersep> <identifier> ( ) ) { \n \t5 <comment> \n \t5 service <identifiersep> helper . resume <identifiersep> service ( consumer ) ; \n <ect>
\t4 logger . info ( <string_literal> , real <identifiersep> request . get <identifiersep> method ( ) , real <identifiersep> request . get <identifiersep> path ( ) , expected <identifiersep> key , expected <identifiersep> params . get ( expected <identifiersep> key ) ) ; \n \t4 return false ; } \n \t3 collection < matcher < ? extends string > > expected <identifiersep> param <identifiersep> values = expected <identifiersep> params . get ( expected <identifiersep> key ) ; \n \t3 if ( expected <identifiersep> param <identifiersep> values . size ( ) != actual <identifiersep> param <identifiersep> values . size ( ) ) { \n <ect>
\t1 private static boolean validate <identifiersep> path ( string path ) { \n \t2 int i = path . index <identifiersep> of ( <string_literal> ) ; \n \t2 if ( i == - 1 ) { \n <ect>
\t2 try { \n \t3 if ( <identifier> <identifiersep> socket != null ) { \n \t4 <identifier> <identifiersep> socket . close ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<number_literal> routing <identifiersep> strategy strategy ) { \n \t2 synchronized ( lock ) { \n \t3 file store <identifiersep> dir = new file ( data <identifiersep> directory , store <identifiersep> def . get <identifiersep> name ( ) ) ; \n \t3 if ( ! store <identifiersep> dir . exists ( ) ) { \n <ect>
\t2 if ( response . get <identifiersep> command ( ) != command <identifiersep> code ) { \n \t3 logger . error ( <string_literal> , response . get <identifiersep> command ( ) ) ; \n \t3 return false ; } \n \t2 if ( response . get <identifiersep> payload ( ) . length < <number_literal> || response . get <identifiersep> payload ( ) . length > <number_literal> ) { \n <ect>
public class structr <identifiersep> filesystem <identifiersep> provider extends file <identifiersep> system <identifiersep> provider { \n \t1 private static final logger logger = logger <identifiersep> factory . get <identifiersep> logger ( structr <identifiersep> filesystem <identifiersep> provider . class . get <identifiersep> name ( ) ) ; \n \t1 @ override \n \t1 public synchronized string get <identifiersep> scheme ( ) { \n <ect>
\t2 shut <identifiersep> down <identifiersep> hook = shutdown <identifiersep> hook <identifiersep> util . add <identifiersep> shutdown <identifiersep> hook ( this : : cleanup <identifiersep> directories , get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , log ) ; } \n \t1 public completable <identifiersep> future < void > get <identifiersep> termination <identifiersep> future ( ) { \n \t2 return termination <identifiersep> future ; } \n \t1 protected void start <identifiersep> cluster ( ) { \n <ect>
\t2 pre <identifiersep> match <identifiersep> container <identifiersep> request <identifiersep> context request <identifiersep> context = new pre <identifiersep> match <identifiersep> container <identifiersep> request <identifiersep> context ( request , request <identifiersep> filters , null ) ; \n \t2 aborted = request <identifiersep> context . filter ( ) ; } \n \t1 catch ( exception e ) \n \t1 { \n <ect>
\t3 if ( out <identifiersep> queue . size ( ) >= max <identifiersep> queue <identifiersep> length ) { \n \t4 if ( never <identifiersep> drop <identifiersep> a <identifiersep> message ) { \n \t5 logger . error ( this , <string_literal> + out <identifiersep> queue . size ( ) + <string_literal> + handler + <string_literal> ) ; \n \t4 } else { \n <ect>
\t2 full <identifiersep> sync <identifiersep> counter . increment <identifiersep> and <identifiersep> get ( ) ; \n \t2 return synchronization <identifiersep> result . empty ( ) ; } \n \t1 @ override \n \t1 public synchronization <identifiersep> result sync <identifiersep> since ( date last <identifiersep> sync , keycloak <identifiersep> session <identifiersep> factory session <identifiersep> factory , string realm <identifiersep> id , user <identifiersep> storage <identifiersep> provider <identifiersep> model model ) { \n <ect>
\t1 private void history ( ) { \n \t2 info ( <string_literal> ) ; \n \t2 for ( pair < action , long > p : actions ) { \n \t3 if ( p . get <identifiersep> right ( ) != no <identifiersep> id ) \n <ect>
\t3 if ( rs != null ) { \n \t4 try { \n \t5 rs . close ( ) ; } \n \t4 catch ( sql <identifiersep> exception e ) { \n <ect>
\t6 run <identifiersep> connection ( socket ) ; \n \t5 } catch ( io <identifiersep> exception ioe ) { \n \t6 <identifier> <identifiersep> log . error ( <string_literal> , ioe ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t5 string name = dlna . get <identifiersep> display <identifiersep> name ( media <identifiersep> renderer ) ; \n \t5 input <identifiersep> stream = dlna . get <identifiersep> input <identifiersep> stream ( range . create ( low <identifiersep> range , high <identifiersep> range , <identifier> , time <identifiersep> range <identifiersep> end ) , media <identifiersep> renderer ) ; \n \t5 if ( input <identifiersep> stream == null ) { \n \t6 <comment> \n <ect>
\t2 string build <identifiersep> config <identifiersep> name = exchange . get <identifiersep> in ( ) . get <identifiersep> header ( kubernetes <identifiersep> constants . kubernetes <identifiersep> build <identifiersep> config <identifiersep> name , \n \t4 string . class ) ; \n \t2 string namespace <identifiersep> name = exchange . get <identifiersep> in ( ) . get <identifiersep> header ( kubernetes <identifiersep> constants . kubernetes <identifiersep> namespace <identifiersep> name , string . class ) ; \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( build <identifiersep> config <identifiersep> name ) ) { \n <ect>
\t1 long duration = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n \t1 log . warn ( <string_literal> + print <identifiersep> duration ( duration ) ) ; } \n private void <identifier> ( ) throws interrupted <identifiersep> exception { \n \t1 if ( skip <identifiersep> <identifier> ) { \n <ect>
\t3 int at = 0 ; \n \t3 for ( entry < string , list < executor <identifiersep> details > > entry : <identifier> <identifiersep> cluster . get <identifiersep> needs <identifiersep> scheduling <identifiersep> component <identifiersep> to <identifiersep> executors ( td ) . entry <identifiersep> set ( ) ) { \n \t4 log . debug ( <string_literal> , entry . get <identifiersep> key ( ) ) ; \n \t4 if ( <identifier> <identifiersep> spread <identifiersep> to <identifiersep> schedule . contains <identifiersep> key ( entry . get <identifiersep> key ( ) ) ) { \n <ect>
\t4 bytes <identifiersep> ref ref = bytes . to <identifiersep> bytes <identifiersep> ref ( ) ; \n \t4 output . write <identifiersep> bytes ( ref . bytes , ref . offset , ref . length ) ; \n \t4 codec <identifiersep> util . write <identifiersep> footer ( output ) ; \n \t3 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t6 s <identifiersep> logger . debug ( \n \t8 <string_literal> + pdu . get <identifiersep> agent <identifiersep> id ( ) + <string_literal> + pdu . get <identifiersep> json <identifiersep> package ( ) + <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> tick ) + <string_literal> ) ; } } \n \t3 } catch ( final agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t1 client . offline <identifiersep> table ( creds , table <identifiersep> name , true ) ; \n \t1 client . online <identifiersep> table ( creds , table <identifiersep> name , true ) ; \n \t1 while ( ! client . list <identifiersep> constraints ( creds , table <identifiersep> name ) \n \t2 . contains <identifiersep> key ( numeric <identifiersep> value <identifiersep> constraint . class . get <identifiersep> name ( ) ) ) { \n <ect>
\t1 public void test <identifiersep> exact <identifiersep> number <identifiersep> of <identifiersep> samples ( ) throws exception { \n \t2 java . util . random <identifier> = new java . util . random ( ) ; \n \t2 long seed = <identifier> . next <identifiersep> long ( ) ; \n \t2 <comment> \n <ect>
\t1 private final component <identifiersep> factory <identifiersep> <identifier> component <identifiersep> factory <identifiersep> <identifier> = new component <identifiersep> factory <identifiersep> <identifier> ( ) ; \n \t1 public void register ( class < ? extends component <identifiersep> factory > component <identifiersep> factory <identifiersep> class ) { \n \t1 class < ? > target <identifiersep> type = component <identifiersep> factory <identifiersep> <identifier> . target <identifiersep> type <identifiersep> for <identifiersep> component <identifiersep> factory ( component <identifiersep> factory <identifiersep> class ) ; \n \t1 if ( component <identifiersep> factory <identifiersep> class . is <identifiersep> annotation <identifiersep> present ( application <identifiersep> scoped . class ) ) { \n <ect>
\t5 <identifier> <identifiersep> before <identifiersep> meta <identifiersep> info = new array <identifiersep> list < integer > ( <number_literal> ) ; \n \t4 } else if ( <identifier> <identifiersep> before <identifiersep> meta <identifiersep> info . size ( ) > <number_literal> ) { \n \t5 <comment> \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t4 if ( log <identifiersep> minor ) logger . minor ( message . class , msg + <string_literal> , e ) ; \n \t3 } else logger . error ( message . class , msg , e ) ; \n \t3 return null ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 log <identifiersep> log . error ( <string_literal> , e ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n \t1 log <identifiersep> log . error ( <string_literal> , e ) ; \n \t1 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 annotated <identifiersep> method . set <identifiersep> accessible ( true ) ; \n \t4 annotated <identifiersep> method . invoke ( this ) ; \n \t3 } catch ( throwable e ) { \n <ect>
\t2 final i <identifiersep> document doc = editor . get <identifiersep> document <identifiersep> provider ( ) \n \t4 . get <identifiersep> document ( editor . get <identifiersep> editor <identifiersep> input ( ) ) ; \n \t2 final i <identifiersep> annotation <identifiersep> model <identifier> <identifiersep> mod = editor . get <identifiersep> document <identifiersep> provider ( ) \n \t4 . get <identifiersep> annotation <identifiersep> model ( editor . get <identifiersep> editor <identifiersep> input ( ) ) ; \n <ect>
\t1 protected void send <identifiersep> mail ( pair < string , string > email ) { \n \t2 try { \n \t3 list < string > users = get <identifiersep> all <identifiersep> <identifier> <identifiersep> users ( config ) ; \n \t3 if ( users . is <identifiersep> empty ( ) ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 if ( sql <identifiersep> tables . get ( item <identifiersep> name ) == null ) { \n <ect>
\t3 long size = - 1 ; \n \t3 if ( volume <identifiersep> host != null ) { \n \t4 size = volume <identifiersep> host . get <identifiersep> physical <identifiersep> size ( ) ; } \n \t3 else { \n <ect>
\t1 { \n \t1 @ override \n \t1 public void on <identifiersep> error ( throwable e ) \n \t1 { \n <ect>
\t8 return false ; \n \t7 } else if ( api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) != null ) { \n \t8 s <identifiersep> logger . info ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; } } } \n \t4 } else if ( ( api . get <identifiersep> response <identifiersep> type ( ) != response <identifiersep> type . error ) && ( api . get <identifiersep> response <identifiersep> code ( ) != <number_literal> ) ) { \n <ect>
\t4 for ( int i = 0 ; i < results . length ; i ++ ) { \n \t5 results [ i ] = <string_literal> ; } \n \t4 return new set <identifiersep> firewall <identifiersep> rules <identifiersep> answer ( cmd , false , results ) ; } \n \t2 } catch ( final throwable e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public test <identifiersep> element create <identifiersep> test <identifiersep> element ( ) { \n <ect>
\t2 final load <identifiersep> balancer <identifiersep> zone update = entities . unique <identifiersep> result ( load <identifiersep> balancer <identifiersep> zone . named ( lb , zone ) ) ; \n \t2 update . set <identifiersep> state ( load <identifiersep> balancer <identifiersep> zone . state . out <identifiersep> of <identifiersep> service ) ; \n \t2 db . commit ( ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t5 subs <identifiersep> character <identifiersep> set = null ; \n \t5 logger . debug ( <string_literal> , external <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n \t3 } catch ( io <identifiersep> exception ex ) { \n \t4 subs <identifiersep> character <identifiersep> set = null ; \n <ect>
\t1 layout layout = new my <identifiersep> pattern <identifiersep> layout ( <string_literal> ) ; \n \t1 logger logger = logger . get <identifiersep> logger ( <string_literal> ) ; \n \t1 logger . add <identifiersep> appender ( new console <identifiersep> appender ( layout , console <identifiersep> appender . system <identifiersep> out ) ) ; \n \t1 logger . debug ( <string_literal> ) ; \n <ect>
\t2 try ( output <identifiersep> stream output <identifiersep> stream = response . get <identifiersep> output <identifiersep> stream ( ) ) { \n \t3 output . write <identifiersep> to ( output <identifiersep> stream ) ; \n \t3 output <identifiersep> stream . flush ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 output <identifiersep> stream . close ( ) ; } \n \t2 size = written ; \n \t2 if ( defined <identifiersep> size > 0 && defined <identifiersep> size < size ) { \n \t3 if ( ! file . delete ( ) ) { \n <ect>
\t2 wait <identifiersep> for <identifiersep> bridge <identifiersep> formation ( 1 ) ; \n \t2 hash <identifiersep> set < network <identifiersep> bridge > bridges <identifiersep> start = new hash <identifiersep> set < network <identifiersep> bridge > ( ) ; \n \t2 for ( network <identifiersep> connector network <identifiersep> connector : network <identifiersep> connectors ) { \n \t3 bridges <identifiersep> start . add <identifiersep> all ( network <identifiersep> connector . active <identifiersep> bridges ( ) ) ; } \n <ect>
\t4 account = self . account . name , \n \t4 domainid = self . account . domainid \n \t3 ) \n \t2 except cloudstack <identifiersep> api <identifiersep> exception : \n <ect>
\t1 public boolean need <identifiersep> <identifier> ( string worker <identifiersep> tag ) { \n \t3 s <identifiersep> logger . info ( <string_literal> + worker <identifiersep> tag + <string_literal> ) ; \n \t2 if ( worker <identifiersep> tag == null || worker <identifiersep> tag . is <identifiersep> empty ( ) ) { \n <ect>
\t1 listeners . for <identifiersep> each ( listener - > { \n \t1 try { \n \t2 call . accept ( listener ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t2 return options ; } \n \t1 @ override \n \t1 protected void execute ( options <identifiersep> helper options <identifiersep> helper ) throws exception { \n \t2 logger . info ( <string_literal> + options <identifiersep> helper . get <identifiersep> options <identifiersep> as <identifiersep> string ( ) + <string_literal> ) ; \n <ect>
\t2 public void run ( ) { \n \t3 try { \n \t4 properties opts = new properties ( ) ; \n \t4 i2p <identifiersep> socket <identifiersep> manager mgr = new i2p <identifiersep> socket <identifiersep> manager <identifiersep> full ( <identifier> <identifiersep> context , <identifier> <identifiersep> session , opts , <string_literal> ) ; \n <ect>
private static void add <identifiersep> metric ( list < metric > metrics , metric metric ) { \n \t1 if ( metric . get <identifiersep> number <identifiersep> value ( ) . double <identifiersep> value ( ) >= 0 . 0 ) { \n \t1 final monitor <identifiersep> config c = metric . get <identifiersep> config ( ) ; \n <ect>
\t3 try { \n \t4 realm <identifiersep> resource ( ) . to <identifiersep> representation ( ) ; \n \t4 fail ( <string_literal> ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 criteria <identifiersep> set . add ( new encryption <identifiersep> configuration <identifiersep> <identifier> ( config ) ) ; \n \t2 criteria <identifiersep> set . add ( new entity <identifiersep> id <identifiersep> <identifier> ( peer <identifiersep> entity <identifiersep> id ) ) ; \n \t2 criteria <identifiersep> set . add ( new entity <identifiersep> role <identifiersep> <identifier> ( spsso <identifiersep> descriptor . default <identifiersep> element <identifiersep> name ) ) ; \n \t2 criteria <identifiersep> set . add ( new usage <identifiersep> <identifier> ( usage <identifiersep> type . encryption ) ) ; \n <ect>
\t2 byte <identifiersep> array <identifiersep> input <identifiersep> stream in = new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( buffer . to <identifiersep> byte <identifiersep> array ( ) ) ; \n \t2 data <identifiersep> input <identifiersep> stream <identifier> = new data <identifiersep> input <identifiersep> stream ( in ) ; \n \t2 object actual = open <identifiersep> <identifier> . unmarshal ( <identifier> ) ; \n \t2 assert <identifiersep> beans <identifiersep> equal ( <string_literal> , new hash <identifiersep> set < object > ( ) , expected , actual ) ; \n <ect>
\t1 public void compile <identifiersep> <identifier> ( @ non <identifiersep> null final i <identifiersep> project project , final build <identifiersep> resource resource , final i <identifiersep> otp <identifiersep> rpc b , \n \t3 final otp <identifiersep> erlang <identifiersep> list compiler <identifiersep> options ) { \n \t2 final rpc <identifiersep> future res = start <identifiersep> compile <identifiersep> <identifier> ( project , resource . get <identifiersep> resource ( ) , b , compiler <identifiersep> options ) ; \n \t2 if ( res == null ) { \n <ect>
\t2 boolean valid = is <identifiersep> valid ( document , extension <identifiersep> object , xcontext ) ; \n \t2 if ( valid ) { \n \t3 this . logger . debug ( <string_literal> , document . get <identifiersep> document <identifiersep> reference ( ) ) ; \n \t2 } else { \n <ect>
<comment> \n \t1 public void start ( bundle <identifiersep> context bundle <identifiersep> context ) throws exception { \n <ect>
\t5 ( param . length ( ) == curr <identifiersep> rule . length ( ) || is <identifiersep> property <identifiersep> separator ( param . char <identifiersep> at ( curr <identifiersep> rule . length ( ) ) ) ) \n \t4 ) { \n \t5 current <identifiersep> allowed = entry . get <identifiersep> value ( ) ; } } \n \t3 if ( ! current <identifiersep> allowed ) { \n <ect>
\t1 memory <identifiersep> pool <identifiersep> ratio = ratio ; \n \t1 min <identifiersep> memory <identifiersep> allocation = min <identifiersep> allocation ; \n \t1 total <identifiersep> memory <identifiersep> pool = math . round ( ( double ) management <identifiersep> factory . get <identifiersep> memory <identifiersep> mx <identifiersep> bean ( ) . get <identifiersep> heap <identifiersep> memory <identifiersep> usage ( ) . get <identifiersep> max \n \t2 ( ) * ratio ) ; \n <ect>
\t1 @ override \n \t1 public void do <identifiersep> action ( action <identifiersep> event e ) { \n \t2 string url = link <identifiersep> map . get ( e . get <identifiersep> action <identifiersep> command ( ) ) ; \n \t2 if ( url == null ) { \n <ect>
\t3 method = http <identifiersep> method . of ( request ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 throw new method <identifiersep> not <identifiersep> allowed <identifiersep> exception ( router . allowed <identifiersep> methods <identifiersep> for ( resource <identifiersep> name ) , request . get <identifiersep> method ( ) ) ; } \n \t2 resource <identifiersep> method resource = router . parse ( resource <identifiersep> name , method , request ) ; \n <ect>
\t2 return null ; } \n \t1 public static renderer <identifiersep> configuration get <identifiersep> renderer <identifiersep> configuration <identifiersep> by <identifiersep> upnp <identifiersep> details ( string details ) { \n \t2 for ( renderer <identifiersep> configuration r : enabled <identifiersep> renderer <identifiersep> <identifier> ) { \n \t3 if ( r . match <identifiersep> upnp <identifiersep> details ( details ) ) { \n <ect>
\t1 <comment> \n \t1 @ override public void handle ( string target , request req , http <identifiersep> servlet <identifiersep> request srv <identifiersep> req , http <identifiersep> servlet <identifiersep> response res ) \n \t2 throws io <identifiersep> exception , servlet <identifiersep> exception { \n <ect>
\t2 <identifier> <identifiersep> system <identifiersep> logger . set <identifiersep> level ( level . all ) ; \n \t2 for ( int i = fac <identifiersep> default ; i < n <identifiersep> fac ; i ++ ) { \n \t3 <identifier> <identifiersep> <identifier> <identifiersep> loggers [ i ] = logger . get <identifiersep> logger ( fac <identifiersep> name [ i ] ) ; \n \t3 <identifier> <identifiersep> <identifier> <identifiersep> loggers [ i ] . set <identifiersep> level ( level . all ) ; } \n <ect>
\t3 if ( next <identifiersep> row >= batch <identifiersep> size ) { \n \t4 rows <identifiersep> of <identifiersep> <identifier> = get <identifiersep> rows <identifiersep> of <identifiersep> <identifier> ( processed <identifiersep> rows ) ; \n \t4 processed <identifiersep> rows = processed <identifiersep> rows + rows <identifiersep> of <identifiersep> <identifier> . size ( ) ; \n <ect>
\t1 i <identifiersep> zoo <identifiersep> reader <identifiersep> writer zoo = zoo <identifiersep> reader <identifiersep> writer . get <identifiersep> instance ( ) ; \n \t1 try { \n \t1 zoo . recursive <identifiersep> delete ( path + <string_literal> + server , node <identifiersep> missing <identifiersep> policy . skip ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
<number_literal> new default <identifiersep> message <identifiersep> container ( new message ( topic , message ) , json <identifiersep> mapper ) ) ; \n \t8 } catch ( consumer <identifiersep> timeout <identifiersep> exception timeout <identifiersep> exception ) { \n \t9 <comment> \n \t8 } catch ( exception e ) { \n <ect>
\t1 <comment> \n \t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . <identifier> + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n \t1 test <identifiersep> txn <identifiersep> <identifier> . run <identifiersep> worker ( hive <identifiersep> conf ) ; \n \t1 rs = run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . <identifier> + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n <ect>
\t3 statement . set <identifiersep> string ( <number_literal> , get <identifiersep> lease <identifiersep> holder <identifiersep> id ( ) ) ; \n \t3 if ( statement . execute <identifiersep> update ( ) == 1 ) { \n \t4 log . info ( get <identifiersep> lease <identifiersep> holder <identifiersep> id ( ) + <string_literal> ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 assert <identifiersep> true ( <identifier> . match ( <identifier> ) ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> empty ( ) { \n <ect>
\t3 <identifier> . insert <identifiersep> html ( doc , doc . get <identifiersep> length ( ) , msg , 0 , 0 , null ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 <identifier> . warn ( <string_literal> , msg , doc . get <identifiersep> length ( ) , e . to <identifiersep> string ( ) ) ; \n \t2 } catch ( bad <identifiersep> location <identifiersep> exception e ) { \n <ect>
\t3 return null ; } \n \t2 try { \n \t3 return new file <identifiersep> input <identifiersep> stream ( file ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + <identifier> . size ( ) + <string_literal> + src <identifiersep> pool . get <identifiersep> source <identifiersep> dir ( ) + <string_literal> + template . get <identifiersep> name ( ) ) ; \n \t6 boolean snap <identifiersep> found = false ; \n \t6 for ( rbd <identifiersep> snap <identifiersep> info snap : <identifier> ) { \n \t7 if ( rbd <identifiersep> template <identifiersep> snap <identifiersep> name . equals ( snap . name ) ) { \n <ect>
\t5 logger . debug ( <string_literal> + url <identifiersep> file + <string_literal> ) ; } \n \t4 return collections . empty <identifiersep> set ( ) ; } } \n \t2 try { \n <ect>
\t4 commit <identifiersep> result = get <identifiersep> committed <identifiersep> data ( id ) ; } \n \t3 if ( commit <identifiersep> result != null ) { \n \t4 ( ( i <identifiersep> <identifier> ) delegate ) . revert ( ( batch <identifiersep> id ) id , commit <identifiersep> result ) ; } \n \t2 } catch ( exception e ) { \n <ect>
<number_literal> success = ( stop <identifiersep> response <identifiersep> code == <number_literal> ) ; } \n \t9 } else { \n \t10 <comment> \n \t10 <comment> \n <ect>
\t2 <string_literal> , sql <identifiersep> script <identifiersep> file \n \t2 } ; } \n \t1 private void log <identifiersep> script ( ) throws io <identifiersep> exception { \n <ect>
\t2 static void report <identifiersep> long <identifiersep> tests ( ) { \n \t3 if ( permit <identifiersep> long <identifiersep> tests ( ) ) { \n \t4 logger . info ( <string_literal> ) ; \n \t3 } else { \n <ect>
\t3 for ( hash peer : <identifier> <identifiersep> hashes ) { \n \t4 database <identifiersep> entry ds = <identifier> <identifiersep> facade . get <identifiersep> data <identifiersep> store ( ) . get ( peer ) ; \n \t4 if ( ( ds == null ) || ! ( ds . get <identifiersep> type ( ) == database <identifiersep> entry . key <identifiersep> type <identifiersep> <identifier> ) ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 int min <identifiersep> interests = ( int ) math . <identifier> ( ( double ) <identifier> / versioning <identifiersep> interest <identifiersep> manager . max <identifiersep> fill ) ; \n \t2 int max <identifiersep> interests = ( int ) math . floor ( ( double ) <identifier> / versioning <identifiersep> interest <identifiersep> manager . min <identifiersep> fill ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> + <identifier> . total <identifiersep> count . get <identifiersep> value ( ) ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> + vim . get <identifiersep> <identifier> ( ) . size ( ) ) ; \n <ect>
<comment> \n public void clear ( final long user <identifiersep> id ) { \n <ect>
\t3 vm <identifiersep> instance <identifiersep> vo <identifier> <identifiersep> vm = null ; \n \t3 if ( ( info == null && ( vm . get <identifiersep> state ( ) == state . running || vm . get <identifiersep> state ( ) == state . starting ) ) \n \t5 || ( info != null && ( info . state == state . running && vm . get <identifiersep> state ( ) == state . starting ) ) ) \n \t3 { \n <ect>
\t3 field <identifiersep> metadata < ? , ? > field <identifiersep> info = class <identifiersep> metadata . get <identifiersep> field ( field . get <identifiersep> key ( ) ) ; \n \t3 if ( field <identifiersep> info != null && check . should <identifiersep> deserialize ( class <identifiersep> metadata , field <identifiersep> info ) ) { \n \t4 deserialize <identifiersep> <identifier> ( target , field <identifiersep> info , field . get <identifiersep> value ( ) , context ) ; \n \t3 } else if ( field <identifiersep> info == null ) { \n <ect>
<comment> \n \t1 public static index <identifiersep> creator get <identifiersep> index <identifiersep> creator ( <identifier> <identifiersep> index <identifiersep> type type , int parameter , file out <identifiersep> file , sam <identifiersep> sequence <identifiersep> dictionary sequence <identifiersep> dictionary ) { \n \t2 if ( argument <identifiersep> type <identifiersep> descriptor . is <identifiersep> compressed ( out <identifiersep> file . to <identifiersep> string ( ) ) ) { \n \t3 if ( type != <identifier> <identifiersep> utils . default <identifiersep> index <identifiersep> type || parameter != <identifier> <identifiersep> utils . default <identifiersep> index <identifiersep> parameter ) \n <ect>
\t5 string error <identifiersep> str = string . format ( <string_literal> , \n \t7 node . get <identifiersep> path ( ) , node . get <identifiersep> primary <identifiersep> node <identifiersep> type ( ) . get <identifiersep> name ( ) ) ; \n \t5 throw new content <identifiersep> exception ( error <identifiersep> str ) ; \n \t4 } else if ( is <identifiersep> node <identifiersep> content ( node ) ) { \n <ect>
\t4 pool < v > resource <identifiersep> pool = get <identifiersep> resource <identifiersep> pool <identifiersep> for <identifiersep> existing <identifiersep> key ( key ) ; \n \t4 return resource <identifiersep> pool . queue . size ( ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t2 conn . disconnect ( ) \n \t1 except : \n \t2 logger . exception ( <string_literal> ) \n \t1 if <identifier> ( ex , socket <identifiersep> error ) : \n <ect>
\t6 log . debug ( <string_literal> + element . id + <string_literal> ) ; } } \n \t4 else { \n \t5 done = true ; \n <ect>
<comment> \n \t1 public static boolean create <identifiersep> <identifier> <identifiersep> webhook ( git <identifiersep> repo <identifiersep> client repo <identifiersep> client , logger log , string <identifier> <identifiersep> user , string repo <identifiersep> name , string webhook <identifiersep> url , string webhook <identifiersep> secret ) throws json <identifiersep> processing <identifiersep> exception { \n \t2 if ( repo <identifiersep> client == null ) { \n <ect>
\t4 mllp <identifiersep> buffer . set <identifiersep> <identifier> <identifiersep> message ( <identifier> <identifiersep> bytes ) ; \n \t4 mllp <identifiersep> buffer . write <identifiersep> to ( socket ) ; \n \t3 } catch ( mllp <identifiersep> socket <identifiersep> exception write <identifiersep> ex ) { \n \t4 <comment> \n <ect>
\t1 return ; } \n \t1 <identifier> = new ref <identifiersep> <identifier> <identifiersep> resource ( ) ; \n \t1 list < uri > local <identifiersep> uris = resource <identifiersep> downloader . download <identifiersep> external ( src <identifiersep> uri , <identifier> , false ) ; \n \t1 if ( local <identifiersep> uris == null || local <identifiersep> uris . is <identifiersep> empty ( ) ) { \n <ect>
\t2 double value = 0 ; \n \t2 try { \n \t3 value = double . parse <identifiersep> double ( s ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 if ( params != null ) { \n \t2 log . debug ( <string_literal> ) ; \n \t2 log . debug ( <string_literal> , system . get <identifiersep> property ( <string_literal> ) ) ; \n \t2 log . debug ( <string_literal> , system . get <identifiersep> property ( <string_literal> ) ) ; \n <ect>
\t3 output <identifiersep> stream os = t . get <identifiersep> response <identifiersep> body ( ) ; \n \t3 os . write ( response . get <identifiersep> bytes ( ) ) ; \n \t3 os . close ( ) ; \n \t2 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error e ) { \n <ect>
\t2 if ( base != null ) { \n \t3 final <identifiersep> paths . add ( base ) ; } \n \t2 <comment> \n \t2 for ( acid <identifiersep> utils . parsed <identifiersep> delta delta : dir <identifiersep> info . get <identifiersep> current <identifiersep> directories ( ) ) { \n <ect>
\t2 if ( null != rs ) { \n \t2 try { \n \t3 rs . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t3 if ( network . get <identifiersep> <identifier> ( ) != null ) { \n \t4 has <identifiersep> free <identifiersep> ips = is <identifiersep> <identifier> <identifiersep> available <identifiersep> in <identifiersep> network ( network . get <identifiersep> id ( ) ) ; } \n \t2 } else { \n \t3 if ( network . get <identifiersep> cidr ( ) == null ) { \n <ect>
\t1 public grid <identifiersep> future < object > delete ( grid <identifiersep> ggfs <identifiersep> file <identifiersep> info file <identifiersep> info ) { \n \t2 <comment> \n \t2 if ( ! file <identifiersep> info . is <identifiersep> file ( ) ) { \n <ect>
\t1 col <identifiersep> values . add ( row . get <identifiersep> row ( ) [ col <identifiersep> num ] ) ; } \n \t1 return parse <identifiersep> utils . detect <identifiersep> hive <identifiersep> column <identifiersep> data <identifiersep> type ( col <identifiersep> values ) ; } \n @ override \n public preview <identifiersep> data parse <identifiersep> preview ( ) { \n <ect>
\t2 if ( consent <identifiersep> decision <identifiersep> builder . does <identifiersep> attribute <identifiersep> release <identifiersep> require <identifiersep> consent ( decision , attributes ) ) { \n \t3 logger . debug ( <string_literal> , \n \t5 decision , registered <identifiersep> service . get <identifiersep> name ( ) ) ; \n \t3 return pair . of ( true , decision ) ; } \n <ect>
\t6 log . warn ( <string_literal> , executor <identifiersep> service ) ; \n \t6 executor <identifiersep> service . shutdown <identifiersep> now ( ) ; \n \t6 <comment> \n \t6 if ( ! await <identifiersep> termination ( executor <identifiersep> service , shutdown <identifiersep> await <identifiersep> termination ) ) { \n <ect>
\t3 promise . as <identifiersep> promise ( <identifier> ) , updated <identifiersep> zones ) ; } \n \t1 @ override \n \t1 protected void do <identifiersep> catch ( throwable e ) throws throwable { \n \t2 if ( e instanceof cancellation <identifiersep> exception ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 if ( channel . is <identifiersep> connected ( ) ) { \n \t4 channel . send ( message , sent ) ; } } } \n \t1 public void close ( ) { \n <ect>
\t3 final long elapsed = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n \t3 logger . debug ( string . format ( <string_literal> , elapsed , result . get <identifiersep> tests ( ) . size ( ) ) ) ; } \n \t2 if ( result == null ) { \n <ect>
\t1 txn . set <identifiersep> batch ( persist <identifiersep> batch . insert ) ; \n \t1 txn . set <identifiersep> batch <identifiersep> on <identifiersep> <identifier> ( persist <identifiersep> batch . all ) ; \n \t1 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t2 <identifier> <identifiersep> master master = create <identifiersep> master ( i + <number_literal> ) ; \n <ect>
\t3 } ) ; } \n \t2 return attributes ; } \n \t1 private static bound <identifiersep> statement bind ( final prepared <identifiersep> statement statement , final object . . . params ) { \n \t2 final bound <identifiersep> statement bound <identifiersep> statement = statement . bind ( params ) ; \n <ect>
\t5 v <identifiersep> mware = true ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , e ) ; } \n \t2 <comment> \n <ect>
\t2 driver driver = get <identifiersep> driver ( ) ; \n \t2 string url = get <identifiersep> url ( ) ; \n \t2 assert . not <identifiersep> null ( driver , <string_literal> ) ; \n <ect>
\t3 } else { \n \t4 if ( v <identifiersep> mware ) { \n \t5 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> ) ; \n \t4 } else { \n <ect>
\t4 sc . add <identifiersep> and ( <string_literal> , search <identifiersep> criteria . op . null ) ; \n \t4 sc . add <identifiersep> and ( <string_literal> , search <identifiersep> criteria . op . eq , usage <identifiersep> types . allocated <identifiersep> vm ) ; \n \t4 usage <identifiersep> instances = <identifier> <identifiersep> usage <identifiersep> instance <identifiersep> dao . search ( sc , null ) ; \n \t4 if ( usage <identifiersep> instances == null || ( usage <identifiersep> instances . size ( ) == 0 ) ) { \n <ect>
\t1 object <identifiersep> name = new object <identifiersep> name ( \n \t2 <string_literal> \n \t3 + thread . current <identifiersep> thread ( ) . get <identifiersep> name ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . successful <identifiersep> shards ( ) , equal <identifiersep> to ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . total <identifiersep> shards ( ) ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 path metadata = repo . resolve ( <string_literal> + create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . snapshot <identifiersep> id ( ) . get <identifiersep> uuid ( ) + <string_literal> ) ; \n \t2 files . delete ( metadata ) ; \n <ect>
\t2 container container = containers . get ( 0 ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , container ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <string_literal> , container . get <identifiersep> name ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <string_literal> , container . get <identifiersep> image ( ) ) ; \n <ect>
\t3 } else { \n \t4 logger . debug ( <string_literal> ) ; } \n \t3 if ( consent <identifiersep> policy . get <identifiersep> include <identifiersep> only <identifiersep> attributes ( ) != null && ! consent <identifiersep> policy . get <identifiersep> include <identifiersep> only <identifiersep> attributes ( ) . is <identifiersep> empty ( ) ) { \n \t4 attributes . key <identifiersep> set ( ) . retain <identifiersep> all ( consent <identifiersep> policy . get <identifiersep> include <identifiersep> only <identifiersep> attributes ( ) ) ; \n <ect>
\t2 os . remove ( file <identifiersep> path ) \n \t1 provider <identifiersep> path = <identifier> : <comment> \n \t1 logger . info ( <identifier> <identifiersep> path = { 0 } ' . format ( provider <identifiersep> path ) ) \n \t1 for alias , pwd in credentials . items ( ) : \n <ect>
\t2 <identifier> = create <identifiersep> broker ( <string_literal> , second <identifiersep> tcp <identifiersep> uri ) ; \n \t2 network <identifiersep> connector network <identifiersep> connector = <identifier> . add <identifiersep> network <identifiersep> connector ( <string_literal> + first <identifiersep> tcp <identifiersep> uri + <string_literal> ) ; \n \t2 network <identifiersep> connector . set <identifiersep> <identifier> ( true ) ; \n \t2 <identifier> . start ( ) ; \n <ect>
\t2 except exception as e : \n \t3 raise exception ( <string_literal> % e ) \n \t2 return \n \t1 def set <identifiersep> up ( self ) : \n <ect>
\t5 set <identifiersep> client ( container . get <identifiersep> client ( ) ) ; \n \t5 set <identifiersep> container ( container . get <identifiersep> name ( ) ) ; } \n \t4 else \n \t4 { \n <ect>
\t1 int total <identifiersep> sent = 0 ; \n \t1 try { \n \t1 total <identifiersep> sent = http <identifiersep> helper . send <identifiersep> all ( update <identifiersep> tasks . tasks , \n \t2 update <identifiersep> tasks . num <identifiersep> metrics , send <identifiersep> timeout <identifiersep> ms ) ; \n <ect>
\t4 if ( s . equals <identifiersep> ignore <identifiersep> case ( spsso <identifiersep> descriptor . default <identifiersep> element <identifiersep> name . get <identifiersep> local <identifiersep> part ( ) ) ) { \n \t5 logger . debug ( <string_literal> , spsso <identifiersep> descriptor . default <identifiersep> element <identifiersep> name ) ; \n \t5 roles . add ( spsso <identifiersep> descriptor . default <identifiersep> element <identifiersep> name ) ; } \n \t4 if ( s . equals <identifiersep> ignore <identifiersep> case ( <identifier> <identifiersep> descriptor . default <identifiersep> element <identifiersep> name . get <identifiersep> local <identifiersep> part ( ) ) ) { \n <ect>
\t5 <comment> \n \t5 if ( allowed <identifiersep> to <identifiersep> close ) { \n \t6 if ( ff || closing <identifiersep> time > 0 ) { \n \t7 complete <identifiersep> lifecycle = false ; \n <ect>
\t1 string key = identifier <identifiersep> evaluator . resolve <identifiersep> value ( event ) ; \n \t1 if ( key != null ) { \n \t2 return remove <identifiersep> property ( ( privileged <identifiersep> event ) event , key ) ; \n \t1 } else { \n <ect>
\t2 try { \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 <comment> \n \t3 if ( ! apply <identifiersep> global <identifiersep> load <identifiersep> balancer <identifiersep> rule <identifiersep> config ( <identifier> <identifiersep> rule <identifiersep> id , false ) ) { \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + load <identifiersep> balancer <identifiersep> id + <string_literal> + instance <identifiersep> id ) ; } \n \t4 load <identifiersep> balancer . set <identifiersep> state ( backup <identifiersep> state ) ; \n \t4 <identifier> <identifiersep> lb <identifiersep> dao . persist ( load <identifiersep> balancer ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + load <identifiersep> balancer <identifiersep> id + <string_literal> ) ; } \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 private void do <identifiersep> deliver <identifiersep> hints <identifiersep> to <identifiersep> endpoint ( inet <identifiersep> address endpoint ) \n \t1 { \n \t2 <comment> \n \t2 uuid host <identifiersep> id = gossiper . instance . get <identifiersep> host <identifiersep> id ( endpoint ) ; \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 file <identifiersep> header . set <identifiersep> sort <identifiersep> order ( sort <identifiersep> order ) ; } \n \t2 if ( filter == filter . include <identifiersep> <identifier> <identifiersep> intervals && file <identifiersep> header . get <identifiersep> sort <identifiersep> order ( ) != sam <identifiersep> file <identifiersep> header . sort <identifiersep> order . coordinate ) { \n \t3 throw new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n \t2 final boolean <identifier> = input <identifiersep> sort <identifiersep> order . equals ( file <identifiersep> header . get <identifiersep> sort <identifiersep> order ( ) ) ; \n <ect>
\t4 } else { \n \t5 throw new voldemort <identifiersep> exception ( <identifier> <identifiersep> message , exception ) ; } } \n \t2 } catch ( voldemort <identifiersep> exception e ) { \n \t3 response . set <identifiersep> error ( proto <identifiersep> utils . encode <identifiersep> error ( error <identifiersep> code <identifiersep> mapper , e ) ) ; \n <ect>
class logging <identifiersep> runnable ( val <identifier> <identifiersep> name : string , val description : string , val runnable : runnable ) : runnable { \n \t1 override fun to <identifiersep> string ( ) : string { \n \t2 return description } \n \t1 override fun run ( ) { \n <ect>
\t2 try { \n \t3 message = tcp <identifiersep> input . read <identifiersep> line ( ) ; \n \t3 logger . debug ( <string_literal> , message ) ; \n \t2 } catch ( io <identifiersep> exception io <identifiersep> exception ) { \n <ect>
\t4 user <identifiersep> model <identifier> = validate ( realm , user ) ; \n \t4 if ( <identifier> != null ) { \n \t5 return <identifier> ; \n \t4 } else { \n <ect>
\t4 temp = cipher . get <identifiersep> instance ( <identifier> <identifiersep> algorithm ) ; \n \t3 temp . init ( cipher . secret <identifiersep> key , key <identifiersep> spec ) ; \n \t3 return key <identifiersep> spec ; } \n \t2 catch ( exception e ) { \n <ect>
\t3 souliss <identifiersep> network <identifiersep> parameter . <identifier> <identifiersep> <identifier> <identifiersep> in <identifiersep> s = <identifier> <identifiersep> <identifier> <identifiersep> in <identifiersep> s ; \n \t3 souliss <identifiersep> network <identifiersep> parameter . <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> s = <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> s ; \n \t3 souliss <identifiersep> network <identifiersep> parameter . <identifier> <identifiersep> <identifier> <identifiersep> out <identifiersep> s = <identifier> <identifiersep> <identifier> <identifiersep> out <identifiersep> s ; \n \t3 logger . debug ( <string_literal> ) ; \n <ect>
\t3 client . admin ( ) . cluster ( ) . prepare <identifiersep> restore <identifiersep> snapshot ( <string_literal> , <string_literal> ) . set <identifiersep> indices ( <string_literal> , <string_literal> ) . set <identifiersep> rename <identifiersep> pattern ( <string_literal> ) . set <identifiersep> rename <identifiersep> replacement ( <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) . execute ( ) . action <identifiersep> get ( ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( snapshot <identifiersep> restore <identifiersep> exception ex ) { \n \t3 <comment> \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + xml ) ; \n \t4 <identifier> . detach <identifiersep> device ( xml ) ; } \n \t2 } catch ( final libvirt <identifiersep> exception e ) { \n \t3 if ( attach ) { \n <ect>
\t2 ensure <identifiersep> <identifier> <identifiersep> can <identifiersep> load <identifiersep> iterator ( shell <identifiersep> state , table <identifiersep> name , iterator <identifiersep> setting . get <identifiersep> iterator <identifiersep> class ( ) ) ; } \n \t1 } else { \n \t1 table <identifiersep> scan <identifiersep> iterators = shell <identifiersep> state . scan <identifiersep> iterator <identifiersep> options . get ( table <identifiersep> name ) ; \n \t1 if ( table <identifiersep> scan <identifiersep> iterators == null ) { \n <ect>
\t2 if ( context <identifiersep> parameters == null ) \n \t2 { \n \t3 context <identifiersep> parameters = context <identifiersep> parameters <identifiersep> registry . get <identifiersep> instance ( ) . get <identifiersep> default ( ) ; \n \t3 logger . debug ( <string_literal> + context <identifiersep> parameters . get <identifiersep> karma <identifiersep> home ( ) ) ; } \n <ect>
\t4 default : \n \t5 cc . set <identifiersep> connection <identifiersep> strategy ( new default <identifiersep> connection <identifiersep> strategy ( ) ) ; \n \t5 break ; } } \n \t2 if ( l . get <identifiersep> trust <identifiersep> certificates ( ) != null ) { \n <ect>
\t8 impl <identifiersep> id . set <identifiersep> description ( <identifier> <identifiersep> model . implementation <identifiersep> id <identifiersep> description ) ; \n \t8 context . get <identifiersep> <identifier> <identifiersep> service ( ) . set <identifiersep> implementation <identifiersep> id ( impl <identifiersep> id ) ; } \n \t7 catch ( exception e ) { \n \t8 report <identifiersep> error ( error <identifiersep> message <identifiersep> constants . error <identifiersep> set <identifiersep> <identifier> <identifiersep> id , default <identifiersep> page , e . get <identifiersep> message ( ) ) ; \n <ect>
\t1 private final quorum <identifiersep> base qb = new quorum <identifiersep> base ( ) ; \n \t1 private static final int connection <identifiersep> timeout = client <identifiersep> base . connection <identifiersep> timeout ; \n \t1 @ before \n \t1 public void set <identifiersep> up ( ) throws exception { \n <ect>
\t2 synchronized ( names <identifiersep> lock ) { \n \t3 assert . assert <identifiersep> not <identifiersep> null ( names ) ; \n \t3 assert . assert <identifiersep> true ( names . size ( ) == <number_literal> ) ; \n \t3 for ( content <identifiersep> name cn : names ) { \n <ect>
\t6 conf . get <identifiersep> table <identifiersep> name <identifiersep> prefix ( ) , old <identifiersep> name , ( id ) ) ; \n \t3 } else if ( old <identifiersep> name . contains ( <string_literal> ) ) { \n \t4 id = integer . parse <identifiersep> int ( old <identifiersep> name . substring ( old <identifiersep> name . last <identifiersep> index <identifiersep> of ( <string_literal> ) + 1 ) ) ; \n \t4 logger . warn ( <string_literal> , old <identifiersep> name , ( id ) ) ; } \n <ect>
\t2 mock . expected <identifiersep> minimum <identifiersep> message <identifiersep> count ( 1 ) ; \n \t2 mock . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > <identifier> = mock . get <identifiersep> exchanges ( ) ; \n \t2 for ( exchange e : <identifier> ) { \n <ect>
\t3 <identifier> <identifiersep> executor . execute ( ( ) - > next <identifiersep> filter . on <identifiersep> error ( \n \t4 new timeout <identifiersep> exception ( <string_literal> + <identifier> <identifiersep> request <identifiersep> timeout + <string_literal> ) , \n \t4 request <identifiersep> context , wire <identifiersep> attrs ) ) ; \n \t3 } catch ( rejected <identifiersep> execution <identifiersep> exception e ) { \n <ect>
<number_literal> logger . info ( <string_literal> + method . get <identifiersep> name ( ) ) ; \n <number_literal> final list < method > methods <identifiersep> called = method . get <identifiersep> property ( method . methods <identifiersep> called ) ; \n <number_literal> methods <identifiersep> called . add ( called <identifiersep> method ) ; \n <number_literal> method . set <identifiersep> property ( method . methods <identifiersep> called , methods <identifiersep> called ) ; \n <ect>
\t4 event <identifiersep> stream . add <identifiersep> event ( convert <identifiersep> event ( event , source , data ) ) ; \n \t4 this . execution . get <identifiersep> context ( ) \n \t6 . remove <identifiersep> property ( abstract <identifiersep> event <identifiersep> stream <identifiersep> event . event <identifiersep> loop <identifiersep> context <identifiersep> lock <identifiersep> property ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t7 throw new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n \t5 } ; } \n \t4 iterators . add ( range <identifiersep> iterator ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t3 <identifier> . stop ( ) ; \n \t2 } else { \n \t3 log . info ( <string_literal> ) ; } \n \t2 if ( <identifier> != null && <identifier> . is <identifiersep> started ( ) ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t2 <comment> \n \t2 return null ; } \n \t2 cached . rollback ( ) ; <comment> \n \t2 cached . clear <identifiersep> warnings ( ) ; \n <ect>
\t1 { \n \t2 <comment> \n \t2 if ( parent <identifiersep> operation <identifiersep> set == null ) { \n <ect>
public void set <identifiersep> <identifier> ( se . caboo . beast . model . <identifier> value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value , <identifier> <identifiersep> topic . <identifier> <identifiersep> key ) ; } \n public void set <identifiersep> <identifier> <identifiersep> relationship ( se . caboo . beast . model . <identifier> value ) { \n <ect>
\t1 response <identifiersep> value = io <identifiersep> utils . to <identifiersep> string ( response . get <identifiersep> entity ( ) . get <identifiersep> content ( ) ) ; \n \t1 log . info ( <string_literal> + response <identifiersep> value ) ; \n \t1 } catch ( exception e ) { \n \t1 log . log ( level . info , <string_literal> , e ) ; \n <ect>
\t6 string name = path <identifiersep> to <identifiersep> reload . resolve ( path ) . to <identifiersep> absolute <identifiersep> path ( ) . to <identifiersep> file ( ) . get <identifiersep> absolute <identifiersep> path ( ) ; \n \t6 log . trace ( <string_literal> , name ) ; \n \t6 <comment> \n \t6 if ( name . to <identifiersep> lower <identifiersep> case ( locale . us ) . ends <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t4 out . write ( sb . to <identifiersep> string ( ) . get <identifiersep> bytes ( ) ) ; \n \t4 out . write ( stomp . null <identifiersep> byte ) ; \n \t4 out . flush ( ) ; } } \n \t2 catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 if ( rsp . get <identifiersep> fail <identifiersep> reason ( ) != null ) \n \t3 throw new security <identifiersep> exception ( rsp . get <identifiersep> fail <identifiersep> reason ( ) ) ; \n \t2 digest tmp <identifiersep> digest = rsp . get <identifiersep> digest ( ) ; \n \t2 if ( tmp <identifiersep> digest == null || tmp <identifiersep> digest . capacity ( ) == 0 ) { \n <ect>
\t3 string [ ] kv = params [ i ] . split ( <string_literal> ) ; \n \t3 if ( kv . length == <number_literal> ) { \n \t4 args . put ( kv [ 0 ] , kv [ 1 ] ) ; \n \t3 } else { \n <ect>
\t2 for ( int i = 0 ; i < iterations ; i ++ ) { \n \t3 string session <identifiersep> id = string . value <identifiersep> of ( i ) ; \n \t3 session <identifiersep> entity <identifiersep> wrapper < user <identifiersep> session <identifiersep> entity > wrapped <identifiersep> session = create <identifiersep> session <identifiersep> entity ( session <identifiersep> id ) ; \n \t3 cache1 . put ( session <identifiersep> id , wrapped <identifiersep> session ) ; } \n <ect>
\t4 case mllp <identifiersep> protocol <identifiersep> constants . start <identifiersep> of <identifiersep> block : \n \t5 log . error ( <string_literal> , parsed <identifiersep> message . to <identifiersep> string ( ) ) ; \n \t5 return null ; \n \t4 case mllp <identifiersep> protocol <identifiersep> constants . end <identifiersep> of <identifiersep> stream : \n <ect>
\t2 assert <identifiersep> cache <identifiersep> if <identifiersep> present ( 0 , cache , f ) ; \n \t2 assert <identifiersep> cache <identifiersep> if <identifiersep> present ( 1 , cache , copy <identifiersep> to <identifiersep> file ( random <identifiersep> stream ( 1 , <number_literal> * <number_literal> ) , folder . new <identifiersep> file ( ) ) ) ; \n \t2 assert <identifiersep> false ( get <identifiersep> file ( id <identifiersep> prefix + 1 , root ) . exists ( ) ) ; \n \t2 assert <identifiersep> cache <identifiersep> stats ( cache , <number_literal> , <number_literal> * <number_literal> , 0 , 0 ) ; \n <ect>
\t1 public boolean use <identifiersep> session <identifiersep> store <identifiersep> deadlock <identifiersep> detection ( ) { \n \t2 if ( <identifier> <identifiersep> use <identifiersep> session <identifiersep> store <identifiersep> deadlock <identifiersep> detection == null ) { \n \t3 <identifier> <identifiersep> use <identifiersep> session <identifiersep> store <identifiersep> deadlock <identifiersep> detection = erx <identifiersep> properties . boolean <identifiersep> for <identifiersep> key ( <string_literal> ) ? boolean . true : boolean . false ; \n \t3 if ( is <identifiersep> concurrent <identifiersep> request <identifiersep> handling <identifiersep> enabled ( ) && <identifier> <identifiersep> use <identifiersep> session <identifiersep> store <identifiersep> deadlock <identifiersep> detection . boolean <identifiersep> value ( ) ) { \n <ect>
\t4 consumer <identifiersep> choice <identifiersep> point <identifiersep> frame <identifier> = ( consumer <identifiersep> choice <identifiersep> point <identifiersep> frame ) cp <identifiersep> frame ; \n \t4 <comment> \n \t4 env <identifiersep> frame = <identifier> . env <identifiersep> frame ; \n \t4 clause = env <identifiersep> frame . clause ; \n <ect>
\t1 try { \n \t2 sc . action <identifiersep> destroy ( name , destroy <identifiersep> arg ) ; \n \t1 } catch ( unknown <identifiersep> application <identifiersep> instance <identifiersep> exception ex ) { \n \t2 log . info ( <string_literal> ) ; } \n <ect>
\t3 if ( txn != null && txn . is <identifiersep> active ( ) ) { \n \t4 try { \n \t5 txn . rollback ( ) ; } \n \t4 catch ( exception e ) { \n <ect>
\t1 log . debug ( type + <string_literal> + method . get <identifiersep> uri ( ) . get <identifiersep> <identifier> <identifiersep> uri ( ) ) ; \n \t1 int http <identifiersep> status = client . execute <identifiersep> method ( method ) ; \n \t1 log . debug ( <string_literal> + http <identifiersep> status ) ; \n \t1 string resp = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> string ( ) ; \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t3 result . put ( server , status ) ; \n \t3 } finally { \n \t3 t . set <identifiersep> name ( old <identifiersep> name ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( stmt ) ; \n \t1 list < string > rs = run <identifiersep> statement <identifiersep> on <identifiersep> driver ( \n \t1 <string_literal> ) ; \n \t1 assert . assert <identifiersep> equals ( <string_literal> , <number_literal> , rs . size ( ) ) ; \n <ect>
\t6 update <identifiersep> pstmt . set <identifiersep> string ( 1 , <string_literal> ) ; \n \t6 update <identifiersep> pstmt . set <identifiersep> string ( <number_literal> , <string_literal> ) ; \n \t6 update <identifiersep> pstmt . execute <identifiersep> update ( ) ; \n \t5 } catch ( final sql <identifiersep> exception e ) { \n <ect>
\t2 mock . expected <identifiersep> <identifier> <identifiersep> received ( <string_literal> ) ; \n \t2 mock . expected <identifiersep> file <identifiersep> exists ( <string_literal> ) ; \n \t2 mock . expected <identifiersep> file <identifiersep> exists ( <string_literal> ) ; \n \t2 template . send <identifiersep> body <identifiersep> and <identifiersep> header ( <string_literal> , <string_literal> , exchange . file <identifiersep> name , <string_literal> ) ; \n <ect>
\t3 udp <identifiersep> address addr = new udp <identifiersep> address ( <identifier> ) ; \n \t3 byte [ ] <identifier> = addr . get <identifiersep> <identifier> <identifiersep> key ( ) ; \n \t3 if ( <identifier> == null ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t1 @ field \n \t1 private string model <identifiersep> path = def <identifiersep> model ; \n \t1 @ override \n \t1 public void initialize ( map < string , param > params ) throws tika <identifiersep> config <identifiersep> exception { \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 get <identifiersep> or <identifiersep> create <identifiersep> one <identifiersep> thread ( ) ; } } \n \t1 @ test \n \t1 public void get <identifiersep> or <identifiersep> create <identifiersep> one <identifiersep> thread ( ) throws exception { \n <ect>
\t4 for ( map . entry < string , versioned <identifiersep> entry < string , byte [ ] > > entry : values . entry <identifiersep> set ( ) ) { \n \t5 try { \n \t6 this . put ( entry . get <identifiersep> key ( ) , entry . get <identifiersep> value ( ) ) ; \n \t5 } catch ( exception ex ) { \n <ect>
\t3 logger . error ( this , <string_literal> + temp + <string_literal> + version + <string_literal> + to <identifiersep> string + <string_literal> ) ; \n \t3 system . err . println ( <string_literal> + temp + <string_literal> + version + <string_literal> + to <identifiersep> string + <string_literal> ) ; \n \t3 return ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t9 try { \n \t10 log . info ( <string_literal> , get <identifiersep> address ( ) ) ; \n \t10 wallet . receive <identifiersep> pending ( tx , dependencies ) ; \n \t9 } catch ( verification <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public void release <identifiersep> sync <identifiersep> source ( async <identifiersep> job <identifiersep> executor executor ) { \n \t2 if ( executor . get <identifiersep> sync <identifiersep> source ( ) != null ) { \n <ect>
\t4 if ( status <identifiersep> code == http <identifiersep> status . sc <identifiersep> ok ) { \n \t5 try { \n \t6 tokens = json . read <identifiersep> value ( response <identifiersep> body , token <identifiersep> response . class ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t4 object [ ] data = ( object [ ] ) call . get ( <string_literal> ) ; \n \t4 handle <identifiersep> method <identifiersep> call ( method , data ) ; } \n \t3 return bin <identifiersep> empty <identifiersep> event <identifiersep> list ; \n \t2 } else { \n <ect>
\t3 return collection <identifiersep> utils . wrap <identifiersep> set ( event ) ; } \n \t2 logger . debug ( <string_literal> , id , service ) ; \n \t2 final pair < boolean , optional < multifactor <identifiersep> authentication <identifiersep> provider > > result = this . authentication <identifiersep> context <identifiersep> validator . validate ( authentication , id , service ) ; \n \t2 if ( result . get <identifiersep> key ( ) ) { \n <ect>
\t1 @ override \n \t1 @ db \n \t1 public void update <identifiersep> async <identifiersep> job <identifiersep> attachment ( final long job <identifiersep> id , final string instance <identifiersep> type , final long instance <identifiersep> id ) { \n <ect>
\t3 log . error ( <string_literal> , ioe ) ; \n \t3 return null ; \n \t2 } catch ( data <identifiersep> format <identifiersep> exception dfe ) { \n \t3 log log = i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( session <identifiersep> config . class ) ; \n <ect>
<comment> \n \t1 @ test \n \t1 public void basic <identifiersep> stream <identifiersep> encrypt <identifiersep> decrypt ( ) throws io <identifiersep> exception { \n <ect>
\t3 return value ; } \n \t2 try { \n \t3 return new url <identifiersep> encoder ( ) . encode ( value ) . replace <identifiersep> all ( <string_literal> , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 private list < job <identifiersep> task <identifiersep> directory <identifiersep> match > find <identifiersep> <identifier> <identifiersep> for <identifiersep> task ( job <identifiersep> task task ) { \n \t2 list < job <identifiersep> task <identifiersep> directory <identifiersep> match > rv = new array <identifiersep> list < > ( ) ; \n \t2 job job = get <identifiersep> job ( task . get <identifiersep> job <identifiersep> uuid ( ) ) ; \n \t2 if ( job == null ) { \n <ect>
\t3 { \n \t4 this . obj <identifiersep> method . invoke ( obj , e ) ; } \n \t3 catch ( final throwable e1 ) \n \t3 { \n <ect>
\t3 email . send ( ) \n \t2 } catch ( e : email <identifiersep> exception ) { \n \t3 val out = response . writer \n \t3 out . write ( <string_literal> ) \n <ect>
\t3 string pnmas <identifiersep> enabled = ( string ) configuration . get ( config <identifiersep> key <identifiersep> pnmas <identifiersep> enabled ) ; \n \t3 if ( pnmas <identifiersep> enabled != null ) { \n \t4 string [ ] pnmas <identifiersep> ids = pnmas <identifiersep> enabled . split ( <string_literal> ) ; \n \t4 for ( string pnmas <identifiersep> id : pnmas <identifiersep> ids ) { \n <ect>
\t1 static boolean is <identifiersep> fatal <identifiersep> uncaught ( throwable e ) { \n \t2 return e instanceof error ; } \n \t1 void on <identifiersep> fatal <identifiersep> uncaught ( final string thread <identifiersep> name , final throwable t ) { \n \t2 final logger logger = loggers . get <identifiersep> logger ( elasticsearch <identifiersep> uncaught <identifiersep> exception <identifiersep> handler . class , logging <identifiersep> prefix <identifiersep> supplier . get ( ) ) ; \n <ect>
\t3 urls = get <identifiersep> resources ( loader , package <identifiersep> name ) ; \n \t3 if ( ! urls . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t4 log . trace ( <string_literal> ) ; } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t4 copy <identifiersep> template <identifiersep> from <identifiersep> secondary <identifiersep> to <identifiersep> primary ( hyper <identifiersep> host , \n \t5 primary <identifiersep> storage <identifiersep> datastore <identifiersep> mo , secondary <identifiersep> storage <identifiersep> url , \n \t5 mount <identifiersep> point , template <identifiersep> name , template <identifiersep> uuid <identifiersep> name ) ; \n \t3 } else { \n <ect>
\t4 while ( ! interrupted ( ) ) { \n \t5 <comment> \n \t5 <comment> \n \t5 if ( ! send <identifiersep> allowed . try <identifiersep> acquire ( 1 , z <identifiersep> wave <identifiersep> response <identifiersep> timeout , time <identifiersep> unit . milliseconds ) ) { \n <ect>
\t6 <comment> \n \t6 log . info ( <string_literal> ) ; \n \t6 return ; \n \t5 case <number_literal> : \n <ect>
\t3 if ( ! action . validate ( ) ) { \n \t4 logger . warn ( <string_literal> + action . get <identifiersep> action ( ) ) ; \n \t4 return false ; } \n \t3 if ( action . is <identifiersep> expired ( ) ) { \n <ect>
\t2 { \n \t3 <identifier> <identifiersep> alt <identifiersep> names = cert . get <identifiersep> subject <identifiersep> alternative <identifiersep> names ( ) ; } \n \t2 catch ( certificate <identifiersep> parsing <identifiersep> exception ex ) \n \t2 { \n <ect>
\t1 for ( short <identifiersep> task <identifiersep> status task : <identifier> <identifiersep> tasks ) { \n \t2 string component = task . get <identifiersep> role ( ) ; \n \t2 long logical <identifiersep> start <identifiersep> task <identifiersep> id = host <identifiersep> request . get <identifiersep> logical <identifiersep> tasks <identifiersep> for <identifiersep> topology <identifiersep> task ( this ) . get ( component ) ; \n \t2 if ( logical <identifiersep> start <identifiersep> task <identifiersep> id == null ) { \n <ect>
\t1 <comment> \n \t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + test <identifiersep> txn <identifiersep> <identifier> . table . <identifier> + <string_literal> ) ; \n \t1 test <identifiersep> txn <identifiersep> <identifier> . run <identifiersep> worker ( hive <identifiersep> conf ) ; \n \t1 rs = run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . <identifier> + <string_literal> ) ; \n <ect>
\t3 if ( expect <identifiersep> m <identifiersep> bean ) \n \t3 { \n \t4 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( e ) ; \n \t4 <comment> \n <ect>
\t1 proc = null ; \n \t1 close ( ) ; \n \t1 return true ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 table = hbase <identifiersep> connection . get <identifiersep> table ( table <identifiersep> name . value <identifiersep> of ( table <identifiersep> name ) ) ; \n \t3 admin = hbase <identifiersep> connection . get <identifiersep> admin ( ) ; \n \t3 if ( ! enabled ( table . get <identifiersep> configuration ( ) ) ) { \n <ect>
\t2 routing <identifiersep> nodes routing <identifiersep> nodes = cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) ; \n \t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , routing <identifiersep> nodes . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> state = strategy . reroute ( cluster <identifiersep> state , <string_literal> ) ; \n <ect>
\t6 logger . debug ( <string_literal> , repository <identifiersep> meta <identifiersep> data . name ( ) ) ; \n \t6 builder . put ( repository <identifiersep> meta <identifiersep> data . name ( ) , repository ) ; } } } \n \t3 repositories = collections . unmodifiable <identifiersep> map ( builder ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 logger . error ( <string_literal> , e ) ; \n \t3 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> , e ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 build <identifiersep> event <identifiersep> attribute <identifiersep> map ( authentication . get <identifiersep> principal ( ) , service , provider ) ) ; \n \t5 return collection <identifiersep> utils . wrap <identifiersep> set ( event ) ; } \n \t4 logger . warn ( <string_literal> , provider <identifiersep> found . get ( ) ) ; \n \t4 return null ; } \n <ect>
\t3 return ; } \n \t2 logger . debug ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) , command <identifiersep> class . get <identifiersep> label ( ) ) ; \n \t2 z <identifiersep> wave <identifiersep> command <identifiersep> class zwave <identifiersep> command <identifiersep> class = this . get <identifiersep> node ( ) . get <identifiersep> command <identifiersep> class ( command <identifiersep> class ) ; \n \t2 if ( zwave <identifiersep> command <identifiersep> class == null ) { \n <ect>
\t5 z <identifiersep> controller . notify <identifiersep> event <identifiersep> listeners ( new z <identifiersep> wave <identifiersep> <identifier> <identifiersep> event ( z <identifiersep> wave <identifiersep> <identifier> <identifiersep> event . type . include <identifiersep> done , \n \t7 incoming <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( <number_literal> ) ) ) ; } \n \t4 break ; \n \t3 case add <identifiersep> node <identifiersep> status <identifiersep> failed : \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 destroy ( ) ; } \n \t4 catch ( throwable t ) { \n <ect>
\t1 <comment> \n \t1 try { \n \t2 object <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . transition <identifiersep> object <identifiersep> to <identifiersep> state ( upload , object <identifiersep> state . deleting ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t4 if ( i > 1 ) { \n \t5 log . debug ( <string_literal> , i ) ; } \n \t4 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 assert <identifiersep> equals ( 0 , cache . get <identifiersep> staging <identifiersep> cache <identifiersep> stats ( ) . get <identifiersep> load <identifiersep> success <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> cache <identifiersep> stats ( cache . get <identifiersep> cache <identifiersep> stats ( ) , <number_literal> , <number_literal> * <number_literal> , 0 , <number_literal> ) ; \n \t2 assert <identifiersep> equals ( <number_literal> , cache . get <identifiersep> cache <identifiersep> stats ( ) . get <identifiersep> load <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> equals ( <number_literal> , cache . get <identifiersep> cache <identifiersep> stats ( ) . get <identifiersep> load <identifiersep> success <identifiersep> count ( ) ) ; \n <ect>
\t6 + <string_literal> + algorithm <identifiersep> ids . to <identifiersep> string ( ) ) ; \n \t5 return <number_literal> ; } } } \n \t2 if ( verbose ) \n \t2 { \n <ect>
\t4 log . info ( j <identifiersep> meter <identifiersep> utils . get <identifiersep> j <identifiersep> meter <identifiersep> <identifier> ( ) ) ; \n \t4 log . info ( <string_literal> , j <identifiersep> meter <identifiersep> utils . get <identifiersep> j <identifiersep> meter <identifiersep> version ( ) ) ; \n \t4 log . info ( <string_literal> , system . get <identifiersep> property ( <string_literal> ) ) ; <comment> \n \t4 log . info ( <string_literal> , system . get <identifiersep> property ( <string_literal> ) ) ; <comment> \n <ect>
\t5 object value = <identifier> ( reference , field . get <identifiersep> type ( ) ) ; \n \t5 if ( value != null ) { \n \t6 field . set ( bean , value ) ; } } \n \t3 } catch ( throwable e ) { \n <ect>
\t3 { \n \t4 server <identifiersep> transaction . send <identifiersep> response ( response ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
private long get <identifiersep> long <identifiersep> value ( map < string , ? extends object > properties , string property <identifiersep> key ) \n { \n \t1 if ( properties == null ) \n \t1 { \n <ect>
\t4 assigned . return <identifiersep> work <identifiersep> permit ( ) ; \n \t3 if ( task != null ) \n \t4 logger . error ( <string_literal> , t . get <identifiersep> message ( ) ) ; \n \t3 else \n <ect>
\t3 when ( value ) { \n \t4 null - > span ( ) . write ( ) \n \t4 else - > span ( ) . append <identifiersep> text ( value . to <identifiersep> string ( ) ) . write ( ) } \n \t2 } catch ( e : exception ) { \n <ect>
\t3 <identifier> <identifiersep> config <identifiersep> sync <identifiersep> api . save <identifiersep> configuration ( <string_literal> , system <identifiersep> config <identifiersep> sync <identifiersep> save <identifiersep> mode . save <identifiersep> base <identifiersep> level <identifiersep> config ) ; \t2 \n \t3 <identifier> <identifiersep> config <identifiersep> sync <identifiersep> api . save <identifiersep> configuration ( <string_literal> , system <identifiersep> config <identifiersep> sync <identifiersep> save <identifiersep> mode . save <identifiersep> high <identifiersep> level <identifiersep> config ) ; \t2 \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t2 } catch ( remote <identifiersep> exception e ) { \n <ect>
\t3 load <identifiersep> func load <identifiersep> func = load . get <identifiersep> load <identifiersep> func ( ) ; \n \t3 if ( load <identifiersep> func instanceof load <identifiersep> push <identifiersep> down ) { \n \t4 response = ( ( load <identifiersep> push <identifiersep> down ) load <identifiersep> func ) . push <identifiersep> projection ( required <identifiersep> fields ) ; } \n \t2 } catch ( frontend <identifiersep> exception e ) { \n <ect>
\t7 highlight <identifiersep> <identifier> . prepare ( <identifier> ) ; \n \t7 highlight <identifiersep> <identifier> . process ( <identifier> ) ; \n \t7 highlight <identifiersep> <identifier> . finish <identifiersep> stage ( <identifier> ) ; \n \t6 } catch ( exception e ) { \n <ect>
\t4 get <identifiersep> login ( ) , \n \t4 get <identifiersep> password ( ) , \n \t4 get <identifiersep> mail <identifiersep> auth <identifiersep> type ( ) , \n \t4 true ) ; \n <ect>
\t1 throw new error ( e ) ; } \n \t1 try { \n \t1 mac . init ( signing <identifiersep> key ) ; \n \t1 } catch ( invalid <identifiersep> key <identifiersep> exception e ) { \n <ect>
\t2 random <identifiersep> <identifier> <identifiersep> array old <identifiersep> array = it . get <identifiersep> parent <identifiersep> <identifier> <identifiersep> array ( ) ; \n \t2 if ( old <identifiersep> array == this ) \n \t3 it . set <identifiersep> parent <identifiersep> <identifier> <identifiersep> array ( null ) ; \n \t2 else if ( old <identifiersep> array != null ) \n <ect>
\t2 else if ( duplicate <identifiersep> service <identifiersep> repo <identifiersep> urls . contains ( repo . get <identifiersep> base <identifiersep> url ( ) ) ) { \n \t2 log . warn ( <string_literal> , repo ) ; } \n \t2 <comment> \n \t2 if ( stack <identifiersep> repo <identifiersep> names . contains ( repo . get <identifiersep> repo <identifiersep> name ( ) ) ) { \n <ect>
\t3 config . set <identifiersep> string ( <string_literal> , origin , <string_literal> , <string_literal> + origin + <string_literal> ) ; \n \t3 try { \n \t4 config . save ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 char c = sort <identifiersep> order . char <identifiersep> at ( i ) ; \n \t1 if ( c != ' + ' && c != ' - ' ) { \n \t2 throw new t <identifiersep> exception ( <identifier> <identifiersep> constants . serialization <identifiersep> sort <identifiersep> order \n \t3 + <string_literal> ) ; } } \n <ect>
\t4 <comment> \n \t4 continue ; } \n \t3 string [ ] <identifier> = key . split ( <string_literal> ) ; \n \t3 if ( <identifier> . length != <number_literal> ) { \n <ect>
\t3 try { \n \t4 each . start <identifiersep> sampling ( single <identifiersep> console , perf <identifiersep> test , perf <identifiersep> test <identifiersep> service ) ; \n \t3 } catch ( exception e ) { \n \t4 logger . error ( <string_literal> , e . get <identifiersep> message ( ) ) ; \n <ect>
\t2 if ( cfg <identifiersep> event . get <identifiersep> parameter ( ) != null && cfg <identifiersep> event . get <identifiersep> parameter ( ) . get <identifiersep> index ( ) != integer . parse <identifiersep> int ( <identifier> <identifiersep> number ) ) { \n \t3 return ; } \n \t2 z <identifiersep> wave <identifiersep> state <identifiersep> converter < ? , ? > converter = this . get <identifiersep> state <identifiersep> converter ( item , cfg <identifiersep> event . get <identifiersep> parameter ( ) . get <identifiersep> value ( ) ) ; \n \t2 if ( converter == null ) { \n <ect>
\t4 final int hash <identifiersep> width = <number_literal> ; \n \t4 return new <identifier> <identifiersep> encoder ( properties . get <identifiersep> secret ( ) , properties . get <identifiersep> <identifier> ( ) , hash <identifiersep> width ) ; \n \t3 case none : \n \t3 default : \n <ect>
\t4 for ( int update <identifiersep> count : update <identifiersep> counts ) { \n \t5 if ( update <identifiersep> count > - 1 ) { \n \t6 log . warn ( <string_literal> + update <identifiersep> count ) ; \n \t5 } else if ( update <identifiersep> count == statement . success <identifiersep> no <identifiersep> info ) { \n <ect>
\t3 <comment> \n \t3 c . commit ( ) ; \n \t3 break ; \n \t2 } else { \n <ect>
\t3 try { \n \t4 if ( connection != null ) { \n \t5 connection . close ( ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + host <identifiersep> id + <string_literal> + host <identifiersep> name + <string_literal> ) ; \n \t5 s <identifiersep> logger . trace ( <string_literal> + host <identifiersep> id + <string_literal> + request . get <identifiersep> sequence ( ) + <string_literal> + request ) ; \n \t4 } else if ( cmd instanceof ping <identifiersep> command ) { \n \t5 log <identifiersep> d = false ; \n <ect>
\t4 break ; } \n \t3 <comment> \n \t3 if ( ! failure <identifiersep> detector . instance . is <identifiersep> alive ( endpoint ) ) \n \t3 { \n <ect>
\t3 while ( line != null ) { \n \t4 sb . append ( line ) . append ( <string_literal> ) ; \n \t4 line = reader . read <identifiersep> line ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 force <identifiersep> snd <identifiersep> pending = false ; } } \n \t3 else { \n \t4 force <identifiersep> snd <identifiersep> pending = false ; \n <ect>
\t5 network <identifiersep> usage <identifiersep> answer answer = null ; \n \t5 try { \n \t6 answer = ( network <identifiersep> usage <identifiersep> answer ) <identifier> <identifiersep> agent <identifiersep> mgr . <identifier> <identifiersep> send ( router . get <identifiersep> host <identifiersep> id ( ) , usage <identifiersep> cmd ) ; \n \t5 } catch ( final exception e ) { \n <ect>
\t3 <comment> \n \t3 node n = <identifier> . get <identifiersep> node ( ) ; \n \t3 if ( ! n . is <identifiersep> uri ( ) ) \n \t3 { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 return ix + <number_literal> ; } \n \t1 case remove <identifiersep> from <identifiersep> list : { \n <ect>
\t2 if ( registered <identifiersep> m <identifiersep> beans . remove ( key ) ) { \n \t3 try { \n \t4 management <identifiersep> context . unregister <identifiersep> m <identifiersep> bean ( key ) ; \n \t3 } catch ( throwable e ) { \n <ect>
\t5 <identifier> = math . max ( <identifier> , pos ) ; } \n \t4 link link <identifiersep> field = field . get <identifiersep> annotation ( link . class ) ; \n \t4 if ( link <identifiersep> field != null ) { \n <ect>
\t6 <identifier> <identifiersep> log . warn ( <string_literal> + new date ( send <identifiersep> on ) + <string_literal> + packet + \n \t8 <string_literal> + state ) ; \n \t4 } else { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t2 if ( last <identifiersep> send <identifiersep> type == power <identifiersep> max <identifiersep> send <identifiersep> type . <identifier> || last <identifiersep> send <identifiersep> type == power <identifiersep> max <identifiersep> send <identifiersep> type . <identifier> \n \t4 || last <identifiersep> send <identifiersep> type == power <identifiersep> max <identifiersep> send <identifiersep> type . bypass ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t2 } else if ( last <identifiersep> send <identifiersep> type == power <identifiersep> max <identifiersep> send <identifiersep> type . download ) { \n <ect>
\t1 configuration <identifiersep> map . clear <identifiersep> local <identifiersep> cache ( ) ; \n \t1 <comment> \n \t1 final string old <identifiersep> uuid = node <identifiersep> uuid ; \n \t1 node <identifiersep> uuid = hazelcast <identifiersep> instance . get <identifiersep> cluster ( ) . get <identifiersep> local <identifiersep> member ( ) . get <identifiersep> uuid ( ) ; \n <ect>
\t2 <identifier> . set <identifiersep> timeout ( <number_literal> , <number_literal> , <number_literal> ) ; \n \t2 <identifier> . connect ( url , <identifier> , new completion <identifiersep> listener < nginx <identifiersep> http <identifiersep> server <identifiersep> channel > ( ) { \n \t3 @ override \n \t3 public void on <identifiersep> error ( long code , nginx <identifiersep> http <identifiersep> server <identifiersep> channel <identifier> ) throws io <identifiersep> exception { \n <ect>
\t4 support <identifiersep> spec support <identifiersep> spec = parse <identifiersep> support <identifiersep> line ( line . to <identifiersep> string ( ) ) ; \n \t4 if ( support <identifiersep> spec . is <identifiersep> valid ( ) ) { \n \t5 support <identifiersep> <identifier> . add ( support <identifiersep> spec ) ; \n \t4 } else { \n <ect>
\t9 status <identifiersep> address . get <identifiersep> sub <identifiersep> address ( ) , true ) ) ; \n \t5 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , \n \t7 result == status <identifiersep> address . get <identifiersep> open <identifiersep> value ( ) ? open <identifiersep> closed <identifiersep> type . open : open <identifiersep> closed <identifiersep> type . closed ) ; \n \t4 } catch ( sapp <identifiersep> exception e ) { \n <ect>
\t3 concurrent <identifiersep> executor . purge ( ) ; \n \t3 list < runnable > drain <identifiersep> list = new array <identifiersep> list < > ( ) ; \n \t3 concurrent <identifiersep> executor . get <identifiersep> queue ( ) . drain <identifiersep> to ( drain <identifiersep> list ) ; \n \t3 if ( ! drain <identifiersep> list . is <identifiersep> empty ( ) ) { \n <ect>
\t4 task . set <identifiersep> rebalance <identifiersep> source ( null ) ; \n \t4 task . set <identifiersep> rebalance <identifiersep> target ( null ) ; } \n \t3 if ( task . get <identifiersep> state ( ) . is <identifiersep> queued <identifiersep> state ( ) ) { \n \t4 remove <identifiersep> from <identifiersep> queue ( task ) ; \n <ect>
<comment> \n protected void rollback <identifiersep> transaction <identifiersep> if <identifiersep> created ( throwable e ) { \n \t1 if ( created <identifiersep> transaction ) { \n \t1 transaction . rollback ( e ) ; \n <ect>
\t4 if ( string <identifiersep> utils . is <identifiersep> blank ( saml . get <identifiersep> client <identifiersep> name ( ) ) ) { \n \t5 client . set <identifiersep> name ( client . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) + count ) ; } \n \t4 configure <identifiersep> client ( client , saml ) ; \n \t4 index . increment <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t1 public void test <identifiersep> failover <identifiersep> consumer <identifiersep> ack <identifiersep> lost ( ) throws exception { \n \t2 <comment> \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 try { \n <ect>
\t2 <identifier> <identifiersep> final <identifiersep> sweep <identifiersep> <identifier> <identifiersep> notification . remove ( key , value ) ; \n \t1 } ) ; \n \t1 } catch ( throwable t ) \n \t1 { \n <ect>
\t3 logger . debug ( <string_literal> , message ) ; } \n \t2 try { \n \t3 prod = get <identifiersep> string <identifiersep> from <identifiersep> text ( prod <identifiersep> reg <identifiersep> exp , message ) ; \n \t2 } catch ( lightwave <identifiersep> rf <identifiersep> message <identifiersep> exception le ) { \n <ect>
\t2 try { \n \t3 do <identifiersep> read ( ) ; } \n \t2 catch ( closed <identifiersep> channel <identifiersep> exception cce ) { \n <ect>
\t3 throw new internal <identifiersep> error <identifiersep> exception ( <string_literal> ) ; \n \t2 string k = keys . pop ( ) ; \n \t2 json <identifiersep> object obj = objects . peek ( ) ; \n \t2 if ( obj . has <identifiersep> key ( k ) ) \n <ect>
\t3 result . <identifier> = ( table <identifiersep> not <identifiersep> found <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t2 @ override \n \t2 public void on <identifiersep> timeout ( async <identifiersep> event event ) throws io <identifiersep> exception { \n \t3 logger . trace ( <string_literal> , event . get <identifiersep> async <identifiersep> context ( ) . get <identifiersep> request ( ) ) ; \n \t3 if ( p == null ) { \n <ect>
\t5 list < volume <identifiersep> data <identifiersep> store <identifiersep> vo > volume <identifiersep> data <identifiersep> stores = <identifier> <identifiersep> volume <identifiersep> data <identifiersep> store <identifiersep> dao . list <identifiersep> by <identifiersep> volume <identifiersep> state ( volume . state . upload <identifiersep> error , volume . state . upload <identifiersep> <identifier> ) ; \n \t5 for ( volume <identifiersep> data <identifiersep> store <identifiersep> vo volume <identifiersep> data <identifiersep> store : volume <identifiersep> data <identifiersep> stores ) { \n \t6 volume <identifiersep> vo volume = <identifier> <identifiersep> volume <identifiersep> dao . find <identifiersep> by <identifiersep> id ( volume <identifiersep> data <identifiersep> store . get <identifiersep> volume <identifiersep> id ( ) ) ; \n \t6 if ( volume == null ) { \n <ect>
\t5 <comment> \n \t5 thread . sleep ( <identifier> <identifiersep> <identifier> ) ; \n \t5 zk . create ( prefix + current , b , ids . open <identifiersep> acl <identifiersep> unsafe , create <identifiersep> mode . persistent ) ; } \n \t3 } catch ( throwable t ) { \n <ect>
\t3 return default <identifiersep> value ; } \n \t2 else if ( o . get <identifiersep> class ( ) . equals ( byte [ ] . class ) ) { \n \t3 return ( byte [ ] ) o ; } \n \t2 else { \n <ect>
\t2 { \n \t3 if ( p . get <identifiersep> right ( ) != no <identifiersep> id ) \n \t4 log . info ( string . format ( <string_literal> , label , p . get <identifiersep> left ( ) , p . get <identifiersep> right ( ) ) ) ; \n \t3 else \n <ect>
\t2 if ( ! registration <identifiersep> done ) { \n \t3 if ( security <identifiersep> provider == null && ( register <identifiersep> <identifier> <identifiersep> <identifier> == null || register <identifiersep> <identifier> <identifiersep> <identifier> ) ) { \n \t4 register <identifiersep> security <identifiersep> provider ( <string_literal> ) ; \n \t4 if ( security <identifiersep> provider == null && register <identifiersep> <identifier> <identifiersep> <identifier> == null ) { \n <ect>
\t3 c con = entry . get <identifiersep> key ( ) ; \n \t3 set < block <identifiersep> pos > positions = entry . get <identifiersep> value ( ) ; \n \t3 set < block <identifiersep> pos > actual = new hash <identifiersep> set < > ( con . get <identifiersep> marker <identifiersep> positions ( ) ) ; \n \t3 if ( ! positions . equals ( actual ) ) { \n <ect>
\t2 } catch ( sql <identifiersep> exception ex ) { \n \t3 log . error ( <string_literal> , ex ) ; \n \t3 fail ( <string_literal> + ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( authorize <identifiersep> exception ex ) { \n <ect>
\t1 private void do <identifiersep> test ( invocation . builder request , string media <identifiersep> type ) { \n \t2 request . accept ( media <identifiersep> type ) ; \n \t2 response response = request . get ( ) ; \n \t2 logger . info ( <string_literal> + media <identifiersep> type + <string_literal> ) ; \n <ect>
\t2 configure <identifiersep> signing <identifiersep> key ( signing <identifiersep> key <identifiersep> to <identifiersep> use ) ; } \n \t1 private void configure <identifiersep> encryption <identifiersep> parameters ( final string secret <identifiersep> key <identifiersep> encryption , final string content <identifiersep> encryption <identifiersep> algorithm <identifiersep> identifier ) { \n \t2 string secret <identifiersep> key <identifiersep> to <identifiersep> use = secret <identifiersep> key <identifiersep> encryption ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( secret <identifiersep> key <identifiersep> to <identifiersep> use ) ) { \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t4 } catch ( concurrent <identifiersep> operation <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 try { \n \t2 connection <identifiersep> ambaridb . rollback ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t1 } catch ( sql <identifiersep> exception e1 ) { \n <ect>
\t2 assert . assert <identifiersep> true ( arrays . are <identifiersep> equal ( <identifier> , <identifier> ) ) ; \t1 \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> padded <identifiersep> versions ( ) throws exception { \n <ect>
\t2 for ( ss <identifiersep> table <identifiersep> reader sstable : expected ) \n \t2 { \n \t3 ranges . add ( new range < > ( sstable . first . get <identifiersep> token ( ) , sstable . last . get <identifiersep> token ( ) ) ) ; } \n \t2 pending <identifiersep> <identifier> <identifiersep> compaction . acquisition <identifiersep> callable acquisition <identifiersep> callable = new pending <identifiersep> <identifier> <identifiersep> compaction . acquisition <identifiersep> callable ( cfs , ranges , uuid <identifiersep> gen . get <identifiersep> time <identifiersep> uuid ( ) ) ; \n <ect>
\t2 list < secondary <identifiersep> storage <identifiersep> vm <identifiersep> vo > ss <identifiersep> vms = <identifier> <identifiersep> sec <identifiersep> storage <identifiersep> vm <identifiersep> dao . get <identifiersep> sec <identifiersep> storage <identifiersep> vm <identifiersep> list <identifiersep> in <identifiersep> states ( secondary <identifiersep> storage <identifiersep> vm . role . template <identifiersep> processor , source <identifiersep> server . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , state . running ) ; \n \t2 if ( ss <identifiersep> vms . size ( ) > 0 ) { \n \t3 secondary <identifiersep> storage <identifiersep> vm <identifiersep> vo ss <identifiersep> vm = ss <identifiersep> vms . get ( 0 ) ; \n \t3 if ( ss <identifiersep> vm . get <identifiersep> public <identifiersep> ip <identifiersep> address ( ) == null ) { \n <ect>
\t3 <comment> \n \t3 if ( ! verifier . verify ( segment ) ) { \n \t4 <comment> \n \t4 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n <ect>
\t3 return optional . from <identifiersep> nullable ( data ( ) . get ( name ) ) ; } \n \t2 private synchronized map < string , t > data ( ) { \n \t3 if ( data == null || reload <identifiersep> on <identifiersep> change ) { \n \t4 if ( ! data <identifiersep> path . to <identifiersep> file ( ) . exists ( ) ) { \n <ect>
\t3 execution execution = current <identifiersep> <identifier> . get ( exec <identifiersep> id ) ; \n \t3 if ( execution != null ) { \n \t4 execution . set <identifiersep> accumulators ( user <identifiersep> accumulators ) ; \n \t3 } else { \n <ect>
<comment> \n private void validate <identifiersep> command <identifiersep> params ( map < string , string > command <identifiersep> params ) { \n \t1 logger . info ( <string_literal> ) ; \n \t1 if ( ! command <identifiersep> params . contains <identifiersep> key ( user <identifiersep> hook <identifiersep> params . payload . param ( ) ) ) { \n <ect>
\t4 system . out . println ( <string_literal> + <identifier> <identifiersep> <identifier> . get <identifiersep> length ( ) + <string_literal> + <identifier> <identifiersep> <identifier> <identifiersep> dir + <string_literal> ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; } } \n \t1 public boolean compute ( ) throws io <identifiersep> exception , unsupported <identifiersep> audio <identifiersep> file <identifiersep> exception { \n <ect>
\t5 . filter ( t - > t . get <identifiersep> scope <identifiersep> name ( ) . equals ( s . trim ( ) ) ) \n \t5 . find <identifiersep> first ( ) \n \t5 . or <identifiersep> else ( null ) ; \n \t4 if ( user <identifiersep> policy != null ) { \n <ect>
\t6 result = result <identifiersep> set . get <identifiersep> boolean ( <string_literal> ) ; } } \n \t3 } finally { \n \t4 table <identifiersep> lock . read <identifiersep> lock ( ) . unlock ( ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 m <identifiersep> <identifier> <identifiersep> <identifier> ! ! . sync <identifiersep> state ( ) } \n \t2 <comment> \n \t2 val current <identifiersep> intent = intent \n \t2 val query = if ( constants . intent <identifiersep> start <identifiersep> filter == current <identifiersep> intent . action ) { \n <ect>
\t3 if ( server <identifiersep> config . server <identifiersep> config != null ) { \n \t4 <comment> \n \t4 fmt <identifiersep> log . info ( log , <string_literal> , server <identifiersep> config . server <identifiersep> config ) ; \n \t4 map <identifiersep> dataset <identifiersep> endpoints . for <identifiersep> each ( ( path , endpoints ) - > { \n <ect>
\t4 remove <identifiersep> node ( exch <identifiersep> id . node <identifiersep> id ( ) ) ; \n \t3 <comment> \n \t3 grid <identifiersep> node oldest = <identifier> . oldest ( cctx , top <identifiersep> ver ) ; \n <ect>
\t4 try { \n \t5 get <identifiersep> configuration ( ) . save ( ) ; \n \t4 } catch ( configuration <identifiersep> exception e ) { \n \t5 logger . error ( <string_literal> , e ) ; } } \n <ect>
\t3 string formatted = string . format ( <string_literal> , name , value ) ; \n \t3 byte [ ] data = formatted . get <identifiersep> bytes ( standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ; \n \t3 socket . send ( new datagram <identifiersep> packet ( data , data . length , this . address ) ) ; } \n \t2 catch ( io <identifiersep> exception e ) { \n <ect>
\t2 print <identifiersep> writer pw = null ; \n \t2 while ( ( line = buf . read <identifiersep> line ( ) ) != null ) { \n \t3 if ( line . starts <identifiersep> with ( <string_literal> ) && ! line . starts <identifiersep> with ( <string_literal> ) ) { \n \t4 relation = line . substring ( <number_literal> , line . index <identifiersep> of ( ' = ' , <number_literal> ) ) ; \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name + <string_literal> + repl <identifiersep> dump <identifiersep> id , driver ) ; \n \t1 string incremental <identifiersep> dump <identifiersep> <identifier> = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 string incremental <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t3 binding <identifiersep> configs = provider . get <identifiersep> configs <identifiersep> for <identifiersep> serial <identifiersep> number ( serial ) ; \n \t3 if ( binding <identifiersep> configs != null ) { \n \t4 break ; } } \n \t2 if ( binding <identifiersep> configs == null ) { \n <ect>
\t4 while ( the <identifiersep> channel . buffer == null && ( system . current <identifiersep> time <identifiersep> millis ( ) - current <identifiersep> elapsed <identifiersep> time <identifiersep> millis ) < time <identifiersep> out ) { \n \t5 try { \n \t6 thread . sleep ( <number_literal> ) ; \n \t5 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 fs . mkdirs ( new path ( dest <identifiersep> path ) ) ; \n \t2 fs . create ( sorted <identifiersep> log <identifiersep> state . get <identifiersep> failed <identifiersep> marker <identifiersep> path ( dest <identifiersep> path ) ) . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <identifier> <identifiersep> direction y = factory . create <identifiersep> <identifier> <identifiersep> direction ( ) ; \n \t2 y . set <identifiersep> direction ( <identifier> <identifiersep> coordinate . y ) ; \n \t2 y . set <identifiersep> uid ( get <identifiersep> uid ( ) ) ; \n \t2 string sub <identifiersep> id <identifiersep> y = <string_literal> ; \n <ect>
\t7 executors . new <identifiersep> single <identifiersep> thread <identifiersep> executor ( ) . execute ( new runnable ( ) { \n \t8 @ override \n \t8 public void run ( ) { \n \t9 try { \n <ect>
\t2 logger . debug ( <string_literal> + offset ) ; \n \t2 logger . debug ( <string_literal> + <identifier> ) ; \n \t2 logger . debug ( <string_literal> + <identifier> ) ; \n <ect>
public final class message <identifiersep> publisher <identifiersep> client { \n \t1 private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( message <identifiersep> publisher <identifiersep> client . class ) ; \n \t1 private message <identifiersep> publisher <identifiersep> client ( ) { } \n \t1 public static void main ( string [ ] args ) throws exception { \n <ect>
\t1 try { \n \t1 object family <identifiersep> obj = ref <identifiersep> get <identifiersep> family <identifiersep> map . invoke ( inc ) ; \n \t1 family <identifiersep> map = ( map < byte [ ] , <identifier> <identifiersep> map < byte [ ] , long > > ) family <identifiersep> obj ; \n \t1 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t6 <comment> \n \t6 <identifier> <identifiersep> task <identifier> = ( <identifier> <identifiersep> task ) engine . eval ( tokens [ <number_literal> ] ) ; \n \t6 return new resolved <identifiersep> task ( task <identifiersep> name , <identifier> ) ; \n \t5 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception <identifier> <identifiersep> e ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> post <identifiersep> status <identifiersep> update <identifiersep> request <identifiersep> response ( ) throws exception { \n \t2 date now = new date ( ) ; \n \t2 string tweet = <string_literal> + now . to <identifiersep> string ( ) ; \n <ect>
\t2 if ( n <identifiersep> way <identifiersep> out != null ) writer <identifiersep> to <identifiersep> use . close ( ) ; \n \t2 if ( <identifier> ) { \n \t3 logger . info ( <string_literal> + s <identifiersep> <identifier> <identifiersep> runs ) ; \n \t3 logger . info ( <string_literal> + s <identifiersep> <identifier> <identifiersep> success + <string_literal> + s <identifiersep> <identifier> <identifiersep> success / s <identifiersep> <identifier> <identifiersep> runs + <string_literal> ) ; \n <ect>
\t3 <comment> \n \t3 switch ( <identifier> <identifiersep> options . get <identifiersep> <identifier> <identifiersep> action ( ) ) { \n \t4 case connection <identifiersep> options . <identifier> <identifiersep> action <identifiersep> noop : \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 } else { \n \t4 <comment> \n \t4 <comment> \n \t4 if ( ! old <identifiersep> pending <identifiersep> ack . is <identifiersep> delivered <identifiersep> ack ( ) ) { \n <ect>
with logging { \n private var function : process <identifiersep> function [ any , row ] = <identifier> <identifiersep> <identifier> \n private var c <identifiersep> row <identifiersep> wrapper : c <identifiersep> row <identifiersep> <identifier> <identifiersep> collector = <identifier> <identifiersep> <identifier> \n override def open ( parameters : configuration ) : unit = { \n <ect>
\t3 workflow <identifiersep> action action ) throws exception { \n \t2 hash <identifiersep> map < string , credentials <identifiersep> properties > props = new hash <identifiersep> map < string , credentials <identifiersep> properties > ( ) ; \n \t2 if ( context != null && action != null ) { \n \t3 string creds <identifiersep> in <identifiersep> action = action . get <identifiersep> cred ( ) ; \n <ect>
\t2 for ( skip <identifiersep> iterator iter = meta <identifiersep> index . iterator ( ) ; iter . has <identifiersep> next ( ) ; ) { \n \t3 string <identifier> = ( string ) iter . next <identifiersep> key ( ) ; \n \t3 integer page = ( integer ) iter . next ( ) ; \n \t3 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 transaction . rollback ( ) ; \n \t1 } catch ( runtime <identifiersep> exception ex ) { \n <ect>
\t2 intent <identifiersep> filter . add <identifiersep> action ( constants . broadcast <identifiersep> update <identifiersep> <identifier> ) \n \t2 intent <identifiersep> filter . add <identifiersep> action ( constants . broadcast <identifiersep> file <identifiersep> sync ) \n \t2 m <identifiersep> broadcast <identifiersep> receiver = object : broadcast <identifiersep> receiver ( ) { \n \t3 override fun on <identifiersep> receive ( context : context , intent : intent ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 producers <identifiersep> finished . await ( <number_literal> , time <identifiersep> unit . minutes ) ; \n \t2 log . info ( <string_literal> + total <identifiersep> messages <identifiersep> to <identifiersep> send . get ( ) + <string_literal> + total <identifiersep> messages <identifiersep> sent . get ( ) ) ; \n \t2 consumers <identifiersep> finished . await ( <number_literal> , time <identifiersep> unit . minutes ) ; \n <ect>
\t3 random <identifiersep> access <identifiersep> file rf = new random <identifiersep> access <identifiersep> file ( f , <string_literal> ) ; \n \t3 <identifier> = <identifier> <identifiersep> zip . open <identifiersep> in <identifiersep> archive ( null , new random <identifiersep> access <identifiersep> file <identifiersep> in <identifiersep> stream ( rf ) ) ; \n \t3 i <identifiersep> simple <identifiersep> in <identifiersep> archive simple <identifiersep> in <identifiersep> archive = <identifier> . get <identifiersep> simple <identifiersep> interface ( ) ; \n \t3 for ( i <identifiersep> simple <identifiersep> in <identifiersep> archive <identifiersep> item item : simple <identifiersep> in <identifiersep> archive . get <identifiersep> archive <identifiersep> items ( ) ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( broker ) ; \n \t2 active <identifiersep> mq <identifiersep> ssl <identifiersep> connection <identifiersep> factory cf = get <identifiersep> factory ( <string_literal> + ssl <identifiersep> uri + <string_literal> ) ; \n \t2 cf . set <identifiersep> key <identifiersep> and <identifiersep> trust <identifiersep> managers ( get <identifiersep> key <identifiersep> manager ( ) , get <identifiersep> trust <identifiersep> manager ( ) , new secure <identifiersep> random ( ) ) ; \n \t2 connection = ( active <identifiersep> mq <identifiersep> connection ) cf . create <identifiersep> connection ( ) ; \n <ect>
\t5 log . trace ( <string_literal> , \n \t6 log <identifiersep> description , restore <identifiersep> state , alternative <identifiersep> idx , restore <identifiersep> options . size ( ) ) ; \n \t4 } else { \n <ect>
\t3 log . info ( <string_literal> + pid ) ; \n \t3 broker . stop ( ) ; \n \t3 broker . wait <identifiersep> until <identifiersep> stopped ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t8 listeners . remove ( listener ) ; \n \t7 } catch ( throwable t ) { <comment> \n \t8 logger . warn ( <string_literal> + failed + <string_literal> + t . get <identifiersep> message ( ) , t ) ; } } } \n \t4 } catch ( throwable t ) { <comment> \n <ect>
\t3 health <identifiersep> check <identifiersep> policy result = <identifier> <identifiersep> lb <identifiersep> service . create <identifiersep> lb <identifiersep> health <identifiersep> check <identifiersep> policy ( this ) ; \n \t3 this . set <identifiersep> entity <identifiersep> id ( result . get <identifiersep> id ( ) ) ; \n \t3 this . set <identifiersep> entity <identifiersep> uuid ( result . get <identifiersep> uuid ( ) ) ; \n \t2 } catch ( invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception e ) { \n <ect>
\t1 database <identifier> = new database ( <identifier> , <string_literal> , <string_literal> , null ) ; \n \t1 object <identifiersep> store . create <identifiersep> database ( <identifier> ) ; \n \t1 object <identifiersep> store . create <identifiersep> database ( <identifier> ) ; \n \t1 list < string > databases = object <identifiersep> store . get <identifiersep> all <identifiersep> databases ( ) ; \n <ect>
\t4 if ( vm <identifiersep> instance . get <identifiersep> state ( ) == state . stopped ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> instance + <string_literal> ) ; \n \t5 return true ; } \n \t4 if ( reboot <identifiersep> virtual <identifiersep> machine ( user <identifiersep> id , vm <identifiersep> id ) == null ) { \n <ect>
\t2 hive <identifiersep> conf . get <identifiersep> var ( conf , conf <identifiersep> vars . llap <identifiersep> task <identifiersep> scheduler <identifiersep> am <identifiersep> registry <identifiersep> principal ) , \n \t2 hive <identifiersep> conf . get <identifiersep> var ( conf , conf <identifiersep> vars . llap <identifiersep> task <identifiersep> scheduler <identifiersep> am <identifiersep> registry <identifiersep> keytab <identifiersep> file ) , \n \t2 null ) ; <comment> \n \t1 this . registry <identifiersep> name = instance <identifiersep> name ; \n <ect>
\t3 { \n \t4 if ( loader . get <identifiersep> failed <identifiersep> hosts ( ) . size ( ) > max <identifiersep> failures ) \n \t5 throw new io <identifiersep> exception ( <string_literal> + loader . get <identifiersep> failed <identifiersep> hosts ( ) ) ; \n \t4 else \n <ect>
\t3 m <identifiersep> bean <identifiersep> server <identifiersep> invocation <identifiersep> handler . new <identifiersep> proxy <identifiersep> instance ( \n \t5 mbean <identifiersep> server , subscription <identifiersep> name , subscription <identifiersep> view <identifiersep> m <identifiersep> bean . class , true ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( subscriber <identifiersep> view ) ; \n \t2 object <identifiersep> name connection <identifiersep> name = subscriber <identifiersep> view . get <identifiersep> connection ( ) ; \n <ect>
\t1 @ path ( <string_literal> ) \n \t1 public string echo <identifiersep> headers ( ) { \n \t2 sleep ( ) ; \n \t2 logger . info ( <string_literal> + ui . get <identifiersep> request <identifiersep> uri ( ) . to <identifiersep> string ( ) ) ; \n <ect>
\t1 @ override \n \t1 public void prefix ( string prefix , string iri ) { \n \t2 try { <identifier> . add ( prefix , iri ) ; } \n \t2 catch ( <identifier> <identifiersep> exception ex ) { \n <ect>
\t8 attribute . id , \n \t8 chat <identifiersep> html <identifiersep> utils . message <identifiersep> text <identifiersep> id + <identifier> <identifiersep> uid ) ; \n \t2 if ( <identifier> <identifiersep> msg <identifiersep> element == null ) \n \t2 { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> state = cluster <identifiersep> state . builder ( cluster <identifiersep> state ) \n \t4 . nodes ( discovery <identifiersep> nodes . builder ( cluster <identifiersep> state . nodes ( ) ) . add ( new <identifiersep> node ( <string_literal> ) ) ) . build ( ) ; \n \t2 cluster <identifiersep> state = strategy . reroute ( cluster <identifiersep> state , <string_literal> ) ; \n <ect>
\t3 load <identifiersep> multi <identifiersep> word <identifiersep> dict ( ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , e ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 plugins = collections . singleton ( transport <identifiersep> plugin ) ; \n \t2 } else { \n \t3 plugins = collections . empty <identifiersep> list ( ) ; } \n \t2 transport <identifiersep> client client = new pre <identifiersep> built <identifiersep> transport <identifiersep> client ( builder . build ( ) , plugins ) . add <identifiersep> transport <identifiersep> addresses ( transport <identifiersep> addresses ) ; \n <ect>
\t7 log . info ( <string_literal> , <identifier> ) ; } \n \t6 latch . count <identifiersep> down ( ) ; } \n \t4 } ) ; \n \t3 } else { \n <ect>
\t2 } catch ( m <identifiersep> bean <identifiersep> registration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + mbean . get <identifiersep> name ( ) , e ) ; \n \t2 } catch ( not <identifiersep> <identifier> <identifiersep> m <identifiersep> bean <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + mbean . get <identifiersep> name ( ) , e ) ; } \n <ect>
\t4 img <identifiersep> stream . close ( ) ; \n \t4 if ( img <identifiersep> reader . has <identifiersep> next ( ) ) { \n \t5 mime <identifiersep> type = <string_literal> + img <identifiersep> reader . next ( ) . get <identifiersep> format <identifiersep> name ( ) . to <identifiersep> lower <identifiersep> case ( ) ; \n \t4 } else { \n <ect>
\t1 argument <identifiersep> util . not <identifiersep> null ( <identifier> , <string_literal> ) ; \n \t1 final <identifier> stream = <identifier> . stream ( stream <identifiersep> id ) ; \n \t1 if ( stream == null ) \n \t1 { \n <ect>
\t2 final person <identifiersep> directory <identifiersep> attribute <identifiersep> repository <identifiersep> plan plan = new default <identifiersep> person <identifiersep> directory <identifiersep> attribute <identifiersep> repository <identifiersep> plan ( ) ; \n \t2 configurers . for <identifiersep> each ( c - > c . configure <identifiersep> attribute <identifiersep> repository <identifiersep> plan ( plan ) ) ; \n \t2 list . add <identifiersep> all ( plan . get <identifiersep> attribute <identifiersep> repositories ( ) ) ; \n \t2 order <identifiersep> comparator . sort ( list ) ; \n <ect>
\t6 timeline <identifiersep> client . init ( conf ) ; \n \t6 timeline <identifiersep> client . start ( ) ; \n \t5 } else { \n \t6 timeline <identifiersep> client = null ; \n <ect>
\t1 private static boolean is <identifiersep> mac <identifiersep> jna <identifiersep> affinity <identifiersep> usable ( ) { \n \t2 if ( is <identifiersep> jna <identifiersep> available ( ) ) { \n \t3 return true ; \n \t2 } else { \n <ect>
\t4 log . warn ( <string_literal> , e ) ; \n \t3 } catch ( instantiation <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; \n \t3 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t3 } else { \n \t4 return true ; } \n \t2 } else { \n <ect>
\t4 log . warn ( <string_literal> , e2 ) ; } \n \t3 if ( service != null ) { \n \t4 service . <identifier> <identifiersep> all <identifiersep> tasks ( ) ; } } \n \t2 catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t10 kafka <identifiersep> sink <identifiersep> constants . default <identifiersep> allow <identifiersep> topic <identifiersep> override <identifiersep> header ) ; \n \t1 topic <identifiersep> header = context . get <identifiersep> string ( kafka <identifiersep> sink <identifiersep> constants . topic <identifiersep> override <identifiersep> header , \n \t9 kafka <identifiersep> sink <identifiersep> constants . default <identifiersep> topic <identifiersep> override <identifiersep> header ) ; \n <ect>
\t3 string <identifier> <identifiersep> display <identifiersep> name = xcontext . get <identifiersep> wiki ( ) . get <identifiersep> plain <identifiersep> user <identifiersep> name ( attachment . get <identifiersep> <identifier> <identifiersep> reference ( ) , xcontext ) ; \n \t3 solr <identifiersep> document . set <identifiersep> field ( field <identifiersep> utils . attachment <identifiersep> <identifier> <identifiersep> display , <identifier> <identifiersep> display <identifiersep> name ) ; \n \t3 solr <identifiersep> document . set <identifiersep> field ( field <identifiersep> utils . attachment <identifiersep> <identifier> <identifiersep> display <identifiersep> sort , <identifier> <identifiersep> display <identifiersep> name ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 } else { \n \t5 expression . push ( expression . false ) ; \n \t5 return ; } \n \t3 } else { \n <ect>
\t2 return <identifier> ; } \n \t1 @ override \n \t1 public iterator < record > iterator ( ) \n \t1 { \n <ect>
\t3 try { \n \t4 <identifier> <identifiersep> connection . start ( ) ; \n \t3 } catch ( final nio <identifiersep> connection <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + e ) ; \n <ect>
\t5 ) ; \n \t5 continue ; } \n \t4 apps . add ( app ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
private static logger log = process <identifiersep> engine <identifiersep> logger . test <identifiersep> logger . get <identifiersep> logger ( ) ; \n public list < string > events = new array <identifiersep> list < string > ( ) ; \n public void notify ( delegate <identifiersep> execution execution ) throws exception { \n \t1 <identifier> <identifiersep> execution <identifiersep> impl execution <identifiersep> impl = ( <identifier> <identifiersep> execution <identifiersep> impl ) execution ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t4 if ( sig <identifiersep> filter != null ) { \n \t5 sig <identifiersep> filter . set <identifiersep> require <identifiersep> signed <identifiersep> root ( cas <identifiersep> properties . get <identifiersep> saml <identifiersep> metadata <identifiersep> ui ( ) . is <identifiersep> require <identifiersep> signed <identifiersep> root ( ) ) ; \n \t5 filters . add ( sig <identifiersep> filter ) ; \n \t4 } else { \n <ect>
\t2 <identifier> ( 0 until <identifier> ) : = vector <identifiersep> a \n \t2 <identifier> ( <identifier> until n ) : = vector <identifiersep> b \n \t2 key <identifiersep> a - > <identifier> } \n \t1 } else { \n <ect>
\t10 sending . set <identifiersep> subscription <identifiersep> name ( sub <identifiersep> name ) ; \n \t10 sending . set <identifiersep> connection <identifiersep> id ( this . local <identifiersep> connection <identifiersep> info . get <identifiersep> connection <identifiersep> id ( ) ) ; \n \t10 local <identifiersep> broker . <identifier> ( sending ) ; } \n \t8 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 string path = storage <identifiersep> directories [ i ] . get <identifiersep> absolute <identifiersep> path ( ) ; \n \t3 if ( storage <identifiersep> directories [ i ] . mkdirs ( ) ) { \n \t4 log . info ( <string_literal> + path ) ; \n \t3 } else { \n <ect>
\t1 return from . get <identifiersep> name ( ) ; } \n private void create <identifiersep> placement <identifiersep> group <identifiersep> in <identifiersep> region ( string region , string name ) { \n \t1 check <identifiersep> not <identifiersep> null ( region , <string_literal> ) ; \n \t1 check <identifiersep> not <identifiersep> null ( name , <string_literal> ) ; \n <ect>
\t9 expired = entity . is <identifiersep> certificate <identifiersep> expired ( ) ; \n \t9 entities . persist ( entity ) ; \n \t9 db . commit ( ) ; } } \n \t6 } catch ( final exception ex ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 json <identifiersep> object result = success ( broker , request , response , obtain <identifiersep> lock , <string_literal> , project , <string_literal> , user , <string_literal> , integer . to <identifiersep> string ( all ) , <string_literal> , <string_literal> ) ; \n \t3 assert <identifiersep> json ( result , <string_literal> , user ) ; \n \t3 string lock = result . get <identifiersep> string ( <string_literal> ) ; \n <ect>
\t8 <comment> \n \t8 state = states . <identifier> ; } } } } \n \t3 } catch ( interrupted <identifiersep> io <identifiersep> exception e ) { \n \t4 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n <ect>
\t5 exception <identifiersep> to <identifiersep> log <identifiersep> and <identifiersep> send = new message <identifiersep> handling <identifiersep> exception ( this . request <identifiersep> message , e ) ; \n \t5 if ( reply <identifiersep> message <identifiersep> builder != null ) { \n \t6 exception <identifiersep> to <identifiersep> log <identifiersep> and <identifiersep> send = \n \t8 new messaging <identifiersep> exception ( reply <identifiersep> message <identifiersep> builder . build ( ) , exception <identifiersep> to <identifiersep> log <identifiersep> and <identifiersep> send ) ; } } \n <ect>
\t9 <identifier> <identifiersep> time <identifiersep> in <identifiersep> millis = <identifier> <identifiersep> time <identifiersep> in <identifiersep> millis - sleep <identifiersep> time <identifiersep> in <identifiersep> millis ; \n \t8 } else { \n \t9 client . close ( ) ; \n \t9 <identifier> = null ; \n <ect>
\t3 if ( optimizer . hint <identifiersep> local <identifiersep> strategy <identifiersep> sort . equals ( local <identifiersep> strategy ) ) { \n \t4 use <identifiersep> <identifier> = false ; } \n \t3 else if ( optimizer . hint <identifiersep> local <identifiersep> strategy <identifiersep> <identifier> <identifiersep> sort . equals ( local <identifiersep> strategy ) ) { \n \t4 if ( ! is <identifiersep> <identifier> ( ) ) { \n <ect>
\t1 writer . write ( <identifier> <identifiersep> script . compile ( content ) ) ; \n \t1 } catch ( final exception e ) { \n \t1 on <identifiersep> exception ( e ) ; \n \t1 final string resource <identifiersep> uri = resource == null ? string <identifiersep> utils . empty : <string_literal> + resource . get <identifiersep> uri ( ) + <string_literal> ; \n <ect>
\t3 } <comment> \n \t2 } catch ( concurrent <identifiersep> modification <identifiersep> exception e ) { \n \t3 log . debug ( <string_literal> , e ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 { \n \t4 os <identifiersep> person = convert <identifiersep> to <identifiersep> os <identifiersep> person ( people . get <identifiersep> first ( ) ) ; } } \n \t2 catch ( number <identifiersep> format <identifiersep> exception e ) \n \t2 { \n <ect>
\t4 false , \n \t4 locale ) . get <identifiersep> value ( ) ; \n \t3 return new cms <identifiersep> category ( category , title , description ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 return <identifier> <identifiersep> host ; } \n \t1 try { \n \t1 string address = request . get <identifiersep> remote <identifiersep> addr ( ) ; <comment> \n \t1 if ( address == null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void turn <identifiersep> switch ( on <identifiersep> off <identifiersep> value state ) { \n \t2 if ( state == on <identifiersep> off <identifiersep> value . <identifier> ) { \n <ect>
<number_literal> . add <identifiersep> service ( new ping <identifiersep> pong <identifiersep> impl ( ) ) \n <number_literal> . intercept ( new jwt <identifiersep> server <identifiersep> interceptor ( jwt <identifiersep> algorithm . <identifier> , grpc <identifiersep> jwt <identifiersep> correct <identifiersep> secret , null , null ) ) \n <number_literal> . build ( ) \n <number_literal> . start ( ) ; \n <ect>
\t5 require <identifiersep> password <identifiersep> change ? <string_literal> : <string_literal> ) ; \n \t3 return user ; } \n \t2 catch ( authorization <identifiersep> violation <identifiersep> exception | io <identifiersep> exception | invalid <identifiersep> arguments <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 template . send <identifiersep> body ( start <identifiersep> uri , <identifier> ) ; \n \t2 result <identifiersep> endpoint . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > list = result <identifiersep> endpoint . get <identifiersep> received <identifiersep> exchanges ( ) ; \n \t2 for ( exchange exchange : list ) { \n <ect>
\t1 thread <identifiersep> two . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 thread <identifiersep> one . proceed <identifiersep> and <identifiersep> wait <identifiersep> <identifier> <identifiersep> done ( ) ; \n \t1 assert <identifiersep> null ( thread <identifiersep> one . exception ) ; \n <ect>
\t3 string <identifiersep> builder sb = new string <identifiersep> builder ( ) ; \n \t3 for ( await <identifiersep> thread entry : threads ) { \n \t4 sb . append ( dump <identifiersep> blocked <identifiersep> thread ( entry ) ) ; } \n \t3 if ( is <identifiersep> interrupt <identifiersep> threads <identifiersep> while <identifiersep> stopping ( ) ) { \n <ect>
\t3 <comment> \n \t3 throw e ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t5 throw new cloud <identifiersep> exception ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; } } \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t3 if ( is <identifiersep> closed ( ) ) \n \t4 return ; \n \t3 boolean locked = host . notifications <identifiersep> lock . try <identifiersep> lock ( <identifier> <identifiersep> lock <identifiersep> timeout <identifiersep> seconds , time <identifiersep> unit . seconds ) ; \n \t3 if ( ! locked ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + network <identifiersep> id + <string_literal> ) ; \n \t3 success = false ; } \n \t2 <comment> \n \t2 if ( ! <identifier> <identifiersep> lb <identifiersep> mgr . apply <identifiersep> load <identifiersep> balancers <identifiersep> for <identifiersep> network ( network <identifiersep> id , scheme . internal ) ) { \n <ect>
\t2 try { \n \t3 if ( s != null ) \n \t4 s . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 } else { \n \t4 string changed <identifiersep> name = name ; \n \t4 if ( receiver instanceof generated <identifiersep> closure && changed <identifiersep> name . equals ( <string_literal> ) ) { changed <identifiersep> name = <string_literal> ; } \n \t4 if ( ! <identifier> . has <identifiersep> custom <identifiersep> invoke <identifiersep> method ( ) ) method = <identifier> . get <identifiersep> method <identifiersep> with <identifiersep> caching ( selection <identifiersep> base , changed <identifiersep> name , new <identifiersep> args , false ) ; } \n <ect>
\t2 try { \n \t3 how <identifiersep> much = buf . read <identifiersep> u <identifiersep> <identifier> ( ) ; \n \t2 } catch ( buffer . buffer <identifiersep> exception be ) { \n \t3 throw new connection <identifiersep> exception ( be ) ; } \n <ect>
\t1 return status . ok ; } \n \t1 @ override \n \t1 public status append <identifiersep> batch ( list < avro <identifiersep> flume <identifiersep> event > events ) \n \t2 throws avro <identifiersep> remote <identifiersep> exception { \n <ect>
\t1 map < string , string > headers = new hash <identifiersep> map < string , string > ( ) ; \n \t1 headers . put ( <string_literal> , <string_literal> ) ; \n \t1 ambari <identifiersep> api . request <identifiersep> cluster <identifiersep> api ( <string_literal> , <string_literal> , data . to <identifiersep> json <identifiersep> string ( ) , headers ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
<comment> \n \t1 public static void session <identifiersep> resource <identifiersep> factory ( atmosphere <identifiersep> resource <identifiersep> session <identifiersep> factory a ) { \n \t2 if ( session <identifiersep> factory != null ) { \n <ect>
\t2 if ( attr != null ) { \n \t3 if ( is <identifiersep> set <identifiersep> method ( method ) ) { \n \t4 if ( attr . setter != null ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 message . set <identifiersep> message <identifiersep> payload ( payload ) ; \n \t2 if ( request <identifiersep> nonce <identifiersep> timer != null ) { \n <ect>
\t8 try ( source <identifiersep> input <identifiersep> stream mesh <identifiersep> source \n <number_literal> = new stream <identifiersep> source ( mesh <identifiersep> link , host , <string_literal> , 0 ) . get <identifiersep> input <identifiersep> stream ( ) ) { \n \t9 byte [ ] response = mesh <identifiersep> source . poll ( poll <identifiersep> time , time <identifiersep> unit . milliseconds ) ; \n \t9 if ( response == null ) { \n <ect>
\t2 if ( parent <identifiersep> file . delete ( ) && parent <identifiersep> file . mkdir ( ) ) { \n \t2 parent <identifiersep> file . delete <identifiersep> on <identifiersep> exit ( ) ; \n \t2 break ; } \n <ect>
\t4 for ( timed <identifiersep> event evt : <identifier> <identifiersep> event <identifiersep> times . key <identifiersep> set ( ) ) { \n \t5 long when = <identifier> <identifiersep> event <identifiersep> times . get ( evt ) ; \n \t5 timed <identifiersep> event cur = <identifier> <identifiersep> events . get ( when ) ; \n \t5 if ( cur != evt ) { \n <ect>
\t2 public void provider <identifiersep> status <identifiersep> changed ( provider <identifiersep> presence <identifiersep> status <identifiersep> change <identifiersep> event evt ) \n \t2 { \n \t3 synchronized ( this ) \n \t3 { \n <ect>
\t4 <comment> \n \t3 return null ; } \n \t2 } ; } \n \t1 run <identifiersep> <identifier> ( <identifier> ) ; \n <ect>
\t2 draft <identifiersep> session draft <identifiersep> session = new draft <identifiersep> session ( draft , user <identifiersep> id , player <identifiersep> id ) ; \n \t2 draft <identifiersep> sessions . put ( player <identifiersep> id , draft <identifiersep> session ) ; \n \t2 user <identifiersep> manager . instance . get <identifiersep> user ( user <identifiersep> id ) . if <identifiersep> present ( user - > { \n \t5 user . add <identifiersep> draft ( player <identifiersep> id , draft <identifiersep> session ) ; \n <ect>
\t1 log . info ( <string_literal> , package <identifiersep> name , simple <identifiersep> class <identifiersep> name , source <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t1 final string compiled <identifiersep> class <identifiersep> path = compile <identifiersep> class ( directory . get <identifiersep> absolute <identifiersep> path ( ) , package <identifiersep> name , simple <identifiersep> class <identifiersep> name , \n \t3 directory . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t1 if ( compiled <identifiersep> class <identifiersep> path == null ) { \n <ect>
\t5 continue ; } } \n \t3 if ( ! ns <identifiersep> service <identifiersep> up ) { \n \t4 return new answer ( cmd , new execution <identifiersep> exception ( <string_literal> + <identifier> <identifiersep> name + <string_literal> + <identifier> <identifiersep> ip ) ) ; } \n <ect>
\t4 jar <identifiersep> class <identifiersep> loader jar <identifiersep> class <identifiersep> loader = new jar <identifiersep> class <identifiersep> loader ( plugin <identifiersep> file ) ; \n \t4 class < ? > plugin <identifiersep> main <identifiersep> class = jar <identifiersep> class <identifiersep> loader . load <identifiersep> class ( plugin <identifiersep> main <identifiersep> class <identifiersep> name ) ; \n \t4 object object = plugin <identifiersep> main <identifiersep> class . new <identifiersep> instance ( ) ; \n \t4 if ( ! ( object instanceof <identifier> <identifiersep> plugin ) ) { \n <ect>
\t1 if ( ! configs . is <identifiersep> view <identifiersep> directory <identifiersep> watcher <identifiersep> service <identifiersep> disabled ( ) ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 view <identifiersep> directory <identifiersep> watcher . start ( ) ; } \n \t1 manager . start ( ) ; \n <ect>
\t2 long end = <identifier> <identifiersep> context . clock ( ) . now ( ) ; \n \t2 long diff = end - start ; \n \t2 if ( diff > <number_literal> ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
public class <identifier> <identifiersep> service <identifiersep> impl implements <identifier> <identifiersep> service { \n \t1 private static logger log = logger . get <identifiersep> logger ( <identifier> <identifiersep> service <identifiersep> impl . class ) ; \n \t1 @ override \n \t1 public boolean is <identifiersep> transaction <identifiersep> active ( ) { \n <ect>
@ get \n @ path ( <string_literal> ) \n @ produces ( media <identifiersep> type . application <identifiersep> json ) \n public response get <identifiersep> script ( @ path <identifiersep> param ( <string_literal> ) string script <identifiersep> id ) { \n <ect>
\t1 if ( <identifier> . equals ( <identifier> <identifiersep> type ) ) { \n \t1 int <identifier> <identifiersep> cp <identifiersep> props <identifiersep> nr = data <identifiersep> source <identifiersep> provider . get <identifiersep> prefixed <identifiersep> properties ( configuration , <identifier> ) . size ( ) ; \n \t1 log . debug ( <string_literal> + <identifier> <identifiersep> cp <identifiersep> props <identifiersep> nr + <string_literal> ) ; \n \t1 return <identifier> <identifiersep> cp <identifiersep> props <identifiersep> nr > 0 ; } \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 break ; } \n \t3 } else { \n <ect>
\t4 parse <identifiersep> data ( total - 1 ) ; } } } \n \t1 private class connection <identifiersep> supervisor { \n \t2 private timer timer ; \n \t2 public connection <identifiersep> supervisor ( int milliseconds ) { \n <ect>
\t3 string json = fetch <identifiersep> artifact <identifiersep> version ( group <identifiersep> id , artifact <identifiersep> id , current <identifiersep> version ) ; \n \t3 string latest <identifiersep> version = extract <identifiersep> version ( json ) ; \n \t3 boolean is <identifiersep> latest = extract <identifiersep> is <identifiersep> latest ( json ) ; \n \t3 if ( is <identifiersep> latest ) { \n <ect>
\t2 final recovery <identifiersep> listener channel <identifiersep> recovery <identifiersep> listener = new recovery <identifiersep> listener ( ) { \n \t3 @ override \n \t3 public void handle <identifiersep> recovery <identifiersep> started ( recoverable recoverable ) { \n <ect>
\t4 <comment> \n \t2 <comment> \n \t2 if ( email <identifiersep> text . length ( ) > 0 ) { \n \t3 if ( test ) { \n <ect>
\t1 try { \n \t2 dispatcher . perform <identifiersep> dispatch ( notification , context ) ; \n \t1 } catch ( exception e ) { \n \t2 <comment> \n <ect>
\t2 <string_literal> ) \n \t1 else : \n \t1 <identifier> <identifiersep> cmd = <string_literal> \n \t1 # check hive <identifiersep> server \n <ect>
<comment> \n \t1 public static final void validate <identifiersep> key ( string key ) throws illegal <identifiersep> argument <identifiersep> exception { \n \t2 if ( string <identifiersep> utils . is <identifiersep> empty ( key ) || <string_literal> . equals ( key ) || <string_literal> . equals ( key ) || ! key <identifiersep> pattern . matcher ( key ) . matches ( ) ) { \n <ect>
\t4 if ( split <identifiersep> domain [ <number_literal> ] . equals ( <string_literal> ) ) { \n \t5 z <identifiersep> wave <identifiersep> wake <identifiersep> up <identifiersep> command <identifiersep> class wakeup <identifiersep> command <identifiersep> class = ( z <identifiersep> wave <identifiersep> wake <identifiersep> up <identifiersep> command <identifiersep> class ) node \n \t7 . get <identifiersep> command <identifiersep> class ( command <identifiersep> class . wake <identifiersep> up ) ; \n \t5 if ( wakeup <identifiersep> command <identifiersep> class == null ) { \n <ect>
<comment> \n \t1 public static boolean is <identifiersep> authorized <identifiersep> grant <identifiersep> type <identifiersep> for <identifiersep> service ( final <identifier> <identifiersep> context context , final o <identifiersep> auth <identifiersep> registered <identifiersep> service registered <identifiersep> service ) { \n \t2 final string grant <identifiersep> type = context . get <identifiersep> request <identifiersep> parameter ( o <identifiersep> auth20constants . grant <identifiersep> type ) ; \n \t2 if ( registered <identifiersep> service . get <identifiersep> supported <identifiersep> grant <identifiersep> types ( ) != null && ! registered <identifiersep> service . get <identifiersep> supported <identifiersep> grant <identifiersep> types ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t2 if ( ! schema <identifiersep> file <identifiersep> path . exists ( ) && schema != null ) { \n \t3 try { \n \t4 new object <identifiersep> mapper ( ) . write <identifiersep> value ( schema <identifiersep> file <identifiersep> path . create ( ) , schema ) ; \n \t3 } catch ( json <identifiersep> generation <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private void persist ( object object , repository <identifiersep> invoker <identifiersep> factory invoker <identifiersep> factory ) { \n \t2 repository <identifiersep> invoker invoker = invoker <identifiersep> factory . get <identifiersep> invoker <identifiersep> for ( object . get <identifiersep> class ( ) ) ; \n <ect>
\t2 byte <identifiersep> array <identifiersep> data <identifiersep> output <identifiersep> stream out = new byte <identifiersep> array <identifiersep> data <identifiersep> output <identifiersep> stream ( request . serialized <identifiersep> size ( ) ) ; \n \t2 try { \n \t3 request . write <identifiersep> to ( out ) ; } \n \t2 catch ( exception ex ) { \n <ect>
\t3 if ( edit <identifiersep> page instanceof edit <identifiersep> relationship <identifiersep> page <identifiersep> interface ) { \n \t4 ( ( edit <identifiersep> relationship <identifiersep> page <identifiersep> interface ) edit <identifiersep> page ) . set <identifiersep> master <identifiersep> object <identifiersep> and <identifiersep> relationship <identifiersep> key ( object ( ) , property <identifiersep> key ( ) ) ; \n \t4 ( ( edit <identifiersep> relationship <identifiersep> page <identifiersep> interface ) edit <identifiersep> page ) . set <identifiersep> next <identifiersep> page ( context ( ) . page ( ) ) ; \n \t3 } else { \n <ect>
<number_literal> int num <identifiersep> keys ) throws exception { \n \t2 list < byte <identifiersep> array > keys = lists . new <identifiersep> array <identifiersep> list ( ) ; \n \t2 list < byte [ ] > values = lists . new <identifiersep> array <identifiersep> list ( ) ; \n \t2 int put <identifiersep> count = num <identifiersep> keys ; \n <ect>
\t3 <comment> \n \t3 return path ; \n \t2 case <identifier> : \n \t2 case <identifier> : \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t5 if ( response <identifiersep> block . length >= <number_literal> && response <identifiersep> block [ <number_literal> ] == ( byte ) <identifier> && response <identifiersep> block [ <number_literal> ] == ( byte ) <identifier> \n \t7 && response <identifiersep> block [ response <identifiersep> block . length - <number_literal> ] == ( byte ) <identifier> \n \t7 && response <identifiersep> block [ response <identifiersep> block . length - 1 ] == ( byte ) <identifier> \n \t7 && ( response <identifiersep> block [ <number_literal> ] & 0xff ) == command . get <identifiersep> reply <identifiersep> cmd ( ) ) { \n <ect>
\t2 schema <identifiersep> response = schema <identifiersep> request . process ( solr <identifiersep> client ) ; \n \t2 log . debug ( <string_literal> + solr <identifiersep> client . get <identifiersep> default <identifiersep> collection ( ) + <string_literal> + <identifier> <identifiersep> responses + \n \t3 <string_literal> + schema <identifiersep> response ) ; \n \t1 } catch ( solr <identifiersep> exception | solr <identifiersep> server <identifiersep> exception | io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private void <identifier> ( ) throws configuration <identifiersep> exception { \n \t2 try { \n <ect>
\t5 <comment> \n \t5 m <identifiersep> console <identifiersep> listener . discard <identifiersep> messages ( console <identifiersep> listener . start ) ; \n \t5 if ( ! m <identifiersep> console <identifiersep> listener . received ( console <identifiersep> listener . any ) ) { \n \t6 <comment> \n <ect>
\t3 link l = new link ( ls [ i ] , labels [ i ] , <identifier> [ i ] ) ; \n \t3 link <identifier> = new link ( ) ; \n \t3 link <identifier> = new link ( ) ; \n \t3 xml <identifiersep> encodable <identifiersep> tester . encode <identifiersep> decode <identifiersep> test ( <string_literal> + i , l , <identifier> , <identifier> ) ; } \n <ect>
\t1 private void log <identifiersep> request ( http <identifiersep> servlet <identifiersep> request request ) { \n \t3 logger . info ( <string_literal> + request . get <identifiersep> method ( ) ) ; \n \t3 logger . info ( <string_literal> + request . get <identifiersep> context <identifiersep> path ( ) ) ; \n <ect>
\t3 cube . set <identifiersep> <identifier> ( update . get <identifiersep> <identifier> ( ) ) ; } \n \t2 try { \n \t3 cube = <identifier> . save ( cube ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception ise ) { \n <ect>
\t1 properties properties = null ; \n \t1 if ( ! string <identifiersep> utils . is <identifiersep> blank ( conf . get ( h <identifiersep> cat <identifiersep> constants . hcat <identifiersep> key <identifiersep> hive <identifiersep> conf ) ) ) { \n \t2 properties = ( properties ) h <identifiersep> cat <identifiersep> util . deserialize ( \n \t3 conf . get ( h <identifiersep> cat <identifiersep> constants . hcat <identifiersep> key <identifiersep> hive <identifiersep> conf ) ) ; \n <ect>
\t1 public void <identifier> ( <identifier> <identifiersep> data hts <identifiersep> data , boolean use <identifiersep> <identifier> ) { \n \t2 if ( hts <identifiersep> data . get <identifiersep> use <identifiersep> context <identifiersep> dependent <identifiersep> <identifier> ( ) ) \n \t3 logger . info ( <string_literal> + <identifier> <identifiersep> length ) ; \n \t2 else \n <ect>
\t3 boolean success = temp <identifiersep> dir . mkdir ( ) ; \n \t3 if ( success ) { \n \t4 log . info ( <string_literal> + temp <identifiersep> dir <identifiersep> string ) ; \n \t3 } else { \n <ect>
\t3 } catch ( throwable e ) { \n \t4 logger . warn ( string . format ( <string_literal> , connection ) , e ) ; \n \t4 return null ; } } \n \t2 private void handle <identifiersep> command ( command command , daemon <identifiersep> connection daemon <identifiersep> connection ) { \n <ect>
\t1 class <identifier> <identifiersep> event <identifiersep> listener implements event <identifiersep> listener { \n \t2 @ override \n \t2 public void on <identifiersep> event ( changed <identifiersep> event event ) throws exception { \n \t3 if ( ! ( event instanceof row <identifiersep> changed <identifiersep> event ) ) { \n <ect>
\t4 vo . set <identifiersep> value ( new <identifiersep> val . double <identifiersep> value ( ) ) ; \n \t3 } else if ( it . to <identifiersep> upper <identifiersep> case ( ) . contains ( <string_literal> ) || it . to <identifiersep> upper <identifiersep> case ( ) . contains ( <string_literal> ) ) { \n \t4 vo . set <identifiersep> value <identifiersep> types ( it , java . math . big <identifiersep> decimal . class ) ; \n \t4 decimal <identifiersep> type new <identifiersep> val = ( ( decimal <identifiersep> type ) item . get <identifiersep> state ( ) ) ; \n <ect>
\t3 if ( exec <identifiersep> date . before ( new date ( ) ) ) { \n \t4 <identifier> <identifiersep> job <identifiersep> exec <identifiersep> time . roll ( calendar . day <identifiersep> of <identifiersep> year , true ) ; } \n \t3 s <identifiersep> logger . debug ( <string_literal> + exec <identifiersep> date . to <identifiersep> string ( ) ) ; \n \t3 date current <identifiersep> date = new date ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n <ect>
\t5 admin <identifiersep> connection <identifiersep> factory . destroy <identifiersep> object ( connection ) ; \n \t4 } else { \n \t5 admin <identifiersep> pool . release <identifiersep> connection ( connection ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 { \n \t3 logger . error ( <string_literal> , e ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 if ( ! node <identifiersep> iterator . has <identifiersep> next ( ) || ! ( node = node <identifiersep> iterator . next ( ) ) . is <identifiersep> resource ( ) ) { \n \t3 logger . info ( <string_literal> ) ; \n \t3 return null ; } \n \t2 predicate <identifiersep> uri = node . as <identifiersep> resource ( ) . get <identifiersep> uri ( ) ; \n <ect>
\t1 private logger logger = configurable <identifiersep> logger ( data <identifiersep> store <identifiersep> <identifier> . class ) ; \n \t1 private data <identifiersep> store <identifiersep> server <identifiersep> config config ; \n \t1 private int max <identifiersep> message <identifiersep> size ; \n \t1 public void start ( ) { \n <ect>
\t5 if ( is <identifiersep> offline <identifiersep> session <identifiersep> valid ( realm , offline <identifiersep> user <identifiersep> session ) ) { \n \t6 user = offline <identifiersep> user <identifiersep> session . get <identifiersep> user ( ) ; \n \t6 return new auth <identifiersep> result ( user , offline <identifiersep> user <identifiersep> session , token ) ; } } \n \t4 if ( user <identifiersep> session != null ) <identifier> <identifiersep> logout ( session , realm , user <identifiersep> session , uri <identifiersep> info , connection , headers , true ) ; \n <ect>
\t3 fail ( <string_literal> ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { \n \t3 assert <identifiersep> equals ( <string_literal> , ex . get <identifiersep> message ( ) ) ; \n \t3 assert <identifiersep> equals ( <string_literal> , ex . get <identifiersep> cause ( ) . get <identifiersep> message ( ) ) ; } \n <ect>
\t4 destination <identifiersep> info destination <identifiersep> info = ( destination <identifiersep> info ) command ; \n \t4 destination <identifiersep> event event = new destination <identifiersep> event ( this , destination <identifiersep> info ) ; \n \t4 fire <identifiersep> destination <identifiersep> event ( event ) ; } \n \t3 else { \n <ect>
\t1 string descriptor = descriptor <identifiersep> utils . generate <identifiersep> descriptor ( description ) ; \n \t1 path f <identifiersep> path = validate <identifiersep> output ( file <identifiersep> path ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 dataset dataset = generate <identifiersep> dataset ( descriptor , data <identifiersep> path , <identifier> ) ; \n <ect>
\t1 private escape <identifiersep> type get <identifiersep> escape <identifiersep> type ( string reference ) { \n \t2 <comment> \n \t2 escape <identifiersep> type escape <identifiersep> type = ( escape <identifiersep> type ) context . get ( escape <identifiersep> type <identifiersep> key ) ; \n \t2 if ( escape <identifiersep> type != null ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 if ( ! ( selector . get <identifiersep> index ( ) instanceof <identifier> <identifiersep> query <identifiersep> index ) ) { \n <ect>
\t2 return candidate ; } \n \t1 public static int get <identifiersep> config <identifiersep> check <identifiersep> interval ( ) throws exception { \n \t2 string s = system . get <identifiersep> property ( config <identifiersep> script <identifiersep> check <identifiersep> property <identifiersep> name , config <identifiersep> update <identifiersep> check <identifiersep> interval <identifiersep> seconds ) ; \n \t2 if ( strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( s ) ) { \n <ect>
\t1 try { \n \t2 if ( null != stmt ) { \n \t2 stmt . close ( ) ; } \n \t1 } catch ( exception ex ) { \n <ect>
\t2 final long duration \t3 = system . current <identifiersep> time <identifiersep> millis ( ) - chunk <identifiersep> start <identifiersep> time ; \n \t2 final decimal <identifiersep> format decimal <identifiersep> format = new decimal <identifiersep> format ( <string_literal> , decimal <identifiersep> format <identifiersep> <identifier> . get <identifiersep> instance ( locale . english ) ) ; \n \t2 final string formatted <identifiersep> duration \t1 = decimal <identifiersep> format . format ( ( duration / <number_literal> . 0 ) ) + <string_literal> ; \n \t2 final string objects <identifiersep> per <identifiersep> second \t1 = decimal <identifiersep> format . format ( chunk <identifiersep> size / ( duration / <number_literal> . 0 ) ) ; \n <ect>
\t1 f . close ( ) \n else : \n \t1 logger . warn ( <string_literal> ) \n \t1 sys . exit ( ) \n <ect>
\t2 this . exceptions = exceptions ; \n \t2 this . log = log ; } \n \t1 @ override \n \t1 public void on <identifiersep> exception ( jms <identifiersep> exception exception ) { \n <ect>
\t2 <comment> \n \t2 ambari <identifiersep> context . get <identifiersep> controller ( ) . register <identifiersep> <identifier> <identifiersep> change ( ambari <identifiersep> context . get <identifiersep> cluster <identifiersep> name ( topology . get <identifiersep> cluster <identifiersep> id ( ) ) ) ; \n \t1 } catch ( ambari <identifiersep> exception e ) { \n \t2 log . error ( <string_literal> , topology . get <identifiersep> cluster <identifiersep> id ( ) ) ; \n <ect>
\t2 if ( disable ) { \n \t3 <identifier> <identifiersep> disabled <identifiersep> vms . add ( vm <identifiersep> id ) ; \n \t2 } else { \n \t3 <identifier> <identifiersep> disabled <identifiersep> vms . remove ( vm <identifiersep> id ) ; } \n <ect>
\t1 <comment> \n \t1 string snapshot <identifiersep> point = ceph <identifiersep> rbd <identifiersep> info . snapshot <identifiersep> on <identifiersep> prefix + snapshot <identifiersep> id ; \n \t1 rbd <identifiersep> service . create <identifiersep> snapshot ( snapshot <identifiersep> id , snapshot <identifiersep> point , parent . get <identifiersep> pool ( ) ) ; \n \t1 } else { \n <ect>
\t2 final file savepoint <identifiersep> dir = temp <identifiersep> folder . new <identifiersep> folder ( <string_literal> + id ) . get <identifiersep> absolute <identifiersep> file ( ) ; \n \t2 if ( ! checkpoint <identifiersep> dir . exists ( ) || ! savepoint <identifiersep> dir . exists ( ) ) { \n \t3 throw new exception ( <string_literal> ) ; } \n \t2 log . info ( <string_literal> + checkpoint <identifiersep> dir + <string_literal> ) ; \n <ect>
\t5 log . info ( log . fac <identifiersep> pipeline , <string_literal> , number ) ; \n \t4 return co ; \n \t3 } else { \n \t4 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) \n <ect>
\t4 try { \n \t5 install <identifiersep> item <identifiersep> service . install <identifiersep> item ( c , <identifier> , <identifier> ) ; \n \t4 } catch ( exception e ) { \n \t5 workspace <identifiersep> item <identifiersep> service . delete <identifiersep> all ( c , <identifier> ) ; \n <ect>
@ visible <identifiersep> for <identifiersep> testing \n protected void handle <identifiersep> update <identifiersep> result ( task <identifiersep> info ti , boolean is <identifiersep> ok ) { \n \t1 <comment> \n \t1 boolean new <identifiersep> state <identifiersep> same <identifiersep> task = null , new <identifiersep> state <identifiersep> any <identifiersep> task = null ; \n <ect>
\t3 result . set <identifiersep> success <identifiersep> is <identifiersep> set ( true ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t5 logger . debug ( <string_literal> , user , entity , access ) ; \n \t5 return access ; \n \t4 } else { \n \t5 security <identifiersep> access access = access <identifiersep> entry . get <identifiersep> access ( ) ; \n <ect>
\t3 rdf <identifiersep> data <identifiersep> mgr . parse ( dest , url , lang ) ; } \n \t2 dest . finish <identifiersep> bulk ( ) ; } \n \t1 <comment> \n \t1 private static void load <identifiersep> <identifier> ( bulk <identifiersep> stream <identifiersep> rdf dest , input <identifiersep> stream input ) { \n <ect>
\t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 <comment> \n \t3 delivery <identifiersep> stream <identifiersep> description delivery <identifiersep> stream <identifiersep> description = describe <identifiersep> delivery <identifiersep> stream ( delivery <identifiersep> stream <identifiersep> name ) ; \n \t3 string delivery <identifiersep> stream <identifiersep> status = delivery <identifiersep> stream <identifiersep> description . get <identifiersep> delivery <identifiersep> stream <identifiersep> status ( ) ; \n <ect>
\t3 return answer . create <identifiersep> unsupported <identifiersep> command <identifiersep> answer ( cmd ) ; } \n \t2 return answer . create <identifiersep> unsupported <identifiersep> command <identifiersep> answer ( cmd ) ; } \n \t1 public primary <identifiersep> storage <identifiersep> download <identifiersep> answer execute ( primary <identifiersep> storage <identifiersep> download <identifiersep> command cmd ) { \n <ect>
\t2 list < groovy <identifiersep> row <identifiersep> result > result = \n \t3 sql . rows ( string . format ( <string_literal> , table , old <identifiersep> name ) ) ; \n \t2 if ( result != null && ! result . is <identifiersep> empty ( ) ) { \n \t2 <comment> \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t5 commit <identifiersep> failed <identifiersep> exception exception = new conflict <identifiersep> exception ( <string_literal> , revisions ) . as <identifiersep> commit <identifiersep> failed <identifiersep> exception ( ) ; \n \t5 b . merge ( new hook <identifiersep> failing <identifiersep> once ( exception ) , commit <identifiersep> info . empty ) ; \n \t5 merged . set ( true ) ; \n \t4 } catch ( commit <identifiersep> failed <identifiersep> exception e ) { \n <ect>
\t2 public response logout <identifiersep> response ( @ context uri <identifiersep> info uri <identifiersep> info , \n \t9 @ query <identifiersep> param ( <string_literal> ) string state ) { \n \t3 user <identifiersep> session <identifiersep> model user <identifiersep> session = session . sessions ( ) . get <identifiersep> user <identifiersep> session ( realm , state ) ; \n \t3 if ( user <identifiersep> session == null ) { \n <ect>
\t2 logger . info ( <string_literal> + options <identifiersep> helper . get <identifiersep> option <identifiersep> value ( option <identifiersep> delete ) + <string_literal> ) ; \n \t2 delete = boolean . parse <identifiersep> boolean ( options <identifiersep> helper . get <identifiersep> option <identifiersep> value ( option <identifiersep> delete ) ) ; \n \t2 string [ ] metastore <identifiersep> whitelist = options <identifiersep> helper . get <identifiersep> option <identifiersep> value ( option <identifiersep> whitelist ) . split ( <string_literal> ) ; \n \t2 for ( string ms : metastore <identifiersep> whitelist ) { \n <ect>
\t5 logger . debug ( <string_literal> + close <identifiersep> status + <string_literal> + this ) ; } } } \n \t2 catch ( io <identifiersep> exception ex ) { \n \t3 if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t4 return ; \n \t3 } catch ( runtime <identifiersep> exception e ) { \n \t4 component <identifiersep> status status = work <identifiersep> cache . get <identifiersep> status ( ) ; \n \t4 if ( status . is <identifiersep> stopping ( ) || status . is <identifiersep> terminated ( ) ) { \n <ect>
\t1 log . error ( <string_literal> , ex ) ; } \n \t1 try { \n \t1 <identifier> . run ( <string_literal> ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 string expression = field . get <identifiersep> name ( ) ; \n \t2 object value = value <identifiersep> stack . find <identifiersep> value ( expression ) ; \n <ect>
\t1 public long get <identifiersep> time <identifiersep> counter ( ) { \n \t1 try { \n \t2 return ( long ) metrics . get ( time <identifiersep> counter ) ; \n \t1 } catch ( jm <identifiersep> exception e ) { \n <ect>
\t1 return ; } \n \t1 if ( ! svc . is <identifiersep> shutdown ( ) ) { \n \t1 svc . shutdown ( ) ; } \n \t1 while ( ! svc . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n <ect>
\t2 reader . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 write . <identifier> ( ) ; \n \t2 tracker . decrement <identifiersep> pending <identifiersep> outbound <identifiersep> bytes ( write <identifiersep> size ) ; } \n \t1 private static void safe <identifiersep> fail ( channel <identifiersep> promise promise , throwable cause ) { \n \t2 if ( ! ( promise instanceof void <identifiersep> channel <identifiersep> promise ) && ! promise . try <identifiersep> failure ( cause ) ) { \n <ect>
\t2 active <identifiersep> mq <identifiersep> queue dest = new active <identifiersep> mq <identifiersep> queue ( <string_literal> ) ; \n \t2 message <identifiersep> text <identifiersep> prefix = init <identifiersep> message <identifiersep> prefix ( <number_literal> * <number_literal> ) ; \n \t2 send <identifiersep> messages ( dest , <number_literal> ) ; \n \t2 uri stomp <identifiersep> broker <identifiersep> uri = uri <identifiersep> support . remove <identifiersep> query ( broker . get <identifiersep> transport <identifiersep> connectors ( ) . get ( 1 ) . get <identifiersep> connect <identifiersep> uri ( ) ) ; \n <ect>
\t6 zk . get <identifiersep> data ( my <identifiersep> node , watcher , dc , watcher ) ; \n \t5 } catch ( exception e ) { \n \t6 log . warn ( <string_literal> + child , e ) ; \n \t6 if ( e . get <identifiersep> cause ( ) != null ) { \n <ect>
\t5 log . warn ( <string_literal> , tp . get <identifiersep> class ( ) . get <identifiersep> name ( ) , key ) ; \n \t4 } else { \n \t5 log . warn ( <string_literal> , key ) ; } \n \t4 if ( default <identifiersep> message . equals ( msg ) ) { \n <ect>
\t3 logger . warn ( <string_literal> , name , resource ) ; \n \t3 return null ; } \n \t2 uri url = content . url ( ) ; \n \t2 if ( url == null ) { \n <ect>
<comment> \n \t1 public void unregister <identifiersep> partition ( result <identifiersep> partition <identifiersep> id partition <identifiersep> id ) { \n \t2 check <identifiersep> not <identifiersep> null ( partition <identifiersep> id ) ; \n \t2 synchronized ( registered <identifiersep> handlers ) { \n <ect>
\t4 list < group > result = new array <identifiersep> list < > ( ) ; \n \t4 for ( uuid uuid : session <identifiersep> group <identifiersep> ids ) { \n \t5 result . add ( group <identifiersep> service . find ( context , uuid ) ) ; } \n \t4 return result ; } \n <ect>
\t3 return ; <comment> \n \t2 try { \n \t3 boolean loc = <identifier> <identifiersep> info . local ( ) ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 log . debug ( <string_literal> , key ) ; \n \t3 element element = create <identifiersep> element <identifiersep> from <identifiersep> body ( key , exchange , cache <identifiersep> constants . cache <identifiersep> operation <identifiersep> update ) ; \n \t3 cache . put ( element ) ; \n \t2 } else if ( check <identifiersep> is <identifiersep> equal ( operation , cache <identifiersep> constants . cache <identifiersep> operation <identifiersep> url <identifiersep> <identifier> ) ) { \n <ect>
\t3 this . dspace <identifiersep> object = b ; \n \t3 <comment> \n \t3 context . restore <identifiersep> auth <identifiersep> system <identifiersep> state ( ) ; \n \t2 } catch ( sql <identifiersep> exception | authorize <identifiersep> exception ex ) { \n <ect>
\t2 result . header ( <string_literal> , \n \t2 <string_literal> <string_literal> \\ <string_literal> ) . type ( mime <identifiersep> type ) ; } \n \t1 return result . build ( ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
<comment> \n \t3 return status == 0 || status == 1 ; <comment> \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 log . info ( <string_literal> ) ; \n <ect>
\t5 . set <identifiersep> sequence <identifiersep> size ( <number_literal> ) \n \t5 . set <identifiersep> sequence <identifiersep> number ( i + 1 ) \n \t5 . build ( ) ) ; } \n \t2 stopwatch . stop ( ) ; \n <ect>
\t2 logger . debug ( <string_literal> + <identifier> <identifiersep> temperature ) ; \n \t2 logger . debug ( <string_literal> + display <identifiersep> <identifier> <identifiersep> temp ) ; \n \t2 logger . debug ( <string_literal> + ctrl <identifiersep> mode ) ; \n \t2 logger . debug ( <string_literal> + dst <identifiersep> active ) ; \n <ect>
\t3 assert <identifiersep> not <identifiersep> null ( <string_literal> + i , m ) ; \n \t3 log . info ( <string_literal> + i + <string_literal> + m ) ; } \n \t2 <comment> \n \t2 object <identifiersep> name active <identifiersep> durable <identifiersep> sub <identifiersep> name = broker . get <identifiersep> admin <identifiersep> view ( ) . get <identifiersep> durable <identifiersep> topic <identifiersep> subscribers ( ) [ 0 ] ; \n <ect>
\t9 send <identifiersep> alert = true ; } } \n \t7 break ; } \n \t6 <identifier> <identifiersep> volume <identifiersep> data <identifiersep> store <identifiersep> dao . update ( tmp <identifiersep> volume <identifiersep> data <identifiersep> store . get <identifiersep> id ( ) , tmp <identifiersep> volume <identifiersep> data <identifiersep> store ) ; \n \t5 } catch ( no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
<comment> \n \t3 remove <identifiersep> listener : function ( el , s <identifiersep> type , fn , index ) { \n \t4 if ( ! fn || ! fn . call ) { \n <ect>
\t4 . put ( <string_literal> , <number_literal> ) \n \t4 . put ( cluster <identifiersep> rebalance <identifiersep> allocation <identifiersep> <identifier> . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> allow <identifiersep> rebalance <identifiersep> setting . get <identifiersep> key ( ) , <string_literal> ) \n \t4 . put ( <string_literal> , <string_literal> ) \n \t4 . build ( ) ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void detached ( detach <identifiersep> event e ) { \n <ect>
\t2 public void bar ( string body ) { \n \t3 fail ( <string_literal> + body ) ; } \n \t2 public void foo ( @ body string body ) { \n \t3 this . body = body ; \n <ect>
\t3 if ( selected <identifiersep> folder == null ) { \n \t4 throw new debug <identifiersep> exception ( string . format ( <string_literal> , criteria . get <identifiersep> base <identifiersep> folder ( ) , \n \t6 criteria . get <identifiersep> root <identifiersep> folder ( ) , app <identifiersep> ui . get <identifiersep> account <identifiersep> id ( ) ) ) ; \n \t3 } else if ( ! ( selected <identifiersep> folder instanceof folder ) ) { \n <ect>
\t3 log . debug ( <string_literal> ) ; \n \t3 try { \n \t4 tx <identifiersep> coordinator . rollback ( local <identifiersep> transaction ) ; \n \t3 } catch ( xa <identifiersep> exception <identifier> ) { \n <ect>
\t7 nginx <identifiersep> clojure <identifiersep> rt . log . error ( string . format ( <string_literal> , req . native <identifiersep> request ( ) , req . uri ( ) ) , e ) ; \n \t7 try { \n \t8 req . channel ( ) . close ( ) ; \n \t7 } catch ( io <identifiersep> exception e1 ) { \n <ect>
\t5 rollback <identifiersep> failed = false ; \n \t4 } catch ( throwable ex ) { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t2 while ( true ) { \n \t3 thread . sleep ( <number_literal> ) ; \n \t3 <comment> \n \t3 if ( done . get ( ) ) { \n <ect>
\t1 final list < class > filter <identifiersep> classes = get <identifiersep> filter <identifiersep> classes ( filter <identifiersep> class <identifiersep> names ) ; \n \t1 for ( class filter <identifiersep> class : filter <identifiersep> classes ) { \n \t1 filters . add ( get <identifiersep> reference ( filter <identifiersep> class ) ) ; } \n \t1 for ( web <identifiersep> socket <identifiersep> filter filter : filters ) { \n <ect>
\t5 sc . get <identifiersep> parent <identifiersep> node ( ) . remove <identifiersep> child ( sc ) ; } \n \t4 list = x <identifiersep> path <identifiersep> helper . evaluate <identifiersep> xpath <identifiersep> expression ( dom , \n \t6 <string_literal> + tag <identifiersep> name . to <identifiersep> upper <identifiersep> case ( ) ) ; } \n \t2 } catch ( x <identifiersep> path <identifiersep> expression <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t2 decode <identifiersep> writable ( key , key <identifiersep> str ) ; \n \t2 keys . put ( key . get <identifiersep> key <identifiersep> id ( ) , key ) ; \n \t1 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t1 } else { \n \t2 if ( ! f . delete ( ) ) { \n \t2 logger . warn ( <string_literal> , f . get <identifiersep> absolute <identifiersep> path ( ) ) ; } } } \n \t1 if ( ! dir . delete ( ) ) { \n <ect>
\t7 if ( primary == null ) { \n \t8 primary = <identifier> <identifiersep> handler ; } \n \t7 connected <identifiersep> count ++ ; \n \t6 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public void save ( final string user <identifiersep> name , final string secret <identifiersep> key , \n \t5 final int validation <identifiersep> code , final list < integer > scratch <identifiersep> codes ) { \n \t2 try { \n <ect>
\t7 xml <identifiersep> delete <identifiersep> response . append ( <string_literal> ) ; } } } \n \t4 string version = engine <identifiersep> request . get <identifiersep> version ( ) ; \n \t4 if ( null != version ) response . add <identifiersep> header ( <string_literal> , version ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 mac . update ( request . get <identifiersep> bytes ( ) ) ; \n \t4 final byte [ ] encrypted <identifiersep> bytes = mac . do <identifiersep> final ( ) ; \n \t4 return new string ( base64 . encode <identifiersep> base64 ( encrypted <identifiersep> bytes ) ) ; } \n \t2 } catch ( final exception ex ) { \n <ect>
\t2 row <identifiersep> count ++ ; \n \t2 } catch ( sql <identifiersep> exception sql ) { \n \t2 log . error ( <string_literal> , sql ) ; } } \n \t1 conn . commit ( ) ; \n <ect>
\t1 final string resource <identifiersep> uri = resource == null ? <string_literal> : resource . get <identifiersep> uri ( ) ; \n \t1 try { \n \t1 writer . write ( process ( resource <identifiersep> uri , content ) ) ; \n \t1 } catch ( final exception e ) { \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 system . exit ( 1 ) ; \n \t2 } catch ( throwable e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( final bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
\t2 <comment> \n \t2 public void conversation <identifiersep> opened ( conversation con ) \n \t2 { \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 if ( <identifier> <identifiersep> dead ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 log . error ( <string_literal> \n \t4 + <string_literal> , e ) ; \n \t3 return ; } } } \n \t1 } finally { \n <ect>
\t4 latest <identifiersep> <identifier> <identifiersep> view . get <identifiersep> view <identifiersep> entity ( ) . get <identifiersep> name ( ) + <string_literal> + latest <identifiersep> <identifier> <identifiersep> view . get <identifiersep> name ( ) ) ; \n \t3 get <identifiersep> view <identifiersep> data <identifiersep> migration <identifiersep> <identifier> ( ) . migrate <identifiersep> data ( instance , latest <identifiersep> <identifier> <identifiersep> view , true ) ; \n \t3 log . info ( <string_literal> + view <identifiersep> definition . get <identifiersep> name ( ) + <string_literal> ) ; \n \t2 } catch ( view <identifiersep> data <identifiersep> migration <identifiersep> exception e ) { \n <ect>
\t2 case none = > \n \t2 client ! <identifier> <identifiersep> message ( job <identifiersep> not <identifiersep> found ( job <identifiersep> id ) ) } \n \t1 case recover <identifiersep> submitted <identifiersep> job ( submitted <identifiersep> job <identifiersep> graph ) = > \n \t1 if ( ! current <identifiersep> jobs . contains ( submitted <identifiersep> job <identifiersep> graph . get <identifiersep> job <identifiersep> id ) ) { \n <ect>
\t2 return ( big <identifiersep> integer ) val ; } \n \t1 protected static schema static <identifiersep> schema <identifiersep> gen ( string s ) { \n \t2 try { \n \t3 if ( s . equals ( <string_literal> ) ) { \n <ect>
\t3 simple <identifiersep> field <identifiersep> set <identifier> = simple <identifiersep> field <identifiersep> set . read <identifiersep> from ( <identifier> <identifiersep> file , false , true ) ; \n \t3 read <identifiersep> <identifier> ( main <identifiersep> category , <identifier> ) ; \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception <identifier> ) { \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 ctx . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 xml <identifiersep> buffer . open <identifiersep> tag ( <string_literal> ) ; <comment> \n \t3 final string test <identifiersep> type = get <identifiersep> test ( ) ; \n \t3 xml <identifiersep> buffer . tag ( <string_literal> , test <identifiersep> type ) ; <comment> \n <ect>
\t1 protected boolean get <identifiersep> boolean <identifiersep> param ( final invocation <identifiersep> handler invocation <identifiersep> handler , final method method , final boolean default <identifiersep> value ) throws throwable { \n \t2 boolean value = ( boolean ) invocation <identifiersep> handler . invoke ( configuration , method , null ) ; \n \t2 if ( value == null ) { \n \t3 value = default <identifiersep> value ; } \n <ect>
\t4 boolean full <identifiersep> clone = ( boolean ) params . get ( key ) ; \n \t4 processor . set <identifiersep> full <identifiersep> clone <identifiersep> flag ( full <identifiersep> clone ) ; \n \t4 break ; \n \t3 default : \n <ect>
\t5 . get <identifiersep> connection ( ) ; \n \t3 response response = do <identifiersep> send <identifiersep> operation ( conn , contents ) ; \n \t3 if ( ! response . is <identifiersep> success <identifiersep> code ( ) ) { \n \t4 if ( response . is <identifiersep> auth <identifiersep> denied ( ) ) { \n <ect>
\t3 return previous <identifiersep> hosts ; } \n \t2 catch ( connection <identifiersep> exception e ) { \n \t3 if ( previous <identifiersep> hosts == null ) { \n \t4 throw new runtime <identifiersep> exception ( e ) ; } \n <ect>
\t1 private static void safe <identifiersep> execute ( event <identifiersep> executor executor , runnable task ) { \n \t2 try { \n \t3 executor . execute ( task ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 { \n \t3 public void uncaught <identifiersep> exception ( thread t , throwable e ) \n \t3 { \n \t4 storage <identifiersep> metrics . exceptions . inc ( ) ; \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + path + <string_literal> + output ) ; \n \t3 return <string_literal> ; } \n \t2 <comment> \n \t2 if ( ( output . contains ( <string_literal> ) || output . contains ( <string_literal> ) ) && ( is <identifiersep> correct <identifiersep> extension ( <identifier> , <string_literal> ) || is <identifiersep> correct <identifiersep> extension ( <identifier> , <string_literal> ) ) ) { \n <ect>
\t1 case event ( msg : disconnected , data : <identifier> <identifiersep> data ) = > \n \t1 <identifier> ( suspended ) using data . copy ( retries = 0 ) } \n on <identifiersep> transition { \n \t1 case previous <identifiersep> state - > next <identifiersep> state = > \n <ect>
\t4 curr = gen <identifiersep> group <identifiersep> by <identifiersep> <identifier> ( dest , qb , curr ) ; \n \t3 } else { \n \t4 curr = gen <identifiersep> group <identifiersep> by <identifiersep> <identifier> ( dest , qb , curr ) ; } } \n <ect>
\t5 try { \n \t6 if ( renamed . create <identifiersep> new <identifiersep> file ( ) ) { \n \t7 files . copy ( process <identifiersep> file , renamed ) ; \n \t7 <identifier> . add ( renamed ) ; \n <ect>
\t1 column <identifiersep> types = type <identifiersep> info <identifiersep> utils . get <identifiersep> type <identifiersep> infos <identifiersep> from <identifiersep> type <identifiersep> string ( column <identifiersep> type <identifiersep> property ) ; \n \t1 schema = get <identifiersep> schema <identifiersep> from <identifiersep> cols ( properties , column <identifiersep> names , column <identifiersep> types , column <identifiersep> comment <identifiersep> property ) ; } \n \t1 properties . set <identifiersep> property ( avro <identifiersep> <identifier> <identifiersep> utils . avro <identifiersep> table <identifiersep> properties . schema <identifiersep> literal . get <identifiersep> prop <identifiersep> name ( ) , schema . to <identifiersep> string ( ) ) ; \n <ect>
\t3 test <identifiersep> base <identifiersep> utils . set <identifiersep> env ( map ) ; \n \t3 assert . assert <identifiersep> true ( yarn <identifiersep> cluster . get <identifiersep> service <identifiersep> state ( ) == service . state . started ) ; \n \t3 <comment> \n \t3 while ( ! yarn <identifiersep> cluster . wait <identifiersep> for <identifiersep> node <identifiersep> managers <identifiersep> to <identifiersep> connect ( <number_literal> ) ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t6 send ( message <identifiersep> builder . status ( ) . code ( <number_literal> ) . message ( t . to <identifiersep> string ( ) ) . build ( ) , true ) ; } \n \t5 <comment> \n \t5 tx . success ( ) ; \n \t4 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t1 public static boolean check <identifiersep> response <identifiersep> types ( final string type , final o <identifiersep> auth20response <identifiersep> types . . . expected <identifiersep> types ) { \n \t2 logger . debug ( <string_literal> , type ) ; \n \t2 final boolean checked = stream . of ( expected <identifiersep> types ) . any <identifiersep> match ( t - > o <identifiersep> auth20utils . is <identifiersep> response <identifiersep> type ( type , t ) ) ; \n \t2 if ( ! checked ) { \n <ect>
\t2 assert <identifiersep> that ( appender . last <identifiersep> event . get <identifiersep> level ( ) , equal <identifiersep> to ( level . error ) ) ; \n \t2 assert <identifiersep> that ( appender . last <identifiersep> event . get <identifiersep> thrown ( ) , equal <identifiersep> to ( ex ) ) ; \n \t2 assert <identifiersep> that ( appender . last <identifiersep> parameterized <identifiersep> message ( ) . get <identifiersep> formatted <identifiersep> message ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 ex = random <identifiersep> exception ( ) ; \n <ect>
\t5 object val = handler . deserialize ( entry . get <identifiersep> value ( ) , context ) ; \n \t5 field <identifiersep> info . set <identifiersep> value ( result , val ) ; } } \n \t3 return result ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 request request = new request ( ) ; \n \t2 request . set <identifiersep> request <identifiersep> byte ( request <identifiersep> byte ) ; \n \t2 byte request <identifiersep> message [ ] = create <identifiersep> request <identifiersep> message ( request ) ; \n \t2 if ( ! establish <identifiersep> request ( request <identifiersep> message ) ) { \n <ect>
\t5 suitable <identifiersep> volume <identifiersep> storage <identifiersep> pools . put ( to <identifiersep> be <identifiersep> created , suitable <identifiersep> pools ) ; \n \t5 found <identifiersep> potential <identifiersep> pools = true ; \n \t5 break ; } } \n \t3 if ( ! found <identifiersep> potential <identifiersep> pools ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 <comment> \n <ect>
\t3 ctx . executor ( ) ) ; \n \t2 result <identifiersep> future . when <identifiersep> complete ( \n \t3 ( void ignored , throwable throwable ) - > { \n \t4 if ( throwable != null ) { \n <ect>
\t6 result = <identifier> <identifiersep> <identifier> . write <identifiersep> area ( <identifier> . <identifier> <identifiersep> db , 1 , address , size , buffer ) ; \n \t6 logger . debug ( <string_literal> , address , buffer [ 0 ] ) ; } } \n \t4 <comment> \n \t4 if ( result != 0 ) { \n <ect>
\t5 + <string_literal> \n \t5 + <string_literal> \n \t5 + <string_literal> ) \n \t1 public void test <identifiersep> reroute <identifiersep> recovery ( ) throws exception { \n <ect>
\t1 @ <identifier> \n \t1 private lifecycle <identifiersep> bean lifecycle <identifiersep> bean ; \n \t1 @ post <identifiersep> construct \n \t1 public void before <identifiersep> all <identifiersep> tests ( ) { \n <ect>
\t4 cache <identifiersep> qualifier = and <identifiersep> qualifier <identifiersep> in <identifiersep> cache ( ( eo <identifiersep> and <identifiersep> qualifier ) q ) ; \n \t3 } else if ( q instanceof eo <identifiersep> or <identifiersep> qualifier ) { \n \t4 cache <identifiersep> qualifier = or <identifiersep> qualifier <identifiersep> in <identifiersep> cache ( ( eo <identifiersep> or <identifiersep> qualifier ) q ) ; \n \t3 } else { \n <ect>
\t5 if ( ! <identifier> . add ( e ) ) { \n \t6 if ( e . get <identifiersep> scope ( ) == volume . class || e . get <identifiersep> scope ( ) == nic . class ) { \n \t7 throw e ; \n \t6 } else { \n <ect>
\t2 try { \n \t3 if ( null != input <identifiersep> stream ) { \n \t4 client <identifiersep> socket . close ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 <identifier> . get <identifiersep> sub <identifiersep> types <identifiersep> of ( base <identifiersep> oidc <identifiersep> scope <identifiersep> attribute <identifiersep> release <identifiersep> policy . class ) ; \n \t2 sub <identifiersep> types . for <identifiersep> each ( unchecked . consumer ( t - > { \n \t3 final base <identifiersep> oidc <identifiersep> scope <identifiersep> attribute <identifiersep> release <identifiersep> policy ex = t . get <identifiersep> declared <identifiersep> constructor ( ) . new <identifiersep> instance ( ) ; \n \t3 if ( oidc . get <identifiersep> scopes ( ) . contains ( ex . get <identifiersep> scope <identifiersep> name ( ) ) ) { \n <ect>
\t4 int len = m <identifiersep> byte <identifiersep> out . size ( ) ; \n \t4 <comment> \n \t4 m <identifiersep> output <identifiersep> stream . write ( frame <identifiersep> start ) ; <comment> \n \t4 m <identifiersep> output <identifiersep> stream . write ( buf , 0 , len ) ; <comment> \n <ect>
\t5 <comment> \n \t5 val = game <identifiersep> state <identifiersep> <identifier> . evaluate ( this . get <identifiersep> id ( ) , sim ) ; \n \t4 } else { \n \t5 val = add <identifiersep> actions ( new <identifiersep> node , depth - 1 , alpha , beta ) ; } \n <ect>
\t5 add <identifiersep> alt <identifiersep> prefix ( prefix , alt <identifiersep> prefix ) ; \n \t5 log . debug ( <string_literal> + prefix + <string_literal> + alt <identifiersep> prefix ) ; \n \t4 } catch ( jena <identifiersep> exception ex ) \n \t4 { \n <ect>
\t2 } else if ( auth <identifiersep> method . equals ( http <identifiersep> servlet <identifiersep> request . client <identifiersep> cert <identifiersep> auth ) ) { \n \t3 principal = super . get <identifiersep> principal ( username ) ; \n \t2 } else { \n \t3 throw new login <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t1 if ( cmd <identifiersep> line . has <identifiersep> option ( num <identifiersep> ops <identifiersep> opt ) ) { \n \t2 num <identifiersep> ops = integer . parse <identifiersep> int ( ( string ) cmd <identifiersep> line . get <identifiersep> value ( num <identifiersep> ops <identifiersep> opt ) ) ; } \n \t1 vector <identifiersep> <identifier> mark = new vector <identifiersep> <identifier> ( cardinality , num <identifiersep> non <identifiersep> zero , num <identifiersep> vectors , num <identifiersep> clusters , num <identifiersep> ops ) ; \n \t1 run <identifiersep> benchmark ( mark ) ; \n <ect>
\t3 if ( max <identifiersep> bitrate != null ) { \n \t4 try { \n \t5 i <identifiersep> max <identifiersep> bitrate = integer . parse <identifiersep> int ( max <identifiersep> bitrate ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t6 tracker . remove ( id <identifiersep> temp <identifiersep> delete <identifiersep> file , options . active <identifiersep> deletion ) ; } } \n \t3 } catch ( exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; } \n \t3 long end <identifiersep> blob <identifiersep> tracker <identifiersep> sync <identifiersep> time = clock . get <identifiersep> time ( ) ; \n <ect>
\t2 final set < base <identifiersep> client > clients = pac4j <identifiersep> delegated <identifiersep> client <identifiersep> factory ( ) . build ( ) ; \n \t2 logger . debug ( <string_literal> , clients ) ; \n \t2 if ( clients . is <identifiersep> empty ( ) ) { \n \t3 logger . warn ( <string_literal> ) ; } \n <ect>
@ inject \n public default <identifiersep> ldap <identifiersep> configuration <identifiersep> service ( ) { } \n @ override \n public void check <identifiersep> connection ( ambari <identifiersep> ldap <identifiersep> configuration ambari <identifiersep> ldap <identifiersep> configuration ) throws ambari <identifiersep> ldap <identifiersep> exception { \n <ect>
\t6 new error <identifiersep> response <identifiersep> body ( <identifier> . get <identifiersep> message ( ) ) , \n \t6 <identifier> . get <identifiersep> http <identifiersep> response <identifiersep> status ( ) , \n \t6 response <identifiersep> headers ) ; \n \t4 } else { \n <ect>
\t5 diff <identifiersep> snapshot . get <identifiersep> period <identifiersep> end ( ) \n \t4 ) ; \n \t4 listener <identifiersep> registry . get <identifiersep> instance ( ) . fire <identifiersep> event ( usage <identifiersep> event ) ; \n \t3 } catch ( final exception e ) { \n <ect>
\t1 if ( max <identifiersep> fail <identifiersep> seconds * 1000l > fail <identifiersep> interval ) { \n \t1 log . fatal ( log <identifiersep> util . header ( <string_literal> + max <identifiersep> fail <identifiersep> seconds \n \t8 + <string_literal> ) ) ; \n \t1 } else if ( fail <identifiersep> count . get <identifiersep> stamp ( ) > 0 ) { \n <ect>
\t1 public action invoke <identifiersep> <identifier> ( list < atmosphere <identifiersep> interceptor > c , atmosphere <identifiersep> resource r , int tracing ) { \n \t2 action a = action . continue ; \n \t2 for ( atmosphere <identifiersep> interceptor <identifier> : c ) { \n \t3 if ( ! atmosphere <identifiersep> resource <identifiersep> impl . class . cast ( r ) . is <identifiersep> in <identifiersep> scope ( ) ) { \n <ect>
\t4 return backoff <identifiersep> handler . should <identifiersep> retry <identifiersep> request ( command , response ) ; } \n \t3 <comment> \n \t3 command . increment <identifiersep> failure <identifiersep> count ( ) ; \n \t3 } catch ( http <identifiersep> exception e ) { \n <ect>
\t1 } else { \n \t2 synchronized ( cache ) { \n \t2 result = cache . get ( id ) ; } } \n \t1 if ( result != null ) { \n <ect>
\t4 } catch ( lock <identifiersep> obtain <identifiersep> failed <identifiersep> exception e ) { \n \t5 es <identifiersep> test <identifiersep> case . check <identifiersep> index <identifiersep> failed = true ; \n \t5 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + shard <identifiersep> id , e ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t3 string cache <identifiersep> dir <identifiersep> name = <string_literal> + uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ; \n \t3 storage <identifiersep> directories [ i ] = new file ( temp <identifiersep> directories [ i ] , cache <identifiersep> dir <identifiersep> name ) ; \n \t3 string path = storage <identifiersep> directories [ i ] . get <identifiersep> absolute <identifiersep> path ( ) ; \n \t3 if ( storage <identifiersep> directories [ i ] . mkdirs ( ) ) { \n <ect>
\t5 this . set <identifiersep> response <identifiersep> object ( host <identifiersep> response ) ; } \n \t3 } else { \n \t4 throw new server <identifiersep> api <identifiersep> exception ( base <identifiersep> cmd . internal <identifiersep> error , <string_literal> ) ; } \n \t2 } catch ( discovery <identifiersep> exception ex ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + version ) ; } \n \t2 checker . upgrade ( <string_literal> , <string_literal> ) ; \n \t2 conn = transaction . get <identifiersep> standalone <identifiersep> connection ( ) ; \n \t2 try { \n <ect>
\t5 log . warn ( <string_literal> ) ; \n \t5 authenticate ( ) ; \n \t5 create <identifiersep> container ( container <identifiersep> name ) ; \n \t4 } else { \n <ect>
\t2 builder . append ( <string_literal> , this . access <identifiersep> token ) ; \n \t2 return builder . to <identifiersep> string ( ) ; } \n \t1 protected string execute <identifiersep> query ( final string content ) throws exception { \n \t2 final input <identifiersep> stream stream = new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( content . get <identifiersep> bytes ( charset ) ) ; \n <ect>
\t2 catch ( final exception exception ) \n \t2 { \n \t3 <comment> \n \t3 ae <identifiersep> log . debug ( exception ) ; } \n <ect>
\t3 dr <identifiersep> report <identifiersep> model model = <identifier> <identifiersep> model ; \n \t3 reset ( ) ; \n \t3 if ( model != null ) { \n \t4 model . init <identifiersep> with <identifiersep> raw <identifiersep> records ( objects ( ) , criteria <identifiersep> array ( ) , attribute <identifiersep> array ( ) ) ; } \n <ect>
\t4 tracing . instance . begin ( <string_literal> , \n \t9 immutable <identifiersep> map . of ( <string_literal> , query <identifiersep> string ) ) ; } \n \t3 else \n \t3 { \n <ect>
\t4 ( ( chat <identifiersep> room <identifiersep> member <identifiersep> <identifier> <identifiersep> impl ) chat <identifiersep> room <identifiersep> member ) . get <identifiersep> <identifier> <identifiersep> id ( ) , \n \t4 reason ) ; } \n \t2 catch ( xmpp <identifiersep> exception e ) \n \t2 { \n <ect>
\t4 data = null ; \n \t4 synchronized ( lock ) { \n \t5 async <identifiersep> flush <identifiersep> disk <identifiersep> offset += <identifier> <identifiersep> len ; <comment> \n \t5 <comment> \n <ect>
\t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 <comment> \n \t4 e . print <identifiersep> stack <identifiersep> trace ( ) ; } } \n \t2 s <identifiersep> logger . info ( <string_literal> ) ; \n <ect>
<comment> \n \t1 public void put ( string key , string value ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 int result <identifiersep> set <identifiersep> type = result <identifiersep> set . type <identifiersep> forward <identifiersep> only ; \n \t1 try { \n \t1 result <identifiersep> set <identifiersep> type = native <identifiersep> result <identifiersep> set . get <identifiersep> type ( ) ; \n \t1 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 <comment> \n \t3 if ( e . get <identifiersep> message ( ) != null ) { \n \t4 this . context . put ( <string_literal> , e . get <identifiersep> message ( ) ) ; } \n <ect>
\t7 logger . info ( <string_literal> ) ; \n \t7 do <identifiersep> notify <identifiersep> all ( ) ; \n \t7 nr <identifiersep> failures <identifiersep> restarting = 0 ; <comment> \n \t6 } catch ( exception e ) { \n <ect>
\t3 tr <identifiersep> <identifier> . append <identifiersep> child ( <identifier> , <identifier> ) \n \t3 <identifier> <identifiersep> builder . append <identifiersep> row ( tr <identifiersep> <identifier> ) \n \t3 return <identifier> <identifiersep> builder . create ( ) . write ( ) \n \t2 } catch ( e : exception ) { \n <ect>
\t6 throw new exception ( msg ) ; } \n \t5 <comment> \n \t5 for ( int i = 0 ; i < <identifier> . length ; i ++ ) { \n \t6 string <identifier> = <identifier> [ i ] . get <identifiersep> name ( ) ; \n <ect>
\t1 public void receive <identifiersep> command ( item item , command command , z <identifiersep> wave <identifiersep> node node , \n \t3 z <identifiersep> wave <identifiersep> multi <identifiersep> level <identifiersep> sensor <identifiersep> command <identifiersep> class command <identifiersep> class , int endpoint <identifiersep> id , map < string , string > arguments ) { \n \t2 z <identifiersep> wave <identifiersep> command <identifiersep> converter < ? , ? > converter = this . get <identifiersep> command <identifiersep> converter ( command . get <identifiersep> class ( ) ) ; \n \t2 if ( converter == null ) { \n <ect>
\t2 try <identifiersep> compress ( context ) ; } \n \t1 void on <identifiersep> compressed ( compression <identifiersep> output output , client <identifiersep> context context ) { \n \t2 synchronized ( this ) { \n \t3 if ( started ) { \n <ect>
\t3 else if ( default <identifiersep> to <identifiersep> dynamic <identifiersep> bindings ( ) ) { \n \t4 log . debug ( <string_literal> , key <identifiersep> path ) ; \n \t4 value = dynamic <identifiersep> bindings ( ) . value <identifiersep> for <identifiersep> key <identifiersep> path ( key <identifiersep> path ) ; } \n \t3 else { \n <ect>
\t4 s <identifiersep> logger . debug ( cmd + <string_literal> + new string ( buffer ) ) ; \n \t3 thread . sleep ( <number_literal> ) ; \n \t3 return ssh <identifiersep> session . get <identifiersep> exit <identifiersep> status ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 print <identifiersep> writer out = new print <identifiersep> writer ( <identifier> ) ; \n \t3 out . print ( <identifier> ) ; \n \t3 out . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public answer execute <identifiersep> request ( command cmd ) { \n \t2 if ( cmd instanceof create <identifiersep> command ) { \n \t3 return execute ( ( create <identifiersep> command ) cmd ) ; \n \t2 } else if ( cmd instanceof set <identifiersep> port <identifiersep> forwarding <identifiersep> rules <identifiersep> command ) { \n <ect>
\t2 int port = url . get <identifiersep> port ( ) ; \n \t2 string path = url . get <identifiersep> raw <identifiersep> path ( ) ; \n \t2 string query = url . get <identifiersep> raw <identifiersep> query ( ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 try { \n \t3 try { \n \t4 this . build <identifiersep> file <identifiersep> sha <identifiersep> map ( ) ; \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception fe ) { \n <ect>
\t4 for ( iterator < update <identifiersep> task > iter = <identifier> <identifiersep> <identifier> . key <identifiersep> set ( ) . iterator ( ) ; iter . has <identifiersep> next ( ) ; ) { \n \t5 update <identifiersep> task t = iter . next ( ) ; \n \t5 if ( ! t . is <identifiersep> running ( ) ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 private static synchronized boolean check <identifiersep> if <identifiersep> device <identifiersep> exists ( string pv <identifiersep> device <identifiersep> property <identifiersep> path ) \n \t3 throws io <identifiersep> exception , <identifier> <identifiersep> exception { \n \t2 string [ ] pv <identifiersep> device <identifiersep> property <identifiersep> path <identifiersep> parts = pv <identifiersep> device <identifiersep> property <identifiersep> path . trim ( ) . split ( <string_literal> ) ; \n \t2 string lv <identifiersep> device <identifiersep> path = pv <identifiersep> device <identifiersep> property <identifiersep> path <identifiersep> parts [ 0 ] ; \n <ect>
\t2 while ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> tick < = time <identifiersep> out <identifiersep> ms ) { \n \t3 mor <identifiersep> dv <identifiersep> port <identifiersep> group = data <identifiersep> center <identifiersep> mo . get <identifiersep> dv <identifiersep> port <identifiersep> group <identifiersep> mor ( dv <identifiersep> port <identifiersep> group <identifiersep> name ) ; \n \t3 if ( mor <identifiersep> dv <identifiersep> port <identifiersep> group != null ) { \n \t4 break ; } \n <ect>
\t6 s <identifiersep> logger . error ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; \n \t5 else { \n \t6 <comment> \n \t6 if ( api . set <identifiersep> param ( this . get <identifiersep> param ( ) ) == false ) { \n <ect>
\t4 s <identifiersep> logger . error ( <string_literal> + vol <identifiersep> id + <string_literal> + event . get <identifiersep> account <identifiersep> id ( ) + <string_literal> ) ; } \n \t3 <comment> \n \t3 for ( usage <identifiersep> volume <identifiersep> vo volumes <identifiersep> vo : volumes <identifiersep> v <identifiersep> os ) { \n <ect>
\t2 } finally { \n \t3 <comment> \n \t3 <comment> \n \t3 if ( status == not <identifiersep> finished && ! receiving <identifiersep> async ) { \n <ect>
\t6 <identifier> . delete ( true , null ) ; \n \t5 } catch ( final exception e ) { \n \t6 erl <identifiersep> logger . warn ( e ) ; } } \n \t4 if ( builder <identifiersep> helper . is <identifiersep> debugging ( ) ) { \n <ect>
\t4 } else if ( m <identifiersep> device instanceof digital <identifiersep> actor ) { \n \t5 ( ( digital <identifiersep> actor ) m <identifiersep> device ) . fetch <identifiersep> digital <identifiersep> value ( ) ; } } } } \n \t1 @ override \n \t1 public void binding <identifiersep> changed ( binding <identifiersep> provider provider , string item <identifiersep> name ) { \n <ect>
\t5 <identifier> <identifiersep> log . info ( <string_literal> ) ; } \n \t4 <identifier> <identifiersep> use <identifiersep> reflection <identifiersep> to <identifiersep> translate <identifiersep> throwable = false ; } \n \t3 catch ( security <identifiersep> exception se ) { \n <ect>
\t2 assert <identifiersep> true ( <string_literal> , ! master . is <identifiersep> slave ( ) ) ; \n \t2 master . stop ( ) ; \n \t2 assert <identifiersep> true ( <string_literal> , slave <identifiersep> started . await ( <number_literal> , time <identifiersep> unit . seconds ) ) ; \n \t2 assert <identifiersep> true ( ! slave . get ( ) . is <identifiersep> slave ( ) ) ; \n <ect>
\t1 if ( event . get <identifiersep> state ( ) == keeper <identifiersep> state . expired ) { \n \t1 log . warn ( <string_literal> , event . get <identifiersep> path ( ) ) ; \n \t1 server . stop ( ) ; \n \t1 } else if ( event . get <identifiersep> type ( ) == event <identifiersep> type . node <identifiersep> deleted ) { \n <ect>
\t2 { \n \t3 server <identifiersep> transaction . send <identifiersep> response ( response ) ; } \n \t2 catch ( sip <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 logger . error ( <string_literal> + item <identifiersep> name + <string_literal> ) ; \n \t3 return ; } \n \t2 <identifier> <identifiersep> receiver <identifiersep> proxy proxy = proxies . get ( config . get <identifiersep> device <identifiersep> uid ( ) ) ; \n \t2 if ( proxy == null ) { \n <ect>
\t4 module module = loader . load ( file <identifiersep> path ) ; \n \t4 module <identifiersep> manager . get <identifiersep> registry ( ) . add ( module ) ; \n \t4 new <identifiersep> installed <identifiersep> modules . add ( module ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t2 @ override \n \t2 public void execute <identifiersep> command ( command command , int channel ) { \n \t3 if ( ! connect ( ) ) { \n <ect>
\t4 info ( <string_literal> + config <identifiersep> to <identifiersep> monitor ) ; \n \t3 } else { \n \t4 log . error ( <string_literal> ) ; } \n \t2 } catch ( exception error ) { \n <ect>
\t5 <identifier> , max <identifiersep> <identifier> <identifiersep> length ) ) ; \n \t3 default <identifiersep> http <identifiersep> client client = new default <identifiersep> http <identifiersep> client ( ) ; \n \t3 http <identifiersep> response response = client . execute ( new http <identifiersep> get ( health <identifiersep> uri ) ) ; \n \t3 available = response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) == <number_literal> ; \n <ect>
\t3 for ( byte [ ] key <identifiersep> byte : put <identifiersep> keys ) { \n \t4 try { \n \t5 ttl <identifiersep> db . remove ( entry . get <identifiersep> value ( ) , key <identifiersep> byte ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 break ; } } } \n \t1 private void on <identifiersep> cluster <identifiersep> node <identifiersep> left ( object sender , cluster <identifiersep> node <identifiersep> left <identifiersep> event <identifiersep> args args ) { \n \t3 for ( management <identifiersep> server <identifiersep> host <identifiersep> vo mshost : args . get <identifiersep> left <identifiersep> nodes ( ) ) { \n <ect>
\t3 logger . error ( <string_literal> , te ) ; \n \t3 <comment> \n \t3 <comment> \n \t3 transformed <identifiersep> response = response ; } \n <ect>
\t3 if ( ret != 0 && ! m <identifiersep> interactive ) { \n \t4 throw new io <identifiersep> exception ( <string_literal> + cmd \n \t6 + <string_literal> ) ; } \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 } else { \n \t6 logger . warn ( <string_literal> , \n \t8 string <identifiersep> utils . substring <identifiersep> after ( message , <string_literal> ) ) ; } } \n \t3 } else { \n <ect>
\t1 try { \n \t1 for ( int i = 0 ; i < source <identifiersep> file <identifiersep> ids . length ; i ++ ) { \n \t2 get <identifiersep> repo <identifiersep> ws ( ) . delete <identifiersep> file <identifiersep> with <identifiersep> permanent <identifiersep> flag ( source <identifiersep> file <identifiersep> ids [ i ] , true , null ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t1 public static final i <identifiersep> message <identifiersep> handler < message <identifiersep> marker , i <identifiersep> message > handler = ( message , ctx ) - > { \n \t2 world world = bc <identifiersep> lib <identifiersep> proxy . get <identifiersep> proxy ( ) . get <identifiersep> client <identifiersep> world ( ) ; \n \t2 if ( world == null ) { \n \t3 if ( debug ) { \n <ect>
\t3 inet <identifiersep> address address = null ; \n \t3 try { \n \t4 address = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( host ) ; \n \t3 } catch ( unknown <identifiersep> host <identifiersep> exception ex ) { \n <ect>
\t2 log . warn ( <string_literal> , node <identifiersep> id , ni . ping <identifiersep> count . get ( ) ) ; \n \t1 } else { \n \t2 <comment> \n \t2 if ( current <identifiersep> ts > old . log <identifiersep> timestamp . get ( ) + <identifier> ) { <comment> \n <ect>
\t2 if ( return <identifiersep> message != null ) { \n \t3 logger . debug ( user <identifiersep> name + <string_literal> + return <identifiersep> message ) ; \n \t3 return false ; } \n \t2 logger . info ( user <identifiersep> name + <string_literal> ) ; \n <ect>
\t5 if ( old <identifiersep> connected != null ) { \n \t6 log . debug ( <string_literal> ) ; \n \t6 old <identifiersep> connected . dispose ( ) ; } \n \t4 } catch ( final exception e ) { \n <ect>
@ test ( expected = event <identifiersep> delivery <identifiersep> exception . class ) \n public void test <identifiersep> <identifier> <identifiersep> server <identifiersep> batch ( ) throws flume <identifiersep> exception , \n \t1 event <identifiersep> delivery <identifiersep> exception { \n \t1 rpc <identifiersep> test <identifiersep> utils . handler <identifiersep> batch <identifiersep> append <identifiersep> test ( new <identifier> <identifiersep> avro <identifiersep> handler ( ) ) ; \n <ect>
\t3 if ( rs . next ( ) ) { \n \t4 result = rs . get <identifiersep> int ( 1 ) ; \n \t3 } else { \n \t4 <comment> \n <ect>
\t2 properties override <identifiersep> components = new properties ( ) ; \n \t2 override <identifiersep> components . load ( is ) ; \n \t2 known <identifiersep> components . put <identifiersep> all ( override <identifiersep> components ) ; <comment> \n \t1 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception ignored ) { \n <ect>
\t2 file <identifiersep> system . close ( ) ; \n \t2 return null ; } \n \t1 } ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 <comment> \n \t3 pstmt = conn . prepare <identifiersep> statement ( <string_literal> ) ; \n \t3 rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( ! rs . next ( ) ) { \n <ect>
\t2 entities . persist ( image ) ; } \n \t2 db . commit ( ) ; \n \t2 return true ; \n \t1 } catch ( exception ex ) { \n <ect>
\t4 boolean changed = <identifier> . get <identifiersep> storage ( ) . <identifier> ( ) ; \n \t4 if ( changed ) \n \t5 update <identifiersep> status ( <identifier> ) ; \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t3 pstmt . set <identifiersep> string ( 1 , key ) ; \n \t3 int rows = pstmt . execute <identifiersep> update ( ) ; \n \t3 return rows > 0 ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 case <identifier> : \n \t3 code <identifiersep> max = <number_literal> ; \n \t3 <identifier> <identifiersep> state = <identifier> <identifiersep> state <identifiersep> code <identifiersep> char ; \n \t3 code <identifiersep> type = <number_literal> ; \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> endpoint ( ) ) ) { \n \t3 logger . debug ( <string_literal> , dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> endpoint ( ) ) ; \n \t3 client . set <identifiersep> endpoint ( dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> endpoint ( ) ) ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> region ( ) ) ) { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> status ( ) , equal <identifiersep> to ( cluster <identifiersep> health <identifiersep> status . green ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> active <identifiersep> primary <identifiersep> shards ( ) , equal <identifiersep> to ( num <identifiersep> shards . num <identifiersep> primaries ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> number <identifiersep> of <identifiersep> replicas ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> active <identifiersep> shards ( ) , equal <identifiersep> to ( num <identifiersep> shards . num <identifiersep> primaries * <number_literal> ) ) ; \n <ect>
\t3 <comment> \n \t3 return integer . parse <identifiersep> int ( pid <identifiersep> str ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n \t3 ex . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> name + <string_literal> ) ; \n \t2 virtual <identifiersep> machine <identifiersep> mo vm <identifiersep> mo = <identifier> <identifiersep> vm <identifiersep> cache . get ( vm <identifiersep> name ) ; \n \t2 if ( vm <identifiersep> mo != null ) { \n <ect>
\t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t7 <identifier> <identifiersep> log . warn ( <string_literal> + type + <string_literal> + auth + <string_literal> + packet ) ; \n \t6 break ; } \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 try { \n \t3 class < ? > c = module <identifiersep> factory . get <identifiersep> module <identifiersep> class <identifiersep> loader ( get <identifiersep> module ( ) ) . load <identifiersep> class ( get <identifiersep> class <identifiersep> name ( ) ) ; \n \t3 o = c . new <identifiersep> instance ( ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t5 if ( ! to <identifiersep> compare <identifiersep> with . matches ( value <identifiersep> list [ i ] ) ) key <identifiersep> result = true ; \n \t5 break ; \t2 \n \t4 default : \n \t5 return false ; } \n <ect>
\t5 expression <identifiersep> factory = ( expression <identifiersep> factory ) clazz . new <identifiersep> instance ( ) ; } \n \t3 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 log . debug ( <string_literal> , e ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 <identifier> <identifiersep> <identifier> <identifiersep> session . get <identifiersep> session <identifiersep> id ( ) , <identifier> <identifiersep> <identifier> <identifiersep> session . get <identifiersep> current <identifiersep> configuration <identifiersep> version ( ) , device <identifiersep> id , \n \t4 new <identifiersep> value ) ; \n \t2 string response = <identifier> <identifiersep> <identifier> <identifiersep> session . execute <identifiersep> request ( change <identifiersep> <identifier> <identifiersep> state <identifiersep> request , <string_literal> ) ; \n \t2 if ( ! response . contains ( <string_literal> ok \\ <string_literal> ) ) { \n <ect>
\t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 t . send <identifiersep> response <identifiersep> headers ( <number_literal> , - 1 ) ; \t1 <comment> \n \t2 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error e ) { \n <ect>
\t2 exception cause = exchange . get <identifiersep> exception ( ) ; \n \t2 if ( cause != null ) { \n \t3 log . warn ( <string_literal> + exchange , cause ) ; \n \t2 } else { \n <ect>
\t3 return original <identifiersep> string ; } } \n \t1 private static <identifier> <identifiersep> part <identifiersep> factory load <identifiersep> <identifier> ( xml <identifiersep> tag tag ) { \n \t2 string name = tag . get ( <string_literal> ) ; \n \t2 if ( name == null ) { \n <ect>
\t4 try { \n \t5 expected <identifiersep> value = method . invoke ( expected , empty <identifiersep> arguments ) ; \n \t5 actual <identifiersep> value = method . invoke ( actual , empty <identifiersep> arguments ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 if ( time + days . to <identifiersep> millis ( 1 ) < current <identifiersep> time <identifiersep> millis ( ) ) { \n \t3 <identifier> <identifiersep> store . remove ( o , get <identifiersep> expired <identifiersep> and <identifiersep> <identifier> <identifiersep> partition <identifiersep> key ( ) ) ; \n \t3 logger . warn ( message <identifiersep> format . format ( <string_literal> , o ) ) ; } } \n \t1 } catch ( object <identifiersep> store <identifiersep> exception e ) { \n <ect>
\t2 settings common <identifiersep> settings = settings . builder ( ) \n \t4 . put ( throttling <identifiersep> allocation <identifiersep> <identifier> . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> node <identifiersep> concurrent <identifiersep> incoming <identifiersep> recoveries <identifiersep> setting . get <identifiersep> key ( ) , 1 ) \n \t4 . put ( throttling <identifiersep> allocation <identifiersep> <identifier> . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> node <identifiersep> concurrent <identifiersep> outgoing <identifiersep> recoveries <identifiersep> setting . get <identifiersep> key ( ) , 1 ) \n \t4 . build ( ) ; \n <ect>
\t2 client . connect ( this . host , this . port ) ; \n \t2 if ( ! ftp <identifiersep> reply . is <identifiersep> positive <identifiersep> completion ( client . get <identifiersep> reply <identifiersep> code ( ) ) ) { \n \t3 throw new messaging <identifiersep> exception ( <string_literal> + \n \t5 this . host + <string_literal> + this . port + <string_literal> ) ; } \n <ect>
\t4 thread . set <identifiersep> name ( name ) ; \n \t4 thread . start ( ) ; \n \t4 <identifier> . add ( thread ) ; } \n \t3 int docs <identifiersep> per <identifiersep> indexer = random <identifiersep> int ( <number_literal> ) ; \n <ect>
\t1 logger logger = logger . get <identifiersep> logger ( <string_literal> ) ; \n \t1 int i = 0 ; \n \t1 logger . debug ( <string_literal> + i ++ ) ; \n \t1 logger . info ( <string_literal> + i ++ ) ; \n <ect>
\t3 if ( lock ( job <identifiersep> id ) ) { \n \t4 call ( store ) ; } \n \t3 else { \n \t4 queue <identifiersep> callable ( new coord <identifiersep> suspend <identifiersep> command ( job <identifiersep> id ) , lock <identifiersep> failure <identifiersep> requeue <identifiersep> interval ) ; \n <ect>
\t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . <identifier> + <string_literal> ) ; \n \t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . <identifier> + <string_literal> ) ; \n \t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . <identifier> + <string_literal> ) ; \n \t1 list < string > rs = run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . <identifier> + <string_literal> ) ; \n <ect>
\t2 field field ; \n \t2 try { \n \t3 field = cls . get <identifiersep> declared <identifiersep> field ( name ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 log . info ( <string_literal> + received <identifiersep> messages . size ( ) ) ; \n \t2 <comment> \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 message msg = <identifier> . receive ( <number_literal> ) ; \n <ect>
\t3 string config <identifiersep> path = module . get <identifiersep> configuration <identifiersep> path ( ) ; \n \t3 if ( m <identifiersep> cms . exists <identifiersep> resource ( config <identifiersep> path ) ) { \n \t4 try { \n \t5 cms <identifiersep> resource config <identifiersep> file = m <identifiersep> cms . read <identifiersep> resource ( config <identifiersep> path ) ; \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t5 page <identifiersep> object <identifiersep> class , e . get <identifiersep> message ( ) ) ; \n \t3 this <identifiersep> page <identifiersep> object <identifiersep> <identifier> <identifiersep> <identifier> ( page <identifiersep> object <identifiersep> class , <string_literal> ) ; \n \t2 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t4 return true ; } \n \t3 logger . debug ( <string_literal> , response <identifiersep> code ) ; \n \t3 if ( response <identifiersep> code == http <identifiersep> status . sc <identifiersep> internal <identifiersep> server <identifiersep> error ) { \n \t4 final string value = response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> reason <identifiersep> phrase ( ) ; \n <ect>
\t2 { \n \t3 queue < inet <identifiersep> address <identifiersep> and <identifiersep> port > requests = entry . get <identifiersep> value ( ) ; \n \t3 inet <identifiersep> address <identifiersep> and <identifiersep> port address = requests . poll ( ) ; \n \t3 validation <identifiersep> task first <identifiersep> task = new validation <identifiersep> task ( desc , address , now <identifiersep> in <identifiersep> sec , preview <identifiersep> kind ) ; \n <ect>
\t3 if ( message . is <identifiersep> asynchronous ( ) ) { \n \t4 return true ; } \n \t3 return task . get ( ) ; \n \t2 } catch ( final rejected <identifiersep> execution <identifiersep> exception e ) { \n <ect>
\t2 test test <identifiersep> task = project . tasks . test \n \t2 if ( test <identifiersep> task . <identifier> <identifiersep> on . is <identifiersep> empty ( ) ) { \n \t3 return ; } \n \t2 database <identifiersep> profile <identifiersep> plugin . database <identifiersep> <identifier> . each { database <identifiersep> profile profile - > \n <ect>
\t4 exec . execute ( exec <identifiersep> command ) ; \n \t4 log . info ( <string_literal> ) ; \n \t3 } catch ( exception <identifier> ) { \n \t4 log . error ( <identifier> ) ; \n <ect>
\t3 parser . parse ( stream , handler , metadata , context ) ; \n \t3 response = handler . to <identifiersep> string ( ) ; \n \t2 } catch ( exception e ) { \n \t3 response = e . to <identifiersep> string ( ) ; \n <ect>
\t5 logger . debug ( this . to <identifiersep> string ( ) + <string_literal> + payload ) ; \n \t5 if ( this . is <identifiersep> server ( ) ) { \n \t6 if ( payload . equals ( hello ) ) { \n \t7 try { \n <ect>
\t2 } catch ( socket <identifiersep> timeout <identifiersep> exception timeout <identifiersep> ex ) { \n \t3 log . info ( <string_literal> ) ; } \n \t2 client <identifiersep> socket . get <identifiersep> output <identifiersep> stream ( ) . write ( <number_literal> ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n <ect>
\t4 <identifier> <identifiersep> storage = component <identifiersep> locator . inject ( clazz ) ; \n \t3 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 throw new configuration <identifiersep> exception ( <string_literal> + value ) ; } } \n \t2 if ( ! <identifier> <identifiersep> storage . mkdirs ( <identifier> <identifiersep> parent ) ) { \n <ect>
\t1 boolean shutting <identifiersep> down <identifiersep> le = false ; \n \t1 @ override \n \t1 public void run ( ) { \n \t2 update <identifiersep> thread <identifiersep> name ( ) ; \n <ect>
\t2 return null ; } \n \t1 @ override \n \t1 public pair < string , integer > get <identifiersep> vnc <identifiersep> port ( virtual <identifiersep> machine vm ) { \n \t2 if ( vm . get <identifiersep> host <identifiersep> id ( ) == null ) { \n <ect>
\t3 <identifier> <identifiersep> timer . schedule ( <identifier> <identifiersep> startup , <identifier> <identifiersep> startup <identifiersep> wait ) ; } \n \t2 try { \n \t3 link . send ( request . to <identifiersep> bytes ( ) ) ; \n \t2 } catch ( final closed <identifiersep> channel <identifiersep> exception e ) { \n <ect>
\t3 catch ( closed <identifiersep> channel <identifiersep> exception e ) { \n \t4 logger . warn ( string . format ( <string_literal> , file . get <identifiersep> absolute <identifiersep> path ( ) ) ) ; \n \t4 lock <identifiersep> acquired = false ; } \n \t3 catch ( <identifier> <identifiersep> file <identifiersep> lock <identifiersep> exception e ) { \n <ect>
\t5 success <identifiersep> count . increment ( ) ; \n \t5 pipeline <identifiersep> data . get <identifiersep> responses ( ) . add ( response ) ; \n \t5 failure <identifiersep> detector . record <identifiersep> success ( response . get <identifiersep> node ( ) , response . get <identifiersep> request <identifiersep> time ( ) ) ; \n <ect>
\t3 host <identifiersep> id = user <identifiersep> stat . get <identifiersep> device <identifiersep> id ( ) ; } \n \t2 usage <identifiersep> network <identifiersep> vo usage <identifiersep> network <identifiersep> vo = new usage <identifiersep> network <identifiersep> vo ( user <identifiersep> stat . get <identifiersep> account <identifiersep> id ( ) , user <identifiersep> stat . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , host <identifiersep> id , user <identifiersep> stat . get <identifiersep> device <identifiersep> type ( ) , user <identifiersep> stat . get <identifiersep> network <identifiersep> id ( ) , bytes <identifiersep> sent , bytes <identifiersep> received , \n \t4 user <identifiersep> stat . get <identifiersep> agg <identifiersep> bytes <identifiersep> received ( ) , user <identifiersep> stat . get <identifiersep> agg <identifiersep> bytes <identifiersep> sent ( ) , timestamp ) ; \n <ect>
\t1 private weighted <identifiersep> multigraph < node , default <identifiersep> link > <identifier> ( weighted <identifiersep> multigraph < node , default <identifiersep> link > <identifier> ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 <identifier> <identifiersep> minimum <identifiersep> <identifier> <identifiersep> tree < node , default <identifiersep> link > <identifier> = \n \t4 new <identifier> <identifiersep> minimum <identifiersep> <identifier> <identifiersep> tree < > ( <identifier> ) ; \n <ect>
\t1 try { \n \t2 <comment> \n \t2 result <identifiersep> stream = http <identifiersep> url <identifiersep> connection . get <identifiersep> input <identifiersep> stream ( ) ; \n \t2 buffered <identifiersep> reader reader = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( result <identifiersep> stream ) ) ; \n <ect>
\t1 public overthere <identifiersep> process start <identifiersep> process ( final cmd <identifiersep> line cmd ) { \n \t2 check <identifiersep> not <identifiersep> null ( cmd , <string_literal> ) ; \n \t2 check <identifiersep> argument ( cmd . get <identifiersep> arguments ( ) . size ( ) > 0 , <string_literal> ) ; \n \t2 final string <identifier> <identifiersep> cmd = cmd . to <identifiersep> command <identifiersep> line ( os , true ) ; \n <ect>
\t3 <comment> \n \t3 if ( ! lifecycle <identifiersep> state . <identifier> . equals ( child . get <identifiersep> state ( ) ) ) { \n \t4 child . destroy ( ) ; } \n \t2 } catch ( lifecycle <identifiersep> exception e ) { \n <ect>
\t3 return new <identifier> <identifiersep> volume <identifiersep> answer ( cmd , false , error ) ; \n \t2 } finally { \n \t3 try { \n \t4 if ( use <identifiersep> worker <identifiersep> vm ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 return new check <identifiersep> on <identifiersep> host <identifiersep> answer ( cmd , true , <string_literal> ) ; } \n \t3 return new check <identifiersep> on <identifiersep> host <identifiersep> answer ( cmd , null , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 return <identifier> <identifiersep> <identifier> ; } \n \t1 public integer height ( ) { \n \t2 if ( <identifier> <identifiersep> height == null ) { \n \t3 <identifier> <identifiersep> height = int <identifiersep> value <identifiersep> for <identifiersep> binding ( <string_literal> , integer . value <identifiersep> of ( <number_literal> ) ) ; \n <ect>
\t4 log . warn ( <string_literal> , \n \t6 job <identifiersep> uuid , \n \t6 task . get <identifiersep> task <identifiersep> id ( ) , \n \t6 host . get <identifiersep> host ( ) ) ; } \n <ect>
\t6 break ; <comment> \n \t4 } finally { \n \t5 <identifier> . close ( ) ; } \n \t3 } catch ( throwable t ) { \n <ect>
\t8 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n \t9 <identifier> <identifiersep> log . warn ( <string_literal> + test <identifiersep> addr ) ; } } \n \t5 } catch ( unknown <identifiersep> host <identifiersep> exception uhe ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t5 batch . close ( ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> + key + <string_literal> + repository <identifiersep> name , e ) ; } } \n \t1 public void confirm ( final camel <identifiersep> context camel <identifiersep> context , final string exchange <identifiersep> id ) { \n <ect>
\t5 logger . warn ( <string_literal> + <identifier> . get <identifiersep> absolute <identifiersep> path ( ) + <string_literal> ) ; \n \t5 system . exit ( - 1 ) ; } } } \n \t2 final string context <identifiersep> path = configurations . get ( <string_literal> , <string_literal> ) ; \n \t2 final int max <identifiersep> form <identifiersep> content <identifiersep> size = configurations . get <identifiersep> integer ( <string_literal> , <number_literal> ) ; \n <ect>
\t3 for ( string file <identifiersep> name : files <identifiersep> to <identifiersep> delete ) { \n \t4 file old <identifiersep> plugin <identifiersep> file = new file ( plugin <identifiersep> directory , file <identifiersep> name . trim ( ) ) ; \n \t4 if ( old <identifiersep> plugin <identifiersep> file . exists ( ) ) { \n \t5 if ( ! old <identifiersep> plugin <identifiersep> file . delete ( ) ) { \n <ect>
\t8 response <identifiersep> constructor . send <identifiersep> response ( this . coordinator <identifiersep> perf <identifiersep> stats , \n <number_literal> true , \n <number_literal> this . request <identifiersep> object . get <identifiersep> request <identifiersep> origin <identifiersep> time <identifiersep> in <identifiersep> ms ( ) ) ; \n <ect>
\t3 column <identifiersep> family <identifiersep> store cfs = keyspace . open ( t . keyspace ) . get <identifiersep> column <identifiersep> family <identifiersep> store ( t . column <identifiersep> family ) ; \n \t3 cfs . truncate <identifiersep> blocking ( ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t2 } catch ( general <identifiersep> security <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t3 throw new io <identifiersep> exception ( <string_literal> , e ) ; \n \t2 } catch ( io <identifiersep> exception e ) { <comment> \n <ect>
\t1 private void clear <identifiersep> cache ( final http <identifiersep> host host , final http <identifiersep> client <identifiersep> context client <identifiersep> context ) { \n \t2 final auth <identifiersep> cache auth <identifiersep> cache = client <identifiersep> context . get <identifiersep> auth <identifiersep> cache ( ) ; \n \t2 if ( auth <identifiersep> cache != null ) { \n <ect>
\t6 <identifier> . cb . on <identifiersep> failure ( ie , <identifier> , context ) ; \n \t6 return true ; } \n \t4 } , native <identifiersep> thread . norm <identifiersep> priority + 1 ) ; \n \t3 } catch ( persistence <identifiersep> disabled <identifiersep> exception e1 ) { \n <ect>
\t3 return ; } \n \t2 if ( user . color != null ) { \n \t3 <identifier> . color <identifiersep> map . put ( user . username , user . color ) ; } \n \t2 status <identifiersep> message ( string . format ( <string_literal> , user . username , user . platform , user . client ) ) ; \n <ect>
\t4 if ( zones <identifiersep> satisfied >= ( pipeline <identifiersep> data . get <identifiersep> zones <identifiersep> required ( ) + 1 ) ) { \n \t5 pipeline . add <identifiersep> event ( complete <identifiersep> event ) ; \n \t4 } else { \n <ect>
\t2 logger . debug ( <string_literal> , global <identifiersep> provider <identifiersep> id ) ; \n \t2 final map < string , multifactor <identifiersep> authentication <identifiersep> provider > provider <identifiersep> map = \n \t4 multifactor <identifiersep> authentication <identifiersep> utils . get <identifiersep> available <identifiersep> multifactor <identifiersep> authentication <identifiersep> providers ( this . application <identifiersep> context ) ; \n \t2 if ( provider <identifiersep> map == null || provider <identifiersep> map . is <identifiersep> empty ( ) ) { \n <ect>
\t1 domain <identifiersep> id = ( string ) bundle . get <identifiersep> property ( <string_literal> ) ; } \n \t1 if ( domain <identifiersep> id == null ) { \n \t1 throw new platform <identifiersep> import <identifiersep> exception ( <string_literal> ) ; } \n \t1 try { \n <ect>
\t2 } catch ( exception e ) { \n \t3 <comment> \n \t3 if ( e . get <identifiersep> message ( ) != null ) { \n \t4 this . context . put ( <string_literal> , e . get <identifiersep> message ( ) ) ; } \n <ect>
\t2 try { \n \t3 synchronized ( reconnect <identifiersep> mutex ) { \n \t4 <comment> \n \t4 while ( connected <identifiersep> count < min <identifiersep> ack <identifiersep> count && ! <identifier> && connection <identifiersep> failure == null ) { \n <ect>
\t4 <identifier> <identifiersep> alloc <identifiersep> proxy <identifiersep> lock . unlock ( ) ; } \n \t2 } else { \n \t3 s <identifiersep> logger . error ( <string_literal> + vm <identifiersep> id + <string_literal> ) ; } \n \t2 if ( proxy == null ) { \n <ect>
\t3 invoke ( channel , constants . on <identifiersep> connect <identifiersep> key ) ; } \n \t2 @ override \n \t2 public void disconnected ( channel channel ) throws remoting <identifiersep> exception { \n <ect>
<comment> \n \t1 @ override \n \t1 public void finish <identifiersep> initialization ( ) { \n \t2 initialize <identifiersep> framework <identifiersep> from <identifiersep> system <identifiersep> properties ( ) ; \n <ect>
\t3 max <identifiersep> len = optimizer <identifiersep> options . <identifier> <identifiersep> format <identifiersep> max <identifiersep> sample <identifiersep> len . default <identifiersep> value ( ) ; \n \t3 log . error ( <string_literal> + max <identifiersep> len + ' . ' ) ; \n \t2 } else if ( max <identifiersep> len < default <identifiersep> read <identifiersep> buffer <identifiersep> size ) { \n \t3 max <identifiersep> len = default <identifiersep> read <identifiersep> buffer <identifiersep> size ; \n <ect>
\t4 <comment> \n \t4 client . get <identifiersep> zookeeper <identifiersep> client ( ) . get <identifiersep> zoo <identifiersep> keeper ( ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t1 cmd = cmd + [ name ] \n \t1 logger . info ( <string_literal> . format ( name , shell . string <identifiersep> cmd <identifiersep> from <identifiersep> args <identifiersep> list ( cmd ) ) ) \n \t1 shell . repository <identifiersep> manager <identifiersep> executor ( cmd , self . properties , context ) \n \t1 else : \n <ect>
\t2 intervals . remove <identifiersep> all ( min <identifiersep> merge . sub <identifiersep> intervals ) ; \n \t2 intervals . add ( min <identifiersep> merge ) ; \n \t2 min <identifiersep> merge . merge <identifiersep> order = last <identifiersep> merge <identifiersep> order + 1 ; \n <ect>
\t3 if ( response != null ) { \n \t4 try { \n \t5 link . send ( response . to <identifiersep> bytes ( ) ) ; \n \t4 } catch ( final closed <identifiersep> channel <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 tm . commit ( ) ; \n \t3 fail ( <string_literal> ) ; } \n \t2 catch ( rollback <identifiersep> exception expected ) { \n <ect>
\t2 grid <identifiersep> cache <identifiersep> optimistic <identifiersep> check <identifiersep> prepared <identifiersep> tx <identifiersep> response < k , v > res = \n \t3 new grid <identifiersep> cache <identifiersep> optimistic <identifiersep> check <identifiersep> prepared <identifiersep> tx <identifiersep> response < > ( req . version ( ) , req . future <identifiersep> id ( ) , req . mini <identifiersep> id ( ) , prepared ) ; \n \t2 try { \n <ect>
<comment> \n \t1 @ override \n \t1 public void <identifier> ( ) { \n \t2 try { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 if ( ids <identifiersep> iter instanceof closeable ) { \n \t5 try { \n \t6 <identifier> . close ( ( closeable ) ids <identifiersep> iter , false ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t3 <identifier> <identifiersep> agent <identifiersep> mgr . send ( host . get <identifiersep> id ( ) , cmd ) ; \n \t2 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t2 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
@ test \n public void reset <identifiersep> test ( ) throws io <identifiersep> exception { \n \t1 file temp <identifiersep> file = new <identifiersep> test <identifiersep> file ( true ) ; \n \t1 string target = temp <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ; \n <ect>
\t3 integer tmp = map != null ? ( integer ) map . get ( <string_literal> ) : null ; \n \t3 if ( tmp != null ) \n \t4 <identifier> <identifiersep> size = tmp ; \n \t3 if ( <identifier> <identifiersep> size > 0 && max <identifiersep> bytes % <identifier> <identifiersep> size != 0 ) \n <ect>
\t3 convert <identifiersep> <identifier> <identifiersep> to <identifiersep> json <identifiersep> file ( schema , <identifier> , json ) ; \n \t3 schema = basedir + <string_literal> + fn + <string_literal> ; \n \t3 json = basedir + <string_literal> + fn + <string_literal> ; \n \t3 avro = basedir + <string_literal> + fn + <string_literal> ; \n <ect>
\t1 try { \n \t2 exceptions <identifiersep> cache . get ( cache <identifiersep> key , new callable < throwable > ( ) { \n \t2 @ override \n \t2 public throwable call ( ) { \n <ect>
\t2 if ( flags == null ) { \n \t3 flags = new ns <identifiersep> mutable <identifiersep> dictionary < > ( ) ; } \n \t2 synchronized ( flags ) { \n \t3 if ( ! flags . contains <identifiersep> key ( thread ) ) { \n <ect>
<comment> \n \t1 private synchronized static void shutdown <identifiersep> h <identifiersep> base ( h <identifiersep> base <identifiersep> status stat ) { \n <ect>
\t1 throws io <identifiersep> exception \n { \n \t1 if ( args . length < <number_literal> ) \n \t1 { \n <ect>
\t3 cloud <identifiersep> stack <identifiersep> info <identifiersep> response resp = get <identifiersep> api ( ) . <identifier> <identifiersep> ip <identifiersep> address ( cloud <identifiersep> ip . get <identifiersep> id ( ) ) ; \n \t3 if ( resp != null ) { \n \t4 return resp . get <identifiersep> success ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 set <identifiersep> source <identifiersep> reporter <identifiersep> bind <identifiersep> props ( source <identifiersep> reporter <identifiersep> bind <identifiersep> properties ) ; \n \t2 instance . init ( ) ; } \n \t1 private static void set <identifiersep> system <identifiersep> cube <identifiersep> sink ( sink system <identifiersep> cube <identifiersep> sink ) { \n \t2 if ( system <identifiersep> cube <identifiersep> sink == null ) { \n <ect>
\t2 log . info ( msg ( <string_literal> ) + <string_literal> + ( bitstream . get <identifiersep> format ( context ) != null ? bitstream . get <identifiersep> format ( context ) \n <number_literal> . get <identifiersep> id ( ) : <string_literal> ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> \n \t5 + bitstream . get <identifiersep> user <identifiersep> format <identifiersep> description ( ) ) ; \n <ect>
public boolean stop ( ) { \n \t1 if ( <identifier> <identifiersep> server != null ) { \n \t1 try { \n \t2 logger . debug ( <string_literal> ) ; <comment> \n <ect>
\t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . primary <identifiersep> shard ( ) . state ( ) , equal <identifiersep> to ( initializing ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . replica <identifiersep> shards ( ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . replica <identifiersep> shards ( ) . get ( 0 ) . state ( ) , equal <identifiersep> to ( unassigned ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . replica <identifiersep> shards ( ) . get ( 0 ) . current <identifiersep> node <identifiersep> id ( ) , null <identifiersep> value ( ) ) ; } \n <ect>
\t3 } , stat ) ; \n \t3 config <identifiersep> acquired . count <identifiersep> down ( ) ; \n \t3 reload <identifiersep> config <identifiersep> on <identifiersep> poll = false ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 return write ( data , false ) ; } \n \t1 @ override \n \t1 public atmosphere <identifiersep> response write ( byte [ ] data , boolean write <identifiersep> using <identifiersep> original <identifiersep> response ) { \n \t2 if ( data == null ) { \n <ect>
\t3 # create offering \n \t3 offering = network <identifiersep> offering . create ( \n \t4 self . apiclient , services , <identifier> = false ) \n \t3 self . assert <identifiersep> is <identifiersep> not <identifiersep> none ( offering , <string_literal> ) \n <ect>
\t4 <identifier> <identifiersep> value <identifiersep> vs . append ( <string_literal> ) . append ( scale <identifiersep> width ) . append ( ' : ' ) . append ( scale <identifiersep> height ) ; } \n \t3 <comment> \n \t3 if ( int <identifiersep> <identifier> > 0 || int <identifiersep> <identifier> > 0 ) { \n \t4 <identifier> <identifiersep> value <identifiersep> complete . append ( <identifier> <identifiersep> value <identifiersep> <identifier> <identifiersep> <identifier> ) . append ( <identifier> <identifiersep> value <identifiersep> <identifier> <identifiersep> middle ) . append ( <string_literal> ) ; \n <ect>
\t2 <identifier> <identifiersep> client <identifiersep> manager tracker ; \n \t2 synchronized ( this ) { \n \t3 if ( <identifier> <identifiersep> <identifier> <identifiersep> client <identifiersep> manager == null ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t6 next <identifiersep> byte = serial <identifiersep> port . get <identifiersep> input <identifiersep> stream ( ) . read ( ) ; \n \t6 if ( next <identifiersep> byte == - 1 ) { \n \t7 continue ; } \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 file geo <identifiersep> file = new file ( context . get <identifiersep> base <identifiersep> dir ( ) , <identifier> <identifiersep> dir <identifiersep> default ) ; \n \t2 geo <identifiersep> file = new file ( geo <identifiersep> file , <identifier> <identifiersep> file <identifiersep> default ) ; \n \t2 if ( ! geo <identifiersep> file . exists ( ) ) { \n \t3 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 public void end <identifiersep> write ( ) { \n \t2 data <identifiersep> service . finish <identifiersep> txn ( write ) ; \n \t2 active <identifiersep> mode = null ; \n \t2 if ( transactional . is <identifiersep> in <identifiersep> transaction ( ) ) { \n <ect>
\t1 throw new job <identifiersep> execution <identifiersep> exception ( <string_literal> , ex ) ; } \n \t1 bucket bucket ; \n \t1 <comment> \n \t1 if ( rules != null && rules . size ( ) > 0 ) { \n <ect>
\t9 proxy <identifiersep> writes <identifiersep> done . set ( true ) ; \n \t9 if ( rebalancing <identifiersep> complete . get ( ) ) { \n \t10 break ; } \n \t8 } catch ( invalid <identifiersep> metadata <identifiersep> exception e ) { \n <ect>
\t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( started ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( unassigned ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n <ect>
\t3 log ( <string_literal> + ie . get <identifiersep> message ( ) ) ; \n \t3 return false ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t3 response . set <identifiersep> key <identifiersep> name ( resp . get <identifiersep> name ( ) ) ; \n \t3 response . set <identifiersep> private <identifiersep> key ( resp . get <identifiersep> <identifier> ( ) ) ; \n \t3 return response ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public void delete <identifiersep> object ( string path ) { \n \t2 try { \n \t3 cluster <identifiersep> state . delete <identifiersep> node ( path ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 private static space parse <identifiersep> space ( string key , string yaml ) { \n \t2 try { \n \t3 return kubernetes <identifiersep> helper . load <identifiersep> yaml ( yaml , space . class ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public static void db <identifiersep> home <identifiersep> sys <identifiersep> prop ( ) throws exception { \n \t2 system . set <identifiersep> property ( <string_literal> , new file ( io <identifiersep> helper . get <identifiersep> default <identifiersep> data <identifiersep> directory ( ) ) . get <identifiersep> canonical <identifiersep> path ( ) ) ; } \n \t1 public void repeat ( ) throws exception { \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n <ect>
\t1 <comment> \n \t1 session session ; \n \t1 if ( transaction <identifiersep> manager == null || ! transaction <identifiersep> manager . is <identifiersep> creating <identifiersep> transaction ( ) ) { \n <ect>
\t4 logger . debug ( <string_literal> , authentication . get <identifiersep> principal ( ) , loc ) ; \n \t4 return <identifier> <identifiersep> risk <identifiersep> score ; } \n \t3 return get <identifiersep> final <identifiersep> <identifier> <identifiersep> score ( count , events . size ( ) ) ; } \n \t2 final string remote <identifiersep> addr = client <identifiersep> info <identifiersep> holder . get <identifiersep> client <identifiersep> info ( ) . get <identifiersep> client <identifiersep> ip <identifiersep> address ( ) ; \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 final map < string , multifactor <identifiersep> authentication <identifiersep> provider > providers = \n \t4 multifactor <identifiersep> authentication <identifiersep> utils . get <identifiersep> available <identifiersep> multifactor <identifiersep> authentication <identifiersep> providers ( application <identifiersep> context ) ; \n \t2 if ( providers == null || providers . is <identifiersep> empty ( ) ) { \n <ect>
\t2 check <identifiersep> argument ( task != null , <string_literal> ) ; \n \t2 check <identifiersep> argument ( ( task . get <identifiersep> state ( ) != job <identifiersep> task <identifiersep> state . busy ) && ( task . get <identifiersep> state ( ) != job <identifiersep> task <identifiersep> state . allocated ) && \n \t5 ( task . get <identifiersep> state ( ) != job <identifiersep> task <identifiersep> state . queued ) , <string_literal> ) ; \n \t2 add <identifiersep> to <identifiersep> task <identifiersep> queue ( task . get <identifiersep> job <identifiersep> key ( ) , priority , to <identifiersep> queue <identifiersep> head ) ; \n <ect>
\t1 public void fatal <identifiersep> error ( transformer <identifiersep> exception e ) throws transformer <identifiersep> exception { \n \t1 log . error ( <string_literal> + e . get <identifiersep> message <identifiersep> and <identifiersep> location ( ) , e ) ; \n \t1 throw e ; } \n \t1 public void warning ( transformer <identifiersep> exception e ) throws transformer <identifiersep> exception { \n <ect>
\t2 for ( class < ? > clazz : models ) { \n \t3 if ( model . contains <identifiersep> key ( clazz . get <identifiersep> name ( ) ) ) { \n \t4 object obj = model . get ( clazz . get <identifiersep> name ( ) ) ; \n <ect>
\t5 . get <identifiersep> local <identifiersep> socket <identifiersep> address ( new inet <identifiersep> socket <identifiersep> address ( \n \t6 <identifier> <identifiersep> destination , random <identifiersep> addr <identifiersep> <identifier> <identifiersep> port ) ) ; } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t3 . get <identifiersep> username ( ) , ssh . get <identifiersep> host <identifiersep> address ( ) ) ; \n \t1 if ( command . ends <identifiersep> with ( <string_literal> ) || command . ends <identifiersep> with ( <string_literal> ) || command . ends <identifiersep> with ( <string_literal> ) ) \n \t2 logger . trace ( <string_literal> , statement ) ; \n \t1 else \n <ect>
\t1 if ( shutdown <identifiersep> hook <identifiersep> manager . is <identifiersep> shutdown <identifiersep> in <identifiersep> progress ( ) ) { \n \t2 log . warn ( <string_literal> , t , e ) ; \n \t1 } else if ( e instanceof error ) { \n \t2 try { \n <ect>
<number_literal> search <identifiersep> service . class ) \n <number_literal> . create <identifiersep> location <identifiersep> query <identifiersep> for <identifiersep> <identifier> <identifiersep> items ( context ) ) ; } \n \t4 solr <identifiersep> query . add <identifiersep> filter <identifiersep> query ( resource <identifiersep> query . to <identifiersep> string ( ) ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t5 case <string_literal> : \n \t6 decoder = base64 . get <identifiersep> mime <identifiersep> decoder ( ) ; \n \t6 break ; \n \t5 default : \n <ect>
\t5 timed <identifiersep> out = true ; \n \t5 log . error ( <string_literal> ) ; \n \t5 throw new interrupted <identifiersep> exception ( <string_literal> ) ; } \n \t4 if ( thread . current <identifiersep> thread ( ) . is <identifiersep> interrupted ( ) ) { \n <ect>
\t3 final pf <identifiersep> auth <identifiersep> params params = authentication <identifiersep> request <identifiersep> builder . build ( principal , c ) ; \n \t3 final pf <identifiersep> auth <identifiersep> result r = azure <identifiersep> authenticator <identifiersep> instance . authenticate ( params ) ; \n \t3 if ( r . get <identifiersep> authenticated ( ) ) { \n \t4 return create <identifiersep> handler <identifiersep> result ( c , principal <identifiersep> factory . create <identifiersep> principal ( principal . get <identifiersep> id ( ) ) ) ; } \n <ect>
\t5 logger . debug ( <string_literal> , proxy . get <identifiersep> proxy <identifiersep> port ( ) ) ; \n \t5 connector . set <identifiersep> proxy <identifiersep> port ( proxy . get <identifiersep> proxy <identifiersep> port ( ) ) ; } \n \t4 connector . add <identifiersep> upgrade <identifiersep> protocol ( new <identifier> ( ) ) ; \n \t4 proxy . get <identifiersep> attributes ( ) . for <identifiersep> each ( connector : : set <identifiersep> attribute ) ; \n <ect>
\t6 if ( <string_literal> . equals ( mod . name ( ) ) ) { \n \t7 modifier = mod ; \n \t7 break ; } } } \n \t4 if ( modifier != null ) { \n <ect>
\t2 if ( this . xml <identifiersep> http <identifiersep> for <identifiersep> commands <identifiersep> and <identifiersep> results . ready <identifiersep> state == <number_literal> ) { \n \t3 <comment> \n \t3 if ( this . xml <identifiersep> http <identifiersep> for <identifiersep> commands <identifiersep> and <identifiersep> results . status == <number_literal> ) { \n \t4 if ( this . xml <identifiersep> http <identifiersep> for <identifiersep> commands <identifiersep> and <identifiersep> results . response <identifiersep> text == <string_literal> ) { \n <ect>
\t2 mark <identifiersep> dirty ( ) ; \n \t2 if ( <identifier> . get <identifiersep> <identifier> <identifiersep> id ( ) == entity <identifiersep> <identifier> <identifiersep> base . null <identifiersep> <identifier> <identifiersep> id ) { \n \t3 ( ( entity <identifiersep> <identifier> ) <identifier> ) . set <identifiersep> unique <identifiersep> <identifier> <identifiersep> id ( get <identifiersep> next <identifiersep> <identifier> <identifiersep> id ( ) ) ; } \n \t2 if ( <identifier> <identifiersep> loaded . contains <identifiersep> item ( <identifier> . get <identifiersep> <identifier> <identifiersep> id ( ) ) ) { \n <ect>
\t2 string json <identifiersep> response ; \n \t2 if ( is <identifiersep> scope <identifiersep> variable ( ) ) { \n \t3 json <identifiersep> response = vars . get ( get <identifiersep> variable <identifiersep> name ( ) ) ; \n <ect>
\t3 volume <identifiersep> manager . remove ( volume <identifiersep> manager . get <identifiersep> volume <identifiersep> info ( volume <identifiersep> id ) ) ; \n \t3 volume <identifiersep> manager . finish ( ) ; \n \t3 break ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error e ) { \n \t3 if ( buffer . length == 0 ) { \n \t4 logger . trace ( <string_literal> + formatter . format ( new <identifiersep> size ) + <string_literal> ) ; \n \t3 } else { \n <ect>
\t5 logger . trace ( <string_literal> , \n \t7 system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ) ; } \n \t3 } catch ( exception e ) { \n \t4 try { \n <ect>
\t2 log . debug ( <string_literal> , e ) ; \n \t2 writer . write ( resource <identifiersep> content ) ; \n \t2 <comment> \n \t1 } else { \n <ect>
\t2 offset += journal . batch <identifiersep> control <identifiersep> record <identifiersep> size ; \n \t2 if ( fill <identifiersep> length >= <number_literal> ) { \n \t3 offset += <number_literal> ; <comment> \n \t3 offset += 1 ; <comment> \n <ect>
\t4 result <identifiersep> set rs <identifiersep> tags = <identifier> . execute <identifiersep> query ( ) ; \n \t4 if ( rs <identifiersep> tags . next ( ) ) { \n \t5 boolean is <identifiersep> first <identifiersep> physical <identifiersep> ntwk = true ; \n \t5 do { \n <ect>
\t3 throw new illegal <identifiersep> state <identifiersep> exception ( \n \t5 string . format ( <string_literal> , this <identifiersep> level , \n \t7 <identifier> , this <identifiersep> cuboid <identifiersep> num ) ) ; \n \t2 } else { \n <ect>
\t3 session session = connection . create <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n \t3 session . create <identifiersep> producer ( composite <identifiersep> send <identifiersep> to ) . send ( session . create <identifiersep> text <identifiersep> message ( <string_literal> ) ) ; \n \t3 for ( active <identifiersep> mq <identifiersep> destination dest : composite <identifiersep> send <identifiersep> to . get <identifiersep> composite <identifiersep> destinations ( ) ) { \n \t4 message message = session . create <identifiersep> consumer ( dest ) . receive ( <number_literal> ) ; \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> target <identifiersep> adaptor = ( jdbc <identifiersep> adaptor ) eo <identifiersep> adaptor . adaptor <identifiersep> with <identifiersep> name ( <string_literal> ) ; } \n \t2 catch ( java . lang . illegal <identifiersep> state <identifiersep> exception e ) { \n \t3 log . info ( <string_literal> ) ; \n <ect>
\t4 new thread ( ( ) - > { \n \t5 try ( file <identifiersep> writer writer = new file <identifiersep> writer ( new file ( file <identifiersep> utils . get <identifiersep> user <identifiersep> folder ( ) , default <identifiersep> server <identifiersep> runner . pid <identifiersep> file ) , false ) ) { \n \t6 writer . write ( <string_literal> + <identifier> <identifiersep> file <identifiersep> path ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t4 this . job <identifiersep> runner . queue ( new persistent <identifiersep> job ( ) { \n \t5 @ override \n \t5 public boolean run ( client <identifiersep> context context ) { \n \t6 system . out . println ( <string_literal> + split <identifiersep> file <identifiersep> fetcher <identifiersep> storage . this ) ; \n <ect>
\t1 delegation <identifiersep> key key <identifiersep> with <identifiersep> seq = new delegation <identifiersep> key ( key <identifiersep> seq , key . get <identifiersep> expiry <identifiersep> date ( ) , key . get <identifiersep> key ( ) ) ; \n \t1 string key <identifiersep> str = encode <identifiersep> writable ( key <identifiersep> with <identifiersep> seq ) ; \n \t1 this . token <identifiersep> store . update <identifiersep> master <identifiersep> key ( key <identifiersep> seq , key <identifiersep> str ) ; \n \t1 decode <identifiersep> writable ( key , key <identifiersep> str ) ; \n <ect>
\t2 return null ; } \n \t1 public eo <identifiersep> enterprise <identifiersep> object object <identifiersep> at <identifiersep> index ( int index ) { \n \t2 eo <identifiersep> enterprise <identifiersep> object result = null ; \n <ect>
\t1 for ( map . entry < region <identifiersep> and <identifiersep> name , running <identifiersep> instance > entry : instances <identifiersep> by <identifiersep> id . entry <identifiersep> set ( ) ) { \n \t2 region <identifiersep> and <identifiersep> name id = entry . get <identifiersep> key ( ) ; \n \t2 running <identifiersep> instance instance = entry . get <identifiersep> value ( ) ; \n \t2 try { \n <ect>
\t8 register <identifiersep> family ( family <identifiersep> name , full <identifiersep> name , null ) ; \n \t8 break ; } } } } } \n \t3 else if ( path . to <identifiersep> lower <identifiersep> case ( ) . ends <identifiersep> with ( <string_literal> ) ) { \n \t4 if ( alias != null ) \n <ect>
\t2 <comment> \n \t2 if ( <identifier> <identifiersep> timeout < = 0 ) { \n \t3 <identifier> <identifiersep> timeout = ( long ) ( rpc <identifiersep> timeout * 0 . <number_literal> ) ; } \n \t2 query <identifiersep> context . check <identifiersep> millis <identifiersep> before <identifiersep> deadline ( ) ; \n <ect>
\t1 public void tear <identifiersep> down ( ) throws exception { \n \t2 try { \n \t3 stop <identifiersep> broker ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
public class mapper <identifiersep> date <identifiersep> test { \n private static final logger log = logger . get <identifiersep> logger ( mapper <identifiersep> date <identifiersep> test . class ) ; \n @ test \n public void test <identifiersep> mapper <identifiersep> date <identifiersep> epoch ( ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 rmi <identifiersep> server <identifiersep> socket <identifiersep> factory <identifier> ; \n \t4 if ( rc . get <identifiersep> rmi <identifiersep> host ( ) . length ( ) > 0 ) { \n <ect>
\t1 private class <identifier> <identifiersep> listener implements ip <identifiersep> connection . <identifier> <identifiersep> listener { \n \t2 @ override \n \t2 public void <identifier> ( string uid , string connected <identifiersep> uid , char position , short [ ] hardware <identifiersep> version , \n \t4 short [ ] <identifier> <identifiersep> version , int device <identifiersep> identifier , short enumeration <identifiersep> type ) { \n <ect>
\t3 return false ; } } \n \t1 @ override \n \t1 public boolean tf <identifiersep> <identifier> <identifiersep> simple <identifiersep> <identifier> ( string uid , integer min , integer max , integer value ) { \n \t2 if ( ecosystem == null ) { \n <ect>
\t3 txn = entity <identifiersep> manager . get <identifiersep> transaction ( ) ; \n \t3 txn . begin ( ) ; \n \t3 person person = new person ( <string_literal> ) ; \n \t3 entity <identifiersep> manager . persist ( person ) ; \n <ect>
\t2 long id = block . get <identifiersep> id ( ) ; \n \t2 log ( <string_literal> , id ) ; \n \t2 if ( read <identifiersep> cache . contains <identifiersep> key ( id ) ) \n \t2 { \n <ect>
\t4 case status . status <identifiersep> no <identifiersep> transaction : \n \t5 log . debug ( <string_literal> ) ; \n \t5 break ; \n \t4 case status . status <identifiersep> prepared : \n <ect>
\t4 fos . write ( name . get <identifiersep> bytes ( ) ) ; \n \t4 fos . write ( <string_literal> . get <identifiersep> bytes ( ) ) ; } \n \t3 fos . close ( ) ; \n \t3 os . close ( ) ; \n <ect>
\t4 system . set <identifiersep> property \n \t5 ( javax . naming . context . initial <identifiersep> context <identifiersep> factory , \n \t5 <string_literal> ) ; \n \t3 } else { \n <ect>
\t1 args . add ( <string_literal> ) ; \n \t1 args . add ( <string_literal> ) ; \n \t1 args . add ( <string_literal> ) ; \n \t1 args . add ( <string_literal> ) ; \n <ect>
\t1 public void do <identifiersep> reduce ( byte <identifiersep> array <identifiersep> writable key , iterable < byte <identifiersep> array <identifiersep> writable > values , context context ) throws io <identifiersep> exception , interrupted <identifiersep> exception { \n \t2 <identifier> . reset ( ) ; \n \t2 for ( byte <identifiersep> array <identifiersep> writable value : values ) { \n \t3 if ( <identifier> ++ % batch <identifiersep> constants . normal <identifiersep> record <identifiersep> log <identifiersep> threshold == 0 ) { \n <ect>
\t4 return key ; } \n \t3 <identifier> <identifiersep> log . error ( <string_literal> + url + hostname ) ; \n \t3 return null ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 <comment> \n \t2 app . get <identifiersep> bean ( scheduler . class ) . shutdown ( ) ; \n \t2 io <identifiersep> helper . close ( app ) ; \n \t2 log . warn ( <string_literal> ) ; \n <ect>
\t5 return inc <identifiersep> props == null || u . contains <identifiersep> string <identifiersep> array ( inc <identifiersep> props , name , true ) || \n \t6 u . is <identifiersep> <identifier> <identifiersep> node <identifiersep> start <identifiersep> property ( name ) || u . is <identifiersep> <identifier> <identifiersep> required <identifiersep> property ( name ) ; } \n \t3 } ) ) ; \n <ect>
\t2 <comment> \n \t2 if ( job . get <identifiersep> sync <identifiersep> source ( ) != null ) { \n \t3 return ; } \n <ect>
\t5 vmware <identifiersep> storage <identifiersep> layout <identifiersep> helper . sync <identifiersep> volume <identifiersep> to <identifiersep> root <identifiersep> folder ( ds <identifiersep> mo . get <identifiersep> owner <identifiersep> datacenter ( ) . first ( ) , ds <identifiersep> mo , volume <identifiersep> to . get <identifiersep> path ( ) , vm <identifiersep> name , vmware <identifiersep> manager . s <identifiersep> vmware <identifiersep> search <identifiersep> exclude <identifiersep> folder . value ( ) ) ; } } \n \t3 return answer ; \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t2 return create <identifiersep> view <identifiersep> state ( flow , id , new literal <identifiersep> expression ( view <identifiersep> id ) , binder ) ; } \n \t1 @ override \n \t1 public <identifier> <identifiersep> state create <identifiersep> <identifier> <identifiersep> state ( final flow flow , final string id , final string <identifier> , final action entry <identifiersep> action ) { \n \t2 if ( contains <identifiersep> flow <identifiersep> state ( flow , id ) ) { \n <ect>
\t4 pstmt = conn . prepare <identifiersep> statement ( <string_literal> ) ; \n \t4 pstmt . set <identifiersep> long ( 1 , data <identifiersep> center <identifiersep> id ) ; \n \t4 result <identifiersep> set dc <identifiersep> set = pstmt . execute <identifiersep> query ( ) ; \n \t4 if ( ! dc <identifiersep> set . next ( ) ) { \n <ect>
\t5 e ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n \t3 throw new api <identifiersep> exception ( <string_literal> , new object [ ] { default <identifiersep> value . get <identifiersep> class ( ) . get <identifiersep> name ( ) } , e ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t3 for ( int i = 0 ; i < num <identifiersep> bytes ; i += num <identifiersep> bytes <identifiersep> per <identifiersep> write ) { \n \t4 int num = num <identifiersep> bytes <identifiersep> per <identifiersep> write ; \n \t4 if ( num <identifiersep> bytes <identifiersep> per <identifiersep> write + i >= num <identifiersep> bytes ) \n \t5 num = num <identifiersep> bytes - i ; \n <ect>
\t1 } catch ( illegal <identifiersep> argument <identifiersep> exception exception ) { \n \t2 <comment> \n \t2 if ( exception . get <identifiersep> cause ( ) instanceof unknown <identifiersep> host <identifiersep> exception ) { \n \t2 if ( unknown <identifiersep> host <identifiersep> tries > 0 ) { \n <ect>
\t2 try { \n \t2 db = raw <identifiersep> store . get <identifiersep> database ( db <identifiersep> name ) ; \n \t2 databases . add ( db ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> object <identifiersep> exception e ) { \n <ect>
\t3 entity <identifiersep> type <identifier> = entity <identifiersep> type . for <identifiersep> name ( type ) ; \n \t3 format . set <identifiersep> entity <identifiersep> type ( <identifier> ) ; \n \t3 entity <identifiersep> defaults defaults = entity <identifiersep> defaults . lookup ( <identifier> ) ; \n \t3 if ( defaults == null ) { \n <ect>
\t2 this . parser = ctx . parser ( ) ; } \n \t1 final string translate ( string sql ) { \n \t2 log . debug ( <string_literal> , sql ) ; \n \t2 string result = ctx . render ( parser . parse <identifiersep> query ( sql ) ) ; \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t2 if ( ! update <identifiersep> clusters . is <identifiersep> empty ( ) ) { \n \t2 if ( ! sets . intersection ( existing <identifiersep> clusters . key <identifiersep> set ( ) , update <identifiersep> clusters . key <identifiersep> set ( ) ) . is <identifiersep> empty ( ) ) { \n \t3 throw new ambari <identifiersep> exception ( <string_literal> ) ; } \n \t2 existing <identifiersep> clusters . put <identifiersep> all ( update <identifiersep> clusters ) ; \n <ect>
\t2 final string remote <identifiersep> user = get <identifiersep> remote <identifiersep> principal <identifiersep> id ( request ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( remote <identifiersep> user ) ) { \n \t3 logger . debug ( <string_literal> , remote <identifiersep> user ) ; \n \t3 final map < string , object > attributes = principal <identifiersep> attributes <identifiersep> extractor . get <identifiersep> attributes ( request ) ; \n <ect>
\t4 return error <identifiersep> page . error ( session , null , response . status . bad <identifiersep> request , messages . invalid <identifiersep> request ) ; } \n \t3 <comment> \n \t3 user <identifiersep> session <identifiersep> model user <identifiersep> session = auth <identifiersep> result . get <identifiersep> session ( ) ; \n \t3 if ( user <identifiersep> session . get <identifiersep> state ( ) != user <identifiersep> session <identifiersep> model . state . logging <identifiersep> out ) { \n <ect>
\t2 previous <identifiersep> stack <identifiersep> resource <identifiersep> entity . get <identifiersep> resource <identifiersep> status ( ) != status . not <identifiersep> started && \n \t2 next <identifiersep> stack <identifiersep> resource <identifiersep> entity . get <identifiersep> resource <identifiersep> status ( ) != status . delete <identifiersep> complete && \n \t2 next <identifiersep> stack <identifiersep> resource <identifiersep> entity . get <identifiersep> resource <identifiersep> status ( ) != status . not <identifiersep> started && \n \t2 previous <identifiersep> stack <identifiersep> resource <identifiersep> entity . get <identifiersep> resource <identifiersep> type ( ) . equals ( <string_literal> ) ) { \n <ect>
\t7 accepted <identifiersep> channels ++ ; } } \n \t5 if ( ! selection <identifiersep> keys . has <identifiersep> next ( ) ) { \n \t6 return accepted <identifiersep> channels ; } } } \n \t2 } catch ( throwable t ) { \n <ect>
\t1 public void init ( ) { \n \t2 bolt . prepare ( storm <identifiersep> conf , user <identifiersep> topology <identifiersep> ctx , output <identifiersep> collector ) ; \n \t2 <comment> \n \t2 task <identifiersep> hb <identifiersep> trigger . update <identifiersep> executor <identifiersep> status ( task <identifiersep> status . run ) ; \n <ect>
\t1 string class <identifiersep> name = get <identifiersep> class ( ) . get <identifiersep> name ( ) ; \n \t1 int <identifier> <identifiersep> index = class <identifiersep> name . last <identifiersep> index <identifiersep> of ( <identifier> ) ; \n \t1 return class <identifiersep> name . substring ( <identifier> <identifiersep> index + 1 ) ; } \n public synchronized void start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) { \n <ect>
\t3 final service service = web <identifiersep> utils . get <identifiersep> service ( context ) ; \n \t3 final authentication authn = ticket <identifiersep> registry <identifiersep> support . get <identifiersep> authentication <identifiersep> from ( ticket <identifiersep> granting <identifiersep> ticket <identifiersep> id ) ; \n \t3 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t3 if ( authn != null && registered <identifiersep> service != null ) { \n <ect>
\t3 logger . debug ( <string_literal> , this . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t3 return true ; } \n \t2 final long count <identifiersep> uses = ticket <identifiersep> state . get <identifiersep> count <identifiersep> of <identifiersep> uses ( ) ; \n \t2 if ( count <identifiersep> uses >= this . number <identifiersep> of <identifiersep> uses ) { \n <ect>
\t3 int length = text . get <identifiersep> child <identifiersep> count ( ) ; \n \t3 if ( length > 0 ) { \n \t4 content = <identifier> <identifiersep> string ( text ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t1 if ( ! command . is <identifiersep> <identifier> ( ) ) { \n \t2 logger . error ( <string_literal> , command ) ; \n \t2 return false ; } \n \t1 if ( command . increment <identifiersep> redirect <identifiersep> count ( ) > retry <identifiersep> count <identifiersep> limit ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 log logger = log <identifiersep> factory . get <identifiersep> log ( get <identifiersep> class ( ) ) ; \n <ect>
\t5 } catch ( exception e ) { \n \t6 log . warn ( <string_literal> , upload , \n \t7 new <identifiersep> upload ) ; } \n \t4 } else { \n <ect>
\t1 log . debug ( <string_literal> + header <identifiersep> proto <identifiersep> class + <string_literal> + configured <identifiersep> proto <identifiersep> class ) ; \n \t1 header <identifiersep> proto <identifiersep> class = configured <identifiersep> proto <identifiersep> class ; } \n \t1 if ( header <identifiersep> proto <identifiersep> class == null ) { \n \t1 throw new runtime <identifiersep> exception ( <string_literal> + <identifier> <identifiersep> class + <string_literal> ) ; } \n <ect>
\t8 . replace <identifiersep> first ( <string_literal> , <string_literal> ) \n \t8 . replace <identifiersep> first ( <string_literal> , <string_literal> ) ; \n \t2 input <identifiersep> stream expected = new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( expected <identifiersep> string . get <identifiersep> bytes ( <string_literal> ) ) ; \n \t2 compare <identifiersep> results ( expected , pig <identifiersep> result <identifiersep> stream ) ; \n <ect>
\t6 logger . error ( this , <string_literal> + e1 + <string_literal> , e1 ) ; \n \t5 } catch ( key <identifiersep> decode <identifiersep> exception e1 ) { \n \t6 logger . error ( this , <string_literal> + e1 + <string_literal> , e1 ) ; \n \t5 } catch ( io <identifiersep> exception e1 ) { \n <ect>
\t3 send <identifiersep> response ( resp , <string_literal> ) ; } } \n \t1 private void handle <identifiersep> <identifier> <identifiersep> request ( http <identifiersep> servlet <identifiersep> request req , http <identifiersep> servlet <identifiersep> response resp , long vm <identifiersep> id ) { \n \t2 vm <identifiersep> instance <identifiersep> vo vm = <identifier> <identifiersep> vm <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm == null ) { \n <ect>
\t2 state = merge <identifiersep> state . complete ; \n \t1 } else if ( <identifier> == total ) { \n \t2 if ( info . is <identifiersep> delete ( ) ) { \n \t2 if ( ! lower <identifiersep> split ) \n <ect>
\t2 if ( setting == null ) { \n \t3 logger . warn ( <string_literal> { } \\ <string_literal> , id ) ; \n \t3 return false ; \n \t2 } else if ( setting . has <identifiersep> subscribers ( ) ) { \n <ect>
\t7 } else if ( parent == empty <identifiersep> items <identifiersep> with <identifiersep> id ) { \n \t8 <comment> \n \t8 empty <identifiersep> items <identifiersep> with <identifiersep> id . remove ( tracker ) ; \n \t7 } else if ( parent == non <identifiersep> empty <identifiersep> items <identifiersep> with <identifiersep> id ) { \n <ect>
\t4 try { \n \t5 from <identifiersep> port = integer . parse <identifiersep> int ( s ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 private void warn <identifiersep> on <identifiersep> unsupported <identifiersep> options ( final map < string , list < string > > options <identifiersep> map ) { \n \t2 for ( final string key : options <identifiersep> map . key <identifiersep> set ( ) ) { \n \t3 if ( ! all <identifiersep> keys . contains ( key ) ) { \n <ect>
\t8 answer = listener . process <identifiersep> control <identifiersep> request ( request , ( agent <identifiersep> control <identifiersep> command ) cmd ) ; \n \t8 if ( answer != null ) { \n \t9 break ; } } } \n \t6 if ( answer == null ) { \n <ect>
\t10 stats . set <identifiersep> agg <identifiersep> bytes <identifiersep> received ( stats . get <identifiersep> net <identifiersep> bytes <identifiersep> received ( ) + stats . get <identifiersep> current <identifiersep> bytes <identifiersep> received ( ) ) ; } \n \t9 <identifier> <identifiersep> user <identifiersep> stats <identifiersep> dao . update ( stats . get <identifiersep> id ( ) , stats ) ; } \n \t7 } ) ; \n \t6 } catch ( final exception e ) { \n <ect>
\t1 static { \n \t2 resteasy <identifiersep> provider <identifiersep> factory factory = resteasy <identifiersep> provider <identifiersep> factory . get <identifiersep> instance ( ) ; \n \t2 delegate = factory . get <identifiersep> message <identifiersep> body <identifiersep> reader ( ejb <identifiersep> book . class , null , null , constants . media <identifiersep> type <identifiersep> test <identifiersep> xml <identifiersep> type ) ; } \n \t1 public boolean is <identifiersep> readable ( class < ? > type , type generic <identifiersep> type , annotation [ ] annotations , media <identifiersep> type media <identifiersep> type ) { \n <ect>
\t2 log . debug ( <string_literal> + body ) ; \n \t2 assert <identifiersep> false ( <string_literal> , body . ends <identifiersep> with ( <string_literal> ) ) ; } \n \t1 private static class my <identifiersep> slow <identifiersep> file <identifiersep> processor implements processor { \n \t2 public void process ( exchange exchange ) throws exception { \n <ect>
\t2 continue ; } \n \t1 merge <identifiersep> blocks ( global <identifiersep> configs , map ) ; \n \t1 string value = ( string ) map . get ( <string_literal> ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> empty ( value ) ) { \n <ect>
\t1 private message <identifiersep> digest get <identifiersep> digest ( ) { \n \t2 try { \n \t3 return message <identifiersep> digest . get <identifiersep> instance ( <string_literal> ) ; \n \t2 } catch ( final no <identifiersep> such <identifiersep> algorithm <identifiersep> exception <identifier> ) { \n <ect>
\t2 file index <identifiersep> <identifier> <identifiersep> <identifier> = new file ( out <identifiersep> file , <string_literal> ) ; \n \t2 assert <identifiersep> that ( index <identifiersep> <identifier> <identifiersep> <identifier> . exists ( ) , is ( true ) ) ; \n \t2 buffered <identifiersep> image img = image <identifiersep> io . read ( index <identifiersep> <identifier> <identifiersep> <identifier> ) ; \n \t2 boolean enough = img . get <identifiersep> width ( ) > min <identifiersep> <identifier> && img . get <identifiersep> height ( ) > min <identifiersep> height ; \n <ect>
\t2 } catch ( exception th ) { \n \t3 if ( thread . interrupted ( ) ) { \n \t4 logger . info ( <string_literal> , algorithm , data <identifiersep> set ) ; } \n \t3 try { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 thread . sleep ( <number_literal> ) ; \n \t2 network <identifiersep> connector connector = local <identifiersep> broker . get <identifiersep> network <identifiersep> connector <identifiersep> by <identifiersep> name ( <string_literal> ) ; \n <ect>
\t4 log . debug ( <string_literal> ) ; \n \t4 adapter = new level <identifiersep> db <identifiersep> persistence <identifiersep> adapter ( ) ; \n \t4 break ; \n \t3 case mem : \n <ect>
\t4 add <identifiersep> stream ( jar <identifiersep> output <identifiersep> stream , path , stream , contents , input <identifiersep> file . last <identifiersep> modified ( ) ) ; \n \t3 } finally { \n \t4 stream . close ( ) ; } } \n \t2 for ( map . entry < string , file > entry : pig <identifiersep> context . get <identifiersep> script <identifiersep> files ( ) . entry <identifiersep> set ( ) ) { \n <ect>
\t2 <identifier> <identifiersep> zk . get <identifiersep> children ( path , this , this , false ) ; \n \t2 break ; \n \t2 case <identifier> : \n \t2 <comment> \n <ect>
\t6 boolean result = update <identifiersep> resource ( value ) ; \n \t6 if ( result == true ) { \n \t7 logger . debug ( <string_literal> , item <identifiersep> name ) ; \n \t6 } else { \n <ect>
\t2 j <identifiersep> button <identifiersep> operator <identifier> = new j <identifiersep> button <identifiersep> operator ( wo , <string_literal> ) ; \n \t2 <identifier> . push <identifiersep> no <identifiersep> block ( ) ; \n \t2 logger . info ( <string_literal> ) ; } \n \t1 public void test <identifiersep> configure <identifiersep> hash ( ) { \n <ect>
\t2 if ( attributes . contains <identifiersep> key ( id <identifiersep> attribute ) ) { \n \t3 logger . debug ( <string_literal> , this . configuration . get <identifiersep> identity <identifiersep> attribute ( ) ) ; \n \t3 final list < object > id <identifiersep> attribute <identifiersep> as <identifiersep> list = attributes . get ( this . configuration . get <identifiersep> identity <identifiersep> attribute ( ) ) ; \n \t3 if ( id <identifiersep> attribute <identifiersep> as <identifiersep> list . size ( ) > 1 ) { \n <ect>
\t6 logger . info ( <string_literal> , url ) ; \n \t6 add <identifiersep> crl ( url , crl ) ; \n \t6 list <identifiersep> of <identifiersep> locations . add ( crl ) ; } \n \t4 } catch ( final exception e ) { \n <ect>
\t3 if ( success . get ( <string_literal> ) == null ) { \n \t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t4 return <number_literal> ; \n \t3 } else { \n <ect>
\t5 s <identifiersep> logger . error ( <string_literal> ) ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t1 @ action <identifiersep> doc ( text = <string_literal> , returns = <string_literal> ) \n \t1 public static object [ ] satel <identifiersep> read <identifiersep> event ( \n \t3 @ param <identifiersep> doc ( name = <string_literal> , text = <string_literal> ) int event <identifiersep> index ) { \n \t2 if ( ! satel <identifiersep> is <identifiersep> connected ( ) ) { \n <ect>
\t4 object <identifiersep> factory factory = action <identifiersep> context . get <identifiersep> context ( ) . get <identifiersep> container ( ) . get <identifiersep> instance ( object <identifiersep> factory . class ) ; \n \t4 theme theme = ( theme ) factory . build <identifiersep> bean ( theme <identifiersep> class , new hash <identifiersep> map < string , object > ( ) ) ; \n \t4 <identifier> . add ( theme ) ; \n \t3 } catch ( class <identifiersep> cast <identifiersep> exception cce ) { \n <ect>
\t1 public optional < user > get <identifiersep> user ( @ nonnull string session <identifiersep> id ) { \n \t2 session session = sessions . get ( session <identifiersep> id ) ; \n \t2 if ( session != null ) { \n \t3 return user <identifiersep> manager . instance . get <identifiersep> user ( sessions . get ( session <identifiersep> id ) . get <identifiersep> user <identifiersep> id ( ) ) ; } \n <ect>
\t1 public boolean is <identifiersep> satisfied <identifiersep> by ( final authentication authn ) throws exception { \n \t2 if ( this . try <identifiersep> all ) { \n \t3 final int sum = authn . get <identifiersep> successes ( ) . size ( ) + authn . get <identifiersep> failures ( ) . size ( ) ; \n \t3 if ( authn . get <identifiersep> credentials ( ) . size ( ) != sum ) { \n <ect>
\t3 cluster <identifiersep> list = <identifier> <identifiersep> cluster <identifiersep> ids ; } \n \t2 return cluster <identifiersep> list ; } \n \t1 private list < long > reorder <identifiersep> clusters <identifiersep> by <identifiersep> pods ( list < long > cluster <identifiersep> ids , list < long > pod <identifiersep> ids ) { \n <ect>
@ produces ( media <identifiersep> type . application <identifiersep> json ) \n @ consumes ( media <identifiersep> type . application <identifiersep> json ) \n public list < job > get <identifiersep> list ( list < job <identifiersep> info > job <identifiersep> infos ) { \n \t1 try { \n <ect>
\t5 <comment> \n \t5 sr = refs [ 0 ] ; } \n \t3 } catch ( invalid <identifiersep> syntax <identifiersep> exception ex ) { \n <ect>
\t7 host <identifiersep> config . get <identifiersep> discovery <identifiersep> name ( ) ) ; \n \t5 schedule <identifiersep> connect ( qualifier , host <identifiersep> config ) ; } \n \t4 @ override \n \t4 public void hub <identifiersep> discovered ( harmony <identifiersep> hub <identifiersep> discovery <identifiersep> result result ) { \n <ect>
\t2 e = new io <identifiersep> exception ( <string_literal> ) ; \n \t2 e . init <identifiersep> cause ( new illegal <identifiersep> argument <identifiersep> exception ( ) ) ; \n \t2 helper . init ( <string_literal> , e , null ) ; \n \t2 reset ( log ) ; \n <ect>
\t4 timed <identifiersep> out <identifiersep> logger log = new timed <identifiersep> out <identifiersep> logger ( <identifier> <identifiersep> process ) ; \n \t4 task timedout <identifiersep> task = new task ( log , <identifier> ) ; \n \t4 timedout <identifiersep> task . run ( ) ; \n \t4 if ( ! <identifier> <identifiersep> password <identifiersep> command ) { \n <ect>
\t2 thread . set <identifiersep> default <identifiersep> uncaught <identifiersep> exception <identifiersep> handler ( new thread . uncaught <identifiersep> exception <identifiersep> handler ( ) \n \t2 { \n \t3 public void uncaught <identifiersep> exception ( thread t , throwable e ) \n \t3 { \n <ect>
\t2 reset <identifiersep> mock ( count ) ; \n \t2 stop <identifiersep> watch watch = new stop <identifiersep> watch ( ) ; \n \t2 execute ( count ) ; \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( ) ; \n <ect>
\t1 protected void assert <identifiersep> messages <identifiersep> are <identifiersep> received ( ) throws jms <identifiersep> exception { \n \t2 try { \n \t3 thread . sleep ( <number_literal> ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 charset charset ; \n \t2 try { \n \t3 charset = charset . for <identifiersep> name ( charset <identifiersep> name ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t2 } catch ( lock <identifiersep> failed <identifiersep> exception e ) { \n \t3 send <identifiersep> lock <identifiersep> fail <identifiersep> error ( req , resp ) ; \n \t2 } catch ( webdav <identifiersep> exception e ) { \n \t3 resp . send <identifiersep> error ( webdav <identifiersep> status . sc <identifiersep> internal <identifiersep> server <identifiersep> error ) ; \n <ect>
\t2 } catch ( insufficient <identifiersep> capacity <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t3 log . debug ( <string_literal> + xml <identifiersep> utils . pretty <identifiersep> print ( app <identifiersep> xml ) . to <identifiersep> string ( ) ) ; \n \t3 app <identifiersep> xml = xml <identifiersep> utils . remove <identifiersep> comments ( app <identifiersep> xml ) ; \n \t3 init <identifiersep> <identifier> ( ) ; \n \t3 element e <identifiersep> job = basic <identifiersep> resolve <identifiersep> and <identifiersep> include <identifiersep> ds ( app <identifiersep> xml , conf , coord <identifiersep> job ) ; \n <ect>
\t3 scheduler . shutdown ( ) ; \n \t3 try { \n \t4 scheduler . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 for ( data <identifiersep> channel <identifiersep> reader reader : readers ) { \n \t4 try { \n \t5 reader . close ( ) ; \n \t4 } catch ( exception ex ) { \n <ect>
\t3 if ( <identifier> . size ( ) == 0 ) { \n \t4 logger . info ( <string_literal> ) ; \n \t3 } else { \n \t4 if ( logger . is <identifiersep> loggable ( level . info ) ) { \n <ect>
public void execute ( ) { \n \t1 for ( string source <identifiersep> file <identifiersep> id : get <identifiersep> source <identifiersep> file <identifiersep> ids ( ) ) { \n \t1 repository <identifiersep> file source <identifiersep> file = get <identifiersep> repository ( ) . get <identifiersep> file <identifiersep> by <identifiersep> id ( source <identifiersep> file <identifiersep> id ) ; \n \t1 if ( source <identifiersep> file == null ) { \n <ect>
\t2 help <identifiersep> formatter formatter = new help <identifiersep> formatter ( ) ; \n \t2 formatter . print <identifiersep> help ( <string_literal> , valid <identifiersep> options ) ; \n \t2 throw new runtime <identifiersep> exception ( e ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 object read <identifiersep> outbound <identifiersep> result = server . read <identifiersep> outbound ( ) ; \n \t1 client . write <identifiersep> inbound ( read <identifiersep> outbound <identifiersep> result ) ; \n \t1 count ++ ; } \n \t1 client . flush ( ) ; \n <ect>
\t5 return true ; } \n \t4 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t4 return false ; \n \t3 } catch ( throwable e ) { \n <ect>
\t3 final index <identifiersep> shard replica = shards . get <identifiersep> replicas ( ) . get ( 1 ) ; \n \t3 if ( random <identifiersep> boolean ( ) ) { \n \t4 <comment> \n \t4 final int rollback <identifiersep> docs = random <identifiersep> int <identifiersep> between ( 1 , <number_literal> ) ; \n <ect>
\t2 if ( intervals != null ) { \n \t3 io <identifiersep> util . assert <identifiersep> file <identifiersep> is <identifiersep> readable ( intervals ) ; } \n \t2 <comment> \n \t2 if ( locus <identifiersep> <identifier> <identifiersep> cap < coverage <identifiersep> cap ) { \n <ect>
\t2 double value = 0 ; \n \t2 try { \n \t3 value = double . parse <identifiersep> double ( num ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 string schema <identifiersep> <identifier> = <identifier> . to <identifiersep> uri ( ) . get <identifiersep> scheme ( ) ; \n \t1 string schema <identifiersep> <identifier> = <identifier> . to <identifiersep> uri ( ) . get <identifiersep> scheme ( ) ; \n \t1 <comment> \n \t1 if ( schema <identifiersep> <identifier> == null && is <identifiersep> src <identifiersep> local ) { \n <ect>
\t1 response . set <identifiersep> version <identifiersep> id ( <string_literal> ) ; \n \t1 response . set <identifiersep> last <identifiersep> modified ( new date ( ) . to <identifiersep> string ( ) ) ; \n \t1 response . set <identifiersep> status <identifiersep> message ( <string_literal> ) ; \n \t1 response . set <identifiersep> return ( true ) ; \n <ect>
\t2 buffer = <identifier> <identifiersep> buffer . create <identifiersep> direct ( segment <identifiersep> size , segment <identifiersep> count ) ; } \n \t1 catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error e ) { \n \t2 log . warn ( <string_literal> + \n \t3 <string_literal> ) ; \n <ect>
\t2 } else { \n \t3 sync <identifiersep> cmd = new sync <identifiersep> <identifier> <identifiersep> topology <identifiersep> command ( true , false ) ; } \n \t2 <identifier> <identifiersep> answer sync <identifiersep> answer = ( <identifier> <identifiersep> answer ) <identifier> <identifiersep> agent <identifiersep> mgr . <identifier> <identifiersep> send ( <identifier> <identifiersep> <identifier> <identifiersep> host . get <identifiersep> id ( ) , sync <identifiersep> cmd ) ; \n \t2 if ( sync <identifiersep> answer == null || ! sync <identifiersep> answer . get <identifiersep> result ( ) ) { \n <ect>
\t2 link <identifiersep> insertion -= link <identifiersep> <identifier> ; \n \t2 link <identifiersep> deletion -= link <identifiersep> <identifier> ; \n \t2 logger . debug ( <string_literal> + node <identifiersep> insertion ) ; \n \t2 logger . debug ( <string_literal> + node <identifiersep> deletion ) ; \n <ect>
\t4 input <identifiersep> stream is = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t4 map < string , string > success = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> } ) ; \n \t4 s <identifiersep> logger . info ( <string_literal> + success . get ( <string_literal> ) ) ; \n \t3 } else { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 attempt <identifiersep> item <identifiersep> advance <identifiersep> final ( role . <identifier> , false ) ; \n \t3 context <identifiersep> reload ( ) ; \n \t2 } catch ( exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t3 <identifier> <identifiersep> wrap <identifiersep> save = null ; } \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) { \n \t3 <identifier> <identifiersep> log . info ( <string_literal> + <identifier> <identifiersep> file ) ; \n \t3 <identifier> <identifiersep> log . info ( <string_literal> + <identifier> + <string_literal> ) ; \n <ect>
\t2 runtime <identifiersep> exception ase = ( api <identifiersep> exception ) throwable <identifiersep> analyzer . get <identifiersep> first <identifiersep> throwable <identifiersep> of <identifiersep> type ( api <identifiersep> exception . class , throwable <identifiersep> analyzer . determine <identifiersep> cause <identifiersep> chain ( e ) ) ; \n \t2 if ( ase != null && ase instanceof api <identifiersep> exception ) { \n \t3 api <identifiersep> exception api <identifiersep> exception = ( api <identifiersep> exception ) ase ; \n <ect>
\t1 final block <identifiersep> builder < ? > block <identifiersep> builder = processing <identifiersep> context . get <identifiersep> block <identifiersep> builder ( ) ; \n \t1 @ suppress <identifiersep> warnings ( { <string_literal> , <string_literal> } ) \n \t1 final block <identifiersep> builder builder = new block <identifiersep> builder <identifiersep> impl ( class <identifiersep> builder . get <identifiersep> class <identifiersep> definition ( ) . get <identifiersep> instance <identifiersep> initializer ( ) , null ) ; \n \t1 do <identifiersep> before <identifiersep> <identifier> ( builder ) ; \n <ect>
\t2 log . error ( <string_literal> + ioe . to <identifiersep> string ( ) ) ; } \n \t1 try { \n \t2 r . close ( ) ; \n \t1 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 if ( is <identifiersep> my <identifiersep> direct <identifiersep> ack ( msg ) ) { \n <ect>
\t5 transaction = new <identifier> <identifiersep> tcp <identifiersep> transaction ( ) ; } \n \t4 transaction . set <identifiersep> connection ( connection ) ; \n \t4 transaction . set <identifiersep> <identifier> ( false ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 try { \n \t6 channel = this . connection <identifiersep> factory . create <identifiersep> connection ( ) . create <identifiersep> channel ( false ) ; \n \t6 channel . queue <identifiersep> <identifier> <identifiersep> passive ( queue ) ; \n <ect>
\t2 logger . debug ( <string_literal> , cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> renew , renew <identifiersep> param ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( ticket <identifiersep> granting <identifiersep> ticket <identifiersep> id ) && service != null ) { \n \t3 final authentication authn = ticket <identifiersep> registry <identifiersep> support . get <identifiersep> authentication <identifiersep> from ( ticket <identifiersep> granting <identifiersep> ticket <identifiersep> id ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( renew <identifiersep> param ) ) { \n <ect>
\t2 final connection <identifiersep> config cc = new connection <identifiersep> config ( ) ; \n \t2 final string urls = l . get <identifiersep> ldap <identifiersep> url ( ) . contains ( <string_literal> ) \n \t4 ? l . get <identifiersep> ldap <identifiersep> url ( ) \n \t4 : arrays . stream ( l . get <identifiersep> ldap <identifiersep> url ( ) . split ( <string_literal> ) ) . collect ( collectors . joining ( <string_literal> ) ) ; \n <ect>
\t2 meta <identifiersep> history <identifiersep> service <identifiersep> <identifier> . bc . register <identifiersep> service ( \n \t3 protocol <identifiersep> provider <identifiersep> service . class . get <identifiersep> name ( ) , \n \t3 mock <identifiersep> provider , \n \t3 mock <identifiersep> prov <identifiersep> properties ) ; \n <ect>
\t1 logger . info ( <string_literal> ) \n \t1 logger . info ( <string_literal> ) \n \t1 hcat <identifiersep> service <identifiersep> check ( ) \n \t1 logger . info ( <string_literal> ) \n <ect>
\t5 this . server <identifiersep> manager . verify ( new parameter <identifiersep> list ( request . get <identifiersep> parameter <identifiersep> map ( ) ) ) ; \n \t3 final map < string , string > parameters = new hash <identifiersep> map < > ( ) ; \n \t3 parameters . put <identifiersep> all ( message . get <identifiersep> parameter <identifiersep> map ( ) ) ; \n \t3 if ( message . is <identifiersep> signature <identifiersep> verified ( ) ) { \n <ect>
\t2 connection . start ( ) ; \n \t2 topic <identifiersep> session session = connection . create <identifiersep> topic <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n \t2 topic topic = session . create <identifiersep> topic ( get <identifiersep> destination <identifiersep> name ( ) ) ; \n \t2 topic <identifiersep> publisher publisher = session . create <identifiersep> publisher ( topic ) ; \n <ect>
\t2 final map < string , object > request <identifiersep> parameters ; \n \t2 try { \n \t3 request <identifiersep> parameters = map <identifiersep> utils . <identifier> ( request . get <identifiersep> parameter <identifiersep> map ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } else { \n \t3 config <identifiersep> filter = config <identifiersep> filter . trim ( ) ; } \n \t2 array <identifiersep> list < array <identifiersep> list < string > > parsed <identifiersep> options = parse <identifiersep> options ( config <identifiersep> filter ) ; \n <ect>
\t3 return new console <identifiersep> access <identifiersep> authentication <identifiersep> answer ( cmd , false ) ; } \n \t2 if ( cmd . is <identifiersep> <identifier> ( ) ) { \n \t3 console <identifiersep> access <identifiersep> authentication <identifiersep> answer authentication <identifiersep> answer = new console <identifiersep> access <identifiersep> authentication <identifiersep> answer ( cmd , true ) ; \n \t3 authentication <identifiersep> answer . set <identifiersep> <identifier> ( true ) ; \n <ect>
<comment> \n \t1 protected abstract <identifier> <identifiersep> server get <identifiersep> server ( server <identifiersep> address server <identifiersep> address ) ; \n \t1 protected synchronized void update <identifiersep> description ( final cluster <identifiersep> description new <identifiersep> description ) { \n <ect>
\t3 if ( binding <identifiersep> file <identifiersep> search . binding <identifiersep> class <identifiersep> element <identifiersep> map . get ( element <identifiersep> name ) . size ( ) > 1 ) { \n \t3 if ( ats . in <identifiersep> class <identifiersep> hierarchy ( this . type ) . has ( component <identifiersep> message . class ) ) { \n \t4 component <identifiersep> message comp <identifiersep> msg = ats . in <identifiersep> class <identifiersep> hierarchy ( this . type ) . get ( component <identifiersep> message . class ) ; \n \t4 element <identifiersep> name = comp <identifiersep> msg . value ( ) . get <identifiersep> simple <identifiersep> name ( ) + <string_literal> + element <identifiersep> name ; \n <ect>
\t3 log . info ( <string_literal> + rsrc1 ) ; \n \t3 log . info ( <string_literal> + rsrc2 ) ; \n \t3 log . info ( <string_literal> + rsrc3 ) ; \n \t3 log . info ( <string_literal> + rsrc4 ) ; \n <ect>
\t4 public void on <identifiersep> command ( object command ) { } \n \t4 public void on <identifiersep> exception ( io <identifiersep> exception error ) { \n \t5 set <identifiersep> error ( error ) ; } \n \t4 public void transport <identifiersep> interupted ( ) { \n <ect>
\t1 public object get <identifiersep> capability ( store <identifiersep> capability <identifiersep> type capability ) { \n \t2 return inner . get <identifiersep> capability ( capability ) ; } \n \t1 @ jmx <identifiersep> operation ( description = <string_literal> ) \n \t1 public void pause ( ) { \n <ect>
\t4 if ( client <identifiersep> log . is <identifiersep> log <identifiersep> enabled ( ) ) { \n \t5 log <identifiersep> id = grid <identifiersep> ggfs <identifiersep> logger . next <identifiersep> id ( ) ; \n \t5 client <identifiersep> log . log <identifiersep> append ( log <identifiersep> id , path , mode , buf <identifiersep> size ) ; } \n <ect>
\t3 . build ( ) ; \n \t2 final <identifier> <identifiersep> execution <identifiersep> result result = this . registered <identifiersep> service <identifiersep> access <identifiersep> strategy <identifiersep> <identifier> . execute ( ctx ) ; \n \t2 result . throw <identifiersep> exception <identifiersep> if <identifiersep> needed ( ) ; \n \t2 if ( ! registered <identifiersep> service . get <identifiersep> proxy <identifiersep> policy ( ) . is <identifiersep> allowed <identifiersep> to <identifiersep> proxy ( ) ) { \n <ect>
\t1 collection < part > parts ; \n \t1 try { \n \t1 parts = request . get <identifiersep> parts ( ) ; \n \t1 } catch ( illegal <identifiersep> state <identifiersep> exception ise ) { \n <ect>
\t2 int max <identifiersep> size = max <identifiersep> queue <identifiersep> size ( ) ; \n \t2 int buf <identifiersep> size = buf <identifiersep> evict <identifiersep> q . <identifier> ( ) ; \n \t2 if ( buf <identifiersep> size >= max <identifiersep> size ) { \n <ect>
\t4 if ( ! <identifier> <identifiersep> service . get <identifiersep> proxy <identifiersep> policy ( ) . is <identifiersep> allowed <identifiersep> to <identifiersep> proxy ( ) ) { \n \t5 logger . warn ( <string_literal> , <identifier> <identifiersep> service . get <identifiersep> id ( ) , service . get <identifiersep> id ( ) ) ; \n \t5 throw new unauthorized <identifiersep> <identifier> <identifiersep> exception ( unauthorized <identifiersep> <identifier> <identifiersep> exception . message + registered <identifiersep> service . get <identifiersep> id ( ) ) ; } \n \t3 } else { \n <ect>
\t2 scheduler . shutdown ( ) ; \n \t2 wait <identifiersep> for <identifiersep> job <identifiersep> finish ( job . get <identifiersep> id ( ) , <number_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> scheduler <identifiersep> restart ( ) throws exception { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + vm <identifiersep> id + <string_literal> ) ; \n \t3 send <identifiersep> response ( resp , <string_literal> ) ; \n \t3 return ; } \n \t2 if ( vm . get <identifiersep> host <identifiersep> id ( ) == null ) { \n <ect>
\t3 socket <identifiersep> address local <identifiersep> socket <identifiersep> address = socket . get <identifiersep> local <identifiersep> socket <identifiersep> address ( ) ; \n \t3 socket <identifiersep> address remote <identifiersep> socket <identifiersep> address = socket . get <identifiersep> remote <identifiersep> socket <identifiersep> address ( ) ; \n \t3 if ( ! socket . is <identifiersep> connected ( ) ) { \n \t4 if ( log != null ) { \n <ect>
\t2 root <identifiersep> folder = new file ( context <identifiersep> folder ) ; \n \t2 break ; } } } \n \t1 log . debug ( <string_literal> + build <identifiersep> directory ) ; \n \t1 log . debug ( <string_literal> + context <identifiersep> folders <identifiersep> as <identifiersep> csv ) ; \n <ect>
\t3 cleanup <identifiersep> pending <identifiersep> jobs ( l ) ; \n \t3 <identifier> <identifiersep> queue <identifiersep> mgr . reset <identifiersep> queue <identifiersep> process ( get <identifiersep> msid ( ) ) ; \n \t3 <identifier> <identifiersep> job <identifiersep> dao . reset <identifiersep> job <identifiersep> process ( get <identifiersep> msid ( ) , base <identifiersep> cmd . internal <identifiersep> error , get <identifiersep> serialized <identifiersep> error <identifiersep> message ( <string_literal> ) ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t2 log . info ( <string_literal> + sent ) ; \n \t2 try { \n \t3 produce ( sent , <number_literal> ) ; \n \t2 } catch ( exception expected ) { \n <ect>
\t2 for ( byte [ ] key <identifiersep> hash : <identifier> <identifiersep> my <identifiersep> key <identifiersep> map . key <identifiersep> set ( ) ) { \n \t3 log . info ( log . fac <identifiersep> accesscontrol , <string_literal> , data <identifiersep> utils . print <identifiersep> hex <identifiersep> bytes ( key <identifiersep> hash ) ) ; } \n \t2 log . info ( log . fac <identifiersep> accesscontrol , <string_literal> ) ; \n \t2 for ( byte [ ] key <identifiersep> hash : <identifier> <identifiersep> private <identifiersep> key <identifiersep> map . key <identifiersep> set ( ) ) { \n <ect>
\t2 try { \n \t3 context = new context ( context . mode . read <identifiersep> only ) ; \n \t3 dso = handle <identifiersep> service . resolve <identifiersep> to <identifiersep> object ( context , handle ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t3 if ( this . journal != null ) { \n \t4 journal . close ( ) ; \n \t4 journal = null ; } \n \t3 meta <identifiersep> data = new job <identifiersep> scheduler <identifiersep> kaha <identifiersep> db <identifiersep> meta <identifiersep> data ( this ) ; } \n <ect>
\t5 this . <identifier> . rollback ( ) ; } \n \t3 } else { \n \t4 get <identifiersep> <identifier> ( ) . set <identifiersep> rollback <identifiersep> only ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 int int <identifiersep> <identifier> = 0 ; \n \t2 try { \n \t3 int <identifiersep> <identifier> = integer . parse <identifiersep> int ( configuration . get <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> width ( ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
protected transient final logger logger = logger <identifiersep> factory . get <identifiersep> logger ( connect <identifiersep> notifier . class ) ; \n @ override \n public void on <identifiersep> success ( retry <identifiersep> context context ) { \n <ect>
\t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . build ( ) ; \n \t2 cluster <identifiersep> state cluster <identifiersep> state = cluster <identifiersep> state . builder ( cluster <identifiersep> name . cluster <identifiersep> name <identifiersep> setting . get <identifiersep> default ( settings . empty ) ) . meta <identifiersep> data ( meta <identifiersep> data ) \n \t4 . routing <identifiersep> table ( initial <identifiersep> routing <identifiersep> table ) . build ( ) ; \n <ect>
\t1 for ( repository <identifiersep> info repo : stack <identifiersep> repos <identifiersep> by <identifiersep> os . get ( os ) ) { \n \t2 if ( ! <identifier> <identifiersep> repo <identifiersep> names . contains ( repo . get <identifiersep> repo <identifiersep> name ( ) ) ) { \n \t2 service <identifiersep> repos . add ( repo ) ; \n \t2 service <identifiersep> repo <identifiersep> ids . add ( repo . get <identifiersep> repo <identifiersep> id ( ) ) ; } } } \n <ect>
\t1 public static boolean has <identifiersep> namespace ( input <identifiersep> source file , string . . . namespace <identifiersep> u <identifiersep> <identifier> ) { \n \t2 try { \n \t3 return has <identifiersep> namespace ( get <identifiersep> namespaces ( file ) , namespace <identifiersep> u <identifiersep> <identifier> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 media <identifiersep> type = tika <identifiersep> utils . detect ( new buffered <identifiersep> input <identifiersep> stream ( get <identifiersep> content <identifiersep> input <identifiersep> stream ( xcontext ) ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 if ( options . get <identifiersep> <identifier> <identifiersep> input <identifiersep> dataset <identifiersep> name ( ) == null ) { \n \t1 throw new invalid <identifiersep> options <identifiersep> exception ( \n \t2 <string_literal> + ds <identifiersep> arg + <string_literal> + help <identifiersep> str ) ; } \n \t1 string ds <identifiersep> type = options . get <identifiersep> <identifier> <identifiersep> input <identifiersep> dataset <identifiersep> type ( ) ; \n <ect>
\t1 try { \n \t1 if ( ! does <identifiersep> file <identifiersep> exist ( file <identifiersep> path , target ) ) { \n \t2 return ; } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 f . read <identifiersep> fully ( magic ) ; \n \t1 if ( ! arrays . equals ( magic , magic ) ) { \n \t1 throw new runtime <identifiersep> exception ( file <identifiersep> path + <string_literal> + arrays . to <identifiersep> string ( magic ) + <string_literal> + arrays . to <identifiersep> string ( magic ) ) ; } \n \t1 long footer <identifiersep> index = footer <identifiersep> length <identifiersep> index - footer <identifiersep> length ; \n <ect>
\t2 if ( <string_literal> . equals ( m ) || <string_literal> . equals ( m ) || <string_literal> . equals ( m ) || <string_literal> . equals ( m ) ) { \n \t3 pc = ( t ) new org . <identifier> . binding . <identifier> . internal . protocol . <identifier> . <identifier> <identifiersep> <identifier> <identifiersep> connector ( device <identifiersep> id , host , \n \t5 port ) ; \n \t2 } else { \n <ect>
\t5 } else { \n \t6 final string msg = <string_literal> + vm <identifiersep> name + <string_literal> + v <identifiersep> rec . to <identifiersep> string ( ) ; \n \t6 s <identifiersep> logger . warn ( msg ) ; \n \t6 return new start <identifiersep> answer ( command , msg ) ; } } } \n <ect>
\t5 @ override \n \t5 public void failed ( final exception ex ) { \n \t6 if ( ex instanceof http <identifiersep> cache <identifiersep> update <identifiersep> exception ) { \n <ect>
\t1 protected void execute <identifiersep> benchmark ( final <identifier> <identifiersep> benchmark benchmark , \n \t3 final execution <identifiersep> context context ) throws exception { \n \t2 log . info ( <string_literal> , benchmark ) ; \n \t2 benchmark . before <identifiersep> execute ( get <identifiersep> repository ( ) , credentials , context ) ; \n <ect>
\t4 <identifier> <identifiersep> work <identifiersep> dao . update ( work . get <identifiersep> id ( ) , work ) ; } } \n \t2 vm . set <identifiersep> last <identifiersep> host <identifiersep> id ( src <identifiersep> host <identifiersep> id ) ; \n \t2 try { \n \t3 if ( vm == null || vm . get <identifiersep> host <identifiersep> id ( ) == null || vm . get <identifiersep> host <identifiersep> id ( ) != src <identifiersep> host <identifiersep> id || ! change <identifiersep> state ( vm , event . migration <identifiersep> requested , dst <identifiersep> host <identifiersep> id , work , step . migrating ) ) { \n <ect>
\t4 break ; } } \n \t2 if ( answer != null ) { \n \t3 answer . set <identifiersep> from ( from ) ; \n <ect>
\t3 if ( ! result . first ( ) ) { \n \t4 return null ; } \n \t3 return result . second ( ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t2 metadata <identifiersep> provider . set <identifiersep> fail <identifiersep> fast <identifiersep> initialization ( md . is <identifiersep> fail <identifiersep> fast ( ) ) ; \n \t2 metadata <identifiersep> provider . set <identifiersep> require <identifiersep> valid <identifiersep> metadata ( md . is <identifiersep> require <identifiersep> valid <identifiersep> metadata ( ) ) ; \n \t2 metadata <identifiersep> provider . set <identifiersep> id ( metadata <identifiersep> provider . get <identifiersep> class ( ) . get <identifiersep> canonical <identifiersep> name ( ) ) ; \n \t2 build <identifiersep> metadata <identifiersep> filters ( service , metadata <identifiersep> provider , metadata <identifiersep> filter <identifiersep> list ) ; \n <ect>
\t5 method . set <identifiersep> header ( files <identifiersep> constants . x <identifiersep> auth <identifiersep> token , auth <identifiersep> token ) ; \n \t5 response = new files <identifiersep> response ( client . execute ( method ) ) ; } \n \t4 if ( response . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> ok ) \n \t4 { \n <ect>
\t3 logger . debug ( <string_literal> , \n \t4 this . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t3 return false ; } \n \t2 if ( this . fetcher == null ) { \n <ect>
\t2 object <identifier> <identifiersep> key = calculate <identifiersep> <identifier> <identifiersep> key ( bean <identifiersep> data ) ; \n \t2 if ( <identifier> <identifiersep> key != null ) { \n \t2 nat <identifiersep> keys . put ( <identifier> <identifiersep> key , id ) ; } } } \n <ect>
\t6 . set <identifiersep> row <identifiersep> filter ( filter ) ; } \n \t3 else \n \t3 { \n \t4 key <identifiersep> slice last <identifiersep> row = iterables . get <identifiersep> last ( rows ) ; \n <ect>
\t1 public o <identifiersep> <identifier> <identifiersep> token read <identifiersep> access <identifiersep> token ( string access <identifiersep> token ) { \n \t2 throw new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n \t1 private string get <identifiersep> authorization <identifiersep> header ( string client <identifiersep> id , string client <identifiersep> secret ) { \n \t2 if ( client <identifiersep> id == null || client <identifiersep> secret == null ) { \n <ect>
\t2 log4j <identifiersep> logger . set <identifiersep> level ( level . trace ) ; \n \t2 logger . error ( error <identifiersep> message <identifiersep> with <identifiersep> no <identifiersep> parameters ) ; \n \t2 logger . warn ( warning <identifiersep> message <identifiersep> with <identifiersep> no <identifiersep> parameters ) ; \n \t2 logger . info ( info <identifiersep> message <identifiersep> with <identifiersep> no <identifiersep> parameters ) ; \n <ect>
\t1 double <identifier> = read <identifiersep> <identifier> ( conf , topic <identifiersep> model <identifiersep> state <identifiersep> temp <identifiersep> path , i ) ; \n \t1 if ( double . is <identifiersep> na <identifiersep> n ( <identifier> ) ) { \n \t2 if ( ! ( <identifier> <identifiersep> <identifier> && i % iteration <identifiersep> block <identifiersep> size == 0 ) ) { \n \t2 continue ; } \n <ect>
\t2 <comment> \n \t2 for ( location <identifiersep> config lc : location <identifiersep> configs . values ( ) ) { \n \t3 if ( ! lc . is <identifiersep> valid ( ) ) { \n \t4 parse <identifiersep> completed = true ; \n <ect>
\t8 process <identifiersep> <identifier> ( item <identifiersep> node , process <identifiersep> type . normal ) ; } } \n \t6 catch ( exception e ) \n \t6 { \n \t7 thread <identifiersep> utils . check <identifiersep> interrupted ( e ) ; \n <ect>
\t2 } catch ( invalid <identifiersep> file <identifiersep> store <identifiersep> version <identifiersep> exception | io <identifiersep> exception e ) { \n \t3 try { \n \t4 revisions . close ( ) ; \n \t3 } catch ( io <identifiersep> exception re ) { \n <ect>
\t3 context = create <identifiersep> context ( ) ; \n \t3 list < org . dspace . content . community > dspace <identifiersep> <identifier> = community <identifiersep> service . find <identifiersep> all <identifiersep> top ( context ) ; \n \t3 <identifier> = new array <identifiersep> list < community > ( ) ; \n \t3 if ( ! ( ( limit != null ) && ( limit >= 0 ) && ( offset != null ) && ( offset >= 0 ) ) ) { \n <ect>
\t1 if ( m <identifiersep> uri . get <identifiersep> scheme ( ) . starts <identifiersep> with ( <string_literal> ) ) { \n \t2 url <identifiersep> stream <identifiersep> provider stream <identifiersep> provider = new url <identifiersep> stream <identifiersep> provider ( \n \t3 lookup <identifiersep> connection <identifiersep> timeout , lookup <identifiersep> read <identifiersep> timeout , \n \t3 null , null , null ) ; \n <ect>
\t6 log . info ( <string_literal> + rsrc1 ) ; \n \t6 log . info ( <string_literal> + rsrc2 ) ; \n \t6 log . info ( <string_literal> + rsrc3 ) ; \n \t6 log . info ( <string_literal> + rsrc4 ) ; \n <ect>
\t2 <string_literal> + partition . hash <identifiersep> map . memory <identifiersep> size ( ) + <string_literal> + file ) ; \n \t1 log . info ( <string_literal> + memory <identifiersep> used ) ; \n \t1 long mem <identifiersep> <identifier> = partition . hash <identifiersep> map . memory <identifiersep> size ( ) ; \n \t1 memory <identifiersep> used -= mem <identifiersep> <identifier> ; \n <ect>
\t2 <comment> \n \t2 node <identifiersep> iterator = model . list <identifiersep> objects <identifiersep> of <identifiersep> property ( <identifier> <identifiersep> resource , <identifier> <identifiersep> property ) ; \n \t2 if ( node <identifiersep> iterator . has <identifiersep> next ( ) && ( node = node <identifiersep> iterator . next ( ) ) . is <identifiersep> resource ( ) ) { \n \t3 <identifier> = node . as <identifiersep> resource ( ) . get <identifiersep> local <identifiersep> name ( ) ; \n <ect>
\t5 src <identifiersep> hyper <identifiersep> host . <identifier> <identifiersep> datastore ( mounted <identifiersep> datastore ) ; \n \t4 } catch ( exception <identifier> <identifiersep> ex ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + mounted <identifiersep> datastore + <string_literal> + <identifier> <identifiersep> host <identifiersep> name + <string_literal> + <identifier> <identifiersep> host <identifiersep> name \n \t7 + <string_literal> ) ; } \n <ect>
\t2 abort <identifiersep> multipart <identifiersep> upload ( ) ; \n \t2 snap <identifiersep> upload <identifiersep> info . set <identifiersep> state ( snapshot <identifiersep> upload <identifiersep> state . aborted ) ; } \n \t1 db . commit ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t6 if ( messages <identifiersep> <identifier> % <number_literal> == 0 ) { \n \t7 log . info ( <string_literal> + messages <identifiersep> <identifier> ) ; } \n \t6 <comment> \n \t5 log . info ( <string_literal> + messages <identifiersep> <identifier> ) ; \n <ect>
\t4 s = new <identifier> <identifiersep> raw ( res <identifiersep> loc , 0 , 0 , 1 , 1 ) ; \n \t4 sw = size . <identifier> <identifiersep> width ; \n \t4 sh = size . <identifier> <identifiersep> height ; \n \t3 } catch ( io <identifiersep> exception io ) { \n <ect>
\t4 new <identifiersep> <identifier> <identifiersep> <identifier> . add ( e ) ; \n \t3 else \n \t4 new <identifiersep> <identifier> <identifiersep> c . add ( e ) ; } \n \t2 if ( new <identifiersep> <identifier> <identifiersep> <identifier> . size ( ) + new <identifiersep> <identifier> <identifiersep> c . size ( ) != conditions . size ( ) ) \n <ect>
\t2 try { \n \t2 return class . for <identifiersep> name ( extension <identifiersep> class <identifiersep> name ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t2 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + extension <identifiersep> class <identifiersep> name + <string_literal> , e ) ; } } \n <ect>
\t3 lock . unlock ( ) ; } } \n \t1 @ override \n \t1 public void store <identifiersep> stop <identifiersep> event ( final daemon <identifiersep> stop <identifiersep> event stop <identifiersep> event ) { \n \t2 lock . lock ( ) ; \n <ect>
\t3 object <identifier> <identifiersep> hash = user . get <identifiersep> additional <identifiersep> info ( <identifier> <identifiersep> hash ) ; \n \t3 if ( <identifier> <identifiersep> hash != null ) { \n \t4 account . set <identifiersep> <identifier> ( ( byte [ ] ) <identifier> <identifiersep> hash ) ; \n \t3 } else { \n <ect>
\t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t6 <identifier> <identifiersep> log . warn ( <string_literal> + addresses . to <identifiersep> string ( from <identifiersep> ip , from <identifiersep> port ) ) ; \n \t5 return ; } \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 logger . debug ( err ) \n \t1 http <identifiersep> response <identifiersep> code = get <identifiersep> http <identifiersep> response <identifiersep> code ( err ) \n \t1 logger . debug ( <identifier> response from the ambari server : { 0 } ' . format ( http <identifiersep> response <identifiersep> code ) ) \n \t1 if http <identifiersep> response <identifiersep> code == http <identifiersep> ok and not out : \n <ect>
\t3 log . info ( <string_literal> , index <identifiersep> path ) ; \n \t3 string diff = <identifier> <identifiersep> diff . diff <identifiersep> to <identifiersep> <identifier> ( clone <identifiersep> visible <identifiersep> state ( index <identifiersep> definition <identifiersep> node ) , clone <identifiersep> visible <identifiersep> state ( new <identifiersep> definition ) ) ; \n \t3 log . info ( diff ) ; \n \t2 } else { \n <ect>
\t3 if ( source instanceof abstract <identifiersep> node && target instanceof abstract <identifiersep> node ) { \n \t4 source <identifiersep> node = ( abstract <identifiersep> node ) source ; \n \t4 target <identifiersep> node = ( abstract <identifiersep> node ) target ; \n \t3 } else { \n <ect>
\t1 public void process ( answer [ ] answers ) { \n \t2 if ( answers != null && answers [ 0 ] instanceof startup <identifiersep> answer ) { \n \t3 startup <identifiersep> answer startup = ( startup <identifiersep> answer ) answers [ 0 ] ; \n \t3 int interval = startup . get <identifiersep> ping <identifiersep> interval ( ) ; \n <ect>
\t5 return msg ; \n \t4 } catch ( throwable t ) { \n \t5 logger . warn ( <string_literal> , t ) ; } \n \t3 } else { \n <ect>
\t3 if ( n <identifiersep> region > short . max <identifiersep> value ) { \n \t4 logger . info ( <string_literal> + short . max <identifiersep> value ) ; \n \t4 n <identifiersep> region = short . max <identifiersep> value ; } \n \t3 if ( n <identifiersep> region != original ) { \n <ect>
\t4 for ( map . entry < string , index <identifiersep> meta <identifiersep> data . custom > entry : request . <identifier> . entry <identifiersep> set ( ) ) { \n \t5 template <identifiersep> builder . put <identifiersep> custom ( entry . get <identifiersep> key ( ) , entry . get <identifiersep> value ( ) ) ; } \n \t4 index <identifiersep> template <identifiersep> meta <identifiersep> data template = template <identifiersep> builder . build ( ) ; \n \t4 meta <identifiersep> data . builder builder = meta <identifiersep> data . builder ( current <identifiersep> state . meta <identifiersep> data ( ) ) . put ( template ) ; \n <ect>
\t1 lb = load <identifiersep> balancers . get <identifiersep> <identifier> ( ctx , lb <identifiersep> name ) ; \n \t1 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n \t1 throw new access <identifiersep> point <identifiersep> not <identifiersep> found <identifiersep> exception ( ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t6 field . set <identifiersep> accessible ( true ) ; \n \t6 object value = field . get ( obj ) ; \n \t6 map . put ( attr <identifiersep> name , value != null ? value . to <identifiersep> string ( ) : null ) ; } \n \t5 catch ( exception e ) { \n <ect>
\t3 parse <identifiersep> dependencies ( parse <identifiersep> properties ( is , dependencies <identifiersep> file ) , build ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( this , <string_literal> ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t4 if ( ! <identifier> <identifiersep> network <identifiersep> acl <identifiersep> mgr . revoke <identifiersep> acl <identifiersep> items <identifiersep> for <identifiersep> network ( network <identifiersep> id ) ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t5 success = false ; } \n \t3 } catch ( final resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t3 return new check <identifiersep> router <identifiersep> answer ( cmd , msg ) ; } \n \t2 return new check <identifiersep> router <identifiersep> answer ( cmd , result . second ( ) , true ) ; } \n \t1 protected answer execute ( get <identifiersep> dom <identifiersep> r <identifiersep> version <identifiersep> cmd cmd ) { \n <ect>
\t5 { \n \t6 logger . error ( <string_literal> , e ) ; } \n \t5 catch ( invocation <identifiersep> target <identifiersep> exception e ) \n \t5 { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 string id = spout . get <identifiersep> id ( ) ; \n \t3 if ( this . spout <identifiersep> map . get ( id ) == null || override ) { \n \t4 this . spout <identifiersep> map . put ( spout . get <identifiersep> id ( ) , spout ) ; \n \t3 } else { \n <ect>
\t3 config . append <identifiersep> child ( config <identifiersep> port <identifiersep> profile <identifiersep> details ( doc , name , type , binding , mode , <identifier> , <identifier> , <identifier> <identifiersep> name ) ) ; \n \t3 edit <identifiersep> config . append <identifiersep> child ( config ) ; \n \t3 return serialize ( dom <identifiersep> impl , doc ) ; \n \t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n <ect>
\t3 = active <identifiersep> calls <identifiersep> repository . find <identifiersep> call <identifiersep> peer ( <identifier> <identifiersep> <identifier> . get <identifiersep> sid ( ) ) ; \n \t2 <identifier> . type type = <identifier> <identifiersep> <identifier> . get <identifiersep> type ( ) ; \n \t2 if ( type == type . error ) \n \t2 { \n <ect>
<number_literal> final boolean credential <identifiersep> provided ) { \n \t2 final string unique <identifiersep> ticket <identifiersep> id <identifiersep> gen <identifiersep> key = service . get <identifiersep> class ( ) . get <identifiersep> name ( ) ; \n \t2 unique <identifiersep> ticket <identifiersep> id <identifiersep> generator service <identifiersep> ticket <identifiersep> unique <identifiersep> ticket <identifiersep> id <identifiersep> generator = null ; \n \t2 if ( this . unique <identifiersep> ticket <identifiersep> id <identifiersep> <identifier> <identifiersep> for <identifiersep> service != null && ! this . unique <identifiersep> ticket <identifiersep> id <identifiersep> <identifier> <identifiersep> for <identifiersep> service . is <identifiersep> empty ( ) ) { \n <ect>
\t1 <comment> \n \t1 public void execute ( ) throws build <identifiersep> exception { \n <ect>
\t4 . set <identifiersep> repeat <identifiersep> last <identifiersep> token ( false ) \n \t4 . set <identifiersep> row <identifiersep> limit ( <number_literal> ) \n \t4 . execute <identifiersep> with <identifiersep> callback ( callback ) ; \n \t3 set < long > set = callback . get ( ) ; \n <ect>
\t2 return retrieve ( key , fn ) ; } \n \t1 } ) ; } \n @ override \n public void remove ( string key ) { \n <ect>
\t2 final boolean res = this . <identifier> <identifiersep> <identifier> . create ( p , c ) ; \n \t2 if ( res ) { \n \t3 logger . debug ( <string_literal> , p ) ; \n \t2 } else { \n <ect>
\t3 for ( garbage <identifiersep> collector <identifiersep> mx <identifiersep> bean <identifier> : list ) { \n \t4 if ( old <identifiersep> gen <identifiersep> collector <identifiersep> names . contains ( <identifier> . get <identifiersep> name ( ) ) ) { \n \t5 full <identifiersep> gc <identifiersep> counts += <identifier> . get <identifiersep> collection <identifiersep> count ( ) ; } } \n \t2 } catch ( throwable e ) { \n <ect>
\t2 return response . build ( ) ; } \n \t1 public v <identifiersep> admin <identifiersep> proto . list <identifiersep> scheduled <identifiersep> jobs <identifiersep> response handle <identifiersep> list <identifiersep> scheduled <identifiersep> jobs ( v <identifiersep> admin <identifiersep> proto . list <identifiersep> scheduled <identifiersep> jobs <identifiersep> request request ) { \n \t2 v <identifiersep> admin <identifiersep> proto . list <identifiersep> scheduled <identifiersep> jobs <identifiersep> response . builder response = v <identifiersep> admin <identifiersep> proto . list <identifiersep> scheduled <identifiersep> jobs <identifiersep> response . new <identifiersep> builder ( ) ; \n \t2 try { \n <ect>
\t4 } catch ( throwable tt ) { \n \t5 log . error ( <string_literal> , tt ) ; } } \n \t3 return init <identifiersep> error <identifiersep> exit <identifiersep> code ; } \n \t2 <comment> \n <ect>
\t1 super . channel <identifiersep> inactive ( ctx ) ; } \n @ override \n public void exception <identifiersep> caught ( channel <identifiersep> handler <identifiersep> context ctx , throwable cause ) { \n \t1 if ( ! is <identifiersep> complete ( ) ) { \n <ect>
\t1 public connection master <identifiersep> connect ( string ip , string username , queue < string > password ) { \n \t2 connection conn = null ; \n \t2 try { \n \t3 conn = new connection ( get <identifiersep> url ( ip ) , <number_literal> ) ; \n <ect>
\t3 . get <identifiersep> property ( simple <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> key ) ; \n \t2 if ( ! string <identifiersep> utils . is <identifiersep> empty ( <identifier> <identifiersep> path ) ) { \n \t3 input <identifiersep> stream is = file <identifiersep> manager . get ( ) . open ( <identifier> <identifiersep> path ) ; \n \t3 if ( is == null ) { \n <ect>
\t4 return create <identifiersep> user ( entry , null ) ; \n \t3 } else if ( entry . has <identifiersep> object <identifiersep> class ( config . get <identifiersep> group <identifiersep> config ( ) . get <identifiersep> object <identifiersep> classes ( ) ) ) { \n \t4 return create <identifiersep> group ( entry , null ) ; \n \t3 } else { \n <ect>
\t3 byte msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply ; \n \t3 org . apache . thrift . t <identifiersep> serializable msg ; \n \t3 list <identifiersep> tables <identifiersep> result result = new list <identifiersep> tables <identifiersep> result ( ) ; \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 { \n \t4 logger . error ( <string_literal> , e1 ) ; } \n \t3 catch ( illegal <identifiersep> state <identifiersep> exception e1 ) \n \t3 { \n <ect>
\t2 address local <identifiersep> address = <identifier> . get <identifiersep> address ( ) ; \n \t2 <comment> \n \t2 object id = id <identifiersep> generator . generate <identifiersep> id ( ) ; \n \t2 string display <identifiersep> name = get <identifiersep> base <identifiersep> name ( ) + <string_literal> + id ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 boolean ignore <identifiersep> first <identifiersep> <identifier> = true ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n <ect>
\t1 public void swap <identifiersep> <identifier> ( final string session <identifiersep> id , final uuid room <identifiersep> id , final uuid table <identifiersep> id , final int <identifier> <identifiersep> <identifier> , final int <identifier> <identifiersep> <identifier> ) throws mage <identifiersep> exception { \n \t2 execute ( <string_literal> , session <identifiersep> id , ( ) - > { \n \t3 optional < session > session = session <identifiersep> manager . instance . get <identifiersep> session ( session <identifiersep> id ) ; \n \t3 if ( ! session . is <identifiersep> present ( ) ) { \n <ect>
\t1 <comment> \n \t1 key <identifiersep> store <identifiersep> location = new file ( key <identifiersep> store <identifiersep> location , configuration . master <identifiersep> keystore <identifiersep> filename <identifiersep> default ) ; } \n \t1 if ( key <identifiersep> store <identifiersep> location . exists ( ) ) { \n \t1 if ( ! key <identifiersep> store <identifiersep> location . can <identifiersep> write ( ) ) { \n <ect>
\t5 } else { \n \t6 <comment> \n \t3 <identifier> <identifiersep> user <identifiersep> dao . update ( user <identifiersep> id , user ) ; \n \t2 } catch ( throwable th ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; } \n \t2 } catch ( exception e ) { \n \t2 logger . error ( <string_literal> , e ) ; \n \t2 } finally { \n <ect>
\t3 log . info ( <string_literal> + current + <string_literal> + get <identifiersep> repository <identifiersep> name ( ) ) ; \n \t2 } else { \n \t3 log . info ( <string_literal> + get <identifiersep> repository <identifiersep> name ( ) ) ; } \n \t2 if ( completed > 0 ) { \n <ect>
\t5 log . warn ( <string_literal> , msg . get <identifiersep> src ( ) , sasl <identifiersep> header ) ; \n \t5 send <identifiersep> <identifier> <identifiersep> message ( gms <identifiersep> header . get <identifiersep> type ( ) , msg . get <identifiersep> src ( ) , <string_literal> ) ; \n \t5 return false ; } \n \t3 } catch ( sasl <identifiersep> exception e ) { \n <ect>
\t7 <comment> <ect>
\t4 certificate <identifiersep> name , default <identifiersep> server <identifiersep> cert <identifiersep> path , cert <identifiersep> pem , pk <identifiersep> pem , \n \t4 null ) ; \n \t2 } catch ( final exception ex ) { \n \t3 throw new event <identifiersep> handler <identifiersep> exception ( <string_literal> , ex ) ; } \n <ect>
\t8 | <identifier> . stream <identifiersep> flags <identifiersep> <identifier> <identifiersep> off , \n \t7 null <comment> ) ; } \n \t3 catch ( port <identifiersep> audio <identifiersep> exception <identifier> ) \n \t3 { \n <ect>
\t5 this . log . debug ( <string_literal> , <identifier> ) ; } } \n \t3 this . conn = null ; } } \n \t1 private synchronized void shutdown <identifiersep> connection ( ) { \n \t2 if ( this . conn != null ) { \n <ect>
\t6 } else { \n \t7 log . warn ( <string_literal> + name + <string_literal> + file ) ; } \n \t5 } <comment> \n \t4 } catch ( exception e ) { \n <ect>
\t5 client . system <identifiersep> add <identifiersep> keyspace ( <identifier> ) ; \n \t5 retry <identifiersep> set <identifiersep> keyspace ( keyspace <identifiersep> name , client ) ; \n \t5 log . debug ( <string_literal> , keyspace <identifiersep> name ) ; \n \t4 } catch ( invalid <identifiersep> request <identifiersep> exception <identifier> ) { \n <ect>
\t8 return false ; } \n \t7 else if ( api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) != null ) { \n \t8 s <identifiersep> logger . info ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; } } } } \n \t4 else if ( ( api . get <identifiersep> response <identifiersep> type ( ) != response <identifiersep> type . error ) && ( api . get <identifiersep> response <identifiersep> code ( ) != <number_literal> ) ) { \n <ect>
\t6 case http <identifiersep> status . sc <identifiersep> ok : \n \t7 break ; \n \t6 case http <identifiersep> status . sc <identifiersep> internal <identifiersep> server <identifiersep> error : \n \t7 <comment> \n <ect>
\t2 if ( config . is <identifiersep> do <identifiersep> privileged <identifiersep> allow ( ) && <identifier> <identifiersep> provider . <identifier> <identifiersep> privileged ( ) ) { \n \t3 return chain . connection <identifiersep> get <identifiersep> meta <identifiersep> data ( connection ) ; } \n \t2 if ( ! this . provider . get <identifiersep> config ( ) . is <identifiersep> metadata <identifiersep> allow ( ) ) { \n \t3 if ( is <identifiersep> log <identifiersep> violation ( ) ) { \n <ect>
\t4 if ( ! locale <identifiersep> concept <identifiersep> names <identifiersep> map . contains <identifiersep> key ( concept <identifiersep> name . get <identifiersep> locale ( ) ) ) { \n \t5 locale <identifiersep> concept <identifiersep> names <identifiersep> map . put ( concept <identifiersep> name . get <identifiersep> locale ( ) , new linked <identifiersep> list < > ( ) ) ; } \n \t4 locale <identifiersep> concept <identifiersep> names <identifiersep> map . get ( concept <identifiersep> name . get <identifiersep> locale ( ) ) . add ( concept <identifiersep> name ) ; } } \n \t2 catch ( database <identifiersep> exception | sql <identifiersep> exception e ) { \n <ect>
\t3 if ( buffer . length == 0 ) { \n \t4 logger . trace ( <string_literal> + formatter . format ( new <identifiersep> size ) + <string_literal> ) ; \n \t3 } else { \n \t4 logger . debug ( <string_literal> + formatter . format ( buffer . length ) + <string_literal> + formatter . format ( new <identifiersep> size ) + <string_literal> ) ; \n <ect>
\t2 client . wait <identifiersep> for <identifiersep> active ( true ) ; \n \t2 server . wait <identifiersep> for <identifiersep> active ( true ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , 1 , server . group . size ( ) ) ; \n <ect>
\t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( no <identifiersep> such <identifiersep> padding <identifiersep> exception e ) { \n <ect>
\t3 apply <identifiersep> acl ( entry , permission <identifiersep> type , new hash <identifiersep> set < object > ( ) ) ; \n \t2 } catch ( invalid <identifiersep> name <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , result . get <identifiersep> name ( ) , e ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 if ( address == null ) { \n \t2 return null ; } \n \t1 master <identifiersep> client <identifiersep> service . client client = thrift <identifiersep> util \n \t2 . get <identifiersep> client ( new master <identifiersep> client <identifiersep> service . client . factory ( ) , address , this ) ; \n <ect>
\t3 synchronized ( this ) { \n \t4 schema <identifiersep> mappings = this . schema <identifiersep> mappings ; \n \t4 if ( schema <identifiersep> mappings == null ) { \n <ect>
\t4 <identifier> . decrement <identifiersep> and <identifiersep> get ( ) ; \n \t4 if ( ! future . is <identifiersep> success ( ) ) { \n \t5 channel channel = future . get <identifiersep> channel ( ) ; \n \t5 if ( ! is <identifiersep> closed ( ) ) { \n <ect>
\t2 public void on <identifiersep> failure ( final exchange exchange ) { \n \t3 try { \n \t4 executor . submit ( new run <identifiersep> command ( failure <identifiersep> command , exchange ) ) . get ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 } ; \n \t2 pattern <identifiersep> processor github <identifiersep> user <identifiersep> processor = new pattern <identifiersep> processor ( <string_literal> ) { \n \t3 @ override \n \t3 public request <identifiersep> matcher . match <identifiersep> other process <identifiersep> page ( page page ) { \n <ect>
<comment> \n public void <identifier> ( ) { \n \t1 if ( this . installed ) { \n <ect>
\t3 if ( ! <identifier> <identifiersep> lb <identifiersep> mgr . revoke <identifiersep> load <identifiersep> balancers <identifiersep> for <identifiersep> network ( network <identifiersep> id , scheme . public ) ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t4 success = false ; } \n \t2 } catch ( final resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t1 return metric <identifiersep> name . replace ( ' <identifiersep> ' , ' - ' ) ; } \n private void warn <identifiersep> if <identifiersep> topology <identifiersep> name <identifiersep> contains <identifiersep> warn <identifiersep> string ( string name ) { \n \t1 for ( string warn : warn <identifiersep> strings <identifiersep> for <identifiersep> topology <identifiersep> or <identifiersep> component <identifiersep> name ) { \n \t1 if ( name . contains ( warn ) ) { \n <ect>
\t1 <comment> \n \t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n \t1 test <identifiersep> txn <identifiersep> <identifier> . run <identifiersep> worker ( hive <identifiersep> conf ) ; \n \t1 rs = run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n <ect>
\t6 <string_literal> , names , \n \t6 names , \n \t6 new open <identifiersep> type [ ] { simple <identifiersep> type . long , simple <identifiersep> type . long } ) ; \n \t4 } catch ( open <identifiersep> data <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , this . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t3 return true ; } \n \t2 final long count <identifiersep> uses = ticket <identifiersep> state . get <identifiersep> count <identifiersep> of <identifiersep> uses ( ) ; \n \t2 if ( count <identifiersep> uses >= this . number <identifiersep> of <identifiersep> uses ) { \n <ect>
\t7 log . debug ( <string_literal> ) ; \n \t6 break ; } \n \t5 else if ( line . starts <identifiersep> with ( error ) || line . starts <identifiersep> with ( client <identifiersep> error ) || line . starts <identifiersep> with ( server <identifiersep> error ) ) { \n <ect>
\t5 log . info ( log . fac <identifiersep> test , <string_literal> + val ) ; \n \t5 if ( ! <identifier> <identifiersep> results . contains ( val ) ) { \n \t6 content <identifiersep> name put <identifiersep> result = writer . put ( new content <identifiersep> name ( name , integer . to <identifiersep> string ( val ) ) , integer . to <identifiersep> string ( next ) . get <identifiersep> bytes ( ) ) ; \n \t6 result = true ; \n <ect>
\t4 ds <identifiersep> type = ds <identifiersep> type . <identifier> ; \n \t3 } else if ( opts [ 0 ] . equals ( <string_literal> ) ) { \n \t4 ds <identifiersep> type = ds <identifiersep> type . <identifier> ; \n \t3 } else { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> no <identifiersep> vars ( ) throws exception { \n <ect>
\t4 . put ( <string_literal> , <number_literal> ) \n \t4 . put ( <string_literal> , <number_literal> ) \n \t4 . build ( ) , \n \t3 gateway <identifiersep> allocator ) ; \n <ect>
\t4 i <identifiersep> block <identifiersep> state old <identifiersep> state = w . get <identifiersep> block <identifiersep> state ( r . pos ) ; \n \t4 <identifier> <identifiersep> tag <identifiersep> compound <identifier> = new <identifier> <identifiersep> tag <identifiersep> compound ( ) ; \n \t4 tile <identifiersep> entity old = w . get <identifiersep> tile <identifiersep> entity ( r . pos ) ; \n \t4 if ( ! ( old instanceof tile <identifiersep> generic <identifiersep> pipe ) ) { \n <ect>
\t3 public long get <identifiersep> value ( ) { \n \t4 try { \n \t5 return metrics . get <identifiersep> <identifier> <identifiersep> count ( event <identifiersep> <identifier> . call ( ) ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> field <identifiersep> error error ) { \n <ect>
\t3 return ticket <identifiersep> granting <identifiersep> ticket . get <identifiersep> authentication ( ) . get <identifiersep> principal ( ) ; \n \t2 } catch ( final invalid <identifiersep> ticket <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , e . get <identifiersep> message ( ) ) ; \n \t3 logger . debug ( e . get <identifiersep> message ( ) , e ) ; } \n <ect>
\t1 sql ? . close ( ) } \n \t1 lines } \n @ override \n void create <identifiersep> database ( string name ) { \n <ect>
\t3 @ override \n \t3 public void on <identifiersep> failure ( fetch <identifiersep> exception e , client <identifiersep> getter state ) { \n \t4 if ( e . mode == fetch <identifiersep> exception <identifiersep> mode . cancelled ) { \n \t5 <comment> \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 timer <identifiersep> service ts ; \n \t1 @ timeout \n \t1 @ lock ( lock <identifiersep> type . read ) \n \t1 public void timeout ( timer t ) { \n <ect>
\t3 for ( cms <identifiersep> <identifier> <identifiersep> unit <identifier> : web <identifiersep> <identifier> ) { \n \t4 if ( m <identifiersep> app . is <identifiersep> parent <identifiersep> of <identifiersep> <identifier> <identifiersep> <identifier> ( <identifier> . get <identifiersep> name ( ) ) ) { \n \t5 add <identifiersep> <identifier> <identifiersep> to <identifiersep> tree ( <identifier> , item ) ; } } \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 logger . debug ( <string_literal> + entry . get <identifiersep> key ( ) ) ; \n \t4 entry . get <identifiersep> value ( ) . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 protected string produce <identifiersep> ticket <identifiersep> identifier ( final authentication authentication ) { \n \t2 string tgt <identifiersep> id = this . ticket <identifiersep> granting <identifiersep> ticket <identifiersep> unique <identifiersep> ticket <identifiersep> id <identifiersep> generator . get <identifiersep> new <identifiersep> ticket <identifiersep> id ( ticket <identifiersep> granting <identifiersep> ticket . prefix ) ; \n \t2 if ( this . cipher <identifiersep> executor != null ) { \n <ect>
\t4 try { \n \t5 <comment> \n \t5 url url = new url ( update <identifiersep> url ) ; \n \t5 if ( ! url . to <identifiersep> string ( ) . ends <identifiersep> with ( module <identifiersep> constants . update <identifiersep> file <identifiersep> name ) ) { \n <ect>
\t7 admin . delete <identifiersep> table ( table <identifiersep> name . value <identifiersep> of ( table ) ) ; \n \t7 logger . debug ( <string_literal> + table ) ; \n \t7 output . append ( <string_literal> + table + <string_literal> ) ; \n \t6 } else { \n <ect>
\t2 command . add ( <string_literal> ) ; \n \t2 command . add ( <string_literal> + <identifier> + <string_literal> + dest <identifiersep> cidr + <string_literal> ) ; \n \t2 string result = command . execute ( ) ; \n \t2 if ( result != null ) { \n <ect>
\t3 final docker <identifiersep> api api ; \n \t3 try { \n \t4 api = get <identifiersep> docker <identifiersep> api ( ) ; \n \t3 } catch ( runtime <identifiersep> exception ex ) { \n <ect>
\t4 while ( ( total <identifiersep> read <identifiersep> bytes < content <identifiersep> length ) && ( ( length = in . read ( buffer ) ) != - 1 ) ) { \n \t5 log . debug ( <string_literal> , length ) ; \n \t5 out . write ( buffer , 0 , length ) ; \n \t5 total <identifiersep> read <identifiersep> bytes += length ; \n <ect>
\t2 if ( ! file . can <identifiersep> read ( ) ) { \n \t3 logger . warn ( <string_literal> , file . get <identifiersep> name ( ) ) ; \n \t3 return new array <identifiersep> list < > ( 0 ) ; } \n \t2 if ( ! file . exists ( ) ) { \n <ect>
\t4 } else { \n \t5 <identifier> . set <identifiersep> string <identifiersep> value ( x <identifiersep> wiki <identifiersep> server <identifiersep> class <identifiersep> document <identifiersep> initializer . field <identifiersep> server , <string_literal> ) ; } \n \t4 needs <identifiersep> update = true ; \n \t3 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t2 return use <identifiersep> locking ; } \n \t1 public void set <identifiersep> use <identifiersep> locking ( boolean use <identifiersep> locking ) { \n \t2 this . use <identifiersep> locking = use <identifiersep> locking ; } \n \t1 public void run ( ) { \n <ect>
\t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n \t2 < button ng - click = <string_literal> > info < / button > \n <ect>
\t1 public void stop ( ) { \n \t2 try { \n \t3 connection . close ( ) ; \n \t2 } catch ( jms <identifiersep> exception jms <identifiersep> ex ) { \n <ect>
\t1 public static s3object <identifiersep> input <identifiersep> stream get <identifiersep> object <identifiersep> stream ( final client <identifiersep> options client <identifiersep> options , final string bucket <identifiersep> name , final string key ) { \n \t2 logger . debug ( format ( <string_literal> , key , bucket <identifiersep> name ) ) ; \n \t2 return get <identifiersep> transfer <identifiersep> manager ( client <identifiersep> options ) . get <identifiersep> amazon <identifiersep> s3client ( ) . get <identifiersep> object ( bucket <identifiersep> name , key ) . get <identifiersep> object <identifiersep> content ( ) ; } \n \t1 public static list < s3object <identifiersep> summary > list <identifiersep> directory ( final client <identifiersep> options client <identifiersep> options , final string bucket <identifiersep> name , final string directory ) { \n <ect>
\t3 throw e ; } \n \t3 break ; \n \t2 default : \n \t3 throw e ; } } \n <ect>
\t3 system . out . println ( <string_literal> ) ; \n \t3 context . complete ( ) ; \n \t3 system . exit ( 0 ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } else { \n \t3 if ( <identifier> <identifiersep> transcoder . special <identifiersep> long == d . get <identifiersep> flag ( ) ) { \n \t4 return this . <identifier> . decode <identifiersep> long ( d . get <identifiersep> data ( ) ) ; \n \t3 } else { \n <ect>
\t3 } catch ( remote <identifiersep> exception e ) { \n \t4 log . error ( <string_literal> , e ) ; } \n \t3 if ( ! temporary <identifiersep> file . delete ( ) ) { \n <ect>
\t2 } else { \n \t2 move <identifiersep> custom <identifiersep> location <identifiersep> task <identifiersep> outputs ( fs , table , hive <identifiersep> conf ) ; } \n \t2 try { \n \t2 update <identifiersep> table <identifiersep> schema ( client , table , job <identifiersep> info . get <identifiersep> output <identifiersep> schema ( ) ) ; \n <ect>
\t2 final map < string , object > attributes = this . cassandra <identifiersep> repository . get <identifiersep> user ( username ) ; \n \t2 if ( attributes == null || attributes . is <identifiersep> empty ( ) \n \t4 || ! attributes . contains <identifiersep> key ( cassandra <identifiersep> authentication <identifiersep> properties . get <identifiersep> username <identifiersep> attribute ( ) ) \n \t4 || ! attributes . contains <identifiersep> key ( cassandra <identifiersep> authentication <identifiersep> properties . get <identifiersep> password <identifiersep> attribute ( ) ) ) { \n <ect>
public static < c extends component <identifiersep> id > partition get <identifiersep> partition <identifiersep> for <identifiersep> local <identifiersep> service ( class < c > comp <identifiersep> class ) throws eucalyptus <identifiersep> cloud <identifiersep> exception { \n \t1 try { \n \t1 return partitions . lookup ( components . lookup ( comp <identifiersep> class ) . get <identifiersep> local <identifiersep> service <identifiersep> configuration ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 this . spawn <identifiersep> mesh = new spawn <identifiersep> mesh ( this ) ; \n \t2 <comment> \n \t2 if ( <string_literal> . equals ( queue <identifiersep> type ) ) { \n <ect>
\t3 global <identifiersep> state . release ( this ) ; \n \t3 if ( leak ) \n \t3 { \n \t4 string id = this . to <identifiersep> string ( ) ; \n <ect>
\t4 throw new runtime <identifiersep> exception ( <string_literal> + cluster <identifiersep> id + <string_literal> ) ; } \n \t3 log . info ( <string_literal> , \n \t5 cluster <identifiersep> id , success ) ; \n \t2 } catch ( runtime <identifiersep> exception ex ) { \n <ect>
\t3 <identifier> <identifiersep> log . debug ( <string_literal> + conn <identifiersep> host <identifiersep> name ) ; \n \t3 break ; \n \t2 case address <identifiersep> type . <identifier> : \n \t3 if ( command != command . udp <identifiersep> associate ) { \n <ect>
<comment> \n @ test \n public void test <identifiersep> bad <identifiersep> simple <identifiersep> append ( ) throws interrupted <identifiersep> exception , \n \t1 lifecycle <identifiersep> exception , event <identifiersep> delivery <identifiersep> exception , io <identifiersep> exception { \n <ect>
\t3 <comment> \n \t3 app . <identifier> ( <string_literal> , collections . empty <identifiersep> map ( ) ) ; \n \t3 tx . success ( ) ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t3 output <identifiersep> columns . add ( new <identifiersep> h <identifiersep> node <identifiersep> id ) ; \n \t3 new <identifiersep> column <identifiersep> absolute <identifiersep> name = <identifier> . get <identifiersep> absolute <identifiersep> column <identifiersep> name ( workspace . get <identifiersep> factory ( ) ) ; \n \t3 return c ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } catch ( invalid <identifiersep> key <identifiersep> exception e ) { \n \t3 log . info ( log . fac <identifiersep> io , <string_literal> + publisher + <string_literal> ) ; \n \t3 throw new signature <identifiersep> exception ( e ) ; \n \t2 } catch ( signature <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public void activate ( ) { \n \t2 super . activate ( ) ; \n \t2 set <identifiersep> properly <identifiersep> configured ( true ) ; \n <ect>
\t3 return null ; } \n \t2 } ) ; \n \t2 } catch ( final <identifier> <identifiersep> metadata <identifiersep> exception e ) { \n \t2 if ( ! handle <identifiersep> exception ( e ) ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t2 if ( my <identifiersep> name == null ) { \n \t3 my <identifiersep> name = new <identifiersep> name ( ) ; } \n \t2 string ver <identifiersep> string = fs . get ( <string_literal> ) ; \n \t2 if ( ver <identifiersep> string == null ) { \n <ect>
\t5 try { \n \t6 get <identifiersep> failed <identifiersep> message = new get <identifiersep> failed <identifiersep> message ( inner <identifiersep> <identifier> , req <identifiersep> id , found <identifiersep> data <identifiersep> length , found <identifiersep> data <identifiersep> mime <identifiersep> type ) ; \n \t6 started = true ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 if ( source <identifiersep> secret != null ) { \n \t6 git <identifiersep> source <identifiersep> secret <identifiersep> name = source <identifiersep> secret . get <identifiersep> name ( ) ; } } } \n \t3 if ( ! found <identifiersep> existing <identifiersep> git <identifiersep> url ) { \n \t4 log . warn ( <string_literal> + build <identifiersep> config ) ; } \n <ect>
\t4 long local <identifiersep> file <identifiersep> length = local . file <identifiersep> length ( name ) ; \n \t4 long remote <identifiersep> file <identifiersep> length = remote . file <identifiersep> length ( name ) ; \n \t4 valid <identifiersep> local <identifiersep> copy <identifiersep> present = local <identifiersep> file <identifiersep> length == remote <identifiersep> file <identifiersep> length ; \n \t4 if ( ! valid <identifiersep> local <identifiersep> copy <identifiersep> present ) { \n <ect>
\t1 @ reflection <identifiersep> use \n \t1 private pair < job <identifiersep> info . status , string > <identifier> <identifiersep> reboot ( final vm <identifiersep> work <identifiersep> reboot work ) throws exception { \n \t2 final vm <identifiersep> instance <identifiersep> vo vm = <identifier> <identifiersep> entity <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( vm <identifiersep> instance <identifiersep> vo . class , work . get <identifiersep> vm <identifiersep> id ( ) ) ; \n \t2 if ( vm == null ) { \n <ect>
\t2 @ override \n \t2 public void channel <identifiersep> active ( final channel <identifiersep> handler <identifiersep> context ctx ) \n \t4 throws exception { \n \t3 is <identifiersep> active = true ; \n <ect>
\t3 oldest = task . get <identifiersep> creation <identifiersep> timestamp ( ) ; \n \t3 oldest <identifiersep> task = task ; } } \n \t2 return oldest <identifiersep> task ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t4 { \n \t5 errors . add ( new <identifier> <identifiersep> error ( ( ( status . has <identifiersep> status ) e . get <identifiersep> cause ( ) ) . status ( ) , e ) ) ; } \n \t4 else \n \t4 { \n <ect>
\t8 state . end <identifiersep> write <identifiersep> sequence ( ) ; \n \t8 if ( cancel <identifiersep> key ) { \n \t9 key . cancel ( ) ; } } } } } } \n \t2 } catch ( exception e ) { \n <ect>
\t1 public void on <identifiersep> nick ( irc <identifiersep> user user , string new <identifiersep> nick ) { \n \t2 log . debug ( <string_literal> + server + <string_literal> + user + <string_literal> + new <identifiersep> nick ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> notice ( string target , irc <identifiersep> user user , string msg ) { \n <ect>
<number_literal> resolution = resolution . substring ( 0 , resolution . index <identifiersep> of ( <string_literal> ) ) ; } \n \t10 try { \n <number_literal> set <identifiersep> width ( integer . parse <identifiersep> int ( resolution . substring ( 0 , resolution . index <identifiersep> of ( <string_literal> ) ) ) ) ; \n \t10 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t4 return false ; } \n \t3 if ( ! col . get <identifiersep> column <identifiersep> desc ( ) . is <identifiersep> computed <identifiersep> column ( ) ) { \n \t4 column <identifiersep> desc found <identifiersep> col = table . find <identifiersep> column <identifiersep> by <identifiersep> name ( col . get <identifiersep> name ( ) ) ; \n \t4 if ( col . get <identifiersep> column <identifiersep> desc ( ) . equals ( found <identifiersep> col ) == false ) { \n <ect>
\t3 <identifier> . append ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 logger . error ( this , <string_literal> + e , e ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n \t3 <identifier> . append ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + volume . get <identifiersep> id ( ) + <string_literal> + dest <identifiersep> pool . get <identifiersep> id ( ) ) ; \n \t4 continue ; } \n \t3 volumes <identifiersep> need <identifiersep> to <identifiersep> migrate . add ( volume ) ; } \n \t2 if ( volumes <identifiersep> need <identifiersep> to <identifiersep> migrate . is <identifiersep> empty ( ) ) { \n <ect>
\t5 return url ; } \n \t4 string host <identifiersep> ip = summary . get <identifiersep> host <identifiersep> ip ( ) ; \n \t4 try { \n \t5 uri resolved <identifiersep> uri = new uri ( uri . get <identifiersep> scheme ( ) , uri . get <identifiersep> user <identifiersep> info ( ) , host <identifiersep> ip , uri . get <identifiersep> port ( ) , uri . get <identifiersep> path ( ) , uri . get <identifiersep> query ( ) , uri . get <identifiersep> fragment ( ) ) ; \n <ect>
\t1 public web <identifiersep> application <identifiersep> service extract <identifiersep> service <identifiersep> internal ( final http <identifiersep> servlet <identifiersep> request request ) { \n \t2 return get <identifiersep> service <identifiersep> factories ( ) . stream ( ) . map ( factory - > { \n \t3 final web <identifiersep> application <identifiersep> service service = factory . create <identifiersep> service ( request ) ; \n \t3 if ( service != null ) { \n <ect>
\t2 constructor custom <identifiersep> strategy = clazz . get <identifiersep> constructor ( new class [ ] { } ) ; \n \t2 strategy = ( i <identifiersep> pentaho <identifiersep> request <identifiersep> context <identifiersep> holder <identifiersep> strategy ) custom <identifiersep> strategy . new <identifiersep> instance ( new object [ ] { } ) ; \n \t1 } catch ( exception e ) { \n \t2 throw new runtime <identifiersep> exception ( e ) ; } } \n <ect>
\t8 + <string_literal> , credential , credential . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t7 handle <identifiersep> authentication <identifiersep> exception ( e , handler . get <identifiersep> name ( ) , builder ) ; \n \t7 proceed <identifiersep> with <identifiersep> next <identifiersep> handler = true ; } \n \t5 } else { \n <ect>
\t5 <comment> \n \t5 list < account <identifiersep> vo > disabled <identifiersep> accounts = <identifier> <identifiersep> account <identifiersep> dao . find <identifiersep> <identifier> <identifiersep> for <identifiersep> disabled <identifiersep> accounts ( ) ; \n \t5 s <identifiersep> logger . info ( <string_literal> + disabled <identifiersep> accounts . size ( ) + <string_literal> ) ; \n \t5 for ( account <identifiersep> vo account : disabled <identifiersep> accounts ) { \n <ect>
\t2 finally \n \t2 { \n \t3 validated <identifiersep> for <identifiersep> repair . release ( ) ; \n \t3 cfs . get <identifiersep> data <identifiersep> tracker ( ) . <identifier> <identifiersep> <identifier> ( <identifier> ) ; } \n <ect>
\t1 protected void stop <identifiersep> internal ( ) { \n \t2 try { \n \t3 nio <identifiersep> group . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 set < t > dict <identifiersep> set = expand <identifiersep> dictionary ( meta ) ; \n \t1 if ( dict <identifiersep> set != null && dict <identifiersep> set . size ( ) == 1 && dict <identifiersep> set . contains ( value ) ) { \n \t2 return block <identifiersep> cannot <identifiersep> match ; } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 volume <identifiersep> data <identifiersep> store <identifiersep> vo dest <identifiersep> volume <identifiersep> store = volume <identifiersep> data <identifiersep> store <identifiersep> dao . find <identifiersep> by <identifiersep> store <identifiersep> volume ( data <identifiersep> store . get <identifiersep> id ( ) , obj <identifiersep> id ) ; \n \t5 if ( dest <identifiersep> volume <identifiersep> store != null ) { \n \t6 return volume <identifiersep> data <identifiersep> store <identifiersep> dao . remove ( dest <identifiersep> volume <identifiersep> store . get <identifiersep> id ( ) ) ; \n \t5 } else { \n <ect>
<comment> \n \t1 public void log <identifiersep> error ( string message , exception ex ) \n \t1 { \n <ect>
\t2 this . callback = callback ; \n \t2 return this ; } \n \t1 @ override \n \t1 public object <identifiersep> metadata call ( ) throws exception { \n <ect>
\t4 log . debug ( <string_literal> ) ; \n \t4 constructor <identifiersep> params [ i ] = args . get ( i ) ; \n \t4 continue ; } \n \t3 if ( is <identifiersep> primitive <identifiersep> boolean ( param <identifiersep> type ) && boolean . class . is <identifiersep> assignable <identifiersep> from ( object <identifiersep> type ) ) { \n <ect>
\t5 { \n \t6 err <identifiersep> msg = vm <identifiersep> name + <string_literal> + <identifier> <identifiersep> file + <string_literal> + disk <identifiersep> drive . to <identifiersep> string ( ) ; \n \t6 logger . error ( err <identifiersep> msg ) ; \n \t6 throw new argument <identifiersep> exception ( err <identifiersep> msg ) ; } \n <ect>
\t7 <identifier> . add ( <identifier> ) ; } \n \t6 <identifier> . put ( <identifier> , mbean <identifiersep> n ) ; \n \t6 <comment> \n \t5 } catch ( exception ex ) { \n <ect>
\t4 number ++ ; \n \t3 } else { \n \t4 optional < table <identifiersep> controller > table <identifiersep> controller = table <identifiersep> manager . instance . get <identifiersep> controller ( table . get <identifiersep> id ( ) ) ; \n \t4 if ( ! table <identifiersep> controller . is <identifiersep> present ( ) ) { \n <ect>
\t3 send <identifiersep> result = producer . send ( msg ) ; \n \t3 log . info ( <string_literal> + msg <identifiersep> tuple . get <identifiersep> message ( ) . get <identifiersep> msg <identifiersep> id ( ) ) ; \n \t3 run <identifiersep> counter . count ( system . current <identifiersep> time <identifiersep> millis ( ) - before ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 @ path ( <string_literal> ) \n \t1 @ consumes ( constants . media <identifiersep> type <identifiersep> test <identifiersep> xml ) \n \t1 @ produces ( media <identifiersep> type . text <identifiersep> plain ) \n \t1 public int create <identifiersep> book ( ejb <identifiersep> book book ) { \n <ect>
\t3 timer . cancel ( ) ; \n \t3 log . info ( <string_literal> ) ; } \n \t2 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception | no <identifiersep> such <identifiersep> field <identifiersep> exception cnfe ) { \n \t3 <comment> \n <ect>
\t4 return <number_literal> ; \n \t3 } else { \n \t4 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; } \n \t2 } else { \n <ect>
\t3 } ) . dispatch ( topology . lookup ( storage . class , vm . lookup <identifiersep> partition ( ) ) ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t3 log . debug ( vm . get <identifiersep> instance <identifiersep> id ( ) + <string_literal> + volume <identifiersep> id ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t6 + <string_literal> ) ; } \n \t3 else if ( os <identifiersep> type != mac ) \n \t3 { \n \t4 <comment> \n <ect>
\t3 data <identifiersep> model = exchange <identifiersep> helper . create <identifiersep> variable <identifiersep> map ( exchange ) ; } \n \t2 <comment> \n \t2 template template ; \n \t2 if ( reader != null ) { \n <ect>
\t1 logger . debug ( <string_literal> + src <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) + <string_literal> + dest <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t1 if ( ! dest <identifiersep> file . exists ( ) ) { \n \t2 try { \n \t2 if ( src <identifiersep> file . is <identifiersep> file ( ) ) { \n <ect>
\t3 if ( ! <identifier> <identifiersep> firewall <identifiersep> mgr . revoke <identifiersep> firewall <identifiersep> rules <identifiersep> for <identifiersep> ip ( ip <identifiersep> id , user <identifiersep> id , caller ) ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + ip <identifiersep> id + <string_literal> ) ; \n \t4 success = false ; } \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t5 long <identifier> = get <identifiersep> next <identifiersep> add <identifiersep> <identifier> ( ) ; \n \t5 long <identifier> = get <identifiersep> next <identifiersep> add <identifiersep> <identifier> ( ) ; \n \t5 long result = client . add ( <identifier> , <identifier> ) ; \n \t5 if ( result != <identifier> + <identifier> ) { \n <ect>
\t5 buffer . append ( <string_literal> ) ; } \n \t4 buffer . append ( hex ) ; } \n \t3 md5 = buffer . to <identifiersep> string ( ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception ex ) { \n <ect>
\t3 if ( ! cache ) { \n \t4 if ( log <identifiersep> enabled ) log . info ( <string_literal> ) ; \n \t3 } else { \n \t4 call <identifiersep> site . set <identifiersep> target ( handle ) ; \n <ect>
\t2 < p > reload this page with open console , enter text and hit the log button . . . < / p > \n \t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n <ect>
\t1 object file <identifiersep> key = get <identifiersep> file <identifiersep> key ( log <identifiersep> path <identifiersep> file ) ; \n \t1 set <identifiersep> file <identifiersep> key ( file <identifiersep> key ) ; \n \t1 string <identifier> <identifiersep> key = base64 . byte <identifiersep> array <identifiersep> to <identifiersep> base64 ( get <identifiersep> file <identifiersep> key ( ) . to <identifiersep> string ( ) . get <identifiersep> bytes ( ) ) ; \n \t1 set <identifiersep> <identifier> <identifiersep> key ( <identifier> <identifiersep> key ) ; \n <ect>
\t5 file <identifiersep> location = <string_literal> + url <identifiersep> prefix + file <identifiersep> name ; } \n \t4 input <identifiersep> stream in = null ; \n \t4 if ( ! <identifier> <identifiersep> string <identifiersep> utils . is <identifiersep> blank ( url ) ) { \n \t5 in = servlet <identifiersep> context . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( url ) ; \n <ect>
\t5 names . add ( <identifier> . get <identifiersep> name ( ) ) ; } } } \n \t2 node <identifiersep> builder nb = new node <identifiersep> builder ( ) ; \n \t2 sync <identifiersep> tree <identifiersep> entry test <identifiersep> node = nb . new <identifiersep> node ( names , <identifier> , cache ) ; \n \t2 assert . assert <identifiersep> true ( test <identifiersep> node . get <identifiersep> node ( ) . equals ( repo <identifiersep> node ) ) ; \n <ect>
\t5 ioe = e ; \n \t5 return false ; \n \t4 } catch ( throwable t ) { \n \t5 <comment> \n <ect>
\t5 <identifier> < string , channel , event <identifiersep> subscriber > subscriber <identifiersep> details = s <identifiersep> subscribers . get ( subscriber <identifiersep> id ) ; \n \t5 subscriber <identifiersep> details . second ( null ) ; \n \t5 s <identifiersep> subscribers . put ( subscriber <identifiersep> id , subscriber <identifiersep> details ) ; } \n \t4 abort <identifiersep> connection ( ) ; <comment> \n <ect>
\t2 <comment> \n \t2 if ( logging ( ) ) \n \t2 { \n \t3 log . debug ( <string_literal> + this ) ; \n <ect>
\t2 topic <identifiersep> subscriber durable <identifiersep> sub = session . create <identifiersep> durable <identifiersep> subscriber ( topic , get <identifiersep> subscription <identifiersep> name ( ) , null , true ) ; \n \t2 log . debug ( <string_literal> + msg <identifiersep> count + <string_literal> ) ; \n \t2 for ( int i = 0 ; i < msg <identifiersep> count ; i ++ ) { \n \t3 publisher . publish ( session . create <identifiersep> message ( ) ) ; } \n <ect>
\t5 <comment> \n \t5 if ( crt <identifiersep> <identifier> <identifiersep> ntwk ) { \n \t6 add <identifiersep> traffic <identifiersep> type ( conn , physical <identifiersep> network <identifiersep> id , <string_literal> , xen <identifiersep> public <identifiersep> label , kvm <identifiersep> public <identifiersep> label , vmware <identifiersep> public <identifiersep> label ) ; \n \t5 } else { \n <ect>
\t3 sink <identifiersep> op = get <identifiersep> <identifier> <identifiersep> hive <identifiersep> op <identifiersep> dag ( ) ; \n \t3 if ( old <identifiersep> hints . size ( ) > 0 ) { \n \t3 log . debug ( <string_literal> + old <identifiersep> hints ) ; \n \t3 get <identifiersep> qb ( ) . get <identifiersep> parse <identifiersep> info ( ) . set <identifiersep> hint <identifiersep> list ( old <identifiersep> hints ) ; } \n <ect>
\t3 { \n \t4 return clz . get <identifiersep> method ( name , new class [ ] { int . class , get <identifiersep> method . get <identifiersep> return <identifiersep> type ( ) } ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t2 snap . set <identifiersep> status ( storage <identifiersep> properties . status . available . to <identifiersep> string ( ) ) ; \n \t2 snap . set <identifiersep> progress ( <string_literal> ) ; \n \t2 return snap ; \n \t2 } catch ( transaction <identifiersep> exception | no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t5 + <string_literal> ) ; } } \n \t1 private void do <identifiersep> warn <identifiersep> for <identifiersep> relative <identifiersep> path ( file file ) { \n \t2 if ( file . is <identifiersep> absolute ( ) ) return ; \n \t2 if ( file . get <identifiersep> path ( ) . substring ( 0 , <number_literal> ) . equals ( <string_literal> + file . separator ) ) return ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> node ( ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> node ( ) ; \n \t2 cluster ( ) . wipe <identifiersep> indices ( <string_literal> ) ; \n <ect>
\t2 if ( net <identifiersep> utils . is <identifiersep> valid <identifiersep> <identifier> ( dest <identifiersep> ip <identifiersep> or <identifiersep> cidr ) ) { \n \t3 if ( <identifier> != null && <identifier> != null ) { \n \t4 in <identifiersep> same <identifiersep> subnet = net <identifiersep> utils . same <identifiersep> subnet ( <identifier> , dest <identifiersep> ip <identifiersep> or <identifiersep> cidr , <identifier> ) ; \n \t3 } else { \n <ect>
\t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + biome <identifiersep> gen <identifiersep> base . get <identifiersep> biome <identifiersep> gen <identifiersep> array ( ) . length ) ; } \n \t3 <identifier> <identifiersep> populate <identifiersep> old . instance . excluded <identifiersep> <identifier> . add ( id ) ; \n \t2 } catch ( exception ex ) { \n \t3 bc <identifiersep> log . logger . warn ( string . format ( <string_literal> , m . get <identifiersep> string <identifiersep> value ( ) , m . get <identifiersep> sender ( ) ) ) ; } \n <ect>
\t5 cache <identifiersep> item = listeners [ index ] ; } \n \t4 if ( ! el || ! cache <identifiersep> item ) { \n \t5 <comment> \n \t5 return false ; } \n <ect>
\t1 list < string > files = new array <identifiersep> list < > ( ) ; \n \t1 for ( path path : paths ) { \n \t1 files . add ( path . get <identifiersep> name ( ) ) ; } \n \t1 collections . sort ( files ) ; \n <ect>
\t2 dropbox <identifiersep> del <identifiersep> result result = new dropbox <identifiersep> api <identifiersep> facade ( configuration . get <identifiersep> client ( ) , exchange ) \n \t3 . del ( remote <identifiersep> path ) ; \n \t2 exchange . get <identifiersep> in ( ) . set <identifiersep> header ( dropbox <identifiersep> result <identifiersep> header . deleted <identifiersep> path . name ( ) , result . get <identifiersep> entry ( ) ) ; \n \t2 exchange . get <identifiersep> in ( ) . set <identifiersep> body ( result . get <identifiersep> entry ( ) ) ; \n <ect>
\t1 if ( rs != null ) { \n \t2 if ( rs . next ( ) ) { \n \t2 return rs . get <identifiersep> int ( 1 ) > 0 ; } } \n \t1 } catch ( exception e ) { \n <ect>
\t2 int i ; \n \t2 if ( constraints != null ) { \n \t3 <comment> \n <ect>
\t3 list < string > delete <identifiersep> keys = blob <identifiersep> store <identifiersep> utils . get <identifiersep> key <identifiersep> list <identifiersep> from <identifiersep> id ( data , topology <identifiersep> id ) ; \n \t3 blob <identifiersep> store <identifiersep> utils . cleanup <identifiersep> keys ( delete <identifiersep> keys , data . get <identifiersep> blob <identifiersep> store ( ) , data . get <identifiersep> storm <identifiersep> cluster <identifiersep> state ( ) ) ; \n \t3 log . info ( <string_literal> + topology <identifiersep> id ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 return false ; } \n \t4 if ( string <identifiersep> utils . contains <identifiersep> ignore <identifiersep> case ( response , api <identifiersep> return <identifiersep> status <identifiersep> success ) ) { \n \t5 return true ; \n \t4 } else { \n <ect>
\t6 list < metadata <identifiersep> value > check <identifiersep> metadata = item <identifiersep> service \n \t7 . get <identifiersep> metadata ( item , field <identifiersep> segments [ 0 ] , field <identifiersep> segments [ 1 ] , field <identifiersep> segments [ <number_literal> ] , lang ) ; \n \t6 if ( check <identifiersep> metadata . size ( ) > 0 ) { \n \t7 <comment> \n <ect>
\t4 ssl <identifiersep> context . set <identifiersep> current <identifiersep> ssl <identifiersep> context ( get <identifiersep> broker <identifiersep> service ( ) . get <identifiersep> ssl <identifiersep> context ( ) ) ; \n \t4 try { \n \t5 remote <identifiersep> transport = transport <identifiersep> factory . connect ( connect <identifiersep> uri ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 kill <identifiersep> result ? <string_literal> : <string_literal> , kill <identifiersep> query <identifiersep> session ) ; \n \t1 <comment> \n \t1 kill <identifiersep> query <identifiersep> context kill <identifiersep> ctx = kill <identifiersep> query <identifiersep> in <identifiersep> progress . get ( kill <identifiersep> query <identifiersep> session ) ; \n \t1 if ( kill <identifiersep> ctx == null ) { \n <ect>
\t5 send ( <identifier> <identifiersep> config , <identifier> <identifiersep> msg , <identifier> ) ; \n \t5 stat = 1 ; \n \t4 } else { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 if ( sec <identifiersep> codes == null ) { \n \t3 sec <identifiersep> codes = new hash <identifiersep> set < > ( ) ; \n \t3 tables . put ( table <identifiersep> id , sec <identifiersep> codes ) ; } \n \t3 sec <identifiersep> codes . add <identifiersep> all ( ke . get <identifiersep> value ( ) ) ; } \n <ect>
\t4 throw new command <identifiersep> exception ( e ) ; } \n \t3 return null ; } \n \t2 catch ( jpa <identifiersep> executor <identifiersep> exception e ) { \n \t3 throw new command <identifiersep> exception ( e ) ; } \n <ect>
\t2 return session . create <identifiersep> text <identifiersep> message ( get <identifiersep> message <identifiersep> text ( i ) ) ; } \n \t1 protected string get <identifiersep> message <identifiersep> text ( int i ) { \n \t2 return <string_literal> + i ; } \n \t1 protected void assert <identifiersep> message ( message message , int i ) throws exception { \n <ect>
\t5 server <identifiersep> bootstrap . option ( option , value ) ; } } } \n \t2 <comment> \n \t2 server <identifiersep> bootstrap . child <identifiersep> handler ( pipeline <identifiersep> factory ) ; \n \t2 log . debug ( <string_literal> , server <identifiersep> bootstrap ) ; \n <ect>
\t3 collection < string > wiki <identifiersep> ids ; \n \t3 try { \n \t4 wiki <identifiersep> ids = wiki <identifiersep> descriptor <identifiersep> manager . get <identifiersep> all <identifiersep> ids ( ) ; \n \t3 } catch ( wiki <identifiersep> manager <identifiersep> exception e ) { \n <ect>
\t3 <identifier> . apply <identifiersep> rules ( network , purpose , rules ) ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n \t3 if ( ! continue <identifiersep> on <identifiersep> error ) { \n \t4 throw e ; } \n <ect>
\t10 final authentication authentication , \n \t10 final registered <identifiersep> service service , \n \t10 final collection < cas <identifiersep> event > events ) { \n \t2 final string remote <identifiersep> addr = client <identifiersep> info <identifiersep> holder . get <identifiersep> client <identifiersep> info ( ) . get <identifiersep> client <identifiersep> ip <identifiersep> address ( ) ; \n <ect>
\t4 if ( ! <identifier> <identifiersep> <identifier> ( conn ) ) { \n \t5 s <identifiersep> logger . error ( <string_literal> ) ; \n \t5 return false ; } \n \t4 if ( ! <identifier> <identifiersep> upgrade ( conn ) ) { \n <ect>
\t4 set <identifiersep> disconnected ( ) ; } } } \n \t1 private upload <identifiersep> command get <identifiersep> command ( ) { \n \t2 return cmd ; } \n \t1 public void log <identifiersep> disconnect ( ) { \n <ect>
\t2 client <identifiersep> socket = new socket ( ) ; \n \t2 client <identifiersep> socket . set <identifiersep> so <identifiersep> timeout ( <number_literal> ) ; \n \t2 client <identifiersep> socket . connect ( server <identifiersep> socket . get <identifiersep> local <identifiersep> socket <identifiersep> address ( ) , <number_literal> ) ; \n \t2 client <identifiersep> socket . set <identifiersep> tcp <identifiersep> no <identifiersep> delay ( true ) ; \n <ect>
\t3 . append ( <string_literal> ) \n \t3 . append ( system . get <identifiersep> property ( <string_literal> ) ) \n \t3 . append ( <string_literal> ) ) ; \n <ect>
\t1 response . set <identifiersep> <identifier> ( mem <identifiersep> obj . e <identifiersep> tag ) ; \n \t1 response . set <identifiersep> last <identifiersep> modified ( new date ( ) ) ; \n \t1 response . set <identifiersep> status <identifiersep> message ( <string_literal> ) ; \n \t1 response . set <identifiersep> return ( true ) ; \n <ect>
\t5 logger . debug ( <string_literal> + ex ) ; } } \n \t3 else if ( <identifier> . is <identifiersep> lazy <identifiersep> init ( ) ) { \n <ect>
\t4 event <identifiersep> to <identifiersep> process = null ; \n \t4 listeners <identifiersep> copy = null ; } \n \t2 } catch ( throwable t ) \n \t2 { \n <ect>
\t3 producer . send ( <identifier> ) ; \n \t3 if ( ( i + 1 ) % <number_literal> == 0 ) { \n \t4 session . commit ( ) ; \n \t4 int memory <identifiersep> usage <identifiersep> percent = broker . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> memory <identifiersep> usage ( ) . get <identifiersep> percent <identifiersep> usage ( ) ; \n <ect>
\t1 private void start <identifiersep> all <identifiersep> stopped <identifiersep> consumers ( ) { \n \t2 synchronized ( lock ) { \n \t3 try { \n \t4 for ( route route : suspended <identifiersep> routes ) { \n <ect>
\t1 current <identifiersep> collector <identifiersep> host , <string_literal> , \n \t1 role . metrics <identifiersep> collector . name ( ) ) ) { \n \t1 refresh <identifiersep> collector <identifiersep> host ( current <identifiersep> collector <identifiersep> host ) ; } } \n private void refresh <identifiersep> collector <identifiersep> host ( string current <identifiersep> host ) { \n <ect>
\t4 spout <identifiersep> status = state . active ; \n \t4 log . info ( <string_literal> , committing <identifiersep> batches ) ; \n \t4 break ; \n \t3 default : \n <ect>
\t5 <identifier> . set <identifiersep> lock ( context . get <identifiersep> user ( ) , context ) ; } \n \t3 } catch ( exception e ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t4 response <identifiersep> body <identifiersep> <identifier> = byte <identifiersep> streams . to <identifiersep> byte <identifiersep> array ( method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ) ; \n \t3 } catch ( http <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> , e . get <identifiersep> message ( ) ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 . substring ( 0 , primitive <identifiersep> received <identifiersep> transaction . length ( ) - 1 ) ; <comment> \n <number_literal> <comment> \n <number_literal> <comment> \n <number_literal> <comment> \n <ect>
\t6 return ; } \n \t5 maybe <identifiersep> fire ( watcher , file <identifiersep> watcher <identifiersep> event . create ( file ) ) ; \n \t5 if ( file . is <identifiersep> directory ( ) ) { \n \t6 maybe <identifiersep> watch <identifiersep> new <identifiersep> directory ( watcher , file ) ; } } } } \n <ect>
\t3 if ( done || time <identifiersep> utils . millis ( ) > end <identifiersep> time ) return done ; \n \t3 thread <identifiersep> utils . yield ( ) ; } } \n \t1 <comment> \n \t1 public void finish <identifiersep> loading ( ) { \n <ect>
\t2 } else if ( is <identifiersep> backing <identifiersep> up ( ) ) { \n \t3 minion . send <identifiersep> status <identifiersep> message ( new status <identifiersep> task <identifiersep> backup ( minion . uuid , id , node ) ) ; \n \t3 return false ; \n \t2 } else if ( work <identifiersep> item <identifiersep> thread != null ) { \n <ect>
\t5 public optional < string > get <identifiersep> data ( ) { \n \t6 return new <identifiersep> leader ; } \n \t4 } ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t2 system . arraycopy ( name <identifiersep> buffer , 0 , msg , new <identifiersep> payload . length , len ) ; \n \t2 result . set <identifiersep> message <identifiersep> payload ( msg ) ; \n \t2 return result ; } \n \t1 public serial <identifiersep> message set <identifiersep> name <identifiersep> message ( string name ) { \n <ect>
\t1 public audio <identifiersep> manager ( ) { \n \t2 try { \n \t3 line <identifiersep> pool = new line <identifiersep> pool ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 return ; } \n \t3 remove <identifiersep> sr ( conn , sr ) ; \n \t3 return ; \n \t2 } catch ( xen <identifiersep> api <identifiersep> exception | xml <identifiersep> rpc <identifiersep> exception e ) { \n <ect>
\t1 hive <identifiersep> conf conf = context . get <identifiersep> conf ( ) ; \n \t1 join <identifiersep> operator join <identifiersep> op = ( join <identifiersep> operator ) <identifier> ; \n \t1 if ( ! conf . get <identifiersep> bool <identifiersep> var ( hive <identifiersep> conf . conf <identifiersep> vars . <identifier> ) ) { \n \t1 return null ; } \n <ect>
\t3 } finally { \n <comment> \n \t4 <identifier> . stop ( ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t1 if ( transaction != null ) { \n \t2 try { \n \t2 transaction . rollback ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 . add ( new <identifiersep> node ( <string_literal> ) ) \n \t2 ) . build ( ) ; \n \t2 cluster <identifiersep> state = allocation . reroute ( cluster <identifiersep> state , <string_literal> ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) . size ( ) , equal <identifiersep> to ( 0 ) ) ; \n <ect>
\t4 return queue <identifiersep> view . get <identifiersep> in <identifiersep> flight <identifiersep> count ( ) == 0 ; } \n \t2 } ) ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> <identifier> <identifiersep> count ( ) ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> dispatch <identifiersep> count ( ) ) ; \n <ect>
\t5 last <identifiersep> hop <identifiersep> exclude = exclude ; } \n \t4 if ( hidden <identifiersep> inbound ) { \n \t5 <comment> \n \t5 if ( log . should <identifiersep> info ( ) ) \n <ect>
\t2 final end <identifiersep> state end <identifiersep> state = new end <identifiersep> state ( flow , id ) ; \n \t2 if ( view <identifiersep> factory != null ) { \n \t3 final action final <identifiersep> response <identifiersep> action = new view <identifiersep> factory <identifiersep> action <identifiersep> adapter ( view <identifiersep> factory ) ; \n \t3 end <identifiersep> state . set <identifiersep> final <identifiersep> response <identifiersep> action ( final <identifiersep> response <identifiersep> action ) ; \n <ect>
\t4 @ override \n \t4 protected void do <identifiersep> run ( ) throws exception { \n \t5 barrier . await ( ) ; \n \t5 for ( int i = 0 ; i < iterations ; i ++ ) { \n <ect>
\t1 else { \n \t2 add <identifiersep> object <identifiersep> to <identifiersep> both <identifiersep> <identifier> <identifiersep> of <identifiersep> relationship <identifiersep> with <identifiersep> key ( object , <identifier> <identifiersep> sp <identifiersep> event . secret <identifiersep> pals <identifiersep> key ) ; } } \n public void remove <identifiersep> from <identifiersep> secret <identifiersep> pals <identifiersep> relationship ( com . secretpal . model . sp <identifiersep> secret <identifiersep> pal object ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void member <identifiersep> is <identifiersep> alive ( instance <identifiersep> id instance <identifiersep> id ) \n \t1 { \n <ect>
\t5 in = new file <identifiersep> input <identifiersep> stream ( new file ( file ) ) ; \n \t4 if ( in == null ) { \n \t5 log . error ( <string_literal> + file + <string_literal> + new file ( <string_literal> ) . get <identifiersep> canonical <identifiersep> path ( ) ) ; \n \t5 log . error ( <string_literal> ) ; \n <ect>
\t7 log . warn ( <string_literal> + ex ) ; } } \n \t5 set <identifiersep> object <identifiersep> key <identifiersep> path <identifiersep> value ( last <identifiersep> part <identifiersep> of <identifiersep> file <identifiersep> name ( ) ) ; \n \t5 did <identifiersep> upload = true ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 context . defer ( create ) ; } } \n \t2 catch ( final throwable e ) { \n \t3 throw new <identifier> <identifiersep> bootstrap <identifiersep> failure ( <string_literal> + load <identifiersep> class . get <identifiersep> name ( ) , e ) ; } } } } \n \t1 else { \n <ect>
\t1 new linked <identifiersep> blocking <identifiersep> queue < > ( <identifier> <identifiersep> queue ) , \n \t1 new thread <identifiersep> factory <identifiersep> builder ( ) \n \t2 . set <identifiersep> daemon ( false ) \n \t2 . set <identifiersep> name <identifiersep> format ( <string_literal> ) \n <ect>
\t1 private volatile socket <identifiersep> <identifier> <identifier> ; \n \t1 private volatile socket <identifiersep> <identifier> <identifier> ; \n \t1 @ override \n \t1 protected void set <identifiersep> up ( ) throws exception { \n <ect>
\t4 logger . trace ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) ) ; \n \t4 process <identifiersep> basic <identifiersep> report ( serial <identifiersep> message , offset , endpoint ) ; \n \t4 break ; \n \t3 default : \n <ect>
\t2 current <identifiersep> stripe . <identifier> . add ( null ) ; } \n \t2 current <identifiersep> stripe . <identifier> . set ( 0 , all <identifiersep> enc . get ( 0 ) ) ; \n \t2 for ( int i = 1 ; i < all <identifiersep> enc . size ( ) ; ++ i ) { \n \t2 int col <identifiersep> ix = get <identifiersep> sparse <identifiersep> orc <identifiersep> index <identifiersep> from <identifiersep> <identifier> <identifiersep> dest ( i ) ; \n <ect>
\t3 break ; } } \n \t2 if ( is <identifiersep> drain ( ) || input <identifiersep> marker . get <identifiersep> input ( ) . is <identifiersep> drain ( ) ) { \n \t2 break ; } \n \t2 if ( ! is <identifiersep> kafka <identifiersep> broker <identifiersep> up ) { \n <ect>
\t8 <comment> \n \t8 for ( ccn <identifiersep> sync <identifiersep> handler callback : <identifier> <identifiersep> callbacks ) \t1 <comment> \n \t9 <identifier> <identifiersep> lead <identifiersep> comparator . add <identifiersep> callback ( callback ) ; \n \t8 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> sync , level . info ) ) \n <ect>
\t4 if ( ! has <identifiersep> usage ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t5 return true ; } \n \t4 if ( ! <identifier> <identifiersep> <identifier> ( conn ) ) { \n <ect>
\t1 } else { \n \t2 query <identifiersep> user = user <identifiersep> group <identifiersep> information . get <identifiersep> current <identifiersep> user ( ) . get <identifiersep> user <identifiersep> name ( ) ; } \n \t1 <comment> \n \t1 token < job <identifiersep> token <identifiersep> identifier > <identifier> <identifiersep> token = job <identifiersep> token <identifiersep> creator . create <identifiersep> job <identifiersep> token ( application <identifiersep> id ) ; \n <ect>
\t9 logger . warn ( <string_literal> { } \\ <string_literal> , new object [ ] { trimmed <identifiersep> part , get <identifiersep> parameters <identifiersep> as <identifiersep> string ( sources ) } ) ; \n \t9 return <string_literal> + trimmed <identifiersep> part ; } } } \n \t6 return allowed ; \n \t5 } else { \n <ect>
\t3 } else if ( ( current <identifiersep> state . is <identifiersep> <identifier> <identifiersep> mode ( ) != null ) && current <identifiersep> state . is <identifiersep> <identifier> <identifiersep> mode ( ) . equals ( boolean . false ) \n \t5 && ( update <identifiersep> state . get <identifiersep> last <identifiersep> keep <identifiersep> alive ( ) != null ) ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t1 web <identifiersep> server \n \t1 } else { \n \t1 none } } \n def stop ( ) : unit = { \n <ect>
\t2 if ( ! is <identifiersep> timed <identifiersep> out ( ) && ! interrupted ) { \n \t2 resolve <identifiersep> bucket <identifiersep> state ( bucket ) ; \n \t2 buckets <identifiersep> resolved ++ ; \n \t2 } else { \n <ect>
\t3 self . logger . debug ( <string_literal> % len ( list <identifiersep> host ) ) \n \t3 raise <identifier> . skip <identifiersep> test ( <string_literal> % len ( list <identifiersep> host ) ) \n \t2 no <identifiersep> of <identifiersep> vms = self . no <identifiersep> of <identifiersep> v <identifiersep> ms <identifiersep> on <identifiersep> host ( list <identifiersep> host [ 0 ] . id ) \n \t2 no <identifiersep> of <identifiersep> vms = no <identifiersep> of <identifiersep> vms + self . no <identifiersep> of <identifiersep> v <identifiersep> ms <identifiersep> on <identifiersep> host ( list <identifiersep> host [ 1 ] . id ) \n <ect>
\t3 if ( debug ) logger . info ( <string_literal> , entry . get <identifiersep> key ( ) ) ; \n \t3 try { \n \t4 entry . get <identifiersep> value ( ) . write ( new buffer ( reply ) ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 if ( ! <identifier> <identifiersep> js <identifiersep> is <identifiersep> available ( ) ) { \n \t3 logger . info ( <string_literal> ) ; \n \t3 string <identifier> <identifiersep> js <identifiersep> path = system . get <identifiersep> property ( <identifier> <identifiersep> js <identifiersep> driver <identifiersep> service . <identifier> <identifiersep> executable <identifiersep> path <identifiersep> property ) ; \n \t3 string <identifier> <identifiersep> js <identifiersep> path <identifiersep> environment <identifiersep> property = system . <identifier> ( <string_literal> ) ; \n <ect>
\t1 return ; \n \t1 } catch ( runtime <identifiersep> error <identifiersep> exception e ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t1 assert <identifiersep> equals ( null , merger . get <identifiersep> min <identifiersep> key ( ) ) ; \n \t1 assert <identifiersep> equals ( null , merger . get <identifiersep> max <identifiersep> key ( ) ) ; \n \t1 for ( int i = 0 ; i < values . length ; ++ i ) { \n \t1 assert <identifiersep> equals ( true , merger . next ( id , event ) ) ; \n <ect>
\t5 result = authority <identifiersep> value . get <identifiersep> class ( ) . new <identifiersep> instance ( ) ; \n \t4 } catch ( instantiation <identifiersep> exception e ) { \n \t5 log . error ( <string_literal> , e ) ; \n \t4 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t2 context . write <identifiersep> thread ( new runnable ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n \t4 if ( ! is <identifiersep> <identifier> ( ) ) { \n <ect>
\t6 <identifier> <identifiersep> cmd . event <identifiersep> notifier . mark <identifiersep> event ( <identifier> <identifiersep> event <identifiersep> type . cancelled , <identifier> <identifiersep> cmd . command <identifiersep> key ) ; \n \t6 try { \n \t7 execution <identifiersep> hook . on <identifiersep> unsubscribe ( <identifier> <identifiersep> cmd ) ; \n \t6 } catch ( throwable hook <identifiersep> ex ) { \n <ect>
\t4 out . write ( buffer , 0 , len ) ; \n \t4 download <identifiersep> file <identifiersep> size += len ; } \n \t3 is <identifiersep> success = ( file <identifiersep> size == download <identifiersep> file <identifiersep> size ) ; \n \t2 } catch ( t <identifiersep> exception | io <identifiersep> exception e ) { \n <ect>
\t2 cluster . get <identifiersep> zoo <identifiersep> <identifier> ( ) , <string_literal> , <string_literal> , <string_literal> , root <identifiersep> password , <string_literal> ) . wait <identifiersep> for ( ) ) ; \n \t1 list < string > tablet <identifiersep> servers = c . instance <identifiersep> operations ( ) . get <identifiersep> tablet <identifiersep> servers ( ) ; \n \t1 assert <identifiersep> equals ( <number_literal> , tablet <identifiersep> servers . size ( ) ) ; \n \t1 string <identifier> = tablet <identifiersep> servers . get ( 0 ) ; \n <ect>
\t2 <identifier> <identifiersep> command command = get <identifiersep> endpoint ( ) . get <identifiersep> binding ( ) . create <identifiersep> <identifier> <identifiersep> command ( session , exchange ) ; \n \t2 command . execute ( exchange ) ; } \n \t1 @ override \n \t1 protected void do <identifiersep> stop ( ) throws exception { \n <ect>
\t3 vmware <identifiersep> manager mgr = context . get <identifiersep> <identifier> <identifiersep> object ( vmware <identifiersep> manager . context <identifiersep> <identifier> <identifiersep> name ) ; \n \t3 return mgr . get <identifiersep> storage <identifiersep> manager ( ) . execute ( this , cmd ) ; \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t1 private image <identifiersep> dimensions get <identifiersep> img <identifiersep> dimensions ( final string url , final string in <identifiersep> account <identifiersep> id ) throws io <identifiersep> exception \n \t1 { \n \t2 if ( ! img <identifiersep> map . contains <identifiersep> key ( url ) ) \n \t2 { \n <ect>
\t4 kubernetes <identifiersep> constants . kubernetes <identifiersep> namespace <identifiersep> name , string . class ) ; \n \t2 service <identifiersep> account <identifier> <identifiersep> to <identifiersep> create = exchange . get <identifiersep> in ( ) . get <identifiersep> header ( \n \t4 kubernetes <identifiersep> constants . kubernetes <identifiersep> service <identifiersep> account , service <identifiersep> account . class ) ; \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( namespace <identifiersep> name ) ) { \n <ect>
\t6 stream = <identifier> . content <identifiersep> input <identifiersep> stream ( ) ; \n \t6 <identifier> <identifiersep> content . write <identifiersep> bytes ( stream , length ) ; \n \t6 <identifier> . set <identifiersep> content <identifiersep> stream ( null , 0 , 0l ) ; \n \t5 } finally { \n <ect>
\t5 <comment> \n \t5 throw e ; \n \t4 } catch ( mondrian <identifiersep> evaluation <identifiersep> exception e ) { \n \t5 <comment> \n <ect>
\t3 long curr = hit . get <identifiersep> fields ( ) . get ( <string_literal> ) . get <identifiersep> value ( ) ; \n \t3 logger . info ( <string_literal> , curr ) ; \n \t3 assert <identifiersep> true ( curr < = prev ) ; \n \t3 prev = curr ; } \n <ect>
\t3 if ( ! page . get <identifiersep> result <identifiersep> items ( ) . is <identifiersep> skip ( ) ) { \n \t4 for ( pipeline pipeline : <identifier> ) { \n \t5 pipeline . process ( page . get <identifiersep> result <identifiersep> items ( ) , this ) ; } } \n \t2 } else { \n <ect>
\t4 if ( is <identifiersep> enabled ( container ) ) { \n \t5 log . info ( <string_literal> + container . get <identifiersep> container <identifiersep> name ( ) ) ; \n \t5 reg . create ( container , service <identifiersep> loader ) ; \n \t4 } else { \n <ect>
\t2 for ( final program <identifiersep> interface program : <identifier> <identifiersep> to <identifiersep> run ) { \n \t3 if ( program . needs <identifiersep> reference <identifiersep> sequence ( ) && reference <identifiersep> sequence == null ) { \n \t4 throw new <identifier> <identifiersep> exception ( <string_literal> + program . to <identifiersep> string ( ) + <string_literal> ) ; } \n \t3 if ( ! <identifier> <identifiersep> level <identifiersep> default . equals ( metric <identifiersep> <identifier> <identifiersep> level ) && ! program . supports <identifiersep> metric <identifiersep> <identifier> <identifiersep> level ( ) ) { \n <ect>
\t5 input = util . <identifier> ( pm , pattern , \n \t7 new string <identifiersep> substitution ( function <identifiersep> ref <identifiersep> prefix + key + function <identifiersep> ref <identifiersep> suffix ) , \n \t7 input , util . <identifier> <identifiersep> all ) ; \n \t4 } catch ( malformed <identifiersep> pattern <identifiersep> exception e ) { \n <ect>
\t7 try { \n \t8 class < ? > clz = class . for <identifiersep> name ( class <identifiersep> name . replace ( ' / ' , ' . ' ) ) ; \n \t8 classes . add ( clz ) ; \n \t7 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception | no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error e ) { \n <ect>
<comment> \n public class address <identifiersep> util <identifiersep> test extends test <identifiersep> case { \n private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( address <identifiersep> util <identifiersep> test . class ) ; \n public void test <identifiersep> get <identifiersep> negative <identifiersep> ttl ( ) { \n <ect>
\t3 log . info ( <string_literal> ) ; \n \t3 assert . assert <identifiersep> true ( <string_literal> , \n \t5 client <identifiersep> base . wait <identifiersep> for <identifiersep> server <identifiersep> up ( <identifier> , connection <identifiersep> timeout ) ) ; \n \t3 zk = client <identifiersep> base . create <identifiersep> zk <identifiersep> client ( <identifier> ) ; \n <ect>
\t1 boolean enable <identifiersep> jwt = boolean . value <identifiersep> of ( get <identifiersep> property ( jwt <identifiersep> auth <identifiersep> enabled ) ) ; \n \t1 if ( enable <identifiersep> jwt ) { \n \t1 string provider <identifiersep> url = get <identifiersep> property ( jwt <identifiersep> auth <identifiersep> provider <identifiersep> url ) ; \n \t1 if ( provider <identifiersep> url == null ) { \n <ect>
\t3 input <identifiersep> stream = new file <identifiersep> input <identifiersep> stream ( this . keystore <identifiersep> path ) ; \n \t2 store . load ( input <identifiersep> stream , this . keystore <identifiersep> password ) ; \n \t2 this . cipher = cipher . get <identifiersep> instance ( this . cipher <identifiersep> type ) ; \n \t2 this . certificate = ( x509certificate ) store . get <identifiersep> certificate ( this . cert <identifiersep> alias ) ; \n <ect>
\t4 logger . error ( <string_literal> , node <identifiersep> id ) ; \n \t4 return ; } \n \t3 if ( split <identifiersep> domain . length == <number_literal> ) { \n \t4 if ( action . equals ( <string_literal> ) ) { \n <ect>
\t5 vol <identifiersep> dao . update ( volume . get <identifiersep> id ( ) , volume <identifiersep> vo ) ; \n \t5 updated = true ; \n \t5 break ; } } \n \t3 if ( ! updated ) { \n <ect>
\t2 log . trace ( <string_literal> + ts ) ; } \n \t1 date expires = ts . get <identifiersep> expires ( ) ; \n \t1 if ( ! security <identifiersep> context . validate <identifiersep> timestamp <identifiersep> period ( expires ) ) { \n <ect>
\t2 release <identifiersep> lock <identifiersep> and <identifiersep> log ( lock , spout <identifiersep> id ) ; \n \t2 continue ; } } \n \t1 return null ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 metrics <identifiersep> cluster <identifiersep> aggregate <identifiersep> <identifier> <identifiersep> table <identifiersep> name , encoding , \n \t2 table <identifiersep> ttl . get ( metrics <identifiersep> cluster <identifiersep> aggregate <identifiersep> <identifier> <identifiersep> table <identifiersep> name ) , \n \t2 compression ) ) ; \n \t1 conn . commit ( ) ; \n <ect>
\t4 to <identifiersep> node += node <identifiersep> shift <identifiersep> based ; \n \t4 num <identifiersep> docs = <identifier> <identifiersep> random <identifiersep> int <identifiersep> between ( <number_literal> , <number_literal> ) ; \n \t4 logger . debug ( <string_literal> , num <identifiersep> docs ) ; \n \t4 indexer . continue <identifiersep> indexing ( num <identifiersep> docs ) ; \n <ect>
\t2 properties . put ( <string_literal> , get <identifiersep> name ( ) ) ; \n \t2 add <identifiersep> test ( test <identifiersep> msg <identifiersep> history <identifiersep> service . suite ( ) ) ; \n \t2 add <identifiersep> test ( test <identifiersep> msg <identifiersep> history <identifiersep> service <identifiersep> multi <identifiersep> chat . suite ( ) ) ; \n \t2 bundle <identifiersep> context . register <identifiersep> service ( get <identifiersep> class ( ) . get <identifiersep> name ( ) , this , properties ) ; \n <ect>
\t2 this . shutdown = false ; \n \t2 try { \n \t3 this . ds = create <identifiersep> datagram <identifiersep> socket ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 synchronized ( node <identifiersep> stats . this ) { \n \t4 resend <identifiersep> bytes <identifiersep> sent += x ; } } \n \t2 @ override \n \t2 public void sent <identifiersep> payload ( int x ) { \n <ect>
\t2 if ( stream == null ) { \n \t3 if ( fail <identifiersep> on <identifiersep> error ) { \n \t4 throw new runtime <identifiersep> exception ( <string_literal> ) ; \n \t3 } else { \n <ect>
\t3 log . info ( <string_literal> + spring <identifiersep> ctx ) ; \n \t3 log . info ( <string_literal> + spring <identifiersep> bean ) ; \n \t3 log . info ( <string_literal> + balancer ) ; \n \t3 log . info ( <string_literal> + ses ) ; \n <ect>
\t3 tx . commit ( ) ; \n \t3 initialized = true ; } \n \t3 account <identifiersep> cache . put ( account <identifiersep> number , account <identifiersep> number ) ; \n \t2 } catch ( transaction <identifiersep> exception e ) { \n <ect>
\t1 stack <identifiersep> resource <identifiersep> entity . set <identifiersep> resource <identifiersep> status <identifiersep> reason ( <string_literal> ) ; \n \t1 stack <identifiersep> resource <identifiersep> entity <identifiersep> manager . update <identifiersep> stack <identifiersep> resource ( stack <identifiersep> resource <identifiersep> entity ) ; \n \t1 stack <identifiersep> event <identifiersep> entity <identifiersep> manager . add <identifiersep> stack <identifiersep> event ( stack <identifiersep> resource <identifiersep> entity ) ; \n \t1 signal <identifiersep> entity <identifiersep> manager . delete <identifiersep> <identifier> ( stack <identifiersep> id , account <identifiersep> id , resource <identifiersep> id , created <identifiersep> resource <identifiersep> version ) ; <comment> \n <ect>
\t3 pstmt . execute <identifiersep> update ( ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t5 delete <identifiersep> batch ( id ) ; <comment> \n \t5 total <identifiersep> batches <identifiersep> <identifier> . increment <identifiersep> and <identifiersep> get ( ) ; } } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t2 model <identifiersep> learner <identifiersep> <identifier> <identifiersep> <identifier> <identifier> = new model <identifiersep> learner <identifiersep> <identifier> <identifiersep> <identifier> ( params . patterns <identifiersep> input <identifiersep> dir , null ) ; \n \t2 semantic <identifiersep> model sm = <identifier> . <identifier> ( column <identifiersep> nodes ) ; \n \t2 string output = params . results <identifiersep> dir + <string_literal> ; \n \t2 if ( sm == null ) { \n <ect>
\t1 entity <identifiersep> ps . set <identifiersep> string ( <number_literal> , history <identifiersep> event . get <identifiersep> error ( ) ) ; \n \t1 entity <identifiersep> ps . set <identifiersep> string ( <number_literal> , history <identifiersep> event . get <identifiersep> task <identifiersep> attempt <identifiersep> id ( ) . to <identifiersep> string ( ) ) ; \n \t1 entity <identifiersep> ps . execute <identifiersep> update ( ) ; \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( msg ) ; } } \n \t2 try { \n \t3 if ( vlan <identifiersep> id == null ) { \n <ect>
\t3 logger . error ( <string_literal> , ex ) ; \n \t3 return false ; } } \n \t1 @ override \n \t1 public list < ftp <identifiersep> file > list <identifiersep> files ( ) { \n <ect>
\t1 public static string as <identifiersep> valid <identifiersep> href ( string url <identifiersep> string ) { \n \t2 try { \n \t3 return new url ( url <identifiersep> string ) . to <identifiersep> external <identifiersep> form ( ) ; \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t3 int size = math . min ( seq <identifiersep> <identifier> . size ( ) , random <identifiersep> int <identifiersep> between ( ops <identifiersep> per <identifiersep> thread - <number_literal> , ops <identifiersep> per <identifiersep> thread + <number_literal> ) ) ; \n \t3 seq <identifiersep> no <identifiersep> per <identifiersep> thread [ t ] = random <identifiersep> <identifier> <identifiersep> of ( size , seq <identifiersep> <identifier> ) . to <identifiersep> array ( new integer [ size ] ) ; \n \t3 seq <identifiersep> <identifier> . remove <identifiersep> all ( arrays . as <identifiersep> list ( seq <identifiersep> no <identifiersep> per <identifiersep> thread [ t ] ) ) ; } \n \t2 seq <identifiersep> no <identifiersep> per <identifiersep> thread [ threads . length - 1 ] = seq <identifiersep> <identifier> . to <identifiersep> array ( new integer [ seq <identifiersep> <identifier> . size ( ) ] ) ; \n <ect>
\t7 <string_literal> ) ) ; \n \t3 this . api <identifiersep> key = config . get <identifiersep> property ( <string_literal> ) ; \n \t3 this . format = config . get <identifiersep> property ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 logger . info ( single <identifiersep> node . <identifier> <identifiersep> to <identifiersep> string ( ) + <string_literal> ) ; } \n \t3 return is <identifiersep> single <identifiersep> local <identifiersep> node ; } \n \t2 return false ; } \n \t1 public static int find <identifiersep> node <identifiersep> id ( cluster cluster , host <identifiersep> matcher matcher ) { \n <ect>
\t5 <string_literal> \n \t4 ) ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) \n \t2 { \n <ect>
\t5 remove <identifiersep> groups ( vars , ref <identifiersep> name <identifiersep> n ) ; } \n \t3 } catch ( runtime <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> ) ; } \n \t2 } catch ( malformed <identifiersep> cache <identifiersep> pattern <identifiersep> exception e ) { \n <ect>
\t1 synchronized ( <identifier> <identifiersep> lock ) { \n \t2 <identifier> = new job <identifiersep> context <identifiersep> impl ( sc , local <identifiersep> tmp <identifiersep> dir ) ; \n \t2 <identifier> <identifiersep> lock . notify <identifiersep> all ( ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t6 message . set <identifiersep> text ( xml <identifiersep> message + msg <identifiersep> seq <identifiersep> no + <string_literal> + priority ) ; \n \t6 message . set <identifiersep> jms <identifiersep> priority ( priority ) ; \n \t6 message . set <identifiersep> int <identifiersep> property ( <string_literal> , msg <identifiersep> seq <identifiersep> no ) ; \n \t6 if ( i > 0 && <identifier> == 0 ) { \n <ect>
@ override \n public list < <identifier> <identifiersep> item > <identifier> ( long user <identifiersep> id , int how <identifiersep> many , id <identifiersep> <identifier> <identifier> , boolean include <identifiersep> known <identifiersep> items ) \n \t1 throws taste <identifiersep> exception { \n \t1 preconditions . check <identifiersep> argument ( how <identifiersep> many >= 1 , <string_literal> ) ; \n <ect>
\t4 out . write ( buf . to <identifiersep> string ( ) ) ; \n \t4 buf . set <identifiersep> length ( 0 ) ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n \t4 if ( log . should <identifiersep> warn ( ) ) \n <ect>
\t8 long same <identifiersep> <identifier> = rs <identifiersep> same <identifiersep> label . get <identifiersep> long ( 1 ) ; \n \t8 if ( same <identifiersep> <identifier> > 0 ) { \n \t9 s <identifiersep> logger . error ( <string_literal> + \n \t10 xen <identifiersep> guest <identifiersep> label ) ; \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t4 } finally { \n \t5 lock . unlock ( ) ; } } \n \t2 } catch ( verification <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t1 } catch ( authentication <identifiersep> failed <identifiersep> exception e ) { \n \t1 log . debug ( <string_literal> , e ) ; \n \t1 return target <identifiersep> configuration <identifiersep> result . invalid ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t1 } catch ( messaging <identifiersep> exception e ) { \n <ect>
\t3 log . info ( <string_literal> ) ; \n \t2 } catch ( servlet <identifiersep> exception e ) { \n \t3 <comment> \n \t3 shutdown <identifiersep> repository ( ) ; \n <ect>
\t3 logger . warn ( <string_literal> , new <identifiersep> name ) ; \n \t3 if ( new <identifiersep> name != null ) { \n \t4 if ( ! old <identifiersep> name . equals <identifiersep> ignore <identifiersep> case ( new <identifiersep> name ) ) { \n \t5 old <identifiersep> new <identifiersep> <identifier> . add ( new item <identifiersep> vo ( old <identifiersep> name , new <identifiersep> name ) ) ; \n <ect>
\t2 boolean connected = check <identifiersep> state ( server <identifiersep> state . connected ) ; \n \t2 try { \n \t3 this . <identifier> <identifiersep> manager . stop ( ) ; \n \t3 set <identifiersep> state ( server <identifiersep> state . not <identifiersep> connected ) ; \n <ect>
@ override public void test <identifiersep> failure ( failure failure ) { \n \t1 try { \n \t1 description desc = failure . get <identifiersep> description ( ) ; \n \t1 string key = key ( desc ) ; \n <ect>
\t3 <identifier> <identifiersep> is <identifiersep> memory <identifiersep> low = memory <identifiersep> low ; } \n \t2 boolean memory <identifiersep> <identifier> = check <identifiersep> memory ( <identifier> <identifiersep> memory <identifiersep> <identifier> <identifiersep> threshold , true ) ; \n \t2 if ( memory <identifiersep> <identifier> != <identifier> <identifiersep> is <identifiersep> memory <identifiersep> <identifier> ) { \n \t3 if ( ! memory <identifiersep> <identifier> ) { \n <ect>
\t2 list < string > child <identifiersep> names = null ; \n \t2 try { \n \t3 child <identifiersep> names = zookeeper . get <identifiersep> children ( dir , false ) ; \n \t2 } catch ( keeper <identifiersep> exception . no <identifiersep> node <identifiersep> exception e ) { \n <ect>
\t2 object <identifiersep> entity tmp = entity <identifiersep> ref . get ( ) ; \n \t2 try { \n \t3 entity <identifiersep> ref . get <identifiersep> and <identifiersep> set ( object <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . update <identifiersep> creation <identifiersep> timeout ( tmp ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 log . info ( i + <string_literal> + expected <identifiersep> list . get ( i ) . to <identifiersep> string ( ) ) ; } \n \t3 log . info ( <string_literal> ) ; \n \t3 for ( int i = 0 ; i < visit <identifiersep> list . size ( ) ; i ++ ) { \n \t4 log . info ( i + <string_literal> + visit <identifiersep> list . get ( i ) . to <identifiersep> string ( ) ) ; } } \n <ect>
\t2 try { \n \t3 try { \n \t4 <identifier> = new file <identifiersep> random <identifiersep> access <identifiersep> buffer ( data , true ) ; \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
<comment> \n boolean validate <identifiersep> signature ( signed <identifiersep> jwt jwt <identifiersep> token ) { \n \t1 boolean valid = false ; \n \t1 if ( jws <identifiersep> object . state . signed == jwt <identifiersep> token . get <identifiersep> state ( ) ) { \n <ect>
\t3 if ( this . bean <identifiersep> factory == null ) { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + \n \t6 <string_literal> + this . target <identifiersep> name + <string_literal> ) ; } \n <ect>
\t2 fork <identifiersep> options . get <identifiersep> java <identifiersep> fork <identifiersep> options ( ) . copy <identifiersep> to ( java <identifiersep> command ) ; \n \t2 worker <identifiersep> daemon <identifiersep> process worker <identifiersep> daemon <identifiersep> process = builder . build ( ) ; \n \t2 worker <identifiersep> process worker <identifiersep> process = worker <identifiersep> daemon <identifiersep> process . start ( ) ; \n \t2 worker <identifiersep> daemon <identifiersep> client client = new worker <identifiersep> daemon <identifiersep> client ( fork <identifiersep> options , worker <identifiersep> daemon <identifiersep> process , worker <identifiersep> process , logging <identifiersep> manager . get <identifiersep> level ( ) ) ; \n <ect>
\t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . secret ) ) { \n \t3 logger . warn ( <string_literal> , grant <identifiersep> type ) ; \n \t3 return false ; } \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . username ) ) { \n <ect>
\t3 } else { <comment> \n \t3 simple <identifiersep> workflow <identifiersep> service <identifiersep> name = <string_literal> } \n \t3 try { \n \t3 service <identifiersep> configurations . lookup <identifiersep> by <identifiersep> name ( simple <identifiersep> workflow , simple <identifiersep> workflow <identifiersep> service <identifiersep> name ) \n <ect>
\t8 catch ( grid <identifiersep> interrupted <identifiersep> exception e ) { \n \t9 throw e ; } \n \t8 catch ( grid <identifiersep> topology <identifiersep> exception e ) { \n <ect>
\t3 synchronized ( this ) \n \t3 { \n \t4 if ( last <identifiersep> version > last <identifiersep> <identifier> <identifiersep> version ) \n \t4 { \n <ect>
\t1 case start <identifiersep> stream : { \n \t1 long offset = log [ ix + 1 ] ; \n \t1 int unlock <identifiersep> len = get <identifiersep> first <identifiersep> int ( log [ ix + <number_literal> ] ) ; \n \t1 string unlock <identifiersep> str = ( unlock <identifiersep> len == integer . max <identifiersep> value ) ? <string_literal> : <string_literal> + ( offset + unlock <identifiersep> len ) ; \n <ect>
\t5 } else { \n \t6 logger . error ( <string_literal> + wiki <identifiersep> name + <string_literal> + wiki <identifiersep> url + <string_literal> + wiki <identifiersep> admin + <string_literal> \n \t7 + <string_literal> , e ) ; } } \n \t3 } catch ( exception e ) { \n <ect>
\t3 if ( disabled ) \n \t4 return val ; \n \t3 assert <identifiersep> not <identifiersep> null ( ret <identifiersep> interceptor ) ; \n \t3 object ret = ret <identifiersep> interceptor . on <identifiersep> get ( key , val ) ; \n <ect>
\t2 temp <identifiersep> <identifier> = temp <identifiersep> <identifier> . to <identifiersep> upper <identifiersep> case ( ) ; \n \t2 return temp <identifiersep> <identifier> . starts <identifiersep> with ( <string_literal> ) || temp <identifiersep> <identifier> . starts <identifiersep> with ( <string_literal> ) || temp <identifiersep> <identifier> . starts <identifiersep> with ( <string_literal> ) ; } \n \t1 public string get <identifiersep> latest <identifiersep> import <identifiersep> uri ( ) { \n \t2 string result = last == null ? url : last ; \n <ect>
\t1 <comment> \n \t1 public void test <identifiersep> future <identifiersep> echo ( ) throws exception { \n \t2 echo service = proxy <identifiersep> helper . create <identifiersep> proxy ( context . get <identifiersep> endpoint ( <string_literal> ) , echo . class ) ; \n \t2 future < string > future = service . as <identifiersep> text ( <number_literal> ) ; \n <ect>
\t4 . filter ( ldap <identifiersep> instance <identifiersep> configuration <identifiersep> predicate ( ) ) \n \t4 . for <identifiersep> each ( l - > { \n \t5 final multimap < string , object > multi <identifiersep> map <identifiersep> attributes = \n \t7 core <identifiersep> authentication <identifiersep> utils . transform <identifiersep> principal <identifiersep> attributes <identifiersep> list <identifiersep> into <identifiersep> multi <identifiersep> map ( l . get <identifiersep> principal <identifiersep> attribute <identifiersep> list ( ) ) ; \n <ect>
\t8 zone <identifiersep> name <identifiersep> log <identifiersep> str = zone <identifiersep> name <identifiersep> log <identifiersep> str + <string_literal> + zone <identifiersep> names [ i ] ; } } \n \t6 zone <identifiersep> name <identifiersep> log <identifiersep> str += <string_literal> ; \n \t6 s <identifiersep> logger . info ( <string_literal> + zone <identifiersep> name <identifiersep> log <identifiersep> str ) ; } } \n \t3 } else { \n <ect>
\t4 while ( true ) { \n \t5 if ( ( stdout . available ( ) == 0 ) && ( stderr . available ( ) == 0 ) ) { \n \t6 int conditions = sess . wait <identifiersep> for <identifiersep> condition ( channel <identifiersep> condition . stdout <identifiersep> data | channel <identifiersep> condition . stderr <identifiersep> data | channel <identifiersep> condition . eof , <number_literal> ) ; \n \t6 if ( ( conditions & channel <identifiersep> condition . timeout ) != 0 ) { \n <ect>
\t3 scp . put ( prepare <identifiersep> <identifier> <identifiersep> path , <string_literal> , <string_literal> ) ; \n \t3 string prepare <identifiersep> cmd = string . format ( <string_literal> , <identifier> <identifiersep> gateway , <identifier> <identifiersep> dns , <identifier> <identifiersep> ip ) ; \n \t3 if ( ! ssh <identifiersep> cmd <identifiersep> helper . ssh <identifiersep> execute <identifiersep> cmd ( ssh <identifiersep> connection , prepare <identifiersep> cmd ) ) { \n \t4 throw new configuration <identifiersep> exception ( <string_literal> + <identifier> <identifiersep> ip + <string_literal> ) ; } \n <ect>
\t4 logger . debug ( <string_literal> , \n \t6 transformation <identifiersep> type ) ; \n \t4 return item ; } \n \t2 } catch ( transformation <identifiersep> exception te ) { \n <ect>
\t2 return closed ; } \n \t1 private void check <identifiersep> if <identifiersep> closed ( ) \n \t1 { \n \t2 if ( closed ) \n <ect>
\t2 if ( track <identifiersep> attach <identifiersep> detach ) \n \t3 log . info ( this , <string_literal> + coordinator <identifiersep> state . transaction ) ; \n \t2 the <identifiersep> txn . set ( coordinator <identifiersep> state . transaction ) ; \n \t2 if ( track <identifiersep> attach <identifiersep> detach ) \n <ect>
<comment> \n \t1 public void start <identifiersep> server ( int node <identifiersep> id ) throws io <identifiersep> exception { \n <ect>
\t5 { \n \t6 logger . debug ( <string_literal> ) ; \n \t6 if ( ! links . is <identifiersep> empty ( ) ) \n \t7 continue ; \n <ect>
\t3 if ( reason == index <identifiersep> removal <identifiersep> reason . deleted ) { \n \t4 <comment> \n \t4 delete <identifiersep> index <identifiersep> store ( extra <identifiersep> info , index <identifiersep> service . index ( ) , index <identifiersep> settings ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 if ( cmd <identifiersep> line . has <identifiersep> option ( max <identifiersep> n <identifiersep> <identifier> <identifiersep> size <identifiersep> opt ) ) { \n \t2 try { \n \t2 max <identifiersep> n <identifiersep> <identifier> <identifiersep> size = integer . parse <identifiersep> int ( cmd <identifiersep> line . get <identifiersep> value ( max <identifiersep> n <identifiersep> <identifier> <identifiersep> size <identifiersep> opt ) . to <identifiersep> string ( ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t5 scheduled <identifiersep> jobs . put ( name , job ) ; \n \t4 } else { \n \t5 logger . warn ( <string_literal> , name , e . get <identifiersep> message ( ) ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t5 <comment> \n \t5 long id = rs . get <identifiersep> long ( 1 ) ; <comment> \n \t5 result . add ( find <identifiersep> by <identifiersep> id ( id ) ) ; } \n \t3 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 string is <identifiersep> ranger <identifiersep> http <identifiersep> enabled = get <identifiersep> property ( request , <string_literal> , <string_literal> ) ; \n \t1 string is <identifiersep> ranger <identifiersep> ssl <identifiersep> enabled = get <identifiersep> property ( request , <string_literal> , <string_literal> ) ; \n \t1 string ranger <identifiersep> ssl <identifiersep> keystore <identifiersep> file = get <identifiersep> property ( request , <string_literal> , <string_literal> ) ; \n \t1 if ( ( <string_literal> ) . equals <identifiersep> ignore <identifiersep> case ( is <identifiersep> ranger <identifiersep> http <identifiersep> enabled ) && ( <string_literal> ) . equals <identifiersep> ignore <identifiersep> case ( is <identifiersep> ranger <identifiersep> ssl <identifiersep> enabled ) && ranger <identifiersep> ssl <identifiersep> keystore <identifiersep> file . contains ( <string_literal> ) ) { \n <ect>
\t1 @ override \n \t1 public principal resolve ( final credential credential , final principal principal , final authentication <identifiersep> handler handler ) { \n \t2 final list < principal > principals = new array <identifiersep> list < > ( ) ; \n \t2 chain . stream ( ) . filter ( resolver - > resolver . supports ( credential ) ) . for <identifiersep> each ( resolver - > { \n <ect>
\t1 protected boolean template <identifiersep> available ( long template <identifiersep> id , long pool <identifiersep> id ) { \n \t2 vm <identifiersep> template <identifiersep> storage <identifiersep> resource <identifiersep> assoc <identifier> = <identifier> <identifiersep> template <identifiersep> pool <identifiersep> dao . find <identifiersep> by <identifiersep> pool <identifiersep> template ( pool <identifiersep> id , template <identifiersep> id ) ; \n \t2 if ( <identifier> != null ) { \n <ect>
\t3 if ( input != null ) { \n \t4 try { \n \t5 input . close ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
<comment> ; \n private void log ( final string message ) { \n \t1 logger . info ( message ) ; } \n private void notify <identifiersep> disconnected ( ) { \n <ect>
\t4 || ( ( ( <identifier> <identifiersep> container ) wsdl <identifiersep> request ) . get <identifiersep> <identifier> <identifiersep> config ( ) . get <identifiersep> sequence <identifiersep> identifier ( ) == null ) ) { \n \t3 return ; } \n \t2 string content = ( string ) context . get <identifiersep> property ( base <identifiersep> http <identifiersep> request <identifiersep> transport . request <identifiersep> content ) ; \n \t2 if ( content == null ) { \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 self . recreate <identifiersep> socket <identifiersep> addresses ( self . get <identifiersep> id ( ) ) ; \n \t6 addr = self . get <identifiersep> election <identifiersep> address ( ) ; } \n <ect>
\t3 <comment> \n \t3 vr <identifiersep> system = new vr <identifiersep> <identifier> <identifiersep> system <identifiersep> fn <identifiersep> table ( j <identifiersep> open <identifiersep> vr <identifiersep> library . vr <identifiersep> get <identifiersep> generic <identifiersep> interface ( j <identifiersep> open <identifiersep> vr <identifiersep> library . <identifier> <identifiersep> system <identifiersep> version , <identifier> <identifiersep> error <identifiersep> store ) ) ; } \n \t2 if ( vr <identifiersep> system == null || <identifier> <identifiersep> error <identifiersep> store . get ( 0 ) != 0 ) { \n \t3 string error <identifiersep> string = <identifier> . j <identifiersep> open <identifiersep> vr <identifiersep> library . vr <identifiersep> get <identifiersep> vr <identifiersep> init <identifiersep> error <identifiersep> as <identifiersep> english <identifiersep> description ( <identifier> <identifiersep> error <identifiersep> store . get ( 0 ) ) . get <identifiersep> string ( 0 ) ; \n <ect>
\t5 try { \n \t6 <identifier> <identifiersep> agent <identifier> <identifiersep> agent = <identifier> <identifiersep> agent . instance ; \n \t6 <identifier> <identifiersep> agent . shut <identifiersep> down ( ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t3 message . write <identifiersep> to ( baos ) ; \n \t3 logger . trace ( baos . to <identifiersep> string ( ) ) ; \n \t3 logger . trace ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 if ( ver <identifiersep> check ) { \n \t5 if ( ! is <identifiersep> new ( ) && atomic <identifiersep> ver <identifiersep> comparator . compare ( ver , new <identifiersep> ver , use <identifiersep> global <identifiersep> time ) >= 0 ) { \n \t6 if ( atomic <identifiersep> ver <identifiersep> comparator . compare ( ver , new <identifiersep> ver , use <identifiersep> global <identifiersep> time ) == 0 && cctx . is <identifiersep> store <identifiersep> enabled ( ) && primary ) { \n <ect>
\t3 { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t3 if ( should <identifiersep> ignore <identifiersep> path ( http <identifiersep> servlet <identifiersep> request ) ) \n \t3 { \n <ect>
\t4 try { \n \t5 data <identifiersep> store data <identifiersep> store = store <identifiersep> mgr . get <identifiersep> data <identifiersep> store ( volume <identifiersep> data <identifiersep> store . get <identifiersep> data <identifiersep> store <identifiersep> id ( ) , data <identifiersep> store <identifiersep> role . image ) ; \n \t5 end <identifiersep> point ep = <identifier> <identifiersep> ep <identifiersep> selector . select ( data <identifiersep> store , volume <identifiersep> data <identifiersep> store . get <identifiersep> extract <identifiersep> url ( ) ) ; \n \t5 if ( ep == null ) { \n <ect>
\t1 public optional < writer > get <identifiersep> writer ( ) { \n \t2 try { \n \t3 return optional ( new buffered <identifiersep> writer ( new file <identifiersep> writer ( file ) ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 return false ; } \n \t4 <comment> \n \t4 if ( api . verify <identifiersep> param ( ) == false ) \n \t4 { \n <ect>
\t5 try { \n \t6 final class < ? > discovered <identifiersep> class = load <identifiersep> class ( get <identifiersep> class ( ) , class <identifiersep> name ) ; \n \t6 handler . handle <identifiersep> annotation ( config . framework ( ) , annotation , discovered <identifiersep> class ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t3 if ( definition instanceof split <identifiersep> definition ) { \n \t4 final delegate <identifiersep> async <identifiersep> processor delegate <identifiersep> async <identifiersep> processor = new delegate <identifiersep> async <identifiersep> processor ( ) { \n \t5 @ override \n \t5 public boolean process ( final exchange exchange , final async <identifiersep> callback callback ) { \n <ect>
\t1 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t1 if ( cl . has <identifiersep> option ( name <identifiersep> opt . get <identifiersep> opt ( ) ) ) { \n \t1 final string name = cl . get <identifiersep> option <identifiersep> value ( name <identifiersep> opt . get <identifiersep> opt ( ) ) ; \n \t1 if ( ! iterators . contains <identifiersep> key ( name ) ) { \n <ect>
\t4 character . send ( new <identifier> <identifiersep> end <identifiersep> request ( ) ) ; } } } \n \t1 public static void cancel <identifiersep> <identifier> <identifiersep> as <identifiersep> server ( entity <identifiersep> ref character ) { \n \t2 character <identifiersep> component character <identifiersep> component = character . get <identifiersep> component ( character <identifiersep> component . class ) ; \n \t2 if ( character <identifiersep> component == null ) { \n <ect>
\t6 ctx . after <identifiersep> commit ( ) ; \n \t5 } catch ( exception ignored ) { \n \t6 log . debug ( <string_literal> , ignored , ignored ) ; } } } \n \t2 } catch ( jms <identifiersep> exception e ) { \n <ect>
\t2 if ( null == this . key <identifiersep> store ) { \n \t3 string file <identifiersep> name = system . get <identifiersep> property ( javax <identifiersep> net <identifiersep> ssl <identifiersep> key <identifiersep> store , <string_literal> ) ; <comment> \n \t3 string file <identifiersep> type = system . get <identifiersep> property ( javax <identifiersep> net <identifiersep> ssl <identifiersep> key <identifiersep> store <identifiersep> type , <comment> \n \t5 file <identifiersep> name . to <identifiersep> lower <identifiersep> case ( locale . english ) . ends <identifiersep> with ( <string_literal> ) ? <identifier> : <string_literal> ) ; <comment> \n <ect>
\t2 log . info ( <string_literal> + book <identifiersep> <identifier> ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <identifier> , book <identifiersep> <identifier> ) ; \n \t2 <comment> \n \t2 ejb <identifiersep> book book <identifiersep> <identifier> = remote <identifiersep> resource . lookup <identifiersep> book <identifiersep> by <identifiersep> id ( id2 ) ; \n <ect>
\t3 public boolean clear <identifiersep> data ( string node <identifiersep> name ) { \n \t4 return true ; } \n \t2 } ) ; \n \t2 assert <identifiersep> that ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> timeout ( <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> nodes ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) . is <identifiersep> timed <identifiersep> out ( ) , equal <identifiersep> to ( false ) ) ; \n <ect>
\t2 queue . poll ( time <identifiersep> unit . milliseconds , get <identifiersep> long <identifiersep> poll <identifiersep> timeout ( ) , new output <identifiersep> stream <identifiersep> write <identifiersep> adapter ( output <identifiersep> stream ) ) ; } \n \t1 else { \n \t2 queue . poll ( new output <identifiersep> stream <identifiersep> write <identifiersep> adapter ( output <identifiersep> stream ) ) ; } } \n \t1 catch ( final io <identifiersep> exception io ) { \n <ect>
\t3 <comment> \n \t3 throw e ; } \n \t2 catch ( runtime <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 private static void create <identifiersep> usage <identifiersep> record ( int type , long running <identifiersep> time , date start <identifiersep> date , date end <identifiersep> date , account <identifiersep> vo account , long vol <identifiersep> id , long zone <identifiersep> id , long do <identifiersep> id , long vm <identifiersep> id , \n \t2 long size ) { \n \t2 <comment> \n <ect>
\t2 return receive <identifiersep> counter ; } \n \t1 <comment> \n \t1 protected void process <identifiersep> stomp <identifiersep> frame ( string data ) { \n \t2 if ( ! transport <identifiersep> started <identifiersep> at <identifiersep> least <identifiersep> once ( ) ) { \n <ect>
\t2 change <identifiersep> state ( starting ) ; \n \t2 string headless = system . get <identifiersep> property ( <string_literal> ) ; \n \t2 boolean is <identifiersep> headless = boolean . parse <identifiersep> boolean ( headless ) ; \n \t2 if ( is <identifiersep> headless ) { \n <ect>
\t1 return true ; } \n boolean limit <identifiersep> reached <identifiersep> for <identifiersep> local <identifiersep> copy ( long size , long number <identifiersep> of <identifiersep> files ) { \n \t1 boolean result = size > max <identifiersep> copy <identifiersep> file <identifiersep> size && number <identifiersep> of <identifiersep> files > max <identifiersep> number <identifiersep> of <identifiersep> files ; \n \t1 if ( result ) { \n <ect>
\t3 if ( template <identifiersep> size < 1 ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + template <identifiersep> id ) ; \n \t4 return ; } \n \t3 if ( zone <identifiersep> id == - 1l ) { \n <ect>
private void log <identifiersep> startup <identifiersep> info ( <identifier> <identifiersep> <identifier> <identifiersep> context context ) { \n \t1 <comment> \n \t1 <comment> \n \t1 system . out . println ( <string_literal> ) ; \n <ect>
\t1 for ( final imaging <identifiersep> task task : tasks ) { \n \t1 try { \n \t2 task . clean <identifiersep> up ( ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t3 path <identifiersep> list . add ( core <identifiersep> resource <identifiersep> path ) ; } \n \t2 if ( config <identifiersep> paths != null ) { \n \t3 path <identifiersep> list . add <identifiersep> all ( arrays . as <identifiersep> list ( config <identifiersep> paths ) ) ; } \n \t2 if ( test <identifiersep> mode ) { \n <ect>
\t6 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) \n \t7 log . info ( log . fac <identifiersep> pipeline , <string_literal> , <identifier> ) ; \n \t6 if ( <identifier> > avg <identifiersep> response <identifiersep> time * system <identifiersep> configuration . pipeline <identifiersep> <identifier> && avg <identifiersep> response <identifiersep> time > - 1 ) { \n \t7 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) \n <ect>
\t2 final <identifier> <identifiersep> parser cert <identifiersep> parser = new <identifier> <identifiersep> parser ( ) ; \n \t2 <comment> \n \t2 logger . debug ( <string_literal> , config . get <identifiersep> encryption <identifiersep> certificate ( ) ) ; \n \t2 cert <identifiersep> parser . engine <identifiersep> init ( config . get <identifiersep> encryption <identifiersep> certificate ( ) . get <identifiersep> input <identifiersep> stream ( ) ) ; \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t1 final string resource <identifiersep> owner <identifiersep> account <identifiersep> number ; \n \t1 final string bucket <identifiersep> owner <identifiersep> account <identifiersep> number ; \n \t1 final policy <identifiersep> resource <identifiersep> info < <identifier> <identifiersep> <identifier> <identifiersep> entity > policy <identifiersep> resource <identifiersep> info ; \n \t1 if ( resource <identifiersep> type == null ) { \n <ect>
<comment> \n \t1 private synchronized void load <identifiersep> project ( ) throws ihc <identifiersep> execption { \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( project <identifiersep> file ) ) { \n <ect>
\t2 test <identifiersep> data test <identifiersep> data = new test <identifiersep> data ( ) ; \n \t2 test <identifiersep> data . prepare ( ) ; \n \t2 session session = open <identifiersep> session ( ) ; \n \t2 session . enable <identifiersep> filter ( <string_literal> ) . set <identifiersep> parameter ( <string_literal> , <identifier> ) ; \n <ect>
\t3 try { \n \t4 tm = <identifier> . create <identifiersep> trust <identifiersep> manager ( \n \t6 trust <identifiersep> store <identifiersep> location <identifiersep> prop , trust <identifiersep> store <identifiersep> password <identifiersep> prop ) ; \n \t3 } catch ( trust <identifiersep> manager <identifiersep> exception e ) { \n <ect>
\t2 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( \n \t3 <string_literal> + this . get <identifiersep> <identifier> <identifiersep> endpoint ( ) + <string_literal> \n \t4 + expected <identifiersep> response + <string_literal> + head <identifiersep> response + <string_literal> ) ; \n \t1 } else { \n <ect>
\t1 public void close ( ) throws exception { \n \t2 processor . shutdown ( ) ; \n \t2 processor . await <identifiersep> termination ( shutdown <identifiersep> wait <identifiersep> ms , time <identifiersep> unit . milliseconds ) ; \n \t2 if ( ! processor . is <identifiersep> terminated ( ) ) { \n <ect>
\t1 throw new io <identifiersep> exception ( \n \t2 <string_literal> + to <identifiersep> delete . get <identifiersep> path ( ) \n \t3 + <string_literal> + to <identifiersep> retain . get <identifiersep> path ( ) ) ; \n \t1 } else { \n <ect>
\t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 test <identifiersep> repo <identifiersep> key <identifiersep> read <identifiersep> write ( stored <identifiersep> key <identifiersep> names [ 1 ] [ 0 ] , <identifier> . get <identifiersep> public ( ) , <identifier> . get <identifiersep> public ( ) ) ; \n \t2 test <identifiersep> repo <identifiersep> key <identifiersep> read <identifiersep> write ( stored <identifiersep> key <identifiersep> names [ 1 ] [ 1 ] , <identifier> <identifiersep> pair . get <identifiersep> public ( ) , null ) ; \n \t2 test <identifiersep> repo <identifiersep> key <identifiersep> read <identifiersep> write ( stored <identifiersep> key <identifiersep> names [ 1 ] [ <number_literal> ] , <identifier> <identifiersep> pair . get <identifiersep> public ( ) , null ) ; \n <ect>
\t6 prepare ( ) ; \n \t5 } catch ( runtime <identifiersep> exception ex ) \n \t5 { \n \t6 if ( is <identifiersep> io <identifiersep> exception ( ex ) ) \n <ect>
\t3 versioned < list < store <identifiersep> definition > > store <identifiersep> def ; \n \t3 try { \n \t4 store <identifiersep> def = get <identifiersep> remote <identifiersep> store <identifiersep> def <identifiersep> list ( node <identifiersep> id , store <identifiersep> key ) ; \n \t3 } catch ( store <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t4 return ; } \n \t3 try { \n \t4 boolean locked = host . notifications <identifiersep> lock . try <identifiersep> lock ( <identifier> <identifiersep> lock <identifiersep> timeout <identifiersep> seconds , time <identifiersep> unit . seconds ) ; \n \t4 if ( ! locked ) { \n <ect>
\t4 <comment> \n \t4 return ; } \n \t3 curr . failed = true ; \n \t2 } else { \n <ect>
\t3 throw new failed <identifiersep> login <identifiersep> exception ( <string_literal> ) ; } \n \t2 final string username = credential . get <identifiersep> username ( ) ; \n \t2 final string cached <identifiersep> password = this . users . get ( username ) ; \n \t2 if ( cached <identifiersep> password == null ) { \n <ect>
\t1 private void init <identifiersep> listener <identifiersep> client ( ) throws jms <identifiersep> exception , naming <identifiersep> exception { \n \t2 subscriber = new receive <identifiersep> subscriber ( 0 , get <identifiersep> use <identifiersep> jndi <identifiersep> properties <identifiersep> as <identifiersep> boolean ( ) , get <identifiersep> jndi <identifiersep> initial <identifiersep> context <identifiersep> factory ( ) , \n \t5 get <identifiersep> provider <identifiersep> url ( ) , get <identifiersep> connection <identifiersep> factory ( ) , get <identifiersep> destination ( ) , get <identifiersep> durable <identifiersep> subscription <identifiersep> id ( ) , \n \t5 get <identifiersep> client <identifiersep> id ( ) , get <identifiersep> jms <identifiersep> selector ( ) , is <identifiersep> use <identifiersep> auth ( ) , get <identifiersep> username ( ) , get <identifiersep> password ( ) ) ; \n <ect>
\t1 public void send <identifiersep> message ( message message ) throws message <identifiersep> exception { \n \t2 try { \n \t3 message <identifiersep> sender . send ( message ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t2 for ( groovy <identifiersep> package <identifiersep> doc package <identifiersep> doc : root <identifiersep> doc . specified <identifiersep> packages ( ) ) { \n \t3 sb . append ( package <identifiersep> doc . name <identifiersep> with <identifiersep> <identifier> ( ) ) ; \n \t3 sb . append ( <string_literal> ) ; } \n \t2 string dest <identifiersep> file <identifiersep> name = <identifier> + fs + <string_literal> ; \n <ect>
\t1 if ( src <identifiersep> content <identifiersep> summary . get <identifiersep> file <identifiersep> count ( ) > conf . get <identifiersep> long <identifiersep> var ( hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> exec <identifiersep> <identifier> <identifiersep> <identifier> ) \n \t3 && src <identifiersep> content <identifiersep> summary . get <identifiersep> length ( ) > conf . get <identifiersep> long <identifiersep> var ( hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> exec <identifiersep> <identifier> <identifiersep> <identifier> ) ) { \n \t2 log . info ( <string_literal> + src <identifiersep> content <identifiersep> summary . get <identifiersep> length ( ) + <string_literal> + conf . get <identifiersep> long <identifiersep> var ( \n \t4 hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> exec <identifiersep> <identifier> <identifiersep> <identifier> ) + <string_literal> ) ; \n <ect>
\t3 log . info ( <string_literal> + <identifier> <identifiersep> home ) ; \n \t3 log . info ( <string_literal> + grid <identifiersep> name ) ; \n \t3 log . info ( <string_literal> + marshaller ) ; \n \t3 log . info ( <string_literal> + spring <identifiersep> ctx ) ; \n <ect>
\t2 checkpoint <identifiersep> log <identifiersep> order <identifiersep> id = queue . get <identifiersep> log <identifiersep> write <identifiersep> order <identifiersep> id ( ) ; \n \t2 for ( log <identifiersep> file . meta <identifiersep> data <identifiersep> writer meta <identifiersep> data <identifiersep> writer : meta <identifiersep> data <identifiersep> writers ) { \n \t2 meta <identifiersep> data <identifiersep> writer . mark <identifiersep> checkpoint ( checkpoint <identifiersep> log <identifiersep> order <identifiersep> id ) ; } } \n \t1 } catch ( exception e ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
<comment> \n public void read <identifiersep> view <identifiersep> <identifier> ( ) { \n \t1 boolean system <identifiersep> views <identifiersep> only = configuration . extract <identifiersep> views <identifiersep> after <identifiersep> cluster <identifiersep> config ( ) && clusters <identifiersep> provider . get ( ) . get <identifiersep> clusters ( ) . is <identifiersep> empty ( ) ; \n <ect>
\t4 if ( configuration . get <identifiersep> attribute <identifiersep> <identifier> ( ) != null ) { \n \t5 logger . debug ( <string_literal> , configuration . get <identifiersep> attribute <identifiersep> <identifier> ( ) . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t5 configuration . get <identifiersep> attribute <identifiersep> <identifier> ( ) . modify <identifiersep> attributes ( credential . get <identifiersep> attributes ( ) ) ; } \n \t3 } else { \n <ect>
\t2 if ( ( url == null ) && has <identifiersep> external <identifiersep> repositories && ! search <identifiersep> external <identifiersep> first ) \n \t3 url = super . find <identifiersep> resource ( name ) ; \n \t3 if ( url != null ) \n <ect>
\t5 if ( ! ( c == ' ' || c == ' \\ <identifier> ) ) break ; \n \t5 if ( i > 0 && <identifier> <identifiersep> orig . char <identifiersep> at ( i - 1 ) == ' \\ \\ ' ) break ; } \n \t4 decoded <identifiersep> token . set <identifiersep> length ( decoded <identifiersep> token . length ( ) - ( <identifier> <identifiersep> orig . length ( ) - i - 1 ) ) ; \n \t4 <identifier> <identifiersep> orig = <identifier> <identifiersep> orig . substring ( 0 , i + 1 ) ; \n <ect>
\t1 protected void succeed ( ) { \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n \t3 <identifier> <identifiersep> log . info ( get <identifiersep> job <identifiersep> id ( ) + <string_literal> + <identifier> <identifiersep> state . get <identifiersep> target ( ) ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t5 <identifier> <identifiersep> ip <identifiersep> address <identifiersep> dao . acquire <identifiersep> in <identifiersep> lock <identifiersep> table ( ip . get <identifiersep> id ( ) ) ; \n \t5 <identifier> <identifiersep> ip <identifiersep> address <identifiersep> dao . update ( ip . get <identifiersep> id ( ) , ip ) ; \n \t5 <identifier> <identifiersep> ip <identifiersep> address <identifiersep> dao . release <identifiersep> from <identifiersep> lock <identifiersep> table ( ip . get <identifiersep> id ( ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 verify <identifiersep> run ( <string_literal> + db <identifiersep> name + <string_literal> , <identifier> <identifiersep> data <identifiersep> <number_literal> , driver <identifiersep> <identifier> ) ; } \n @ test \n public void test <identifiersep> truncate <identifiersep> table ( ) throws io <identifiersep> exception { \n \t1 string test <identifiersep> name = <string_literal> ; \n <ect>
\t1 private map < vehicle <identifiersep> type <identifiersep> key , vehicle > types = new hash <identifiersep> map < vehicle <identifiersep> type <identifiersep> key , vehicle > ( ) ; \n <comment> \n \t1 public <identifier> <identifiersep> <identifier> ( collection < vehicle > <identifier> ) { \n \t2 extract <identifiersep> types ( <identifier> ) ; \n <ect>
\t7 + <string_literal> ) ; \n \t4 } else if ( old <identifiersep> state == state . stopped ) { \n \t5 <identifier> <identifiersep> vms . remove ( vm ) ; \n \t4 } else if ( old <identifiersep> state == state . migrating ) { \n <ect>
\t1 if ( null != uploaded <identifiersep> input <identifiersep> stream ) { \n \t2 try { \n \t2 uploaded <identifiersep> input <identifiersep> stream . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 statistics = ( ( load <identifiersep> metadata ) <identifier> . get <identifiersep> load <identifiersep> func ( ) ) \n \t6 . get <identifiersep> statistics ( <identifier> . get <identifiersep> l <identifiersep> file ( ) . get <identifiersep> file <identifiersep> name ( ) , job ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public class startup <identifiersep> task extends timer <identifiersep> task { \n \t2 protected link \t3 <identifier> <identifiersep> link ; \n \t2 protected volatile boolean cancelled = false ; \n \t2 public startup <identifiersep> task ( final link link ) { \n <ect>
<comment> \n public static void run ( configuration conf , path input , path output , distance <identifiersep> measure measure , double t1 , double t2 , \n \t1 int max <identifiersep> iterations , float <identifier> , double <identifier> <identifiersep> delta ) throws exception { \n \t1 path directory <identifiersep> containing <identifiersep> converted <identifiersep> input = new path ( output , directory <identifiersep> containing <identifiersep> converted <identifiersep> input ) ; \n <ect>
\t1 log . info ( <string_literal> + percentage <identifiersep> error + <string_literal> ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 } else if ( percentage <identifiersep> error < = <number_literal> . <number_literal> ) { \n \t1 num <identifiersep> bit <identifiersep> vectors = <number_literal> ; \n <ect>
\t2 hash <identifiersep> set < class < ? > > qualifier <identifiersep> classes = new hash <identifiersep> set < class < ? > > ( ) ; \n \t2 iterator < annotation > it = qualifiers . iterator ( ) ; \n \t2 while ( it . has <identifiersep> next ( ) ) { \n \t3 annotation a = it . next ( ) ; \n <ect>
<comment> \n \t1 public long query <identifiersep> for <identifiersep> long ( database <identifiersep> connection database <identifiersep> connection , string query , string [ ] arguments ) \n \t3 throws sql <identifiersep> exception { \n <ect>
\t3 file <identifiersep> utils . delete <identifiersep> directory ( dst ) ; } \n \t3 file <identifiersep> system fs = path . get <identifiersep> file <identifiersep> system ( conf ) ; \n \t3 if ( fs . is <identifiersep> file ( path ) ) { \n \t3 dst . get <identifiersep> parent <identifiersep> file ( ) . mkdirs ( ) ; } \n <ect>
\t4 component audit <identifiersep> block = build <identifiersep> audit <identifiersep> block ( ( simple <identifiersep> audit <identifiersep> log ) activity ) ; \n \t4 if ( audit <identifiersep> block != null ) { \n \t5 activity <identifiersep> box . add <identifiersep> component ( audit <identifiersep> block ) ; } \n \t3 } else { \n <ect>
\t2 log <identifiersep> distribution ( ) ; \n \t2 if ( can <identifiersep> add <identifiersep> ss <identifiersep> table ( reader ) ) \n \t2 { \n \t3 <comment> \n <ect>
# server configurations \n # default value used in <identifier> <number_literal> . <number_literal> . 0 . 0 and <identifier> . \n <identifier> <identifiersep> data <identifiersep> dir = ' / var / lib / <identifier> / <identifier> \n # <identifier> , it has to be <identifier> greater than <number_literal> . <number_literal> . 0 . 0 ! ! ! \n <ect>
public void execute ( ) { \n \t1 settings . get ( <identifier> <identifiersep> report <identifiersep> export <identifiersep> path ) . if <identifiersep> present ( this : : export <identifiersep> results ) ; } \n private void export <identifiersep> results ( string export <identifiersep> path ) { \n \t1 file export <identifiersep> file = new file ( file <identifiersep> system . work <identifiersep> dir ( ) , export <identifiersep> path ) ; \n <ect>
\t5 + <string_literal> ) ; \n \t3 return ; } \n \t2 long first <identifiersep> element <identifiersep> zxid = pending <identifiersep> txns . element ( ) . zxid ; \n \t2 if ( first <identifiersep> element <identifiersep> zxid != zxid ) { \n <ect>
\t2 actions . put ( name , action ) ; \n \t2 gson = null ; } \n \t1 public void register <identifiersep> decorator ( string name , class < ? extends action > action ) { \n \t2 if ( decorators . contains <identifiersep> key ( name ) ) { \n <ect>
\t2 if ( load <identifiersep> from <identifiersep> file ( new file ( <identifier> <identifiersep> workspace <identifiersep> dir , <string_literal> ) ) ) { \n \t3 return ; } \n \t2 if ( load <identifiersep> from <identifiersep> file ( new file ( <identifier> <identifiersep> workspace <identifiersep> dir , <string_literal> ) ) ) { \n \t3 return ; } \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 flink = new testing <identifiersep> cluster ( config ) ; \n \t2 try { \n <ect>
\t7 type <identifiersep> converter <identifier> <identifiersep> type <identifiersep> converter = converter <identifiersep> creator . create <identifiersep> type <identifiersep> converter ( ( string ) entry . get <identifiersep> value ( ) ) ; \n \t7 log . debug ( <string_literal> , key , entry . get <identifiersep> value ( ) , <identifier> <identifiersep> type <identifiersep> converter ) ; \n \t7 mapping . put ( key , <identifier> <identifiersep> type <identifiersep> converter ) ; \n \t6 } else { \n <ect>
\t3 assert <identifiersep> equals ( <string_literal> , 0 , transport . get <identifiersep> buffered <identifiersep> command <identifiersep> count ( ) ) ; \n \t2 } else { \n \t3 assert <identifiersep> true ( <string_literal> , exceptions . size ( ) > 0 ) ; \n \t3 exception e = ( exception ) exceptions . remove ( ) ; \n <ect>
\t3 <comment> \n \t3 if ( time <identifiersep> set != null ) { \n \t4 cal . set <identifiersep> time <identifiersep> in <identifiersep> millis ( time <identifiersep> set ) ; \n \t4 if ( ( time <identifiersep> read - time <identifiersep> set ) < = <number_literal> ) { \n <ect>
\t3 boolean use <identifiersep> ticket <identifiersep> cache = flink <identifiersep> configuration . get <identifiersep> boolean ( security <identifiersep> options . kerberos <identifiersep> login <identifiersep> <identifier> ) ; \n \t3 user <identifiersep> group <identifiersep> information login <identifiersep> user = user <identifiersep> group <identifiersep> information . get <identifiersep> current <identifiersep> user ( ) ; \n \t3 if ( login <identifiersep> user . get <identifiersep> authentication <identifiersep> method ( ) == user <identifiersep> group <identifiersep> information . authentication <identifiersep> method . kerberos \n \t4 && use <identifiersep> ticket <identifiersep> cache && ! login <identifiersep> user . has <identifiersep> kerberos <identifiersep> credentials ( ) ) { \n <ect>
\t1 protected void handle <identifiersep> message <identifiersep> internal ( message < ? > message ) { \n \t2 object payload = message . get <identifiersep> payload ( ) ; \n \t2 if ( payload == null ) { \n <ect>
<comment> \n \t1 private void log <identifiersep> transaction <identifiersep> begin ( string redelivered , string ids ) { \n <ect>
\t1 try \n \t1 { \n \t1 if ( <identifier> <identifiersep> peer != null ) \n \t1 { \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 listener . got <identifiersep> connect ( chan ) ; \n \t4 } catch ( io <identifiersep> exception logged ) { \n <ect>
\t2 try { \n \t3 assert <identifiersep> allowed ( user <identifiersep> pass , destination ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( jms <identifiersep> exception expected ) { \n <ect>
\t1 private map < string , object > get <identifiersep> developer <identifiersep> properties ( ) throws configuration <identifiersep> exception { \n \t2 final file file = properties <identifiersep> util . find <identifiersep> config <identifiersep> file ( <string_literal> ) ; \n \t2 if ( file == null ) { \n \t3 throw new configuration <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t4 case <identifier> : \n \t5 <identifier> <identifier> = remote <identifiersep> controller . get <identifiersep> <identifier> ( ) ; \n \t5 return new string <identifiersep> type ( <identifier> . to <identifiersep> string ( ) ) ; \n \t4 case <identifier> <identifiersep> step : \n <ect>
\t1 private void add <identifiersep> <identifier> <identifiersep> provider ( connection conn , long physical <identifiersep> network <identifiersep> id , long zone <identifiersep> id ) { \n \t2 prepared <identifiersep> statement pstmt <identifiersep> update = null ; \n \t2 try { \n \t3 <comment> \n <ect>
\t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> store <identifiersep> number ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + bitstream . get <identifiersep> size ( ) ) ; \n \t2 log . info ( msg ( <string_literal> ) + <string_literal> + ( bitstream . get <identifiersep> format ( context ) != null ? bitstream . get <identifiersep> format ( context ) \n <number_literal> . get <identifiersep> id ( ) : <string_literal> ) ) ; \n <ect>
\t3 if ( ! is <identifiersep> first <identifiersep> connect ) { \n \t4 try { \n \t5 thread . sleep ( r . next <identifiersep> int ( <number_literal> ) ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 future < ? > future = compaction <identifiersep> manager . instance . submit <identifiersep> index <identifiersep> build ( builder ) ; \n \t3 fb <identifiersep> utilities . wait <identifiersep> on <identifiersep> future ( future ) ; \n \t3 force <identifiersep> blocking <identifiersep> flush ( ) ; \n \t3 set <identifiersep> index <identifiersep> built ( ) ; } \n <ect>
\t1 } catch ( no <identifiersep> such <identifiersep> lock <identifiersep> exception e ) { \n \t2 log . error ( <string_literal> + java <identifiersep> utils . lock <identifiersep> id <identifiersep> to <identifiersep> string ( lock <identifiersep> id ) ) ; \n \t2 throw new lock <identifiersep> exception ( e , error <identifiersep> msg . lock <identifiersep> no <identifiersep> such <identifiersep> lock , java <identifiersep> utils . lock <identifiersep> id <identifiersep> to <identifiersep> string ( lock <identifiersep> id ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> txn <identifiersep> exception e ) { \n <ect>
\t2 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 if ( registered <identifiersep> service == null || ! registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed ( ) ) { \n \t3 logger . warn ( <string_literal> , registered <identifiersep> service ) ; \n \t3 return false ; } \n <ect>
\t3 if ( idx <identifiersep> name != null ) \n \t3 { \n \t4 collection < secondary <identifiersep> index > indexes = cf <identifiersep> store . index <identifiersep> manager . get <identifiersep> indexes <identifiersep> by <identifiersep> names ( new hash <identifiersep> set < > ( arrays . as <identifiersep> list ( cf <identifiersep> name ) ) ) ; \n \t4 if ( indexes . is <identifiersep> empty ( ) ) \n <ect>
\t3 while ( ! <identifier> . eof ( ) ) { \n \t4 int read = <identifier> . read ( buf ) ; \n \t4 if ( read > 0 ) \n \t5 baos . write ( buf , 0 , read ) ; } \n <ect>
\t4 return ( t ) app <identifiersep> context . get <identifiersep> bean ( name ) ; \n \t3 } else { \n \t4 return null ; } } \n \t2 catch ( beans <identifiersep> exception e ) { \n <ect>
\t4 if ( file . exists ( ) ) { \n \t5 file <identifiersep> input <identifiersep> stream file <identifiersep> input <identifiersep> stream = new file <identifiersep> input <identifiersep> stream ( file ) ; \n \t5 complex <identifiersep> data = new complex <identifiersep> data ( original <identifiersep> filename , file <identifiersep> input <identifiersep> stream ) ; \n \t4 } else { \n <ect>
\t1 boolean is <identifiersep> activate , wm <identifiersep> full <identifiersep> resource <identifiersep> plan applied <identifiersep> rp ) throws hive <identifiersep> exception { \n \t1 string name = null ; \n \t1 if ( is <identifiersep> activate ) { \n \t1 name = applied <identifiersep> rp . get <identifiersep> plan ( ) . get <identifiersep> name ( ) ; \n <ect>
\t2 if ( name <identifiersep> begin == - 1 || name <identifiersep> begin == name <identifiersep> end ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( value <identifiersep> begin == - 1 ) { \n <ect>
\t3 return suitable <identifiersep> pools ; } \n \t2 stats <identifiersep> collector sc = stats <identifiersep> collector . get <identifiersep> instance ( ) ; \n \t2 collections . shuffle ( pools ) ; \n <ect>
\t2 create <identifiersep> index <identifiersep> and <identifiersep> index <identifiersep> data ( <number_literal> , 0 ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> update <identifiersep> settings ( ) . set <identifiersep> transient <identifiersep> settings ( \n \t3 settings . builder ( ) . put ( <string_literal> , <number_literal> . 0f ) ) . get ( ) ; \n <ect>
\t4 latch . count <identifiersep> down ( ) ; } \n \t2 } ) ; \n \t2 this . active <identifiersep> mq <identifiersep> broker . stop ( ) ; \n \t2 assert <identifiersep> true ( <string_literal> , latch . await ( <number_literal> , time <identifiersep> unit . seconds ) ) ; \n <ect>
\t5 session . get <identifiersep> workspace ( ) . copy ( <string_literal> + scale , <string_literal> + scale ) ; } \n \t3 } ; \n \t3 double t = test . run ( ) ; \n \t3 execution <identifiersep> times . add ( t ) ; \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + host <identifiersep> id + <string_literal> ) ; \n \t3 return false ; } \n \t2 long used <identifiersep> cpu = <identifier> <identifiersep> host <identifiersep> allocated <identifiersep> cpu <identifiersep> memory <identifiersep> capacity ( vm <identifiersep> on <identifiersep> host , capacity <identifiersep> vo . capacity <identifiersep> type <identifiersep> cpu ) ; \n <ect>
\t3 add <identifiersep> output <identifiersep> selector ( virtual <identifiersep> select <identifiersep> nodes . get ( vertex <identifiersep> id ) . f0 , output <identifiersep> selector ) ; \n \t2 } else { \n \t3 get <identifiersep> stream <identifiersep> node ( vertex <identifiersep> id ) . add <identifiersep> output <identifiersep> selector ( output <identifiersep> selector ) ; \n <ect>
\t5 result . put ( <string_literal> , manager <identifiersep> bean . get <identifiersep> total <identifiersep> started <identifiersep> thread <identifiersep> count ( ) ) ; \n \t5 result . put ( <string_literal> , manager <identifiersep> bean . get <identifiersep> peak <identifiersep> thread <identifiersep> count ( ) ) ; \n \t5 result . put ( <string_literal> , manager <identifiersep> bean . get <identifiersep> daemon <identifiersep> thread <identifiersep> count ( ) ) ; } \n \t3 } catch ( throwable f ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t1 public void ack ( object msg <identifiersep> id ) { \n \t2 log . debug ( <string_literal> + msg <identifiersep> id ) ; } \n \t1 @ override \n \t1 public void fail ( object msg <identifiersep> id ) { \n <ect>
\t1 try { \n \t2 client = get <identifiersep> coordinator <identifiersep> connection <identifiersep> with <identifiersep> retry ( context ) ; \n \t2 return exec . execute ( client ) ; \n \t1 } catch ( t <identifiersep> transport <identifiersep> exception tte ) { \n <ect>
\t3 if ( ! new <identifiersep> file . exists ( ) ) { \n \t4 overwrite = true ; \n \t3 } else { \n \t4 if ( new <identifiersep> file . last <identifiersep> modified ( ) < entry . get <identifiersep> time ( ) ) { \n <ect>
\t3 data <identifiersep> helper . store <identifiersep> props ( config , conf ) ; \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> info ( ) ) \n \t4 <identifier> <identifiersep> log . info ( <string_literal> + conf ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t4 if ( ! mark <identifiersep> only ) { \n \t5 thread . sleep ( max <identifiersep> last <identifiersep> modified <identifiersep> interval + <number_literal> ) ; \n \t5 log . info ( <string_literal> , max <identifiersep> last <identifiersep> modified <identifiersep> interval + <number_literal> ) ; \n \t5 long delete <identifiersep> count = sweep ( fs , mark <identifiersep> start , force <identifiersep> blob <identifiersep> retrieve ) ; \n <ect>
\t5 load <identifiersep> permission <identifiersep> entries ( child , path <identifiersep> entry <identifiersep> map ) ; \n \t4 } else { \n \t5 entries . add ( create <identifiersep> permission <identifiersep> entry ( path , child ) ) ; } } \n \t2 } else { \n <ect>
\t1 public json <identifiersep> collection <identifiersep> foo [ ] get ( ) throws exception { \n \t2 json <identifiersep> collection <identifiersep> foo [ ] foo = { new json <identifiersep> collection <identifiersep> foo ( <string_literal> ) , new json <identifiersep> collection <identifiersep> foo ( <string_literal> start <string_literal> application / json <string_literal> <ect>
\t4 { \n \t5 mbean <identifiersep> server = mbean <identifiersep> servers . get ( 0 ) ; <comment> \n \t4 else \n \t4 { \n <ect>
\t3 <identifier> <identifiersep> enter <identifiersep> configuration <identifier> = chat . get <identifiersep> enter <identifiersep> configuration <identifiersep> builder ( <identifier> . from ( endpoint . get <identifiersep> <identifier> ( ) ) ) \n \t5 . request <identifiersep> no <identifiersep> history ( ) \n \t5 . build ( ) ; \n \t3 chat . join ( <identifier> ) ; \n <ect>
\t2 } catch ( concurrent <identifiersep> snapshot <identifiersep> execution <identifiersep> exception e ) { \n \t3 assert <identifiersep> that ( e . get <identifiersep> message ( ) , contains <identifiersep> string ( <string_literal> ) ) ; } \n \t2 logger . info ( <string_literal> , blocked <identifiersep> node ) ; \n \t2 unblock <identifiersep> node ( repo , blocked <identifiersep> node ) ; \n <ect>
\t5 params . set <identifiersep> cipher <identifiersep> suites ( ssl <identifiersep> utils . get <identifiersep> <identifier> <identifiersep> ciphers ( ) ) ; \n \t5 <comment> \n \t5 <comment> \n \t3 } ) ; \n <ect>
\t5 i ++ ; } \n \t4 locale model = new locale ( language , country , variant ) ; \n \t4 supported <identifiersep> <identifier> . add ( model ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 logger . info ( <string_literal> ) ; \n \t2 test <identifiersep> translog . corrupt <identifiersep> translog <identifiersep> files ( logger , random ( ) , translog <identifiersep> dirs ) ; \n \t2 <comment> \n <ect>
\t3 context = create ( v <identifiersep> center <identifiersep> address , v <identifiersep> center <identifiersep> user <identifiersep> name , v <identifiersep> center <identifiersep> password ) ; \n \t2 } else { \n \t3 <comment> \n \t3 if ( ! context . validate ( ) || ( context . get <identifiersep> vim <identifiersep> client ( ) . get <identifiersep> <identifier> <identifiersep> session <identifiersep> timeout ( ) != s <identifiersep> vmware <identifiersep> mgr . get <identifiersep> <identifier> <identifiersep> session <identifiersep> timeout ( ) ) ) { \n <ect>
\t5 retry -- ; \n \t5 s <identifiersep> logger . info ( <string_literal> + template <identifiersep> id + <string_literal> + checksum + <string_literal> + retry ) ; \n \t5 valid = digest <identifiersep> helper . check ( checksum , new file <identifiersep> input <identifiersep> stream ( downloaded <identifiersep> file <identifiersep> path ) ) ; \n \t5 if ( ! valid && retry > 0 ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t3 <identifier> <identifiersep> validation <identifiersep> <identifier> <identifiersep> cache = erx <identifiersep> mutable <identifiersep> dictionary . synchronized <identifiersep> dictionary ( ) ; \n \t3 <identifier> <identifiersep> initial <identifiersep> default <identifiersep> values = null ; \n \t3 read <identifiersep> default <identifiersep> values ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 <comment> \n \t4 node <identifier> = <identifier> . get ( v ) ; \n \t4 node <identifier> = <identifier> . get ( v ) ; \n \t4 if ( ! <identifier> . equals ( <identifier> ) ) \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t3 try { \n \t4 conn = libvirt <identifiersep> connection . get <identifiersep> connection <identifiersep> by <identifiersep> type ( hypervisor <identifiersep> type . kvm . to <identifiersep> string ( ) ) ; \n \t4 vm <identifiersep> states . put <identifiersep> all ( get <identifiersep> host <identifiersep> vm <identifiersep> state <identifiersep> report ( conn ) ) ; \n \t3 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t3 add <identifiersep> to <identifiersep> app <identifiersep> store ( file ) ; } } \n \t1 } else if ( kind . equals ( standard <identifiersep> watch <identifiersep> event <identifiersep> <identifier> . entry <identifiersep> modify ) ) { \n \t1 log . info ( <string_literal> ) ; \n \t1 } else if ( kind . equals ( standard <identifiersep> watch <identifiersep> event <identifiersep> <identifier> . entry <identifiersep> delete ) ) { \n <ect>
<number_literal> <string_literal> , \n <number_literal> xml <identifiersep> workflow <identifiersep> service . get <identifiersep> my <identifiersep> d <identifiersep> space <identifiersep> link ( ) \n \t3 ) ; \n \t2 } catch ( messaging <identifiersep> exception e ) { \n <ect>
\t4 server <identifiersep> address address = null ; \n \t4 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t5 address = c . get <identifiersep> replica <identifiersep> set <identifiersep> status ( ) . get <identifiersep> master ( ) ; \n \t5 if ( address == null ) { \n <ect>
\t2 file hosts <identifiersep> file = locate <identifiersep> hosts <identifiersep> file ( ) ; \n \t2 try { \n \t3 return parse ( hosts <identifiersep> file ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t2 client <identifiersep> stats <identifiersep> <identifier> . add ( ( client <identifiersep> stats <identifiersep> publisher ) class . for <identifiersep> name ( \n \t3 client <identifiersep> stats <identifiersep> publisher <identifiersep> class . trim ( ) , true , utilities . get <identifiersep> session <identifiersep> specified <identifiersep> class <identifiersep> loader ( ) ) . new <identifiersep> instance ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 servers = get <identifiersep> servers ( admin ) \n \t1 begin \n \t1 <identifier> = get <identifiersep> server <identifiersep> name ( servers , hostname ) \n \t1 rescue argument <identifiersep> error = > e \n <ect>
\t2 event <identifiersep> manager . shutdown ( ) ; \n \t2 try { \n \t3 storm <identifiersep> cluster <identifiersep> state . disconnect ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 final map < string , object > default <identifiersep> attributes = get <identifiersep> released <identifiersep> by <identifiersep> default <identifiersep> attributes ( principal , principal <identifiersep> attributes ) ; \n \t3 logger . debug ( <string_literal> , default <identifiersep> attributes ) ; \n \t3 logger . debug ( <string_literal> ) ; \n \t3 attributes <identifiersep> to <identifiersep> release . put <identifiersep> all ( default <identifiersep> attributes ) ; } \n <ect>
\t3 log . debug ( <string_literal> + i + <string_literal> ) ; } \n \t2 new <identifiersep> largest <identifiersep> number <identifiersep> of <identifiersep> steps = i ; \n \t2 <comment> \n \t2 <comment> \n <ect>
\t5 <identifier> <identifiersep> inbound <identifiersep> tag <identifiersep> sets . remove ( tag ) ; } \n \t4 for ( session <identifiersep> tag tag : session <identifiersep> tags ) { \n \t5 <identifier> <identifiersep> inbound <identifiersep> tag <identifiersep> sets . remove ( tag ) ; } } \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n <ect>
\t5 file <identifiersep> history <identifiersep> service . class . get <identifiersep> name ( ) , \n \t5 file <identifiersep> history <identifiersep> service , \n \t5 null ) ; \n <ect>
\t3 logger . info ( <string_literal> ) ; } \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> acked ( client . admin ( ) . cluster ( ) . prepare <identifiersep> put <identifiersep> repository ( <string_literal> ) \n \t4 . set <identifiersep> type ( <string_literal> ) . set <identifiersep> settings ( settings . builder ( ) . put ( <string_literal> , repository <identifiersep> location . resolve ( <string_literal> ) ) ) ) ; \n <ect>
\t5 continue ; } \n \t4 if ( answer != null && answer . get <identifiersep> result ( ) ) { \n \t5 return true ; } } } \n <ect>
\t3 while ( rs . next ( ) ) { \n \t4 if ( rs . get <identifiersep> int ( 1 ) != default <identifiersep> direct <identifiersep> network <identifiersep> id ) { \n \t5 s <identifiersep> logger . error ( <string_literal> ) ; \n \t5 system . exit ( <number_literal> ) ; } } \n <ect>
\t2 { \n \t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> ) ; } \n \t2 pool = <identifier> <identifiersep> pool <identifiersep> dao . acquire <identifiersep> in <identifiersep> lock <identifiersep> table ( pool . get <identifiersep> id ( ) ) ; \n \t2 if ( pool == null ) { \n <ect>
<comment> \n private void resolve <identifiersep> snapshot <identifiersep> versions <identifiersep> to <identifiersep> <identifier> <identifiersep> from <identifiersep> class <identifiersep> path ( list < url > resolved <identifiersep> ur <identifiersep> ls , list < url > classpath <identifiersep> ur <identifiersep> ls ) { \n <ect>
\t7 <string_literal> + \n \t7 <string_literal> + stomp . null ; \n \t2 stomp <identifiersep> connection . send <identifiersep> frame ( connect <identifiersep> frame ) ; \n \t2 string f = stomp <identifiersep> connection . receive <identifiersep> frame ( ) ; \n <ect>
\t3 try { \n \t4 <identifier> <identifiersep> storage <identifiersep> mgr . connect <identifiersep> host <identifiersep> to <identifiersep> shared <identifiersep> pool ( host . get <identifiersep> id ( ) , primary <identifiersep> data <identifiersep> store <identifiersep> info . get <identifiersep> id ( ) ) ; \n \t4 pool <identifiersep> hosts . add ( host ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 public static void main ( string <identifier> [ ] ) { \n \t2 erx <identifiersep> application . main ( <identifier> , application . class ) ; } \n \t1 public application ( ) { \n \t2 super ( ) ; \n <ect>
\t5 compress <identifiersep> to . delete ( ) ; } \n \t4 process gzip <identifiersep> proc = runtime . get <identifiersep> runtime ( ) . exec ( new string [ ] { <string_literal> , path <identifiersep> string } ) ; \n \t4 if ( gzip <identifiersep> proc . wait <identifiersep> for ( ) != 0 ) { \n <ect>
\t4 for ( final member <identifiersep> value <identifiersep> pair entry : entries ) { \n \t5 final string member <identifiersep> name = entry . get <identifiersep> name ( ) . get <identifiersep> fully <identifiersep> qualified <identifiersep> name ( ) ; \n \t5 final expression expression = entry . get <identifiersep> value ( ) ; \n \t5 record <identifiersep> annotation <identifiersep> member ( member <identifiersep> name , expression , annotation <identifiersep> node ) ; } } \n <ect>
\t3 if ( ! descriptor . get <identifiersep> preferences ( ) . is <identifiersep> exclude <identifiersep> from <identifiersep> generation ( ) ) { \n \t4 log . info ( <string_literal> + component . get <identifiersep> name ( ) ) ; \n \t4 component <identifiersep> descriptors . add ( descriptor ) ; \n \t3 } else { \n <ect>
\t3 log . warn ( <string_literal> ) ; } } \n \t1 public void process <identifiersep> io <identifiersep> exception ( io <identifiersep> exception <identifiersep> event io <identifiersep> exception <identifiersep> event ) { \n <ect>
\t2 queued <identifiersep> work . add <identifiersep> all ( work <identifiersep> queue . get <identifiersep> work <identifiersep> queued ( ) ) ; \n \t2 return ; \n \t1 } catch ( keeper <identifiersep> exception e ) { \n \t2 if ( keeper <identifiersep> exception . code . <identifier> . equals ( e . code ( ) ) ) { \n <ect>
\t2 player <identifiersep> pump <identifiersep> info info = pump <identifiersep> progress . compute <identifiersep> if <identifiersep> absent ( profile , player <identifiersep> pump <identifiersep> info : : new ) ; \n \t2 info . last <identifiersep> pump <identifiersep> tick = world . get <identifiersep> total <identifiersep> world <identifiersep> time ( ) ; \n \t2 info . sources <identifiersep> <identifier> ++ ; \n \t2 string name = profile . get <identifiersep> name ( ) ; \n <ect>
public string to <identifiersep> string ( ) { \n \t1 return <string_literal> + meta <identifiersep> store <identifiersep> client + <string_literal> + connected + <string_literal> ; } \n private void check <identifiersep> table ( i <identifiersep> meta <identifiersep> store <identifiersep> client meta <identifiersep> store <identifiersep> client , acid <identifiersep> table acid <identifiersep> table ) throws connection <identifiersep> exception { \n \t1 try { \n <ect>
\t3 vmware <identifiersep> manager mgr = context . get <identifiersep> <identifier> <identifiersep> object ( vmware <identifiersep> manager . context <identifiersep> <identifier> <identifiersep> name ) ; \n \t3 virtual <identifiersep> machine <identifiersep> mo vm <identifiersep> mo = hyper <identifiersep> host . find <identifiersep> vm <identifiersep> on <identifiersep> hyper <identifiersep> host ( cmd . get <identifiersep> name ( ) ) ; \n \t3 if ( vm <identifiersep> mo == null ) { \n <ect>
\t3 pstmt . execute <identifiersep> update ( ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception ex ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t2 if ( <identifier> <identifiersep> mx <identifiersep> bean == null ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return ; } \n \t2 final string filename = file . to <identifiersep> string ( ) ; \n <ect>
\t5 try { \n \t6 create <identifiersep> broker ( configurer ) ; \n \t6 broker . wait <identifiersep> until <identifiersep> started ( ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t2 exec exec = new exec ( dst <identifiersep> host , user , password ) ; \n \t2 string path = data <identifiersep> path + container <identifiersep> id ; \n \t2 try { \n \t3 string exec <identifiersep> command = <string_literal> + path ; \n <ect>
\t3 config . set <identifiersep> data <identifiersep> encryption <identifiersep> algorithms ( this . override <identifiersep> data <identifiersep> encryption <identifiersep> algorithms ) ; } \n \t2 if ( this . override <identifiersep> key <identifiersep> encryption <identifiersep> algorithms != null && ! this . override <identifiersep> key <identifiersep> encryption <identifiersep> algorithms . is <identifiersep> empty ( ) ) { \n \t3 config . set <identifiersep> key <identifiersep> transport <identifiersep> encryption <identifiersep> algorithms ( this . override <identifiersep> key <identifiersep> encryption <identifiersep> algorithms ) ; } \n \t2 logger . debug ( <string_literal> , config . get <identifiersep> blacklisted <identifiersep> algorithms ( ) ) ; \n <ect>
\t1 response response = request . post ( entity . entity ( str , application <identifiersep> xml <identifiersep> <identifier> <identifiersep> type ) ) ; \n \t1 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t1 char <identifiersep> set <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element entity = response . read <identifiersep> entity ( char <identifiersep> set <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element . class ) ; \n \t1 log . info ( <string_literal> + entity ) ; \n <ect>
\t5 throw new failed <identifiersep> exception ( e ) ; } } } } \n \t1 @ override \n \t1 public void begin <identifiersep> commit ( long tx <identifiersep> id ) { \n \t2 if ( tx <identifiersep> id < = last <identifiersep> seen <identifiersep> txn . txnid ) { \n <ect>
\t4 . as <identifiersep> <identifier> ( deserializer . class ) , \n \t3 context . conf ) ; \n \t2 if ( context . <identifier> <identifiersep> classes <identifiersep> under <identifiersep> <identifier> . contains ( deserializer <identifiersep> class <identifiersep> name ) ) { \n \t2 deserializer . initialize ( context . conf , <identifier> <identifiersep> table <identifiersep> parameters ) ; \n <ect>
\t2 if ( result ) { \n \t3 <identifier> <identifiersep> context . wait <identifiersep> for <identifiersep> task <identifiersep> progress <identifiersep> done ( mor <identifiersep> task ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
public string get <identifiersep> name ( ) { \n \t1 return <string_literal> ; } \n public static task < ? > get <identifiersep> load <identifiersep> copy <identifiersep> task ( replication <identifiersep> spec replication <identifiersep> spec , path src <identifiersep> path , path dst <identifiersep> path , hive <identifiersep> conf conf ) { \n \t1 task < ? > copy <identifiersep> task = null ; \n <ect>
\t2 boolean retval = remove . post <identifiersep> control <identifiersep> action ( ) ; \n \t2 synchronized ( lock ) { \n \t3 ports <identifiersep> <identifier> . remove ( <identifier> ) ; } \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) && ! no <identifiersep> log ) \n <ect>
\t5 key . interest <identifiersep> ops ( ( key . interest <identifiersep> ops ( ) | selection <identifiersep> key . op <identifiersep> read ) & <identifier> <identifiersep> key . op <identifiersep> connect ) . attach ( handler ) ; \n \t5 connection . connection <identifiersep> opened ( ) ; \n \t5 data . future . set ( data . address ) ; \n \t4 } else { \n <ect>
\t1 public void test <identifiersep> <identifier> <identifiersep> in <identifiersep> <identifier> ( ) throws exception { \n \t2 <comment> \n \t2 final com . <identifier> . result result = request <identifiersep> body ( <string_literal> , null ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 schema = basedir + <string_literal> ; \n \t3 json = basedir + <string_literal> + i ; \n \t3 avro = basedir + <string_literal> + i + <string_literal> ; \n <ect>
\t3 assert . assert <identifiersep> that ( <string_literal> , entity , contains <identifiersep> string ( <string_literal> ) ) ; } } \n \t1 void do <identifiersep> entity <identifiersep> expansion <identifiersep> <identifier> ( string ext ) throws exception { \n \t2 logger . info ( <string_literal> + ext + <string_literal> ) ; \n \t2 { \n <ect>
\t5 dev . enqueue <identifiersep> message ( m , m <identifiersep> feature ) ; \n \t5 logger . info ( <string_literal> , <identifier> ( ) , dev . get <identifiersep> address ( ) ) ; } \n \t4 <comment> \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 column <identifiersep> generator . . . extra <identifiersep> cols ) \n \t1 throws sql <identifiersep> exception { \n \t1 string sql <identifiersep> statement = get <identifiersep> <identifier> <identifiersep> drop <identifiersep> table <identifiersep> statement ( table <identifiersep> name ) ; \n \t1 conn . rollback ( ) ; \n <ect>
\t3 if ( ! <identifier> . is <identifiersep> empty ( ) ) { \n \t4 for ( release <identifiersep> id release <identifiersep> id : <identifier> . key <identifiersep> set ( ) . to <identifiersep> array ( new release <identifiersep> id [ <identifier> . size ( ) ] ) ) { \n \t5 kie <identifiersep> container k <identifiersep> container = ks . new <identifiersep> kie <identifiersep> container ( release <identifiersep> id ) ; \n \t5 if ( k <identifiersep> container == null ) { \n <ect>
\t5 } else { \n \t6 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t4 } else { \n \t5 s <identifiersep> logger . debug ( <string_literal> + host . get <identifiersep> status ( ) . name ( ) + <string_literal> + host . get <identifiersep> resource <identifiersep> state ( ) ) ; } } \n <ect>
<comment> \n \t1 private void remove <identifiersep> table ( table <identifiersep> descriptor tbl ) throws grid <identifiersep> spi <identifiersep> exception { \n \t2 assert tbl != null ; \n <ect>
\t4 tx . success ( ) ; \n \t3 } catch ( database <identifiersep> service <identifiersep> not <identifiersep> available <identifiersep> exception <identifier> ) { \n \t4 logger . warn ( <identifier> . get <identifiersep> message ( ) ) ; \n \t3 } catch ( framework <identifiersep> exception t ) { \n <ect>
\t1 public void add <identifiersep> ticket ( final ticket ticket <identifiersep> to <identifiersep> add ) { \n \t2 final memcached <identifiersep> client <identifiersep> if client <identifiersep> from <identifiersep> pool = get <identifiersep> client <identifiersep> from <identifiersep> pool ( ) ; \n \t2 try { \n \t3 final ticket ticket = encode <identifiersep> ticket ( ticket <identifiersep> to <identifiersep> add ) ; \n <ect>
\t1 protected predicate < map . entry < string , object > > filter <identifiersep> provided <identifiersep> given <identifiersep> attributes ( ) { \n \t2 return entry - > { \n \t3 final string attribute <identifiersep> name = entry . get <identifiersep> key ( ) ; \n \t3 final object attribute <identifiersep> value = entry . get <identifiersep> value ( ) ; \n <ect>
\t3 <identifier> <identifiersep> stream = files . new <identifiersep> input <identifiersep> stream ( <identifier> <identifiersep> files [ 0 ] ) ; \n \t3 try ( directory tmp = new simple <identifiersep> fs <identifiersep> directory ( env . tmp <identifiersep> file ( ) ) ) { \n \t4 return new dictionary ( tmp , <string_literal> , <identifier> <identifiersep> stream , <identifier> <identifiersep> streams , ignore <identifiersep> case ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 for ( string file : <identifier> ) { \n \t3 if ( archive <identifiersep> manager . delete ( file ) ) { \n \t4 removed . add ( file ) ; \n \t3 } else { \n <ect>
\t2 for ( properties <identifiersep> location location : locations ) { \n \t3 log . trace ( <string_literal> , location ) ; \n \t3 try { \n \t4 string path = file <identifiersep> path <identifiersep> resolver . resolve <identifiersep> path ( location . get <identifiersep> path ( ) ) ; \n <ect>
\t3 int status <identifiersep> code = http <identifiersep> client . execute <identifiersep> method ( method ) ; \n \t3 if ( status <identifiersep> code != http <identifiersep> status . sc <identifiersep> ok ) { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + method . get <identifiersep> status <identifiersep> line ( ) + <string_literal> + query + <string_literal> ) ; } \n \t3 string weather = get <identifiersep> endpoint ( ) . get <identifiersep> camel <identifiersep> context ( ) . get <identifiersep> type <identifiersep> converter ( ) . mandatory <identifiersep> convert <identifiersep> to ( string . class , method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ) ; \n <ect>
\t4 } else { \n \t5 s <identifiersep> logger . warn ( <string_literal> + vm + <string_literal> + network ) ; \n \t5 return false ; } \n \t3 } else if ( vm . get <identifiersep> state ( ) != state . stopped ) { \n <ect>
\t3 logger . info ( <string_literal> , response ) ; \n \t3 assert <identifiersep> not <identifiersep> equals ( <string_literal> , 0 , response . get <identifiersep> failed <identifiersep> shards ( ) ) ; \n \t3 return response ; \n \t2 } catch ( search <identifiersep> phase <identifiersep> execution <identifiersep> exception ex ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + router + <string_literal> + network + <string_literal> ) ; \n \t4 if ( remove <identifiersep> vpc <identifiersep> router <identifiersep> from <identifiersep> guest <identifiersep> network ( router , network ) ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + router + <string_literal> + network + <string_literal> ) ; \n \t4 } else { \n <ect>
\t2 discovery <identifiersep> nodes nodes = state . nodes ( ) ; \n \t2 if ( state . nodes ( ) . get <identifiersep> master <identifiersep> node <identifiersep> id ( ) == null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t2 } else if ( recover <identifiersep> after <identifiersep> nodes != - 1 && ( nodes . get <identifiersep> master <identifiersep> and <identifiersep> data <identifiersep> nodes ( ) . size ( ) ) < recover <identifiersep> after <identifiersep> nodes ) { \n <ect>
\t2 vr <identifiersep> settings = new vr <identifiersep> <identifier> <identifiersep> settings <identifiersep> fn <identifiersep> table ( j <identifiersep> open <identifiersep> vr <identifiersep> library . vr <identifiersep> get <identifiersep> generic <identifiersep> interface ( j <identifiersep> open <identifiersep> vr <identifiersep> library . <identifier> <identifiersep> settings <identifiersep> version , <identifier> <identifiersep> error <identifiersep> store ) ) ; \n \t2 if ( <identifier> <identifiersep> error <identifiersep> store . get ( 0 ) == 0 ) { \n \t3 vr <identifiersep> settings . set <identifiersep> auto <identifiersep> <identifier> ( false ) ; \n \t3 vr <identifiersep> settings . read ( ) ; \n <ect>
\t4 final string client <identifiersep> thread <identifiersep> name = get <identifiersep> client <identifiersep> thread <identifiersep> name ( socket ) ; \n \t4 new thread ( new <identifiersep> socket <identifiersep> node , client <identifiersep> thread <identifiersep> name ) . start ( ) ; } \n \t2 } catch ( exception e ) { \n \t3 if ( closed ) { \n <ect>
\t2 if ( metrics != null ) { \n \t3 try { \n \t3 metrics . decrement <identifiersep> counter ( metrics <identifiersep> constant . open <identifiersep> connections ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 outcome = ( ( transactional <identifiersep> state ) state ) . get <identifiersep> outcome ( ) ; \n \t3 } else if ( state instanceof outcome ) { \n \t4 outcome = ( outcome ) state ; \n \t3 } else { \n <ect>
\t6 } catch ( io <identifiersep> exception e ) { \n \t7 log . warn ( <string_literal> + command , e ) ; } } \n \t5 return ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 txn . set <identifiersep> batch ( persist <identifiersep> batch . insert ) ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t2 <identifier> <identifiersep> master master = create <identifiersep> master ( i ) ; \n <ect>
\t4 logger . debug ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) , scene <identifiersep> count ) ; \n \t4 <identifier> <identifiersep> done = true ; \n \t4 break ; \n \t3 default : \n <ect>
\t3 try { \n \t4 string snap <identifiersep> schedule <identifiersep> on <identifiersep> <identifier> = return <identifiersep> snapshot <identifiersep> schedule ( vol ) ; \n \t4 vol . set <identifiersep> snapshot <identifiersep> policy ( snap <identifiersep> schedule <identifiersep> on <identifiersep> <identifier> ) ; \n \t3 } catch ( server <identifiersep> exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> , type . get <identifiersep> name ( ) ) ; \n \t2 this . prototype <identifiersep> scoped . put ( required <identifiersep> type , type ) ; \n \t1 } else { \n \t2 <comment> \n <ect>
\t2 settings node <identifiersep> settings = settings <identifiersep> builder ( ) \n \t4 . put ( get <identifiersep> node <identifiersep> settings ( ) ) \n \t4 . put ( <string_literal> , id ) \n \t4 . build ( ) ; \n <ect>
\t3 max <identifiersep> <identifier> -- ; \n \t3 try { \n \t4 thread . sleep ( <number_literal> ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 log . info ( <string_literal> , begin . get <identifiersep> job <identifiersep> key ( ) ) ; } \n \t3 try { \n \t4 job = get <identifiersep> job ( begin . get <identifiersep> job <identifiersep> uuid ( ) ) ; \n \t4 if ( job == null ) { \n <ect>
\t1 public file <identifiersep> reader <identifiersep> host <identifiersep> location <identifiersep> initializer ( ) { \n \t2 file = new file ( system . get <identifiersep> property ( <string_literal> , <string_literal> ) ) ; \n \t2 log . info ( <string_literal> , file . get <identifiersep> name ( ) ) ; \n \t2 if ( ! file . exists ( ) ) { \n <ect>
\t3 throw new data <identifiersep> format <identifiersep> exception ( <string_literal> , <identifier> ) ; } \n \t2 <identifier> <identifiersep> <identifier> <identifiersep> id = data <identifiersep> helper . read <identifiersep> long ( in , <number_literal> ) ; \n \t2 <identifier> <identifiersep> expiration = data <identifiersep> helper . read <identifiersep> date ( in ) ; \n \t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 int command = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset ) ; \n \t2 switch ( command ) { \n \t3 case sensor <identifiersep> multi <identifiersep> level <identifiersep> get : \n \t3 case sensor <identifiersep> multi <identifiersep> level <identifiersep> supported <identifiersep> get : \n <ect>
\t2 assert <identifiersep> equals ( false , log . has <identifiersep> events ( ) ) ; } \n \t1 @ test \n \t1 public void should <identifiersep> not <identifiersep> accept <identifiersep> message <identifiersep> with <identifiersep> non <identifiersep> null <identifiersep> and <identifiersep> null <identifiersep> parameters ( ) { \n \t2 logger . error ( error <identifiersep> message <identifiersep> with <identifiersep> two <identifiersep> parameters , <string_literal> , null ) ; \n <ect>
\t2 ip <identifiersep> address = hook <identifiersep> context . get <identifiersep> ip <identifiersep> address ( ) ; \n \t2 user <identifiersep> name = hook <identifiersep> context . get <identifiersep> user <identifiersep> name ( ) ; \n \t2 operation = hook <identifiersep> context . get <identifiersep> operation <identifiersep> name ( ) ; } \n \t1 } catch ( throwable t ) { \n <ect>
\t4 . add <identifiersep> as <identifiersep> recovery ( meta <identifiersep> data . index ( index ) ) \n \t4 . build ( ) ; \n \t2 cluster <identifiersep> state cluster <identifiersep> state = cluster <identifiersep> state . builder ( org . elasticsearch . cluster . cluster <identifiersep> name . cluster <identifiersep> name <identifiersep> setting . get <identifiersep> default ( settings . empty ) ) . meta <identifiersep> data ( meta <identifiersep> data ) . routing <identifiersep> table ( routing <identifiersep> table ) . build ( ) ; \n \t2 final shard <identifiersep> id shard <identifiersep> id = new shard <identifiersep> id ( meta <identifiersep> data . index ( index ) . get <identifiersep> index ( ) , 0 ) ; \n <ect>
\t2 return new processor ( ) { \n \t3 public void process ( exchange exchange ) throws exception { \n \t4 <comment> \n \t4 count ++ ; \n <ect>
\t2 with open ( export <identifiersep> file <identifiersep> path , <string_literal> ) as file : \n \t2 file . write ( resp ) \n \t2 pass \n \t1 else : \n <ect>
\t3 return null ; } \n \t2 final string url <identifiersep> to <identifiersep> redirect <identifiersep> to = request . get <identifiersep> request <identifiersep> uri ( ) \n \t4 + ( request . get <identifiersep> query <identifiersep> string ( ) != null ? ' ? ' \n \t4 + request . get <identifiersep> query <identifiersep> string ( ) : string <identifiersep> utils . empty ) ; \n <ect>
\t4 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t3 } else { \n \t4 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , <string_literal> ) ; } \n \t2 } catch ( internal <identifiersep> error <identifiersep> exception ex ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 new job <identifiersep> graph <identifiersep> builder ( mr <identifiersep> plan ) . visit ( ) ; \n \t2 } catch ( visitor <identifiersep> exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 counters . get ( on <identifiersep> fire <identifiersep> event <identifiersep> failed <identifiersep> plugin . class ) . inc ( ) ; \n \t2 for ( plugin plugin : plugins . get ( on <identifiersep> fire <identifiersep> event <identifiersep> failed <identifiersep> plugin . class ) ) { \n \t3 if ( plugin instanceof on <identifiersep> fire <identifiersep> event <identifiersep> failed <identifiersep> plugin ) { \n <ect>
\t3 worker <identifiersep> group . shutdown <identifiersep> <identifier> ( ) ; \n \t3 worker <identifiersep> group = null ; } \n \t2 if ( pool != null ) { \n <ect>
void common ( int number ) throws exception { \n \t1 dom <identifiersep> configurator . configure ( <string_literal> + number + <string_literal> ) ; \n \t1 int i = - 1 ; \n \t1 logger . trace ( <string_literal> + ++ i ) ; \n <ect>
\t2 try { \n \t3 on <identifiersep> reconnection ( try <identifiersep> reconnect ( ) ) ; \n \t3 handler <identifiersep> future . mark <identifiersep> as <identifiersep> done ( ) ; \n \t3 current <identifiersep> attempt . compare <identifiersep> and <identifiersep> set ( handler <identifiersep> future , null ) ; \n <ect>
\t2 logger . trace ( <string_literal> ) ; \n \t2 if ( incoming <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( 0 ) != 0x00 ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } else { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> data <identifiersep> source <identifiersep> provider <identifiersep> input <identifiersep> stream <identifiersep> once ( ) throws exception { \n \t2 <comment> \n \t2 int count <identifiersep> before = count <identifiersep> files ( server <identifiersep> tmp <identifiersep> dir ) ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t2 default <identifiersep> request <identifiersep> timeout ) ; \n \t1 if ( request <identifiersep> timeout < = 0 ) { \n \t1 throw new illegal <identifiersep> argument <identifiersep> exception ( \n \t2 <string_literal> ) ; } \n <ect>
\t2 int [ ] sequence <identifiersep> numbers = new int [ <number_literal> ] ; \n \t2 int value = integer . max <identifiersep> value - <number_literal> ; \n \t2 transport . set <identifiersep> expected <identifiersep> counter ( value ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n <ect>
\t2 <identifier> <identifiersep> log . debug ( <string_literal> , response . get <identifiersep> response ( ) , <identifier> <identifiersep> <identifier> <identifiersep> executor . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t2 <comment> \n \t2 } ; \n \t2 uri client <identifiersep> uri = client . get <identifiersep> uri ( ) ; \n <ect>
\t1 @ override \n \t1 public void subscribe ( string service , url url , notify <identifiersep> listener listener ) { \n \t2 string client = rpc <identifiersep> context . get <identifiersep> context ( ) . get <identifiersep> remote <identifiersep> address <identifiersep> string ( ) ; \n <ect>
\t3 if ( object <identifiersep> helper . is <identifiersep> not <identifiersep> empty ( endpoint . get <identifiersep> branch <identifiersep> name ( ) ) ) { \n \t4 git . <identifier> ( ) . set <identifiersep> create <identifiersep> branch ( false ) . set <identifiersep> name ( endpoint . get <identifiersep> branch <identifiersep> name ( ) ) . call ( ) ; } \n \t3 result = git . <identifier> <identifiersep> <identifier> ( ) . include ( commit ) . call ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public <identifier> <identifiersep> aggregate <identifiersep> scanner ( <identifier> <identifiersep> scanner input , <identifier> <identifiersep> scan <identifiersep> request req , boolean <identifier> <identifiersep> enabled ) { \n \t2 if ( ! req . has <identifiersep> aggregation ( ) ) \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( ) ; \n \t2 if ( input instanceof <identifier> <identifiersep> filter <identifiersep> scanner ) { \n <ect>
\t2 final map < string , object > all <identifiersep> attributes = new hash <identifiersep> map < > ( principal <identifiersep> attributes ) ; \n \t2 final list < string > <identifier> <identifiersep> groups = new array <identifiersep> list < > ( ) ; \n \t2 final collection < ws <identifiersep> get <identifiersep> groups <identifiersep> result > results = <identifier> <identifiersep> facade . get <identifiersep> groups <identifiersep> for <identifiersep> subject <identifiersep> id ( principal ) ; \n \t2 if ( results . is <identifiersep> empty ( ) ) { \n <ect>
\t1 database <identifiersep> metadata <identifiersep> wrapper database <identifiersep> metadata = new database <identifiersep> metadata <identifiersep> wrapper ( 1 , 0 ) ; \n \t1 try { \n \t1 database <identifiersep> metadata = <identifier> . get <identifiersep> database <identifiersep> metadata ( connection <identifiersep> config ) ; \n \t1 } catch ( service <identifiersep> exception e ) { \n <ect>
\t1 log . debug ( <string_literal> ) ; \n \t1 thread <identifiersep> two . proceed <identifiersep> and <identifiersep> wait <identifiersep> <identifier> <identifiersep> done ( ) ; \n \t1 assert <identifiersep> not <identifiersep> null ( thread <identifiersep> two . exception ) ; \n \t1 assert <identifiersep> text <identifiersep> present ( <string_literal> , thread <identifiersep> two . exception . get <identifiersep> message ( ) ) ; \n <ect>
\t2 try { \n \t3 <comment> \n \t3 password = url <identifiersep> decoder . decode ( password , utf8 ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception uee ) { \n <ect>
\t2 logger . error ( this , <string_literal> + old <identifiersep> state + ' , ' + new <identifiersep> state + ' ) ' ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> metadata ( metadata m , client <identifiersep> put <identifiersep> state state , client <identifiersep> context context ) { \n \t2 <comment> \n <ect>
\t1 list <identifiersep> partition <identifiersep> names <identifiersep> <identifier> . assert <identifiersep> <identifier> <identifiersep> performed ( true , false ) ; \n \t1 injectable <identifiersep> <identifier> <identifiersep> object <identifiersep> store . reset <identifiersep> list <identifiersep> partition <identifiersep> names <identifiersep> <identifier> ( ) ; <comment> \n \t1 string repl <identifiersep> dump <identifiersep> <identifier> = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 string repl <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t2 final long now = clock . now ( ) ; \n \t2 final boolean expired = ( now - last <identifiersep> mod ) > heartbeat <identifiersep> millis ; \n \t2 if ( expired ) { \n \t2 heartbeat <identifiersep> exceeded . increment ( ) ; \n <ect>
\t1 } catch ( mutations <identifiersep> rejected <identifiersep> exception e ) { \n \t2 throw new io <identifiersep> exception ( e ) ; } } \n \t1 public void add <identifiersep> table ( text table <identifiersep> name ) throws accumulo <identifiersep> exception , accumulo <identifiersep> security <identifiersep> exception { \n \t1 if ( simulate ) { \n <ect>
\t2 byte [ ] hash <identifiersep> buf = simple <identifiersep> byte <identifiersep> cache . acquire ( hash . hash <identifiersep> length ) ; \n \t2 <comment> \n \t2 <identifier> <identifiersep> context . sha ( ) . calculate <identifiersep> hash ( <identifier> , 0 , fragment <identifiersep> length + iv <identifiersep> size , hash <identifiersep> buf , 0 ) ; \n \t2 <comment> \n <ect>
\t4 @ output <identifiersep> file file output <identifiersep> file = new file ( temporary <identifiersep> dir , <string_literal> ) \n \t4 @ input string run = project . find <identifiersep> property ( <string_literal> ) ? : <string_literal> \n \t4 @ task <identifiersep> action \n \t4 void generate ( ) { \n <ect>
<number_literal> admin <identifiersep> request , \n <number_literal> v <identifiersep> admin <identifiersep> proto . reserve <identifiersep> memory <identifiersep> response . new <identifiersep> builder ( ) ) ; \n \t5 if ( response . has <identifiersep> error ( ) ) \n \t6 helper <identifiersep> ops . throw <identifiersep> exception ( response . get <identifiersep> error ( ) ) ; } \n <ect>
\t2 url = developer <identifiersep> server + <string_literal> + s <identifiersep> linux <identifiersep> vm <identifiersep> id . get ( ) + <string_literal> + encoded <identifiersep> api <identifiersep> key + <string_literal> + encoded <identifiersep> signature ; \n \t2 client = new http <identifiersep> client ( ) ; \n \t2 method = new get <identifiersep> method ( url ) ; \n \t2 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t4 if ( objects . equals ( get <identifiersep> target <identifiersep> leader <identifiersep> id ( ) , current <identifiersep> job <identifiersep> master <identifiersep> id ) ) { \n \t5 log . info ( <string_literal> , get <identifiersep> target <identifiersep> address ( ) , job <identifiersep> id ) ; \n \t5 job <identifiersep> leader <identifiersep> listener . handle <identifiersep> error ( failure ) ; \n \t4 } else { \n <ect>
\t1 } ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n \t1 throw e ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 disk <identifiersep> read <identifiersep> only = false ; \n \t2 minion <identifiersep> task <identifiersep> <identifier> = new minion <identifiersep> task <identifiersep> <identifier> ( ) ; \n \t2 if ( state <identifiersep> file . exists ( ) ) { \n \t3 if ( state <identifiersep> file . length ( ) == 0 ) { \n <ect>
\t2 active <identifiersep> tx <identifiersep> id . set ( id ) ; \n \t2 this . transactional <identifiersep> content <identifiersep> by <identifiersep> id . put <identifiersep> if <identifiersep> absent ( id , this . tx <identifiersep> store . begin ( ) . open <identifiersep> map ( repository <identifiersep> content ) ) ; } \n \t1 @ override \n \t1 public void tx <identifiersep> committed ( string id ) { \n <ect>
\t1 public dot <identifiersep> file <identifiersep> interceptor <identifiersep> support ( broker next , string file ) { \n \t2 super ( next ) ; \n \t2 this . file = file ; } \n \t1 protected void generate <identifiersep> file ( ) throws exception { \n <ect>
\t2 <comment> \n \t2 log . debug ( <string_literal> + offset + <string_literal> + length ) ; \n \t2 list < set > array = new array <identifiersep> list < set > ( ) ; \n \t2 int community <identifiersep> count = this . get <identifiersep> community <identifiersep> count ( ) ; \n <ect>
\t4 for ( integer task : tasks ) { \n \t5 send <identifiersep> num ++ ; \n \t5 <identifier> <identifiersep> collector . emit <identifiersep> direct ( task , new values ( ) ) ; } } \n \t3 <identifier> <identifiersep> collector . flush ( ) ; \n <ect>
\t3 for ( converter <identifiersep> plugin plugin : plugins ) { \n \t4 if ( plugin <identifiersep> names . length ( ) > 0 ) { \n \t5 plugin <identifiersep> names . append ( <string_literal> ) ; } \n \t4 plugin <identifiersep> names . append ( plugin . get <identifiersep> class ( ) . get <identifiersep> canonical <identifiersep> name ( ) ) ; } \n <ect>
\t4 log . debug ( <string_literal> , object <identifiersep> mapper ) ; } } \n \t2 if ( enable <identifiersep> jaxb <identifiersep> annotation <identifiersep> module ) { \n \t3 <comment> \n \t3 jaxb <identifiersep> annotation <identifiersep> module module = new jaxb <identifiersep> annotation <identifiersep> module ( ) ; \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t2 for ( store <identifiersep> definition d : store <identifiersep> defs ) \n \t3 if ( d . get <identifiersep> name ( ) . equals ( store <identifiersep> name ) ) \n \t4 store <identifiersep> def = d ; \n \t2 if ( store <identifiersep> def == null ) { \n <ect>
\t1 conf = new hash <identifiersep> table <identifiersep> sink <identifiersep> desc ( desc ) ; \n \t1 <comment> \n \t1 assert conf . get <identifiersep> hashtable <identifiersep> memory <identifiersep> usage ( ) != 0 ; \n \t1 if ( conf . get <identifiersep> hashtable <identifiersep> memory <identifiersep> usage ( ) == 0 ) { \n <ect>
<comment> \n \t1 public void initialize ( ) { \n <ect>
\t3 client client = via <identifiersep> node != null ? client ( via <identifiersep> node ) : client ( ) ; \n \t3 cluster <identifiersep> state state = client . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> state ( ) ; \n \t3 return state . nodes ( ) . get <identifiersep> master <identifiersep> node ( ) . get <identifiersep> name ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 <identifier> = <identifier> . get <identifiersep> trust <identifiersep> managers ( ) ; \n \t2 } else { \n \t3 <comment> \n \t3 <identifier> = new trust <identifiersep> manager [ ] { new trust <identifiersep> all <identifiersep> manager ( ) } ; \n <ect>
\t3 log . error ( <string_literal> + credentials . get <identifiersep> user <identifiersep> principal ( ) + <string_literal> + credentials . get <identifiersep> password ( ) + <string_literal> + admin <identifiersep> api <identifiersep> url ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . unauthorized , <string_literal> ) ; } } \n \t1 private void check <identifiersep> response <identifiersep> ok ( final http <identifiersep> response response ) { \n \t2 if ( response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> no <identifiersep> content ) { \n <ect>
\t4 custom <identifiersep> properties . clear ( ) ; } \n \t3 try { \n \t4 increase <identifiersep> page <identifiersep> version ( ) ; \n \t3 } catch ( framework <identifiersep> exception ex ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t2 create <identifiersep> settings <identifiersep> table ( amazon <identifiersep> dynamo <identifiersep> db <identifiersep> client , false ) ; \n \t2 final scan <identifiersep> request scan = new scan <identifiersep> request ( table <identifiersep> name ) ; \n \t2 logger . debug ( <string_literal> , scan ) ; \n \t2 final scan <identifiersep> result result = amazon <identifiersep> dynamo <identifiersep> db <identifiersep> client . scan ( scan ) ; \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> ccn <identifiersep> time <identifiersep> timestamp ( ) { \n <ect>
public class transactional <identifiersep> service <identifiersep> impl implements transactional <identifiersep> service { \n \t1 private static logger log = logger . get <identifiersep> logger ( transactional <identifiersep> service <identifiersep> impl . class ) ; \n \t1 @ override \n \t1 public boolean is <identifiersep> transaction <identifiersep> active ( ) { \n <ect>
\t1 try { \n \t1 socket . set <identifiersep> so <identifiersep> <identifier> ( false , 0 ) ; \n \t1 socket . set <identifiersep> tcp <identifiersep> no <identifiersep> delay ( true ) ; \n \t1 } catch ( socket <identifiersep> exception <identifier> ) { \n <ect>
\t2 long new <identifiersep> physical <identifiersep> network <identifiersep> id = find <identifiersep> physical <identifiersep> network <identifiersep> id ( network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , new <identifiersep> ntwk <identifiersep> off . get <identifiersep> tags ( ) , new <identifiersep> ntwk <identifiersep> off . get <identifiersep> traffic <identifiersep> type ( ) ) ; \n \t2 final long old <identifiersep> network <identifiersep> offering <identifiersep> id = network . get <identifiersep> network <identifiersep> offering <identifiersep> id ( ) ; \n \t2 network <identifiersep> offering old <identifiersep> ntwk <identifiersep> off = <identifier> <identifiersep> network <identifiersep> offering <identifiersep> dao . find <identifiersep> by <identifiersep> id <identifiersep> <identifier> <identifiersep> removed ( old <identifiersep> network <identifiersep> offering <identifiersep> id ) ; \n \t2 if ( ! resume && network . get <identifiersep> related ( ) != network . get <identifiersep> id ( ) ) { \n <ect>
\t1 verify <identifiersep> type ( <string_literal> , <string_literal> , <string_literal> ) ; } \n @ test \n public void test <identifiersep> big <identifiersep> <identifier> ( ) { \n \t1 if ( ! supports <identifiersep> big <identifiersep> int ( ) ) { \n <ect>
\t3 if ( this . rotation <identifiersep> policy == null ) { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; \n \t3 } else if ( this . rotation <identifiersep> policy instanceof file <identifiersep> size <identifiersep> rotation <identifiersep> policy ) { \n \t4 long rotation <identifiersep> bytes = ( ( file <identifiersep> size <identifiersep> rotation <identifiersep> policy ) rotation <identifiersep> policy ) . get <identifiersep> max <identifiersep> bytes ( ) ; \n <ect>
\t2 for ( <identifier> <identifiersep> model <identifier> <identifiersep> model : <identifier> <identifiersep> models . values ( ) ) { \n \t3 try { \n \t4 <identifier> <identifiersep> model . on <identifiersep> after <identifiersep> save ( this ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 return file <identifiersep> visit <identifiersep> result . continue ; } \n \t1 @ override \n \t1 public file <identifiersep> visit <identifiersep> result visit <identifiersep> file <identifiersep> failed ( path file , io <identifiersep> exception exc ) throws io <identifiersep> exception { \n \t1 if ( exc instanceof file <identifiersep> system <identifiersep> loop <identifiersep> exception ) { \n <ect>
\t6 log . debug ( <string_literal> + entry ) ; } \n \t4 catch ( grid <identifiersep> cache <identifiersep> entry <identifiersep> removed <identifiersep> exception ignored ) { \n <ect>
\t4 answer = answer . replace <identifiersep> first ( name , host ) ; } \n \t3 <comment> \n \t3 if ( ! answer . starts <identifiersep> with ( scheme ) ) { \n \t4 answer = scheme + <string_literal> + answer ; } } \n <ect>
\t7 config <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 throw new loader <identifiersep> exception ( ioe ) ; } \n \t2 if ( ! canonical <identifiersep> <identifier> <identifiersep> dir . exists ( ) ) \n \t2 { \n <ect>
\t2 for ( <identifier> <identifiersep> effect effect : <identifier> <identifiersep> <identifier> ) { \n \t3 log . error ( uuid + <string_literal> + effect . to <identifiersep> string ( ) + <string_literal> + effect . get <identifiersep> id ( ) ) ; \n \t3 for ( ability ability : <identifier> <identifiersep> <identifier> . get <identifiersep> ability ( effect . get <identifiersep> id ( ) ) ) { \n \t4 if ( ! ( ability instanceof static <identifiersep> ability ) || ability . is <identifiersep> in <identifiersep> <identifier> <identifiersep> zone ( game , permanent , null ) ) { \n <ect>
\t3 if ( client instanceof saml2client ) { \n \t4 logger . debug ( <string_literal> ) ; \n \t4 client <identifiersep> id = web <identifiersep> context . get <identifiersep> request <identifiersep> parameter ( <string_literal> ) ; } \n \t3 if ( client instanceof o <identifiersep> <identifier> || client instanceof oidc <identifiersep> client ) { \n <ect>
\t2 ( <identifier> , <identifier> , <identifier> ) = self . run <identifiersep> os <identifiersep> command ( command ) \n \t2 if <identifier> != 0 : \n \t3 logger . warn ( <string_literal> + user + <string_literal> + <identifier> ) \n \t2 else : \n <ect>
\t1 template <identifiersep> util . logger . debug ( <string_literal> + parts <identifiersep> list . size ( ) ) ; <comment> \n \t1 if ( pentaho <identifiersep> system . debug ) { \n \t1 template <identifiersep> util . logger . debug ( <string_literal> + columns <identifiersep> list . size ( ) ) ; <comment> \n \t1 if ( pentaho <identifiersep> system . debug ) { \n <ect>
\t3 try { \n \t4 return m <identifiersep> cms . get <identifiersep> lock ( m <identifiersep> cms . read <identifiersep> resource ( m <identifiersep> page <identifiersep> context <identifiersep> id ) ) . is <identifiersep> <identifier> <identifiersep> by ( \n \t5 m <identifiersep> cms . get <identifiersep> request <identifiersep> context ( ) . get <identifiersep> current <identifiersep> user ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 add <identifiersep> encoded <identifiersep> parameter ( data , message <identifiersep> key <identifiersep> app , app <identifiersep> name ) ; \n \t3 if ( ! string <identifiersep> utils . is <identifiersep> empty ( description ) ) { \n \t4 add <identifiersep> encoded <identifiersep> parameter ( data , message <identifiersep> key <identifiersep> desc , description ) ; \n \t3 } else { \n <ect>
\t4 string module <identifiersep> name = string . format ( <string_literal> , receiving <identifiersep> module . get <identifiersep> id ( ) , receiving <identifiersep> module . get <identifiersep> version ( ) ) ; \n \t4 path final <identifiersep> path = path <identifiersep> manager . get <identifiersep> instance ( ) . get <identifiersep> home <identifiersep> mod <identifiersep> path ( ) . normalize ( ) . resolve ( module <identifiersep> name ) ; \n \t4 if ( final <identifiersep> path . normalize ( ) . starts <identifiersep> with ( path <identifiersep> manager . get <identifiersep> instance ( ) . get <identifiersep> home <identifiersep> mod <identifiersep> path ( ) ) ) { \n \t5 if ( files . exists ( final <identifiersep> path ) ) { \n <ect>
\t1 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 read <identifiersep> from <identifiersep> url ( <identifier> <identifiersep> url , true ) ; \n \t1 long end = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 double duration = ( end - start ) / <number_literal> . 0 ; \n <ect>
\t1 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } } \n private synchronized set < config <identifiersep> group <identifiersep> response > create <identifiersep> config <identifiersep> groups \n \t1 ( set < config <identifiersep> group <identifiersep> request > requests ) throws ambari <identifiersep> exception , authorization <identifiersep> exception { \n \t1 if ( requests . is <identifiersep> empty ( ) ) { \n <ect>
\t1 private static environment parse <identifiersep> environment ( string key , string yaml ) { \n \t2 try { \n \t3 return kubernetes <identifiersep> helper . load <identifiersep> yaml ( yaml , environment . class ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 appender . append ( new <identifiersep> log <identifiersep> event ) ; \n \t3 } else { \n \t4 logger . warn ( <string_literal> , ref <identifiersep> name ) ; } \n \t2 } else { \n <ect>
\t2 watcher . reset ( ) ; \n \t2 qu . start ( <number_literal> ) ; \n \t2 assert . assert <identifiersep> true ( <string_literal> , client <identifiersep> base . wait <identifiersep> for <identifiersep> server <identifiersep> up ( \n \t4 <string_literal> + qu . get <identifiersep> peer ( <number_literal> ) . client <identifiersep> port , connection <identifiersep> timeout ) ) ; \n <ect>
\t3 rule . get <identifiersep> group ( ) . get <identifiersep> group <identifiersep> id ( ) + <string_literal> + rule . get <identifiersep> group ( ) . get <identifiersep> display <identifiersep> name ( ) ) ; \n \t2 rule . set <identifiersep> protocol <identifiersep> number ( rule . get <identifiersep> protocol ( ) . get <identifiersep> number ( ) ) ; } \n \t2 tx . commit ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t2 final string index = <string_literal> ; \n \t2 <comment> \n \t2 set <identifiersep> state ( cluster <identifiersep> service , new cluster <identifiersep> state <identifiersep> changes ( x <identifiersep> content <identifiersep> registry ( ) , thread <identifiersep> pool ) . close <identifiersep> indices ( state ( index , true , \n \t3 shard <identifiersep> routing <identifiersep> state . unassigned ) , new close <identifiersep> index <identifiersep> request ( index ) ) ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public obs get <identifiersep> obs ( obs obs , string view ) { \n \t2 file file = get <identifiersep> complex <identifiersep> data <identifiersep> file ( obs ) ; \n <ect>
\t2 if ( this . min <identifiersep> connections <identifiersep> per <identifiersep> partition > this . max <identifiersep> connections <identifiersep> per <identifiersep> partition ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 this . min <identifiersep> connections <identifiersep> per <identifiersep> partition = this . max <identifiersep> connections <identifiersep> per <identifiersep> partition ; } \n \t2 if ( this . acquire <identifiersep> increment < = 0 ) { \n <ect>
\t5 connector <identifiersep> thread . send <identifiersep> io ( io <identifiersep> nr , new <identifiersep> state <identifiersep> boolean ) ; } \n \t3 } else { \n \t4 logger . warn ( <string_literal> + cmd . name ( ) + <string_literal> + command ) ; } \n \t2 } else { \n <ect>
<comment> \n public bytes <identifiersep> input to <identifiersep> bytes ( ) throws io <identifiersep> exception { \n \t1 int packed <identifiersep> byte <identifiersep> length = packed <identifiersep> position + bytes <identifiersep> utils . padded <identifiersep> byte <identifiersep> count <identifiersep> from <identifiersep> bits ( input <identifiersep> size * bit <identifiersep> width ) ; \n <ect>
\t2 if ( authorized <identifiersep> client <identifiersep> id . equals ( client <identifiersep> id ) ) { \n \t3 username <identifiersep> password <identifiersep> authentication <identifiersep> token authentication = new username <identifiersep> password <identifiersep> authentication <identifiersep> token ( \n \t5 authorized <identifiersep> client <identifiersep> id , <string_literal> , client <identifiersep> <identifier> ) ; \n \t3 security <identifiersep> context <identifiersep> holder . get <identifiersep> context ( ) . set <identifiersep> authentication ( authentication ) ; \n <ect>
\t3 synchronized ( membership ) { \n \t4 if ( ! check <identifiersep> all ) perform <identifiersep> basic <identifiersep> check ( ) ; \n \t4 else perform <identifiersep> forced <identifiersep> check ( ) ; } \n \t2 } catch ( exception x ) { \n <ect>
\t1 if ( ! session <identifiersep> conf . get <identifiersep> bool <identifiersep> var ( conf <identifiersep> vars . hive <identifiersep> server2 <identifiersep> enable <identifiersep> <identifier> ) && \n \t2 session <identifiersep> conf . get <identifiersep> bool <identifiersep> var ( conf <identifiersep> vars . hive <identifiersep> server2 <identifiersep> map <identifiersep> <identifier> <identifiersep> scheduler <identifiersep> queue ) ) { \n \t2 <identifier> <identifiersep> loader . get <identifiersep> hadoop <identifiersep> <identifier> ( ) . refresh <identifiersep> default <identifiersep> queue ( session <identifiersep> conf , username ) ; } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( this . token <identifiersep> repository . exists ( uid , otp ) ) { \n \t3 throw new account <identifiersep> expired <identifiersep> exception ( uid + <string_literal> + otp + <string_literal> ) ; } \n \t2 boolean is <identifiersep> code <identifiersep> valid = this . google <identifiersep> authenticator <identifiersep> instance . authorize ( acct . get <identifiersep> secret <identifiersep> key ( ) , otp ) ; \n \t2 if ( ! is <identifiersep> code <identifiersep> valid && acct . get <identifiersep> scratch <identifiersep> codes ( ) . contains ( otp ) ) { \n <ect>
\t3 } catch ( incorrect <identifiersep> usage <identifiersep> exception ex ) { \n \t4 usage ( ex ) ; \n \t4 return ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t4 return vm \n \t2 except : \n \t4 self . fail ( <identifier> to create vm in a network = <identifier> % network . name ) \n \t1 def create <identifiersep> static <identifiersep> nat <identifiersep> rule <identifiersep> for <identifiersep> vm ( self , vm , public <identifiersep> ip , network , services = none ) : \n <ect>
\t4 if ( any <identifiersep> timed <identifiersep> out ) { \n \t5 chk <identifiersep> insert <identifiersep> sender . this . set <identifiersep> transfer <identifiersep> timed <identifiersep> out ( ) ; } \n \t4 received <identifiersep> notice ( ! any <identifiersep> timed <identifiersep> out , false , false ) ; \n \t3 } else { \n <ect>
\t3 <comment> \n \t3 logger . warn ( e , <string_literal> , ssh . to <identifiersep> string ( ) , e . get <identifiersep> message ( ) ) ; \n \t3 else \n <ect>
\t2 if ( ( in <identifiersep> action <identifiersep> context . get <identifiersep> params ( ) instanceof boolean ) && ( boolean ) in <identifiersep> action <identifiersep> context . get <identifiersep> params ( ) ) \n \t2 { \n \t3 log . debug ( <string_literal> ) ; \n \t3 list < person <identifiersep> model <identifiersep> view > <identifier> <identifiersep> list = system <identifiersep> <identifier> <identifiersep> mapper . execute ( null ) ; \n <ect>
\t9 comp . get <identifiersep> document ( ) . get <identifiersep> length ( ) ) , index , \n \t8 false ) ) ; } } \n \t5 catch ( bad <identifiersep> location <identifiersep> exception e ) \n \t5 { \n <ect>
\t2 else : \n \t3 self . send = self . send <identifiersep> pipe \n \t3 self . read = self . read <identifiersep> pipe \n \t1 def close ( self ) : \n <ect>
\t5 try { \n \t6 did <identifiersep> handle <identifiersep> exception = ( ( ( erx <identifiersep> database <identifiersep> context <identifiersep> delegate ) delegate ) . database <identifiersep> context <identifiersep> should <identifiersep> handle <identifiersep> database <identifiersep> exception ( database <identifiersep> context , e ) == false ) ; \n \t5 } catch ( throwable t ) { \n \t6 <comment> \n <ect>
\t4 else \n \t5 <identifier> . add ( update ) ; \n \t4 continue ; } \n \t3 string name <identifiersep> obj <identifiersep> column <identifiersep> name = c <identifiersep> name <identifiersep> obj . get <identifiersep> string ( <string_literal> ) ; \n <ect>
\t1 <comment> \n \t1 @ suppress <identifiersep> warnings ( { <string_literal> } ) \n \t1 @ override public grid <identifiersep> future < grid <identifiersep> cache <identifiersep> tx > commit <identifiersep> async ( ) { \n <ect>
\t2 assert <identifiersep> response <identifiersep> count ( <number_literal> , response ) ; \n \t2 http <identifiersep> client . stop ( ) ; } \n \t1 @ test ( timeout = <number_literal> * <number_literal> ) \n \t1 public void test <identifiersep> stomp <identifiersep> messages <identifiersep> are <identifiersep> received <identifiersep> by <identifiersep> ajax <identifiersep> client ( ) throws exception { \n <ect>
\t5 <comment> \n \t5 if ( wicket . log . enabled ( ) ) { \n \t6 var response <identifiersep> as <identifiersep> text = <identifier> <identifiersep> <identifier> . response <identifiersep> text ; \n \t6 wicket . log . info ( <string_literal> + response <identifiersep> as <identifiersep> text . length + <string_literal> ) ; \n <ect>
\t5 callback . cancelled ( ) ; } \n \t3 } ) ; \n \t2 } catch ( final resource <identifiersep> io <identifiersep> exception ex ) { \n <ect>
\t4 buffered <identifiersep> image <identifier> <identifiersep> image = <identifier> ( image , target <identifiersep> width , target <identifiersep> height ) ; \n \t4 image <identifiersep> io . write ( <identifier> <identifiersep> image , <string_literal> , queued <identifiersep> <identifier> . get <identifiersep> destination <identifiersep> file ( ) ) ; \n \t4 file <identifiersep> utils . delete <identifiersep> quietly ( queued <identifiersep> <identifier> . get <identifiersep> source <identifiersep> file ( ) ) ; \n \t3 } catch ( throwable e ) { \n <ect>
\t1 @ override \n \t1 protected map < string , object > get <identifiersep> principal <identifiersep> attributes ( final principal p ) { \n \t2 try { \n \t3 return this . cache . get ( p . get <identifiersep> id ( ) , s - > { \n <ect>
\t4 url url = urls . next <identifiersep> element ( ) ; \n \t4 properties properties = properties <identifiersep> loader <identifiersep> utils . load <identifiersep> properties ( new url <identifiersep> resource ( url ) ) ; \n \t4 result . add ( properties ) ; } \n <ect>
\t2 <identifier> <identifiersep> query <identifiersep> contact <identifiersep> status ( full <identifiersep> user <identifiersep> info . <identifier> <identifiersep> <identifier> , \n \t8 <identifier> <identifiersep> status <identifiersep> enum . <identifier> ) ; \n \t2 pause <identifiersep> between <identifiersep> state <identifiersep> changes ( ) ; \n \t2 <comment> \n <ect>
\t4 <identifier> <identifiersep> lb <identifiersep> dao . persist ( load <identifiersep> balancer ) ; \n \t4 load <identifiersep> balancer <identifiersep> cert <identifiersep> map <identifiersep> vo cert <identifiersep> map = <identifier> <identifiersep> lb <identifiersep> cert <identifiersep> map <identifiersep> dao . find <identifiersep> by <identifiersep> lb <identifiersep> rule <identifiersep> id ( lb <identifiersep> rule <identifiersep> id ) ; \n \t4 <identifier> <identifiersep> lb <identifiersep> cert <identifiersep> map <identifiersep> dao . remove ( cert <identifiersep> map . get <identifiersep> id ( ) ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + load <identifiersep> balancer . get <identifiersep> id ( ) + <string_literal> ) ; } \n <ect>
\t3 public void do <identifiersep> in <identifiersep> transaction <identifiersep> without <identifiersep> result ( final transaction <identifiersep> status status ) throws cloud <identifiersep> runtime <identifiersep> exception { \n \t4 vm <identifiersep> instance <identifiersep> vo vm = <identifier> <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> uuid ( vm <identifiersep> uuid ) ; \n \t4 try { \n \t5 if ( ! state <identifiersep> transit <identifiersep> to ( vm , virtual <identifiersep> machine . event . destroy <identifiersep> requested , vm . get <identifiersep> host <identifiersep> id ( ) ) ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t2 } else { \n \t3 jetty <identifiersep> web <identifiersep> xml <identifiersep> loc = this . jetty <identifiersep> web <identifiersep> xml <identifiersep> location ; } \n \t2 url jetty <identifiersep> web <identifiersep> xml = bundle <identifiersep> context . get <identifiersep> bundle ( ) . get <identifiersep> resource ( jetty <identifiersep> web <identifiersep> xml <identifiersep> loc ) ; \n \t2 if ( jetty <identifiersep> web <identifiersep> xml != null ) { \n <ect>
\t2 this . template <identifiersep> mode = this . context . get <identifiersep> template <identifiersep> mode ( ) ; <comment> \n \t2 if ( this . context instanceof i <identifiersep> engine <identifiersep> context ) { \n \t3 this . engine <identifiersep> context = ( i <identifiersep> engine <identifiersep> context ) this . context ; \n \t2 } else { \n <ect>
\t4 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + storage <identifiersep> url ) ; } \n \t3 mount <identifiersep> point = mount ( uri . get <identifiersep> host ( ) + <string_literal> + uri . get <identifiersep> path ( ) , <identifier> <identifiersep> mount <identifiersep> parent , nfs <identifiersep> version ) ; \n \t3 if ( mount <identifiersep> point == null ) { \n <ect>
\t5 meta <identifiersep> putter <identifiersep> target <identifiersep> filename = null ; \n \t5 try { \n \t6 meta <identifiersep> bytes = meta . write <identifiersep> to <identifiersep> byte <identifiersep> array ( ) ; \n \t5 } catch ( metadata <identifiersep> unresolved <identifiersep> exception e1 ) { \n <ect>
\t3 return false ; \t3 } \n \t2 try { \n \t3 return login ( ) ; \n \t2 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t2 <identifier> . commit ( ) ; \n \t2 return rec ; } } \n \t1 <identifier> . commit ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 final response response = operation . execute ( new modify <identifiersep> request ( current <identifiersep> dn , \n \t6 new attribute <identifiersep> modification ( attribute <identifiersep> modification <identifiersep> type . replace , new <identifier> <identifiersep> pwd <identifiersep> attribute ( new <identifiersep> password ) ) ) ) ; \n \t4 logger . debug ( <string_literal> , response . get <identifiersep> result ( ) , response . get <identifiersep> message ( ) ) ; \n \t4 return response . get <identifiersep> result <identifiersep> code ( ) == result <identifiersep> code . success ; } \n <ect>
\t2 { \n \t3 logger . error ( <string_literal> , exc ) ; } \n \t2 catch ( sax <identifiersep> exception exc ) \n \t2 { \n <ect>
\t2 { \n \t3 socket . close ( ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 if ( null != <identifier> ) { \n \t2 try { \n \t2 <identifier> . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
# <identifier> that patch directory exists , if not , <identifier> it . \n def validate <identifiersep> patch <identifiersep> dir ( patch <identifiersep> dir ) : \n \t1 # create patch <identifiersep> dir if it doesn't exist . \n \t1 if not os . path . exists ( patch <identifiersep> dir ) : \n <ect>
\t1 public future < boolean > get <identifiersep> future ( ) { \n \t2 try { \n \t3 this . future <identifiersep> available <identifiersep> latch . await ( latch <identifiersep> timeout <identifiersep> ms , time <identifiersep> unit . milliseconds ) ; \n \t2 } catch ( interrupted <identifiersep> exception ie ) { \n <ect>
\t2 string ret = master <identifiersep> local <identifiersep> dir ( conf ) + file <identifiersep> <identifier> + <string_literal> ; \n \t2 try { \n \t3 file <identifiersep> utils . force <identifiersep> mkdir ( new file ( ret ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n <comment> \n <comment> \n \t2 read <identifiersep> assert <identifiersep> equals ( store , <string_literal> , <number_literal> ) ; \n <ect>
\t6 <identifier> . add ( <identifier> <identifiersep> srv ) ; \n \t6 it . remove ( ) ; } \n \t5 catch ( grid <identifiersep> exception e ) { \n <ect>
\t2 if ( format instanceof decimal <identifiersep> format ) { \n \t3 ( ( decimal <identifiersep> format ) format ) . set <identifiersep> parse <identifiersep> big <identifiersep> decimal ( true ) ; \n \t3 char separator = ( ( decimal <identifiersep> format ) format ) . get <identifiersep> decimal <identifiersep> format <identifiersep> <identifier> ( ) . get <identifiersep> grouping <identifiersep> separator ( ) ; \n \t3 string <identifiersep> value = normalize ( string <identifiersep> value , separator ) ; } \n <ect>
\t5 logger . info ( <string_literal> , <identifier> ) ; \n \t4 } else { \n \t5 logger . error ( <string_literal> ) ; } \n \t3 } else { \n <ect>
\t2 <identifier> . add ( entry . get <identifiersep> key ( ) ) ; } } \n \t1 <comment> \n \t1 for ( hive <identifiersep> end <identifiersep> point ep : <identifier> ) { \n \t1 sink <identifiersep> counter . increment <identifiersep> connection <identifiersep> closed <identifiersep> count ( ) ; \n <ect>
\t6 if ( name . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) \n \t7 i -- ; \n \t6 break ; } } \n \t4 if ( ! found ) { \n <ect>
<comment> \n \t1 protected string produce <identifiersep> ticket <identifiersep> identifier ( ) { \n \t2 string <identifier> <identifiersep> id = this . ticket <identifiersep> granting <identifiersep> ticket <identifiersep> unique <identifiersep> ticket <identifiersep> id <identifiersep> generator . get <identifiersep> new <identifiersep> ticket <identifiersep> id ( proxy <identifiersep> granting <identifiersep> ticket . proxy <identifiersep> granting <identifiersep> ticket <identifiersep> prefix ) ; \n \t2 if ( this . cipher <identifiersep> executor != null ) { \n <ect>
\t2 assert <identifiersep> true ( <string_literal> + msg <identifiersep> count + <string_literal> , \n \t3 wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t4 @ override \n \t4 public boolean is <identifiersep> satisified ( ) throws exception { \n <ect>
\t3 catch ( unknown <identifiersep> host <identifiersep> exception e ) \n \t3 { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t2 for ( entry < string , string > entry : map . entry <identifiersep> set ( ) ) { \n \t2 string sub <identifiersep> prop = property <identifiersep> helper . get <identifiersep> property <identifiersep> id ( alert <identifiersep> def <identifiersep> source , entry . get <identifiersep> key ( ) ) ; \n \t2 resource . set <identifiersep> property ( sub <identifiersep> prop , entry . get <identifiersep> value ( ) ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t1 log . info ( <string_literal> , min <identifiersep> <identifier> <identifiersep> value ) ; \n \t1 int reduce <identifiersep> tasks = 1 ; \n \t1 if ( cmd <identifiersep> line . has <identifiersep> option ( num <identifiersep> reduce <identifiersep> tasks <identifiersep> opt ) ) { \n \t2 reduce <identifiersep> tasks = integer . parse <identifiersep> int ( cmd <identifiersep> line . get <identifiersep> value ( num <identifiersep> reduce <identifiersep> tasks <identifiersep> opt ) . to <identifiersep> string ( ) ) ; } \n <ect>
\t2 try { \n \t3 <identifier> <identifiersep> tmplt <identifiersep> dao . add <identifiersep> template <identifiersep> to <identifiersep> zone ( template , dst <identifiersep> zone <identifiersep> id ) ; \n \t3 return true ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 slot <identifiersep> triples [ triple <identifiersep> index + <number_literal> ] = value <identifiersep> store . add <identifiersep> first ( value <identifiersep> bytes , 0 , value <identifiersep> length ) ; \n \t1 <comment> \n \t1 } else { \n \t1 <comment> \n <ect>
\t1 return <identifier> <identifiersep> data <identifiersep> points ; } \n private list < data <identifiersep> point > populate <identifiersep> data <identifiersep> points ( data <identifiersep> point data <identifiersep> point ) { \n \t1 list < data <identifiersep> point > data <identifiersep> points = new array <identifiersep> list < > ( ) ; \n \t1 if ( data <identifiersep> point . value == null ) { \n <ect>
\t2 self . logger . debug ( <string_literal> % url ) \n \t2 res = self . send <identifiersep> cmd <identifiersep> to <identifiersep> <identifier> ( url , method = <string_literal> ) \n \t2 # remove device group \n \t2 url = <string_literal> + self . <identifier> + <string_literal> + device <identifiersep> <identifier> <identifiersep> id \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> index <identifiersep> query ( ) { \n \t2 operation <identifiersep> result < rows < string , string > > result ; \n \t2 try { \n <ect>
\t1 repositories <identifiersep> meta repositories <identifiersep> meta = new repositories <identifiersep> meta ( ) ; \n \t1 try { \n \t1 repositories <identifiersep> meta . read <identifiersep> data ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 if ( do <identifiersep> rejected <identifiersep> attributes <identifiersep> <identifier> <identifiersep> principal <identifiersep> access ( principal <identifiersep> attributes ) ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( ! do <identifiersep> required <identifiersep> attributes <identifiersep> allow <identifiersep> principal <identifiersep> access ( principal <identifiersep> attributes , this . required <identifiersep> attributes ) ) { \n <ect>
\t9 buf . append ( ' , ' ) ; \n \t8 buf . append ( test <identifiersep> addr ) ; \n \t7 } else { \n \t8 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t5 . synchronized <identifiersep> pool ( new generic <identifiersep> <identifier> <identifiersep> object <identifiersep> pool ( \n \t6 dispatcher <identifiersep> factory , pool <identifiersep> config ) ) ; \n \t4 <identifier> <identifiersep> consumers ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . primary <identifiersep> shard ( ) . state ( ) , equal <identifiersep> to ( started ) ) ; } \n \t2 for ( int i = 0 ; i < cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shards ( ) . size ( ) ; i ++ ) { \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . shards ( ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . primary <identifiersep> shard ( ) . state ( ) , equal <identifiersep> to ( unassigned ) ) ; } \n <ect>
\t6 s <identifiersep> logger . info ( <string_literal> , pe ) ; \n \t6 return false ; } } \n \t4 date now = new date ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t4 if ( expires <identifiersep> ts . before ( now ) ) { \n <ect>
\t8 <string_literal> + \n \t8 <string_literal> , \n \t8 user , user , user \n \t8 ) ; \n <ect>
\t3 if ( receiver != null ) throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; \n \t3 try { \n \t4 if ( sender == null ) socket . join <identifiersep> group ( address ) ; \n \t3 } catch ( io <identifiersep> exception <identifier> ) { \n <ect>
\t3 } finally { \n \t4 <comment> \n \t4 stop <identifiersep> server ( server <identifiersep> list ) ; } \n \t2 } catch ( assertion <identifiersep> error ae ) { \n <ect>
\t4 file f = new file ( include <identifiersep> path ) ; \n \t4 if ( f . exists ( ) ) { \n \t5 parse <identifiersep> <identifier> ( include <identifiersep> path ) ; \n \t4 } else { \n <ect>
\t4 <identifier> <identifiersep> external <identifiersep> lb <identifiersep> usage <identifiersep> mgr . update <identifiersep> external <identifiersep> load <identifiersep> balancer <identifiersep> network <identifiersep> usage <identifiersep> stats ( load <identifiersep> balancer <identifiersep> id ) ; } } \n \t2 if ( apply ) { \n \t3 try { \n \t4 if ( ! apply <identifiersep> load <identifiersep> balancer <identifiersep> config ( load <identifiersep> balancer <identifiersep> id ) ) { \n <ect>
\t3 try { \n \t4 try ( searcher searcher = acquire <identifiersep> searcher ( <string_literal> , searcher <identifiersep> scope . external ) ) { \n \t5 return searcher . get <identifiersep> directory <identifiersep> reader ( ) . is <identifiersep> current ( ) == false ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 public void subscription <identifiersep> moved ( subscription <identifiersep> moved <identifiersep> event evt ) \n \t2 { \n \t3 synchronized ( this ) \n \t3 { \n <ect>
@ override \n public lazy <identifiersep> object <identifiersep> base create <identifiersep> row <identifiersep> id ( object <identifiersep> inspector inspector ) throws ser <identifiersep> de <identifiersep> exception { \n \t1 lazy <identifiersep> object <identifiersep> base lazy <identifiersep> obj = lazy <identifiersep> factory . create <identifiersep> lazy <identifiersep> object ( inspector , \n \t2 column <identifiersep> encoding . binary == row <identifiersep> id <identifiersep> mapping . get <identifiersep> encoding ( ) ) ; \n <ect>
\t3 boolean files <identifiersep> to <identifiersep> <identifier> = false ; \n \t3 if ( ! conf . get <identifiersep> boolean ( pig <identifiersep> schema <identifiersep> tuple <identifiersep> enabled , schema <identifiersep> tuple <identifiersep> on <identifiersep> by <identifiersep> default ) ) { \n \t4 log . info ( <string_literal> + pig <identifiersep> schema <identifiersep> tuple <identifiersep> enabled + <string_literal> ) ; \n \t4 return false ; } \n <ect>
\t5 s += actual . contains ( p ) ? <string_literal> : <string_literal> ; \n \t5 bc <identifiersep> log . logger . warn ( log <identifiersep> start + <string_literal> + p + <string_literal> + s + <string_literal> ) ; } } \n \t3 for ( block <identifiersep> pos p : positions ) { \n \t4 if ( <identifier> <identifiersep> pos . contains ( p ) ) { \n <ect>
\t2 } catch ( json <identifiersep> mapping <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; \n \t3 update <identifiersep> request ( streaming <identifiersep> request , false , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 for ( message <identifiersep> listener < t > message <identifiersep> listener : message <identifiersep> listeners ) { \n \t4 message <identifiersep> listener . on <identifiersep> message ( message ) ; } \n \t3 get <identifiersep> channel ( ) . basic <identifiersep> ack ( envelope . get <identifiersep> delivery <identifiersep> tag ( ) , false ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( should <identifiersep> close ) { \n \t3 try { \n \t4 session . destroy <identifiersep> session ( ) ; \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 public stream < output > log <identifiersep> around ( ) \n \t2 { \n \t3 log . debug ( <string_literal> ) ; \n \t3 log . info ( <string_literal> ) ; \n <ect>
\t3 component <identifiersep> request <identifiersep> failure <identifiersep> counts . put ( component , new atomic <identifiersep> integer ( ) ) ; } \n \t3 <comment> \n \t3 component <identifiersep> request <identifiersep> failure <identifiersep> counts . get ( component ) . increment <identifiersep> and <identifiersep> get ( ) ; } \n \t2 } else { \n <ect>
\t4 <comment> \n \t4 importer . set <identifiersep> is <identifiersep> deployment ( true ) ; \n \t4 final boolean parse <identifiersep> ok = importer . parse ( false ) ; \n \t4 if ( parse <identifiersep> ok ) { \n <ect>
\t2 boolean done = false ; \n \t2 if ( ( pin <identifiersep> code == null ) || ( pin <identifiersep> code . length ( ) != <number_literal> ) ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t2 } else if ( ( zone < 1 ) || ( zone > power <identifiersep> max <identifiersep> panel <identifiersep> settings . get <identifiersep> the <identifiersep> panel <identifiersep> settings ( ) . get <identifiersep> nb <identifiersep> zones ( ) ) ) { \n <ect>
\t2 return new <identifier> <identifiersep> and <identifiersep> class <identifiersep> loader ( new <identifier> ( configuration <identifiersep> builder ) , jar <identifiersep> class <identifiersep> loader ) ; } \n \t1 private class < ? > read <identifiersep> plugin <identifiersep> configuration <identifiersep> classes ( file plugin <identifiersep> file , <identifier> jar <identifiersep> file <identifiersep> scanner ) { \n \t2 set < class < ? > > plugin <identifiersep> classes = jar <identifiersep> file <identifiersep> scanner . get <identifiersep> types <identifiersep> annotated <identifiersep> with ( plugin <identifiersep> configuration . class ) ; \n \t2 if ( plugin <identifiersep> classes . is <identifiersep> empty ( ) ) { \n <ect>
\t2 connection conn = get <identifiersep> connection ( ) ; \n \t3 s <identifiersep> logger . trace ( <string_literal> + <identifier> <identifiersep> host . ip ) ; } \n \t2 if ( ! <identifier> <identifiersep> can <identifiersep> bridge <identifiersep> firewall ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void sub <identifiersep> append ( logging <identifiersep> event event ) { \n \t2 if ( editing <identifiersep> context ( ) . has <identifiersep> changes ( ) ) { \n <ect>
\t3 public void on <identifiersep> failure ( throwable t ) { \n \t4 <identifier> . propagate ( t ) ; } \n \t2 } ) ; } \n \t1 private synchronized void delete <identifiersep> channel <identifiersep> from <identifiersep> wallet ( ) { \n <ect>
\t1 if ( ! current . contains ( m . old <identifiersep> server ) ) { \n \t2 log . warn ( <string_literal> , m ) ; \n \t2 continue ; } \n \t1 if ( ! current . contains ( m . new <identifiersep> server ) ) { \n <ect>
\t2 } finally { \n \t3 <identifier> . close ( ) ; } \n \t2 final long delta = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n \t2 if ( delta > 1000l ) { \n <ect>
\t2 notification . is <identifiersep> html <identifiersep> content <identifiersep> allowed = true \n \t2 notification . delay <identifiersep> <identifier> = <number_literal> \n \t2 when { \n \t3 page . get <identifiersep> current ( ) != null - > notification . show ( page . get <identifiersep> current ( ) ) \n <ect>
\t2 try { \n \t3 cmds = <identifier> <identifiersep> gson . from <identifiersep> json ( pdu . get <identifiersep> json <identifiersep> package ( ) , command [ ] . class ) ; \n \t2 } catch ( throwable e ) { \n \t3 assert ( false ) ; \n <ect>
\t3 logger . error ( <string_literal> ) ; \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t2 } finally { \n \t3 writer . close ( ) ; } \n <ect>
\t2 return get <identifiersep> t ( min , min <identifiersep> expression , type ) ; } \n \t1 public t get <identifiersep> max ( ) { \n \t2 return get <identifiersep> t ( max , max <identifiersep> expression , type ) ; } \n \t1 public void set <identifiersep> min <identifiersep> expression ( string min <identifiersep> expression ) { \n <ect>
\t2 if ( parameters . get <identifiersep> realm ( ) == null || ! parameters . get <identifiersep> realm ( ) . equals <identifiersep> ignore <identifiersep> case ( this . handler <identifiersep> realm ) ) { \n \t3 logger . warn ( <string_literal> , parameters . get <identifiersep> realm ( ) , this . handler <identifiersep> realm ) ; \n \t3 return new processed <identifiersep> claim <identifiersep> collection ( ) ; } \n \t2 if ( parameters . get <identifiersep> principal ( ) == null ) { \n <ect>
\t1 add <identifiersep> cluster <identifiersep> enabled <identifiersep> cache <identifiersep> manager ( builder <identifiersep> used ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 future < cache < object , string > > future = fork ( ( ) - > cache ( <number_literal> , cache <identifiersep> name ) ) ; \n \t1 check <identifiersep> point . await <identifiersep> strict ( <string_literal> + <identifier> , <number_literal> , time <identifiersep> unit . seconds ) ; \n <ect>
\t4 { \n \t5 successful = false ; } \n \t4 if ( ! successful ) \n \t4 { \n <ect>
\t1 <comment> \n \t1 public void say ( string text , string voice <identifiersep> name , string output <identifiersep> device ) { \n <ect>
\t4 return null ; } \n \t3 <comment> \n \t3 boolean is <identifiersep> same <identifiersep> cidr = net <identifiersep> utils . same <identifiersep> subnet <identifiersep> cidr ( requested <identifiersep> ip . <identifier> ( ) , cidr [ 0 ] , integer . parse <identifiersep> int ( cidr [ 1 ] ) ) ; \n \t3 if ( ! is <identifiersep> same <identifiersep> cidr ) { \n <ect>
\t5 string offset <identifiersep> state = offset <identifiersep> repository . get <identifiersep> state ( serialize <identifiersep> offset <identifiersep> key ( partition ) ) ; \n \t5 if ( offset <identifiersep> state != null && ! offset <identifiersep> state . is <identifiersep> empty ( ) ) { \n \t6 <comment> \n \t6 long offset = deserialize <identifiersep> offset <identifiersep> value ( offset <identifiersep> state ) + 1 ; \n <ect>
\t1 public <identifier> <identifiersep> resource add <identifiersep> links ( <identifier> <identifiersep> resource <identifier> <identifiersep> resource ) { \n \t2 try { \n \t3 add <identifiersep> links ( <identifier> <identifiersep> resource , null ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 string topology <identifiersep> id = cluster . get <identifiersep> topology <identifiersep> id ( storm <identifiersep> cluster <identifiersep> state , topology <identifiersep> name ) ; \n \t3 if ( topology <identifiersep> id != null ) { \n \t4 return topology <identifiersep> id ; } \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t2 logger . debug ( <string_literal> , s , matches <identifiersep> filter ) ; \n \t2 return matches <identifiersep> filter ; } \n \t1 protected boolean is <identifiersep> filter <identifiersep> enabled ( ) { \n \t2 boolean filter <identifiersep> enabled = <identifier> <identifiersep> property <identifiersep> factory . get <identifiersep> boolean <identifiersep> property ( <string_literal> , false ) . get ( ) ; \n <ect>
\t4 try { \n \t5 to <identifiersep> port = integer . parse <identifiersep> int ( s ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 assert <identifiersep> equals ( 1 , cache . get <identifiersep> cache <identifiersep> stats ( ) . get <identifiersep> load <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> equals ( 1 , cache . get <identifiersep> cache <identifiersep> stats ( ) . get <identifiersep> load <identifiersep> success <identifiersep> count ( ) ) ; \n \t2 <comment> \n \t2 assert <identifiersep> equals ( 0 , cache . get <identifiersep> cache <identifiersep> stats ( ) . get <identifiersep> eviction <identifiersep> count ( ) ) ; \n <ect>
\t4 invocation . set <identifiersep> input ( <string_literal> , target ) ; \n \t3 } catch ( invalid <identifiersep> value <identifiersep> exception ex ) { \n \t4 logger . error ( <string_literal> , ex . get <identifiersep> message ( ) ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t6 long <identifier> = long . parse <identifiersep> long ( <identifier> ) ; \n \t6 long <identifier> = long . parse <identifiersep> long ( <identifier> ) ; \n \t6 return <identifier> . compare <identifiersep> to ( <identifier> ) ; \n \t5 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> null ( session <identifiersep> handler . read <identifiersep> outbound ( ) ) ; \n \t2 session <identifiersep> handler . finish ( ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> <identifier> <identifiersep> client <identifiersep> session <identifiersep> handler ( ) { \n <ect>
\t3 definition . get <identifiersep> type ( ) ) ; } \n \t1 <comment> \n \t1 return property <identifiersep> provider . class . cast ( clz . new <identifiersep> instance ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 pair < impl , optional < t > > protocol <identifiersep> with <identifiersep> implementation ) \n \t1 { \n \t2 if ( ! protocol <identifiersep> with <identifiersep> implementation . other ( ) . is <identifiersep> present ( ) ) \n \t2 { \n <ect>
\t8 <identifier> <identifiersep> log . info ( <string_literal> + <identifier> , e ) ; } } } \n \t4 if ( <identifier> == null ) { \n \t5 <identifier> <identifiersep> negative <identifiersep> cache . add ( h ) ; \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> info ( ) ) \n <ect>
\t2 try { \n \t3 close <identifiersep> client <identifiersep> socket ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 switch ( command ) { \n \t3 case thermostat <identifiersep> setpoint <identifiersep> set : \n \t3 case thermostat <identifiersep> setpoint <identifiersep> get : \n \t3 case thermostat <identifiersep> setpoint <identifiersep> supported <identifiersep> get : \n <ect>
\t3 return false ; } \n \t2 final string client <identifiersep> id = request . get <identifiersep> parameter ( o <identifiersep> auth20constants . client <identifiersep> id ) ; \n \t2 final o <identifiersep> auth <identifiersep> registered <identifiersep> service registered <identifiersep> service = get <identifiersep> registered <identifiersep> service <identifiersep> by <identifiersep> client <identifiersep> id ( client <identifiersep> id ) ; \n \t2 if ( ! validator . check <identifiersep> service <identifiersep> valid ( registered <identifiersep> service ) ) { \n <ect>
\t2 logger . debug ( <string_literal> + dst <identifiersep> active ) ; \n \t2 logger . debug ( <string_literal> + lan <identifiersep> gateway ) ; \n \t2 logger . debug ( <string_literal> + locked <identifiersep> for <identifiersep> manual <identifiersep> set <identifiersep> point ) ; \n \t2 logger . debug ( <string_literal> + rf <identifiersep> error ) ; \n <ect>
\t3 logger . error ( <string_literal> , \n \t3 protocol <identifiersep> constants . pretty <identifiersep> print <identifiersep> message <identifiersep> with <identifiersep> lines <identifiersep> <identifier> ( message ) ) ; } } \n \t1 private void do <identifiersep> handle <identifiersep> call <identifiersep> from <identifiersep> client ( final map < string , string > message , string uri , final object comm <identifiersep> channel ) { \n \t2 try { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 ctx . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 public void channel <identifiersep> read <identifiersep> complete ( channel <identifiersep> handler <identifiersep> context ctx ) throws exception { \n \t2 remote . flush ( ) ; } \n \t1 @ override \n \t1 public void exception <identifiersep> caught ( channel <identifiersep> handler <identifiersep> context ctx , throwable cause ) { \n <ect>
\t2 try ( input <identifiersep> stream stream = test <identifiersep> defaults . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( default <identifiersep> properties <identifiersep> path ) ) { \n \t3 if ( stream != null ) { \n \t4 result . load ( stream ) ; } } \n \t2 catch ( io <identifiersep> exception | runtime <identifiersep> exception e ) { \n <ect>
\t2 return get <identifiersep> name ( constant <identifiersep> pool , ( ( constant <identifiersep> <identifier> <identifiersep> info ) c ) . name <identifiersep> and <identifiersep> type <identifiersep> index ) ; \n \t1 case cp <identifiersep> info . constant <identifiersep> interface <identifiersep> <identifier> : \n \t2 return get <identifiersep> name ( constant <identifiersep> pool , \n \t6 ( ( constant <identifiersep> interface <identifiersep> <identifier> <identifiersep> info ) c ) . name <identifiersep> and <identifiersep> type <identifiersep> index ) ; } \n <ect>
\t1 public boolean ends <identifiersep> with ( path path ) { \n \t2 logger . info ( <string_literal> ) ; return false ; } \n \t1 @ override \n \t1 public boolean ends <identifiersep> with ( string string ) { \n <ect>
\t1 final byte <identifiersep> array <identifiersep> output <identifiersep> stream error <identifiersep> stream = new byte <identifiersep> array <identifiersep> output <identifiersep> stream ( ) ; \n \t1 final executor executor = new default <identifiersep> executor ( ) ; \n \t1 executor . set <identifiersep> stream <identifiersep> handler ( new pump <identifiersep> stream <identifiersep> handler ( out , error <identifiersep> stream , in ) ) ; \n \t1 final int result = executor . execute ( command <identifiersep> line . parse ( <identifier> <identifiersep> command ) ) ; \n <ect>
\t3 component <identifiersep> metadata < ? > component <identifiersep> metadata = component <identifiersep> library . resolve ( global <identifiersep> store . get <identifiersep> component <identifiersep> class ( index ) ) ; \n \t3 if ( component <identifiersep> metadata != null ) { \n \t4 component <identifiersep> id <identifiersep> table . put ( component <identifiersep> metadata . get <identifiersep> type ( ) , index ) ; \n \t3 } else { \n <ect>
\t3 if ( timed <identifiersep> out . get ( ) || stopped <identifiersep> on <identifiersep> exception ) { \n \t4 if ( timed <identifiersep> out . get ( ) ) { \n \t5 log . debug ( <string_literal> , timeout ) ; } \n \t4 if ( stopped <identifiersep> on <identifiersep> exception ) { \n <ect>
\t3 } else { \n \t4 shuffle <identifiersep> input = true ; \n \t4 shuffle <identifiersep> reader = ( key <identifiersep> values <identifiersep> reader ) r ; \n \t4 has <identifiersep> next = shuffle <identifiersep> reader . next ( ) ; } \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t3 network <identifiersep> vo nc = <identifier> <identifiersep> network <identifiersep> dao . find <identifiersep> by <identifiersep> id ( n . get <identifiersep> network <identifiersep> id ( ) ) ; \n \t3 if ( nc . get <identifiersep> traffic <identifiersep> type ( ) == traffic <identifiersep> type . control ) { \n \t4 router <identifiersep> control <identifiersep> ip <identifiersep> address = n . get <identifiersep> <identifier> ( ) ; } } \n \t2 if ( router <identifiersep> control <identifiersep> ip <identifiersep> address == null ) { \n <ect>
\t2 boolean result ; \n \t2 try { \n \t3 result = <identifier> <identifiersep> user <identifiersep> vm <identifiersep> manager . upgrade <identifiersep> virtual <identifiersep> machine ( vm <identifiersep> id , service <identifiersep> offering <identifiersep> id , details ) ; \n \t3 if ( ! result ) { \n <ect>
\t2 <identifier> <identifiersep> drop <identifiersep> on <identifiersep> overflow = boolean . parse <identifiersep> boolean ( config . get <identifiersep> property ( prop <identifiersep> drop ) ) ; \n \t2 string str = config . get <identifiersep> property ( prop <identifiersep> dup ) ; \n \t2 <identifier> <identifiersep> drop <identifiersep> <identifier> = str == null || boolean . parse <identifiersep> boolean ( str ) ; \n \t2 <comment> \n <ect>
\t1 function <identifiersep> info func <identifiersep> info ; \n \t1 try { \n \t1 func <identifiersep> info = function <identifiersep> registry . get <identifiersep> function <identifiersep> info ( udf <identifiersep> name ) ; \n \t1 } catch ( semantic <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> null <identifiersep> application ( ) { \n \t2 try { \n <ect>
\t3 q . bind <identifiersep> value ( <string_literal> , this . serializer . serialize ( <identifier> ) ) ; \n \t3 q . set <identifiersep> limit ( limit > 0 ? limit : <number_literal> ) . set <identifiersep> offset ( offset >= 0 ? offset : 0 ) ; \n \t3 result = this . stream . search <identifiersep> events ( q ) ; \n \t2 } catch ( query <identifiersep> exception ex ) { \n <ect>
\t1 try ( db <identifiersep> session db <identifiersep> session = db <identifiersep> client . open <identifiersep> session ( false ) ) { \n \t1 quality <identifiersep> gate <identifiersep> dto <identifier> = quality <identifiersep> gate <identifiersep> dao . select <identifiersep> by <identifiersep> name ( db <identifiersep> session , <identifier> <identifiersep> quality <identifiersep> gate <identifiersep> name ) ; \n \t1 <comment> \n \t1 if ( <identifier> == null ) { \n <ect>
\t5 proxy = <identifier> <identifiersep> console <identifiersep> proxy <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm . get <identifiersep> proxy <identifiersep> id ( ) ) ; \n \t5 if ( proxy != null ) { \n \t6 if ( ! is <identifiersep> in <identifiersep> assignable <identifiersep> state ( proxy ) ) { \n <ect>
\t3 sword <identifiersep> service . message ( \n \t4 <string_literal> ) ; \n \t3 <identifier> = new bitstream <identifiersep> entry <identifiersep> generator ( sword <identifiersep> service ) ; } \n \t2 if ( <identifier> == null ) { \n <ect>
\t1 try { \n \t1 return proxy <identifiersep> request ( request , com . eucalyptus . <identifier> . msgs . get <identifiersep> object <identifiersep> access <identifiersep> control <identifiersep> policy <identifiersep> type . class , \n \t2 com . eucalyptus . <identifier> . msgs . get <identifiersep> object <identifiersep> access <identifiersep> control <identifiersep> policy <identifiersep> response <identifiersep> type . class ) ; \n \t1 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n <ect>
\t6 call <identifiersep> context . get <identifiersep> calling <identifiersep> account <identifiersep> id ( ) , call <identifiersep> context . get <identifiersep> calling <identifiersep> user <identifiersep> id ( ) ) ; \n \t5 really <identifiersep> run ( ) ; \n \t5 async <identifiersep> job <identifiersep> execution <identifiersep> context . unregister ( ) ; \n \t4 } catch ( throwable e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void enable ( ) { \n <ect>
\t3 image <identifiersep> id = drive . get <identifiersep> name ( ) ; \n \t3 } catch ( null <identifiersep> pointer <identifiersep> exception e ) { \n \t3 logger . debug ( <string_literal> , boot <identifiersep> device . get <identifiersep> drive <identifiersep> uuid ( ) ) ; \n \t3 } catch ( unchecked <identifiersep> execution <identifiersep> exception e ) { \n <ect>
\t3 in . close ( ) ; } \n \t2 try { \n \t3 if ( l . signal ( sig <identifiersep> name ) ) { \n \t4 system . out . println ( <string_literal> + sig <identifiersep> name + <string_literal> ) ; \n <ect>
\t3 final configuration flink <identifiersep> config = create <identifiersep> configuration ( curr <identifiersep> dir , dynamic <identifiersep> properties , log ) ; \n \t3 file f = new file ( curr <identifiersep> dir , utils . keytab <identifiersep> file <identifiersep> name ) ; \n \t3 if ( remote <identifiersep> keytab <identifiersep> principal != null && f . exists ( ) ) { \n \t4 string keytab <identifiersep> path = f . get <identifiersep> absolute <identifiersep> path ( ) ; \n <ect>
\t2 } catch ( <identifier> <identifiersep> exception je ) { \n \t3 je . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t2 <comment> \n \t2 <comment> \n <ect>
\t2 try { \n \t3 column <identifiersep> family <identifiersep> handle handler = get <identifiersep> column <identifiersep> family <identifiersep> handle ( window ) ; \n \t3 rocks <identifiersep> db . put ( handler , serializer . serialize ( key ) , serializer . serialize ( value ) ) ; \n \t2 } catch ( rocks <identifiersep> db <identifiersep> exception e ) { \n <ect>
\t3 } catch ( exception e ) { \n \t4 log . warn ( <string_literal> \n \t6 + long . to <identifiersep> hex <identifiersep> string ( cnxn . get <identifiersep> session <identifiersep> id ( ) ) , e ) ; } } \n <ect>
\t3 pstmt . execute <identifiersep> update ( ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t2 } catch ( timeout <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> ) ; \n \t3 throw e ; \n \t2 } catch ( interrupted <identifiersep> exception e1 ) { \n <ect>
\t3 system <identifiersep> metric m = new system <identifiersep> metric ( this . get <identifiersep> name ( ) , this . get <identifiersep> default <identifiersep> tags <identifiersep> to <identifiersep> apply ( ) , this . get <identifiersep> description ( ) , null , this . get <identifiersep> default <identifiersep> ttl ( ) ) ; \n \t3 m . set <identifiersep> values ( values ) ; \n \t3 return lists . new <identifiersep> array <identifiersep> list ( m ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 try { \n \t1 ldap <identifiersep> configuration <identifiersep> service . check <identifiersep> connection ( ambari <identifiersep> ldap <identifiersep> configuration ) ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 sec <identifiersep> context = subject . do <identifiersep> as ( subject , new initialize <identifiersep> context <identifiersep> action ( selected <identifiersep> oid ) ) ; \n \t2 } catch ( privileged <identifiersep> action <identifiersep> exception e ) { \n \t3 throw new user <identifiersep> auth <identifiersep> exception ( <string_literal> , e ) ; } \n <ect>
\t2 this . spawn <identifiersep> data <identifiersep> store = spawn . get <identifiersep> spawn <identifiersep> data <identifiersep> store ( ) ; \n \t2 try { \n \t3 meshy <identifiersep> client = new meshy <identifiersep> client ( mesh <identifiersep> host , mesh <identifiersep> port ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( ! running . get ( ) ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t2 set < string > successfully <identifiersep> locked = new linked <identifiersep> hash <identifiersep> set < > ( ) ; \n \t2 for ( string name : names ) { \n <ect>
\t3 return false ; } \n \t2 final string client <identifiersep> id = context . get <identifiersep> request <identifiersep> parameter ( o <identifiersep> auth20constants . client <identifiersep> id ) ; \n \t2 final o <identifiersep> auth <identifiersep> registered <identifiersep> service registered <identifiersep> service = get <identifiersep> registered <identifiersep> service <identifiersep> by <identifiersep> client <identifiersep> id ( client <identifiersep> id ) ; \n \t2 if ( ! validator . check <identifiersep> service <identifiersep> valid ( registered <identifiersep> service ) ) { \n <ect>
\t4 } catch ( exception e ) { \n \t5 log . error ( <string_literal> , e ) ; \n \t5 throw create <identifiersep> sax <identifiersep> exception ( e ) ; \n \t4 } catch ( error e ) { \n <ect>
\t1 # ignore for now . \n \t1 trace <identifiersep> info = <identifier> . format <identifiersep> exc ( ) \n \t1 logger . info ( <string_literal> + trace <identifiersep> info \n \t4 + <string_literal> + out + <string_literal> + err ) \n <ect>
\t1 log . info ( <string_literal> , m <identifiersep> uri , stack <identifiersep> ids , \n \t2 time <identifiersep> unit . nanoseconds . to <identifiersep> millis ( system . nano <identifiersep> time ( ) - time ) ) ; } \n \t1 map < stack <identifiersep> module , repo <identifiersep> url <identifiersep> info <identifiersep> result > result = new hash <identifiersep> map < > ( ) ; \n \t1 if ( null == latest <identifiersep> url <identifiersep> map ) { \n <ect>
\t3 try { \n \t4 connector . connect ( ) ; \n \t3 } catch ( <identifier> <identifiersep> heat <identifiersep> pump <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> , e ) ; \n <ect>
\t1 object key = new magic <identifiersep> key ( cache1 , <identifier> ) ; \n \t1 cache1 . put ( key , <string_literal> ) ; \n \t1 final cluster <identifiersep> listener cluster <identifiersep> listener = listener ( ) ; \n \t1 <identifier> . add <identifiersep> listener ( cluster <identifiersep> listener ) ; \n <ect>
\t5 ret . put ( <string_literal> , pos ) ; \n \t4 } else { \n \t5 error ( ret , <string_literal> ) ; } \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 file <identifiersep> input <identifiersep> stream = new file <identifiersep> input <identifiersep> stream ( private <identifiersep> key <identifiersep> file ) ; \n \t3 signing <identifiersep> private <identifiersep> key . read <identifiersep> bytes ( file <identifiersep> input <identifiersep> stream ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 manage <identifiersep> object ( mr ) ; \n \t3 } catch ( jm <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 } catch ( exception e ) { \n \t4 system . err . println ( <string_literal> <identifier> \\ <string_literal> + e ) ; } \n \t3 if ( cache <identifiersep> logger . is <identifiersep> active ( ) ) { \n \t4 cache <identifiersep> logger . init <identifiersep> context ( ) ; } \n <ect>
\t7 if ( collection <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( warnings ) ) { \n \t8 report <identifiersep> warnings ( warnings ) ; } } \n \t6 catch ( input <identifiersep> required <identifiersep> exception input <identifiersep> required ) { \n \t7 <comment> \n <ect>
\t6 try { \n \t7 ret = process <identifiersep> task ( current <identifiersep> task ) ; \n \t6 } catch ( throwable t ) { \n \t7 <comment> \n <ect>
\t1 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + index . get <identifiersep> name ( ) ) ; } \n \t1 client . wait <identifiersep> for <identifiersep> status ( cluster <identifiersep> health <identifiersep> status . <identifier> ) ; \n \t1 <comment> \n \t1 for ( map . entry < string , index <identifiersep> definitions . index <identifiersep> type > entry : index . get <identifiersep> types ( ) . entry <identifiersep> set ( ) ) { \n <ect>
\t4 log . info ( <string_literal> + out <identifiersep> file + <string_literal> + count + <string_literal> + ( count > 1 ? <string_literal> : <string_literal> ) + names ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 throw new mojo <identifiersep> execution <identifiersep> exception ( <string_literal> + out <identifiersep> file + <string_literal> + e , e ) ; } \n \t2 } else { \n <ect>
\t2 if ( output <identifiersep> item <identifiersep> collector == null ) { \n \t3 return nothing <identifiersep> done } \n \t2 val compilation <identifiersep> errors = utils . errors <identifiersep> detected <identifiersep> key [ context , false ] \n \t2 if ( compilation <identifiersep> errors ) { \n <ect>
\t1 throws ambari <identifiersep> exception { \n \t1 cluster cluster = get <identifiersep> cluster ( cluster <identifiersep> name ) ; \n \t1 if ( ! cluster . can <identifiersep> be <identifiersep> removed ( ) ) { \n \t1 throw new ambari <identifiersep> exception ( <string_literal> + <string_literal> + cluster <identifiersep> name ) ; } \n <ect>
\t4 log . info ( <string_literal> , transaction . get <identifiersep> hash ( ) ) ; \n \t4 state <identifiersep> machine . transition ( state . closed ) ; \n \t4 closed <identifiersep> future . set ( transaction ) ; } \n \t3 @ override public void on <identifiersep> failure ( throwable throwable ) { \n <ect>
\t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception ex ) { \n \t3 logger . error ( <string_literal> , algorithm <identifiersep> name , \n \t4 get <identifiersep> name ( ) , get <identifiersep> x <identifiersep> class <identifiersep> reference ( ) , ex ) ; \n \t2 } catch ( null <identifiersep> pointer <identifiersep> exception ex ) { \n <ect>
\t2 log . info ( <string_literal> + server <identifiersep> boss <identifiersep> pool <identifiersep> timeout <identifiersep> millis + <string_literal> + new <identifiersep> server <identifiersep> boss <identifiersep> pool <identifiersep> timeout <identifiersep> millis ) ; \n \t2 server <identifiersep> boss <identifiersep> pool <identifiersep> timeout <identifiersep> millis = new <identifiersep> server <identifiersep> boss <identifiersep> pool <identifiersep> timeout <identifiersep> millis ; \n \t2 different = true ; } \n \t2 if ( ! port . equals ( new <identifiersep> port ) ) { \n <ect>
\t4 set <identifiersep> response <identifiersep> object ( response ) ; \n \t3 } else { \n \t4 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , <string_literal> ) ; } \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t3 return ; \n \t2 try { \n \t3 replace <identifiersep> pid ( to <identifiersep> file ( cpu ) , get <identifiersep> pid ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 for ( string <identifier> : blob <identifiersep> keys ) { \n \t5 if ( <identifier> . starts <identifiersep> with ( filter <identifiersep> name ) ) \n \t6 keys . add ( <identifier> ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t4 user <identifiersep> cache . put ( user <identifiersep> key , <identifier> ) ; \n \t3 } catch ( authentication <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> + authentication . get <identifiersep> name ( ) , e ) ; \n \t4 throw e ; } \n <ect>
\t2 } catch ( interrupted <identifiersep> exception e ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 counter <identifiersep> group . increment <identifiersep> and <identifiersep> get ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 op <identifiersep> set <identifiersep> <identifier> . subscribe ( fixture . user <identifiersep> id2 ) ; } \n \t2 catch ( operation <identifiersep> failed <identifiersep> exception ex1 ) \n \t2 { \n \t3 <comment> \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 logger . info ( <string_literal> ) ; \n <ect>
\t4 + <string_literal> \n \t4 + <string_literal> ) ; \n \t2 iterator < tuple > it = pig . open <identifiersep> iterator ( <string_literal> ) ; \n \t2 int count = 0 ; \n <ect>
\t6 log . warn ( string . format ( <string_literal> , command . get <identifiersep> class ( ) . get <identifiersep> name ( ) , exchange ) , e ) ; \n \t6 reset <identifiersep> client ( ) ; \n \t6 command . <identifier> ( client , exchange ) ; } \n \t4 } catch ( final exception e ) { \n <ect>
\t1 private name <identifiersep> id get <identifiersep> name <identifiersep> id <identifiersep> for <identifiersep> service ( final http <identifiersep> servlet <identifiersep> request request , final http <identifiersep> servlet <identifiersep> response response , final request <identifiersep> abstract <identifiersep> type authn <identifiersep> request , \n \t9 final saml <identifiersep> registered <identifiersep> service service , final saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade adaptor , \n \t9 final string binding , final assertion assertion ) { \n \t2 if ( service . is <identifiersep> skip <identifiersep> generating <identifiersep> assertion <identifiersep> name <identifiersep> id ( ) ) { \n <ect>
\t1 public void operation <identifiersep> complete ( channel <identifiersep> future future ) { \n \t1 if ( future . is <identifiersep> cancelled ( ) ) { \n \t2 log . error ( <string_literal> + id ) ; \n \t1 } else if ( ! future . is <identifiersep> success ( ) ) { \n <ect>
\t4 copy ( <number_literal> ) ; <comment> \n \t4 int attr <identifiersep> count = read <identifiersep> u2 ( ) ; \n \t4 write <identifiersep> u2 ( attr <identifiersep> count ) ; \n <ect>
\t2 if ( entries <identifiersep> replicated != <identifier> . num <identifiersep> updates ) { \n \t2 log . warn ( <string_literal> , \n \t3 <identifier> . num <identifiersep> updates , entries <identifiersep> replicated ) ; \n \t2 } else { \n <ect>
\t5 + long . to <identifiersep> <identifier> <identifiersep> string ( <identifier> ) + <string_literal> \n \t5 + long . to <identifiersep> <identifier> <identifiersep> string ( trace <identifiersep> mask ) ) ; \n \t3 assert ( <identifier> == trace <identifiersep> mask ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t8 logger . debug ( <string_literal> , item <identifiersep> name ) ; \n \t7 } else { \n \t8 logger . error ( <string_literal> , item <identifiersep> name ) ; } \n \t6 } else { \n <ect>
\t3 if ( locale != null ) { \n \t4 log . debug ( <string_literal> , locale ) ; } } \n \t2 if ( locale != null && ! locale <identifiersep> provider . is <identifiersep> valid <identifiersep> locale ( locale ) ) { \n \t3 locale default <identifiersep> locale = locale <identifiersep> provider . get <identifiersep> locale ( ) ; \n <ect>
\t2 try { \n \t2 fire <identifiersep> object <identifiersep> creation <identifiersep> event ( bucket . get <identifiersep> bucket <identifiersep> name ( ) , completed <identifiersep> entity . get <identifiersep> object <identifiersep> key ( ) , completed <identifiersep> entity . get <identifiersep> version <identifiersep> id ( ) , request <identifiersep> user . get <identifiersep> user <identifiersep> id ( ) , \n \t3 request <identifiersep> user . get <identifiersep> name ( ) , request <identifiersep> user . get <identifiersep> account <identifiersep> number ( ) , completed <identifiersep> entity . get <identifiersep> size ( ) , null ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 { \n \t5 query . append ( <string_literal> ) ; } } \n \t3 query . append ( <string_literal> ) ; \n \t3 string query <identifiersep> string = query . to <identifiersep> string ( ) ; \n <ect>
\t2 boolean keep = udp . keep ( entry ) ; \n \t2 if ( ( keep && ! <identifier> ) || ( ! keep && <identifier> ) ) return block <identifiersep> might <identifiersep> match ; } \n \t1 return block <identifiersep> cannot <identifiersep> match ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 reader . read ( ) ; <comment> \n \t2 string <identifier> = read <identifiersep> text ( reader ) ; <comment> \n \t10 <comment> \n <ect>
\t4 log . error ( <string_literal> , ex ) ; \n \t3 } catch ( instantiation <identifiersep> exception ex ) { \n \t4 log . error ( <string_literal> , ex ) ; \n \t3 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t4 gen . add <identifiersep> recipient <identifiersep> info <identifiersep> generator ( key <identifiersep> trans <identifiersep> <identifier> <identifiersep> info <identifiersep> gen ) ; } \n \t3 output <identifiersep> <identifier> <identifier> = new jce <identifiersep> cms <identifiersep> content <identifiersep> <identifier> <identifiersep> builder ( conf . get <identifiersep> algorithm <identifiersep> id ( ) ) . set <identifiersep> provider ( <identifier> <identifiersep> <identifier> <identifiersep> provider . provider <identifiersep> name ) . build ( ) ; \n \t3 <identifier> <identifiersep> stream = gen . open ( os , <identifier> ) ; \n \t3 io <identifiersep> helper . copy ( is , <identifier> <identifiersep> stream ) ; \n <ect>
\t1 string msg = null ; \n \t1 try { \n \t2 msg = parsed <identifiersep> buf . buffer . get <identifiersep> string ( decoder ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t4 byte [ ] bs ; \n \t4 try { \n \t4 bs = new byte [ <identifier> <identifiersep> length ] ; \n \t4 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error <identifier> ) { \n <ect>
\t2 saml <identifiersep> document <identifiersep> holder document <identifiersep> holder = new saml <identifiersep> client <identifiersep> builder ( ) \n \t2 . idp <identifiersep> <identifier> <identifiersep> login ( get <identifiersep> auth <identifiersep> server <identifiersep> saml <identifiersep> endpoint ( <identifier> ) , <string_literal> ) . build ( ) \n \t2 . login ( ) . user ( <identifier> <identifiersep> user ) . build ( ) \n \t2 . get <identifiersep> saml <identifiersep> response ( binding . post ) ; \n <ect>
\t3 } catch ( interrupted <identifiersep> exception ex ) { \n \t4 log . warn ( <string_literal> ) ; \n \t4 minion . shutdown ( ) ; \n \t3 } catch ( shutdown <identifiersep> signal <identifiersep> exception shutdown <identifiersep> exception ) { \n <ect>
\t5 <identifier> <identifiersep> log . debug ( <string_literal> + peer + <string_literal> + bucket ) ; \n \t4 return false ; } \n \t2 } else { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 pattern pattern = pattern . compile ( <string_literal> ] ? ) ( [ <identifier> | \\ <string_literal> ) ; \n \t2 matcher matcher = pattern . matcher ( css ) ; \n \t2 while ( matcher . find ( ) ) { \n \t3 string url = matcher . group ( <number_literal> ) ; \n <ect>
\t3 channel . position ( 0 ) ; \n \t2 } catch ( closed <identifiersep> by <identifiersep> interrupt <identifiersep> exception ignored ) { \n \t3 log . trace ( <string_literal> , ignored ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 rollback <identifiersep> <identifier> <identifiersep> per <identifiersep> vm = false \n \t2 for conf in configs : \n \t3 if ( conf . name == <string_literal> and conf . value == <string_literal> ) : \n \t4 config <identifiersep> update = configurations . update ( self . apiclient , <string_literal> , <string_literal> ) \n <ect>
\t2 try { \n \t3 while ( <identifier> . get <identifiersep> parent ( ) != null ) { \n \t3 <identifier> = <identifier> . get <identifiersep> parent ( ) ; } } \n \t2 catch ( security <identifiersep> exception se ) { \n <ect>
\t3 list < string > properties = collections . list ( ( enumeration < string > ) <identifier> <identifiersep> properties . property <identifiersep> names ( ) ) ; \n \t3 for ( string property : properties ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + property ) ; } } \n <ect>
\t10 } else { \n <number_literal> reason = method . get <identifiersep> status <identifiersep> text ( ) ; } \n \t9 } else { \n \t10 <comment> \n <ect>
\t1 command = [ <string_literal> % ( <identifier> ) ] \n \t1 p = <identifier> . <identifier> ( command , shell = true , stdout = <identifier> . pipe ) \n \t1 for x in p . stdout : \n \t2 if x : \n <ect>
\t3 throws docker <identifiersep> exception { \n \t2 try { \n \t3 client . stop <identifiersep> container <identifiersep> cmd ( container <identifiersep> id ) . exec ( ) ; \n \t2 } catch ( not <identifiersep> modified <identifiersep> exception ex ) { \n <ect>
\t2 transport <identifiersep> client client = factory . get <identifiersep> client ( transport <identifiersep> client <identifiersep> properties ) ; \n \t2 new <identifiersep> transport <identifiersep> clients . put ( scheme . to <identifiersep> lower <identifiersep> case ( ) , client ) ; } \n \t2 else \n \t2 { \n <ect>
\t4 <identifier> <identifiersep> listeners . add ( listener ) ; \n \t3 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 <identifier> <identifiersep> log . warn ( <string_literal> , e ) ; \n \t3 } catch ( class <identifiersep> cast <identifiersep> exception e ) { \n <ect>
\t8 ++ counter ; \n \t7 } catch ( binary <identifiersep> store <identifiersep> exception e ) { \n \t8 problems . add <identifiersep> error ( jcr <identifiersep> <identifier> . problems <identifiersep> writing <identifiersep> binary <identifiersep> to <identifiersep> backup , binary <identifiersep> key , backup <identifiersep> location ( ) , \n <number_literal> e . get <identifiersep> message ( ) ) ; } } \n <ect>
\t5 <identifier> <identifiersep> collection <identifiersep> service . update ( context , <identifier> ) ; \n \t5 context . restore <identifiersep> auth <identifiersep> system <identifiersep> state ( ) ; \n \t5 context . complete ( ) ; \n \t4 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t1 private t set <identifiersep> mongo <identifiersep> db ( @ nonnull db db , \n \t6 mongo <identifiersep> status status , \n \t6 int blob <identifiersep> cache <identifiersep> size <identifiersep> mb ) { \n \t2 if ( ! mongo <identifiersep> connection . has <identifiersep> <identifier> <identifiersep> write <identifiersep> concern ( db ) ) { \n <ect>
\t4 s <identifiersep> logger . warn ( <string_literal> + ip <identifiersep> address ) ; \n \t4 success = false ; } \n \t3 return true ; \n \t2 } else { \n <ect>
\t2 mongo <identifiersep> client mongo <identifiersep> client = null ; \n \t2 try { \n \t3 mongo <identifiersep> client = context . get <identifiersep> bean ( mongo <identifiersep> client . class ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 logger . warn ( <string_literal> + project . get <identifiersep> name ( ) + <string_literal> ) ; \n \t5 for ( plugin unsafe <identifiersep> plugin : unsafe <identifiersep> plugins ) \n \t5 { \n \t6 logger . warn ( unsafe <identifiersep> plugin . get <identifiersep> id ( ) ) ; } \n <ect>
<string_literal> <string_literal> <string_literal> \n url = namenode <identifiersep> address + <string_literal> \n <ect>
\t6 if ( <identifier> && <identifier> <identifiersep> node != null ) { \n \t7 thread . sleep ( duration . millis ( ) ) ; } } \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n \t4 } catch ( exception e ) { \n <ect>
\t2 context . get <identifiersep> shutdown <identifiersep> strategy ( ) . set <identifiersep> timeout ( get <identifiersep> shutdown <identifiersep> timeout ( ) ) ; \n \t2 <comment> \n \t2 if ( is <identifiersep> use <identifiersep> debugger ( ) ) { \n \t3 if ( context . get <identifiersep> status ( ) . equals ( service <identifiersep> status . started ) ) { \n <ect>
\t2 if ( <identifier> != null && <identifier> . size ( ) > 0 ) { \n \t3 if ( <identifier> . size ( ) == 1 ) { \n \t4 entry < string , string > entry = <identifier> . entry <identifiersep> set ( ) . iterator ( ) . next ( ) ; \n \t4 if ( entry . get <identifiersep> key ( ) . to <identifiersep> lower <identifiersep> case ( ) . equals ( <string_literal> ) ) { \n <ect>
\t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 log . error ( e , <string_literal> ) ; \n \t3 throw new runtime <identifiersep> exception ( e ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 is <identifiersep> log <identifiersep> filtered <identifiersep> out = ! input <identifiersep> lru <identifiersep> cache . is <identifiersep> entry <identifiersep> <identifier> ( log <identifiersep> message , timestamp ) ; \n \t2 if ( ! is <identifiersep> log <identifiersep> filtered <identifiersep> out ) { \n \t2 input <identifiersep> lru <identifiersep> cache . put ( log <identifiersep> message , timestamp ) ; \n \t2 } else { \n <ect>
\t3 if ( source <identifiersep> path == null ) { \n \t4 source <identifiersep> path = <string_literal> ; } \n \t3 index <identifiersep> node = index <identifiersep> tracker . acquire <identifiersep> index <identifiersep> node ( source <identifiersep> path ) ; \n \t3 if ( index <identifiersep> node != null ) { \n <ect>
\t4 log . info ( <string_literal> ) ; \n \t3 } finally { \n \t4 <identifier> . stop ( ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t1 public boolean authenticate ( auth <identifiersep> token token , message msg ) { \n \t2 if ( ( token != null ) && ( token instanceof fixed <identifiersep> membership <identifiersep> token ) && ( this . member <identifiersep> list != null ) ) { \n \t3 physical <identifiersep> address src = ( physical <identifiersep> address ) auth . down ( new event ( event . get <identifiersep> physical <identifiersep> address , msg . get <identifiersep> src ( ) ) ) ; \n \t3 if ( src == null ) { \n <ect>
\t3 if ( current <identifiersep> time - last <identifiersep> update <identifiersep> time > <number_literal> ) { <comment> \n \t4 last <identifiersep> update <identifiersep> time = current <identifiersep> time ; \n \t4 fetch <identifiersep> metrics ( ) ; } } } \n \t1 private void fetch <identifiersep> metrics ( ) { \n <ect>
\t4 } catch ( exception e ) { \n \t5 logger . warn ( <string_literal> + classes <identifiersep> dir + <string_literal> , log <identifiersep> stack <identifiersep> traces ? e : null ) ; \n \t5 return to <identifiersep> processor <identifiersep> <identifier> ( processor <identifiersep> class <identifiersep> names , collections . < string , incremental <identifiersep> annotation <identifiersep> processor <identifiersep> type > empty <identifiersep> map ( ) ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t2 return ( flow ) registry . get <identifiersep> flow <identifiersep> definition ( id ) ; } \n \t1 @ override \n \t1 public flow get <identifiersep> login <identifiersep> flow ( ) { \n \t2 if ( this . login <identifiersep> flow <identifiersep> definition <identifiersep> registry == null ) { \n <ect>
<comment> \n private string apply <identifiersep> pre <identifiersep> processors ( final resource resource , final processing <identifiersep> criteria criteria ) \n \t1 throws io <identifiersep> exception { \n \t1 final collection < resource <identifiersep> pre <identifiersep> processor > processors = processors <identifiersep> factory . get <identifiersep> pre <identifiersep> processors ( ) ; \n <ect>
\t2 hybrid <identifiersep> instance . set <identifiersep> realization <identifiersep> entries ( realization <identifiersep> entries ) ; \n \t2 store . put <identifiersep> resource ( hybrid <identifiersep> instance . get <identifiersep> resource <identifiersep> path ( ) , hybrid <identifiersep> instance , hybrid <identifiersep> manager . hybrid <identifiersep> serializer ) ; \n \t2 project <identifiersep> manager . get <identifiersep> instance ( kylin <identifiersep> config ) . move <identifiersep> realization <identifiersep> to <identifiersep> project ( realization <identifiersep> type . hybrid , hybrid <identifiersep> instance . get <identifiersep> name ( ) , project <identifiersep> name , owner ) ; \n \t2 hybrid <identifiersep> manager . reload <identifiersep> hybrid <identifiersep> instance ( hybrid <identifiersep> instance . get <identifiersep> name ( ) ) ; \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 location = encode <identifiersep> <identifier> ( location ) ; \n <ect>
\t1 txn <identifiersep> info . set <identifiersep> <identifier> ( rs . get <identifiersep> string ( <number_literal> ) ) ; \n \t1 txn <identifiersep> info . set <identifiersep> <identifier> ( rs . get <identifiersep> string ( <number_literal> ) ) ; \n \t1 return txn <identifiersep> info ; \n \t1 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t2 validator validator = schema . new <identifiersep> validator ( ) ; \n \t2 try { \n \t3 validator . validate ( new stream <identifiersep> source ( new string <identifiersep> reader ( xml <identifiersep> content ) ) ) ; } \n \t2 catch ( sax <identifiersep> exception ex ) { \n <ect>
\t4 if ( attribute <identifiersep> enumeration != null ) { \n \t5 try { \n \t6 attribute <identifiersep> enumeration . close ( ) ; \n \t5 } catch ( exception e ) { \n <ect>
public class websocket <identifiersep> stream <identifiersep> handler extends websocket <identifiersep> handler implements web <identifiersep> socket <identifiersep> protocol <identifiersep> stream { \n \t1 private static final transient logger log = logger <identifiersep> factory . get <identifiersep> logger ( websocket <identifiersep> stream <identifiersep> handler . class ) ; \n \t1 @ override \n \t1 public list < atmosphere <identifiersep> request > on <identifiersep> text <identifiersep> stream ( web <identifiersep> socket web <identifiersep> socket , reader data ) { \n <ect>
\t5 dst <identifiersep> store . put <identifiersep> resource ( cube <identifiersep> res <identifiersep> path , cube , cube <identifiersep> serializer ) ; \n \t5 logger . info ( <string_literal> + item + <string_literal> + snap <identifiersep> saved . get <identifiersep> resource <identifiersep> path ( ) + <string_literal> ) ; } \n \t3 } else { \n \t4 logger . error ( <string_literal> + item ) ; \n <ect>
\t3 return new spawn <identifiersep> queue <identifiersep> manager ( new tree <identifiersep> map < > ( ) ) ; } \n \t2 try { \n \t3 return new object <identifiersep> mapper ( ) . read <identifiersep> value ( queue <identifiersep> from <identifiersep> zk , spawn <identifiersep> queue <identifiersep> manager . class ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 java . io . file file1 = null ; \n \t2 java . io . file <identifier> = null ; \n \t2 java . io . file <identifier> = null ; \n \t2 try { \n <ect>
\t3 mac . update ( request . get <identifiersep> bytes ( ) ) ; \n \t3 byte [ ] encrypted <identifiersep> bytes = mac . do <identifiersep> final ( ) ; \n \t3 return base64 . encode <identifiersep> bytes ( encrypted <identifiersep> bytes ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 w . flush ( ) ; \n \t2 w . close ( ) ; } \n \t1 static protected void respond <identifiersep> exception ( http <identifiersep> servlet <identifiersep> response response , exception e ) \n \t2 throws io <identifiersep> exception , servlet <identifiersep> exception { \n <ect>
\t5 if ( record <identifiersep> provider . equals ( provider ) ) \n \t6 res . add ( contact ) ; } } } \n \t2 catch ( io <identifiersep> exception ex ) \n \t2 { \n <ect>
\t6 stop <identifiersep> point , data <identifiersep> node <identifiersep> name ) ; } \n \t3 throw new io <identifiersep> exception ( <string_literal> + stop <identifiersep> point + <string_literal> + \n \t5 data <identifiersep> node <identifiersep> name + <string_literal> ) ; } \n \t2 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> accesscontrol , level . info ) ) { \n <ect>
\t2 object stop = exchange . get <identifiersep> property ( exchange . route <identifiersep> stop ) ; \n \t2 if ( stop != null ) { \n \t3 boolean do <identifiersep> stop = exchange . get <identifiersep> context ( ) . get <identifiersep> type <identifiersep> converter ( ) . convert <identifiersep> to ( boolean . class , exchange , stop ) ; \n \t3 if ( do <identifiersep> stop ) { \n <ect>
\t2 try { \n \t3 registered <identifiersep> service <identifiersep> access <identifiersep> strategy <identifiersep> utils . ensure <identifiersep> service <identifiersep> access <identifiersep> is <identifiersep> allowed ( service , registered <identifiersep> service ) ; \n \t3 return true ; \n \t2 } catch ( final unauthorized <identifiersep> service <identifiersep> exception e ) { \n <ect>
\t1 parse <identifiersep> status parse ( final collection < string > buffer ) { \n \t2 assert buffer \n \t2 source <identifiersep> buffer = new source <identifiersep> buffer ( ) \n \t2 def source = buffer . join ( parser . <identifier> ) \n <ect>
\t5 packet . set <identifiersep> length ( b . length ) ; } \n \t3 } catch ( runtime <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> + <identifier> <identifiersep> init <identifiersep> interval + <string_literal> ) ; } \n \t1 else \n \t1 { \n \t2 log . info ( <string_literal> ) ; } } \n <ect>
\t2 s <identifiersep> logger . debug ( <string_literal> + service . get <identifiersep> name ( ) + <string_literal> + network . get <identifiersep> display <identifiersep> text ( ) ) ; \n \t2 if ( network . get <identifiersep> broadcast <identifiersep> domain <identifiersep> type ( ) != broadcast <identifiersep> domain <identifiersep> type . <identifier> ) { \n \t3 return false ; } \n \t2 if ( ! network <identifiersep> model . is <identifiersep> provider <identifiersep> for <identifiersep> network ( get <identifiersep> provider ( ) , network . get <identifiersep> id ( ) ) ) { \n <ect>
\t2 for ( locale locale : arrays . as <identifiersep> list ( forced <identifiersep> locale , get <identifiersep> locale ( ) ) ) { \n \t3 if ( locale != null ) { \n \t4 resource <identifiersep> bundle bundle = resource <identifiersep> bundle . get <identifiersep> bundle ( <string_literal> , locale ) ; <comment> \n \t4 if ( bundle == null ) { \n <ect>
\t7 <comment> \n \t7 <comment> \n \t7 <comment> \n \t6 } else { \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name + <string_literal> + repl <identifiersep> dump <identifiersep> id , driver ) ; \n \t1 string incremental <identifiersep> dump <identifiersep> <identifier> = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 string incremental <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t9 break ; } \n \t7 s <identifiersep> logger . info ( <string_literal> + s <identifiersep> num <identifiersep> vm + <string_literal> ) ; \n \t7 thread . sleep ( <identifier> ) ; <comment> \n \t7 <comment> \n <ect>
\t3 response response = client . target ( generate <identifiersep> url ( <string_literal> , url <identifiersep> prefix + ext ) ) . request ( ) \n \t5 . post ( entity . entity ( big <identifiersep> map , <string_literal> ) ) ; \n \t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> bad <identifiersep> request , response . get <identifiersep> status ( ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t1 public void send <identifiersep> <identifier> <identifiersep> <identifier> ( command command ) { \n \t2 if ( command instanceof on <identifiersep> off <identifiersep> type ) { \n \t3 send <identifiersep> rc <identifiersep> command ( command , rc <identifiersep> <identifier> <identifiersep> <identifier> ) ; \n \t2 } else { \n <ect>
\t3 } else { \n \t4 hash <identifiersep> map < string , pair < long , long > > nw <identifiersep> <identifier> <identifiersep> states = sync <identifiersep> network <identifiersep> groups ( conn , id ) ; \n \t4 return new ping <identifiersep> routing <identifiersep> with <identifiersep> nw <identifiersep> groups <identifiersep> command ( get <identifiersep> type ( ) , id , null , nw <identifiersep> <identifier> <identifiersep> states ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \t4 num <identifiersep> okay ++ ; } \n \t3 else \n \t3 { \n <ect>
\t4 if ( d != null ) { \n \t5 request . set <identifiersep> date ( d ) ; } \n \t3 } else { \n \t4 <comment> \n <ect>
\t1 @ rpc <identifiersep> service <identifiersep> handler ( command = <string_literal> ) \n \t1 void on <identifiersep> start <identifiersep> command ( rpc <identifiersep> server <identifiersep> call call ) { \n \t2 s <identifiersep> logger . info ( <string_literal> ) ; \n \t2 sample <identifiersep> storage <identifiersep> prepare <identifiersep> command cmd = call . get <identifiersep> command <identifiersep> argument ( ) ; \n <ect>
\t5 <identifier> <identifiersep> state = <number_literal> ; \n \t5 <comment> \n \t5 if ( auth != auth <identifiersep> type . <identifier> && auth != auth <identifiersep> type . session ) { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 try { \n \t1 metric <identifiersep> registry . shutdown ( ) . get ( ) \n \t1 } catch { \n \t1 case t : throwable = > \n <ect>
\t3 catch ( sql <identifiersep> exception ex ) { \n \t4 logger . debug ( <string_literal> , ex ) ; } \n \t3 catch ( throwable ex ) { \n \t4 <comment> \n <ect>
\t2 final list < row > rows = new array <identifiersep> list < row > ( ) ; \n \t2 for ( final int <identifier> : arrays . as <identifiersep> list ( 0 , 1 ) ) { \n \t3 for ( final int qual : arrays . as <identifiersep> list ( 0 , 1 ) ) { \n \t4 rows . add ( new row ( <identifier> , qual , 1 , <number_literal> ) ) ; } } \n <ect>
\t3 result . set <identifiersep> error ( true ) ; \n \t3 result . set <identifiersep> failure <identifiersep> message ( new string <identifiersep> builder ( <string_literal> ) . append ( e . get <identifiersep> message ( ) ) . to <identifiersep> string ( ) ) ; \n \t3 return result ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 output <identifiersep> map . clear ( ) ; } \n \t4 last <identifiersep> write <identifiersep> flush <identifiersep> time = now ; } \n \t3 if ( remove <identifiersep> list . size ( ) > 0 ) { \n \t4 if ( ! write <identifiersep> queue . offer ( new array <identifiersep> list < > ( remove <identifiersep> list ) ) ) { \n <ect>
\t3 <identifier> <identifiersep> <identifier> <identifiersep> dao . persist ( <identifier> <identifiersep> policy ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> + load <identifiersep> balancer <identifiersep> id + <string_literal> + <identifier> <identifiersep> policy <identifiersep> id ) ; \n \t3 try { \n \t4 if ( ! apply <identifiersep> load <identifiersep> balancer <identifiersep> config ( load <identifiersep> balancer <identifiersep> id ) ) { \n <ect>
\t8 internal <identifiersep> kie <identifiersep> module kie <identifiersep> module , \n \t8 file <identifier> ) { \n \t2 remote <identifiersep> repository repository = get <identifiersep> remote <identifiersep> repository <identifiersep> from <identifiersep> distribution <identifiersep> management ( <identifier> ) ; \n \t2 if ( repository == null ) { \n <ect>
\t2 if ( <identifier> . length > 1 ) { \n \t3 logger . debug ( <string_literal> , <identifier> [ 0 ] , <identifier> [ 1 ] ) ; \n \t3 bit = integer . parse <identifiersep> int ( <identifier> [ 1 ] ) ; \n \t3 if ( ( bit < 0 ) || ( bit > <number_literal> ) ) { \n <ect>
\t5 && ( ! storage <identifiersep> service . instance . get <identifiersep> token <identifiersep> metadata ( ) . is <identifiersep> member ( endpoint ) ) ) \n \t4 { \n \t5 { \n <ect>
* <comment> \n * from ( <string_literal> ) . to ( cdi <identifiersep> event <identifiersep> endpoint ) ; \n * \n * void <identifier> <identifiersep> cdi <identifiersep> events ( { @ literal @ } <identifier> { @ literal @ } context <identifiersep> name ( <string_literal> ) list { @ literal < } string { @ literal > } event ) { \n <ect>
\t1 resource <identifiersep> unavailable <identifiersep> exception { \n \t2 if ( ! can <identifiersep> handle ( network , service . connectivity ) ) { \n \t3 return false ; } \n \t2 if ( network . get <identifiersep> broadcast <identifiersep> uri ( ) == null ) { \n <ect>
\t1 super . start ( ) ; \n \t1 logger . info ( <string_literal> , get <identifiersep> name ( ) ) ; } \n @ override \n public void stop ( ) { \n <ect>
\t4 if ( game != null ) { \n \t5 game <identifiersep> manager . instance . remove <identifiersep> game ( game . get <identifiersep> id ( ) ) ; } \n \t4 <identifier> <identifiersep> room <identifiersep> manager . instance . remove <identifiersep> table ( table <identifiersep> id ) ; } } } \n \t1 public void debug <identifiersep> server <identifiersep> state ( ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 init <identifiersep> using <identifiersep> default <identifiersep> configurator . foo ( ) ; \n \t2 inner <identifiersep> init <identifiersep> using <identifiersep> default <identifiersep> configurator . foo ( ) ; \n \t2 logger . info ( <string_literal> ) ; } \n \t1 public static void foo ( ) { \n <ect>
\t2 final sam <identifiersep> reader in = sam <identifiersep> reader <identifiersep> factory . make <identifiersep> default ( ) . reference <identifiersep> sequence ( reference <identifiersep> sequence ) . open ( input ) ; \n \t2 final reference <identifiersep> sequence <identifiersep> file reference = reference <identifiersep> sequence <identifiersep> file <identifiersep> factory . get <identifiersep> reference <identifiersep> sequence <identifiersep> file ( reference <identifiersep> sequence ) ; \n \t2 final sam <identifiersep> sequence <identifiersep> dictionary ref <identifiersep> dict = reference . get <identifiersep> sequence <identifiersep> dictionary ( ) ; \n \t2 if ( ref <identifiersep> dict == null ) { \n <ect>
\t1 protected void internal <identifiersep> receive <identifiersep> command ( string item <identifiersep> name , command command ) { \n \t2 if ( item <identifiersep> name != null && ! this . providers . is <identifiersep> empty ( ) ) { \n \t3 <identifier> <identifiersep> space <identifiersep> binding <identifiersep> provider provider = this . providers . iterator ( ) . next ( ) ; \n \t3 if ( provider == null ) { \n <ect>
\t2 output = function . apply ( input ) ; \n \t2 break ; \n \t1 } catch ( amazon <identifiersep> service <identifiersep> exception e ) { \n \t2 if ( failed <identifiersep> attempts < retries && e . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> response <identifiersep> status . forbidden . get <identifiersep> code ( ) ) { \n <ect>
\t3 } catch ( <identifier> <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> return <identifiersep> value ( ) + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t4 new <identifiersep> disk = null ; \n \t3 } catch ( rbd <identifiersep> exception e ) { \n <ect>
\t2 string init = <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) ; \n \t2 <comment> \n \t2 <identifier> <identifiersep> domain <identifiersep> suffix = <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) ; \n \t2 if ( init == null || init . equals ( <string_literal> ) ) { \n <ect>
\t4 server . cache = response ; \n \t4 server . last <identifiersep> update = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t4 logger . debug ( <string_literal> , response . to <identifiersep> string ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 public mock <identifiersep> manager ( ) { \n \t1 super ( null , null , 0 , 0 ) ; } \n \t1 @ override \n \t1 public void run ( ) { \n <ect>
\t2 string property <identifiersep> uri = semantic <identifiersep> type . get <identifiersep> type ( ) . get <identifiersep> uri ( ) ; \n \t2 double confidence = semantic <identifiersep> type . get <identifiersep> confidence <identifiersep> score ( ) ; \n \t2 origin origin = semantic <identifiersep> type . get <identifiersep> origin ( ) ; \n \t2 if ( domain <identifiersep> uri == null || domain <identifiersep> uri . is <identifiersep> empty ( ) ) { \n <ect>
\t3 execute <identifiersep> update ( conn , <string_literal> + table <identifiersep> name <identifiersep> roles ) ; \n \t3 execute <identifiersep> update ( conn , <string_literal> + table <identifiersep> name <identifiersep> users ) ; \n \t3 conn . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 return sb . to <identifiersep> string ( ) ; } \n \t1 private void on <identifiersep> shutdown ( ) { \n \t2 if ( <identifier> <identifiersep> process != null ) { \n <ect>
\t1 * logs a message at warn level . \n \t1 * < p > \n \t1 * usage example : \n \t1 * < pre > \n <ect>
\t3 result . sec = ( thrift <identifiersep> security <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> sec <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t4 if ( consumer != null ) { \n \t5 if ( consumer . get <identifiersep> endpoint ( ) . is <identifiersep> fire <identifiersep> web <identifiersep> socket <identifiersep> channel <identifiersep> events ( ) ) { \n \t6 consumer . send <identifiersep> event <identifiersep> notification ( connection <identifiersep> key , event <identifiersep> type ) ; } \n \t4 } else { \n <ect>
\t2 <identifier> <identifiersep> random <identifiersep> access <identifiersep> buffer r = <identifier> . to <identifiersep> random <identifiersep> access <identifiersep> buffer ( ) ; \n \t2 try { \n \t3 return new encrypted <identifiersep> random <identifiersep> access <identifiersep> buffer ( type , r , master <identifiersep> key , false ) ; \n \t2 } catch ( general <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t1 private final <identifier> <identifiersep> data <identifiersep> encryption <identifiersep> options options ; \n \t1 public <identifier> <identifiersep> key <identifiersep> provider ( <identifier> <identifiersep> data <identifiersep> encryption <identifiersep> options options ) \n \t1 { \n \t2 this . options = options ; \n <ect>
\t4 log . debug ( <string_literal> + value ) ; } \n \t3 return value ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 string filter <identifiersep> name = param . get <identifiersep> name ( ) ; \n \t2 string value = ( string ) filter <identifiersep> types . get ( filter <identifiersep> name ) ; \n \t2 if ( null == value ) { \n \t3 <comment> \n <ect>
\t6 open <identifiersep> cms . get <identifiersep> org <identifiersep> unit <identifiersep> manager ( ) . read <identifiersep> <identifier> <identifiersep> unit ( \n \t7 a <identifiersep> cms <identifiersep> ui . get <identifiersep> cms <identifiersep> object ( ) , \n \t7 m <identifiersep> parent <identifiersep> <identifier> . get <identifiersep> value ( ) ) ) ) ) ; \n \t2 } catch ( cms <identifiersep> exception e1 ) { \n <ect>
\t5 log . error ( <string_literal> + <identifier> . group ( ) + <string_literal> + <identifier> . name ( ) , se ) ; } } } } \n \t1 protected void modify <identifiersep> job ( final <identifier> <identifiersep> job <identifiersep> description <identifier> , final job <identifiersep> detail job ) \n \t1 { \n <ect>
\t2 logger . info ( <string_literal> , connector <identifiersep> address ) ; \n \t2 try { \n \t3 daemon <identifiersep> registry . mark <identifiersep> state ( connector <identifiersep> address , busy ) ; \n \t2 } catch ( daemon <identifiersep> registry . empty <identifiersep> registry <identifiersep> exception e ) { \n <ect>
\t2 catch ( io <identifiersep> exception ex ) { \n \t3 log . warn ( <string_literal> + xml <identifiersep> utils . pretty <identifiersep> print ( conf <identifiersep> hadoop ) , ex ) ; \n \t3 throw new coordinator <identifiersep> job <identifiersep> exception ( error <identifiersep> code . <identifier> , ex . get <identifiersep> message ( ) , ex ) ; <comment> \n \t2 catch ( uri <identifiersep> syntax <identifiersep> exception ex ) { \n <ect>
\t3 exceptions . is <identifiersep> caused <identifiersep> by ( e , aborted <identifiersep> exception . class ) ) ) { \n \t3 logger . trace ( <string_literal> ) ; \n \t3 shutdown <identifiersep> sleep ( ) ; \n \t2 } else { \n <ect>
\t2 test <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> ping <identifier> <identifiersep> ping <identifiersep> d = new test <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> ping ( hosts <identifiersep> settings <identifiersep> mismatch , thread <identifiersep> pool , handle <identifiersep> d , \n \t3 empty <identifiersep> hosts <identifiersep> provider , ( ) - > state <identifiersep> d ) ; \n \t2 <identifier> <identifiersep> ping <identifiersep> d . start ( ) ; \n \t2 <identifier> . push ( <identifier> <identifiersep> ping <identifiersep> d ) ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 sys . exit ( 1 ) \n \t1 else : \n \t2 messages <identifiersep> file = which ( <string_literal> ) \n \t2 if not messages <identifiersep> file : \n <ect>
\t1 try { \n \t1 quick <identifiersep> links <identifiersep> profile profile = new quick <identifiersep> links <identifiersep> profile <identifiersep> parser ( ) . parse ( quick <identifiersep> link <identifiersep> profile <identifiersep> json . get <identifiersep> bytes ( ) ) ; \n \t1 return new default <identifiersep> quick <identifiersep> link <identifiersep> visibility <identifiersep> controller ( profile ) ; } \n \t1 catch ( io <identifiersep> exception | quick <identifiersep> links <identifiersep> profile <identifiersep> evaluation <identifiersep> exception ex ) { \n <ect>
\t3 if ( ! change <identifiersep> state ( vm , event . operation <identifiersep> succeeded , host <identifiersep> id , work , step . started ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + vm ) ; \n \t4 throw new concurrent <identifiersep> operation <identifiersep> exception ( <string_literal> + vm ) ; } \n \t2 } catch ( final no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t2 final string class <identifiersep> name = saml <identifiersep> object . get <identifiersep> class ( ) . get <identifiersep> name ( ) ; \n \t2 final string entity <identifiersep> id = adaptor . get <identifiersep> entity <identifiersep> id ( ) ; \n \t2 logger . debug ( <string_literal> , class <identifiersep> name , entity <identifiersep> id ) ; \n \t2 final credential credential = get <identifiersep> key <identifiersep> encryption <identifiersep> credential ( entity <identifiersep> id , adaptor , service ) ; \n <ect>
\t7 boolean is <identifiersep> windows = <identifier> <identifiersep> guest <identifiersep> os <identifiersep> category <identifiersep> dao . find <identifiersep> by <identifiersep> id ( <identifier> <identifiersep> guest <identifiersep> os <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm . get <identifiersep> guest <identifiersep> os <identifiersep> id ( ) ) . get <identifiersep> category <identifiersep> id ( ) ) . get <identifiersep> name ( ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ; \n \t7 <identifier> <identifiersep> vm <identifiersep> ip <identifiersep> fetch <identifiersep> thread <identifiersep> executor . execute ( new vm <identifiersep> ip <identifiersep> addr <identifiersep> fetch <identifiersep> thread ( vm <identifiersep> id , nic <identifiersep> id , vm <identifiersep> instance . get <identifiersep> instance <identifiersep> name ( ) , \n \t9 is <identifiersep> windows , vm . get <identifiersep> host <identifiersep> id ( ) , network . get <identifiersep> cidr ( ) ) ) ; } \n \t5 } catch ( exception e ) { \n <ect>
\t2 input <identifiersep> stream . close ( ) ; \n \t2 return <identifier> <identifiersep> serializer . from <identifiersep> bytes ( content ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 return <identifier> ; } \n \t1 static public void upload <identifiersep> crash ( base <identifiersep> handler base <identifiersep> handler , final i <identifiersep> context context , throwable throwable ) { \n \t2 num <identifiersep> sent ++ ; \n \t2 if ( num <identifiersep> sent >= max <identifiersep> error <identifiersep> reports ) { \n <ect>
\t3 if ( save ) { \n \t4 wiki . save <identifiersep> document ( document , <string_literal> , true , context ) ; \n \t4 this . logger . info ( <string_literal> , document <identifiersep> reference ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t4 complex <identifiersep> data . set <identifiersep> mime <identifiersep> type ( mime <identifiersep> type ) ; \n \t4 complex <identifiersep> data . set <identifiersep> length ( file . length ( ) ) ; \n \t4 obs . set <identifiersep> complex <identifiersep> data ( complex <identifiersep> data ) ; } \n \t3 catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t4 <identifier> <identifiersep> model model = ( ( <identifier> <identifiersep> result <identifiersep> collector ) test <identifiersep> element ) . get <identifiersep> <identifier> <identifiersep> model ( ) ; \n \t4 model . send <identifiersep> test <identifiersep> mail ( ) ; \n \t4 display <identifiersep> message ( j <identifiersep> meter <identifiersep> utils . get <identifiersep> res <identifiersep> string ( <string_literal> ) , false ) ; <comment> \n \t3 } catch ( address <identifiersep> exception ex ) { \n <ect>
\t2 try { \n \t3 string parent = path <identifiersep> utils . parent <identifiersep> path ( lib <identifiersep> name ) ; \n \t3 path <identifiersep> utils . local <identifiersep> mkdirs ( parent ) ; \n \t3 data . get <identifiersep> <identifier> ( ) . put ( lib <identifiersep> name , channels . new <identifiersep> channel ( new file <identifiersep> output <identifiersep> stream ( lib <identifiersep> name ) ) ) ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 <comment> \n \t3 final path tmp <identifiersep> file <identifiersep> path = files . create <identifiersep> temp <identifiersep> file ( <string_literal> , <string_literal> ) ; \n \t3 tmp <identifiersep> file = tmp <identifiersep> file <identifiersep> path . to <identifiersep> file ( ) ; \n \t2 } catch ( io <identifiersep> exception ioex ) { \n <ect>
\t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 add <identifiersep> content <identifiersep> to <identifiersep> repo ( <identifier> + <string_literal> ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 test <identifiersep> register <identifiersep> prefix ( ) ; \n <ect>
\t3 { \n \t4 <identifier> <identifiersep> group < member <identifiersep> id > <identifier> <identifiersep> group = ( <identifier> <identifiersep> group < member <identifiersep> id > ) entry . content ( ) ; \n \t4 if ( state . <identifier> <identifiersep> member <identifiersep> change <identifiersep> in <identifiersep> log ( ) ) \n \t4 { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 <comment> \n \t2 <identifier> <identifiersep> <identifier> tp = new <identifier> <identifiersep> <identifier> ( <identifier> <identifiersep> set , convert <identifiersep> to <identifiersep> <identifier> , <identifier> <identifiersep> <identifier> , context ) ; \n \t2 buffered <identifiersep> reader br = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( new file <identifiersep> input <identifiersep> stream ( lexicon <identifiersep> filename ) , <string_literal> ) ) ; \n <ect>
\t2 vmware <identifiersep> traffic <identifiersep> label mgmt <identifiersep> traffic <identifiersep> label <identifiersep> obj = new vmware <identifiersep> traffic <identifiersep> label ( private <identifiersep> traffic <identifiersep> label , traffic <identifiersep> type . management ) ; \n \t2 v <identifiersep> switch <identifiersep> name = mgmt <identifiersep> traffic <identifiersep> label <identifiersep> obj . get <identifiersep> virtual <identifiersep> switch <identifiersep> name ( ) ; \n \t2 vlan <identifiersep> id = mgmt <identifiersep> traffic <identifiersep> label <identifiersep> obj . get <identifiersep> vlan <identifiersep> id ( ) ; \n \t2 v <identifiersep> switch <identifiersep> type = mgmt <identifiersep> traffic <identifiersep> label <identifiersep> obj . get <identifiersep> virtual <identifiersep> switch <identifiersep> type ( ) . to <identifiersep> string ( ) ; \n <ect>
\t3 final byte [ ] signature = hex . decode <identifiersep> hex ( key . to <identifiersep> char <identifiersep> array ( ) ) ; \n \t3 signer . init <identifiersep> verify ( certificate ) ; \n \t3 signer . update ( data ) ; \n \t3 if ( ! signer . verify ( signature ) ) { \n <ect>
public long [ ] all <identifiersep> <identifier> <identifiersep> item <identifiersep> i <identifiersep> ds ( long item <identifiersep> id ) throws taste <identifiersep> exception { \n \t1 return delegate . all <identifiersep> <identifier> <identifiersep> item <identifiersep> i <identifiersep> ds ( item <identifiersep> id ) ; } \n @ override \n public void refresh ( collection < <identifier> > already <identifiersep> <identifier> ) { \n <ect>
\t2 log . debug ( <string_literal> , trigger <identifiersep> key ) ; } \n \t1 public void resume <identifiersep> route <identifiersep> trigger ( action action , string route <identifiersep> id ) throws scheduler <identifiersep> exception { \n \t2 trigger <identifiersep> key trigger <identifiersep> key = retrieve <identifiersep> trigger <identifiersep> key ( action , route <identifiersep> id ) ; \n \t2 get <identifiersep> scheduler ( ) . resume <identifiersep> trigger ( trigger <identifiersep> key ) ; \n <ect>
\t2 private boolean start <identifiersep> packet <identifiersep> recovery ( <identifier> <identifiersep> <identifier> <identifier> <identifiersep> packet , raw <identifiersep> packet recovered <identifiersep> packet ) \n \t2 { \n \t3 if ( <identifier> <identifiersep> packet . get <identifiersep> length ( ) < raw <identifiersep> packet . fixed <identifiersep> header <identifiersep> size ) \n \t3 { \n <ect>
\t6 if ( properties . watch <identifiersep> access && vm . can <identifiersep> watch <identifiersep> field <identifiersep> access ( ) ) { \n \t7 val request = manager . create <identifiersep> access <identifiersep> <identifier> <identifiersep> request ( this , field ) \n \t7 debug <identifiersep> process . requests <identifiersep> manager . enable <identifiersep> request ( request ) \n <ect>
\t1 public void init ( ) { \n \t2 try { \n \t3 init <identifiersep> plugin ( ) ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t5 long t <identifiersep> stamp = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t5 while ( i ++ < send <identifiersep> count ) { \n \t6 producer . send ( session . create <identifiersep> text <identifiersep> message ( <string_literal> ) ) ; \n \t6 if ( <identifier> == 0 ) { \n <ect>
\t5 int slot <identifiersep> no = offset - base ; \n \t5 if ( slot <identifiersep> no == was <identifiersep> online <identifiersep> <identifier> . length ) \n \t6 break ; <comment> \n \t5 if ( slot <identifiersep> no > was <identifiersep> online <identifiersep> <identifier> . length || slot <identifiersep> no < 0 ) { \n <ect>
\t3 if ( result . get <identifiersep> cause ( ) == result ) { \n \t4 return result ; } \n \t3 if ( counter ++ > <number_literal> ) { \n \t4 <comment> \n <ect>
\t2 assert <identifiersep> that ( <string_literal> , \n \t3 number <identifiersep> of <identifiersep> files <identifiersep> before <identifiersep> snapshot , equal <identifiersep> to ( number <identifiersep> of <identifiersep> files ( repo ) - <number_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; } \n \t1 public void test <identifiersep> restore <identifiersep> index <identifiersep> with <identifiersep> missing <identifiersep> shards ( ) throws exception { \n <ect>
\t2 expected <identifiersep> list . add ( interceptor <identifiersep> <identifier> . class ) ; \t5 <comment> \n \t2 array <identifiersep> list < object > visit <identifiersep> list = interceptor <identifiersep> visit <identifiersep> list . get <identifiersep> list ( ) ; \n \t2 boolean status = expected <identifiersep> list . size ( ) == visit <identifiersep> list . size ( ) ; \n \t2 if ( ! status ) { \n <ect>
\t1 } catch ( io <identifiersep> exception e ) { \n \t1 throw new hive <identifiersep> exception ( e ) ; } \n \t1 int parts <identifiersep> to <identifiersep> load = valid <identifiersep> partitions . size ( ) ; \n \t1 if ( parts <identifiersep> to <identifiersep> load == 0 ) { \n <ect>
\t3 producer <identifiersep> destination = session . create <identifiersep> topic ( get <identifiersep> producer <identifiersep> subject ( ) ) ; \n \t2 } else { \n \t3 consumer <identifiersep> destination = session . create <identifiersep> queue ( get <identifiersep> consumer <identifiersep> subject ( ) ) ; \n \t3 producer <identifiersep> destination = session . create <identifiersep> queue ( get <identifiersep> producer <identifiersep> subject ( ) ) ; } \n <ect>
\t1 @ before \n \t1 public void clean <identifiersep> database ( ) { \n \t2 try ( final tx tx = app . tx ( ) ) { \n \t3 final list < ? extends node <identifiersep> interface > nodes = app . node <identifiersep> query ( ) . get <identifiersep> as <identifiersep> list ( ) ; \n <ect>
\t5 monitor <identifiersep> socket ( socket ) ; } \n \t4 reconnect <identifiersep> policy . reconnected ( ) ; \n \t4 logger . debug ( <string_literal> ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( ! property . is <identifiersep> valid <identifiersep> table <identifiersep> property <identifiersep> key ( property ) ) { \n \t2 shell . log . warn ( <string_literal> + property \n \t3 + <string_literal> ) ; } \n \t2 shell <identifiersep> state . get <identifiersep> connector ( ) . namespace <identifiersep> operations ( ) . remove <identifiersep> property ( namespace , property ) ; \n <ect>
\t2 return <identifier> ; } \n \t1 @ post <identifiersep> construct \n \t1 public void post <identifiersep> construct ( ) { \n \t2 <identifier> ++ ; \n <ect>
\t6 process <identifiersep> tree . get ( ) . kill <identifiersep> all ( proc , cookie ) ; \n \t5 } catch ( interrupted <identifiersep> exception e ) { \n \t6 logger . log ( level . info , <string_literal> , e ) ; } } \n \t3 } ) ; \n <ect>
\t7 event . kind ( ) == standard <identifiersep> watch <identifiersep> event <identifiersep> <identifier> . entry <identifiersep> delete ) { \n \t6 path item = ( path ) event . context ( ) ; \n \t6 file file = new file ( parent <identifiersep> dir , item . to <identifiersep> file ( ) . get <identifiersep> name ( ) ) ; \n <ect>
\t7 <identifier> <identifiersep> counter ++ ; \n \t7 decrement <identifiersep> and <identifiersep> sub <identifiersep> size <identifiersep> to <identifiersep> store <identifiersep> stat ( sd <identifiersep> entry . get <identifiersep> key ( ) , keys . location . get <identifiersep> size ( ) ) ; \n \t7 <comment> \n \t5 } else { \n <ect>
\t1 private static final logger log = logger . get <identifiersep> logger ( rdf <identifiersep> triples <identifiersep> input <identifiersep> test <identifiersep> mapper . class ) ; \n \t1 @ override \n \t1 protected void map ( long <identifiersep> writable key , triple <identifiersep> writable value , context context ) \n \t3 throws io <identifiersep> exception , interrupted <identifiersep> exception { \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + vo + <string_literal> ) ; \n \t5 <comment> \n \t5 <comment> \n \t5 if ( delete <identifiersep> private <identifiersep> gateway <identifiersep> from <identifiersep> the <identifiersep> db ( get <identifiersep> vpc <identifiersep> private <identifiersep> gateway ( gateway <identifiersep> id ) ) ) { \n <ect>
\t3 t <identifiersep> handle . close ( ) ; } \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> update <identifiersep> in <identifiersep> background ( ) throws exception { \n <ect>
\t4 processor print <identifiersep> processor = new processor ( ) { \n \t5 public void process ( exchange exchange ) throws exception { \n \t6 message out = exchange . get <identifiersep> out ( ) ; \n \t6 out . copy <identifiersep> from ( exchange . get <identifiersep> in ( ) ) ; \n <ect>
\t1 <comment> \n \t1 throw new not <identifiersep> implemented <identifiersep> exception ( ) ; } \n @ override \n public put <identifiersep> object <identifiersep> response <identifiersep> type put <identifiersep> object ( put <identifiersep> object <identifiersep> type request , input <identifiersep> stream input <identifiersep> data ) throws s3exception { \n <ect>
\t5 <identifier> . put ( peer , reject <identifiersep> message ) ; \n \t5 int size = <identifier> . size ( ) ; \n \t5 long threshold = math . round ( num <identifiersep> waiting <identifiersep> for / <number_literal> . 0 ) ; \n \t5 if ( size > threshold ) { \n <ect>
public string name ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <identifier> <identifiersep> company . name <identifiersep> key ) ; } \n public void set <identifiersep> name ( string value ) { \n <ect>
\t1 catch ( exception e ) \n \t1 { \n \t2 { \n <ect>
\t2 <comment> \n \t2 logger . warning ( record <identifiersep> type . <identifier> <identifiersep> store , new <identifier> <identifiersep> store <identifiersep> record ( ) , <string_literal> , 1 , <number_literal> ) ; \n \t2 <comment> \n \t2 log <identifiersep> provider . assert <identifiersep> exactly ( \n <ect>
\t2 this . local <identifiersep> tasks = <identifier> <identifiersep> topology <identifiersep> context . get <identifiersep> this <identifiersep> worker <identifiersep> tasks ( ) ; \n \t2 this . fields = thrift . grouping <identifiersep> type ( thrift <identifiersep> grouping ) ; \n \t2 this . group <identifiersep> type = this . parse <identifiersep> group <identifiersep> type ( worker <identifiersep> data ) ; \n \t2 string id = <identifier> <identifiersep> topology <identifiersep> context . get <identifiersep> this <identifiersep> task <identifiersep> id ( ) + <string_literal> + stream <identifiersep> id ; \n <ect>
\t3 read <identifiersep> group <identifiersep> record . set <identifiersep> sample ( <string_literal> ) ; \n \t3 read <identifiersep> group <identifiersep> record . set <identifiersep> platform <identifiersep> unit ( <string_literal> ) ; \n \t3 if ( validation <identifiersep> <identifier> == validation <identifiersep> <identifier> . <identifier> ) { \n \t4 log . warn ( e ) ; \n <ect>
\t2 try { \n \t3 url . set <identifiersep> url <identifiersep> stream <identifiersep> handler <identifiersep> factory ( new fs <identifiersep> url <identifiersep> stream <identifiersep> handler <identifiersep> factory ( ) ) ; \n \t2 } catch ( throwable e ) { \n \t3 <comment> \n <ect>
\t4 prefetch . put ( frame ) ; \n \t4 break ; \n \t3 case <identifier> . type : \n \t4 <identifier> pub <identifiersep> rec = new <identifier> ( ) . decode ( frame ) ; \n <ect>
\t3 producer = session . create <identifiersep> producer ( destination ) ; \n \t3 text <identifiersep> message message = session . create <identifiersep> text <identifiersep> message ( ) ; \n \t3 for ( int i = 0 ; i < num <identifiersep> msgs ; i ++ ) { \n \t4 message . set <identifiersep> text ( <string_literal> + ( i + 1 ) ) ; \n <ect>
\t3 <identifier> . close ( ) ; \n \t3 <identifier> . close ( ) ; \n \t3 <identifier> . close ( ) ; \n \t3 key <identifiersep> manager . close <identifiersep> default <identifiersep> key <identifiersep> manager ( ) ; } \n <ect>
\t2 capacity <identifiersep> vo capacity <identifiersep> mem = <identifier> <identifiersep> capacity <identifiersep> dao . find <identifiersep> by <identifiersep> host <identifiersep> id <identifiersep> type ( host <identifiersep> id , capacity . capacity <identifiersep> type <identifiersep> memory ) ; \n \t2 if ( capacity <identifiersep> cpu == null || capacity <identifiersep> mem == null ) { \n \t3 if ( capacity <identifiersep> cpu == null ) { \n <ect>
\t1 if ( ctx . has <identifiersep> <identifier> <identifiersep> privileges ( ) ) { \n \t1 return resolver <identifiersep> function . apply ( identifier ) ; \n \t1 } else { \n \t1 class < ? extends base <identifiersep> message > msg <identifiersep> type = ctx . get <identifiersep> request ( ) . get <identifiersep> class ( ) ; \n <ect>
\t2 <identifier> <identifiersep> app . read ( null , <string_literal> , null , null , response <identifiersep> handler ) ; \n \t2 final service <identifiersep> document service <identifiersep> document = response <identifiersep> handler . await ( ) ; \n \t2 final list < collection > collections = service <identifiersep> document . get <identifiersep> <identifier> <identifiersep> info ( ) . get <identifiersep> <identifier> ( ) . get ( 0 ) . get <identifiersep> collections ( ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <number_literal> , collections . size ( ) ) ; \n <ect>
\t2 dfs <identifiersep> logger <identifiersep> input <identifiersep> streams input <identifiersep> streams ; \n \t2 try { \n \t3 input <identifiersep> streams = dfs <identifiersep> logger . read <identifiersep> header <identifiersep> and <identifiersep> return <identifiersep> stream ( <identifier> , conf ) ; \n \t2 } catch ( log <identifiersep> header <identifiersep> <identifier> <identifiersep> exception e ) { \n <ect>
\t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t5 <identifier> <identifiersep> log . warn ( <string_literal> + written + <string_literal> + in . get <identifiersep> total <identifiersep> read ( ) + <string_literal> + in . get <identifiersep> total <identifiersep> expanded ( ) , ioe ) ; \n \t3 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error <identifier> ) { \n \t4 <identifier> <identifiersep> <identifier> <identifiersep> exception = new io <identifiersep> exception ( <string_literal> ) ; \n <ect>
\t2 get <identifiersep> log <identifiersep> search <identifiersep> credentials ( ) ; \n \t1 <comment> \n \t1 if ( principal <identifiersep> key <identifiersep> credential != null ) { \n \t2 <comment> \n <ect>
\t3 for ( iterator < string > iter = acls . iterator ( ) ; iter . has <identifiersep> next ( ) ; ) { \n \t4 string role <identifiersep> name = iter . next ( ) ; \n \t4 ldap <identifiersep> name <identifier> = new ldap <identifiersep> name ( role <identifiersep> name ) ; \n \t4 <identifier> <identifier> = <identifier> . get <identifiersep> <identifier> ( <identifier> . size ( ) - 1 ) ; \n <ect>
\t2 final queue <identifiersep> view <identifiersep> m <identifiersep> bean queue <identifiersep> view <identifiersep> m <identifiersep> bean = get <identifiersep> proxy <identifiersep> to <identifiersep> queue ( dlq <identifiersep> queue . get <identifiersep> queue <identifiersep> name ( ) ) ; \n \t2 assert <identifiersep> true ( <string_literal> , wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n <ect>
\t1 void do <identifiersep> dtd <identifiersep> fails ( string ext ) throws exception { \n \t2 logger . info ( <string_literal> + ext + <string_literal> ) ; \n \t2 response response = client . target ( generate <identifiersep> url ( <string_literal> , url <identifiersep> prefix + ext ) ) . request ( ) \n \t4 . post ( entity . entity ( bar , <string_literal> ) ) ; \n <ect>
\t2 request . set <identifiersep> time <identifiersep> min ( date <identifiersep> time . parse <identifiersep> <identifier> ( <string_literal> ) ) ; \n \t2 request . set <identifiersep> time <identifiersep> max ( date <identifiersep> time . parse <identifiersep> <identifier> ( <string_literal> ) ) ; \n \t2 final com . google . api . services . calendar . model . free <identifiersep> busy <identifiersep> response result = request <identifiersep> body ( <string_literal> , request ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t2 init <identifiersep> project ( project ) ; \n \t2 ensure <identifiersep> output <identifiersep> folder ( project ) ; \n \t2 if ( this . print <identifiersep> alert <identifiersep> site <identifiersep> report ) { \n \t3 test <identifiersep> case <identifiersep> run <identifiersep> log <identifiersep> report = new test <identifiersep> case <identifiersep> run <identifiersep> log <identifiersep> report ( get <identifiersep> absolute <identifiersep> output <identifiersep> folder ( project ) ) ; } \n <ect>
\t2 return updated <identifiersep> <identifier> ; } \n \t1 private project <identifiersep> instance deserialize <identifiersep> project <identifiersep> desc ( project <identifiersep> request project <identifiersep> request ) { \n \t2 project <identifiersep> instance project <identifiersep> desc = null ; \n \t2 try { \n <ect>
\t4 <comment> \n \t4 try { \n \t5 alerts <identifiersep> node . add <identifiersep> child ( render <identifiersep> alert ( alert ) ) ; \n \t4 } catch ( throwable t ) { \n <ect>
\t1 <identifier> <identifiersep> url = service <identifiersep> uris . remote ( <identifier> <identifiersep> config ) . to <identifiersep> ascii <identifiersep> string ( ) ; \n \t1 storage <identifiersep> properties . enable <identifiersep> snapshots = true ; \n \t1 log . debug ( <string_literal> + <identifier> <identifiersep> url ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 throw new owl <identifiersep> runtime <identifiersep> exception ( e ) ; } } \n \t1 @ override \n \t1 public boolean is <identifiersep> local ( owl <identifiersep> axiom axiom , collection < owl <identifiersep> entity > signature ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + cmd . get <identifiersep> nic <identifiersep> uuid ( ) + <string_literal> + host <identifiersep> mo . get <identifiersep> host <identifiersep> name ( ) ) ; } \n \t3 return new answer ( cmd , true , <string_literal> + cmd . get <identifiersep> nic <identifiersep> uuid ( ) ) ; \n \t2 } catch ( exception e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t2 <comment> \n \t2 if ( ( bit < 0 ) && <identifier> <identifiersep> <identifier> <identifiersep> block . is <identifiersep> <identifier> ( kind ) ) { \n \t3 bit = get <identifiersep> block ( model ) . get <identifiersep> bit ( index ) ; \n \t3 if ( ( bit < 0 ) || ( bit > <number_literal> ) ) { \n <ect>
\t2 zoo <identifiersep> keeper zookeeper = client . get <identifiersep> zoo <identifiersep> keeper ( ) ; \n \t2 return zookeeper . get <identifiersep> children ( zk <identifiersep> path , false ) ; } \n \t1 } ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 private static atomic <identifiersep> integer instance <identifiersep> counter = new atomic <identifiersep> integer ( 0 ) ; \n \t2 public lifecycle <identifiersep> subject ( string name ) { \n \t3 this . name = name ; \n \t3 instance <identifiersep> counter . increment <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 column <identifiersep> index <identifiersep> x = - 1 ; } \n \t2 try { \n \t3 eval <identifiersep> x = meta <identifiersep> parser . parse ( expression <identifiersep> x ) ; \n \t2 } catch ( parsing <identifiersep> exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> , model . key <identifiersep> set ( ) . to <identifiersep> array ( ) ) ; \n \t2 if ( this . view != null ) { \n \t3 this . view . render ( model , request , response ) ; \n \t2 } else { \n <ect>
\t3 items = item <identifiersep> serializer . deserialize ( bytes , serializer ) ; } \n \t2 catch ( throwable e ) \n \t2 { \n \t3 thread <identifiersep> utils . check <identifiersep> interrupted ( e ) ; \n <ect>
\t1 public items <identifiersep> vo do <identifiersep> create <identifiersep> items <identifiersep> table <identifiersep> if <identifiersep> not ( items <identifiersep> vo vo ) { \n \t2 string sql = string <identifiersep> utils <identifiersep> ext . replace <identifiersep> array <identifiersep> merge ( sql <identifiersep> create <identifiersep> items <identifiersep> table <identifiersep> if <identifiersep> not , \n \t4 new string [ ] { <string_literal> , <string_literal> , <string_literal> , <string_literal> } , \n \t4 new string [ ] { vo . get <identifiersep> items <identifiersep> manage <identifiersep> table ( ) , vo . get <identifiersep> <identifier> ( ) , vo . get <identifiersep> <identifier> ( ) , vo . get <identifiersep> items <identifiersep> manage <identifiersep> table ( ) } ) ; \n <ect>
\t4 file path <identifiersep> file = path . to <identifiersep> file ( ) ; \n \t4 if ( path <identifiersep> file . exists ( ) ) \n \t4 { \n \t5 paths <identifiersep> to <identifiersep> clean . add ( path <identifiersep> file ) ; } } \n <ect>
\t1 private void migrate <identifiersep> identifier <identifiersep> <identifier> <identifiersep> property ( ) { \n \t1 try ( final transaction <identifiersep> resource db = entities . transaction <identifiersep> for ( static <identifiersep> database <identifiersep> property <identifiersep> entry . class ) ) { \n \t2 try { \n \t2 final static <identifiersep> database <identifiersep> property <identifiersep> entry property = entities . unique <identifiersep> result ( new static <identifiersep> database <identifiersep> property <identifiersep> entry ( null , <string_literal> , null ) ) ; \n <ect>
\t1 private static final logger logger = logger <identifiersep> factory . get <identifiersep> logger ( server <identifiersep> info <identifiersep> request <identifiersep> handler . class ) ; \n \t1 private volatile server <identifiersep> info <identifiersep> message server <identifiersep> info ; \n \t1 @ override \n \t1 public void exception <identifiersep> caught ( channel <identifiersep> handler <identifiersep> context ctx , exception <identifiersep> event e ) { \n <ect>
\t5 else \n \t6 <identifier> <identifiersep> send <identifiersep> period <identifiersep> bytes = len ; \n \t5 <identifier> <identifiersep> send <identifiersep> period <identifiersep> begin <identifiersep> time += <number_literal> ; \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 for ( resteasy <identifiersep> client client : clients ) { \n \t3 try { \n \t4 client . close ( ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t2 if ( db <identifiersep> connection != null ) { \n \t3 try { \n \t4 db <identifiersep> connection . close ( ) ; \n \t3 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 return ; } \n \t2 if ( result <identifiersep> object != null ) { \n \t3 job . set <identifiersep> result ( result <identifiersep> object ) ; } \n <ect>
\t1 @ override \n \t1 protected void print <identifiersep> formatted <identifiersep> payload ( ) { \n \t2 logger . debug ( <string_literal> + this . <identifier> <identifiersep> major + <string_literal> + this . <identifier> <identifiersep> minor ) ; \n \t2 logger . debug ( <string_literal> + this . type ) ; \n <ect>
<comment> \n \t1 public void add <identifiersep> last ( property <identifiersep> source < ? > property <identifiersep> source ) { \n <ect>
\t2 else if ( ! is <identifiersep> ignore <identifiersep> <identifier> <identifiersep> credentials ( ) ) { \n \t3 throw new invalid <identifiersep> o <identifiersep> auth <identifiersep> parameters <identifiersep> exception ( messages . get <identifiersep> message ( <string_literal> , <string_literal> ) ) ; } \n \t2 else { \n <ect>
\t2 zoo <identifiersep> util . get <identifiersep> root ( instance ) + constants . <identifier> <identifiersep> http <identifiersep> addr , monitor <identifiersep> address . get <identifiersep> bytes ( utf <identifiersep> <number_literal> ) , \n \t2 node <identifiersep> exists <identifiersep> policy . overwrite ) ; \n \t1 log . info ( <string_literal> , monitor <identifiersep> address ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t2 response , <identifier> , time <identifiersep> millis = <identifier> <identifiersep> <identifier> <identifiersep> request ( params . tmp <identifiersep> dir , params . <identifier> <identifiersep> user <identifiersep> keytab , \n <number_literal> params . <identifier> <identifiersep> principal , uri , <string_literal> , \n <number_literal> params . <identifier> <identifiersep> path <identifiersep> local , false , none , params . <identifier> <identifiersep> user ) \n \t2 if not response : \n <ect>
\t5 final list < vpc <identifiersep> vo > inactive <identifiersep> <identifier> = <identifier> <identifiersep> vpc <identifiersep> dao . list <identifiersep> inactive <identifiersep> <identifier> ( ) ; \n \t5 if ( inactive <identifiersep> <identifier> != null ) { \n \t6 s <identifiersep> logger . info ( <string_literal> + inactive <identifiersep> <identifier> . size ( ) + <string_literal> ) ; \n \t6 for ( final vpc <identifiersep> vo vpc : inactive <identifiersep> <identifier> ) { \n <ect>
\t3 if ( alpha >= beta ) { \n \t4 logger . debug ( indent ( node . depth ) + <string_literal> ) ; \n \t4 break ; } \n <comment> \n <ect>
\t4 new <identifiersep> value . set <identifiersep> value ( 1 ) ; \n \t3 } else if ( command . equals ( on <identifiersep> off <identifiersep> type . off ) || command . equals ( open <identifiersep> closed <identifiersep> type . closed ) ) { \n \t4 new <identifiersep> value . set <identifiersep> value ( 0 ) ; } \n \t2 } else { \n <ect>
\t2 logger . info ( str <identifiersep> movie <identifiersep> root <identifiersep> element ) ; \n \t2 response response = target . request ( ) . post ( entity . entity ( str <identifiersep> movie <identifiersep> root <identifiersep> element , <string_literal> ) ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t3 if ( values . get ( <string_literal> ) == null ) { \n \t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t4 return <number_literal> ; \n \t3 } else { \n <ect>
@ override \n public void signal ( server <identifiersep> type server , string hostname , string signal ) throws io <identifiersep> exception { \n \t1 string pid = get <identifiersep> pid ( server , accumulo <identifiersep> home , hostname ) ; \n \t1 if ( pid . trim ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t1 log . debug ( <string_literal> , hadoop <identifiersep> jar <identifiersep> finder ) ; \n \t1 method get <identifiersep> jar = jar <identifiersep> finder . get <identifiersep> method ( <string_literal> , class . class ) ; \n \t1 ret = ( string ) get <identifiersep> jar . invoke ( null , my <identifiersep> class ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 assert . assert <identifiersep> false ( action <identifiersep> db . get <identifiersep> all <identifiersep> stages ( request <identifiersep> id ) . is <identifiersep> empty ( ) ) ; \n \t1 list < stage > stages = action <identifiersep> db . get <identifiersep> all <identifiersep> stages ( request <identifiersep> id ) ; \n \t1 <comment> \n \t1 for ( stage stage : stages ) { \n <ect>
\t4 string version <identifiersep> list = versioned . get <identifiersep> value ( ) ; \n \t4 props = new properties ( ) ; \n \t4 props . load ( new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( version <identifiersep> list . get <identifiersep> bytes ( ) ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public void authorize ( final http <identifiersep> servlet <identifiersep> request request , final service service , final assertion assertion ) { \n \t2 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 registered <identifiersep> service <identifiersep> access <identifiersep> strategy <identifiersep> utils . ensure <identifiersep> service <identifiersep> access <identifiersep> is <identifiersep> allowed ( service , registered <identifiersep> service ) ; \n <ect>
\t9 <string_literal> + profiler <identifiersep> heartbeat <identifiersep> update . to <identifiersep> string ( ) + \n \t9 <string_literal> + profiler <identifiersep> peer <identifiersep> scan . to <identifiersep> string ( ) + \n \t9 <string_literal> + profiler <identifiersep> agent <identifiersep> lb . to <identifiersep> string ( ) ) ; } } \n \t4 } catch ( cloud <identifiersep> runtime <identifiersep> exception e ) { \n <ect>
\t2 dummy <identifiersep> host <identifiersep> server <identifiersep> resource resource = new dummy <identifiersep> host <identifiersep> server <identifiersep> resource ( ) ; \n \t2 try { \n \t3 resource . configure ( <string_literal> , params ) ; \n \t2 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t5 if ( debug ) { \n \t6 log . debug ( <string_literal> + rule ) ; } \n \t5 rule . begin ( namespace <identifiersep> uri , name , list ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 private void do <identifiersep> handle ( http <identifiersep> exchange t ) throws exception { \n \t2 string path = t . get <identifiersep> request <identifiersep> uri ( ) . get <identifiersep> path ( ) ; \n <ect>
\t1 log . info ( <string_literal> + existing <identifiersep> snap . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) + <string_literal> ) ; \n \t1 if ( connection <identifiersep> manager . snapshot <identifiersep> exists ( existing <identifiersep> snap . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) , existing <identifiersep> snap . get <identifiersep> iqn ( ) ) ) { \n \t2 throw new volume <identifiersep> already <identifiersep> exists <identifiersep> exception ( <string_literal> + existing <identifiersep> snap . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) ) ; \n \t1 } else { \n <ect>
\t1 synchronized public void free ( block block ) { \n \t2 long id = block . get <identifiersep> id ( ) ; \n \t2 log ( <string_literal> , id ) ; \n \t2 if ( read <identifiersep> cache . contains <identifiersep> key ( id ) ) { \n <ect>
\t1 reply . set <identifiersep> last <identifiersep> modified ( object <identifiersep> entity . get <identifiersep> object <identifiersep> modified <identifiersep> timestamp ( ) ) ; \n \t1 populate <identifiersep> stored <identifiersep> headers ( reply , object <identifiersep> entity . get <identifiersep> stored <identifiersep> headers ( ) ) ; \n \t1 return reply ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 for ( int i = 0 ; i < message <identifiersep> count ; i ++ ) { \n \t4 message msg = session . create <identifiersep> text <identifiersep> message ( <string_literal> + i ) ; \n \t4 <identifier> . send ( dest , msg ) ; } \n \t3 if ( j % <number_literal> == 0 ) { \n <ect>
\t1 if ( backend <identifiersep> writer <identifiersep> pool != null ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 log . debug ( <string_literal> + backend <identifiersep> writer <identifiersep> pool . get <identifiersep> active <identifiersep> count ( ) ) ; \n \t2 list < runnable > awaiting <identifiersep> execution = backend <identifiersep> writer <identifiersep> pool . shutdown <identifiersep> now ( ) ; \n <ect>
\t1 kerberos <identifiersep> keytab <identifiersep> dao . remove ( kerberos <identifiersep> keytab <identifiersep> dao . find <identifiersep> all ( ) ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 action <identifiersep> log . write <identifiersep> std <identifiersep> out ( <string_literal> ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> resource <identifiersep> exception e ) { \n <ect>
\t3 user <identifiersep> session = user <identifiersep> session != null ? user <identifiersep> session : auth <identifiersep> result . get <identifiersep> session ( ) ; \n \t3 if ( redirect != null ) user <identifiersep> session . set <identifiersep> note ( oidc <identifiersep> login <identifiersep> protocol . logout <identifiersep> redirect <identifiersep> uri , redirect ) ; \n \t3 if ( state != null ) user <identifiersep> session . set <identifiersep> note ( oidc <identifiersep> login <identifiersep> protocol . logout <identifiersep> state <identifiersep> param , state ) ; \n \t3 user <identifiersep> session . set <identifiersep> note ( authentication <identifiersep> manager . keycloak <identifiersep> logout <identifiersep> protocol , oidc <identifiersep> login <identifiersep> protocol . login <identifiersep> protocol ) ; \n <ect>
\t1 if ( audit <identifiersep> ds != null ) { \n \t2 initialized = true ; \n \t1 } else { \n \t2 try { \n <ect>
\t4 try { \n \t5 converter = ( converter < ? > ) class . for <identifiersep> name ( converter <identifiersep> factory . converter <identifiersep> package + converter <identifiersep> name ) \n \t7 . new <identifiersep> instance ( ) ; \n \t4 } catch ( exception e1 ) { \n <ect>
\t2 return build <identifiersep> status <identifiersep> response ( response . status . conflict ) ; \n \t2 } else { \n \t2 return build <identifiersep> status <identifiersep> response ( response . status . not <identifiersep> acceptable ) ; } \n \t1 } catch ( internal <identifiersep> error e ) { \n <ect>
\t3 } else { \n \t4 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code + <string_literal> + values . get ( <string_literal> ) ) ; \n \t4 s <identifiersep> snapshot . set ( values . get ( <string_literal> ) ) ; } \n \t2 } else { \n <ect>
\t3 if ( pin == null ) { \n \t4 logger . warn ( <string_literal> + item <identifiersep> name + <string_literal> ) ; \n \t4 continue ; } \n \t3 if ( pin . get <identifiersep> binding <identifiersep> type ( ) == <identifier> <identifiersep> binding <identifiersep> config . binding <identifiersep> type . in ) { \n <ect>
\t2 } ) ; \n \t2 return super . configure ( name , params ) ; } \n \t1 @ override \n \t1 public boolean start ( ) { \n <ect>
\t5 suite <identifiersep> context . add <identifiersep> auth <identifiersep> server <identifiersep> <identifier> <identifiersep> info ( 0 , c ) ; \n \t4 } ) ; \n \t3 if ( suite <identifiersep> context . get <identifiersep> auth <identifiersep> server <identifiersep> <identifier> <identifiersep> info ( ) . is <identifiersep> empty ( ) ) { \n \t4 throw new runtime <identifiersep> exception ( string . format ( <string_literal> , auth <identifiersep> server <identifiersep> backend ) ) ; } \n <ect>
\t1 logger . info ( <string_literal> ) \n \t1 return package <identifiersep> names \n stack <identifiersep> packages <identifiersep> config = default ( <string_literal> , none ) \n if stack <identifiersep> packages <identifiersep> config is none : \n <ect>
<number_literal> 0l , \n <number_literal> time <identifiersep> unit . milliseconds , \n <number_literal> blocking <identifiersep> q , \n <number_literal> rejected <identifiersep> execution <identifiersep> handler ) ; \n <ect>
\t1 { \n \t2 indent = indent . substring ( <number_literal> ) ; } \n \t1 public void include <identifiersep> artifact ( artifact artifact ) \n \t1 { \n <ect>
\t2 file <identifiersep> read ( contents ) } \n \t1 override fun login <identifiersep> activity ( ) : k <identifiersep> class < * > ? { \n \t2 return login <identifiersep> screen : : class } \n \t1 private fun set <identifiersep> <identifier> ( path : string ) { \n <ect>
\t7 return ; } } \n \t4 } while ( n > 0 ) ; } \n \t3 @ override \n \t3 public void on <identifiersep> release ( nginx <identifiersep> clojure <identifiersep> asyn <identifiersep> socket s , long sc ) { \n <ect>
\t4 cert <identifiersep> loc ) ; \n \t2 signed <identifiersep> info <identifier> = new signed <identifiersep> info ( ) ; \n \t2 signed <identifiersep> info <identifier> = new signed <identifiersep> info ( ) ; \n \t2 xml <identifiersep> encodable <identifiersep> tester . encode <identifiersep> decode <identifiersep> test ( <string_literal> , <identifier> , <identifier> , <identifier> ) ; \n <ect>
\t3 return handle <identifiersep> async <identifiersep> request <identifiersep> timeout <identifiersep> exception ( \n \t5 ( async <identifiersep> request <identifiersep> timeout <identifiersep> exception ) ex , headers , status , request ) ; } \n \t2 else { \n <ect>
\t2 configuration job <identifiersep> conf = null ; \n \t2 try { \n \t3 job <identifiersep> conf = new x <identifiersep> configuration ( new string <identifiersep> reader ( coord <identifiersep> job . get <identifiersep> conf ( ) ) ) ; } \n \t2 catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 { \n \t2 logger . info ( <string_literal> ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 schema <identifiersep> keyspace . truncate ( ) ; \n <ect>
\t1 public void <identifier> ( string msg , string type ) { \n \t2 try { \n \t3 <identifier> <identifiersep> factory . create <identifiersep> <identifier> ( type ) . send ( project . get <identifiersep> name ( ) , msg ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( result . equals ( <string_literal> ) ) { \n \t3 <identifier> <identifiersep> context . wait <identifiersep> for <identifiersep> task <identifiersep> progress <identifiersep> done ( mor <identifiersep> task ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t1 public boolean <identifier> <identifiersep> job ( base <identifiersep> object object ) \n \t1 { \n \t2 try { \n \t3 get <identifiersep> protected <identifiersep> plugin ( ) . <identifier> <identifiersep> job ( object , this . context ) ; \n <ect>
\t2 version <identifiersep> dao <identifiersep> impl dao = component <identifiersep> locator . inject ( version <identifiersep> dao <identifiersep> impl . class ) ; \n \t2 database <identifiersep> upgrade <identifiersep> checker checker = component <identifiersep> locator . inject ( database <identifiersep> upgrade <identifiersep> checker . class ) ; \n \t2 string version = dao . get <identifiersep> current <identifiersep> version ( ) ; \n \t2 if ( ! version . equals ( <string_literal> ) ) { \n <ect>
string get <identifiersep> set <identifiersep> preference <identifiersep> sql ( ) { \n \t1 return set <identifiersep> preference <identifiersep> sql ; } \n @ override \n public long <identifiersep> primitive <identifiersep> iterator get <identifiersep> user <identifiersep> i <identifiersep> ds ( ) throws taste <identifiersep> exception { \n <ect>
\t3 print <identifiersep> class <identifiersep> javadoc ( out , table ) ; \n \t2 else \n \t3 print <identifiersep> class <identifiersep> javadoc ( out , <string_literal> + table . get <identifiersep> qualified <identifiersep> input <identifiersep> name ( ) + <string_literal> ) ; } \n \t1 protected void generate <identifiersep> sequences ( schema <identifiersep> definition schema ) { \n <ect>
\t2 if ( <identifier> <identifiersep> monitor <identifiersep> thread != null ) { \n \t3 <identifier> <identifiersep> monitor <identifiersep> thread . interrupt ( ) ; \n \t3 <identifier> <identifiersep> monitor <identifiersep> thread = null ; } } \n \t1 public void start <identifiersep> thread ( ) { \n <ect>
\t7 get <identifiersep> members ( <identifier> . get <identifiersep> groups <identifiersep> attribute ( ) , attrs , group <identifiersep> dn <identifiersep> to <identifiersep> id ) ) ; } \n \t1 } ) ; \t1 } \n private static void load <identifiersep> ldap <identifiersep> groups ( ldap <identifiersep> client ldap , final ldap <identifiersep> integration <identifiersep> configuration <identifier> , final map < string , string > user <identifiersep> dn <identifiersep> to <identifiersep> id , final map < string , string > group <identifiersep> dn <identifiersep> to <identifiersep> id , final map < string , set < string > > groups ) throws ldap <identifiersep> exception { \n \t1 if ( verbose ) { \n <ect>
\t5 irc <identifiersep> provider <identifiersep> factory , \n \t5 hashtable ) ; \n \t2 { \n <ect>
\t4 if ( ! <identifier> . grant <identifiersep> <identifier> ( principal ) ) { \n \t5 handle <identifiersep> failure ( <string_literal> + principal <identifiersep> name + <string_literal> + a ) ; \n \t5 if ( import <identifiersep> behavior == import <identifiersep> behavior . <identifier> && \n \t7 get <identifiersep> principal <identifiersep> manager ( ) . get <identifiersep> principal ( principal <identifiersep> name ) == null ) { \n <ect>
\t4 log . warn ( <string_literal> + path <identifiersep> to <identifiersep> external <identifiersep> messages ) ; \n \t4 path <identifiersep> to <identifiersep> external <identifiersep> messages = null ; <comment> \n \t4 external <identifiersep> file = null ; \n \t3 } else if ( ! external <identifiersep> file . can <identifiersep> read ( ) ) { \n <ect>
\t2 <identifier> <identifiersep> metrics = new <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> metrics ( <identifier> , <identifier> <identifiersep> counter , <identifier> <identifiersep> sample , call <identifiersep> sample , missing <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> ref ) ; \n \t2 <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> metrics <identifiersep> file . add <identifiersep> metric ( <identifier> <identifiersep> metrics ) ; \n \t2 <identifier> <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> metrics <identifiersep> file . write ( <identifier> <identifiersep> metrics <identifiersep> file ) ; \n \t2 for ( final string condition : un <identifiersep> <identifier> <identifiersep> states <identifiersep> map . key <identifiersep> set ( ) ) { \n <ect>
\t2 public void subscription <identifiersep> created ( subscription <identifiersep> event evt ) \n \t2 { \n \t3 synchronized ( this ) \n \t3 { \n <ect>
\t3 final set < string > authn <identifiersep> header <identifiersep> values = new hash <identifiersep> set < string > ( ) ; \n \t3 for ( final header header : authn <identifiersep> headers ) { \n \t4 authn <identifiersep> header <identifiersep> values . add ( header . get <identifiersep> value ( ) ) ; } \n \t3 assert <identifiersep> true ( <string_literal> , authn <identifiersep> header <identifiersep> values . contains ( <string_literal> ) ) ; \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , session . get <identifiersep> attribute ( <string_literal> ) ) ; <comment> \n \t1 @ test \n \t1 public void read <identifiersep> write <identifiersep> name <identifiersep> not <identifiersep> in <identifiersep> whitelist ( ) throws exception { \n \t2 log . warn ( <string_literal> , <string_literal> , <string_literal> ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n <comment> \n <comment> \n <comment> \n <ect>
\t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 logger . warn ( <string_literal> + properties <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 logger . warn ( <string_literal> + properties <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; } \n <ect>
\t2 } catch ( insufficient <identifiersep> address <identifiersep> capacity <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . insufficient <identifiersep> capacity <identifiersep> error , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( insufficient <identifiersep> virtual <identifiersep> network <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( id + <string_literal> + desc <identifiersep> file . get <identifiersep> name ( ) ) ; \n \t3 create <identifiersep> desc <identifiersep> file ( ) ; \n \t3 logger . debug ( id + <string_literal> + <identifier> <identifiersep> file . get <identifiersep> name ( ) ) ; \n \t3 dump <identifiersep> feature <identifiersep> vectors ( ) ; \n <ect>
\t3 private final atomic <identifiersep> integer counter = new atomic <identifiersep> integer ( ) ; \n \t3 private final thread . uncaught <identifiersep> exception <identifiersep> handler handler = new thread . uncaught <identifiersep> exception <identifiersep> handler ( ) { \n \t4 @ override \n \t4 public void uncaught <identifiersep> exception ( thread t , throwable e ) { \n <ect>
\t3 <comment> \n \t3 if ( root != null ) { \n \t4 log . error ( <string_literal> , root . to <identifiersep> string ( ) , e ) ; } \n \t3 else { \n <ect>
\t1 @ override \n \t1 public string find <identifiersep> text ( class a <identifiersep> class , string a <identifiersep> text <identifiersep> name , locale locale , string default <identifiersep> message , object [ ] args , value <identifiersep> stack value <identifiersep> stack ) { \n \t2 string indexed <identifiersep> text <identifiersep> name = null ; \n \t2 if ( a <identifiersep> text <identifiersep> name == null ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t3 if ( recv <identifiersep> message . is <identifiersep> valid ) { \n \t4 logger . trace ( <string_literal> ) ; \n \t4 send <identifiersep> response ( ack ) ; \n \t3 } else { \n <ect>
\t2 send <identifiersep> heart <identifiersep> beat ( ) ; } \n \t2 thread . sleep ( sleep <identifiersep> time ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n \t1 } catch ( exception ex ) { \n <ect>
\t1 log . info ( <string_literal> + sink . process ( ) ) ; \n \t1 <comment> \n \t1 if ( i == 1 ) { \n \t2 thread . sleep ( <number_literal> ) ; } } \n <ect>
\t3 logger . warn ( <string_literal> , e ) ; } \n \t2 jna <identifiersep> available = v ; } \n \t1 static void try <identifiersep> <identifier> ( ) { \n \t2 if ( ! jna <identifiersep> available ) { \n <ect>
\t5 <identifier> . set <identifiersep> last <identifiersep> heartbeat <identifiersep> time ( date <identifiersep> helper . current <identifiersep> <identifier> <identifiersep> time ( ) ) ; \n \t5 <identifier> <identifiersep> dao . update ( <identifier> ) ; \n \t5 persist <identifiersep> context . commit <identifiersep> transaction ( ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t4 while ( in . available ( ) > 0 ) { \n \t5 system . out . print ( in . read ( ) ) ; } \n \t4 return true ; \n \t3 } finally { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <identifier> <identifiersep> replay <identifiersep> batch = vectorized <identifiersep> batch <identifiersep> util . make <identifiersep> like ( batch ) ; } \n protected void display <identifiersep> batch <identifiersep> columns ( vectorized <identifiersep> row <identifiersep> batch batch , string batch <identifiersep> name ) { \n <ect>
\t1 string value = get <identifiersep> property ( server <identifiersep> task <identifiersep> timeout ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> numeric ( value ) ) { \n \t1 return integer . parse <identifiersep> int ( value ) ; \n \t1 } else { \n <ect>
\t4 if ( url <identifiersep> path . index <identifiersep> of ( ' ! ' ) > 0 ) { \n \t5 url <identifiersep> path = url <identifiersep> path . substring ( 0 , url <identifiersep> path . index <identifiersep> of ( ' ! ' ) ) ; } \n \t4 if ( jar <identifiersep> path != null && ! jar <identifiersep> path . equals ( url <identifiersep> path ) ) { \n \t5 continue ; } \n <ect>
\t5 ( ( bundle ) plugin <identifiersep> table . get <identifiersep> model ( ) \n \t7 . get <identifiersep> value <identifiersep> at ( selected <identifiersep> rows [ i ] , 0 ) ) . update ( ) ; } \n \t4 catch ( bundle <identifiersep> exception ex ) \n \t4 { \n <ect>
\t1 protected void internal <identifiersep> receive <identifiersep> update ( string item <identifiersep> name , state new <identifiersep> state ) { \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t2 logger . debug ( <string_literal> , client , service ) ; \n \t2 if ( service != null ) { \n \t3 request . set <identifiersep> attribute ( cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> service , service . get <identifiersep> id ( ) ) ; \n \t3 if ( ! is <identifiersep> delegated <identifiersep> client <identifiersep> authorized <identifiersep> for <identifiersep> service ( client , service ) ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 if ( file . exists ( ) && file . last <identifiersep> modified ( ) > <identifier> <identifiersep> context . clock ( ) . now ( ) - <number_literal> * <number_literal> * <number_literal> ) { \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 public boolean has <identifiersep> <identifier> ( ) { \n \t2 return <identifier> ; } \n \t1 private void move <identifiersep> blob ( bucket tmp <identifiersep> blob ) { \n \t2 if ( tmp <identifiersep> blob == null ) { \n <ect>
\t3 locked <identifiersep> select <identifiersep> peers ( <identifier> <identifiersep> high <identifiersep> capacity <identifiersep> peers , how <identifiersep> many , exclude , matches , mask ) ; \n \t2 } finally { release <identifiersep> read <identifiersep> lock ( ) ; } \n \t2 if ( matches . size ( ) < how <identifiersep> many ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 theme <identifiersep> modules . put ( module . get <identifiersep> id ( ) , module ) ; \n \t2 <identifier> . add ( theme <identifiersep> info ) ; } \n \t2 else { \n \t2 <comment> \n <ect>
\t1 public void run ( ) { \n \t1 try { \n \t2 hive <identifiersep> meta <identifiersep> store . main ( new string [ ] { <string_literal> , <string_literal> , string . value <identifiersep> of ( ms <identifiersep> port ) } ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t8 <identifier> <identifiersep> endpoint . fail ( ) ; } } } \n \t5 <comment> \n \t5 packet . release ( ) ; } } \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 } else { \n \t4 runtime . get <identifiersep> runtime ( ) . exec ( command <identifiersep> line ) ; \n \t4 logger . info ( <string_literal> , command <identifiersep> line ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 client . cancel <identifiersep> delegation <identifiersep> token ( metastore <identifiersep> token <identifiersep> str <identifiersep> form ) ; \n \t3 log . debug ( <string_literal> + id + <string_literal> + job <identifiersep> status ) ; \n \t3 delegation <identifiersep> token <identifiersep> cache . get <identifiersep> string <identifiersep> form <identifiersep> token <identifiersep> cache ( ) . remove <identifiersep> delegation <identifiersep> token ( id ) ; } } } \n \t1 catch ( exception ex ) { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( <string_literal> ) . iterator ( ) . next ( ) . state ( ) , equal <identifiersep> to ( started ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( <string_literal> ) . size ( ) , equal <identifiersep> to ( 0 ) ) ; \n \t2 string orig <identifiersep> primary <identifiersep> node <identifiersep> id = cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( 0 ) . primary <identifiersep> shard ( ) . current <identifiersep> node <identifiersep> id ( ) ; \n \t2 string orig <identifiersep> replica <identifiersep> node <identifiersep> id = cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( 0 ) . replica <identifiersep> shards ( ) . get ( 0 ) . current <identifiersep> node <identifiersep> id ( ) ; \n <ect>
\t3 this . payment <identifiersep> methods <identifiersep> tokens . clear ( ) ; \n \t3 if ( this . gateway . customer ( ) . delete ( this . customer . get <identifiersep> id ( ) ) . is <identifiersep> success ( ) ) { \n \t4 log . info ( <string_literal> , this . customer . get <identifiersep> id ( ) ) ; \n \t3 } else { \n <ect>
\t2 { \n \t3 transform <identifiersep> engine <identifiersep> wrapper < <identifier> <identifiersep> transform <identifiersep> engine > <identifier> <identifiersep> transform <identifiersep> engine <identifiersep> wrapper = get <identifiersep> <identifier> <identifiersep> transform <identifiersep> engine ( ) ; \n \t3 if ( <identifier> <identifiersep> transform <identifiersep> engine <identifiersep> wrapper . get <identifiersep> wrapped ( ) != null ) \n \t3 { \n <ect>
<comment> \n \t1 public static void run <identifiersep> client <identifiersep> inline ( string class <identifiersep> name , string client <identifiersep> name , string args [ ] , \n \t9 log log , class <identifiersep> loader cl ) throws exception { \n \t2 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 return null ; } \n \t2 resource <identifiersep> manager . retrieve <identifiersep> job <identifiersep> status ( job ) ; \n \t2 long time = system . current <identifiersep> time <identifiersep> millis ( ) / 1000l ; \n \t2 if ( time - job . get <identifiersep> date <identifiersep> started ( ) > long <identifiersep> job <identifiersep> threshold ) { \n <ect>
\t3 if ( ! <identifier> <identifiersep> key <identifiersep> file . is <identifiersep> absolute ( ) ) \n \t4 <identifier> <identifiersep> key <identifiersep> file = new file ( <identifier> <identifiersep> context . get <identifiersep> config <identifiersep> dir ( ) , args [ <number_literal> ] ) ; \n \t3 if ( ! <identifier> <identifiersep> key <identifiersep> file . can <identifiersep> read ( ) ) { \n \t4 l . log ( get <identifiersep> prefix ( ) + <string_literal> + args [ <number_literal> ] ) ; \n <ect>
\t1 @ inject \n \t1 private cdi <identifiersep> injection <identifiersep> book <identifiersep> writer writer ; \n \t1 @ override \n \t1 public void set <identifiersep> up ( string key ) { \n <ect>
\t3 file file = new file ( get <identifiersep> prop ( <identifier> ) + <identifier> + get <identifiersep> prop ( <identifier> ) ) ; \n \t3 if ( file . can <identifiersep> read ( ) ) { \n \t4 files . add ( file ) ; \n \t3 } else { \n <ect>
<comment> \n \t1 public void stop <identifiersep> execution ( long execution <identifiersep> id ) \n \t3 throws no <identifiersep> such <identifiersep> job <identifiersep> execution <identifiersep> exception , job <identifiersep> execution <identifiersep> not <identifiersep> running <identifiersep> exception { \n <ect>
\t3 if ( this . query <identifiersep> time <identifiersep> limit != 0 && elapsed > this . query <identifiersep> time <identifiersep> limit ) { \n \t4 string message = string . format ( \n \t6 <string_literal> , \n \t6 <identifier> . get <identifiersep> name ( ) , result . size ( ) , limit , elapsed , this . query <identifiersep> time <identifiersep> limit , params , result <identifiersep> range , postfix ) ; \n <ect>
\t3 iterator < <identifier> <identifiersep> value > new <identifiersep> defs <identifiersep> it = new <identifiersep> defs . iterator ( ) ; \n \t3 while ( new <identifiersep> defs <identifiersep> it . has <identifiersep> next ( ) ) \n \t4 out . remove ( new <identifiersep> defs <identifiersep> it . next ( ) ) ; \n \t3 <comment> \n <ect>
\t3 byte <identifiersep> buf buffer = allocator . buffer ( ) ; \n \t3 int written = buffer . write <identifiersep> bytes ( in , chunk <identifiersep> size ) ; \n \t3 <identifier> = <identifier> <identifiersep> raw <identifiersep> buffer ( allocator , buffer ) ; \n \t3 offset += written ; \n <ect>
\t3 result = new type <identifiersep> variable ( id , this ) ; \n \t3 type <identifiersep> variable <identifiersep> list . set ( id , result ) ; \n \t3 type <identifiersep> variable <identifiersep> map . put ( local , result ) ; \n \t3 if ( debug ) { \n <ect>
\t5 log . error ( <string_literal> , e ) ; \n \t5 j <identifiersep> meter <identifiersep> utils . report <identifiersep> error <identifiersep> to <identifiersep> user ( e . get <identifiersep> message ( ) ) ; } \n \t3 } ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 long free <identifiersep> mem = runtime . get <identifiersep> runtime ( ) . free <identifiersep> memory ( ) ; \n \t2 long used <identifiersep> mem = total <identifiersep> mem - free <identifiersep> mem ; \n \t2 function < long , string > f = platform <identifiersep> info : : str <identifiersep> <identifier> ; \n \t2 long pid = get <identifiersep> process <identifiersep> id ( ) ; \n <ect>
\t6 gossip <identifiersep> data data = new gossip <identifiersep> data ( ) ; \n \t6 data . read <identifiersep> from ( input ) ; \n \t6 dump ( data ) ; } } \n \t4 catch ( throwable t ) { \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t3 } else if ( new <identifiersep> agent <identifiersep> config . exists ( ) ) { \n \t4 logger . warn ( <string_literal> , agent <identifiersep> config . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t4 logger . warn ( <string_literal> , new <identifiersep> agent <identifiersep> config . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n <ect>
\t2 if ( semantic <identifiersep> type . get <identifiersep> domain ( ) == null ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( semantic <identifiersep> type . get <identifiersep> type ( ) == null ) { \n <ect>
\t4 s <identifiersep> logger . trace ( <string_literal> ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t3 protected boolean handle <identifiersep> authentication ( http <identifiersep> servlet <identifiersep> request request , http <identifiersep> servlet <identifiersep> response response , string address ) { \n \t4 <comment> \n \t4 final string header = request . get <identifiersep> header ( proxy <identifiersep> authorization . to <identifiersep> string ( ) ) ; \n \t4 if ( ! authentication <identifiersep> string . equals ( header ) ) { \n <ect>
\t2 collection . put ( id , book ) ; \n \t2 log . info ( <string_literal> + id + <string_literal> + book ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 read <identifiersep> process <identifiersep> event . fire ( <string_literal> ) ; \n <ect>
\t4 if ( backup <identifiersep> type . is <identifiersep> valid <identifiersep> name ( backup ) ) { \n \t5 backups . add ( backup ) ; } } } \n \t2 int offset = ( backups . size ( ) - 1 - revision ) ; \n \t2 if ( revision < 0 || offset < 0 || offset >= backups . size ( ) ) { \n <ect>
\t1 raise exception ( <string_literal> ) \n \t1 ok , si . h <identifiersep> std <identifiersep> error = <identifier> <identifiersep> safe <identifiersep> duplicate <identifiersep> handle ( err <identifiersep> handle ) \n \t1 if not ok : \n \t1 raise exception ( <string_literal> ) \n <ect>
\t2 headers . set ( <string_literal> , get <identifiersep> authorization <identifiersep> header ( client <identifiersep> id , client <identifiersep> secret ) ) ; \n \t2 map < string , object > map = post <identifiersep> for <identifiersep> map ( check <identifiersep> token <identifiersep> endpoint <identifiersep> url , form <identifiersep> data , headers ) ; \n \t2 if ( map . contains <identifiersep> key ( <string_literal> ) ) { \n <ect>
\t6 if ( ! header <identifiersep> filter <identifiersep> strategy . apply <identifiersep> filter <identifiersep> to <identifiersep> external <identifiersep> headers ( header . get <identifiersep> name ( ) , header . get <identifiersep> value ( ) , exchange ) ) { \n \t7 in <identifiersep> message . set <identifiersep> header ( header . get <identifiersep> name ( ) , header . get <identifiersep> value ( ) ) ; } } \n \t4 } else { \n \t5 in <identifiersep> message . set <identifiersep> header ( key , value ) ; } \n <ect>
\t3 } else { \n \t4 log . warn ( <string_literal> + r . get <identifiersep> name ( ) ) ; \n \t4 return false ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3 names [ i ] = registry . get <identifiersep> string <identifiersep> tag <identifiersep> at ( i ) ; } \n \t2 if ( debug ) { \n \t3 bc <identifiersep> log . logger . info ( <string_literal> ) ; \n \t3 for ( int i = 0 ; i < names . length ; i ++ ) { \n <ect>
\t2 final <identifier> <identifiersep> user user ; \n \t2 try { \n \t3 user = commit . get <identifiersep> user ( ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 context . close ( ) ; \n \t2 executor . shutdown <identifiersep> now ( ) ; } \n \t1 private void print ( atomic <identifiersep> integer failures , atomic <identifiersep> integer timeouts , atomic <identifiersep> integer <identifier> , long <identifier> <identifiersep> processed ) { \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t1 <comment> \n \t1 ex . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t1 err <identifiersep> code = http <identifiersep> servlet <identifiersep> response . sc <identifiersep> forbidden ; \n \t1 authentication <identifiersep> ex = ex ; \n <ect>
\t3 { \n \t4 set <identifiersep> method = find <identifiersep> setter ( get <identifiersep> method , object . get <identifiersep> class ( ) ) ; } \n \t3 if ( set <identifiersep> method == null ) \n \t3 { \n <ect>
\t3 log . debug ( config <identifiersep> info ( <string_literal> , <identifier> <identifiersep> port ) ) ; \n \t3 log . debug ( config <identifiersep> info ( <string_literal> , msg <identifiersep> queue <identifiersep> limit ) ) ; \n \t3 log . debug ( config <identifiersep> info ( <string_literal> , min <identifiersep> buffered <identifiersep> msg <identifiersep> cnt ) ) ; \n \t3 log . debug ( config <identifiersep> info ( <string_literal> , buf <identifiersep> size <identifiersep> ratio ) ) ; \n <ect>
\t6 <string_literal> + \n \t6 <string_literal> + cert <identifiersep> dir + <string_literal> + \n \t6 <string_literal> ) ; \n \t3 } else { \n <ect>
public static void fatal ( final string caller , final string message , final throwable error ) { \n \t1 string id = ( caller == null ) ? messages . get <identifiersep> instance ( ) . get <identifiersep> string ( <string_literal> ) : caller ; <comment> \n \t1 if ( logger . log <identifiersep> level < = i <identifiersep> logger . fatal ) { \n \t1 if ( logger . version <identifiersep> helper != null ) { \n <ect>
\t4 pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . iscsi <identifiersep> lun && pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . iscsi && pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . <identifier> && \n \t4 pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . shared <identifiersep> mount <identifiersep> point && pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . pre <identifiersep> setup && pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . <identifier> && \n \t4 pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . rbd && pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . <identifier> && pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . <identifier> && \n \t4 pool . get <identifiersep> pool <identifiersep> type ( ) != storage <identifiersep> pool <identifiersep> type . <identifier> ) { \n <ect>
\t3 if ( <identifier> != null && ! is <identifiersep> master ( <identifier> , <identifier> , v ) ) \n \t4 i . remove ( ) ; \n \t3 last = current ; } \n \t2 sorted <identifiersep> list < version > set = new sorted <identifiersep> list < > ( filtered ) ; \n <ect>
\t3 try { \n \t4 vm <identifiersep> map = vm . get <identifiersep> all <identifiersep> records ( conn ) ; <comment> \n \t4 break ; \n \t3 } catch ( final throwable e ) { \n <ect>
\t3 return false ; } } \n \t1 private void invoke <identifiersep> phase ( <identifier> <identifiersep> context context , phase <identifiersep> id phase <identifiersep> id ) { \n \t2 <identifier> <identifiersep> utils . notify <identifiersep> before <identifiersep> listeners ( phase <identifiersep> id , this , context ) ; \n \t2 if ( phase <identifiersep> id == phase <identifiersep> id . apply <identifiersep> request <identifiersep> values ) { \n <ect>
<comment> \n \t1 public boolean contains <identifiersep> transition ( final <identifier> <identifiersep> state state , final string transition ) { \n \t2 if ( state == null ) { \n <ect>
\t3 synchronized ( checkpoint <identifiersep> lock ) { \n \t4 global <identifiersep> modification <identifiersep> time = long . max <identifiersep> value ; \n \t4 is <identifiersep> running = false ; } } \n <ect>
\t7 } catch ( exception e ) { \n \t8 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t8 try { \n \t9 int stop <identifiersep> response <identifiersep> code = execute <identifiersep> stop ( server , developer <identifiersep> server , username , true ) ; \n <ect>
\t3 . properties ( collection <identifiersep> utils . wrap ( client . class . get <identifiersep> simple <identifiersep> name ( ) , client . get <identifiersep> name ( ) ) ) \n \t3 . build ( ) ; \n \t2 final <identifier> <identifiersep> execution <identifiersep> result result = delegated <identifiersep> authentication <identifiersep> policy <identifiersep> <identifier> . execute ( context ) ; \n \t2 if ( ! result . is <identifiersep> execution <identifiersep> failure ( ) ) { \n <ect>
\t3 for ( int i = 0 ; i < cookies . length ; i ++ ) { \n \t4 cookie c = cookies [ i ] ; \n \t4 out . println ( <string_literal> + i + <string_literal> + c . get <identifiersep> name ( ) + <string_literal> + c . get <identifiersep> value ( ) ) ; \n \t4 if ( c . get <identifiersep> name ( ) . equals ( <string_literal> ) && c . get <identifiersep> value ( ) . index <identifiersep> of ( <string_literal> ) != - 1 ) { \n <ect>
\t3 log . info ( <string_literal> , method <identifiersep> name ) ; \n \t3 try { \n \t4 list = arrays . as <identifiersep> list ( new framework <identifiersep> method ( <identifier> . get <identifiersep> method ( method <identifiersep> name ) ) ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception <identifier> ) { \n <ect>
\t4 as <identifiersep> string = as <identifiersep> string . substring ( 0 , as <identifiersep> string . length ( ) - <number_literal> ) ; <comment> \n \t4 log . debug ( <string_literal> ) ; \n \t4 send <identifiersep> text ( as <identifiersep> string ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public long get <identifiersep> host <identifiersep> added <identifiersep> count ( ) { \n \t2 return this . host <identifiersep> added <identifiersep> count . get ( ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> host <identifiersep> removed ( host host ) { \n <ect>
\t3 value = value . substring ( 0 , value . index <identifiersep> of ( ' / ' ) ) . trim ( ) ; } \n \t2 try { \n \t3 return integer . parse <identifiersep> int ( value ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 @ before \n \t1 public void clean <identifiersep> database ( ) { \n \t2 try ( final tx tx = app . tx ( ) ) { \n \t3 final list < ? extends node <identifiersep> interface > nodes = app . node <identifiersep> query ( ) . get <identifiersep> as <identifiersep> list ( ) ; \n <ect>
\t4 msg . write <identifiersep> message ( <identifier> <identifiersep> out ) ; \n \t4 <identifier> <identifiersep> out . flush ( ) ; \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 if ( is <identifiersep> class <identifiersep> excluded ( member <identifiersep> class ) ) { \n \t3 log . warn ( <string_literal> , member ) ; \n \t3 return false ; } \n \t2 if ( <identifier> <identifiersep> proxy <identifiersep> member <identifiersep> access && proxy <identifiersep> util . is <identifiersep> proxy <identifiersep> member ( member , target ) ) { \n <ect>
\t4 if ( uri != null ) { \n \t5 return uri ; \n \t5 log . debug ( <string_literal> , action <identifiersep> mapper ) ; } } } \n <ect>
\t1 private static final logger logger = logger . get <identifiersep> logger ( ttl <identifiersep> agent . class . get <identifiersep> name ( ) ) ; \n \t1 private ttl <identifiersep> agent ( ) { \n \t2 throw new instantiation <identifiersep> error ( <string_literal> ) ; } \n \t1 public static void <identifier> ( string agent <identifiersep> args , instrumentation inst ) { \n <ect>
\t5 update <identifiersep> user <identifiersep> vm <identifiersep> service <identifiersep> offering ( user <identifiersep> vm , vm <identifiersep> snapshot <identifiersep> vo ) ; } \n \t3 } ) ; \n \t3 return user <identifiersep> vm ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 msg . append ( <string_literal> + <identifier> ) ; \n \t2 return <identifier> <identifiersep> mock . find ( arg0 , <identifier> , <identifier> ) ; } \n \t1 @ override \n \t1 public api <identifiersep> object <identifiersep> base find <identifiersep> by <identifiersep> fqn ( class < ? extends api <identifiersep> object <identifiersep> base > arg0 , string <identifier> ) throws io <identifiersep> exception { \n <ect>
\t4 map <identifiersep> red <identifiersep> util . setup <identifiersep> udf <identifiersep> context ( j <identifiersep> conf ) ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n \t4 string msg = <string_literal> ; \n \t4 throw new runtime <identifiersep> exception ( msg , ioe ) ; } \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t5 throw new server <identifiersep> exception ( <string_literal> \n \t6 + <string_literal> , e ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 if ( state == power <identifiersep> state . power <identifiersep> on ) { \n \t5 vm <identifiersep> states . put ( vm <identifiersep> name , new host <identifiersep> vm <identifiersep> state <identifiersep> report <identifiersep> entry ( state , conn . get <identifiersep> host <identifiersep> name ( ) ) ) ; } \n \t3 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 return false ; } \n \t2 final ldap <identifiersep> entry entry = result . get <identifiersep> entry ( ) ; \n \t2 final ldap <identifiersep> attribute attribute = entry . get <identifiersep> attribute ( this . spnego <identifiersep> attribute <identifiersep> name ) ; \n <ect>
\t6 . or <identifiersep> else ( null ) ; \n \t4 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( sts ) ) { \n \t5 final security <identifiersep> token <identifiersep> ticket <identifier> = ticket <identifiersep> registry . get <identifiersep> ticket ( sts , security <identifiersep> token <identifiersep> ticket . class ) ; \n \t5 if ( <identifier> == null || <identifier> . is <identifiersep> expired ( ) ) { \n <ect>
\t3 + <string_literal> + <string_literal> ) ; \n \t2 attempt <identifiersep> client <identifiersep> re <identifiersep> login ( ) ; \n \t2 throw e ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( this . protection . equals ( protection <identifiersep> all ) || this . protection . equals ( protection <identifiersep> encryption ) ) { \n \t3 protected <identifiersep> username = encrypt <identifiersep> text ( protected <identifiersep> username ) ; \n \t3 protected <identifiersep> password = encrypt <identifiersep> text ( protected <identifiersep> password ) ; \n \t3 if ( protected <identifiersep> username == null || protected <identifiersep> password == null ) { \n <ect>
<number_literal> org . dspace . core . constants . write ) ; \n \t3 org . dspace . content . collection collection = collection <identifiersep> service . find <identifiersep> by <identifiersep> id <identifiersep> or <identifiersep> legacy <identifiersep> id ( context , collection <identifiersep> id ) ; \n \t3 if ( collection == null ) { \n \t4 context . abort ( ) ; \n <ect>
\t3 stream <identifiersep> provider . read <identifiersep> from ( m <identifiersep> uri . to <identifiersep> string ( ) ) ) , type ) ; \n \t1 } else { \n \t2 file json <identifiersep> file = new file ( m <identifiersep> uri ) ; \n \t2 if ( json <identifiersep> file . exists ( ) ) { \n <ect>
\t2 feature <identifiersep> version = <string_literal> ; \n \t2 logger = new erlang <identifiersep> core <identifiersep> logger ( plugin ) ; } \n \t1 public void start ( ) throws core <identifiersep> exception { \n \t2 final string version = retrieve <identifiersep> all <identifiersep> versions ( ) ; \n <ect>
<comment> \n \t3 invoke <identifiersep> device <identifiersep> system <identifiersep> initialize ( this , true ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t4 input <identifiersep> streams . add ( <identifier> <identifiersep> stream ) ; \n \t4 logger . debug ( <string_literal> + get <identifiersep> current <identifiersep> input <identifiersep> stream ( ) ) ; } \n \t3 return null ; } \n \t2 if ( new <identifiersep> read <identifiersep> position > 0 ) { \n <ect>
\t2 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t1 private void fix <identifiersep> nicira <identifiersep> keys ( connection conn ) { \n \t2 <comment> \n \t2 list < string > keys = new array <identifiersep> list < string > ( ) ; \n <ect>
\t5 return ; } \n \t4 else \n \t4 { \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 if ( sock != null ) { \n \t5 try { \n \t6 sock . close ( ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 file index = new file ( segment <identifiersep> file ) ; \n \t5 return builder . finish ( index ) ? new on <identifiersep> disk <identifiersep> index ( index , column <identifiersep> index . get <identifiersep> validator ( ) , null ) : null ; } \n \t4 catch ( exception | fs <identifiersep> error e ) \n \t4 { \n <ect>
\t2 try { \n \t3 policy <identifiersep> engine . evaluate <identifiersep> quota ( context , resource <identifiersep> name , <identifier> ) ; \n \t3 return true ; \n \t2 } catch ( auth <identifiersep> exception e ) { \n <ect>
\t5 throw new extraction <identifiersep> exception ( msg ) ; } \n \t4 } else { \n \t4 file <identifiersep> output <identifiersep> stream fos = archive <identifiersep> <identifier> . get <identifiersep> file <identifiersep> output <identifiersep> stream ( entry <identifiersep> file ) ; \n \t4 try { \n <ect>
\t2 ensure <identifiersep> green ( ) ; \n \t2 state <identifiersep> response = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . execute ( ) . action <identifiersep> get ( ) ; \n \t2 assert <identifiersep> that ( state <identifiersep> response . get <identifiersep> state ( ) . meta <identifiersep> data ( ) . index ( <string_literal> ) . get <identifiersep> state ( ) , equal <identifiersep> to ( index <identifiersep> meta <identifiersep> data . state . close ) ) ; \n \t2 assert <identifiersep> that ( state <identifiersep> response . get <identifiersep> state ( ) . routing <identifiersep> table ( ) . index ( <string_literal> ) , null <identifiersep> value ( ) ) ; \n <ect>
\t2 } finally { \n \t3 try { \n \t4 br . close ( ) ; \n \t3 } catch ( io <identifiersep> exception <identifier> ) { \n <ect>
<comment> \n @ subscribe \n @ allow <identifiersep> concurrent <identifiersep> events \n public void on <identifiersep> ambari <identifiersep> event ( service <identifiersep> installed <identifiersep> event event ) { \n <ect>
\t3 } catch ( io <identifiersep> exception io ) { \n \t4 bc <identifiersep> log . logger . warn ( io ) ; } } } \n \t1 public static void on <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> post ( ) { \n \t2 if ( debug && loader . instance ( ) . is <identifiersep> in <identifiersep> state ( loader <identifiersep> state . available ) ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + job <identifiersep> id + <string_literal> + status + <string_literal> ) ; \n \t3 return ; } \n \t2 template <identifiersep> uploader <identifier> = <identifier> . get <identifiersep> template <identifiersep> uploader ( ) ; \n \t2 s <identifiersep> logger . warn ( <string_literal> + job <identifiersep> id + <string_literal> + status ) ; \n <ect>
\t8 s <identifiersep> logger . info ( <string_literal> + thread <identifiersep> num + <string_literal> ) ; \n \t8 dao . release ( 1l ) ; \n \t8 s <identifiersep> logger . info ( <string_literal> + thread <identifiersep> num + <string_literal> ) ; \n \t7 } else { \n <ect>
\t4 jobs . add ( new grid <identifiersep> compute <identifiersep> job <identifiersep> adapter ( i ) { \n \t5 @ override public object execute ( ) throws grid <identifiersep> exception { \n \t6 assert task <identifiersep> ses != null ; \n <ect>
\t4 pair < long , long > p = new pair < long , long > ( long . value <identifiersep> of ( <identifier> [ 1 ] ) , long . value <identifiersep> of ( <identifier> [ <number_literal> ] ) ) ; \n \t4 states . put ( <identifier> [ 0 ] , p ) ; \n \t4 return states ; } \n \t2 } catch ( socket <identifiersep> timeout <identifiersep> exception se ) { \n <ect>
\t3 assert rsrc2 != null ; \n \t3 assert rsrc3 != null ; \n \t3 assert rsrc4 != null ; \n \t3 assert log != null ; \n <ect>
\t2 try { \n \t3 final string control <identifiersep> ip = get <identifiersep> router <identifiersep> ssh <identifiersep> control <identifiersep> ip ( cmd ) ; \n \t3 result = ssh <identifiersep> helper . ssh <identifiersep> execute ( control <identifiersep> ip , default <identifiersep> domr <identifiersep> <identifier> , <string_literal> , get <identifiersep> system <identifiersep> vm <identifiersep> key <identifiersep> file ( ) , null , command ) ; \n \t3 if ( ! result . first ( ) ) { \n <ect>
\t5 { \n \t6 if ( ! <identifier> . equals ( <identifier> ) ) { \n \t7 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n \t8 <identifier> <identifiersep> log . warn ( <string_literal> + <identifier> ) ; \n <ect>
\t1 } else { \n \t2 log . info ( <string_literal> ) ; \n \t2 delete <identifiersep> <identifier> . predicate . apply ( sub <identifiersep> directory . <identifier> . get <identifiersep> file ( ) ) ; \n \t2 if ( ! sub <identifiersep> directory . <identifier> . get <identifiersep> file ( ) . mkdirs ( ) && ! sub <identifiersep> directory . <identifier> . get <identifiersep> file ( ) . exists ( ) ) { \n <ect>
\t2 if ( message <identifiersep> number >= sub <identifiersep> results . length || message <identifiersep> number < 0 ) { \n \t3 throw new messaging <identifiersep> exception ( <string_literal> + message <identifiersep> number ) ; } \n \t2 final sample <identifiersep> result sample <identifiersep> result = sub <identifiersep> results [ message <identifiersep> number ] ; \n <ect>
\t2 <identifier> . dispose ( ) ; \n \t2 return jpa <identifiersep> <identifier> <identifiersep> service . load <identifiersep> stateful <identifiersep> <identifier> <identifiersep> session ( <identifier> <identifiersep> id , <identifier> , null , create <identifiersep> environment ( context ) ) ; } \n \t1 @ override \n \t1 protected long get <identifiersep> saved <identifiersep> sessions <identifiersep> count ( ) { \n <ect>
public void delete <identifiersep> service <identifiersep> component <identifiersep> hosts ( string hostname , delete <identifiersep> host <identifiersep> component <identifiersep> status <identifiersep> meta <identifiersep> data delete <identifiersep> meta <identifiersep> data ) throws ambari <identifiersep> exception { \n \t1 read <identifiersep> write <identifiersep> lock . write <identifiersep> lock ( ) . lock ( ) ; \n \t1 try { \n \t1 service <identifiersep> component <identifiersep> host sch = get <identifiersep> service <identifiersep> component <identifiersep> host ( hostname ) ; \n <ect>
\t2 add <identifiersep> message <identifiersep> listener ( message <identifiersep> listener ) ; \n \t2 try { \n \t3 open ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 final attribute <identifiersep> statement attr <identifiersep> statement = new <identifiersep> saml <identifiersep> object ( attribute <identifiersep> statement . class ) ; \n \t2 attr <identifiersep> statement . set <identifiersep> subject ( subject ) ; \n \t2 for ( final map . entry < string , object > e : attributes . entry <identifiersep> set ( ) ) { \n \t3 if ( e . get <identifiersep> value ( ) instanceof collection < ? > && ( ( collection < ? > ) e . get <identifiersep> value ( ) ) . is <identifiersep> empty ( ) ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( rec ) ; \n \t2 assert <identifiersep> file ( rec . get <identifiersep> stream ( ) , f , folder ) ; \n \t2 assert <identifiersep> equals ( backend . get <identifiersep> reference <identifiersep> from <identifiersep> identifier ( rec . get <identifiersep> identifier ( ) ) , \n \t3 rec . get <identifiersep> reference ( ) ) ; \n <ect>
\t1 if ( success && ! all <identifiersep> files <identifiersep> to <identifiersep> <identifier> . is <identifiersep> empty ( ) ) { \n \t1 log . warn ( <string_literal> ) ; \n \t1 for ( input <identifiersep> file f : all <identifiersep> files <identifiersep> to <identifiersep> <identifier> ) { \n \t2 log . warn ( <string_literal> + f ) ; } \n <ect>
\t2 if ( connection != null ) { \n \t3 try { \n \t4 connection . close ( ) ; } \n \t3 catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 if ( get <identifiersep> self <identifiersep> peer <identifiersep> name ( ) . equals ( peer <identifiersep> name ) ) { \n \t4 continue ; <comment> \n \t3 try { \n <ect>
\t1 public ticket <identifiersep> catalog ticket <identifiersep> catalog ( final list < ticket <identifiersep> catalog <identifiersep> configurer > configurers ) { \n \t2 final default <identifiersep> ticket <identifiersep> catalog plan = new default <identifiersep> ticket <identifiersep> catalog ( ) ; \n \t2 configurers . for <identifiersep> each ( c - > { \n \t3 final string name = string <identifiersep> utils . remove <identifiersep> pattern ( c . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , <string_literal> ) ; \n <ect>
\t2 for ( transport <identifiersep> connection connection : connections ) { \n \t3 ss . stop ( connection ) ; } \n \t2 server = null ; \n \t2 ss . throw <identifiersep> first <identifiersep> exception ( ) ; \n <ect>
\t2 transcription = compound <identifiersep> analysis ( current <identifiersep> word , current <identifiersep> result , allow <identifiersep> other <identifiersep> language ) ; \n \t2 if ( transcription != null ) { \n \t3 long <identifier> = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 long end = <identifier> - <identifier> ; \n <ect>
\t5 if ( log . should <identifiersep> log ( log . warn ) ) \n \t6 log . warn ( <string_literal> , dfe ) ; } } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 if ( log . should <identifiersep> log ( log . warn ) && file . exists ( ) ) \n <ect>
\t3 for ( enumeration e = <identifier> <identifiersep> items . object <identifiersep> <identifier> ( ) ; e . has <identifiersep> more <identifiersep> elements ( ) ; ) { \n \t4 navigation <identifiersep> items . add <identifiersep> object ( new <identifiersep> navigation <identifiersep> item ( ( ns <identifiersep> dictionary ) e . next <identifiersep> element ( ) ) ) ; } } \n \t2 return navigation <identifiersep> items != null ? navigation <identifiersep> items : ns <identifiersep> array . empty <identifiersep> array ; } \n \t1 public void reload <identifiersep> navigation <identifiersep> menu ( ns <identifiersep> notification notification ) { \n <ect>
\t3 <identifier> <identifier> = new mary <identifiersep> <identifier> <identifiersep> reader ( ) . load <identifiersep> from <identifiersep> stream ( <identifier> <identifiersep> stream ) ; \n \t3 <identifier> <identifiersep> stream . close ( ) ; \n \t3 <comment> \n \t3 int <identifier> = mary <identifiersep> properties . get <identifiersep> integer ( header + <string_literal> , <number_literal> ) ; \n <ect>
\t4 <identifier> <identifiersep> request request = request <identifiersep> factory . get <identifiersep> instance ( load <identifiersep> authority ( ) , \n <number_literal> load <identifiersep> user ( ) , load <identifiersep> password ( ) ) ; \n \t4 response = request . delete ( <identifier> <identifiersep> to <identifiersep> id ( id . get <identifiersep> value ( ) ) ) ; \n \t3 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t3 command = new completed <identifiersep> action <identifiersep> x <identifiersep> command ( action <identifiersep> id , external <identifiersep> status , action <identifiersep> data , high <identifiersep> priority ) ; } \n \t2 else { \n \t3 command = new completed <identifiersep> action <identifiersep> command ( action <identifiersep> id , external <identifiersep> status , action <identifiersep> data , high <identifiersep> priority ) ; } \n \t2 if ( ! services . get ( ) . get ( callable <identifiersep> queue <identifiersep> service . class ) . queue ( command ) ) { \n <ect>
\t3 throw new configuration <identifiersep> exception ( <string_literal> ) ; } \n \t2 if ( <identifier> <identifiersep> pifs . get ( <string_literal> ) == null ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 throw new configuration <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t10 s <identifiersep> logger . trace ( <string_literal> + info . get <identifiersep> key ( ) ) ; \n \t10 s <identifiersep> logger . trace ( <string_literal> + info . get <identifiersep> label ( ) ) ; } } } } \n \t5 } catch ( throwable e ) { \n <ect>
\t1 string table ; \n \t1 while ( rs . next ( ) ) { \n \t2 table = rs . get <identifiersep> string ( <string_literal> ) ; \n \t2 db <identifiersep> tables . add ( table . to <identifiersep> lower <identifiersep> case ( ) ) ; \n <ect>
\t3 discovery <identifiersep> node local <identifiersep> node = cluster <identifiersep> service . state ( ) . nodes ( ) . get <identifiersep> local <identifiersep> node ( ) ; \n \t3 try { \n \t4 do <identifiersep> verify ( request . repository , request . verification <identifiersep> token , local <identifiersep> node ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + <string_literal> ) ; } \n \t2 log . debug ( <string_literal> ) ; \n \t2 session session = session <identifiersep> factory . get <identifiersep> session ( ) ; \n \t2 if ( transaction <identifiersep> synchronization <identifiersep> manager . is <identifiersep> synchronization <identifiersep> active ( ) ) { \n <ect>
\t5 } finally { \n \t6 try { \n \t7 fs . delete ( state <identifiersep> path , false ) ; \n \t6 } catch ( exception e ) { \n <ect>
\t2 when { \n \t3 get <identifiersep> exception <identifiersep> type ( throwable , resource <identifiersep> not <identifiersep> found <identifiersep> exception : : class . java ) != null - > notification <identifiersep> util . show <identifiersep> record <identifiersep> not <identifiersep> exist <identifiersep> notification ( ) \n \t3 get <identifiersep> exception <identifiersep> type ( throwable , secure <identifiersep> access <identifiersep> exception : : class . java ) != null - > notification <identifiersep> util . show <identifiersep> message <identifiersep> permission <identifiersep> alert ( ) \n \t3 get <identifiersep> exception <identifiersep> type ( throwable , <identifier> <identifiersep> not <identifiersep> found <identifiersep> exception : : class . java ) != null - > notification <identifiersep> util . show <identifiersep> feature <identifiersep> not <identifiersep> present <identifiersep> in <identifiersep> subscription ( ) \n <ect>
\t3 int <identifier> <identifiersep> per <identifiersep> <identifier> = numbers <identifiersep> util . parse <identifiersep> int ( config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) , <number_literal> ) ; \n \t3 int <identifier> <identifiersep> per <identifiersep> year = numbers <identifiersep> util . parse <identifiersep> int ( config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) , <number_literal> ) ; \n \t3 <identifier> <identifiersep> test <identifiersep> timer <identifiersep> task = new test <identifiersep> clock ( this , minutes <identifiersep> per <identifiersep> <identifier> , hours <identifiersep> per <identifiersep> day , days <identifiersep> per <identifiersep> <identifier> , days <identifiersep> per <identifiersep> <identifier> , <identifier> <identifiersep> per <identifiersep> <identifier> , <identifier> <identifiersep> per <identifiersep> year ) ; } \n \t2 <identifier> <identifiersep> current <identifiersep> timestamp = new date ( ) ; \n <ect>
\t3 for ( dependency <identifiersep> node child : node . get <identifiersep> children ( ) ) \n \t3 { \n \t4 if ( ! child . get <identifiersep> <identifier> ( ) . is <identifiersep> empty ( ) ) \n \t4 { \n <ect>
\t2 for ( mqtt <identifiersep> broker <identifiersep> connection con : broker <identifiersep> connections . values ( ) ) { \n \t3 try { \n \t4 con . start ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 if ( <identifier> . length == 0 ) { \n \t4 return ; } \n \t3 string [ ] item <identifiersep> list = get <identifiersep> item <identifiersep> names ( destination ) ; \n \t3 if ( item <identifiersep> list . length == 0 ) { \n <ect>
\t2 long total <identifiersep> over <identifiersep> prov <identifiersep> capacity ; \n \t2 if ( pool . get <identifiersep> pool <identifiersep> type ( ) . supports <identifiersep> over <identifiersep> <identifier> ( ) ) { \n \t3 big <identifiersep> decimal over <identifiersep> prov <identifiersep> factor = get <identifiersep> storage <identifiersep> over <identifiersep> <identifier> <identifiersep> factor ( pool . get <identifiersep> id ( ) ) ; \n \t3 total <identifiersep> over <identifiersep> prov <identifiersep> capacity = over <identifiersep> prov <identifiersep> factor . <identifier> ( new big <identifiersep> decimal ( pool . get <identifiersep> capacity <identifiersep> bytes ( ) ) ) . long <identifiersep> value ( ) ; \n <ect>
\t2 if ( user <identifiersep> font <identifiersep> family != null ) { \n \t3 int font <identifiersep> size = user <identifiersep> font <identifiersep> size > 0 ? user <identifiersep> font <identifiersep> size : get <identifiersep> font ( ) . get <identifiersep> size ( ) ; \n \t3 set <identifiersep> font ( new font ( user <identifiersep> font <identifiersep> family , font . plain , font <identifiersep> size ) ) ; \n <ect>
\t1 @ path ( <string_literal> ) \n \t1 @ produces ( { media <identifiersep> type . application <identifiersep> json , media <identifiersep> type . application <identifiersep> xml } ) \n \t1 public resource <identifiersep> policy [ ] get <identifiersep> bitstream <identifiersep> policies ( @ path <identifiersep> param ( <string_literal> ) string bitstream <identifiersep> id , \n <number_literal> @ context http <identifiersep> headers headers ) { \n <ect>
\t1 for ( login <identifiersep> response s : authentication <identifiersep> response <identifiersep> cache . as <identifiersep> map ( ) . values ( ) ) { \n \t2 try { \n \t3 session <identifiersep> client . logout <identifiersep> user ( s . get <identifiersep> session <identifiersep> key ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 for ( class < ? extends decoder > s : m . method . get <identifiersep> annotation ( message . class ) . <identifier> ( ) ) { \n \t4 try { \n \t5 l . add ( config . framework ( ) . new <identifiersep> class <identifiersep> instance ( decoder . class , s ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 if ( ! <identifier> ) { \n \t3 try { \n \t4 visit <identifiersep> stats = find <identifiersep> visit <identifiersep> by <identifiersep> cookie ( cookie . get <identifiersep> value ( ) , context ) ; \n \t3 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t3 remove <identifiersep> vm ( vm ) ; } \n \t2 vm <identifiersep> names . clear ( ) ; \n \t2 vm <identifiersep> names . add <identifiersep> all ( current <identifiersep> v <identifiersep> ms ) ; } \n \t1 public synchronized void submit <identifiersep> metrics <identifiersep> jobs ( ) { \n <ect>
\t2 try { \n \t3 default <identifiersep> bootstrap . bootstrap ( ) ; \n \t3 response <identifiersep> object = saml <identifiersep> utils . decode <identifiersep> saml <identifiersep> response ( response <identifiersep> message ) ; \n \t2 } catch ( configuration <identifiersep> exception | factory <identifiersep> configuration <identifiersep> error | parser <identifiersep> configuration <identifiersep> exception | sax <identifiersep> exception | io <identifiersep> exception | <identifier> <identifiersep> exception e ) { \n <ect>
<comment> \n class scan <identifiersep> for <identifiersep> extension <identifiersep> annotated <identifiersep> classes ( artifact plugin , list < url > urls ) { \n \t1 final url first <identifiersep> url = urls . stream ( ) . find <identifiersep> first ( ) . get ( ) ; \n <ect>
\t5 job <identifiersep> instance job = build ( cube <identifiersep> name , request ) ; \n \t5 jobs . add ( job ) ; \n \t4 } catch ( exception e ) { \n \t5 <comment> \n <ect>
\t3 while ( ! new <identifiersep> <identifier> . get <identifiersep> instance <identifiersep> state ( ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) && system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> tick < start <identifiersep> wait <identifiersep> milli <identifiersep> seconds ) { \n \t4 try { \n \t5 thread . sleep ( <number_literal> ) ; \n \t4 } catch ( final interrupted <identifiersep> exception e ) { \n <ect>
\t2 while ( providers <identifiersep> it . has <identifiersep> next ( ) ) { \n \t3 try { \n \t4 add <identifiersep> provider ( providers <identifiersep> it . next ( ) ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t2 watch . split <identifiersep> info ( <string_literal> ) ; } \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 protected void generate <identifiersep> array ( schema <identifiersep> definition schema , array <identifiersep> definition array ) { \n \t2 java <identifiersep> writer out = new <identifiersep> java <identifiersep> writer ( get <identifiersep> file ( array , mode . record ) ) ; \n <ect>
\t2 this . expected <identifiersep> size = e . expected <identifiersep> size ; \n \t2 this . extra <identifiersep> message = e . extra <identifiersep> message ; \n \t2 this . <identifier> <identifiersep> size <identifiersep> and <identifiersep> mime <identifiersep> type = e . <identifier> <identifiersep> size <identifiersep> and <identifiersep> mime <identifiersep> type ; \n \t2 if ( mode == fetch <identifiersep> exception <identifiersep> mode . internal <identifiersep> error ) \n <ect>
\t3 if ( page <identifiersep> in <identifiersep> more <identifiersep> messages || has <identifiersep> <identifier> || ! dispatch <identifiersep> pending <identifiersep> list . has <identifiersep> redeliveries ( ) ) { \n \t4 try { \n \t5 page <identifiersep> in <identifiersep> messages ( has <identifiersep> <identifier> && get <identifiersep> max <identifiersep> browse <identifiersep> page <identifiersep> size ( ) > 0 , get <identifiersep> max <identifiersep> page <identifiersep> size ( ) ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t4 for ( method method : entry . get <identifiersep> value ( ) . get <identifiersep> class ( ) . get <identifiersep> methods ( ) ) \n \t5 if ( <string_literal> . equals ( method . get <identifiersep> name ( ) ) ) \n \t6 convert <identifiersep> to <identifiersep> entity <identifiersep> attribute = method . get <identifiersep> return <identifiersep> type ( ) ; \n \t4 if ( convert <identifiersep> to <identifiersep> entity <identifiersep> attribute == null ) { \n <ect>
\t2 } else { \n \t2 log . warn ( <string_literal> + family <identifiersep> name + <string_literal> \n \t3 + table <identifiersep> name ) ; \n \t2 log . warn ( <string_literal> ) ; \n <ect>
\t4 disable <identifiersep> data <identifiersep> source <identifiersep> with <identifiersep> handle ( handle , metadata <identifiersep> storage <identifiersep> tables <identifiersep> config , data <identifiersep> source ) ; \n \t4 return null ; } \n \t1 ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public one <identifiersep> time <identifiersep> token <identifiersep> account get ( final string username ) { \n \t2 try { \n \t3 if ( ! this . location . get <identifiersep> file ( ) . exists ( ) ) { \n <ect>
\t1 catch ( exception e ) { \n \t2 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t2 for ( final message tx <identifiersep> m : tx <identifiersep> messages ) { \n \t2 message <identifiersep> bus . call <identifiersep> error <identifiersep> handler ( tx <identifiersep> m , e ) ; } \n <ect>
\t1 @ consumes ( media <identifiersep> type . application <identifiersep> form <identifiersep> <identifier> ) \n \t1 @ path ( <string_literal> ) \n \t1 public response rdf ( multivalued <identifiersep> map < string , string > form <identifiersep> params ) { \n \t2 try { \n <ect>
\t3 consumer . set <identifiersep> message <identifiersep> listener ( new message <identifiersep> listener ( ) { \n \t4 public void on <identifiersep> message ( message arg0 ) { \n \t5 text <identifiersep> message msg = ( text <identifiersep> message ) arg0 ; \n \t5 try { \n <ect>
\t6 log . debug ( string . format ( <string_literal> , candidate . get <identifiersep> instance <identifiersep> id ( ) ) ) ; \n \t6 final create <identifiersep> image <identifiersep> task task = restore . apply ( candidate ) ; \n \t6 if ( task != null ) { \n \t7 create <identifiersep> image <identifiersep> tasks . put ( candidate . get <identifiersep> instance <identifiersep> id ( ) , task ) ; \n <ect>
\t6 log . error ( get <identifiersep> log <identifiersep> start <identifiersep> info ( ) + <string_literal> + message . to <identifiersep> string ( ) ) ; } \n \t4 break ; } \n \t3 case game <identifiersep> ask : { \n \t4 game <identifiersep> client <identifiersep> message message = ( game <identifiersep> client <identifiersep> message ) callback . get <identifiersep> data ( ) ; \n <ect>
\t3 return false ; } \n \t2 <comment> \n \t2 list < cisco <identifiersep> <identifier> <identifiersep> controller <identifiersep> vo > devices = <identifier> <identifiersep> cisco <identifiersep> <identifier> <identifiersep> dao . list <identifiersep> by <identifiersep> physical <identifiersep> network ( network . get <identifiersep> physical <identifiersep> network <identifiersep> id ( ) ) ; \n \t2 if ( devices . is <identifiersep> empty ( ) ) { \n <ect>
\t6 } else { \n \t7 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; \n \t7 windows <identifiersep> vm <identifiersep> private <identifiersep> ip = values . get ( <string_literal> ) ; \n \t7 long windows <identifiersep> vm <identifiersep> id = long . parse <identifiersep> long ( values . get ( <string_literal> ) ) ; \n <ect>
\t4 request <identifiersep> identity ( ctx ) ; \n \t3 } else { \n \t4 send <identifiersep> certificate ( hello <identifiersep> message , ctx ) ; } \n \t2 } else { \n <ect>
\t4 <identifier> <identifiersep> log . info ( <string_literal> + how <identifiersep> many + <string_literal> + matches . size ( ) + <string_literal> ) ; \n \t3 select <identifiersep> active <identifiersep> not <identifiersep> failing <identifiersep> <identifier> ( how <identifiersep> many , exclude , matches , mask ) ; \n \t2 } else { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t4 this . get <identifiersep> down <identifiersep> protocol ( ) . down ( ctx . next <identifiersep> message ( remote <identifiersep> address , sasl <identifiersep> header ) ) ; \n \t4 ctx . await <identifiersep> completion ( timeout ) ; \n \t4 if ( ctx . is <identifiersep> successful ( ) ) { \n <ect>
public class process <identifiersep> file <identifiersep> helper { \n private static final logger log = logger . get <identifiersep> logger ( process <identifiersep> file <identifiersep> helper . class ) ; \n private process <identifiersep> file <identifiersep> helper ( ) { } \n public static void process <identifiersep> file ( input <identifiersep> file input <identifiersep> file , file log <identifiersep> path <identifiersep> file , boolean <identifier> ) throws exception { \n <ect>
\t4 this . begin <identifiersep> with <identifiersep> name <identifiersep> method = user <identifiersep> transaction <identifiersep> class . get <identifiersep> method ( <string_literal> , string . class ) ; \n \t4 this . begin <identifiersep> with <identifiersep> name <identifiersep> and <identifiersep> timeout <identifiersep> method = user <identifiersep> transaction <identifiersep> class . get <identifiersep> method ( <string_literal> , string . class , int . class ) ; \n \t4 logger . info ( <string_literal> ) ; } \n \t3 else { \n <ect>
\t3 return null ; } \n \t2 script . add ( mount <identifiersep> str , <identifier> <identifiersep> point ) ; \n \t2 string result = script . execute ( ) ; \n \t2 if ( result != null && ! result . contains ( <string_literal> ) ) { \n <ect>
\t3 if ( if <identifiersep> need <identifiersep> update <identifiersep> base <identifiersep> cuboid <identifiersep> shard == null ) { \n \t4 if <identifiersep> need <identifiersep> update <identifiersep> base <identifiersep> cuboid <identifiersep> shard = <string_literal> ; } \n \t3 cuboid <identifiersep> scheduler cuboid <identifiersep> scheduler = cuboid <identifiersep> scheduler <identifiersep> util . get <identifiersep> cuboid <identifiersep> scheduler <identifiersep> by <identifiersep> mode ( cube <identifiersep> seg , cuboid <identifiersep> mode <identifiersep> name ) ; \n \t3 if ( check <identifiersep> skip ( cubing <identifiersep> job <identifiersep> id ) ) { \n <ect>
\t1 this . memory <identifiersep> mx <identifiersep> bean = management <identifiersep> factory . get <identifiersep> memory <identifiersep> mx <identifiersep> bean ( ) ; \n \t1 this . max <identifiersep> heap <identifiersep> size = get <identifiersep> max <identifiersep> heap <identifiersep> size ( memory <identifiersep> mx <identifiersep> bean ) ; \n \t1 percentage <identifiersep> number <identifiersep> format = number <identifiersep> format . get <identifiersep> instance ( ) ; \n \t1 percentage <identifiersep> number <identifiersep> format . set <identifiersep> minimum <identifiersep> fraction <identifiersep> <identifier> ( <number_literal> ) ; \n <ect>
public void set <identifiersep> topic ( se . caboo . beast . model . topic value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value , <identifier> <identifiersep> post . topic <identifiersep> key ) ; } \n public void set <identifiersep> topic <identifiersep> relationship ( se . caboo . beast . model . topic value ) { \n <ect>
\t3 inet <identifiersep> socket <identifiersep> address endpoint <identifiersep> socket <identifiersep> addr = new inet <identifiersep> socket <identifiersep> address ( p . get <identifiersep> host ( ) , p . get <identifiersep> port ( ) ) ; \n \t3 socket . connect ( endpoint <identifiersep> socket <identifiersep> addr , <number_literal> ) ; \n \t3 return true ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 resp . send <identifiersep> redirect ( compose <identifiersep> <identifier> <identifiersep> url ( root <identifiersep> url , vm , host , w , h ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( req . get <identifiersep> attribute ( framework <identifiersep> config . new <identifiersep> mapping ) != null ) { \n \t4 req . remove <identifiersep> attribute ( framework <identifiersep> config . new <identifiersep> mapping ) ; \n \t4 handler <identifiersep> wrapper = map ( req ) ; \n \t4 if ( handler <identifiersep> wrapper == null ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 get <identifiersep> snapshots <identifiersep> response get <identifiersep> snapshots <identifiersep> response = client . admin ( ) . cluster ( ) . prepare <identifiersep> get <identifiersep> snapshots ( <string_literal> ) . get ( ) ; \n \t2 assert <identifiersep> that ( get <identifiersep> snapshots <identifiersep> response . get <identifiersep> snapshots ( ) , not <identifiersep> null <identifiersep> value ( ) ) ; \n \t2 assert <identifiersep> that ( get <identifiersep> snapshots <identifiersep> response . get <identifiersep> snapshots ( ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n <ect>
\t6 ? new xml <identifiersep> reader ( this . feed <identifiersep> url ) \n \t6 : new xml <identifiersep> reader ( this . feed <identifiersep> resource . get <identifiersep> input <identifiersep> stream ( ) ) ; \n \t4 <identifier> <identifiersep> feed feed = this . <identifier> <identifiersep> feed <identifiersep> input . build ( reader ) ; \n <ect>
\t5 log . info ( string . format ( <string_literal> , size , policies . get <identifiersep> new <identifiersep> queue <identifiersep> threshold ( ) ) ) ; \n \t5 add <identifiersep> new <identifiersep> queue <identifiersep> if <identifiersep> needed ( null ) ; } \n \t4 else \n \t4 { \n <ect>
\t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 return null ; \n \t2 } catch ( dom <identifiersep> exception e ) { \n <ect>
\t2 connection connection = pooled <identifiersep> conn <identifiersep> fact . create <identifiersep> connection ( <string_literal> , <string_literal> ) ; \n \t2 connection . set <identifiersep> exception <identifiersep> listener ( new exception <identifiersep> listener ( ) { \n \t3 @ override \n \t3 public void on <identifiersep> exception ( jms <identifiersep> exception exception ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t4 certificate <identifiersep> response . set <identifiersep> private <identifiersep> key ( cert <identifiersep> utils . private <identifiersep> key <identifiersep> to <identifiersep> pem ( certificate . get <identifiersep> private <identifiersep> key ( ) ) ) ; } \n \t3 if ( certificate . get <identifiersep> ca <identifiersep> certificates ( ) != null ) { \n \t4 certificate <identifiersep> response . set <identifiersep> ca <identifiersep> certificate ( cert <identifiersep> utils . <identifier> <identifiersep> to <identifiersep> pem ( certificate . get <identifiersep> ca <identifiersep> certificates ( ) ) ) ; } \n \t2 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t3 catch ( digest <identifiersep> mismatch <identifiersep> exception e ) \n \t3 { \n \t4 assert resolver instanceof row <identifiersep> digest <identifiersep> resolver ; \n <ect>
\t1 is <identifiersep> closed = true ; <comment> \n \t1 try { \n \t2 abort ( true ) ; <comment> \n \t1 catch ( exception ex ) { \n <ect>
<number_literal> not el . is <identifiersep> leader and not el . is <identifiersep> finished ] \n \t1 while true : \n \t2 finished , waiting <identifiersep> list = <identifier> <identifiersep> finished ( ) \n \t2 if finished : break \n <ect>
\t1 else { \n \t2 add <identifiersep> object <identifiersep> to <identifiersep> both <identifiersep> <identifier> <identifiersep> of <identifiersep> relationship <identifiersep> with <identifiersep> key ( object , <identifier> <identifiersep> talent . movies <identifiersep> directed <identifiersep> key ) ; } } \n public void remove <identifiersep> from <identifiersep> movies <identifiersep> directed <identifiersep> relationship ( er . distribution . example . server . eo . movie object ) { \n <ect>
\t2 for ( int i = 0 ; i < count ; i ++ ) { \n \t3 realm = st . next <identifiersep> token ( ) ; } \n \t2 realm = realm . to <identifiersep> upper <identifiersep> case ( ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( realm ) || ! realm <identifiersep> map . contains <identifiersep> key ( realm ) ) { \n <ect>
\t1 owner <identifiersep> cache . put ( key , first <identifiersep> value ) ; \n \t1 assert <identifiersep> is <identifiersep> not <identifiersep> in <identifiersep> <identifier> ( non <identifiersep> owner <identifiersep> cache , key ) ; \n \t1 check <identifiersep> point check <identifiersep> point = new check <identifiersep> point ( ) ; \n \t1 wait <identifiersep> until <identifiersep> about <identifiersep> to <identifiersep> acquire <identifiersep> lock ( non <identifiersep> owner <identifiersep> cache , check <identifiersep> point ) ; \n <ect>
\t1 if ( command <identifiersep> line . has <identifiersep> option ( <string_literal> ) ) { \n \t1 string batch <identifiersep> size <identifiersep> string = command <identifiersep> line . get <identifiersep> option <identifiersep> value ( <string_literal> ) ; \n \t1 batch <identifiersep> size = integer . parse <identifiersep> int ( batch <identifiersep> size <identifiersep> string ) ; \n \t1 if ( batch <identifiersep> size < 1 ) { \n <ect>
\t3 running = false ; } \n \t2 @ override \n \t2 public void run ( ) { \n \t3 while ( may <identifiersep> run ( ) ) { \n <ect>
\t5 + <string_literal> + ( <identifier> - serialized ) \n \t5 + <string_literal> + ( encrypted <identifiersep> time - <identifier> ) \n \t5 + <string_literal> + ( encrypted <identifiersep> time - begin ) ) ; } \n \t2 <comment> \n <ect>
\t2 log . error ( prefix + <string_literal> ) ; \n \t2 for ( ability ability : <identifier> . get <identifiersep> <identifier> ( ) ) { \n \t3 log . error ( prefix + <string_literal> + ability . to <identifiersep> string ( ) + <string_literal> + ability . get <identifiersep> id ( ) ) ; } \n \t2 if ( blocker != null ) { \n <ect>
\t4 if ( site != null ) { \n \t5 final <identifier> <identifiersep> <identifier> <identifiersep> binding [ ] service <identifiersep> bindings = <identifier> <identifiersep> <identifier> <identifiersep> binding . get ( client , site <identifiersep> name ) ; \n \t5 if ( service <identifiersep> bindings != null && service <identifiersep> bindings . length > 0 ) { \n <ect>
\t2 account system = <identifier> <identifiersep> account <identifiersep> mgr . get <identifiersep> system <identifiersep> account ( ) ; \n \t2 data <identifiersep> center zone = <identifier> <identifiersep> server . get <identifiersep> zone ( ) ; \n \t2 list < ? extends network > list = <identifier> <identifiersep> network <identifiersep> service . get <identifiersep> isolated <identifiersep> networks <identifiersep> <identifier> <identifiersep> by <identifiersep> account <identifiersep> in <identifiersep> zone ( zone . get <identifiersep> id ( ) , system ) ; \n \t2 for ( network net : list ) { \n <ect>
\t3 <comment> \n \t3 monitor . notify <identifiersep> all ( ) ; } \n \t2 } <comment> \n \t1 } catch ( exception ex ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t1 if ( <identifier> <identifiersep> host . equals ( <string_literal> ) ) { \n \t1 try { \n \t2 <identifier> <identifiersep> host = inet <identifiersep> address . get <identifiersep> local <identifiersep> host ( ) . get <identifiersep> host <identifiersep> name ( ) ; \n \t1 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t2 log . debug ( <string_literal> + i + <string_literal> ) ; } \n \t1 largest <identifiersep> number <identifiersep> of <identifiersep> steps = i ; \n \t1 <comment> \n <ect>
\t2 byte <identifiersep> array <identifiersep> output <identifiersep> stream baos = new byte <identifiersep> array <identifiersep> output <identifiersep> stream ( <number_literal> ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 baos . write ( i ) ; } \n \t2 response response = target . request ( ) . post ( entity . entity ( baos . to <identifiersep> byte <identifiersep> array ( ) , media <identifiersep> type . application <identifiersep> <identifier> <identifiersep> stream ) ) ; \n <ect>
\t2 <comment> \n \t2 try { \n \t3 file <identifiersep> utils . copy <identifiersep> file ( file <identifiersep> to <identifiersep> backup , backup <identifiersep> file ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 jmx <identifiersep> server = get <identifiersep> field ( agent . class , jmx <identifiersep> connector <identifiersep> server . class , <string_literal> ) ; \n \t3 registry = get <identifiersep> field ( connector <identifiersep> bootstrap . class , remote <identifiersep> object . class , <string_literal> ) ; \n \t3 if ( jmx <identifiersep> server == null || registry == null ) { \n <ect>
\t1 private key <identifiersep> pair get <identifiersep> or <identifiersep> create <identifiersep> key <identifiersep> pair ( ) { \n \t2 final string private <identifiersep> key <identifiersep> file <identifiersep> name = settings . get <identifiersep> or <identifiersep> create <identifiersep> string <identifiersep> setting ( private <identifiersep> key <identifiersep> config <identifiersep> key ) . get <identifiersep> value ( ) ; \n \t2 final string public <identifiersep> key <identifiersep> file <identifiersep> name = settings . get <identifiersep> or <identifiersep> create <identifiersep> string <identifiersep> setting ( public <identifiersep> key <identifiersep> config <identifiersep> key ) . get <identifiersep> value ( ) ; \n \t2 if ( private <identifiersep> key <identifiersep> file <identifiersep> name == null ) { \n <ect>
\t2 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( \n \t3 <string_literal> + output . return <identifiersep> value + <string_literal> + output . output + <string_literal> + output . error ) ; } } \n \t1 return new file <identifiersep> resource ( snapshot <identifiersep> id , diff <identifiersep> name ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> start + <string_literal> ) ; \n \t3 <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> start = <number_literal> ; } \n \t2 <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> size = numbers <identifiersep> util . parse <identifiersep> int ( config <identifiersep> dao . get <identifiersep> value ( config . vmware <identifiersep> additional <identifiersep> vnc <identifiersep> port <identifiersep> range <identifiersep> size . key ( ) ) , <number_literal> ) ; \n \t2 if ( <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> size < 0 || <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> start + <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> size > <number_literal> ) { \n <ect>
\t3 assert . not <identifiersep> null ( this . server , <string_literal> ) ; \n \t3 assert . not <identifiersep> null ( this . object <identifiersep> names , <string_literal> ) ; \n \t3 collection < object <identifiersep> name > object <identifiersep> names = this . retrieve <identifiersep> m <identifiersep> bean <identifiersep> names ( ) ; \n \t3 if ( object <identifiersep> names . size ( ) < 1 ) { \n <ect>
private void merge <identifiersep> metadata <identifiersep> records ( merge <identifiersep> info info ) throws accumulo <identifiersep> exception { \n \t1 key <identifiersep> extent range = info . get <identifiersep> extent ( ) ; \n \t1 master . log . debug ( <string_literal> , range ) ; \n \t1 key <identifiersep> extent stop = get <identifiersep> high <identifiersep> tablet ( range ) ; \n <ect>
\t4 while ( running && ! stop <identifiersep> producer && cnt < limit ) { \n \t5 ctx . collect ( <string_literal> + cnt ) ; \n \t5 cnt ++ ; \n \t5 thread . sleep ( <number_literal> ) ; } \n <ect>
\t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } \n \t2 return null ; } \n \t1 @ override \n \t1 public geo <identifiersep> location <identifiersep> response locate ( final double latitude , final double longitude ) { \n <ect>
\t2 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n \t3 if ( <identifier> <identifiersep> use <identifiersep> pool ) \n \t4 <identifier> <identifiersep> log . warn ( <string_literal> + get <identifiersep> handler <identifiersep> count ( ) + <string_literal> ) ; \n \t3 else \n <ect>
\t3 { \n \t4 <identifier> = <identifier> <identifiersep> mapper . execute ( <identifier> <identifiersep> id <identifiersep> list ) ; } } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t3 regular <identifiersep> sock <identifiersep> close = false ; \n \t3 ping <identifiersep> dest = determine <identifiersep> ping <identifiersep> dest ( ) ; <comment> \n \t3 if ( ping <identifiersep> dest == null || ! is <identifiersep> <identifier> <identifiersep> thread <identifiersep> running ( ) ) \n \t4 break ; \n <ect>
\t3 request . set <identifiersep> character <identifiersep> encoding ( character <identifiersep> encoding ) ; } \n \t2 string username = request . get <identifiersep> parameter ( constants . form <identifiersep> username ) ; \n \t2 string password = request . get <identifiersep> parameter ( constants . form <identifiersep> password ) ; \n <ect>
\t3 <identifier> <identifiersep> <identifier> . set ( <string_literal> , sam ) ; <comment> \n \t3 process <identifiersep> file <identifiersep> or <identifiersep> script ( <identifier> <identifiersep> <identifier> ) ; \n \t2 } catch ( j <identifiersep> meter <identifiersep> exception e ) { \n <ect>
\t4 try ( input <identifiersep> stream <identifiersep> reader in = new input <identifiersep> stream <identifiersep> reader ( url . open <identifiersep> stream ( ) ) ) { \n \t5 name = new char [ <number_literal> ] ; \n \t5 in . read ( name ) ; } \n \t4 string plugin <identifiersep> main <identifiersep> class <identifiersep> name = new string ( name ) . trim ( ) ; \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 template . send <identifiersep> body ( <string_literal> , <string_literal> + i ) ; } \n \t2 <comment> \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( <number_literal> , time <identifiersep> unit . seconds ) ; \n <ect>
\t4 ( ( d <identifiersep> space <identifiersep> filter ) result ) . set <identifiersep> context ( context <identifiersep> service . get <identifiersep> context ( ) ) ; \n \t4 ( ( d <identifiersep> space <identifiersep> filter ) result ) . set <identifiersep> field <identifiersep> resolver ( field <identifiersep> resolver ) ; } \n \t2 } catch ( instantiation <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception \n \t3 | context <identifiersep> service <identifiersep> exception e ) { \n <ect>
\t5 <identifier> <identifiersep> command <identifiersep> type . type <identifiersep> <identifier> <identifiersep> stop <identifiersep> after <identifiersep> hours ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , ip ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> ) ; } \n \t1 public void ejb <identifiersep> remove ( ) { \n \t2 log . info ( <string_literal> ) ; } \n \t1 public void ejb <identifiersep> activate ( ) { \n <ect>
\t1 <comment> \n \t2 task <identifiersep> manager <identifiersep> options . debug <identifiersep> memory <identifiersep> log ) ) \n \t1 { \n <ect>
\t2 for ( operation op : operations ) { \n \t3 try { \n \t4 op . invoke ( ) ; \n \t4 if ( thread . current <identifiersep> thread ( ) . is <identifiersep> interrupted ( ) ) { \n <ect>
\t4 return ; \n \t3 } else { \n \t4 s <identifiersep> logger . warn ( <string_literal> + agent <identifiersep> id + <string_literal> + ( ( answer != null ) ? answer . get <identifiersep> details ( ) : <string_literal> ) ) ; } \n \t2 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
public void test <identifiersep> delegation <identifiersep> token <identifiersep> with <identifiersep> <identifier> <identifiersep> lifetime ( ) throws throwable { \n \t1 <comment> \n \t1 user <identifiersep> group <identifiersep> information root = user <identifiersep> group <identifiersep> information . login <identifiersep> user <identifiersep> from <identifiersep> keytab <identifiersep> and <identifiersep> return <identifiersep> ugi ( \n \t2 root <identifiersep> user . get <identifiersep> principal ( ) , root <identifiersep> user . get <identifiersep> keytab ( ) . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n <ect>
\t2 schema <identifiersep> parser . set <identifiersep> validation <identifiersep> options ( val ) ; \n \t2 schema <identifiersep> parser . parse ( new file <identifiersep> input <identifiersep> stream ( source <identifiersep> file ) ) ; \n \t2 if ( schema <identifiersep> parser . has <identifiersep> error ( ) ) \n \t2 { \n <ect>
\t4 indices <identifiersep> aliases <identifiersep> request <identifiersep> builder request <identifiersep> builder = \n \t6 new indices <identifiersep> aliases <identifiersep> request <identifiersep> builder ( bulk <identifiersep> node <identifiersep> client . client ( ) , indices <identifiersep> aliases <identifiersep> action . instance ) ; \n \t4 for ( string alias : aliases . key <identifiersep> set ( ) ) { \n \t5 request <identifiersep> builder . add <identifiersep> alias ( index , alias , aliases . get ( alias ) ) ; } \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t5 statement , language , limit , offset , bind <identifiersep> map , \n \t5 session <identifiersep> context . get <identifiersep> session <identifiersep> local <identifiersep> mappings ( ) ) ; \n \t3 query <identifiersep> count . mark ( ) ; \n \t3 long millis = time <identifiersep> unit . nanoseconds . to <identifiersep> millis ( context . stop ( ) ) ; \n <ect>
\t4 model . add <identifiersep> row ( clazz . new <identifiersep> instance ( ) ) ; \n \t4 remove <identifiersep> button . set <identifiersep> enabled ( true ) ; \n \t4 clear <identifiersep> button . set <identifiersep> enabled ( true ) ; \n \t3 } catch ( exception err ) { \n <ect>
\t2 list < client <identifiersep> representation > clients = bc . create <identifiersep> provider <identifiersep> clients ( suite <identifiersep> context ) ; \n \t2 if ( clients != null ) { \n \t3 realm <identifiersep> resource provider <identifiersep> realm = admin <identifiersep> client . realm ( bc . provider <identifiersep> realm <identifiersep> name ( ) ) ; \n \t3 for ( client <identifiersep> representation client : clients ) { \n <ect>
\t2 coordinator . instance . initialize ( host <identifiersep> map . values ( ) ) ; \n \t2 <comment> <ect>
\t3 metric . merge ( locus <identifiersep> data ) ; \n \t3 log . debug ( <string_literal> + metric . n <identifiersep> <identifier> ) ; \n \t2 } else { \n \t3 metric . n <identifiersep> three <identifiersep> <identifier> <identifiersep> <identifier> ++ ; \n <ect>
\t2 return result ; } \n \t1 void reload <identifiersep> cache <identifiersep> by <identifiersep> project ( string project ) { \n \t2 project <identifiersep> caches . put ( project , load <identifiersep> cache ( project ) ) ; } \n \t1 private project <identifiersep> cache load <identifiersep> cache ( string project ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 result = success ( broker , request , response , get <identifiersep> state , <string_literal> , project , <string_literal> , user , <string_literal> , <string_literal> ) ; \n \t3 locks = result . get <identifiersep> json <identifiersep> array ( <string_literal> ) ; \n \t3 assert . assert <identifiersep> equals ( locks . length ( ) , <number_literal> ) ; \n <ect>
\t3 theme theme = get <identifiersep> theme ( session , realm ) ; \n \t3 locale locale = lang != null ? locale . for <identifiersep> language <identifiersep> tag ( lang ) : locale . english ; \n \t3 return theme . get <identifiersep> messages ( locale ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t7 delegate . message <identifiersep> send <identifiersep> failed ( notification , new <identifier> <identifiersep> delivery <identifiersep> error <identifiersep> exception ( e ) ) ; \n \t6 } else { \n \t7 cached <identifiersep> notifications . add <identifiersep> all ( temp <identifiersep> cache ) ; \n \t7 int resend <identifiersep> size = temp <identifiersep> cache . size ( ) ; \n <ect>
\t2 return http <identifiersep> server . create ( new inet <identifiersep> socket <identifiersep> address ( port ) , <number_literal> ) ; } \n \t1 @ override \n \t1 public ssl <identifiersep> server <identifiersep> socket create <identifiersep> ssl <identifiersep> server <identifiersep> socket ( int port ) throws io <identifiersep> exception { \n <ect>
\t3 vault <identifiersep> option . get ( <string_literal> ) . set ( vault <identifiersep> handler . get <identifiersep> salt ( ) ) ; \n \t3 vault <identifiersep> option . get ( <string_literal> ) . set ( vault <identifiersep> handler . get <identifiersep> iteration <identifiersep> count <identifiersep> as <identifiersep> string ( ) ) ; \n \t3 vault <identifiersep> option . get ( <string_literal> ) . set ( vault <identifiersep> handler . get <identifiersep> encoded <identifiersep> vault <identifiersep> file <identifiersep> directory ( ) ) ; \n \t3 management <identifiersep> client . get <identifiersep> controller <identifiersep> client ( ) . execute ( new operation <identifiersep> builder ( op ) . build ( ) ) ; \n <ect>
\t1 file db <identifiersep> dir = new file ( system . get <identifiersep> property ( <string_literal> ) , <string_literal> ) ; \n \t1 if ( ! db <identifiersep> dir . mkdir ( ) ) { \n \t1 throw new runtime <identifiersep> exception ( <string_literal> + db <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n \t1 db <identifiersep> dir . delete <identifiersep> on <identifiersep> exit ( ) ; \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
<comment> \n \t1 public sock <identifiersep> io get <identifiersep> connection ( string host ) { \n \t2 if ( ! this . initialized ) { \n <ect>
\t4 received <identifiersep> new <identifiersep> <identifier> <identifiersep> state ( device , state ) ; \n \t3 } else { \n \t4 logger . warn ( <string_literal> + argument + <string_literal> + device ) ; } \n \t2 } else { \n <ect>
\t3 <identifier> <identifiersep> default <identifiersep> loader = null ; } \n \t2 if ( <identifier> <identifiersep> loading <identifiersep> complete ) { \n \t3 log . debug ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t4 database . commit ( ) ; \n \t3 } else { \n \t4 log . warn ( <string_literal> ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( ! <string_literal> . equals ( rule . get <identifiersep> state ( ) ) ) { \n \t3 ip <identifiersep> addresses . add ( rule . get <identifiersep> ip <identifiersep> address <identifiersep> id ( ) ) ; \n \t3 string delete <identifiersep> forwarding <identifiersep> rule = client . get <identifiersep> nat <identifiersep> api ( ) . delete <identifiersep> ip <identifiersep> forwarding <identifiersep> rule ( rule . get <identifiersep> id ( ) ) ; \n \t3 if ( delete <identifiersep> forwarding <identifiersep> rule != null ) { \n <ect>
\t2 if ( connection <identifiersep> id != null ) { \n \t3 connection = this . connections . get ( connection <identifiersep> id ) ; } \n \t2 if ( connection == null ) { \n \t3 publish <identifiersep> no <identifiersep> connection <identifiersep> event ( message , connection <identifiersep> id ) ; \n <ect>
\t2 else { \n \t3 json <identifiersep> object j <identifiersep> obj = new json <identifiersep> object ( <identifier> ) ; \n \t3 json <identifiersep> array = new json <identifiersep> array ( ) ; \n \t3 json <identifiersep> array . put ( j <identifiersep> obj ) ; } \n <ect>
\t3 return collection <identifiersep> utils . wrap <identifiersep> set ( event ) ; } } \n \t1 private registered <identifiersep> service determine <identifiersep> registered <identifiersep> service <identifiersep> for <identifiersep> event ( final request <identifiersep> context context , final service service ) { \n \t2 registered <identifiersep> service registered <identifiersep> service = null ; \n \t2 if ( service != null ) { \n <ect>
\t2 try { \n \t3 final string engine <identifiersep> name = get <identifiersep> script <identifiersep> engine <identifiersep> name ( script <identifiersep> file ) ; \n \t3 final script <identifiersep> engine engine = new script <identifiersep> engine <identifiersep> manager ( ) . get <identifiersep> engine <identifiersep> by <identifiersep> name ( engine <identifiersep> name ) ; \n \t3 if ( engine == null || string <identifiersep> utils . is <identifiersep> blank ( engine <identifiersep> name ) ) { \n <ect>
\t3 try { \n \t4 work <identifiersep> manager . schedule <identifiersep> work ( connect <identifiersep> work , work <identifiersep> manager . <identifier> , null , null ) ; \n \t3 } catch ( work <identifiersep> exception e ) { \n \t4 running = false ; \n <ect>
\t2 if ( job instanceof default <identifiersep> <identifier> <identifiersep> executable ) { \n \t3 list < abstract <identifiersep> executable > tasks = ( ( default <identifiersep> <identifier> <identifiersep> executable ) job ) . get <identifiersep> tasks ( ) ; \n \t3 for ( abstract <identifiersep> executable task : tasks ) { \n \t4 if ( task . get <identifiersep> id ( ) . compare <identifiersep> to ( step <identifiersep> id ) >= 0 ) { \n <ect>
\t2 for ( int j = 0 ; j < dbpojo <identifiersep> pig <identifiersep> <identifier> . size ( ) ; j ++ ) { \n \t2 logger . info ( <string_literal> + dbpojo <identifiersep> pig <identifiersep> <identifier> . get ( j ) . get <identifiersep> script ( ) ) ; } \n \t2 <comment> \n \t2 if ( dbpojo <identifiersep> pig <identifiersep> <identifier> . size ( ) == 0 ) { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + actual <identifiersep> total <identifiersep> cpu + <string_literal> + total <identifiersep> cpu ) ; } \n \t5 long free <identifiersep> cpu = total <identifiersep> cpu - ( reserved <identifiersep> cpu + used <identifiersep> cpu ) ; \n \t5 long free <identifiersep> mem = total <identifiersep> mem - ( reserved <identifiersep> mem + used <identifiersep> mem ) ; \n <ect>
\t3 } else { \n \t4 <identifier> <identifiersep> transport . send ( <identifier> , peer ) ; \n \t4 <comment> \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 to <identifiersep> block <identifiersep> manager . delete <identifiersep> snapshot ( snapshot <identifiersep> id , snap . get <identifiersep> snap <identifiersep> point <identifiersep> id ( ) ) ; \n \t2 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e1 ) { \n \t3 log . error ( e1 ) ; } \n \t2 <comment> \n <ect>
\t5 param <identifiersep> name = ( ( string ) param <identifiersep> names . get ( <identifier> ) ) . to <identifiersep> lower <identifiersep> case ( ) ; \n \t5 param <identifiersep> value = ( string ) param <identifiersep> values . get ( <identifier> ) ; \n \t5 <comment> \n \t5 <comment> \n <ect>
\t1 print <string_literal> \n \t1 logger . info ( <string_literal> ) \n else : \n \t1 print <string_literal> \n <ect>
\t1 @ override \n \t1 public void on <identifiersep> failure ( exchange exchange ) { \n \t2 try { \n \t3 if ( commit <identifiersep> strategy . rollback ( exchange ) ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> master <identifiersep> only <identifiersep> nodes ( <number_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> data <identifiersep> only <identifiersep> nodes ( <number_literal> ) ; \n \t2 final client client = client ( ) ; \n <ect>
\t2 if ( is <identifiersep> visible <identifiersep> in <identifiersep> hierarchy ( ) && is <identifiersep> render <identifiersep> allowed ( ) ) \n \t2 { \n \t3 { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> resolve ( ) throws exception { \n \t2 uri uri = new uri ( <string_literal> ) ; \n <ect>
\t3 <identifier> <identifiersep> service <identifiersep> impl . delete <identifiersep> global <identifiersep> load <identifiersep> balancer <identifiersep> rule ( delete <identifiersep> cmd ) ; \n \t3 assert . assert <identifiersep> true ( <identifier> <identifiersep> rule . get <identifiersep> state ( ) == global <identifiersep> load <identifiersep> balancer <identifiersep> rule . state . revoke ) ; \n \t3 assert . assert <identifiersep> true ( <identifier> <identifiersep> <identifier> <identifiersep> map . is <identifiersep> revoke ( ) == true ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 result <identifiersep> file . flush ( ) ; \n \t3 int new <identifiersep> source <identifiersep> index = i ; \n \t3 semantic <identifiersep> model new <identifiersep> source = semantic <identifiersep> models . get ( new <identifiersep> source <identifiersep> index ) ; \n \t3 logger . info ( <string_literal> ) ; \n <ect>
\t2 { \n \t3 <comment> \n \t3 if ( version != stream <identifiersep> message . current <identifiersep> version ) \n \t3 { \n <ect>
\t2 return counters . contains <identifiersep> key ( cn ) ; } \n \t1 public counter get ( counter <identifiersep> name cn ) { \n \t2 counter c = counters . get ( cn ) ; \n \t2 if ( c == null ) \n <ect>
\t4 else \n \t4 { \n \t5 <identifier> <identifiersep> devices . add ( cdi ) ; \n \t5 if ( logger <identifiersep> is <identifiersep> debug <identifiersep> enabled ) \n <ect>
\t3 log . debug ( <string_literal> , body , cluster <identifiersep> name ) ; \n \t3 if ( destination <identifiersep> address != null ) { \n \t4 log . debug ( <string_literal> , destination <identifiersep> address ) ; } \n \t3 if ( source <identifiersep> address != null ) { \n <ect>
\t6 total ++ ; } } } \n \t3 log . debug ( <string_literal> , \n \t5 total , prefix , ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) ) ; } \n \t2 catch ( storage <identifiersep> exception e ) { \n <ect>
\t3 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n \t3 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t2 } catch ( instantiation <identifiersep> exception e ) { \n <ect>
<comment> \n \t5 if ( e . get <identifiersep> response ( ) . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) == <number_literal> ) { \n <ect>
\t2 return new config <identifiersep> key < ? > [ ] { heartbeat <identifiersep> interval , heartbeat <identifiersep> threshold } ; } \n \t1 private boolean ping <identifiersep> management <identifiersep> node ( final management <identifiersep> server <identifiersep> host <identifiersep> vo mshost ) { \n \t2 final string target <identifiersep> ip = mshost . get <identifiersep> service <identifiersep> ip ( ) ; \n \t2 if ( <string_literal> . equals ( target <identifiersep> ip ) || <string_literal> . equals ( target <identifiersep> ip ) ) { \n <ect>
\t4 logger . debug ( <string_literal> , mode ) ; \n \t4 set <identifiersep> mode ( mode ) ; } \n \t3 if ( tf <identifiersep> config . e <identifiersep> is <identifiersep> set ( tf <identifiersep> config . e <identifiersep> class ( ) . get <identifiersep> e <identifiersep> structural <identifiersep> feature ( <string_literal> ) ) ) { \n \t4 boolean enable <identifiersep> <identifier> = tf <identifiersep> config . get <identifiersep> enable <identifiersep> <identifier> <identifiersep> on <identifiersep> startup ( ) ; \n <ect>
\t2 if ( <identifier> . size ( ) > 1 ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + path ) ; } \n \t2 sr sr = <identifier> . iterator ( ) . next ( ) ; \n \t2 string sr <identifiersep> uuid = sr . get <identifiersep> uuid ( conn ) ; \n <ect>
\t3 if ( snapshot <identifiersep> info != null ) { \n \t4 logger . warn ( ( ) - > new parameterized <identifiersep> message ( <string_literal> , \n \t5 snapshot <identifiersep> info . snapshot <identifiersep> id ( ) , blob <identifiersep> id ) , e ) ; \n \t3 } else { \n <ect>
\t3 } catch ( no <identifiersep> route <identifiersep> to <identifiersep> host <identifiersep> exception <identifier> ) { \n \t4 <identifier> <identifiersep> log . error ( <string_literal> , <identifier> ) ; \n \t4 <comment> \n \t3 } catch ( connect <identifiersep> exception ce ) { \n <ect>
\t1 if ( filter . get <identifiersep> parent <identifiersep> operators ( ) . size ( ) == 1 \n \t2 && filter . get <identifiersep> parent <identifiersep> operators ( ) . get ( 0 ) instanceof table <identifiersep> scan <identifiersep> operator ) { \n \t1 ts = ( table <identifiersep> scan <identifiersep> operator ) filter . get <identifiersep> parent <identifiersep> operators ( ) . get ( 0 ) ; } \n <ect>
\t2 if ( n . is <identifiersep> variable ( ) ) \n \t3 return <string_literal> + n . get <identifiersep> name ( ) ; \n \t2 if ( n . equals ( node . any ) ) \n \t3 return <string_literal> ; \n <ect>
\t3 try { \n \t4 if ( test . test ( class <identifiersep> info ) ) { \n \t5 classes . add ( class <identifiersep> info . get ( ) ) ; } \n \t3 } catch ( throwable e ) { \n <ect>
\t3 if ( <identifier> != null ) { \n \t4 stmt . set <identifiersep> object ( si ++ , <identifier> , types . <identifier> ) ; } \n \t3 int result = stmt . execute <identifiersep> update ( ) ; \n \t3 if ( result != 1 ) { \n <ect>
\t1 log . debug ( <string_literal> + lv <identifiersep> name + <string_literal> + command <identifiersep> output . return <identifiersep> value + \n \t2 <string_literal> + command <identifiersep> output . output + <string_literal> + command <identifiersep> output . error , ex <identifiersep> saved ) ; \n \t1 <comment> \n \t1 if ( attempt == 1 ) { \n <ect>
\t2 public void run ( ) { \n \t2 try { \n \t3 create <identifiersep> timeline <identifiersep> domain ( domain <identifiersep> id , readers , writers ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 preconditions . check <identifiersep> not <identifiersep> null ( local <identifiersep> jar , <string_literal> ) ; \n \t3 log . info ( <string_literal> + name + <string_literal> + ser <identifiersep> conf ) ; \n \t3 client . submit <identifiersep> topology <identifiersep> with <identifiersep> opts ( name , local <identifiersep> jar , topology ) ; \n \t2 } catch ( final invalid <identifiersep> topology <identifiersep> exception e ) { \n <ect>
\t3 throw ex ; } \n \t2 long cluster = src <identifiersep> host . get <identifiersep> cluster <identifiersep> id ( ) ; \n \t2 type host <identifiersep> type = src <identifiersep> host . get <identifiersep> type ( ) ; \n <ect>
\t2 if ( command == on <identifiersep> off <identifiersep> type . on ) { \n \t3 hash <identifiersep> map < integer , integer > h = new hash <identifiersep> map < integer , integer > ( ) ; \n \t3 h . put ( bit , pending <identifiersep> on ) ; \n \t3 pending . put ( item . get <identifiersep> name ( ) , h ) ; \n <ect>
\t2 while ( true ) { \n \t3 try { \n \t4 dest = <identifier> <identifiersep> <identifier> <identifiersep> mgr . plan <identifiersep> deployment ( profile , plan , <identifier> , planner ) ; \n \t3 } catch ( final affinity <identifiersep> conflict <identifiersep> exception e2 ) { \n <ect>
\t5 <identifier> <identifiersep> inbound <identifiersep> tag <identifiersep> sets . remove ( tag ) ; } } \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n \t4 <identifier> <identifiersep> log . warn ( <string_literal> + tag <identifiersep> set + <string_literal> + old + <string_literal> + dup <identifiersep> tag + <string_literal> + dup <identifiersep> tag ) ; \n \t4 <identifier> <identifiersep> log . warn ( <string_literal> + old + <string_literal> + old . get <identifiersep> associated <identifiersep> key ( ) ) ; \n <ect>
\t2 list < exchange > list = a . get <identifiersep> received <identifiersep> exchanges ( ) ; \n \t2 assert <identifiersep> true ( <string_literal> , ! list . is <identifiersep> empty ( ) ) ; \n \t2 exchange exchange = list . get ( 0 ) ; \n \t2 message in = exchange . get <identifiersep> in ( ) ; \n <ect>
\t3 } ( context . dispatcher ) ) } \n \t2 } else { \n \t2 <comment> \n \t2 if ( sender ( ) == current <identifiersep> job <identifiersep> manager . or <identifiersep> null ) { \n <ect>
\t3 <identifier> <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t3 } catch ( exception e ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + stats <identifiersep> entry <identifiersep> identifier ) ; \n \t4 return false ; } \n \t3 if ( update <identifiersep> bytes ( user <identifiersep> stats , new <identifiersep> current <identifiersep> bytes <identifiersep> sent , new <identifiersep> current <identifiersep> bytes <identifiersep> received ) ) { \n <ect>
\t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . started ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> that ( strategy . reroute ( cluster <identifiersep> state , <string_literal> ) . routing <identifiersep> table ( ) , same <identifiersep> instance ( cluster <identifiersep> state . routing <identifiersep> table ( ) ) ) ; \n <ect>
\t3 case delete <identifiersep> <identifier> : \n \t4 handle <identifiersep> delete <identifiersep> awaiting <identifiersep> request ( req . lock <identifiersep> name , req . owner ) ; \n \t4 break ; \n \t3 default : \n <ect>
\t4 return null ; } \n \t2 } catch ( final agent <identifiersep> unavailable <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
@ override \n public synchronized < t extends indexed > list < t > load <identifiersep> all ( class < t > model , filtering <identifiersep> strategy filter ) { \n \t1 array <identifiersep> list < t > list = new array <identifiersep> list < t > ( ) ; \n \t1 string model <identifiersep> indexing <identifiersep> prop <identifiersep> name = get <identifiersep> index <identifiersep> property <identifiersep> name ( model ) ; \n <ect>
\t1 catch ( final queue <identifiersep> unavailable <identifiersep> exception e ) { \n \t2 forward <identifiersep> to <identifiersep> cluster ( message , new runnable ( ) { \n \t2 @ override \n \t2 public void run ( ) { \n <ect>
\t6 socket <identifiersep> list . add ( tcp <identifiersep> ip <identifiersep> socket ) ; } \n \t5 gc <identifiersep> device . set <identifiersep> <identifier> <identifiersep> socket ( tcp <identifiersep> ip <identifiersep> socket ) ; \n \t5 return true ; } } \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t4 <comment> \n \t4 logger . info ( <string_literal> + in <identifiersep> date ) ; \n \t4 clear <identifiersep> entity <identifiersep> manager <identifiersep> mapper . execute ( null ) ; \n \t4 unique <identifiersep> visitor <identifiersep> count = get <identifiersep> <identifier> <identifiersep> unique <identifiersep> visitor <identifiersep> count <identifiersep> mapper . execute ( in <identifiersep> date ) ; \n <ect>
\t1 public boolean disable <identifiersep> account ( long account <identifiersep> id ) throws concurrent <identifiersep> operation <identifiersep> exception , resource <identifiersep> unavailable <identifiersep> exception { \n \t2 boolean success = false ; \n \t2 if ( account <identifiersep> id < = <number_literal> ) { \n <ect>
\t5 command . set <identifiersep> command ( command . none ) ; } \n \t4 if ( index < data . length - 1 ) { \n \t5 command . set <identifiersep> arguments ( arrays . copy <identifiersep> of <identifiersep> range ( data , index , data . length - 1 ) ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 logger . error ( mini <identifiersep> <identifier> ( format ( <string_literal> , \n \t9 artifact . get <identifiersep> artifact <identifiersep> name ( ) ) ) ) ; \n \t2 logger . error ( t . get <identifiersep> message ( ) ) ; \n \t1 } else { \n <ect>
\t3 if ( reader != null ) { \n \t4 try { \n \t5 reader . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 view <identifiersep> instance <identifiersep> entity . set <identifiersep> view <identifiersep> url ( url <identifiersep> entity ) ; \n \t1 try { \n \t1 update <identifiersep> view <identifiersep> instance ( view <identifiersep> instance <identifiersep> entity ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t4 result . add <identifiersep> all ( do <identifiersep> find <identifiersep> path <identifiersep> matching <identifiersep> jar <identifiersep> resources ( root <identifiersep> dir <identifiersep> resource , root <identifiersep> dir <identifiersep> url , sub <identifiersep> pattern ) ) ; } \n \t3 else { \n \t4 result . add <identifiersep> all ( do <identifiersep> find <identifiersep> path <identifiersep> matching <identifiersep> file <identifiersep> resources ( root <identifiersep> dir <identifiersep> resource , sub <identifiersep> pattern ) ) ; } } \n <ect>
\t4 value = clz . new <identifiersep> instance ( ) ; \n \t4 set <identifiersep> method . invoke ( object , index , value ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t1 protected final cas <identifiersep> configuration <identifiersep> properties cas <identifiersep> properties ; \n \t1 @ override \n \t1 public model <identifiersep> and <identifiersep> view resolve ( final <identifier> <identifiersep> context context , final o <identifiersep> auth <identifiersep> registered <identifiersep> service service ) { \n \t2 final object bypass <identifiersep> approval <identifiersep> parameter = context . get <identifiersep> session <identifiersep> store ( ) . get ( context , o <identifiersep> auth20constants . bypass <identifiersep> approval <identifiersep> prompt ) ; \n <ect>
\t1 while ( ! replication <identifiersep> table . is <identifiersep> online ( conn <identifiersep> master ) ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 thread . sleep ( <number_literal> ) ; } \n \t1 <comment> \n <ect>
\t2 } catch ( exception e ) { \n \t3 get <identifiersep> exception <identifiersep> handler ( ) . handle <identifiersep> exception ( <string_literal> + event , exchange , e ) ; } } \n \t1 protected void do <identifiersep> start ( ) throws exception { \n <ect>
\t3 if ( alive == null ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 return new fence <identifiersep> answer ( command , false , <string_literal> ) ; } \n \t3 if ( alive ) { \n <ect>
\t2 try { \n \t3 while ( 0 < input <identifiersep> stream . available ( ) ) { \n \t4 available <identifiersep> input . append ( ( char ) input <identifiersep> stream . read ( ) ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( graph . should <identifiersep> trace ( ) ) { \n \t3 if ( rule != null ) { \n \t4 logger . debug ( <string_literal> + rule . to <identifiersep> short <identifiersep> string ( ) + <string_literal> + print <identifiersep> util . print ( t ) ) ; \n \t3 } else { \n <ect>
\t9 e . get <identifiersep> message ( ) ) ; } } \n \t4 } else { \n \t5 s <identifiersep> logger . debug ( <string_literal> ) ; } } \n \t2 } catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t5 while ( <identifier> <identifiersep> already <identifiersep> processed . size ( ) > <number_literal> ) \n \t6 <identifier> <identifiersep> already <identifiersep> processed . remove ( 0 ) ; } } \n \t3 long after <identifiersep> lock = <identifier> <identifiersep> context . clock ( ) . now ( ) ; \n \t3 if ( after <identifiersep> lock - before <identifiersep> lock > <number_literal> ) { \n <ect>
\t2 test <identifiersep> old <identifiersep> dest ( sam <identifiersep> host , sam <identifiersep> port , con <identifiersep> options ) ; \n \t2 test <identifiersep> fast ( sam <identifiersep> host , sam <identifiersep> port , con <identifiersep> options ) ; } \n \t1 private static void test <identifiersep> transient ( string host , int port , string con <identifiersep> options ) { \n \t2 test <identifiersep> dest ( host , port , con <identifiersep> options , <string_literal> ) ; \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \t4 byte <identifiersep> array <identifiersep> output <identifiersep> stream dummy = new byte <identifiersep> array <identifiersep> output <identifiersep> stream ( ) ; \n \t4 current <identifiersep> data . write <identifiersep> to ( dummy ) ; \n \t4 <comment> \n <ect>
\t6 catch ( exception e ) { \n \t7 log . warn ( <string_literal> , e ) ; \n \t7 module <identifiersep> factory . stop <identifiersep> module ( module , true , true ) ; } } } \n \t4 catch ( exception e ) { \n <ect>
\t3 double free <identifiersep> memory = double . parse <identifiersep> double ( res . get ( <string_literal> ) ) ; \n \t3 host <identifiersep> stats <identifiersep> entry host <identifiersep> stats = new host <identifiersep> stats <identifiersep> entry ( cmd . get <identifiersep> host <identifiersep> id ( ) , cpu <identifiersep> util , <identifier> <identifiersep> bytes , tx <identifiersep> bytes , <string_literal> , total <identifiersep> memory , free <identifiersep> memory , 0 , 0 ) ; \n \t3 return new get <identifiersep> host <identifiersep> stats <identifiersep> answer ( cmd , host <identifiersep> stats ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } else if ( request . starts <identifiersep> with ( messages . get <identifiersep> segment ) ) { \n \t3 log . debug ( <string_literal> ) ; \n \t3 out . add ( new get <identifiersep> segment <identifiersep> request ( messages . extract <identifiersep> client <identifiersep> from ( msg ) , request . substring ( messages . get <identifiersep> segment . length ( ) ) ) ) ; \n \t2 } else if ( request . starts <identifiersep> with ( messages . get <identifiersep> references ) ) { \n <ect>
\t2 @ override \n \t2 public void roll <identifiersep> back ( object state ) { \n \t3 if ( state != null ) { \n \t4 index = ( integer ) state ; } \n <ect>
\t4 <identifier> <identifiersep> network <identifiersep> mgr . allocate ( vm <identifiersep> profile , networks ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + networks . size ( ) + <string_literal> + vm . get <identifiersep> instance <identifiersep> name ( ) ) ; \n \t3 } <comment> \n \t2 } <comment> \n <ect>
\t1 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + \n \t2 <string_literal> ) ; } \n \t1 if ( <identifier> <identifiersep> nodes <identifiersep> file <identifiersep> path != null && ! use <identifiersep> new <identifiersep> watcher ) \n \t1 { \n <ect>
\t3 public void on <identifiersep> <identifier> <identifiersep> violation ( <identifier> <identifier> , crawler <identifiersep> context context ) { \n \t4 large <identifiersep> test <identifiersep> base . <identifier> <identifiersep> <identifier> . add ( <identifier> ) ; \n \t4 if ( context . get <identifiersep> browser ( ) . get <identifiersep> <identifier> <identifiersep> dom ( ) . contains ( <identifier> <identifiersep> text ) ) { \n \t5 <identifier> <identifiersep> <identifier> <identifiersep> state <identifiersep> is <identifiersep> correct = true ; \n <ect>
\t2 <identifier> . add ( <identifier> ) ; } \n \t1 @ override \n \t1 public void release ( <identifier> <identifier> ) { \n \t2 if ( <identifier> == null ) { \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( this , <string_literal> + e . get <identifiersep> message ( ) , e ) ; \n \t3 return peer <identifiersep> <identifier> <identifiersep> return <identifiersep> codes . <identifier> <identifiersep> parse ; \n \t2 } catch ( throwable t ) { \n <ect>
\t1 public void on <identifiersep> failure ( insert <identifiersep> exception e , base <identifiersep> client <identifiersep> putter state ) { \n \t2 if ( log <identifiersep> debug ) logger . debug ( this , <string_literal> + e + <string_literal> + state , e ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> <identifier> ( base <identifiersep> client <identifiersep> putter state ) { \n <ect>
\t3 { \n \t4 session . close ( new close <identifiersep> reason ( new close <identifiersep> code ( code ) , reason ) ) ; \n \t3 } catch ( io <identifiersep> exception <identifier> ) \n \t3 { \n <ect>
\t4 log . debug ( <string_literal> , cl . get <identifiersep> name ( ) , <identifier> <identifiersep> resource <identifiersep> entries <identifiersep> field , <identifier> ) ; \n \t4 try { \n \t5 clear <identifiersep> map ( cl . get <identifiersep> <identifier> ( ) , loader , <identifier> <identifiersep> resource <identifiersep> entries <identifiersep> field ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t5 <comment> \n \t5 if ( pp <identifiersep> class <identifiersep> name == null ) \n \t6 continue ; \n \t5 try { \n <ect>
\t4 call . set <identifiersep> message <identifiersep> id ( message <identifiersep> id ++ ) ; \n \t4 lock <identifiersep> set = true ; \n \t4 callback <identifiersep> handler . handle <identifiersep> callback <identifiersep> <identifier> ( new callback ( call ) ) ; } \n \t2 } catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t2 for ( <identifier> <identifiersep> runtime <identifiersep> event <identifiersep> listener listener : event <identifiersep> manager . get <identifiersep> listeners ( ) ) { \n \t3 try { \n \t4 consumer . accept ( listener ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t3 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n \t3 if ( response <identifiersep> code == <number_literal> ) { \n \t4 input <identifiersep> stream input = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t4 element el = query <identifiersep> async <identifiersep> job <identifiersep> result ( server , input ) ; \n <ect>
\t3 db . commit ( ) ; \n \t2 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n \t3 log . warn ( <string_literal> ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t5 this . delegate . send ( message ) ; \n \t5 success = true ; } \n \t4 catch ( exception e ) { \n \t5 if ( <identifier> && last <identifiersep> factory <identifiersep> tried == last <identifiersep> factory <identifiersep> to <identifiersep> try ) { \n <ect>
\t1 try { \n \t2 host <identifiersep> info <identifiersep> list . add ( new host <identifiersep> info ( <string_literal> + string . value <identifiersep> of ( i ) , \n \t4 host <identifiersep> and <identifiersep> port [ 0 ] , integer . parse <identifiersep> int ( host <identifiersep> and <identifiersep> port [ 1 ] ) ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 new input <identifiersep> stream <identifiersep> reader ( p . get <identifiersep> input <identifiersep> stream ( ) , encoding ) ) ) { \n \t4 r = line <identifiersep> read . read <identifiersep> line ( ) ; \n \t4 if ( debug ) { \n \t5 log . debug ( <string_literal> + r + <string_literal> ) ; <comment> \n <ect>
\t3 . with <identifiersep> <identifier> <identifiersep> <identifier> ( new <identifier> <identifiersep> <identifier> ( dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> read <identifiersep> capacity ( ) , \n \t4 dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> write <identifiersep> capacity ( ) ) ) . with <identifiersep> table <identifiersep> name ( dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> table <identifiersep> name ( ) ) ; \n \t2 if ( delete <identifiersep> tables ) { \n \t3 final delete <identifiersep> table <identifiersep> request delete = new delete <identifiersep> table <identifiersep> request ( request . get <identifiersep> table <identifiersep> name ( ) ) ; \n <ect>
\t3 location = journal . get <identifiersep> next <identifiersep> location ( next <identifiersep> location , limit ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> , next <identifiersep> location , e ) ; \n <ect>
\t2 byte [ ] orig = read <identifiersep> resource <identifiersep> file ( <string_literal> ) ; \n \t2 <identifier> <identifiersep> out . write ( orig ) ; \n \t2 <identifier> <identifiersep> out . close ( ) ; \n \t2 byte [ ] compressed = compressed <identifiersep> buf . to <identifiersep> byte <identifiersep> array ( ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 this . build <identifiersep> super <identifiersep> classes <identifiersep> maps ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 this . build <identifiersep> sub <identifiersep> properties <identifiersep> maps ( ) ; \n <ect>
\t3 ui <identifiersep> utils . add <identifiersep> error <identifiersep> attribute ( model , e ) ; } \n \t2 model . add <identifiersep> attribute ( <string_literal> , <string_literal> ) ; \n \t2 model . add <identifiersep> attribute ( <string_literal> , cluster ) ; \n \t2 ui <identifiersep> utils . add <identifiersep> title <identifiersep> attribute ( model , <string_literal> ) ; \n <ect>
\t8 user <identifiersep> override <identifiersep> path = f . get <identifiersep> absolute <identifiersep> path ( ) ; \n \t8 if ( ! f . get <identifiersep> name ( ) . starts <identifiersep> with ( <string_literal> ) ) { \n \t9 string tmp <identifiersep> absolute <identifiersep> path = absolute <identifiersep> path + <string_literal> + f . get <identifiersep> name ( ) ; \n \t9 if ( ! copy <identifiersep> file ( user <identifiersep> override <identifiersep> path , tmp <identifiersep> absolute <identifiersep> path ) ) { \n <ect>
\t4 <comment> \n \t3 } else { \n \t4 <comment> \n \t4 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 input <identifiersep> stream is = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t3 map < string , string > error <identifiersep> info = test <identifiersep> client <identifiersep> with <identifiersep> api . get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> , <string_literal> } ) ; \n \t3 s <identifiersep> logger . error ( <string_literal> + error <identifiersep> info . get ( <string_literal> ) + <string_literal> + error <identifiersep> info . get ( <string_literal> ) ) ; \n \t2 } else { \n <ect>
\t1 done . set ( true ) ; \n \t1 end = system . nano <identifiersep> time ( ) ; \n \t1 t . join ( ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 <identifier> <identifiersep> log . log ( log . <identifier> , <string_literal> , ioe ) ; \n \t4 } finally { \n \t5 if ( fos != null ) try { fos . close ( ) ; } catch ( io <identifiersep> exception ioe ) { } } } \n \t2 } else { \n <ect>
\t3 result . <identifier> = ( accumulo <identifiersep> security <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t4 { \n \t5 setup <identifiersep> task . call ( ) ; } \n \t4 catch ( exception e ) \n \t4 { \n <ect>
\t2 virtual <identifiersep> machine vm = <identifier> <identifiersep> instance <identifiersep> dao . find <identifiersep> by <identifiersep> uuid ( cmd . get <identifiersep> vm <identifiersep> id ( ) ) ; \n \t2 if ( vm == null ) { \n \t3 vm = <identifier> <identifiersep> instance <identifiersep> dao . find <identifiersep> by <identifiersep> id ( long . parse <identifiersep> long ( cmd . get <identifiersep> vm <identifiersep> id ( ) ) ) ; } \n \t2 if ( vm == null ) { \n <ect>
\t1 determine <identifiersep> election <identifiersep> status ( ) ; } } \n private void become <identifiersep> leader ( ) { \n \t1 state = state . elected ; \n \t1 dispatch <identifiersep> event ( event <identifiersep> type . elected <identifiersep> start ) ; \n <ect>
\t4 akka <identifiersep> config = akka <identifiersep> utils . get <identifiersep> akka <identifiersep> config ( configuration , hostname , port ) ; \n \t3 } else { \n \t4 <comment> \n \t4 akka <identifiersep> config = akka <identifiersep> utils . get <identifiersep> akka <identifiersep> config ( configuration ) ; } \n <ect>
\t4 audio . set <identifiersep> <identifier> <identifiersep> sample ( sample <identifiersep> size ) ; \n \t4 audio . get <identifiersep> audio <identifiersep> properties ( ) . set <identifiersep> number <identifiersep> of <identifiersep> channels ( nr <identifiersep> channels ) ; \n \t4 audio . get <identifiersep> audio <identifiersep> properties ( ) . set <identifiersep> sample <identifiersep> frequency ( sample <identifiersep> rate ) ; \n \t3 } else { \n <ect>
\t3 if ( file != null ) { \n \t4 if ( file . delete ( ) ) { \n \t5 delete <identifiersep> parents ( file ) ; } \n \t3 } else { \n <ect>
\t1 public void write ( output <identifiersep> stream os , string hex <identifiersep> encoded <identifiersep> binary ) throws io <identifiersep> exception { \n \t2 os . write ( hex <identifiersep> string <identifiersep> to <identifiersep> byte <identifiersep> array ( hex <identifiersep> encoded <identifiersep> binary ) ) ; \n \t2 os . flush ( ) ; \n <ect>
\t4 if ( action != null ) { \n \t5 log . info ( <string_literal> + tool <identifiersep> name + <string_literal> + iface . get <identifiersep> name ( ) + <string_literal> ) ; \n \t5 action . perform <identifiersep> headless ( iface , null ) ; \n \t4 } else { \n <ect>
\t2 if ( ! string <identifiersep> utils . is <identifiersep> empty ( timeout . get <identifiersep> text ( ) ) ) { \n \t3 try { \n \t4 system <identifiersep> sampler . set <identifiersep> <identifier> ( long . parse <identifiersep> long ( timeout . get <identifiersep> text ( ) ) ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 if ( method instanceof new <identifiersep> instance <identifiersep> meta <identifiersep> method ) { \n \t5 handle = method <identifiersep> handles . guard <identifiersep> with <identifiersep> test ( has <identifiersep> category <identifiersep> in <identifiersep> current <identifiersep> thread <identifiersep> guard , handle , fallback ) ; \n <ect>
\t4 proc . output ( out ) ; \n \t4 out . flush ( ) ; \n \t3 } catch ( query <identifiersep> cancelled <identifiersep> exception ex ) { \n \t4 <comment> \n <ect>
\t3 future < object > jobs <identifiersep> future = jm . ask ( job <identifiersep> manager <identifiersep> messages . get <identifiersep> request <identifiersep> running <identifiersep> jobs <identifiersep> status ( ) , deadline . time <identifiersep> left ( ) ) ; \n \t3 running <identifiersep> jobs <identifiersep> status running <identifiersep> jobs = ( running <identifiersep> jobs <identifiersep> status ) await . result ( jobs <identifiersep> future , deadline . time <identifiersep> left ( ) ) ; \n \t3 for ( job <identifiersep> status <identifiersep> message running <identifiersep> job : running <identifiersep> jobs . get <identifiersep> status <identifiersep> messages ( ) ) { \n \t4 job <identifiersep> id = running <identifiersep> job . get <identifiersep> job <identifiersep> id ( ) ; \n <ect>
\t3 if ( ! validation . is <identifiersep> blank ( <identifier> <identifiersep> value ) ) { \n \t4 http <identifiersep> response response = resteasy <identifiersep> provider <identifiersep> factory . get <identifiersep> context <identifiersep> data ( http <identifiersep> response . class ) ; \n \t4 response . get <identifiersep> output <identifiersep> headers ( ) . put <identifiersep> single ( <string_literal> , <identifier> <identifiersep> value ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 saved <identifiersep> connection <identifiersep> container saved <identifiersep> connection <identifiersep> container = mapper . read <identifiersep> value ( new file ( saved <identifiersep> connection <identifiersep> file ) , saved <identifiersep> connection <identifiersep> container . class ) ; \n \t3 saved <identifiersep> connection <identifiersep> container . get <identifiersep> saved <identifiersep> connections ( ) . add ( db <identifiersep> config ) ; \n \t3 mapper . writer <identifiersep> with <identifiersep> default <identifiersep> pretty <identifiersep> printer ( ) . write <identifiersep> value ( new file ( saved <identifiersep> connection <identifiersep> file ) , saved <identifiersep> connection <identifiersep> container ) ; \n \t2 } catch ( json <identifiersep> generation <identifiersep> exception e1 ) { \n <ect>
\t4 new <identifiersep> events . add ( event . get ( ) ) ; } } \n \t2 prev <identifiersep> window <identifiersep> events . clear ( ) ; \n \t2 if ( ! events . is <identifiersep> empty ( ) ) { \n \t3 prev <identifiersep> window <identifiersep> events . add <identifiersep> all ( window <identifiersep> events ) ; \n <ect>
\t5 try { \n \t6 this . <identifier> . begin ( ) ; \n \t6 return true ; \n \t5 } catch ( exception ex ) { \n <ect>
\t3 <comment> \n \t3 native <identifiersep> affinity . instance . get <identifiersep> cpu ( ) ; \n \t3 estimate <identifiersep> frequency ( <number_literal> ) ; \n \t3 estimate <identifiersep> frequency ( <number_literal> ) ; \n <ect>
\t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( e ) ; } \n \t2 list < <identifier> <identifiersep> to > disks <identifiersep> to = new array <identifiersep> list < <identifier> <identifiersep> to > ( ) ; \n \t2 for ( ovf <identifiersep> file of : <identifier> ) { \n \t3 if ( string <identifiersep> utils . is <identifiersep> blank ( of . <identifier> <identifiersep> id ) ) { \n <ect>
\t1 static rest <identifiersep> method <identifiersep> result subscribe <identifiersep> topic ( kafka <identifiersep> client this <identifiersep> client , final string topic ) throws framework <identifiersep> exception { \n \t2 if ( get <identifiersep> consumer ( this <identifiersep> client ) == null && this <identifiersep> client . get <identifiersep> servers ( ) != null && this <identifiersep> client . get <identifiersep> servers ( ) . length > 0 ) { \n \t3 set <identifiersep> consumer ( this <identifiersep> client , new kafka <identifiersep> consumer < > ( get <identifiersep> configuration ( this <identifiersep> client , kafka <identifiersep> consumer . class ) ) ) ; \n \t2 } else if ( this <identifiersep> client . get <identifiersep> servers ( ) == null || this <identifiersep> client . get <identifiersep> servers ( ) . length == 0 ) { \n <ect>
\t1 for item in <identifier> : \n \t2 if pid <identifiersep> exists ( item [ <string_literal> ] ) and ( item [ <string_literal> ] not in exclude <identifiersep> list ) : \n \t2 <identifier> . write ( <string_literal> % item [ <string_literal> ] ) \n \t2 pid <identifiersep> saved = item [ <string_literal> ] \n <ect>
\t2 return optional . empty ( ) ; } \n \t1 private static json <identifiersep> web <identifiersep> key <identifiersep> set build <identifiersep> json <identifiersep> web <identifiersep> key <identifiersep> set ( final resource resource ) throws exception { \n \t2 logger . debug ( <string_literal> , resource ) ; \n \t2 final string json = io <identifiersep> utils . to <identifiersep> string ( resource . get <identifiersep> input <identifiersep> stream ( ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ; \n <ect>
\t4 } catch ( interrupted <identifiersep> exception e ) { \n \t5 break ; } \n \t4 timeout <identifiersep> count ++ ; } \n \t3 if ( timeout <identifiersep> count >= <number_literal> ) { \n <ect>
\t1 @ override \n \t1 public void process <identifiersep> binding <identifiersep> configuration ( string context , item item , string binding <identifiersep> config ) \n \t3 throws binding <identifiersep> config <identifiersep> parse <identifiersep> exception { \n \t2 super . process <identifiersep> binding <identifiersep> configuration ( context , item , binding <identifiersep> config ) ; \n <ect>
\t2 with <identifiersep> tx <identifiersep> session ( s - > s . persist ( item ) ) ; \n \t2 assert <identifiersep> equals ( 0 , stats . get <identifiersep> second <identifiersep> level <identifiersep> cache <identifiersep> miss <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> equals ( 0 , stats . get <identifiersep> second <identifiersep> level <identifiersep> cache <identifiersep> hit <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> equals ( 1 , stats . get <identifiersep> second <identifiersep> level <identifiersep> cache <identifiersep> put <identifiersep> count ( ) ) ; \n <ect>
\t3 this . physical <identifiersep> operator = physical <identifiersep> operator ; } \n \t2 @ override \n \t2 public tuple apply ( tuple t ) { \n <ect>
\t8 dest . get <identifiersep> pod ( ) . get <identifiersep> name ( ) , <string_literal> ) ; \n \t4 try { \n \t5 <identifier> <identifiersep> agent <identifiersep> mgr . send ( dst <identifiersep> host <identifiersep> id , new commands ( cleanup ( vm ) ) , null ) ; \n \t4 } catch ( final agent <identifiersep> unavailable <identifiersep> exception ae ) { \n <ect>
\t2 int tcp <identifiersep> compressed <identifiersep> size = tcp <identifiersep> content . get <identifiersep> length ( ) ; \n \t2 int http <identifiersep> compressed <identifiersep> size = http <identifiersep> content . get <identifiersep> length ( ) ; \n \t2 assert <identifiersep> equals ( tcp <identifiersep> content . get <identifiersep> length ( ) , http <identifiersep> content . get <identifiersep> length ( ) ) ; \n \t2 assert <identifiersep> equals ( tcp <identifiersep> message . read <identifiersep> string ( ) , http <identifiersep> message . read <identifiersep> string ( ) ) ; \n <ect>
\t2 if ( ! result ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + cmd . get <identifiersep> vm <identifiersep> name ( ) ) ; \n \t3 return new security <identifiersep> group <identifiersep> rule <identifiersep> answer ( cmd , false , <string_literal> ) ; \n \t2 } else { \n <ect>
\t8 + new java . util . date ( last <identifiersep> modified ) + <string_literal> \n \t8 + new java . util . date ( last <identifiersep> modified <identifiersep> <identifier> [ i ] ) ) ; \n \t5 return ( true ) ; } \n \t3 } catch ( naming <identifiersep> exception e ) { \n <ect>
\t1 log <identifiersep> <identifier> ( issue , pattern ) ; \n \t1 return true ; } \n \t1 return false ; } \n private static void log <identifiersep> <identifier> ( <identifier> <identifiersep> issue issue , issue <identifiersep> pattern pattern ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + logical <identifiersep> router <identifiersep> port <identifiersep> uuid + <string_literal> ) ; \n \t4 final delete <identifiersep> logical <identifiersep> router <identifiersep> port <identifiersep> command cmd <identifiersep> delete <identifiersep> port = new delete <identifiersep> logical <identifiersep> router <identifiersep> port <identifiersep> command ( l <identifiersep> router <identifiersep> uuid , logical <identifiersep> router <identifiersep> port <identifiersep> uuid ) ; \n \t4 final delete <identifiersep> logical <identifiersep> router <identifiersep> port <identifiersep> answer answer <identifiersep> delete = ( delete <identifiersep> logical <identifiersep> router <identifiersep> port <identifiersep> answer ) agent <identifiersep> mgr . <identifier> <identifiersep> send ( nicira <identifiersep> nvp <identifiersep> host . get <identifiersep> id ( ) , cmd <identifiersep> delete <identifiersep> port ) ; \n \t4 if ( answer <identifiersep> delete != null && answer <identifiersep> delete . get <identifiersep> result ( ) ) { \n <ect>
\t6 log . debug ( <string_literal> + tx ) ; } \n \t5 inflight <identifiersep> transactions . remove ( tx ) ; } } \n \t3 synchronized ( prepared <identifiersep> transactions ) { \n \t4 for ( transaction <identifiersep> id tx <identifiersep> id : prepared <identifiersep> transactions . key <identifiersep> set ( ) ) { \n <ect>
\t2 return get <identifiersep> fake <identifiersep> player ( world , profile , block <identifiersep> pos . origin ) ; } \n \t1 @ override \n \t1 public fake <identifiersep> player <identifiersep> bc get <identifiersep> fake <identifiersep> player ( world <identifiersep> server world , game <identifiersep> profile profile , block <identifiersep> pos pos ) { \n \t2 if ( profile == null ) { \n <ect>
\t2 try { \n \t3 m <identifiersep> cms . unlock <identifiersep> resource ( resource ) ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t3 { \n \t4 schedule <identifiersep> builder = cron <identifiersep> schedule ( cron <identifiersep> expression ) ; \n \t3 } catch ( runtime <identifiersep> exception e ) \n \t3 { \n <ect>
\t7 logger . debug ( <string_literal> , device <identifiersep> token . token <identifiersep> type ) ; \n \t7 logger . debug ( <string_literal> , device <identifiersep> token . refresh <identifiersep> token ) ; \n \t7 logger . debug ( <string_literal> , device <identifiersep> token . expires <identifiersep> in ) ; } \n \t6 break ; } \n <ect>
\t1 if ( join ) : \n \t1 self . task . ready <identifiersep> for <identifiersep> shutdown . wait ( ) \n \t1 self . server . shutdown ( ) \n \t1 # should we do some kind of check to make sure it <identifier> \n <ect>
\t3 file <identifiersep> name = convert <identifiersep> url <identifiersep> to <identifiersep> file <identifiersep> name ( file <identifiersep> name ) ; \n \t3 file host <identifiersep> dir = new file ( pms . get <identifiersep> configuration ( ) . get <identifiersep> temp <identifiersep> folder ( ) , host <identifiersep> name ) ; \n \t3 if ( ! host <identifiersep> dir . is <identifiersep> directory ( ) ) { \n \t4 if ( ! host <identifiersep> dir . mkdir ( ) ) { \n <ect>
\t2 if ( ! wildcard <identifiersep> object . get <identifiersep> type <identifiersep> argument ( ) . equals ( object . class ) ) { \n \t3 log . info ( <string_literal> + wildcard <identifiersep> object . get <identifiersep> type <identifiersep> argument ( ) ) ; \n \t3 result = false ; } \n \t2 if ( ! object <identifiersep> object . get <identifiersep> type <identifiersep> argument ( ) . equals ( object . class ) ) { \n <ect>
\t4 assert <identifiersep> equals ( <string_literal> , 0 , success ) ; } \n \t3 else { \n \t4 log . debug ( <string_literal> ) ; } } \n \t2 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception <identifier> ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t4 m = null ; } \n \t3 try { \n \t4 fs . delete ( test <identifiersep> path , false ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 rw <identifiersep> lock . read <identifiersep> lock ( ) ; \n \t2 try { \n \t3 if ( stopping ) { \n <ect>
<comment> \n \t1 protected void register <identifiersep> handlers ( map < string , object > url <identifiersep> map ) throws beans <identifiersep> exception { \n \t2 if ( url <identifiersep> map . is <identifiersep> empty ( ) ) { \n <ect>
\t1 if ( field == null ) return ; \n \t1 try { \n \t1 ( ( cleaner ) field . get ( bb ) ) . clean ( ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t1 @ <identifier> <identifiersep> fix ( bug <identifiersep> url = <string_literal> ) \n \t1 public void test <identifiersep> repository <identifiersep> with <identifiersep> custom <identifiersep> endpoint <identifiersep> protocol ( ) { \n \t2 client client = client ( ) ; \n \t2 settings bucket <identifiersep> settings = internal <identifiersep> cluster ( ) . get <identifiersep> instance ( settings . class ) . get <identifiersep> by <identifiersep> prefix ( <string_literal> ) ; \n <ect>
\t2 while ( it . has <identifiersep> next ( ) ) { \n \t3 content <identifiersep> name filtered <identifiersep> name = it . next ( ) ; \n \t3 if ( filtered <identifiersep> name . is <identifiersep> prefix <identifiersep> of ( name ) ) { \n \t4 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n <ect>
\t3 <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> } ; \n \t2 map < integer , string > lock <identifiersep> <identifier> = new hash <identifiersep> map < integer , string > ( ) ; \n \t2 int color <identifiersep> num = 0 ; \n \t2 hash <identifiersep> set < critical <identifiersep> section > <identifier> = new hash <identifiersep> set < critical <identifiersep> section > ( ) ; \n <ect>
\t3 thermostat . set <identifiersep> property ( property , new <identifiersep> state ) ; \n \t3 logger . trace ( <string_literal> , thermostat ) ; \n \t3 o <identifiersep> auth <identifiersep> credentials oauth <identifiersep> credentials = get <identifiersep> o <identifiersep> auth <identifiersep> credentials ( provider . get <identifiersep> <identifier> ( item <identifiersep> name ) ) ; \n \t3 if ( oauth <identifiersep> credentials == null ) { \n <ect>
\t5 log = log ; } \n \t4 if ( name != null ) { \n \t5 log . warn ( <string_literal> + name + <string_literal> + e . get <identifiersep> message ( ) , e ) ; \n \t4 } else { \n <ect>
\t5 new <identifiersep> current <identifiersep> bytes <identifiersep> received += bytes <identifiersep> sent <identifiersep> and <identifiersep> received [ 1 ] ; } \n \t3 } else { \n \t4 uri broadcast <identifiersep> uri = network . get <identifiersep> broadcast <identifiersep> uri ( ) ; \n \t4 if ( broadcast <identifiersep> uri == null ) { \n <ect>
\t2 string accept <identifiersep> seed = key + websocket <identifiersep> <number_literal> <identifiersep> accept <identifiersep> guid ; \n \t2 byte [ ] <identifier> = web <identifiersep> socket <identifiersep> util . <identifier> ( accept <identifiersep> seed . get <identifiersep> bytes ( charset <identifiersep> util . us <identifiersep> ascii ) ) ; \n \t2 string accept = web <identifiersep> socket <identifiersep> util . base64 ( <identifier> ) ; \n <ect>
\t3 print <identifiersep> usage ( ) ; } } \n \t1 private static void print <identifiersep> usage ( ) { \n \t2 logger . info ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t2 try { \n \t3 <comment> \n \t3 super . shutdown ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 <identifier> <identifiersep> notify ( <identifier> <identifiersep> <identifier> . screen . title + <string_literal> , <string_literal> ) \n \t2 else \n \t2 <identifier> <identifiersep> notify ( <identifier> <identifiersep> <identifier> . screen . title + <string_literal> ) \n \t1 if ( <identifier> <identifiersep> <identifier> . screen == <identifier> <identifiersep> <identifier> ) \n <ect>
\t4 if ( ! tracker . has <identifiersep> changed ( ( source <identifiersep> type <identifiersep> stateful ) <identifier> ) ) { \n \t5 continue ; } \n \t4 source <identifiersep> init <identifiersep> service . execute ( new source <identifiersep> initializer ( queued <identifiersep> source <identifiersep> init <identifiersep> tasks . increment <identifiersep> and <identifiersep> get ( ) , next <identifiersep> stream , <identifier> ) ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t8 try { \n \t9 short width = integer . value <identifiersep> of ( cell <identifiersep> width <identifiersep> string ) . short <identifiersep> value ( ) ; \n \t9 sheet . set <identifiersep> column <identifiersep> width ( current <identifiersep> column <identifiersep> number , width * <number_literal> ) ; \n \t8 } catch ( exception ex ) { \n <ect>
\t3 if ( ! <identifier> . is <identifiersep> empty ( ) ) { \n \t4 throw new rest <identifiersep> exception ( <string_literal> , \n \t6 http <identifiersep> status . forbidden ) ; } } \n \t2 catalog . remove ( <identifier> <identifiersep> info ) ; \n <ect>
\t6 record = this . buffer . get <identifiersep> record ( this . position ) ; } \n \t5 this . position ++ ; \n \t5 return record ; } \n \t4 catch ( io <identifiersep> exception ioex ) { \n <ect>
\t6 local <identifiersep> addr , msg . dest ( ) == null ? <string_literal> : <string_literal> , msg . dest ( ) , msg . print <identifiersep> headers ( ) ) ; \n \t4 return null ; } \n \t3 encrypt <identifiersep> and <identifiersep> send ( msg ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 throw new runtime <identifiersep> camel <identifiersep> exception ( \n \t5 <string_literal> + name + <string_literal> + endpoint + <string_literal> + e . get <identifiersep> message ( ) , e ) ; } } \n \t1 protected void warn <identifiersep> missing <identifiersep> uri <identifiersep> param <identifiersep> on <identifiersep> property ( string name ) { \n <ect>
\t4 get <identifiersep> values ( obj , field <identifiersep> <identifier> , notification <identifiersep> filter <identifiersep> property . wiki , results ) ; \n \t4 get <identifiersep> values ( obj , field <identifiersep> <identifier> , notification <identifiersep> filter <identifiersep> property . space , results ) ; \n \t4 get <identifiersep> values ( obj , field <identifiersep> documents , notification <identifiersep> filter <identifiersep> property . page , results ) ; } \n \t2 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
<number_literal> final map < string , object > attributes , \n <number_literal> final registered <identifiersep> service registered <identifiersep> service ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 final map < string , object > encoded <identifiersep> attributes = this . protocol <identifiersep> attribute <identifiersep> encoder . encode <identifiersep> attributes ( attributes , registered <identifiersep> service ) ; \n <ect>
\t7 . get <identifiersep> bytes ( ) ) ) ; \n \t5 state = <identifier> . get <identifiersep> info ( ) . state ; \n \t5 break ; \n \t4 } catch ( libvirt <identifiersep> exception e ) { \n <ect>
\t1 private void process <identifiersep> client <identifiersep> handshake ( net <identifiersep> data . handshake <identifiersep> hello client <identifiersep> hello , net <identifiersep> data . handshake <identifiersep> verification handshake <identifiersep> verification , channel <identifiersep> handler <identifiersep> context ctx ) { \n \t2 logger . info ( <string_literal> ) ; \n \t2 public <identifiersep> identity <identifiersep> certificate client <identifiersep> cert = net <identifiersep> message <identifiersep> util . convert ( client <identifiersep> hello . get <identifiersep> certificate ( ) ) ; \n \t2 if ( ! client <identifiersep> cert . verify <identifiersep> signed <identifiersep> by ( config . get <identifiersep> security ( ) . get <identifiersep> server <identifiersep> public <identifiersep> certificate ( ) ) ) { \n <ect>
\t5 s <identifiersep> logger . info ( <string_literal> ) ; \n \t5 client = new http <identifiersep> client ( ) ; \n \t5 method = new get <identifiersep> method ( url ) ; \n \t5 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t2 annotation [ ] annotations = response <identifiersep> get <identifiersep> annotations <identifiersep> annotated <identifiersep> class . class . get <identifiersep> annotations ( ) ; \n \t2 int size = string . value <identifiersep> of ( long . max <identifiersep> value ) . length ( ) + splitter . length ( ) \n \t4 + annotations [ 0 ] . annotation <identifiersep> type ( ) . get <identifiersep> name ( ) . length ( ) \n \t4 + annotations [ 1 ] . annotation <identifiersep> type ( ) . get <identifiersep> name ( ) . length ( ) ; \n <ect>
\t6 . to ( <string_literal> ) ; } \n \t2 } ; \n \t2 <comment> \n \t2 list < route > routes = get <identifiersep> route <identifiersep> list ( builder ) ; \n <ect>
\t1 create <identifiersep> host <identifiersep> requests ( topology , request <identifiersep> entity ) ; } \n public host <identifiersep> offer <identifiersep> response offer ( host host ) { \n \t1 <comment> \n \t1 synchronized ( requests <identifiersep> with <identifiersep> reserved <identifiersep> hosts ) { \n <ect>
\t2 synchronized ( <identifier> <identifiersep> <identifier> ) { \n \t3 conn = <identifier> <identifiersep> <identifier> . remove ( pool <identifiersep> uuid ) ; } \n \t2 if ( conn != null ) { \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , \n \t3 chat <identifiersep> room <identifiersep> member <identifiersep> role . owner , role <identifiersep> event <identifiersep> <identifier> . get <identifiersep> previous <identifiersep> role ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , \n \t3 chat <identifiersep> room <identifiersep> member <identifiersep> role . <identifier> , role <identifiersep> event <identifiersep> <identifier> . get <identifiersep> new <identifiersep> role ( ) ) ; \n <ect>
\t1 public int total <identifiersep> sources ; \n \t1 public void on <identifiersep> pump <identifiersep> <identifier> ( tile <identifiersep> pump pump , block <identifiersep> pos <identifier> <identifiersep> pos ) { \n \t2 game <identifiersep> profile profile = pump . get <identifiersep> owner ( ) ; \n \t2 if ( profile == null ) { \n <ect>
\t3 m <identifiersep> bean <identifiersep> client = new m <identifiersep> bean <identifiersep> client ( ip , port ) ; \n \t3 m <identifiersep> bean <identifiersep> client . connect ( ) ; \n \t3 logger . debug ( <string_literal> , m <identifiersep> bean <identifiersep> client . is <identifiersep> connected ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> start + <string_literal> ) ; \n \t3 <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> start = <number_literal> ; } \n \t2 <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> size = numbers <identifiersep> util . parse <identifiersep> int ( <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( config . vmware <identifiersep> additional <identifiersep> vnc <identifiersep> port <identifiersep> range <identifiersep> size . key ( ) ) , <number_literal> ) ; \n \t2 if ( <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> size < 0 || <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> start + <identifier> <identifiersep> additional <identifiersep> port <identifiersep> range <identifiersep> size > <number_literal> ) { \n <ect>
\t3 for ( int i = 0 ; i < drop <identifiersep> <identifier> . length ; i ++ ) { \n \t4 <comment> \n \t4 <comment> \n \t4 try { \n <ect>
\t6 <identifier> <identifiersep> log . debug ( <string_literal> ) ; \n \t5 break ; } \n \t4 socket <identifiersep> channel client <identifiersep> socket <identifiersep> channel = get <identifiersep> client <identifiersep> socket ( ) ; \n \t4 if ( client <identifiersep> socket <identifiersep> channel == null ) { \n <ect>
* \t1 private application <identifiersep> context spring <identifiersep> ctx ; \n * \t1 . . . \n * \t1 & # <number_literal> ; grid <identifiersep> user <identifiersep> resource <identifiersep> on <identifiersep> deployed \n * \t1 private void deploy ( ) { \n <ect>
\t1 private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( <identifier> <identifiersep> data <identifiersep> store . class ) ; \n \t1 private static final string driver <identifiersep> class = parameter . value ( <string_literal> , <string_literal> ) ; \n \t1 public <identifier> <identifiersep> data <identifiersep> store ( string jdbc <identifiersep> url , string db <identifiersep> name , string table <identifiersep> name , properties properties ) throws exception { \n \t2 super ( jdbc <identifiersep> url , db <identifiersep> name . to <identifiersep> lower <identifiersep> case ( ) , table <identifiersep> name , properties ) ; \n <ect>
\t3 <identifier> . add <identifiersep> context <identifiersep> <identifier> ( new basic <identifiersep> authenticator ( ) ) ; } } \n \t1 private void configure <identifiersep> rewrite <identifiersep> valve ( final <identifier> <identifiersep> embedded <identifiersep> servlet <identifiersep> container <identifiersep> factory <identifier> ) { \n \t2 final resource res = cas <identifiersep> properties . get <identifiersep> server ( ) . get <identifiersep> rewrite <identifiersep> valve ( ) . get <identifiersep> location ( ) ; \n \t2 if ( resource <identifiersep> utils . does <identifiersep> resource <identifiersep> exist ( res ) ) { \n <ect>
\t2 if ( is <identifiersep> cache <identifiersep> enabled ( ) && is <identifiersep> cache <identifiersep> valid ( ) ) { \n \t2 log . info ( <string_literal> + abstract <identifiersep> async <identifiersep> generator . this . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; \n \t2 generated <identifiersep> code = get <identifiersep> generated <identifiersep> cache ( ) ; } \n \t2 else { \n <ect>
\t4 tokens . consume ( ) ; <comment> \n \t4 tokens . can <identifiersep> consume ( <string_literal> , <string_literal> ) ; \n \t4 tokens . can <identifiersep> consume ( <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 try { \n \t3 proxy . read ( in ) ; \n \t3 return proxy . get <identifiersep> type <identifiersep> serializer ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , request ) ; \n \t3 throw new web <identifiersep> exception ( http <identifiersep> status . unauthorized ) ; } \n \t2 optional < ? extends permission > match = permission . has ( principal . get ( ) , create <identifiersep> role <identifiersep> <identifier> <identifiersep> map <identifiersep> from ( request , request <identifiersep> match ) ) ; \n \t2 if ( match . is <identifiersep> present ( ) ) { \n <ect>
\t1 <identifier> <identifiersep> api . job <identifiersep> info info ; \n \t1 try { \n \t1 info = user <identifiersep> local <identifiersep> objects . get <identifiersep> <identifier> <identifiersep> api ( context ) . check <identifiersep> job ( job . get <identifiersep> job <identifiersep> id ( ) ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private void stop <identifiersep> test <identifiersep> now ( ) { \n \t2 running = false ; \n <ect>
\t2 public string to <identifiersep> string ( ) { \n \t2 return <string_literal> ; } \n \t1 } ; \n private static void sync <identifiersep> with <identifiersep> server ( ) { \n <ect>
\t2 byte [ ] <identifier> <identifiersep> ip = <identifier> . get <identifiersep> ip ( ) ; \n \t2 int <identifier> <identifiersep> port = <identifier> . get <identifiersep> port ( ) ; \n \t2 if ( ! is <identifiersep> valid ( <identifier> . get <identifiersep> ip ( ) , <identifier> . get <identifiersep> port ( ) ) ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t6 byte <identifier> = ( byte ) ( read <identifiersep> byte ( true ) & 0x <identifiersep> ff ) ; \n \t6 send <identifiersep> buffer . put ( <identifier> ) ; \n \t6 byte crc = e <identifiersep> bus <identifiersep> utils . <identifier> <identifiersep> tab ( <identifier> , ( byte ) 0 ) ; \n \t6 if ( <identifier> > <number_literal> ) { \n <ect>
\t3 desc = cube <identifiersep> service . update <identifiersep> cube <identifiersep> and <identifiersep> desc ( cube , desc , project <identifiersep> name , true ) ; \n \t2 } catch ( access <identifiersep> denied <identifiersep> exception access <identifiersep> denied <identifiersep> exception ) { \n \t3 throw new forbidden <identifiersep> exception ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 output <identifiersep> stream . write <identifiersep> byte ( type ) ; \n \t5 write <identifiersep> object ( output <identifiersep> stream , type , obj ) ; \n \t5 <comment> \n \t3 } else { \n <ect>
\t2 dataset ds = text <identifiersep> dataset <identifiersep> factory . create <identifiersep> lucene ( <identifier> , dir , new text <identifiersep> index <identifiersep> config ( <identifier> <identifiersep> def ) ) ; \n \t2 return ds ; } \n \t1 public static dataset create <identifiersep> <identifier> ( ) \n \t1 { \n <ect>
\t3 clear <identifiersep> locator <identifiersep> cache <identifiersep> result result = new clear <identifiersep> locator <identifiersep> cache <identifiersep> result ( ) ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 logger logger = logger <identifiersep> factory . get <identifiersep> logger ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 foo foo = new foo ( ) ; \n \t2 foo . do <identifiersep> it ( ) ; \n <ect>
\t2 } catch ( timeout <identifiersep> exception e ) { \n \t2 <comment> \n \t2 log . warn ( <string_literal> , e ) ; } \n \t2 if ( cur <identifiersep> executors >= min <identifiersep> executors ) { \n <ect>
\t3 if ( f == null ) { \n \t4 continue ; } \n \t3 object o = packets . get ( f ) . payload ( ) ; \n \t3 if ( o == null ) { \n <ect>
\t1 @ override \n \t1 public void check ( ) { \n \t2 global <identifiersep> lock lock = global <identifiersep> lock . get <identifiersep> <identifier> <identifiersep> lock ( <string_literal> ) ; \n \t2 try { \n <ect>
public void setup ( final management <identifiersep> client management <identifiersep> client , string container <identifiersep> id ) throws exception { \n \t1 this . management <identifiersep> client = management <identifiersep> client ; \n \t1 security <identifiersep> domains = get <identifiersep> security <identifiersep> domains ( ) ; \n \t1 if ( security <identifiersep> domains == null || security <identifiersep> domains . length == 0 ) { \n <ect>
\t4 <identifier> <identifiersep> log . warn ( <string_literal> + cfg . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t4 <identifier> = new file <identifiersep> output <identifiersep> stream ( cfg ) ; \n \t4 props . store ( <identifier> , cfg . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 <identifier> <identifiersep> static <identifiersep> public <identifiersep> ip = <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) ; \n \t2 if ( <identifier> <identifiersep> static <identifiersep> public <identifiersep> ip != null ) { \n \t3 <identifier> <identifiersep> static <identifiersep> port = numbers <identifiersep> util . parse <identifiersep> int ( <identifier> <identifiersep> config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) , <number_literal> ) ; } \n <ect>
\t1 assert <identifiersep> true ( jar <identifiersep> base <identifiersep> name . ends <identifiersep> with ( <string_literal> ) ) ; \n \t1 assert <identifiersep> true ( jar <identifiersep> base <identifiersep> name . length ( ) > <string_literal> . length ( ) ) ; \n \t1 string class <identifiersep> name = jar <identifiersep> base <identifiersep> name . substring ( 0 , jar <identifiersep> base <identifiersep> name . length ( ) \n \t1 - <string_literal> . length ( ) ) ; \n <ect>
\t3 if ( ex != null ) { \n \t4 throw new runtime <identifiersep> camel <identifiersep> exception ( res . get <identifiersep> exception ( ) ) ; } \n \t3 return true ; \n \t2 } , saga <identifiersep> service . get <identifiersep> executor <identifiersep> service ( ) ) . <identifier> ( ex - > { \n <ect>
\t3 for ( service <identifiersep> manager <identifiersep> ready <identifiersep> aware service <identifiersep> manager <identifiersep> ready <identifiersep> aware : services ) { \n \t4 try { \n \t5 service <identifiersep> manager <identifiersep> ready <identifiersep> aware . service <identifiersep> manager <identifiersep> ready ( this ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 && c . get <identifiersep> <identifier> <identifiersep> min <identifiersep> date ( ) . after ( c . get <identifiersep> versions <identifiersep> min <identifiersep> date ( ) ) ) { \n \t3 logger . info ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( c . is <identifiersep> copy <identifiersep> versions ( ) && target . get <identifiersep> root ( ) . has <identifiersep> child <identifiersep> node ( jcr <identifiersep> constants . jcr <identifiersep> system ) ) { \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 index ( <string_literal> , <string_literal> , integer . to <identifiersep> string ( i ) , <string_literal> , <string_literal> + i ) ; } \n \t2 refresh ( ) ; \n \t2 assert <identifiersep> that ( client . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> size ( 0 ) . get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 100l ) ) ; \n <ect>
@ path ( <string_literal> ) \n @ consumes ( <string_literal> ) \n public char <identifiersep> set <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element xml <identifiersep> accepts ( char <identifiersep> set <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element movie ) \n { \n <ect>
\t2 final http <identifiersep> client <identifiersep> context client <identifiersep> context = http <identifiersep> client <identifiersep> context . <identifier> ( context ) ; \n \t2 <comment> \n \t2 final route <identifiersep> info route = client <identifiersep> context . get <identifiersep> http <identifiersep> route ( ) ; \n \t2 if ( route == null ) { \n <ect>
<comment> \n <ect>
\t2 <identifier> <identifiersep> app . <identifier> ( edm , test <identifiersep> manufacturer , null , null , response <identifiersep> handler ) ; \n \t2 input <identifiersep> stream <identifier> = response <identifiersep> handler . await ( ) ; \n \t2 o <identifiersep> data <identifiersep> entry entry = entity <identifiersep> provider . read <identifiersep> entry ( test <identifiersep> format <identifiersep> string , edm <identifiersep> entity <identifiersep> set <identifiersep> map . get ( <identifier> ) , \n <number_literal> <identifier> , entity <identifiersep> provider <identifiersep> read <identifiersep> properties . init ( ) . build ( ) ) ; \n <ect>
\t5 ns <identifiersep> timestamp <identifiersep> formatter <identifier> = new ns <identifiersep> timestamp <identifiersep> formatter ( ) ; \n \t5 try { \n \t6 current <identifiersep> value = <identifier> . parse <identifiersep> object ( ( string ) current <identifiersep> value ) ; \t1 \n \t5 } catch ( java . text . parse <identifiersep> exception ex ) { \n <ect>
\t4 s <identifiersep> state <identifiersep> header . set <identifiersep> reason <identifiersep> code ( reason ) ; } \n \t2 catch ( parse <identifiersep> exception e ) \n \t2 { \n \t3 <comment> \n <ect>
\t7 log . debug ( <string_literal> , x , ctx , ignored ) ; } } } } \n \t3 throw to <identifiersep> xa <identifiersep> exception ( e ) ; } } \n \t1 @ override \n \t1 public void forget ( xid xid ) throws xa <identifiersep> exception { \n <ect>
\t1 try { \n \t1 host <identifiersep> object . handle <identifiersep> event ( new host <identifiersep> <identifier> <identifiersep> heartbeat <identifiersep> event ( hostname , now , \n \t2 heartbeat . get <identifiersep> agent <identifiersep> env ( ) , heartbeat . get <identifiersep> mounts ( ) ) ) ; \n \t1 } catch ( invalid <identifiersep> state <identifiersep> transition <identifiersep> exception ex ) { \n <ect>
void cancel ( ) \n { \n \t1 scheduled <identifiersep> future . cancel ( false ) ; \n \t1 if ( is <identifiersep> <identifier> ) { \n <ect>
protected var broadcast <identifiersep> set : option [ single <identifiersep> in ] = <identifier> <identifiersep> <identifier> \n override def open ( parameters : configuration ) : unit = { \n \t1 log . debug ( s <string_literal> ) \n \t1 val clazz = compile ( get <identifiersep> runtime <identifiersep> context . get <identifiersep> user <identifiersep> code <identifiersep> class <identifiersep> loader , name , code ) \n <ect>
\t2 <comment> \n \t2 if ( is <identifiersep> first ( ) ) <comment> \n \t2 { \n <ect>
\t6 public boolean should <identifiersep> timeout ( ) { \n \t7 return false ; } \n \t6 @ override \n \t6 public void on <identifiersep> timeout ( ) { \n <ect>
\t2 final path file = split . get <identifiersep> path ( ) ; \n \t2 long total <identifiersep> length = file . get <identifiersep> file <identifiersep> system ( context . get <identifiersep> configuration ( ) ) . get <identifiersep> file <identifiersep> status ( file ) . get <identifiersep> len ( ) ; \n \t2 compression <identifiersep> <identifier> = new compression <identifiersep> codec <identifiersep> factory ( config ) ; \n \t2 final compression <identifiersep> codec codec = compression <identifiersep> <identifier> . get <identifiersep> codec ( file ) ; \n <ect>
\t5 return <number_literal> ; \n \t4 } else { \n \t5 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; } \n \t3 } else { \n <ect>
<comment> \n \t1 private void validate <identifiersep> cluster <identifiersep> for <identifiersep> rebalance ( rebalance <identifiersep> plan rebalance <identifiersep> plan ) { \n <ect>
\t5 props . set <identifiersep> property ( mail <identifiersep> prop ( server <identifiersep> protocol , <string_literal> ) , trust <identifiersep> all <identifiersep> socket <identifiersep> factory ) ; <comment> \n \t5 props . set <identifiersep> property ( mail <identifiersep> prop ( server <identifiersep> protocol , <string_literal> ) , false ) ; <comment> \n \t3 } else if ( is <identifiersep> use <identifiersep> local <identifiersep> trust <identifiersep> store ( ) ) { \n \t4 file truststore = new file ( get <identifiersep> trust <identifiersep> store <identifiersep> to <identifiersep> use ( ) ) ; \n <ect>
\t3 final response <identifiersep> context response = <identifier> . evaluate ( request <identifiersep> ctx ) ; \n \t3 result = response . get <identifiersep> decision ( ) == <identifier> <identifiersep> constants . decision <identifiersep> permit ? authorization <identifiersep> context . permit \n \t5 : authorization <identifiersep> context . <identifier> ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 <identifier> [ i ] . start ( ) ; } \n \t2 log . info ( <string_literal> ) ; \n \t2 thread . sleep ( <number_literal> ) ; <comment> \n \t2 <identifier> = false ; \n <ect>
\t3 if ( ! result . first ( ) ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + router . get <identifiersep> instance <identifiersep> name ( ) + <string_literal> ) ; \n \t4 return false ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t3 state = new boolean [ <identifier> ] ; } \n \t2 @ override \n \t2 public void update ( <identifier> <identifiersep> binding binding , string <identifier> <identifiersep> name , int module ) { \n \t3 if ( ! connect ( ) ) { \n <ect>
\t3 if ( providers <identifiersep> to <identifiersep> implement . contains ( element . get <identifiersep> provider ( ) ) ) { \n \t4 if ( element . shutdown <identifiersep> vpc ( vpc , context ) ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + vpc + <string_literal> ) ; \n \t4 } else { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t4 object params [ ] = new object [ 1 ] ; \n \t4 params [ 0 ] = name ; \n \t4 return get <identifiersep> property <identifiersep> method . invoke ( o , params ) ; } \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception ex2 ) { \n <ect>
\t2 new catalog <identifiersep> builder ( catalog ) . update <identifiersep> <identifier> <identifiersep> store ( original , info ) ; \n \t2 catalog . validate ( original , false ) . throw <identifiersep> if <identifiersep> invalid ( ) ; \n \t2 catalog . save ( original ) ; \n \t2 clear ( original ) ; \n <ect>
\t4 class <identifiersep> info . add <identifiersep> transformed <identifiersep> method ( name , method <identifiersep> description ) ; \n \t4 return method <identifiersep> visitor ; } \n \t2 } catch ( throwable e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t3 return false ; \n \t2 } else { \n \t3 return true ; } } \n \t1 private boolean check <identifiersep> ovs <identifiersep> network ( final string network <identifiersep> name ) { \n <ect>
\t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream <identifier> = new ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream ( first <identifiersep> version <identifiersep> name , input <identifiersep> handle ) ; \n \t2 ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream <identifier> = new ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream ( default <identifiersep> stream <identifiersep> name , input <identifiersep> handle ) ; \n \t2 test <identifiersep> argument <identifiersep> runner ( <identifier> , <identifier> ) ; \n <ect>
\t1 private <identifier> <identifiersep> sftp <identifiersep> client reuse <identifiersep> existing <identifiersep> or <identifiersep> create <identifiersep> new <identifiersep> client ( sftp <identifiersep> host sftp <identifiersep> host ) { \n \t2 list < <identifier> <identifiersep> sftp <identifiersep> client > clients <identifiersep> by <identifiersep> host = idle <identifiersep> clients . get ( sftp <identifiersep> host ) ; \n \t2 <identifier> <identifiersep> sftp <identifiersep> client client = null ; \n \t2 if ( clients <identifiersep> by <identifiersep> host . is <identifiersep> empty ( ) ) { \n <ect>
\t3 if ( remove <identifiersep> <identifier> <identifiersep> <identifier> ) { \n \t4 try { \n \t5 security . remove <identifiersep> provider ( <identifier> <identifiersep> <identifier> <identifiersep> provider . provider <identifiersep> name ) ; \n \t4 } catch ( security <identifiersep> exception ex ) { \n <ect>
\t3 validation <identifiersep> xml <identifiersep> foo foo = new validation <identifiersep> xml <identifiersep> foo ( <string_literal> ) ; \n \t3 response response = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) . accept ( media <identifiersep> type . application <identifiersep> xml ) . post ( entity . entity ( foo , <string_literal> ) ) ; \n \t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> bad <identifiersep> request , response . get <identifiersep> status ( ) ) ; \n \t3 violation <identifiersep> report report = response . read <identifiersep> entity ( violation <identifiersep> report . class ) ; \n <ect>
\t4 if ( str != null ) { \n \t5 try { \n \t6 y = integer . parse <identifiersep> int ( str ) ; \n \t5 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t6 if ( ! f . is <identifiersep> empty ( <identifier> ) ) \n \t7 pending <identifiersep> locks . put ( entry . key ( ) , <identifier> ) ; } } \n \t4 catch ( grid <identifiersep> cache <identifiersep> entry <identifiersep> removed <identifiersep> exception ignored ) { \n <ect>
\t1 private boolean is <identifiersep> <identifier> <identifiersep> planner <identifiersep> used <identifiersep> by <identifiersep> offering ( long offering <identifiersep> id ) { \n \t2 boolean <identifier> <identifiersep> planner <identifiersep> used = false ; \n \t2 service <identifiersep> offering <identifiersep> vo offering = <identifier> <identifiersep> service <identifiersep> offering <identifiersep> dao . find <identifiersep> by <identifiersep> id <identifiersep> <identifier> <identifiersep> removed ( offering <identifiersep> id ) ; \n \t2 if ( offering == null ) { \n <ect>
\t3 log . error ( <string_literal> ) ; \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( \n \t5 <string_literal> ) ; } \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( namespace <identifiersep> name ) ) { \n <ect>
\t4 } catch ( io <identifiersep> exception ex ) { \n \t5 <comment> \n \t3 } catch ( socket <identifiersep> exception e ) { \n \t4 if ( ! <string_literal> . equals ( e . get <identifiersep> message ( ) ) ) { \n <ect>
\t3 required <identifiersep> attributes . put ( <string_literal> , collections . singleton ( <string_literal> ) ) ; \n \t3 strategy . set <identifiersep> required <identifiersep> attributes ( required <identifiersep> attributes ) ; \n \t3 strategy . do <identifiersep> principal <identifiersep> attributes <identifiersep> allow <identifiersep> service <identifiersep> access ( <string_literal> , ( map ) registered <identifiersep> service <identifiersep> test <identifiersep> utils . get <identifiersep> test <identifiersep> attributes ( ) ) ; \n \t2 } else { \n <ect>
\t1 private string get <identifiersep> css <identifiersep> class ( final string name ) { \n \t2 string computed <identifiersep> css <identifiersep> class = <string_literal> ; \n \t2 if ( name != null ) { \n \t3 computed <identifiersep> css <identifiersep> class = computed <identifiersep> css <identifiersep> class . concat ( <string_literal> + pac4j <identifiersep> client <identifiersep> css <identifiersep> class <identifiersep> substitution <identifiersep> pattern . matcher ( name ) . replace <identifiersep> all ( <string_literal> ) ) ; } \n <ect>
\t2 <identifier> <identifiersep> producer . send ( outgoing ) ; \n \t2 <comment> \n \t2 message received = amqp <identifiersep> consumer . receive ( <number_literal> ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( received ) ; \n <ect>
\t4 result <identifiersep> set results = statement . get <identifiersep> result <identifiersep> set ( ) ; \n \t4 if ( results . next ( ) ) { \n \t5 system <identifiersep> default <identifiersep> locale = results . get <identifiersep> string ( 1 ) ; } } } \n \t2 catch ( exception e ) { \n <ect>
\t3 if ( context != null ) \n \t4 close ( context ) ; \n \t3 <comment> \n <ect>
\t6 new period ( config . get <identifiersep> file <identifiersep> queue <identifiersep> gc <identifiersep> period ( ) ) . to <identifiersep> standard <identifiersep> seconds ( ) . get <identifiersep> seconds ( ) , \n \t6 new message <identifiersep> set <identifiersep> ser <identifiersep> de ( ) , \n \t6 config . get <identifiersep> file <identifiersep> queue <identifiersep> size <identifiersep> limit ( ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 return is <identifiersep> idempotent ( command ) && io <identifiersep> retry <identifiersep> handler . should <identifiersep> retry <identifiersep> request ( command , response ) ; } \n private boolean is <identifiersep> idempotent ( http <identifiersep> command command ) { \n \t1 string method = command . get <identifiersep> current <identifiersep> request ( ) . get <identifiersep> method ( ) ; \n \t1 if ( ! idempotent <identifiersep> methods . contains ( method ) ) { \n <ect>
\t4 return decoded . decoded ; } \n \t2 if ( want <identifiersep> <identifier> <identifiersep> auth && ! want <identifiersep> <identifier> <identifiersep> auth <identifiersep> change <identifiersep> ip ) { \n \t3 if ( check <identifiersep> <identifier> <identifiersep> auth <identifiersep> change <identifiersep> ip ( <identifier> , buf , offset , length , peer , now ) ) { \n \t4 <comment> \n <ect>
<comment> \n \t1 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( request . get <identifiersep> recovery <identifiersep> enabled ( ) ) ) { \n \t2 boolean recovery <identifiersep> enabled = boolean . parse <identifiersep> boolean ( request . get <identifiersep> recovery <identifiersep> enabled ( ) ) ; \n \t2 sc . set <identifiersep> recovery <identifiersep> enabled ( recovery <identifiersep> enabled ) ; \n <ect>
\t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 llap <identifiersep> io < vectorized <identifiersep> row <identifiersep> batch > llap <identifiersep> io = llap <identifiersep> proxy . get <identifiersep> io ( ) ; \n \t1 if ( llap <identifiersep> io == null ) { \n <ect>
\t3 throw ( e ) ; } \n \t2 try { \n \t3 socket . set <identifiersep> so <identifiersep> timeout ( timeout ) ; \n \t2 } catch ( socket <identifiersep> exception e ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \t1 \n \t3 was <identifiersep> started = true ; } \n \t2 @ override \n \t2 public void on <identifiersep> stopped ( throwable error ) { \n <ect>
\t3 system . out . println ( <string_literal> + fields . long <identifiersep> to <identifiersep> string ( <identifier> <identifiersep> cache <identifiersep> size , true ) ) ; \n \t3 config . get ( <string_literal> ) . set ( <string_literal> , fields . long <identifiersep> to <identifiersep> string ( <identifier> <identifiersep> cache <identifiersep> size , true ) ) ; \n \t3 logger . normal ( this , <string_literal> + selected <identifiersep> store <identifiersep> size ) ; \n \t2 } catch ( config <identifiersep> exception e ) { \n <ect>
\t3 process <identifiersep> group . add ( ex ) ; } \n \t2 if ( ! process <identifiersep> group . is <identifiersep> empty ( ) ) { \n \t3 total <identifiersep> processed += process ( table <identifiersep> id , partition <identifiersep> decorator , suffix , process <identifiersep> group , exchange . get <identifiersep> exchange <identifiersep> id ( ) ) ; } \n \t2 if ( total <identifiersep> processed == 0 ) { \n <ect>
\t1 try { \n \t2 host <identifiersep> component <identifiersep> desired <identifiersep> state <identifiersep> entity host <identifiersep> component <identifiersep> desired <identifiersep> state <identifiersep> entity = get <identifiersep> desired <identifiersep> state <identifiersep> entity ( ) ; \n \t2 r . set <identifiersep> stale <identifiersep> config ( helper . is <identifiersep> stale <identifiersep> configs ( this , desired <identifiersep> configs , host <identifiersep> component <identifiersep> desired <identifiersep> state <identifiersep> entity ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 <comment> \n \t4 if ( ignore <identifiersep> syntax <identifiersep> error <identifiersep> for <identifiersep> line <identifiersep> ending ( buffer [ - 1 ] . trim ( ) ) || \n \t6 is <identifiersep> annotation <identifiersep> expression ( e , buffer [ - 1 ] . trim ( ) ) || \n \t6 has <identifiersep> <identifier> <identifiersep> open <identifiersep> <identifier> <identifiersep> or <identifiersep> <identifier> ( source ) ) { \n <ect>
\t4 int expected <identifiersep> results = added [ doc <identifiersep> to <identifiersep> query ] ? 1 : 0 ; \n \t4 logger . info ( <string_literal> , english . int <identifiersep> to <identifiersep> english ( doc <identifiersep> to <identifiersep> query ) ) ; \n \t4 search <identifiersep> response search <identifiersep> response = client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> types ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> query ( <string_literal> , english . int <identifiersep> to <identifiersep> english ( doc <identifiersep> to <identifiersep> query ) ) ) \n \t5 . set <identifiersep> size ( expected <identifiersep> results ) . get ( ) ; \n <ect>
<comment> \n function init ( ) { \n <ect>
\t2 soft <identifiersep> activity <identifiersep> constraint = constraint <identifiersep> manager ; \n \t2 soft <identifiersep> route <identifiersep> constraint = constraint <identifiersep> manager ; \n \t2 this . additional <identifiersep> transport <identifiersep> costs <identifiersep> calculator = additional <identifiersep> transport <identifiersep> costs <identifiersep> calculator ; \n \t2 additional <identifiersep> access <identifiersep> egress <identifiersep> calculator = new additional <identifiersep> access <identifiersep> egress <identifiersep> calculator ( routing <identifiersep> costs ) ; \n <ect>
\t4 scroll <identifiersep> docs += scroll . get <identifiersep> hits ( ) . get <identifiersep> hits ( ) . length ; \n \t4 scroll = client ( ) . prepare <identifiersep> search <identifiersep> scroll ( scroll . get <identifiersep> scroll <identifiersep> id ( ) ) . set <identifiersep> scroll ( <string_literal> ) . get ( ) ; } \n \t3 assert <identifiersep> equals ( control . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , scroll <identifiersep> docs ) ; \n \t2 } catch ( assertion <identifiersep> error e ) { \n <ect>
\t2 return new org . apache . thrift . async . async <identifiersep> method <identifiersep> callback < void > ( ) { \n \t2 public void on <identifiersep> complete ( void o ) { } \n \t2 public void on <identifiersep> error ( java . lang . exception e ) { \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t2 public org . apache . hadoop . hive . <identifier> . metadata . partition apply ( partition partition ) { \n \t3 try { \n \t3 return new partition <identifiersep> wrapper ( table , partition ) ; \n \t3 } catch ( exception exception ) { \n <ect>
\t4 if ( host != null ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + left . name ) ; \n \t5 answer answer = <identifier> <identifiersep> agent <identifiersep> mgr . send ( host . get <identifiersep> id ( ) , cleanup ( left . name ) ) ; \n \t5 if ( ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t4 user <identifiersep> name <identifiersep> builder . append ( <string_literal> ) . append ( kerberos <identifiersep> name . get <identifiersep> realm ( ) ) ; } \n \t3 log . info ( <string_literal> + user <identifiersep> name <identifiersep> builder ) ; \n \t3 ac . set <identifiersep> authorized <identifiersep> id ( user <identifiersep> name <identifiersep> builder . to <identifiersep> string ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 detail = <identifier> ; } \n \t2 switch ( detail ) { \n \t3 case <identifier> : \n \t4 <comment> \n <ect>
\t1 self . <identifier> <identifiersep> <identifier> <identifiersep> run <identifiersep> hbase <identifiersep> script ( <identifier> <identifiersep> constants . hbase <identifiersep> populate <identifiersep> data <identifiersep> script , <identifier> <identifiersep> cmd , message ) \n \t1 self . <identifier> <identifiersep> <identifier> <identifiersep> check <identifiersep> <identifier> <identifiersep> hbase <identifiersep> read ( ) \n \t1 except exception , ex : \n \t1 self . checks <identifiersep> failed += 1 \n <ect>
\t5 job . get <identifiersep> task <identifiersep> session ( ) . set <identifiersep> attribute ( job <identifiersep> id , <string_literal> + job <identifiersep> id ) ; \n \t6 log . info ( <string_literal> + job <identifiersep> id ) ; } \n \t4 catch ( grid <identifiersep> exception e ) { \n <ect>
\t2 private callable < string > run <identifiersep> spec <identifiersep> test ( final string spec ) { \n \t3 return new callable < string > ( ) { \n \t4 @ override \n \t4 public string call ( ) throws exception { \n <ect>
\t2 <comment> \n \t2 names = mbean <identifiersep> server . query <identifiersep> names ( on , null ) ; \n \t2 assert <identifiersep> equals ( services , names . size ( ) ) ; \n \t2 <comment> \n <ect>
\t5 file . delete <identifiersep> log ( ) , failed <identifiersep> to <identifiersep> delete <identifiersep> files . size ( ) , get <identifiersep> garbage <identifiersep> size ( ) ) ; } } \n \t1 private void successfully <identifiersep> deleted ( local <identifiersep> index <identifiersep> file file , boolean file <identifiersep> <identifier> ) { \n \t2 local <identifiersep> index <identifiersep> file failed <identifiersep> to <identifiersep> delete <identifiersep> file = failed <identifiersep> to <identifiersep> delete <identifiersep> files . remove ( file . get <identifiersep> key ( ) ) ; \n \t2 if ( failed <identifiersep> to <identifiersep> delete <identifiersep> file != null ) { \n <ect>
\t4 catch ( exception e ) \n \t4 { \n \t5 error = e ; \n \t5 context . error = error ; \n <ect>
\t3 else { \n \t4 if ( ! string <identifiersep> utils . is <identifiersep> blank ( d . get <identifiersep> input <identifiersep> catalog ( ) ) ) \n \t5 log . warn ( <string_literal> ) ; \n \t4 if ( ! string <identifiersep> utils . is <identifiersep> blank ( d . get <identifiersep> output <identifiersep> catalog ( ) ) ) \n <ect>
\t2 if ( root <identifiersep> ca <identifiersep> cert != null ) { \n \t3 command . add ( <string_literal> , root <identifiersep> ca <identifiersep> cert ) ; } \n \t2 string result = command . execute ( ) ; \n \t2 if ( result != null ) { \n <ect>
\t4 log . info ( <string_literal> + rsrc1 ) ; \n \t4 log . info ( <string_literal> + rsrc2 ) ; \n \t4 log . info ( <string_literal> + rsrc3 ) ; \n \t4 log . info ( <string_literal> + rsrc4 ) ; \n <ect>
\t1 search <identifiersep> request search <identifiersep> request = <identifier> <identifiersep> group <identifiersep> search <identifiersep> request ( ldap <identifiersep> connection <identifiersep> template , ambari <identifiersep> ldap <identifiersep> configuration ) ; \n \t1 <comment> \n \t1 list < entry > group <identifiersep> entries = ldap <identifiersep> connection <identifiersep> template . search ( search <identifiersep> request , get <identifiersep> entry <identifiersep> mapper ( ) ) ; \n \t1 for ( entry group <identifiersep> entry : group <identifiersep> entries ) { \n <ect>
\t3 this . logger . info ( <string_literal> ) ; \n \t3 start <identifiersep> migrations <identifiersep> only <identifiersep> once ( ) ; \n \t3 <comment> \n \t3 if ( <string_literal> . equals ( config . get <identifiersep> property ( <string_literal> , <string_literal> ) ) ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 flush <identifiersep> response flush <identifiersep> result = client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> flush ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) ; \n \t2 assert <identifiersep> that ( flush <identifiersep> result . get <identifiersep> successful <identifiersep> shards ( ) , equal <identifiersep> to ( num <identifiersep> shards . total <identifiersep> num <identifiersep> shards ) ) ; \n \t2 assert <identifiersep> that ( flush <identifiersep> result . get <identifiersep> failed <identifiersep> shards ( ) , equal <identifiersep> to ( 0 ) ) ; \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 if ( ! ( jcr <identifiersep> <identifier> . equals ( prop <identifiersep> name ) || jcr <identifiersep> <identifier> . equals ( prop <identifiersep> name ) ) ) { \n <ect>
\t1 @ override \n \t1 public boolean is <identifiersep> cached ( request <identifiersep> authenticator authenticator ) { \n \t2 http <identifiersep> scope session = this . http <identifiersep> facade . get <identifiersep> scope ( scope . session ) ; \n \t2 if ( session == null || ! session . supports <identifiersep> attachments ( ) ) { \n <ect>
\t6 stats <identifiersep> manager . start ( ) ; \n \t6 log . info ( <string_literal> ) ; \n \t6 return ; \n \t5 } catch ( exception e ) { \n <ect>
\t4 this . private <identifiersep> file <identifiersep> channel = null ; \n \t4 <comment> \n \t4 file . notify <identifiersep> upload <identifiersep> completion ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 record <identifiersep> template parent <identifiersep> resource , \n \t6 resource <identifiersep> level resource <identifiersep> level , \n \t6 action <identifiersep> schema action <identifiersep> schema ) \n { \n <ect>
\t2 assert <identifiersep> equals ( 0 , integer . value <identifiersep> of ( utils . evaluate ( <string_literal> , result ) ) . int <identifiersep> value ( ) ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> in <identifiersep> valid <identifiersep> xml ( ) throws exception { \n \t2 string payload = io <identifiersep> utils . to <identifiersep> string ( class <identifiersep> loader . get <identifiersep> system <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ) ; \n <ect>
\t3 if ( ! loading ) throw new persistence <identifiersep> disabled <identifiersep> exception ( ) ; \n \t3 if ( killed ) throw new persistence <identifiersep> disabled <identifiersep> exception ( ) ; \n \t3 if ( context == null ) throw new illegal <identifiersep> state <identifiersep> exception ( ) ; \n \t3 if ( must <identifiersep> checkpoint && enable <identifiersep> <identifier> ) { \n <ect>
\t1 @ override \n \t1 public <identifier> <identifiersep> format get <identifiersep> <identifier> <identifiersep> format <identifiersep> for <identifiersep> field ( string field ) { \n \t2 final mapped <identifiersep> field <identifiersep> type field <identifiersep> type = mapper <identifiersep> service . full <identifiersep> name ( field ) ; \n \t2 if ( field <identifiersep> type == null ) { \n <ect>
\t2 if ( form != null ) { \n \t3 form . add <identifiersep> parameter ( <string_literal> , boolean . true ) ; \n \t2 } else { \n <ect>
\t3 try { \n \t4 scp <identifiersep> from = new scp <identifiersep> from ( src <identifiersep> host , user , old <identifiersep> password ) ; \n \t4 string remote <identifiersep> file = pre <identifiersep> data <identifiersep> path + pre <identifiersep> container <identifiersep> id + <string_literal> + instance <identifiersep> name + <string_literal> ; \n \t4 scp <identifiersep> from . get <identifiersep> remote <identifiersep> file ( remote <identifiersep> file , data <identifiersep> path ) ; \n <ect>
\t3 try { \n \t4 block = client <identifiersep> chk <identifiersep> block . encode <identifiersep> <identifier> <identifiersep> block ( check <identifiersep> blocks [ i ] , decode <identifiersep> key . get <identifiersep> crypto <identifiersep> key ( ) , decode <identifiersep> key . get <identifiersep> crypto <identifiersep> algorithm ( ) ) ; \n \t4 client <identifiersep> chk actual <identifiersep> key = block . get <identifiersep> client <identifiersep> key ( ) ; \n \t4 if ( ! actual <identifiersep> key . equals ( decode <identifiersep> key ) ) { \n <ect>
\t3 } catch ( exception e ) { \n \t4 logger . warn ( <string_literal> , device <identifiersep> config . to <identifiersep> string ( ) , item <identifiersep> name , \n \t6 command , e . get <identifiersep> message ( ) ) ; } \n \t2 } else { \n <ect>
\t4 <comment> \n \t3 } catch ( exception e ) { \n \t4 log log = i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( get <identifiersep> class ( ) ) ; \n \t4 if ( log . should <identifiersep> warn ( ) ) \n <ect>
def try <identifiersep> send ( settings : email <identifiersep> settings ) = { \n \t1 try { \n \t1 retry . attempt ( ( ) = > send ( settings ) , . <number_literal> ) \n \t1 } catch { \n <ect>
\t4 } catch ( exception ex ) { \n \t5 log . error ( <string_literal> , ex ) ; } } } \n \t2 if ( debug ) { \n \t3 metric <identifiersep> utils . print <identifiersep> metric <identifiersep> info ( metric <identifiersep> info , debug <identifiersep> metric <identifiersep> names ) ; } \n <ect>
\t1 buffered <identifiersep> reader reader = null ; \n \t1 try { \n \t2 <comment> \n \t2 if ( ! host <identifiersep> provider . is <identifiersep> collector <identifiersep> host <identifiersep> live ( cluster <identifiersep> name , <identifier> ) ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n <comment> \n <ect>
\t1 else { \n \t2 add <identifiersep> object <identifiersep> to <identifiersep> both <identifiersep> <identifier> <identifiersep> of <identifiersep> relationship <identifiersep> with <identifiersep> key ( object , <string_literal> ) ; } } \n public void remove <identifiersep> from <identifiersep> employees <identifiersep> relationship ( er . ajax . <identifier> . example . components . employee object ) { \n <ect>
\t7 int desired <identifiersep> rank ) { \n \t1 int cols = <identifier> . num <identifiersep> cols ( ) ; \n \t1 matrix <identifier> = new <identifier> <identifiersep> matrix ( desired <identifiersep> rank , cols ) ; \n \t1 list < double > <identifier> <identifiersep> values = new array <identifiersep> list < > ( ) ; \n <ect>
\t3 interrupt <identifiersep> lock . lock ( ) ; \n \t3 sampler <identifier> = current <identifiersep> sampler ; <comment> \n \t3 if ( <identifier> instanceof <identifier> ) { <comment> \n <ect>
\t2 try { \n \t3 logger . info ( <string_literal> ) ; \n \t3 statement = cube <identifiersep> connection . create <identifiersep> statement ( ) ; \n \t3 result <identifiersep> set = statement . execute <identifiersep> query ( sql ) ; \n <ect>
\t4 <comment> \n \t4 logger . info ( <string_literal> ) ; \n \t3 } else { \n \t4 <comment> \n <ect>
\t5 if ( disk . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) ) { \n \t6 template <identifiersep> vol = disk ; \n \t6 break ; } } \n \t4 if ( template <identifiersep> vol == null ) { \n <ect>
\t1 try { \n \t1 <identifier> = new hive <identifiersep> meta <identifiersep> store <identifiersep> client ( hive <identifiersep> conf ) ; \n \t1 <identifier> <identifiersep> tables ( ) ; \n \t1 } catch ( throwable e ) { \n <ect>
\t2 assert req instanceof grid <identifiersep> rest <identifiersep> cache <identifiersep> request : <string_literal> + req ; \n \t2 assert supported <identifiersep> commands . contains ( req . command ( ) ) ; \n \t2 grid <identifiersep> license <identifiersep> use <identifiersep> registry . on <identifiersep> usage ( data <identifiersep> grid , get <identifiersep> class ( ) ) ; \n <ect>
\t3 log . debug ( <string_literal> + job <identifiersep> concurrency + <string_literal> + job <identifiersep> execution + <string_literal> \n \t5 + num <identifiersep> running <identifiersep> jobs + <string_literal> + num <identifiersep> actions <identifiersep> to <identifiersep> start ) ; \n \t3 <comment> \n \t3 if ( num <identifiersep> actions <identifiersep> to <identifiersep> start == 0 ) { \n <ect>
\t3 <identifier> < int <identifiersep> pair > merger = new <identifier> <identifiersep> sort <identifiersep> merger < int <identifiersep> pair > ( this . memory <identifiersep> manager , this . io <identifiersep> manager , \n \t5 generator , this . parent <identifiersep> task , serializer <identifiersep> factory , comparator , ( double ) <number_literal> / <number_literal> , <number_literal> , 0 . <identifier> , \n \t5 true <comment> , true ) ; \n \t3 <comment> \n <ect>
\t1 @ override \n \t1 public void process ( sub <identifiersep> resource sub <identifiersep> resource ) { \n \t2 type impl = sub <identifiersep> resource . get <identifiersep> type ( ) ; \n \t2 type sub <identifiersep> resource <identifiersep> type = sub <identifiersep> resource . get <identifiersep> resource <identifiersep> type ( ) ; \n <ect>
\t3 assert . assert <identifiersep> true ( versioning <identifiersep> profile . is <identifiersep> later <identifiersep> version <identifiersep> of ( <identifier> . get <identifiersep> versioned <identifiersep> name ( ) , pko . get <identifiersep> versioned <identifiersep> name ( ) ) ) ; \n \t3 pko . update ( ) ; \n \t3 assert . assert <identifiersep> equals ( <identifier> . get <identifiersep> versioned <identifiersep> name ( ) , pko . get <identifiersep> versioned <identifiersep> name ( ) ) ; \n \t3 if ( ! <identifier> . public <identifiersep> key ( ) . equals ( pko . public <identifiersep> key ( ) ) ) { \n <ect>
\t1 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + desc + <string_literal> ) ; } \n \t1 object query <identifiersep> result = query <identifiersep> cache . get ( id ) ; \n \t1 if ( query <identifiersep> result == null ) { \n <ect>
\t3 if ( iter . has <identifiersep> next ( ) ) { \n \t4 logger . debug ( string . format ( <string_literal> , host ) , exception ) ; \n \t3 } else { \n <ect>
\t4 } catch ( throwable e ) { \n \t5 s <identifiersep> logger . error ( <string_literal> , e ) ; } } \n \t2 } ; } \n \t1 private boolean set <identifiersep> to <identifiersep> wait <identifiersep> for <identifiersep> rebalance ( final long host <identifiersep> id , long current <identifiersep> owner <identifiersep> id , long future <identifiersep> owner <identifiersep> id ) { \n <ect>
\t3 collections . sort ( instances ) ; \n \t3 return response . ok ( new service <identifiersep> names ( instances ) ) . build ( ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t3 try { \n \t3 table t = resolve <identifiersep> table ( ci ) ; \n \t3 if ( t == null ) { \n \t4 <comment> \n <ect>
\t4 for ( host <identifiersep> vo host : hosts ) { \n \t5 <identifier> <identifiersep> capacity <identifiersep> mgr . update <identifiersep> capacity <identifiersep> for <identifiersep> host ( host ) ; } } \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n <ect>
\t8 <identifier> <identifiersep> log . warn ( <string_literal> + time <identifiersep> since <identifiersep> sent + <string_literal> + message <identifiersep> body ) ; \n \t7 <identifier> <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , time <identifiersep> since <identifiersep> sent ) ; } \n \t5 <comment> \n \t5 <comment> \n <ect>
\t4 <identifier> . write <identifiersep> byte ( post ) ; \n \t4 write <identifiersep> notification ( notification , <identifier> ) ; \n \t4 <identifier> <identifiersep> multicast <identifiersep> socket . send ( baos . create <identifiersep> datagram <identifiersep> packet ( ) ) ; \n <ect>
\t7 <identifier> <identifiersep> class , default <identifiersep> right <identifiersep> service <identifiersep> class ) , e ) ; \n \t6 <identifier> <identifiersep> class = default <identifiersep> right <identifiersep> service <identifiersep> class ; \n \t6 try { \n \t7 this . right <identifiersep> service = ( x <identifiersep> wiki <identifiersep> right <identifiersep> service ) class . for <identifiersep> name ( <identifier> <identifiersep> class ) . new <identifiersep> instance ( ) ; \n <ect>
\t1 string [ ] <identifier> = get <identifiersep> <identifier> ( ) ; \n \t1 try { \n \t1 run <identifiersep> import <identifiersep> all ( <identifier> ) ; \n \t1 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 int status <identifiersep> code = connection . get <identifiersep> response <identifiersep> code ( ) ; \n \t1 if ( status <identifiersep> code == http <identifiersep> status . sc <identifiersep> unauthorized ) { \n \t1 string www <identifiersep> auth <identifiersep> header = connection . get <identifiersep> header <identifiersep> field ( www <identifiersep> authenticate ) ; \n <ect>
\t4 + <string_literal> + <string_literal> + <string_literal> ; \n \t2 <comment> \n \t2 doc = post <identifiersep> as <identifiersep> dom ( <string_literal> , xml ) ; \n \t2 if ( print <identifiersep> doc ) { \n <ect>
\t2 zk <identifiersep> client . start ( ) ; \n \t2 try { \n \t3 zk <identifiersep> client . delete ( ) . deleting <identifiersep> children <identifiersep> if <identifiersep> needed ( ) . for <identifiersep> path ( kafka <identifiersep> zk <identifiersep> path ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 answer = resource . execute <identifiersep> request ( cmds [ i ] ) ; \n \t6 } else { \n \t7 answer = new answer ( cmds [ i ] , false , <string_literal> ) ; } \n \t5 } catch ( exception e ) { \n <ect>
\t2 } else if ( host <identifiersep> name . starts <identifiersep> with ( <string_literal> ) || host <identifiersep> name . ends <identifiersep> with ( <string_literal> ) ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t3 return false ; \n \t2 } else if ( is <identifiersep> host <identifiersep> name && host <identifiersep> name . matches ( <string_literal> ) ) { \n <ect>
\t4 if ( result != null ) { \n \t5 send ( result ) ; \n \t5 rate . increment ( ) ; } \n \t4 else if ( running ) { \n <ect>
\t3 logger . error ( <string_literal> ) ; \n \t3 stop <identifiersep> rpc <identifiersep> server ( ) ; } \n \t2 if ( is <identifiersep> native <identifiersep> transport <identifiersep> running ( ) ) \n \t2 { \n <ect>
\t4 if ( address == null ) { \n \t5 log . warn ( <string_literal> ) ; \n \t4 } else { \n \t5 try { \n <ect>
\t3 return true ; \n \t2 } else { \n \t3 if ( force || dispatcher . pending . is <identifiersep> empty ( ) ) { \n \t4 if ( force ) \n <ect>
\t7 ref . decrement <identifiersep> reference <identifiersep> count ( ) ; \n \t7 <comment> \n \t7 <comment> \n \t7 <comment> \n <ect>
\t5 answer = new answer ( cmd , false , err <identifiersep> msg ) ; \n \t4 } else { \n \t5 answer = ep . send <identifiersep> message ( cmd ) ; } \n \t4 if ( ( answer != null ) && answer . get <identifiersep> result ( ) ) { \n <ect>
\t2 catch ( exception e ) \n \t2 { \n \t3 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( e ) ; \n \t3 if ( ! ( ( e instanceof request <identifiersep> validation <identifiersep> exception ) || ( e instanceof request <identifiersep> execution <identifiersep> exception ) ) ) \n <ect>
\t3 out . write ( <string_literal> ) ; \n \t3 out . flush ( ) ; \n \t3 out . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 result . <identifier> = ( table <identifiersep> not <identifiersep> found <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 if ( ! back <identifiersep> <identifier> <identifiersep> strategy . class . is <identifiersep> assignable <identifiersep> from ( clazz ) ) \n \t4 throw new configuration <identifiersep> exception ( strategy + <string_literal> + back <identifiersep> <identifier> <identifiersep> strategy . class . get <identifiersep> canonical <identifiersep> name ( ) , false ) ; \n \t3 constructor < ? > <identifier> = clazz . get <identifiersep> constructor ( map . class ) ; \n \t3 back <identifiersep> <identifier> <identifiersep> strategy instance = ( back <identifiersep> <identifier> <identifiersep> strategy ) <identifier> . new <identifiersep> instance ( strategy . parameters ) ; \n <ect>
\t4 + <string_literal> , item . get <identifiersep> value ( ) ) ; \n \t3 if ( properties . get <identifiersep> replication <identifiersep> mode ( ) == streaming <identifiersep> service <identifiersep> registry <identifiersep> properties . replication <identifiersep> modes . active <identifiersep> active ) { \n \t4 service <identifiersep> registry . save ( item . get <identifiersep> value ( ) ) ; } \n \t3 return item . get <identifiersep> value ( ) ; } \n <ect>
\t2 float ans ; \n \t2 try { \n \t3 ans = float . parse <identifiersep> float ( app <identifiersep> properties . get <identifiersep> property ( prop <identifiersep> name , float . to <identifiersep> string ( default <identifiersep> val ) ) . trim ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 } else { \n \t4 log . info ( <string_literal> + this . secondary <identifiersep> zone . get <identifiersep> zone <identifiersep> name ( ) + <string_literal> + <identifier> <identifiersep> zone . get <identifiersep> <identifier> ( ) . get <identifiersep> serial ( ) ) ; \n \t4 this . zone <identifiersep> provider . zone <identifiersep> checked ( secondary <identifiersep> zone ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 check <identifiersep> and <identifiersep> set <identifiersep> acls ( ) ; \n \t2 } catch ( exception ex ) { \n \t2 throw new io <identifiersep> exception ( <string_literal> + disable <identifiersep> message , ex ) ; } } \n \t1 } catch ( exception e ) { \n <ect>
\t7 + <string_literal> + resp . get <identifiersep> content ( ) ) ; \n \t4 format format = format . get <identifiersep> compact <identifiersep> format ( ) ; \n \t4 format . set <identifiersep> encoding ( <string_literal> ) ; \n \t4 xml <identifiersep> <identifier> <identifier> = new xml <identifiersep> <identifier> ( format ) ; \n <ect>
\t2 <comment> \n \t2 mock . reset ( ) ; \n \t2 mock . expected <identifiersep> <identifier> <identifiersep> received ( <string_literal> ) ; \n \t2 <comment> \n <ect>
\t3 if ( slave != null ) { \n \t4 try { \n \t5 slave . update <identifiersep> items ( items ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 log . warn ( <string_literal> + parent <identifiersep> tag ) ; \n \t3 return ; } \n \t2 element parent <identifiersep> element = ( element ) parent <identifiersep> nodes . item ( 0 ) ; \n \t2 if ( parent <identifiersep> element == null ) { \n <ect>
\t7 throw new <identifier> <identifiersep> parse <identifiersep> exception ( <string_literal> ) ; } \n \t6 if ( <string_literal> . equals ( vertex <identifiersep> weights <identifiersep> input . semantic ) ) { \n \t7 <identifier> . <identifier> <identifiersep> index = index ; \n \t7 vertex <identifiersep> weights <identifiersep> <identifier> <identifiersep> name <identifiersep> array [ vertex <identifiersep> weights <identifiersep> index ] = <identifier> <identifiersep> name <identifiersep> array [ index ] ; \n <ect>
\t2 while ( en . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t3 <identifier> <identifiersep> backoff = ( backoff <identifiersep> algorithm ) en . next <identifiersep> element ( ) ; \n \t3 break ; } \n \t2 if ( en . has <identifiersep> more <identifiersep> elements ( ) ) { \n <ect>
<number_literal> time <identifiersep> unit . seconds ) ) ; \n \t5 logger . info ( <string_literal> \n \t8 + interval <identifiersep> in <identifiersep> secs + <string_literal> ) ; \n \t4 } else { \n <ect>
\t4 } catch ( interrupted <identifiersep> exception e ) { \n \t5 <comment> \n \t5 break ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 log <identifiersep> log . debug ( <string_literal> + service <identifiersep> info ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n \t3 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t2 @ override \n \t2 public void <identifier> <identifiersep> state ( int state ) { \n \t3 high <identifiersep> low <identifiersep> value new <identifiersep> state = extract <identifiersep> value ( state ) ; \n \t3 if ( new <identifiersep> state != get <identifiersep> sensor <identifiersep> value ( ) ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 string [ ] ciphers = null ; \n \t2 try { \n \t3 ciphers = ssl <identifiersep> utils . get <identifiersep> supported <identifiersep> ciphers ( ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 <comment> \n \t2 log . info ( <string_literal> ) ; \n \t2 set < string > un <identifiersep> locked <identifiersep> user <identifiersep> account <identifiersep> ids = new hash <identifiersep> set < string > ( person <identifiersep> ids <identifiersep> by <identifiersep> locked <identifiersep> status <identifiersep> dao . execute ( false ) ) ; \n \t2 log . info ( <string_literal> + un <identifiersep> locked <identifiersep> user <identifiersep> account <identifiersep> ids . size ( ) + <string_literal> ) ; \n <ect>
<comment> \n \t1 public void set <identifiersep> kerberos <identifiersep> realm ( final string kerberos <identifiersep> realm ) { \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( kerberos <identifiersep> realm ) ) { \n <ect>
\t4 s <identifiersep> logger . error ( <identifier> <identifiersep> msg ) ; \n \t4 throw new exception ( <identifier> <identifiersep> msg ) ; } \n \t2 } finally { \n \t3 if ( ! import <identifiersep> success ) { \n <ect>
\t3 try { \n \t4 if ( <identifier> . contains <identifiersep> key ( address ) ) { \n \t5 <identifier> . get ( address ) . stop <identifiersep> test ( false ) ; \n \t4 } else { \n <ect>
\t3 log . warn ( <string_literal> , expr , e ) ; \n \t3 log . warn ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t3 change <identifiersep> state ( tunnel <identifiersep> state . starting ) ; } \n \t2 try { \n \t3 do <identifiersep> start <identifiersep> tunnel ( ) ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t3 result . <identifier> = ( namespace <identifiersep> not <identifiersep> found <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> <identifier> <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 <comment> \n \t3 string core <identifiersep> name = <string_literal> + dc <identifiersep> start . get <identifiersep> year <identifiersep> utc ( ) ; \n \t3 http <identifiersep> solr <identifiersep> server statistics <identifiersep> year <identifiersep> server = create <identifiersep> core ( ( http <identifiersep> solr <identifiersep> server ) solr , core <identifiersep> name ) ; \n \t3 system . out . println ( <string_literal> + total <identifiersep> records + <string_literal> + core <identifiersep> name ) ; \n <ect>
\t4 } else { \n \t5 try { \n \t6 instrumentation . <identifier> <identifiersep> classes ( new class [ ] { c } ) ; \n \t5 } catch ( throwable e ) { \n <ect>
\t3 method method = <identifier> <identifiersep> data <identifiersep> source . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> ) ; \n \t3 object obj = method . invoke ( <identifier> <identifiersep> data <identifiersep> source ) ; \n \t3 return ( map < string , object > ) obj ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 int auth <identifiersep> val = integer . parse <identifiersep> int ( auth <identifiersep> str ) ; \n \t3 if ( key <identifiersep> val != 0 && ( ( auth <identifiersep> val % key <identifiersep> val ) != 0 ) ) { \n \t3 return false ; } \n \t2 } catch ( number <identifiersep> format <identifiersep> exception | unsupported <identifiersep> encoding <identifiersep> exception nfe ) { \n <ect>
\t1 except ( <identifier> <identifiersep> interrupt , system <identifiersep> exit ) : \n \t2 logger . info ( <string_literal> ) \n \t2 raise system <identifiersep> exit ( ) \n \t1 except exception as e : \n <ect>
\t2 try { \n \t3 test <identifiersep> util . startup <identifiersep> bridge ( <number_literal> ) ; \n \t3 run <identifiersep> test ( <string_literal> , <number_literal> , con <identifiersep> options ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t3 val <identifier> <identifiersep> descriptor = <identifier> <identifiersep> error <identifiersep> data . descriptor . <identifier> ( <identifier> ) \n \t3 <identifier> <identifiersep> descriptors . add ( <identifier> <identifiersep> descriptor ) } \n \t2 val first <identifiersep> <identifier> <identifiersep> variable = constraints <identifiersep> util . get <identifiersep> first <identifiersep> <identifier> <identifiersep> variable ( <identifier> <identifiersep> error <identifiersep> data . constraint <identifiersep> system ) \n \t2 if ( first <identifiersep> <identifier> <identifiersep> variable == null ) { \n <ect>
\t9 log . debug ( <string_literal> , <string_literal> + definition . get <identifiersep> qualified <identifiersep> name ( ) + <string_literal> + filter ) ; \n \t8 continue definitions <identifiersep> loop ; } } \n \t6 result . add ( definition ) ; \n <ect>
\t2 assert . assert <identifiersep> true ( segmentation <identifiersep> profile . is <identifiersep> first <identifiersep> segment ( big <identifiersep> data <identifiersep> target . name ( ) ) ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> <identifier> <identifiersep> <identifier> <identifiersep> for <identifiersep> streams ( ) throws exception { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + h . to <identifiersep> string ( ) + <string_literal> ) ; } \n \t5 continue ; \n \t4 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> , random <identifiersep> seed ) ; \n \t2 final execution <identifiersep> environment env = execution <identifiersep> environment . get <identifiersep> execution <identifiersep> environment ( ) ; \n \t2 env . get <identifiersep> config ( ) . disable <identifiersep> <identifier> <identifiersep> logging ( ) ; \n \t2 for ( int parallelism = max <identifiersep> parallelism ; parallelism > 0 ; parallelism -- ) { \n <ect>
\t4 fs = file <identifiersep> system . get <identifiersep> local ( new configuration ( ) ) ; \n \t3 } else { \n \t4 fs = file <identifiersep> system . get ( tmp <identifiersep> path <identifiersep> uri , new configuration ( ) ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 thread <identifiersep> model thread <identifiersep> model = thread <identifiersep> model . thread <identifiersep> per <identifiersep> connector ; \n \t2 if ( settings . is <identifiersep> setting ( setting <identifiersep> thread <identifiersep> model ) ) { \n \t3 thread <identifiersep> model = thread <identifiersep> model . value <identifiersep> of ( settings . get <identifiersep> string ( setting <identifiersep> thread <identifiersep> model ) ) ; } \n \t2 if ( settings . is <identifiersep> setting ( setting <identifiersep> use <identifiersep> jmx ) && settings . get <identifiersep> bool ( setting <identifiersep> use <identifiersep> jmx ) ) { \n <ect>
\t2 final count <identifiersep> down <identifiersep> latch rcv <identifiersep> latch = new count <identifiersep> down <identifiersep> latch ( 1 ) ; \n \t2 <identifier> . message ( ) . remote <identifiersep> listen ( <string_literal> , new <identifier> < uuid , object > ( ) { \n \t3 @ override public boolean apply ( uuid node <identifiersep> id , object msg ) { \n \t4 try { \n <ect>
\t2 string h <identifiersep> status = null ; \n \t2 string [ ] frame <identifiersep> parts = null ; \n \t2 protocol <identifiersep> read event = null ; \n \t2 if ( frame . is <identifiersep> empty ( ) ) { \n <ect>
\t1 @ override \n \t1 public void start ( bundle <identifiersep> context bundle <identifiersep> context ) throws exception { \n \t2 heat <identifiersep> pump <identifiersep> activator . context = bundle <identifiersep> context ; \n <ect>
\t8 frames <identifiersep> since <identifiersep> last <identifiersep> <identifier> <identifiersep> request > this . auto <identifiersep> <identifier> <identifiersep> request <identifiersep> interval ) ) \n \t4 ) \n \t2 { \n <ect>
\t1 public void shutdown ( ) { \n \t2 <identifier> . stop <identifiersep> all ( true ) ; } \n \t1 private ignite <identifiersep> cache < string , ticket > get <identifiersep> ignite <identifiersep> cache <identifiersep> from <identifiersep> metadata ( final ticket <identifiersep> definition metadata ) { \n \t2 final string map <identifiersep> name = metadata . get <identifiersep> properties ( ) . get <identifiersep> storage <identifiersep> name ( ) ; \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 host <identifiersep> update <identifiersep> helper . stop <identifiersep> persistence <identifiersep> service ( ) ; \n \t1 } catch ( throwable e ) { \n \t1 if ( e instanceof ambari <identifiersep> exception ) { \n <ect>
\t2 <comment> \n \t2 <identifier> = false ; } \n \t2 if ( retries < = 0 || <identifier> == false ) \n \t2 throw he ; \n <ect>
\t2 } ; } \n \t1 protected auth <identifiersep> challenge check <identifiersep> state <identifiersep> cookie ( ) { \n \t2 oidc <identifiersep> http <identifiersep> facade . cookie state <identifiersep> cookie = get <identifiersep> cookie ( deployment . get <identifiersep> state <identifiersep> cookie <identifiersep> name ( ) ) ; \n \t2 if ( state <identifiersep> cookie == null ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> , uhe ) ; \n \t3 throw new server <identifiersep> exception ( <string_literal> , uhe ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t3 pool . init ( cluster , node <identifiersep> id <identifiersep> to <identifiersep> node ) ; } \n \t2 default <identifiersep> pool . init ( cluster , node <identifiersep> id <identifiersep> to <identifiersep> node ) ; \n \t2 for ( topology <identifiersep> details td : <identifier> . get <identifiersep> <identifier> ( ) ) { \n \t3 string user = ( string ) td . get <identifiersep> conf ( ) . get ( config . topology <identifiersep> <identifier> <identifiersep> user ) ; \n <ect>
\t1 private static final string service <identifiersep> name = <string_literal> ; \n \t1 public static <identifier> <identifiersep> service new <identifiersep> instance ( final string deployment <identifiersep> url ) throws malformed <identifiersep> url <identifiersep> exception { \n \t2 log . debug ( <string_literal> + deployment <identifiersep> url + <string_literal> ) ; \n \t2 final url wsdl <identifiersep> location = new url ( deployment <identifiersep> url + <string_literal> + name + <string_literal> ) ; \n <ect>
\t2 if ( this . directory <identifiersep> service <identifiersep> factory . equals ( <identifier> <identifiersep> <identifier> ) ) { \n \t3 log . <identifier> ( <string_literal> , instance <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 file <identifiersep> utils . delete <identifiersep> directory ( instance <identifiersep> dir ) ; \n \t2 } else { \n <ect>
<comment> \n \t6 <identifier> = ( int ) math . floor ( <number_literal> / ( get <identifiersep> width ( ) * get <identifiersep> height ( ) ) ) ; } \n \t5 if ( get <identifiersep> reference <identifiersep> frame <identifiersep> count ( ) > <identifier> ) { \n <ect>
\t4 <identifier> . load ( new file <identifiersep> input <identifiersep> stream ( properties <identifiersep> file ) ) ; \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 logger . warn ( <string_literal> + properties <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 long max <identifiersep> burst <identifiersep> in = ( ( <identifier> <identifiersep> inbound <identifiersep> burst <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second - <identifier> <identifiersep> inbound <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second ) * <number_literal> * num <identifiersep> ms ) / <number_literal> ; \n \t3 long max <identifiersep> burst <identifiersep> out = ( ( <identifier> <identifiersep> outbound <identifiersep> burst <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second - <identifier> <identifiersep> outbound <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second ) * <number_literal> * num <identifiersep> ms ) / <number_literal> ; \n \t3 <identifier> <identifiersep> <identifier> . <identifier> <identifiersep> bandwidth <identifiersep> queues ( buffer , inbound <identifiersep> to <identifiersep> add , outbound <identifiersep> to <identifiersep> add , max <identifiersep> burst <identifiersep> in , max <identifiersep> burst <identifiersep> out ) ; \n \t3 <comment> \n <ect>
\t2 return manager ; } \n \t1 @ override \n \t1 public void register <identifiersep> manager ( manager manager ) { \n \t2 if ( ! ( manager instanceof cluster <identifiersep> manager ) ) { \n <ect>
\t3 return true ; } \n \t2 return false ; } \n \t1 private boolean is <identifiersep> removing <identifiersep> <identifier> <identifiersep> queue <identifiersep> binding ( binding binding ) { \n \t2 if ( is <identifiersep> <identifier> <identifiersep> queue <identifiersep> binding ( binding ) ) { \n <ect>
\t3 integer node <identifiersep> id = node . get <identifiersep> id ( ) ; \n \t3 versioned < string > state <identifiersep> versioned = admin <identifiersep> client . metadata <identifiersep> mgmt <identifiersep> ops . get <identifiersep> remote <identifiersep> metadata ( node <identifiersep> id , \n <number_literal> metadata <identifiersep> store . server <identifiersep> state <identifiersep> key ) ; \n \t3 if ( state <identifiersep> versioned == null ) { \n <ect>
<comment> \n \t1 @ test ( timeout = <number_literal> ) \n \t1 public void test <identifiersep> detached <identifiersep> per <identifiersep> job <identifiersep> yarn <identifiersep> cluster ( ) throws exception { \n <ect>
\t3 long t2 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 log . info ( <string_literal> + ( t2 - t1 ) ) ; \n \t3 loading = false ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 } else { \n \t3 logger . warn ( <string_literal> , \n \t5 command . to <identifiersep> string ( ) , config . get <identifiersep> item <identifiersep> name ( ) ) ; } } \n \t1 private void call <identifiersep> <identifier> ( string url ) { \n <ect>
\t5 . read <identifiersep> timeout ( <number_literal> ) \n \t5 . send ( object <identifiersep> mapper . writer ( ) . write <identifiersep> value <identifiersep> as <identifiersep> string ( stats ) . get <identifiersep> bytes ( charsets . utf <identifiersep> <number_literal> ) ) \n \t5 . code ( ) ; \n \t3 if ( code >= <number_literal> ) { \n <ect>
\t6 mark . write ( ) ; \n \t6 <comment> \n \t6 break ; \n \t5 } else { \n <ect>
\t5 logger . error ( this , <string_literal> + this . item <identifiersep> name + <string_literal> + this + <string_literal> + base <identifiersep> manifest <identifiersep> putter . this , new error ( <string_literal> ) ) ; } \n \t4 if ( put <identifiersep> handler <identifiersep> waiting <identifiersep> for <identifiersep> block <identifiersep> sets . remove ( this ) ) { \n \t5 logger . error ( this , <string_literal> + this + <string_literal> + base <identifiersep> manifest <identifiersep> putter . this , new error ( <string_literal> ) ) ; } \n \t4 if ( put <identifiersep> handlers <identifiersep> waiting <identifiersep> for <identifiersep> <identifier> . remove ( this ) ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , msg , msg <identifiersep> type , <identifier> ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t1 { \n \t1 <identifier> <identifiersep> <identifier> . shutdown ( ) ; } \n \t1 catch ( exception e ) \n \t1 { \n <ect>
\t1 @ override \n \t1 public void on <identifiersep> message ( message message ) { \n \t2 try { \n \t3 text <identifiersep> message request <identifiersep> message = ( text <identifiersep> message ) message ; \n <ect>
\t3 if ( addr != null ) { \n \t4 if ( addr . get <identifiersep> port ( ) < = 0 ) { \n \t5 addr = null ; \n \t5 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 c . add ( new worksheet <identifiersep> list <identifiersep> update ( ) ) ; \n \t3 c . append ( worksheet <identifiersep> update <identifiersep> factory . create <identifiersep> worksheet <identifiersep> <identifier> <identifiersep> and <identifiersep> cleaning <identifiersep> results <identifiersep> updates ( <identifier> . get <identifiersep> id ( ) , super <identifiersep> selection <identifiersep> manager . default <identifiersep> selection , workspace . get <identifiersep> context <identifiersep> id ( ) ) ) ; \n \t3 return c ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public void test <identifiersep> appender ( ) throws interrupted <identifiersep> exception { \n \t2 test <identifiersep> listener test <identifiersep> listener = ( test <identifiersep> listener ) application <identifiersep> context . get <identifiersep> bean ( <string_literal> , <number_literal> ) ; \n \t2 listener <identifiersep> container . set <identifiersep> message <identifiersep> listener ( test <identifiersep> listener ) ; \n \t2 listener <identifiersep> container . start ( ) ; \n <ect>
\t4 } else if ( get <identifiersep> max <identifiersep> slow <identifiersep> count ( ) > 0 ) { \n \t5 slow <identifiersep> consumers . get ( subscriber ) . slow ( ) ; } \n \t3 } else { \n \t4 if ( slow <identifiersep> consumers . remove ( subscriber ) != null ) { \n <ect>
\t5 try <identifiersep> to <identifiersep> add <identifiersep> variant ( <identifier> <identifiersep> <identifier> , ref <identifiersep> seq , ctx ) ; } } \n \t3 progress . record ( ctx . get <identifiersep> contig ( ) , ctx . get <identifiersep> start ( ) ) ; } \n \t2 final number <identifiersep> format <identifier> = new decimal <identifiersep> format ( <string_literal> ) ; \n \t2 final string <identifier> = <identifier> . format ( ( failed <identifiersep> <identifier> + failed <identifiersep> <identifier> <identifiersep> check ) / ( double ) total ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
\t2 string encoded <identifiersep> address ; \n \t2 try { \n \t3 encoded <identifiersep> address = url <identifiersep> encoder . encode ( address , <string_literal> ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception ex ) { \n <ect>
\t7 <string_literal> + existing <identifiersep> node + ' ] ' ) ; \n \t6 <comment> \n \t6 return ; } \n <ect>
\t5 state state = create <identifiersep> state ( property <identifiersep> value ) ; \n \t5 if ( state != null ) { \n \t6 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , state ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t5 set <identifiersep> last <identifiersep> cached <identifiersep> id ( async <identifiersep> add , last <identifiersep> pending ) ; \n \t4 } catch ( cancellation <identifiersep> exception ok ) { \n \t5 continue ; \n \t4 } catch ( timeout <identifiersep> exception potential <identifiersep> deadlock ) { \n <ect>
\t3 } catch ( io <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; \n \t4 throw e ; \n \t3 } catch ( key <identifiersep> management <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( camel ) ; \n \t2 string cron <identifiersep> expression = ( ( cron <identifiersep> trigger ) get <identifiersep> trigger ( camel , <string_literal> ) ) . get <identifiersep> cron <identifiersep> expression ( ) ; \n \t2 app . stop ( ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t5 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , state ) ; } \n \t3 } ; \n \t3 mqtt <identifiersep> service . register <identifiersep> message <identifiersep> consumer ( broker <identifiersep> name , state <identifiersep> subscriber ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 return <identifier> <identifiersep> properties . get <identifiersep> property ( key ) ; } \n \t1 @ override \n \t1 public synchronized void persist ( string key , string value ) { \n \t2 if ( ! load <identifiersep> from <identifiersep> file ( <identifier> <identifiersep> file ) ) { \n <ect>
\t8 response . call <identifiersep> or <identifiersep> transaction <identifiersep> does <identifiersep> not <identifiersep> exist , \n \t8 request ) ; } \n \t3 catch ( parse <identifiersep> exception e ) \n \t3 { \n <ect>
\t2 while ( <identifier> . has <identifiersep> next ( ) ) { \n \t3 string key = <identifier> . next ( ) ; \n \t3 string [ ] vals = configuration <identifiersep> service . get <identifiersep> array <identifiersep> property ( named <identifiersep> prefix + key ) ; \n \t3 if ( vals == null || vals . length == 0 ) { \n <ect>
\t2 @ override \n \t2 public void connection <identifiersep> closed <identifiersep> on <identifiersep> error ( exception e ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 image image = image <identifiersep> map . get ( ) . get <identifiersep> unchecked ( region <identifiersep> and <identifiersep> name ) ; \n \t2 if ( image != null ) \n \t3 builder . <identifier> <identifiersep> system ( image . get <identifiersep> <identifier> <identifiersep> system ( ) ) ; \n \t1 } catch ( cache <identifiersep> loader . invalid <identifiersep> cache <identifiersep> load <identifiersep> exception e ) { \n <ect>
\t3 input = url . open <identifiersep> stream ( ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 log . info ( <string_literal> + url ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 logger . trace ( <string_literal> ) ; \n \t3 out . close ( ) ; \n \t3 logger . debug ( <string_literal> ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 return ; } \n \t2 if ( info <identifiersep> options . get <identifiersep> jar <identifiersep> file <identifiersep> path ( ) == null ) { \n \t3 throw new cli <identifiersep> args <identifiersep> exception ( <string_literal> ) ; } \n \t2 <comment> \n <ect>
\t2 if ( network . get <identifiersep> gateway ( ) != null ) { \n \t3 used <identifiersep> ips . add ( net <identifiersep> utils . <identifier> ( network . get <identifiersep> gateway ( ) ) ) ; } \n \t2 if ( requested <identifiersep> ip != null ) { \n \t3 if ( used <identifiersep> ips . contains ( requested <identifiersep> ip . to <identifiersep> long ( ) ) ) { \n <ect>
\t2 try ( <identifier> <identifiersep> recommender rec = engine . create <identifiersep> recommender ( ctx . input . get <identifiersep> dao ( ) ) ) { \n \t3 item <identifiersep> recommender <identifier> = rec . get <identifiersep> item <identifiersep> recommender ( ) ; \n \t3 data <identifiersep> access <identifiersep> object dao = rec . get <identifiersep> data <identifiersep> access <identifiersep> object ( ) ; \n \t3 if ( <identifier> == null ) { \n <ect>
\t2 get <identifiersep> channel <identifiersep> processor ( ) . process <identifiersep> event ( e ) ; \n \t2 counter <identifiersep> group . increment <identifiersep> and <identifiersep> get ( <string_literal> ) ; \n \t1 } catch ( channel <identifiersep> exception ex ) { \n \t2 counter <identifiersep> group . increment <identifiersep> and <identifiersep> get ( <string_literal> ) ; \n <ect>
\t2 command , string <identifiersep> utils . join ( required <identifiersep> options , <string_literal> ) ) ) ; } } \n private static void exit ( int exit <identifiersep> code , string message ) { \n \t1 if ( message != null ) { \n \t1 log . error ( message ) ; } \n <ect>
\t4 <identifier> <identifiersep> <identifier> . add <identifiersep> random <identifiersep> bytes ( data , offset , len ) ; } \n \t2 } catch ( runtime <identifiersep> exception e ) { \n \t3 <comment> \n \t3 log log = <identifier> <identifiersep> context . log <identifiersep> manager ( ) . get <identifiersep> log ( <identifier> <identifiersep> random <identifiersep> source . class ) ; \n <ect>
\t2 this . stats <identifiersep> cmd . close ( ) ; \n \t2 super . do <identifiersep> stop ( ) ; } \n \t1 protected class stats <identifiersep> callback extends result <identifiersep> callback <identifiersep> template < stats <identifiersep> callback , statistics > { \n \t2 public void on <identifiersep> next ( statistics statistics ) { \n <ect>
\t3 s <identifiersep> logger . trace ( <string_literal> + affected <identifiersep> vms . size ( ) + <string_literal> ) ; } \n \t2 boolean locked = <identifier> <identifiersep> work <identifiersep> lock . lock ( <identifier> <identifiersep> global <identifiersep> work <identifiersep> lock <identifiersep> timeout ) ; \n \t2 if ( ! locked ) { \n <ect>
\t2 if ( this . consent <identifiersep> policy != null ) { \n \t3 logger . debug ( <string_literal> , this . consent <identifiersep> policy , service ) ; \n \t3 if ( consent <identifiersep> policy . get <identifiersep> excluded <identifiersep> attributes ( ) != null && ! consent <identifiersep> policy . get <identifiersep> excluded <identifiersep> attributes ( ) . is <identifiersep> empty ( ) ) { \n \t4 consent <identifiersep> policy . get <identifiersep> excluded <identifiersep> attributes ( ) . for <identifiersep> each ( attributes : : remove ) ; \n <ect>
\t2 { \n \t3 <identifier> . load ( files <identifiersep> constants . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ) ; } \n \t2 catch ( io <identifiersep> exception err ) \n \t2 { \n <ect>
\t3 assert <identifiersep> equals ( i , message . get <identifiersep> int <identifiersep> property ( property <identifiersep> msg <identifiersep> number ) ) ; \n \t3 try { \n \t4 session . commit ( ) ; \n \t3 } catch ( transaction <identifiersep> rolled <identifiersep> back <identifiersep> exception expected <identifiersep> on <identifiersep> <identifier> ) { \n <ect>
\t1 public v <identifiersep> admin <identifiersep> proto . enable <identifiersep> scheduled <identifiersep> job <identifiersep> response handle <identifiersep> enable <identifiersep> scheduled <identifiersep> job ( v <identifiersep> admin <identifiersep> proto . enable <identifiersep> scheduled <identifiersep> job <identifiersep> request request ) { \n \t2 v <identifiersep> admin <identifiersep> proto . enable <identifiersep> scheduled <identifiersep> job <identifiersep> response . builder response = v <identifiersep> admin <identifiersep> proto . enable <identifiersep> scheduled <identifiersep> job <identifiersep> response . new <identifiersep> builder ( ) ; \n \t2 string job <identifiersep> id = request . get <identifiersep> job <identifiersep> id ( ) ; \n \t2 try { \n <ect>
\t1 } catch ( t <identifiersep> application <identifiersep> exception e ) { \n \t1 log . debug ( <string_literal> , server , e . get <identifiersep> message ( ) , e ) ; \n \t1 throw new accumulo <identifiersep> server <identifiersep> exception ( server , e ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> scan <identifiersep> id <identifiersep> exception e ) { \n <ect>
\t2 if ( ( objects <identifiersep> processed % <number_literal> ) == 0 ) { \n \t3 log . trace ( <string_literal> + objects <identifiersep> processed + <string_literal> + b . get <identifiersep> bucket <identifiersep> uuid ( ) + \n \t5 <string_literal> + b . get <identifiersep> bucket <identifiersep> name ( ) ) ; } \n \t2 } catch ( final throwable f ) { \n <ect>
\t3 try { \n \t3 thread . sleep ( sleep <identifiersep> step * <number_literal> ) ; \n \t3 sleep <identifiersep> step = math . min ( sleep <identifiersep> step * <number_literal> , <number_literal> ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 byte [ ] mac = ni . get <identifiersep> hardware <identifiersep> address ( ) ; \n \t3 for ( int i = 0 ; i < mac . length ; i ++ ) { \n \t4 mac <identifiersep> address <identifiersep> as <identifiersep> long | = ( ( long ) ( mac [ i ] & 0xff ) < < ( mac . length - i - 1 ) * <number_literal> ) ; } \n \t2 } catch ( socket <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public boolean connect ( int id , string dest , properties props ) throws i2p <identifiersep> exception , connect <identifiersep> exception , no <identifiersep> route <identifiersep> to <identifiersep> host <identifiersep> exception , data <identifiersep> format <identifiersep> exception , interrupted <identifiersep> io <identifiersep> exception , sam <identifiersep> invalid <identifiersep> direction <identifiersep> exception , io <identifiersep> exception { \n \t2 if ( ! can <identifiersep> create ) { \n \t3 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 input <identifiersep> stream input = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t4 element el = query <identifiersep> async <identifiersep> job <identifiersep> result ( server , input ) ; \n \t4 map < string , string > values = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( el , new string [ ] { <string_literal> } ) ; \n \t4 if ( values . get ( <string_literal> ) == null ) { \n <ect>
\t1 sc = create <identifiersep> slider <identifiersep> client ( conf ) ; \n \t1 } catch ( exception e ) { \n \t1 throw new runtime <identifiersep> exception ( e ) ; } \n \t1 try { \n <ect>
\t1 try : \n \t1 correlation <identifiersep> id = self . connection . send ( message = message , destination = destination , <identifier> <identifiersep> hook = <identifier> <identifiersep> hook ) \n \t1 except connection <identifiersep> is <identifiersep> already <identifiersep> closed : \n \t1 # this happens when trying to connect to broken connection . happens if ambari - server is restarted . \n <ect>
\t2 check <identifiersep> cli . execute ( cube <identifiersep> name ) ; } \n \t1 private static void check <identifiersep> and <identifiersep> get <identifiersep> hbase <identifiersep> url ( ) { \n \t2 storage <identifiersep> url src <identifiersep> metadata <identifiersep> url = src <identifiersep> config . get <identifiersep> metadata <identifiersep> url ( ) ; \n \t2 storage <identifiersep> url dst <identifiersep> metadata <identifiersep> url = dst <identifiersep> config . get <identifiersep> metadata <identifiersep> url ( ) ; \n <ect>
\t5 if ( ex . get <identifiersep> code ( ) == x <identifiersep> wiki <identifiersep> exception . error <identifiersep> xwiki <identifiersep> app <identifiersep> send <identifiersep> response <identifiersep> exception ) { \n \t6 logger . error ( <string_literal> ) ; } \n \t4 } catch ( exception e2 ) { \n \t5 <comment> \n <ect>
\t4 try { \n \t5 log . debug ( <string_literal> , str <identifiersep> class <identifiersep> name ) ; \n \t5 class < ? > command <identifiersep> class = class . for <identifiersep> name ( str <identifiersep> class <identifiersep> name ) ; \n \t5 if ( ! modifier . is <identifiersep> abstract ( command <identifiersep> class . get <identifiersep> modifiers ( ) ) ) { \n <ect>
\t1 @ nullable \n \t1 protected transaction <identifiersep> manager retrieve <identifiersep> transaction <identifiersep> manager ( ) throws transaction <identifiersep> system <identifiersep> exception { \n \t2 object helper = load <identifiersep> web <identifiersep> logic <identifiersep> transaction <identifiersep> helper ( ) ; \n \t2 try { \n <ect>
\t5 . with <identifiersep> schedule ( repeat <identifiersep> <identifier> <identifiersep> <identifier> ( commit <identifiersep> interval ) ) . build ( ) ; \n \t3 sched . schedule <identifiersep> job ( job , trigger ) ; \n \t3 logger . debug ( <string_literal> , commit <identifiersep> interval ) ; \n \t2 } catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t1 log . debug ( <string_literal> , request <identifiersep> body ) ; \n \t1 json <identifiersep> object response ; \n \t1 try { \n \t1 if ( is <identifiersep> operator ( ) == false ) { \n <ect>
\t3 throw new io <identifiersep> exception ( <string_literal> + port ) ; \n \t2 <identifier> <identifiersep> running = true ; \n \t2 <identifier> <identifiersep> accept <identifiersep> queue = new linked <identifiersep> blocking <identifiersep> queue < internal <identifiersep> socket > ( ) ; \n \t2 <comment> \n <ect>
\t5 } else if ( <string_literal> . equals ( group ) ) { \n \t6 -- counters [ <number_literal> ] ; \n \t6 update ( group ) ; \n \t5 } else { \n <ect>
\t3 log . debug ( <string_literal> + ( this . object <identifiersep> reuse <identifiersep> enabled ? <string_literal> : <string_literal> ) + <string_literal> ) ; } } \n \t1 @ override \n \t1 public void run ( ) throws exception { \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \t4 process <identifiersep> scene <identifiersep> activation <identifiersep> set ( serial <identifiersep> message , offset , endpoint ) ; \n \t4 break ; \n \t3 default : \n <ect>
\t4 throw new web <identifiersep> application <identifiersep> exception ( response . status . not <identifiersep> found ) ; \n \t3 } else if ( ! authorize <identifiersep> service . authorize <identifiersep> action <identifiersep> boolean ( context , bitstream , action ) ) { \n \t4 context . abort ( ) ; \n \t4 if ( context . get <identifiersep> current <identifiersep> user ( ) != null ) { \n <ect>
\t2 log . error ( <string_literal> + get <identifiersep> file <identifiersep> progress ( reader ) , e ) ; \n \t2 <comment> \n \t2 return ; \n \t1 } catch ( parse <identifiersep> exception e ) { \n <ect>
\t3 return null ; } \n \t2 url entry = framework <identifiersep> util . get <identifiersep> bundle ( z <identifiersep> wave <identifiersep> product <identifiersep> database . class ) . get <identifiersep> entry ( <string_literal> + cfg <identifiersep> file ) ; \n \t2 if ( entry == null ) { \n \t3 database = null ; \n <ect>
\t2 long duration = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n \t2 { \n \t3 log . info ( <string_literal> + result <identifiersep> list . size ( ) + <string_literal> + duration + <string_literal> ) ; } \n <ect>
\t2 sequences <identifiersep> storage . clear ( ) ; \n \t2 data <identifiersep> locks . clear ( ) ; \n \t2 <comment> \n \t2 acquired <identifiersep> locks <identifiersep> per <identifiersep> thread . remove ( ) ; \n <ect>
\t6 <identifier> <identifiersep> ip <identifiersep> set . add <identifiersep> all ( peer <identifiersep> i <identifiersep> ps ) ; \n \t6 return peer ; \n \t5 } else { \n \t6 if ( <identifier> <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t6 reset ( ) ; } } \n \t4 catch ( exception e ) \n \t4 { \n \t5 thread <identifiersep> utils . check <identifiersep> interrupted ( e ) ; \n <ect>
\t2 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 return new setup <identifiersep> answer ( command , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t4 <comment> \n \t4 get <identifiersep> cache ( ) . add <identifiersep> to <identifiersep> top <identifiersep> of <identifiersep> list ( cache <identifiersep> keys . people <identifiersep> <identifier> <identifiersep> by <identifiersep> person + follower <identifiersep> id , following <identifiersep> id ) ; } } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t3 { \n \t4 return true ; } } \n \t2 catch ( throwable ex ) \n \t2 { \n <ect>
\t2 na <identifiersep> element <identifier> ; \n \t2 <identifier> <identifiersep> volume <identifiersep> vo volume = null ; \n \t2 volume = <identifier> <identifiersep> volume <identifiersep> dao . find <identifiersep> volume ( ip <identifiersep> address , aggr <identifiersep> name , vol <identifiersep> name ) ; \n \t2 if ( volume == null ) { \n <ect>
\t4 return true ; \n \t3 } else { \n \t4 msg <identifiersep> to <identifiersep> send = msg <identifiersep> queue . poll ( ) ; } } \n <ect>
\t3 io <identifiersep> utils . close <identifiersep> quietly ( fis ) ; } } \n \t1 public void scp <identifiersep> file <identifiersep> to <identifiersep> local ( string <identifier> , string <identifier> ) throws exception { \n \t2 file <identifiersep> output <identifiersep> stream fos = null ; \n \t2 try { \n <ect>
\t3 else { \n \t4 try { \n \t5 txn . rollback ( ) ; } \n \t4 catch ( exception e ) { \n <ect>
\t4 byte [ ] key <identifiersep> byte = key . get <identifiersep> bytes ( ) ; \n \t4 write <identifiersep> batch . put ( key <identifiersep> byte , data ) ; } \n \t3 db . write ( write <identifiersep> opts , write <identifiersep> batch ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 open <identifiersep> session ( ) ; \n \t2 execute <identifiersep> init <identifiersep> sql ( ) ; \n \t2 break ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 if ( html <identifiersep> parsing <identifiersep> utils . is <identifiersep> <identifier> <identifiersep> matched ( new <identifiersep> url , config ) ) { \n \t5 log . debug ( <string_literal> ) ; \n \t5 potential <identifiersep> links . add ( new <identifiersep> url ) ; } \n \t3 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t5 request . get <identifiersep> file <identifiersep> name ( ) , \n \t5 request . get <identifiersep> id ( ) ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n <ect>
\t3 <identifier> <identifiersep> elapsed <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n \t3 <comment> \n \t3 <identifier> <identifiersep> percent <identifiersep> complete = ( double ) ( <identifier> <identifiersep> elapsed <identifiersep> time ) / ( double ) duration ; \n \t3 <identifier> <identifiersep> status = whole <identifiersep> number <identifiersep> formatter . format ( <identifier> <identifiersep> number <identifiersep> to <identifiersep> check ) + <string_literal> ; \n <ect>
\t4 ds . set <identifiersep> parameter ( <string_literal> , <string_literal> + file <identifiersep> name ) \n \t4 ds . cache <identifiersep> time = 0 \n \t4 return ds \n \t3 } catch ( e : io <identifiersep> exception ) { \n <ect>
\t3 logger . debug ( <string_literal> , this . entity <identifiersep> id <identifiersep> parameter <identifiersep> name ) ; \n \t3 return success ( ) ; } \n \t2 logger . debug ( <string_literal> , entity <identifiersep> id ) ; \n \t2 if ( ! metadata <identifiersep> ui <identifiersep> utils . is <identifiersep> metadata <identifiersep> found <identifiersep> for <identifiersep> entity <identifiersep> id ( metadata <identifiersep> adapter , entity <identifiersep> id ) ) { \n <ect>
\t2 assert <identifiersep> timeout ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> timeout ( health <identifiersep> timeout ) . set <identifiersep> wait <identifiersep> for <identifiersep> green <identifiersep> status ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> no <identifiersep> relocating <identifiersep> shards ( true ) . set <identifiersep> wait <identifiersep> for <identifiersep> nodes ( <string_literal> ) ) ; \n \t2 internal <identifiersep> cluster ( ) . stop <identifiersep> random <identifiersep> data <identifiersep> node ( ) ; \n \t2 <comment> \n \t2 assert <identifiersep> timeout ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> timeout ( health <identifiersep> timeout ) . set <identifiersep> wait <identifiersep> for <identifiersep> <identifier> <identifiersep> status ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> no <identifiersep> relocating <identifiersep> shards ( true ) . set <identifiersep> wait <identifiersep> for <identifiersep> nodes ( <string_literal> ) ) ; \n <ect>
\t3 if ( ! match <identifiersep> when ( url , invocation ) ) { \n \t4 return <identifier> ; } \n \t3 list < invoker < t > > result = new array <identifiersep> list < invoker < t > > ( ) ; \n \t3 if ( then <identifiersep> condition == null ) { \n <ect>
\t2 if ( purge <identifiersep> count > 0 ) { \n \t3 log . info ( <string_literal> , purge <identifiersep> count ) ; } \n \t2 purge <identifiersep> count = doc . purge <identifiersep> collision <identifiersep> <identifier> ( context ) ; \n \t2 if ( purge <identifiersep> count > 0 ) { \n <ect>
\t5 <comment> \n \t5 if ( <identifier> <identifiersep> priority <identifiersep> servers != null ) { \n \t6 for ( list < string > servers : <identifier> <identifiersep> priority <identifiersep> servers ) { \n \t7 if ( <identifier> <identifiersep> log != null && <identifier> <identifiersep> log . should <identifiersep> debug ( ) ) \n <ect>
\t2 throw new unsupported <identifiersep> operation <identifiersep> exception ( ) ; } \n \t1 public void println <identifiersep> statistics ( ) { \n \t2 logger . info ( <string_literal> + cache <identifiersep> hit <identifiersep> count ) ; \n \t2 logger . info ( <string_literal> + cache <identifiersep> miss <identifiersep> count ) ; \n <ect>
\t3 kerberos <identifiersep> identity <identifiersep> descriptor identity <identifiersep> descriptor = yarn <identifiersep> <identifier> <identifiersep> kerberos <identifiersep> descriptor . get <identifiersep> identity ( identity ) ; \n \t3 kerberos <identifiersep> principal <identifiersep> descriptor principal <identifiersep> descriptor = null ; \n \t3 kerberos <identifiersep> keytab <identifiersep> descriptor keytab <identifiersep> descriptor = null ; \n \t3 if ( identity <identifiersep> descriptor != null ) { \n <ect>
<comment> \n \t1 @ pre <identifiersep> destroy \n \t1 @ <identifier> <identifiersep> throws \n \t1 public void destroy ( ) { \n <ect>
\t5 result . put ( rs . get <identifiersep> string ( 1 ) , rs . get <identifiersep> string ( <number_literal> ) ) ; } \n \t4 stmt . close ( ) ; \n \t4 con . commit ( ) ; \n \t3 } catch ( sql <identifiersep> exception ex ) { \n <ect>
<comment> \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
<number_literal> metadata <identifiersep> schema . dc <identifiersep> schema , element , qualifier ) ; \n \t3 this . <identifier> = metadata <identifiersep> value <identifiersep> service . create ( context , it , <identifier> ) ; \n \t3 context . restore <identifiersep> auth <identifiersep> system <identifiersep> state ( ) ; \n \t2 } catch ( authorize <identifiersep> exception ex ) { \n <ect>
\t3 host = host <identifiersep> dao . find <identifiersep> by <identifiersep> public <identifiersep> ip ( public <identifiersep> ip ) ; \n \t3 if ( host != null ) { \n \t4 return remote <identifiersep> host <identifiersep> end <identifiersep> point . get <identifiersep> hypervisor <identifiersep> host <identifiersep> end <identifiersep> point ( host ) ; } \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t2 log . debug ( <string_literal> ) \n \t2 val keys = cache . keys \n \t2 keys . for <identifiersep> each { \n \t3 if ( it . starts <identifiersep> with ( prefix <identifiersep> key ) ) { \n <ect>
\t2 if ( allow <identifiersep> eager <identifiersep> init ) { \n \t3 throw ex ; } \n \t2 <comment> \n <ect>
\t1 public string get ( string element ) throws ovm3resource <identifiersep> exception { \n \t2 try { \n \t3 init <identifiersep> maps ( ) ; \n \t2 } catch ( ovm3resource <identifiersep> exception e ) { \n <ect>
\t7 event <identifiersep> name <identifiersep> log <identifiersep> str += event <identifiersep> <identifier> [ 0 ] ; \n \t7 for ( int i = 1 ; i < event <identifiersep> <identifier> . length ; i ++ ) { \n \t8 event <identifiersep> name <identifiersep> log <identifiersep> str = event <identifiersep> name <identifiersep> log <identifiersep> str + <string_literal> + event <identifiersep> <identifier> [ i ] ; } } \n \t6 event <identifiersep> name <identifiersep> log <identifiersep> str += <string_literal> ; \n <ect>
\t5 return ; } \n \t4 try { \n \t5 this . added <identifiersep> <identifier> . wait ( milliseconds ) ; } \n \t4 catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t1 } catch ( parse <identifiersep> error <identifiersep> exception e ) { \n \t1 log . warn ( <string_literal> , e ) ; \n \t1 throw new kerberos <identifiersep> operation <identifiersep> exception ( <string_literal> , e ) ; \n \t1 } catch ( method <identifiersep> invocation <identifiersep> exception | resource <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 log . error ( <string_literal> ) ; \n \t2 continue ; } \n \t1 input input = ( input ) alias <identifiersep> util . get <identifiersep> class <identifiersep> instance ( source , alias <identifiersep> util . alias <identifiersep> type . input ) ; \n \t1 if ( input == null ) { \n <ect>
<comment> \n \t1 public void stop ( bundle <identifiersep> context context ) throws exception \n \t1 { \n \t2 <identifier> <identifiersep> serv <identifiersep> reg . unregister ( ) ; \n <ect>
<comment> \n \t1 public void error ( transformer <identifiersep> exception e ) throws transformer <identifiersep> exception \n \t1 { \n <ect>
\t2 } catch ( libvirt <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + e . to <identifiersep> string ( ) ) ; \n \t3 return new array <identifiersep> list < interface <identifiersep> def > ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 try { \n \t4 scheduled <identifiersep> task = executor . schedule <identifiersep> with <identifiersep> fixed <identifiersep> delay ( new metrics <identifiersep> <identifier> ( listener ) , 0 , delay , time <identifiersep> unit . milliseconds ) ; \n \t3 } catch ( throwable ex ) { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 <identifier> . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , <identifier> ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 return true ; } } \n \t1 } catch ( io <identifiersep> exception ioe ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t2 @ inject \n \t2 public non <identifiersep> singleton <identifiersep> child ( recorder recorder ) throws interrupted <identifiersep> exception { \n \t3 recorder . record ( get <identifiersep> class ( ) ) ; \n \t3 int count = counter . increment <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t2 for ( host <identifiersep> vo h : all <identifiersep> hosts ) { \n \t3 success = create <identifiersep> storage <identifiersep> pool ( h . get <identifiersep> id ( ) , <identifier> ) ; \n \t3 if ( success ) { \n \t4 break ; } } \n <ect>
\t4 self . skip <identifiersep> test ( \n \t5 <string_literal> % \n \t5 self . <identifier> <identifiersep> test <identifiersep> method <identifiersep> name ) \n <ect>
\t4 new entity <identifiersep> role <identifiersep> <identifier> ( spsso <identifiersep> descriptor . default <identifiersep> element <identifiersep> name ) ) ) ; \n \t2 peer . set <identifiersep> role ( role <identifiersep> descriptor . get <identifiersep> element <identifiersep> q <identifiersep> name ( ) ) ; \n \t2 final saml <identifiersep> protocol <identifiersep> context protocol = context . get <identifiersep> <identifier> ( saml <identifiersep> protocol <identifiersep> context . class , true ) ; \n \t2 protocol . set <identifiersep> protocol ( saml <identifiersep> constants . <identifier> <identifiersep> ns ) ; \n <ect>
