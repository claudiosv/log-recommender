\t5 config <identifiersep> stream = config <identifiersep> url . open <identifiersep> stream ( ) ; } } \n \t3 if ( config <identifiersep> stream != null ) { \n \t4 return tika <identifiersep> parser <identifiersep> config . get <identifiersep> non <identifiersep> indexed <identifiersep> media <identifiersep> types ( config <identifiersep> stream ) ; } \n \t2 } catch ( tika <identifiersep> exception | io <identifiersep> exception | sax <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 if ( ! is <identifiersep> secondary ( ) ) { \n \t1 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> ) ; } \n \t1 if ( ! is <identifiersep> peer <identifiersep> primary ( ) ) { \n <ect>
\t7 while ( it . has <identifiersep> next ( ) ) { \n \t8 <comment> \n \t8 final string s <identifiersep> file = it . next ( ) ; \n \t8 if ( logger . is <identifiersep> loggable ( level . info ) ) \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t2 cache <identifiersep> manager . persist <identifiersep> metadata ( metadata <identifiersep> to <identifiersep> persist ) ; \n \t2 mark <identifiersep> success = true ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t6 if ( answer == null ) { \n \t7 s <identifiersep> logger . debug ( <string_literal> + cmd . to <identifiersep> string ( ) ) ; \n \t7 answer = answer . create <identifiersep> unsupported <identifiersep> command <identifiersep> answer ( cmd ) ; } } \n \t4 } catch ( final throwable th ) { \n <ect>
public class logging <identifiersep> event <identifiersep> notifier extends event <identifiersep> notifier <identifiersep> support { \n \t1 private logger log = logger <identifiersep> factory . get <identifiersep> logger ( logging <identifiersep> event <identifiersep> notifier . class ) ; \n \t1 private string log <identifiersep> name ; \n \t1 public void notify ( event <identifiersep> object event ) throws exception { \n <ect>
\t5 if ( e . get <identifiersep> key ( ) != get <identifiersep> id ( ) && ! committed <identifiersep> view . contains <identifiersep> key ( e . get <identifiersep> key ( ) ) ) \n \t6 qcm . connect <identifiersep> one ( e . get <identifiersep> key ( ) ) ; } } } } \n \t1 public synchronized void restart <identifiersep> leader <identifiersep> election ( quorum <identifiersep> verifier qv <identifiersep> old , quorum <identifiersep> verifier qv <identifiersep> new ) { \n \t2 if ( qv <identifiersep> old == null || ! qv <identifiersep> old . equals ( qv <identifiersep> new ) ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t5 <string_literal> , \n \t5 item , cmd , value ) ; } } \n \t1 private void post <identifiersep> update ( string item , state state ) { \n \t2 if ( item != null && state != null ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + mshost . get <identifiersep> service <identifiersep> ip ( ) + <string_literal> + mshost . get <identifiersep> msid ( ) ) ; } } \n \t2 for ( management <identifiersep> server <identifiersep> host <identifiersep> vo mshost : args . get <identifiersep> joined <identifiersep> nodes ( ) ) { \n \t3 if ( mshost . get <identifiersep> id ( ) == args . get <identifiersep> self ( ) . long <identifiersep> value ( ) ) { \n <ect>
\t1 if ( hdfs <identifiersep> session <identifiersep> path <identifiersep> lock <identifiersep> file != null ) { \n \t2 try { \n \t2 hdfs <identifiersep> session <identifiersep> path <identifiersep> lock <identifiersep> file . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 final bucket <identifiersep> manager bucket <identifiersep> manager = this . bucket . bucket <identifiersep> manager ( ) ; \n \t3 final design <identifiersep> document new <identifiersep> document = design <identifiersep> document . create ( this . design <identifiersep> document , new array <identifiersep> list < > ( views ) ) ; \n \t3 try { \n \t4 if ( ! new <identifiersep> document . equals ( bucket <identifiersep> manager . get <identifiersep> design <identifiersep> document ( this . design <identifiersep> document ) ) ) { \n <ect>
<comment> \n \t1 @ event <identifiersep> listener \n \t1 public void handle <identifiersep> configuration <identifiersep> modified <identifiersep> event ( final cas <identifiersep> configuration <identifiersep> modified <identifiersep> event event ) { \n \t2 if ( this . context <identifiersep> refresher == null ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , response <identifiersep> parts ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <number_literal> , response <identifiersep> parts . size ( ) ) ; \n \t2 final edm edm = ( edm ) response <identifiersep> parts . get ( 0 ) . get <identifiersep> body ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( edm ) ; \n <ect>
\t6 write <identifiersep> to <identifiersep> socket ( sock , new grid <identifiersep> tcp <identifiersep> discovery <identifiersep> handshake <identifiersep> request ( loc <identifiersep> node <identifiersep> id ) ) ; \n \t6 grid <identifiersep> tcp <identifiersep> discovery <identifiersep> handshake <identifiersep> response res = read <identifiersep> message ( sock , null , net <identifiersep> timeout ) ; \n \t6 if ( loc <identifiersep> node <identifiersep> id . equals ( res . creator <identifiersep> node <identifiersep> id ( ) ) ) { \n <ect>
\t3 <comment> \n \t3 context . restore <identifiersep> auth <identifiersep> system <identifiersep> state ( ) ; \n \t3 context . complete ( ) ; \n \t2 } catch ( authorize <identifiersep> exception ex ) { \n <ect>
\t2 flink <identifiersep> config = config ; \n \t2 hadoop <identifiersep> config = null ; } \n \t1 @ override \n \t1 public file <identifiersep> system create ( uri fs <identifiersep> uri ) throws io <identifiersep> exception { \n <ect>
\t3 if ( track <identifiersep> encoding <identifiersep> byte <identifiersep> usage ) { \n \t4 log . info ( metrics <identifiersep> util . histogram <identifiersep> to <identifiersep> string ( <string_literal> , metrics . encode <identifiersep> first <identifiersep> key <identifiersep> size ) ) ; \n \t4 log . info ( metrics <identifiersep> util . histogram <identifiersep> to <identifiersep> string ( <string_literal> , metrics . encode <identifiersep> next <identifiersep> first <identifiersep> key <identifiersep> size ) ) ; \n \t4 log . info ( metrics <identifiersep> util . histogram <identifiersep> to <identifiersep> string ( <string_literal> , metrics . encode <identifiersep> key <identifiersep> size ) ) ; \n <ect>
\t2 for ( file jar : jars ) { \n \t3 try { \n \t3 url url = jar . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ; \n \t3 urls . add ( url ) ; \n <ect>
\t2  <identifiersep> log . debug ( <string_literal> +  <identifiersep> peer . get <identifiersep> name ( ) + <string_literal> , e ) ; } \n \t1 election e =  <identifiersep> peer . get <identifiersep> election <identifiersep> alg ( ) ; \n \t1 if ( e != null ) \n \t1 { \n <ect>
<comment> \n \t1 public void deactivate ( ) { \n <ect>
\t1 { \n \t2 string jmx <identifiersep> port = system . get <identifiersep> property ( <string_literal> ) ; \n \t2 if ( jmx <identifiersep> port == null ) \n \t2 { \n <ect>
\t10 try { \n <number_literal> state value = obj . convert <identifiersep> to <identifiersep> state ( value <identifiersep> selector ) ; \n <number_literal> event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , value ) ; \n \t10 } catch ( rfx <identifiersep> com <identifiersep> exception e ) { \n <ect>
\t5 attackers . put ( potential , l = new array <identifiersep> list < > ( ) ) ; } \n \t4 l . add ( creature ) ; } } \n \t2 return attackers ; } \n \t1 protected int combat <identifiersep> potential ( permanent creature , game game ) { \n <ect>
\t2 if ( result . equals ( <string_literal> ) ) { \n \t3  <identifiersep> context . wait <identifiersep> for <identifiersep> task <identifiersep> progress <identifiersep> done ( mor <identifiersep> task ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t5 log . warn ( <string_literal> ) ; \n \t5 return ; } \n \t4 modified <identifiersep> file <identifiersep> tracker = new file ( output <identifiersep> list ) ; } } \n <ect>
\t2 skip <identifiersep> levels < k , v > after = null ; \n \t2 for ( skip <identifiersep> levels < k , v > lv : lvls ) { \n \t3 boolean modified = false ; \n \t3 if ( bf . log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 msh92start = j ; \n \t4 break ; } } \n \t2 <comment> \n \t2 if ( - 1 == msh92start ) { \n <ect>
<number_literal> final map < string , object > attributes , \n <number_literal> final boolean match <identifiersep> if <identifiersep> no <identifiersep> value <identifiersep> provided ) { \n \t2 logger . debug ( <string_literal> , attr <identifiersep> name , attr <identifiersep> value , attributes ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( attr <identifiersep> name ) ) { \n <ect>
\t2 list < long > network <identifiersep> ids =  <identifiersep> network <identifiersep> domain <identifiersep> dao . list <identifiersep> network <identifiersep> ids <identifiersep> by <identifiersep> domain ( domain . get <identifiersep> id ( ) ) ; \n \t2 list < account <identifiersep> vo > accounts <identifiersep> for <identifiersep> cleanup =  <identifiersep> account <identifiersep> dao . find <identifiersep> cleanups <identifiersep> for <identifiersep> removed <identifiersep> accounts ( domain . get <identifiersep> id ( ) ) ; \n \t2 list < dedicated <identifiersep> resource <identifiersep> vo > dedicated <identifiersep> resources =  <identifiersep> dedicated <identifiersep> dao . list <identifiersep> by <identifiersep> domain <identifiersep> id ( domain . get <identifiersep> id ( ) ) ; \n \t2 if ( collection <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( dedicated <identifiersep> resources ) ) { \n <ect>
\t2 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 for ( int i = 0 ; i < count ; i ++ ) { \n \t3 list <identifiersep> index . add ( tx , key ( i ) , ( long ) i ) ; \n \t3 tx . commit ( ) ; } \n <ect>
\t3 for ( consuming <identifiersep> client client : subscribers ) { \n \t4 client . stop <identifiersep> async ( ) ; } \n \t3 shutdown <identifiersep> latch . await ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t3 <comment> \n <ect>
\t1 log . info ( <string_literal> , quote ) ; \n \t1 csv <identifiersep> parser <identifiersep> builder = csv <identifiersep> parser <identifiersep> builder . with <identifiersep> quote <identifiersep> char ( quote ) ; } \n \t1 character escape <identifiersep> char = ( character ) parse <identifiersep> options . get <identifiersep> option ( parse <identifiersep> options . options <identifiersep> csv <identifiersep> escape <identifiersep> char ) ; \n \t1 if ( null != escape <identifiersep> char ) { \n <ect>
\t1 future < string > get <identifiersep> web <identifiersep> uiurl = spark <identifiersep> client . run ( new get <identifiersep> web <identifiersep> uiurl <identifiersep> job ( ) ) ; \n \t1 try { \n \t1 return get <identifiersep> web <identifiersep> uiurl . get ( spark <identifiersep> client <identifiersep> timeout <identifiersep> in <identifiersep> seconds , time <identifiersep> unit . seconds ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 @ action <identifiersep> doc ( text = <string_literal> , returns = <string_literal> ) \n \t1 public static boolean harmony <identifiersep> press <identifiersep> button ( @ param <identifiersep> doc ( name = <string_literal> ) string device <identifiersep> id , \n \t3 @ param <identifiersep> doc ( name = <string_literal> ) string action ) { \n \t2 if ( ! harmony <identifiersep> hub <identifiersep> action <identifiersep> service . is <identifiersep> properly <identifiersep> configured ( ) ) { \n <ect>
\t3 if ( i <identifiersep> cms <identifiersep> collector <identifiersep> post <identifiersep> create <identifiersep> handler . class . is <identifiersep> assignable <identifiersep> from ( handler <identifiersep> class ) ) { \n \t4 i <identifiersep> cms <identifiersep> collector <identifiersep> post <identifiersep> create <identifiersep> handler handler = ( i <identifiersep> cms <identifiersep> collector <identifiersep> post <identifiersep> create <identifiersep> handler ) handler <identifiersep> class . new <identifiersep> instance ( ) ; \n \t4 return handler ; \n \t3 } else { \n <ect>
\t2 if ( erx <identifiersep> logger . log == null ) { \n \t3 erx <identifiersep> logger . log = logger . get <identifiersep> logger ( logger . class ) ; } \n \t2 erx <identifiersep> logger . log . info ( <string_literal> ) ; \n <ect>
\t4 string path = vol . substring ( 0 , vol . last <identifiersep> index <identifiersep> of ( file . separator ) ) ; \n \t4 template <identifiersep> location loc = new template <identifiersep> location (  <identifiersep> storage , path ) ; \n \t4 try { \n \t5 if ( ! loc . load ( ) ) { \n <ect>
\t3 remove <identifiersep> iterator <identifiersep> result result = new remove <identifiersep> iterator <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t4 timeout = integer . parse <identifiersep> int ( ( string ) config . get ( <string_literal> ) ) ; \n \t4 logger . info ( <string_literal> , timeout ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t4 timeout = null ; \n <ect>
\t4 log . info ( <string_literal> , default <identifiersep> driver ) ; \n \t4 try { \n \t5 class . for <identifiersep> name ( default <identifiersep> driver ) ; \n \t4 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t3 app <identifiersep> states . put ( application <identifiersep> state . net <identifiersep> version , value <identifiersep> factory . network <identifiersep> version ( ) ) ; \n \t3 app <identifiersep> states . put ( application <identifiersep> state . host <identifiersep> id , value <identifiersep> factory . host <identifiersep> id ( local <identifiersep> host <identifiersep> id ) ) ; \n \t3 app <identifiersep> states . put ( application <identifiersep> state . rpc <identifiersep> address , value <identifiersep> factory . rpcaddress ( database <identifiersep> descriptor . get <identifiersep> broadcast <identifiersep> rpc <identifiersep> address ( ) ) ) ; \n \t3 app <identifiersep> states . put ( application <identifiersep> state . release <identifiersep> version , value <identifiersep> factory . release <identifiersep> version ( ) ) ; \n <ect>
\t5 input <identifiersep> stream original = this . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) \n \t5 files . copy ( original , new <identifiersep> file , standard <identifiersep> copy <identifiersep> option . replace <identifiersep> existing ) \n \t5 license <identifiersep> file = new <identifiersep> file \n \t4 } else { \n <ect>
\t3 log . warn ( <string_literal> , producer <identifiersep> config . key <identifiersep> serializer <identifiersep> class <identifiersep> config ) ; } \n \t2 if ( ! producer <identifiersep> config . contains <identifiersep> key ( producer <identifiersep> config . value <identifiersep> serializer <identifiersep> class <identifiersep> config ) ) { \n \t3 this . producer <identifiersep> config . put ( producer <identifiersep> config . value <identifiersep> serializer <identifiersep> class <identifiersep> config , byte <identifiersep> array <identifiersep> serializer . class . get <identifiersep> name ( ) ) ; \n \t2 } else { \n <ect>
\t3 try { \n \t4 client . update ( update <identifiersep> request ) . get ( ) ; \n \t3 } catch ( exception e ) { \n \t4 if ( exception <identifiersep> utils . get <identifiersep> root <identifiersep> cause ( e ) instanceof document <identifiersep> missing <identifiersep> exception ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> get <identifiersep> qualifiers ( ) { \n <ect>
\t4 process . get <identifiersep> output <identifiersep> stream ( ) . close ( ) ; \n \t4 process . get <identifiersep> input <identifiersep> stream ( ) . close ( ) ; \n \t4 process . get <identifiersep> error <identifiersep> stream ( ) . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 return retrieve ( key , fn ) ; } \n \t1 } ) ; } \n @ override \n public void remove ( string key ) { \n <ect>
try { \n \t1 router . start ( ) ; \n \t1 log . info ( <string_literal> ) \n } catch ( exception e ) { \n <ect>
\t2 if ( properties . get <identifiersep> max <identifiersep> idle ( ) > properties . get <identifiersep> max <identifiersep> active ( ) ) { \n \t3 log . warn ( <string_literal> + properties . get <identifiersep> max <identifiersep> active ( ) ) ; \n \t3 properties . set <identifiersep> max <identifiersep> idle ( properties . get <identifiersep> max <identifiersep> active ( ) ) ; } \n \t2 if ( properties . get <identifiersep> max <identifiersep> idle ( ) < properties . get <identifiersep> min <identifiersep> idle ( ) ) { \n <ect>
\t7 parent <identifiersep> char <identifiersep> array <identifiersep> writer . flush ( ) ; \n \t7 parent <identifiersep> char <identifiersep> array <identifiersep> writer . write <identifiersep> to ( writer ) ; } \n \t5 } catch ( template <identifiersep> exception | io <identifiersep> exception e ) { \n \t6 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t5 script . set <identifiersep> file <identifiersep> size ( dir <identifiersep> entry . get <identifiersep> size ( ) ) ; \n \t5 scripts . add ( script ) ; } \n \t3 } ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 result . sec = ( org . apache . accumulo . core . client . impl . thrift . thrift <identifiersep> security <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> sec <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 f <identifiersep> surrogate = - 1 ; } \n \t2 <comment> \n \t2 if ( debug <identifiersep> read ) { \n <ect>
\t3  <identifiersep> root <identifiersep> logger . warn ( <string_literal> ) ; \n \t3  <identifiersep> root <identifiersep> logger . error ( <string_literal> ) ; \n \t3  <identifiersep> logger . debug ( <string_literal> ) ; \n \t3  <identifiersep> logger . info ( <string_literal> ) ; \n <ect>
\t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t2 system . out . println ( <string_literal> + entry <identifiersep> to <identifiersep> decode <identifiersep> to ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , entry <identifiersep> to <identifiersep> encode , entry <identifiersep> to <identifiersep> decode <identifiersep> to ) ; \n \t2 system . out . println ( ) ; \n <ect>
\t6 result . add ( new game <identifiersep> info ( info , date ) ) ; } \n \t4 } catch ( null <identifiersep> pointer <identifiersep> exception npe ) { \n \t5 logger . error ( <string_literal> + world . to <identifiersep> string ( ) + <string_literal> + game <identifiersep> manifest . to <identifiersep> string ( ) , npe ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 field f = clazz . get <identifiersep> declared <identifiersep> field ( <string_literal> ) ; \n \t3 f . set <identifiersep> accessible ( true ) ; \n \t3 timer timer = ( timer ) f . get ( null ) ; \n \t3 timer . cancel ( ) ; \n <ect>
\t1 try { \n \t1 int height = image . get <identifiersep> height ( ) ; \n \t1 int width = image . get <identifiersep> width ( ) ; \n \t1 if ( height < = 1 || width < = 1 || height * width > max <identifiersep> pixels ) { \n <ect>
\t4 keyword <identifiersep> stream = new file <identifiersep> input <identifiersep> stream ( autocomplete <identifiersep> filename ) ; \n \t4 pig <identifiersep> completor . load <identifiersep> candidate <identifiersep> keywords ( keyword <identifiersep> stream , candidates ) ; } \n \t3 catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) \n \t3 { \n <ect>
\t1 @ override \n \t1 public void notify <identifiersep> monitors <identifiersep> of <identifiersep> removed <identifiersep> host ( long host <identifiersep> id , long cluster <identifiersep> id ) { \n \t2 for ( final pair < integer , listener > monitor :  <identifiersep> host <identifiersep> monitors ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + vm <identifiersep> id + <string_literal> ) ; \n \t3 return new console <identifiersep> access <identifiersep> authentication <identifiersep> answer ( cmd , false ) ; } \n \t2 host <identifiersep> vo host =  <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm . get <identifiersep> host <identifiersep> id ( ) ) ; \n \t2 if ( host == null ) { \n <ect>
\t3 ec <identifiersep> public <identifiersep> key key = ecdsa . get <identifiersep> public <identifiersep> key ( pub , ecdsa . curves . p256 ) ; \n \t3 if ( key == null ) \n \t4 throw new fs <identifiersep> parse <identifiersep> exception ( <string_literal> ) ; \n \t3 if ( ! key . equals ( peer <identifiersep> ecdsa <identifiersep> pub <identifiersep> key ) ) { \n <ect>
\t3 return null ; \n \t2 } catch ( exception e ) { \n \t3 err <identifiersep> msg = \n \t4 e . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) + <string_literal> + e . get <identifiersep> localized <identifiersep> message ( ) ; \n <ect>
\t3 if ( fail <identifiersep> reading <identifiersep> fields ) { \n \t4 throw new io <identifiersep> exception ( <string_literal> ) ; } \n \t3 fields = multi <identifiersep> fields . get <identifiersep> fields ( reader ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 final constructor < ? > cstr = clazz . get <identifiersep> declared <identifiersep> constructor ( param <identifiersep> classes ) ; \n \t3 return ( analyzer ) cstr . new <identifiersep> instance ( param <identifiersep> values ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception | instantiation <identifiersep> exception | invocation <identifiersep> target <identifiersep> exception | security <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t1 return masker . unmask ( password ) ; \n \t1 } catch ( mask <identifiersep> exception e ) { \n \t1 <comment> \n <ect>
\t4 if ( log <identifiersep> enabled ) log . info ( <string_literal> ) ; \n \t4 reflection <identifiersep> meta <identifiersep> method rmm = ( reflection <identifiersep> meta <identifiersep> method ) meta <identifiersep> method ; \n \t4 meta <identifiersep> method = rmm . get <identifiersep> cached <identifiersep> method ( ) ; } \n \t3 if ( meta <identifiersep> method instanceof cached <identifiersep> method ) { \n <ect>
\t5 catch ( interrupted <identifiersep> exception e ) { \n \t6 if ( ! this . alive ) { \n \t7 return ; \n \t6 } else { \n <ect>
\t5 return ; \n \t4 } else { \n \t5 log . error ( <string_literal> ) ; } \n \t3 } else { \n <ect>
\t3 try { \n \t4 logger . info ( <string_literal> , d ) ; \n \t4 d . delete <identifiersep> recursively ( ) ; \n \t3 } catch ( runtime <identifiersep> exception exc ) { \n <ect>
\t5 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> + ip <identifiersep> vo + <string_literal> + network ) ; } \n \t4 result = create <identifiersep> public <identifiersep> load <identifiersep> balancer ( x <identifiersep> id , name , description , src <identifiersep> port <identifiersep> start , def <identifiersep> port <identifiersep> start , ip <identifiersep> vo . get <identifiersep> id ( ) , protocol , algorithm , open <identifiersep> firewall , call <identifiersep> context . current ( ) , \n \t6 lb <identifiersep> protocol , for <identifiersep> display ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 key . cancel ( ) ; \n \t3 try { \n \t4 if ( channel != null ) { \n <ect>
\t6 mime <identifiersep> type = content <identifiersep> filter . strip <identifiersep> mime <identifiersep> type ( mime <identifiersep> type ) ; \n \t6 filter <identifiersep> mime <identifiersep> type type = content <identifiersep> filter . get <identifiersep> mime <identifiersep> type ( mime <identifiersep> type ) ; \n \t6 linked <identifiersep> list < download <identifiersep> request <identifiersep> status > list ; \n \t6 if ( type == null ) { \n <ect>
\t4 try { \n \t5 an <identifiersep> address = new inet <identifiersep> socket <identifiersep> address ( inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( config . get ( command ) . get <identifiersep> host ( ) ) , \n \t7 integer . parse <identifiersep> int ( config . get ( command ) . get <identifiersep> port ( ) ) ) ; \n \t4 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t5 for ( int j = 1 ; j < = i ; j ++ ) { \n \t6 value *= <number_literal> ; } \n \t5 return string . value <identifiersep> of ( value ) ; } } \n \t2 } catch ( number <identifiersep> format <identifiersep> exception ignored ) { \n <ect>
\t2 exchange out = repo . get ( context , exchange . get <identifiersep> exchange <identifiersep> id ( ) ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , out ) ; \n \t2 exchange exchange2 = new default <identifiersep> exchange ( context ) ; \n \t2 exchange2 . get <identifiersep> in ( ) . set <identifiersep> body ( <string_literal> ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public serial <identifiersep> message execute <identifiersep> refresh ( z <identifiersep> wave <identifiersep> node node , z <identifiersep> wave <identifiersep> alarm <identifiersep> sensor <identifiersep> command <identifiersep> class command <identifiersep> class , int endpoint <identifiersep> id , \n \t3 map < string , string > arguments ) { \n <ect>
\t3 if ( cluster <identifiersep> details . get ( <string_literal> ) != null ) { \n \t4 uri uri <identifiersep> from <identifiersep> cluster = new uri ( uri <identifiersep> utils . encode <identifiersep> uri <identifiersep> component ( cluster <identifiersep> details . get ( <string_literal> ) ) ) ; \n \t4 mor <identifiersep> cluster = context . get <identifiersep> host <identifiersep> mor <identifiersep> by <identifiersep> path ( url <identifiersep> decoder . decode ( uri <identifiersep> from <identifiersep> cluster . get <identifiersep> path ( ) , <string_literal> ) ) ; \n \t4 if ( mor <identifiersep> cluster == null || ! mor <identifiersep> cluster . get <identifiersep> type ( ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n <ect>
\t5 if ( last <identifiersep> snap <identifiersep> time . after ( vm <identifiersep> instance . get <identifiersep> update <identifiersep> time ( ) ) ) { \n \t6 run <identifiersep> snap = false ; \n \t6 s <identifiersep> logger . debug ( <string_literal> + volume <identifiersep> id + <string_literal> ) ; } } } } \n \t2 if ( volume . get <identifiersep> state ( ) == volume . state . destroy || volume . get <identifiersep> removed ( ) != null ) { \n <ect>
\t2 hive <identifiersep> conf . get <identifiersep> var ( conf , hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> execution <identifiersep> mode ) . equals ( <string_literal> ) \n \t2 && hive <identifiersep> conf . get <identifiersep> bool <identifiersep> var ( conf , hive <identifiersep> conf . conf <identifiersep> vars . llap <identifiersep> client <identifiersep> consistent <identifiersep> splits ) \n \t2 && use <identifiersep> cache <identifiersep> affinity ; \n \t1 split <identifiersep> location <identifiersep> provider split <identifiersep> location <identifiersep> provider ; \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , <string_literal> , map . get ( <string_literal> ) ) ; \n \t2 value = map . get ( <string_literal> ) ; \n \t2 assert <identifiersep> true ( <string_literal> , value instanceof list ) ; \n \t2 list list = ( list ) value ; \n <ect>
\t1 if ( data <identifiersep> output != null ) { \n \t2 try { \n \t2 data <identifiersep> output . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 val campaign <identifiersep> link = crm <identifiersep> link <identifiersep> generator . generate <identifiersep> campaign <identifiersep> preview <identifiersep> full <identifiersep> link ( context . site <identifiersep> url , campaign . id ) \n \t5 val link = format <identifiersep> utils . new <identifiersep> a ( campaign <identifiersep> link , campaign . campaignname ) \n \t5 return format <identifiersep> utils . new <identifiersep> link ( img , link ) . write ( ) } \n \t3 } catch ( e : exception ) { \n <ect>
\t3 return convert ( fatal <identifiersep> error <identifiersep> response , scope ) ; } \n \t2 request <identifiersep> compliance . make <identifiersep> request <identifiersep> compliant ( request ) ; \n \t2 request . add <identifiersep> header ( <string_literal> , via ) ; \n \t2 if ( ! cacheable <identifiersep> request <identifiersep> policy . is <identifiersep> servable <identifiersep> from <identifiersep> cache ( request ) ) { \n <ect>
\t9 } catch ( io <identifiersep> exception e ) { \n \t10 log . warn ( <string_literal> , ip , e . get <identifiersep> message ( ) ) ; \n \t10 continue ; } } \n \t8 table . add ( ip ) ; } \n <ect>
\t2 final big <identifiersep> integer interval <identifiersep> bi ; \n \t2 try { \n \t3 interval <identifiersep> bi = diff <identifiersep> bi . divide ( splits <identifiersep> bi ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2  <identifiersep> name = name ; \n \t2  <identifiersep> scripts <identifiersep> dir = ( string ) params . get ( <string_literal> ) ; \n \t2 if (  <identifiersep> scripts <identifiersep> dir == null ) { \n <ect>
\t3 case task <identifiersep> status <identifiersep> update <identifiersep> event : \n \t3 <comment> \n \t3 break ; \n \t3 default : \n <ect>
\t5 if ( mapping . contains <identifiersep> key ( tc . key ( ) ) ) { \n \t6 break ; } \n \t6 if ( string <identifiersep> utils . is <identifiersep> empty ( tc . key ( ) ) ) { \n <ect>
\t2 for ( object compound <identifiersep> key : batch <identifiersep> ids ) \n \t2 { \n \t3 if ( ! ( compound <identifiersep> key instanceof data <identifiersep> map ) ) \n \t3 { \n <ect>
\t1 cfg . set <identifiersep> property ( property . table <identifiersep> file <identifiersep> max , <string_literal> ) ; \n \t1 cfg . set <identifiersep> property ( property . table <identifiersep> durability , <string_literal> ) ; } \n @ test \n public void test ( ) throws exception { \n <ect>
\t1 } catch ( throwable t ) { \n \t1 set <identifiersep> open ( false ) ; \n \t1 channel <identifiersep> counter . set <identifiersep> unhealthy ( 1 ) ; \n \t1 startup <identifiersep> error = t ; \n <ect>
\t2 this . exception <identifiersep> strategy = exception <identifiersep> strategy ; } \n \t1 @ override \n \t1 public void handle <identifiersep> error ( throwable t ) { \n <ect>
\t3 new <identifiersep> template . set <identifiersep> name ( dest <identifiersep> vdi <identifiersep> uuid ) ; \n \t3 result = true ; \n \t3 return new copy <identifiersep> cmd <identifiersep> answer ( new <identifiersep> template ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t3 try { \n \t4 log . info ( <string_literal> , endpoint ) ; \n \t4 on <identifiersep> disconnected ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 names = mbean <identifiersep> server . query <identifiersep> names ( on , null ) ; \n \t2 assert <identifiersep> equals ( services , names . size ( ) ) ; \n \t2 <comment> \n <ect>
\t2 else { \n \t2 digraph <identifiersep> state = dig <identifiersep> state <identifiersep> start ; \n \t2 return digraph <identifiersep> result . bad ; } \n \t1 case dig <identifiersep> state <identifiersep> dig <identifiersep> two : \n <ect>
\t1 job . set <identifiersep> job <identifiersep> name ( jaxb <identifiersep> safe <identifiersep> job . job <identifiersep> name ) ; \n \t1 job . set <identifiersep> state ( jaxb <identifiersep> safe <identifiersep> job . state ) ; \n \t1 } catch ( throwable t ) { \n \t1 <comment> \n <ect>
\t4 } else { \n \t5 final property <identifiersep> map properties = property <identifiersep> map . database <identifiersep> type <identifiersep> to <identifiersep> java <identifiersep> type ( security <identifiersep> context , rel <identifiersep> type , received <identifiersep> relationship <identifiersep> data . get <identifiersep> properties ( ) ) ; \n \t5 return app . create ( target <identifiersep> start <identifiersep> node , target <identifiersep> end <identifiersep> node , rel <identifiersep> type , properties ) ; } \n \t3 } else { \n <ect>
\t4 protobuf <identifiersep> util . to <identifiersep> string ( status ) ) ; \n \t3 replication <identifiersep> table <identifiersep> util . update <identifiersep> files ( tablet <identifiersep> server , extent , log <identifiersep> entry . filename , status ) ; } } \n \t1 } catch ( throwable t ) { \n \t2 if ( table <identifiersep> configuration . get <identifiersep> boolean ( property . table <identifiersep> failures <identifiersep> ignore ) ) { \n <ect>
\t6 log . info ( <string_literal> + exec ) ; \n \t6 log . info ( <string_literal> + gg <identifiersep> home ) ; \n \t6 log . info ( <string_literal> + grid <identifiersep> name ) ; \n \t6 log . info ( <string_literal> + spring <identifiersep> ctx ) ; \n <ect>
\t5 <comment> \n \t5 logger . error ( this , <string_literal> + neg <identifiersep> type + <string_literal> + pn . user <identifiersep> to <identifiersep> string ( ) ) ; \n \t5 return ; } \n \t4 logger . error ( this , <string_literal> + pn . get <identifiersep> peer ( ) ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void shutdown ( i <identifiersep> record <identifiersep> processor <identifiersep> checkpointer checkpointer , shutdown <identifiersep> reason reason ) { \n <ect>
\t2 try { \n \t3 string port <identifiersep> str = m <identifiersep> config . get ( attr <identifiersep> port ) ; \n \t3 return integer . value <identifiersep> of ( port <identifiersep> str ) . int <identifiersep> value ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 protected < v > void listener <identifiersep> exception ( bi <identifiersep> consumer < v , throwable > listener , exception exception ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 <comment> \n \t2 string server <identifiersep> <number_literal> = internal <identifiersep> cluster ( ) . start <identifiersep> node ( ) ; \n \t2 <comment> \n <ect>
\t2 sb . append ( <string_literal> ) . append ( tp ) . append ( <string_literal> ) \n \t3 . append ( consumer . committed ( tp ) . offset ( ) ) \n \t3 . append ( <string_literal> ) ; \n \t2 } catch ( null <identifiersep> pointer <identifiersep> exception npe ) { \n <ect>
\t2 } catch ( malformed <identifiersep> object <identifiersep> name <identifiersep> exception e ) { \n \t3 try { \n \t4 return new object <identifiersep> name ( domain , <string_literal> , object <identifiersep> name . quote ( name ) ) ; \n \t3 } catch ( malformed <identifiersep> object <identifiersep> name <identifiersep> exception e1 ) { \n <ect>
\t1 else : \n \t1 print <string_literal> \n \t1 args . exit <identifiersep> code = <number_literal> \n def refresh <identifiersep> stack <identifiersep> hash <identifiersep> action ( ) : \n <ect>
<comment> \n \t6 if ( target . equals ( blocks . get ( 0 ) . get <identifiersep> column <identifiersep> as ( static <identifiersep> buffer . static <identifiersep> factory ) ) ) { \n \t7 consistent <identifiersep> key <identifiersep> id <identifiersep> block idblock = new consistent <identifiersep> key <identifiersep> id <identifiersep> block ( next <identifiersep> start , block <identifiersep> size , unique <identifiersep> id <identifiersep> bit <identifiersep> width , unique <identifiersep> pid ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 . get <identifiersep> service <identifiersep> reference ( notification <identifiersep> service . class . get <identifiersep> name ( ) ) ; \n \t3 notification <identifiersep> service = ( notification <identifiersep> service ) bundle <identifiersep> context \n \t4 . get <identifiersep> service ( notif <identifiersep> reference ) ; \n \t3 new notification <identifiersep> manager ( ) . init ( ) ; \n <ect>
\t3 return ; } \n \t2 try { \n \t3 blob <identifiersep> store . delete <identifiersep> blob ( blob <identifiersep> key ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 try { \n \t2 log . debug ( <string_literal> , bucket <identifiersep> path ) ; \n \t2 ( ( distributed <identifiersep> file <identifiersep> system ) file <identifiersep> system ) . recover <identifiersep> lease ( new path ( bucket <identifiersep> path ) ) ; \n \t1 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t1 creates a temporary hive table for the service checks \n \t1 <string_literal> <string_literal> <ect>
\t8 null ) ; } \n \t2 } catch ( exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; } } \n \t1 public void open <identifiersep> system <identifiersep> store ( store <identifiersep> definition store <identifiersep> def ) { \n <ect>
\t2 public void subscription <identifiersep> moved ( subscription <identifiersep> moved <identifiersep> event evt ) \n \t2 { \n \t3 synchronized ( this ) \n \t3 { \n <ect>
<comment> \n \t1 public void initialize ( ) \n \t1 { \n <ect>
\t4 log . error ( <string_literal> + e , e ) ; } } \n \t2 test <identifiersep> step <identifiersep> count ++ ; } \n \t1 @ override \n \t1 public void after <identifiersep> run ( test <identifiersep> case <identifiersep> runner test <identifiersep> runner , test <identifiersep> case <identifiersep> run <identifiersep> context run <identifiersep> context ) { \n <ect>
\t1 try ( volume <identifiersep> metadata <identifiersep> manager volume <identifiersep> manager = new volume <identifiersep> metadata <identifiersep> manager ( ) ) { \n \t1 lvm <identifiersep> volume <identifiersep> info volume <identifiersep> info = volume <identifiersep> manager . get <identifiersep> volume <identifiersep> info ( volume <identifiersep> id ) ; \n \t1 if ( volume <identifiersep> info == null ) { \n \t2 volume <identifiersep> manager . abort ( ) ; \n <ect>
\t2 } catch ( runtime <identifiersep> exception re ) { \n \t3 log . error ( <string_literal> , re ) ; \n \t3 throw re ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + zone <identifiersep> id ) ; \n \t3 return false ; } \n \t2 pod pod =  <identifiersep> pod <identifiersep> dao . find <identifiersep> by <identifiersep> id ( pod <identifiersep> id ) ; \n \t2 if ( pod != null && grouping . allocation <identifiersep> state . disabled == pod . get <identifiersep> allocation <identifiersep> state ( ) ) { \n <ect>
\t4 case <string_literal> : \n \t5  <identifiersep> filter <identifiersep> key . add ( filter <identifiersep> value . to <identifiersep> string ( ) ) ; \n \t5 break ; \n \t4 default : \n <ect>
\t1 { \n \t2 string resource <identifiersep> string = do <identifiersep> get <identifiersep> i18string ( key , locale ) ; \n \t2 if ( resource <identifiersep> string == null ) \n \t2 { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t7  <identifiersep> log . warn ( <string_literal> + addresses . to <identifiersep> string ( ip ) + <string_literal> + count + <string_literal> + con ) ; \n \t5 } else { \n \t6 count = 1 ; \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 bindable <identifiersep> button bind <identifiersep> button = register <identifiersep> bind <identifiersep> button ( bind <identifiersep> uri , info . description ( ) , ( bind <identifiersep> button <identifiersep> event ) register <identifiersep> bind <identifiersep> class . new <identifiersep> instance ( ) ) ; \n \t5 bind <identifiersep> button . set <identifiersep> mode ( info . mode ( ) ) ; \n \t5 bind <identifiersep> button . set <identifiersep> repeating ( info . repeating ( ) ) ; \n \t5 binds <identifiersep> configuration . get <identifiersep> binds ( bind <identifiersep> uri ) . stream ( ) . filter ( input - > input != null ) . for <identifiersep> each ( input - > link <identifiersep> bind <identifiersep> button <identifiersep> to <identifiersep> input ( input , bind <identifiersep> uri ) ) ; \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t4 ensure <identifiersep> green ( time <identifiersep> value . time <identifiersep> value <identifiersep> minutes ( <number_literal> ) ) ; } \n \t3 logger . info ( <string_literal> ) ; \n \t3 indexer . stop ( ) ; \n <ect>
\t2 double segments <identifiersep> per <identifiersep> tier = index <identifiersep> settings . get <identifiersep> value ( index <identifiersep> merge <identifiersep> policy <identifiersep> segments <identifiersep> per <identifiersep> tier <identifiersep> setting ) ; \n \t2 double reclaim <identifiersep> deletes <identifiersep> weight = index <identifiersep> settings . get <identifiersep> value ( index <identifiersep> merge <identifiersep> policy <identifiersep> reclaim <identifiersep> deletes <identifiersep> weight <identifiersep> setting ) ; \n \t2 this . merges <identifiersep> enabled = index <identifiersep> settings . get <identifiersep> settings ( ) . get <identifiersep> as <identifiersep> boolean ( index <identifiersep> merge <identifiersep> enabled , true ) ; \n \t2 if ( merges <identifiersep> enabled == false ) { \n <ect>
\t3 if ( this . rotation <identifiersep> policy == null ) { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; \n \t3 } else if ( this . rotation <identifiersep> policy instanceof file <identifiersep> size <identifiersep> rotation <identifiersep> policy ) { \n \t4 long rotation <identifiersep> bytes = ( ( file <identifiersep> size <identifiersep> rotation <identifiersep> policy ) rotation <identifiersep> policy ) . get <identifiersep> max <identifiersep> bytes ( ) ; \n <ect>
\t2 cluster <identifiersep> state zk <identifiersep> client = batch <identifiersep> common . get <identifiersep> zk <identifiersep> client ( conf ) ; \n \t2 meta <identifiersep> client = new meta <identifiersep> simple <identifiersep> client ( meta <identifiersep> spout <identifiersep> config , zk <identifiersep> client , task <identifiersep> index , \n \t4 task <identifiersep> parallel ) ; \n \t2 meta <identifiersep> client . init ( ) ; \n <ect>
\t1 file <identifiersep> predicate all = context . file <identifiersep> system ( ) . predicates ( ) . all ( ) ; \n \t1 iterable < input <identifiersep> file > files = context . file <identifiersep> system ( ) . input <identifiersep> files ( all ) ; \n \t1 double value = 0 . 0001 ; \n \t1 for ( input <identifiersep> file file : files ) { \n <ect>
\t5 string lang <identifiersep> field = field + <string_literal> + meta . get <identifiersep> language ( ) ; \n \t5 doc . add <identifiersep> field ( lang <identifiersep> field , value ) ; } } \n \t2 } catch ( exception e ) { \n \t3 log . error ( e . get <identifiersep> message ( ) , e ) ; } \n <ect>
\t2 if ( cursor != null ) { \n \t3 cursor . close ( ) ; } \n \t2 await <identifiersep> stopped ( ) ; \n <ect>
\t3 if ( count == events . size ( ) ) { \n \t4 logger . debug ( <string_literal> , authentication . get <identifiersep> principal ( ) , loc ) ; \n \t4 return lowest <identifiersep> risk <identifiersep> score ; } \n \t3 return get <identifiersep> final <identifiersep> averaged <identifiersep> score ( count , events . size ( ) ) ; } \n <ect>
\t4 logger . warn ( <string_literal> , service ) ; \n \t4 return optional . empty ( ) ; } \n \t3 final rsa <identifiersep> json <identifiersep> web <identifiersep> key web <identifiersep> key = get <identifiersep> json <identifiersep> signing <identifiersep> web <identifiersep> key <identifiersep> from <identifiersep> jwks ( json <identifiersep> web <identifiersep> key <identifiersep> set ) ; \n \t3 if ( web <identifiersep> key . get <identifiersep> public <identifiersep> key ( ) == null ) { \n <ect>
\t3 string method <identifiersep> name ) { \n \t2 try { \n \t3 class < ? > wrapped <identifiersep> connection = class . for <identifiersep> name ( class <identifiersep> name ) ; \n \t3 method unwrap = wrapped <identifiersep> connection . get <identifiersep> method ( method <identifiersep> name , ( class [ ] ) null ) ; \n <ect>
\t2 routing <identifiersep> table initial <identifiersep> routing <identifiersep> table = routing <identifiersep> table . builder ( ) \n \t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . build ( ) ; \n \t2 cluster <identifiersep> state cluster <identifiersep> state = cluster <identifiersep> state . builder ( org . elasticsearch . cluster . cluster <identifiersep> name . cluster <identifiersep> name <identifiersep> setting . get <identifiersep> default ( settings . empty ) ) . meta <identifiersep> data ( meta <identifiersep> data ) . routing <identifiersep> table ( initial <identifiersep> routing <identifiersep> table ) . build ( ) ; \n <ect>
\t1 log . info ( <string_literal> + arrays . to <identifiersep> string ( small <identifiersep> table <identifiersep> indices ) ) ; \n \t1 small <identifiersep> table <identifiersep> indices <identifiersep> size = small <identifiersep> table <identifiersep> indices . length ; \n \t1 } else { \n \t1 small <identifiersep> table <identifiersep> indices = null ; \n <ect>
\t3 return false ; } \n \t2 <comment> \n \t2 string provider =  <identifiersep> ntwk <identifiersep> srvc <identifiersep> dao . get <identifiersep> provider <identifiersep> for <identifiersep> service <identifiersep> in <identifiersep> network ( network <identifiersep> id , service ) ; \n \t2 if ( ! is <identifiersep> provider <identifiersep> enabled <identifiersep> in <identifiersep> physical <identifiersep> network ( physical <identifiersep> network <identifiersep> id , provider ) ) { \n <ect>
\t1 val drm <identifiersep> interactions = drm <identifiersep> wrap [ int ] ( indexed <identifiersep> interactions ) \n \t1 new indexed <identifiersep> dataset <identifiersep> spark ( drm <identifiersep> interactions , row <identifiersep> id <identifiersep> dictionary , column <identifiersep> id <identifiersep> dictionary ) \n \t1 } catch { \n \t1 case cce : class <identifiersep> cast <identifiersep> exception = > { \n <ect>
\t4 { \n \t5 hint = compute <identifiersep> next <identifiersep> internal ( ) ; } \n \t4 catch ( eof <identifiersep> exception e ) \n \t4 { \n <ect>
\t2 <comment> \n \t2 for ( sid = 0 ; sid < <number_literal> ; sid ++ ) { \n \t3 peer = new quorum <identifiersep> peer ( peers , tmpdir [ sid ] , tmpdir [ sid ] , \n <number_literal> port [ sid ] , <number_literal> , sid , <number_literal> , <number_literal> , <number_literal> ) ; \n <ect>
\t8 object child <identifiersep> key = value <identifiersep> for <identifiersep> basic <identifiersep> type ( entry . get <identifiersep> key ( ) , meta . key <identifiersep> meta <identifiersep> data . type ) ; \n \t8 object child <identifiersep> value = value <identifiersep> for <identifiersep> basic <identifiersep> type ( entry . get <identifiersep> value ( ) , meta . value <identifiersep> meta <identifiersep> data . type ) ; \n \t8 child <identifiersep> entity <identifiersep> map . put ( child <identifiersep> key , child <identifiersep> value ) ; } } } \n \t5 else { \n <ect>
\t1  <identifiersep> notify ( <string_literal> , api . message ) \n \t1 log . error ( <string_literal> + api . message ) \n \t1 main . show <identifiersep> message <identifiersep> dialog ( this , <string_literal> + api . message ) \n \t1 case <string_literal> = > \n <ect>
\t1 counter <identifiersep> group = new counter <identifiersep> group ( ) ; \n \t1 lifecycle <identifiersep> state = lifecycle <identifiersep> state . idle ; } \n @ override \n public void start ( ) { \n <ect>
\t2 return results . get ( 0 ) ; } } \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 throw e ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 public long delay ( ) { \n \t2 string ret = <string_literal> ; \n \t2 final bean <identifiersep> shell <identifiersep> interpreter bsh <identifiersep> interpreter = get <identifiersep> bean <identifiersep> shell <identifiersep> interpreter ( ) ; \n \t2 if ( bsh <identifiersep> interpreter == null ) { \n <ect>
\t4 <comment> \n \t4 try { \n \t5 consumer . close ( ) ; } \n \t4 catch ( throwable t ) { \n <ect>
\t2 final end <identifiersep> state end <identifiersep> state = new end <identifiersep> state ( flow , id ) ; \n \t2 if ( view <identifiersep> factory != null ) { \n \t3 final action final <identifiersep> response <identifiersep> action = new view <identifiersep> factory <identifiersep> action <identifiersep> adapter ( view <identifiersep> factory ) ; \n \t3 end <identifiersep> state . set <identifiersep> final <identifiersep> response <identifiersep> action ( final <identifiersep> response <identifiersep> action ) ; \n <ect>
\t5 log . info ( <string_literal> , fetched <identifiersep> size ( t , tables ) ) ; } \n \t4 catch ( exception e ) { \n \t5 log . error ( <string_literal> , e ) ; } } \n \t3 else \n <ect>
\t2 if ( pig <identifiersep> processor . sample <identifiersep> map != null ) { \n \t3 <comment> \n \t3 quantile <identifiersep> map = pig <identifiersep> processor . sample <identifiersep> map ; \n \t2 } else { \n <ect>
\t3 add <identifiersep> app <identifiersep> config <identifiersep> to <identifiersep> category ( app <identifiersep> config ) ; } \n \t2 <comment> \n \t2 set < string > used <identifiersep> nodes = find <identifiersep> reachable <identifiersep> nodes ( m <identifiersep> root <identifiersep> node , new hash <identifiersep> set < string > ( ) ) ; \n \t2 if ( used <identifiersep> nodes . size ( ) < m <identifiersep> nodes . size ( ) ) { \n <ect>
\t1 public void swap <identifiersep> seats ( final string session <identifiersep> id , final uuid room <identifiersep> id , final uuid table <identifiersep> id , final int seat <identifiersep> num1 , final int seat <identifiersep> num2 ) throws mage <identifiersep> exception { \n \t2 execute ( <string_literal> , session <identifiersep> id , ( ) - > { \n \t3 optional < session > session = session <identifiersep> manager . instance . get <identifiersep> session ( session <identifiersep> id ) ; \n \t3 if ( ! session . is <identifiersep> present ( ) ) { \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> + args <identifiersep> buf . to <identifiersep> string ( ) + <string_literal> ) ; } \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t6 right <identifiersep> now . set ( calendar . hour <identifiersep> of <identifiersep> day , hour ) ; \n \t6 right <identifiersep> now . set ( calendar . minute , minute ) ; \n \t6 state = new date <identifiersep> time <identifiersep> type ( right <identifiersep> now ) ; \n \t5 } else { \n <ect>
\t3 if ( ! extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . mkdir ( ) ) { \n \t4 logger . error ( this , <string_literal> + extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . get <identifiersep> path ( ) ) ; \n \t4 return - 1 ; } } \n \t2 if ( ! extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . is <identifiersep> directory ( ) ) { \n <ect>
\t2 if ( job . wait <identifiersep> for <identifiersep> completion ( true ) ) \n \t3 return 0 ; \n \t2 if ( get <identifiersep> error <identifiersep> sleep <identifiersep> time ( ) < 1 ) \n \t3 return 1 ; \n <ect>
<comment> } \n \t2 } else { \n <ect>
\t1 public void on <identifiersep> mode ( irc <identifiersep> user user , string passive <identifiersep> nick , string mode ) { \n \t2 log . info ( <string_literal> + server + <string_literal> + user + <string_literal> + passive <identifiersep> nick + <string_literal> + mode ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> nick ( irc <identifiersep> user user , string new <identifiersep> nick ) { \n <ect>
\t3 final long count = index <identifiersep> all ( indexer , content <identifiersep> service <identifiersep> factory . get <identifiersep> instance ( ) . get <identifiersep> item <identifiersep> service ( ) , context , dso ) ; \n \t3 final long seconds = ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time <identifiersep> millis ) / <number_literal> ; \n \t3 log . info ( <string_literal> + count + <string_literal> + ( count > 1 ? <string_literal> : <string_literal> ) + <string_literal> + seconds + <string_literal> ) ; \n \t2 } else { \n <ect>
\t3 { \n \t4 server <identifiersep> transaction . send <identifiersep> response ( response ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t1 final security <identifiersep> token <identifiersep> aws <identifiersep> credentials <identifiersep> provider role <identifiersep> credential <identifiersep> provider = \n \t3 security <identifiersep> token <identifiersep> aws <identifiersep> credentials <identifiersep> provider . for <identifiersep> user <identifiersep> or <identifiersep> role ( accounts . lookup <identifiersep> principal <identifiersep> by <identifiersep> role <identifiersep> id ( billing <identifiersep> role . get <identifiersep> role <identifiersep> id ( ) ) ) ; \n \t1 return euca <identifiersep> s3client <identifiersep> factory . get <identifiersep> euca <identifiersep> s3client ( role <identifiersep> credential <identifiersep> provider ) ; \n \t1 } catch ( auth <identifiersep> exception ex ) { \n <ect>
\t2 public no <identifiersep> maven <identifiersep> local <identifiersep> repository <identifiersep> resource <identifiersep> finder ( cannot <identifiersep> locate <identifiersep> local <identifiersep> maven <identifiersep> repository <identifiersep> exception ex ) { \n \t3 this . ex = ex ; } \n \t2 public locally <identifiersep> available <identifiersep> resource <identifiersep> candidates find <identifiersep> candidates ( module <identifiersep> component <identifiersep> artifact <identifiersep> metadata criterion ) { \n \t3 if ( ! logged ) { \n <ect>
\t4 final string key = entry . get <identifiersep> key ( ) ; \n \t4 long <identifiersep> value <identifiersep> holder value = entry . get <identifiersep> value ( ) ; \n \t4 statistics . put ( key , value . get <identifiersep> value ( ) ) ; } \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t5 { \n \t6 populator . populate ( def , def . get <identifiersep> url ( ) ) ; } \n \t5 catch ( validation <identifiersep> exception ve ) \n \t5 { \n <ect>
\t2 if ( jwt <identifiersep> token . verify ( verifier ) ) { \n \t3 valid = true ; \n \t3 log . debug ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t2 kylin <identifiersep> config kylin <identifiersep> config = kylin <identifiersep> config . get <identifiersep> instance <identifiersep> from <identifiersep> env ( ) ; \n \t2 if ( ! kylin <identifiersep> config . is <identifiersep> push <identifiersep> down <identifiersep> enabled ( ) ) \n \t3 return null ; \n \t2 if ( is <identifiersep> select ) { \n <ect>
\t2 log . info ( <string_literal> , source . to <identifiersep> string ( ) ) ; \n \t1 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n \t2 throw ex ; \n \t1 } catch ( exception ex ) { \n <ect>
@ to <identifiersep> string \n public abstract class base <identifiersep> one <identifiersep> time <identifiersep> token <identifiersep> repository implements one <identifiersep> time <identifiersep> token <identifiersep> repository { \n \t1 @ override \n \t1 public final void clean ( ) { \n <ect>
\t6 return null ; } } } \n \t3 ssh <identifiersep> connection = new connection ( agent <identifiersep> ip , <number_literal> ) ; \n \t3 ssh <identifiersep> connection . connect ( null , <number_literal> , <number_literal> ) ; \n \t3 if ( ! ssh <identifiersep> connection . authenticate <identifiersep> with <identifiersep> password ( username , password ) ) { \n <ect>
\t3 if ( exception != null ) { \n \t4 response . writer . println ( <string_literal> ) \n \t4 return } \n <ect>
\t1 if ( null != connect <identifiersep> string ) { \n \t2 <comment> \n \t2 log . warn ( <string_literal> ) ; \n \t2 log . warn ( <string_literal> ) ; \n <ect>
\t3 <comment> \n \t3 task . initialize ( task <identifiersep> definition ) ; \n \t3 return task ; } \n \t2 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception cnfe ) { \n <ect>
\t5 pstmt . set <identifiersep> string ( <number_literal> , private <identifiersep> ip ) ; \n \t5 rs = pstmt . execute <identifiersep> query ( ) ; \n \t5 if ( ! rs . next ( ) ) { \n \t6 <comment> \n <ect>
\t2 class <identifiersep> writer cw = new class <identifiersep> writer ( 0 ) ; \n \t2 def . accept ( cw ) ; \n \t2 byte [ ] bytes = cw . to <identifiersep> byte <identifiersep> array ( ) ; \n \t2 if ( debug <identifiersep> dir != null ) { \n <ect>
\t3 try { \n \t4 jdk <identifiersep> callable <identifiersep> job <identifiersep> command command = new jdk <identifiersep> callable <identifiersep> job <identifiersep> command ( this ) ; \n \t4 runner . execute ( command ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 throw ns <identifiersep> forward <identifiersep> exception .  <identifiersep> runtime <identifiersep> exception <identifiersep> for <identifiersep> throwable ( e1 . get <identifiersep> cause ( ) ) ; } \n \t2 catch ( execution <identifiersep> exception e1 ) { \n \t3 throw ns <identifiersep> forward <identifiersep> exception .  <identifiersep> runtime <identifiersep> exception <identifiersep> for <identifiersep> throwable ( e1 . get <identifiersep> cause ( ) ) ; } \n \t2 catch ( cancellation <identifiersep> exception e ) { \n <ect>
\t2 if ( is <identifiersep> complete <identifiersep> signal <identifiersep> rejected <identifiersep> execution <identifiersep> exception ( throwable ) ) { \n \t3 logger . debug ( <string_literal> , \n \t6 throwable ) ; \n \t2 } else { \n <ect>
\t3 ! v1 . is <identifiersep> success ( ) ) ; \n \t2 <comment> \n \t2 peer = new quorum <identifiersep> peer ( peers , tmpdir [ sid ] , tmpdir [ sid ] , \n \t4 port [ sid ] , <number_literal> , sid , <number_literal> , <number_literal> , <number_literal> ) ; \n <ect>
\t2 public void subscription <identifiersep> resolved ( subscription <identifiersep> event evt ) \n \t2 { \n \t3 synchronized ( this ) \n \t3 { \n <ect>
\t6 convert <identifiersep> history <identifiersep> record <identifiersep> to <identifiersep> message <identifiersep> event ( recs . next ( ) , \n \t7 item ) ) ; } } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t3 if ( ois != null ) { \n \t4 try { \n \t5 ois . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 user <identifiersep> info info = new user <identifiersep> info ( ) ; \n \t2 user <identifiersep> credentials <identifiersep> dao credential <identifiersep> dao = new user <identifiersep> credentials <identifiersep> dao ( ) ; \n \t2 user <identifiersep> credentials cloud <identifiersep> keys = credential <identifiersep> dao . get <identifiersep> by <identifiersep> access <identifiersep> key ( access <identifiersep> key ) ; \n \t2 if ( null == cloud <identifiersep> keys ) { \n <ect>
\t1 if ( logs . is <identifiersep> extrrreeeme ( ) ) { \n \t2 for ( final map . entry < string , channel <identifiersep> handler > e : pipeline . to <identifiersep> map ( ) . entry <identifiersep> set ( ) ) { \n \t2 event <identifiersep> record . here ( this . get <identifiersep> class ( ) , event <identifiersep> type . pipeline <identifiersep> handler , e . get <identifiersep> key ( ) , e . get <identifiersep> value ( ) . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) . trace ( ) ; } } \n \t1 } catch ( final exception e ) { \n <ect>
\t1 shim <identifiersep> loader . get <identifiersep> hadoop <identifiersep> shims ( ) . get <identifiersep> merged <identifiersep> credentials ( job <identifiersep> conf ) ; \n \t1 this . work = utilities . get <identifiersep> map <identifiersep> work ( job <identifiersep> conf ) ; \n \t1 this . split <identifiersep> location <identifiersep> provider = \n \t2 utils . get <identifiersep> split <identifiersep> location <identifiersep> provider ( conf , work . get <identifiersep> cache <identifiersep> affinity ( ) , log ) ; \n <ect>
\t1 long value <identifiersep> offset = write <identifiersep> buffers . get <identifiersep> write <identifiersep> point ( ) ; \n \t1 kv . write <identifiersep> value ( write <identifiersep> buffers ) ; \n \t1 long tail <identifiersep> offset = write <identifiersep> buffers . get <identifiersep> write <identifiersep> point ( ) ; \n \t1 write <identifiersep> buffers . write <identifiersep> v <identifiersep> long ( tail <identifiersep> offset - value <identifiersep> offset ) ; \n <ect>
\t2 <comment> \n \t2 if ( new <identifiersep> rsrcs != null ) \n \t3 ldr <identifiersep> rsrcs . put <identifiersep> all ( new <identifiersep> rsrcs ) ; \n <ect>
\t2 if ( ticket <identifiersep> state . get <identifiersep> count <identifiersep> of <identifiersep> uses ( ) == 0 && current <identifiersep> time . is <identifiersep> before ( kill <identifiersep> time ) ) { \n \t3 logger . debug ( <string_literal> + <string_literal> ) ; \n \t3 return super . is <identifiersep> expired ( ticket <identifiersep> state ) ; } \n \t2 if ( current <identifiersep> time . is <identifiersep> after ( kill <identifiersep> time ) ) { \n <ect>
\t3 http <identifiersep> util . execute <identifiersep> url ( <string_literal> , url , url <identifiersep> content , <string_literal> , timeout ) ; \n \t3 logger . trace ( <string_literal> , url ) ; \n \t3 logger . trace ( <string_literal> , pms <identifiersep> socket <identifiersep> id , pms <identifiersep> ip ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 item item = container . add <identifiersep> item ( role ) ; \n \t5 item . get <identifiersep> item <identifiersep> property ( caption ) . set <identifiersep> value ( role . get <identifiersep> display <identifiersep> name ( m <identifiersep> cms , a <identifiersep> cms <identifiersep> ui . get ( ) . get <identifiersep> locale ( ) ) ) ; } } \n \t3 return container ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t5 latch . count <identifiersep> down ( ) ; } } \n \t3 try { \n \t4 latch . await ( this . timeout , time <identifiersep> unit . milliseconds ) ; \n <ect>
\t5 directory <identifiersep> lock . unlock ( ) ; } \n \t3 } else { \n \t4 throw throwables . propagate ( new store <identifiersep> exception ( <string_literal> + lock <identifiersep> timeout <identifiersep> seconds + <string_literal> ) ) ; } \n \t2 } catch ( final interrupted <identifiersep> exception e ) { \n <ect>
\t1 shutdown <identifiersep> scheduler ( ) ; \n \t1 try { \n \t1 delegate . on <identifiersep> stop ( ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t6 vm <identifiersep> group . set <identifiersep> state ( auto <identifiersep> scale <identifiersep> vm <identifiersep> group . state <identifiersep> enabled ) ; \n \t6  <identifiersep> auto <identifiersep> scale <identifiersep> vm <identifiersep> group <identifiersep> dao . persist ( vm <identifiersep> group ) ; \n \t6 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> groupid + <string_literal> ) ; } \n \t4 } ) ; } \n <ect>
\t4 url = feed <identifiersep> uri . resolve ( uri ) . to <identifiersep> string ( ) ; } \n \t3 object . put ( <string_literal> , url ) ; } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t2 this . connection <identifiersep> key = uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ; \n \t2 sync . add <identifiersep> socket ( this ) ; } \n \t1 @ on <identifiersep> web <identifiersep> socket <identifiersep> message \n \t1 public void on <identifiersep> message ( string message ) { \n <ect>
\t3 if ( found != null ) { \n \t4 log . debug ( <string_literal> , found <identifiersep> name ) ; \n \t4 factory = found ; } } \n \t2 if ( factory != null ) { \n <ect>
\t1 try { \n \t1 host . handle <identifiersep> event ( new host <identifiersep> healthy <identifiersep> heartbeat <identifiersep> event ( hostname , system . current <identifiersep> time <identifiersep> millis ( ) , \n \t2 host <identifiersep> status <identifiersep> report . get <identifiersep> agent <identifiersep> env ( ) , host <identifiersep> status <identifiersep> report . get <identifiersep> mounts ( ) ) ) ; \n \t1 } catch ( invalid <identifiersep> state <identifiersep> transition <identifiersep> exception ex ) { \n <ect>
\t5 set < tag <identifiersep> set > sets = e . get <identifiersep> value ( ) ; \n \t5 int count = sets . size ( ) ; \n \t5 if ( count >= <number_literal> ) { \n \t6 if (  <identifiersep> log . should <identifiersep> info ( ) ) \n <ect>
\t4 } else { \n \t5 if ( tasks <identifiersep> in <identifiersep> progress . has <identifiersep> task ( id ) ) { \n \t6 logger . warn ( <string_literal> , id , allocation <identifiersep> id ) ; \n \t5 } else { \n <ect>
\t1 test <identifiersep> same ( <string_literal> ) ; } \n public void test <identifiersep> logger <identifiersep> on <identifiersep> var ( ) { \n \t1 test <identifiersep> debug <identifiersep> strings ( \n \t2 <string_literal> + \n <ect>
\t3 super ( p ) ; } \n \t2 @ override \n \t2 public void handle <identifiersep> message ( int group , byte cmd1 , msg msg , device <identifiersep> feature f , string from <identifiersep> port ) { \n \t3 insteon <identifiersep> address a = f . get <identifiersep> device ( ) . get <identifiersep> address ( ) ; \n <ect>
\t5 url = developer <identifiersep> server + <string_literal> + cmd <identifiersep> name + <string_literal> + vm <identifiersep> id + <string_literal> + encoded <identifiersep> api <identifiersep> key + <string_literal> + encoded <identifiersep> signature ; \n \t5 client = new http <identifiersep> client ( ) ; \n \t5 method = new get <identifiersep> method ( url ) ; \n \t5 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t1 if os . path . isdir ( storm <identifiersep> local <identifiersep> directory ) : \n \t1 logger . info ( <string_literal> . format ( storm <identifiersep> local <identifiersep> directory ) ) \n \t1 directory ( storm <identifiersep> local <identifiersep> directory , action = <string_literal> , create <identifiersep> parents = true ) \n \t1 # recreate storm local directory \n <ect>
\t4 try { \n \t5 double value = ( ( number ) j <identifiersep> storm <identifiersep> utils . add ( metric <identifiersep> entry . get <identifiersep> value ( ) , merge . get ( key ) ) ) . double <identifiersep> value ( ) ; \n \t5 merge . put ( key , value ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 this . mandatory <identifiersep> cuboid <identifiersep> set = immutable <identifiersep> set . < long > builder ( ) . add <identifiersep> all ( cuboids <identifiersep> for <identifiersep> mandatory ) . build ( ) ; \n \t2 this . selection <identifiersep> cuboid <identifiersep> set = immutable <identifiersep> set . < long > builder ( ) . add <identifiersep> all ( cuboids <identifiersep> for <identifiersep> selection ) . build ( ) ; \n \t2 if ( selection <identifiersep> cuboid <identifiersep> set . is <identifiersep> empty ( ) ) { \n <ect>
\t2 } else { \n \t3 logger . info ( <string_literal> , broadcaster <identifiersep> cache <identifiersep> class <identifiersep> name ) ; } \n \t2 string s = config . get <identifiersep> init <identifiersep> parameter ( broadcaster <identifiersep> wait <identifiersep> time ) ; \n \t2 logger . info ( <string_literal> , broadcaster <identifiersep> class <identifiersep> name ) ; \n <ect>
\t1 public void process <identifiersep> connect ( host <identifiersep> vo agent , startup <identifiersep> command cmd , boolean for <identifiersep> rebalance ) throws connection <identifiersep> exception { \n \t2 if ( ! ( cmd instanceof startup <identifiersep> routing <identifiersep> command ) ) { \n \t3 return ; } \n \t2 if ( for <identifiersep> rebalance ) { \n <ect>
\t4 try { \n \t5 if ( cleanup <identifiersep> action . requires <identifiersep> cleanup ( ) ) { \n \t6 cleanup <identifiersep> action . cleanup ( ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t1 if ( null != rs ) { \n \t2 try { \n \t2 rs . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t1 private t <identifiersep> transport transport ; \n \t1 @ before \n \t1 public void start <identifiersep> thrift <identifiersep> zlib <identifiersep> client ( ) throws io <identifiersep> exception , t <identifiersep> transport <identifiersep> exception { \n \t2 if ( transport == null ) { \n <ect>
\t2 } ) ; \n \t2 try { \n \t3 kit . insert <identifiersep> html ( doc , doc . get <identifiersep> length ( ) , <string_literal> , 0 , 0 , null ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t6 string key = ( string ) exchange . get <identifiersep> in ( ) . get <identifiersep> header ( cache <identifiersep> constants . cache <identifiersep> key ) ; \n \t6 object body = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( ) ; \n \t6 string data = exchange . get <identifiersep> context ( ) . get <identifiersep> type <identifiersep> converter ( ) . convert <identifiersep> to ( string . class , body ) ; \n <ect>
\t3 builder = dbf . new <identifiersep> document <identifiersep> builder ( ) ; \n \t3 document document = builder . new <identifiersep> document ( ) ; \n \t3 return document ; \n \t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n <ect>
\t8 logger . trace ( <string_literal> , name , count <identifiersep> down <identifiersep> latch <identifiersep> ref . get ( ) . get <identifiersep> count ( ) ) ; } \n \t6 } catch ( interrupted <identifiersep> exception e ) { \n \t7 <comment> \n \t6 } catch ( assertion <identifiersep> error | exception e ) { \n <ect>
\t4 if ( os <identifiersep> type . get <identifiersep> description ( ) . to <identifiersep> lower <identifiersep> case ( ) . index <identifiersep> of ( os <identifiersep> type <identifiersep> name . to <identifiersep> lower <identifiersep> case ( ) ) != - 1 ) \n \t5 return os <identifiersep> type . get <identifiersep> id ( ) ; } \n \t3 return null ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 return auth <identifiersep> result ; } \n \t3 if ( result != null && result instanceof string ) { \n \t4 auth <identifiersep> result = new gson ( ) . from <identifiersep> json ( ( string ) result , console <identifiersep> proxy <identifiersep> authentication <identifiersep> result . class ) ; \n \t3 } else { \n <ect>
\t1 public void purge ( ) { \n \t2 try { \n \t3 create <identifiersep> pool ( ) . purge ( ) ; \n \t2 } catch ( sql <identifiersep> exception x ) { \n <ect>
\t3 } catch ( interrupted <identifiersep> exception ignore ) { } } } \n \t1 @ test \n \t1 public void test <identifiersep> consents ( ) { \n \t2 driver . navigate ( ) . to ( get <identifiersep> account <identifiersep> url ( consumer <identifiersep> realm <identifiersep> name ( ) ) ) ; \n <ect>
\t4 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n \t3 } catch ( exception e ) { \n \t4 exception = exception <identifiersep> utils . first <identifiersep> or <identifiersep> suppressed ( e , exception ) ; } \n \t3 if ( exception != null ) { \n <ect>
\t2 assert <identifiersep> equals ( 0 , cache . get <identifiersep> stats ( ) . get <identifiersep> max <identifiersep> total <identifiersep> weight ( ) ) ; \n \t2 cache . invalidate ( id <identifiersep> prefix + 0 ) ; \n \t2 assert <identifiersep> false ( cache . contains <identifiersep> key ( id <identifiersep> prefix + 0 ) ) ; \n \t2 cache . close ( ) ; \n <ect>
\t2 running = true ; \n \t2 break ; \n \t1 case 1 : \n \t1 case <number_literal> : \n <ect>
\t4 isolation <identifiersep> level = connection . transaction <identifiersep> serializable ; \n \t3 } else if ( cloud <identifiersep> isolation <identifiersep> level . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t4 isolation <identifiersep> level = connection . transaction <identifiersep> read <identifiersep> uncommitted ; \n \t3 } else { \n <ect>
\t4 send <identifiersep> update ( denon <identifiersep> property . surround <identifiersep> mode . get <identifiersep> code ( ) , new string <identifiersep> type ( value ) ) ; \n \t3 } else if ( command . equals ( <string_literal> ) ) { \n \t4 process <identifiersep> title <identifiersep> command ( command , value ) ; } \n \t2 } else { \n <ect>
\t2 <string_literal> \n \t1 } , \n \t1 <string_literal> + \n \t1 <string_literal> + \n <ect>
\t1 log . info ( <string_literal> + hdfs <identifiersep> dir <identifiersep> path <identifiersep> str ) ; \n \t1 fstatus = validate <identifiersep> target <identifiersep> dir ( new path ( hdfs <identifiersep> dir <identifiersep> path <identifiersep> str ) , conf ) ; } \n \t1 if ( fstatus == null ) { \n \t1 path dest <identifiersep> dir = get <identifiersep> default <identifiersep> dest <identifiersep> dir ( conf ) ; \n <ect>
\t10 return p ; } } } \n \t7 catch ( number <identifiersep> format <identifiersep> exception e ) { } \n \t7 log . warn ( <string_literal> + hl7person <identifiersep> id + <string_literal> ) ; \n \t7 continue ; <comment> \n <ect>
\t2 public void run ( ) { \n \t3 x <identifiersep> log log = x <identifiersep> log . get <identifiersep> log ( get <identifiersep> class ( ) ) ; \n \t3 try { \n \t4 workflow <identifiersep> store store = services . get ( ) . get ( workflow <identifiersep> store <identifiersep> service . class ) . create ( ) ; \n <ect>
\t3 if ( faults . filter ( parent , ex ) ) { \n \t3 try { \n \t4 disable . fire ( parent ) ; \n \t3 } catch ( exception ex1 ) { \n <ect>
\t4 } else { \n \t5 <comment> \n \t5 <comment> \n \t5 <comment> \n <ect>
\t3 boolean success ; \n \t3 try { \n \t4 success = pn . ping ( ping <identifiersep> id ) ; \n \t3 } catch ( not <identifiersep> connected <identifiersep> exception e1 ) { \n <ect>
\t3 data <identifiersep> source . restart <identifiersep> db ( ) ; \n \t3 wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t4 @ override \n \t4 public boolean is <identifiersep> satisified ( ) throws exception { \n <ect>
\t2 try { \n \t2 thread . sleep ( sleep <identifiersep> interval ) ; \n \t2 } catch ( interrupted <identifiersep> exception ie ) { \n \t2 <comment> \n <ect>
\t2 log . error ( prefix + <string_literal> + flying <identifiersep> ability . get <identifiersep> instance ( ) . get <identifiersep> id ( ) ) ; \n \t2 log . error ( prefix + <string_literal> + reach <identifiersep> ability . get <identifiersep> instance ( ) . get <identifiersep> id ( ) ) ; \n \t2 log . error ( prefix + <string_literal> + intimidate <identifiersep> ability . get <identifiersep> instance ( ) . get <identifiersep> id ( ) ) ; \n \t2 log . error ( prefix ) ; \n <ect>
\t3 return true ; } \n \t2 if ( ! eventable . get <identifiersep> element ( ) . get <identifiersep> text ( ) . equals ( <string_literal> ) \n \t4 && eventable . get <identifiersep> element ( ) . equal <identifiersep> text ( other <identifiersep> element ) ) { \n \t3 if ( logging ) { \n <ect>
\t4 x <identifiersep> wiki <identifiersep> context xcontext = this . xcontext <identifiersep> provider . get ( ) ; \n \t4 revision <identifiersep> parameters . put ( wiki <identifiersep> document <identifiersep> filter . parameter <identifiersep> content <identifiersep> html , \n \t5 document . get <identifiersep> rendered <identifiersep> content ( xcontext ) ) ; \n \t3 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t1 } catch ( throwable t ) { \n \t1 error = t . get <identifiersep> message ( ) ; \n \t1 method = null ; \n \t1 ctor = null ; \n <ect>
\t3 <comment> \n \t3 sc . commit ( ) ; \n \t3 return receipt ; \n \t2 } catch ( d <identifiersep> space <identifiersep> sword <identifiersep> exception e ) { \n <ect>
\t3 produce <identifiersep> message ( receive <identifiersep> session , destination , <string_literal> + i , num <identifiersep> per <identifiersep> producer ) ; \n \t3 <comment> \n \t3 <comment> \n \t3 if ( i == <number_literal> ) { \n <ect>
\t5 . with <identifiersep> schedule ( cron <identifiersep> schedule <identifiersep> builder . cron <identifiersep> schedule ( <string_literal> ) ) . build ( ) ; \n \t3 sched . schedule <identifiersep> job ( job , trigger ) ; \n \t3 logger . debug ( <string_literal> ) ; \n \t2 } catch ( scheduler <identifiersep> exception se ) { \n <ect>
\t1 public static failover <identifiersep> strategy . factory load <identifiersep> failover <identifiersep> strategy ( configuration config , @ nullable logger logger ) { \n \t2 final string strategy <identifiersep> param = config . get <identifiersep> string ( job <identifiersep> manager <identifiersep> options . execution <identifiersep> failover <identifiersep> strategy ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> null <identifiersep> or <identifiersep> whitespace <identifiersep> only ( strategy <identifiersep> param ) ) { \n \t3 if ( logger != null ) { \n <ect>
\t1 max <identifiersep> lifetime <identifiersep> count = <number_literal> \n \t1 enabled <identifiersep> components = <string_literal> \n \t1 if dictionary and <string_literal> in dictionary : \n \t1 if logger . is <identifiersep> enabled <identifiersep> for ( logging . info ) : \n <ect>
\t6 image . snap <identifiersep> create ( snapshot <identifiersep> name ) ; \n \t6 rbd . close ( image ) ; \n \t6 r . io <identifiersep> ctx <identifiersep> destroy ( io ) ; \n \t5 } catch ( final exception e ) { \n <ect>
\t3 key <identifiersep> file = new file ( key <identifiersep> path ) ; } \n \t2 if ( key <identifiersep> file == null || ! key <identifiersep> file . exists ( ) ) { \n \t3 string key = <string_literal> \n \t5 + filename ; \n <ect>
\t2 logger . info ( <string_literal> + ( end2 - end1 ) + <string_literal> ) ; \n \t2 <comment> \n \t2 if ( model <identifiersep> filename != null && ! model <identifiersep> filename . trim ( ) . is <identifiersep> empty ( ) ) \n \t3 write <identifiersep> model ( workspace , workspace . get <identifiersep> ontology <identifiersep> manager ( ) , alignment <identifiersep> mapping <identifiersep> generator , worksheet , model <identifiersep> filename ) ; \n <ect>
\t7 if ( try <identifiersep> lb <identifiersep> provisioning ) { \n \t8 retry = false ; \n \t8 <comment> \n <comment> \n <ect>
public void process <identifiersep> host <identifiersep> removed <identifiersep> event ( hosts <identifiersep> removed <identifiersep> event hosts <identifiersep> removed <identifiersep> event ) { \n \t1 if ( hosts <identifiersep> removed <identifiersep> event . get <identifiersep> host <identifiersep> names ( ) . is <identifiersep> empty ( ) ) { \n \t1 log . warn ( <string_literal> , hosts <identifiersep> removed <identifiersep> event ) ; \n \t1 return ; } \n <ect>
\t2 table <identifiersep> name = normalize <identifiersep> hive <identifiersep> table <identifiersep> name ( table <identifiersep> name ) ; \n \t2 table <identifiersep> desc desc = get <identifiersep> table <identifiersep> manager ( ) . get <identifiersep> table <identifiersep> desc ( table <identifiersep> name , project ) ; \n \t2 <comment> \n \t2 if ( desc == null || desc . get <identifiersep> project ( ) == null ) { \n <ect>
\t1 @ bean \n \t1 public expiration <identifiersep> policy ticket <identifiersep> granting <identifiersep> ticket <identifiersep> expiration <identifiersep> policy ( ) { \n \t2 final ticket <identifiersep> granting <identifiersep> ticket <identifiersep> properties tgt = cas <identifiersep> properties . get <identifiersep> ticket ( ) . get <identifiersep> tgt ( ) ; \n \t2 if ( tgt . get <identifiersep> max <identifiersep> time <identifiersep> to <identifiersep> live <identifiersep> in <identifiersep> seconds ( ) < = 0 && tgt . get <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( ) < = 0 ) { \n <ect>
\t2 final hash <identifiersep> map < string , pair < string , state > > changes = new hash <identifiersep> map < string , pair < string , state > > ( ) ; \n \t2 synchronized (  <identifiersep> cluster . intern ( ) ) { \n \t3 hash <identifiersep> map < string , pair < string , state > > new <identifiersep> states = get <identifiersep> all <identifiersep> vms ( conn ) ; \n \t3 if ( new <identifiersep> states == null ) { \n <ect>
\t2 if ( null != this . error <identifiersep> exchange <identifiersep> name ) { \n \t3 string routing <identifiersep> key = this . error <identifiersep> routing <identifiersep> key != null ? this . error <identifiersep> routing <identifiersep> key : this . prefixed <identifiersep> original <identifiersep> routing <identifiersep> key ( message ) ; \n \t3 this . error <identifiersep> template . send ( this . error <identifiersep> exchange <identifiersep> name , routing <identifiersep> key , message ) ; \n <ect>
<comment> \n <ect>
\t1 <comment> \n \t1 private void migrate <identifiersep> s3to <identifiersep> image <identifiersep> store ( connection conn ) { \n \t2 long store <identifiersep> id = null ; \n \t2 map < long , long > s3 <identifiersep> store <identifiersep> id <identifiersep> map = new hash <identifiersep> map < long , long > ( ) ; \n <ect>
\t5 final ticket ticket = ( ticket ) document . content ( ) ; \n \t5 logger . debug ( <string_literal> , ticket ) ; \n \t5 final ticket decoded = decode <identifiersep> ticket ( ticket ) ; \n \t5 if ( decoded == null || decoded . is <identifiersep> expired ( ) ) { \n <ect>
\t1 if ( file == null ) { \n \t2 log . error ( usage ) ; \n \t2 system . exit ( - 1 ) ; } \n \t1 log . info ( <string_literal> , count ) ; \n <ect>
\t2 stomp <identifiersep> connection . send <identifiersep> frame ( frame ) ; \n \t2 frame = <string_literal> + <string_literal> + get <identifiersep> queue <identifiersep> name ( ) + <string_literal> + <string_literal> + stomp . transformations . jms <identifiersep> map <identifiersep> xml + <string_literal> <ect>
\t2 final map < string , object > attributes = this . cassandra <identifiersep> repository . get <identifiersep> user ( username ) ; \n \t2 if ( attributes == null || attributes . is <identifiersep> empty ( ) \n \t4 || ! attributes . contains <identifiersep> key ( cassandra <identifiersep> authentication <identifiersep> properties . get <identifiersep> username <identifiersep> attribute ( ) ) \n \t4 || ! attributes . contains <identifiersep> key ( cassandra <identifiersep> authentication <identifiersep> properties . get <identifiersep> password <identifiersep> attribute ( ) ) ) { \n <ect>
\t4 list < event > events = lists . new <identifiersep> array <identifiersep> list <identifiersep> with <identifiersep> capacity ( 1 ) ; \n \t4 events . add ( vm <identifiersep> event ) ; \n \t4 get <identifiersep> context ( ) . send <identifiersep> events ( events ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t6 property <identifiersep> key property <identifiersep> key = structr <identifiersep> app . get <identifiersep> configuration ( ) . get <identifiersep> property <identifiersep> key <identifiersep> for <identifiersep> database <identifiersep> name ( node . get <identifiersep> class ( ) , key ) ; \n \t6 if ( property <identifiersep> key != null ) { \n \t7 node db <identifiersep> node = node . get <identifiersep> node ( ) ; \n \t7 if ( db <identifiersep> node . has <identifiersep> property ( new <identifiersep> key ) ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t4 try ( prepared <identifiersep> statement select <identifiersep> storage <identifiersep> pool = conn . prepare <identifiersep> statement ( <string_literal> ) ; ) { \n \t5 select <identifiersep> storage <identifiersep> pool . set <identifiersep> long ( 1 , pool <identifiersep> id ) ; \n \t5 try ( result <identifiersep> set selected <identifiersep> storage <identifiersep> pool = select <identifiersep> storage <identifiersep> pool . execute <identifiersep> query ( ) ; ) { \n \t6 if ( ! selected <identifiersep> storage <identifiersep> pool . next ( ) ) { \n <ect>
\t5 send <identifiersep> ping ( ) ; \n \t4 } catch ( interrupted <identifiersep> exception ix ) { \n \t5 interrupted ( ) ; \n \t4 } catch ( exception x ) { \n <ect>
\t1 private final cipher encrypt <identifiersep> cipher ; \n \t1 private final cipher decrypt <identifiersep> cipher ; \n \t1 private volatile boolean stop ; \n \t1 public udp <identifiersep> broadcaster ( string config ) { \n <ect>
\t5 final http <identifiersep> message msg = new http <identifiersep> message ( url , io <identifiersep> utils . to <identifiersep> string ( entity . get <identifiersep> content ( ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ) ; \n \t5 msg . set <identifiersep> content <identifiersep> type ( entity . get <identifiersep> content <identifiersep> type ( ) . get <identifiersep> value ( ) ) ; \n \t5 msg . set <identifiersep> response <identifiersep> code ( response <identifiersep> code ) ; \n \t5 return msg ; } } \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + vm + <string_literal> ) ; \n \t4 if ( cleanup <identifiersep> vm <identifiersep> resources ( vm . get <identifiersep> id ( ) ) ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + vm + <string_literal> ) ; \n \t4 } else { \n <ect>
\t4 <comment> \n \t4 method method = klass . get <identifiersep> method ( <string_literal> , map . class ) ; \n \t4 log . debug ( <string_literal> + obj + <string_literal> + method ) ; \n \t4 transport = ( i <identifiersep> context ) method . invoke ( obj , storm <identifiersep> conf ) ; } \n <ect>
\t1 } else if ( request . get <identifiersep> method ( ) . equals ( <string_literal> ) ) { \n \t1 resource <identifiersep> record <identifiersep> set < ? > record <identifiersep> set = codec . read <identifiersep> json ( request , resource <identifiersep> record <identifiersep> set . class ) ; \n \t1 query query = query . from ( record <identifiersep> set ) ; \n \t1 long s = current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t5 output <identifiersep> buffer . write ( bytes , 0 , n ) ; \n \t4 } finally { \n \t5 output <identifiersep> buffer <identifiersep> lock . write <identifiersep> lock ( ) . unlock ( ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 return metric <identifiersep> name . replace ( ' <identifiersep> ' , ' - ' ) ; } \n private void warn <identifiersep> if <identifiersep> topology <identifiersep> name <identifiersep> contains <identifiersep> warn <identifiersep> string ( string name ) { \n \t1 for ( string warn : warn <identifiersep> strings <identifiersep> for <identifiersep> topology <identifiersep> or <identifiersep> component <identifiersep> name ) { \n \t1 if ( name . contains ( warn ) ) { \n <ect>
\t4 assert rsrc3 == rsrc7 ; \n \t4 assert rsrc4 == rsrc8 ; \n \t4 log . info ( <string_literal> + rsrc1 ) ; \n \t4 log . info ( <string_literal> + rsrc2 ) ; \n <ect>
\t3 cache <identifiersep> put ( var , n ) ; \n \t3 return n ; \n \t2 } catch ( exception ex ) \n \t2 { \n <ect>
\t9 final graph <identifiersep> object <identifiersep> map graph <identifiersep> object = new graph <identifiersep> object <identifiersep> map ( ) ; \n \t9 graph <identifiersep> object . set <identifiersep> property ( new generic <identifiersep> property ( key ) , non <identifiersep> graph <identifiersep> object <identifiersep> result ) ; \n \t9 result <identifiersep> list . add ( graph <identifiersep> object ) ; } \n \t7 } else { \n <ect>
\t4 final map < string , object > attributes = new hash <identifiersep> map < > ( ) ; \n \t4 attributes . put ( fortress <identifiersep> session <identifiersep> key , fortress <identifiersep> xml <identifiersep> session ) ; \n \t4 return create <identifiersep> handler <identifiersep> result ( c , principal <identifiersep> factory . create <identifiersep> principal ( username , attributes ) ) ; \n \t3 } else { \n <ect>
\t1 string [ ] argv = get <identifiersep> argv ( is <identifiersep> direct , table <identifiersep> name , extra <identifiersep> args ) ; \n \t1 try { \n \t1 run <identifiersep> import ( argv ) ; \n \t1 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 return 0 ; } \n \t2 try { \n \t3 return integer . parse <identifiersep> int ( exit <identifiersep> string ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t2 runnable view <identifiersep> rebuild = ( ) - > { \n \t3 for ( keyspace keyspace : keyspace . all ( ) ) \n \t3 { \n \t4 keyspace . view <identifiersep> manager . build <identifiersep> all <identifiersep> views ( ) ; } \n <ect>
\t4 process <identifiersep> query <identifiersep> results ( new <identifiersep> map , \n \t5 current <identifiersep> context . search ( queue <identifiersep> search <identifiersep> base , get <identifiersep> filter <identifiersep> for <identifiersep> permission <identifiersep> type ( permission <identifiersep> type ) , \n \t5 constraints ) , destination <identifiersep> type . queue , permission <identifiersep> type ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 logger . error ( <string_literal> , npe ) ; \n \t4 return ; } \n \t3 catch ( io <identifiersep> exception ioe ) \n \t3 { \n <ect>
\t3 if ( lock ( job <identifiersep> id ) ) { \n \t4 call ( store ) ; } \n \t3 else { \n \t4 queue <identifiersep> callable ( new coord <identifiersep> kill <identifiersep> command ( job <identifiersep> id ) , lock <identifiersep> failure <identifiersep> requeue <identifiersep> interval ) ; \n <ect>
\t2 writer . end <identifiersep> object ( ) ; } \n \t1 public static pattern read <identifiersep> json ( string filename ) throws io <identifiersep> exception { \n \t2 file file = new file ( filename ) ; \n \t2 if ( ! file . exists ( ) ) { \n <ect>
\t5 m <identifiersep> local <identifiersep> port = m <identifiersep> socket . get <identifiersep> local <identifiersep> port ( ) ; \n \t5 m <identifiersep> local <identifiersep> address = m <identifiersep> socket . get <identifiersep> local <identifiersep> address ( ) ; } } \n \t3 logger . debug ( <string_literal> , m <identifiersep> socket . to <identifiersep> string ( ) ) ; \n \t3 logger . debug ( <string_literal> , m <identifiersep> local <identifiersep> address . to <identifiersep> string ( ) , m <identifiersep> local <identifiersep> port ) ; \n <ect>
\t3 <comment> \n \t3 if ( event . get <identifiersep> db <identifiersep> name ( ) . equals <identifiersep> ignore <identifiersep> case ( db <identifiersep> name ) ) { \n \t3 if ( event . get <identifiersep> event <identifiersep> type ( ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t4 <comment> \n <ect>
\t2 for ( listenable <identifiersep> future < close <identifiersep> future > close <identifiersep> future : close <identifiersep> futures ) { \n \t3 try { \n \t4 futures . add ( close <identifiersep> future . get ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 void delete ( hints <identifiersep> descriptor descriptor ) \n \t1 { \n \t2 file hints <identifiersep> file = new file ( hints <identifiersep> directory , descriptor . file <identifiersep> name ( ) ) ; \n \t2 if ( hints <identifiersep> file . delete ( ) ) \n <ect>
\t2 while ( ! completed . get ( ) ) { \n \t3 try { \n \t4 if ( duration > 0 ) { \n \t5 time <identifiersep> unit unit = get <identifiersep> time <identifiersep> unit ( ) ; \n <ect>
\t3 string str = json . get <identifiersep> string ( key ) ; \n \t3 if ( str != null ) { \n \t4 return str ; } \n \t2 } catch ( json <identifiersep> exception e ) { \n <ect>
\t3 final marker marker = marker . from <identifiersep> string ( split [ i ] ) ; \n \t3 if ( marker != null ) { \n \t4 i ++ ; } \n \t3 if ( split . length < <number_literal> ) { \n <ect>
\t3 raise xml <identifiersep> rpc <identifiersep> fault ( to <identifiersep> err <identifiersep> code ( ovm <identifiersep> host , ovm <identifiersep> host . register <identifiersep> as <identifiersep> master ) , errmsg ) \n \t1 @ staticmethod \n \t1 def register <identifiersep> as <identifiersep> vm <identifiersep> server ( hostname , username = <string_literal> , password = <string_literal> , port = <number_literal> , is <identifiersep> ssl = false ) : \n \t2 try : \n <ect>
\t2 user <identifiersep> vm <identifiersep> vo vm =  <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> id ( id ) ; \n \t2 if ( vm == null ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + id ) ; } \n \t2 if ( vm . get <identifiersep> state ( ) == state . error || vm . get <identifiersep> state ( ) == state . expunging ) { \n <ect>
\t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , e ) ; \n \t2 } finally { \n \t3 transaction <identifiersep> legacy . close <identifiersep> pstmts ( pstmt2close ) ; } \n <ect>
\t4 if ( record != null ) { \n \t5 log . debug ( <string_literal> , record ) ; \n \t5 <comment> \n \t5 skip <identifiersep> first <identifiersep> line = record . skip <identifiersep> first <identifiersep> line ( ) ; \n <ect>
\t3 if ( stmt != null ) { \n \t4 try { \n \t5 stmt . close ( ) ; } \n \t4 catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 public void test <identifiersep> logger <identifiersep> usage <identifiersep> checks ( ) throws io <identifiersep> exception { \n \t2 for ( method method : get <identifiersep> class ( ) . get <identifiersep> methods ( ) ) { \n \t3 if ( method . get <identifiersep> declaring <identifiersep> class ( ) . equals ( get <identifiersep> class ( ) ) ) { \n \t4 if ( method . get <identifiersep> name ( ) . starts <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t3 kill <identifiersep> options kill <identifiersep> ops = new kill <identifiersep> options ( ) ; \n \t3 kill <identifiersep> ops . set <identifiersep> wait <identifiersep> secs ( 0 ) ; \n \t3 state . get <identifiersep> nimbus ( ) . kill <identifiersep> topology <identifiersep> with <identifiersep> opts ( topology <identifiersep> name , kill <identifiersep> ops ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 log . info ( <string_literal> , replication <identifiersep> statuses ) ; \n \t1 assert . assert <identifiersep> equals ( <string_literal> , 1 , \n \t2 replication <identifiersep> statuses . size ( ) ) ; \n \t1 status = replication <identifiersep> statuses . values ( ) . iterator ( ) . next ( ) ; \n <ect>
\t2 if ( local <identifiersep> storage <identifiersep> root != null ) setup <identifiersep> local <identifiersep> storage ( local <identifiersep> storage <identifiersep> root ) ; \n \t2 multipart <identifiersep> dir = properties . get <identifiersep> property ( <string_literal> ) ; \n \t2 timer . schedule ( get <identifiersep> heartbeat <identifiersep> task ( ) , heartbeat <identifiersep> interval , heartbeat <identifiersep> interval ) ; \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 log . warning ( <string_literal> ) ; \n \t2 log . warning ( <string_literal> , new exception ( <string_literal> ) ) ; \n <ect>
<comment> \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 private void process <identifiersep> query <identifiersep> response ( uuid snd <identifiersep> id , grid <identifiersep> cache <identifiersep> query <identifiersep> response res ) { \n <ect>
\t1 string <identifiersep> helper . set <identifiersep> safe <identifiersep> xml <identifiersep> text ( entry <identifiersep> element , entry . get <identifiersep> entry ( ) ) ; \n \t1 root . add <identifiersep> content ( entry <identifiersep> element ) ; } \n \t1 element . add <identifiersep> content ( root ) ; } \n public void read <identifiersep> data ( @ not <identifiersep> null element element ) { \n <ect>
\t3 try { \n \t4 termination <identifiersep> handle . await <identifiersep> termination ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n <ect>
\t2 if ( os <identifiersep> jar <identifiersep> path . is <identifiersep> empty ( ) ) { \n \t3 log . error ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( needs <identifiersep> dest && os <identifiersep> dest <identifiersep> jar [ 0 ] == null ) { \n <ect>
\t2 allocation <identifiersep> service strategy = create <identifiersep> allocation <identifiersep> service ( settings . builder ( ) \n \t4 . put ( <string_literal> , <number_literal> ) \n \t4 . put ( cluster <identifiersep> rebalance <identifiersep> allocation <identifiersep> decider . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> allow <identifiersep> rebalance <identifiersep> setting . get <identifiersep> key ( ) , <string_literal> ) \n \t4 . build ( ) ) ; \n <ect>
private static final date <identifiersep> time <identifiersep> comparator date <identifiersep> time <identifiersep> comparator = date <identifiersep> time <identifiersep> comparator . get <identifiersep> instance ( date <identifiersep> time <identifiersep> field <identifiersep> type . second <identifiersep> of <identifiersep> minute ( ) ) ; \n private final request <identifiersep> authorization <identifiersep> handler authorization <identifiersep> handler ; \n public static void check <identifiersep> preconditions ( ) throws eucalyptus <identifiersep> cloud <identifiersep> exception , execution <identifiersep> exception { \n \t1 log . debug ( <string_literal> ) ; \n <ect>
\t2 if ( ! status ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 for ( int i = 0 ; i < expected <identifiersep> list . size ( ) ; i ++ ) { \n \t4 log . info ( i + <string_literal> + expected <identifiersep> list . get ( i ) . to <identifiersep> string ( ) ) ; } \n <ect>
\t4 return compiler <identifiersep> type . eclipse ; \n \t3 } else if ( prop . equals ( <string_literal> ) ) { \n \t4 return compiler <identifiersep> type . janino ; \n \t3 } else { \n <ect>
\t3 backup <identifiersep> service . submit ( task ) ; } \n \t2 <comment> \n \t2 catch ( runtime <identifiersep> exception ex ) \n \t2 { \n <ect>
\t4 } finally { \n \t5 <comment> \n \t5 if ( stream != null ) stream . close ( ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t3 * <comment> \n \t3 * if ( node . get <identifiersep> node <identifiersep> id ( ) != event . get <identifiersep> node <identifiersep> id ( ) || current <identifiersep> stage != z <identifiersep> wave <identifiersep> node <identifiersep> init <identifiersep> stage . ping ) { \n \t3 * return ; \n \t3 * } \n <ect>
\t2 test <identifiersep> case ( update <identifiersep> by <identifiersep> query ( ) . source ( <string_literal> ) . set <identifiersep> slices ( random <identifiersep> slices ( ) ) , update <identifiersep> by <identifiersep> query <identifiersep> action . name ) ; } \n \t1 public void test <identifiersep> delete <identifiersep> by <identifiersep> query <identifiersep> with <identifiersep> workers ( ) throws exception { \n \t2 test <identifiersep> case ( delete <identifiersep> by <identifiersep> query ( ) . source ( <string_literal> ) . filter ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . set <identifiersep> slices ( random <identifiersep> slices ( ) ) , delete <identifiersep> by <identifiersep> query <identifiersep> action . name ) ; } \n \t1 private void test <identifiersep> case ( abstract <identifiersep> bulk <identifiersep> by <identifiersep> scroll <identifiersep> request <identifiersep> builder < ? , ? > request , string action <identifiersep> name ) throws exception { \n <ect>
\t3 file = get <identifiersep> file ( properties <identifiersep> util . get <identifiersep> project <identifiersep> properties ( ) . get ( <string_literal> ) . split ( <string_literal> ) ) ; } \n \t2 if ( file == null ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 int idx = context . get <identifiersep> and <identifiersep> preset <identifiersep> first <identifiersep> empty <identifiersep> index ( ) ; \n \t2 if ( idx < 0 ) { \n <ect>
\t1 try { \n \t1 if ( connection . get <identifiersep> response <identifiersep> code ( ) == <number_literal> ) \n \t2 return true ; \n \t1 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t4 = contact <identifiersep> list <identifiersep> to <identifiersep> create . get ( group <identifiersep> name ) . iterator ( ) ; \n \t3 while ( contacts <identifiersep> to <identifiersep> add <identifiersep> to <identifiersep> this <identifiersep> group . has <identifiersep> next ( ) ) \n \t3 { \n \t4 string id = contacts <identifiersep> to <identifiersep> add <identifiersep> to <identifiersep> this <identifiersep> group . next ( ) ; \n <ect>
\t3 string body = user <identifiersep> response . get <identifiersep> body ( ) ; \n \t3 logger . info ( <string_literal> , body ) ; \n \t3 return ( string ) json <identifiersep> utils . parse <identifiersep> json ( body ) . get ( key ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 try { \n \t3 add <identifiersep> new <identifiersep> user ( account , user , users . get ( user ) ) ; \n \t2 } catch ( auth <identifiersep> exception e ) { \n \t3 log . error ( e , e ) ; \n <ect>
\t1 cloud <identifiersep> watch . put <identifiersep> metric <identifiersep> data ( create <identifiersep> put <identifiersep> request ( batch ) ) ; \n \t1 } catch ( amazon <identifiersep> service <identifiersep> exception e ) { \n \t1 final tag error = new basic <identifiersep> tag ( <string_literal> , e . get <identifiersep> error <identifiersep> code ( ) ) ; \n \t1 dynamic <identifiersep> counter . increment ( errors <identifiersep> counter <identifiersep> id . with <identifiersep> additional <identifiersep> tag ( error ) ) ; \n <ect>
\t6 if ( dir . exists ( ) ) { \n \t7 result . add ( dir . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ) ; \n \t7 dev <identifiersep> folder <identifiersep> names . add ( file . get <identifiersep> name ( ) ) ; } } } } } \n \t2 catch ( malformed <identifiersep> url <identifiersep> exception ex ) { \n <ect>
\t3 <comment> \n \t3 if ( ! verifier . verify ( segment ) ) { \n \t4 <comment> \n \t4 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n <ect>
\t1 private user <identifiersep> account <identifiersep> dao  <identifiersep> user <identifiersep> account <identifiersep> dao ; \n \t1 @ override \n \t1 public pair < boolean , action <identifiersep> on <identifiersep> failed <identifiersep> authentication > authenticate ( string username , string password , long domain <identifiersep> id , map < string , object [ ] > request <identifiersep> parameters ) { \n <ect>
\t4 map < string , string > success = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> } ) ; \n \t4 s <identifiersep> logger . info ( <string_literal> + success . get ( <string_literal> ) ) ; \n \t4 s <identifiersep> domain <identifiersep> router <identifiersep> id . set ( success . get ( <string_literal> ) ) ; \n \t3 } else { \n <ect>
<comment> <ect>
\t3 } else { \n \t4  <identifiersep> transport . send ( dsm , peer ) ; \n \t4 <comment> \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 create <identifiersep> template <identifiersep> async ( tmplt , store , null ) ; } } } } \n \t1 @ override \n \t1 public void handle <identifiersep> template <identifiersep> sync ( data <identifiersep> store store ) { \n \t2 if ( store == null ) { \n <ect>
\t4 if ( tag == null ) { \n \t5 tag = property . get <identifiersep> iri ( ) . to <identifiersep> string ( ) ; } \n \t4 <comment> \n \t4 <comment> \n <ect>
\t3 exchange . set <identifiersep> exception ( e ) ; } \n \t2 if ( exchange . get <identifiersep> exception ( ) != null ) { \n \t3 exception <identifiersep> handler . handle <identifiersep> exception ( <string_literal> , exchange , exchange . get <identifiersep> exception ( ) ) ; } } \n \t1 public void on <identifiersep> accept <identifiersep> deliver <identifiersep> sm ( deliver <identifiersep> sm deliver <identifiersep> sm ) throws process <identifiersep> request <identifiersep> exception { \n <ect>
\t2 realization <identifiersep> entries . add ( realization <identifiersep> entry . create ( realization <identifiersep> type . cube , new <identifiersep> cube <identifiersep> instance . get <identifiersep> name ( ) ) ) ; \n \t2 hybrid <identifiersep> instance hybrid <identifiersep> instance = hybrid <identifiersep> instance . create ( kylin <identifiersep> config , rename <identifiersep> hybrid ( cube <identifiersep> instance . get <identifiersep> name ( ) ) , realization <identifiersep> entries ) ; \n \t2 store . put <identifiersep> resource ( hybrid <identifiersep> instance . get <identifiersep> resource <identifiersep> path ( ) , hybrid <identifiersep> instance , hybrid <identifiersep> manager . hybrid <identifiersep> serializer ) ; \n \t2 project <identifiersep> manager . get <identifiersep> instance ( kylin <identifiersep> config ) . move <identifiersep> realization <identifiersep> to <identifiersep> project ( realization <identifiersep> type . hybrid , hybrid <identifiersep> instance . get <identifiersep> name ( ) , project <identifiersep> name , owner ) ; \n <ect>
\t1 string iqn = volume <identifiersep> info . get <identifiersep> iqn ( ) ; \n \t1 string device <identifiersep> name = connection <identifiersep> manager . connect <identifiersep> target ( iqn , null ) . get <identifiersep> path ( ) ; \n \t1 return device <identifiersep> name ; \n \t1 } catch ( transaction <identifiersep> exception | no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n <ect>
\t3 triple <identifiersep> store <identifiersep> url = default <identifiersep> server <identifiersep> url + <string_literal> + karma <identifiersep> model <identifiersep> repo + <string_literal> + <string_literal> ; } \n \t2 if ( triple <identifiersep> store <identifiersep> url . char <identifiersep> at ( triple <identifiersep> store <identifiersep> url . length ( ) - 1 ) == ' / ' ) { \n \t3 triple <identifiersep> store <identifiersep> url = triple <identifiersep> store <identifiersep> url . substring ( 0 , \n \t5 triple <identifiersep> store <identifiersep> url . length ( ) - <number_literal> ) ; } \n <ect>
\t2 try { \n \t3 <comment> \n \t3 final discoverer discoverer =  <identifiersep> resource <identifiersep> mgr . get <identifiersep> matching <identifiersep> discover ( host . get <identifiersep> hypervisor <identifiersep> type ( ) ) ; \n \t3 if ( discoverer == null ) { \n <ect>
\t4 if ( input <identifiersep> stream != null ) { \n \t5 try { \n \t6 input <identifiersep> stream . close ( ) ; } \n \t5 catch ( io <identifiersep> exception io ) { \n <ect>
\t3 send <identifiersep> response ( resp , <string_literal> ) ; \n \t3 return ; } \n \t2 string sid = req . get <identifiersep> parameter ( <string_literal> ) ; \n \t2 if ( sid == null || ! sid . equals ( vm . get <identifiersep> vnc <identifiersep> password ( ) ) ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t3 <comment> \n \t3 try { \n \t4 <comment> \n \t4 if ( client == null ) { \n <ect>
\t1 private void log <identifiersep> all <identifiersep> mbeans ( broker <identifiersep> service broker ) throws malformed <identifiersep> url <identifiersep> exception { \n \t2 try { \n \t3 <comment> \n \t3 set < ? > all = broker . get <identifiersep> management <identifiersep> context ( ) . query <identifiersep> names ( null , null ) ; \n <ect>
\t4 info ( <string_literal> ) ; \n \t4 publish <identifiersep> deployment <identifiersep> progress <identifiersep> message ( deployment <identifiersep> import <identifiersep> status , <string_literal> ) ; \n \t4 files . walk <identifiersep> file <identifiersep> tree ( schema , new schema <identifiersep> import <identifiersep> visitor ( schema ) ) ; \n \t3 } catch ( io <identifiersep> exception ioex ) { \n <ect>
\t4 if ( resources . is <identifiersep> empty ( ) ) { \n \t5 return ; } \n \t4 destroy ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 field . set <identifiersep> accessible ( true ) ; \n \t6 object value = field . get ( obj ) ; \n \t6 map . put ( attr <identifiersep> name , value != null ? value . to <identifiersep> string ( ) : null ) ; } \n \t5 catch ( exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> , principal <identifiersep> id ) ; \n \t4 return this . principal <identifiersep> factory . create <identifiersep> principal ( principal <identifiersep> id ) ; } \n \t3 logger . debug ( <string_literal> , this . get <identifiersep> class ( ) . get <identifiersep> name ( ) , principal <identifiersep> id ) ; \n \t3 return null ; } \n <ect>
\t3 try { \n \t4 scheduler = new std <identifiersep> scheduler <identifiersep> factory ( ) . get <identifiersep> scheduler ( ) ; \n \t4 this . remove <identifiersep> all <identifiersep> jobs ( ) ; \n \t3 } catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , request , ticket <identifiersep> id ) ; \n \t3 final map < string , attribute <identifiersep> value > return <identifiersep> item = amazon <identifiersep> dynamo <identifiersep> db <identifiersep> client . get <identifiersep> item ( request ) . get <identifiersep> item ( ) ; \n \t3 if ( return <identifiersep> item != null ) { \n \t4 final ticket ticket = deserialize <identifiersep> ticket ( return <identifiersep> item ) ; \n <ect>
\t1 string instance <identifiersep> name <identifiersep> path ; \n \t1 try { \n \t1 instance <identifiersep> name <identifiersep> path = get <identifiersep> instance <identifiersep> name <identifiersep> path ( opts ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t7 <string_literal> + method . get <identifiersep> name ( ) + <string_literal> ) ; } } \n \t3 <comment> \n \t3 boolean is <identifiersep> new <identifiersep> em = false ; \n \t3 if ( target == null ) { \n <ect>
\t2 try { \n \t3 final servlet <identifiersep> output <identifiersep> stream out = response . get <identifiersep> output <identifiersep> stream ( ) ; \n \t3 io <identifiersep> utils . write ( content , out , <string_literal> ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 long test <identifiersep> sends = stats . get <identifiersep> counter ( <string_literal> ) ; \n \t2 long test <identifiersep> recvs = stats . get <identifiersep> counter ( stats . get <identifiersep> counter <identifiersep> names ( ) [ 1 ] ) ; \n \t2 assert . assert <identifiersep> equals ( sends , test <identifiersep> sends ) ; \n \t2 assert . assert <identifiersep> equals ( recvs , test <identifiersep> recvs ) ; \n <ect>
\t2 assert . assert <identifiersep> true ( <string_literal> . equals ( s ) ) ; \t1 \n \t2 s = set . expose <identifiersep> internal <identifiersep> floor ( <string_literal> ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> + s ) ; \n \t2 assert . assert <identifiersep> true ( <string_literal> . equals ( s ) ) ; \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
public final response handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n \t1 try { \n \t1 return safe <identifiersep> handle ( request ) ; \n \t1 } catch ( element <identifiersep> not <identifiersep> visible <identifiersep> exception e ) { \n <ect>
\t2 for ( int i = 0 ; i < headers . size ( ) ; i ++ ) { \n \t3 soap <identifiersep> header header = headers . get ( i ) ; \n \t3 message message = wsdl <identifiersep> context . get <identifiersep> definition ( ) . get <identifiersep> message ( header . get <identifiersep> message ( ) ) ; \n \t3 if ( message == null ) { \n <ect>
\t6 log . trace ( <string_literal> , synchronization , exchange ) ; \n \t6 ( ( synchronization <identifiersep> route <identifiersep> aware ) synchronization ) . on <identifiersep> after <identifiersep> route ( route , exchange ) ; \n \t5 } catch ( throwable e ) { \n \t6 <comment> \n <ect>
\t1 <string_literal> <string_literal> <string_literal> \n \t1 if self . status <identifiersep> commands <identifiersep> run <identifiersep> interval == 0 : \n <ect>
<comment> \n \t1 private file get <identifiersep> working <identifiersep> dir <identifiersep> for <identifiersep> user ( final string username ) throws io <identifiersep> exception { \n \t2 final file user <identifiersep> dir = get <identifiersep> or <identifiersep> create <identifiersep> svn <identifiersep> user <identifiersep> directory ( username ) ; \n <ect>
\t5 total += topology <identifiersep> metrics . get <identifiersep> task <identifiersep> metric ( ) . get <identifiersep> metrics <identifiersep> size ( ) ; } } \n \t3 context . get <identifiersep> metric <identifiersep> cache ( ) . put ( cluster <identifiersep> metrics <identifiersep> context . pending <identifiersep> upload <identifiersep> metric <identifiersep> data <identifiersep> info + idx , summary ) ; \n \t3 context . get <identifiersep> metric <identifiersep> cache ( ) . put ( cluster <identifiersep> metrics <identifiersep> context . pending <identifiersep> upload <identifiersep> metric <identifiersep> data + idx , topology <identifiersep> metrics ) ; \n \t3 context . mark <identifiersep> set ( idx ) ; \n <ect>
\t1 val clazz = compile ( \n \t1 get <identifiersep> runtime <identifiersep> context . get <identifiersep> user <identifiersep> code <identifiersep> class <identifiersep> loader , \n \t1 gen <identifiersep> aggregations . name , \n \t1 gen <identifiersep> aggregations . code ) \n <ect>
\t2 frame = <string_literal> + <string_literal> + get <identifiersep> queue <identifiersep> name ( ) + <string_literal> + \n \t4 <string_literal> + <string_literal> + stomp . null ; \n \t2 stomp <identifiersep> connection . send <identifiersep> frame ( frame ) ; \n \t2 receipt = stomp <identifiersep> connection . receive ( ) ; \n <ect>
\t3 super . save <identifiersep> changes ( ) ; } \n \t2 catch ( eo <identifiersep> general <identifiersep> adaptor <identifiersep> exception e ) { \n \t3 saved = false ; \n \t3 if (  <identifiersep> recovers <identifiersep> from <identifiersep> exception ) { \n <ect>
\t7 logger . trace ( <string_literal> { } \\ <string_literal> { } \\ <string_literal> , new <identifiersep> child . get <identifiersep> format ( ) . to <identifiersep> string ( ) , new <identifiersep> child . get <identifiersep> name ( ) ) ; \n \t6 } else { \n \t7 logger . trace ( <string_literal> , new <identifiersep> child . get <identifiersep> format ( ) . to <identifiersep> string ( ) , new <identifiersep> child . get <identifiersep> name ( ) ) ; } } } } \n \t2 } catch ( throwable t ) { \n <ect>
\t7 ) { \n \t6 boolean validate = test <identifiersep> connection <identifiersep> internal ( poolable <identifiersep> connection . holder , poolable <identifiersep> connection . conn ) ; \n \t6 if ( ! validate ) { \n <ect>
\t2 existing <identifiersep> vol . set <identifiersep> iqn ( iqn ) ; \n \t2 entities . merge ( existing <identifiersep> vol ) ; \n \t2 tran . commit ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t5 gss <identifiersep> context gss <identifiersep> context = null ; \n \t5 try { \n \t6 logger . debug ( <string_literal> ) ; \n \t6 socket = server <identifiersep> socket . accept ( ) ; \n <ect>
\t2 string <identifiersep> builder . append ( <string_literal> ) ; \n \t2 try { \n \t3 string cmd = string . format ( string <identifiersep> builder . to <identifiersep> string ( ) , hadoop <identifiersep> conf , kylin <identifiersep> config . get <identifiersep> spark <identifiersep> home ( ) , jars , job <identifiersep> jar , \n \t5 format <identifiersep> args ( ) ) ; \n <ect>
\t2 tunnel <identifiersep> data <identifiersep> message msg = new tunnel <identifiersep> data <identifiersep> message (  <identifiersep> context ) ; \n \t2 msg . set <identifiersep> data ( encrypted ) ; \n \t2 msg . set <identifiersep> tunnel <identifiersep> id (  <identifiersep> config . get <identifiersep> config ( 0 ) . get <identifiersep> send <identifiersep> tunnel ( ) ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 final string username = resolve <identifiersep> username <identifiersep> internal ( principal , service , registered <identifiersep> service ) ; \n \t2 if ( canonicalization <identifiersep> mode == null ) { \n \t3 canonicalization <identifiersep> mode = case <identifiersep> canonicalization <identifiersep> mode . none . name ( ) ; } \n \t2 final string uid = case <identifiersep> canonicalization <identifiersep> mode . value <identifiersep> of ( canonicalization <identifiersep> mode ) . canonicalize ( username . trim ( ) , locale . get <identifiersep> default ( ) ) ; \n <ect>
\t2 try { \n \t3 <comment> \n \t3 database <identifiersep> utils . update <identifiersep> database ( ) ; \n \t2 } catch ( sql <identifiersep> exception se ) { \n <ect>
\t2 handler . failed ( cause ) ; } \n \t1 @ override \n \t1 public void cancel ( ) { \n <ect>
\t8 reason ) ; \n \t5 bye . set <identifiersep> header ( reason <identifiersep> header ) ; } \n \t4 catch ( throwable e ) \n \t4 { \n <ect>
\t4 j <identifiersep> meter <identifiersep> property jprop = el . get <identifiersep> property ( desc . get <identifiersep> name ( ) ) ; \n \t4 class < ? > type = desc . get <identifiersep> property <identifiersep> type ( ) ; \n \t4 object value = unwrap <identifiersep> property ( desc , jprop , type ) ; \n <ect>
\t3 } else { \n \t4 invoke <identifiersep> async <identifiersep> proxy <identifiersep> client ( exchange , callback ) ; } \n \t3 return false ; \n \t2 } catch ( exception exception ) { \n <ect>
\t1 public void stop ( ) \n \t3 throws interrupted <identifiersep> exception \n \t1 { \n \t2 if ( server <identifiersep> channel != null ) { \n <ect>
\t2 final file <identifiersep> store store ; \n \t2 try { \n \t3 store = builder . build ( ) ; \n \t2 } catch ( invalid <identifiersep> file <identifiersep> store <identifiersep> version <identifiersep> exception e ) { \n <ect>
\t4 return false ; } \n \t3 <comment> \n \t3 return wait <identifiersep> for <identifiersep> table <identifiersep> to <identifiersep> become <identifiersep> active ( table <identifiersep> name ) ; \n \t2 } catch ( amazon <identifiersep> client <identifiersep> exception e ) { \n <ect>
\t5 } else { \n \t6 break ; } \n \t5 method . release <identifiersep> connection ( ) ; } \n \t4 else { \n <ect>
\t2 try { \n \t2 static <identifiersep> database <identifiersep> property <identifiersep> entry . update ( <string_literal> , \n \t3 <string_literal> , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 . filter ( predicate ) \n \t5 . filter ( delete <identifiersep> webhook ( ) ) \n \t5 . filter ( log ( <string_literal> ) ) . to <identifiersep> list ( ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t3 try { \n \t4 m <identifiersep> bean <identifiersep> registry . get <identifiersep> instance ( ) . register ( r <identifiersep> bean , jmx <identifiersep> quorum <identifiersep> bean ) ; \n \t4 jmx <identifiersep> remote <identifiersep> peer <identifiersep> bean . put ( qs . id , r <identifiersep> bean ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 final http <identifiersep> servlet <identifiersep> request request = web <identifiersep> utils . get <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> from <identifiersep> external <identifiersep> webflow <identifiersep> context ( ) ; \n \t3 final http <identifiersep> servlet <identifiersep> response response = web <identifiersep> utils . get <identifiersep> http <identifiersep> servlet <identifiersep> response <identifiersep> from <identifiersep> external <identifiersep> webflow <identifiersep> context ( ) ; \n \t3 final web <identifiersep> context web <identifiersep> context = pac4j <identifiersep> utils . get <identifiersep> pac4j <identifiersep> j2e <identifiersep> context ( request , response ) ; \n \t3 final user <identifiersep> profile user <identifiersep> profile = client . get <identifiersep> user <identifiersep> profile ( credentials , web <identifiersep> context ) ; \n <ect>
@ override \n public void refresh ( object entity ) { \n \t1 database . load ( entity ) ; \n \t1 if ( logger . is <identifiersep> loggable ( level . finest ) ) { \n <ect>
\t3 return <string_literal> ; } \n \t2 try { \n \t3 return this . xwiki . get <identifiersep> url <identifiersep> content ( surl , this . context ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 if ( root <identifiersep> artifact . get <identifiersep> group <identifiersep> id ( ) . equals ( group <identifiersep> id ) && root <identifiersep> artifact . get <identifiersep> artifact <identifiersep> id ( ) . equals ( artifact <identifiersep> id ) ) { \n \t1 logger . debug ( <string_literal> , \n \t4 artifact <identifiersep> coords , root <identifiersep> artifact ) ; \n \t1 final default <identifiersep> artifact artifact = new default <identifiersep> artifact ( group <identifiersep> id , artifact <identifiersep> id , jar <identifiersep> extension , root <identifiersep> artifact . get <identifiersep> version ( ) ) ; \n <ect>
\t3 try { \n \t4 sock . socket ( ) . shutdown <identifiersep> input ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> , e ) ; } } \n \t4 add <identifiersep> to <identifiersep> map ( map , key , value , type <identifiersep> class , type <identifiersep> name ) ; } \n \t3 else { \n <ect>
\t5 popup <identifiersep> window . dispose ( ) ; } \n \t3 } ) ; \n \t3 browser <identifiersep> component . close ( true ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 string json <identifiersep> response ; \n \t2 if ( is <identifiersep> scope <identifiersep> variable ( ) ) { \n \t3 json <identifiersep> response = vars . get ( get <identifiersep> variable <identifiersep> name ( ) ) ; \n <ect>
\t1 verify <identifiersep> setup ( <string_literal> + db <identifiersep> name + <string_literal> , empty , driver <identifiersep> mirror ) ; } \n @ test \n public void test <identifiersep> truncate <identifiersep> with <identifiersep> cm ( ) throws io <identifiersep> exception { \n \t1 string test <identifiersep> name = <string_literal> ; \n <ect>
\t5 null ) . get <identifiersep> connection ( ) ; \n \t3 http <identifiersep> response response = utils . do <identifiersep> read <identifiersep> operation ( url <identifiersep> connection ) ; \n \t3 if ( ! response . is <identifiersep> success <identifiersep> code ( ) ) { \n \t4 if ( response . is <identifiersep> auth <identifiersep> denied ( ) ) { \n <ect>
\t2 for ( gt <identifiersep> record rec : gen . generate ( n ) ) { \n \t3 builder . write ( rec ) ; \n \t3 count ++ ; \n \t3 if ( count % <number_literal> == 0 ) \n <ect>
\t3 assert <identifiersep> equals ( <string_literal> , in . get <identifiersep> header ( <string_literal> ) , counter ) ; \n \t3 map < ? , ? > body = in . get <identifiersep> body ( map . class ) ; \n \t3 assert <identifiersep> not <identifiersep> null ( <string_literal> + object <identifiersep> helper . class <identifiersep> name ( in . get <identifiersep> body ( ) ) , body ) ; \n \t3 assert <identifiersep> equals ( <string_literal> , expected <identifiersep> first <identifiersep> name [ counter ] , body . get ( <string_literal> ) ) ; \n <ect>
\t3 worker . interrupt ( ) ; \n \t3 try { \n \t4 worker . join ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 int retry = 0 ; \n \t2 while ( true ) { \n \t3 try { \n \t4 if ( retry > 0 ) { \n <ect>
\t2 <comment> \n \t2 start <identifiersep> stopwatch ( ) ; \n \t2 assert <identifiersep> parameter ( max <identifiersep> failover <identifiersep> attempts >= 0 , <string_literal> ) ; \n <ect>
\t5 if ( i % <number_literal> / sleep <identifiersep> time == <number_literal> / sleep <identifiersep> time - 1 ) \n \t6 log . error ( <string_literal> + block . rule <identifiersep> name + <string_literal> + next <identifiersep> block . get <identifiersep> hash ( ) ) ; \n \t5 thread . sleep ( sleep <identifiersep> time ) ; \n \t5 if ( i > <number_literal> / sleep <identifiersep> time ) { \n <ect>
\t1 for ( service <identifiersep> info service : services . values ( ) ) { \n \t2 log . debug ( string . format ( <string_literal> , service ) ) ; \n \t2 file dir = service . get <identifiersep> server <identifiersep> actions <identifiersep> folder ( ) ; \n \t2 if ( dir != null ) { \n <ect>
\t4 splitters . add ( splitter ) ; } \n \t2 } else { \n \t3 <comment> \n <ect>
\t2 if ( ordered <identifiersep> handlers . put <identifiersep> if <identifiersep> absent ( topic , c ) == null ) { \n \t3 cctx . grid <identifiersep> io ( ) . add <identifiersep> message <identifiersep> listener ( topic , new ordered <identifiersep> message <identifiersep> listener ( \n \t4 ( grid <identifiersep> bi <identifiersep> in <identifiersep> closure < uuid , grid <identifiersep> cache <identifiersep> message < k , v > > ) c ) ) ; \n <ect>
\t7 resp . send <identifiersep> error ( webdav <identifiersep> status . sc <identifiersep> method <identifiersep> failure ) ; } \n \t5 } else { \n \t6 resp . send <identifiersep> error ( webdav <identifiersep> status . sc <identifiersep> bad <identifiersep> request ) ; } } \n \t3 } catch ( lock <identifiersep> failed <identifiersep> exception e ) { \n <ect>
\t2 reload <identifiersep> constraints ( ) ; \n \t2 try { \n \t2 setup <identifiersep> default <identifiersep> security <identifiersep> labels ( extent ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public long get <identifiersep> version ( ) \t6 { return version ; } \n \t1 <comment> void set <identifiersep> active <identifiersep> dataset ( dataset <identifiersep> graph <identifiersep> txn activedsg ) { \n \t2 this . activedsg = activedsg ; \n \t2 if ( activedsg . get <identifiersep> transaction ( ) != this ) \n <ect>
\t2 assert <identifiersep> equals ( <number_literal> * <number_literal> , broker . get <identifiersep> admin <identifiersep> view ( ) . get <identifiersep> job <identifiersep> scheduler <identifiersep> store <identifiersep> limit ( ) ) ; \n \t2 assert <identifiersep> true ( <string_literal> , wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n <ect>
\t1 if ( ! ( init <identifiersep> codahale <identifiersep> metrics <identifiersep> reporter <identifiersep> classes ( ) || init <identifiersep> metrics <identifiersep> reporter ( ) ) ) { \n \t1 logger . warn ( <string_literal> ) ; } \n \t1 if ( reporters . is <identifiersep> empty ( ) ) { \n \t1 <comment> \n <ect>
\t6 string . value <identifiersep> of ( system . current <identifiersep> time <identifiersep> millis ( ) ) , \n \t6 <string_literal> , \n \t6 string . value <identifiersep> of ( routing <identifiersep> type ) ) ; \n \t3 response <identifiersep> code = conn . get <identifiersep> response <identifiersep> code ( ) ; \n <ect>
\t3 for ( int j = 0 ; j < <number_literal> ; j ++ ) { \n \t4 c . set <identifiersep> property ( <string_literal> + j , node <identifiersep> store . create <identifiersep> blob ( random <identifiersep> stream ( j , <number_literal> ) ) ) ; } } \n \t2 node <identifiersep> store . merge ( a , empty <identifiersep> hook . instance , commit <identifiersep> info . empty ) ; \n \t2 final long data <identifiersep> size = store . get <identifiersep> stats ( ) . get <identifiersep> approximate <identifiersep> size ( ) ; \n <ect>
\t2 file <identifiersep> utils . write <identifiersep> lines ( master <identifiersep> key <identifiersep> file , <string_literal> , lines ) ; \n \t2 <comment> \n \t2 protect <identifiersep> access ( master <identifiersep> key <identifiersep> file ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> get <identifiersep> job <identifiersep> bookmarks ( ) throws exception { \n \t2 final org . apache . camel . component . linkedin . api . model . job <identifiersep> bookmarks result = request <identifiersep> body ( <string_literal> , null ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t2 message <identifiersep> consumer consumer = session . create <identifiersep> consumer ( destination ) ; \n \t2 text <identifiersep> message msg = null ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 msg = ( text <identifiersep> message ) consumer . receive ( <number_literal> ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void visit ( final op <identifiersep> table op <identifiersep> table ) { \n <ect>
\t1 fs = file <identifiersep> system . get <identifiersep> local ( hive <identifiersep> conf ) ; \n \t1 base <identifiersep> fs <identifiersep> dir = new path ( <string_literal> + base <identifiersep> dir . to <identifiersep> uri ( ) . get <identifiersep> path ( ) ) ; \n \t1 if ( cleanup <identifiersep> local <identifiersep> dir <identifiersep> on <identifiersep> startup ) { \n \t2 <comment> \n <ect>
\t1 try { \n \t1 clazz = class . for <identifiersep> name ( class <identifiersep> name ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t1 <comment> \n <ect>
\t2 { \n \t3 actual . handle ( incoming <identifiersep> message ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t4 current <identifiersep> pw = pw ; \n \t4 return true ; \n \t3 } else if ( rep <identifiersep> impersonators . equals ( prop <identifiersep> name ) ) { \n \t4 if ( a . is <identifiersep> group ( ) || ! is <identifiersep> valid ( def , mix <identifiersep> rep <identifiersep> impersonatable , true ) ) { \n <ect>
\t4 abstract <identifiersep> handler . active <identifiersep> session . remove ( ) ; \n \t4 session . logout ( ) ; \n \t4 logger . debug ( <string_literal> ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 pair < boolean , boolean > pair = all . fit <identifiersep> in <identifiersep> segments ( seg ) ; \n \t3 boolean start <identifiersep> fit = pair . get <identifiersep> first ( ) ; \n \t3 boolean end <identifiersep> fit = pair . get <identifiersep> second ( ) ; \n \t3 if ( ! start <identifiersep> fit ) \n <ect>
\t2 public void on <identifiersep> failure ( string source , exception e ) { \n \t3 if ( e instanceof resource <identifiersep> already <identifiersep> exists <identifiersep> exception ) { \n \t4 logger . trace ( ( ) - > new parameterized <identifiersep> message ( <string_literal> , request . index ( ) ) , e ) ; \n \t3 } else { \n <ect>
\t1 m <identifiersep> bean <identifiersep> server <identifiersep> connection con = connector . get <identifiersep> connection ( ) ; \n \t1 for ( object <identifiersep> name query : queries ) { \n \t2 set < object <identifiersep> name > names = con . query <identifiersep> names ( query , null ) ; \n \t2 if ( names . is <identifiersep> empty ( ) ) { \n <ect>
\t5 for ( firewall <identifiersep> rule vpn <identifiersep> fw <identifiersep> rule : vpn <identifiersep> fw <identifiersep> rules ) { \n \t6 <comment> \n \t6  <identifiersep> firewall <identifiersep> mgr . revoke <identifiersep> related <identifiersep> firewall <identifiersep> rule ( vpn <identifiersep> fw <identifiersep> rule . get <identifiersep> id ( ) , false ) ; \n \t6 fw <identifiersep> rules . add (  <identifiersep> rules <identifiersep> dao . find <identifiersep> by <identifiersep> related <identifiersep> id ( vpn <identifiersep> fw <identifiersep> rule . get <identifiersep> id ( ) ) ) ; } \n <ect>
\t3 int i = 1 ; \n \t3 if ( last <identifiersep> processed <identifiersep> event != null ) { \n \t4 pstmt . set <identifiersep> long ( i ++ , last <identifiersep> processed <identifiersep> event ) ; } \n \t3 result <identifiersep> set rs = pstmt . execute <identifiersep> query ( ) ; \n <ect>
\t3 memcached <identifiersep> client . delete ( <string_literal> ) ; \n \t3 value = memcached <identifiersep> client . get ( <string_literal> ) ; \n \t3 system . out . println ( <string_literal> + value ) ; \n \t2 } catch ( memcached <identifiersep> exception e ) { \n <ect>
\t2 log . debug ( <string_literal> , member <identifiersep> attribute <identifiersep> value ) ; \n \t2 } else { \n \t2 log . warn ( <string_literal> , pattern , member <identifiersep> attribute <identifiersep> value ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t7 create <identifiersep> load <identifiersep> balancer <identifiersep> appliance <identifiersep> answer create <identifiersep> lb <identifiersep> answer = null ; \n \t7 try { \n \t8 create <identifiersep> lb <identifiersep> answer = ( create <identifiersep> load <identifiersep> balancer <identifiersep> appliance <identifiersep> answer )  <identifiersep> agent <identifiersep> mgr . easy <identifiersep> send ( lb <identifiersep> provider <identifiersep> device . get <identifiersep> host <identifiersep> id ( ) , lb <identifiersep> provision <identifiersep> cmd ) ; \n \t8 if ( create <identifiersep> lb <identifiersep> answer == null || ! create <identifiersep> lb <identifiersep> answer . get <identifiersep> result ( ) ) { \n <ect>
\t3 if ( this . map <identifiersep> inbound <identifiersep> priority ) { \n \t4 try { \n \t5 headers . put ( integration <identifiersep> message <identifiersep> header <identifiersep> accessor . priority , jms <identifiersep> message . get <identifiersep> jms <identifiersep> priority ( ) ) ; } \n \t4 catch ( exception e ) { \n <ect>
\t4 throw new resource <identifiersep> unavailable <identifiersep> exception ( <string_literal> + router . get <identifiersep> state ( ) , data <identifiersep> center . class , network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; } } \n \t2 return result ; } \n \t1 private domain <identifiersep> router <identifiersep> vo start ( domain <identifiersep> router <identifiersep> vo router , user user , account caller , map < param , object > params , deployment <identifiersep> plan plan <identifiersep> to <identifiersep> deploy ) throws storage <identifiersep> unavailable <identifiersep> exception , insufficient <identifiersep> capacity <identifiersep> exception , \n \t1 concurrent <identifiersep> operation <identifiersep> exception , resource <identifiersep> unavailable <identifiersep> exception { \n <ect>
\t3 public void on <identifiersep> command ( object command ) { \n \t4 log . debug ( <string_literal> + command ) ; \n \t4 if ( command instanceof broker <identifiersep> info ) { \n \t5 current <identifiersep> broker <identifiersep> info = ( broker <identifiersep> info ) command ; \n <ect>
\t3 if ( project == null ) { \n \t4 throw new bad <identifiersep> request <identifiersep> exception ( <string_literal> + project <identifiersep> name + <string_literal> ) ; } \n \t3 cube <identifiersep> service . create <identifiersep> cube <identifiersep> and <identifiersep> desc ( project , desc ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 int c = green <identifiersep> mail . get <identifiersep> received <identifiersep> messages ( ) . length ; \n \t4 if ( green <identifiersep> mail . wait <identifiersep> for <identifiersep> incoming <identifiersep> email ( long . max <identifiersep> value , c + 1 ) ) { \n \t5 mime <identifiersep> message m = green <identifiersep> mail . get <identifiersep> received <identifiersep> messages ( ) [ c ++ ] ; \n \t5 log . info ( <string_literal> ) ; \n <ect>
\t3 if ( result instanceof exception ) \n \t3 { \n \t4 exception ex = ( exception ) result ; \n \t4 final exception ex <identifiersep> clean = exception <identifiersep> sanitizer . transform ( ex ) ; \n <ect>
\t6 for ( security <identifiersep> group <identifiersep> vo security <identifiersep> group : unique <identifiersep> groups ) { \n \t7 <comment> \n \t7 security <identifiersep> group <identifiersep> vo ngrp <identifiersep> lock =  <identifiersep> security <identifiersep> group <identifiersep> dao . lock <identifiersep> row ( security <identifiersep> group . get <identifiersep> id ( ) , false ) ; \n \t7 if ( ngrp <identifiersep> lock == null ) { \n <ect>
\t3 new <identifiersep> link = new compact <identifiersep> object <identifiersep> property <identifiersep> link ( new <identifiersep> id , ( ( compact <identifiersep> object <identifiersep> property <identifiersep> link ) this ) . get <identifiersep> object <identifiersep> property <identifiersep> type ( ) ) ; \n \t2 else if ( this instanceof compact <identifiersep> sub <identifiersep> class <identifiersep> link ) \n \t3 new <identifiersep> link = new compact <identifiersep> sub <identifiersep> class <identifiersep> link ( new <identifiersep> id ) ; \n \t2 else \n <ect>
\t4 log . error ( <string_literal> <string_literal> \\ <string_literal> <string_literal> \\ <string_literal> ) ; \n \t3 } else { \n \t4 named <identifiersep> plugin <identifiersep> classes . put ( key , classname ) ; } \n <ect>
\t3 if ( icon . matches ( <string_literal> ) ) { \n \t4 try { \n \t5 bi = image <identifiersep> io . read ( new url ( icon ) ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 <comment> \n \t4  <identifiersep> it <identifiersep> mgr . advance <identifiersep> start ( vm . get <identifiersep> uuid ( ) , params , null ) ; \n \t3 } catch ( insufficient <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t5 int ramplevel = get <identifiersep> ramp <identifiersep> level ( conf , <number_literal> ) ; \n \t5 byte cmd2 = encode ( ramptime , ramplevel ) ; \n \t5 msg m = dev . make <identifiersep> standard <identifiersep> message ( ( byte ) 0x0f , get <identifiersep> on <identifiersep> cmd ( ) , cmd2 , s <identifiersep> get <identifiersep> group ( conf ) ) ; \n \t5 dev . enqueue <identifiersep> message ( m , m <identifiersep> feature ) ; \n <ect>
\t1 } catch ( interrupted <identifiersep> exception e ) { \n \t1 logger . debug ( <string_literal> ) ; \n \t1 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t1 lifecycle <identifiersep> state = lifecycle <identifiersep> state . stop ; \n <ect>
\t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> ) ; } \n \t2 protocol <identifiersep> binding <identifiersep> provider provider = find <identifiersep> first <identifiersep> matching <identifiersep> binding <identifiersep> provider ( item <identifiersep> name ) ; \n \t2 if ( provider == null ) { \n <ect>
\t2 if ( failover <identifiersep> region == null ) { \n \t3 execution <identifiersep> graph . fail <identifiersep> global ( new flink <identifiersep> exception ( \n \t5 <string_literal> + ev . get <identifiersep> task <identifiersep> name <identifiersep> with <identifiersep> subtask <identifiersep> index ( ) , cause ) ) ; } \n \t2 else { \n <ect>
\t4 } else { \n \t5 max <identifiersep> journal <identifiersep> file <identifiersep> size = default <identifiersep> max <identifiersep> file <identifiersep> length ; } \n \t4 long store <identifiersep> limit = usage . get <identifiersep> temp <identifiersep> usage ( ) . get <identifiersep> limit ( ) ; \n \t4 if ( store <identifiersep> limit > 0 && store <identifiersep> limit < max <identifiersep> journal <identifiersep> file <identifiersep> size ) { \n <ect>
\t8 output . get <identifiersep> name ( ) . substring ( 0 , output . get <identifiersep> name ( ) . length ( ) - <number_literal> ) + <string_literal> ) ; \n \t6 final file old <identifiersep> index = new file ( sole <identifiersep> input . get <identifiersep> parent ( ) , \n \t8 sole <identifiersep> input . get <identifiersep> name ( ) . substring ( 0 , sole <identifiersep> input . get <identifiersep> name ( ) . length ( ) - <number_literal> ) + <string_literal> ) ; \n \t6 if ( ! new <identifiersep> index . rename <identifiersep> to ( old <identifiersep> index ) ) { \n <ect>
\t7 <comment> \n \t7 properties = prepare <identifiersep> bindy <identifiersep> properties ( name , properties ) ; \n \t7 properties = prepare <identifiersep> json <identifiersep> properties ( name , properties ) ; \n \t7 string schema = create <identifiersep> parameter <identifiersep> json <identifiersep> schema ( data <identifiersep> format <identifiersep> model , properties ) ; \n <ect>
\t2 for ( string f : optional <identifiersep> configs ) { \n \t3 try { \n \t3 copy <identifiersep> config ( lfs , conf <identifiersep> path , f ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t3 hdfs <identifiersep> api <identifiersep> map . put ( get <identifiersep> key ( context ) , api ) ; \n \t3 return optional . of ( api ) ; } } } \n \t1 return optional . of ( hdfs <identifiersep> api <identifiersep> map . get ( get <identifiersep> key ( context ) ) ) ; \n \t1 } catch ( hdfs <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t3 hardened <identifiersep> logging <identifiersep> event <identifiersep> input <identifiersep> stream = new hardened <identifiersep> logging <identifiersep> event <identifiersep> input <identifiersep> stream ( new buffered <identifiersep> input <identifiersep> stream ( socket . get <identifiersep> input <identifiersep> stream ( ) ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 int lookup <identifiersep> table <identifiersep> offset = rf . read <identifiersep> short ( ) ; \n \t3 lookup <identifiersep> table <identifiersep> offsets . add ( lookup <identifiersep> table <identifiersep> offset ) ; } \n \t2 <comment> \n \t2 for ( int i = 0 ; i < lookup <identifiersep> count ; i ++ ) { \n <ect>
\t1 <comment> \n \t1 not <identifiersep> found = ( unified <identifiersep> repository . get <identifiersep> file <identifiersep> by <identifiersep> id ( acl <identifiersep> node . get <identifiersep> id ( ) ) == null ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 entity . set <identifiersep> chunked ( true ) ; \n \t4 entity . set <identifiersep> content <identifiersep> type ( content <identifiersep> type ) ; \n \t4 method . set <identifiersep> entity ( entity ) ; \n \t4 for ( string key : metadata . key <identifiersep> set ( ) ) { \n <ect>
\t4 this . add <identifiersep> error ( new expander <identifiersep> exception ( <string_literal> + exp , \n <number_literal> line ) ) ; } \n \t3 return exp ; } \n \t2 if ( show <identifiersep> single <identifiersep> steps ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 database <identifiersep> updater . updates <identifiersep> required ( ) ; } \n \t2 catch ( runtime <identifiersep> exception rex ) { \n <ect>
<comment> \n \t1 public void write <identifiersep> message ( string message ) { \n \t2 logger . debug ( <string_literal> + message ) ; \n \t2 if ( b <identifiersep> writer == null ) { \n <ect>
\t5 answer = new xa <identifiersep> transaction <identifiersep> id [ data . length ] ; \n \t5 system . arraycopy ( data , 0 , answer , 0 , data . length ) ; } \n \t3 } catch ( jms <identifiersep> exception e ) { \n \t4 throw to <identifiersep> xa <identifiersep> exception ( e ) ; } } \n <ect>
\t2 <comment> \n \t2 if ( ! producer <identifiersep> config . contains <identifiersep> key ( producer <identifiersep> config . key <identifiersep> serializer <identifiersep> class <identifiersep> config ) ) { \n \t3 this . producer <identifiersep> config . put ( producer <identifiersep> config . key <identifiersep> serializer <identifiersep> class <identifiersep> config , byte <identifiersep> array <identifiersep> serializer . class . get <identifiersep> name ( ) ) ; \n \t2 } else { \n <ect>
\t1 if ( ! tables . exists ( context . get <identifiersep> instance ( ) , table <identifiersep> id ) ) \n \t2 throw new table <identifiersep> deleted <identifiersep> exception ( table <identifiersep> id . canonical <identifiersep> id ( ) ) ; \n \t1 if ( tables . get <identifiersep> table <identifiersep> state ( context . get <identifiersep> instance ( ) , table <identifiersep> id ) == table <identifiersep> state . offline ) \n \t2 throw new table <identifiersep> offline <identifiersep> exception ( context . get <identifiersep> instance ( ) , table <identifiersep> id . canonical <identifiersep> id ( ) ) ; \n <ect>
public void stop ( ) throws eucalyptus <identifiersep> cloud <identifiersep> exception { \n \t1 log . debug ( <string_literal> ) ; \n \t1 <comment> \n \t1 <comment> \n <ect>
\t1 private volatile int cluster <identifiersep> concurrent <identifiersep> rebalance ; \n \t1 public concurrent <identifiersep> rebalance <identifiersep> allocation <identifiersep> decider ( settings settings , cluster <identifiersep> settings cluster <identifiersep> settings ) { \n \t2 super ( settings ) ; \n \t2 this . cluster <identifiersep> concurrent <identifiersep> rebalance = cluster <identifiersep> routing <identifiersep> allocation <identifiersep> cluster <identifiersep> concurrent <identifiersep> rebalance <identifiersep> setting . get ( settings ) ; \n <ect>
\t3 { \n \t4 apply <identifiersep> config ( load <identifiersep> config ( ) ) ; } } \n \t2 catch ( configuration <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 this . batch <identifiersep> size = batch <identifiersep> size ; \n \t2 this . db <identifiersep> columns = columns ; \n \t2 this . database <identifiersep> service = database <identifiersep> service ; \n \t2 this . db <identifiersep> query <identifiersep> info = db <identifiersep> query <identifiersep> info ; \n <ect>
\t4 log . error ( <string_literal> , this . name , ioe ) ; \n \t4 try { \n \t5 this . store . stop ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 if ( ! ( allow <identifiersep> pf || allow <identifiersep> static <identifiersep> nat || one <identifiersep> of <identifiersep> rules <identifiersep> is <identifiersep> firewall || allow <identifiersep> vpn <identifiersep> pf || allow <identifiersep> vpn <identifiersep> lb ) ) { \n \t5 throw new network <identifiersep> rule <identifiersep> conflict <identifiersep> exception ( <string_literal> + new <identifiersep> rule . get <identifiersep> source <identifiersep> port <identifiersep> start ( ) + <string_literal> + new <identifiersep> rule . get <identifiersep> source <identifiersep> port <identifiersep> end ( ) + \n \t6 <string_literal> + rule . get <identifiersep> id ( ) + <string_literal> + rule . get <identifiersep> source <identifiersep> port <identifiersep> start ( ) + <string_literal> + rule . get <identifiersep> source <identifiersep> port <identifiersep> end ( ) ) ; } } } \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 if ( dynamic <identifiersep> max <identifiersep> ram > static <identifiersep> max ) { <comment> \n \t3 <comment> \n <ect>
\t3 for ( event <identifiersep> notifier notifier : cal <identifiersep> dav <identifiersep> loader <identifiersep> impl . instance . get <identifiersep> event <identifiersep> listener <identifiersep> list ( ) ) { \n \t4 try { \n \t5 notifier . calendar <identifiersep> reloaded ( config ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 res . add <identifiersep> header ( x <identifiersep> atmosphere <identifiersep> error , <string_literal> ) ; \n \t3 res . flush <identifiersep> buffer ( ) ; \n \t3 return new action ( ) ; } \n \t2 if ( utils . web <identifiersep> socket <identifiersep> enabled ( req ) && ! support <identifiersep> web <identifiersep> socket ( ) ) { \n <ect>
\t2 string path = path ( workspace <identifiersep> name , store <identifiersep> name , feature <identifiersep> type <identifiersep> name ) ; \n \t2 resource directory = resources . get ( path ) ; \n \t2 resource resource = file <identifiersep> upload ( directory , filename , request ) ; \n \t2 if ( logger . is <identifiersep> loggable ( level . info ) ) { \n <ect>
\t3 assert . fail ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> enumerated <identifiersep> name <identifiersep> list <identifiersep> with <identifiersep> threads ( ) throws exception { \n <ect>
\t1 public on <identifiersep> disk <identifiersep> index <identifiersep> builder add ( byte <identifiersep> buffer term , decorated <identifiersep> key key , long key <identifiersep> position ) \n \t1 { \n \t2 if ( term . remaining ( ) >= max <identifiersep> term <identifiersep> size ) \n \t2 { \n <ect>
\t2 private static void guess <identifiersep> file <identifiersep> extension ( volume <identifiersep> object <identifiersep> to vol <identifiersep> info ) \n \t2 { \n \t3 if ( string . is <identifiersep> null <identifiersep> or <identifiersep> empty ( vol <identifiersep> info . format ) ) \n \t3 { \n <ect>
with compiler [ generic <identifiersep> input <identifiersep> format [ row ] ] \n with logging { \n private var format : generic <identifiersep> input <identifiersep> format [ row ] =  <identifiersep>  \n override def open ( split : generic <identifiersep> input <identifiersep> split ) : unit = { \n <ect>
\t2 <comment> \n \t2 this . spawn <identifiersep> mesh = new spawn <identifiersep> mesh ( this ) ; \n \t2 <comment> \n \t2 if ( <string_literal> . equals ( queue <identifiersep> type ) ) { \n <ect>
\t3 string pw = userpw . substring ( seperator <identifiersep> index + 1 ) ; \n \t3 atr = get <identifiersep> token ( user , pw ) ; \n \t3 token <identifiersep> string = atr . get <identifiersep> token ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 output <identifiersep> stream out = s . get <identifiersep> output <identifiersep> stream ( ) ; \n \t3 out . write ( data <identifiersep> helper . get <identifiersep> ascii ( <string_literal> ) ) ; \n \t3 buffered <identifiersep> reader reader = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( s . get <identifiersep> input <identifiersep> stream ( ) ) ) ; \n \t3 string line = reader . read <identifiersep> line ( ) ; \n <ect>
\t6 title , \n \t6 popup <identifiersep> dialog . error <identifiersep> message ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n <ect>
\t5 return answer ; } \n \t3 } ; \n \t3 private void debug <identifiersep> in ( string string <identifiersep> id , exchange old <identifiersep> exchange , exchange new <identifiersep> exchange ) { \n \t4 if ( old <identifiersep> exchange != null ) { \n <ect>
\t4 try { \n \t5 log . info ( <string_literal> ) ; \n \t5 consumer <identifiersep> session . rollback ( ) ; \n \t4 } catch ( jms <identifiersep> exception e ) { \n <ect>
\t2 options db <identifiersep> options = new options ( ) . set <identifiersep> create <identifiersep> missing <identifiersep> column <identifiersep> families ( true ) . set <identifiersep> create <identifiersep> if <identifiersep> missing ( true ) ; \n \t2 init <identifiersep> db ( list , db <identifiersep> options ) ; } \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 public void init <identifiersep> db ( list < integer > list , options db <identifiersep> options ) throws exception { \n <ect>
\t3 listener . start ( ) ; \n \t2 } else { \n \t3 log . error ( <string_literal> ) ; } \n \t2 int port = peers . get ( peer . get <identifiersep> id ( ) ) . election <identifiersep> addr . get <identifiersep> port ( ) ; \n <ect>
\t2 try { \n \t3 configuration . set <identifiersep> endpoint <identifiersep> parameter ( endpoint , <string_literal> , <number_literal> ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( invalid <identifiersep> property <identifiersep> exception e ) { \n <ect>
\t1 public caching <identifiersep> ticket <identifiersep> registry ( final cipher <identifiersep> executor cipher <identifiersep> executor , final logout <identifiersep> manager logout <identifiersep> manager ) { \n \t2 super ( cipher <identifiersep> executor ) ; \n \t2 this . storage = caffeine . new <identifiersep> builder ( ) . initial <identifiersep> capacity ( initial <identifiersep> cache <identifiersep> size ) . maximum <identifiersep> size ( max <identifiersep> cache <identifiersep> size ) \n \t3 . expire <identifiersep> after ( new cached <identifiersep> ticket <identifiersep> expiration <identifiersep> policy ( ) ) . removal <identifiersep> listener ( new cached <identifiersep> ticket <identifiersep> removal <identifiersep> listener ( ) ) . build ( s - > { \n <ect>
\t5 wait ( ) ; \n \t5 assert ( signalled ) ; \n \t5 return signalled ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public void on <identifiersep> client <identifiersep> connected ( ) { } \n \t1 @ override \n \t1 public void on <identifiersep> client <identifiersep> close ( ) { \n <ect>
\t1 conn = get <identifiersep> data <identifiersep> source ( ) . get <identifiersep> connection ( ) ; \n \t1 stmt = conn . prepare <identifiersep> statement ( set <identifiersep> preference <identifiersep> sql ) ; \n \t1 set <identifiersep> long <identifiersep> parameter ( stmt , 1 , user <identifiersep> id ) ; \n \t1 set <identifiersep> long <identifiersep> parameter ( stmt , <number_literal> , item <identifiersep> id ) ; \n <ect>
\t5 key = key . substring ( index + 1 ) ; \n \t5 string neighbor <identifiersep> prot = key . trim ( ) ; \n \t5 protocol neighbor = find <identifiersep> protocol ( neighbor <identifiersep> prot ) ; \n \t5 if ( neighbor == null ) { \n <ect>
\t3 int stage <identifiersep> attempt <identifiersep> id = task <identifiersep> end . stage <identifiersep> attempt <identifiersep> id ( ) ; \n \t3 string stage <identifiersep> identifier = stage <identifiersep> id + <string_literal> + stage <identifiersep> attempt <identifiersep> id ; \n \t3 integer job <identifiersep> id = stage <identifiersep> id <identifiersep> to <identifiersep> job <identifiersep> id . get ( stage <identifiersep> id ) ; \n \t3 if ( job <identifiersep> id == null ) { \n <ect>
\t1 codec = get <identifiersep> hadoop <identifiersep> compression <identifiersep> codec ( ) ; \n \t1 } else { \n \t1 log . info ( <string_literal> ) ; \n \t1 codec = compression <identifiersep> codec <identifiersep> name . uncompressed ; } \n <ect>
\t3 string summary = nodes <identifiersep> delta . short <identifiersep> summary ( ) ; \n \t3 if ( summary . length ( ) > 0 ) { \n \t4 logger . info ( <string_literal> , summary , task . source ) ; } } \n \t2 node <identifiersep> connections <identifiersep> service . connect <identifiersep> to <identifiersep> nodes ( new <identifiersep> cluster <identifiersep> state . nodes ( ) ) ; \n <ect>
\t3 final string br <identifiersep> name = link <identifiersep> local . get <identifiersep> bridge ( conn ) ; \n \t3 call <identifiersep> host <identifiersep> plugin ( conn , <string_literal> , <string_literal> , <string_literal> , br <identifiersep> name ) ; \n \t3  <identifiersep> host . set <identifiersep> link <identifiersep> local <identifiersep> network ( link <identifiersep> local . get <identifiersep> uuid ( conn ) ) ; \n \t2 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 ejb <identifiersep> remote <identifiersep> resource remote <identifiersep> resource = get <identifiersep> remote <identifiersep> resource ( ) ; \n \t2 log . info ( <string_literal> + remote <identifiersep> resource ) ; \n \t2 int result = remote <identifiersep> resource . verify <identifiersep> injection ( ) ; \n <ect>
\t1 db <identifiersep> name = normalize <identifiersep> identifier ( db <identifiersep> name ) ; \n \t1 list < m <identifiersep> partition <identifiersep> column <identifiersep> privilege > m <identifiersep> security <identifiersep> col <identifiersep> list = null ; \n \t1 try { \n \t1 open <identifiersep> transaction ( ) ; \n <ect>
\t4 try { \n \t5 client . set <identifiersep> detached ( false ) ; \n \t5 client . submit <identifiersep> job ( job <identifiersep> graph , kafka <identifiersep> consumer <identifiersep> test <identifiersep> base . class . get <identifiersep> class <identifiersep> loader ( ) ) ; } \n \t4 catch ( throwable t ) { \n <ect>
\t3 log . warn ( <string_literal> + filename ) ; \n \t3 return ; } \n \t2 statement manifest <identifiersep> item <identifiersep> stmt = manifest <identifiersep> stmts . next <identifiersep> statement ( ) ; \n \t2 if ( manifest <identifiersep> stmts . has <identifiersep> next ( ) ) { \n <ect>
\t2 <comment> \n \t2 synchronized ( active <identifiersep> backups ) { \n \t3 <comment> \n \t3 if ( active <identifiersep> backups . contains ( dsg ) ) \n <ect>
\t7 if ( cb != null ) cb . on <identifiersep> success ( ) ; } \n \t3 } ) ; \n \t3 synchronized ( this ) { \n \t4 if ( uom <identifiersep> fetcher != null ) { \n <ect>
\t2 final multifactor <identifiersep> authentication <identifiersep> provider rest <identifiersep> provider = providers . stream ( ) . filter ( p - > p . matches ( results ) ) . find <identifiersep> first ( ) . or <identifiersep> else ( null ) ; \n \t2 if ( rest <identifiersep> provider != null ) { \n \t3 logger . debug ( <string_literal> , rest <identifiersep> provider . get <identifiersep> id ( ) ) ; \n \t3 return collection <identifiersep> utils . wrap <identifiersep> set ( new event ( this , rest <identifiersep> provider . get <identifiersep> id ( ) ) ) ; } \n <ect>
\t1 if ( e instanceof ambari <identifiersep> exception ) { \n \t2 log . error ( <string_literal> , e ) ; \n \t2 throw ( ambari <identifiersep> exception ) e ; \n \t1 } else { \n <ect>
@ cluster <identifiersep> scope ( scope = scope . test , num <identifiersep> data <identifiersep> nodes = 0 ) \n public class filtering <identifiersep> allocation <identifiersep> it extends es <identifiersep> integ <identifiersep> test <identifiersep> case { \n \t1 private final logger logger = loggers . get <identifiersep> logger ( filtering <identifiersep> allocation <identifiersep> it . class ) ; \n \t1 public void test <identifiersep> decommission <identifiersep> node <identifiersep> no <identifiersep> replicas ( ) throws exception { \n <ect>
\t4 continue ; } \n \t3 if ( success ) \n \t4 logger . error ( real <identifiersep> node <identifiersep> ping <identifiersep> test . class , <string_literal> + ping <identifiersep> id + <string_literal> ) ; \n \t3 else \n <ect>
\t4 throw new authentication <identifiersep> exception ( ) ; } \n \t3 logger . warn ( <string_literal> \n \t4 + <string_literal> , provider <identifiersep> name , failure <identifiersep> mode , provider <identifiersep> name , service ) ; \n \t3 return false ; } \n <ect>
\t3 embedded <identifiersep> transaction <identifiersep> manager . get <identifiersep> instance ( ) . begin ( ) ; \n \t3 cache . remove ( fqn , <string_literal> ) ; \n \t3 embedded <identifiersep> transaction <identifiersep> manager . get <identifiersep> instance ( ) . commit ( ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t1 } catch ( no <identifiersep> such <identifiersep> scan <identifiersep> id <identifiersep> exception e ) { \n \t1 log . debug ( <string_literal> , server , e . get <identifiersep> message ( ) , e ) ; \n \t1 throw new io <identifiersep> exception ( e ) ; \n \t1 } catch ( t <identifiersep> sample <identifiersep> not <identifiersep> present <identifiersep> exception e ) { \n <ect>
\t6 log . info ( <string_literal> , n , ctx . wc ) ; \n \t6 if ( ctx . wc == ctx . req . length ) { \n \t7 ctx . req <identifiersep> sent = true ; \n <comment> \n <ect>
\t2 <comment> \n \t3 log . info ( <string_literal> , query <identifiersep> id <identifiersep> string ) ; } \n \t2 return null ; } \n <ect>
\t4  <identifiersep> handlers . clear ( ) ; } } \n \t2 if ( handlers != null ) { \n \t3 for ( handler handler : handlers ) { \n \t4 if (  <identifiersep> log . should <identifiersep> info ( ) ) \n <ect>
\t2 time <identifiersep> unit . milliseconds . sleep ( retry <identifiersep> interval ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n \t2 logger . info ( <string_literal> ) ; } \n \t1 } catch ( throwable t ) { \n <ect>
\t8 warn ( <string_literal> , pig <identifiersep> warning . unable <identifiersep> to <identifiersep> close <identifiersep> spill <identifiersep> file , e ) ; } } } } \n \t4 <comment> \n \t4 for ( file f : files <identifiersep> to <identifiersep> delete ) { \n \t5 if ( f . delete ( ) == false ) { \n <ect>
\t4 message message = session . create <identifiersep> text <identifiersep> message ( new string ( buf ) + messages <identifiersep> sent . to <identifiersep> string ( ) ) ; \n \t4 producer . send ( message ) ; \n \t4 messages <identifiersep> sent . increment <identifiersep> and <identifiersep> get ( ) ; \n \t4 if ( messages <identifiersep> sent . get ( ) % <number_literal> == 0 ) { \n <ect>
\t2 if ( authentication == null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( attribute <identifiersep> names . is <identifiersep> empty ( ) ) { \n <ect>
\t5 base <identifiersep> property property = ( base <identifiersep> property ) object . get ( property <identifiersep> name ) ; \n \t5 if ( property != null ) { \n \t6 value = property . get <identifiersep> value ( ) ; } } } \n \t2 } catch ( exception e ) { \n <ect>
\t3 logger . error ( <string_literal> , chunk <identifiersep> available . get <identifiersep> chunk <identifiersep> pos ( ) ) ; } } \n \t1 @ receive <identifiersep> event ( components = { world <identifiersep> component . class } ) \n \t1 public void on <identifiersep> remove <identifiersep> chunk ( before <identifiersep> chunk <identifiersep> unload chunk <identifiersep> unload , entity <identifiersep> ref world <identifiersep> entity ) { \n \t2 if ( ! loaded <identifiersep> chunks . remove ( chunk <identifiersep> unload . get <identifiersep> chunk <identifiersep> pos ( ) ) ) { \n <ect>
\t2 <comment> \n \t2 synchronized ( response ) { \n \t3 response . set <identifiersep> response <identifiersep> concede <identifiersep> check ( ) ; \n \t3 response . notify <identifiersep> all ( ) ; \n <ect>
<comment> \n \t2 public field <identifiersep> schema ( string a , schema s , byte t ) throws frontend <identifiersep> exception { \n \t3 alias = a ; \n \t3 schema = s ; \n <ect>
\t5 return new username <identifiersep> password <identifiersep> authentication <identifiersep> token ( username , password , authorities ) ; } \n \t4 logger . warn ( <string_literal> , \n \t6 username , authorizer . get <identifiersep> elements ( ) ) ; \n \t3 } else { \n <ect>
<comment> \n \t1 public static void set <identifiersep> properties ( system <identifiersep> store <identifiersep> client < string , string > version <identifiersep> store , \n \t9 versioned < properties > props ) { \n \t2 if ( props == null || props . get <identifiersep> value ( ) == null ) { \n <ect>
\t2 if ( in != null ) { \n \t3 try { \n \t4 properties . load ( in ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 disk <identifiersep> read <identifiersep> only = false ; \n \t2 minion <identifiersep> task <identifiersep> deleter = new minion <identifiersep> task <identifiersep> deleter ( ) ; \n \t2 if ( state <identifiersep> file . exists ( ) ) { \n \t3 if ( state <identifiersep> file . length ( ) == 0 ) { \n <ect>
\t2 default <identifiersep> start <identifiersep> rout <identifiersep> cmd . set <identifiersep> name (  <identifiersep> name ) ; \n \t2 default <identifiersep> start <identifiersep> rout <identifiersep> cmd . set <identifiersep> private <identifiersep> ip <identifiersep> address (  <identifiersep> agent <identifiersep> ip ) ; \n \t2 default <identifiersep> start <identifiersep> rout <identifiersep> cmd . set <identifiersep> storage <identifiersep> ip <identifiersep> address (  <identifiersep> agent <identifiersep> ip ) ; \n \t2 default <identifiersep> start <identifiersep> rout <identifiersep> cmd . set <identifiersep> pool (  <identifiersep> cluster <identifiersep> guid ) ; \n <ect>
\t3 file <identifiersep> full <identifiersep> path = ds <identifiersep> mo . search <identifiersep> file <identifiersep> in <identifiersep> sub <identifiersep> folders ( file <identifiersep> name , false , exclude <identifiersep> folders ) ; \n \t2 if ( file <identifiersep> full <identifiersep> path != null ) { \n \t3 ds <identifiersep> mo . delete <identifiersep> file ( file <identifiersep> full <identifiersep> path , dc <identifiersep> mo . get <identifiersep> mor ( ) , true , exclude <identifiersep> folders ) ; \n \t2 } else { \n <ect>
\t2 parameters . put ( ws <identifiersep> federation <identifiersep> constants . wtrealm , fed <identifiersep> request . get <identifiersep> wtrealm ( ) ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( fed <identifiersep> request . get <identifiersep> wctx ( ) ) ) { \n \t3 parameters . put ( ws <identifiersep> federation <identifiersep> constants . wctx , fed <identifiersep> request . get <identifiersep> wctx ( ) ) ; } \n \t2 model . put ( <string_literal> , parameters ) ; \n <ect>
\t3 try { \n \t4 final long pod <identifiersep> id = long . parse <identifiersep> long ( pod ) ; \n \t4 p =  <identifiersep> pod <identifiersep> dao . find <identifiersep> by <identifiersep> id ( pod <identifiersep> id ) ; \n \t3 } catch ( final number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 for ( int i = 0 ; i < test <identifiersep> message <identifiersep> count / <number_literal> ; i ++ ) { \n \t3 if ( duplicate <identifiersep> signal . get <identifiersep> count ( ) == 0 ) { \n \t4 fail ( <string_literal> ) ; } \n \t3 send <identifiersep> text <identifiersep> message ( test <identifiersep> queue <identifiersep> name , i ) ; } \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 if ( ep <identifiersep> state == null ) \n <ect>
\t4 continue ; } \n \t3 class < ? > par = parameters [ 0 ] ; \n \t3 <comment> \n \t3 if ( ! par . is <identifiersep> interface ( ) ) { \n <ect>
\t1  <identifiersep> decks = api . get ( <string_literal> ) match { \n \t2 case success ( d ) = > d . data . as [ list [ json ] ] . map ( from <identifiersep> json ) \t1 \n \t2 case  <identifiersep>  = > nil } \n \t1 if (  <identifiersep> decks . is <identifiersep> empty ) { \n <ect>
\t3 out . write ( paket ) ; \n \t3 try { \n \t4 received <identifiersep> frame <identifiersep> container . process ( serial <identifiersep> port <identifiersep> byte <identifiersep> provider . create ( serial <identifiersep> port ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
<comment> \n \t1 private collection < integer > transform ( stream <identifiersep> transformation < ? > transform ) { \n \t2 if ( already <identifiersep> transformed . contains <identifiersep> key ( transform ) ) { \n \t3 return already <identifiersep> transformed . get ( transform ) ; } \n <ect>
\t3 props . clear ( ) ; \n \t3 try { \n \t4 openmrs <identifiersep> util . load <identifiersep> properties ( props , properties <identifiersep> file . get <identifiersep> input <identifiersep> stream ( ) ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t4 set <identifiersep> response <identifiersep> object ( response ) ; \n \t3 } else { \n \t4 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , <string_literal> ) ; } \n \t2 } catch ( resource <identifiersep> in <identifiersep> use <identifiersep> exception ex ) { \n <ect>
\t3 <comment> \n \t2 return new pair < integer , string > ( - 1 , <string_literal> ) ; } \n \t1 protected answer execute ( final ip <identifiersep> assoc <identifiersep> command cmd ) { \n <ect>
\t4 database . init ( false ) ; } \n \t3 return database ; } } \n \t1 private void display <identifiersep> banner ( ) throws io <identifiersep> exception { \n \t2 logger . debug ( <string_literal> ) ; \n <ect>
\t3 <comment> \n \t3 log . debug ( <string_literal> ) ; \n \t3 <comment> \n \t3 mutable <identifiersep> object <identifiersep> iterator < tuple2 < integer , string > > iterator = merger . get <identifiersep> iterator ( ) ; \n <ect>
\t2 return collections . singleton ( scripted <identifiersep> block <identifiersep> plugin . class ) ; } \n \t1 @ override \n \t1 protected settings node <identifiersep> settings ( int node <identifiersep> ordinal ) { \n \t2 boolean low <identifiersep> level <identifiersep> cancellation = random <identifiersep> boolean ( ) ; \n <ect>
\t2 log . info ( <string_literal> + security <identifiersep> test . get <identifiersep> name ( ) + <string_literal> \n \t4 + security <identifiersep> test . get <identifiersep> test <identifiersep> case ( ) . get <identifiersep> name ( ) + <string_literal> \n \t4 + security <identifiersep> test . get <identifiersep> test <identifiersep> case ( ) . get <identifiersep> test <identifiersep> suite ( ) . get <identifiersep> name ( ) + <string_literal> ) ; \n \t2 security <identifiersep> test <identifiersep> runner runner = security <identifiersep> test . run ( null , false ) ; \n <ect>
\t5 . build ( ) ; \n \t2 return management <identifiersep> client . online ( online <identifiersep> options ) ; } \n \t1 public static model <identifiersep> node <identifiersep> result run <identifiersep> cmd ( online <identifiersep> management <identifiersep> client client , string cmd ) throws exception { \n \t2 model <identifiersep> node <identifiersep> result result = client . execute ( cmd ) ; \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t2 } catch ( unsatisfied <identifiersep> link <identifiersep> error e ) { \n \t3 logger . info ( <string_literal> ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> error e ) { \n <ect>
\t2 } catch ( authorize <identifiersep> exception ex ) { \n \t3 log . error ( <string_literal> , ex ) ; \n \t3 fail ( <string_literal> + ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t7 cert . delete ( ) ; } } \n \t4 } finally { \n \t5 ssl <identifiersep> context . free ( ssl <identifiersep> ctx ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t3 is <identifiersep> killed ? scheduler <identifiersep> fragment <identifiersep> completing <identifiersep> listener . state . killed : \n \t4 scheduler <identifiersep> fragment <identifiersep> completing <identifiersep> listener . state . failed ) ; \n \t2 return ! heartbeat ( tez <identifiersep> events ) . should <identifiersep> die ; \n \t1 } else { \n <ect>
\t3 method value <identifiersep> of = type . get <identifiersep> method ( <string_literal> , string . class ) ; \n \t3 if ( value <identifiersep> of != null ) { \n \t4 converted <identifiersep> object = value <identifiersep> of . invoke ( null , value . to <identifiersep> string ( ) ) ; \n \t3 } else { \n <ect>
\t5 non <identifiersep> empty <identifiersep> items <identifiersep> with <identifiersep> id . remove ( list ) ; \n \t5 item . set <identifiersep> deadline ( list . time <identifiersep> last <identifiersep> sent + timeout ) ; \n \t5 list . time <identifiersep> last <identifiersep> sent = now ; \n \t5 if ( ! list . items . is <identifiersep> empty ( ) ) { \n <ect>
\t4 if ( ! in <identifiersep> mutex ) \n \t5 log . warn ( <string_literal> ) ; \n \t4 in <identifiersep> mutex = false ; \n \t4 if ( ! in <identifiersep> remove ) \n <ect>
\t1 org . sonar . check . rule rule <identifiersep> annotation = annotation <identifiersep> utils . get <identifiersep> annotation ( clazz , org . sonar . check . rule . class ) ; \n \t1 if ( rule <identifiersep> annotation != null ) { \n \t1 return load <identifiersep> rule ( repo , clazz , rule <identifiersep> annotation ) ; \n \t1 } else { \n <ect>
\t4 new integer ( m ) ) ; \n \t2 this . get <identifiersep> controller ( ) . notify <identifiersep> event <identifiersep> listeners ( z <identifiersep> event ) ; } \n \t1 public serial <identifiersep> message get <identifiersep> value <identifiersep> message ( ) { \n \t2 if ( ! this . is <identifiersep> get <identifiersep> supported ) { \n <ect>
\t2 exception e = new io <identifiersep> exception ( <string_literal> ) ; \n \t2 e . init <identifiersep> cause ( new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ) ; \n \t2 helper . init ( <string_literal> , e , null ) ; \n \t2 reset ( log ) ; \n <ect>
\t4 shutdown <identifiersep> ind = false ; \n \t4 process <identifiersep> messages ( ) ; \n \t4 latch . count <identifiersep> down ( ) ; \n \t3 } catch ( exception exc ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 daemon . clear <identifiersep> jar <identifiersep> cache ( ) } \n \t2 catch ( e : remote <identifiersep> exception ) { \n <ect>
public void remove <identifiersep> from <identifiersep> pets ( er . rest . example . model . animal object ) { \n \t1 exclude <identifiersep> object <identifiersep> from <identifiersep> property <identifiersep> with <identifiersep> key ( object ,  <identifiersep> person . pets <identifiersep> key ) ; } \n public void add <identifiersep> to <identifiersep> pets <identifiersep> relationship ( er . rest . example . model . animal object ) { \n <ect>
\t2 <comment> \n \t2 account caller = call <identifiersep> context . current ( ) . get <identifiersep> calling <identifiersep> account ( ) ; \n \t2 if ( !  <identifiersep> account <identifiersep> mgr . is <identifiersep> root <identifiersep> admin ( caller . get <identifiersep> id ( ) ) ) { \n <ect>
\t2 string dest <identifiersep> name = <string_literal> + math . random ( ) ; \n \t2 test <identifiersep> dest ( host , port , con <identifiersep> options , dest <identifiersep> name ) ; \n \t2  <identifiersep> log . debug ( <string_literal> + dest <identifiersep> name + <string_literal> ) ; \n \t2 try { thread . sleep ( <number_literal> * <number_literal> ) ; } catch ( interrupted <identifiersep> exception ie ) { } \n <ect>
\t3 log . info ( <string_literal> , name ) ; \n \t3 if ( ! executor . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n \t4 log . warn ( <string_literal> , name ) ; } } \n \t2 catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 deleted <identifiersep> document <identifiersep> id ) ; \n \t3 } else { \n \t4 <comment> \n \t4 xwiki . restore <identifiersep> from <identifiersep> recycle <identifiersep> bin ( deleted <identifiersep> document . get <identifiersep> id ( ) , <string_literal> , context ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public boolean test ( string key ) { \n <ect>
\t3 } else if ( data <identifiersep> type == boolean . class ) { \n \t4 log . debug ( <string_literal> , key ) ; \n \t4 mapping . field ( <string_literal> , <string_literal> ) ; \n \t3 } else if ( data <identifiersep> type == geoshape . class ) { \n <ect>
\t6 log . error ( <string_literal> + node <identifiersep> id ) ; \n \t6 error . set ( true ) ; \n \t6 return false ; } \n \t5 if ( ! msg <identifiersep> <number_literal> . equals ( msg ) ) { \n <ect>
\t5 result . add ( new external <identifiersep> tree <identifiersep> entry ( new path ( parent <identifiersep> path ) , new path ( path ) , \n \t7 <string_literal> . equals ( is <identifiersep> module <identifiersep> a . atom <identifiersep> value ( ) ) ) ) ; } \n \t4 final string msg = <string_literal> + stopwatch ; \n \t4 if ( stopwatch . elapsed ( time <identifiersep> unit . seconds ) > <number_literal> ) { \n <ect>
\t4 op <identifiersep> set <identifiersep> pers <identifiersep> presence1 . get <identifiersep> server <identifiersep> stored <identifiersep> contact <identifiersep> list <identifiersep> root ( ) \n \t5 . get <identifiersep> group ( test <identifiersep> group <identifiersep> name2 ) ) ; } \n \t2 catch ( operation <identifiersep> failed <identifiersep> exception ex ) \n \t2 { \n <ect>
<comment> \n \t1 public void warning ( transformer <identifiersep> exception e ) throws transformer <identifiersep> exception \n \t1 { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 event <identifiersep> loop ( ) . execute ( task ) ; \n \t3 } catch ( rejected <identifiersep> execution <identifiersep> exception e ) { \n <ect>
\t4 + security <identifiersep> test . get <identifiersep> test <identifiersep> case ( ) . get <identifiersep> name ( ) + <string_literal> \n \t4 + security <identifiersep> test . get <identifiersep> test <identifiersep> case ( ) . get <identifiersep> test <identifiersep> suite ( ) . get <identifiersep> name ( ) + <string_literal> ) ; \n \t2 security <identifiersep> test <identifiersep> runner runner = security <identifiersep> test . run ( null , false ) ; \n \t2 <comment> \n <ect>
\t1 <comment> \n \t1 ast <identifiersep> node new <identifiersep> dest = new ast <identifiersep> searcher ( ) . simple <identifiersep> breadth <identifiersep> first <identifiersep> search ( new <identifiersep> ast , hive <identifiersep> parser . tok <identifiersep> query , \n \t2 hive <identifiersep> parser . tok <identifiersep> insert , hive <identifiersep> parser . tok <identifiersep> destination ) ; \n \t1 if ( new <identifiersep> dest == null ) { \n <ect>
\t2 live = false ; \n \t2 try { \n \t3 login <identifiersep> context . logout ( ) ; \n \t2 } catch ( login <identifiersep> exception e ) { \n <ect>
\t3 for ( int i = 0 ; i < str <identifiersep> arr . length ( ) ; i ++ ) { \n \t4 string c <identifiersep> name = ( string ) str <identifiersep> arr . get ( i ) ; \n \t4 logger . debug ( <string_literal> + c <identifiersep> name ) ; \n \t4 if ( h <identifiersep> table == null ) { \n <ect>
\t1 @ override \n \t1 public void destroy ( ) { \n \t2 super . destroy ( ) ; \n \t2 for ( message <identifiersep> channel <identifiersep> metrics monitor : this . channels ) { \n <ect>
\t1 public void update <identifiersep> external <identifiersep> load <identifiersep> balancer <identifiersep> network <identifiersep> usage <identifiersep> stats ( long load <identifiersep> balancer <identifiersep> rule <identifiersep> id ) { \n \t2 load <identifiersep> balancer <identifiersep> vo lb =  <identifiersep> load <identifiersep> balancer <identifiersep> dao . find <identifiersep> by <identifiersep> id ( load <identifiersep> balancer <identifiersep> rule <identifiersep> id ) ; \n \t2 if ( lb == null ) { \n <ect>
\t1 return project ; } \n private void check <identifiersep> project ( boolean is <identifiersep> issue <identifiersep> mode ) { \n \t1 if ( is <identifiersep> issue <identifiersep> mode ) { \n \t1 if ( ! project . exists ( ) ) { \n <ect>
\t2 } catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error ex ) { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( \n \t5 <string_literal> \n \t7 + <string_literal> , ex ) ; } \n <ect>
private void read <identifiersep> object ( object <identifiersep> input <identifiersep> stream stream ) throws io <identifiersep> exception , class <identifiersep> not <identifiersep> found <identifiersep> exception { \n \t1 stream . default <identifiersep> read <identifiersep> object ( ) ; \n \t1 if (  <identifiersep> serializable <identifiersep> language <identifiersep> name != null ) \n \t1 set <identifiersep> language (  <identifiersep> serializable <identifiersep> language <identifiersep> name ) ; \n <ect>
<comment> \n \t1 private void command <identifiersep> garadget ( final string item <identifiersep> name , final garadget <identifiersep> publisher publisher , command command ) { \n \t2 if ( connection == null ) { \n <ect>
\t3 if ( avoid <identifiersep> verbose ++ % <number_literal> == 0 ) { \n \t4 logger . warn ( <string_literal> + hex <identifiersep> length + <string_literal> + value <identifiersep> len + <string_literal> + bytes . to <identifiersep> string ( value , 0 , value <identifiersep> len ) + <string_literal> + avoid <identifiersep> verbose ) ; } } \n \t2 if ( value <identifiersep> len >= hex <identifiersep> length && is <identifiersep> f ( value , 0 , hex <identifiersep> length ) ) { \n \t3 if ( avoid <identifiersep> verbose2 ++ % <number_literal> == 0 ) { \n <ect>
\t1 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 kdd <identifiersep> cup <identifiersep> data <identifiersep> model model = new kdd <identifiersep> cup <identifiersep> data <identifiersep> model ( kdd <identifiersep> cup <identifiersep> data <identifiersep> model . get <identifiersep> training <identifiersep> file ( data <identifiersep> file <identifiersep> directory ) ) ; \n \t1 track2recommender recommender = new track2recommender ( model , data <identifiersep> file <identifiersep> directory ) ; \n \t1 long end = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t2 java <identifiersep> class <identifiersep> source clazz = ( java <identifiersep> class <identifiersep> source ) roaster . parse ( new file ( <string_literal> ) ) ; \n \t2 method <identifiersep> source < java <identifiersep> class <identifiersep> source > method = camel <identifiersep> java <identifiersep> parser <identifiersep> helper . find <identifiersep> configure <identifiersep> method ( clazz ) ; \n \t2 list < parser <identifiersep> result > list = camel <identifiersep> java <identifiersep> parser <identifiersep> helper . parse <identifiersep> camel <identifiersep> consumer <identifiersep> uris ( method , true , false ) ; \n \t2 for ( parser <identifiersep> result result : list ) { \n <ect>
\t1 string <identifiersep> entity se = new string <identifiersep> entity ( send <identifiersep> entity ( ) ) ; \n \t1 httpost . set <identifiersep> entity ( se ) ; \n \t1 } else { \n \t1 httpost . set <identifiersep> entity ( new url <identifiersep> encoded <identifiersep> form <identifiersep> entity ( query <identifiersep> params ( ) , send <identifiersep> encoding ( ) ) ) ; } \n <ect>
\t1 } else { \n \t2 long user <identifiersep> id = long . parse <identifiersep> long ( separator . split ( line ) [ 0 ] ) ; \n \t2 probes . add ( new generic <identifiersep> preference ( user <identifiersep> id , current <identifiersep> movie <identifiersep> id , 0 ) ) ; } } \n \t1 log . info ( <string_literal> , probes . size ( ) ) ; \n <ect>
\t7 } else if ( b == frame <identifiersep> end [ 1 ] ) { \n \t8 <comment> \n \t8 break ; \n \t7 } else { \n <ect>
\t2 if ( has <identifiersep> result ( ) ) { \n \t3 return ; } \n \t2 while ( wait <identifiersep> for <identifiersep> new <identifiersep> children ( false , timeout ) ) { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> search , level . info ) ) \n <ect>
\t1 <comment> \n \t1 return ; } \n \t1 ensure <identifiersep> current <identifiersep> state ( state . started ) ; \n \t1 change <identifiersep> state ( state . stopped ) ; \n <ect>
\t3 pushbullet <identifiersep> api <identifiersep> connector . add <identifiersep> bot ( default <identifiersep> botname , default <identifiersep> access <identifiersep> token ) ; \n \t3 pushbullet <identifiersep> api <identifiersep> connector . log <identifiersep> pushbullet <identifiersep> bots ( ) ; \n \t3 if ( pushbullet <identifiersep> api <identifiersep> connector . bot <identifiersep> count ( ) > 0 ) { \n \t4 is <identifiersep> properly <identifiersep> configured = true ; } } \n <ect>
\t6 if ( ! new <identifiersep> node . get <identifiersep> children ( ) . is <identifiersep> empty ( ) ) { \n \t7 best <identifiersep> node . set <identifiersep> combat ( new <identifiersep> node . get <identifiersep> children ( ) . get ( 0 ) . get <identifiersep> combat ( ) ) ; } } \n \t5 <comment> \n \t5 if ( val == game <identifiersep> state <identifiersep> evaluator2 . lose <identifiersep> game <identifiersep> score ) { \n <ect>
\t3 boolean result = cleanup <identifiersep> halted <identifiersep> vms ( conn ) ; \n \t3 if ( ! result ) { \n \t4 return new ready <identifiersep> answer ( cmd , <string_literal> ) ; } \n \t2 } catch ( xen <identifiersep> api <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ action <identifiersep> doc ( text = <string_literal> , returns = <string_literal> ) \n \t1 public static boolean spark <identifiersep> message ( @ param <identifiersep> doc ( name = <string_literal> , text = <string_literal> ) string msg <identifiersep> txt ) { \n \t2 if ( cisco <identifiersep> spark <identifiersep> action <identifiersep> service . default <identifiersep> room <identifiersep> id == null || <string_literal> . equals ( cisco <identifiersep> spark <identifiersep> action <identifiersep> service . default <identifiersep> room <identifiersep> id ) ) { \n <ect>
\t5 pi . remove <identifiersep> plugin <identifiersep> toadlet <identifiersep> symlink ( target ) ; \n \t5 logger . normal ( this , <string_literal> + target + \n \t6 <string_literal> + pi . get <identifiersep> plugin <identifiersep> class <identifiersep> name ( ) + ' / ' ) ; } \n \t3 } catch ( throwable ex ) { \n <ect>
\t2 { \n \t3 return map <identifiersep> util . load ( file ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t7 } catch ( socket <identifiersep> timeout <identifiersep> exception timeout <identifiersep> ex ) { \n \t8 log . info ( <string_literal> , available ) ; } \n \t6 } while ( echo <identifiersep> socket . is <identifiersep> connected ( ) && ! echo <identifiersep> socket . is <identifiersep> closed ( ) ) ; } \n \t4 } catch ( io <identifiersep> exception io <identifiersep> ex ) { \n <ect>
\t2 <comment> \n \t2 url = url . replace <identifiersep> all ( <string_literal> , <string_literal> ) ; \n \t2 logger . debug ( url ) ; \n \t2 for ( attribute att : missing <identifiersep> attributes ) \n <ect>
\t1 input <identifiersep> file . set <identifiersep> charset ( charset ) ; \n \t1 metadata metadata = file <identifiersep> metadata . read <identifiersep> metadata ( is , charset , input <identifiersep> file . absolute <identifiersep> path ( ) , exclusions <identifiersep> scanner . create <identifiersep> char <identifiersep> handler <identifiersep> for ( input <identifiersep> file . key ( ) ) ) ; \n \t1 input <identifiersep> file . set <identifiersep> metadata ( metadata ) ; \n \t1 input <identifiersep> file . set <identifiersep> status ( status <identifiersep> detection . status ( input <identifiersep> module . definition ( ) . get <identifiersep> key <identifiersep> with <identifiersep> branch ( ) , input <identifiersep> file , metadata . hash ( ) ) ) ; \n <ect>
\t5 if ( vm <identifiersep> mo != null ) { \n \t6 s <identifiersep> logger . info ( <string_literal> + cleanup <identifiersep> maid . get <identifiersep> vm <identifiersep> name ( ) + <string_literal> ) ; \n \t6 vm <identifiersep> mo . destroy ( ) ; } \n \t4 } catch ( throwable e ) { \n <ect>
\t6 } finally { \n \t7 if ( lock ) { \n \t8  <identifiersep> vols <identifiersep> dao . release <identifiersep> from <identifiersep> lock <identifiersep> table ( volume <identifiersep> id ) ; } } } \n \t4 } catch ( exception e2 ) { \n <ect>
public class clear <identifiersep> ccnd <identifiersep> cache <identifiersep> test extends ccn <identifiersep> test <identifiersep> base { \n \t1 static ccn <identifiersep> test <identifiersep> helper test <identifiersep> helper = new ccn <identifiersep> test <identifiersep> helper ( clear <identifiersep> ccnd <identifiersep> cache <identifiersep> test . class ) ; \n \t1 @ test \n \t1 public void test <identifiersep> clear <identifiersep> cache ( ) throws exception { \n <ect>
\t4 logger . warn ( <string_literal> + root <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) + <string_literal> ) ; } \n \t3 return collections . empty <identifiersep> set ( ) ; } \n \t2 if ( ! root <identifiersep> dir . can <identifiersep> read ( ) ) { \n <ect>
\t3 copy <identifiersep> vpc <identifiersep> details ( vpc <identifiersep> id , copy <identifiersep> of <identifiersep> vpc <identifiersep> id ) ; \n \t3 reassign <identifiersep> gateway <identifiersep> to <identifiersep> new <identifiersep> vpc ( vpc <identifiersep> id , copy <identifiersep> of <identifiersep> vpc <identifiersep> id ) ; \n \t3 copy <identifiersep> vpc <identifiersep> resource <identifiersep> tags <identifiersep> to <identifiersep> new <identifiersep> vpc ( vpc <identifiersep> id , copy <identifiersep> of <identifiersep> vpc <identifiersep> id ) ; \n <ect>
\t1 @ sneaky <identifiersep> throws \n \t1 public static optional < pair < resource , logger <identifiersep> context > > build <identifiersep> logger <identifiersep> context ( final environment environment , final resource <identifiersep> loader \n \t3 resource <identifiersep> loader ) { \n \t2 final string log <identifiersep> file = environment . get <identifiersep> property ( <string_literal> , <string_literal> ) ; \n <ect>
\t3 if ( out . check <identifiersep> error ( ) ) \n \t4 throw new io <identifiersep> exception ( <string_literal> + file ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 <comment> \n \t4 digester . push ( loaded <identifiersep> mbeans ) ; \n \t4 digester . parse ( stream ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 validate <identifiersep> writable <identifiersep> root <identifiersep> paths ( ) ; } \n \t1 @ override public void start ( ) { \n \t2 begin <identifiersep> phase ( 0 ) ; } \n \t1 @ override public void close ( ) throws exception { \n <ect>
\t5 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , e ) ; } \n \t4 work . set <identifiersep> step ( step . scheduled ) ; \n \t4  <identifiersep> ha <identifiersep> dao . update ( work . get <identifiersep> id ( ) , work ) ; \n \t3 } else { \n <ect>
\t1 throw ex ; \n \t1 } catch ( item <identifiersep> not <identifiersep> found item <identifiersep> not <identifiersep> found ) { \n \t1 throw new not <identifiersep> found <identifiersep> formatted <identifiersep> exception ( item <identifiersep> not <identifiersep> found . get <identifiersep> message ( ) , item <identifiersep> not <identifiersep> found ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t3 final int final <identifiersep> version <identifiersep> for <identifiersep> doc2 = index <identifiersep> doc <identifiersep> with <identifiersep> concurrent <identifiersep> updates ( index , <number_literal> , n <identifiersep> updates ) ; \n \t3 assert <identifiersep> ok ( client ( ) . perform <identifiersep> request ( <string_literal> , index + <string_literal> ) ) ; \n \t3 shards = build <identifiersep> shards ( index , nodes , new <identifiersep> node <identifiersep> client ) ; \n \t3 primary = shards . stream ( ) . filter ( shard : : is <identifiersep> primary ) . find <identifiersep> first ( ) . get ( ) ; \n <ect>
\t2 queue . shutdown ( ) ; \n \t2 try { \n \t2 queue . await <identifiersep> termination ( data <identifiersep> model . get <identifiersep> num <identifiersep> users ( ) , time <identifiersep> unit . seconds ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 if ( rpc <identifiersep> client != null ) { \n \t1 try { \n \t2 rpc <identifiersep> client . close ( ) ; \n \t1 } catch ( flume <identifiersep> exception ex ) { \n <ect>
\t2 log . info ( <string_literal> , \n \t3 current <identifiersep> key . get <identifiersep> creation <identifiersep> date ( ) ) ; \n \t2 last <identifiersep> key <identifiersep> update = current <identifiersep> key . get <identifiersep> creation <identifiersep> date ( ) ; } } \n \t1 } catch ( keeper <identifiersep> exception | interrupted <identifiersep> exception e ) { \n <ect>
\t5 { \n \t6 suite . add <identifiersep> test ( new test <identifiersep> suite ( test <identifiersep> class ) ) ; } } \n \t4 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) \n \t4 { \n <ect>
\t6 update <identifiersep> templ <identifiersep> id <identifiersep> pstmt . set <identifiersep> long ( 1 , template <identifiersep> id ) ; \n \t6 update <identifiersep> templ <identifiersep> id <identifiersep> pstmt . set <identifiersep> string ( <number_literal> , hypervisor <identifiersep> and <identifiersep> template <identifiersep> name . get <identifiersep> key ( ) . to <identifiersep> string ( ) ) ; \n \t6 update <identifiersep> templ <identifiersep> id <identifiersep> pstmt . execute <identifiersep> update ( ) ; \n \t5 } catch ( final exception e ) { \n <ect>
\t2 final list < encrypted <identifiersep> key <identifiersep> resolver > list = new array <identifiersep> list < > ( ) ; \n \t2 list . add ( new inline <identifiersep> encrypted <identifiersep> key <identifiersep> resolver ( ) ) ; \n \t2 list . add ( new encrypted <identifiersep> element <identifiersep> type <identifiersep> encrypted <identifiersep> key <identifiersep> resolver ( ) ) ; \n \t2 list . add ( new simple <identifiersep> retrieval <identifiersep> method <identifiersep> encrypted <identifiersep> key <identifiersep> resolver ( ) ) ; \n <ect>
\t4 try { \n \t5 channel . queue <identifiersep> delete ( queue <identifiersep> name ) ; \n \t5 channel . abort ( ) ; \n \t4 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 synchronized ( matched <identifiersep> list <identifiersep> mutex ) { \n \t3 try { \n \t4 matched . destroy ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 consumer . set <identifiersep> available <identifiersep> listener ( listener ) ; \n \t6 consumer <identifiersep> id <identifiersep> map . put ( consumer , message ) ; \n \t6 consumer <identifiersep> destination <identifiersep> name <identifiersep> map . put ( consumer , destination <identifiersep> name ) ; \n <ect>
\t4 <comment> \n \t4 logger . debug ( <string_literal> + cn . get <identifiersep> column <identifiersep> name ( ) + \n \t6 <string_literal> + ( semantic <identifiersep> type <identifiersep> mappings == null ? 0 : semantic <identifiersep> type <identifiersep> mappings . size ( ) ) ) ; \n \t4 num <identifiersep> of <identifiersep> mappings *= ( semantic <identifiersep> type <identifiersep> mappings == null || semantic <identifiersep> type <identifiersep> mappings . is <identifiersep> empty ( ) ? 1 : semantic <identifiersep> type <identifiersep> mappings . size ( ) ) ; \n <ect>
\t2 response . close ( ) ; \n \t2 <comment> \n \t2 base = client . target ( generate <identifiersep> url ( <string_literal> ) ) ; \n \t2 response = base . request ( ) . get ( ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 routing <identifiersep> nodes routing <identifiersep> nodes = cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) ; \n \t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , routing <identifiersep> nodes . node ( <string_literal> ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( started ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n <ect>
\t2 final principal principal = web <identifiersep> utils . get <identifiersep> principal <identifiersep> from <identifiersep> request <identifiersep> context ( request <identifiersep> context , this . ticket <identifiersep> registry <identifiersep> support ) ; \n \t2 if ( is <identifiersep> usage <identifiersep> policy <identifiersep> accepted <identifiersep> by ( principal ) ) { \n \t3 logger . debug ( <string_literal> , principal . get <identifiersep> id ( ) ) ; \n \t3 return pair . of ( boolean . true , principal ) ; } \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t2 } catch ( concurrent <identifiersep> operation <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( resource <identifiersep> allocation <identifiersep> exception ex ) { \n <ect>
\t3 res . set <identifiersep> response <identifiersep> headers ( q <identifiersep> browser . to <identifiersep> string ( ) ) ; \n \t3 return message <identifiersep> bodies + queue . get <identifiersep> queue <identifiersep> name ( ) + <string_literal> + num <identifiersep> msgs + <string_literal> ; \n \t2 } catch ( exception e ) { \n \t3 res . set <identifiersep> response <identifiersep> message ( <string_literal> ) ; \n <ect>
\t5 heatpump <identifiersep> command <identifiersep> type . type <identifiersep> cooling <identifiersep> stop <identifiersep> after <identifiersep> hours ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , ip ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public void add <identifiersep> model ( eo <identifiersep> model eomodel ) { \n \t2 enumeration enumeration =  <identifiersep> models <identifiersep> by <identifiersep> name . object <identifiersep> enumerator ( ) ; \n \t2 string name = eomodel . name ( ) ; \n \t2 if (  <identifiersep> models <identifiersep> by <identifiersep> name . object <identifiersep> for <identifiersep> key ( name ) != null ) { \n <ect>
\t2 created <identifiersep> desc = get <identifiersep> cube <identifiersep> desc <identifiersep> manager ( ) . create <identifiersep> cube <identifiersep> desc ( desc ) ; \n \t2 if ( created <identifiersep> desc . is <identifiersep> broken ( ) ) { \n \t3 throw new bad <identifiersep> request <identifiersep> exception ( created <identifiersep> desc . get <identifiersep> errors <identifiersep> as <identifiersep> string ( ) ) ; } \n \t2 int cuboid <identifiersep> count = cuboid <identifiersep> cli . simulate <identifiersep> cuboid <identifiersep> generation ( created <identifiersep> desc , false ) ; \n <ect>
\t1 private boolean is <identifiersep> valid <identifiersep> key <identifiersep> usage ( final x509certificate certificate ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 final boolean [ ] key <identifiersep> usage = certificate . get <identifiersep> key <identifiersep> usage ( ) ; \n \t2 if ( key <identifiersep> usage == null ) { \n <ect>
\t2 matcher m = response <identifiersep> pattern . matcher ( body . to <identifiersep> string ( ) ) ; \n \t2 boolean b = m . find ( ) ; \n \t2 if ( ! b ) { \n \t3 <comment> \n <ect>
\t1 protected void execute ( ) { \n \t2 if ( ! bindings <identifiersep> exist ( ) ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return ; } \n <ect>
\t4 vmware <identifiersep> manager mgr = get <identifiersep> service <identifiersep> context ( ) . get <identifiersep> stock <identifiersep> object ( vmware <identifiersep> manager . context <identifiersep> stock <identifiersep> name ) ; \n \t4 string control <identifiersep> ip = get <identifiersep> router <identifiersep> ssh <identifiersep> control <identifiersep> ip ( cmd ) ; \n \t4 pair < boolean , string > result = ssh <identifiersep> helper . ssh <identifiersep> execute ( control <identifiersep> ip , default <identifiersep> domr <identifiersep> sshport , <string_literal> , mgr . get <identifiersep> system <identifiersep> vm <identifiersep> key <identifiersep> file ( ) , null , <string_literal> + args ) ; \n <ect>
\t3 } catch ( peer <identifiersep> restarted <identifiersep> exception e ) { \n \t4 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> + uid ) ; \n \t4 return ; \n \t3 } catch ( sync <identifiersep> send <identifiersep> waited <identifiersep> too <identifiersep> long <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ deprecated \n \t1 public disk <identifiersep> store <identifiersep> sample <identifiersep> sender ( ) { \n <ect>
\t3 { \n \t4 if ( e instanceof object <identifiersep> check <identifiersep> exception ) \n \t4 { \n \t5 throw ( object <identifiersep> check <identifiersep> exception ) e ; } \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t7 logger . info ( <string_literal> , segment . get <identifiersep> segment <identifiersep> id ( ) , e ) ; \n \t7 continue ; } \n \t6 tracking <identifiersep> segment <identifiersep> worker tracking <identifiersep> segment <identifiersep> worker = new tracking <identifiersep> segment <identifiersep> worker ( segment ) ; \n \t6 if ( thread <identifiersep> factory . active <identifiersep> threads ( ) < max <identifiersep> thread <identifiersep> count ) { \n <ect>
\t3 try { \n \t4 cur . cluster <identifiersep> description <identifiersep> changed ( event ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 exceptions . add ( new exception ( <string_literal> + get <identifiersep> name ( ) + <string_literal> + j + <string_literal> , e ) ) ; } \n \t4 try { \n \t5 cache . get ( <string_literal> ) ; } \n \t4 catch ( exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
<comment> \n private static boolean check <identifiersep> annotations ( class < ? > candidate , list < class < ? > > selectors ) { \n <ect>
\t2 private static group <identifiersep> principal verify <identifiersep> user <identifiersep> group ( @ nonnull string group <identifiersep> name , @ nonnull path file <identifiersep> system <identifiersep> root ) throws io <identifiersep> exception { \n \t3 try { \n \t4 return file <identifiersep> system <identifiersep> root . get <identifiersep> file <identifiersep> system ( ) . get <identifiersep> user <identifiersep> principal <identifiersep> lookup <identifiersep> service ( ) . lookup <identifiersep> principal <identifiersep> by <identifiersep> group <identifiersep> name ( group <identifiersep> name ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 protected string format <identifiersep> output <identifiersep> message <identifiersep> internal ( final string message ) { \n \t2 try { \n \t3 return encoding <identifiersep> utils . url <identifiersep> encode ( message ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t3 database <identifiersep> user , database <identifiersep> password ) ; \n \t2 conn = con ; \n \t2 return con ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 list < currency <identifiersep> pair > exchange <identifiersep> symbols = exchange . get <identifiersep> exchange <identifiersep> symbols ( ) ; \n \t1 list < ok <identifiersep> coin <identifiersep> futures <identifiersep> order <identifiersep> result > order <identifiersep> results = new array <identifiersep> list < > ( exchange <identifiersep> symbols . size ( ) ) ; \n \t1 for ( int i = 0 ; i < exchange <identifiersep> symbols . size ( ) ; i ++ ) { \n \t1 currency <identifiersep> pair symbol = exchange <identifiersep> symbols . get ( i ) ; \n <ect>
\t4 + <string_literal> \n \t4 + <string_literal> ; \n \t2 validate ( xml ) ; \n \t2 doc = post <identifiersep> as <identifiersep> dom ( <string_literal> , xml ) ; \n <ect>
\t2 log . error ( string . format ( <string_literal> , master <identifiersep> key <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) , e . get <identifiersep> localized <identifiersep> message ( ) ) , e ) ; } \n \t1 } else { \n \t2 log . error ( string . format ( <string_literal> , master <identifiersep> key <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ) ; } \n \t1 } else { \n <ect>
\t5 return x <identifiersep> path <identifiersep> helper . get <identifiersep> x <identifiersep> path <identifiersep> expression ( candidate <identifiersep> elements . item ( i ) ) ; } } \n \t2 } catch ( x <identifiersep> path <identifiersep> expression <identifiersep> exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } \n \t2 if ( logging ) { \n <ect>
\t2 log . error ( <string_literal> + snapshot <identifiersep> id + <string_literal> , ex ) ; \n \t2 clean <identifiersep> failed <identifiersep> snapshot ( snapshot <identifiersep> id ) ; \n \t2 throw ex ; } \n \t1 } catch ( exception ex ) { \n <ect>
\t5 entry . configure ( broker , usage <identifiersep> manager , answer ) ; } } \n \t3 answer . init ( ) ; \n \t3 return answer ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 if ( log . should <identifiersep> log ( log . info ) ) \n \t5 log . info ( <string_literal> + adds + <string_literal> + dir . get <identifiersep> absolute <identifiersep> path ( ) ) ; } } \n \t2 if ( total <identifiersep> adds > 0 || load <identifiersep> system <identifiersep> certs ) { \n \t3 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 part <identifiersep> entity tmp = entity <identifiersep> ref . get ( ) ; \n \t2 try { \n \t3 entity <identifiersep> ref . get <identifiersep> and <identifiersep> set ( mpu <identifiersep> part <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . update <identifiersep> creation <identifiersep> timeout ( tmp ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t5 conn <identifiersep> result = true ; \n \t5 conn . close ( ) ; } \n \t4 return conn <identifiersep> result ; } \n \t2 catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n \t3  <identifiersep> log . info ( <string_literal> + ui + ' ' + new <identifiersep> va + <string_literal> + old ) ; \n \t2 if ( old != null && old . compare <identifiersep> to ( new <identifiersep> va ) >= 0 ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 bean <identifiersep> info bean <identifiersep> info = null ; \n \t1 try { \n \t1 bean <identifiersep> info = introspector . get <identifiersep> bean <identifiersep> info ( object . get <identifiersep> class ( ) ) ; \n \t1 } catch ( introspection <identifiersep> exception ex ) { \n <ect>
\t5 <comment> \n \t5 try { \n \t6 entry . get <identifiersep> key ( ) . close <identifiersep> idle <identifiersep> connections ( entry . get <identifiersep> value ( ) , time <identifiersep> unit . milliseconds ) ; \n \t5 } catch ( exception t ) { \n <ect>
\t1 try { \n \t1 runnable . run ( ) ; \n \t1 } catch ( throwable t ) { \n \t1 try { \n <ect>
\t2 try { \n \t3 ec2client . get <identifiersep> instance ( ) . delete <identifiersep> snapshot ( this . get <identifiersep> owner <identifiersep> user <identifiersep> id ( ) , snapshot <identifiersep> id ) ; \n \t3 log . info ( string . format ( <string_literal> , snapshot <identifiersep> id ) ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t3 long time = watch . stop ( ) ; \n \t3 logger log = logger <identifiersep> factory . get <identifiersep> logger ( test <identifiersep> context . get <identifiersep> test <identifiersep> class ( ) ) ; \n \t3 log . info ( <string_literal> ) ; \n \t3 log . info ( <string_literal> + test <identifiersep> context . get <identifiersep> test <identifiersep> method ( ) . get <identifiersep> name ( ) + <string_literal> + test <identifiersep> context . get <identifiersep> test <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> ) ; \n <ect>
\t1 val clazz = compile ( \n \t1 get <identifiersep> runtime <identifiersep> context . get <identifiersep> user <identifiersep> code <identifiersep> class <identifiersep> loader , \n \t1 gen <identifiersep> aggregations . name , \n \t1 gen <identifiersep> aggregations . code ) \n <ect>
\t6 removes . add ( sc ) ; } } \n \t3 sd .  <identifiersep> active <identifiersep> comparators . remove <identifiersep> all ( removes ) ; } } \n \t1 public void shutdown ( config <identifiersep> slice slice ) { \n \t2 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> sync , level . info ) ) \n <ect>
\t5 <comment> \n \t5 pw . println ( output <identifiersep> object . to <identifiersep> string ( ) ) ; \n \t4 } catch ( json <identifiersep> exception e ) { \n \t5 <comment> \n <ect>
\t3 if ( text != null ) \n \t3 { \n \t4 log . debug ( <string_literal> , text . length ( ) ) ; \n \t4 return text ; } \n <ect>
\t4 history history = this . get <identifiersep> history ( null , item ) ; \n \t4 readers . put ( item , history . get <identifiersep> reader ( ) ) ; } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t9 notify <identifiersep> node <identifiersep> left ( msg . get <identifiersep> nodes ( ) ) ; \n \t9 profiler . stop ( ) ; \n \t9 if ( profiler . get <identifiersep> duration <identifiersep> in <identifiersep> millis ( ) > <number_literal> ) { \n <ect>
\t3 format <identifiersep> info info = null ; \n \t3 try { \n \t4 info = processor . process ( resource <identifiersep> path , null , template <identifiersep> name ) ; \n \t3 } catch ( internal <identifiersep> error <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public boolean destroy ( final network config , final reservation <identifiersep> context context ) throws concurrent <identifiersep> operation <identifiersep> exception , resource <identifiersep> unavailable <identifiersep> exception { \n \t2 final long vpc <identifiersep> id = config . get <identifiersep> vpc <identifiersep> id ( ) ; \n \t2 if ( vpc <identifiersep> id == null ) { \n <ect>
\t3 public list < dedicated <identifiersep> resource <identifiersep> vo > do <identifiersep> in <identifiersep> transaction ( transaction <identifiersep> status status ) { \n \t4 <comment> \n \t4 affinity <identifiersep> group group = find <identifiersep> or <identifiersep> create <identifiersep> dedicated <identifiersep> affinity <identifiersep> group ( domain <identifiersep> id , account <identifiersep> id <identifiersep> final ) ; \n \t4 if ( group == null ) { \n <ect>
\t3 handle ( <string_literal> + key <identifiersep> load <identifiersep> list , ex ) ; } } \n \t1 @ override \n \t1 public void put ( string key , versioned <identifiersep> entry < string , byte [ ] > entry ) { \n \t2 init <identifiersep> if <identifiersep> needed ( ) ; \n <ect>
\t2 if ( start <identifiersep> point != null ) { \n \t3 string msg = format ( <string_literal> , task <identifiersep> id ) ; \n \t3 log . warn ( fuseki . server <identifiersep> log , msg ) ; \n \t3 throw new internal <identifiersep> error <identifiersep> exception ( <string_literal> + get <identifiersep> task <identifiersep> id ( ) + <string_literal> ) ; } \n <ect>
\t1 job <identifiersep> client jc = null ; \n \t1 try { \n \t1 jc = new job <identifiersep> client ( job ) ; \n \t1 running <identifiersep> job rj = jc . submit <identifiersep> job ( job ) ; \n <ect>
\t4 worker <identifiersep> id , \n \t4 port ) ; \n \t2 string cmd = launcher <identifiersep> cmd + <string_literal> + worker <identifiersep> cmd ; \n \t2 cmd = cmd . replace ( <string_literal> , storm <identifiersep> home ) ; \n <ect>
\t2  <identifiersep> lb <identifiersep> dao . persist ( load <identifiersep> balancer ) ; \n \t2 try { \n \t3 apply <identifiersep> load <identifiersep> balancer <identifiersep> config ( cmd . get <identifiersep> lb <identifiersep> rule <identifiersep> id ( ) ) ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t3 + <string_literal> + <string_literal> ) ; \n \t2 attempt <identifiersep> client <identifiersep> re <identifiersep> login ( ) ; \n \t2 throw e ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public boolean configure ( string name , map < string , object > xml <identifiersep> params ) throws configuration <identifiersep> exception { \n \t2  <identifiersep> peers = new hash <identifiersep> map < string , socket <identifiersep> channel > ( <number_literal> ) ; \n \t2  <identifiersep> ssl <identifiersep> engines = new hash <identifiersep> map < string , ssl <identifiersep> engine > ( <number_literal> ) ; \n \t2  <identifiersep> node <identifiersep> id =  <identifiersep> cluster <identifiersep> mgr . get <identifiersep> management <identifiersep> node <identifiersep> id ( ) ; \n <ect>
\t3 return constructor . new <identifiersep> instance ( address , ports , event <identifiersep> loop <identifiersep> threads , query <identifiersep> threads , kv <identifiersep> state <identifiersep> registry , stats ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 final string msg = <string_literal> + error <identifiersep> message <identifiersep> on <identifiersep> load <identifiersep> failure ; \n <ect>
\t2 if ( socket == null ) return ; \n \t2 try { \n \t3 socket . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 return paths ; } \n \t1 @ override \n \t1 public iterable < file <identifiersep> store > get <identifiersep> file <identifiersep> stores ( ) { \n \t4 logger . info ( <string_literal> ) ; \n <ect>
\t2 if ( value . index <identifiersep> of ( <string_literal> ) == 0 && value . index <identifiersep> of ( ' ) ' ) == value . length ( ) - 1 ) \n \t2 { \n \t2 string part = value . substring ( <number_literal> , value . length ( ) - 1 ) ; \n \t2 if ( is <identifiersep> angle ( part . trim ( ) ) ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t2 if ( name . length ( ) > files <identifiersep> constants . object <identifiersep> name <identifiersep> length ) \n \t2 { \n \t3 log . warn ( <string_literal> , files <identifiersep> constants . object <identifiersep> name <identifiersep> length , name ) ; \n \t3 this . name = name . substring ( 0 , files <identifiersep> constants . object <identifiersep> name <identifiersep> length ) ; \n <ect>
\t1 env . set <identifiersep> params ( params ) \n \t1 if params . version and check <identifiersep> stack <identifiersep> feature ( stack <identifiersep> feature . rolling <identifiersep> upgrade , params . version ) : \n \t1 stack <identifiersep> select . select <identifiersep> packages ( params . version ) \n def post <identifiersep> upgrade <identifiersep> restart ( self , env , upgrade <identifiersep> type = none ) : \n <ect>
\t4 url <identifiersep> stream <identifiersep> handler handler = camel <identifiersep> context . get <identifiersep> injector ( ) . new <identifiersep> instance ( clazz ) ; \n \t4 args . set <identifiersep> https <identifiersep> handler ( handler ) ; \n \t4 log . debug ( <string_literal> , handler , args ) ; \n \t3 } else { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 } catch ( option <identifiersep> exception e ) { \n \t1 log . error ( <string_literal> , e ) ; \n \t1 command <identifiersep> line <identifiersep> util . print <identifiersep> help ( group ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 input <identifiersep> stream in = ! chunked ? new buffered <identifiersep> input <identifiersep> stream ( request . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ) \n \t9 : new chunked <identifiersep> input <identifiersep> stream ( request . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ) ; \n \t3 random <identifiersep> access <identifiersep> file out = new random <identifiersep> access <identifiersep> file ( file , <string_literal> ) ; \n \t3 out . seek ( local <identifiersep> file <identifiersep> size ) ; \n <ect>
\t1 { \n \t2 if ( this . batch <identifiersep> id != null ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> \n \t4 + this . batch <identifiersep> id + <string_literal> + batch <identifiersep> id + <string_literal> ) ; } \n <ect>
\t4 else if ( ! peer . is <identifiersep> interesting ( ) && ! coordinator . completed ( ) ) \n \t4 { \n \t5 <comment> \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4  <identifiersep> async <identifiersep> job <identifiersep> mgr . complete <identifiersep> async <identifiersep> job ( job . get <identifiersep> id ( ) , job <identifiersep> info . status . failed , 0 , e . get <identifiersep> message ( ) ) ; \n \t4 return ; } \n \t3 work = vm <identifiersep> work <identifiersep> serializer . deserialize ( work <identifiersep> clz , job . get <identifiersep> cmd <identifiersep> info ( ) ) ; \n \t3 if ( work == null ) { \n <ect>
\t1 <comment> \n \t1 try { \n \t2 storage <identifiersep> manager . create <identifiersep> bucket ( bucket <identifiersep> name ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 log . info ( <string_literal> ) ; \n \t3 } finally { \n \t4 acceptor . stop ( ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t2 if ( e instanceof interrupted <identifiersep> io <identifiersep> exception ) { \n \t3 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t1 <comment> \n \t1 <comment> \n <ect>
\t2 msg . set <identifiersep> severity ( sev ) ; \n \t2 try { \n \t3  <identifiersep> runner . do <identifiersep> send ( msg ) ; \n \t2 } catch ( i2cp <identifiersep> message <identifiersep> exception ime ) { \n <ect>
\t7 + <string_literal> ) ; } \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception uhe ) { \n \t3 logger . warn ( <string_literal> , uhe ) ; \n \t2 } catch ( security <identifiersep> exception se ) { \n <ect>
\t2 return data ; } \n \t1 private list < splunk <identifiersep> event > run <identifiersep> query ( job <identifiersep> args query <identifiersep> args , boolean realtime , splunk <identifiersep> result <identifiersep> processor callback ) throws exception { \n \t2 service service = endpoint . get <identifiersep> service ( ) ; \n \t2 job job = service . get <identifiersep> jobs ( ) . create ( get <identifiersep> search ( ) , query <identifiersep> args ) ; \n <ect>
\t2 long reserved <identifiersep> memory = 0 ; \n \t2 long reserved <identifiersep> cpu = 0 ; \n \t2 list < vm <identifiersep> instance <identifiersep> vo > vms =  <identifiersep> vm <identifiersep> dao . list <identifiersep> up <identifiersep> by <identifiersep> host <identifiersep> id ( host . get <identifiersep> id ( ) ) ; \n <ect>
\t5 <string_literal> ) ; } \n \t2 } else { \n \t3 catalog = catalog <identifiersep> factory . get <identifiersep> instance ( ) . get <identifiersep> catalog ( catalog <identifiersep> name ) ; \n \t3 if ( catalog == null ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + vm <identifiersep> id + <string_literal> ) ; \n \t3 send <identifiersep> response ( resp , <string_literal> ) ; \n \t3 return ; } \n \t2 if ( vm . get <identifiersep> host <identifiersep> id ( ) == null ) { \n <ect>
public class repo <identifiersep> bulk <identifiersep> import <identifiersep> test extends repo <identifiersep> test <identifiersep> base { \n \t1 private final string repository3 = <string_literal> ; \n \t1 @ test \n \t1 public void test <identifiersep> bulk <identifiersep> import ( ) throws exception { \n <ect>
\t3 long sleep <identifiersep> duration = ( system . current <identifiersep> time <identifiersep> millis ( ) - last <identifiersep> wake <identifiersep> up ) ; \n \t3 last <identifiersep> wake <identifiersep> up = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 if ( sleep <identifiersep> duration < min <identifiersep> wake <identifiersep> up <identifiersep> interval ) \n \t3 { \n <ect>
\t3 networks . add ( new pair < network <identifiersep> vo , nic <identifiersep> profile > (  <identifiersep> network <identifiersep> mgr . setup <identifiersep> network ( system <identifiersep> acct ,  <identifiersep> network <identifiersep> offering <identifiersep> dao . find <identifiersep> by <identifiersep> id ( default <identifiersep> network . get <identifiersep> network <identifiersep> offering <identifiersep> id ( ) ) , plan , null , null , false ) . get ( 0 ) , default <identifiersep> nic ) ) ; \n \t3 for ( network <identifiersep> offering <identifiersep> vo offering : offerings ) { \n \t4 networks . add ( new pair < network <identifiersep> vo , nic <identifiersep> profile > (  <identifiersep> network <identifiersep> mgr . setup <identifiersep> network ( system <identifiersep> acct , offering , plan , null , null , false ) . get ( 0 ) , null ) ) ; } \n \t2 } catch ( concurrent <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t3 output <identifiersep> stream os = t . get <identifiersep> response <identifiersep> body ( ) ; \n \t3 os . write ( response . get <identifiersep> bytes ( ) ) ; \n \t3 os . close ( ) ; \n \t2 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error e ) { \n <ect>
\t5 if ( port <identifiersep> settings == dsmr <identifiersep> port <identifiersep> settings . low <identifiersep> speed <identifiersep> settings ) { \n \t6 serial <identifiersep> port . set <identifiersep> dtr ( false ) ; \n \t6 serial <identifiersep> port . set <identifiersep> rts ( true ) ; } \n \t4 } else { \n <ect>
\t3 if ( response <identifiersep> parser . is <identifiersep> successful <identifiersep> login <identifiersep> response ( line ) ) { \n \t4 logger . debug ( <string_literal> , line ) ; \n \t4 return ; } \n \t3 if ( response <identifiersep> parser . is <identifiersep> device <identifiersep> state ( line ) ) { \n <ect>
\t1 try { \n \t2 synchronized ( date <identifiersep> format ) { \n \t2 return date <identifiersep> format . parse ( date . to <identifiersep> string ( ) ) ; } \n \t1 } catch ( parse <identifiersep> exception ioe ) { \n <ect>
\t6 leader <identifiersep> callback . execute ( ) ; } \n \t5 continue ; \n \t4 } else { \n \t5 if ( data . is <identifiersep> leader ( ) ) { \n <ect>
\t3 try { \n \t4 user . remove ( ) ; \n \t4 superuser . save ( ) ; \n \t3 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t2 for ( integer node <identifiersep> id = 0 ; node <identifiersep> id < num <identifiersep> nodes <identifiersep> total ; node <identifiersep> id ++ ) { \n \t3 try { \n \t4 start <identifiersep> server ( node <identifiersep> id ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 private static node <identifiersep> value node <identifiersep> to <identifiersep> node <identifiersep> value ( node node ) \n \t1 { \n \t2 if ( node . is <identifiersep> variable ( ) ) \n <ect>
\t5 chunk = new file <identifiersep> node <identifiersep> chunk ( file <identifiersep> node . get <identifiersep> uuid ( ) , file <identifiersep> size , sequence <identifiersep> number , read <identifiersep> size ) ; \n \t5 input <identifiersep> stream . read ( chunk . get <identifiersep> buffer ( ) , 0 , read <identifiersep> size ) ; \n \t5 sequence <identifiersep> number ++ ; \n \t4 } catch ( throwable t ) { \n <ect>
\t2 for ( final meta <identifiersep> method method : sorted <identifiersep> methods ) { \n \t2 if ( method . is <identifiersep> final ( ) || method . get <identifiersep> name ( ) . equals ( <string_literal> ) ) continue ; \n \t3 logger . debug ( <string_literal> + method . get <identifiersep> name ( ) ) ; \n <ect>
\t3 try { \n \t4 property <identifiersep> utils <identifiersep> bean prop <identifiersep> utils = new property <identifiersep> utils <identifiersep> bean ( ) ; \n \t4 value = ( string ) prop <identifiersep> utils . get <identifiersep> property ( user , get <identifiersep> field ( ) . name ( ) ) ; \n \t3 } catch ( illegal <identifiersep> access <identifiersep> exception | invocation <identifiersep> target <identifiersep> exception | no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t2 leader leader = qu . get <identifiersep> peer ( index ) . peer . leader ; \n \t2 assert <identifiersep> not <identifiersep> null ( leader ) ; \n \t2 <comment> \n \t2 index = ( index == 1 ) ? <number_literal> : 1 ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + name ) ; } \n \t3 txn . commit ( ) ; \n \t3 return return <identifiersep> value ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t4 if ( channel <identifiersep> data . send <identifiersep> ack <identifiersep> sync ( msgs [ i ] . get <identifiersep> options ( ) ) ) send <identifiersep> ack ( key , ( writable <identifiersep> byte <identifiersep> channel ) channel , constants . ack <identifiersep> command , saddr ) ; \n \t3 } catch ( remote <identifiersep> process <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 pzc . check <identifiersep> all <identifiersep> pod <identifiersep> cidr <identifiersep> subnets ( ) ; \n \t2 } catch ( exception ex ) { \n \t3 system . out . print ( <string_literal> + ex ) ; \n <ect>
\t3 if ( reader != null ) { \n \t4 try { \n \t5 reader . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 log . debug ( <string_literal> ) ; \n \t1 persist <identifiersep> metric <identifiersep> metadata ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 persist <identifiersep> host <identifiersep> apps <identifiersep> metadata ( ) ; \n <ect>
\t2 boolean found <identifiersep> deadlock ; \n \t2 int iteration = 0 ; \n \t2 do { \n \t3 iteration ++ ; \n <ect>
\t5 if ( ! is <identifiersep> run <identifiersep> allowed ( ) ) { \n \t6 <comment> \n \t6 <comment> \n \t6 return ; } \n <ect>
<comment> \n \t1 public void post <identifiersep> test <identifiersep> unsubscribe ( ) \n \t2 throws exception \n \t1 { \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 <comment> \n \t6 <comment> \n <ect>
\t4 return principal ; } \n \t3 final oidc <identifiersep> registered <identifiersep> service oidc <identifiersep> service = ( oidc <identifiersep> registered <identifiersep> service ) registered <identifiersep> service ; \n \t3 scopes . retain <identifiersep> all ( oidc <identifiersep> service . get <identifiersep> scopes ( ) ) ; \n \t3 final map < string , object > attributes = filter <identifiersep> attributes <identifiersep> by <identifiersep> scope ( scopes , principal , service , oidc <identifiersep> service , access <identifiersep> token ) ; \n <ect>
\t6 if ( ! ( verify <identifiersep> param . get ( key ) . equals ( <string_literal> ) ) && ! ( item <identifiersep> name <identifiersep> element . get <identifiersep> text <identifiersep> content ( ) . equals ( verify <identifiersep> param . get ( key ) ) ) ) { \n \t7 s <identifiersep> logger . error ( <string_literal> + key + <string_literal> + verify <identifiersep> param . get ( key ) + <string_literal> + item <identifiersep> name <identifiersep> element . get <identifiersep> text <identifiersep> content ( ) ) ; \n \t7 result = false ; } \n \t5 } else { \n <ect>
\t1 @ override \n \t1 protected void message <identifiersep> sent ( ) throws exception { \n \t2 if ( ++ inflight <identifiersep> message <identifiersep> count == failure <identifiersep> count ) { \n \t3 thread . sleep ( <number_literal> ) ; \n <ect>
\t2  <identifiersep> geo <identifiersep> ip = new geo <identifiersep> ip (  <identifiersep> context ) ; \n \t2  <identifiersep> manager = new transport <identifiersep> manager (  <identifiersep> context ) ; \n \t2 start <identifiersep> geo <identifiersep> ip ( ) ; } \n \t1 public synchronized void startup ( ) { \n <ect>
\t3 logger . debug ( <string_literal> , type ) ; \n \t3 return new groovy <identifiersep> password <identifiersep> encoder ( properties . get <identifiersep> type ( ) ) ; } \n \t2 if ( type . contains ( <string_literal> ) ) { \n \t3 try { \n <ect>
\t3 <comment> \n \t3 pstmt = conn . prepare <identifiersep> statement ( <string_literal> ) ; \n \t3 rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( ! rs . next ( ) ) { \n <ect>
\t2 create <identifiersep> mode . persistent , true ) ; \n \t1 } else { \n \t1 ambari <identifiersep> solr <identifiersep> state state <identifiersep> on <identifiersep> secure = get <identifiersep> state <identifiersep> from <identifiersep> json ( client , state <identifiersep> file ) ; \n \t1 if ( state <identifiersep> to <identifiersep> update . equals ( state <identifiersep> on <identifiersep> secure ) ) { \n <ect>
\t2 simple <identifiersep> adapter ( ) { \n \t3 super ( ) ; } \n \t2 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t2 public void handle <identifiersep> message ( string input ) { \n <ect>
\t2 string [ ] new <identifiersep> cmd = new string [ purge <identifiersep> command . length ] ; \n \t2 for ( int i = 0 ; i < new <identifiersep> cmd . length ; i ++ ) { \n \t3 new <identifiersep> cmd [ i ] = purge <identifiersep> command [ i ] . replace ( <string_literal> , dir ) . replace ( <string_literal> , integer . to <identifiersep> string ( days ) ) ; } \n <ect>
\t5 throw convert <identifiersep> jaxb <identifiersep> exception ( ex ) ; } } \n \t3 return context ; } } \n \t1 private jaxb <identifiersep> context create <identifiersep> jaxb <identifiersep> context <identifiersep> from <identifiersep> context <identifiersep> path ( string context <identifiersep> path ) throws jaxb <identifiersep> exception { \n <ect>
\t6 v = metric <identifiersep> snapshot . get <identifiersep> mean ( ) ; \n \t5 } else { \n \t6 v = 0 ; } \n \t5 log . info ( <string_literal> , metric <identifiersep> type , v , name ) ; } } \n <ect>
\t2 <comment> \n \t2 for ( string bogus : sets . difference ( properties . key <identifiersep> set ( ) , allowed <identifiersep> keywords ) ) \n \t3 throw new invalid <identifiersep> request <identifiersep> exception ( bogus + <string_literal> ) ; \n \t2 for ( string obsolete : sets . intersection ( properties . key <identifiersep> set ( ) , obsolete <identifiersep> keywords ) ) \n <ect>
\t4 if ( status . is <identifiersep> access <identifiersep> token <identifiersep> expired ( ) ) { \n \t5 if ( oauth <identifiersep> credentials . refresh <identifiersep> tokens ( ) ) { \n \t6 return call <identifiersep> ecobee ( selection , func ) ; } \n \t4 } else { \n <ect>
\t3 { \n \t4 file old <identifiersep> file = new file ( file <identifiersep> path ) ; \n \t4 if ( old <identifiersep> file . exists ( ) ) \n \t4 { \n <ect>
\t4 return ( false ) ; } \n \t3 if ( ! test <identifiersep> match ( <string_literal> , msg , <string_literal> ) ) { \n \t4 return ( false ) ; } \n \t2 } catch ( field <identifiersep> exception e ) { \n <ect>
\t2 if ( ! f . delete ( ) ) { \n \t2 logger . warn ( <string_literal> , f . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n \t1 } else { \n \t2 if ( ! f . delete ( ) ) { \n <ect>
\t1 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t1 bucket <identifiersep> writer . append ( e ) ; } \n \t1 logger . info ( <string_literal> , hdfs <identifiersep> writer . get <identifiersep> events <identifiersep> written ( ) ) ; \n \t1 logger . info ( <string_literal> , hdfs <identifiersep> writer . get <identifiersep> bytes <identifiersep> written ( ) ) ; \n <ect>
\t4 outstream . write ( buffer , 0 , len ) ; } \n \t3 outstream . close ( ) ; \n \t3 res . set <identifiersep> response <identifiersep> data ( outstream . to <identifiersep> byte <identifiersep> array ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( ! create <identifiersep> table ( mapper , dynamo <identifiersep> item . get <identifiersep> class ( ) ) ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return ; } \n \t2 try { \n <ect>
<comment> \n \t1 public cms <identifiersep> add <identifiersep> dialog <identifiersep> type <identifiersep> helper ( add <identifiersep> menu <identifiersep> type type ) { \n <ect>
\t4 log . warn ( <string_literal> + module . get <identifiersep> module <identifiersep> id ( ) , e ) ; } } \n \t2 <comment> \n \t2 try { \n <ect>
\t3 try { \n \t4 remove <identifiersep> subsumed ( completed <identifiersep> checkpoints . remove <identifiersep> first ( ) ) ; \n \t3 } catch ( exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; } } \n <ect>
\t1 public boolean filter ( bundle row ) { \n \t2 for ( bundle <identifiersep> filter f : filter ) { \n \t3 if ( ! f . filter ( row ) && fail <identifiersep> stop ) { \n \t4 if ( debug ) { \n <ect>
\t3 log . error ( <string_literal> + auth <identifiersep> e ) ; \n \t3 result <identifiersep> sb . append ( <string_literal> ) ; \n \t3 status = curator . curate <identifiersep> fail ; \n \t2 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t1 { \n \t1 if ( cause instanceof retriable <identifiersep> request <identifiersep> exception ) \n \t1 { \n \t2 string message = cause . get <identifiersep> message ( ) ; \n <ect>
\t3 sql <identifiersep> statement <identifiersep> parser parser = sql <identifiersep> parser <identifiersep> utils . create <identifiersep> sql <identifiersep> statement <identifiersep> parser ( sql , db <identifiersep> type , format <identifiersep> default <identifiersep> features ) ; \n \t3 list < sql <identifiersep> statement > statement <identifiersep> list = parser . parse <identifiersep> statement <identifiersep> list ( ) ; \n \t3 return to <identifiersep> sql <identifiersep> string ( statement <identifiersep> list , db <identifiersep> type , parameters , option ) ; \n \t2 } catch ( class <identifiersep> cast <identifiersep> exception ex ) { \n <ect>
\t5 owner ) ; \n \t3 return cube ; } } \n \t1 public cube <identifiersep> instance create <identifiersep> cube ( cube <identifiersep> instance cube , string project <identifiersep> name , string owner ) throws io <identifiersep> exception { \n \t2 try ( auto <identifiersep> lock lock = cube <identifiersep> map <identifiersep> lock . lock <identifiersep> for <identifiersep> write ( ) ) { \n <ect>
\t4 assignments . clear ( ) ; \n \t4 log . warn ( <string_literal> + health <identifiersep> status + <string_literal> ) ; \n \t3 } else { \n \t4 get <identifiersep> all <identifiersep> assignments ( assignment <identifiersep> version , assignments , sync <identifiersep> callback ) ; } \n <ect>
\t1 logger . warn ( <string_literal> , upload <identifiersep> command ) \n \t1 logger . warn ( str ( e ) ) \n \t1 sys . exit ( ) \n \t1 if result != 0 : \n <ect>
<comment> \n \t3 assert . assert <identifiersep> true ( mock . predicate ( 1l , 1l , 0l , 0l , 1l , 0l ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 if ( split <identifiersep> domain [ <number_literal> ] . equals ( <string_literal> ) ) { \n \t5 z <identifiersep> wave <identifiersep> association <identifiersep> command <identifiersep> class association <identifiersep> command <identifiersep> class = ( z <identifiersep> wave <identifiersep> association <identifiersep> command <identifiersep> class ) node \n \t7 . get <identifiersep> command <identifiersep> class ( command <identifiersep> class . association ) ; \n \t5 if ( association <identifiersep> command <identifiersep> class == null ) { \n <ect>
\t2 db . rollback ( ) ; } } \n \t1 try { \n \t1 entities . as <identifiersep> transaction ( volume <identifiersep> info . class , export <identifiersep> and <identifiersep> attach ) . apply ( vol ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 result <identifiersep> endpoint . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > list = result <identifiersep> endpoint . get <identifiersep> received <identifiersep> exchanges ( ) ; \n \t2 exchange exchange = list . get ( 0 ) ; \n \t2 object actual <identifiersep> body = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( ) ; \n <ect>
\t3 if ( stat . is <identifiersep> online ( ) ) { \n \t4 op <identifiersep> set <identifiersep> presence2 . publish <identifiersep> presence <identifiersep> status ( \n \t5 stat , <string_literal> ) ; \n \t4 break ; } } \n <ect>
\t3 restore <identifiersep> vm <identifiersep> snapshot <identifiersep> command command =  <identifiersep> vm <identifiersep> snapshot <identifiersep> mgr . create <identifiersep> restore <identifiersep> command ( user <identifiersep> vm , vm <identifiersep> snapshots ) ; \n \t3 if ( command != null ) { \n \t4 restore <identifiersep> vm <identifiersep> snapshot <identifiersep> answer restore <identifiersep> vm <identifiersep> snapshot <identifiersep> answer = ( restore <identifiersep> vm <identifiersep> snapshot <identifiersep> answer )  <identifiersep> agent <identifiersep> mgr . send ( host <identifiersep> id , command ) ; \n \t4 if ( restore <identifiersep> vm <identifiersep> snapshot <identifiersep> answer == null || ! restore <identifiersep> vm <identifiersep> snapshot <identifiersep> answer . get <identifiersep> result ( ) ) { \n <ect>
\t1 if ( mime <identifiersep> type != null ) { \n \t1 try { \n \t2 media <identifiersep> type = media <identifiersep> type . value <identifiersep> of ( mime <identifiersep> type ) ; \n \t1 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t3 update ( parent <identifiersep> domain . get <identifiersep> id ( ) , parent <identifiersep> domain ) ; \n \t3 txn . commit ( ) ; \n \t3 return domain ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public void prepare ( map storm <identifiersep> conf , topology <identifiersep> context context , output <identifiersep> collector collector ) { \n \t2 this . collector = collector ; \n \t2 tps <identifiersep> counter = new tps <identifiersep> counter ( context . get <identifiersep> this <identifiersep> component <identifiersep> id ( ) + <string_literal> + context . get <identifiersep> this <identifiersep> task <identifiersep> id ( ) ) ; \n <ect>
\t1 attr <identifiersep> names . add ( lic . get <identifiersep> users <identifiersep> attribute ( ) ) ; \n \t1 if ( ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( lic . get <identifiersep> group <identifiersep> id <identifiersep> attribute ( ) ) ) { \n \t1 attr <identifiersep> names . add ( lic . get <identifiersep> group <identifiersep> id <identifiersep> attribute ( ) ) ; } \n \t1 if ( verbose ) { \n <ect>
\t5 set <identifiersep> error <identifiersep> state ( string . format ( <string_literal> , \n \t7 node . get <identifiersep> node <identifiersep> id ( ) , z <identifiersep> wave <identifiersep> security <identifiersep> command <identifiersep> class . command <identifiersep> to <identifiersep> string ( current <identifiersep> step ) , z <identifiersep> wave <identifiersep> security <identifiersep> command <identifiersep> class . command <identifiersep> to <identifiersep> string ( new <identifiersep> step ) ) ) ; \n \t5 return false ; \n \t4 } else { \n <ect>
\t5 if ( total <identifiersep> quota == null ) { \n \t6 total <identifiersep> quota = 0 ; } \n \t5 total <identifiersep> quota += quota ; } } \n \t3 if ( total <identifiersep> quota == null ) { \n <ect>
\t3 string end <identifiersep> coord <identifiersep> x = vehicle <identifiersep> config . get <identifiersep> string ( <string_literal> ) ; \n \t3 string end <identifiersep> coord <identifiersep> y = vehicle <identifiersep> config . get <identifiersep> string ( <string_literal> ) ; \n \t3 if ( end <identifiersep> coord <identifiersep> x == null || end <identifiersep> coord <identifiersep> y == null ) { \n \t4 if ( ! do <identifiersep> not <identifiersep> warn <identifiersep> again ) { \n <ect>
\t6 title , \n \t6 popup <identifiersep> dialog . error <identifiersep> message ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n <ect>
\t2 . build ( ) ; } \n @ override \n public < e > dataset < e > load ( string name ) { \n \t1 preconditions . check <identifiersep> argument ( name != null , <string_literal> ) ; \n <ect>
\t2 if ( providers != null && ! providers . is <identifiersep> empty ( ) ) { \n \t3 final multifactor <identifiersep> authentication <identifiersep> provider provider = this . multifactor <identifiersep> authentication <identifiersep> provider <identifiersep> selector . resolve ( providers , service , principal ) ; \n \t3 logger . debug ( <string_literal> , provider ) ; \n \t3 if ( ! provider . is <identifiersep> available ( service ) ) { \n <ect>
\t3 delete <identifiersep> tsm <identifiersep> response delete <identifiersep> tsm <identifiersep> response = ( delete <identifiersep> tsm <identifiersep> response ) get <identifiersep> elastistor <identifiersep> rest <identifiersep> client ( ) . execute <identifiersep> command ( delete <identifiersep> tsm <identifiersep> cmd ) ; \n \t3 if ( delete <identifiersep> tsm <identifiersep> response != null ) { \n \t4 string jobstatus = delete <identifiersep> tsm <identifiersep> response . get <identifiersep> job <identifiersep> status ( ) ; \n \t4 if ( jobstatus . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n <ect>
\t1 log . debug ( <string_literal> + config . get <identifiersep> full <identifiersep> name ( ) + <string_literal> + key <identifiersep> link . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t1 try { \n \t2 groovyness . exec ( <string_literal> + sub <identifiersep> directory . keys . get <identifiersep> child <identifiersep> file ( this . name ) . get <identifiersep> absolute <identifiersep> path ( ) + <string_literal> + key <identifiersep> link . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t2 try { \n <ect>
\t2 <comment> \n \t2 if ( ! existing <identifiersep> tuning . rename <identifiersep> to ( new file ( tuning <identifiersep> file + <string_literal> + auto <identifiersep> tune <identifiersep> xml <identifiersep> writer . now ( ) ) ) ) { \n \t2 logger . warn ( <string_literal> , tuning <identifiersep> file ) ; } } \n \t1 event . write <identifiersep> file ( tuning <identifiersep> file , false ) ; \n <ect>
\t1 final i <identifiersep> pentaho <identifiersep> user user = user <identifiersep> role <identifiersep> dao . get <identifiersep> user ( default <identifiersep> tenant , user <identifiersep> name ) ; \n \t1 if ( user == null ) { \n \t2 string <identifiersep> buffer buffer = new string <identifiersep> buffer ( ) ; \n <ect>
\t1 private final static logger logger = logger . get <identifiersep> logger ( demo <identifiersep> data <identifiersep> generator . class . get <identifiersep> name ( ) ) ; \n \t1 public void create <identifiersep> users ( process <identifiersep> engine engine ) { \n \t1 final identity <identifiersep> service identity <identifiersep> service = engine . get <identifiersep> identity <identifiersep> service ( ) ; \n \t1 if ( identity <identifiersep> service . is <identifiersep> read <identifiersep> only ( ) ) { \n <ect>
\t2 loads = succ . map <identifiersep> plan . get <identifiersep> roots ( ) ; \n \t2 po <identifiersep> load succ <identifiersep> load = null ; \n \t2 for ( physical <identifiersep> operator root : loads ) { \n \t3 if ( ! ( root instanceof po <identifiersep> load ) ) { <comment> \n <ect>
\t5 ctx . set <identifiersep> removed ( ) ; } \n \t4 removed = true ; \n \t3 } catch ( throwable t2 ) { \n <ect>
\t2 for ( one <identifiersep> wire <identifiersep> type <identifiersep> modifier lv <identifiersep> type <identifiersep> modifier : get <identifiersep> type <identifiersep> modifiery <identifiersep> list ( ) ) { \n \t3 logger . debug ( <string_literal> , get <identifiersep> device <identifiersep> property <identifiersep> path ( ) , \n \t5 lv <identifiersep> type <identifiersep> modifier . get <identifiersep> modifier <identifiersep> name ( ) , pv <identifiersep> type ) ; \n \t3 pv <identifiersep> type = lv <identifiersep> type <identifiersep> modifier . modify4write ( pv <identifiersep> type ) ; \n <ect>
\t6 continue ; } \n \t5 try { \n \t6 authentication <identifiersep> manager . backchannel <identifiersep> logout ( session , realm , user <identifiersep> session , uri <identifiersep> info , client <identifiersep> connection , headers , false ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t1 { \n \t2 running . get ( ) ; } \n \t1 catch ( interrupted <identifiersep> exception | execution <identifiersep> exception e ) \n \t1 { \n <ect>
\t5 <comment> \n \t5 boolean deleted = operations . delete <identifiersep> file ( done <identifiersep> file <identifiersep> name ) ; \n \t5 log . trace ( <string_literal> , done <identifiersep> file <identifiersep> name , deleted ) ; \n \t5 if ( ! deleted ) { \n <ect>
\t1 logger . warn ( <string_literal> , <string_literal> + + i <identifiersep> logger . warn , new throwable ( ) ) ; <comment> \n \t1 logger . debug ( this . get <identifiersep> class ( ) , <string_literal> + + i <identifiersep> logger . debug ) ; <comment> \n \t1 logger . debug ( <string_literal> , <string_literal> + i <identifiersep> logger . debug ) ; <comment> \n \t1 logger . debug ( this . get <identifiersep> class ( ) , <string_literal> + + i <identifiersep> logger . debug , new throwable ( ) ) ; <comment> \n <ect>
\t1 <comment> \n \t1 } catch ( walrus <identifiersep> exception e ) { \n \t1 throw e ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 wait <identifiersep> on <identifiersep> purge ( ) ; \n \t2 log . info ( <string_literal> ) ; } \n \t1 private void wait <identifiersep> on <identifiersep> purge ( ) { \n \t2 if ( ! purge <identifiersep> future . is <identifiersep> done ( ) ) { \n <ect>
\t1 public void load <identifiersep> shiro <identifiersep> configuration ( final resource resource ) { \n \t2 final resource shiro <identifiersep> resource = resource <identifiersep> utils . prepare <identifiersep> classpath <identifiersep> resource <identifiersep> if <identifiersep> needed ( resource ) ; \n \t2 if ( shiro <identifiersep> resource != null && shiro <identifiersep> resource . exists ( ) ) { \n \t3 final string location = shiro <identifiersep> resource . get <identifiersep> uri ( ) . to <identifiersep> string ( ) ; \n <ect>
\t2 if ( this . data <identifiersep> dirs . size ( ) < = 0 ) \n \t3 throw new runtime <identifiersep> exception ( <string_literal> ) ; \n \t2 this . hdfs <identifiersep> fetcher <identifiersep> protocol = props . get <identifiersep> string ( voldemort <identifiersep> fetcher <identifiersep> protocol , recommended <identifiersep> fetcher <identifiersep> protocol ) ; \n \t2 if ( ! this . hdfs <identifiersep> fetcher <identifiersep> protocol . equals ( recommended <identifiersep> fetcher <identifiersep> protocol ) ) { \n <ect>
\t4 log . info ( <string_literal> + message . get <identifiersep> text ( ) + <string_literal> ) ; \n \t4 message incoming <identifiersep> message = consumer . receive ( time <identifiersep> to <identifiersep> sleep ) ; \n \t4 if ( incoming <identifiersep> message instanceof text <identifiersep> message ) { \n \t5 try { \n <ect>
\t5 if ( i + <number_literal> < original <identifiersep> hl7message <identifiersep> bytes . length <comment> \n \t6 && b <identifiersep> m == original <identifiersep> hl7message <identifiersep> bytes [ i + 1 ] && b <identifiersep> s == original <identifiersep> hl7message <identifiersep> bytes [ i + <number_literal> ] \n \t6 && b <identifiersep> a == original <identifiersep> hl7message <identifiersep> bytes [ i + <number_literal> ] && field <identifiersep> separator == original <identifiersep> hl7message <identifiersep> bytes [ i + <number_literal> ] ) { \n \t6 if ( field <identifiersep> separator != original <identifiersep> hl7message <identifiersep> bytes [ i + <number_literal> ] ) { \n <ect>
\t2 return result ; \n \t2 } finally { \n \t2 file <identifiersep> system . close <identifiersep> all <identifiersep> for <identifiersep> ugi ( fs <identifiersep> task <identifiersep> ugi ) ; \n \t2 fragment <identifiersep> info . get <identifiersep> query <identifiersep> info ( ) . return <identifiersep> umbilical <identifiersep> ugi ( task <identifiersep> owner ) ; \n <ect>
\t2 wait <identifiersep> for <identifiersep> delivery ( client2 ) ; \n \t2 <comment> \n \t2 log . info ( <string_literal> ) ; \n \t2 mqtt <identifiersep> client client3 = create <identifiersep> client ( false , <string_literal> , listener ) ; \n <ect>
\t1 if ( s != null && ! s . is <identifiersep> empty ( ) ) { \n \t1 db <identifiersep> clock <identifiersep> delta = integer . parse <identifiersep> int ( s ) ; \n \t1 } else { \n \t1 db <identifiersep> clock <identifiersep> delta = <number_literal> ; } \n <ect>
\t1 int i = 0 ; \n \t1 for ( string host : hosts <identifiersep> and <identifiersep> ports ) { \n \t1 string [ ] host <identifiersep> and <identifiersep> port = host . split ( <string_literal> ) ; \n \t1 if ( host <identifiersep> and <identifiersep> port . length < <number_literal> ) { \n <ect>
<comment> \n \t1 private boolean update <identifiersep> from <identifiersep> check ( update <identifiersep> type type , string id , long max <identifiersep> time ) { \n \t2 if ( is <identifiersep> update <identifiersep> in <identifiersep> progress ( type , id ) ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 input <identifiersep> source . set <identifiersep> byte <identifiersep> stream ( input <identifiersep> stream ) ; \n \t3 digester . push ( this ) ; \n \t3 digester . parse ( input <identifiersep> source ) ; \n \t2 } catch ( sax <identifiersep> parse <identifiersep> exception spe ) { \n <ect>
\t2 if ( m <identifiersep> resource != null ) { \n \t3 try { \n \t4 a <identifiersep> cms <identifiersep> ui . get <identifiersep> cms <identifiersep> object ( ) . unlock <identifiersep> resource ( m <identifiersep> resource ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> , host ) ; \n \t2 try { \n \t3 listener . test <identifiersep> ended ( host ) ; \n \t2 } catch ( remote <identifiersep> exception ex ) { \n <ect>
\t1 ranger <identifiersep> hdfs <identifiersep> plugin <identifiersep> enabled = ( services [ 'configurations' ] [ 'ranger - hdfs - plugin - properties' ] [ 'properties' ] [ 'ranger - hdfs - plugin - enabled' ] . lower ( ) == 'yes' . lower ( ) ) \n \t1 else : \n \t1 ranger <identifiersep> hdfs <identifiersep> plugin <identifiersep> enabled = false \n \t1 if ranger <identifiersep> hdfs <identifiersep> plugin <identifiersep> enabled and 'ranger - hdfs - plugin - properties' in services [ 'configurations' ] and 'repository <identifiersep> config <identifiersep> username' in services [ 'configurations' ] [ 'ranger - hdfs - plugin - properties' ] [ 'properties' ] : \n <ect>
\t3 for ( string dir : tmp <identifiersep> dir ) { \n \t4 try { \n \t5 path <identifiersep> utils . rmr ( dir ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 { \n \t2 log . info ( this , <string_literal> + get <identifiersep> label ( ) ) ; \n \t2 log . info ( this , <string_literal> + read <identifiersep> blocks ) ; \n \t2 log . info ( this , <string_literal> + write <identifiersep> blocks ) ; \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t1 public void remove <identifiersep> bouncy <identifiersep> castle ( ) { \n \t2 try { \n \t3 security . remove <identifiersep> provider ( bouncy <identifiersep> castle <identifiersep> provider . provider <identifiersep> name ) ; \n \t2 } catch ( security <identifiersep> exception ex ) { \n <ect>
\t1 public boolean apply <identifiersep> static <identifiersep> nat <identifiersep> rules <identifiersep> for <identifiersep> network ( long network <identifiersep> id , boolean continue <identifiersep> on <identifiersep> error , account caller ) { \n \t2 list < firewall <identifiersep> rule <identifiersep> vo > rules =  <identifiersep> firewall <identifiersep> dao . list <identifiersep> by <identifiersep> network <identifiersep> and <identifiersep> purpose ( network <identifiersep> id , purpose . static <identifiersep> nat ) ; \n \t2 list < static <identifiersep> nat <identifiersep> rule > static <identifiersep> nat <identifiersep> rules = new array <identifiersep> list < static <identifiersep> nat <identifiersep> rule > ( ) ; \n \t2 if ( rules . size ( ) == 0 ) { \n <ect>
<comment> \n \t1 public void add <identifiersep> interceptor ( interceptor interceptor ) { \n \t2 <comment> \n \t2 if ( interceptor == this ) { \n <ect>
\t2 amq . set <identifiersep> watch <identifiersep> topic <identifiersep> advisories ( false ) ; \n \t2 broker . set <identifiersep> io <identifiersep> exception <identifiersep> handler ( new default <identifiersep> io <identifiersep> exception <identifiersep> handler ( ) { \n \t3 @ override \n \t3 public void handle ( io <identifiersep> exception exception ) { \n <ect>
\t7 challenge <identifiersep> map . put ( tag , challenge ) ; \n \t7 challenge <identifiersep> mutex . remove ( tag ) ; } \n \t6 s . release ( ) ; \n \t4 } else { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <comment> \n \t1 private string find <identifiersep> camel <identifiersep> connector <identifiersep> j <identifiersep> son <identifiersep> schema ( class < ? > component <identifiersep> class ) { \n <ect>
\t4 if ( src . get <identifiersep> view ( ) != null ) { \n \t5 try { \n \t6 property <identifiersep> view . set ( null , src . get <identifiersep> view ( ) ) ; \n \t5 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t3  <identifiersep> client <identifiersep> link . send (  <identifiersep> test <identifiersep> bytes ) ; \n \t3 s <identifiersep> logger . info ( <string_literal> ) ; \n \t3 get <identifiersep> one <identifiersep> more <identifiersep> test ( ) ; \n \t3  <identifiersep> client <identifiersep> link . send (  <identifiersep> test <identifiersep> bytes ) ; \n <ect>
\t6 break ; } \n \t4 } else { \n \t5 break ; } } \n \t2 } catch ( exception ex ) { \n <ect>
\t8 zoneid = self . zone . id , \n \t8 gateway = gateway , \n \t8 vpcid = vpc . id \n \t8 ) \n <ect>
\t1 protected string remove <identifiersep> sr <identifiersep> sync ( final connection conn , final sr sr ) { \n \t2 if ( sr == null ) { \n \t3 return null ; } \n <ect>
\t5 combat = root . combat ; \n \t5 for ( ability ability : actions ) { \n \t6 action <identifiersep> cache . add ( ability . get <identifiersep> rule ( ) + ' <identifiersep> ' + ability . get <identifiersep> source <identifiersep> id ( ) ) ; } } \n \t3 } else { \n <ect>
\t2 lock . write <identifiersep> lock ( ) . lock ( ) ; \n \t2 try { \n \t3 if ( exch <identifiersep> id != null && last <identifiersep> exchange <identifiersep> id != null && last <identifiersep> exchange <identifiersep> id . compare <identifiersep> to ( exch <identifiersep> id ) >= 0 ) { \n <ect>
\t6 if ( value >= <number_literal> ) { \n \t7 <comment> \n \t7 cmd = autelis <identifiersep> cmd <identifiersep> dim ; } \n \t5 } else { \n <ect>
\t3 return resource . get <identifiersep> url ( ) ; } \n \t2 catch ( malformed <identifiersep> url <identifiersep> exception ex ) { \n \t3 throw ex ; } \n \t2 catch ( io <identifiersep> exception ex ) { \n <ect>
\t4  <identifiersep> ssp <identifiersep> uuid <identifiersep> dao . persist ( uuid ) ; \n \t4 return true ; } \n \t3 processed = true ; } \n \t2 if ( processed ) { \n <ect>
\t6 return boolean . true ; } \n \t4 } ; \n \t4 zopdel . execute ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override public void stop ( ) throws grid <identifiersep> exception { \n \t2 if ( stopping . compare <identifiersep> and <identifiersep> set ( false , true ) ) { \n <ect>
\t2 string router <identifiersep> guest <identifiersep> ip = cmd . get <identifiersep> access <identifiersep> detail ( network <identifiersep> element <identifiersep> command . router <identifiersep> guest <identifiersep> ip ) ; \n \t2 string zone <identifiersep> network <identifiersep> type = cmd . get <identifiersep> access <identifiersep> detail ( network <identifiersep> element <identifiersep> command . zone <identifiersep> network <identifiersep> type ) ; \n \t2 if ( router <identifiersep> guest <identifiersep> ip != null && zone <identifiersep> network <identifiersep> type != null && network <identifiersep> type . value <identifiersep> of ( zone <identifiersep> network <identifiersep> type ) == network <identifiersep> type . basic ) { \n <ect>
\t2 collection < token > tokens ; \n \t2 <comment> \n \t2 tokens = get <identifiersep> tokens <identifiersep> for ( endpoint ) ; \n <ect>
\t5 while ( rs <identifiersep> account <identifiersep> count . next ( ) ) { \n \t6 long domain <identifiersep> id = rs <identifiersep> account <identifiersep> count . get <identifiersep> long ( 1 ) ; \n \t6 long resource <identifiersep> count = rs <identifiersep> account <identifiersep> count . get <identifiersep> long ( <number_literal> ) ; \n \t6 upgrade <identifiersep> resource <identifiersep> countfor <identifiersep> domain ( conn , domain <identifiersep> id , resource <identifiersep> type , resource <identifiersep> count ) ; } } } \n <ect>
\t4 + <string_literal> + action ; \n \t4 return output ; } } \n \t2 catch ( coordinator <identifiersep> job <identifiersep> exception cex ) { \n \t3 exception <identifiersep> occured = true ; \n <ect>
\t2 } catch ( management <identifiersep> server <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( virtual <identifiersep> machine <identifiersep> migration <identifiersep> exception ex ) { \n <ect>
\t5 logger . info ( <string_literal> , decoded <identifiersep> data ) ; \n \t5 <comment> \n \t5 break ; \n \t4 case <string_literal> : <comment> \n <ect>
\t3 for ( kie <identifiersep> session ksession : kbase . get <identifiersep> kie <identifiersep> sessions ( ) ) { \n \t4 ksession . dispose ( ) ; } } \n \t2 executor . shutdown ( ) ; \n \t2 if ( ! executor . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n <ect>
<comment> \n \t1 private void poll <identifiersep> related <identifiersep> devices ( ) { \n \t2 for ( insteon <identifiersep> address a : m <identifiersep> related <identifiersep> devices ) { \n <ect>
\t5 string index <identifiersep> file <identifiersep> size <identifiersep> in <identifiersep> bytes = ( string ) checksum <identifiersep> metadata . get ( check <identifiersep> sum <identifiersep> metadata . index <identifiersep> file <identifiersep> size <identifiersep> in <identifiersep> bytes ) ; \n \t5 if ( index <identifiersep> file <identifiersep> size <identifiersep> in <identifiersep> bytes != null ) { \n \t6 index <identifiersep> size <identifiersep> in <identifiersep> bytes += long . parse <identifiersep> long ( index <identifiersep> file <identifiersep> size <identifiersep> in <identifiersep> bytes ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , message ) ; \n \t3 num <identifiersep> messages <identifiersep> received ++ ; } \n \t2 @ override \n \t2 public void exception <identifiersep> caught ( io <identifiersep> session session , throwable cause ) throws exception { \n <ect>
\t2 self . role : component , \n \t2 self . command <identifiersep> id : command <identifiersep> id } \n \t1 return command \n \t1 else : \n <ect>
\t2 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t1 private void fix <identifiersep> nicira <identifiersep> keys ( connection conn ) { \n \t2 <comment> \n \t2 list < string > keys = new array <identifiersep> list < string > ( ) ; \n <ect>
\t2 if ( domain <identifiersep> uri == null || domain <identifiersep> uri . is <identifiersep> empty ( ) ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return mappings ; } \n \t2 if ( property <identifiersep> uri == null || property <identifiersep> uri . is <identifiersep> empty ( ) ) { \n <ect>
\t6 statement . close ( ) ; \n \t5 } catch ( sql <identifiersep> exception e1 ) { \n \t6 log . warn ( <string_literal> + e1 , e1 ) ; } \n \t5 statement = null ; } } \n <ect>
\t4 return response <identifiersep> code ; } } \n \t2 <comment> \n \t2 { \n \t3 url = server + <string_literal> + s <identifiersep> domain <identifiersep> router <identifiersep> id . get ( ) ; \n <ect>
\t2 log . warn ( <string_literal> ) ; \n \t2 try { \n \t2 thread . sleep ( math . min ( sleep <identifiersep> time <identifiersep> ms , ( delta <identifiersep> ns - elapsed <identifiersep> ns ) / 1000000l ) ) ; \n \t2 } catch ( interrupted <identifiersep> exception e1 ) { \n <ect>
\t1 } catch ( io <identifiersep> exception e ) { \n \t1 log . error ( <string_literal> , e ) ; \n \t1 response . set <identifiersep> status ( http <identifiersep> servlet <identifiersep> response . sc <identifiersep> internal <identifiersep> server <identifiersep> error ) ; \n \t1 } catch ( malformed <identifiersep> object <identifiersep> name <identifiersep> exception e ) { \n <ect>
\t4 network <identifiersep> failures <identifiersep> proxy proxy = create <identifiersep> proxy ( kafka <identifiersep> host , kafka <identifiersep> port ) ; \n \t4 kafka <identifiersep> properties . put ( <string_literal> , proxy . get <identifiersep> local <identifiersep> port ( ) ) ; } \n \t3 <comment> \n \t3 if ( config . is <identifiersep> secure <identifiersep> mode ( ) ) { \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 try { \n \t1 new solr <identifiersep> collection <identifiersep> configurer ( this , true ) . start ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 if ( assign <identifiersep> qry != null ) \n \t4 assign <identifiersep> qry . close ( ) ; } \n \t2 catch ( grid <identifiersep> exception e ) { \n <ect>
\t2 security <identifiersep> group <identifiersep> vo group =  <identifiersep> security <identifiersep> group <identifiersep> dao . find <identifiersep> by <identifiersep> account <identifiersep> and <identifiersep> name ( account <identifiersep> id , name ) ; \n \t2 if ( group == null ) { \n \t3 group = new security <identifiersep> group <identifiersep> vo ( name , description , domain <identifiersep> id , account <identifiersep> id ) ; \n \t3 group =  <identifiersep> security <identifiersep> group <identifiersep> dao . persist ( group ) ; \n <ect>
\t1 partition . hash <identifiersep> map <identifiersep> local <identifiersep> path = file . to <identifiersep> path ( ) ; \n \t1 partition . hash <identifiersep> map <identifiersep> on <identifiersep> disk = true ; \n \t1 log . info ( <string_literal> + partition <identifiersep> id + <string_literal> + in <identifiersep> mem <identifiersep> row <identifiersep> count + \n \t2 <string_literal> + partition . hash <identifiersep> map . memory <identifiersep> size ( ) + <string_literal> + file ) ; \n <ect>
\t3 print <identifiersep> class <identifiersep> javadoc ( out , array ) ; \n \t2 else \n \t3 print <identifiersep> class <identifiersep> javadoc ( out , <string_literal> + array . get <identifiersep> qualified <identifiersep> input <identifiersep> name ( ) + <string_literal> ) ; } \n \t1 protected void generate <identifiersep> enums ( schema <identifiersep> definition schema ) { \n <ect>
\t4 project =  <identifiersep> manager . get <identifiersep> vnc <identifiersep> project ( vpc . get <identifiersep> domain <identifiersep> id ( ) , vpc . get <identifiersep> account <identifiersep> id ( ) ) ; \n \t3 } else { \n \t4 project =  <identifiersep> manager . get <identifiersep> default <identifiersep> vnc <identifiersep> project ( ) ; } \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 <comment> \n \t2 counter ++ ; \n \t2 if ( 0 == counter % stat <identifiersep> records <identifiersep> interval ) { \n \t3 long total <identifiersep> time = ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ) / time . ms <identifiersep> per <identifiersep> second ; \n <ect>
\t2 log . info ( <string_literal> , our <identifiersep> existing <identifiersep> group . public <identifiersep> key <identifiersep> name ( ) , a <identifiersep> separate <identifiersep> group <identifiersep> copy . public <identifiersep> key <identifiersep> name ( ) ) ; \n \t2 system . out . println ( <string_literal> + our <identifiersep> existing <identifiersep> group . public <identifiersep> key <identifiersep> version ( ) ) ; \n \t2 system . out . println ( <string_literal> + a <identifiersep> separate <identifiersep> group <identifiersep> copy . public <identifiersep> key <identifiersep> version ( ) ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n <ect>
\t3 transformer . transform ( xml <identifiersep> source , new stream <identifiersep> result ( writer ) ) ; \n \t3 writer . flush ( ) ; <comment> \n \t3 log . debug ( <string_literal> , ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 log . debug ( <string_literal> , max <identifiersep> commit <identifiersep> rate <identifiersep> docs , v ) ; \n \t4 max <identifiersep> commit <identifiersep> rate <identifiersep> docs = v ; } \n \t3 if ( avg <identifiersep> commit <identifiersep> rate <identifiersep> mb > max <identifiersep> commit <identifiersep> rate <identifiersep> mb ) { \n \t4 double v = single <identifiersep> exp <identifiersep> smoothing ( avg <identifiersep> commit <identifiersep> rate <identifiersep> mb , max <identifiersep> commit <identifiersep> rate <identifiersep> mb ) ; \n <ect>
\t1 } else if ( ! servo <identifiersep> role <identifiersep> policy <identifiersep> document . to <identifiersep> lower <identifiersep> case ( ) . equals ( policy . get <identifiersep> policy <identifiersep> document ( ) . to <identifiersep> lower <identifiersep> case ( ) ) ) { \n \t1 try { \n \t2 eucalyptus <identifiersep> activity <identifiersep> tasks . get <identifiersep> instance ( ) . delete <identifiersep> role <identifiersep> policy ( role <identifiersep> name , servo <identifiersep> role <identifiersep> policy <identifiersep> name ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t3 while ( en . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t4 string key = ( string ) en . next <identifiersep> element ( ) ; \n \t4 commands . put ( key , pro . get <identifiersep> property ( key ) ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t6 break ; } } \n \t4 status = harvester <identifiersep> status <identifiersep> running ; \n \t4 <comment> \n \t4 list < harvested <identifiersep> collection > cids = harvested <identifiersep> collection <identifiersep> service . find <identifiersep> ready ( main <identifiersep> context ) ; \n <ect>
public class some <identifiersep> fine <identifiersep> grained <identifiersep> lazy <identifiersep> singleton { \n \t1 private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( some <identifiersep> fine <identifiersep> grained <identifiersep> lazy <identifiersep> singleton . class ) ; \n \t1 @ inject \n \t1 public some <identifiersep> fine <identifiersep> grained <identifiersep> lazy <identifiersep> singleton ( ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 try ( final tx tx = app . tx ( ) ) { \n \t3 this <identifiersep> client . set <identifiersep> is <identifiersep> connected ( connected ) ; \n \t3 tx . success ( ) ; \n \t2 } catch ( framework <identifiersep> exception ex ) { \n <ect>
\t1 retries ++ ; \n \t1 new timer ( ) { \n \t2 @ override \n \t2 public void run ( ) { \n <ect>
\t5 session . close ( ) ; \n \t4 if ( connection != null ) \n \t5 connection . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 method add <identifiersep> credentials <identifiersep> method = user <identifiersep> group <identifiersep> information . class . get <identifiersep> method ( <string_literal> , \n \t7 credentials . class ) ; \n \t6 add <identifiersep> credentials <identifiersep> method . invoke ( login <identifiersep> user , credentials ) ; \n \t5 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t3 return false ; \n \t3 } catch ( runtime <identifiersep> exception e ) { \n \t3 illegal <identifiersep> argument <identifiersep> exception e2 = throwables2 . get <identifiersep> first <identifiersep> throwable <identifiersep> of <identifiersep> type ( e , illegal <identifiersep> argument <identifiersep> exception . class ) ; \n \t3 if ( e2 != null ) { \n <ect>
\t3 query . append ( <string_literal> ) ; \n \t3 query . append ( <string_literal> ) ; \n \t3 query . append ( <string_literal> ) ; \n \t3 string query <identifiersep> string = query . to <identifiersep> string ( ) ; \n <ect>
\t2 value = new versioned < byte [ ] > ( <string_literal> . get <identifiersep> bytes ( ) , vector <identifiersep> clock ) ; \n \t2 server = new voldemort <identifiersep> server ( voldemort <identifiersep> config ) ; \n \t2 if ( ! server . is <identifiersep> started ( ) ) \n \t3 server . start ( ) ; \n <ect>
\t2 if ( register <identifiersep> metrics && ! boolean . parse <identifiersep> boolean ( producer <identifiersep> config . get <identifiersep> property ( key <identifiersep> disable <identifiersep> metrics , <string_literal> ) ) ) { \n \t3 map < metric <identifiersep> name , ? extends metric > metrics = producer . metrics ( ) ; \n \t3 if ( metrics == null ) { \n \t4 <comment> \n <ect>
\t2 return entities . stream ( ) \n \t4 . map ( e - > ( aws <identifiersep> usage <identifiersep> record ) e ) \n \t4 . collect ( collectors . to <identifiersep> list ( ) ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t1 @ override \n \t1 protected final void init <identifiersep> servlet <identifiersep> bean ( ) throws servlet <identifiersep> exception { \n \t2 get <identifiersep> servlet <identifiersep> context ( ) . log ( <string_literal> + get <identifiersep> servlet <identifiersep> name ( ) + <string_literal> ) ; \n <ect>
\t3 declare <identifiersep> queues ( channel , queues . to <identifiersep> array ( new queue [ queues . size ( ) ] ) ) ; \n \t3 declare <identifiersep> bindings ( channel , bindings . to <identifiersep> array ( new binding [ bindings . size ( ) ] ) ) ; \n \t3 return null ; \n \t2 } ) ; \n <ect>
public void do <identifiersep> something ( ) { \n \t1 logger . info ( <string_literal> ) ; \n \t1 transaction txn = ebean . current <identifiersep> transaction ( ) ; \n \t1 if ( txn == null ) { \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \t4 z <identifiersep> controller . notify <identifiersep> event <identifiersep> listeners ( new z <identifiersep> wave <identifiersep> inclusion <identifiersep> event ( z <identifiersep> wave <identifiersep> inclusion <identifiersep> event . type . exclude <identifiersep> start ) ) ; \n \t4 break ; \n \t3 case remove <identifiersep> node <identifiersep> status <identifiersep> node <identifiersep> found : \n <ect>
\t1 assert ! advanced <identifiersep> cache ( 1 ) . get <identifiersep> data <identifiersep> container ( ) . contains <identifiersep> key ( k0 ) ; \n \t1 assert <identifiersep> equals ( cache ( 1 ) . get ( k0 ) , <string_literal> ) ; \n \t1 assert advanced <identifiersep> cache ( 0 ) . get <identifiersep> data <identifiersep> container ( ) . contains <identifiersep> key ( k0 ) ; \n \t1 assert advanced <identifiersep> cache ( 1 ) . get <identifiersep> data <identifiersep> container ( ) . contains <identifiersep> key ( k0 ) ; \n <ect>
<comment> \n \t2 protected void kill <identifiersep> current <identifiersep> jvm ( throwable t ) \n \t2 { \n \t3 t . print <identifiersep> stack <identifiersep> trace ( system . err ) ; \n <ect>
\t9 break ; \n \t8 case not <identifiersep> found : \n \t8 case updated : \n \t8 default : \n <ect>
\t6 idx ) ) ; \n \t5 if ( clean <identifiersep> non <identifiersep> colocated ) \n \t6 ldr . remove <identifiersep> data ( new grid <identifiersep> ggfs <identifiersep> block <identifiersep> key ( file <identifiersep> info . id ( ) , null , file <identifiersep> info . evict <identifiersep> exclude ( ) , idx ) ) ; } } } \n \t2 catch ( grid <identifiersep> exception e ) { \n <ect>
public void set <identifiersep> serde ( map <identifiersep> join <identifiersep> object <identifiersep> ser <identifiersep> de <identifiersep> context key <identifiersep> context , map <identifiersep> join <identifiersep> object <identifiersep> ser <identifiersep> de <identifiersep> context value <identifiersep> context ) \n \t1 throws ser <identifiersep> de <identifiersep> exception { \n \t1 abstract <identifiersep> ser <identifiersep> de key <identifiersep> serde = key <identifiersep> context . get <identifiersep> ser <identifiersep> de ( ) , val <identifiersep> serde = value <identifiersep> context . get <identifiersep> ser <identifiersep> de ( ) ; \n \t1 if ( write <identifiersep> helper == null ) { \n <ect>
\t3 logger . debug ( <string_literal> , repo <identifiersep> id , rdi ) ; \n \t2 } else { \n \t3 rdi = new resource <identifiersep> descriptor <identifiersep> impl ( rd ) ; \n \t3 get <identifiersep> index ( ) . descriptors . add ( rdi ) ; \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t2 log . info ( ( <string_literal> + s ) ) ; <comment> \n \t2 return s . starts <identifiersep> with ( <string_literal> ) ; <comment> \n \t2 } ) <comment> \n \t2 . map ( s - > { <comment> \n <ect>
\t5 show <identifiersep> toast <identifiersep> short ( this , get <identifiersep> string ( r . string . toast <identifiersep> lua <identifiersep> config <identifiersep> imported ) ) \n \t5 run <identifiersep> on <identifiersep> ui <identifiersep> thread { \n \t6 script = contents } } \n \t3 } catch ( e : io <identifiersep> exception ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 zk . exists ( <string_literal> , my <identifiersep> watcher1 ) ; \n \t2 zk . exists ( <string_literal> , my <identifiersep> watcher2 ) ; \n \t2 string cmdstring1 = <string_literal> ; \n <ect>
\t3 host <identifiersep> role <identifiersep> status request <identifiersep> display <identifiersep> status = calculated <identifiersep> status . get <identifiersep> overall <identifiersep> display <identifiersep> status <identifiersep> for <identifiersep> request ( stage <identifiersep> display <identifiersep> statuses ) ; \n \t3 request <identifiersep> entity . set <identifiersep> display <identifiersep> status ( request <identifiersep> display <identifiersep> status ) ; \n \t3 em . merge ( request <identifiersep> entity ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 blob <identifiersep> store blob <identifiersep> store = data . get <identifiersep> blob <identifiersep> store ( ) ; \n \t2 nimbus <identifiersep> info nimbus <identifiersep> info = data . get <identifiersep> nimbus <identifiersep> host <identifiersep> port <identifiersep> info ( ) ; \n \t2 if ( update ) { \n \t3 blob <identifiersep> store <identifiersep> utils . update <identifiersep> blob ( blob <identifiersep> store , key , blob <identifiersep> data ) ; \n <ect>
\t6 call <identifiersep> context . get <identifiersep> calling <identifiersep> account <identifiersep> id ( ) , call <identifiersep> context . get <identifiersep> calling <identifiersep> user <identifiersep> id ( ) ) ; \n \t5 really <identifiersep> run ( ) ; \n \t5 async <identifiersep> job <identifiersep> execution <identifiersep> context . unregister ( ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t3 mapped <identifiersep> file <identifiersep> reader idx <identifiersep> file <identifiersep> reader = mapped <identifiersep> index <identifiersep> file <identifiersep> reader . get ( chunk ) ; \n \t3 try { \n \t4 idx <identifiersep> file <identifiersep> reader . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 } finally { \n \t3 spatial <identifiersep> dataset . end ( ) ; } \n \t2 finish <identifiersep> time = system . nano <identifiersep> time ( ) ; \n \t2 time = ( finish <identifiersep> time - start <identifiersep> time ) / 1 . 0e6 ; \n <ect>
\t4 data . get <identifiersep> storm <identifiersep> cluster <identifiersep> state ( ) . unregister <identifiersep> nimbus <identifiersep> detail ( host <identifiersep> port ) ; \n \t3 } catch ( exception e2 ) { \n \t4 log . info ( <string_literal> ) ; \n \t3 } finally { \n <ect>
\t3 rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( ! rs . next ( ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> ) ; \n \t3 } else if ( ! rs . get <identifiersep> string ( 1 ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) || ! rs . get <identifiersep> string ( <number_literal> ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) || ! rs . get <identifiersep> boolean ( <number_literal> ) || ! rs . get <identifiersep> boolean ( <number_literal> ) ) { \n <ect>
\t4 if ( block . connects ) { \n \t5 log . error ( <string_literal> + block . rule <identifiersep> name ) ; \n \t5 fail ( ) ; } } \n \t3 if ( ! threw && block . throws <identifiersep> exception ) { \n <ect>
\t1 protected void update <identifiersep> host <identifiersep> capacity ( connection conn ) { \n \t2 list < prepared <identifiersep> statement > pstmt2close = new array <identifiersep> list < prepared <identifiersep> statement > ( ) ; \n \t2 prepared <identifiersep> statement pstmt = null ; \n \t2 try { \n <ect>
\t2 } catch ( sam <identifiersep> exception e ) { \n \t3  <identifiersep> log . error ( <string_literal> , e ) ; \n \t3 return write <identifiersep> string ( session <identifiersep> error , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 return register ( null , null , user . uid <identifiersep> system , account . account <identifiersep> id <identifiersep> system , uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ) ; } \n \t3 assert context . get <identifiersep> calling <identifiersep> user <identifiersep> id ( ) == user . uid <identifiersep> system : <string_literal> ; \n \t3 return context ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 return whalin ; \n \t3 case <string_literal> : \n \t4 final whalin <identifiersep> v1transcoder whalinv1 = new whalin <identifiersep> v1transcoder ( ) ; \n \t4 whalinv1 . set <identifiersep> compression <identifiersep> threshold ( memcached <identifiersep> properties . get <identifiersep> transcoder <identifiersep> compression <identifiersep> threshold ( ) ) ; \n <ect>
\t3 <comment> \n \t3 migrate <identifiersep> with <identifiersep> storage <identifiersep> command migrate <identifiersep> with <identifiersep> storage <identifiersep> cmd = new migrate <identifiersep> with <identifiersep> storage <identifiersep> command ( to , volume <identifiersep> to <identifiersep> filerto , dest <identifiersep> host . get <identifiersep> guid ( ) ) ; \n \t3 migrate <identifiersep> with <identifiersep> storage <identifiersep> answer migrate <identifiersep> with <identifiersep> storage <identifiersep> answer = ( migrate <identifiersep> with <identifiersep> storage <identifiersep> answer ) agent <identifiersep> mgr . send ( src <identifiersep> host . get <identifiersep> id ( ) , migrate <identifiersep> with <identifiersep> storage <identifiersep> cmd ) ; \n \t3 if ( migrate <identifiersep> with <identifiersep> storage <identifiersep> answer == null ) { \n <ect>
\t1 public boolean flush <identifiersep> all ( string [ ] servers ) { \n \t2 <comment> \n \t2 <comment> \n \t2 if ( pool == null ) { \n <ect>
\t4 = win32localhost <identifiersep> retriever . get <identifiersep> source <identifiersep> for <identifiersep> destination ( \n \t6 intended <identifiersep> destination . get <identifiersep> address ( ) ) ; \n \t3 if ( src == null ) \n \t3 { \n <ect>
\t5 f . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) || \n \t5 f . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) || \n \t5 f . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) || \n \t5 f . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 unblock <identifiersep> all <identifiersep> data <identifiersep> nodes ( <string_literal> ) ; } \n \t2 logger . info ( <string_literal> ) ; \n \t2 restore <identifiersep> snapshot <identifiersep> response restore <identifiersep> snapshot <identifiersep> response = restore <identifiersep> fut . get ( ) ; \n <ect>
\t2 if ( service == null || authentication == null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( multifactor <identifiersep> map == null || multifactor <identifiersep> map . is <identifiersep> empty ( ) ) { \n <ect>
\t3 log . warning <identifiersep> stack <identifiersep> trace ( log . fac <identifiersep> test , e ) ; \n \t3 throw e ; } } \n \t1 @ test \n \t1 public void test <identifiersep> group ( ) throws exception { \n <ect>
\t5 log . debug ( <string_literal> , path ) ; \n \t5 throw class <identifiersep> path <identifiersep> exception ; <comment> \n \t3 <comment> \n \t3 if ( rules == null ) { \n <ect>
\t1 fun on <identifiersep> group <identifiersep> callback ( module <identifiersep> name : string , t : task ) : string ? { \n \t2 val module = try { \n \t3 globals . get ( module <identifiersep> name ) . checktable ( ) \n \t2 } catch ( e : lua <identifiersep> error ) { \n <ect>
\t3 final long begin <identifiersep> insert = system . nano <identifiersep> time ( ) ; \n \t3 for ( int i = 0 ; i < num ; i ++ ) { \n \t4 rocks <identifiersep> db . merge ( write <identifiersep> options , key <identifiersep> bytes , value <identifiersep> bytes ) ; } \n \t3 final long end <identifiersep> insert = system . nano <identifiersep> time ( ) ; \n <ect>
\t3 context . get <identifiersep> metric <identifiersep> cache ( ) . put <identifiersep> meta ( topology , mem <identifiersep> meta ) ; \n \t3 if ( pairs <identifiersep> to <identifiersep> check . size ( ) > 0 ) { \n \t4 check <identifiersep> metric <identifiersep> event . push <identifiersep> event ( topology , tm <identifiersep> context , pairs <identifiersep> to <identifiersep> check ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t2 } catch ( amazon <identifiersep> s3exception e ) { \n \t3 if ( e . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> not <identifiersep> found ) { \n \t4 return null ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 thread <identifiersep> two . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 cancel <identifiersep> activity <identifiersep> instance thread <identifiersep> three = new cancel <identifiersep> activity <identifiersep> instance ( process <identifiersep> instance <identifiersep> id , task3activity <identifiersep> instance <identifiersep> id ) ; \n \t1 thread <identifiersep> three . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n <ect>
\t2 module module = modules [ conf . module ] ; \n \t2 if ( module != null ) { \n \t3 module . execute <identifiersep> command ( command , conf . channel ) ; \n \t2 } else { \n <ect>
\t6 return null ; \n \t5 } catch ( no <identifiersep> transition <identifiersep> exception e ) { \n \t6 s <identifiersep> logger . warn ( e . get <identifiersep> message ( ) ) ; } } \n \t3 } else if ( server <identifiersep> state == state . stopping ) { \n <ect>
\t2 return true ; } \n \t1 @ override \n \t1 public boolean verify <identifiersep> services <identifiersep> combination ( set < service > services ) { \n \t2 if ( ! services . contains ( service . firewall ) ) { \n <ect>
\t2 try { \n \t3 if ( connection != null && ! connection . is <identifiersep> closed ( ) ) \n \t4 connection . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t5 <comment> \n \t5 transaction <identifiersep> completed . drain <identifiersep> permits ( ) ; \n \t5 <comment> \n \t5 byte [ ] buffer = last <identifiersep> sent <identifiersep> message . get <identifiersep> message <identifiersep> buffer ( ) ; \n <ect>
\t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 <comment> \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> + first <identifiersep> version <identifiersep> name ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> + middle <identifiersep> version <identifiersep> name ) ; \n <ect>
\t5 out . write ( buffer , 0 , n <identifiersep> read ) ; } \n \t4 in . close ( ) ; } \n \t3 out . close ( ) ; \n \t3 stream . close ( ) ; \n <ect>
\t7 dirs . put ( run <identifiersep> level , string <identifiersep> utils . remove <identifiersep> end ( dir , <string_literal> ) + <string_literal> + run <identifiersep> level ) ; } \n \t5 } else { \n \t6 log . debug ( <string_literal> , dir ) ; } \n \t4 } else { \n <ect>
\t1 log . info ( <string_literal> + get <identifiersep> short <identifiersep> description ( ) ) ; \n \t1 start ( ) ; \n \t1 } catch ( exception e ) { \n \t1 log . error ( <string_literal> , e ) ; } \n <ect>
\t5 assert <identifiersep> that ( response . value1 , equal <identifiersep> to ( 1 ) ) ; \n \t5 assert <identifiersep> that ( response . value2 , equal <identifiersep> to ( 0 ) ) ; <comment> \n \t4 @ override \n \t4 public void handle <identifiersep> exception ( transport <identifiersep> exception exp ) { \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , <string_literal> , \n \t4 concurrent <identifiersep> consumers <identifiersep> config . get <identifiersep> name ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , int . class , \n \t4 concurrent <identifiersep> consumers <identifiersep> config . get <identifiersep> parameter <identifiersep> type ( ) ) ; \n <ect>
\t3 candidate <identifiersep> hosts . add <identifiersep> all ( component <identifiersep> hosts . key <identifiersep> set ( ) ) ; } } \n \t1 } else { \n \t2 <comment> \n \t2 candidate <identifiersep> hosts . add <identifiersep> all ( clusters . get <identifiersep> hosts <identifiersep> for <identifiersep> cluster ( cluster . get <identifiersep> cluster <identifiersep> name ( ) ) . key <identifiersep> set ( ) ) ; } \n <ect>
\t4 throw new resource <identifiersep> unavailable <identifiersep> exception ( <string_literal> + router . get <identifiersep> data <identifiersep> center <identifiersep> id <identifiersep> to <identifiersep> deploy <identifiersep> in ( ) + <string_literal> + vpn . get <identifiersep> account <identifiersep> id ( ) + <string_literal> \n \t6 + router . get <identifiersep> instance <identifiersep> name ( ) + <string_literal> + answer . get <identifiersep> details ( ) , data <identifiersep> center . class , router . get <identifiersep> data <identifiersep> center <identifiersep> id <identifiersep> to <identifiersep> deploy <identifiersep> in ( ) ) ; } \n \t3 answer = cmds . get <identifiersep> answer ( <string_literal> ) ; \n \t3 if ( ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t2 return config <identifiersep> from <identifiersep> bytes ( data ) ; \n \t1 } finally { \n \t2 cf . close ( ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t2 response = get <identifiersep> url <identifiersep> response ( file , resource <identifiersep> id ) ; \n \t2 if ( response != null ) { \n \t2 return response ; \n \t2 } else { \n <ect>
\t3 cidrlist = [ '0 . 0 . 0 . 0 / 0' ] , \n \t3 startport = self . services [ <string_literal> ] [ <string_literal> ] , \n \t3 endport = self . services [ <string_literal> ] [ <string_literal> ] \n \t2 ) \n <ect>
\t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } else { \n <ect>
\t2 final string vm <identifiersep> name = command . get <identifiersep> name ( ) ; \n \t2 final string private <identifiersep> ip = command . get <identifiersep> ip ( ) ; \n \t2 final int cmd <identifiersep> port = command . get <identifiersep> port ( ) ; \n <ect>
\t7 <comment> \n \t7 properties = ( list ) sources [ 1 ] ; \n \t7 <comment> \n \t7 if ( properties . size ( ) == 0 ) { \n <ect>
\t7 throw new runtime <identifiersep> exception ( <string_literal> + name + <string_literal> ) ; \n \t6 } else { \n \t7 throw new runtime <identifiersep> exception ( <string_literal> + name + <string_literal> ) ; } } \n \t5 submit <identifiersep> jar ( client , conf ) ; \n <ect>
\t3 string calculated <identifiersep> hash = get <identifiersep> validation <identifiersep> hash ( username , password , get <identifiersep> client <identifiersep> ip ( request ) ) ; \n \t3 if ( cookie <identifiersep> hash . equals ( calculated <identifiersep> hash ) ) { \n \t4 return true ; \n \t3 } else { \n <ect>
\t2 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t1 method m = this . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> + action <identifiersep> num , string . class ) ; \n \t1 m . invoke ( this , value ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t1 public static logger log = logger <identifiersep> factory . get <identifiersep> logger ( split <identifiersep> record . class ) ; \n \t1 private tps <identifiersep> counter tps <identifiersep> counter ; \n \t1 public void prepare ( map conf , topology <identifiersep> context context ) { \n \t2 tps <identifiersep> counter = new tps <identifiersep> counter ( context . get <identifiersep> this <identifiersep> component <identifiersep> id ( ) + <string_literal> + context . get <identifiersep> this <identifiersep> task <identifiersep> id ( ) ) ; \n <ect>
\t6 } else { \n \t7 addresses . add <identifiersep> all ( arrays . as <identifiersep> list ( request <identifiersep> lookup ) ) ; } \n \t5 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n \t6 add <identifiersep> as <identifiersep> literal <identifiersep> address ( addresses , address ) ; \n <ect>
\t3 return ; } \n \t2 connection . get <identifiersep> dispatch <identifiersep> queue ( ) . execute ( new task ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n <ect>
\t4 if ( s != null ) \n \t5 s . close ( ) ; \n \t3 } catch ( io <identifiersep> exception ex ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 throw new execution <identifiersep> exception ( <string_literal> + client <identifiersep> name ) ; \n \t4 } else { \n \t5 return true ; } \n \t3 default : \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t1 static void run <identifiersep> script ( data <identifiersep> source ds , resource script ) { \n \t2 list < string > statements = parse <identifiersep> statements ( script ) ; \n \t2 try { \n \t3 try ( connection connection = ds . get <identifiersep> connection ( ) ) { \n <ect>
\t2 { \n \t3 if ( debug <identifiersep> coalescing && should <identifiersep> log <identifiersep> average ) \n \t3 { \n \t4 should <identifiersep> log <identifiersep> average = false ; \n <ect>
\t1 if params . nifi <identifiersep> ssl <identifiersep> enabled : \n \t2 url = <string_literal> . format ( nifi <identifiersep> master <identifiersep> host , params . nifi <identifiersep> node <identifiersep> ssl <identifiersep> port ) \n \t1 else : \n \t2 url = <string_literal> . format ( nifi <identifiersep> master <identifiersep> host , params . nifi <identifiersep> node <identifiersep> port ) \n <ect>
\t4 io <identifiersep> utils . write ( <string_literal> , stream , <string_literal> ) ; } \n \t3 stream . flush ( ) ; \n \t3 io <identifiersep> utils . close <identifiersep> quietly ( stream ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t6 new extension <identifiersep> id ( extension <identifiersep> dependency . get <identifiersep> id ( ) , \n \t7 extension <identifiersep> dependency . get <identifiersep> version <identifiersep> constraint ( ) . get <identifiersep> version ( ) ) , \n \t6 namespace , true , managed <identifiersep> dependencies ) ; \n \t4 } catch ( install <identifiersep> exception e ) { \n <ect>
\t1 public void on <identifiersep> post <identifiersep> update ( final domain <identifiersep> group in <identifiersep> updated <identifiersep> domain <identifiersep> group ) \n \t1 { \n \t2 { \n <ect>
\t6 thread <identifiersep> pool <identifiersep> executor . class . cast ( executor <identifiersep> service ) . get <identifiersep> maximum <identifiersep> pool <identifiersep> size ( ) ) ; \n \t3 } else { \n \t4 logger . info ( <string_literal> ) ; } } \n \t2 logger . info ( <string_literal> , broadcaster <identifiersep> factory . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; \n <ect>
\t2 routing <identifiersep> nodes = cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) ; \n \t2 for ( routing <identifiersep> node routing <identifiersep> node : routing <identifiersep> nodes ) { \n \t3 for ( shard <identifiersep> routing shard <identifiersep> routing : routing <identifiersep> node ) { \n \t4 assert <identifiersep> that ( shard <identifiersep> routing . state ( ) , matchers . equal <identifiersep> to ( shard <identifiersep> routing <identifiersep> state . started ) ) ; } } \n <ect>
\t3 for ( int i = 0 ; i < max <identifiersep> msgs ; i ++ ) { \n \t4 try { \n \t5 message msg = consumer . get <identifiersep> message ( message <identifiersep> timeout ) ; \n \t5 if ( msg != null ) { \n <ect>
\t2 poller . shutdown ( ) ; \n \t2 try { \n \t3 poller . await <identifiersep> termination ( <number_literal> + config . get <identifiersep> async <identifiersep> timeout ( ) , time <identifiersep> unit . milliseconds ) ; \n \t3 if ( ! poller . is <identifiersep> terminated ( ) ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 return null ; } \n \t1 @ override \n \t1 public set < string > supported <identifiersep> file <identifiersep> attribute <identifiersep> views ( ) { \n <ect>
\t3 value = point2string ( ( point <identifiersep> type ) state ) ; \n \t3 logger . debug ( <string_literal> , value ) ; \n \t2 } else if ( state instanceof decimal <identifiersep> type ) { \n \t3 value = convert <identifiersep> big <identifiersep> decimal <identifiersep> to <identifiersep> num ( ( ( decimal <identifiersep> type ) state ) . to <identifiersep> big <identifiersep> decimal ( ) ) ; \n <ect>
\t2 clustered = config . is <identifiersep> clustered ( ) ; \n \t2 region = config . get <identifiersep> region ( ) ; } \n \t1 @ cacheable ( <string_literal> ) \n \t1 public list < agent <identifiersep> info > get <identifiersep> local <identifiersep> agents ( ) { \n <ect>
\t4 try { \n \t5 final optional < provider <identifiersep> login <identifiersep> page <identifiersep> configuration > provider = build <identifiersep> provider <identifiersep> configuration ( client , web <identifiersep> context ) ; \n \t5 provider . if <identifiersep> present ( urls : : add ) ; \n \t4 } catch ( final exception e ) { \n <ect>
\t1 this . branch <identifiersep> configuration = branch <identifiersep> configuration ; \n \t1 this . progress <identifiersep> report = new progress <identifiersep> report ( <string_literal> , time <identifiersep> unit . seconds . to <identifiersep> millis ( <number_literal> ) ) ; } \n public void execute ( ) { \n \t1 if ( branch <identifiersep> configuration . is <identifiersep> short <identifiersep> or <identifiersep> pull <identifiersep> request ( ) ) { \n <ect>
\t2 hector <identifiersep> thread . start ( ) ; \n \t2 wait <identifiersep> for <identifiersep> messages <identifiersep> to <identifiersep> be <identifiersep> delivered ( ) ; \n \t2 <comment> \n \t2 assert <identifiersep> equals ( hector <identifiersep> to <identifiersep> halo <identifiersep> ctr , counter ) ; \n <ect>
\t2 catch ( io <identifiersep> exception ex ) { \n \t3 ex . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t2 return contents . to <identifiersep> string ( ) ; } \n \t1 public static void dump <identifiersep> meta <identifiersep> model <identifiersep> source <identifiersep> for ( class < ? > clazz ) { \n <ect>
\t3 result . ouch3 = ( table <identifiersep> not <identifiersep> found <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> ouch3is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t6 . get <identifiersep> bytes ( ) ) ) ; \n \t4 dm <identifiersep> old . undefine ( ) ; \n \t4 dm <identifiersep> new = conn . domain <identifiersep> define <identifiersep> xml ( domain <identifiersep> xml ) ; } \n \t2 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
private string generate <identifiersep> migration ( request request , migration db <identifiersep> migration , string drops <identifiersep> for ) throws io <identifiersep> exception { \n \t1 string full <identifiersep> version = get <identifiersep> full <identifiersep> version ( request . migration <identifiersep> model , drops <identifiersep> for ) ; \n \t1 logger . info ( <string_literal> , full <identifiersep> version ) ; \n \t1 if ( ! write <identifiersep> migration <identifiersep> xml ( db <identifiersep> migration , request . model <identifiersep> dir , full <identifiersep> version ) ) { \n <ect>
\t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n \t5  <identifiersep> log . info ( <string_literal> + reply <identifiersep> type + <string_literal> + waiter . get <identifiersep> reply <identifiersep> object ( ) ) ; } } \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; sleep ( <number_literal> ) , i ++ ) \n \t3 try { \n \t4 download0 ( rds . url , path , rds . id ) ; \n \t4 event ( type . end <identifiersep> download , rds , null ) ; \n <ect>
\t3 call <identifiersep> scene ( ( scene <identifiersep> binding <identifiersep> config ) config , command , state ) ; \n \t2 } else if ( config instanceof device <identifiersep> binding <identifiersep> config ) { \n \t3 call <identifiersep> device ( ( device <identifiersep> binding <identifiersep> config ) config , command , state ) ; \n \t2 } else { \n <ect>
\t2 net <identifiersep> message message = ( net <identifiersep> message ) e . get <identifiersep> message ( ) ; \n \t2 server . queue <identifiersep> message ( message ) ; } \n \t1 @ override \n \t1 public void exception <identifiersep> caught ( channel <identifiersep> handler <identifiersep> context ctx , exception <identifiersep> event e ) { \n <ect>
<comment> \n \t1 protected void populate <identifiersep> authentication <identifiersep> metadata <identifiersep> attributes ( final authentication <identifiersep> builder builder , \n <number_literal> final authentication <identifiersep> transaction transaction ) { \n <ect>
\t2 return options ; } \n \t1 @ override \n \t1 protected void execute ( options <identifiersep> helper options <identifiersep> helper ) throws exception { \n \t2 logger . info ( <string_literal> + options <identifiersep> helper . get <identifiersep> options <identifiersep> as <identifiersep> string ( ) + <string_literal> ) ; \n <ect>
\t5 s <identifiersep> logger \n \t7 . error ( <string_literal> + username + <string_literal> ) ; \n \t5 return - 1 ; } } \n \t2 } else { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 transport . close ( ) ; \n \t3 } catch ( messaging <identifiersep> exception e ) { \n <ect>
\t3 model <identifiersep> node value = prop . get <identifiersep> value ( ) ; \n \t3 if ( value . is <identifiersep> defined ( ) ) { \n \t4 json . get ( name ) . set ( value ) ; } } } \n \t1 public boolean is <identifiersep> secure <identifiersep> deployment ( deployment <identifiersep> unit deployment <identifiersep> unit ) { \n <ect>
\t4 if ( ! disassociate <identifiersep> public <identifiersep> ip <identifiersep> address ( ip . get <identifiersep> id ( ) , ctx . get <identifiersep> calling <identifiersep> user <identifiersep> id ( ) , ctx . get <identifiersep> calling <identifiersep> account ( ) ) ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + ip . get <identifiersep> id ( ) ) ; \n \t5 success = false ; \n \t4 } else { \n <ect>
\t5 throw new socks <identifiersep> exception ( <string_literal> ) ; } \n \t4 byte addr [ ] = new byte [ addr <identifiersep> len ] ; \n \t4 in . read <identifiersep> fully ( addr ) ; \n \t4 conn <identifiersep> host <identifiersep> name = data <identifiersep> helper . get <identifiersep> utf8 ( addr ) ; } \n <ect>
\t1 metadata <identifiersep> table <identifiersep> util . add <identifiersep> delete <identifiersep> entry ( master , table <identifiersep> id , bulk <identifiersep> dir . to <identifiersep> string ( ) ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 connector conn = master . get <identifiersep> connector ( ) ; \n \t1 metadata <identifiersep> table <identifiersep> util . remove <identifiersep> bulk <identifiersep> load <identifiersep> entries ( conn , table <identifiersep> id , tid ) ; \n <ect>
\t5 if ( set <identifiersep> to <identifiersep> null ) \n \t6 con = null ; } \n \t3 } <comment> \n \t2 } catch ( concurrent <identifiersep> modification <identifiersep> exception e ) { \n <ect>
\t2 metadata . for <identifiersep> each ( r - > { \n \t3 final scan <identifiersep> request scan = new scan <identifiersep> request ( r . get <identifiersep> properties ( ) . get <identifiersep> storage <identifiersep> name ( ) ) ; \n \t3 logger . debug ( <string_literal> , scan ) ; \n \t3 final scan <identifiersep> result result = this . amazon <identifiersep> dynamo <identifiersep> db <identifiersep> client . scan ( scan ) ; \n <ect>
\t2 final thread consumer <identifiersep> thread2 = new thread ( ) { \n \t3 public void run ( ) { \n \t4 try { \n \t5 latch <identifiersep> messages <identifiersep> created . await ( ) ; \n <ect>
\t1 owner = params . unix <identifiersep> user , \n \t1 group = params . unix <identifiersep> group , \n \t1 mode = <number_literal> \n \t1 ) \n <ect>
\t4 props . create ( process <identifiersep> reaper . class , job <identifiersep> manager , log , actor <identifiersep> died <identifiersep> exit <identifiersep> code ) , \n \t4 <string_literal> ) ; } \n \t2 catch ( throwable t ) { \n \t3 <comment> \n <ect>
\t3 to <identifiersep> update . set <identifiersep> feed <identifiersep> title ( feed <identifiersep> reader . get <identifiersep> feed <identifiersep> title ( ) ) ; \n \t3 entity <identifiersep> mapper . flush ( ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 rs . next ( ) ; \n \t1 assert <identifiersep> equals ( expected [ 0 ] , rs . get <identifiersep> string ( <string_literal> ) ) ; \n \t1 assert <identifiersep> equals ( expected [ 1 ] , rs . get <identifiersep> string ( <string_literal> ) ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 } catch ( interrupted <identifiersep> exception ex ) { \n \t2 log . warn ( <string_literal> ) ; \n \t2 return ; \n \t1 } catch ( exception | assertion <identifiersep> error ex ) { \n <ect>
\t3 pkg . save ( output . get <identifiersep> file <identifiersep> on <identifiersep> disk ( ) . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 pkg . close ( ) ; \n \t3 doc . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> has <identifiersep> qualifier ( ) { \n <ect>
\t2 predicate < inet <identifiersep> address > resolver = ( predicate < inet <identifiersep> address > ) candidate . new <identifiersep> instance ( ) ; \n \t2 subnet <identifiersep> checkers . put <identifiersep> instance ( candidate , resolver ) ; \n \t2 return true ; \n \t1 } catch ( exception ex ) { \n <ect>
\t2 return null ; \t1 } \n \t1 public void change <identifiersep> link <identifiersep> weight ( string link <identifiersep> id , double weight ) { \n \t2 labeled <identifiersep> link link = this . get <identifiersep> link <identifiersep> by <identifiersep> id ( link <identifiersep> id ) ; \n \t2 if ( link == null ) { \n <ect>
\t2 sql = upgrades . database <identifiersep> filters . newversion . get <identifiersep> connection ( <string_literal> ) ; \n \t2 sql . execute ( <string_literal> ) ; \n \t2 return true ; \n \t1 } catch ( exception ex ) { \n <ect>
\t3 } finally { \n \t4 org . apache . commons . io . io <identifiersep> utils . close <identifiersep> quietly ( is ) ; } \n \t3 string res <identifiersep> string = p . get <identifiersep> property ( <string_literal> ) ; \n \t3 if ( res <identifiersep> string == null ) { \n <ect>
\t6 log . info ( <string_literal> + rsrc3 ) ; \n \t6 log . info ( <string_literal> + rsrc4 ) ; \n \t6 log . info ( <string_literal> + rsrc5 ) ; \n \t6 log . info ( <string_literal> + rsrc6 ) ; \n <ect>
\t2 search <identifiersep> criteria < project <identifiersep> account <identifiersep> vo > sc = all <identifiersep> fields <identifiersep> search . create ( ) ; \n \t2 sc . set <identifiersep> parameters ( <string_literal> , account <identifiersep> id ) ; \n \t2 int rows <identifiersep> removed = remove ( sc ) ; \n \t2 if ( rows <identifiersep> removed > 0 ) { \n <ect>
\t5 read ++ ; \n \t5 extract <identifiersep> content ( buffer , prop <identifiersep> buffer , msg , read == loop ) ; } \n \t3 } catch ( jms <identifiersep> exception e ) { \n \t4 string error <identifiersep> code = optional . of <identifiersep> nullable ( e . get <identifiersep> error <identifiersep> code ( ) ) . or <identifiersep> else ( <string_literal> ) ; \n <ect>
\t7 visibility <identifiersep> flags . put ( dom <identifiersep> node . visible <identifiersep> to <identifiersep> public <identifiersep> users , parent <identifiersep> node . get <identifiersep> property ( dom <identifiersep> node . visible <identifiersep> to <identifiersep> public <identifiersep> users ) ) ; \n \t7 try { \n \t8 new <identifiersep> node . set <identifiersep> properties ( new <identifiersep> node . get <identifiersep> security <identifiersep> context ( ) , visibility <identifiersep> flags ) ; \n \t7 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t1 public void send <identifiersep> announcement <identifiersep> reply ( long uid , peer <identifiersep> node peer , byte [ ] noderef , byte <identifiersep> counter ctr ) \n \t1 throws not <identifiersep> connected <identifiersep> exception { \n \t2 byte [ ] padded = new byte [ padded <identifiersep> noderef <identifiersep> size ] ; \n \t2 if ( noderef . length > padded . length ) { \n <ect>
\t2 args . add ( <string_literal> ) ; \n \t2 try { \n \t3 hybrid <identifiersep> cube <identifiersep> cli . main ( args . to <identifiersep> array ( new string [ args . size ( ) ] ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t2 logger . warn ( <string_literal> + cfg ) ; \n \t2 for ( int i = 0 ; i < cfg . expected <identifiersep> map . size ( ) ; i ++ ) { \n \t3 int expected = cfg . expected <identifiersep> map . get ( i ) ; \n \t3 int observed = qq . original <identifiersep> to <identifiersep> quantized <identifiersep> map . get ( i ) ; \n <ect>
\t2 } catch ( malformed <identifiersep> url <identifiersep> exception exc ) { \n \t3 return null ; } } \n \t1 @ override \n \t1 public boolean exists ( ) throws runtime <identifiersep> io <identifiersep> exception { \n <ect>
\t2 try ( file <identifiersep> output <identifiersep> stream fos = new file <identifiersep> output <identifiersep> stream ( out ) ; \n \t4 buffered <identifiersep> output <identifiersep> stream bos = new buffered <identifiersep> output <identifiersep> stream ( fos ) ) { \n \t3 j <identifiersep> orphan <identifiersep> utils . write ( s . get <identifiersep> response <identifiersep> data ( ) , bos ) ; <comment> \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 public static sensor <identifiersep> manager get <identifiersep> sensor <identifiersep> manager ( ) { \n \t2 return sensor <identifiersep> managers . get <identifiersep> instance ( ) ; } \n \t1 public static void start ( ) throws exception { \n \t2 if ( ! stats <identifiersep> configuration . is <identifiersep> stats <identifiersep> reporting <identifiersep> enabled ( ) ) { \n <ect>
\t4 get <identifiersep> context ( ) . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , ack <identifiersep> end - recv <identifiersep> end ) ; \n \t3 } else { \n \t4 <comment> \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 alignment <identifiersep> sorter . add ( merging <identifiersep> iterator . next ( ) ) ; \n \t3 count ++ ; \n \t3 if ( count > 0 && count % <number_literal> == 0 ) { \n \t4 log . info ( <string_literal> + count + <string_literal> ) ; } } \n <ect>
\t1 <comment> \n \t1 private void init <identifiersep> primaries ( ) { \n <ect>
\t2  <identifiersep> context . sha ( ) . calculate <identifiersep> hash ( iv , 0 , <number_literal> , h , 0 ) ; \n \t2 boolean eq = data <identifiersep> helper . eq ( decr , 0 , h , 0 , hash . hash <identifiersep> length ) ; \n \t2 simple <identifiersep> byte <identifiersep> cache . release ( h ) ; \n \t2 if ( ! eq ) { \n <ect>
\t4 object return <identifiersep> value = entity <identifiersep> extractor <identifiersep> method . invoke ( entity <identifiersep> extractor , url <identifiersep> parameters ) ; \n \t4 extractions = return <identifiersep> value . to <identifiersep> string ( ) ; \n \t3 } else { \n \t4 logger . info ( <string_literal> + extraction <identifiersep> url ) ; \n <ect>
\t3 <comment> \n \t3 simple <identifiersep> repository <identifiersep> file <identifiersep> data file <identifiersep> data = \n \t4 unified <identifiersep> repository . get <identifiersep> data <identifiersep> for <identifiersep> read ( file <identifiersep> id , simple <identifiersep> repository <identifiersep> file <identifiersep> data . class ) ; \n \t3 if ( file <identifiersep> data != null ) { \n <ect>
\t2 default : \n \t3 log . warn ( <string_literal> + to <identifiersep> string ( event ) ) ; } \n \t2 break ; \n \t1 default : \n <ect>
\t3 g . add <identifiersep> edge ( e . get <identifiersep> source ( ) , e . get <identifiersep> target ( ) , e ) ; \n \t2 return g ; } \n \t1 public static directed <identifiersep> weighted <identifiersep> multigraph < node , labeled <identifiersep> link > as <identifiersep> labeled <identifiersep> graph ( directed <identifiersep> weighted <identifiersep> multigraph < node , default <identifiersep> link > graph ) { \n \t2 if ( graph == null ) { \n <ect>
\t3 return false ; \n \t2 } else if ( exclude instanceof empty <identifiersep> points <identifiersep> to <identifiersep> set ) { \n \t3 return add <identifiersep> all ( other , null ) ; } \n \t2 if ( ! g . v ( ) . points <identifiersep> to <identifiersep> set <identifiersep> internal <identifiersep> warned <identifiersep> already ) { \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> + vm + <string_literal> + guest <identifiersep> network + \n \t6 <string_literal> , ex ) ; \n \t5 success = false ; } \n \t4 if ( ! success ) { \n <ect>
\t2 keycloak <identifiersep> transaction tx = resteasy <identifiersep> provider <identifiersep> factory . get <identifiersep> context <identifiersep> data ( keycloak <identifiersep> transaction . class ) ; \n \t2 tx . set <identifiersep> rollback <identifiersep> only ( ) ; \n \t2 int status <identifiersep> code = get <identifiersep> status <identifiersep> code ( throwable ) ; \n \t2 if ( status <identifiersep> code >= <number_literal> && status <identifiersep> code < = <number_literal> ) { \n <ect>
\t8 object <identifiersep> name name ) \n \t3 throws exception \n \t1 { \n <ect>
\t2 if ( ! completed ) { \n \t3 throw new io <identifiersep> exception ( <string_literal> + path <identifiersep> from + \n \t5 <string_literal> + path <identifiersep> to + <string_literal> + this . client . get <identifiersep> reply <identifiersep> string ( ) ) ; } \n <ect>
\t2 } else { \n \t3 logger . warn ( <string_literal> + project ) ; } } \n \t1 protected void clean <identifiersep> all <identifiersep> data <identifiersep> cache ( ) { \n \t2 if ( cache <identifiersep> manager != null ) { \n <ect>
\t3  <identifiersep> lb2stickinesspolicies <identifiersep> dao . persist ( stickiness <identifiersep> policy ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> + load <identifiersep> balancer <identifiersep> id + <string_literal> + stickiness <identifiersep> policy <identifiersep> id ) ; \n \t3 try { \n \t4 if ( ! apply <identifiersep> load <identifiersep> balancer <identifiersep> config ( load <identifiersep> balancer <identifiersep> id ) ) { \n <ect>
\t3 client ( ) . prepare <identifiersep> index ( index <identifiersep> name , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) . execute ( ) . action <identifiersep> get ( ) ; } \n \t2 docs = between ( <number_literal> , <number_literal> ) ; \n \t2 for ( int i = 0 ; i < docs ; i ++ ) { \n \t3 client ( ) . prepare <identifiersep> index ( other <identifiersep> index <identifiersep> name , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) . execute ( ) . action <identifiersep> get ( ) ; } \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 engine . close ( ) ; } \n \t1 public void update <identifiersep> store ( store <identifiersep> definition store <identifiersep> def ) { \n <ect>
\t4 if ( action == action . stop <identifiersep> camel <identifiersep> context ) { \n \t5 log . info ( <string_literal> , tail ) ; \n \t5 camel <identifiersep> context . stop ( ) ; \n \t4 } else if ( action == action . stop <identifiersep> route ) { \n <ect>
\t3 } else if ( state == on <identifiersep> off <identifiersep> value . on ) { \n \t4 logger . debug ( <string_literal> ) ; \n \t4 get <identifiersep> mbrick ( ) . get <identifiersep> tinkerforge <identifiersep> device ( ) . set <identifiersep> selected <identifiersep> values ( mask , mask ) ; \n \t3 } else { \n <ect>
\t1 try { \n \t1 security <identifiersep> utils . get <identifiersep> installed <identifiersep> context . run <identifiersep> secured ( tm <identifiersep> runner ) \n \t1 } catch { \n \t1 case e : exception = > \n <ect>
\t2 try { \n \t3 if ( open <identifiersep> shell <identifiersep> before <identifiersep> execute ) { \n \t4 session session = null ; \n \t4 try { \n <ect>
\t2 subject . get <identifiersep> principals ( ) . remove <identifiersep> all ( principals ) ; \n \t2 principals . clear ( ) ; \n \t2 clear ( ) ; \n \t2 if ( debug ) { \n <ect>
\t1 runner . should <identifiersep> stop . set ( true ) ; \n \t1 runner <identifiersep> thread . interrupt ( ) ; \n \t1 while ( runner <identifiersep> thread . is <identifiersep> alive ( ) ) { \n \t2 try { \n <ect>
\t6 user <identifiersep> log . info ( <string_literal> , hosts . to <identifiersep> string ( ) ) ; \n \t6 user <identifiersep> log . info ( <string_literal> , config . get <identifiersep> cluster <identifiersep> name ( ) ) ; \n \t6 cluster . create ( config . get <identifiersep> cluster <identifiersep> name ( ) ) ; \n \t6 break ; } \n <ect>
\t2 log . debug ( <string_literal> , prefix ) ; \n \t2 while ( pe . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t3 string key = pe . next <identifiersep> element ( ) ; \n \t3 if ( key . starts <identifiersep> with ( prefix ) && key . ends <identifiersep> with ( suffix ) ) { \n <ect>
\t4 logger . debug ( <string_literal> ) ; \n \t4 m <identifiersep> device = factory . create <identifiersep> m <identifiersep> bricklet <identifiersep> lcd20x4 ( ) ; \n \t4 m <identifiersep> device . set <identifiersep> device <identifiersep> identifier ( bricklet <identifiersep> lcd20x4 . device <identifiersep> identifier ) ; \n \t3 } else if ( device <identifiersep> identifier == bricklet <identifiersep> industrial <identifiersep> digital <identifiersep> in4 . device <identifiersep> identifier ) { \n <ect>
\t1 private void prepare <identifiersep> bare <identifiersep> metal <identifiersep> dhcp <identifiersep> entry ( nic <identifiersep> profile nic , dhcp <identifiersep> entry <identifiersep> command cmd ) { \n \t2 long vm <identifiersep> id = nic . get <identifiersep> vm <identifiersep> id ( ) ; \n \t2 user <identifiersep> vm <identifiersep> vo vm =  <identifiersep> user <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm == null || vm . get <identifiersep> hypervisor <identifiersep> type ( ) != hypervisor <identifiersep> type . bare <identifiersep> metal ) { \n <ect>
\t1 { \n \t2 syntax syntax = utils . get <identifiersep> component ( core <identifiersep> configuration . class ) . get <identifiersep> default <identifiersep> document <identifiersep> syntax ( ) ; \n \t2 if ( syntax == null || ( ! utils . get <identifiersep> component <identifiersep> manager ( ) . has <identifiersep> component ( parser . class , syntax . to <identifiersep> id <identifiersep> string ( ) ) \n \t3 && ! syntax . xwiki <identifiersep> <number_literal> <identifiersep> 1 . equals ( syntax ) ) ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + account + <string_literal> , ex ) ; \n \t3 account <identifiersep> cleanup <identifiersep> needed = true ; \n \t3 return true ; \n \t2 } finally { \n <ect>
\t1 if ( null == result ) { \n \t1 log . info ( <string_literal> ) ; \n \t1 return total <identifiersep> range ; \n \t1 } else if ( result instanceof range ) { \n <ect>
\t2 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 set < pattern > related <identifiersep> patterns = find <identifiersep> related <identifiersep> patterns ( types , patterns , pattern <identifiersep> index ) ; \n \t2 long time <identifiersep> find <identifiersep> related <identifiersep> patterns = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 float elapsed <identifiersep> time <identifiersep> sec = ( time <identifiersep> find <identifiersep> related <identifiersep> patterns - start ) / 1000f ; \n <ect>
\t1 set < host > hosts = sets . new <identifiersep> hash <identifiersep> set ( ) ; \n \t1 for ( string alias : splitter . on ( <string_literal> ) . omit <identifiersep> empty <identifiersep> strings ( ) . split ( context . get <identifiersep> string ( <string_literal> , <string_literal> ) ) ) { \n \t2 context host <identifiersep> context = new context ( context . get <identifiersep> sub <identifiersep> properties ( \n \t3 joiner . on ( <string_literal> ) . join ( <string_literal> , alias , <string_literal> ) ) ) ; \n <ect>
\t3 final entry < string , zoned <identifiersep> date <identifiersep> time > entry = iter . next ( ) ; \n \t3 if ( submission <identifiersep> rate ( now , entry . get <identifiersep> value ( ) ) < get <identifiersep> threshold <identifiersep> rate ( ) ) { \n \t4 logger . trace ( <string_literal> , entry . get <identifiersep> key ( ) ) ; \n \t4 iter . remove ( ) ; } } \n <ect>
\t6 network <identifiersep> disruption . start <identifiersep> disrupting ( ) ; \n \t6 cluster <identifiersep> service . remove <identifiersep> listener ( this ) ; \n \t6 disruption <identifiersep> started . count <identifiersep> down ( ) ; } } } \n \t2 } ) ; \n <ect>
\t5 try { \n \t6 selection <identifiersep> key key = conn . sc . register ( selector , selection <identifiersep> key . op <identifiersep> connect ) ; \n \t6 key . attach ( conn ) ; \n \t5 } catch ( closed <identifiersep> channel <identifiersep> exception e ) { \n <ect>
\t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 try { \n \t5 queue <identifiersep> view <identifiersep> m <identifiersep> bean queue <identifiersep> view <identifiersep> m <identifiersep> bean = ( queue <identifiersep> view <identifiersep> m <identifiersep> bean ) context . new <identifiersep> proxy <identifiersep> instance ( brokers . get ( broker <identifiersep> name ) . broker . get <identifiersep> admin <identifiersep> view ( ) . get <identifiersep> queues ( ) [ 0 ] , queue <identifiersep> view <identifiersep> m <identifiersep> bean . class , false ) ; \n \t5 long current <identifiersep> count = queue <identifiersep> view <identifiersep> m <identifiersep> bean . get <identifiersep> consumer <identifiersep> count ( ) ; \n <ect>
\t5 local <identifiersep> resources , \n \t5 home <identifiersep> dir , \n \t5 <string_literal> ) ; \n \t4 file f = new file ( system . getenv ( <string_literal> ) , utils . yarn <identifiersep> site <identifiersep> file <identifiersep> name ) ; \n <ect>
\t6 } catch ( parser <identifiersep> exception e ) { \n \t7 log . warn ( <string_literal> , ics <identifiersep> file , e ) ; } } \n \t5 break ; } \n \t3 } catch ( throwable e ) { \n <ect>
\t5 pstmt <identifiersep> update = conn . prepare <identifiersep> statement ( update <identifiersep> usr <identifiersep> ip ) ; \n \t5 pstmt <identifiersep> update . execute <identifiersep> update ( ) ; \n \t5 pstmt <identifiersep> update . close ( ) ; \n \t5 <comment> \n <ect>
\t3 volume <identifiersep> type v = zone <identifiersep> secondary . get <identifiersep> master <identifiersep> volume ( ) ; \n \t3 if ( v != null && v . get <identifiersep> value ( ) != null ) { \n \t4 state <identifiersep> cache . put ( <string_literal> + i + denon <identifiersep> property . zone <identifiersep> volume . get <identifiersep> code ( ) , new percent <identifiersep> type ( v . get <identifiersep> value ( ) ) ) ; \n \t3 } else { \n <ect>
\t2 class < ? > params [ ] = new class [ 1 ] ; \n \t2 params [ 0 ] = string . class ; \n \t2 method execute <identifiersep> m = find <identifiersep> method ( c , <string_literal> , params ) ; \n \t2 if ( execute <identifiersep> m == null ) { \n <ect>
\t2 if ( server == null ) { \n \t3 server =  <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> guid ( startup . get <identifiersep> guid <identifiersep> without <identifiersep> resource ( ) ) ; } \n \t2 if ( server != null && server . get <identifiersep> removed ( ) == null ) { \n <ect>
\t4 } ; \n \t4 break ; \n \t3 case <number_literal> : \n \t4 <comment> \n <ect>
\t6 try { \n \t7 image <identifiersep> helper . update <identifiersep> metadata ( created <identifiersep> file ) ; \n \t7 handle <identifiersep> thumbnails ( ( image ) created <identifiersep> file ) ; \n \t6 } catch ( throwable t ) { \n <ect>
\t5 remaining <identifiersep> report <identifiersep> count . decrement <identifiersep> and <identifiersep> get ( ) ; \n \t5 logger . info ( <string_literal> + result . get <identifiersep> complete <identifiersep> name ( ) ) ; } \n \t4 @ override \n \t4 public void on <identifiersep> failure ( throwable t ) { \n <ect>
\t3 get <identifiersep> context ( ) . get <identifiersep> lifecycle <identifiersep> strategies ( ) . clear ( ) ; \n \t3 <comment> \n \t3 get <identifiersep> context ( ) . set <identifiersep> management <identifiersep> strategy ( new default <identifiersep> management <identifiersep> strategy ( ) ) ; \n \t2 } else if ( camel <identifiersep> jmx <identifiersep> agent != null ) { \n <ect>
\t3 final string server = host + <string_literal> + port + <string_literal> ; \n \t3 final string developer <identifiersep> server = host + <string_literal> + dev <identifiersep> port + api <identifiersep> url ; \n \t3 s <identifiersep> logger . info ( <string_literal> + server + <string_literal> + num <identifiersep> threads + <string_literal> ) ; \n \t3 if ( clean <identifiersep> up ) \n <ect>
\t6 { \n \t7 logger . debug ( <string_literal> + ( ( stmt <identifiersep> read . get <identifiersep> globals ( ) != null ? stmt <identifiersep> read . get <identifiersep> globals ( ) . size ( ) : 0 ) + \n <number_literal> ( stmt <identifiersep> read . get <identifiersep> fields ( ) != null ? stmt <identifiersep> read . get <identifiersep> fields ( ) . size ( ) : 0 ) ) ) ; } \n \t6 else \n <ect>
\t4 string replaced = replace <identifiersep> line ( line , replace <identifiersep> map ) ; \n \t4 writer . println ( replaced ) ; } \n \t3 return tmp <identifiersep> policy ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 log . warn ( <string_literal> ) ; } } \n \t1 public void process <identifiersep> dialog <identifiersep> terminated ( \n \t3 dialog <identifiersep> terminated <identifiersep> event dialog <identifiersep> terminated <identifiersep> event ) { \n <ect>
\t1 public void close ( ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 this . directory <identifiersep> server . close <identifiersep> all <identifiersep> connections ( true ) ; \n \t2 this . directory <identifiersep> server . shut <identifiersep> down ( true ) ; \n <ect>
\t3 context . defer ( create ) ; } } \n \t2 catch ( final throwable e ) { \n \t3 throw new errai <identifiersep> bootstrap <identifiersep> failure ( <string_literal> + load <identifiersep> class . get <identifiersep> name ( ) , e ) ; } } } } \n \t1 else { \n <ect>
\t3 try { \n \t4 final constructor < ? > cstr = clazz . get <identifiersep> declared <identifiersep> constructor ( param <identifiersep> classes ) ; \n \t4 return ( tokenizer ) cstr . new <identifiersep> instance ( param <identifiersep> values ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception | instantiation <identifiersep> exception | invocation <identifiersep> target <identifiersep> exception | security <identifiersep> exception e ) { \n <ect>
public void test <identifiersep> pack <identifiersep> un <identifiersep> pack ( ) { \n \t1 log . debug ( <string_literal> ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 for ( int i = 1 ; i < <number_literal> ; i ++ ) { \n <ect>
\t1 transactions . find ( new bucket <identifiersep> info ( bucket <identifiersep> name ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 throw new no <identifiersep> such <identifiersep> bucket <identifiersep> exception ( bucket <identifiersep> name ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 { \n \t2 @ override \n \t2 public outcome handle ( raft <identifiersep> messages . timeout . election election , outcome outcome , readable <identifiersep> raft <identifiersep> state ctx , log log ) throws io <identifiersep> exception \n \t2 { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 @ override \n \t2 public task <identifiersep> manager get ( ) { \n \t2 return client <identifiersep> task <identifiersep> manager ; } \n \t1 } ) ; } \n <ect>
\t4 assert index <identifiersep> service != null : <string_literal> + index ; \n \t4 indices = unmodifiable <identifiersep> map ( new <identifiersep> indices ) ; \n \t4 listener = index <identifiersep> service . get <identifiersep> index <identifiersep> event <identifiersep> listener ( ) ; } \n \t3 listener . before <identifiersep> index <identifiersep> removed ( index <identifiersep> service , reason ) ; \n <ect>
\t2 if ( my <identifiersep> name == null ) { \n \t3 my <identifiersep> name = new <identifiersep> name ( ) ; } \n \t2 string ver <identifiersep> string = fs . get ( <string_literal> ) ; \n \t2 if ( ver <identifiersep> string == null ) { \n <ect>
\t5 return msg ; \n \t4 } catch ( throwable t ) { \n \t5 logger . warn ( <string_literal> , t ) ; } \n \t3 } else { \n <ect>
\t2 } else { \n \t3 dedicated <identifiersep> resource <identifiersep> vo dedicated <identifiersep> zone =  <identifiersep> dedicated <identifiersep> dao . find <identifiersep> by <identifiersep> zone <identifiersep> id ( zone <identifiersep> id ) ; \n \t3 <comment> \n \t3 if ( dedicated <identifiersep> zone != null ) { \n <ect>
\t1 if ( sf != null ) { \n \t1 sf . cancel ( true ) ; } \n \t1 if ( executor != null ) { \n \t1 executor . shutdown <identifiersep> now ( ) ; } \n <ect>
\t3 list . to <identifiersep> array ( sort ) ; \n \t3 arrays . sort ( sort ) ; \n \t3 for ( cache <identifiersep> object cached : sort ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void get <identifiersep> different <identifiersep> concurrent ( ) throws exception { \n <ect>
\t2 self . do <identifiersep> kill <identifiersep> processes ( proc <identifiersep> list ) \n \t1 if proc <identifiersep> identifier <identifiersep> list and not process <identifiersep> section in skip <identifiersep> list : \n \t2 self . do <identifiersep> kill <identifiersep> processes <identifiersep> by <identifiersep> identifier ( proc <identifiersep> identifier <identifiersep> list ) \n \t1 if proc <identifiersep> user <identifiersep> list and not process <identifiersep> section in skip <identifiersep> list : \n <ect>
<comment> \n \t1 protected void continue <identifiersep> search ( ) { \n \t2 if (  <identifiersep> state . completed ( ) ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t5  <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , msgs . size ( ) , total <identifiersep> lifetime ) ; \n \t5 fail = true ; \n \t4 } else { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 rw <identifiersep> lock . read <identifiersep> lock ( ) ; \n \t4 try { \n \t5 if ( stopping ) { \n <ect>
\t3 result . set <identifiersep> success <identifiersep> is <identifiersep> set ( true ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t4 try { \n \t5 field . set <identifiersep> accessible ( true ) ; \n \t5 telemetry <identifiersep> field <identifiersep> to <identifiersep> value . put ( field . get <identifiersep> name ( ) , field . get ( this ) ) ; \n \t4 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t6 } else { \n \t7 try { \n \t8 instrumentation . retransform <identifiersep> classes ( new class [ ] { class <identifiersep> info . get <identifiersep> original <identifiersep> class ( ) } ) ; \n \t7 } catch ( throwable e ) { \n <ect>
\t3 add <identifiersep> encoded <identifiersep> parameter ( data , message <identifiersep> key <identifiersep> app , app <identifiersep> name ) ; \n \t3 if ( ! string <identifiersep> utils . is <identifiersep> empty ( description ) ) { \n \t4 add <identifiersep> encoded <identifiersep> parameter ( data , message <identifiersep> key <identifiersep> desc , description ) ; \n \t3 } else { \n <ect>
\t5 not <identifiersep> reachable . add ( u ) ; } } \n \t2 units . retain <identifiersep> all ( reachable ) ; \n \t2 num <identifiersep> pruned -= units . size ( ) ; \n \t2 if ( options . v ( ) . verbose ( ) ) { \n <ect>
\t2 metadata [ ] metas = e . must <identifiersep> resolve ; \n \t2 for ( metadata m : metas ) { \n \t3 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> + m ) ; \n \t3 if ( m . is <identifiersep> resolved ( ) ) { \n <ect>
\t1 boolean acl <identifiersep> node = false ; \n \t1 map < string , properties > locale <identifiersep> properties <identifiersep> map = null ; \n \t1 id = get <identifiersep> node <identifiersep> id ( session , pentaho <identifiersep> jcr <identifiersep> constants , node ) ; \n <ect>
\t1 log . debug ( <string_literal> ) ; } \n \t1 if ( conf . get <identifiersep> bool <identifiersep> var ( hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> check <identifiersep> cross <identifiersep> product ) ) { \n \t1 physical <identifiersep> ctx = new spark <identifiersep> cross <identifiersep> product <identifiersep> check ( ) . resolve ( physical <identifiersep> ctx ) ; \n \t1 } else { \n <ect>
\t2 configuration job <identifiersep> conf = null ; \n \t2 try { \n \t3 job <identifiersep> conf = new x <identifiersep> configuration ( new string <identifiersep> reader ( job . get <identifiersep> conf ( ) ) ) ; } \n \t2 catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 boolean violation <identifiersep> exception <identifiersep> found = false ; \n \t3 throwable cause = expected ; \n \t3 while ( cause != null ) { \n \t4 if ( cause instanceof jdbc <identifiersep> exception ) { \n <ect>
\t4 return <number_literal> ; \n \t3 } else { \n \t4 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; } \n \t2 } else { \n <ect>
\t1 throws io <identifiersep> exception { \n \t1 record <identifiersep> consumer . flush ( ) ; \n \t1 log . info ( <string_literal> , column <identifiersep> store . get <identifiersep> allocated <identifiersep> size ( ) ) ; \n \t1 if ( column <identifiersep> store . get <identifiersep> allocated <identifiersep> size ( ) > ( <number_literal> * row <identifiersep> group <identifiersep> size <identifiersep> threshold ) ) { \n <ect>
\t3 result . set <identifiersep> success <identifiersep> is <identifiersep> set ( true ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
<comment> \n public boolean is <identifiersep> kdc <identifiersep> reachable ( string server , int port ) { \n \t1 boolean success = is <identifiersep> kdc <identifiersep> reachable ( server , port , connection <identifiersep> protocol . tcp ) || is <identifiersep> kdc <identifiersep> reachable ( server , port , connection <identifiersep> protocol . udp ) ; \n \t1 if ( ! success ) { \n <ect>
\t3 return null ; } \n \t2 try { \n \t3 vms = conn . list <identifiersep> defined <identifiersep> domains ( ) ; \n \t2 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t5 signal = waiting <identifiersep> signals . take ( ) ; \n \t5 if ( signal != null ) { \n \t6 handle ( signal ) ; } \n \t4 } catch ( throwable e ) { \n <ect>
\t3 integer exit <identifiersep> status = command . get <identifiersep> exit <identifiersep> status ( ) ; \n \t3 logger . info ( <string_literal> , new object [ ] { obfuscated <identifiersep> command <identifiersep> line , connection , exit <identifiersep> status } ) ; \n \t3 close <identifiersep> session ( ) ; \n \t3 if ( exit <identifiersep> status == null ) { \n <ect>
\t3 execute <identifiersep> job ( context ) \n \t3 is <identifiersep> sending <identifiersep> db <identifiersep> error = false \n \t2 } catch ( e : transient <identifiersep> data <identifiersep> access <identifiersep> exception ) { \n \t3 if ( is <identifiersep> sending <identifiersep> db <identifiersep> error ) { \n <ect>
\t3 this . outputs . put ( t . get <identifiersep> frequency ( ) , t ) ; } \n \t2 else \n \t2 { \n \t3 this . inputs . put ( t . get <identifiersep> frequency ( ) , t ) ; } \n <ect>
\t3 while ( iterator . has <identifiersep> next ( ) ) { \n \t4 iterator . next ( ) ; \n \t4 iterator . remove ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 protected void internal <identifiersep> receive <identifiersep> command ( string item <identifiersep> name , command command ) { \n \t2 if ( communicator . is <identifiersep> running ( ) ) { \n <ect>
\t2 } else { \n \t2 <comment> \n \t2 log . warn ( <string_literal> , instances . size ( ) ) ; } \n \t1 } else { \n <ect>
\t2 public response auth <identifiersep> response ( @ query <identifiersep> param ( abstract <identifiersep> o <identifiersep> auth2identity <identifiersep> provider . oauth2 <identifiersep> parameter <identifiersep> state ) string state , \n \t9 @ query <identifiersep> param ( abstract <identifiersep> o <identifiersep> auth2identity <identifiersep> provider . oauth2 <identifiersep> parameter <identifiersep> code ) string authorization <identifiersep> code , \n \t9 @ query <identifiersep> param ( o <identifiersep> auth2constants . error ) string error ) { \n \t3 if ( error != null ) { \n <ect>
\t1 public void set <identifiersep> choking ( boolean on ) { \n \t2 if ( on !=  <identifiersep> is <identifiersep> choking ) { \n \t3  <identifiersep> is <identifiersep> choking = on ; \n \t2 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t2 for ( int i = 1 ; i < = <number_literal> ; i ++ ) { \n \t3 calendar next <identifiersep> timeout = calendar <identifiersep> timeout . get <identifiersep> next <identifiersep> timeout ( previous <identifiersep> timeout ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( time <identifiersep> zone <identifiersep> display <identifiersep> name , next <identifiersep> timeout ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( time <identifiersep> zone <identifiersep> display <identifiersep> name , next <identifiersep> timeout . after ( previous <identifiersep> timeout ) ) ; \n <ect>
\t3 return new json <identifiersep> consent <identifiersep> repository ( location ) ; } \n \t2 final resource groovy = cas <identifiersep> properties . get <identifiersep> consent ( ) . get <identifiersep> groovy ( ) . get <identifiersep> location ( ) ; \n \t2 if ( groovy != null ) { \n \t3 return new groovy <identifiersep> consent <identifiersep> repository ( groovy ) ; } \n <ect>
\t9 <comment> \n \t9 info = update ( info , rm , multi <identifiersep> page . this . session , null , protocol <identifiersep> version , codec <identifiersep> registry , statement ) ; \n \t9 multi <identifiersep> page . this . fetch <identifiersep> state = null ; \n \t8 } else { \n <ect>
\t2 try { \n \t3  <identifiersep> fs = dir . get <identifiersep> file <identifiersep> system (  <identifiersep> hadoop <identifiersep> conf ) ; \n \t3 res =  <identifiersep> fs . exists ( dir ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 raise fail ( <string_literal> ) \n \t1 day <identifiersep> count <identifiersep> dictionary = { 'monday' : '97975' , 'tuesday' : '77725' , 'wednesday' : '78875' , 'thursday' : '81304' , 'friday' : '82987' , 'saturday' : '86159' , 'sunday' : '94975' } \n \t1 for ( day , count ) in values <identifiersep> list : \n \t1 if count != day <identifiersep> count <identifiersep> dictionary [ day ] : \n <ect>
\t2 store . remove <identifiersep> web <identifiersep> socket ( web <identifiersep> socket ) ; \n \t2 log . debug ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> error ( web <identifiersep> socket web <identifiersep> socket , web <identifiersep> socket <identifiersep> exception t ) { \n <ect>
\t7 c . to <identifiersep> prev <identifiersep> token ( ) ; \n \t7 xml <identifiersep> generator . create <identifiersep> sample <identifiersep> for <identifiersep> type ( type , c ) ; \n \t7 c . dispose ( ) ; \n \t6 } else { \n <ect>
\t6 to ( <string_literal> ) ; } \n \t2 } ) ; \n \t2 cache <identifiersep> exception <identifiersep> endpoint . expected <identifiersep> message <identifiersep> count ( 0 ) ; \n \t2 context . start ( ) ; \n <ect>
\t4 <string_literal> + \n \t4 <string_literal> , x <identifiersep> content <identifiersep> type . json ) . get ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) . set <identifiersep> refresh <identifiersep> policy ( immediate ) . get ( ) ; \n <ect>
\t1 check <identifiersep> point <identifiersep> file = new file ( check <identifiersep> point <identifiersep> folder , check <identifiersep> point <identifiersep> file <identifiersep> name ) ; \n \t1 input <identifiersep> file . get <identifiersep> check <identifiersep> point <identifiersep> files ( ) . put ( input <identifiersep> file . get <identifiersep> base64file <identifiersep> key ( ) , check <identifiersep> point <identifiersep> file ) ; \n \t1 map < string , object > json <identifiersep> check <identifiersep> point = null ; \n \t1 if ( ! check <identifiersep> point <identifiersep> file . exists ( ) ) { \n <ect>
\t1 return <string_literal> ; } \n @ override \n public string init <identifiersep> update <identifiersep> rollback <identifiersep> resource ( string resource <identifiersep> id , string stack <identifiersep> id , string account <identifiersep> id , string effective <identifiersep> user <identifiersep> id , int rolled <identifiersep> back <identifiersep> resource <identifiersep> version ) { \n \t1 int updated <identifiersep> stack <identifiersep> version = rolled <identifiersep> back <identifiersep> resource <identifiersep> version - 1 ; \n <ect>
\t1 bit <identifiersep> packing <identifiersep> reader r = bit <identifiersep> packing . create <identifiersep> bit <identifiersep> packing <identifiersep> reader ( bit <identifiersep> length , bais , vals . length ) ; \n \t1 int [ ] result = new int [ vals . length ] ; \n \t1 for ( int i = 0 ; i < result . length ; i ++ ) { \n \t1 result [ i ] = r . read ( ) ; } \n <ect>
\t2 resteasy <identifiersep> provider <identifiersep> factory factory = resteasy <identifiersep> provider <identifiersep> factory . get <identifiersep> instance ( ) ; \n \t2 delegate = factory . get <identifiersep> message <identifiersep> body <identifiersep> reader ( interceptor <identifiersep> book . class , null , null , constants . media <identifiersep> type <identifiersep> test <identifiersep> xml <identifiersep> type ) ; \n \t2 logger . info ( <string_literal> ) ; } \n \t1 public boolean is <identifiersep> readable ( class < ? > type , type generic <identifiersep> type , annotation [ ] annotations , media <identifiersep> type media <identifiersep> type ) { \n <ect>
\t2 snapshot <identifiersep> object snapshot <identifiersep> on <identifiersep> primary = null ; \n \t2 try { \n \t3 snapshot <identifiersep> on <identifiersep> primary = ( snapshot <identifiersep> object ) snap . get <identifiersep> data <identifiersep> store ( ) . create ( snapshot ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 && \n \t4 ( system . get <identifiersep> property ( <string_literal> ) . equals ( <string_literal> ) ) ) { \n \t5 log . warn ( <string_literal> ) ; \n \t4 } else { \n <ect>
\t1 host <identifiersep> group <identifiersep> info group <identifiersep> info = host <identifiersep> group <identifiersep> info . get ( host <identifiersep> group ) ; \n \t1 if ( group <identifiersep> info == null ) { \n \t2 all <identifiersep> host <identifiersep> groups <identifiersep> resolved = false ; \n \t2 if ( missing <identifiersep> host <identifiersep> groups . add ( host <identifiersep> group ) ) { \n <ect>
\t6 product <identifiersep> part . metadata , product <identifiersep> part . thumbnail , product <identifiersep> part . ows <identifiersep> links , product <identifiersep> part . granules ) ) ) ; \n \t2 for ( set < product <identifiersep> part > parts : sets ) { \n \t3 if ( parts . is <identifiersep> empty ( ) ) { \n \t4 continue ; } \n <ect>
\t4 try { \n \t5 string existing <identifiersep> content = file <identifiersep> util . read <identifiersep> utf ( maybe <identifiersep> written <identifiersep> file ) . to <identifiersep> string ( ) . trim ( ) ; \n \t5 is <identifiersep> write <identifiersep> allowed = check <identifiersep> job . write <identifiersep> content . equals ( existing <identifiersep> content ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 config . properties ( ) . put ( framework <identifiersep> config . need <identifiersep> runtime <identifiersep> injection , true ) ; \n \t6 request <identifiersep> scoped <identifiersep> introspectors . add <identifiersep> first ( ii ) ; } } \n \t4 if ( ! i . get <identifiersep> class ( ) . is <identifiersep> annotation <identifiersep> present ( request <identifiersep> scoped . class ) ) { \n \t5 if ( ! i . get <identifiersep> class ( ) . is <identifiersep> annotation <identifiersep> present ( application <identifiersep> scoped . class ) ) { \n <ect>
\t5 revision last <identifiersep> rev = doc . get <identifiersep> last <identifiersep> rev ( ) . get ( cluster <identifiersep> id ) ; \n \t5 revision last <identifiersep> mod = determine <identifiersep> last <identifiersep> modification ( doc , cluster <identifiersep> id ) ; \n \t5 known <identifiersep> last <identifiersep> rev = utils . max ( last <identifiersep> rev , last <identifiersep> mod ) ; \n \t4 } else { \n <ect>
<comment> \n \t3 status = curator . curate <identifiersep> success ; \n \t3 string handle = item . get <identifiersep> handle ( ) ; \n <ect>
\t2 boolean member <identifiersep> added = false ; \n \t2 <comment> \n \t2 member map <identifiersep> member = get <identifiersep> channel ( ) . get <identifiersep> member ( member ) ; \n \t2 if ( map <identifiersep> member == null ) { \n <ect>
\t3 log . error ( format ( <string_literal> , initial <identifiersep> address . get <identifiersep> hostname ( ) ) , e ) ; } \n \t2 for ( inet <identifiersep> address ip <identifiersep> address : ip <identifiersep> addresses ) \n \t2 { \n \t3 addresses . add ( new advertised <identifiersep> socket <identifiersep> address ( ip <identifiersep> address . get <identifiersep> host <identifiersep> address ( ) , initial <identifiersep> address . get <identifiersep> port ( ) ) ) ; } \n <ect>
\t5 long sid = rs . get <identifiersep> long ( 1 ) ; \n \t5 long snid = rs . get <identifiersep> long ( <number_literal> ) ; \n \t5 return find <identifiersep> by <identifiersep> store <identifiersep> snapshot ( role , sid , snid ) ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t8 + node <identifiersep> id + <string_literal> ) ; } \n \t4 num <identifiersep> failed <identifiersep> assertions += keys . size ( ) ; \n \t3 } else { \n \t4 fail ( <string_literal> ) ; } } \n <ect>
\t3 fi . attributes = new attribute <identifiersep> info [ fi . attributes <identifiersep> count ] ; \n \t3 read <identifiersep> attributes ( d , fi . attributes <identifiersep> count , fi . attributes ) ; } \n \t2 <comment> <ect>
\t2 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t2 <comment> \n \t2 if ( ! user <identifiersep> group <identifiersep> information . is <identifiersep> security <identifiersep> enabled ( ) ) { \n \t2 <comment> \n <ect>
\t3 log . info ( <string_literal> + book1 . get <identifiersep> name ( ) ) ; \n \t3 cdi <identifiersep> injection <identifiersep> book book2 = new cdi <identifiersep> injection <identifiersep> book ( <string_literal> ) ; \n \t3 message = session . create <identifiersep> text <identifiersep> message ( book2 . get <identifiersep> name ( ) ) ; \n \t3 producer . send ( message ) ; \n <ect>
<comment> \n \t1 public conditions new <identifiersep> conditions ( final zoned <identifiersep> date <identifiersep> time not <identifiersep> before , final zoned <identifiersep> date <identifiersep> time not <identifiersep> on <identifiersep> or <identifiersep> after , final string . . . audience <identifiersep> uri ) { \n <ect>
<comment> \n \t1 public static void validate <identifiersep> item <identifiersep> type ( item item ) throws binding <identifiersep> config <identifiersep> parse <identifiersep> exception { \n <ect>
\t6 public void do <identifiersep> run ( ) { \n \t7 snapshot ( index <identifiersep> shard , snapshot , index <identifiersep> id , shard <identifiersep> entry . get <identifiersep> value ( ) ) ; } \n \t6 @ override \n \t6 public void on <identifiersep> failure ( exception e ) { \n <ect>
\t1 public boolean configure <identifiersep> nic <identifiersep> secondary <identifiersep> ip ( nic <identifiersep> secondary <identifiersep> ip sec <identifiersep> ip , boolean is <identifiersep> zone <identifiersep> sg <identifiersep> enabled ) { \n \t2 boolean success = false ; \n \t2 if ( is <identifiersep> zone <identifiersep> sg <identifiersep> enabled ) { \n \t3 success =  <identifiersep> security <identifiersep> group <identifiersep> service . security <identifiersep> group <identifiersep> rules <identifiersep> for <identifiersep> vm <identifiersep> sec <identifiersep> ip ( sec <identifiersep> ip . get <identifiersep> nic <identifiersep> id ( ) , sec <identifiersep> ip . get <identifiersep> ip4address ( ) , true ) ; \n <ect>
\t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; } } \n \t1 protected void do <identifiersep> server <identifiersep> process ( byte [ ] data ) { \n \t2 one <identifiersep> more <identifiersep> test <identifiersep> done ( ) ; \n \t2 assert . assert <identifiersep> array <identifiersep> equals (  <identifiersep> test <identifiersep> bytes , data ) ; \n <ect>
\t4 <comment> <ect>
\t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t6  <identifiersep> log . warn ( <string_literal> , e1 ) ; \n \t5 break ; } } \n \t2 } catch ( runtime <identifiersep> exception re ) { \n <ect>
\t2 logger . debug ( <string_literal> + ctrl <identifiersep> mode ) ; \n \t2 logger . debug ( <string_literal> + dst <identifiersep> active ) ; \n \t2 logger . debug ( <string_literal> + lan <identifiersep> gateway ) ; \n \t2 logger . debug ( <string_literal> + locked <identifiersep> for <identifiersep> manual <identifiersep> set <identifiersep> point ) ; \n <ect>
\t2 log . info ( <string_literal> + cls + <string_literal> + msg ) ; } \n \t1 else { \n \t2 log . info ( msg ) ; } } } \n public static void error ( string error <identifiersep> message ) { \n <ect>
\t2 if ( security <identifiersep> enabled ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 load <identifiersep> admin <identifiersep> users ( ) ; } \n \t2 else { \n <ect>
\t1 @ override \n \t1 public void register ( metric metric , string metric <identifiersep> name , abstract <identifiersep> metric <identifiersep> group group ) { \n \t2 synchronized ( lock ) { \n \t3 if ( is <identifiersep> shutdown ( ) ) { \n <ect>
\t3 epoch <identifiersep> time = hive <identifiersep> history <identifiersep> query <identifiersep> impl . get <identifiersep> epoch <identifiersep> time ( ) ; <comment> \n \t3 if ( usernames [ k ] . equals ( <string_literal> ) ) { \n \t3 username = dbpojo <identifiersep> hive <identifiersep> history <identifiersep> query . get ( i ) . get <identifiersep> owner <identifiersep> name ( ) ; } \n \t3 dir <identifiersep> namefor <identifiersep> hive <identifiersep> histroy = <string_literal> + username + <string_literal> + max <identifiersep> count <identifiersep> of <identifiersep> ambari <identifiersep> db + <string_literal> + time + <string_literal> ; <comment> \n <ect>
\t1 public void init ( byte [ ] ks <identifiersep> bits , string ks <identifiersep> password ) { \n \t2 s <identifiersep> logger . info ( <string_literal> ) ; \n \t2 if ( ks <identifiersep> bits == null ) { \n \t3 try { \n <ect>
\t2 broker <identifiersep> service . set <identifiersep> advisory <identifiersep> support ( false ) ; \n \t2 broker <identifiersep> service . add <identifiersep> connector ( mqtt <identifiersep> test <identifiersep> support . get <identifiersep> connection ( ) + <string_literal> ) ; \n \t2 broker <identifiersep> service . start ( ) ; \n \t2 broker <identifiersep> service . wait <identifiersep> until <identifiersep> started ( ) ; \n <ect>
\t3 input . set <identifiersep> tag ( provider . get <identifiersep> item ( item <identifiersep> name ) ) ; \n \t3 gpio <identifiersep> pins . put ( item <identifiersep> name , input ) ; \n \t3 mcp . set <identifiersep> event <identifiersep> threshold ( 0 , input ) ; \n \t3 mcp . set <identifiersep> monitor <identifiersep> enabled ( true ) ; \n <ect>
\t3 log . error ( <string_literal> , ioe ) ; \n \t3 return null ; \n \t2 } catch ( data <identifiersep> format <identifiersep> exception dfe ) { \n \t3 log log = i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( session <identifiersep> config . class ) ; \n <ect>
\t7 details . get <identifiersep> authorities ( ) ) ; \n \t4 } else { \n \t5 user = new managed <identifiersep> user ( authentication . get <identifiersep> name ( ) , <string_literal> , false , authed . get <identifiersep> authorities ( ) ) ; } \n \t4 assert . not <identifiersep> null ( user , <string_literal> ) ; \n <ect>
\t2 if ( network <identifiersep> element == null ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> ) ; } \n \t2 ovs <identifiersep> provider <identifiersep> vo element =  <identifiersep> ovs <identifiersep> provider <identifiersep> dao . find <identifiersep> by <identifiersep> nsp <identifiersep> id ( nsp . get <identifiersep> id ( ) ) ; \n \t2 if ( element != null ) { \n <ect>
\t2 bliptv <identifiersep> source = new replacement <identifiersep> service <identifiersep> bliptv <identifiersep> impl ( ) ; \n \t2 bliptv <identifiersep> serv <identifiersep> reg = \n \t3 context . register <identifiersep> service ( replacement <identifiersep> service . class . get <identifiersep> name ( ) , \n \t4 bliptv <identifiersep> source , hashtable ) ; \n <ect>
\t2 string response = <string_literal> + log . get <identifiersep> number ( ) + <string_literal> + log . get <identifiersep> duration ( ) + <string_literal> ; \n \t2 selendroid <identifiersep> logger . info ( <string_literal> ) ; \n \t2 return new selendroid <identifiersep> response ( get <identifiersep> session <identifiersep> id ( request ) , response ) ; } \n \t1 catch ( permission <identifiersep> denied <identifiersep> exception e ) { \n <ect>
\t1 super ( <string_literal> , <string_literal> , argument <identifiersep> optional ) ; } \n public boolean execute ( @ not <identifiersep> null editor editor , @ not <identifiersep> null data <identifiersep> context context , @ not <identifiersep> null ex <identifiersep> command cmd ) throws ex <identifiersep> exception { \n \t1 string arg = cmd . get <identifiersep> argument ( ) ; \n <ect>
\t2 try { \n \t3 output <identifiersep> stream = new file <identifiersep> output <identifiersep> stream ( report ) ; \n \t3 writer = new output <identifiersep> stream <identifiersep> writer ( output <identifiersep> stream , charset . for <identifiersep> name ( <string_literal> ) ) ; \n \t3 xstream . to <identifiersep> xml ( stored <identifiersep> test <identifiersep> outcome , writer ) ; \n <ect>
\t1 if ( partn == null ) { \n \t2 return new hive <identifiersep> lock <identifiersep> object ( new dummy <identifiersep> partition ( tab , path , part <identifiersep> spec ) , data ) ; } \n \t1 return new hive <identifiersep> lock <identifiersep> object ( partn , data ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 private void load <identifiersep> tricky <identifiersep> phones ( input <identifiersep> stream tricky <identifiersep> stream ) throws io <identifiersep> exception { \n \t2 scanner alias <identifiersep> list = null ; \n \t2 alias <identifiersep> list = new scanner ( new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( tricky <identifiersep> stream , <string_literal> ) ) ) ; \n \t2 string line ; \n <ect>
\t7 log . info ( <string_literal> ) ; \n \t7 flag = false ; } \n \t6 break ; \n \t5 case 1 : \n <ect>
\t6 math . max ( i . get <identifiersep> start ( ) - padding , 1 ) , \n \t6 math . min ( i . get <identifiersep> end ( ) + padding , dict . get <identifiersep> sequence ( i . get <identifiersep> contig ( ) ) . get <identifiersep> sequence <identifiersep> length ( ) ) , \n \t6 i . is <identifiersep> negative <identifiersep> strand ( ) , \n \t6 i . get <identifiersep> name ( ) ) ) ; } \n <ect>
\t1 string file <identifiersep> name , tmp <identifiersep> file1 ; \n \t1 @ before \n \t1 public void set <identifiersep> up ( ) throws exception { \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t2 for ( locale locale : arrays . as <identifiersep> list ( forced <identifiersep> locale , get <identifiersep> locale ( ) ) ) { \n \t3 if ( locale != null ) { \n \t4 resource <identifiersep> bundle bundle = resource <identifiersep> bundle . get <identifiersep> bundle ( <string_literal> , locale ) ; <comment> \n \t4 if ( bundle == null ) { \n <ect>
\t1 if ( h . equals ( dsa <identifiersep> only <identifiersep> tracker ) ) { \n \t2 destination dest =  <identifiersep> util . get <identifiersep> my <identifiersep> destination ( ) ; \n \t2 if ( dest != null && dest . get <identifiersep> sig <identifiersep> type ( ) != sig <identifiersep> type . dsa <identifiersep> sha1 ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 feature <identifiersep> collection features = feature <identifiersep> source . get <identifiersep> features ( layer <identifiersep> query ) ; \n \t4 layer <identifiersep> lat <identifiersep> long <identifiersep> bbox = features . get <identifiersep> bounds ( ) ; \n \t4 layer <identifiersep> lat <identifiersep> long <identifiersep> bbox = layer <identifiersep> lat <identifiersep> long <identifiersep> bbox . transform ( target <identifiersep> crs , true ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 if ( ! new <identifiersep> active <identifiersep> regions . is <identifiersep> empty ( ) ) { \n \t6 ready <identifiersep> active <identifiersep> regions . add <identifiersep> all ( new <identifiersep> active <identifiersep> regions ) ; \n \t6 if ( debug ) \n \t7 for ( final map <identifiersep> data region : new <identifiersep> active <identifiersep> regions ) \n <ect>
\t7 + <string_literal> , \n \t5 client <identifiersep> configured <identifiersep> num <identifiersep> samples <identifiersep> threshold , client <identifiersep> configured <identifiersep> time <identifiersep> threshold <identifiersep> ms , \n \t5 client <identifiersep> configured <identifiersep> key <identifiersep> on <identifiersep> thread <identifiersep> name ) ; \n \t2 } else { \n <ect>
\t2 logger . info ( format ( <string_literal> \\ \n \t6 <string_literal> ) ) \n \t1 else : \n \t1 run <identifiersep> prepare <identifiersep> war = true \n <ect>
\t2 } ) ; \n \t2 latch . await ( ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 assert <identifiersep> that ( failure . get ( ) , instance <identifiersep> of ( not <identifiersep> master <identifiersep> exception . class ) ) ; \n <ect>
\t5 } catch ( io <identifiersep> exception e ) { } } } \n \t3 try { \n \t4 thread . sleep ( <number_literal> ) ; \n \t3 } catch ( interrupted <identifiersep> exception ex ) { } } \n <ect>
<comment> \n \t1 private void register <identifiersep> ports ( set < forward <identifiersep> port > ports <identifiersep> to <identifiersep> forward <identifiersep> now ) { \n \t2 if (  <identifiersep> service <identifiersep> lacks <identifiersep> apm ) { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2  <identifiersep> write <identifiersep> string . save ( ) ; \n \t2 <comment> \n \t2 string friendly <identifiersep> name <identifiersep> namespace <identifiersep> str =  <identifiersep> namespace <identifiersep> str + <string_literal> ; \n \t2  <identifiersep> friendly <identifiersep> name <identifiersep> namespace = key <identifiersep> profile . key <identifiersep> name ( content <identifiersep> name . from <identifiersep> uri ( friendly <identifiersep> name <identifiersep> namespace <identifiersep> str ) ,  <identifiersep> write <identifiersep> string . get <identifiersep> content <identifiersep> publisher ( ) ) ; \n <ect>
\t1 set <identifiersep> long <identifiersep> parameter ( stmt , <number_literal> , item <identifiersep> id ) ; \n \t1 log . debug ( <string_literal> , set <identifiersep> preference <identifiersep> sql ) ; \n \t1 stmt . execute <identifiersep> update ( ) ; \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n <ect>
\t5 boolean warned <identifiersep> about <identifiersep> wait = false ; \n \t5 while ( active ) { \n \t6 while ( matched . is <identifiersep> full ( ) ) { \n \t7 if ( get <identifiersep> context ( ) . get <identifiersep> stopping ( ) . get ( ) ) { \n <ect>
\t1 <comment> \n \t1 public void stop ( bundle <identifiersep> context context ) throws exception { \n <ect>
\t5 logger . debug ( <string_literal> + this + <string_literal> ) ; } \n \t4 if ( feed == null ) { \n <ect>
\t4 logger . debug ( <string_literal> , location ) ; \n \t4 return new json <identifiersep> resource <identifiersep> password <identifiersep> management <identifiersep> service ( password <identifiersep> management <identifiersep> cipher <identifiersep> executor ( ) , \n \t6 cas <identifiersep> properties . get <identifiersep> server ( ) . get <identifiersep> prefix ( ) , \n \t6 cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> pm ( ) , location ) ; } \n <ect>
\t5 else if ( field <identifiersep> name . equals ( http <identifiersep> names . param <identifiersep> default <identifiersep> graph <identifiersep> uri ) ) \n \t6 graph <identifiersep> name = null ; \n \t5 else \n \t6 <comment> \n <ect>
\t1 <comment> \n \t1 @ override \n \t1 protected spatial <identifiersep> match object <identifiersep> to <identifiersep> struct ( prop <identifiersep> func <identifiersep> arg arg <identifiersep> object ) { \n \t2 if ( arg <identifiersep> object . is <identifiersep> node ( ) ) { \n <ect>
\t3 cluster <identifiersep> state cluster <identifiersep> state = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . get ( ) . get <identifiersep> state ( ) ; \n \t3 snapshots <identifiersep> in <identifiersep> progress snapshots <identifiersep> in <identifiersep> progress = cluster <identifiersep> state . custom ( snapshots <identifiersep> in <identifiersep> progress . type ) ; \n \t3 assert <identifiersep> equals ( 0 , snapshots <identifiersep> in <identifiersep> progress . entries ( ) . size ( ) ) ; \n \t2 } , <number_literal> , time <identifiersep> unit . seconds ) ; \n <ect>
<comment> \n \t1 public final void set <identifiersep> auto <identifiersep> commit ( boolean auto <identifiersep> commit ) throws data <identifiersep> access <identifiersep> exception { \n \t2 try { \n <ect>
\t4 : <string_literal> + the <identifiersep> parent <identifiersep> node . type ) ) ; \n \t2 while ( children . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t3 default <identifiersep> mutable <identifiersep> tree <identifiersep> node tree <identifiersep> node = children . next <identifiersep> element ( ) ; \n \t3 node child = ( node ) tree <identifiersep> node . get <identifiersep> user <identifiersep> object ( ) ; \n <ect>
\t2 return update <identifiersep> members ( false , member <identifiersep> ids ) ; } \n \t1 @ override \n \t1 public boolean remove <identifiersep> member ( authorizable authorizable ) throws repository <identifiersep> exception { \n \t2 if ( ! is <identifiersep> valid <identifiersep> authorizable <identifiersep> impl ( authorizable ) ) { \n <ect>
\t1 if ( cluster . get ( ) == null ) { \n \t2 exec <identifiersep> type exec <identifiersep> type = exec <identifiersep> type . local ; \n \t2 if ( system . get <identifiersep> properties ( ) . contains <identifiersep> key ( exec <identifiersep> cluster ) ) { \n \t2 if ( system . get <identifiersep> properties ( ) . get <identifiersep> property ( exec <identifiersep> cluster ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n <ect>
\t1 get <identifiersep> volume <identifiersep> token <identifiersep> response <identifiersep> type reply = ( get <identifiersep> volume <identifiersep> token <identifiersep> response <identifiersep> type ) request . get <identifiersep> reply ( ) ; \n \t1 string volume <identifiersep> id = request . get <identifiersep> volume <identifiersep> id ( ) ; \n \t1 log . info ( <string_literal> + volume <identifiersep> id ) ; \n \t1 if ( null == volume <identifiersep> id ) { \n <ect>
\t3 socket = new multicast <identifiersep> socket ( port ) ; } \n \t2 socket . set <identifiersep> loopback <identifiersep> mode ( local <identifiersep> loopback <identifiersep> disabled ) ; <comment> \n \t2 if ( mcast <identifiersep> bind <identifiersep> address != null ) { \n <ect>
\t2 smtp <identifiersep> appender . set <identifiersep> layout ( build <identifiersep> pattern <identifiersep> layout ( logger <identifiersep> context ) ) ; \n \t2 smtp <identifiersep> appender . start ( ) ; \n \t2 logger logger = logger <identifiersep> context . get <identifiersep> logger ( <string_literal> ) ; \n \t2 logger . add <identifiersep> appender ( smtp <identifiersep> appender ) ; \n <ect>
\t2 string address ; \n \t2 try { \n \t3 address = kubernetes <identifiersep> helper . get <identifiersep> service <identifiersep> url ( kubernetes , service <identifiersep> names . letschat , namespace , <string_literal> , true ) ; \n \t3 if ( strings . is <identifiersep> null <identifiersep> or <identifiersep> blank ( address ) ) { \n <ect>
\t2 if ( restored <identifiersep> state == null || restored <identifiersep> state . is <identifiersep> empty ( ) ) { \n \t3 return ; } \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t4 } else if ( item instanceof dimmer <identifiersep> item ) { \n \t5 logger . debug ( <string_literal> ) ; \n \t5 return new percent <identifiersep> type ( value <identifiersep> str ) ; \n \t4 } else if ( item instanceof switch <identifiersep> item ) { \n <ect>
\t6 || value . equals ( <string_literal> ) \n \t6 || value . equals ( <string_literal> ) \n \t4 ) { \n \t5 if ( src <identifiersep> prec != 0 && src <identifiersep> prec != src <identifiersep> prec <identifiersep> class ) { \n <ect>
\t5 do <identifiersep> migrate <identifiersep> loop = false ; \n \t4 } catch ( hikari <identifiersep> pool . pool <identifiersep> initialization <identifiersep> exception e ) { \n \t5 log . info ( <string_literal> , e . get <identifiersep> message ( ) ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t3 if ( ! unsafe <identifiersep> plugins . is <identifiersep> empty ( ) ) \n \t3 { \n \t4 logger . warn ( <string_literal> ) ; \n \t4 logger . warn ( <string_literal> ) ; \n <ect>
\t1 public void on <identifiersep> result ( final t result , final throwable t ) { \n \t2 try { \n \t3 wrapped . on <identifiersep> result ( result , t ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t1 do <identifiersep> on <identifiersep> change ( ) ; \n \t1 warned <identifiersep> already = false ; } \n \t1 } else { \n \t1 if ( ! warned <identifiersep> already ) { \n <ect>
\t5 } else { \n \t6 logger . error ( <string_literal> ) ; \n \t6 state = pairing <identifiersep> initialisation <identifiersep> state . finished ; } \n \t4 } else { \n <ect>
\t1 private void safe <identifiersep> close <identifiersep> statement ( ) { \n \t2 try { \n \t3 statement . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 stomp <identifiersep> frame reply = stomp <identifiersep> connection . receive ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( reply ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , reply . get <identifiersep> action ( ) ) ; \n \t2 assert <identifiersep> true ( reply . get <identifiersep> body ( ) . contains ( <string_literal> ) ) ; \n <ect>
\t2 final list < metadata <identifiersep> resolver > resolvers = new array <identifiersep> list < > ( ) ; \n \t2 final set < map . entry < resource , metadata <identifiersep> filter <identifiersep> chain > > entries = this . metadata <identifiersep> resources . entry <identifiersep> set ( ) ; \n \t2 entries . for <identifiersep> each ( entry - > { \n \t3 final resource resource = entry . get <identifiersep> key ( ) ; \n <ect>
\t4 } else { \n \t5 logger . debug ( <string_literal> , e . bytes <identifiersep> transferred ) ; } \n \t4 logger . trace ( <string_literal> , e ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 properties tmp = new properties ( ) ; \n \t5 tmp . load ( fis ) ; \n \t5 jmeter <identifiersep> props . put <identifiersep> all ( tmp ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 { \n \t1 ssl <identifiersep> handshake <identifiersep> completion <identifiersep> event handshake <identifiersep> event = ( ssl <identifiersep> handshake <identifiersep> completion <identifiersep> event ) evt ; \n \t1 if ( handshake <identifiersep> event . is <identifiersep> success ( ) ) \n \t1 { \n <ect>
\t2 { \n \t3 action . apply ( ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
public er . neo4jadaptor . test . eo . first <identifiersep> entity first <identifiersep> entity ( ) { \n \t1 return ( er . neo4jadaptor . test . eo . first <identifiersep> entity ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <string_literal> ) ; } \n public void set <identifiersep> first <identifiersep> entity <identifiersep> relationship ( er . neo4jadaptor . test . eo . first <identifiersep> entity value ) { \n <ect>
\t5 } else if ( is <identifiersep> monitor <identifiersep> dependent <identifiersep> lib ( each <identifiersep> class <identifiersep> path , libs ) ) { \n \t6 add <identifiersep> file <identifiersep> to <identifiersep> tar ( tar <identifiersep> output <identifiersep> stream , each <identifiersep> class <identifiersep> path , lib <identifiersep> path + each <identifiersep> class <identifiersep> path . get <identifiersep> name ( ) ) ; } } \n \t4 add <identifiersep> monitor <identifiersep> conf <identifiersep> to <identifiersep> tar ( tar <identifiersep> output <identifiersep> stream , base <identifiersep> path , config . get <identifiersep> monitor <identifiersep> port ( ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 } else { \n \t4 logger . error ( <string_literal> , rp <identifiersep> id , configuration . get <identifiersep> identity <identifiersep> provider <identifiersep> identifier ( ) ) ; \n \t4 return error ( ) ; } \n \t3 context . get <identifiersep> flow <identifiersep> scope ( ) . put ( cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> service , service ) ; \n <ect>
\t3 if ( request . is <identifiersep> user <identifiersep> in <identifiersep> role ( role ) ) { \n \t4 log . debug ( <string_literal> , role ) ; \n \t4 return false ; } } \n \t2 if ( allowed <identifiersep> roles . is <identifiersep> empty ( ) ) { \n <ect>
\t2 int count = 0 ; \n \t2 while ( enumeration . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t3 message msg = ( message ) enumeration . next <identifiersep> element ( ) ; \n \t3 assert <identifiersep> not <identifiersep> null ( msg ) ; \n <ect>
\t8 s <identifiersep> logger . debug ( <string_literal> + destroyed <identifiersep> volume <identifiersep> host <identifiersep> vo . get <identifiersep> install <identifiersep> path ( ) ) ; } \n \t6 } else { \n \t7  <identifiersep> volume <identifiersep> host <identifiersep> dao . remove ( destroyed <identifiersep> volume <identifiersep> host <identifiersep> vo . get <identifiersep> id ( ) ) ; } } \n \t4 } catch ( exception e2 ) { \n <ect>
\t7 continue sort ; } } } \n \t4 sorted = true ; } \n \t3 while ( ! sorted && iterations < = max <identifiersep> iterations ) ; \n \t3 if ( iterations > max <identifiersep> iterations ) { \n <ect>
<comment> \n \t1 public synchronized void release <identifiersep> rebalancing <identifiersep> permit ( int node <identifiersep> id ) { \n \t2 boolean removed = rebalance <identifiersep> permits . remove ( node <identifiersep> id ) ; \n <ect>
\t3 logger . trace ( <string_literal> ) ; \n \t3 connection = new connection ( m <identifiersep> ip , m <identifiersep> port , timeout , charset ) ; \n \t3 logger . debug ( <string_literal> , cmd . get <identifiersep> command ( ) ) ; \n \t3 res = connection . send ( cmd ) ; \n <ect>
\t2 final handle <identifiersep> implementation handle = new handle <identifiersep> implementation ( ) ; \n \t2 final boolean need <identifiersep> start = this . handles . is <identifiersep> empty ( ) ; \n \t2 this . handles . add ( handle ) ; \n \t2 if ( need <identifiersep> start ) { \n <ect>
\t2 if ( last <identifiersep> check <identifiersep> point <identifiersep> time > 0 ) { \n \t3 last <identifiersep> check <identifiersep> point <identifiersep> time = get <identifiersep> rounded <identifiersep> check <identifiersep> point <identifiersep> time <identifiersep> millis ( last <identifiersep> check <identifiersep> point <identifiersep> time , get <identifiersep> sleep <identifiersep> interval <identifiersep> millis ( ) ) ; \n \t3 log . info ( <string_literal> + new date ( last <identifiersep> check <identifiersep> point <identifiersep> time ) ) ; } \n \t2 if ( is <identifiersep> last <identifiersep> check <identifiersep> point <identifiersep> too <identifiersep> young ( last <identifiersep> check <identifiersep> point <identifiersep> time ) ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 if ( ! interesting ) { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 all . add <identifiersep> all ( get <identifiersep> zoo <identifiersep> cache ( ) . get <identifiersep> children ( path ) ) ; \n \t1 lockless <identifiersep> servers . key <identifiersep> set ( ) . retain <identifiersep> all ( all ) ; \n \t1 for ( string z <identifiersep> path : all ) { \n \t2 check <identifiersep> server ( updates , doomed , path , z <identifiersep> path ) ; } \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t3 log . warn ( <string_literal> + \n \t5 <string_literal> , ex ) ; \n \t3 report <identifiersep> error ( ex ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t5 continue ; } \n \t4 if ( answer != null && answer . get <identifiersep> result ( ) ) { \n \t5 return true ; } } } \n <ect>
\t3 try { \n \t4 db <identifiersep> minor <identifiersep> version = meta . get <identifiersep> database <identifiersep> minor <identifiersep> version ( ) ; \n \t4 logger . debug ( <string_literal> , db <identifiersep> minor <identifiersep> version ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 if ( mirror <identifiersep> node == null ) { \n \t4 logger . error ( <string_literal> ) ; \n \t4 return ; } \n \t3 if ( current <identifiersep> node == null ) { \n <ect>
\t4 u . error ( log , <string_literal> , e ) ; \n \t4 return ; } \n \t3 collection < grid <identifiersep> cache <identifiersep> tx <identifiersep> entry < k , v > > entries = tx . write <identifiersep> entries ( ) ; \n <ect>
\t1 string key = get <identifiersep> tag <identifiersep> name ( context ) ; \n \t1 log . debug ( <string_literal> , key ) ; \n \t1 if ( ! instances . contains <identifiersep> key ( key ) ) { \n \t1 string lock <identifiersep> key = t <identifiersep> class . get <identifiersep> name ( ) + <string_literal> + key ; \n <ect>
\t1 if ( ! qbp . get <identifiersep> dest <identifiersep> to <identifiersep> cluster <identifiersep> by ( ) . is <identifiersep> empty ( ) ) { \n \t2 throw new semantic <identifiersep> exception ( error <identifiersep> msg . udtf <identifiersep> no <identifiersep> cluster <identifiersep> by . get <identifiersep> msg ( ) ) ; } \n \t1 if ( ! qbp . get <identifiersep> alias <identifiersep> to <identifiersep> lateral <identifiersep> views ( ) . is <identifiersep> empty ( ) ) { \n \t2 throw new semantic <identifiersep> exception ( error <identifiersep> msg . udtf <identifiersep> lateral <identifiersep> view . get <identifiersep> msg ( ) ) ; } \n <ect>
\t3 if ( state == null ) { \n \t4 <comment> \n \t4 <comment> \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 if ( principal == null ) { \n \t3 logger . warn ( <string_literal> , handler . get <identifiersep> name ( ) ) ; \n \t2 } else { \n \t3 builder . set <identifiersep> principal ( principal ) ; } \n <ect>
\t2 assert . assert <identifiersep> array <identifiersep> equals ( a <identifiersep> key <identifiersep> bytes , b <identifiersep> key <identifiersep> bytes ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> is <identifiersep> derived ( ) { \n <ect>
\t1 private class preference <identifiersep> change <identifiersep> listener implements i <identifiersep> preference <identifiersep> change <identifiersep> listener { \n \t2 @ override \n \t2 public void preference <identifiersep> change ( final preference <identifiersep> change <identifiersep> event event ) { \n \t3 final string key = event . get <identifiersep> key ( ) ; \n <ect>
\t2 person <identifiersep> lookup <identifiersep> strategy lookup <identifiersep> strategy = null ; \n \t2 for ( membership <identifiersep> criteria <identifiersep> dto criterion : membership <identifiersep> criteria ) \n \t2 { \n \t3 string ldap <identifiersep> query = criterion . get <identifiersep> criteria ( ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t6 session . save ( ) ; \n \t6 if ( print ) log . info ( <string_literal> ) ; \n \t6 utxn . commit ( ) ; \n \t6 utxn . begin ( ) ; } } \n <ect>
\t6 jmx <identifiersep> util . register <identifiersep> m <identifiersep> bean ( mbean ) ; \n \t5 } catch ( malformed <identifiersep> object <identifiersep> name <identifiersep> exception e ) { \n \t6 log . warn ( <string_literal> + mbean . get <identifiersep> name ( ) , e ) ; \n \t5 } catch ( instance <identifiersep> already <identifiersep> exists <identifiersep> exception e ) { \n <ect>
\t5 sampler . finish <identifiersep> sampling ( ) ; } } \n \t3 try { \n \t4 log . debug ( <string_literal> ) ; \n \t4 sampler <identifiersep> completion <identifiersep> latch . await ( ) ; \n <ect>
\t5 output <identifiersep> map . clear ( ) ; } \n \t4 last <identifiersep> write <identifiersep> flush <identifiersep> time = now ; } \n \t3 if ( remove <identifiersep> list . size ( ) > 0 ) { \n \t4 if ( ! write <identifiersep> queue . offer ( new array <identifiersep> list < > ( remove <identifiersep> list ) ) ) { \n <ect>
\t3 case chatmessage : \n \t3 case joined <identifiersep> table : \n \t4 break ; \n \t3 default : \n <ect>
\t3 output <identifiersep> columns . add ( new <identifiersep> h <identifiersep> node <identifiersep> id ) ; \n \t3 new <identifiersep> column <identifiersep> absolute <identifiersep> name = ndid . get <identifiersep> absolute <identifiersep> column <identifiersep> name ( workspace . get <identifiersep> factory ( ) ) ; \n \t3 return c ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 pstmt = conn . prepare <identifiersep> statement ( <string_literal> ) ; \n \t4 pstmt . execute <identifiersep> update ( ) ; \n \t3 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 node <identifiersep> decisions . put ( node <identifiersep> name , allocation <identifiersep> decision . no ) ; } \n \t3 verify <identifiersep> node <identifiersep> decisions ( parser , node <identifiersep> decisions , include <identifiersep> yes <identifiersep> decisions , true ) ; \n \t3 assert <identifiersep> equals ( token . end <identifiersep> object , parser . next <identifiersep> token ( ) ) ; } } \n \t1 public void test <identifiersep> allocation <identifiersep> filtering <identifiersep> on <identifiersep> index <identifiersep> creation ( ) throws exception { \n <ect>
\t2 if ( volume . get <identifiersep> pool <identifiersep> id ( ) == null ) { \n \t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> ) ; } \n \t2 <comment> \n \t2 if ( volume . get <identifiersep> instance <identifiersep> id ( ) != null && api <identifiersep> db <identifiersep> utils . find <identifiersep> vm <identifiersep> instance <identifiersep> by <identifiersep> id ( volume . get <identifiersep> instance <identifiersep> id ( ) ) . get <identifiersep> state ( ) != state . stopped ) { \n <ect>
\t2 if ( k <identifiersep> session <identifiersep> model . get <identifiersep> type ( ) == kie <identifiersep> session <identifiersep> model . kie <identifiersep> session <identifiersep> type . stateful ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> + k <identifiersep> session <identifiersep> model . get <identifiersep> name ( ) ) ; } \n \t2 kie <identifiersep> base k <identifiersep> base = get <identifiersep> kie <identifiersep> base ( k <identifiersep> session <identifiersep> model . get <identifiersep> kie <identifiersep> base <identifiersep> model ( ) . get <identifiersep> name ( ) ) ; \n \t2 if ( k <identifiersep> base == null ) { \n <ect>
\t3 initialize <identifiersep> connect <identifiersep> and <identifiersep> login ( authority , \n \t4 security <identifiersep> authority . authentication <identifiersep> required ) ; } \n \t2 catch ( xmpp <identifiersep> exception ex ) \n \t2 { \n <ect>
\t5 settings . log ( ) ; \n \t4 } else if ( command <identifiersep> str . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t5 settings . help <identifiersep> items ( ) ; \n \t4 } else { \n <ect>
\t3 element el = query <identifiersep> async <identifiersep> job <identifiersep> result ( server , input ) ; \n \t3 map < string , string > success = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( el , new string [ ] { <string_literal> } ) ; \n \t3 s <identifiersep> logger . info ( <string_literal> + success . get ( <string_literal> ) ) ; \n \t2 } else { \n <ect>
\t2 stub <identifiersep> manager . disconnect <identifiersep> stubs ( ) ; } \n \t1 @ override \n \t1 public void find <identifiersep> members ( list < address > members , boolean initial <identifiersep> discovery , responses responses ) { \n \t2 if ( this . cluster <identifiersep> name == null ) { \n <ect>
\t5 data <identifiersep> tree <identifiersep> node find = parent <identifiersep> node . get <identifiersep> node ( dropped ) ; \n \t5 if ( find != null && find == probe ) { \n \t6 log . warn ( <string_literal> + parent <identifiersep> node + <string_literal> + probe + <string_literal> + find ) ; } } \n \t3 } else if ( test ) { \n <ect>
\t4 case connection <identifiersep> options . inactivity <identifiersep> action <identifiersep> disconnect : \n \t5 <comment> \n \t4 default : \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 if ( context != null ) { \n \t2 try { \n \t2 context . close ( ) ; \n \t2 } catch ( naming <identifiersep> exception ne ) { \n <ect>
\t3 erx <identifiersep> database . cache <identifiersep> change cache <identifiersep> change = ( erx <identifiersep> database . cache <identifiersep> change ) cache <identifiersep> changes <identifiersep> enum . next <identifiersep> element ( ) ; \n \t3  <identifiersep> write <identifiersep> cache <identifiersep> change ( dos , cache <identifiersep> change ) ; } \n \t2 dos . flush ( ) ; \n \t2 dos . close ( ) ; \n <ect>
\t1 for ( processing <identifiersep> component pc : svc . components ) { \n \t2 if ( pc != null ) { \n \t2 component <identifiersep> map . put ( pc . name , pc ) ; \n \t2 } else { \n <ect>
\t3 case disconnected : \n \t4 try { \n \t5 handler . disconnected ( channel ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 def test <identifiersep> ssh <identifiersep> command ( self , vm , nat <identifiersep> rule , rule <identifiersep> label ) : \n \t2 result = 'failed' \n \t2 try : \n \t3 ssh <identifiersep> command = <string_literal> \n <ect>
\t3 update <identifiersep> count ++ ; \n \t2 } else { \n \t3 error += ( registered <identifiersep> client . request <identifiersep> info . task <identifiersep> attempt <identifiersep> id + <string_literal> ) ; } } } \n \t1 if ( ! error . is <identifiersep> empty ( ) ) { \n <ect>
\t3 expansion <identifiersep> repository . instance . set <identifiersep> content <identifiersep> version ( server <identifiersep> state . get <identifiersep> expansions <identifiersep> content <identifiersep> version ( ) ) ; \n \t3 logger . info ( <string_literal> + set <identifiersep> codes . size ( ) + <string_literal> + expansions . size ( ) \n \t5 + <string_literal> + server <identifiersep> state . get <identifiersep> expansions <identifiersep> content <identifiersep> version ( ) + <string_literal> + expansion <identifiersep> db <identifiersep> version ) ; } } \n \t1 private void handle <identifiersep> cannot <identifiersep> connect <identifiersep> exception ( cannot <identifiersep> connect <identifiersep> exception ex ) { \n <ect>
\t4 @ override \n \t4 public void handle <identifiersep> transaction <identifiersep> failure ( security <identifiersep> context security <identifiersep> context , throwable t ) { \n \t5 logger . warn ( <string_literal> , t . get <identifiersep> message ( ) ) ; } \n \t3 } ) ; \n <ect>
\t5 return <string_literal> ; } \n \t4 return double . to <identifiersep> string ( d ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception ex2 ) { \n \t4 <comment> \n <ect>
\t5 if ( ignored . get <identifiersep> cause ( ) == null || \n \t6 ! ( ignored . get <identifiersep> cause ( ) instanceof job <identifiersep> cancellation <identifiersep> exception ) ) { \n \t6 ignored . print <identifiersep> stack <identifiersep> trace ( ) ; } } } \n \t2 } ) ; \n <ect>
\t4 input <identifiersep> stream input = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t4 element el = query <identifiersep> async <identifiersep> job <identifiersep> result ( server , input ) ; \n \t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t3 } else { \n <ect>
\t1 <comment> \n \t1 byte <identifiersep> buffer [ ] cols = file <identifiersep> format <identifiersep> proxy . get <identifiersep> added <identifiersep> columns <identifiersep> to <identifiersep> cache ( ) ; \n \t1 byte <identifiersep> buffer [ ] vals = ( cols == null ) ? null : new byte <identifiersep> buffer [ cols . length ] ; \n \t1 byte <identifiersep> buffer metadata = file <identifiersep> format <identifiersep> proxy . get <identifiersep> metadata <identifiersep> to <identifiersep> cache ( fs , path , vals ) ; \n <ect>
\t3 container . buf = new byte [ in <identifiersep> payload <identifiersep> length ] ; \n \t2 if ( data . get ( in <identifiersep> seq ) != null ) \n \t2 { \n <ect>
\t1 @ inject \n \t1 private logger log ; \n \t1 @ override \n \t1 public void filter ( container <identifiersep> request <identifiersep> context request <identifiersep> context ) throws io <identifiersep> exception { \n <ect>
\t2 if ( coord <identifiersep> job . get <identifiersep> status ( ) == coordinator <identifiersep> job . status . premater ) { \n \t3 <comment> \n \t3 coord <identifiersep> job . set <identifiersep> status ( coordinator <identifiersep> job . status . running ) ; \n \t3 store . update <identifiersep> coordinator <identifiersep> job ( coord <identifiersep> job ) ; \n <ect>
\t1 try { \n \t2 progress <identifiersep> helper <identifiersep> class . get <identifiersep> declared <identifiersep> method ( <string_literal> ) . invoke ( progress <identifiersep> helper ) ; \n \t2 log . debug ( <string_literal> ) ; } \n \t1 catch ( exception exception ) { \n <ect>
<comment> \n \t1 private void schedule <identifiersep> all <identifiersep> bindings ( binding <identifiersep> provider pv <identifiersep> provider ) { \n \t2 if ( one <identifiersep> wire <identifiersep> connection . is <identifiersep> connection <identifiersep> established ( ) ) { \n <ect>
\t4 int count \t2 = 1 ; \n \t4 if ( property <identifiersep> names . contains ( property <identifiersep> name ) ) { \n \t5 while ( property <identifiersep> names . contains ( property <identifiersep> name ) ) { \n \t6 property <identifiersep> name = property <identifiersep> name + count ++ ; } \n <ect>
\t3 vmware <identifiersep> manager mgr = context . get <identifiersep> stock <identifiersep> object ( vmware <identifiersep> manager . context <identifiersep> stock <identifiersep> name ) ; \n \t3 return ( copy <identifiersep> volume <identifiersep> answer ) mgr . get <identifiersep> storage <identifiersep> manager ( ) . execute ( this , cmd ) ; \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 <comment> \n \t2 file file = new file ( <string_literal> ) ; \n \t2 assert <identifiersep> true ( file + <string_literal> , file . exists ( ) ) ; \n \t2 long size = file . length ( ) ; \n <ect>
\t1 protected log logger = log <identifiersep> factory . get <identifiersep> log ( reject <identifiersep> and <identifiersep> dont <identifiersep> requeue <identifiersep> recoverer . class ) ; \n \t1 @ override \n \t1 public void recover ( message message , throwable cause ) { \n <ect>
\t5 log . debug ( <string_literal> ) ; \n \t5 zk . get <identifiersep> zk <identifiersep> database ( ) . init <identifiersep> config <identifiersep> in <identifiersep> zk <identifiersep> database ( self . get <identifiersep> quorum <identifiersep> verifier ( ) ) ; } \n \t4 string signature = leader <identifiersep> is . read <identifiersep> string ( <string_literal> ) ; \n \t4 if ( ! signature . equals ( <string_literal> ) ) { \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t2 roi . drain ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 temporary <identifiersep> topics . add ( topic ) ; } \n \t3 else { \n \t4 temporary <identifiersep> topics . remove ( topic ) ; } } \n \t2 else { \n <ect>
\t2 assert <identifiersep> that ( count ( client , <string_literal> ) , equal <identifiersep> to ( 100l ) ) ; \n \t2 assert <identifiersep> that ( count ( client , <string_literal> ) , equal <identifiersep> to ( 100l ) ) ; \n \t2 assert <identifiersep> that ( count ( client , <string_literal> ) , equal <identifiersep> to ( 50l ) ) ; \n \t2 <comment> \n <ect>
\t4 if ( gpu <identifiersep> device != null ) { \n \t5  <identifiersep> resource <identifiersep> mgr . update <identifiersep> gpu <identifiersep> details ( vm . get <identifiersep> host <identifiersep> id ( ) , gpu <identifiersep> device . get <identifiersep> group <identifiersep> details ( ) ) ; } \n \t4 if ( ! answer . get <identifiersep> result ( ) ) { \n \t5 final string details = answer . get <identifiersep> details ( ) ; \n <ect>
\t8 pstmt <identifiersep> domain . execute <identifiersep> query ( ) ; \n \t8 return <string_literal> ; \n \t7 } catch ( final sql <identifiersep> exception e ) { \n \t8 s <identifiersep> logger . debug ( <string_literal> ) ; \n <ect>
\t3 return null ; } \n \t2 final map < string , multifactor <identifiersep> authentication <identifiersep> provider > provider <identifiersep> map = \n \t4 multifactor <identifiersep> authentication <identifiersep> utils . get <identifiersep> available <identifiersep> multifactor <identifiersep> authentication <identifiersep> providers ( this . application <identifiersep> context ) ; \n \t2 if ( provider <identifiersep> map == null || provider <identifiersep> map . is <identifiersep> empty ( ) ) { \n <ect>
\t3 ensure <identifiersep> green ( index ) ; \n \t3 assert <identifiersep> ok ( client ( ) . perform <identifiersep> request ( <string_literal> , index + <string_literal> ) ) ; \n \t3 list < shard > shards = build <identifiersep> shards ( index , nodes , new <identifiersep> node <identifiersep> client ) ; \n \t3 shard primary = build <identifiersep> shards ( index , nodes , new <identifiersep> node <identifiersep> client ) . stream ( ) . filter ( shard : : is <identifiersep> primary ) . find <identifiersep> first ( ) . get ( ) ; \n <ect>
\t4 if ( left <identifiersep> node . equals ( next ) && next <identifiersep> node <identifiersep> sock != null ) { \n \t5 try { \n \t6 write <identifiersep> to <identifiersep> socket ( next <identifiersep> node <identifiersep> sock , msg ) ; \n <ect>
\t3 di = protocol <identifiersep> provider . get <identifiersep> discovery <identifiersep> manager ( ) . discover <identifiersep> info ( \n \t5 full <identifiersep> callee <identifiersep> uri ) ; } \n \t2 catch ( xmpp <identifiersep> exception ex ) \n \t2 { \n <ect>
\t3 super ( ) ; } \n \t2 @ override \n \t2 public void documents <identifiersep> built ( int number ) { \n \t3 super . documents <identifiersep> built ( number ) ; \n <ect>
\t3 file <identifiersep> full <identifiersep> path = ds <identifiersep> mo . search <identifiersep> file <identifiersep> in <identifiersep> sub <identifiersep> folders ( file <identifiersep> name , false , exclude <identifiersep> folders ) ; \n \t2 if ( file <identifiersep> full <identifiersep> path != null ) { \n \t3 ds <identifiersep> mo . delete <identifiersep> file ( file <identifiersep> full <identifiersep> path , dc <identifiersep> mo . get <identifiersep> mor ( ) , true , exclude <identifiersep> folders ) ; \n \t2 } else { \n <ect>
\t1 public void next <identifiersep> tuple ( ) { \n \t2 process ( operation . next <identifiersep> tuple , null ) ; } \n \t1 @ override \n \t1 public void ack ( object msg <identifiersep> id ) { \n <ect>
\t2 cms <identifiersep> vaadin <identifiersep> utils . read <identifiersep> and <identifiersep> localize <identifiersep> design ( this , cms <identifiersep> vaadin <identifiersep> utils . get <identifiersep> wp <identifiersep> messages <identifiersep> for <identifiersep> current <identifiersep> locale ( ) , null ) ; \n \t2 try { \n \t3 m <identifiersep> cms = open <identifiersep> cms . init <identifiersep> cms <identifiersep> object ( a <identifiersep> cms <identifiersep> ui . get <identifiersep> cms <identifiersep> object ( ) ) ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t4 protected void do <identifiersep> in <identifiersep> transaction <identifiersep> without <identifiersep> result ( transaction <identifiersep> status status ) { \n \t5 input <identifiersep> channel . send ( message <identifiersep> builder . with <identifiersep> payload ( message ) . build ( ) ) ; } \n \t3 } ) ; \n \t3 log . info ( string . format ( <string_literal> , i , max <identifiersep> messages , message ) ) ; } \n <ect>
\t2 <comment> \n \t2 for ( iterator iter3 = session <identifiersep> state . get <identifiersep> producer <identifiersep> states ( ) . iterator ( ) ; iter3 . has <identifiersep> next ( ) ; ) { \n \t3 producer <identifiersep> state producer <identifiersep> state = ( producer <identifiersep> state ) iter3 . next ( ) ; \n <ect>
\t2 client <identifiersep> manager = new time <identifiersep> cache <identifiersep> map < string , nimbus <identifiersep> client > ( <number_literal> , \n \t4 new expired <identifiersep> callback < string , nimbus <identifiersep> client > ( ) { \n \t5 @ override \n \t5 public void expire ( string key , nimbus <identifiersep> client val ) { \n <ect>
\t5 quat4f rot = new quat4f ( inverse <identifiersep> world <identifiersep> rot ) ; \n \t5 rot . mul ( bone <identifiersep> location . get <identifiersep> world <identifiersep> rotation ( ) ) ; \n \t5 bone <identifiersep> rotations . add ( rot ) ; \n \t4 } else { \n <ect>
\t3 connection = get <identifiersep> data <identifiersep> source ( ) . get <identifiersep> connection ( ) ; \n \t3 if ( ! connection . is <identifiersep> valid ( <number_literal> ) ) { \n \t4 throw new io <identifiersep> exception ( <string_literal> + connection ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 prev <identifiersep> count = integer . parse <identifiersep> int ( prev <identifiersep> string ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t1 collection <identifiersep> create <identifiersep> request . set <identifiersep> max <identifiersep> shards <identifiersep> per <identifiersep> node ( solr <identifiersep> props <identifiersep> config . get <identifiersep> replication <identifiersep> factor ( ) * solr <identifiersep> props <identifiersep> config . get <identifiersep> number <identifiersep> of <identifiersep> shards ( ) ) ; \n \t1 collection <identifiersep> admin <identifiersep> response create <identifiersep> response = collection <identifiersep> create <identifiersep> request . process ( solr <identifiersep> client ) ; \n \t1 if ( create <identifiersep> response . get <identifiersep> status ( ) != 0 ) { \n \t2 return <identifiersep> value = false ; \n <ect>
\t1 return deleted ; } \n public boolean delete <identifiersep> resource <identifiersep> group <identifiersep> if <identifiersep> empty ( string group ) { \n \t1 boolean deleted = false ; \n \t1 if ( api . get <identifiersep> resource <identifiersep> group <identifiersep> api ( ) . resources ( group ) . is <identifiersep> empty ( ) ) { \n <ect>
\t3 if ( path . equals ( <string_literal> ) ) \n \t4 continue ; \n \t3 resource r = e . get <identifiersep> value ( ) ; \n \t3 if ( path . starts <identifiersep> with ( prefix ) ) { \n <ect>
\t1 public caching <identifiersep> ticket <identifiersep> registry ( final cipher <identifiersep> executor cipher <identifiersep> executor , final logout <identifiersep> manager logout <identifiersep> manager ) { \n \t2 super ( cipher <identifiersep> executor ) ; \n \t2 this . storage = caffeine . new <identifiersep> builder ( ) . initial <identifiersep> capacity ( initial <identifiersep> cache <identifiersep> size ) . maximum <identifiersep> size ( max <identifiersep> cache <identifiersep> size ) \n \t3 . expire <identifiersep> after ( new cached <identifiersep> ticket <identifiersep> expiration <identifiersep> policy ( ) ) . removal <identifiersep> listener ( new cached <identifiersep> ticket <identifiersep> removal <identifiersep> listener ( ) ) . build ( s - > { \n <ect>
\t1 yield <identifiersep> nexts . increment <identifiersep> and <identifiersep> get ( ) ; \n \t1 <comment> \n \t1 <comment> \n \t1 yield . get ( ) . yield ( get <identifiersep> top <identifiersep> key ( ) . following <identifiersep> key ( partial <identifiersep> key . row <identifiersep> colfam <identifiersep> colqual <identifiersep> colvis <identifiersep> time ) ) ; \n <ect>
<comment> \n \t3 if ( response . is <identifiersep> acknowledged ( ) ) { \n \t4 logger . info ( <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 string new <identifiersep> vlan = integer . to <identifiersep> string ( vlan <identifiersep> id . int <identifiersep> value ( ) ) ; \n \t2 if ( current <identifiersep> vlan . equals <identifiersep> ignore <identifiersep> case ( new <identifiersep> vlan ) ) { \n \t3 if ( netconf <identifiersep> client != null ) { \n \t4 netconf <identifiersep> client . disconnect ( ) ; \n <ect>
\t8 { \n \t9 dest <identifiersep> volume <identifiersep> object <identifiersep> to . path += <string_literal> + dest <identifiersep> volume <identifiersep> object <identifiersep> to . format . to <identifiersep> lower ( ) ; } } \n \t7 else \n \t7 { \n <ect>
\t2 if ( scanner . has <identifiersep> next <identifiersep> line ( ) ) { \n \t2 logger . warn ( <string_literal> + \n \t3 <string_literal> ) ; } \n \t1 } else { \n <ect>
\t3 request <identifiersep> to <identifiersep> sign = request <identifiersep> to <identifiersep> sign . to <identifiersep> lower <identifiersep> case ( ) ; \n \t3 signature = sign <identifiersep> request ( request <identifiersep> to <identifiersep> sign ,  <identifiersep> secret <identifiersep> key . get ( ) ) ; \n \t3 encoded <identifiersep> signature = url <identifiersep> encoder . encode ( signature , <string_literal> ) ; \n \t3 url = developer <identifiersep> server + <string_literal> + encoded <identifiersep> api <identifiersep> key + <string_literal> + encoded <identifiersep> ip <identifiersep> address + <string_literal> + encoded <identifiersep> vm <identifiersep> id + <string_literal> + encoded <identifiersep> signature ; \n <ect>
\t1 public void execute ( ) { \n \t1 try { \n \t2 start <identifiersep> hive <identifiersep> server2 ( ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t2 for ( index <identifiersep> event <identifiersep> listener listener : listeners ) { \n \t3 try { \n \t4 listener . after <identifiersep> index <identifiersep> shard <identifiersep> started ( index <identifiersep> shard ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 final map < string , object > new <identifiersep> encoded <identifiersep> attributes = new hash <identifiersep> map < > ( attributes ) ; \n \t2 final map < string , string > cached <identifiersep> attributes <identifiersep> to <identifiersep> encode = initialize ( new <identifiersep> encoded <identifiersep> attributes ) ; \n \t2 if ( registered <identifiersep> service != null && registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed ( ) ) { \n \t3 encode <identifiersep> attributes <identifiersep> internal ( new <identifiersep> encoded <identifiersep> attributes , cached <identifiersep> attributes <identifiersep> to <identifiersep> encode , this . cipher <identifiersep> executor , registered <identifiersep> service ) ; \n <ect>
\t2 path <identifiersep> element . update <identifiersep> profile ( duration ) ; } \n \t1 public void process <identifiersep> bundle ( bundle bundle , tree <identifiersep> mapper <identifiersep> path <identifiersep> reference target ) { \n \t2 integer unit = target . get <identifiersep> target <identifiersep> unit ( ) ; \n \t2 if ( unit == null ) { \n <ect>
\t2  <identifiersep> groups = ( ns <identifiersep> array ) dict . object <identifiersep> for <identifiersep> key ( <string_literal> ) ; \n \t2  <identifiersep> group <identifiersep> dict = ( ns <identifiersep> dictionary ) dict . object <identifiersep> for <identifiersep> key ( <string_literal> ) ; \n \t2  <identifiersep> v <identifiersep> list . add <identifiersep> objects <identifiersep> from <identifiersep> array (  <identifiersep> groups ) ; \n \t2 group <identifiersep> all <identifiersep> record <identifiersep> groups ( ) ; \n <ect>
\t3 public <identifiersep> key public <identifiersep> key = adapter <identifiersep> rsa <identifiersep> token <identifiersep> verifier . get <identifiersep> public <identifiersep> key ( input . get <identifiersep> header ( ) . get <identifiersep> key <identifiersep> id ( ) , deployment ) ; \n \t3 if ( rsa <identifiersep> provider . verify ( input , public <identifiersep> key ) ) { \n \t4 return input ; } \n \t2 } catch ( jws <identifiersep> input <identifiersep> exception ignore ) { } \n <ect>
\t4 try { \n \t5 pid = integer . parse <identifiersep> int ( name . substring ( name . last <identifiersep> index <identifiersep> of ( ' - ' ) + 1 ) ) ; } \n \t4 catch ( number <identifiersep> format <identifiersep> exception ignored ) { \n <ect>
\t3 if ( ihc == null ) { \n \t4 logger . warn ( <string_literal> , item <identifiersep> name ) ; \n \t4 return ; } \n \t3 if ( ihc . get <identifiersep> connection <identifiersep> state ( ) != connection <identifiersep> state . connected ) { \n <ect>
\t3 logger . debug ( <string_literal> , db <identifiersep> name ) ; \n \t2 } else { \n \t3 auth <identifiersep> db <identifiersep> name = props . get <identifiersep> authentication <identifiersep> database <identifiersep> name ( ) ; \n \t3 db <identifiersep> name = props . get <identifiersep> database <identifiersep> name ( ) ; \n <ect>
logger . info ( <string_literal> . format ( options . port ) ) \n logger . info ( <string_literal> . format ( options . user ) ) \n logger . info ( '' ) \n logger . info ( 'operation info' ) \n <ect>
\t2 case cp <identifiersep> info . constant <identifiersep> string : \n \t3 cp = new constant <identifiersep> string <identifiersep> info ( ) ; \n \t3 ( ( constant <identifiersep> string <identifiersep> info ) cp ) . string <identifiersep> index = \n \t4 d . read <identifiersep> unsigned <identifiersep> short ( ) ; \n <ect>
\t3 list < string > names = new array <identifiersep> list < string > ( ) ; \n \t3 for ( string filename : xml <identifiersep> files ) { \n \t4 names . add ( ( new file ( filename ) ) . get <identifiersep> name ( ) . replace ( <string_literal> , <string_literal> ) ) ; } \n \t3 plugin <identifiersep> names = names . to <identifiersep> array ( new string [ names . size ( ) ] ) ; \n <ect>
\t2 try { \n \t3 m <identifiersep> write <identifiersep> queue . add ( m ) ; \n \t3 logger . trace ( <string_literal> , m ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t2 create <identifiersep> document ( os , agent <identifiersep> defaults ( ) ) ; } \n \t1 public void create <identifiersep> document ( output <identifiersep> stream os , ns <identifiersep> dictionary < string , object > agent <identifiersep> attributes ) throws throwable { \n \t2 log . debug ( <string_literal> , os , agent <identifiersep> attributes ) ; \n \t2 fop <identifiersep> factory = fop <identifiersep> factory . new <identifiersep> instance ( ) ; \n <ect>
\t5 vmr . vcp <identifiersep> us <identifiersep> max = ( long ) vm <identifiersep> spec . get <identifiersep> vcpu <identifiersep> max <identifiersep> limit ( ) ; } } \n \t2 } else { \n \t3 <comment> \n \t3 if ( vm <identifiersep> spec . is <identifiersep> enable <identifiersep> dynamically <identifiersep> scale <identifiersep> vm ( ) && ! is <identifiersep> dmc <identifiersep> enabled ( conn , host ) ) { \n <ect>
\t3 <comment> \n \t3 usk my <identifiersep> usk = usk . create ( uri . set <identifiersep> suggested <identifiersep> edition ( current <identifiersep> version ) ) ; \n \t3 core . usk <identifiersep> manager . subscribe ( my <identifiersep> usk , this , true , get <identifiersep> request <identifiersep> client ( ) ) ; \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public void add <identifiersep> listener ( final i <identifiersep> cover <identifiersep> observer listener ) { \n <ect>
\t5 rs . close ( ) ; } \n \t4 if ( pstmt != null ) { \n \t5 pstmt . close ( ) ; } \n \t3 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 { \n \t1 try \n \t1 { \n \t2 echo <identifiersep> server . stop <identifiersep> server ( ) ; \n <ect>
\t1 rs = stmt . execute <identifiersep> query ( ) ; \n \t1 rs . next ( ) ; \n \t1 return rs . get <identifiersep> int ( 1 ) ; \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n <ect>
\t2 function < long , string > f = platform <identifiersep> info : : str <identifiersep> num2 ; \n \t2 long pid = get <identifiersep> process <identifiersep> id ( ) ; \n \t2 fmt <identifiersep> log . info ( log , <string_literal> , prefix , f . apply ( max <identifiersep> mem ) ) ; \n \t2 <comment> \n <ect>
\t4 channel <identifiersep> pool = null ; \n \t3 } catch ( exception e ) { \n \t4 throw new io <identifiersep> exception ( <string_literal> , e ) ; } } \n \t2 if ( conn != null ) { \n <ect>
\t1 camel <identifiersep> context <identifiersep> configuration context <identifiersep> configuration ( ) { \n \t2 return new camel <identifiersep> context <identifiersep> configuration ( ) { \n \t3 @ override \n \t3 public void before <identifiersep> application <identifiersep> start ( camel <identifiersep> context context ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> is <identifiersep> not <identifiersep> last <identifiersep> segment ( ) { \n <ect>
\t1 <comment> \n \t1 for ( read <identifiersep> entity input : plan . get <identifiersep> inputs ( ) ) { \n \t1 if ( ! input . needs <identifiersep> lock ( ) ) { \n \t2 continue ; } \n <ect>
\t6 operator <identifiersep> stats <identifiersep> cache . put ( vertex , stats ) ; \n \t5 } else { \n \t6 log . debug ( <string_literal> , throwable ) ; } \n \t4 } catch ( throwable t ) { \n <ect>
\t1 if ( resources . contains <identifiersep> key ( key ) ) { \n \t1 throw new illegal <identifiersep> transaction <identifiersep> state <identifiersep> exception ( core <identifiersep> messages . transaction <identifiersep> resource <identifiersep> already <identifiersep> listed <identifiersep> for <identifiersep> key ( key ) ) ; } \n \t1 resources . put ( normalized <identifiersep> key , resource ) ; \n \t1 if ( key == null ) { \n <ect>
\t2 if ( this . connection <identifiersep> test <identifiersep> statement != null ) { \n \t3 this . connection <identifiersep> test <identifiersep> statement = this . connection <identifiersep> test <identifiersep> statement . trim ( ) ; } \n \t2 this . service <identifiersep> order = this . service <identifiersep> order . to <identifiersep> upper <identifiersep> case ( ) ; \n \t2 if ( ! ( this . service <identifiersep> order . equals ( <string_literal> ) || this . service <identifiersep> order . equals ( <string_literal> ) ) ) { \n <ect>
\t2 vm <identifiersep> type . set <identifiersep> memory ( old <identifiersep> vm <identifiersep> type <identifiersep> info . get <identifiersep> memory ( ) ) \n \t2 vm <identifiersep> types . update ( vm <identifiersep> type ) \n \t2 log . info ( <string_literal> + vm <identifiersep> type . dump ( ) ) \n \t1 } else { \n <ect>
\t6 + <string_literal> ) ) ; \n \t4 double max <identifiersep> pitch <identifiersep> scale <identifiersep> factor = double . parse <identifiersep> double ( mary <identifiersep> properties . get <identifiersep> property ( <string_literal> + name \n \t6 + <string_literal> ) ) ; \n \t4 logger . debug ( <string_literal> ) ; \n <ect>
\t4 filename . get <identifiersep> parent <identifiersep> file ( ) . mkdirs ( ) ; \n \t3 freenet <identifiersep> uri max <identifiersep> chk = null ; \n \t3 s = props . get <identifiersep> property ( base <identifiersep> name + <string_literal> ) ; \n \t3 if ( s == null ) { \n <ect>
\t3 this . delegated <identifiersep> session <identifiersep> cookie <identifiersep> manager . store ( web <identifiersep> context ) ; \n \t3 return result ; \n \t2 } catch ( final http <identifiersep> action e ) { \n \t3 if ( e . get <identifiersep> code ( ) == http <identifiersep> status . unauthorized . value ( ) ) { \n <ect>
\t2 assert <identifiersep> true ( frame . starts <identifiersep> with ( <string_literal> ) ) ; \n \t2 frame = <string_literal> + <string_literal> + get <identifiersep> queue <identifiersep> name ( ) + <string_literal> + <string_literal> + <string_literal> + stomp . transformations . jms <identifiersep> map <identifiersep> json + <string_literal> + stomp . null ; \n \t2 stomp <identifiersep> connection . send <identifiersep> frame ( frame ) ; \n \t2 stomp <identifiersep> frame json = stomp <identifiersep> connection . receive ( ) ; \n <ect>
protected volume create <identifiersep> preferred <identifiersep> volume <identifiersep> from <identifiersep> disk ( ) { \n \t1 async <identifiersep> create <identifiersep> response job = client . get <identifiersep> volume <identifiersep> client ( ) . create <identifiersep> volume <identifiersep> from <identifiersep> disk <identifiersep> offering <identifiersep> in <identifiersep> zone ( prefix + <string_literal> , \n \t3 get <identifiersep> preferred <identifiersep> disk <identifiersep> offering ( ) . get <identifiersep> id ( ) , zone <identifiersep> id ) ; \n \t1 assert <identifiersep> true ( job <identifiersep> complete . apply ( job . get <identifiersep> job <identifiersep> id ( ) ) ) ; \n <ect>
\t4 search . set <identifiersep> read <identifiersep> only ( true ) ; \n \t4 next <identifiersep> snaps = ( list < snapshot <identifiersep> info > ) search . list ( ) ; \n \t4 tr . commit ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + vol . get <identifiersep> path ( ) + <string_literal> , e ) ; \n \t3 storage <identifiersep> pool <identifiersep> mgr . disconnect <identifiersep> physical <identifiersep> disk ( primary <identifiersep> store . get <identifiersep> pool <identifiersep> type ( ) , primary <identifiersep> store . get <identifiersep> uuid ( ) , vol . get <identifiersep> path ( ) ) ; \n \t3 return new attach <identifiersep> answer ( e . to <identifiersep> string ( ) ) ; \n \t2 } catch ( final internal <identifiersep> error <identifiersep> exception e ) { \n <ect>
\t3 wait <identifiersep> for <identifiersep> flush <identifiersep> result result = new wait <identifiersep> for <identifiersep> flush <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 if ( this . consent <identifiersep> policy != null && ! this . consent <identifiersep> policy . is <identifiersep> enabled ( ) ) { \n \t3 logger . debug ( <string_literal> , service ) ; \n \t3 return new linked <identifiersep> hash <identifiersep> map < > ( 0 ) ; } \n \t2 final map < string , object > attributes = get <identifiersep> attributes ( p , selected <identifiersep> service , service ) ; \n <ect>
def read <identifiersep> data <identifiersep> to <identifiersep> map ( self , path ) : \n \t1 try : \n \t1 import yaml \n \t1 except import <identifiersep> error : \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> async <identifiersep> with <identifiersep> delay ( ) throws exception { \n \t2 reset ( ) ; \n \t2 response response = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) . get ( ) ; \n <ect>
\t3 text <identifiersep> message text <identifiersep> message = text <identifiersep> message . class . cast ( message ) ; \n \t3 try { \n \t4 logger . debug ( <string_literal> , text <identifiersep> message . get <identifiersep> text ( ) ) ; \n \t3 } catch ( javax . jms . jms <identifiersep> exception jms <identifiersep> e ) { \n <ect>
\t2 for ( dependency d : dependencies . values ( ) ) { \n \t3 d . bind <identifiersep> to <identifiersep> version ( repo ) ; \n \t3 archive archive = d . get <identifiersep> archive ( ) ; \n \t3 if ( archive == null ) { \n <ect>
\t3 log . info ( <string_literal> , async <identifiersep> processor <identifiersep> await <identifiersep> manager ) ; \n \t3 get <identifiersep> context ( ) . set <identifiersep> async <identifiersep> processor <identifiersep> await <identifiersep> manager ( async <identifiersep> processor <identifiersep> await <identifiersep> manager ) ; } \n \t2 management <identifiersep> strategy management <identifiersep> strategy = get <identifiersep> bean <identifiersep> for <identifiersep> type ( management <identifiersep> strategy . class ) ; \n \t2 if ( management <identifiersep> strategy != null ) { \n <ect>
\t7 visibility <identifiersep> flags . put ( dom <identifiersep> node . visible <identifiersep> to <identifiersep> public <identifiersep> users , parent <identifiersep> node . get <identifiersep> property ( dom <identifiersep> node . visible <identifiersep> to <identifiersep> public <identifiersep> users ) ) ; \n \t7 try { \n \t8 new <identifiersep> node . set <identifiersep> properties ( new <identifiersep> node . get <identifiersep> security <identifiersep> context ( ) , visibility <identifiersep> flags ) ; \n \t7 } catch ( framework <identifiersep> exception fex ) { \n <ect>
<number_literal> + object . get <identifiersep> id ( ) + <string_literal> ) ; } } \n \t1 @ override \n \t1 public void delete ( context context , d <identifiersep> space <identifiersep> object dso ) \n \t2 throws identifier <identifiersep> exception { \n <ect>
\t9 sapp <identifiersep> central <identifiersep> executer . execute <identifiersep> sapp7d <identifiersep> command ( pnmas . get <identifiersep> ip ( ) , pnmas . get <identifiersep> port ( ) , \n <number_literal> control <identifiersep> address . get <identifiersep> address ( ) , new <identifiersep> value ) ; \n \t9 break ; } \n \t8 default : \n <ect>
\t2 if ( ! x . is <identifiersep> literal ( ) ) { \n \t3 log . warn ( <string_literal> + list ) ; \n \t3 return null ; } \n \t2 if ( ! spatial <identifiersep> value <identifiersep> util . is <identifiersep> decimal ( x ) ) { \n <ect>
\t2 } else { \n \t3 hosts <identifiersep> to <identifiersep> check . add <identifiersep> all ( hosts ) ; } \n \t3 if ( no <identifiersep> hvm <identifiersep> hosts . size ( ) > 0 ) { \n <ect>
\t4 super . life <identifiersep> cycle <identifiersep> stopping ( event ) ; \n \t4 try { \n \t5 closer . close ( ) ; \n \t4 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 if ( ! file . can <identifiersep> read ( ) ) { \n \t3 logger . warn ( <string_literal> , file . get <identifiersep> name ( ) ) ; \n \t3 return new array <identifiersep> list < > ( 0 ) ; } \n \t2 if ( ! file . exists ( ) ) { \n <ect>
\t4 persistence <identifiersep> adapter adaptor = ( persistence <identifiersep> adapter ) get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) . load <identifiersep> class ( clazz ) . new <identifiersep> instance ( ) ; \n \t4 job <identifiersep> scheduler <identifiersep> store = adaptor . create <identifiersep> job <identifiersep> scheduler <identifiersep> store ( ) ; \n \t4 job <identifiersep> scheduler <identifiersep> store . set <identifiersep> directory ( get <identifiersep> scheduler <identifiersep> directory <identifiersep> file ( ) ) ; \n \t4 configure <identifiersep> service ( job <identifiersep> scheduler <identifiersep> store ) ; \n <ect>
\t5 logger . debug ( <string_literal> , device . user <identifiersep> code ) ; \n \t5 logger . debug ( <string_literal> , device . device <identifiersep> code ) ; \n \t5 logger . debug ( <string_literal> , device . expires <identifiersep> in ) ; \n \t5 logger . debug ( <string_literal> , device . interval ) ; \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 possible <identifiersep> classes . remove ( backend <identifiersep> listener . class . get <identifiersep> name ( ) + <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 match = name . equals ( context <identifiersep> id ) ; \n \t5 } else { \n \t6 match = endpoint <identifiersep> helper . match <identifiersep> pattern ( name , context <identifiersep> id <identifiersep> pattern ) ; } \n <ect>
\t4 if ( button < 0 ) { \n \t5 handle <identifiersep> no <identifiersep> buttons ( cmd2 , a , msg ) ; \n \t4 } else { \n \t5 boolean is <identifiersep> on = is <identifiersep> led <identifiersep> lit ( cmd2 , button ) ; \n <ect>
private static event <identifiersep> queue <identifiersep> backing <identifiersep> store upgrade ( \n \t1 file checkpoint <identifiersep> file , int capacity , string name , file backup <identifiersep> checkpoint <identifiersep> dir , \n \t1 boolean should <identifiersep> backup , boolean compress <identifiersep> backup , file <identifiersep> channel <identifiersep> counter counter \n ) throws exception { \n <ect>
\t2 final consent <identifiersep> properties consent = cas <identifiersep> properties . get <identifiersep> consent ( ) ; \n \t2 final encryption <identifiersep> jwt <identifiersep> signing <identifiersep> jwt <identifiersep> cryptography <identifiersep> properties crypto = consent . get <identifiersep> crypto ( ) ; \n \t2 if ( crypto . is <identifiersep> enabled ( ) ) { \n \t3 return new attribute <identifiersep> release <identifiersep> consent <identifiersep> cipher <identifiersep> executor ( crypto . get <identifiersep> encryption ( ) . get <identifiersep> key ( ) , crypto . get <identifiersep> signing ( ) . get <identifiersep> key ( ) , crypto . get <identifiersep> alg ( ) ) ; } \n <ect>
\t2 if ( this . graph <identifiersep> builder . get <identifiersep> model <identifiersep> ids ( ) . contains ( model <identifiersep> id ) ) { \n \t3 <comment> \n \t3 <comment> \n \t3 <comment> \n <ect>
\t4 } else if ( x10flag == 0 ) { \n \t5 <comment> \n \t5 m <identifiersep> x10house <identifiersep> unit = raw <identifiersep> x10 & 0x <identifiersep> ff ; } \n \t3 } catch ( field <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public void prefix ( string prefix , string iri ) { \n \t2 try { pmap . add ( prefix , iri ) ; } \n \t2 catch ( riot <identifiersep> exception ex ) { \n <ect>
\t1 qs . set <identifiersep> attribute ( http <identifiersep> session . class . get <identifiersep> name ( ) , extern <identifiersep> sess <identifiersep> ref ) ; \n \t1 qs . add <identifiersep> session <identifiersep> end <identifiersep> listener ( new session <identifiersep> end <identifiersep> listener ( ) { \n \t2 @ override \n \t2 public void on <identifiersep> session <identifiersep> end ( final session <identifiersep> end <identifiersep> event event ) { \n <ect>
\t2 logger . debug ( <string_literal> , otp ) ; \n \t2 @ non <identifiersep> null \n \t2 final authentication authentication = web <identifiersep> utils . get <identifiersep> in <identifiersep> progress <identifiersep> authentication ( ) ; \n \t2 final string uid = authentication . get <identifiersep> principal ( ) . get <identifiersep> id ( ) ; \n <ect>
\t3 if ( init <identifiersep> blocking ) { \n \t4 logger . info ( <string_literal> ) ; \n \t4 unblock <identifiersep> node ( <string_literal> , internal <identifiersep> cluster ( ) . get <identifiersep> master <identifiersep> name ( ) ) ; \n \t3 } else { \n <ect>
\t1 void initialize <identifiersep> data <identifiersep> source ( ) throws exception { \n \t2 resource monitoring <identifiersep> dir = data <identifiersep> directory . get ( <string_literal> ) ; \n \t2 resource dbprops = monitoring <identifiersep> dir . get ( <string_literal> ) ; \n \t2 if ( resources . exists ( dbprops ) ) { \n <ect>
\t3 s <identifiersep> logger . trace ( <string_literal> + affected <identifiersep> vms . size ( ) + <string_literal> ) ; } \n \t2 boolean locked =  <identifiersep> work <identifiersep> lock . lock (  <identifiersep> global <identifiersep> work <identifiersep> lock <identifiersep> timeout ) ; \n \t2 if ( ! locked ) { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + host <identifiersep> tag <identifiersep> on <identifiersep> template ) ; } \n \t5 hosts <identifiersep> matching <identifiersep> template <identifiersep> tag =  <identifiersep> host <identifiersep> dao . list <identifiersep> by <identifiersep> host <identifiersep> tag ( type , cluster <identifiersep> id , pod <identifiersep> id , dc <identifiersep> id , host <identifiersep> tag <identifiersep> on <identifiersep> template ) ; \t1 \n <ect>
\t3 if ( sp <identifiersep> metadata . get <identifiersep> key <identifiersep> pair ( ) != null ) { \n \t4 private <identifiersep> key = sp <identifiersep> metadata . get <identifiersep> key <identifiersep> pair ( ) . get <identifiersep> private ( ) ; } \n \t3 redirect <identifiersep> url = idp <identifiersep> metadata . get <identifiersep> sso <identifiersep> url ( ) + <string_literal> + saml <identifiersep> utils . generate <identifiersep> saml <identifiersep> request <identifiersep> signature ( <string_literal> + saml <identifiersep> utils . encode <identifiersep> saml <identifiersep> request ( authn <identifiersep> request ) , private <identifiersep> key , signature <identifiersep> algorithm ) ; \n \t2 } catch ( configuration <identifiersep> exception | factory <identifiersep> configuration <identifiersep> error | marshalling <identifiersep> exception | io <identifiersep> exception | no <identifiersep> such <identifiersep> algorithm <identifiersep> exception | invalid <identifiersep> key <identifiersep> exception | java . security . signature <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public void handle <identifiersep> event ( z <identifiersep> wave <identifiersep> command <identifiersep> class <identifiersep> value <identifiersep> event event , item item , map < string , string > arguments ) { \n \t2 z <identifiersep> wave <identifiersep> state <identifiersep> converter < ? , ? > converter = this . get <identifiersep> state <identifiersep> converter ( item , event . get <identifiersep> value ( ) ) ; \n \t2 if ( converter == null ) { \n <ect>
\t3 if ( str != null ) { \n \t4 try { \n \t5 y = integer . parse <identifiersep> int ( str ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 fos . write ( data <identifiersep> helper . get <identifiersep> ascii ( dest ) ) ; \n \t3 fos . close ( ) ; \n \t3 return true ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public string get <identifiersep> service <identifiersep> endpoint <identifiersep> name ( string str <identifiersep> peer ) { \n \t2 try { \n \t3 init ( ) ; \n \t2 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t4 if ( current <identifiersep> path . ends <identifiersep> with ( migration <identifiersep> name ) ) { \n \t5 try { \n \t6 return new string ( bundle . bytes <identifiersep> for <identifiersep> resource <identifiersep> path ( current <identifiersep> path ) ,  <identifiersep> ns <identifiersep> string <identifiersep> utilities . utf8 <identifiersep> encoding ) ; } \n \t5 catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 <comment> \n \t2 synchronized ( names <identifiersep> lock ) { \n \t3 assert . assert <identifiersep> null ( names ) ; } \n <ect>
\t4 try { \n \t5 element = take <identifiersep> next ( this . queues . spill , cache ) ; } \n \t4 catch ( interrupted <identifiersep> exception iex ) { \n \t5 if ( is <identifiersep> running ( ) ) { \n <ect>
\t2 file root <identifiersep> dir = mary4zip . get <identifiersep> parent <identifiersep> file ( ) ; \n \t2 extracted <identifiersep> dir = new file ( root <identifiersep> dir , voice <identifiersep> description . get <identifiersep> name ( ) + <string_literal> + voice <identifiersep> description . get <identifiersep> version ( ) ) ; \n \t2 logger . debug ( <string_literal> + extracted <identifiersep> dir . get <identifiersep> path ( ) ) ; \n \t2 if ( extracted <identifiersep> dir . exists ( ) ) { \n <ect>
public string name ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key (  <identifiersep> department . name <identifiersep> key ) ; } \n public void set <identifiersep> name ( string value ) { \n <ect>
\t3 last <identifiersep> event <identifiersep> timestamp = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 is = port . get <identifiersep> input <identifiersep> stream ( ) ; \n \t3 int available = is . available ( ) ; \n \t3 if ( available == 0 ) { \n <ect>
\t1 assert <identifiersep> equals ( <number_literal> , index <identifiersep> records . size ( ) ) ; \n \t1 assert <identifiersep> equals ( <string_literal> , index <identifiersep> records . get ( 0 ) . get <identifiersep> key ( ) . to <identifiersep> string ( ) ) ; \n \t1 log . debug ( <string_literal> + index <identifiersep> records . get ( 0 ) . get <identifiersep> value ( ) ) ; \n \t1 assert <identifiersep> equals ( <string_literal> , index <identifiersep> records . get ( 1 ) . get <identifiersep> key ( ) . to <identifiersep> string ( ) ) ; \n <ect>
\t3 while ( st . has <identifiersep> more <identifiersep> tokens ( ) ) { \n \t4 try { \n \t5 put <identifiersep> extra ( st . next <identifiersep> token ( ) , st . next <identifiersep> token ( ) ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception nsee ) { \n <ect>
\t1 static { \n \t2 try { \n \t3 jmx <identifiersep> util . register <identifiersep> m <identifiersep> bean ( <string_literal> , <string_literal> , s <identifiersep> mbean ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 msg <identifiersep> producer2 . send ( ) ; \n \t2 subscribers [ ( subscribers . length - 1 ) ] . process ( ) ; \n \t2 <comment> \n \t2 for ( int j = 0 ; j < ( subscribers . length - 1 ) ; j ++ ) { \n <ect>
\t5 return null ; } \n \t4 module <identifiersep> util . expand <identifiersep> jar ( jar <identifiersep> file , folder , file <identifiersep> path , true ) ; \n \t4 return file . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ; } } \n \t2 catch ( io <identifiersep> exception io ) { \n <ect>
\t4 logger . error ( this , <string_literal> <string_literal> \\ <string_literal> ) ; \n \t4 return peer <identifiersep> addition <identifiersep> return <identifiersep> codes . wrong <identifiersep> encoding ; } \n \t3 fs . set <identifiersep> end <identifiersep> marker ( <string_literal> ) ; <comment> \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 string <identifiersep> builder node <identifiersep> str = new string <identifiersep> builder ( ) ; \n \t3 for ( node node : nodes ) { \n \t4 node <identifiersep> str . append ( node . get <identifiersep> id ( ) + <string_literal> ) ; } \n <ect>
\t6 try { \n \t7 server . stop ( ) ; \n \t7 log . info ( <string_literal> ) ; \n \t6 } catch ( exception e ) { \n <ect>
\t2 { \n \t3 otr <identifiersep> engine . get <identifiersep> session ( session <identifiersep> id ) . start <identifiersep> session ( ) ; } \n \t2 catch ( otr <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 return <string_literal> ; \n \t1 case 'z' : \n \t2 return <string_literal> ; \n \t1 default : \n <ect>
\t3 action <identifiersep> event <identifiersep> utils . start <identifiersep> nested <identifiersep> action <identifiersep> event ( event <identifiersep> types . event <identifiersep> ssvm <identifiersep> destroy , <string_literal> ) ; \n \t3 return destroy <identifiersep> secondary <identifiersep> storage <identifiersep> vm ( cmd . get <identifiersep> id ( ) ) ; } } \n \t1 private string sign <identifiersep> request ( final string request , final string key ) { \n \t2 try { \n <ect>
\t4 if ( value == error ) { \n \t5 return false ; } } \n \t3 catch ( expression <identifiersep> exception e ) { \n <ect>
\t2 set <identifiersep> html ( entity <identifiersep> utils . to <identifiersep> string ( entity ( ) ) ) ; \n \t2 } else { \n \t2 set <identifiersep> html ( entity <identifiersep> utils . to <identifiersep> string ( entity ( ) , receive <identifiersep> encoding ( ) ) ) ; } } } \n <ect>
\t6 source <identifiersep> aggregator . consumer . send ( next <identifiersep> bundle ) ; \n \t6 processed <identifiersep> bundle = true ; \n \t6 bundles <identifiersep> processed ++ ; \n \t5 } else if ( ! is <identifiersep> activated ( task <identifiersep> source ) && ! source <identifiersep> aggregator . query <identifiersep> promise . is <identifiersep> done ( ) ) { \n <ect>
\t4 . for <identifiersep> each ( c - > \n \t4 { \n \t5 if ( c . replacement ( ) . is <identifiersep> present ( ) ) \n \t5 { \n <ect>
<comment> \n \t1 @ override \n \t1 public void send <identifiersep> message ( message message , collection < user > users ) throws message <identifiersep> exception { \n <ect>
\t5 ( ( response <identifiersep> object ) obj ) . set <identifiersep> object <identifiersep> name ( name <identifiersep> field ) ; } \n \t4 return obj ; } \n \t3 return null ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t4 if ( value == null && param <identifiersep> type . is <identifiersep> primitive ( ) ) { \n \t5 value = get <identifiersep> primitive <identifiersep> default <identifiersep> value ( param <identifiersep> type ) ; } \n \t4 param <identifiersep> type = get <identifiersep> wrapper <identifiersep> type <identifiersep> if <identifiersep> primitive ( param <identifiersep> type ) ; } \n \t3 if ( value != null && ! param <identifiersep> type . is <identifiersep> instance ( value ) ) { \n <ect>
\t1 public void set <identifiersep> item <identifiersep> registry ( item <identifiersep> registry item <identifiersep> registry ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 this . item <identifiersep> registry = item <identifiersep> registry ; } \n \t1 public void unset <identifiersep> item <identifiersep> registry ( item <identifiersep> registry item <identifiersep> registry ) { \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t3 runnable . run ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 log . info ( <string_literal> ) ; } \n \t2 if ( early <identifiersep> shutdown ) { \n \t3 log . info ( <string_literal> ) ; } \n \t2 if ( skip <identifiersep> initialization ) { \n <ect>
\t3 if ( response instanceof access <identifiersep> accept ) { \n \t4 final list < radius <identifiersep> attribute > attributes = response . get <identifiersep> attributes ( ) . get <identifiersep> attribute <identifiersep> list ( ) ; \n \t4 logger . debug ( <string_literal> , response . get <identifiersep> code ( ) , attributes , response . get <identifiersep> identifier ( ) ) ; \n \t4 return new radius <identifiersep> response ( response . get <identifiersep> code ( ) , response . get <identifiersep> identifier ( ) , attributes ) ; } \n <ect>
\t1 public agent <identifiersep> control <identifiersep> answer on <identifiersep> console <identifiersep> access <identifiersep> authentication ( console <identifiersep> access <identifiersep> authentication <identifiersep> command cmd ) { \n \t2 long vm <identifiersep> id = null ; \n \t2 string ticket <identifiersep> in <identifiersep> url = cmd . get <identifiersep> ticket ( ) ; \n \t2 if ( ticket <identifiersep> in <identifiersep> url == null ) { \n <ect>
\t8 result . set <identifiersep> parse ( false ) ; \n \t8 try { \n \t9 result . execute ( inv ) ; \n \t8 } catch ( exception ex ) { \n <ect>
\t1 protected void blocking <identifiersep> handle ( i2p <identifiersep> socket socket ) { \n \t2 hash peer <identifiersep> hash = socket . get <identifiersep> peer <identifiersep> destination ( ) . calculate <identifiersep> hash ( ) ; \n \t2 string peer <identifiersep> b32 = socket . get <identifiersep> peer <identifiersep> destination ( ) . to <identifiersep> base32 ( ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t5 log . info ( <string_literal> ) ; \n \t5 see . execute ( <string_literal> ) ; \n \t5 log . info ( <string_literal> ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t5 node . get <identifiersep> node <identifiersep> id ( ) , item . get <identifiersep> name ( ) , command . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , endpoint <identifiersep> id ) ; \n \t3 return ; } \n \t2 string parm <identifiersep> number = arguments . get ( <string_literal> ) ; \n \t2 if ( parm <identifiersep> number == null ) { \n <ect>
\t4 this . load <identifiersep> events ( filename , last <identifiersep> resource <identifiersep> change <identifiersep> fs , input <identifiersep> stream , config , old <identifiersep> event <identifiersep> ids , false ) ; \n \t3 } catch ( parser <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> , filename , e ) ; \n \t3 } catch ( sardine <identifiersep> exception e ) { \n <ect>
\t6 <comment> \n \t6 timeseek = dlna . get <identifiersep> resume ( ) . get <identifiersep> time <identifiersep> offset ( ) / ( double ) <number_literal> ; } \n \t5 if ( input <identifiersep> stream == null ) { \n \t6 <comment> \n <ect>
\t2 try { \n \t3 channel . send <identifiersep> response ( new bytes <identifiersep> rest <identifiersep> response ( channel , e ) ) ; \n \t2 } catch ( exception inner ) { \n \t3 inner . add <identifiersep> suppressed ( e ) ; \n <ect>
\t4 new <identifiersep> vol = live <identifiersep> migrate <identifiersep> volume ( vol , dest <identifiersep> pool ) ; \n \t3 } else { \n \t4 new <identifiersep> vol =  <identifiersep> volume <identifiersep> mgr . migrate <identifiersep> volume ( vol , dest <identifiersep> pool ) ; } \n \t2 } catch ( storage <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t2 } catch ( interrupted <identifiersep> exception ex ) { \n \t3 <comment> \n \t2 send <identifiersep> retry <identifiersep> signal = true ; \n \t2 } else { \n <ect>
\t4 rwe <identifiersep> smarthome <identifiersep> session . get <identifiersep> session <identifiersep> id ( ) , rwe <identifiersep> smarthome <identifiersep> session . get <identifiersep> current <identifiersep> configuration <identifiersep> version ( ) , device <identifiersep> id , \n \t4 new <identifiersep> value ) ; \n \t2 string response = rwe <identifiersep> smarthome <identifiersep> session . execute <identifiersep> request ( change <identifiersep> rollershutter <identifiersep> state <identifiersep> request , <string_literal> ) ; \n \t2 if ( ! response . contains ( <string_literal> ok \\ <string_literal> ) ) { \n <ect>
\t2 for ( s s : source ) { \n \t3 try { \n \t4 result . add ( adapter . adapt ( s ) ) ; \n \t3 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t4 system . gc ( ) ; <comment> \n \t3 <comment> \n \t3 logger . info ( <string_literal> + csv <identifiersep> file <identifiersep> path ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 stmt . close ( ) ; } \n \t2 if ( rs != null ) { \n \t2 rs . close ( ) ; } \n \t1 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t3 object handler = method . invoke ( content ) ; \n \t3 method = handler . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> ) ; \n \t3 return ( url ) method . invoke ( handler ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t2 annotation [ ] annotations = response <identifiersep> get <identifiersep> annotations <identifiersep> annotated <identifiersep> class . class . get <identifiersep> annotations ( ) ; \n \t2 int size = string . value <identifiersep> of ( long . max <identifiersep> value ) . length ( ) + splitter . length ( ) \n \t4 + annotations [ 0 ] . annotation <identifiersep> type ( ) . get <identifiersep> name ( ) . length ( ) \n \t4 + annotations [ 1 ] . annotation <identifiersep> type ( ) . get <identifiersep> name ( ) . length ( ) ; \n <ect>
\t6 <comment> \n \t6 while ( ! ( end <identifiersep> of <identifiersep> loop = sample <identifiersep> result == final <identifiersep> sample <identifiersep> result ) && sample <identifiersep> result != null ) { \n \t7 sample <identifiersep> results . add ( sample <identifiersep> result ) ; \n <ect>
\t9 get <identifiersep> factory ( ) \n \t7 ) , \n \t5 get <identifiersep> sql <identifiersep> string ( ) \n \t3 ) ; } \n <ect>
\t4 row <identifiersep> count ++ ; } \n \t3 assert . assert <identifiersep> equals ( 1 , row <identifiersep> count ) ; \n \t3 count ++ ; } \n \t2 assert . assert <identifiersep> equals ( test <identifiersep> row <identifiersep> count , count ) ; \n <ect>
\t1 } else { \n \t1 companion <identifiersep> state . player <identifiersep> id1 = some ( hero <identifiersep> chosen . player ) \n \t1 update <identifiersep> match (  <identifiersep>  . with <identifiersep> user <identifiersep> class ( new <identifiersep> class ) ) \n \t1 hs <identifiersep> presenter . set <identifiersep> your <identifiersep> class ( new <identifiersep> class ) \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 <comment> \n \t5 this . status = icq <identifiersep> status <identifiersep> enum . offline ; \n <ect>
\t4 configuration default <identifiersep> conf = new x <identifiersep> configuration ( fs . open ( config <identifiersep> default ) ) ; \n \t4 properties <identifiersep> utils . check <identifiersep> disallowed <identifiersep> properties ( default <identifiersep> conf , disallowed <identifiersep> default <identifiersep> properties ) ; \n \t4 x <identifiersep> configuration . inject <identifiersep> defaults ( default <identifiersep> conf , conf ) ; } \n \t3 else { \n <ect>
\t1 except component <identifiersep> is <identifiersep> not <identifiersep> running , e : \n \t2 logger . logger . debug ( <string_literal> ) \n \t2 component <identifiersep> is <identifiersep> stopped = true \n \t1 except client <identifiersep> component <identifiersep> has <identifiersep> no <identifiersep> status , e : \n <ect>
\t3 try { \n \t4 context . mb . execute ( ) ; \n \t4 context . counter = 0 ; } \n \t3 catch ( exception e ) { \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name + <string_literal> + repl <identifiersep> dump <identifiersep> id , driver ) ; \n \t1 string incremental <identifiersep> dump <identifiersep> locn = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 string incremental <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t2 sb . append ( <string_literal> camel . dataformat . customizer \\ <string_literal> ) ; \n \t2 sb . append ( <string_literal> camel . dataformat . <string_literal> . customizer \\ <string_literal> ) ; \n \t2 sb . append ( <string_literal> ) ; \n \t2 sb . append ( <string_literal> ) ; \n <ect>
\t2 return ; \n \t1 if ( guest . get <identifiersep> billing <identifiersep> item <identifiersep> id ( ) == - 1 ) \n \t2 throw new illegal <identifiersep> state <identifiersep> exception ( string . format ( <string_literal> , \n \t3 id ) ) ; \n <ect>
\t1 public roll ( string mapped <identifiersep> uri ) { \n \t2 super ( mapped <identifiersep> uri ) ; } \n \t1 @ override \n \t1 public response safe <identifiersep> handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n <ect>
\t3 file [ ] files = download <identifiersep> dir . list <identifiersep> files ( ) ; \n \t3 for ( file file : files ) { \n \t4 if ( file . last <identifiersep> modified ( ) < now . get <identifiersep> time <identifiersep> in <identifiersep> millis ( ) ) { \n \t5 if ( ! file . delete ( ) ) { \n <ect>
\t1 } finally { \n \t1 io <identifiersep> utils . quiet <identifiersep> close ( rs , stmt , conn ) ; } } \n @ override \n public float get <identifiersep> preference <identifiersep> value ( long user <identifiersep> id , long item <identifiersep> id ) throws taste <identifiersep> exception { \n <ect>
\t4 try { \n \t5 <comment> \n \t5 send <identifiersep> messages ( true , <string_literal> , 1 , 0 ) ; \n \t4 } catch ( exception expected ) { \n <ect>
\t7 continue ; } \n \t5 } else { \n \t6 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t4 } else { \n <ect>
\t5 default : \n \t6 break ; } \n \t4 ; \n \t3 } else { \n <ect>
\t4 tunnel <identifiersep> controller controller =  <identifiersep> controllers . get ( i ) ; \n \t4 controller . start <identifiersep> tunnel <identifiersep> background ( ) ; \n \t4 msgs . add <identifiersep> all ( controller . clear <identifiersep> messages ( ) ) ; } \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 @ override \n \t1 public void property <identifiersep> changed ( final property <identifiersep> state before , final property <identifiersep> state after ) throws commit <identifiersep> failed <identifiersep> exception { \n \t2 if ( jcr <identifiersep> primarytype . equals ( after . get <identifiersep> name ( ) ) ) { \n \t3 string node <identifiersep> type = after . get <identifiersep> value ( type . string ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
<comment> \n \t2 public static < t extends erx <identifiersep> copyable < t > > void deep <identifiersep> copy <identifiersep> class <identifiersep> relationships ( ns <identifiersep> mutable <identifiersep> dictionary < eo <identifiersep> global <identifiersep> id , erx <identifiersep> copyable < ? > > copied <identifiersep> objects , t source , t destination ) { \n <ect>
\t1 public static void tear <identifiersep> down <identifiersep> after <identifiersep> class ( ) throws exception { \n \t2  <identifiersep> handle . close ( ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> in <identifiersep> order ( ) throws exception { \n <ect>
\t2 logger . info ( <string_literal> , repo . to <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t2 assert <identifiersep> acked ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> put <identifiersep> repository ( <string_literal> ) . set <identifiersep> type ( <string_literal> ) . set <identifiersep> settings ( \n \t3 settings . builder ( ) . put ( <string_literal> , repo ) . put ( <string_literal> , false ) ) ) ; \n \t2 create <identifiersep> index ( <string_literal> , <string_literal> ) ; \n <ect>
\t2 { \n \t3 node person <identifiersep> node = person <identifiersep> list . item ( 0 ) ; \n \t3 if ( person <identifiersep> node . get <identifiersep> node <identifiersep> type ( ) != node . element <identifiersep> node ) \n \t3 { \n <ect>
\t2 int iterations = 0 ; \n \t2 while ( ! queue . is <identifiersep> empty ( ) ) { \n \t3 iterations ++ ; \n \t3 if ( iterations > max <identifiersep> iterations ) { \n <ect>
\t3 sink <identifiersep> op = get <identifiersep> optimized <identifiersep> hive <identifiersep> op <identifiersep> dag ( ) ; \n \t3 if ( old <identifiersep> hints . size ( ) > 0 ) { \n \t3 log . debug ( <string_literal> + old <identifiersep> hints ) ; \n \t3 get <identifiersep> qb ( ) . get <identifiersep> parse <identifiersep> info ( ) . set <identifiersep> hint <identifiersep> list ( old <identifiersep> hints ) ; } \n <ect>
\t3 router <identifiersep> info info = ( router <identifiersep> info ) dbe ; \n \t3 if ( info . is <identifiersep> current ( expire <identifiersep> delay ) ) { \n \t4 if ( ( info . is <identifiersep> hidden ( ) ) || ( is <identifiersep> unreachable ( info ) && ! publish <identifiersep> unreachable ( ) ) ) { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 if ( zk <identifiersep> cluster <identifiersep> state . node <identifiersep> existed ( assignment <identifiersep> path , false ) ) { \n \t4 try { \n \t5 zk <identifiersep> cluster <identifiersep> state . delete <identifiersep> node ( assignment <identifiersep> path ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 try { \n \t2 structured <identifiersep> output = gson . from <identifiersep> json ( event . get <identifiersep> command <identifiersep> report ( ) . get <identifiersep> structured <identifiersep> out ( ) , \n \t3 distribute <identifiersep> repositories <identifiersep> structured <identifiersep> output . class ) ; \n \t1 } catch ( json <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t1 { \n \t2 try { \n \t3 return create <identifiersep> attachment <identifiersep> url ( filename , spaces , name , xwikidb , context ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 long d = wrapper . get <identifiersep> item ( ) . get <identifiersep> deadline ( ) ; \n \t6 if ( d > 0 ) \n \t7 ret = math . min ( ret , d ) ; \n \t6 else \n <ect>
\t2 log = ggfs <identifiersep> ctx . kernal <identifiersep> context ( ) . log ( grid <identifiersep> ggfs <identifiersep> delete <identifiersep> worker . class ) ; } \n \t1 <comment> \n \t1 @ override protected void body ( ) throws interrupted <identifiersep> exception { \n <ect>
\t4 props . load ( finputstream ) ; \n \t4 finputstream . close ( ) ; \n \t4 config <identifiersep> file = props . get <identifiersep> property ( <string_literal> ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 es <identifiersep> settings . put ( <string_literal> , true ) ; \n \t2 arrays . stream ( config . get <identifiersep> string <identifiersep> array ( cluster <identifiersep> search <identifiersep> hosts . get <identifiersep> key ( ) ) ) \n \t2 . map ( host <identifiersep> and <identifiersep> port : : from <identifiersep> string ) \n \t2 . for <identifiersep> each ( h - > add <identifiersep> host <identifiersep> to <identifiersep> client ( h , native <identifiersep> client ) ) ; \n <ect>
\t4 if ( out <identifiersep> stream != null ) { \n \t5 try { \n \t6 out <identifiersep> stream . close ( ) ; \n \t5 } catch ( throwable throwable ) { \n <ect>
\t3 if ( return <identifiersep> item != null ) { \n \t4 final ticket ticket = deserialize <identifiersep> ticket ( return <identifiersep> item ) ; \n \t4 logger . debug ( <string_literal> , ticket ) ; \n \t4 if ( ticket == null || ticket . is <identifiersep> expired ( ) ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 log <identifiersep> error ( <string_literal> + e , e ) ; } } \n \t1 protected void log <identifiersep> error ( string message , throwable e ) { \n \t2 if ( use <identifiersep> logging <identifiersep> for <identifiersep> shutdown <identifiersep> errors ) { \n <ect>
\t3 return ; \n \t2 if ( file != null ) { \n \t3 <comment> \n \t3 if ( file . get <identifiersep> parent <identifiersep> file ( ) == null ) { \n <ect>
\t1 final uri source <identifiersep> directory <identifiersep> uri = source <identifiersep> directory . to <identifiersep> uri ( ) ; \n \t1 final file output <identifiersep> directory = new file ( directory <identifiersep> args [ 1 ] ) ; \n \t1 if ( output <identifiersep> directory . exists ( ) && ! source <identifiersep> directory . is <identifiersep> directory ( ) ) \n \t1 { \n <ect>
\t4 string name = rs . get <identifiersep> string ( <string_literal> ) . to <identifiersep> upper <identifiersep> case ( ) ; \n \t4 int size = rs . get <identifiersep> int ( <string_literal> ) ; \n \t4 data <identifiersep> type result = db . vendor ( ) . get <identifiersep> data <identifiersep> type ( type , name , size ) ; \n \t4 if ( result == null ) { \n <ect>
\t2 try { \n \t3 while ( 0 < input <identifiersep> stream . available ( ) ) { \n \t4 available <identifiersep> input . append ( ( char ) input <identifiersep> stream . read ( ) ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 throw new not <identifiersep> found <identifiersep> formatted <identifiersep> exception ( <string_literal> + job <identifiersep> id + <string_literal> , null ) ; \n \t1 get <identifiersep> resource <identifiersep> manager ( ) . retrieve <identifiersep> job <identifiersep> status ( job ) ; \n \t1 return response . ok ( ) . build ( ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
\t3 if ( sock != null && sock . is <identifiersep> connected ( ) ) { \n \t4 if ( alive <identifiersep> check ) { \n \t5 if ( ! sock . is <identifiersep> alive ( ) ) { \n \t6 sock . close ( ) ; \n <ect>
\t1 @ nullable \n \t1 protected user <identifiersep> transaction retrieve <identifiersep> user <identifiersep> transaction ( ) throws transaction <identifiersep> system <identifiersep> exception { \n \t2 object helper = load <identifiersep> web <identifiersep> logic <identifiersep> transaction <identifiersep> helper ( ) ; \n \t2 try { \n <ect>
@ subscribe \n public void ambari <identifiersep> ldap <identifiersep> config <identifiersep> changed ( ambari <identifiersep> configuration <identifiersep> changed <identifiersep> event event ) { \n \t1 logger . info ( <string_literal> , event ) ; \n \t1 load <identifiersep> instance ( ) ; \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t3 listen ( ) ; \n \t2 } catch ( exception x ) { \n <ect>
\t1 public void add <identifiersep> table ( text table <identifiersep> name ) throws accumulo <identifiersep> exception , accumulo <identifiersep> security <identifiersep> exception { \n \t1 if ( simulate ) { \n \t2 log . info ( <string_literal> + table <identifiersep> name ) ; \n \t2 return ; } \n <ect>
\t3 time <identifiersep> unit . milliseconds ) ) { \n \t3 logger . warn ( this + <string_literal> + \n \t4 <string_literal> ) ; } } \n \t1 } catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t4 proc . output ( out ) ; \n \t4 out . flush ( ) ; \n \t3 } catch ( query <identifiersep> cancelled <identifiersep> exception ex ) { \n \t4 <comment> \n <ect>
\t4 result = visit <identifiersep> call <identifiersep> arguments ( call ) ; } \n \t3 turn <identifiersep> off <identifiersep> visit <identifiersep> children ( ) ; \n \t3 return result ; } \n \t2 private object replace <identifiersep> level <identifiersep> members <identifiersep> references ( resolved <identifiersep> fun <identifiersep> call call ) { \n <ect>
\t7 break ; \n \t6 default : \n \t7 throw new io <identifiersep> exception ( <string_literal> + command . get <identifiersep> type ( ) ) ; } \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 } else { \n \t2 log . debug ( <string_literal> + old <identifiersep> name + <string_literal> ) ; } \n \t2 return boolean . true ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 f = null ; } \n \t2 string [ ] wrapped <identifiersep> cmd <identifiersep> args = add <identifiersep> wrapper ( cmd <identifiersep> args ) ; \n \t2 log . info ( <string_literal> + arrays . as <identifiersep> list ( wrapped <identifiersep> cmd <identifiersep> args ) ) ; \n <ect>
\t2 return new job <identifiersep> progress <identifiersep> update ( progress <identifiersep> monitor . null ) ; } \n \t2 thread . sleep ( math . min ( remaining <identifiersep> ms , time <identifiersep> out <identifiersep> ms ) ) ; \n \t2 time <identifiersep> out <identifiersep> ms < < = 1 ; } \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 byte msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply ; \n \t3 org . apache . thrift . t <identifiersep> serializable msg ; \n \t3 get <identifiersep> following <identifiersep> result result = new get <identifiersep> following <identifiersep> result ( ) ; \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t5 <comment> \n \t5 try { \n \t6 i2cp <identifiersep> message msg = i2cp <identifiersep> message <identifiersep> handler . read <identifiersep> message (  <identifiersep> stream ) ; \n \t6 if ( msg != null ) { \n <ect>
\t6 ontology <identifiersep> manager . get <identifiersep> uri <identifiersep> label ( c ) ) ; \n \t4 if ( add <identifiersep> node ( nn ) ) new <identifiersep> added <identifiersep> nodes . add ( nn ) ; } } \n \t2 logger . debug ( <string_literal> ) ; } \n \t1 private void update <identifiersep> links ( ) { \n <ect>
\t5 return null ; } \n \t4 object = device . service <identifiersep> map . get ( service ) ; \n \t4 type = object . get <identifiersep> service <identifiersep> type ( ) ; \n \t3 } else { \n <ect>
\t6 } else { \n \t7 s <identifiersep> logger . warn ( <string_literal> + router . get <identifiersep> host <identifiersep> name ( ) ) ; \n \t7 continue ; } \n \t6 if ( ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t8 <comment> \n \t6 } else { \n \t7 channel . close ( ) ; } } \n \t4 } catch ( throwable t ) { \n <ect>
\t1 private void locked <identifiersep> run <identifiersep> test ( boolean is <identifiersep> i <identifiersep> pv6 ) { \n \t2 peer <identifiersep> state bob =  <identifiersep> transport . pick <identifiersep> test <identifiersep> peer ( bob , is <identifiersep> i <identifiersep> pv6 , null ) ; \n \t2 if ( bob != null ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 if ( result == null ) { \n \t4 continue ; } \n \t3 return result ; } \n <ect>
\t8 if ( ++ attempt < = <number_literal> ) { \n \t9 log . info ( <string_literal> ) ; \n \t9 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } } \n \t7 exchange . get <identifiersep> in ( ) . set <identifiersep> body ( <string_literal> + body ) ; \n <ect>
\t6 time <identifiersep> unit . milliseconds ) ; \n \t4 assert . assert <identifiersep> not <identifiersep> null ( <string_literal> + event <identifiersep> type , event ) ; \n \t4 assert . assert <identifiersep> equals ( event <identifiersep> type , event . get <identifiersep> type ( ) ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 public void clear ( ) throws exception { \n \t2 if ( repeat <identifiersep> processor . is <identifiersep> finalizing ( ) ) { \n \t3 <comment> \n \t3 thread . sleep ( 300l ) ; \n <ect>
\t2 if ( data <identifiersep> output <identifiersep> stream != null ) { \n \t3 try { \n \t4 data <identifiersep> output <identifiersep> stream . write ( end ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
private immutable <identifiersep> map < string , long > dump <identifiersep> meta <identifiersep> call <identifiersep> timing <identifiersep> without <identifiersep> ex ( string phase ) { \n \t1 try { \n \t1 return hive . get ( ) . dump <identifiersep> and <identifiersep> clear <identifiersep> meta <identifiersep> call <identifiersep> timing ( phase ) ; \n \t1 } catch ( hive <identifiersep> exception he ) { \n <ect>
\t2 bp <identifiersep> tree <identifiersep> page z = y . split ( ) ; \n \t2 if ( logging ) \n \t2 { \n \t3 log . debug ( format ( <string_literal> , y ) ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 message message = subscriber . receive ( <number_literal> ) ; \n \t2 subscriber . close ( ) ; \n \t2 connection . close ( ) ; \n <ect>
\t4 <comment> \n \t4 if (  <identifiersep> tmplt <identifiersep> pool <identifiersep> dao . remove ( template <identifiersep> pool <identifiersep> vo . get <identifiersep> id ( ) ) ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + template . get <identifiersep> name ( ) + <string_literal> + pool . get <identifiersep> name ( ) ) ; } \n \t3 } else { \n <ect>
\t2 { \n \t3 policy = expiration <identifiersep> date <identifiersep> overflow <identifiersep> policy . value <identifiersep> of ( policy <identifiersep> as <identifiersep> string . to <identifiersep> upper <identifiersep> case ( ) ) ; } \n \t2 catch ( runtime <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 if ( str <identifiersep> exp <identifiersep> day != null ) \n \t2 expiration <identifiersep> days = integer . parse <identifiersep> int ( str <identifiersep> exp <identifiersep> day ) ; \n \t1 payload = special <identifiersep> data . get <identifiersep> payload ( ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t1 if ( null != r ) { \n \t2 try { \n \t2 r . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 if ( input != null && input . starts <identifiersep> with ( enc ) ) { \n \t1 try { \n \t2 return password <identifiersep> service . decrypt ( input . substring ( <number_literal> ) ) ; \n \t1 } catch ( password <identifiersep> service <identifiersep> exception e ) { \n <ect>
\t3 configuration configuration = global <identifiersep> configuration . load <identifiersep> configuration ( config <identifiersep> directory . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 try { \n \t4 file yarn <identifiersep> properties <identifiersep> file = flink <identifiersep> yarn <identifiersep> session <identifiersep> cli . get <identifiersep> yarn <identifiersep> properties <identifiersep> location ( configuration . get <identifiersep> string ( yarn <identifiersep> config <identifiersep> options . properties <identifiersep> file <identifiersep> location ) ) ; \n \t4 if ( yarn <identifiersep> properties <identifiersep> file . exists ( ) ) { \n <ect>
\t2 if ( t . element <identifiersep> at ( 1 ) instanceof otp <identifiersep> erlang <identifiersep> list ) { \n \t3 final otp <identifiersep> erlang <identifiersep> list l = ( otp <identifiersep> erlang <identifiersep> list ) t . element <identifiersep> at ( 1 ) ; \n \t3 marker <identifiersep> utils . add <identifiersep> error <identifiersep> markers ( source , l ) ; \n \t2 } else { \n <ect>
\t3 if ( is <identifiersep> valid <identifiersep> container <identifiersep> name ( container ) && is <identifiersep> valid <identifiersep> object <identifiersep> name ( obj <identifiersep> name ) ) \n \t3 { \n \t4 if ( obj <identifiersep> name . length ( ) > files <identifiersep> constants . object <identifiersep> name <identifiersep> length ) \n \t4 { \n <ect>
\t1 if ( retry <identifiersep> count >= op <identifiersep> max <identifiersep> retry && ! tgt <identifiersep> service . target <identifiersep> has <identifiersep> lun ( volume <identifiersep> id , tid , lun , timeout ) ) { \n \t2 log . info ( <string_literal> + volume <identifiersep> id + <string_literal> + tid ) ; \n \t2 tgt <identifiersep> service . delete <identifiersep> target ( volume <identifiersep> id , tid , timeout , true ) ; \n \t2 if ( tgt <identifiersep> service . target <identifiersep> exists ( volume <identifiersep> id , tid , null , timeout ) ) { \n <ect>
\t3 channel channel = pool . borrow <identifiersep> object ( ) ; \n \t3 pool . return <identifiersep> object ( channel ) ; } } \n \t1 @ override \n \t1 protected void do <identifiersep> stop ( ) throws exception { \n <ect>
\t5 signature <identifiersep> validator validator = new signature <identifiersep> validator ( credential ) ; \n \t5 try { \n \t6 validator . validate ( sig ) ; \n \t5 } catch ( validation <identifiersep> exception e ) { \n <ect>
\t3 log . info ( <string_literal> + alpha , name , p ) ; \n \t2 } else { \n \t3 log . error ( <string_literal> + alpha , name , p ) ; } \n \t2 log . info ( <string_literal> , trials , successes ) ; \n <ect>
else : \n \t1 # since python is subprocess , env variables are exported back via file \n \t1 with open ( <string_literal> , <string_literal> ) as export <identifiersep> var : \n \t2 export <identifiersep> var . write ( <string_literal> ) \n <ect>
\t3 try { \n \t4 length = directory . file <identifiersep> length ( file ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> file <identifiersep> exception | file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 final directory final <identifiersep> directory = directory ; \n <ect>
\t7 string full <identifiersep> display <identifiersep> name = job . get <identifiersep> full <identifiersep> display <identifiersep> name ( ) ; \n \t7 logger . debug ( <string_literal> , full <identifiersep> display <identifiersep> name ) ; \n \t7 if ( git <identifiersep> hub <identifiersep> repository <identifiersep> name <identifiersep> contributor . parse <identifiersep> associated <identifiersep> names ( job ) \n \t9 . contains ( changed <identifiersep> repository ) ) { \n <ect>
\t2 if ( ! keep <identifiersep> flushing ) \n \t3 out . flush ( ) ; \n \t2 final double time <identifiersep> seconds = ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ) / <number_literal> . 0 ; \n \t2 final double size <identifiersep> ki <identifiersep> b = count / <number_literal> . 0 ; \n <ect>
\t1 rs = stmt . execute <identifiersep> query ( s ) ; \n \t1 if ( ! rs . next ( ) ) { \n \t2 return null ; } \n \t1 lock <identifiersep> info info = new lock <identifiersep> info ( rs ) ; \n <ect>
\t4 logger . debug ( <string_literal> , min , \n \t6 new <identifiersep> position ) ; \n \t4 new <identifiersep> position = min ; \n \t3 } else { \n <ect>
\t2 status status ; \n \t2 try { \n \t2 status = status . parse <identifiersep> from ( entry . get <identifiersep> value ( ) . get ( ) ) ; \n \t2 } catch ( invalid <identifiersep> protocol <identifiersep> buffer <identifiersep> exception e ) { \n <ect>
\t2  <identifiersep> log . debug ( <string_literal> ) ; \n \t2 test <identifiersep> dest ( host , port , con <identifiersep> options , dest <identifiersep> name ) ; \n \t2  <identifiersep> log . debug ( <string_literal> ) ; } \n \t1 private static void test <identifiersep> dest ( string host , int port , string con <identifiersep> options , string dest <identifiersep> name ) { \n <ect>
\t4 run <identifiersep> on <identifiersep> main <identifiersep> thread ( runnable { \n \t5 loading <identifiersep> overlay = show <identifiersep> loading <identifiersep> overlay ( act , loading <identifiersep> overlay , false ) \n \t4 } ) \n \t3 } ? : return @ runnable \n <ect>
\t3 if (  <identifiersep> id == null ) { \n \t4  <identifiersep> id = util . get <identifiersep> digest <identifiersep> of ( \n \t6 new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( instance <identifiersep> identity . get ( ) . get <identifiersep> public ( ) . get <identifiersep> encoded ( ) ) ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 log . warn ( <string_literal> + e . get <identifiersep> message ( ) ) ; } } \n \t3 } . start ( ) ; \n \t3 sending <identifiersep> thread <identifiersep> started = true ; \n \t2 } else { \n <ect>
\t10 && extension <identifiersep> loader . get <identifiersep> extension <identifiersep> loader ( protocol . class ) . has <identifiersep> extension ( value ) \n \t10 && ( ! parser <identifiersep> context . get <identifiersep> registry ( ) . contains <identifiersep> bean <identifiersep> definition ( value ) \n \t10 || ! protocol <identifiersep> config . class . get <identifiersep> name ( ) . equals ( parser <identifiersep> context . get <identifiersep> registry ( ) . get <identifiersep> bean <identifiersep> definition ( value ) . get <identifiersep> bean <identifiersep> class <identifiersep> name ( ) ) ) ) { \n \t9 if ( <string_literal> . equals ( element . get <identifiersep> tag <identifiersep> name ( ) ) ) { \n <ect>
<comment> \n \t1 protected void evaluate <identifiersep> proxied <identifiersep> service <identifiersep> if <identifiersep> needed ( final service service , final ticket <identifiersep> granting <identifiersep> ticket ticket <identifiersep> granting <identifiersep> ticket , final registered <identifiersep> service registered <identifiersep> service ) { \n \t2 final service proxied <identifiersep> by = ticket <identifiersep> granting <identifiersep> ticket . get <identifiersep> proxied <identifiersep> by ( ) ; \n \t2 if ( proxied <identifiersep> by != null ) { \n <ect>
\t4 if ( flocat != null ) { \n \t5 return flocat . get <identifiersep> attribute <identifiersep> value ( <string_literal> , xlink <identifiersep> ns ) ; } } \n \t3 return null ; \n \t2 } catch ( jdom <identifiersep> exception je ) { \n <ect>
\t2 try { \n \t3 if ( ! expr . is <identifiersep> empty ( ) ) { \n \t4 new cron <identifiersep> expression ( expr ) ; } \n \t2 } catch ( parse <identifiersep> exception e ) { \n <ect>
\t3 revoke <identifiersep> port <identifiersep> forwarding <identifiersep> rule <identifiersep> internal ( rule . get <identifiersep> id ( ) ,  <identifiersep> account <identifiersep> mgr . get <identifiersep> system <identifiersep> account ( ) , account . account <identifiersep> id <identifiersep> system , false ) ; \n \t3 ips <identifiersep> to <identifiersep> reprogram . add ( rule . get <identifiersep> source <identifiersep> ip <identifiersep> address <identifiersep> id ( ) ) ; } \n \t2 <comment> \n \t2 for ( long ip <identifiersep> id : ips <identifiersep> to <identifiersep> reprogram ) { \n <ect>
\t2 warn <identifiersep> log . debug ( <string_literal> ) ; \n \t2 info <identifiersep> log = logger . get <identifiersep> logger ( <string_literal> ) ; \n \t2 info <identifiersep> log . set <identifiersep> level ( level . info ) ; \n \t2 info <identifiersep> log . warn ( <string_literal> ) ; \n <ect>
\t5 <string_literal> ) ; \n \t4 try { \n \t5 this . group <identifiersep> service = ( x <identifiersep> wiki <identifiersep> group <identifiersep> service ) class . for <identifiersep> name ( group <identifiersep> class ) . new <identifiersep> instance ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 else if ( false \n \t6 || value . equals ( <string_literal> ) \n \t4 ) { \n \t5 if ( field <identifiersep> type <identifiersep> mismatches != 0 && field <identifiersep> type <identifiersep> mismatches != field <identifiersep> type <identifiersep> mismatches <identifiersep> fail ) { \n <ect>
\t1 set <identifiersep> long <identifiersep> parameter ( stmt2 , <number_literal> , item <identifiersep> id ) ; \n \t1 log . debug ( <string_literal> , get <identifiersep> update <identifiersep> preference <identifiersep> sql ( ) ) ; \n \t1 stmt2 . execute <identifiersep> update ( ) ; \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n <ect>
public record <identifiersep> reader rows ( ) throws io <identifiersep> exception { \n \t1 return rows <identifiersep> options ( new options ( ) ) ; } \n @ override \n public record <identifiersep> reader rows <identifiersep> options ( options options ) throws io <identifiersep> exception { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 boolean done = false ; \n \t2 gregorian <identifiersep> calendar cal = new gregorian <identifiersep> calendar ( ) ; \n \t2 if ( cal . get ( calendar . year ) >= <number_literal> ) { \n <ect>
\t2 int num <identifiersep> initial <identifiersep> docs = 0 ; \n \t2 if ( create <identifiersep> index <identifiersep> without <identifiersep> errors ) { \n \t3 settings . builder settings = settings . builder ( ) \n \t4 . put ( <string_literal> , number <identifiersep> of <identifiersep> replicas ( ) ) ; \n <ect>
\t6  <identifiersep> util . get <identifiersep> context ( ) . clock ( ) . now ( ) >  <identifiersep> started <identifiersep> on + <number_literal> * <number_literal> * <number_literal> && \n \t6 snark . get <identifiersep> total <identifiersep> length ( ) > 0 && \n \t6 uploaded >= snark . get <identifiersep> total <identifiersep> length ( ) / <number_literal> ) { \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 invocation . set <identifiersep> input ( <string_literal> , new unsigned <identifiersep> integer <identifiersep> four <identifiersep> bytes ( start <identifiersep> at ) ) ; \n \t5 invocation . set <identifiersep> input ( <string_literal> , new unsigned <identifiersep> integer <identifiersep> four <identifiersep> bytes ( <number_literal> ) ) ; \n \t5 invocation . set <identifiersep> input ( <string_literal> , <string_literal> ) ; \n \t4 } catch ( invalid <identifiersep> value <identifiersep> exception ex ) { \n <ect>
\t5 else { \n \t6 if ( update <identifiersep> seq ) \n \t7 this . update <identifiersep> seq . increment <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t1 try { \n \t1 <comment> \n \t1 this . cur <identifiersep> reader = this . h <identifiersep> cat <identifiersep> export <identifiersep> format . create <identifiersep> h <identifiersep> cat <identifiersep> record <identifiersep> reader ( \n \t2 this . h <identifiersep> cat <identifiersep> split . get ( this . sub <identifiersep> index ) , this . context ) ; \n <ect>
\t2 try { \n \t3  <identifiersep> context . net <identifiersep> db ( ) . publish ( message . get <identifiersep> lease <identifiersep> set ( ) ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t2 node result = null ; \n \t2 try { \n \t3 result = x <identifiersep> path <identifiersep> api . select <identifiersep> single <identifiersep> node ( xml , node <identifiersep> list <identifiersep> x <identifiersep> path ) ; \n \t2 } catch ( transformer <identifiersep> exception e ) { \n <ect>
\t6 if ( digest != null && testsum == null ) { \n \t7 testsum = get <identifiersep> file <identifiersep> digest ( plugin <identifiersep> file , <string_literal> ) ; } \n \t6 if ( digest != null ) { \n \t7 if ( ! ( digest . equals <identifiersep> ignore <identifiersep> case ( testsum ) ) ) { \n <ect>
\t2 try { \n \t3 final string json = this . cipher <identifiersep> executor . decode ( token ) ; \n \t3 final jwt <identifiersep> claims claims = jwt <identifiersep> claims . parse ( json ) ; \n \t3 if ( ! claims . get <identifiersep> issuer ( ) . equals ( issuer ) ) { \n <ect>
\t1 kinit <identifiersep> command = format ( <string_literal> ) \n \t1 execute ( kinit <identifiersep> command , user = params . hdfs <identifiersep> user , logoutput = true ) \n if params . upgrade <identifiersep> direction == direction . upgrade : \n \t1 if params . dfs <identifiersep> ha <identifiersep> enabled : \n <ect>
\t2 close <identifiersep> stmt ( stmt ) ; \n \t2 db <identifiersep> conn . commit ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n \t2 log . warn ( <string_literal> + hadoop <identifiersep> job <identifiersep> id + <string_literal> + id + <string_literal> + e . get <identifiersep> message ( ) ) ; \n <ect>
<comment> \n \t4 s <identifiersep> logger . debug ( <string_literal> , ne ) ; } \n \t3 if ( next <identifiersep> status == status . alert ) { \n \t4 <comment> \n <ect>
\t3 return true ; } \n \t2 indexed <identifiersep> paths indexed <identifiersep> paths = ( indexed <identifiersep> paths ) commit <identifiersep> context . get ( lucene <identifiersep> document <identifiersep> holder . name ) ; \n \t2 <comment> \n \t2 if ( indexed <identifiersep> paths == null ) { \n <ect>
\t2 for ( memory <identifiersep> buffer buf : data . get <identifiersep> cache <identifiersep> buffers ( ) ) { \n \t3 if ( buf == null ) continue ; \n \t3 cache <identifiersep> wrapper . release <identifiersep> buffer ( buf ) ; } } } \n \t1 } catch ( throwable t ) { \n <ect>
\t2 try { \n \t3 class <identifiersep> document = document <identifiersep> access <identifiersep> bridge . get <identifiersep> translated <identifiersep> document <identifiersep> instance ( class <identifiersep> reference ) ; \n \t2 } catch ( exception e ) { \n \t3 string class <identifiersep> string <identifiersep> reference = default <identifiersep> entity <identifiersep> reference <identifiersep> serializer . serialize ( class <identifiersep> reference ) ; \n <ect>
\t3 @ override \n \t3 public void run ( ) { \n \t4 try { \n <ect>
\t3 sender . real <identifiersep> time <identifiersep> flag ? transferring <identifiersep> request <identifiersep> senders <identifiersep> rt : transferring <identifiersep> request <identifiersep> senders <identifiersep> bulk ; \n \t2 synchronized ( transferring <identifiersep> request <identifiersep> senders ) { \n <comment> \n <comment> \n <ect>
with compiler [ map <identifiersep> function [ row , out ] ] \n with logging { \n private var function : map <identifiersep> function [ row , out ] =  <identifiersep>  \n override def open ( parameters : configuration ) : unit = { \n <ect>
\t2 broker . get <identifiersep> system <identifiersep> usage ( ) . set <identifiersep> send <identifiersep> fail <identifiersep> if <identifiersep> no <identifiersep> space <identifiersep> after <identifiersep> timeout ( <number_literal> ) ; \n \t2 runnable r = new runnable ( ) { \n \t3 public void run ( ) { \n \t4 try { \n <ect>
<comment> \n \t1 public void put ( string key , string value ) { \n <ect>
\t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n \t4 if ( packet . get <identifiersep> optional <identifiersep> from ( ) == null ) \n \t5  <identifiersep> log . warn ( <string_literal> + packet . is <identifiersep> flag <identifiersep> set ( packet . flag <identifiersep> from <identifiersep> included ) + <string_literal> ) ; \n \t4 else if ( packet . get <identifiersep> optional <identifiersep> signature ( ) == null ) \n <ect>
\t3 assert <identifiersep> self <identifiersep> or <identifiersep> user <identifiersep> manager ( username ) ; \n \t3 return user <identifiersep> manager . get <identifiersep> role <identifiersep> names <identifiersep> for <identifiersep> user ( username ) ; } \n \t2 catch ( authorization <identifiersep> violation <identifiersep> exception | invalid <identifiersep> arguments <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 gh <identifiersep> organization organization = ping . get <identifiersep> organization ( ) ; \n \t3 if ( organization != null ) { \n \t4 logger . info ( <string_literal> , event , organization . get <identifiersep> url ( ) ) ; \n \t3 } else { \n <ect>
\t4 s <identifiersep> logger . trace ( <string_literal> ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t1 try { \n \t2 get <identifiersep> ms ( ) . create <identifiersep> or <identifiersep> update <identifiersep> wm <identifiersep> mapping ( request . get <identifiersep> mapping ( ) , request . is <identifiersep> update ( ) ) ; \n \t2 return new wm <identifiersep> create <identifiersep> or <identifiersep> update <identifiersep> mapping <identifiersep> response ( ) ; \n \t1 } catch ( meta <identifiersep> exception e ) { \n <ect>
\t3 long row <identifiersep> count <identifiersep> before <identifiersep> aggr = final <identifiersep> scanner instanceof gt <identifiersep> aggregate <identifiersep> scanner \n \t5 ? ( ( gt <identifiersep> aggregate <identifiersep> scanner ) final <identifiersep> scanner ) . get <identifiersep> input <identifiersep> row <identifiersep> count ( ) \n \t5 : final <identifiersep> row <identifiersep> count ; \n \t3 append <identifiersep> profile <identifiersep> info ( sb , <string_literal> , service <identifiersep> start <identifiersep> time ) ; \n <ect>
\t3 valve . set <identifiersep> ssl <identifiersep> session <identifiersep> id <identifiersep> header ( valve <identifiersep> config . get <identifiersep> ssl <identifiersep> session <identifiersep> id <identifiersep> header ( ) ) ; \n \t3 tomcat . add <identifiersep> context <identifiersep> valves ( valve ) ; } } \n \t1 private void configure <identifiersep> session <identifiersep> clustering ( final tomcat tomcat ) { \n \t2 if ( ! is <identifiersep> session <identifiersep> clustering <identifiersep> enabled ( ) ) { \n <ect>
\t1 public static t <identifiersep> file get <identifiersep> t <identifiersep> file ( string path ) { \n \t2 try { \n \t3 return new t <identifiersep> file ( path ) ; \n \t2 } catch ( null <identifiersep> pointer <identifiersep> exception ex ) { \n <ect>
\t1 } catch ( exception e ) { \n \t1 fail ( ) ; } } \n @ test \n public void test <identifiersep> check <identifiersep> add <identifiersep> node ( ) { \n <ect>
\t2 final string contents = io <identifiersep> utils . to <identifiersep> string ( md , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ; \n \t2 response . set <identifiersep> content <identifiersep> type ( content <identifiersep> type ) ; \n \t2 response . set <identifiersep> status ( http <identifiersep> servlet <identifiersep> response . sc <identifiersep> ok ) ; \n \t2 try ( print <identifiersep> writer writer = response . get <identifiersep> writer ( ) ) { \n <ect>
\t2 logger . debug ( <string_literal> , classes <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) , clock . get <identifiersep> elapsed ( ) ) ; } \n \t1 private void compile <identifiersep> script ( final script <identifiersep> source source , class <identifiersep> loader class <identifiersep> loader , compiler <identifiersep> configuration configuration , file metadata <identifiersep> dir , \n \t7 final compile <identifiersep> operation < ? > extracting <identifiersep> transformer , final action < ? super class <identifiersep> node > custom <identifiersep> verifier ) { \n \t2 final transformer transformer = extracting <identifiersep> transformer != null ? extracting <identifiersep> transformer . get <identifiersep> transformer ( ) : null ; \n <ect>
\t2 blobs . add ( blob ) ; } \n \t1 @ override \n \t1 public void release ( blob blob ) { \n \t2 if ( blobs == null ) { \n <ect>
\t2 if ( sinkgroups == null ) { \n \t2 sinkgroups = value ; \n \t2 return true ; \n \t2 } else { \n <ect>
\t3 log . info ( <string_literal> + node <identifiersep> name ) ; \n \t3 add <identifiersep> inputs ( node <identifiersep> name , node <identifiersep> data ) ; \n \t3 break ; \n \t2 case node <identifiersep> updated : \n <ect>
\t5 } catch ( network <identifiersep> io <identifiersep> exception e ) { \n \t6 <comment> \n \t5 } catch ( exception e ) { \n \t6 <comment> \n <ect>
\t1 public void send <identifiersep> packet ( grid <identifiersep> clock <identifiersep> message msg , inet <identifiersep> address addr , int port ) throws grid <identifiersep> exception { \n \t2 try { \n \t3 datagram <identifiersep> packet packet = new datagram <identifiersep> packet ( msg . to <identifiersep> bytes ( ) , grid <identifiersep> clock <identifiersep> message . packet <identifiersep> size , addr , port ) ; \n <ect>
\t4 s <identifiersep> logger . trace ( <string_literal> + result ) ; } \n \t3 return result . replace ( <string_literal> , <string_literal> ) ; \n \t2 } catch ( types . handle <identifiersep> invalid e ) { \n <ect>
\t4 logger . minor ( this , <string_literal> + this ) ; \n \t3 got <identifiersep> ark ( fs , edition ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t1 exchange exchange = exchange <identifiersep> factory . instance . create <identifiersep> exchange ( specification ) ; \n \t1 coinfloor <identifiersep> trade <identifiersep> service <identifiersep> raw raw <identifiersep> service = ( coinfloor <identifiersep> trade <identifiersep> service <identifiersep> raw ) exchange . get <identifiersep> trade <identifiersep> service ( ) ; \n \t1 coinfloor <identifiersep> market <identifiersep> order <identifiersep> response order = \n \t2 raw <identifiersep> service . place <identifiersep> market <identifiersep> order ( currency <identifiersep> pair . btc <identifiersep> eur , order <identifiersep> type . ask , new big <identifiersep> decimal ( <string_literal> ) ) ; \n <ect>
\t4 list < load <identifiersep> test <identifiersep> step <identifiersep> sample > results = new array <identifiersep> list < load <identifiersep> test <identifiersep> step <identifiersep> sample > ( ) ; \n \t4 for ( int i = 0 ; i < test <identifiersep> results . size ( ) ; i ++ ) { \n \t5 test <identifiersep> step <identifiersep> result step <identifiersep> result = test <identifiersep> results . get ( i ) ; \n \t5 if ( step <identifiersep> result == null ) { \n <ect>
\t4 try { \n \t5 task . run ( ) ; \n \t5 return ngx <identifiersep> ok ; \n \t4 } catch ( throwable e ) { \n <ect>
\t4 . for <identifiersep> each ( l - > { \n \t5 final multimap < string , object > multi <identifiersep> map <identifiersep> attributes = \n \t7 core <identifiersep> authentication <identifiersep> utils . transform <identifiersep> principal <identifiersep> attributes <identifiersep> list <identifiersep> into <identifiersep> multi <identifiersep> map ( l . get <identifiersep> principal <identifiersep> attribute <identifiersep> list ( ) ) ; \n \t5 logger . debug ( <string_literal> , multi <identifiersep> map <identifiersep> attributes , l . get <identifiersep> ldap <identifiersep> url ( ) ) ; \n <ect>
\t3 if ( future <identifiersep> executor != null ) { \n \t4 try { \n \t5 future <identifiersep> executor . shutdown <identifiersep> now ( ) ; \n \t4 } catch ( throwable tt ) { \n <ect>
\t4 connection ( ) . exec <identifiersep> update ( <string_literal> ) ; \n \t4 connection ( ) . exec <identifiersep> update ( <string_literal> ) ; } \n \t2 } catch ( sql <identifiersep> exception ex ) \n \t2 { \n <ect>
\t1 logger . info ( <string_literal> . format ( <string_literal> . join ( repo <identifiersep> ids ) ) ) \n \t1 for repo in repo <identifiersep> ids : \n \t2 available <identifiersep> packages . extend ( self . all <identifiersep> packages ( repo <identifiersep> filter = repo ) ) \n \t1 else : \n <ect>
\t2 if ( external <identifiersep> resource <identifiersep> closer != null ) { \n \t3 try { \n \t4 external <identifiersep> resource <identifiersep> closer . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( node <identifiersep> val != null && ! node <identifiersep> val . equals ( <string_literal> ) ) { \n \t4 examples . add ( node <identifiersep> val ) ; \n \t4 list < semantic <identifiersep> type <identifiersep> label > result = model <identifiersep> handler . predict <identifiersep> type ( examples , 1 ) ; \n \t4 if ( result == null ) { \n <ect>
\t1 mssql <identifiersep> test <identifiersep> utils utils = new mssql <identifiersep> test <identifiersep> utils ( ) ; \n \t1 utils . drop <identifiersep> table <identifiersep> if <identifiersep> exists ( <string_literal> ) ; \n \t1 manager . close ( ) ; \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t3 logger . info ( <string_literal> + store <identifiersep> name \n \t6 + <string_literal> + store <identifiersep> dir + <string_literal> ) ; \n \t2 } catch ( voldemort <identifiersep> exception e ) { \n \t3 response . set <identifiersep> error ( proto <identifiersep> utils . encode <identifiersep> error ( error <identifiersep> code <identifiersep> mapper , e ) ) ; \n <ect>
\t2 } catch ( io <identifiersep> exception ex ) { \n \t3 synchronized ( sock <identifiersep> lock ) { \n \t4 my <identifiersep> sockets . clear ( ) ; } \n \t3 if ( open ) { \n <ect>
\t2 return true ; } \n \t1 @ override \n \t1 public boolean verify <identifiersep> services <identifiersep> combination ( set < service > services ) { \n \t2 if ( ! services . contains ( service . connectivity ) ) { \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 break ; } \n \t3 } else { \n <ect>
\t4 log . debug ( <string_literal> , full <identifiersep> ics <identifiersep> file ) ; \n \t4 try { \n \t5 sardine . delete ( full <identifiersep> ics <identifiersep> file ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( this . selector != null ) { \n \t3 try { \n \t4 this . selector . close ( ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t3 else \n \t4 nav <identifiersep> state . add <identifiersep> object ( state ) ; \n \t3 set <identifiersep> state ( nav <identifiersep> state ) ; \n \t2 } else { \n <ect>
\t1 @ target <identifiersep> gradle <identifiersep> version ( <string_literal> ) \n \t1 def <string_literal> ( ) { \n \t2 file ( <string_literal> ) < < <string_literal> <string_literal> error logging <string_literal> <ect>
\t3 an <identifiersep> http <identifiersep> connection . set <identifiersep> receive <identifiersep> timeout ( <number_literal> ) ; \n \t3 if ( an <identifiersep> http <identifiersep> connection . send <identifiersep> request ( a <identifiersep> request ) ) { \n \t4 a <identifiersep> response = an <identifiersep> http <identifiersep> connection . read <identifiersep> response ( ) ; } \n \t2 } catch ( exception local <identifiersep> exception ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + instance + <string_literal> + retry ) ; } \n \t3 state state = instance . get <identifiersep> state ( ) ; \n \t3 if ( state == state . running ) { \n <ect>
\t3 try { \n \t4 initial <identifiersep> checkpoints = checkpoints <identifiersep> in <identifiersep> zoo <identifiersep> keeper . get <identifiersep> all <identifiersep> sorted <identifiersep> by <identifiersep> name <identifiersep> and <identifiersep> lock ( ) ; \n \t4 break ; } \n \t3 catch ( concurrent <identifiersep> modification <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> same <identifiersep> name <identifiersep> diff <identifiersep> namespace3 ( ) { \n \t2 document doc = get <identifiersep> as <identifiersep> dom ( <string_literal> ) ; \n <ect>
\t2 string bean <identifiersep> property = key . substring ( separator <identifiersep> index + 1 ) ; \n \t2 this . bean <identifiersep> names . add ( bean <identifiersep> name ) ; \n \t2 apply <identifiersep> property <identifiersep> value ( factory , bean <identifiersep> name , bean <identifiersep> property , value ) ; \n <ect>
<number_literal> cache <identifiersep> lost <identifiersep> message ( token . resource , token , true ) ; } \n \t9 } finally { \n \t10 if ( token != null ) { \n <number_literal> remove <identifiersep> atmosphere <identifiersep> resource ( token . resource , false ) ; } \n <ect>
\t4 boolean success = remove <identifiersep> entry ( sl , key ) != null ; \n \t4 if ( success ) \n \t5  <identifiersep> log . error ( <string_literal> <string_literal> \\ <string_literal> + list ) ; \n \t4 else \n <ect>
\t1 string scheme = extract <identifiersep> scheme ( options ) ; \n \t1 if ( null == scheme ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t3 logger . debug ( <string_literal> , default <identifiersep> url ) ; } \n \t2 user = ( string ) config . get ( <string_literal> ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( user ) ) { \n \t3 user = default <identifiersep> user ; \n <ect>
\t4 s <identifiersep> logger . warn ( <string_literal> + m <identifiersep> str ) ; \n \t4 return null ; } \n \t3 return ssh <identifiersep> connection ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 settings . builder settings = settings . builder ( ) \n \t4 . put ( s3repository . chunk <identifiersep> size <identifiersep> setting . get <identifiersep> key ( ) , random <identifiersep> int <identifiersep> between ( <number_literal> , <number_literal> ) ) ; \n \t2 <comment> \n \t2 settings . put ( s3repository . base <identifiersep> path <identifiersep> setting . get <identifiersep> key ( ) , base <identifiersep> path ) ; \n <ect>
\t4 client <identifiersep> id = web <identifiersep> context . get <identifiersep> request <identifiersep> parameter ( <string_literal> ) ; } \n \t3 if ( client instanceof o <identifiersep> auth20client || client instanceof oidc <identifiersep> client ) { \n \t4 logger . debug ( <string_literal> ) ; \n \t4 client <identifiersep> id = web <identifiersep> context . get <identifiersep> request <identifiersep> parameter ( o <identifiersep> auth20configuration . state <identifiersep> request <identifiersep> parameter ) ; } } \n <ect>
\t5 <comment> \n \t5 if ( task <identifiersep> definition . get <identifiersep> start <identifiersep> on <identifiersep> startup ( ) ) { \n \t6 schedule <identifiersep> task ( task <identifiersep> definition ) ; } } \n \t4 catch ( exception e ) { \n <ect>
\t1 val result = optimizer . schedule <identifiersep> once ( \n \t2 data . tasks . map (  <identifiersep>  . task <identifiersep> request ) . as <identifiersep> java , data . new <identifiersep> leases . as <identifiersep> java ) \n \t2 <comment> \n <ect>
\t4 distributed <identifiersep> executor <identifiersep> service ispn <identifiersep> executor = new default <identifiersep> executor <identifiersep> service ( cache <identifiersep> manager . get <identifiersep> cache ( <string_literal> ) ) ; \n \t4 future < string > z = ispn <identifiersep> executor . submit ( new transaction <identifiersep> task ( ) , key ) ; \n \t4 log . info ( <string_literal> + z . get ( ) ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 public file get <identifiersep> if <identifiersep> present ( string key ) { \n \t2 try { \n \t3 return cache . get <identifiersep> if <identifiersep> present ( key ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 file <identifiersep> mode <identifiersep> mutator chmod = new native <identifiersep> platform <identifiersep> backed <identifiersep> chmod ( posix <identifiersep> files ) ; \n \t3 file <identifiersep> mode <identifiersep> accessor stat = new native <identifiersep> platform <identifiersep> backed <identifiersep> stat ( posix <identifiersep> files ) ; \n \t3 return new generic <identifiersep> file <identifiersep> system ( chmod , stat , symlink , metadata <identifiersep> accessor ) ; } \n \t2 symlink symlink = java <identifiersep> reflection <identifiersep> util . new <identifiersep> instance <identifiersep> or <identifiersep> fallback ( <string_literal> , file <identifiersep> system <identifiersep> services . class . get <identifiersep> class <identifiersep> loader ( ) , unsupported <identifiersep> symlink . class ) ; \n <ect>
\t2 return players <identifiersep> by <identifiersep> id . get ( key ) ; } \n \t1 public synchronized squeeze <identifiersep> player get <identifiersep> player <identifiersep> by <identifiersep> mac <identifiersep> address ( string mac <identifiersep> address ) { \n \t2 string key = mac <identifiersep> address . to <identifiersep> lower <identifiersep> case ( ) ; \n \t2 if ( ! players <identifiersep> by <identifiersep> mac <identifiersep> address . contains <identifiersep> key ( key ) ) { \n <ect>
public response write <identifiersep> and <identifiersep> refresh <identifiersep> configuration ( json <identifiersep> object request ) { \n \t1 log . debug ( <string_literal> , request ) ; \n \t1 try { \n \t1 if ( is <identifiersep> operator ( ) == false ) { \n <ect>
\t2 if ( ! completed ) { \n \t3 throw new io <identifiersep> exception ( <string_literal> + path \n \t5 + <string_literal> + this . client . get <identifiersep> reply <identifiersep> string ( ) ) ; } \n <ect>
\t4 log . info ( <string_literal> + object <identifiersep> message ) ; } \n \t2 } catch ( exception e ) { \n \t3 if ( producer <identifiersep> session != null ) { \n \t4 producer <identifiersep> session . rollback ( ) ; \n <ect>
\t1 throws scheduler <identifiersep> exception { \n \t1 return create <identifiersep> job ( job <identifiersep> name , job <identifiersep> params , trigger ) ; } \n private string create <identifiersep> job ( string job <identifiersep> name , map < string , param <identifiersep> value > job <identifiersep> params , job <identifiersep> trigger trigger ) \n \t1 throws scheduler <identifiersep> exception { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + host . get <identifiersep> resource ( ) , e ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + host . get <identifiersep> resource ( ) , e ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t6  <identifiersep> sam <identifiersep> out . write ( msg ) ; \n \t6  <identifiersep> sam <identifiersep> out . flush ( ) ; } \n \t5 i2p <identifiersep> thread flood = new i2p <identifiersep> thread ( flooder , <string_literal> + con ) ; \n \t5 flood . start ( ) ; \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t3 if ( ! is <identifiersep> root <identifiersep> admin ( vm <identifiersep> profile ) ) { \n \t4 if ( ! is <identifiersep> enabled <identifiersep> for <identifiersep> allocation ( plan . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , plan . get <identifiersep> pod <identifiersep> id ( ) , plan . get <identifiersep> cluster <identifiersep> id ( ) ) ) { \n <ect>
\t4 } catch ( exception e ) { \n \t5 if ( null != required <identifiersep> nodes && required <identifiersep> nodes . contains ( node . get <identifiersep> id ( ) ) ) \n \t6 throw new voldemort <identifiersep> exception ( <string_literal> + node . get <identifiersep> id ( ) , e ) ; \n \t5 else \n <ect>
\t2 byte [ ] buf = new byte [ length ] ; \n \t2 try { \n \t3 checker . read <identifiersep> and <identifiersep> checksum ( is , buf , 0 , length ) ; \n \t2 } catch ( checksum <identifiersep> failed <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , <number_literal> , broker . get <identifiersep> admin <identifiersep> view ( ) . get <identifiersep> total <identifiersep> message <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <number_literal> , drain <identifiersep> queue ( <number_literal> ) ) ; } \n \t1 private void whack <identifiersep> index ( file data <identifiersep> dir ) { \n \t2 file index <identifiersep> to <identifiersep> delete = new file ( data <identifiersep> dir , <string_literal> ) ; \n <ect>
\t1 } else if ( matcher . group ( <number_literal> ) . equals ( <string_literal> ) ) { \n \t2 logger . info ( <string_literal> ) ; \n \t2 return time <identifiersep> unit . days . to <identifiersep> millis ( integer . parse <identifiersep> int ( matcher . group ( 1 ) ) ) ; \n \t1 } else { \n <ect>
\t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n \t4  <identifiersep> log . debug ( <string_literal> ) ; \n \t3  <identifiersep> fail <identifiersep> rate . load ( props , <string_literal> , true ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 file <identifiersep> output <identifiersep> format . set <identifiersep> output <identifiersep> path ( job , output <identifiersep> path ) ; \n \t3 hadoop <identifiersep> util . delete <identifiersep> path ( job . get <identifiersep> configuration ( ) , output <identifiersep> path ) ; \n \t3 return wait <identifiersep> for <identifiersep> completion ( job ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 charset utf8 = standard <identifiersep> charsets . utf <identifiersep> <number_literal> ; \n \t3 properties . store ( new output <identifiersep> stream <identifiersep> writer ( out <identifiersep> stream , utf8 ) , comment ) ; } \n \t2 catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception fnfe ) { \n <ect>
\t3 long value = data <identifiersep> helper . from <identifiersep> long ( data , 0 , <number_literal> ) ; \n \t3 if ( flooder != null ) { \n \t4 flooder . received ( length , value ) ; \n \t3 } else { \n <ect>
\t3 if ( open <identifiersep> devices . contains <identifiersep> key ( device <identifiersep> name ) ) { \n \t4 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t4 cul <identifiersep> handler <identifiersep> internal < t > handler = ( cul <identifiersep> handler <identifiersep> internal < t > ) open <identifiersep> devices . get ( device <identifiersep> name ) ; \n \t4 if ( handler . get <identifiersep> config ( ) . equals ( config ) ) { \n <ect>
\t7 log . debug ( <string_literal> , key ) ; \n \t7 continue ; \n \t6 } else if ( ( force <identifiersep> post <identifiersep> only || group <identifiersep> config . is <identifiersep> post <identifiersep> only ( ) ) \n \t8 && ! <string_literal> . equals <identifiersep> ignore <identifiersep> case ( request . get <identifiersep> method ( ) ) ) { \n <ect>
\t2 final markup markup ) \n \t1 { \n \t2 { \n <ect>
\t2 if ( thumb != null ) { \n \t3 try { \n \t4 image = image <identifiersep> io . read ( thumb ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 private static json <identifiersep> web <identifiersep> key <identifiersep> set build <identifiersep> json <identifiersep> web <identifiersep> key <identifiersep> set ( final string json ) throws exception { \n \t2 final json <identifiersep> web <identifiersep> key <identifiersep> set json <identifiersep> web <identifiersep> key <identifiersep> set = new json <identifiersep> web <identifiersep> key <identifiersep> set ( json ) ; \n \t2 final rsa <identifiersep> json <identifiersep> web <identifiersep> key web <identifiersep> key = get <identifiersep> json <identifiersep> signing <identifiersep> web <identifiersep> key <identifiersep> from <identifiersep> jwks ( json <identifiersep> web <identifiersep> key <identifiersep> set ) ; \n \t2 if ( web <identifiersep> key == null || web <identifiersep> key . get <identifiersep> private <identifiersep> key ( ) == null ) { \n <ect>
\t6 key . interest <identifiersep> ops ( selection <identifiersep> key . op <identifiersep> read ) ; \n \t6 process <identifiersep> connect ( key ) ; } \n \t4 } catch ( io <identifiersep> exception ioe ) { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 log . info ( <string_literal> + txnids ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 db <identifiersep> conn . commit ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 public void set <identifiersep> application <identifiersep> event <identifiersep> publisher ( application <identifiersep> event <identifiersep> publisher application <identifiersep> event <identifiersep> publisher ) { \n \t2 this . application <identifiersep> event <identifiersep> publisher = application <identifiersep> event <identifiersep> publisher ; } \n \t1 protected void check <identifiersep> closure ( int bite ) throws io <identifiersep> exception { \n \t2 if ( bite < 0 ) { \n <ect>
\t1 { \n \t2 h <identifiersep> node <identifiersep> path new <identifiersep> path = new h <identifiersep> node <identifiersep> path ( ) ; \n \t2 if ( start == null || finish == null ) \n \t2 { \n <ect>
\t2 <comment> \n \t2 transaction <identifiersep> status maybe <identifiersep> commit =  <identifiersep> active <identifiersep> tx . get (  <identifiersep> curr <identifiersep> transaction ) ; \n \t2 if ( maybe <identifiersep> commit != null && maybe <identifiersep> commit . status == attempt <identifiersep> status . processed ) { \n \t3 maybe <identifiersep> commit . status = attempt <identifiersep> status . committing ; \n <ect>
\t1 public boolean disable ( ) throws exception { \n \t2 try { \n \t3 workflow <identifiersep> client <identifiersep> manager . stop ( ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t2 } catch ( exception ex ) { \n \t3 try { \n \t4 scp <identifiersep> to = new scp <identifiersep> to ( src <identifiersep> host , user , old <identifiersep> password ) ; \n \t4 scp <identifiersep> to . put <identifiersep> file ( remote <identifiersep> file + <string_literal> , local <identifiersep> dir ) ; \n <ect>
\t2 } catch ( exception e ) { \n \t3 if ( e instanceof timeout <identifiersep> exception ) { \n \t4 log . error ( <string_literal> , e ) ; \n \t3 } else { \n <ect>
\t3 if ( ls != null ) { \n \t4  <identifiersep> context . client <identifiersep> manager ( ) . request <identifiersep> lease <identifiersep> set (  <identifiersep> settings . get <identifiersep> destination ( ) , ls ) ; \n \t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 for ( reader <identifiersep> thread rt : readers ) { \n \t4 try { \n \t5 rt . shutdown ( ) ; } \n \t4 catch ( throwable t ) { \n <ect>
\t1 if ( is <identifiersep> enabled ( resource ) ) { \n \t1 log . debug ( <string_literal> , to <identifiersep> string ( ) ) ; \n \t1 get <identifiersep> decorated <identifiersep> object ( ) . process ( resource , reader , writer ) ; \n \t1 } else { \n <ect>
\t5 stop <identifiersep> consumer <identifiersep> broker . await ( ) ; \n \t5 log . info ( <string_literal> ) ; \n \t5 consumer <identifiersep> broker . stop ( ) ; \n \t5 consumer <identifiersep> broker . wait <identifiersep> until <identifiersep> stopped ( ) ; \n <ect>
\t3 pstmt . execute <identifiersep> batch ( ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t2 public boolean has <identifiersep> next <identifiersep> available ( int timeout , time <identifiersep> unit unit ) throws interrupted <identifiersep> exception { \n \t3 try { \n \t4 return peek <identifiersep> event != null || ( peek <identifiersep> event = event <identifiersep> queue . poll ( timeout , unit ) ) != null ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 if ( ! em . is <identifiersep> open ( ) ) { \n \t3 em = null ; \n \t3 return ; } \n \t2 if ( jta <identifiersep> status <identifiersep> helper . is <identifiersep> active ( testing <identifiersep> jta <identifiersep> platform <identifiersep> impl . instance . get <identifiersep> transaction <identifiersep> manager ( ) ) ) { \n <ect>
\t2 } ) . start ( ) ; \n \t2 handler <identifiersep> server . serve ( ) ; } \n \t1 private void init <identifiersep> clear <identifiersep> thread ( ) { \n \t2 clear <identifiersep> thread = new async <identifiersep> loop <identifiersep> thread ( new clear <identifiersep> thread ( this ) ) ; \n <ect>
\t3 break ; } } \n \t1 @ override \n \t1 public boolean configure ( string name , map < string , object > params ) throws configuration <identifiersep> exception { \n <ect>
\t8 ingredients . add ( new ingredient <identifiersep> stack ( crafting <identifiersep> helper . get <identifiersep> ingredient ( object . get ( <string_literal> ) , ctx ) , json <identifiersep> utils . get <identifiersep> int ( object , <string_literal> , 1 ) ) ) ; } \n \t6 ) ; \n \t6 integration <identifiersep> recipe <identifiersep> registry . instance . add <identifiersep> recipe ( new integration <identifiersep> recipe <identifiersep> basic ( key , powercost , center <identifiersep> stack , ingredients , output ) ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 if ( payload <identifiersep> input <identifiersep> stream != null ) { \n \t2 try { \n \t2 payload <identifiersep> input <identifiersep> stream . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 protected background <identifiersep> model create <identifiersep> background <identifiersep> model ( ) { \n \t3 if ( server <identifiersep> instance . this . options . get <identifiersep> background <identifiersep> scan <identifiersep> period ( ) > 0 ) { \n \t4 log . info ( <string_literal> , server <identifiersep> instance . this . options . get <identifiersep> background <identifiersep> scan <identifiersep> period ( ) ) ; \n \t4 return make <identifiersep> default <identifiersep> background <identifiersep> model ( ) ; } \n <ect>
\t2 list < query <identifiersep> solution > results4 = result <identifiersep> set <identifiersep> formatter . to <identifiersep> list ( rs4 ) ; \n \t2 if ( results4 . size ( ) == 0 ) { \n \t3 return doc <identifiersep> def ; \n \t2 } else if ( results4 . size ( ) != 1 ) { \n <ect>
\t2 executor <identifiersep> service . shutdown ( ) ; \n \t2 try { \n \t3 executor <identifiersep> service . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 set <identifiersep> stores <identifiersep> upper <identifiersep> case <identifiersep> identifiers ( database <identifiersep> meta <identifiersep> data . stores <identifiersep> upper <identifiersep> case <identifiersep> identifiers ( ) ) ; } \n \t2 catch ( sql <identifiersep> exception ex ) { \n <ect>
<comment> \n \t1 public boolean check <identifiersep> parameter <identifiersep> exist ( final http <identifiersep> servlet <identifiersep> request request , final string name ) { \n \t2 final string parameter = request . get <identifiersep> parameter ( name ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( parameter ) ) { \n <ect>
\t1 @ override \n \t1 public void handle ( io <identifiersep> exception exception ) { \n \t2 if ( ! broker . is <identifiersep> started ( ) || ignore <identifiersep> all <identifiersep> errors ) { \n \t3 allow <identifiersep> io <identifiersep> resumption ( ) ; \n <ect>
\t1 number <identifiersep> format decimal <identifiersep> formatter = new decimal <identifiersep> format ( <string_literal> ) ; \n \t1 file dump <identifiersep> file = new file ( dump <identifiersep> file <identifiersep> path ) ; \n \t1 <comment> \n \t1 if ( ! dump <identifiersep> file . exists ( ) ) { \n <ect>
\t1 text key = new text ( ) ; \n \t1 int <identifiersep> writable value = new int <identifiersep> writable ( ) ; \n \t1 string [ ] words = file <identifiersep> content . split ( <string_literal> ) ; \n \t1 assert . assert <identifiersep> equals ( words . length , text <identifiersep> output . length ) ; \n <ect>
\t8 oauth <identifiersep> credentials . userid ) ; \n \t6 continue ; } \n \t5 if ( oauth <identifiersep> credentials . no <identifiersep> access <identifiersep> token ( ) ) { \n \t6 if ( ! oauth <identifiersep> credentials . refresh <identifiersep> tokens ( ) ) { \n <ect>
\t1 public block get <identifiersep> block ( string uri ) { \n \t2 try { \n \t3 return get <identifiersep> block ( new block <identifiersep> uri ( uri ) ) ; \n \t2 } catch ( block <identifiersep> uri <identifiersep> parse <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 <comment> \n \t3 root <identifiersep> node = reader . read <identifiersep> value ( json ) ; \n \t3 } catch ( json <identifiersep> parse <identifiersep> exception e ) { \n <ect>
\t2 return false ; } \n \t1 <comment> \n \t1 private void collect <identifiersep> files <identifiersep> and <identifiersep> store ( final context context , final path dir , final int level ) throws framework <identifiersep> exception { \n \t2 if ( level == 1 ) { \n <ect>
\t2 throwable payload = determine <identifiersep> payload ( throwable , context ) ; \n \t2 error <identifiersep> message error <identifiersep> message = this . error <identifiersep> message <identifiersep> strategy . build <identifiersep> error <identifiersep> message ( payload , context ) ; \n \t3 messaging <identifiersep> exception exception = ( messaging <identifiersep> exception ) error <identifiersep> message . get <identifiersep> payload ( ) ; \n <ect>
\t3 <comment> \n \t3 consumer = new mqttitude <identifiersep> consumer ( home <identifiersep> location , geo <identifiersep> fence ) ; \n \t3 consumer . set <identifiersep> topic ( topic ) ; \n \t3 <comment> \n <ect>
\t3 try { \n \t4 initiator . start ( ) ; \n \t4 initiator <identifiersep> started = true ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 { \n \t4 logger . error ( <string_literal> , ex ) ; } \n \t3 catch ( illegal <identifiersep> argument <identifiersep> exception ex ) \n \t3 { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 if ( this . application <identifiersep> event <identifiersep> publisher != null ) { \n \t3 this . application <identifiersep> event <identifiersep> publisher . publish <identifiersep> event ( new redis <identifiersep> exception <identifiersep> event ( this , e ) ) ; } \n \t2 else { \n <ect>
\t1 @ override \n \t1 public void send ( list < bundle > bundles ) { \n \t2 <comment> \n \t2 if ( closed ) { \n <ect>
\t3 check <identifiersep> index ( result , closer ) ; } \n \t2 if ( result . clean ) { \n \t3 log . info ( <string_literal> , index <identifiersep> path , watch ) ; \n \t2 } else { \n <ect>
\t3 client <identifiersep> context context = new client <identifiersep> context ( instance , new credentials ( principal , token ) , \n \t4 client <identifiersep> conf ) ; \n \t3 scanner = new scanner <identifiersep> impl ( context , table . id . of ( base <identifiersep> split . get <identifiersep> table <identifiersep> id ( ) ) , authorizations ) ; } \n \t2 if ( is <identifiersep> isolated ) { \n <ect>
\t7 break ; \n \t6 default : \n \t7 break ; } } } \n \t2 } catch ( freebox <identifiersep> exception e ) { \n <ect>
\t4 if ( boolean . parse <identifiersep> boolean ( r . get <identifiersep> atmosphere <identifiersep> config ( ) . get <identifiersep> init <identifiersep> parameter ( application <identifiersep> config . response <identifiersep> completion <identifiersep> reset ) ) ) { \n \t5 r . get <identifiersep> request ( ) . set <identifiersep> attribute ( application <identifiersep> config . response <identifiersep> completion <identifiersep> reset , boolean . true ) ; } } \n \t3 wrapper . service ( r . get <identifiersep> request ( ) , r . get <identifiersep> response ( ) ) ; \n \t2 } catch ( throwable ex ) { \n <ect>
\t5 else \n \t6 session <identifiersep> manager . init <identifiersep> whiteboard ( contact ) ; } \n \t4 catch ( operation <identifiersep> failed <identifiersep> exception e1 ) \n \t4 { \n <ect>
\t2 return tls <identifiersep> future . get ( <number_literal> , seconds ) ; \n \t2 } catch ( timeout <identifiersep> exception ex ) { \n \t2 log . debug ( <string_literal> , ex ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 boolean created = f . mkdirs ( ) ; \n \t2 if ( ! created ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + queue <identifiersep> dir ) ; \n \t2 } else { \n <ect>
\t3 if ( num <identifiersep> retries > 0 ) { \n \t4 login ( ) ; \n \t4 return true ; } \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t2 protected final void safe <identifiersep> set <identifiersep> failure ( channel <identifiersep> promise promise , throwable cause ) { \n \t3 if ( ! ( promise instanceof void <identifiersep> channel <identifiersep> promise ) && ! promise . try <identifiersep> failure ( cause ) ) { \n <ect>
\t1 @ deprecated \n \t1 public x <identifiersep> wiki <identifiersep> hibernate <identifiersep> base <identifiersep> store ( x <identifiersep> wiki xwiki , x <identifiersep> wiki <identifiersep> context context ) \n \t1 { \n \t2 string path = xwiki . param ( <string_literal> , <string_literal> ) ; \n <ect>
\t4 string encoded <identifiersep> value = ( string ) pref . value <identifiersep> for <identifiersep> key ( <string_literal> ) ; \n \t4 if ( encoded <identifiersep> value != null ) { \n \t5 result = decoded <identifiersep> value ( encoded <identifiersep> value ) ; } } \n \t2 } catch ( runtime <identifiersep> exception ex ) { \n <ect>
\t2 try { \n \t3 ret = long . parse <identifiersep> long ( value ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t3 ret = default <identifiersep> vale ; \n <ect>
public void stop ( ) { \n \t1 <comment> \n \t1 stop <identifiersep> time . set ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t1 <comment> \n <ect>
\t3 log . info ( <string_literal> ) ; \n \t3 return response . status ( response . status . bad <identifiersep> request ) . build ( ) ; } \n \t2 if ( instance . get <identifiersep> service <identifiersep> type ( ) . is <identifiersep> dynamic ( ) ) \n \t2 { \n <ect>
<comment> \n \t1 @ override \n \t1 public void deactivate ( ) { \n <ect>
\t4 outcome = ( ( transactional <identifiersep> state ) state ) . get <identifiersep> outcome ( ) ; \n \t3 } else if ( state instanceof outcome ) { \n \t4 outcome = ( outcome ) state ; \n \t3 } else { \n <ect>
\t1 { \n \t2 try { \n \t3 listener . on <identifiersep> request <identifiersep> sent ( ) ; } \n \t2 catch ( throwable t ) { \n <ect>
\t5 logger . info ( <string_literal> + file . get <identifiersep> absolute <identifiersep> path ( ) \n \t8 + <string_literal> ) ; \n \t5 store <identifiersep> version <identifiersep> manager . sync <identifiersep> internal <identifiersep> state <identifiersep> from <identifiersep> file <identifiersep> system ( true ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 <comment> \n \t1 private class blocked <identifiersep> connection <identifiersep> handler implements blocked <identifiersep> listener { \n \t2 @ override \n \t2 public void handle <identifiersep> blocked ( string reason ) throws io <identifiersep> exception { \n <ect>
\t3 logger . debug ( <string_literal> , id ) ; \n \t3 api . image <identifiersep> api ( ) . delete ( numeric <identifiersep> id ) ; \n \t3 return true ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 if ( ! execute <identifiersep> test <identifiersep> batch ( drone , batch , failed <identifiersep> test <identifiersep> results ) ) { \n \t4 failed <identifiersep> test <identifiersep> results . add ( batch ) ; } \n \t3 } finally { \n \t3 sw . stop ( ) ; \n <ect>
\t4 file commit <identifiersep> file = new file ( kylin <identifiersep> config . get <identifiersep> kylin <identifiersep> home ( ) , commit <identifiersep> sha1file ) ; \n \t4 if ( commit <identifiersep> file . exists ( ) ) { \n \t5 file <identifiersep> utils . copy <identifiersep> file <identifiersep> to <identifiersep> directory ( commit <identifiersep> file , export <identifiersep> dir ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 break \n \t1 except : \n \t1 logger . exception ( <string_literal> ) \n \t1 raise \n <ect>
\t6 logger . debug ( <string_literal> , file . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t6 write <identifiersep> to <identifiersep> zip ( zos , file ) ; } } } \n \t3 open <identifiersep> zip . set <identifiersep> enabled ( true ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 else if ( bindable . is <identifiersep> abstract ( ) ) { \n \t1 log . debug ( <string_literal> , bindable . get <identifiersep> fully <identifiersep> qualified <identifiersep> name ( ) ) ; \n \t1 return false ; } \n \t1 else if ( bindable . is <identifiersep> final ( ) ) { \n <ect>
\t2 } finally { \n \t2 try { \n \t3 tmp . dispose ( ) ; \n \t2 } catch ( tika <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 <comment> \n \t3 return new closing <identifiersep> file <identifiersep> output <identifiersep> stream ( this <identifiersep> file , append , notify <identifiersep> indexer <identifiersep> after <identifiersep> closing ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 logger . normal ( this , <string_literal> + file <identifiersep> util . get <identifiersep> canonical <identifiersep> file ( backup <identifiersep> bookmarks <identifiersep> file ) ) ; \n \t5 <comment> \n \t5 read <identifiersep> bookmarks ( main <identifiersep> category , default <identifiersep> bookmarks ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 final named <identifiersep> data <identifiersep> schema filtered <identifiersep> schema = filters . remove <identifiersep> by <identifiersep> predicate ( ( named <identifiersep> data <identifiersep> schema ) original <identifiersep> schema , \n <number_literal> predicate , filter <identifiersep> parser ) ; \n \t2 if ( filter <identifiersep> parser . has <identifiersep> error ( ) ) \n \t2 { \n <ect>
\t3 <comment> \n \t3 logger . trace ( <string_literal> , recovery <identifiersep> target ) ; \n \t3 return store . metadata <identifiersep> snapshot . empty ; \n \t2 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t3  <identifiersep> host . link <identifiersep> local <identifiersep> network = link <identifiersep> local . get <identifiersep> uuid ( conn ) ; \n \t2 } catch ( xen <identifiersep> api <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t2 } catch ( xml <identifiersep> rpc <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 log . debug ( <string_literal> + query + <string_literal> ) ; \n \t2 int rc = stmt . execute <identifiersep> update ( query ) ; \n \t2 log . info ( <string_literal> + rc + <string_literal> ) ; } \n \t2 log . info ( <string_literal> + txnids ) ; \n <ect>
\t3 s <identifiersep> logger . error ( <string_literal> + username + <string_literal> + response <identifiersep> code + <string_literal> + url ) ; \n \t3 return - 1 ; } \n \t2  <identifiersep> secret <identifiersep> key . set ( execute <identifiersep> registration ( server , username , username ) ) ; \n \t2 if (  <identifiersep> secret <identifiersep> key . get ( ) == null ) { \n <ect>
\t9 job <identifiersep> graph <identifiersep> listener . on <identifiersep> added <identifiersep> job <identifiersep> graph ( job <identifiersep> id ) ; \n \t8 } catch ( throwable t ) { \n \t9 log . error ( <string_literal> , t ) ; } } \n \t6 } catch ( exception e ) { \n <ect>
\t1 file key <identifiersep> dir = sub <identifiersep> directory . keys . get <identifiersep> child <identifiersep> file ( this . get <identifiersep> name ( ) ) ; \n \t1 if ( key <identifiersep> dir . exists ( ) ) { \n \t1 for ( file f : key <identifiersep> dir . list <identifiersep> files ( ) ) { \n \t2 if ( f . delete ( ) ) { \n <ect>
\t2 if ( ! node <identifiersep> iterator . has <identifiersep> next ( ) || ! ( node = node <identifiersep> iterator . next ( ) ) . is <identifiersep> resource ( ) ) { \n \t3 logger . info ( <string_literal> ) ; \n \t3 return null ; } \n \t2 predicate <identifiersep> uri = node . as <identifiersep> resource ( ) . get <identifiersep> uri ( ) ; \n <ect>
\t3 if ( index <identifiersep> of <identifiersep> dot > 0 ) { \n \t4 string first <identifiersep> component = key . substring ( 0 , index <identifiersep> of <identifiersep> dot ) ; \n \t4 string other <identifiersep> components = key . substring ( index <identifiersep> of <identifiersep> dot + 1 , key . length ( ) ) ; \n \t4 result = cache . object <identifiersep> for <identifiersep> key ( first <identifiersep> component ) ; \n <ect>
\t3 try { \n \t4 connection . unsubscribe ( new string [ ] { topics [ i ] . name ( ) . to <identifiersep> string ( ) } ) ; \n \t4 fail ( <string_literal> ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 public < t extends core <identifiersep> screen <identifiersep> layer > t create <identifiersep> screen ( string screen <identifiersep> uri , class < t > expected <identifiersep> type ) { \n \t2 set < resource <identifiersep> urn > urns = asset <identifiersep> manager . resolve ( screen <identifiersep> uri , ui <identifiersep> element . class ) ; \n \t2 switch ( urns . size ( ) ) { \n \t3 case 0 : \n <ect>
\t1 <comment> \n \t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . nonacidpart + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n \t1 test <identifiersep> txn <identifiersep> commands2 . run <identifiersep> worker ( hive <identifiersep> conf ) ; \n \t1 rs = run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . nonacidpart + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n <ect>
\t3 results . put ( num <identifiersep> threads , seconds ) ; \n \t3 log . info ( <string_literal> , broker <identifiersep> service . get <identifiersep> admin <identifiersep> view ( ) . get <identifiersep> total <identifiersep> enqueue <identifiersep> count ( ) ) ; } \n \t2 broker <identifiersep> service . stop ( ) ; \n \t2 broker <identifiersep> service . wait <identifiersep> until <identifiersep> stopped ( ) ; \n <ect>
\t5 deleted <identifiersep> date = date <identifiersep> util . parse <identifiersep> date <identifiersep> string ( s <identifiersep> gmt <identifiersep> time <identifiersep> zone , deleted <identifiersep> ts ) ; } \n \t4 usage <identifiersep> records . add ( new usage <identifiersep> vpn <identifiersep> user <identifiersep> vo ( zone <identifiersep> id , acct <identifiersep> id , d <identifiersep> id , user <identifiersep> id , user <identifiersep> name , created <identifiersep> date , deleted <identifiersep> date ) ) ; } \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t2 byte code = codes . get ( arm <identifiersep> mode ) ; \n \t2 if ( code == null ) { \n \t3 logger . warn ( <string_literal> , arm <identifiersep> mode ) ; \n \t2 } else if ( ( pin <identifiersep> code == null ) || ( pin <identifiersep> code . length ( ) != <number_literal> ) ) { \n <ect>
\t7 request <identifiersep> uri = change <identifiersep> uri ( request <identifiersep> uri , null , 0 , null ) ; } \n \t6 if ( request <identifiersep> uri . get <identifiersep> path ( ) == null || request <identifiersep> uri . get <identifiersep> path ( ) . length ( ) < = 0 ) { \n \t7 <comment> \n \t7 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n <ect>
\t2 if ( item . request <identifiersep> sender == null ) { \n \t3 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> + source + <string_literal> + uid ) ; \n \t3 return false ; } \n \t2 if ( item . routed <identifiersep> to == null ) { \n <ect>
\t2 reset <identifiersep> mock ( count ) ; \n \t2 stop <identifiersep> watch watch = new stop <identifiersep> watch ( ) ; \n \t2 execute ( count ) ; \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( ) ; \n <ect>
\t2 if ( dim >= 0 ) { \n \t3 zibase . send <identifiersep> command ( this . get <identifiersep> id ( ) , action , protocol , dim , 1 ) ; \n \t2 } else { \n \t3 zibase . send <identifiersep> command ( this . get <identifiersep> id ( ) , action , protocol ) ; } \n <ect>
\t1 if ( krb <identifiersep> service <identifiersep> principal <identifiersep> name == null ) \n \t1 krb <identifiersep> service <identifiersep> principal <identifiersep> name = <string_literal> ; \n \t1 system . set <identifiersep> property ( <string_literal> , <string_literal> ) ; \n \t1 log . info ( <string_literal> ) ; \n <ect>
\t2 input . close ( ) ; \n \t2 reader . close ( ) ; \n \t2 exit <identifiersep> value = p . wait <identifiersep> for ( ) ; \n \t2 log . debug ( <string_literal> + exit <identifiersep> value ) ; \n <ect>
\t1 try { \n \t1 log . debug ( <string_literal> ) ; \n \t1 verify <identifiersep> type ( get <identifiersep> timestamp <identifiersep> type ( ) , <string_literal> , null ) ; \n \t1 } finally { \n <ect>
\t2 volumes . add ( convert <identifiersep> volume <identifiersep> info ( volume <identifiersep> info ) ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t5 compound <identifiersep> root old <identifiersep> root = old <identifiersep> stack . get <identifiersep> root ( ) ; \n \t5 value <identifiersep> stack current <identifiersep> stack = invocation . get <identifiersep> stack ( ) ; \n \t5 compound <identifiersep> root root = current <identifiersep> stack . get <identifiersep> root ( ) ; \n \t5 root . add <identifiersep> all ( 0 , old <identifiersep> root ) ; \n <ect>
\t3 if ( queue <identifiersep> view != null ) { \n \t4 log . info ( <string_literal> + get <identifiersep> jms <identifiersep> destination ( ) + <string_literal> + message <identifiersep> id + <string_literal> + <string_literal> + destination ) ; \n \t4 queue <identifiersep> view . move <identifiersep> message <identifiersep> to ( message <identifiersep> id , destination ) ; \n \t3 } else { \n <ect>
\t3 try { \n \t4 while ( flag ) { \n \t5 vote v = null ; \n \t5 peer . set <identifiersep> peer <identifiersep> state ( server <identifiersep> state . looking ) ; \n <ect>
\t3 throw new runtime <identifiersep> exception ( msg ) ; } \n \t2 cluster <identifiersep> vo cluster =  <identifiersep> cluster <identifiersep> dao . find <identifiersep> by <identifiersep> id ( cluster <identifiersep> id ) ; \n \t2 if ( cluster == null || ( cluster . get <identifiersep> hypervisor <identifiersep> type ( ) != hypervisor <identifiersep> type . bare <identifiersep> metal ) ) { \n <ect>
\t2 request <identifiersep> nonce <identifiersep> timer = new nonce <identifiersep> timer ( nonce <identifiersep> timer <identifiersep> type . requested , node ) ; \n \t2 request <identifiersep> nonce <identifiersep> message = message ; } \n \t1 synchronized void received <identifiersep> nonce <identifiersep> from <identifiersep> device ( byte [ ] nonce <identifiersep> bytes ) { \n \t2 if ( request <identifiersep> nonce <identifiersep> timer == null ) { \n <ect>
\t2 log . info ( <string_literal> ) ; } \n \t1 private void delete ( file f ) { \n \t2 if ( f . is <identifiersep> file ( ) ) { \n \t3 if ( ! f . delete ( ) ) { \n <ect>
\t2 locale locale = null ; \n \t2 if ( language <identifiersep> code != null && ! language <identifiersep> code . is <identifiersep> empty ( ) ) { \n \t3 locale = languages . to <identifiersep> locale ( locale . for <identifiersep> language <identifiersep> tag ( language <identifiersep> code ) ) ; \n \t3 if ( log && locale == null ) { \n <ect>
\t3 return no ( ) ; } \n \t2 final string principal = c . get <identifiersep> principal ( ) . get <identifiersep> id ( ) ; \n \t2 final local <identifiersep> date on <identifiersep> or <identifiersep> after = local <identifiersep> date . now ( ) . minus ( trusted <identifiersep> properties . get <identifiersep> expiration ( ) , \n \t4 date <identifiersep> time <identifiersep> utils . to <identifiersep> chrono <identifiersep> unit ( trusted <identifiersep> properties . get <identifiersep> time <identifiersep> unit ( ) ) ) ; \n <ect>
\t1 protected web <identifiersep> container find <identifiersep> external <identifiersep> web <identifiersep> container ( ) { \n \t2 bundle <identifiersep> context servlet <identifiersep> bundle <identifiersep> context = managed <identifiersep> service <identifiersep> reference . get <identifiersep> bundle ( ) . get <identifiersep> bundle <identifiersep> context ( ) ; \n \t2 service <identifiersep> reference web <identifiersep> container <identifiersep> reference = servlet <identifiersep> bundle <identifiersep> context . get <identifiersep> service <identifiersep> reference ( web <identifiersep> container . class . get <identifiersep> name ( ) ) ; \n \t2 if ( web <identifiersep> container <identifiersep> reference == null ) { \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t3 run <identifiersep> with <identifiersep> exceptions ( ) ; \n \t2 } catch ( backend <identifiersep> exception e ) { \n <ect>
\t1 @ refresh <identifiersep> scope \n \t1 public services <identifiersep> manager services <identifiersep> manager ( @ qualifier ( <string_literal> ) final service <identifiersep> registry service <identifiersep> registry ) { \n \t2 switch ( cas <identifiersep> properties . get <identifiersep> service <identifiersep> registry ( ) . get <identifiersep> management <identifiersep> type ( ) ) { \n \t3 case domain : \n <ect>
\t3 <comment> \n \t3 db <identifiersep> conn . rollback ( ) ; } } \n \t2 log . info ( <string_literal> + num <identifiersep> txns <identifiersep> aborted + <string_literal> ) ; } \n \t1 } catch ( sql <identifiersep> exception ex ) { \n <ect>
public string name ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <string_literal> ) ; } \n public void set <identifiersep> name ( string value ) { \n <ect>
\t2 try { \n \t3 fos = new file <identifiersep> output <identifiersep> stream ( file <identifiersep> to <identifiersep> save ) ; \n \t3 stream <identifiersep> util . io ( resource . get <identifiersep> input <identifiersep> stream ( ) , fos , true , true ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 return false ; } \n \t3 string dest = props . get <identifiersep> property ( <string_literal> ) ; \n \t3 if ( dest == null ) { \n \t4 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t3 eo <identifiersep> database <identifiersep> context database <identifiersep> context = null ; \n \t3 try { \n \t4 database <identifiersep> context = eo <identifiersep> database <identifiersep> context . registered <identifiersep> database <identifiersep> context <identifiersep> for <identifiersep> model ( model , editing <identifiersep> context ) ; } \n \t3 catch ( illegal <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 if ( !  <identifiersep> queue . is <identifiersep> empty ( ) ) { \n \t5 <comment> \n <ect>
\t4 . add ( new <identifiersep> node ( <string_literal> ) ) \n \t2 ) . build ( ) ; \n \t2 cluster <identifiersep> state = allocation . reroute ( cluster <identifiersep> state , <string_literal> ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) . size ( ) , equal <identifiersep> to ( 0 ) ) ; \n <ect>
\t4 if ( check <identifiersep> access ( <string_literal> , doc , context ) == false ) { \n \t5 throw new x <identifiersep> wiki <identifiersep> exception ( x <identifiersep> wiki <identifiersep> exception . module <identifiersep> xwiki <identifiersep> access , \n \t6 x <identifiersep> wiki <identifiersep> exception . error <identifiersep> xwiki <identifiersep> access <identifiersep> denied , <string_literal> + doc ) ; } \n \t3 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t6 list < element > result = new array <identifiersep> list < element > ( 1 ) ; \n \t6 result . add ( mdd . get <identifiersep> root <identifiersep> element ( ) ) ; \n \t6 return result ; \n \t5 } else { \n <ect>
\t5 <comment> \n \t5 context <identifiersep> set = true ; \n \t5 remoting <identifiersep> context . clear ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 if ( vm <identifiersep> id != null ) { \n \t5 user <identifiersep> vm <identifiersep> vo vm <identifiersep> instance =  <identifiersep> user <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t5 domain <identifiersep> record =  <identifiersep> domain <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm <identifiersep> instance . get <identifiersep> domain <identifiersep> id ( ) ) ; \n \t5 if ( domain <identifiersep> record == null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void handle <identifiersep> application <identifiersep> command <identifiersep> request ( serial <identifiersep> message serial <identifiersep> message , int offset , int endpoint ) { \n <ect>
\t3 unpronounceable <identifiersep> pos <identifiersep> regex = pattern . compile ( regex ) ; \n \t2 } catch ( pattern <identifiersep> syntax <identifiersep> exception e ) { \n \t3 logger . error ( string . format ( <string_literal> , regex ) ) ; \n \t3 unpronounceable <identifiersep> pos <identifiersep> regex = pattern . compile ( default <identifiersep> regex ) ; } \n <ect>
\t6 string cf = value . get <identifiersep> deployment ( ) . get <identifiersep> cfs ( ) [ i ] . get <identifiersep> class ( ) . get <identifiersep> name ( ) ; \n \t6 string jndi = value . get <identifiersep> deployment ( ) . get <identifiersep> cf <identifiersep> jndi <identifiersep> names ( ) [ i ] ; \n \t6 mdr . get <identifiersep> value ( ) . unregister <identifiersep> jndi <identifiersep> mapping ( value . get <identifiersep> deployment ( ) . get <identifiersep> url ( ) . to <identifiersep> external <identifiersep> form ( ) , cf , jndi ) ; \n \t5 } catch ( throwable nfe ) { \n <ect>
\t4 } else { \n \t5 logger . warn ( <string_literal> , \n \t7 arrays . to <identifiersep> string ( api <identifiersep> valid <identifiersep> priority <identifiersep> list ) , priority ) ; } \n \t3 } catch ( exception exp ) { \n <ect>
\t2 } ; \n \t2 this . message <identifiersep> receiver <identifiersep> listener = new message <identifiersep> receiver <identifiersep> listener <identifiersep> impl ( get <identifiersep> endpoint ( ) , get <identifiersep> processor ( ) , get <identifiersep> exception <identifiersep> handler ( ) ) ; } \n \t1 @ override \n \t1 protected void do <identifiersep> start ( ) throws exception { \n <ect>
\t1 try { \n \t1 for ( input <identifiersep> split split : get <identifiersep> parquet <identifiersep> input <identifiersep> format ( ) . get <identifiersep> splits ( job ) ) { \n \t2 length += split . get <identifiersep> length ( ) ; } \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 for ( net <identifiersep> data . event <identifiersep> message event : message . get <identifiersep> event <identifiersep> list ( ) ) { \n \t4 try { \n \t5 process <identifiersep> event ( event ) ; \n \t4 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t6 schedule <identifiersep> reconnect ( e ) ; } \n \t4 } ) ; \n \t2 try { \n \t3 if ( ! connect <identifiersep> latch . await ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n <ect>
\t2 try { \n \t3 module = class <identifiersep> obj . new <identifiersep> instance ( ) ; \n \t2 } catch ( exception ex ) { \n \t3 string class <identifiersep> name = uri . substring ( arq <identifiersep> constants . java <identifiersep> class <identifiersep> uri <identifiersep> scheme . length ( ) ) ; \n <ect>
\t3 public long get <identifiersep> value ( ) { \n \t4 try { \n \t5 return metrics . get <identifiersep> rolling <identifiersep> count ( event <identifiersep> thunk . call ( ) ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> field <identifiersep> error error ) { \n <ect>
\t4 log . debug ( <string_literal> + element <identifiersep> or <identifiersep> window . content <identifiersep> window . location . href ) ; \n \t3 } else { \n \t4 log . debug ( <string_literal> + this . get <identifiersep> current <identifiersep> window ( true ) . location ) ; } \n \t2 } catch ( e ) { \n <ect>
\t3 if ( system . get <identifiersep> property ( common <identifiersep> constants . prop <identifiersep> overwrite <identifiersep> config ) != null ) { \n \t4 logger . info ( <string_literal> ) ; \n \t3 } else if ( new <identifiersep> agent <identifiersep> config . exists ( ) ) { \n \t4 logger . warn ( <string_literal> , agent <identifiersep> config . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n <ect>
\t3 success = super . remove ( id ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) { \n \t3 success = false ; \n <ect>
\t5 rs . close ( ) ; } \n \t4 if ( pstmt != null ) { \n \t5 pstmt . close ( ) ; } \n \t3 } catch ( sql <identifiersep> exception e ) { } } \n <ect>
\t3 <comment> \n \t3 string core <identifiersep> name = <string_literal> + dc <identifiersep> start . get <identifiersep> year <identifiersep> utc ( ) ; \n \t3 http <identifiersep> solr <identifiersep> server statistics <identifiersep> year <identifiersep> server = create <identifiersep> core ( ( http <identifiersep> solr <identifiersep> server ) solr , core <identifiersep> name ) ; \n \t3 system . out . println ( <string_literal> + total <identifiersep> records + <string_literal> + core <identifiersep> name ) ; \n <ect>
\t2 if ( fs != null ) { \n \t3 try { \n \t3 fs . close ( ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t2 if ( rollback <identifiersep> logging <identifiersep> level == logging <identifiersep> level . off ) { \n \t3 return ; \n \t2 } else if ( rollback <identifiersep> logging <identifiersep> level == logging <identifiersep> level . error && log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n \t3 if ( rollback <identifiersep> only ) { \n <ect>
\t4 string module <identifiersep> name = string . format ( <string_literal> , receiving <identifiersep> module . get <identifiersep> id ( ) , receiving <identifiersep> module . get <identifiersep> version ( ) ) ; \n \t4 path final <identifiersep> path = path <identifiersep> manager . get <identifiersep> instance ( ) . get <identifiersep> home <identifiersep> mod <identifiersep> path ( ) . normalize ( ) . resolve ( module <identifiersep> name ) ; \n \t4 if ( final <identifiersep> path . normalize ( ) . starts <identifiersep> with ( path <identifiersep> manager . get <identifiersep> instance ( ) . get <identifiersep> home <identifiersep> mod <identifiersep> path ( ) ) ) { \n \t5 if ( files . exists ( final <identifiersep> path ) ) { \n <ect>
\t3 } catch ( io <identifiersep> exception e ) { \n \t4 logger . warn ( <string_literal> , e ) ; \n \t4 return ; } \n \t3 if ( is <identifiersep> body <identifiersep> empty ( o ) ) { \n <ect>
\t2 if ( null == this . key <identifiersep> store ) { \n \t3 string file <identifiersep> name = system . get <identifiersep> property ( javax <identifiersep> net <identifiersep> ssl <identifiersep> key <identifiersep> store , <string_literal> ) ; <comment> \n \t3 string file <identifiersep> type = system . get <identifiersep> property ( javax <identifiersep> net <identifiersep> ssl <identifiersep> key <identifiersep> store <identifiersep> type , <comment> \n \t5 file <identifiersep> name . to <identifiersep> lower <identifiersep> case ( locale . english ) . ends <identifiersep> with ( <string_literal> ) ? pkcs12 : <string_literal> ) ; <comment> \n <ect>
\t1 if ( null != header <identifiersep> row ) \n \t2 col <identifiersep> name = ( string ) header <identifiersep> row . get <identifiersep> row ( ) [ col <identifiersep> num ] ; \n \t1 column <identifiersep> description cd = new column <identifiersep> description <identifiersep> impl ( col <identifiersep> name , type . to <identifiersep> string ( ) , col <identifiersep> num ) ; \n \t1 header . add ( cd ) ; } \n <ect>
\t2 } else { \n \t3 consumer <identifiersep> destination = session . create <identifiersep> queue ( get <identifiersep> consumer <identifiersep> subject ( ) ) ; \n \t3 producer <identifiersep> destination = session . create <identifiersep> queue ( get <identifiersep> producer <identifiersep> subject ( ) ) ; } \n \t2 log . info ( <string_literal> + consumer <identifiersep> destination + <string_literal> + consumer <identifiersep> destination . get <identifiersep> class ( ) ) ; \n <ect>
\t2 chk <identifiersep> insert <identifiersep> sender is ; \n \t2 long uid = make <identifiersep> uid ( ) ; \n \t2 insert <identifiersep> tag tag = new insert <identifiersep> tag ( false , insert <identifiersep> tag . start . local , null , real <identifiersep> time <identifiersep> flag , uid , node ) ; \n \t2 if ( ! tracker . lock <identifiersep> uid ( uid , false , true , false , true , real <identifiersep> time <identifiersep> flag , tag ) ) { \n <ect>
\t3 <comment> \n \t3 authorize <identifiersep> service . is <identifiersep> admin ( ( context ) any ) ; \n \t3 result = true ; \n \t2 } } ; \n <ect>
\t4 } catch ( exception e ) { \n \t5 <comment> \n \t3 root = cat ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 final response < search <identifiersep> result > response = this . group <identifiersep> search <identifiersep> executor . search ( \n \t5 this . connection <identifiersep> factory , \n \t5 ldap <identifiersep> utils . new <identifiersep> ldaptive <identifiersep> search <identifiersep> filter ( this . group <identifiersep> search <identifiersep> executor . get <identifiersep> search <identifiersep> filter ( ) . get <identifiersep> filter ( ) , \n \t7 ldap <identifiersep> utils . ldap <identifiersep> search <identifiersep> filter <identifiersep> default <identifiersep> param <identifiersep> name , collection <identifiersep> utils . wrap ( user <identifiersep> entry . get <identifiersep> dn ( ) ) ) ) ; \n <ect>
\t3 log . error ( <string_literal> ) ; \n \t3 return ; } \n \t2 string idp <identifiersep> name = options . get <identifiersep> config <identifiersep> value ( param <identifiersep> idp <identifiersep> name , <string_literal> ) ; \n \t2 if ( idp <identifiersep> name . is <identifiersep> empty ( ) ) { \n <ect>
\t2 if ( num <identifiersep> unexpected > 0 ) { \n \t3 log . warn ( num <identifiersep> unexpected + <string_literal> + crosscheck <identifiersep> by + <string_literal> ) ; \n \t3 return exit <identifiersep> code <identifiersep> when <identifiersep> mismatch ; \n \t2 } else { \n <ect>
\t3 builder . size ( drive . get <identifiersep> size ( ) / ( float ) ( <number_literal> * <number_literal> ) ) ; \n \t2 } catch ( null <identifiersep> pointer <identifiersep> exception e ) { \n \t3 logger . debug ( <string_literal> , input . get <identifiersep> drive <identifiersep> uuid ( ) ) ; \n \t2 } catch ( unchecked <identifiersep> execution <identifiersep> exception e ) { \n <ect>
\t2 ensure <identifiersep> green ( <string_literal> ) ; <comment> \n \t2 client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> refresh ( <string_literal> ) . get ( ) ; \n \t2 <comment> \n \t2 num <identifiersep> shards number <identifiersep> of <identifiersep> shards = get <identifiersep> num <identifiersep> shards ( <string_literal> ) ; \n <ect>
\t2 j <identifiersep> button <identifiersep> operator jbo = new j <identifiersep> button <identifiersep> operator ( mwo , <string_literal> ) ; \n \t2 jbo . push <identifiersep> no <identifiersep> block ( ) ; \n \t2 new timeout ( <string_literal> , <number_literal> ) . sleep ( ) ; } \n \t1 public void test <identifiersep> generate <identifiersep> report <identifiersep> button ( ) throws io <identifiersep> exception { \n <ect>
\t1 private string encode <identifiersep> param ( string value ) { \n \t2 try { \n \t3 return url <identifiersep> encoder . encode ( value , <string_literal> ) . replace <identifiersep> all ( <string_literal> , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 try { \n \t2 if ( cleanup <identifiersep> after <identifiersep> test ( ) ) setup ( ) ; \n \t2 else assert cleanup <identifiersep> after <identifiersep> method ( ) : <string_literal> ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 string log <identifiersep> level = null ; \n \t2 if ( logger <identifiersep> name != null && ! logger <identifiersep> name . is <identifiersep> empty ( ) ) { \n \t3 object logger = get <identifiersep> logger . invoke ( null , logger <identifiersep> name ) ; \n \t3 if ( logger != null ) { \n <ect>
\t2 wrap <identifiersep> up <identifiersep> request <identifiersep> latch . count <identifiersep> down ( ) ; \n \t2 <comment> \n \t2 wrap <identifiersep> up <identifiersep> finish <identifiersep> latch . await ( ) ; \n <ect>
\t4 modified <identifiersep> test <identifiersep> files . add ( file <identifiersep> name ) ; } } } } \n \t1 } finally { \n \t2 fr . close ( ) ; } \n \t1 } else { \n <ect>
\t2 { \n \t3 upstream = selection <identifiersep> strategy <identifiersep> pipeline . best <identifiersep> upstream <identifiersep> database ( ) ; } \n \t2 catch ( upstream <identifiersep> database <identifiersep> selection <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 request <identifiersep> type . a . apply ( query ) ? answers : null \n \t1 ) ; \n \t1 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ignore ) { \n \t1 } catch ( final exception e ) { \n <ect>
\t2 <comment> \n \t2 log . info ( <string_literal> ) ; \n \t2 c . wait <identifiersep> until ( c . get <identifiersep> time ( ) + <number_literal> ) ; \n \t2 <comment> \n <ect>
\t4 return ; } \n \t3 <comment> \n \t3 long left = get <identifiersep> time <identifiersep> left ( ) ; \n \t3 if ( left > 0 ) { \n <ect>
\t3 log . debugf ( <string_literal> , message <identifiersep> helper . info <identifiersep> string ( persister , ids , session . get <identifiersep> factory ( ) ) ) ; } \n \t2 query <identifiersep> parameters qp = build <identifiersep> query <identifiersep> parameters ( id , ids , optional <identifiersep> object , lock <identifiersep> options ) ; \n \t2 try { \n \t3 final list results = loader <identifiersep> to <identifiersep> use . do <identifiersep> query <identifiersep> and <identifiersep> initialize <identifiersep> non <identifiersep> lazy <identifiersep> collections ( session , qp , false ) ; \n <ect>
<comment> \n \t1 protected cms <identifiersep> object check <identifiersep> basic <identifiersep> authorization ( http <identifiersep> servlet <identifiersep> request req ) { \n <ect>
\t4 pub <identifiersep> key <identifiersep> datastore . put ( hash , key , ! can <identifiersep> write <identifiersep> datastore ) ; } \n \t3 pub <identifiersep> key <identifiersep> datacache . put ( hash , key , ! can <identifiersep> write <identifiersep> datastore ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t6 connections [ i ] = new socket ( proxies [ i ] . address , proxies [ i ] . port ) ; \n \t5 connection <identifiersep> readers [ i ] = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( connections [ i ] . get <identifiersep> input <identifiersep> stream ( ) ) ) ; \n \t5 connection <identifiersep> writers [ i ] = new buffered <identifiersep> writer ( new output <identifiersep> stream <identifiersep> writer ( connections [ i ] . get <identifiersep> output <identifiersep> stream ( ) ) ) ; \n \t4 } catch ( exception ex ) { \n <ect>
\t5 file <identifiersep> system . delete ( new path ( base <identifiersep> path . get <identifiersep> parent ( ) + <string_literal> + file <identifiersep> path ) , true ) ; } } } } \n \t1 @ override \n \t1 public string copy <identifiersep> to <identifiersep> another <identifiersep> meta ( kylin <identifiersep> config src <identifiersep> config , kylin <identifiersep> config dst <identifiersep> config ) throws io <identifiersep> exception { \n \t2 if ( base <identifiersep> dir . contains ( <string_literal> ) ) { \n <ect>
\t2 callback . on <identifiersep> done ( ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> error ( final throwable e ) \n \t1 { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> level <identifiersep> filter ( ) throws joran <identifiersep> exception { \n \t2 configure ( classic <identifiersep> test <identifiersep> constants . joran <identifiersep> input <identifiersep> prefix + <string_literal> ) ; \n \t2 <comment> \n <ect>
\t3 if ( ( token . index <identifiersep> of ( <string_literal> ) != - 1 || token . index <identifiersep> of ( <string_literal> ) != - 1 ) && token . starts <identifiersep> with ( <string_literal> ) ) { \n \t4 <comment> \n \t4 token = token . replace <identifiersep> all ( token <identifiersep> parts [ 0 ] , <string_literal> + wo <identifiersep> replacement <identifiersep> marker + token <identifiersep> part ) ; \n <ect>
\t5 message <identifiersep> batch message <identifiersep> batch = message <identifiersep> buffer . drain ( ) ; \n \t5 flush <identifiersep> request ( channel , message <identifiersep> batch ) ; } } } } \n \t1 private boolean discard <identifiersep> check ( long pending <identifiersep> time , long timeout <identifiersep> ms , int message <identifiersep> size ) { \n \t2 if ( timeout <identifiersep> ms != - 1 && pending <identifiersep> time >= timeout <identifiersep> ms ) { \n <ect>
\t2 record result = root . internal <identifiersep> insert ( record ) ; \n \t2 root . internal <identifiersep> check <identifiersep> node <identifiersep> deep ( ) ; \n \t2 if ( logging ( ) ) \n \t2 { \n <ect>
\t1 @ post \n \t1 @ path ( <string_literal> ) \n \t1 @ produces ( media <identifiersep> type . text <identifiersep> plain ) \n \t1 public response test ( ) { \n <ect>
\t1 @ override \n \t1 public void collect ( context context , most <identifiersep> recent <identifiersep> checksum info ) throws sql <identifiersep> exception { \n \t2 bitstream bitstream = info . get <identifiersep> bitstream ( ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t2 yk [ 0 ] = y ; \n \t2 yk [ 1 ] = k ; \n \t2 <comment> \n \t2 <comment> \n <ect>
\t2 if ( listener != null ) { \n \t3 register <identifiersep> listener ( req . get <identifiersep> sequence ( ) , listener ) ; } \n \t2 if (  <identifiersep> transfer <identifiersep> mode ) { \n <ect>
\t7 if ( val == null ) { \n \t8 return null ; } \n \t7 state = new string <identifiersep> type ( val ) ; \n \t6 } else { \n <ect>
\t2 future . cancel ( true ) ; \n \t2 assert . fail ( <string_literal> ) ; \n \t1 } finally { \n \t2 executor . shutdown <identifiersep> now ( ) ; } \n <ect>
\t2 if ( load <identifiersep> balancing <identifiersep> rules == null || load <identifiersep> balancing <identifiersep> rules . is <identifiersep> empty ( ) ) { \n \t3 return true ; } \n \t2 external <identifiersep> load <identifiersep> balancer <identifiersep> device <identifiersep> vo lb <identifiersep> device <identifiersep> vo = get <identifiersep> external <identifiersep> load <identifiersep> balancer <identifiersep> for <identifiersep> network ( network ) ; \n \t2 if ( lb <identifiersep> device <identifiersep> vo == null ) { \n <ect>
\t3 if ( value != null ) { \n \t4 try { \n \t5 mode = automatic <identifiersep> watch <identifiersep> mode . value <identifiersep> of ( value . to <identifiersep> upper <identifiersep> case ( ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 security . remove <identifiersep> provider ( bouncy <identifiersep> castle <identifiersep> provider . provider <identifiersep> name ) ; } \n \t2 final provider [ ] providers = security . get <identifiersep> providers ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 for ( final provider provider : providers ) { \n <ect>
\t1 override fun is <identifiersep> valid ( ) = true \n \t1 override fun get <identifiersep> context ( ) : psi <identifiersep> element ? { \n \t2 if ( fake <identifiersep> context <identifiersep> for <identifiersep> java <identifiersep> file != null ) return fake <identifiersep> context <identifiersep> for <identifiersep> java <identifiersep> file \n \t2 if ( context ! is kt <identifiersep> element ) { \n <ect>
\t4 log . info ( <string_literal> + input <identifiersep> file . get <identifiersep> short <identifiersep> description ( ) + <string_literal> + \n \t5 line <identifiersep> count ) ; \n \t4 br . close ( ) ; \n \t4 } catch ( exception ex ) { \n <ect>
\t3 else \n \t4 items = arrays . as <identifiersep> list ( response . split ( <string_literal> ) ) ; \n \t3 return items ; \n \t2 } catch ( amazon <identifiersep> client <identifiersep> exception ace ) { \n <ect>
\t9 if ( ( vm <identifiersep> network <identifiersep> stat . get <identifiersep> bytes <identifiersep> sent ( ) == 0 ) && ( vm <identifiersep> network <identifiersep> stat . get <identifiersep> bytes <identifiersep> received ( ) == 0 ) ) { \n \t10 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t10 continue ; } \n \t9 if ( vm <identifiersep> network <identifiersep> stat <identifiersep> lock == null ) { \n <ect>
\t3 string grinder <identifiersep> jvm <identifiersep> class <identifiersep> path = class <identifiersep> path <identifiersep> processor . build <identifiersep> foremost <identifiersep> classpath <identifiersep> based <identifiersep> on <identifiersep> current <identifiersep> class <identifiersep> loader ( logger ) \n \t5 + file . path <identifiersep> separator + class <identifiersep> path <identifiersep> processor . build <identifiersep> patch <identifiersep> classpath <identifiersep> based <identifiersep> on <identifiersep> current <identifiersep> class <identifiersep> loader ( logger ) \n \t5 + file . path <identifiersep> separator + builder . build <identifiersep> custom <identifiersep> class <identifiersep> path ( true ) ; \n \t3 properties . set <identifiersep> property ( <string_literal> , grinder <identifiersep> jvm <identifiersep> class <identifiersep> path ) ; \n <ect>
\t4 if ( zk != null ) { \n \t5 try { \n \t6 if ( ! zk . close ( connection <identifiersep> timeout ) ) { \n \t7 failed = true ; \n <ect>
\t3 log . warn ( <string_literal> \n \t4 + ioe . to <identifiersep> string ( ) ) ; } } } \n \t1 if ( ! is <identifiersep> generate <identifiersep> only ( ) ) { \n \t2 execute <identifiersep> script ( filename , env ) ; \n <ect>
<comment> \n \t1 public int [ ] decrypt ( tunnel <identifiersep> build <identifiersep> reply <identifiersep> message reply , tunnel <identifiersep> creator <identifiersep> config cfg , list < integer > record <identifiersep> order ) { \n \t2 if ( reply . get <identifiersep> record <identifiersep> count ( ) != record <identifiersep> order . size ( ) ) { \n \t3 <comment> \n <ect>
\t3 string uuid = uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ; \n \t3 string broadcast <identifiersep> domain <identifiersep> range = <string_literal> ; \n \t3 if ( <string_literal> . equals ( network <identifiersep> type ) ) { \n \t4 broadcast <identifiersep> domain <identifiersep> range = <string_literal> ; } \n <ect>
\t5 . end <identifiersep> object ( ) . end <identifiersep> object ( ) . end <identifiersep> object ( ) ) ; } \n \t2 assert <identifiersep> acked ( create <identifiersep> request <identifiersep> builder ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> that ( ensure <identifiersep> green ( ) , equal <identifiersep> to ( cluster <identifiersep> health <identifiersep> status . green ) ) ; \n <ect>
\t1 dir <identifiersep> path = hdfs <identifiersep> resource <identifiersep> provider . parse <identifiersep> path ( dir <identifiersep> path ) \n \t1 if dir <identifiersep> path in ignored <identifiersep> dfs <identifiersep> dirs : \n \t2 logger . info ( <string_literal> + dir <identifiersep> path + <string_literal> ) \n \t2 return \n <ect>
\t4 false ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t1 logger . debug ( <string_literal> , bootstrapper . class . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t1 start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 final bootstrapper bootstrapper = gwt . create ( bootstrapper . class ) ; \n \t1 logger . debug ( <string_literal> , bootstrapper . class . get <identifiersep> simple <identifiersep> name ( ) , system . current <identifiersep> time <identifiersep> millis ( ) - start ) ; \n <ect>
\t5 proj . add ( trans ) ; \n \t5 trans . subscribe ( this : : on <identifiersep> asset <identifiersep> changed ) ; \n \t5 logger . info ( <string_literal> + trans ) ; \n \t4 } else { \n <ect>
\t5 } else { \n \t6 throw object <identifiersep> helper . wrap <identifiersep> runtime <identifiersep> camel <identifiersep> exception ( e ) ; } } \n \t4 <comment> \n \t4 try { \n <ect>
\t6 try { \n \t6 tm ( node <identifiersep> index ) . rollback ( ) ; \n \t6 rolled <identifiersep> back . increment <identifiersep> and <identifiersep> get ( ) ; \n \t6 } catch ( system <identifiersep> exception e1 ) { \n <ect>
\t3 logger . error ( <string_literal> ) ; \n \t3 return error ( ) ; } \n \t2 final string username = password <identifiersep> management <identifiersep> service . parse <identifiersep> token ( token ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( username ) ) { \n <ect>
\t1 public void write <identifiersep> r2rml <identifiersep> mapping ( print <identifiersep> writer writer ) { \n \t2 try { \n \t3 con . export ( new turtle <identifiersep> writer ( writer ) ) ; \n \t2 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public boolean matches ( final char <identifiersep> sequence raw <identifiersep> password , final string encoded <identifiersep> password ) { \n \t2 final string encoded <identifiersep> raw <identifiersep> password = string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( raw <identifiersep> password ) ? encode ( raw <identifiersep> password . to <identifiersep> string ( ) ) : null ; \n \t2 final boolean matched = string <identifiersep> utils . equals ( encoded <identifiersep> raw <identifiersep> password , encoded <identifiersep> password ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void saml <identifiersep> idp <identifiersep> unable <identifiersep> to <identifiersep> set <identifiersep> participant <identifiersep> stack <identifiersep> using <identifiersep> default ( throwable t ) { \n <ect>
\t7 set = new ns <identifiersep> mutable <identifiersep> set < > ( ) ; \n \t7 classes . set <identifiersep> object <identifiersep> for <identifiersep> key ( set , name ) ; } \n \t6 set . add <identifiersep> object ( e ) ; } } } \n \t3 catch ( io <identifiersep> exception e ) { \n <ect>
\t6 set <identifiersep> increase <identifiersep> payment <identifiersep> future <identifiersep> if <identifiersep> needed ( close <identifiersep> reason . remote <identifiersep> sent <identifiersep> error , msg . get <identifiersep> error ( ) . get <identifiersep> code ( ) . name ( ) ) ; \n \t6 conn . destroy <identifiersep> connection ( close <identifiersep> reason . remote <identifiersep> sent <identifiersep> error ) ; \n \t6 return ; \n \t5 default : \n <ect>
\t3 final file <identifiersep> status status ; \n \t3 try { \n \t4 status = fs . get <identifiersep> file <identifiersep> status ( path ) ; } \n \t3 catch ( io <identifiersep> exception e ) { \n <ect>
\t7 + rc . get <identifiersep> rmi <identifiersep> host ( ) + <string_literal> + rc . get <identifiersep> rmi <identifiersep> port ( ) , re ) ; } } \n \t3 <comment> \n \t3 <comment> \n \t3 if ( reg != null ) { \n <ect>
\t2 final principal user \t3 = auth <identifiersep> helper . get <identifiersep> principal <identifiersep> for <identifiersep> password ( e <identifiersep> mail <identifiersep> key , email <identifiersep> or <identifiersep> username , password ) ; \n \t2 if ( user != null ) { \n \t3 final boolean allow <identifiersep> login <identifiersep> before <identifiersep> confirmation = settings . registration <identifiersep> allow <identifiersep> login <identifiersep> before <identifiersep> confirmation . get <identifiersep> value ( ) ; \n \t3 if ( user . get <identifiersep> property ( conf <identifiersep> key ) != null && ! allow <identifiersep> login <identifiersep> before <identifiersep> confirmation ) { \n <ect>
\t1 tran . set <identifiersep> rollback <identifiersep> only ( ) ; \n \t1 return entities . unique <identifiersep> result ( new snapshot <identifiersep> info ( snapshot <identifiersep> id ) ) ; \n \t1 } catch ( transaction <identifiersep> exception | no <identifiersep> such <identifiersep> element <identifiersep> exception dbe ) { \n \t1 <comment> \n <ect>
\t6 pod . set <identifiersep> allocation <identifiersep> state ( allocation <identifiersep> state ) ; } \n \t5  <identifiersep> pod <identifiersep> dao . update ( id , pod ) ; } \n \t3 } ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t4 <comment> \n \t4 ++ attr <identifiersep> count ; \n \t4 random <identifiersep> access <identifiersep> write <identifiersep> u2 ( attr <identifiersep> count <identifiersep> pos , attr <identifiersep> count ) ; \n <ect>
\t2 + joiner . on ( <string_literal> ) . join ( args ) ) ; } \n \t1 return args [ val <identifiersep> idx ] ; } \n private class driver <identifiersep> protocol extends base <identifiersep> protocol { \n \t1 void send <identifiersep> error ( throwable error ) { \n <ect>
\t3  <identifiersep> log . debug ( <string_literal> ) ; \n \t3 properties props = sam <identifiersep> utils . parse <identifiersep> params ( line ) ; \n \t3 string value = props . get <identifiersep> property ( <string_literal> ) ; \n \t3 if ( value == null ) { \n <ect>
\t2 this . executor <identifiersep> service = executor <identifiersep> service ; } \n \t1 public void set <identifiersep> endpoint ( rabbit <identifiersep> mq <identifiersep> endpoint endpoint ) { \n \t2 this . endpoint = endpoint ; } \n \t1 public void set <identifiersep> reply <identifiersep> to ( string reply <identifiersep> to ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 ns <identifiersep> notification <identifiersep> center . default <identifiersep> center ( ) . post <identifiersep> notification ( \n \t6 ermd <identifiersep> delete <identifiersep> button . button <identifiersep> performed <identifiersep> delete <identifiersep> action , obj , user <identifiersep> info ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 secure <identifiersep> random rnd = new secure <identifiersep> random ( ) ; \n \t2 byte [ ] b = new byte [ <number_literal> ] ; \n \t2 rnd . next <identifiersep> bytes ( b ) ; \n <ect>
\t4 try { \n \t5 collapse <identifiersep> same <identifiersep> type ( record ) ; \n \t5 dfw . append ( record ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 <comment> \n \t3 } catch ( exception e ) { \n \t4 log log = i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( get <identifiersep> class ( ) ) ; \n \t4 if ( log . should <identifiersep> warn ( ) ) \n <ect>
\t7 unsigned <identifiersep> request <identifiersep> buffer . append ( <string_literal> ) ; } \n \t6 unsigned <identifiersep> request <identifiersep> buffer . append ( param <identifiersep> name ) . append ( <string_literal> ) . append ( url <identifiersep> encoder . encode ( param <identifiersep> value , <string_literal> ) ) ; } } \n \t4 if ( ( signature == null ) || ( timestamp == 0l ) ) { \n <ect>
\t4 log . warn ( <string_literal> , t ) ; } } \n \t2 final set < string > new <identifiersep> members = members ; \n \t2 if ( ! new <identifiersep> members . equals ( last <identifiersep> communicated <identifiersep> members ) ) { \n \t3 last <identifiersep> communicated <identifiersep> members = new <identifiersep> members ; \n <ect>
\t4 if ( sleep <identifiersep> between <identifiersep> send > 0 ) { \n \t5 try { \n \t6 thread . sleep ( sleep <identifiersep> between <identifiersep> send ) ; \n \t5 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 mem <identifiersep> part . clear ( ) ; \n \t3 disk <identifiersep> part . clear ( ) ; \n \t3 disk <identifiersep> part . open <identifiersep> write ( false ) ; \n \t3 if ( debug ) \n <ect>
\t2 if ( entry != null ) { \n \t3 final ldap <identifiersep> attribute consent <identifiersep> decisions = entry . get <identifiersep> attribute ( this . ldap . get <identifiersep> consent <identifiersep> attribute <identifiersep> name ( ) ) ; \n \t3 if ( consent <identifiersep> decisions != null ) { \n \t4 final collection < string > values = consent <identifiersep> decisions . get <identifiersep> string <identifiersep> values ( ) ; \n <ect>
\t4 } catch ( io <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t4 } catch ( throwable e ) { \n \t5 s <identifiersep> logger . error ( <string_literal> , e ) ; } \n <ect>
\t6 response = new files <identifiersep> response ( client . execute ( method ) ) ; } \n \t5 if ( response . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> no <identifiersep> content || \n \t6 response . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> ok ) \n \t5 { \n <ect>
\t3 logger . info ( <string_literal> , wait <identifiersep> for ) ; \n \t3 <comment> \n \t3 extra <identifiersep> docs = total <identifiersep> num <identifiersep> docs - wait <identifiersep> for ; \n \t3 indexer . continue <identifiersep> indexing ( extra <identifiersep> docs ) ; \n <ect>
\t2 schema = new <identifiersep> schema ; \n \t2 set <identifiersep> input <identifiersep> avro <identifiersep> schema ( schema ) ; \n \t2 return new required <identifiersep> field <identifiersep> response ( true ) ; \n \t1 } else { \n <ect>
\t2 load <identifiersep> balancer <identifiersep> servo <identifiersep> instance instance ; \n \t2 try { \n \t3 instance = load <identifiersep> balancer <identifiersep> servo <identifiersep> instance <identifiersep> entity <identifiersep> transform . instance . apply ( instance <identifiersep> view ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t1 @ override \n \t1 public void flush ( ) { \n \t1 preconditions . check <identifiersep> state ( state . equals ( reader <identifiersep> writer <identifiersep> state . open ) , \n \t2 <string_literal> , state ) ; \n <ect>
\t5 storage <identifiersep> resource . validate <identifiersep> post <identifiersep> upload <identifiersep> request ( signature , metadata , expires , hostname , content <identifiersep> length , uuid ) ; \n \t5 <comment> \n \t5 upload <identifiersep> entity = storage <identifiersep> resource . create <identifiersep> upload <identifiersep> entity ( uuid , metadata , content <identifiersep> length ) ; \n \t4 } catch ( invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ex ) { \n <ect>
\t5 log . debug ( <string_literal> + key + <string_literal> ) ; } } \n \t3 else { \n \t4 <comment> \n <ect>
\t3 content con = new content ( ) ; \n \t3 con . set <identifiersep> type ( format ) ; \n \t3 con . set <identifiersep> source ( bsurl ) ; \n \t3 entry . set <identifiersep> content ( con ) ; \n <ect>
\t3 if ( row <identifiersep> service != null ) { \n \t4 long timestamp = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t4 row <identifiersep> service . index ( key , column <identifiersep> family , timestamp ) ; } \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> client ( ) throws throwable { \n \t2 <comment> \n \t2 if ( performance <identifiersep> utils . get <identifiersep> property ( <string_literal> , null ) == null ) { \n <ect>
\t3 long [ ] stats = get <identifiersep> network <identifiersep> stats ( conn , cmd . get <identifiersep> private <identifiersep> ip ( ) ) ; \n \t3 network <identifiersep> usage <identifiersep> answer answer = new network <identifiersep> usage <identifiersep> answer ( cmd , <string_literal> , stats [ 0 ] , stats [ 1 ] ) ; \n \t3 return answer ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 list < index <identifiersep> request <identifiersep> builder > builders = new array <identifiersep> list < > ( ) ; \n \t2 for ( int i = 0 ; i < num <identifiersep> fields ; i ++ ) { \n \t3 builders . add ( client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , i + <string_literal> ) . set <identifiersep> source ( <string_literal> + i , i + <string_literal> ) ) ; } \n \t2 index <identifiersep> random ( true , builders ) ; \n <ect>
\t2 if ( unwrapped <identifiersep> token != token ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 connector = instance . get <identifiersep> connector ( accumulo <identifiersep> params . get <identifiersep> accumulo <identifiersep> user <identifiersep> name ( ) , unwrapped <identifiersep> token ) ; \n \t2 } else { \n <ect>
\t4 map < subscription , slow <identifiersep> consumer <identifiersep> entry > to <identifiersep> abort = new hash <identifiersep> map < subscription , slow <identifiersep> consumer <identifiersep> entry > ( ) ; \n \t4 to <identifiersep> abort . put ( sub , entry ) ; \n \t4 abort <identifiersep> subscription ( to <identifiersep> abort , abort <identifiersep> subscriber <identifiersep> connection ) ; \n \t3 } else { \n <ect>
\t2 if ( cache &&  <identifiersep> cache != null ) { \n \t3 try { \n \t4  <identifiersep> cache . put ( new element (  <identifiersep> id <identifiersep> field . get ( entity ) , entity ) ) ; \n \t3 } catch ( final exception e ) { \n <ect>
\t2 result <identifiersep> endpoint . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > list = result <identifiersep> endpoint . get <identifiersep> received <identifiersep> exchanges ( ) ; \n \t2 exchange exchange = list . get ( 0 ) ; \n \t2 object reply <identifiersep> to = exchange . get <identifiersep> in ( ) . get <identifiersep> header ( <string_literal> ) ; \n <ect>
\t2 try { \n \t2 string group <identifiersep> dn = ldap . find <identifiersep> group <identifiersep> dn ( group <identifiersep> id ) ; \n \t2 group <identifiersep> dns . add ( group <identifiersep> dn ) ; \n \t2 } catch ( naming <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 searcher . get <identifiersep> index <identifiersep> reader ( ) . dec <identifiersep> ref ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 log . error ( <string_literal> + d , ex ) ; } } \n \t2 watch . split <identifiersep> info ( <string_literal> ) ; } \n \t1 protected void generate <identifiersep> enum ( enum <identifiersep> definition e ) { \n \t2 java <identifiersep> writer out = new <identifiersep> java <identifiersep> writer ( get <identifiersep> file ( e , mode . enum ) ) ; \n <ect>
\t3 mac . update ( request . get <identifiersep> bytes ( ) ) ; \n \t3 byte [ ] encrypted <identifiersep> bytes = mac . do <identifiersep> final ( ) ; \n \t3 return base64 . encode <identifiersep> bytes ( encrypted <identifiersep> bytes ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 return jars . get <identifiersep> jar <identifiersep> path <identifiersep> for <identifiersep> class ( job <identifiersep> conf . class ) ; } \n \t1 if ( ! hadoop <identifiersep> map <identifiersep> red <identifiersep> home . ends <identifiersep> with ( file . separator ) ) { \n \t1 hadoop <identifiersep> map <identifiersep> red <identifiersep> home = hadoop <identifiersep> map <identifiersep> red <identifiersep> home + file . separator ; } \n \t1 file hadoop <identifiersep> map <identifiersep> red <identifiersep> home <identifiersep> file = new file ( hadoop <identifiersep> map <identifiersep> red <identifiersep> home ) ; \n <ect>
\t2 servlet <identifiersep> context . add <identifiersep> servlet ( new servlet <identifiersep> holder ( new my <identifiersep> http <identifiersep> servlet ( ) ) , <string_literal> ) ; \n \t2 try { \n \t3 server . start ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 if ( from . equals ( oldcon . get <identifiersep> remote <identifiersep> peer ( ) ) ) { \n \t7 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 protected collection < registered <identifiersep> service > get <identifiersep> candidate <identifiersep> services <identifiersep> to <identifiersep> match ( final string service <identifiersep> id ) { \n \t2 final string mapped <identifiersep> domain = string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( service <identifiersep> id ) ? extract <identifiersep> domain ( service <identifiersep> id ) : string <identifiersep> utils . empty ; \n \t2 logger . debug ( <string_literal> , mapped <identifiersep> domain ) ; \n \t2 final string domain = domains . contains <identifiersep> key ( mapped <identifiersep> domain ) ? mapped <identifiersep> domain : default <identifiersep> domain <identifiersep> name ; \n <ect>
\t5 ldap <identifiersep> dao . set <identifiersep> result <identifiersep> attribute <identifiersep> mapping ( ldap . get <identifiersep> attributes ( ) ) ; \n \t5 final string [ ] attributes = ldap . get <identifiersep> attributes ( ) . key <identifiersep> set ( ) . to <identifiersep> array ( new string [ ldap . get <identifiersep> attributes ( ) . key <identifiersep> set ( ) . size ( ) ] ) ; \n \t5 constraints . set <identifiersep> returning <identifiersep> attributes ( attributes ) ; \n \t4 } else { \n <ect>
\t6 convert <identifiersep> history <identifiersep> record <identifiersep> to <identifiersep> message <identifiersep> event ( recs . next ( ) , \n \t7 item ) ) ; } } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t5 if ( forks <identifiersep> for <identifiersep> channel . is <identifiersep> empty ( ) ) { \n \t6 fork <identifiersep> stacks <identifiersep> by <identifiersep> channel <identifiersep> name . remove ( main <identifiersep> channel <identifiersep> name ) ; \n \t6 protocol removed = this . main <identifiersep> channel . get <identifiersep> protocol <identifiersep> stack ( ) . remove <identifiersep> protocol ( fork . class ) ; \n \t6 if ( removed != null ) { \n <ect>
\t4 allowed = false ; \n \t3 } else { \n \t4 this . subscription = subscription ; } } \n \t2 if ( ! allowed ) { \n <ect>
\t1 <comment> \n \t1 protected void init <identifiersep> clear <identifiersep> statement ( ) { \n \t2 truncate truncate = generate <identifiersep> truncate ( table ) ; \n \t2 truncate = apply <identifiersep> consistency <identifiersep> level ( truncate , write <identifiersep> consistency <identifiersep> level ) ; \n <ect>
\t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 e . print <identifiersep> stack <identifiersep> trace ( ) ; } } } \n \t1 @ test \n \t1 public void test <identifiersep> zero <identifiersep> weight <identifiersep> quorum ( ) throws exception { \n <ect>
\t3 dn dn = ldif <identifiersep> entry . get <identifiersep> dn ( ) ; \n \t3 if ( ldif <identifiersep> entry . is <identifiersep> entry ( ) ) { \n \t4 org . apache . directory . api . ldap . model . entry . entry items = ldif <identifiersep> entry . get <identifiersep> entry ( ) ; \n \t4 root <identifiersep> dse . add ( new default <identifiersep> entry ( directory <identifiersep> service . get <identifiersep> schema <identifiersep> manager ( ) , items ) ) ; \n <ect>
\t7 on <identifiersep> error ( status , e ) ; \n \t7 return null ; } } \n \t4 } ) ; \n \t4 if ( i > 1 ) { \n <ect>
\t2 catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n \t3 <comment> \n \t3 if ( error <identifiersep> handler != null ) \n \t4 error <identifiersep> handler . handle <identifiersep> error <identifiersep> on <identifiersep> get ( this , e , key ) ; \n <ect>
\t2 <comment> \n \t2 sleep <identifiersep> time = math . min ( sleep <identifiersep> time , max <identifiersep> coalescing <identifiersep> delay ) ; \n \t2 if ( now - node . startup <identifiersep> time > minutes . to <identifiersep> millis ( <number_literal> ) ) \n \t3 if ( now - last <identifiersep> received <identifiersep> packet <identifiersep> from <identifiersep> any <identifiersep> node > node . alarm <identifiersep> time ) { \n <ect>
\t5 return new b <identifiersep> crypt <identifiersep> password <identifiersep> encoder ( properties . get <identifiersep> strength ( ) ) ; } \n \t4 logger . debug ( <string_literal> ) ; \n \t4 return new b <identifiersep> crypt <identifiersep> password <identifiersep> encoder ( properties . get <identifiersep> strength ( ) , random <identifiersep> utils . get <identifiersep> native <identifiersep> instance ( ) ) ; \n \t3 case scrypt : \n <ect>
\t3 set <identifiersep> write <identifiersep> ops ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 lock . unlock ( ) ; \n \t3 and <identifiersep> unlock = false ; \n <ect>
\t2 log . info ( <string_literal> , channel <identifiersep> name ) ; \n \t2 final client <identifiersep> session <identifiersep> channel . message <identifiersep> listener listener = new client <identifiersep> session <identifiersep> channel . message <identifiersep> listener ( ) { \n \t3 @ override \n \t3 public void on <identifiersep> message ( client <identifiersep> session <identifiersep> channel channel , message message ) { \n <ect>
\t5 case <string_literal> : \n \t6 term = new x <identifiersep> term <identifiersep> terminal <identifiersep> emulator ( in , out , this ) ; \n \t6 break ; \n \t5 default : \n <ect>
\t2 if ( null != is ) { \n \t2 is . close ( ) ; } \n \t1 } catch ( io <identifiersep> exception ioe ) { \n \t2 <comment> \n <ect>
\t5 output <identifiersep> stream . write ( buffer , 0 , n1 ) ; } \n \t4 logger . info ( <string_literal> ) ; } \n \t3 @ override \n \t3 public void on <identifiersep> all <identifiersep> data <identifiersep> read ( ) throws io <identifiersep> exception { \n <ect>
\t1 final no <identifiersep> such <identifiersep> element <identifiersep> exception ex2 = exceptions . find <identifiersep> cause ( throwable , no <identifiersep> such <identifiersep> element <identifiersep> exception . class ) ; \n \t1 if ( ex2 != null ) { \n \t1 error <identifiersep> message = ex2 . get <identifiersep> message ( ) ; \n \t1 return false ; } \n <ect>
\t3 request <identifiersep> to <identifiersep> sign = request <identifiersep> to <identifiersep> sign . to <identifiersep> lower <identifiersep> case ( ) ; \n \t3 signature = sign <identifiersep> request ( request <identifiersep> to <identifiersep> sign , s <identifiersep> secret <identifiersep> key . get ( ) ) ; \n \t3 encoded <identifiersep> signature = url <identifiersep> encoder . encode ( signature , <string_literal> ) ; \n \t3 url = developer <identifiersep> server + <string_literal> + encoded <identifiersep> api <identifiersep> key + <string_literal> + encoded <identifiersep> ip <identifiersep> fwd <identifiersep> id + <string_literal> + encoded <identifiersep> signature ; \n <ect>
\t4 if ( debug ) { logger . debug ( <string_literal> ) ; } \n \t4 do <identifiersep> inter <identifiersep> block <identifiersep> optimizations ( ) ; \n \t4 <comment> \n \t4 <comment> \n <ect>
\t6 log . debug ( <string_literal> + endpoint + <string_literal> + endpoint . get <identifiersep> camel <identifiersep> context ( ) ) ; } \n \t5 on <identifiersep> lock <identifiersep> owned ( ) ; \n \t4 } else { \n <ect>
\t4 if ( table . is <identifiersep> tournament <identifiersep> sub <identifiersep> table ( ) ) { \n \t5 logger . info ( <string_literal> + match . get <identifiersep> id ( ) + <string_literal> + table . get <identifiersep> tournament ( ) . get <identifiersep> id ( ) ) ; \n \t4 } else { \n \t5 user <identifiersep> manager . instance . get <identifiersep> user ( user <identifiersep> id ) . if <identifiersep> present ( user - > { \n <ect>
\t2 element return <identifiersep> body = null ; \n \t2 map < string , string > values = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( input <identifiersep> stream , new string [ ] { <string_literal> } ) ; \n \t2 string job <identifiersep> id = values . get ( <string_literal> ) ; \n \t2 if ( job <identifiersep> id == null ) { \n <ect>
\t3 try { \n \t4 if ( ! policy <identifiersep> model . verify (  <identifiersep> manager . get <identifiersep> model <identifiersep> controller ( ) ) ) { \n \t5 policy <identifiersep> model . update (  <identifiersep> manager . get <identifiersep> model <identifiersep> controller ( ) ) ; } \n \t3 } catch ( exception ex ) { \n <ect>
\t1 protected authentication <identifiersep> builder authenticate <identifiersep> internal ( final authentication <identifiersep> transaction transaction ) throws authentication <identifiersep> exception { \n \t2 final collection < credential > credentials = transaction . get <identifiersep> credentials ( ) ; \n \t2 logger . debug ( <string_literal> , credentials ) ; \n \t2 if ( credentials . is <identifiersep> empty ( ) ) { \n <ect>
\t4 <comment> \n \t4 fetcher . shutdown <identifiersep> fetcher ( ) ; \n \t4 fetcher . await <identifiersep> termination ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 . maximum <identifiersep> size ( max <identifiersep> cache <identifiersep> size ) \n \t4 . record <identifiersep> stats ( ) \n \t4 . expire <identifiersep> after <identifiersep> write ( expiration <identifiersep> time , time <identifiersep> unit . hours ) \n \t4 . build ( s - > { \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t4 synchronized ( me ) { \n \t5 me . notify <identifiersep> all ( ) ; } } \n \t2 } ) . start ( ) ; \n <ect>
<comment> \n \t1 public static result <identifiersep> set from <identifiersep> sse ( input <identifiersep> stream in ) { \n \t2 item item = sse . parse ( in ) ; \n <ect>
\t3 partition <identifiersep> key <identifiersep> columns [ i ] = key ; \n \t3 i ++ ; } \n \t2 column raw <identifiersep> cluster <identifiersep> columns = result . rows . get ( 0 ) . columns . get ( <number_literal> ) ; \n \t2 string cluster <identifiersep> column <identifiersep> string = byte <identifiersep> buffer <identifiersep> util . string ( byte <identifiersep> buffer . wrap ( raw <identifiersep> cluster <identifiersep> columns . get <identifiersep> value ( ) ) ) ; \n <ect>
\t6 message . set <identifiersep> producer <identifiersep> id ( producer <identifiersep> id ) ; \n \t6 message . on <identifiersep> send ( ) ; \n \t6 send <identifiersep> to <identifiersep> active <identifiersep> mq ( message , null ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t1 private void dump <identifiersep> threads ( ) { \n \t2 thread <identifiersep> mx <identifiersep> bean thread <identifiersep> mx <identifiersep> bean = management <identifiersep> factory . get <identifiersep> thread <identifiersep> mx <identifiersep> bean ( ) ; \n \t2 for ( thread <identifiersep> info thread <identifiersep> info : thread <identifiersep> mx <identifiersep> bean . get <identifiersep> thread <identifiersep> info ( thread <identifiersep> mx <identifiersep> bean . get <identifiersep> all <identifiersep> thread <identifiersep> ids ( ) , integer . max <identifiersep> value ) ) { \n \t3 if ( thread . state . blocked . equals ( thread <identifiersep> info . get <identifiersep> thread <identifiersep> state ( ) ) ) { \n <ect>
\t2 try { \n \t2 return hr1 . get <identifiersep> integer ( <string_literal> , schema ) \n \t3 - hr2 . get <identifiersep> integer ( <string_literal> , schema ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 } else { \n \t5 s <identifiersep> logger . warn ( <string_literal> + router . get <identifiersep> host <identifiersep> name ( ) + <string_literal> ) ; \n \t5 continue ; } \n \t4 if ( ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n \t2 < button ng - click = <string_literal> > info < / button > \n <ect>
\t5 logger . info ( <string_literal> , decoded <identifiersep> data ) ; \n \t5 <comment> \n \t5 break ; \n \t4 case <string_literal> : <comment> \n <ect>
\t1 boolean result = size > max <identifiersep> copy <identifiersep> file <identifiersep> size && number <identifiersep> of <identifiersep> files > max <identifiersep> number <identifiersep> of <identifiersep> files ; \n \t1 if ( result ) { \n \t1 log . info ( <string_literal> , size , max <identifiersep> copy <identifiersep> file <identifiersep> size ) ; \n \t1 log . info ( <string_literal> , number <identifiersep> of <identifiersep> files , max <identifiersep> number <identifiersep> of <identifiersep> files ) ; \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 refresh <identifiersep> head ( true ) ; \n \t5 commit <identifiersep> semaphore . release ( ) ; } } \n <ect>
\t2 string partition <identifiersep> date = args . length == <number_literal> ? args [ <number_literal> ] : null ; \n \t2 try { \n \t3 tool . create <identifiersep> from <identifiersep> cube ( project <identifiersep> name , cube <identifiersep> name , partition <identifiersep> date ) ; \n \t3 tool . verify ( ) ; \n <ect>
\t2 self . command <identifiersep> statuses . report ( ) \n \t1 except : \n \t2 logger . exception ( <string_literal> ) \n \t1 self . stop <identifiersep> event . wait ( self . command <identifiersep> reports <identifiersep> interval ) \n <ect>
\t2 if ( conn <identifiersep> host <identifiersep> name == null ) { \n \t3  <identifiersep> log . error ( <string_literal> ) ; \n \t3 throw new socks <identifiersep> exception ( <string_literal> ) ; } \n \t2 if ( conn <identifiersep> port == 0 ) { \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 assert . assert <identifiersep> equals ( i + 1 , ( int ) has <identifiersep> ten . get ( i ) ) ; } } \n \t1 @ test \n \t1 public void test <identifiersep> setting <identifiersep> ten <identifiersep> elements ( ) { \n <ect>
\t3 case current <identifiersep> temperature : \n \t4 big <identifiersep> decimal current <identifiersep> temperature = device <identifiersep> info . get <identifiersep> current <identifiersep> temperature ( ) ; \n \t4 if ( current <identifiersep> temperature . int <identifiersep> value ( ) == <number_literal> ) { \n \t5 <comment> \n <ect>
\t1 @ override \n \t1 public string to <identifiersep> sql <identifiersep> literal ( string value ) { \n \t2 <comment> \n \t2 if ( ! value . matches ( <string_literal> ) ) { \n <ect>
\t2 for name , value in yaml . load ( file ) . iteritems ( ) : \n \t2 if name != none : \n \t3 configurations [ name ] = str ( value ) \n \t1 except : \n <ect>
\t3 log . warn ( <string_literal> ) ; } \n \t2 val = p . get <identifiersep> property ( <string_literal> , null ) ; \n \t2 if ( val != null ) { \n \t3 scheduler <identifiersep> constants . scheduler <identifiersep> default <identifiersep> password = val ; \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 <comment> \n \t5 <comment> \n <ect>
\t1 public void force <identifiersep> remove <identifiersep> completion ( ) \n \t1 { \n \t2 if ( ! replicating <identifiersep> nodes . is <identifiersep> empty ( ) || token <identifiersep> metadata . get <identifiersep> size <identifiersep> of <identifiersep> leaving <identifiersep> endpoints ( ) > 0 ) \n \t2 { \n <ect>
\t1 } catch ( connection <identifiersep> exception e ) { \n \t1 logger . error ( <string_literal> , e ) ; \n \t1 throw new runtime <identifiersep> exception ( <string_literal> , e ) ; } } \n public void read ( int emp <identifiersep> id ) { \n <ect>
\t2 if ( current <identifiersep> scan . contains ( table ) ) { \n \t3 log . info ( <string_literal> , current <identifiersep> scan ) ; \n \t3 scans . add ( current <identifiersep> scan ) ; \n \t2 } else { \n <ect>
\t3 pstmt . execute <identifiersep> update ( ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t4 return new pair < integer , virtual <identifiersep> device > ( new integer ( index ) , nic ) ; \n \t3 } else if ( attached <identifiersep> network <identifiersep> summary . ends <identifiersep> with ( <string_literal> ) || attached <identifiersep> network <identifiersep> summary . starts <identifiersep> with ( <string_literal> ) ) { \n \t4 dv <identifiersep> port <identifiersep> group <identifiersep> name = get <identifiersep> dv <identifiersep> port <identifiersep> group <identifiersep> name ( ( virtual <identifiersep> ethernet <identifiersep> card ) nic ) ; \n \t4 if ( dv <identifiersep> port <identifiersep> group <identifiersep> name != null && dv <identifiersep> port <identifiersep> group <identifiersep> name . starts <identifiersep> with ( network <identifiersep> name <identifiersep> prefix ) ) { \n <ect>
\t2 <comment> \n \t2 headers . put ( <string_literal> , null ) ; \n \t2 final org . apache . camel . component . linkedin . api . model . update <identifiersep> comments result = request <identifiersep> body <identifiersep> and <identifiersep> headers ( <string_literal> , null , headers ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t1 } else { \n \t2 log . info ( <string_literal> + scheduler . get <identifiersep> scheduler <identifiersep> instance <identifiersep> id ( ) + \n \t2 <string_literal> ) ; } \n \t1 } catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t1 if ( protocol . equals ( <string_literal> ) ) { \n \t1 https <identifiersep> enabled = true ; } \n \t1 set < string > host <identifiersep> names = get <identifiersep> hosts ( resource , cluster <identifiersep> name , component <identifiersep> name ) ; \n \t1 if ( host <identifiersep> names == null || host <identifiersep> names . is <identifiersep> empty ( ) ) { \n <ect>
\t2 logger . warn ( <string_literal> , this . groovy <identifiersep> script , principal . get <identifiersep> id ( ) ) ; \n \t2 return principal . get <identifiersep> id ( ) ; } \n \t1 private string resolve <identifiersep> username <identifiersep> from <identifiersep> external <identifiersep> groovy <identifiersep> script ( final principal principal , final service service , final string script <identifiersep> file ) { \n \t2 try { \n <ect>
\t2 logger . warn ( <string_literal> + pattern ) ; } \n \t1 <comment> \n \t1 public void set <identifiersep> uses <identifiersep> translator ( translator translator ) { \n \t2 if ( translator != translator . identity ) { \n <ect>
public put <identifiersep> object <identifiersep> response <identifiersep> type put <identifiersep> object ( put <identifiersep> object <identifiersep> type request , input <identifiersep> stream input <identifiersep> data ) throws s3exception { \n \t1 log . debug ( <string_literal> ) ; \n \t1 switch ( fail <identifiersep> object <identifiersep> put ) { \n \t1 case internal <identifiersep> error : \n <ect>
\t2 smpp <identifiersep> command command = get <identifiersep> endpoint ( ) . get <identifiersep> binding ( ) . create <identifiersep> smpp <identifiersep> command ( session , exchange ) ; \n \t2 command . execute ( exchange ) ; } \n \t1 @ override \n \t1 protected void do <identifiersep> stop ( ) throws exception { \n <ect>
\t7 } catch ( exception e ) { \n \t8 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t8 try { \n \t9 int stop <identifiersep> response <identifiersep> code = execute <identifiersep> stop ( server , developer <identifiersep> server , username ) ; \n <ect>
\t9 default : \n \t10 break ; } \n \t7 } ) ; } \n \t6 final float p = info . get <identifiersep> count ( ) / ( float ) info . get <identifiersep> length ( ) ; \n <ect>
{ \n \t1 log . info ( <string_literal> ) ; \n \t1 log . info ( <string_literal> ,  <identifiersep> connect <identifiersep> string ) ; \n \t1 log . info ( <string_literal> ,  <identifiersep> session <identifiersep> timeout ) ; \n <ect>
\t2 synchronized ( this ) { \n \t3 vm = vms . get ( vm <identifiersep> name ) ; \n \t3 if ( vm == null ) { \n \t4 if ( ram <identifiersep> size > get <identifiersep> host <identifiersep> free <identifiersep> memory ( ) ) { \n <ect>
private long default <identifiersep> timeout = default <identifiersep> timeout <identifiersep> msecs ; \n protected logger logger = logger <identifiersep> factory . get <identifiersep> logger ( get <identifiersep> class ( ) ) ; \n private boolean dirty = false ; \n public synchronized void start ( ) throws resource <identifiersep> manager <identifiersep> system <identifiersep> exception { \n <ect>
\t1 public void stop <identifiersep> datagram <identifiersep> receiving ( ) { \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n \t3  <identifiersep> log . debug ( <string_literal> ) ; \n \t2 if ( datagram <identifiersep> session == null ) { \n <ect>
\t3 final base <identifiersep> client < credentials , common <identifiersep> profile > client = find <identifiersep> delegated <identifiersep> client <identifiersep> by <identifiersep> name ( request , client <identifiersep> name , service ) ; \n \t3 final credentials credentials ; \n \t3 try { \n \t4 credentials = client . get <identifiersep> credentials ( web <identifiersep> context ) ; \n <ect>
\t2 } catch ( storage <identifiersep> unavailable <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( insufficient <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t4 string mgmt <identifiersep> host = ( string ) params . get ( <string_literal> ) ; \n \t4 add <identifiersep> route <identifiersep> to <identifiersep> internal <identifiersep> ip <identifiersep> or <identifiersep> cidr (  <identifiersep> localgw ,  <identifiersep> eth1ip ,  <identifiersep> eth1mask , mgmt <identifiersep> host ) ; \n \t4 string internal <identifiersep> dns1 = ( string ) params . get ( <string_literal> ) ; \n \t4 if ( internal <identifiersep> dns1 == null ) { \n <ect>
\t1 @ override \n \t1 public boolean can <identifiersep> authenticate <identifiersep> as <identifiersep> internal ( final string surrogate , final principal principal , final service service ) { \n \t2 if ( this . eligible <identifiersep> accounts . contains <identifiersep> key ( principal . get <identifiersep> id ( ) ) ) { \n \t3 final set surrogates = this . eligible <identifiersep> accounts . get ( principal . get <identifiersep> id ( ) ) ; \n <ect>
\t2 } catch ( exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t3 throw e ; } \n \t2 system . out . println ( i ) ; } \n <ect>
\t1 nf = new named <identifiersep> fifo ( this . fifo <identifiersep> file ) ; \n \t1 nf . create ( ) ; \n \t1 } catch ( io <identifiersep> exception ioe ) { \n \t1 <comment> \n <ect>
\t1 public long value ( counter <identifiersep> name c ) { \n \t2 return get ( c ) . value ( ) ; } \n \t1 public void add ( counter <identifiersep> name counter <identifiersep> name ) { \n \t2 if ( counters . contains <identifiersep> key ( counter <identifiersep> name ) ) { \n <ect>
\t3 response . send <identifiersep> error ( http <identifiersep> servlet <identifiersep> response . sc <identifiersep> internal <identifiersep> server <identifiersep> error , \n \t4 <string_literal> + uri ) ; \n \t3 return ; } \n <ect>
\t6 if ( disk . get <identifiersep> virtual <identifiersep> size ( ) > template . get <identifiersep> virtual <identifiersep> size ( ) ) { \n \t7 rbd <identifiersep> image disk <identifiersep> image = rbd . open ( disk . get <identifiersep> name ( ) ) ; \n \t7 disk <identifiersep> image . resize ( disk . get <identifiersep> virtual <identifiersep> size ( ) ) ; \n \t7 rbd . close ( disk <identifiersep> image ) ; \n <ect>
\t1 public void test2 ( ) { \n \t2 log . debug ( <string_literal> , new object [ ] { p1 , p2 , p3 } ) ; \n \t2 test <identifiersep> name = test <identifiersep> util . get <identifiersep> test <identifiersep> name ( ) ; \n \t2 expected <identifiersep> name = <string_literal> ; \n <ect>
\t2 file <identifiersep> reader reader = null ; \n \t2 try { \n \t2 reader = new file <identifiersep> reader ( f ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t7 grid <identifiersep> discovery <identifiersep> event disco <identifiersep> evt = exch <identifiersep> fut . discovery <identifiersep> event ( ) ; \n \t7 cctx . events ( ) . add <identifiersep> preload <identifiersep> event ( p , evt <identifiersep> cache <identifiersep> preload <identifiersep> part <identifiersep> data <identifiersep> lost , disco <identifiersep> evt . event <identifiersep> node ( ) , \n \t8 disco <identifiersep> evt . type ( ) , disco <identifiersep> evt . timestamp ( ) ) ; } \n <ect>
\t3 try { \n \t4 erx <identifiersep> file <identifiersep> utilities . write <identifiersep> input <identifiersep> stream <identifiersep> to <identifiersep> file ( stream , temp <identifiersep> file ) ; } \n \t3 catch ( runtime <identifiersep> exception e ) { \n \t4 if ( ! temp <identifiersep> file . delete ( ) ) \n <ect>
\t3 option <identifiersep> converter . instantiate <identifiersep> by <identifiersep> class <identifiersep> name ( rendering <identifiersep> class <identifiersep> name , \n \t7 object <identifiersep> renderer . class , \n \t7 null ) ; \n \t1 if ( renderer == null ) { \n <ect>
\t3 try { \n \t4 processor = framework . new <identifiersep> class <identifiersep> instance ( web <identifiersep> socket <identifiersep> processor . class , \n \t6 ( class < web <identifiersep> socket <identifiersep> processor > ) io <identifiersep> utils . load <identifiersep> class ( get <identifiersep> class ( ) , web <identifiersep> socket <identifiersep> processor <identifiersep> name ) ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 <comment> \n \t2 for ( path path = dir ; path != null ; path = file <identifiersep> tree <identifiersep> watching <identifiersep> supported ? path . get <identifiersep> parent ( ) : null ) { \n \t3 watch <identifiersep> key previous <identifiersep> watch <identifiersep> key = watch <identifiersep> keys . get ( path ) ; \n \t3 if ( previous <identifiersep> watch <identifiersep> key != null && previous <identifiersep> watch <identifiersep> key . is <identifiersep> valid ( ) ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public serial <identifiersep> message set <identifiersep> value <identifiersep> message ( int level ) { \n <ect>
\t5 <string_literal> , \n \t5 j <identifiersep> option <identifiersep> pane . error <identifiersep> message ) ; \n \t3 throw new runtime <identifiersep> exception ( e . to <identifiersep> string ( ) , e ) ; <comment> \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception | instantiation <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t2 boolean result = true ; \n \t2 if ( can <identifiersep> handle ( network , service . static <identifiersep> nat ) ) { \n \t3 final list < domain <identifiersep> router <identifiersep> vo > routers = get <identifiersep> routers ( network ) ; \n \t3 if ( routers == null || routers . is <identifiersep> empty ( ) ) { \n <ect>
\t1 this . session <identifiersep> implclass <identifiersep> name = hive <identifiersep> conf . get <identifiersep> var ( conf <identifiersep> vars . hive <identifiersep> session <identifiersep> impl <identifiersep> classname ) ; \n \t1 this . session <identifiersep> impl <identifiersep> with <identifiersep> ug <identifiersep> iclass <identifiersep> name = hive <identifiersep> conf . get <identifiersep> var ( conf <identifiersep> vars . hive <identifiersep> session <identifiersep> impl <identifiersep> with <identifiersep> ugi <identifiersep> classname ) ; } \n private void create <identifiersep> background <identifiersep> operation <identifiersep> pool ( ) { \n \t1 int pool <identifiersep> size = hive <identifiersep> conf . get <identifiersep> int <identifiersep> var ( conf <identifiersep> vars . hive <identifiersep> server2 <identifiersep> async <identifiersep> exec <identifiersep> threads ) ; \n <ect>
\t2 case rename <identifiersep> folder <identifiersep> in <identifiersep> hdfs : { \n \t3 string src <identifiersep> path = ( string ) opt . params [ 0 ] ; \n \t3 string dst <identifiersep> path = ( string ) opt . params [ 1 ] ; \n \t3 rename <identifiersep> hdfs <identifiersep> path ( src <identifiersep> path , dst <identifiersep> path ) ; \n <ect>
\t3 if ( session != null ) \n \t4 session . get <identifiersep> cluster ( ) . close <identifiersep> async ( ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n <ect>
\t2 list < splunk <identifiersep> event > data = run <identifiersep> query ( query <identifiersep> args , false , callback ) ; \n \t2 last <identifiersep> successful <identifiersep> read <identifiersep> time = start <identifiersep> time ; \n \t2 return data ; } \n \t1 private list < splunk <identifiersep> event > realtime <identifiersep> search ( splunk <identifiersep> result <identifiersep> processor callback ) throws exception { \n <ect>
\t4 log . error ( <string_literal> , e ) ; \n \t3 } catch ( sax <identifiersep> exception e ) { \n \t4 log . error ( <string_literal> , e ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 } catch ( nicira <identifiersep> nvp <identifiersep> api <identifiersep> exception exception <identifiersep> delete <identifiersep> l <identifiersep> switch <identifiersep> port ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) + <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> display <identifiersep> name ( ) + <string_literal> + logical <identifiersep> switch <identifiersep> uuid + <string_literal> + exception <identifiersep> delete <identifiersep> l <identifiersep> switch <identifiersep> port . get <identifiersep> message ( ) ) ; } \n \t2 s <identifiersep> logger . warn ( <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) + <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> display <identifiersep> name ( ) + <string_literal> ) ; } \n \t1 private void cleanup <identifiersep> l <identifiersep> router <identifiersep> port ( string logical <identifiersep> router <identifiersep> uuid , logical <identifiersep> router <identifiersep> port l <identifiersep> router <identifiersep> port , nicira <identifiersep> nvp <identifiersep> api nicira <identifiersep> nvp <identifiersep> api ) { \n <ect>
<comment> \n \t2 logger . info ( <string_literal> , runtime . get <identifiersep> runtime ( ) . total <identifiersep> memory ( ) , runtime . get <identifiersep> runtime ( ) . max <identifiersep> memory ( ) ) ; \n \t2 for ( memory <identifiersep> pool <identifiersep> mx <identifiersep> bean pool : management <identifiersep> factory . get <identifiersep> memory <identifiersep> pool <identifiersep> mx <identifiersep> beans ( ) ) \n \t3 logger . info ( <string_literal> , pool . get <identifiersep> name ( ) , pool . get <identifiersep> type ( ) , pool . get <identifiersep> peak <identifiersep> usage ( ) ) ; \n <ect>
\t3 try { \n \t4 main . initialize <identifiersep> and <identifiersep> run ( args ) ; \n \t3 } catch ( exception e ) { \n \t4 <comment> \n <ect>
\t3 if ( target <identifiersep> host . index <identifiersep> of ( <string_literal> ) > - 1 ) { \n \t4 try { \n \t5 target <identifiersep> port = integer . parse <identifiersep> int ( target <identifiersep> host . substring ( target <identifiersep> host . index <identifiersep> of ( <string_literal> ) + 1 ) ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t1 protected authentication <identifiersep> builder authenticate <identifiersep> internal ( final authentication <identifiersep> transaction transaction ) throws authentication <identifiersep> exception { \n \t2 final collection < credential > credentials = transaction . get <identifiersep> credentials ( ) ; \n \t2 logger . debug ( <string_literal> , credentials ) ; \n \t2 if ( credentials . is <identifiersep> empty ( ) ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + storage <identifiersep> pool . get <identifiersep> name ( ) + <string_literal> + storage <identifiersep> pool . get <identifiersep> pool <identifiersep> type ( ) . to <identifiersep> string ( ) + <string_literal> \n \t5 + over <identifiersep> prov <identifiersep> factor . to <identifiersep> string ( ) ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> + over <identifiersep> prov <identifiersep> factor + <string_literal> + storage <identifiersep> pool . get <identifiersep> capacity <identifiersep> bytes ( ) ) ; \n \t2 } else { \n <ect>
\t3 } catch ( swegon <identifiersep> ventilation <identifiersep> exception e ) { \n \t4 logger . warn ( <string_literal> , e ) ; } } \n \t2 @ override \n \t2 public void run ( ) { \n <ect>
\t6 s <identifiersep> logger . error ( <string_literal> + l ) ; } \n \t4 } else { \n \t5 s <identifiersep> logger . error ( <string_literal> ) ; } \n \t3 } else { \n <ect>
\t4 translog . snapshot snapshot = tlog . new <identifiersep> snapshot ( ) ) { \n \t4 if ( written <identifiersep> operations . size ( ) != snapshot . total <identifiersep> operations ( ) ) { \n \t5 for ( int i = 0 ; i < thread <identifiersep> count ; i ++ ) { \n \t6 if ( thread <identifiersep> exceptions [ i ] != null ) { \n <ect>
\t3 if ( stats ) { \n \t4 local <identifiersep> delivery <identifiersep> time . add ( system . nano <identifiersep> time ( ) - start ) ; \n \t4 local <identifiersep> deliveries . increment ( ) ; } } \n \t2 catch ( exception e ) { \n <ect>
\t7 type . ordinal ( ) + <string_literal> ; } } \n \t3 int updated = statement . execute <identifiersep> update ( sql ) ; \n \t3 if ( updated == 0 ) { \n \t4 <comment> \n <ect>
\t4 return false ; } \n \t3 user = user <identifiersep> acct <identifiersep> pair . first ( ) ; \n \t3 final account account = user <identifiersep> acct <identifiersep> pair . second ( ) ; \n \t3 if ( user . get <identifiersep> state ( ) != account . state . enabled || ! account . get <identifiersep> state ( ) . equals ( account . state . enabled ) ) { \n <ect>
\t2 return \n \t1 @ attr ( tags = [ <string_literal> ] , required <identifiersep> hardware = <string_literal> ) \n \t1 def test <identifiersep> 01 <identifiersep> vpc <identifiersep> remote <identifiersep> access <identifiersep> vpn ( self ) : \n \t2 <string_literal> <string_literal> <string_literal> \n <ect>
\t3 entity <identifiersep> reference document <identifiersep> reference = new entity <identifiersep> reference ( document <identifiersep> name , entity <identifiersep> type . document , space <identifiersep> reference ) ; \n \t3 try { \n \t4 iterables . add <identifiersep> all ( result , this . document <identifiersep> resolver <identifiersep> provider . get ( ) . get <identifiersep> references ( document <identifiersep> reference ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 result = callable . call ( ) ; } \n \t3 catch ( throwable t ) \n \t3 { \n \t4 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( t ) ; \n <ect>
\t1 transactions . find ( new bucket <identifiersep> info ( bucket <identifiersep> name ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 throw new no <identifiersep> such <identifiersep> bucket <identifiersep> exception ( bucket <identifiersep> name ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 pre <identifiersep> match <identifiersep> container <identifiersep> request <identifiersep> context request <identifiersep> context = new pre <identifiersep> match <identifiersep> container <identifiersep> request <identifiersep> context ( request , request <identifiersep> filters , null ) ; \n \t2 aborted = request <identifiersep> context . filter ( ) ; } \n \t1 catch ( exception e ) \n \t1 { \n <ect>
\t2 get <identifiersep> mock <identifiersep> endpoint ( <string_literal> ) . expected <identifiersep> message <identifiersep> count ( size ) ; \n \t2 for ( int i = 0 ; i < size ; i ++ ) { \n \t3 template . send <identifiersep> body ( <string_literal> , <string_literal> ) ; } \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( ) ; \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 final script <identifiersep> engine script <identifiersep> engine = script <identifiersep> engine <identifiersep> container \n \t5 . get <identifiersep> script <identifiersep> engine ( m <identifiersep> initialisation <identifiersep> message . get <identifiersep> script ( ) ) ; \n <ect>
\t4 create <identifiersep> ocfs2sr ( pool ) ; } \n \t3 return new answer ( cmd , false , <string_literal> \n \t5 + pool . get <identifiersep> type ( ) . name ( ) + <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 local <identifiersep> producer . send ( message ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 message = remote <identifiersep> consumer . receive ( <number_literal> ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( message ) ; \n <ect>
\t2 if ( shutdown <identifiersep> hook != null ) \n \t2 { \n \t3 if ( ! runtime . get <identifiersep> runtime ( ) . remove <identifiersep> shutdown <identifiersep> hook ( shutdown <identifiersep> hook ) ) \n \t3 { \n <ect>
\t1 public response consume <identifiersep> book <identifiersep> message <identifiersep> from <identifiersep> mdb ( ) throws interrupted <identifiersep> exception { \n \t2 log . info ( <string_literal> ) ; \n \t2 get <identifiersep> count <identifiersep> down <identifiersep> latch ( ) . await ( <number_literal> , time <identifiersep> unit . milliseconds ) ; <comment> \n \t2 cdi <identifiersep> injection <identifiersep> book <identifiersep> collection collection = get <identifiersep> book <identifiersep> collection ( ) ; \n <ect>
\t1 if ( fs != null ) { \n \t2 try { \n \t2 fs . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 pair < string , string > template <identifiersep> info = decode <identifiersep> template <identifiersep> relative <identifiersep> path <identifiersep> and <identifiersep> name <identifiersep> from <identifiersep> url ( secondary <identifiersep> storage <identifiersep> url , template <identifiersep> url , template . get <identifiersep> name ( ) ) ; \n \t2 string template <identifiersep> relative <identifiersep> folder <identifiersep> path = template <identifiersep> info . first ( ) ; \n \t2 try { \n \t3 string secondary <identifiersep> mount <identifiersep> point = get <identifiersep> root <identifiersep> dir ( secondary <identifiersep> storage <identifiersep> url ,  <identifiersep> nfs <identifiersep> version ) ; \n <ect>
\t6 synchronized ( signal <identifiersep> reader <identifiersep> some <identifiersep> data <identifiersep> was <identifiersep> indexed ) { \n \t7 if ( id <identifiersep> generator . get ( ) < max <identifiersep> ops ) { \n \t8 signal <identifiersep> reader <identifiersep> some <identifiersep> data <identifiersep> was <identifiersep> indexed . wait ( ) ; } } } \n \t5 close <identifiersep> retention <identifiersep> lock ( ) ; \n <ect>
\t3 return ; } \n \t2 else if ( call <identifiersep> peer == null ) \n \t2 { \n <ect>
\t1 public language resolve <identifiersep> language ( string name , camel <identifiersep> context context ) { \n \t2 try { \n \t3 object bean = context . get <identifiersep> registry ( ) . lookup <identifiersep> by <identifiersep> name ( <string_literal> + name ) ; \n \t3 if ( bean instanceof language <identifiersep> resolver ) { \n <ect>
\t3 return null ; } \n \t2 try { \n \t3 return url <identifiersep> decoder . decode ( p , char <identifiersep> set ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t4 widget <identifiersep> dialog instanceof cms <identifiersep> dialog ? ( ( cms <identifiersep> dialog ) widget <identifiersep> dialog ) . get <identifiersep> param <identifiersep> resource ( ) : null , \n \t4 widget <identifiersep> dialog . get <identifiersep> messages ( ) , \n \t4 param ) ; \n \t2 } catch ( json <identifiersep> exception e ) { \n <ect>
\t2 int batches = rows / <number_literal> ; \n \t2 int total = files + ( files * rows ) + ( files * batches ) ; \n \t2 log . info ( <string_literal> + total + <string_literal> ) ; \n \t2 notify <identifiersep> builder notify = new notify <identifiersep> builder ( context ) . when <identifiersep> done ( total ) . create ( ) ; \n <ect>
\t4 system . set <identifiersep> property \n \t5 ( javax . naming . context . initial <identifiersep> context <identifiersep> factory , \n \t5 <string_literal> ) ; \n \t3 } else { \n <ect>
\t4 list < ? extends ip <identifiersep> address > ips <identifiersep> to <identifiersep> release =  <identifiersep> ip <identifiersep> address <identifiersep> dao . list <identifiersep> by <identifiersep> account ( account <identifiersep> id ) ; \n \t4 for ( ip <identifiersep> address ip : ips <identifiersep> to <identifiersep> release ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + ip + <string_literal> + account <identifiersep> id + <string_literal> ) ; \n \t5 if ( !  <identifiersep> ip <identifiersep> addr <identifiersep> mgr . disassociate <identifiersep> public <identifiersep> ip <identifiersep> address ( ip . get <identifiersep> id ( ) , caller <identifiersep> user <identifiersep> id , caller ) ) { \n <ect>
\t3 pc . set <identifiersep> password ( credentials . get ( user <identifiersep> name ) . to <identifiersep> char <identifiersep> array ( ) ) ; \n \t2 } else { \n \t3 log . warn ( <string_literal> + user <identifiersep> name ) ; } } \n \t1 private void handle <identifiersep> realm <identifiersep> callback ( realm <identifiersep> callback rc ) { \n <ect>
\t4 { \n \t5 thread . stop ( ) ; } \n \t4 catch ( thread <identifiersep> death e ) \n \t4 { \n <ect>
\t2 return 0 ; } \n \t1 @ override \n \t1 public void on <identifiersep> metadata ( bucket meta , client <identifiersep> put <identifiersep> state state , \n \t3 client <identifiersep> context context ) { \n <ect>
\t3 } else if ( vol . get <identifiersep> format ( ) == physical <identifiersep> disk <identifiersep> format . dir ) { \n \t4 new <identifiersep> vol . set <identifiersep> format ( image <identifiersep> format . dir ) ; } \n \t3 return new copy <identifiersep> cmd <identifiersep> answer ( new <identifiersep> vol ) ; \n \t2 } catch ( final cloud <identifiersep> runtime <identifiersep> exception e ) { \n <ect>
\t5 <comment> \n \t5 host . add <identifiersep> to <identifiersep> other <identifiersep> config ( conn , <string_literal> , <string_literal> ) ; \n \t5 host . add <identifiersep> to <identifiersep> other <identifiersep> config ( conn , <string_literal> , <string_literal> ) ; } \n \t3 } catch ( types . map <identifiersep> duplicate <identifiersep> key e ) { \n <ect>
\t3 correlation . remove ( correlation <identifiersep> id ) ; } } \n \t1 public void on <identifiersep> message ( amqp . basic <identifiersep> properties properties , byte [ ] message ) { \n \t2 string correlation <identifiersep> id = properties . get <identifiersep> correlation <identifiersep> id ( ) ; \n \t2 if ( correlation <identifiersep> id == null ) { \n <ect>
\t3 string p = req . get <identifiersep> parameter ( <string_literal> ) ; \n \t3 if ( p != null ) { \n \t4 freshness = long . parse <identifiersep> long ( p ) ; } \n \t3 string group = req . get <identifiersep> path <identifiersep> info ( ) ; \n <ect>
\t1 # seems even for builds with only one job , this won't get here \n \t1 log . fatal ( <string_literal> ) \n \t1 exit ( 1 ) \n elif is <identifiersep> leader ( os . getenv ( travis <identifiersep> job <identifiersep> number ) ) : \n <ect>
\t1 public list < name <identifiersep> version > get <identifiersep> module <identifiersep> list ( ) { \n \t2 list < name <identifiersep> version > result = lists . new <identifiersep> array <identifiersep> list ( ) ; \n \t2 for ( net <identifiersep> data . module <identifiersep> info module <identifiersep> info : info . get <identifiersep> module <identifiersep> list ( ) ) { \n \t3 if ( ! module <identifiersep> info . has <identifiersep> module <identifiersep> id ( ) || ! module <identifiersep> info . has <identifiersep> module <identifiersep> version ( ) ) { \n <ect>
private void rename <identifiersep> quietly ( file source <identifiersep> file , file target <identifiersep> file ) { \n \t1 boolean rename = source <identifiersep> file . rename <identifiersep> to ( target <identifiersep> file ) ; \n \t1 <comment> \n \t1 if ( ! rename && ! target <identifiersep> file . exists ( ) ) { \n <ect>
\t1 m . put ( <string_literal> , <string_literal> , <string_literal> ) ; \n \t1 bw . add <identifiersep> mutation ( m ) ; \n \t1 bw . close ( ) ; \n \t1 root . stop ( ) ; \n <ect>
\t2 logger . info ( <string_literal> , non <identifiersep> master <identifiersep> node ) ; \n \t2 ensure <identifiersep> stable <identifiersep> cluster ( <number_literal> , master <identifiersep> node ) ; \n \t2 logger . info ( <string_literal> , non <identifiersep> master <identifiersep> node ) ; \n \t2 assert <identifiersep> no <identifiersep> master ( non <identifiersep> master <identifiersep> node ) ; \n <ect>
\t2 assert <identifiersep> that ( response . get <identifiersep> index ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 set < string > fields = new hash <identifiersep> set < > ( response . get <identifiersep> fields ( ) . key <identifiersep> set ( ) ) ; \n \t2 assert <identifiersep> that ( fields , equal <identifiersep> to ( collections . < string > empty <identifiersep> set ( ) ) ) ; \n \t2 assert <identifiersep> that ( response . get <identifiersep> source <identifiersep> as <identifiersep> bytes ( ) , null <identifiersep> value ( ) ) ; \n <ect>
\t2 int end = servlet <identifiersep> name . index <identifiersep> of ( <string_literal> , 1 ) ; \n \t2 string module <identifiersep> id = null ; \n \t2 if ( end > 0 ) { \n \t3 module <identifiersep> id = servlet <identifiersep> name . substring ( 1 , end ) ; } \n <ect>
\t1 } catch ( exception e ) { \n \t1 err . set ( true ) ; \n \t1 log <identifiersep> err ( <string_literal> , e , updated . get ( ) , num <identifiersep> metrics ) ; } \n \t1 if ( updated . get ( ) < num <identifiersep> metrics && ! err . get ( ) ) { \n <ect>
\t2 try { \n \t3 pending <identifiersep> wakeups . increment <identifiersep> and <identifiersep> get ( ) ; \n \t3 this . task <identifiersep> runner . wakeup ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 assert . assert <identifiersep> equals ( <string_literal> , value ) ; \n \t1 web <identifiersep> resource = client . resource ( string . format ( <string_literal> , get <identifiersep> test <identifiersep> port ( ) ) ) ; \n \t1 output = web <identifiersep> resource . get ( string . class ) ; \n \t1 assert . assert <identifiersep> equals ( <string_literal> , output ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 executor . shutdown <identifiersep> now ( ) ; } \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n \t1 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n <ect>
\t2 cmd . id = router . id \n \t2 self . apiclient . stop <identifiersep> router ( cmd ) \n \t1 def create <identifiersep> vpc ( self , vpc <identifiersep> offering , cidr = '10 . 1 . 1 . 1 / 16' ) : \n \t2 try : \n <ect>
\t5 gceed = true ; \n \t4 } catch ( concurrent <identifiersep> operation <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + elb <identifiersep> vm + <string_literal> , e ) ; \n \t4 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t4 if ( msg != null ) { \n \t5 message last = ( message ) wire <identifiersep> format . unmarshal ( new byte <identifiersep> sequence ( msg ) ) ; \n \t5 broker <identifiersep> seq = last . get <identifiersep> message <identifiersep> id ( ) . get <identifiersep> broker <identifiersep> sequence <identifiersep> id ( ) ; \n \t4 } else { \n <ect>
\t4 citrix <identifiersep> resource <identifiersep> base . set <identifiersep> can <identifiersep> bridge <identifiersep> firewall ( can <identifiersep> bridge <identifiersep> firewall ) ; \n \t4 if ( ! can <identifiersep> bridge <identifiersep> firewall ) { \n \t5 final string msg = <string_literal> ; \n \t5 s <identifiersep> logger . warn ( msg ) ; \n <ect>
\t5 logger . debug ( <string_literal> + ti . get <identifiersep> message ( ) ) ; } } \n \t2 public void can <identifiersep> send <identifiersep> message <identifiersep> changed ( conversation con , boolean can <identifiersep> send ) \n \t2 { \n <ect>
\t3 for ( path entry : stream ) { \n \t4 if ( ! pattern . matcher ( entry . get <identifiersep> file <identifiersep> name ( ) . to <identifiersep> string ( ) ) . matches ( ) ) { \n \t5 throw new db <identifiersep> op <identifiersep> env <identifiersep> exception ( <string_literal> + entry . get <identifiersep> file <identifiersep> name ( ) ) ; \n \t5 <comment> \n <ect>
\t2 if ( ! file . exists ( ) ) { \n \t3 logger . debug ( <string_literal> , file ) ; \n \t3 return ; } \n \t2 if ( ! file . is <identifiersep> file ( ) ) { \n <ect>
\t3 transaction <identifiersep> input . connection <identifiersep> result result = input . connect ( unspent , transaction <identifiersep> input . connect <identifiersep> mode . disconnect <identifiersep> on <identifiersep> conflict ) ; \n \t3 if ( result == transaction <identifiersep> input . connection <identifiersep> result . success ) { \n \t4 maybe <identifiersep> move <identifiersep> pool ( input . get <identifiersep> connected <identifiersep> transaction ( ) , <string_literal> ) ; \n \t4 my <identifiersep> unspents . remove ( input . get <identifiersep> connected <identifiersep> output ( ) ) ; \n <ect>
\t3 int elements = selected <identifiersep> units . size ( ) ; \n \t3 double avg <identifiersep> cost <identifiersep> best <identifiersep> path = total <identifiersep> cost / ( elements - 1 ) ; \n \t3 double avg <identifiersep> target <identifiersep> cost = cumul <identifiersep> target <identifiersep> costs / n <identifiersep> target <identifiersep> costs ; \n \t3 double avg <identifiersep> join <identifiersep> cost = cumul <identifiersep> join <identifiersep> costs / n <identifiersep> join <identifiersep> costs ; \n <ect>
\t10  <identifiersep> resource <identifiersep> limit <identifiersep> mgr . increment <identifiersep> resource <identifiersep> count ( owner . get <identifiersep> id ( ) , resource <identifiersep> type . public <identifiersep> ip ) ; } } \n \t7 } else { \n \t8 s <identifiersep> logger . error ( <string_literal> + addr . get <identifiersep> id ( ) + <string_literal> + addr . get <identifiersep> address ( ) ) ; } } \n \t5 } else { \n <ect>
<number_literal> def <identifiersep> block1 . remove ( def1 ) ; \n <number_literal> load <identifiersep> block . insert <identifiersep> before ( def0 , load <identifiersep> block . get <identifiersep> head ( ) ) ; \n <number_literal> m <identifiersep> unit <identifiersep> to <identifiersep> block <identifiersep> map . put ( def0 , load <identifiersep> block ) ; \n <number_literal> has <identifiersep> changed = true ; \n <ect>
\t2 if ( ! initialized ) { \n \t3 application <identifiersep> context application <identifiersep> context = ( application <identifiersep> context ) action <identifiersep> context . get <identifiersep> context ( ) . get <identifiersep> application ( ) . get ( \n \t5 web <identifiersep> application <identifiersep> context . root <identifiersep> web <identifiersep> application <identifiersep> context <identifiersep> attribute ) ; \n \t3 if ( application <identifiersep> context == null ) { \n <ect>
\t2 return new startup <identifiersep> command [ ] { cmd } ; } \n \t1 @ override \n \t1 public boolean configure ( string name , map < string , object > params ) throws configuration <identifiersep> exception { \n \t2 if ( ! super . configure ( name , params ) ) { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 new batch <identifiersep> writer <identifiersep> config ( ) . set <identifiersep> max <identifiersep> latency ( batch <identifiersep> writer <identifiersep> max <identifiersep> latency , time <identifiersep> unit . seconds ) ) ; \n \t1 } catch ( exception ex ) { \n \t1 log . warn ( <string_literal> \n \t2 + <string_literal> + ex ) ; \n <ect>
\t4 logger . debug ( <string_literal> , this . unique <identifiersep> id , this . application <identifiersep> id ) ; \n \t4 result = acquire ( lock ) ; } \n \t2 } else { \n \t3 <comment> \n <ect>
<comment> \n @ suppress <identifiersep> warnings ( <string_literal> ) \n < p > iterator < p > lookup <identifiersep> providers ( final class < p > provider <identifiersep> class ) { \n <ect>
\t4 decrypt ( key ) ; \n \t4  <identifiersep> decrypted = true ; \n \t3 } catch ( data <identifiersep> format <identifiersep> exception dfe ) { \n \t4 log log = i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( lease <identifiersep> set . class ) ; \n <ect>
<comment> \n \t1 @ event <identifiersep> listener \n \t1 public void handle <identifiersep> cas <identifiersep> registered <identifiersep> service <identifiersep> deleted <identifiersep> event ( final cas <identifiersep> registered <identifiersep> service <identifiersep> deleted <identifiersep> event event ) { \n <ect>
\t4 if (  <identifiersep> log . should <identifiersep> info ( ) ) \n \t5  <identifiersep> log . info ( <string_literal> + conf + <string_literal> + snark . get <identifiersep> name ( ) ) ; \n \t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t3 int [ ] ids = conn . list <identifiersep> domains ( ) ; \n \t3 for ( int id : ids ) { \n \t4 domain dm = conn . domain <identifiersep> lookup <identifiersep> by <identifiersep> id ( id ) ; \n \t4 allocated <identifiersep> mem += dm . get <identifiersep> max <identifiersep> memory ( ) * 1024l ; \n <ect>
\t1 ctx . close ( ) ; } \n @ override \n public final void channel <identifiersep> inactive ( channel <identifiersep> handler <identifiersep> context ctx ) throws exception { \n \t1 if ( rpcs . size ( ) > 0 ) { \n <ect>
\t5 if ( debug ) \n \t6 logger . warn ( string . format ( <string_literal> , \n \t8 new <identifiersep> read . get <identifiersep> alignment <identifiersep> start ( ) , read . get <identifiersep> read <identifiersep> name ( ) , read . get <identifiersep> alignment <identifiersep> start ( ) , read . get <identifiersep> inferred <identifiersep> insert <identifiersep> size ( ) , read . get <identifiersep> mate <identifiersep> alignment <identifiersep> start ( ) ) ) ; \n \t5 break ; } } \n <ect>
\t3 string [ ] per <identifiersep> node = new <identifiersep> view . split ( node <identifiersep> views <identifiersep> separator ) ; \n \t3 string this <identifiersep> node <identifiersep> address = get <identifiersep> protocol <identifiersep> stack ( ) . get <identifiersep> channel ( ) . get <identifiersep> address <identifiersep> as <identifiersep> string ( ) ; \n \t3 for ( string node <identifiersep> view : per <identifiersep> node ) { \n \t4 if ( node <identifiersep> view . starts <identifiersep> with ( this <identifiersep> node <identifiersep> address ) ) { \n <ect>
\t1 } catch ( socket <identifiersep> exception se ) { \n \t1 logger . warn ( <string_literal> , se ) ; \n \t1 <comment> \n \t1 if ( ! is <identifiersep> valid <identifiersep> address ( address ) ) { \n <ect>
\t4 register <identifiersep> subscription ( object <identifiersep> name , sub . get <identifiersep> consumer <identifiersep> info ( ) , key , view ) ; } \n \t3 subscription <identifiersep> map . put ( sub , object <identifiersep> name ) ; \n \t3 return object <identifiersep> name ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t2 void halt ( ) { \n \t3 try { \n <ect>
\t3 ( handshake . get <identifiersep> bytes ( ) , \n \t3 new transceiver <identifiersep> callback < > ( handshake , callback ) ) ; \n \t2 return ; } \n \t1 } catch ( exception e ) { \n <ect>
\t3 if val is none : \n \t4 return true # no value to set always works \n \t3 try : \n \t4 sock . setsockopt ( fam , opt , val ) \n <ect>
\t4 validate <identifiersep> value ( object , obj <identifiersep> value ) ; } \n \t2 } else if ( collection . class . is <identifiersep> assignable <identifiersep> from ( value . get <identifiersep> class ( ) ) ) { \n \t3 collection values = ( collection ) value ; \n \t3 for ( object obj <identifiersep> value : values ) { \n <ect>
\t4 log . debug ( <string_literal> ) ; \n \t4 return ; } \n \t3 <comment> \n \t3 if ( session != null ) { \n <ect>
\t4 tsummary = new monitor <identifiersep> timer <identifiersep> summary ( timername ) ; \n \t4 this . timer <identifiersep> summaries . put ( timername , tsummary ) ; } \n \t3 tsummary . add <identifiersep> timer ( timer . get <identifiersep> duration ( ) ) ; \n <ect>
\t4 document = cms <identifiersep> xml <identifiersep> utils . unmarshal <identifiersep> helper ( \n \t5 new input <identifiersep> source ( new file <identifiersep> reader ( get <identifiersep> file ( xml <identifiersep> filename ) ) ) , \n \t5 no <identifiersep> entity <identifiersep> resolver ) ; \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 protected boolean is <identifiersep> allowed ( http <identifiersep> servlet <identifiersep> request request , object action ) { \n \t2 for ( string role : disallowed <identifiersep> roles ) { \n \t3 if ( request . is <identifiersep> user <identifiersep> in <identifiersep> role ( role ) ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t3 this . yarn <identifiersep> application = preconditions . check <identifiersep> not <identifiersep> null ( yarn <identifiersep> application ) ; \n \t3 this . yarn <identifiersep> files <identifiersep> dir = preconditions . check <identifiersep> not <identifiersep> null ( yarn <identifiersep> files <identifiersep> dir ) ; } \n \t2 @ override \n \t2 public void run ( ) { \n <ect>
\t2 if ( file <identifiersep> name == null && conn . get <identifiersep> url ( ) != null ) { \n \t3 file <identifiersep> name = conn . get <identifiersep> url ( ) . to <identifiersep> string ( ) ; } \n \t2 if ( file <identifiersep> name != null ) { \n \t3 if ( file <identifiersep> name . ends <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t4 } catch ( exception e2 ) { \n \t5 <comment> \n \t4 this . ds = null ; } \n \t3 throw new hibernate <identifiersep> exception ( message , e ) ; } \n <ect>
\t4 log . debug ( <string_literal> + remaining + <string_literal> ) ; \n \t4 ( ( nio <identifiersep> server <identifiersep> cnxn ) si . cnxn ) . close ( ) ; \n \t4 return ; } \n \t3 <comment> \n <ect>
\t2 if ( host == null || host . equals ( <string_literal> ) ) { \n \t3 s <identifiersep> logger . info ( <string_literal> ) ; \n \t3 system . exit ( <number_literal> ) ; } \n \t2 if ( password == null ) { \n <ect>
<comment> \n \t1 write <identifiersep> checkpoint ( true ) ; \n \t1 open = true ; \n \t1 } catch ( exception ex ) { \n <ect>
\t5 string part <identifiersep> name = ( string ) i . next ( ) ; \n \t5 part part = msg . get <identifiersep> part ( part <identifiersep> name ) ; \n \t5 result . add ( part ) ; } } \n \t2 } else { \n <ect>
\t3 try { \n \t4 if ( ! vn <identifiersep> model . verify (  <identifiersep> manager . get <identifiersep> model <identifiersep> controller ( ) ) ) { \n \t5 vn <identifiersep> model . update (  <identifiersep> manager . get <identifiersep> model <identifiersep> controller ( ) ) ; } \n \t3 } catch ( internal <identifiersep> error <identifiersep> exception ex ) { \n <ect>
\t3 return null ; } \n \t2 if ( property <identifiersep> uri == null || property <identifiersep> uri . is <identifiersep> empty ( ) ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return null ; } \n <ect>
<number_literal> final j2e <identifiersep> context context , final access <identifiersep> token access <identifiersep> token , \n <number_literal> final refresh <identifiersep> token refresh <identifiersep> token ) { \n \t2 logger . debug ( <string_literal> , access <identifiersep> token ) ; \n \t2 final o <identifiersep> auth20response <identifiersep> types type = o <identifiersep> auth20utils . get <identifiersep> response <identifiersep> type ( context ) ; \n <ect>
\t1 public concept <identifiersep> name get <identifiersep> name ( locale locale , boolean exact ) { \n \t2 <comment> \n \t2 if ( get <identifiersep> names ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t1 <comment> \n \t1 timeline <identifiersep> metric <identifiersep> metadata <identifiersep> key app <identifiersep> key = new timeline <identifiersep> metric <identifiersep> metadata <identifiersep> key ( metric . get <identifiersep> metric <identifiersep> name ( ) , metric . get <identifiersep> app <identifiersep> id ( ) ) ; \n \t1 timeline <identifiersep> metric <identifiersep> metadata metric <identifiersep> metadata = metadata <identifiersep> manager <identifiersep> instance . get <identifiersep> metadata <identifiersep> cache <identifiersep> value ( app <identifiersep> key ) ; \n \t1 if ( metric <identifiersep> metadata != null && ! metric <identifiersep> metadata . is <identifiersep> supports <identifiersep> aggregates ( ) ) { \n <ect>
\t4 s <identifiersep> object <identifiersep> class = endpoint . get <identifiersep> component ( ) . get <identifiersep> camel <identifiersep> context ( ) . get <identifiersep> class <identifiersep> resolver ( ) . resolve <identifiersep> class ( class <identifiersep> name ) ; \n \t4 if ( s <identifiersep> object <identifiersep> class == null ) { \n \t5 throw new illegal <identifiersep> argument <identifiersep> exception ( string . format ( <string_literal> , class <identifiersep> name ) ) ; } \n \t3 } else { \n <ect>
\t7 { \n \t8 logger . debug ( <string_literal> + ( ( stmt <identifiersep> write . get <identifiersep> globals ( ) != null ? stmt <identifiersep> write . get <identifiersep> globals ( ) . size ( ) : 0 ) + \n <number_literal> ( stmt <identifiersep> write . get <identifiersep> fields ( ) != null ? stmt <identifiersep> write . get <identifiersep> fields ( ) . size ( ) : 0 ) ) ) ; } \n \t7 else \n <ect>
\t3 url origin <identifiersep> url = registry <identifiersep> protocol . this . get <identifiersep> provider <identifiersep> url ( invoker ) ; \n \t3 string key = get <identifiersep> cache <identifiersep> key ( origin <identifiersep> invoker ) ; \n \t3 exporter <identifiersep> changeable <identifiersep> wrapper < ? > exporter = bounds . get ( key ) ; \n \t3 if ( exporter == null ) { \n <ect>
\t3 return false ; } \n \t2 string path = <string_literal> + pid ; \n \t2 file file = new file ( path ) ; \n \t2 if ( file . exists ( ) == false ) { \n <ect>
\t3 <comment> \n \t3 store . load <identifiersep> x <identifiersep> wiki <identifiersep> collection ( referer <identifiersep> stat , this . context , true ) ; \n \t2 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t2 codes . put ( <string_literal> , ( byte ) 0x04 ) ; \n \t2 codes . put ( <string_literal> , ( byte ) 0x14 ) ; \n \t2 byte code = codes . get ( arm <identifiersep> mode ) ; \n \t2 if ( code == null ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> delete <identifiersep> all <identifiersep> older <identifiersep> than ( ) { \n \t2 try { \n \t3 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t1 instance ; \n \t1 @ override \n \t1 public boolean apply ( vm <identifiersep> info arg0 ) { \n \t1 if ( arg0 . get <identifiersep> group <identifiersep> names ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t3 url = server + <string_literal> + zone <identifiersep> id + <string_literal> + s <identifiersep> account . get ( ) + <string_literal> ; \n \t3 client = new http <identifiersep> client ( ) ; \n \t3 method = new get <identifiersep> method ( url ) ; \n \t3 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t3 upgrade <identifiersep> config . set <identifiersep> upgrade <identifiersep> expire <identifiersep> time ( system . current <identifiersep> time <identifiersep> millis ( ) + tp <identifiersep> ttl ) ; \n \t3 setup <identifiersep> storm <identifiersep> code ( topology <identifiersep> id , uploaded <identifiersep> location , storm <identifiersep> conf , topology , true ) ; \n \t3 map topo <identifiersep> conf = storm <identifiersep> config . read <identifiersep> nimbus <identifiersep> topology <identifiersep> conf ( topology <identifiersep> id , data . get <identifiersep> blob <identifiersep> store ( ) ) ; \n \t3 topo <identifiersep> conf . put <identifiersep> all ( storm <identifiersep> conf ) ; \n <ect>
\t5 ) ; \n \t4 } catch ( unknown <identifiersep> format <identifiersep> exception e ) { \n \t5 logger . debug ( <string_literal> { } \\ <string_literal> , file . get <identifiersep> name ( ) , e . get <identifiersep> message ( ) ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 node <identifiersep> iterator nodes = null ; \n \t1 try { \n \t1 nodes = node . get <identifiersep> nodes ( ) ; \n \t1 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t3 } else { \n \t4 builder . set <identifiersep> http <identifiersep> request <identifiersep> initializer ( credential ) ; } \n \t3 this . client = builder . build ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 if ( r . get <identifiersep> event <identifiersep> type ( ) != xml <identifiersep> stream <identifiersep> constants . start <identifiersep> element ) { \n \t6 r . next <identifiersep> tag ( ) ; } \n \t4 } catch ( xml <identifiersep> stream <identifiersep> exception e ) { \n \t5 <comment> \n <ect>
\t2 if ( devices . is <identifiersep> empty ( ) ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + physnet . get <identifiersep> name ( ) ) ; \n \t3 return null ; } \n \t2 s <identifiersep> logger . debug ( <string_literal> + devices . get ( 0 ) . get <identifiersep> uuid ( ) + <string_literal> + physnet . get <identifiersep> id ( ) ) ; \n <ect>
\t1 public void lost <identifiersep> lock ( final lock <identifiersep> loss <identifiersep> reason reason ) { \n \t2 try { \n \t2 tch . halt ( tracer . trace <identifiersep> info ( ) , null , null ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 mode = m ; \n \t2 error <identifiersep> codes = null ; \n \t2 this . uri = expected <identifiersep> uri ; \n \t2 if ( mode == insert <identifiersep> exception <identifiersep> mode . internal <identifiersep> error ) \n <ect>
<comment> \n \t1 private auto <identifiersep> saving <identifiersep> cache < key <identifiersep> cache <identifiersep> key , row <identifiersep> index <identifiersep> entry > init <identifiersep> key <identifiersep> cache ( ) \n \t1 { \n <ect>
\t2 log . trace ( <string_literal> ) ; \n \t2 if ( session != null ) { \n \t3 try { \n \t4 if ( ! session . is <identifiersep> live ( ) ) { \n <ect>
\t7 root . commit ( commit <identifiersep> marker . as <identifiersep> commit <identifiersep> attributes ( ) ) ; \n \t7 log . debug ( <string_literal> ) ; \n \t7 return true ; \n \t6 } catch ( commit <identifiersep> failed <identifiersep> exception e ) { \n <ect>
\t6 properties . get <identifiersep> strength ( ) ) ; \n \t4 if ( string <identifiersep> utils . is <identifiersep> blank ( properties . get <identifiersep> secret ( ) ) ) { \n \t5 logger . debug ( <string_literal> ) ; \n \t5 return new b <identifiersep> crypt <identifiersep> password <identifiersep> encoder ( properties . get <identifiersep> strength ( ) ) ; } \n <ect>
\t2 editor . queue ( buf , new run <identifiersep> later < buf > ( ) { \n \t3 @ override \n \t3 public void run ( buf b ) { \n \t4 if ( b . buf == null ) { \n <ect>
\t2 iterator < string > it = map . key <identifiersep> set ( ) . iterator ( ) ; \n \t2 while ( it . has <identifiersep> next ( ) ) { \n \t3 string title = map . get ( it . next ( ) ) . get <identifiersep> title ( ) ; \n \t3 int len = math . min ( title . length ( ) , <number_literal> ) ; \n <ect>
\t7 reset <identifiersep> for <identifiersep> next <identifiersep> flush ( ) ; \n \t6 break ; \n \t5 case flush <identifiersep> header . flush <identifiersep> not <identifiersep> completed : \n <ect>
\t3 log . debug ( <string_literal> ) \n \t3 log . debug ( <string_literal> ) \n \t3 if ( term instanceof windows <identifiersep> terminal ) { \n \t4 windows <identifiersep> terminal winterm = ( windows <identifiersep> terminal ) term \n <ect>
<comment> \n \t1 @ override \n \t1 public void saml <identifiersep> meta <identifiersep> data <identifiersep> service <identifiersep> provider <identifiersep> loading <identifiersep> error ( throwable t ) { \n <ect>
\t2 if ( refresh <identifiersep> token == null ) { \n \t3 logger . warn ( <string_literal> , token ) ; \n \t3 return false ; } \n \t2 if ( ! refresh <identifiersep> token . class . is <identifiersep> assignable <identifiersep> from ( refresh <identifiersep> token . get <identifiersep> class ( ) ) ) { \n <ect>
\t3 if ( bos != null ) { \n \t4 try { \n \t5 bos . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 when : \n \t2 logging <identifiersep> manager . stop ( ) \n \t2 logger . severe ( <string_literal> ) \n \t2 logger . warning ( <string_literal> ) \n <ect>
<comment> \n \t1 private void remap <identifiersep> to <identifiersep> new <identifiersep> primary ( grid <identifiersep> near <identifiersep> atomic <identifiersep> update <identifiersep> request < k , v > req ) { \n <ect>
\t2 ( new file ( webxml <identifiersep> file ) ) . delete ( ) ; } \n \t1 private void process <identifiersep> file ( string file ) \n \t3 throws jasper <identifiersep> exception { \n <ect>
\t6 + <string_literal> +  <identifiersep> outbound <identifiersep> gateways . size ( ) , new exception ( <string_literal> ) ) ; } \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t9 new versioned < byte [ ] > ( byte <identifiersep> utils . get <identifiersep> bytes ( entry . get <identifiersep> value ( ) , \n <number_literal> <string_literal> ) ) , \n \t9 null ) ; \n \t5 } catch ( obsolete <identifiersep> version <identifiersep> exception e ) { \n <ect>
\t3 if ( message instanceof text <identifiersep> message ) { \n \t4 text <identifiersep> message text <identifiersep> message = ( text <identifiersep> message ) message ; \n \t4 log . debug ( <string_literal> , id , text <identifiersep> message . get <identifiersep> text ( ) ) ; \n \t3 } else { \n <ect>
\t3 if ( e . is <identifiersep> fatal ( ) ) { \n \t3 get <identifiersep> stomp <identifiersep> transport ( ) . on <identifiersep> exception ( e ) ; } } } \n \t1 protected void handle <identifiersep> exception ( throwable exception , stomp <identifiersep> frame command ) throws io <identifiersep> exception { \n \t2 if ( command == null ) { \n <ect>
\t1 serialization <identifiersep> result result ; \n \t1 try { \n \t1 result = curr <identifiersep> test . get <identifiersep> serializer ( ) . serialize ( curr <identifiersep> test . get <identifiersep> world ( ) ) ; \n \t1 } catch ( unsupported <identifiersep> object <identifiersep> exception e1 ) { \n <ect>
\t3 } catch ( not <identifiersep> connected <identifiersep> exception e1 ) { \n \t4 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> + uid ) ; \n \t4 return ; \n \t3 } catch ( waited <identifiersep> too <identifiersep> long <identifiersep> exception e1 ) { \n <ect>
\t1 return false ; } \n \t1 return true ; } \n private boolean has <identifiersep> at <identifiersep> least <identifiersep> one <identifiersep> mime <identifiersep> type ( record record ) { \n \t1 if ( ! record . get <identifiersep> fields ( ) . contains <identifiersep> key ( fields . attachment <identifiersep> mime <identifiersep> type ) ) { \n <ect>
<comment> \n \t1 private void write ( string message ) throws exception { \n \t2 if ( has <identifiersep> received <identifiersep> data ( ) && ! is <identifiersep> connected ( ) ) { \n <ect>
\t4 log . info ( <string_literal> , resource <identifiersep> id ) ; \n \t4 accepted . add ( new registered <identifiersep> yarn <identifiersep> worker <identifiersep> node ( yci . container ( ) ) ) ; } \n \t3 else { \n \t4 if ( is <identifiersep> started ( resource <identifiersep> id ) ) { \n <ect>
\t2 } catch ( joran <identifiersep> exception je ) { \n \t3 <comment> \n \t2 status <identifiersep> printer . print <identifiersep> in <identifiersep> case <identifiersep> of <identifiersep> errors <identifiersep> or <identifiersep> warnings ( lc ) ; \n \t2 logger . debug ( <string_literal> ) ; \n <ect>
\t3 <comment> \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank (  <identifiersep> hide <identifiersep> conditions ) && boolean . true . equals ( scripting . evaluate ( render <identifiersep> context , this <identifiersep> node , <string_literal> . concat (  <identifiersep> hide <identifiersep> conditions ) . concat ( <string_literal> ) , <string_literal> ) ) ) { \n \t4 return false ; } \n \t2 } catch ( unlicensed <identifiersep> exception | framework <identifiersep> exception ex ) { \n <ect>
\t2 assert <identifiersep> repository <identifiersep> is <identifiersep> operational ( client , <string_literal> ) ; } \n \t1 public void test <identifiersep> repository <identifiersep> with <identifiersep> custom <identifiersep> credentials ( ) { \n \t2 client client = client ( ) ; \n \t2 settings bucket <identifiersep> settings = internal <identifiersep> cluster ( ) . get <identifiersep> instance ( settings . class ) . get <identifiersep> by <identifiersep> prefix ( <string_literal> ) ; \n <ect>
\t2 } else { \n \t3 <comment> \n \t3 pr . save <identifiersep> to <identifiersep> metadata <identifiersep> table ( context ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 if status [ <string_literal> ] == status [ <string_literal> ] and status [ 'stale <identifiersep> config' ] == false : \n \t2 return false \n \t1 if status [ <string_literal> ] not in self . allowed <identifiersep> desired <identifiersep> states or status [ <string_literal> ] not in self . allowed <identifiersep> current <identifiersep> states : \n \t1 return false \n <ect>
\t5 return send <identifiersep> static <identifiersep> nat <identifiersep> rules ( router , ( list < static <identifiersep> nat <identifiersep> rule > ) rules ) ; \n \t4 } else if ( rules . get ( 0 ) . get <identifiersep> purpose ( ) == purpose . firewall ) { \n \t5 return send <identifiersep> firewall <identifiersep> rules ( router , ( list < firewall <identifiersep> rule > ) rules ) ; \n \t4 } else { \n <ect>
\t3 logger . debug ( <string_literal> , jansi <identifiersep> class ) ; \n \t2 } catch ( final no <identifiersep> such <identifiersep> method <identifiersep> exception nsme ) { \n \t3 logger . warn ( <string_literal> , jansi <identifiersep> class ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t5 continue \n \t4 for dir in os . listdir ( running <identifiersep> pool ) : \n \t5 vm <identifiersep> dir = join ( running <identifiersep> pool , dir ) \n \t5 if not is <identifiersep> my <identifiersep> vm <identifiersep> dir <identifiersep> link ( vm <identifiersep> dir ) : \n <ect>
\t4 if ( upper <identifiersep> case <identifiersep> file <identifiersep> name . starts <identifiersep> with ( <string_literal> ) ) { \n \t5 logger . debug ( <string_literal> + file . get <identifiersep> name ( ) ) ; \n \t5 media . set <identifiersep> stereoscopy ( file . get <identifiersep> name ( ) . substring ( <number_literal> , <number_literal> ) ) ; \n \t4 } else if ( upper <identifiersep> case <identifiersep> file <identifiersep> name . starts <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t3 return ; } \n \t2 final int gossip <identifiersep> settle <identifiersep> min <identifiersep> wait <identifiersep> ms = <number_literal> ; \n \t2 final int gossip <identifiersep> settle <identifiersep> poll <identifiersep> interval <identifiersep> ms = <number_literal> ; \n \t2 final int gossip <identifiersep> settle <identifiersep> poll <identifiersep> successes <identifiersep> required = <number_literal> ; \n <ect>
\t5 string time <identifiersep> stamp = new simple <identifiersep> date <identifiersep> format ( <string_literal> ) \n \t7 . format ( calendar . get <identifiersep> instance ( ) . get <identifiersep> time ( ) ) ; \n \t5 system . err . println ( time <identifiersep> stamp + <string_literal> + job . get <identifiersep> assigned <identifiersep> job <identifiersep> id ( ) + <string_literal> ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 ping <identifiersep> count ++ ; \n \t2 try { \n \t2 list < string > collection <identifiersep> list = new list <identifiersep> collection <identifiersep> handler ( ) . handle ( cloud <identifiersep> solr <identifiersep> client , null ) ; \n \t2 if ( collection <identifiersep> list != null ) { \n <ect>
\t2 if ( delimiter == null ) { \n \t3 delimiter = default <identifiersep> delimiter ; } \n \t2 ns <identifiersep> array components = ns <identifiersep> array . components <identifiersep> separated <identifiersep> by <identifiersep> string ( template , delimiter ) ; \n \t2 if ( ! is <identifiersep> logging <identifiersep> disabled ) { \n <ect>
<comment> \n void deliver ( email <identifiersep> message email <identifiersep> message ) { \n \t1 if ( string <identifiersep> utils . is <identifiersep> blank ( configuration . get <identifiersep> smtp <identifiersep> host ( ) ) ) { \n <ect>
\t3 type parameter = reflection <identifiersep> util . get <identifiersep> type <identifiersep> parameter ( generic <identifiersep> type , 0 ) ; \n \t3 if ( parameter != null ) { \n \t4 copy <identifiersep> strategy < ? > content <identifiersep> strategy = get <identifiersep> strategy ( parameter ) ; \n \t4 return new set <identifiersep> copy <identifiersep> strategy < > ( content <identifiersep> strategy ) ; } \n <ect>
\t6 + <string_literal> ) ; } \n \t4 return null ; } \n \t2 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n \t3 if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t4 tinkerforge <identifiersep> error <identifiersep> handler . handle <identifiersep> error ( this , tinkerforge <identifiersep> error <identifiersep> handler . tf <identifiersep> timeout <identifiersep> exception , e ) ; \n \t3 } catch ( not <identifiersep> connected <identifiersep> exception e ) { \n \t4 tinkerforge <identifiersep> error <identifiersep> handler . handle <identifiersep> error ( this , tinkerforge <identifiersep> error <identifiersep> handler . tf <identifiersep> not <identifiersep> connection <identifiersep> exception , e ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 if ( random <identifiersep> boolean ( ) ) { \n \t3 logger . info ( <string_literal> ) ; \n \t3 result = synced <identifiersep> flush <identifiersep> util . attempt <identifiersep> synced <identifiersep> flush ( internal <identifiersep> cluster ( ) , new shard <identifiersep> id ( index , 0 ) ) ; \n \t2 } else { \n <ect>
\t3 kr2rml <identifiersep> worksheet <identifiersep> rdf <identifiersep> generator rdf <identifiersep> gen = new kr2rml <identifiersep> worksheet <identifiersep> rdf <identifiersep> generator ( worksheet , \n \t4 workspace , \n \t4 generated <identifiersep> rdf <identifiersep> file <identifiersep> name , false , mapping , error <identifiersep> report , selection ) ; \n \t3 rdf <identifiersep> gen . generate <identifiersep> rdf ( true ) ; \n <ect>
\t2 catch ( transaction <identifiersep> failure <identifiersep> exception tfe ) \n \t2 { \n \t3 string location <identifiersep> msg = ( server == null ) ? <string_literal> : \n \t5 <string_literal> + server . get <identifiersep> database ( ) . get <identifiersep> location ( ) ; \n <ect>
\t1 cert <identifiersep> gen . add <identifiersep> extension ( x509extensions . basic <identifiersep> constraints , true , new basic <identifiersep> constraints ( true ) ) ; \n \t1 try { \n \t1 cert <identifiersep> gen . add <identifiersep> extension ( x509extensions . subject <identifiersep> key <identifiersep> identifier , false , new jca <identifiersep> x509extension <identifiersep> utils ( ) . create <identifiersep> subject <identifiersep> key <identifiersep> identifier ( key ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception | cert <identifiersep> runtime <identifiersep> exception e ) { \n <ect>
\t2 for ( node node : handoff <identifiersep> strategy . route <identifiersep> hint ( failed <identifiersep> node ) ) { \n \t3 int node <identifiersep> id = node . get <identifiersep> id ( ) ; \n \t3 if ( ! failed <identifiersep> nodes . contains ( node ) && failure <identifiersep> detector . is <identifiersep> available ( node ) ) { \n <ect>
<comment> \n \t1 protected final void stop <identifiersep> spi ( ) throws grid <identifiersep> exception { \n \t2 for ( t spi : spis ) { \n <ect>
private http <identifiersep> protocol <identifiersep> version get <identifiersep> http <identifiersep> protocol <identifiersep> version ( map < string , ? extends object > properties , string property <identifiersep> key ) \n { \n \t1 if ( properties == null ) \n \t1 { \n <ect>
\t3 set <identifiersep> state <identifiersep> on <identifiersep> device ( new <identifiersep> state , parameter <identifiersep> address ) ; } } \n \t1 @ override \n \t1 protected void internal <identifiersep> receive <identifiersep> update ( string item <identifiersep> name , state new <identifiersep> state ) { \n \t2 for ( enocean <identifiersep> binding <identifiersep> provider provider : providers ) { \n <ect>
\t1 state <identifiersep> lock . unlock ( ) ; } \n \t1 <comment> \n \t1 string str <identifiersep> batch <identifiersep> size = properties . get <identifiersep> property ( \n \t2 rpc <identifiersep> client <identifiersep> configuration <identifiersep> constants . config <identifiersep> batch <identifiersep> size ) ; \n <ect>
\t2 <comment> \n \t2 boolean subscriber <identifiersep> already <identifiersep> deleted = false ; \n \t2 try { \n \t3 broker <identifiersep> service . get <identifiersep> admin <identifiersep> view ( ) . destroy <identifiersep> durable <identifiersep> subscriber ( client <identifiersep> id , subscriber <identifiersep> name ) ; \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> async <identifiersep> with <identifiersep> no <identifiersep> delay ( ) throws exception { \n \t2 reset ( ) ; \n \t2 response response = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) . get ( ) ; \n <ect>
\t3 try { \n \t4 if ( ! socket . is <identifiersep> closed ( ) ) \n \t5 socket . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 protected jndi <identifiersep> registry create <identifiersep> registry ( ) throws exception { \n \t2 jndi <identifiersep> registry registry = new jndi <identifiersep> registry ( create <identifiersep> jndi <identifiersep> context ( ) ) ; \n \t2 registry . bind ( <string_literal> , new processor ( ) { \n \t3 public void process ( exchange exchange ) throws exception { \n <ect>
\t1 level l = level . to <identifiersep> level ( level <identifiersep> str , null ) ; \n \t1 if ( l != null ) { \n \t1 set <identifiersep> threshold ( l ) ; \n \t1 } else { \n <ect>
\t2 int received = 0 ; \n \t2 while ( enumeration . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t3 message m = ( message ) enumeration . next <identifiersep> element ( ) ; \n \t3 received ++ ; \n <ect>
\t2 for name in dir ( m ) : \n \t3 clz = getattr ( m , name ) \n \t3 if type ( clz ) is types . type <identifiersep> type and issubclass ( clz , ovm <identifiersep> object ) : \n \t4 exposed <identifiersep> class [ name ] = clz \n <ect>
\t2 try { \n \t3 obj . put ( generic <identifiersep> json <identifiersep> keys . update <identifiersep> type . name ( ) , <string_literal> ) ; \n \t3 pw . println ( obj . to <identifiersep> string ( ) ) ; \n \t2 } catch ( json <identifiersep> exception e ) { \n <ect>
def action <identifiersep> remove ( self ) : \n \t1 if self . user : \n \t1 command = [ 'userdel' , self . resource . username ] \n \t1 shell . checked <identifiersep> call ( command , sudo = true ) \n <ect>
\t1 } finally { \n \t1 try { \n \t2 client . close ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 if ( clock <identifiersep> frequency != null ) { \n \t4 logger . debug ( <string_literal> , clock <identifiersep> frequency ) ; \n \t4 tinkerforge <identifiersep> device . set <identifiersep> clock <identifiersep> frequency ( clock <identifiersep> frequency ) ; \n \t3 } else { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> assertion <identifiersep> fail ( ) throws exception { \n \t2 assertion . set <identifiersep> x <identifiersep> path <identifiersep> string ( <string_literal> ) ; \n \t2 assertion <identifiersep> result res = assertion . get <identifiersep> result ( result ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 log . info ( <string_literal> , db . get <identifiersep> dialect ( ) ) ; \n <ect>
\t3 while ( ! closed ) { \n \t4 try { \n \t5 if ( ! closed && null == stream ) { \n \t6 <comment> \n <ect>
\t1 file <identifiersep> system fs = get <identifiersep> data <identifiersep> location ( ) . get <identifiersep> file <identifiersep> system ( session <identifiersep> state . get <identifiersep> session <identifiersep> conf ( ) ) ; \n \t1 string path <identifiersep> pattern = get <identifiersep> data <identifiersep> location ( ) . to <identifiersep> string ( ) ; \n \t1 if ( get <identifiersep> bucket <identifiersep> count ( ) > 0 ) { \n \t2 path <identifiersep> pattern = path <identifiersep> pattern + <string_literal> ; } \n <ect>
\t5 registry <identifiersep> lock . read <identifiersep> lock ( ) . unlock ( ) ; } \n \t3 } else { \n \t4 logger . error ( <string_literal> ) ; } \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 public void reindex <identifiersep> entities ( final class entity <identifiersep> class , final string entity <identifiersep> name , final full <identifiersep> text <identifiersep> session search ) \n \t1 { \n <ect>
\t1 @ override \n \t1 protected event do <identifiersep> pre <identifiersep> execute ( final request <identifiersep> context context ) throws exception { \n \t2 final credential credential = construct <identifiersep> credentials <identifiersep> from <identifiersep> request ( context ) ; \n \t2 if ( credential == null ) { \n <ect>
\t3 final timeout request <identifiersep> timeout , \n \t3 final object state ) { \n \t2 args . not <identifiersep> null ( route , <string_literal> ) ; \n <ect>
\t5 for ( titan <identifiersep> element element : elements ) { \n \t6 set < index <identifiersep> serializer . index <identifiersep> update < static <identifiersep> buffer , entry > > updates = \n \t8 index <identifiersep> serializer . reindex <identifiersep> element ( element , ( composite <identifiersep> index <identifiersep> type ) index <identifiersep> type ) ; \n \t6 for ( index <identifiersep> serializer . index <identifiersep> update < static <identifiersep> buffer , entry > update : updates ) { \n <ect>
\t4 if ( pms <identifiersep> skel <identifiersep> conf <identifiersep> file . is <identifiersep> file ( ) ) { \n \t5 if ( file <identifiersep> util . is <identifiersep> file <identifiersep> readable ( pms <identifiersep> skel <identifiersep> conf <identifiersep> file ) ) { \n \t6 <comment> \n \t6 configuration . load ( pms <identifiersep> skel <identifiersep> conf <identifiersep> file ) ; \n <ect>
\t2 s <identifiersep> instance . cleanup <identifiersep> this <identifiersep> server ( ) ; \n \t2 try { \n \t3 jmx <identifiersep> util . register <identifiersep> m <identifiersep> bean ( <string_literal> , <string_literal> , s <identifiersep> instance ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 protected file ccn <identifiersep> name <identifiersep> to <identifiersep> file <identifiersep> path ( content <identifiersep> name name ) { \n \t2 content <identifiersep> name file <identifiersep> name <identifiersep> postfix = name . postfix (  <identifiersep> prefix ) ; \n \t2 if ( null == file <identifiersep> name <identifiersep> postfix ) { \n \t3 <comment> \n <ect>
\t4 if ( grid <identifiersep> dialect <identifiersep> logger . activation <identifiersep> needed ( ) ) { \n \t5 grid <identifiersep> dialect = new grid <identifiersep> dialect <identifiersep> logger ( grid <identifiersep> dialect ) ; \n \t5 log . info ( <string_literal> ) ; } \n \t4 else { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 catch ( final queue <identifiersep> unavailable <identifiersep> exception e ) { \n \t1 try { \n \t2 send <identifiersep> disconnect <identifiersep> due <identifiersep> to <identifiersep> session <identifiersep> expiry ( http <identifiersep> servlet <identifiersep> response ) ; \n \t1 } catch ( final io <identifiersep> exception ioe ) { \n <ect>
\t3 array <identifiersep> list < integer > consume <identifiersep> list = consume <identifiersep> messages ( <string_literal> ) ; \n \t3 if ( ! browse <identifiersep> list . equals ( consume <identifiersep> list ) ) { \n \t4 log . info ( <string_literal> + browse <identifiersep> list . size ( ) ) ; \n \t4 log . info ( <string_literal> + consume <identifiersep> list . size ( ) ) ; \n <ect>
\t1 try { \n \t1 class rendered <identifiersep> class = loader . load <identifiersep> class ( rendered <identifiersep> class <identifiersep> name ) ; \n \t1 repository . set <identifiersep> renderer ( rendered <identifiersep> class , renderer ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t9 log . debug ( <string_literal> , mapping <identifiersep> parameter <identifiersep> entry . get <identifiersep> key ( ) ) ; \n \t8 } else if ( param <identifiersep> value instanceof string [ ] ) { \n \t9 log . debug ( <string_literal> , mapping <identifiersep> parameter <identifiersep> entry . get <identifiersep> key ( ) , arrays . to <identifiersep> string ( ( string [ ] ) param <identifiersep> value ) ) ; \n \t8 } else if ( param <identifiersep> value instanceof string ) { \n <ect>
\t3 column <identifiersep> family <identifiersep> handle handler = get <identifiersep> column <identifiersep> family <identifiersep> handle ( window ) ; \n \t3 rocks <identifiersep> db . drop <identifiersep> column <identifiersep> family ( handler ) ; \n \t3 window <identifiersep> to <identifiersep> cf <identifiersep> handler . remove ( window ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 + pretty <identifiersep> string ( doc ) ) ; } \n \t2 test <identifiersep> consistant <identifiersep> schema ( doc ) ; \n \t2 <comment> \n \t2 doc = get <identifiersep> as <identifiersep> dom ( <string_literal> ) ; \n <ect>
\t2 <comment> \n \t2 final command <identifiersep> result is <identifiersep> master = db . command ( <string_literal> ) ; \n \t2 if ( is <identifiersep> master == null ) { \n \t3 <comment> \n <ect>
\t2 logger . trace ( <string_literal> , command , item <identifiersep> name ) ; \n \t2 if ( myq <identifiersep> online <identifiersep> data != null ) { \n \t3 compute <identifiersep> command <identifiersep> for <identifiersep> item ( command , item <identifiersep> name ) ; \n \t2 } else { \n <ect>
\t1 try { \n \t1 <comment> \n \t1 return is <identifiersep> local <identifiersep> file ( conf , new uri ( file <identifiersep> name ) ) ; \n \t1 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t2 return create <identifiersep> service <identifiersep> filter ( configuration <identifiersep> properties . get <identifiersep> service <identifiersep> filter ( ) ) ; } \n \t1 @ post <identifiersep> construct \n \t1 public void add <identifiersep> service <identifiersep> filter <identifiersep> configurations ( ) { \n \t2 if ( ! ( bean <identifiersep> factory instanceof configurable <identifiersep> bean <identifiersep> factory ) ) { \n <ect>
\t4 s <identifiersep> logger . debug ( t . get <identifiersep> request <identifiersep> uri ( ) + <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> tick ) + <string_literal> ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 string response = <string_literal> ; \n <ect>
\t4 assert req != null ; \n \t4 req . remove <identifiersep> locks ( rmv <identifiersep> locks ) ; \n \t4 req . add <identifiersep> candidate ( lock . key ( ) , new grid <identifiersep> cache <identifiersep> dgc <identifiersep> lock <identifiersep> candidate ( node <identifiersep> id , null , lock . version ( ) ) ) ; } } \n <ect>
\t4 this . directory = get <identifiersep> default <identifiersep> directory ( ) ; } \n \t3 <comment> \n \t3 cleanup <identifiersep> directory ( this . directory ) ; \n \t3 cleanup <identifiersep> directory ( this . index <identifiersep> directory ) ; } \n <ect>
\t2 if ( ( end <identifiersep> date == null ) || end <identifiersep> date . after ( new date ( ) ) ) { \n \t3 end <identifiersep> date = new date ( ) ; } \n \t2 list < usage <identifiersep> vpn <identifiersep> user <identifiersep> vo > usage <identifiersep> v <identifiersep> us = s <identifiersep> usage <identifiersep> vpn <identifiersep> user <identifiersep> dao . get <identifiersep> usage <identifiersep> records ( account . get <identifiersep> id ( ) , account . get <identifiersep> domain <identifiersep> id ( ) , start <identifiersep> date , end <identifiersep> date , false , 0 ) ; \n \t2 if ( usage <identifiersep> v <identifiersep> us . is <identifiersep> empty ( ) ) { \n <ect>
\t5 <comment> \n \t5 log . error ( <string_literal> + \n \t7 <string_literal> + cluster <identifiersep> url ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 throw new runtime <identifiersep> exception ( <string_literal> ) ; \n \t2 side side = fml <identifiersep> common <identifiersep> handler . instance ( ) . get <identifiersep> side ( ) ; \n \t2 if ( client <identifiersep> side <identifiersep> only && side != side . client ) \n \t2 { \n <ect>
\t3 logger . error ( this , <string_literal> + ft <identifiersep> timeout , new exception ( <string_literal> ) ) ; \n \t3 ft <identifiersep> timeout = math . max ( math . min ( reject <identifiersep> time , ft <identifiersep> timeout ) , 0 ) ; } \n \t2 if ( rf <identifiersep> timeout < 0 || rf <identifiersep> timeout > recently <identifiersep> failed <identifiersep> time ) { \n \t3 if ( rf <identifiersep> timeout > 0 ) \n <ect>
\t5 producer . set <identifiersep> delivery <identifiersep> mode ( delivery <identifiersep> mode . persistent ) ; \n \t5 text <identifiersep> message message = session . create <identifiersep> text <identifiersep> message ( create <identifiersep> message <identifiersep> text ( ) ) ; \n \t5 for ( int count = 0 ; count < message <identifiersep> count ; count ++ ) { \n \t6 producer . send ( message ) ; } \n <ect>
\t3 byte <identifiersep> sequence sequence = baos . to <identifiersep> byte <identifiersep> sequence ( ) ; \n \t3 datagram <identifiersep> packet datagram = new datagram <identifiersep> packet ( sequence . get <identifiersep> data ( ) , sequence . get <identifiersep> offset ( ) , sequence . get <identifiersep> length ( ) , address ) ; \n \t3 socket . send ( datagram ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t2 while ( ( current <identifiersep> time - start <identifiersep> time ) < <number_literal> ) { \n \t3 i ++ ; \n \t3 current <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 if ( utilities . is <identifiersep> prime ( i ) ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t4 && ! new string ( id , utf <identifiersep> <number_literal> ) . equals ( hdfs <identifiersep> zoo <identifiersep> instance . get <identifiersep> instance ( ) . get <identifiersep> instance <identifiersep> id ( ) ) ) { \n \t3 try { \n \t4 zk . recursive <identifiersep> delete ( instance <identifiersep> name <identifiersep> path , node <identifiersep> missing <identifiersep> policy . skip ) ; \n \t3 } catch ( keeper <identifiersep> exception . no <identifiersep> auth <identifiersep> exception ex ) { \n <ect>
\t6 log . warn ( <string_literal> , clazz . get <identifiersep> name ( ) , str ) ; \n \t6 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + str + <string_literal> + clazz . get <identifiersep> name ( ) ) ; } } \n \t3 } else { \n \t4 <comment> \n <ect>
\t3 <comment> \n \t3 if ( input <identifiersep> stream <identifiersep> ids . contains ( stream <identifiersep> id ) ) { \n \t4 <comment> \n \t4 long batch <identifiersep> id = kryo <identifiersep> input . read <identifiersep> long ( true ) ; \n <ect>
\t3 list < string > protocol <identifiersep> skip <identifiersep> list = ( ambari <identifiersep> skip <identifiersep> check <identifiersep> values == null ? new linked <identifiersep> list < string > ( ) : arrays . as <identifiersep> list ( ambari <identifiersep> skip <identifiersep> check <identifiersep> values . split ( <string_literal> ) ) ) ; \n \t3 if ( null != protocol && protocol <identifiersep> skip <identifiersep> list . contains ( protocol ) ) { \n \t4 return boolean . false ; } \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t2 activities <identifiersep> reporter = new activities <identifiersep> reporter ( ) ; \n \t2 android <identifiersep> wait = new android <identifiersep> wait ( ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> create ( ) { \n <ect>
\t5 if ( lucene . is <identifiersep> corruption <identifiersep> exception ( failure ) ) { \n \t6 try { \n \t7 store . mark <identifiersep> store <identifiersep> corrupted ( new io <identifiersep> exception ( <string_literal> + reason + <string_literal> , exceptions <identifiersep> helper . unwrap <identifiersep> corruption ( failure ) ) ) ; \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 return new task <identifiersep> runner2result ( end <identifiersep> reason . kill <identifiersep> requested , null , null , false ) ; } \n \t2 try { \n \t2 task <identifiersep> runner2result result = task <identifiersep> runner . run ( ) ; \n \t2 if ( result . is <identifiersep> container <identifiersep> shutdown <identifiersep> requested ( ) ) { \n <ect>
\t4 message message = session . create <identifiersep> text <identifiersep> message ( new string ( buf ) + messages <identifiersep> sent . to <identifiersep> string ( ) ) ; \n \t4 producer . send ( message ) ; \n \t4 messages <identifiersep> sent . increment <identifiersep> and <identifiersep> get ( ) ; \n \t4 if ( messages <identifiersep> sent . get ( ) % <number_literal> == 0 ) { \n <ect>
\t2 assert <identifiersep> that ( response . get <identifiersep> index ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 assert <identifiersep> that ( response . get <identifiersep> source <identifiersep> as <identifiersep> bytes ( ) , null <identifiersep> value ( ) ) ; \n \t2 assert <identifiersep> that ( response . get <identifiersep> field ( <string_literal> ) . get <identifiersep> values ( ) . get ( 0 ) . to <identifiersep> string ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 assert <identifiersep> that ( response . get <identifiersep> field ( <string_literal> ) , null <identifiersep> value ( ) ) ; \n <ect>
\t3 try { \n \t4 if (  <identifiersep> rules <identifiersep> mgr . revoke <identifiersep> all <identifiersep> pf <identifiersep> static <identifiersep> nat <identifiersep> rules <identifiersep> for <identifiersep> network ( network <identifiersep> id , user <identifiersep> id , caller ) ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + network <identifiersep> id ) ; \n \t4 } else { \n <ect>
\t1 this . http . add <identifiersep> servlet ( <string_literal> , <string_literal> , llap <identifiersep> peer <identifiersep> registry <identifiersep> servlet . class ) ; \n \t1 this . http . add <identifiersep> servlet ( <string_literal> , <string_literal> , llap <identifiersep> io <identifiersep> memory <identifiersep> servlet . class ) ; \n \t1 this . http . add <identifiersep> servlet ( <string_literal> , <string_literal> , system <identifiersep> configuration <identifiersep> servlet . class ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 node original <identifiersep> root , node js , pass <identifiersep> factory pass <identifiersep> factory ) { \n \t1 hot <identifiersep> swap <identifiersep> compiler <identifiersep> pass pass = pass <identifiersep> factory . get <identifiersep> hot <identifiersep> swap <identifiersep> pass ( this ) ; \n \t1 if ( pass != null ) { \n \t1 if ( logger . is <identifiersep> loggable ( level . info ) ) { \n <ect>
\t2 addresses . get <identifiersep> instance ( ) . stop ( address ) } \n \t1 } catch ( final exception e ) { \n \t2 logger . error ( <string_literal> , e ) } \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t2 nm <identifiersep> token <identifiersep> identifier nm <identifiersep> ident = null ; \n \t2 try { \n \t3 remote <identifiersep> ugi = user <identifiersep> group <identifiersep> information . get <identifiersep> current <identifiersep> user ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 captions , max <identifiersep> caption <identifiersep> length ) ) ; \n \t3 default <identifiersep> http <identifiersep> client client = new default <identifiersep> http <identifiersep> client ( ) ; \n \t3 http <identifiersep> response response = client . execute ( new http <identifiersep> get ( health <identifiersep> uri ) ) ; \n \t3 available = response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) == <number_literal> ; \n <ect>
\t3 add <identifiersep> splits <identifiersep> result result = new add <identifiersep> splits <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
<number_literal> this , \n <number_literal> this . properties ) ; \n \t3 } catch ( throwable e ) { \n \t4 <comment> \n <ect>
\t2 client client = client ( ) ; \n \t2 <comment> \n \t2 string doc <identifiersep> id = integer . to <identifiersep> string ( random <identifiersep> int ( ) ) ; \n \t2 index ( index <identifiersep> name , type <identifiersep> name , doc <identifiersep> id , <string_literal> , expected <identifiersep> value ) ; \n <ect>
\t3 log = true ; \n \t3 msg . discard <identifiersep> data ( ) ; \n \t2 } else { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 return database <identifiersep> descriptor . get <identifiersep> counter <identifiersep> write <identifiersep> rpc <identifiersep> timeout ( ) ; } \n \t1 public void set <identifiersep> cas <identifiersep> contention <identifiersep> timeout ( long value ) \n \t1 { \n \t2 database <identifiersep> descriptor . set <identifiersep> cas <identifiersep> contention <identifiersep> timeout ( value ) ; \n <ect>
\t4 in = new buffered <identifiersep> input <identifiersep> stream ( new gzip <identifiersep> input <identifiersep> stream ( error <identifiersep> stream ) ) ; \n \t3 } else { \n \t4 in = new buffered <identifiersep> input <identifiersep> stream ( error <identifiersep> stream ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3 indexer . stop ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 refresh <identifiersep> and <identifiersep> assert ( ) ; \n <ect>
\t2 boolean result = true ; \n \t2 string msg = <string_literal> + type <identifiersep> string + <string_literal> ; \n \t2 for ( virtual <identifiersep> router router : routers ) { \n \t3 if ( router . get <identifiersep> state ( ) == state . running ) { \n <ect>
\t7 thread . sleep ( sleep . millis ( ) ) ; } \n \t6 try { \n \t7 channel . send <identifiersep> response ( new string <identifiersep> message <identifiersep> response ( <string_literal> + request . message ) ) ; \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> renew , boolean <identifiersep> utils . to <identifiersep> string <identifiersep> yes <identifiersep> no ( this . renew ) , \n \t3 boolean <identifiersep> utils . to <identifiersep> string <identifiersep> yes <identifiersep> no ( assertion . is <identifiersep> from <identifiersep> new <identifiersep> login ( ) ) ) ; \n \t2 boolean satisfied = is <identifiersep> satisfied <identifiersep> by <identifiersep> internal ( assertion ) ; \n \t2 if ( ! satisfied ) { \n <ect>
\t1 private void stop <identifiersep> consumer ( route route ) { \n \t2 synchronized ( lock ) { \n \t3 try { \n \t4 if ( ! suspended <identifiersep> routes . contains ( route ) ) { \n <ect>
\t4 service <identifiersep> monitor . set <identifiersep> monitor <identifiersep> name ( ns <identifiersep> monitor <identifiersep> name ) ; \n \t4 service <identifiersep> monitor . set <identifiersep> name ( ns <identifiersep> service <identifiersep> name ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + ns <identifiersep> monitor <identifiersep> name + <string_literal> + ns <identifiersep> service <identifiersep> name ) ; \n \t4 service <identifiersep> lbmonitor <identifiersep> binding . delete (  <identifiersep> netscaler <identifiersep> service , service <identifiersep> monitor ) ; \n <ect>
\t8 shortcircuited <identifiersep> fields . add ( full <identifiersep> field <identifiersep> name ) ; } } \n \t5 } else if ( validator <identifiersep> context . has <identifiersep> action <identifiersep> errors ( ) ) { \n \t6 collection < string > err <identifiersep> col = validator <identifiersep> context . get <identifiersep> action <identifiersep> errors ( ) ; \n \t6 if ( ( err <identifiersep> col != null ) && ! err <identifiersep> col . equals ( errs ) ) { \n <ect>
\t3 long max <identifiersep> burst <identifiersep> in = ( (  <identifiersep> inbound <identifiersep> burst <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second -  <identifiersep> inbound <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second ) * <number_literal> * num <identifiersep> ms ) / <number_literal> ; \n \t3 long max <identifiersep> burst <identifiersep> out = ( (  <identifiersep> outbound <identifiersep> burst <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second -  <identifiersep> outbound <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second ) * <number_literal> * num <identifiersep> ms ) / <number_literal> ; \n \t3  <identifiersep> limiter . refill <identifiersep> bandwidth <identifiersep> queues ( buffer , inbound <identifiersep> to <identifiersep> add , outbound <identifiersep> to <identifiersep> add , max <identifiersep> burst <identifiersep> in , max <identifiersep> burst <identifiersep> out ) ; \n \t3 <comment> \n <ect>
\t3 public void do <identifiersep> in <identifiersep> transaction <identifiersep> without <identifiersep> result ( transaction <identifiersep> status status ) { \n \t4 user <identifiersep> vm user <identifiersep> vm =  <identifiersep> user <identifiersep> vm <identifiersep> dao . acquire <identifiersep> in <identifiersep> lock <identifiersep> table ( user <identifiersep> vm <identifiersep> id ) ; <comment> \n \t4 <comment> \n \t4 if ( user <identifiersep> vm == null ) { \n <ect>
\t1 @ override \n \t1 public boolean delete ( k key , version version ) throws voldemort <identifiersep> exception { \n \t2 if ( fail ) { \n <ect>
\t1 @ suppress <identifiersep> warnings ( { <string_literal> , <string_literal> } ) \n \t1 public static integer mk <identifiersep> task <identifiersep> maker ( map < object , object > storm <identifiersep> conf , map < string , ? > cid <identifiersep> spec , \n \t9 map < integer , task <identifiersep> info > rtn , integer cnt ) { \n \t2 if ( cid <identifiersep> spec == null ) { \n <ect>
\t6 delayed <identifiersep> event <identifiersep> handling . wait <identifiersep> for <identifiersep> nodes ( scale ) ; } \n \t4 } ; \n \t4 double t = test . run ( ) ; \n \t4 execution <identifiersep> times . add ( t ) ; \n <ect>
\t5 } else if ( ext == <number_literal> ) { \n \t6 m . set <identifiersep> crc2 ( ) ; } \n \t4 } else { \n \t5 m = dev . make <identifiersep> standard <identifiersep> message ( ( byte ) 0x0f , ( byte ) direc , ( byte ) level , s <identifiersep> get <identifiersep> group ( conf ) ) ; } \n <ect>
\t2 grid <identifiersep> test <identifiersep> utils . run <identifiersep> multi <identifiersep> threaded ( new callable < void > ( ) { \n \t3 @ override public void call ( ) throws exception { \n \t4 for ( int i = 0 ; i < iterations <identifiersep> per <identifiersep> thread && ! failed ; i ++ ) { \n \t5 if ( i % <number_literal> == 0 ) \n <ect>
\t3 if ( trust <identifiersep> store != null ) { \n \t4 try { \n \t5 ssl <identifiersep> factory . set <identifiersep> trust <identifiersep> store ( trust <identifiersep> store ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 log . info ( <string_literal> , handle <identifiersep> fault ) ; \n \t3 camel <identifiersep> context . add <identifiersep> intercept <identifiersep> strategy ( handle <identifiersep> fault ) ; } \n \t2 inflight <identifiersep> repository inflight <identifiersep> repository = get <identifiersep> single <identifiersep> bean <identifiersep> of <identifiersep> type ( application <identifiersep> context , inflight <identifiersep> repository . class ) ; \n \t2 if ( inflight <identifiersep> repository != null ) { \n <ect>
\t3 if ( resp != null ) { \n \t4 return resp . get <identifiersep> success ( ) ; } \n \t3 return false ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 } else { \n \t5 m = dev . make <identifiersep> standard <identifiersep> message ( ( byte ) 0x0f , ( byte ) cmd1 , ( byte ) cmd2 ) ; \n \t5 m . set <identifiersep> byte ( vfield , level ) ; } \n \t4 dev . enqueue <identifiersep> message ( m , m <identifiersep> feature ) ; \n <ect>
\t3 if ( algorithm != null ) { \n \t4 pbe <identifiersep> string <identifiersep> encryptor . set <identifiersep> algorithm ( algorithm ) ; \n \t4 log . debug ( format ( <string_literal> , algorithm ) ) ; \n \t3 } else { \n <ect>
\t3 catch ( shutdown <identifiersep> signal <identifiersep> exception sig ) { \n \t4 if ( ! is <identifiersep> normal <identifiersep> shutdown ( sig ) ) { \n \t5 logger . debug ( <string_literal> , sig ) ; } } \n \t3 catch ( exception ex ) { \n <ect>
\t4 return false ; } \n \t3 if ( compress && ! path <identifiersep> string . ends <identifiersep> with ( <string_literal> ) ) { \n \t4 file compress <identifiersep> to = new file ( path <identifiersep> string + <string_literal> ) ; \n \t4 if ( compress <identifiersep> to . exists ( ) ) { \n <ect>
\t1 boolean result <identifiersep> available = false ; \n \t1 privileged <identifiersep> event result ; \n \t1 try { \n <ect>
\t6 throw ( error ) cause ; } } } \n \t3 eval . invoke ( instance , new object [ ] { <string_literal> } ) ; <comment> \n \t3 eval . invoke ( instance , new object [ ] { <string_literal> } ) ; <comment> \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 else : \n \t2 self .  <identifiersep> download <identifiersep> file ( new <identifiersep> target , new <identifiersep> source , file <identifiersep> status ) \n def  <identifiersep> create <identifiersep> local <identifiersep> directory ( self , target ) : \n \t1 if not os . path . exists ( target ) : \n <ect>
\t3 result . append ( <string_literal> ) . append ( n . get <identifiersep> name ( ) ) ; \n \t2 } else if ( n . equals ( node . any ) ) { \n \t3 result . append ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t1 raw <identifiersep> store ms = get <identifiersep> ms ( ) ; \n \t1 try { \n \t2 admin <identifiersep> role = ms . get <identifiersep> role ( admin ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> object <identifiersep> exception e ) { \n <ect>
\t5 } catch ( exception e ) { \n \t6 queued <identifiersep> sink . log . warn ( <string_literal> + e ) ; } \n \t5 long duration <identifiersep> ms = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time <identifiersep> ms ; \n \t5 if ( failure ) { \n <ect>
\t3 byte [ ] initial <identifiersep> value = null ; \n \t3 mutator . cas ( in <identifiersep> key , initial <identifiersep> value , max <identifiersep> expiration <identifiersep> time , mutation ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t1 job . set <identifiersep> duration ( ( system . current <identifiersep> time <identifiersep> millis ( ) / millis <identifiersep> in <identifiersep> second ) - ( job . get <identifiersep> date <identifiersep> submitted ( ) / millis <identifiersep> in <identifiersep> second ) ) ; } \n public void set <identifiersep> creation <identifiersep> date ( ) { \n \t1 job . set <identifiersep> date <identifiersep> submitted ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; } \n private void setup <identifiersep> log <identifiersep> file ( ) { \n <ect>
\t2 mdc . remove ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> , s ) ; } \n \t1 @ override \n \t1 public void test <identifiersep> failure ( failure failure ) { \n <ect>
\t2 if ( filename <identifiersep> exists && ! filename . can <identifiersep> write ( ) ) { \n \t3 logger . error ( file <identifiersep> persistent <identifiersep> config . class , <string_literal> + filename ) ; \n \t3 system . err . println ( <string_literal> + filename ) ; } \n \t2 if ( temp <identifiersep> filename <identifiersep> exists && ! temp <identifiersep> filename . can <identifiersep> write ( ) ) { \n <ect>
\t4 try { \n \t5 if ( ! ( on <identifiersep> timeout != null && ( !  <identifiersep> to <identifiersep> i2p ) && total <identifiersep> received < = 0 ) ) \n \t6 out . close ( ) ; \n \t5 else if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 try { \n \t4 log . debug ( <string_literal> , e ) ; \n \t4 connection . rollback ( ) ; } \n \t3 catch ( exception rbe ) { \n <ect>
\t3 try { \n \t4 property <identifiersep> map node <identifiersep> properties = property <identifiersep> map . input <identifiersep> type <identifiersep> to <identifiersep> java <identifiersep> type ( security <identifiersep> context , properties ) ; \n \t4 node <identifiersep> to <identifiersep> insert = app . create ( dom <identifiersep> node . class , node <identifiersep> properties ) ; \n \t3 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t1 cleanup <identifiersep> service . cleanup <identifiersep> result result = cleanup <identifiersep> service . cleanup ( new time <identifiersep> based <identifiersep> cleanup <identifiersep> policy ( cleanup <identifiersep> context . get <identifiersep> cluster <identifiersep> name ( ) , cleanup <identifiersep> context . get <identifiersep> from <identifiersep> day <identifiersep> timestamp ( ) ) ) ; \n \t1 <comment> \n \t1 injector . get <identifiersep> instance ( ambari <identifiersep> jpa <identifiersep> persist <identifiersep> service . class ) . stop ( ) ; \n \t1 if ( result . get <identifiersep> error <identifiersep> count ( ) > 0 ) { \n <ect>
def get <identifiersep> patch <identifiersep> name <identifiersep> with <identifiersep> version ( patch <identifiersep> name <identifiersep> prefix ) : \n \t1 # jira's rest api is broken wrt to attachments . https : <comment> \n \t1 # using crude way to get list of attachments . \n \t1 url = <string_literal> + args . jira <identifiersep> id \n <ect>
\t7 logger . info ( <string_literal> , index , merged <identifiersep> mapper . type ( ) ) ; } } \n \t4 } else { \n \t5 updated = true ; \n <ect>
\t5 logger . trace ( <string_literal> , r . uuid ( ) , parent <identifiersep> uuid ) ; } \n \t3 } else { \n \t4 notify <identifiersep> and <identifiersep> add ( r ) ; } \n \t2 } else if ( ! was <identifiersep> resumed ) { \n <ect>
\t2 docs <identifiersep> provider docs <identifiersep> provider = ( docs <identifiersep> provider ) provider ; \n \t2 providers . add ( docs <identifiersep> provider ) ; } \n \t2 else \n \t2 { \n <ect>
\t2 if ( dfv . get <identifiersep> num <identifiersep> entries ( ) == 0 ) { \n \t2 tablet . get <identifiersep> tablet <identifiersep> server ( ) . get <identifiersep> file <identifiersep> system ( ) . delete <identifiersep> recursively ( tmp <identifiersep> datafile . path ( ) ) ; \n \t2 } else { \n \t2 if ( tablet . get <identifiersep> tablet <identifiersep> server ( ) . get <identifiersep> file <identifiersep> system ( ) . exists ( new <identifiersep> datafile . path ( ) ) ) { \n <ect>
\t8 if ( file . exists ( ) ) { \n \t9 if ( file . is <identifiersep> directory ( ) ) { \n \t10 file <identifiersep> utils . delete <identifiersep> directory ( file ) ; } \n \t9 else if ( ! file . delete ( ) ) { \n <ect>
\t3 } catch ( throwable e ) { \n \t4 e = exception <identifiersep> utils . unwrap <identifiersep> invocation <identifiersep> target <identifiersep> exception ( e ) ; \n \t4 exception <identifiersep> utils . handle <identifiersep> throwable ( e ) ; \n \t4 <comment> \n <ect>
\t4 outbound <identifiersep> establish <identifiersep> state state = iter . next ( ) ; \n \t4 if ( state . get <identifiersep> lifetime ( ) > <number_literal> * max <identifiersep> ob <identifiersep> establish <identifiersep> time ) { \n \t5 iter . remove ( ) ; \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 signature . set <identifiersep> last <identifiersep> modified <identifiersep> time ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t2 signature . set <identifiersep> path ( <string_literal> ) ; \n \t2 <comment> \n \t2 <comment> \n <ect>
\t3 in = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( client . get <identifiersep> input <identifiersep> stream ( ) ) ) ; \n \t3 out = new data <identifiersep> output <identifiersep> stream ( client . get <identifiersep> output <identifiersep> stream ( ) ) ; \n \t3 logger . debug ( <string_literal> ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t3 get <identifiersep> component ( ) . on <identifiersep> shutdown <identifiersep> endpoint ( this ) ; } \n \t2 if ( get <identifiersep> consumers ( ) . is <identifiersep> empty ( ) ) { \n \t3 super . shutdown ( ) ; \n \t2 } else { \n <ect>
\t7 log . info ( <string_literal> , vertx ) ; } \n \t6 latch . count <identifiersep> down ( ) ; } \n \t4 } ) ; \n \t3 } else { \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( source ) ) { \n \t3 try { \n \t4 set <identifiersep> value ( integer . parse <identifiersep> int ( source ) ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception nex ) { \n <ect>
\t2 <comment> \n \t2 log . info ( <string_literal> + old <identifiersep> name + <string_literal> + new <identifiersep> name ) ; \n \t2 sql . execute ( string . format ( <string_literal> , table , old <identifiersep> name , new <identifiersep> name ) ) ; \n \t2 } else { \n <ect>
\t9 stats . set <identifiersep> net <identifiersep> bytes <identifiersep> received ( stats . get <identifiersep> net <identifiersep> bytes <identifiersep> received ( ) + stats . get <identifiersep> current <identifiersep> bytes <identifiersep> received ( ) ) ; } \n \t8 stats . set <identifiersep> current <identifiersep> bytes <identifiersep> received ( answer . get <identifiersep> bytes <identifiersep> received ( ) ) ; \n \t8 if ( stats . get <identifiersep> current <identifiersep> bytes <identifiersep> sent ( ) > answer . get <identifiersep> bytes <identifiersep> sent ( ) ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> customer <identifiersep> error <identifiersep> handler ( ) throws exception { \n \t2 string response = template . request <identifiersep> body ( <string_literal> , null , string . class ) ; \n \t2 <comment> \n <ect>
@ override \n public final void success ( core <identifiersep> event event ) { \n \t1 if ( is <identifiersep> response <identifiersep> done ( ) ) { \n <ect>
\t5 ( ( bundle ) plugin <identifiersep> table . get <identifiersep> model ( ) \n \t7 . get <identifiersep> value <identifiersep> at ( selected <identifiersep> rows [ i ] , 0 ) ) . uninstall ( ) ; } \n \t4 catch ( bundle <identifiersep> exception ex ) \n \t4 { \n <ect>
\t6 prop <identifiersep> to <identifiersep> update . set <identifiersep> preferred <identifiersep> handler <identifiersep> classname ( core <identifiersep> prop . get <identifiersep> preferred <identifiersep> handler <identifiersep> classname ( ) ) ; \n \t6 prop <identifiersep> to <identifiersep> update . set <identifiersep> handler <identifiersep> config ( core <identifiersep> prop . get <identifiersep> handler <identifiersep> config ( ) ) ; \n \t6 context . get <identifiersep> administration <identifiersep> service ( ) . save <identifiersep> global <identifiersep> property ( prop <identifiersep> to <identifiersep> update ) ; } } } } \n \t2 catch ( exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void visit ( final op <identifiersep> quad op <identifiersep> quad ) { \n <ect>
\t4 null , <string_literal> , false ) ; \n \t3 assert . assert <identifiersep> true ( mor <identifiersep> host == null ) ; \n \t3 context . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 . put ( <string_literal> , 0 . 0f ) \n \t4 . put ( <string_literal> , 1 . 0f ) \n \t4 . put ( <string_literal> , 0 . 0f ) \n \t4 . build ( ) ) ; \n <ect>
\t3 try { \n \t4 long expiration = jms <identifiersep> message . get <identifiersep> jms <identifiersep> expiration ( ) ; \n \t4 headers . put ( jms <identifiersep> headers . expiration , expiration ) ; } \n \t3 catch ( exception ex ) { \n <ect>
\t4 if ( item <identifiersep> name != null ) { \n \t5 command . post <identifiersep> command ( item <identifiersep> name , get <identifiersep> current <identifiersep> level ( command . get <identifiersep> address ( ) . to <identifiersep> string ( ) ) ) ; \n \t5 logger . debug ( <string_literal> + command . get <identifiersep> address ( ) + <string_literal> + command . get <identifiersep> level ( ) ) ; \n \t5 binding . previous <identifiersep> x10address = command . get <identifiersep> address ( ) ; \n <ect>
\t3 for ( map . entry < string , object > entry : this . attributes . entry <identifiersep> set ( ) ) { \n \t4 string attribute <identifiersep> name = entry . get <identifiersep> key ( ) ; \n \t5 if ( servlet <identifiersep> context . get <identifiersep> attribute ( attribute <identifiersep> name ) != null ) { \n <ect>
\t2 short <identifiersep> name = new kerberos <identifiersep> name ( short <identifiersep> name + <string_literal> + default <identifiersep> realm ) . get <identifiersep> short <identifiersep> name ( ) ; } } \n \t1 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n \t1 log . debug ( <string_literal> , e ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t7 success = true ; \n \t7 log . info ( path + <string_literal> ) ; \n \t7 break ; \n \t6 } catch ( exception e ) { \n <ect>
\t6 if ( ! new file ( f ) . exists ( ) ) { \n \t7 s <identifiersep> logger . warn ( <string_literal> + f ) ; \n \t7 continue ; } \n <ect>
\t4 io <identifiersep> exception ex = new io <identifiersep> exception ( message ) ; \n \t4 report <identifiersep> exception ( ex ) ; \n \t4 complete <identifiersep> client <identifiersep> request ( ) ; } \n \t2 } else { \n <ect>
\t5 x <identifiersep> request . set <identifiersep> secure ( false ) ; \n \t5 x <identifiersep> request . set <identifiersep> scheme ( <string_literal> ) ; \n \t5 set <identifiersep> ports ( x <identifiersep> request , http <identifiersep> server <identifiersep> port ) ; } } \n <ect>
\t3 tournament <identifiersep> player tournament <identifiersep> player = tournament . get <identifiersep> player ( player . get <identifiersep> id ( ) ) ; \n \t3 if ( deck != null && tournament <identifiersep> player != null ) { \n \t4 tournament <identifiersep> player . submit <identifiersep> deck ( deck ) ; } \n \t3 table . join <identifiersep> table ( player , seat ) ; \n <ect>
\t2 template . get <identifiersep> options ( ) . as ( azure <identifiersep> template <identifiersep> options . class ) . availability <identifiersep> set ( availability <identifiersep> set ) ; } } \n private void create <identifiersep> resource <identifiersep> group <identifiersep> if <identifiersep> needed ( string group , string location , azure <identifiersep> template <identifiersep> options options ) { \n \t1 if ( options . get <identifiersep> resource <identifiersep> group ( ) == null ) { \n \t2 options . resource <identifiersep> group ( group ) ; } \n <ect>
\t8 add <identifiersep> topic ( topic ) ; \n \t7 } else { \n \t8 remove <identifiersep> topic ( topic ) ; } } \n \t5 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> sync <identifiersep> node <identifiersep> build ( ) throws exception { \n <ect>
\t2 try { \n \t3 latch . await ( ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t5  <identifiersep> code <identifiersep> cache . put ( lc , lc ) ; \n \t4 } catch ( index <identifiersep> out <identifiersep> of <identifiersep> bounds <identifiersep> exception ioobe ) { } } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t2 expression expression = sql ( <string_literal> ) ; \n \t2 list < ? > value = expression . evaluate ( exchange , list . class ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , <number_literal> , value . size ( ) ) ; \n \t2 for ( object person : value ) { \n <ect>
\t2 log4j <identifiersep> logger . set <identifiersep> level ( level . warn ) ; \n \t2 logger . error ( error <identifiersep> message <identifiersep> with <identifiersep> no <identifiersep> parameters ) ; \n \t2 logger . warn ( warning <identifiersep> message <identifiersep> with <identifiersep> no <identifiersep> parameters ) ; \n \t2 logger . info ( info <identifiersep> message <identifiersep> with <identifiersep> no <identifiersep> parameters ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 count <identifiersep> numeric ++ ; } } \n \t2 double fraction <identifiersep> numeric = ( ( double ) ( count <identifiersep> numeric + 0 . 0 ) ) / ( ( double ) ( examples . size ( ) + 0 . 0 ) ) ; \n \t2 if ( fraction <identifiersep> numeric >= test <identifiersep> threshold ) { \n \t3 is <identifiersep> numeric = true ; \n <ect>
\t2 if ( this . reader <identifiersep> hint <identifiersep> map . contains <identifiersep> key ( hint <identifiersep> type ) ) { \n \t3 this . reader <identifiersep> hint <identifiersep> map . remove ( hint <identifiersep> type ) ; \n \t3 log . info ( string . format ( <string_literal> , hint <identifiersep> type . to <identifiersep> string ( ) ) ) ; \n \t2 } else { \n <ect>
\t3 <comment> \n \t3 local <identifiersep> address local =  <identifiersep> outgoing . remove ( integer . value <identifiersep> of ( my <identifiersep> port ) ) ; \n \t3 if ( local == null ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 if ( context . get <identifiersep> current <identifiersep> user ( ) != null ) { \n \t5 log . error ( <string_literal> + context . get <identifiersep> current <identifiersep> user ( ) . get <identifiersep> email ( ) + <string_literal> \n \t8 + get <identifiersep> action <identifiersep> string ( action ) + <string_literal> ) ; \n \t4 } else { \n <ect>
\t3 if ( ! policy <identifiersep> enforcer <identifiersep> config . enforcement <identifiersep> mode . disabled . equals ( path <identifiersep> config . get <identifiersep> enforcement <identifiersep> mode ( ) ) ) { \n \t4 load <identifiersep> paths <identifiersep> from <identifiersep> server = false ; \n \t4 break ; } } \n \t2 if ( load <identifiersep> paths <identifiersep> from <identifiersep> server ) { \n <ect>
\t3 . build ( ) ; } \n \t1 public void test <identifiersep> different <identifiersep> ports ( ) throws exception { \n \t2 if ( ! network <identifiersep> utils . supports <identifiersep> v6 ) { \n \t3 return ; } \n <ect>
\t2 consumers . remove ( consumer . get <identifiersep> path ( ) ) ; } \n \t1 public default <identifiersep> websocket do <identifiersep> web <identifiersep> socket <identifiersep> connect ( servlet <identifiersep> upgrade <identifiersep> request request , string protocol ) { \n \t2 string protocol <identifiersep> key = protocol ; \n \t2 if ( protocol == null || ! socket <identifiersep> factory . contains <identifiersep> key ( protocol ) ) { \n <ect>
\t3 while ( md5 . length ( ) != <number_literal> ) { \n \t4 md5 = <string_literal> + md5 ; } \n \t3 return md5 ; } \n \t2 catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception nsae ) { \n <ect>
\t4 ( ) - > { \n \t5 try { \n \t6 atomic <identifiersep> boolean timed <identifiersep> out = new atomic <identifiersep> boolean ( ) ; \t1 <comment> \n \t6 do <identifiersep> in <identifiersep> jpa ( this : : entity <identifiersep> manager <identifiersep> factory ,  <identifiersep> entity <identifiersep> manager - > { \n <ect>
\t2 try ( scanner scanner = new scanner ( f , <string_literal> ) ; ) { \n \t3 string [ ] stats = scanner . use <identifiersep> delimiter ( <string_literal> ) . next ( ) . split ( <string_literal> ) ; \n \t3 uptime = new uptime <identifiersep> stats ( double . parse <identifiersep> double ( stats [ 0 ] ) , double . parse <identifiersep> double ( stats [ 1 ] ) ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t4 } else { \n \t5 map . put ( toks [ 0 ] . trim ( ) , toks [ 1 ] . trim ( ) ) ; } \n \t4 num <identifiersep> lines ++ ; } \n \t3 if ( num <identifiersep> lines == 0 ) { \n <ect>
\t3 file the <identifiersep> file = new file ( args [ 1 ] ) ; \n \t3 if ( ! the <identifiersep> file . exists ( ) ) { \n \t4 system . out . println ( <string_literal> + args [ 1 ] ) ; \n \t4 return ; } \n <ect>
\t3 return true ; } \n \t2 final string client <identifiersep> ip = client <identifiersep> info . get <identifiersep> client <identifiersep> ip <identifiersep> address ( ) ; \n \t2 logger . debug ( <string_literal> , client <identifiersep> ip ) ; \n \t2 if ( is <identifiersep> client <identifiersep> ip <identifiersep> address <identifiersep> rejected ( client <identifiersep> ip ) ) { \n <ect>
\t5 initialization <identifiersep> vector ) ; \n \t3 if ( arrays . equals ( mac , mac <identifiersep> from <identifiersep> packet ) ) { \n \t4 logger . trace ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) ) ; \n \t3 } else { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t4 node . set <identifiersep> children <identifiersep> nodes <identifiersep> have <identifiersep> matched ( found <identifiersep> in <identifiersep> children ) ; } \n \t3 node . update <identifiersep> state ( ) ; \n \t3 return node . is <identifiersep> node <identifiersep> has <identifiersep> matched ( ) || node . is <identifiersep> children <identifiersep> nodes <identifiersep> have <identifiersep> matched ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 for ( int i = 0 ; i < n ; i ++ ) \n \t3 try { \n \t4 swap <identifiersep> in ( ids [ i ] ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 transport . start ( ) ; \n \t3 logger . info ( <string_literal> , transport . bound <identifiersep> address ( ) ) ; \n \t3 for ( map . entry < string , bound <identifiersep> transport <identifiersep> address > entry : transport . profile <identifiersep> bound <identifiersep> addresses ( ) . entry <identifiersep> set ( ) ) { \n <ect>
\t2 super . tear <identifiersep> down ( ) ; \n \t2 try { \n \t3 cm . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 sizes ( table , <number_literal> , <number_literal> ) ; \n \t2 return table ; } \n \t1 @ test \n \t1 public void test <identifiersep> match <identifiersep> pub ( ) throws malformed <identifiersep> content <identifiersep> name <identifiersep> string <identifiersep> exception , invalid <identifiersep> key <identifiersep> exception , signature <identifiersep> exception , configuration <identifiersep> exception { \n <ect>
\t2 final http <identifiersep> servlet <identifiersep> request request = web <identifiersep> utils . get <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> from <identifiersep> external <identifiersep> webflow <identifiersep> context ( request <identifiersep> context ) ; \n \t2 logger . debug ( <string_literal> , parameter <identifiersep> name <identifiersep> token ) ; \n \t2 final string token = request . get <identifiersep> parameter ( parameter <identifiersep> name <identifiersep> token ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( token ) ) { \n <ect>
\t3 log . error ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; } } \n \t1 private void handle <identifiersep> task ( state <identifiersep> vertex state ) { \n \t2 log . debug ( <string_literal> , state ) ; \n \t2 crawler . execute ( state ) ; \n <ect>
\t1 <comment> \n \t1 log . info ( <string_literal> + builder . build <identifiersep> to <identifiersep> log ( ) + <string_literal> ) ; \n \t1 sql <identifiersep> line . status status = sql <identifiersep> line . begin ( builder . build <identifiersep> to <identifiersep> run ( ) , null , false ) ; \n <ect>
\t1 { \n \t2 if ( ! start <identifiersep> time <identifiersep> is <identifiersep> set ) \n \t3 log . warn ( this , <string_literal> ) ; \n \t2 if ( ! finish <identifiersep> time <identifiersep> is <identifiersep> set ) \n <ect>
\t4 } else { \n \t5 expression . push ( expression . true ) ; \n \t5 return ; } } \n \t2 } else if ( e1 instanceof constant <identifiersep> ex && e2 instanceof constant <identifiersep> ex ) { \n <ect>
\t4 <string_literal> + batch ) ; } } \n \t2 return null ; } \n \t1 } ) ) ; } \n \t1 if ( m <identifiersep> shutdown ) { \n <ect>
<comment> \n \t1 public i2p <identifiersep> socket get <identifiersep> destination <identifiersep> i2p <identifiersep> socket ( i2psocks <identifiersep> tunnel t ) throws socks <identifiersep> exception { \n \t2 setup <identifiersep> server ( ) ; \n \t2 if ( conn <identifiersep> host <identifiersep> name == null ) { \n <ect>
\t6 if ( ! is <identifiersep> known ) { \n \t7 <comment> \n \t7 identifiers . add ( header <identifiersep> line ) ; } } } \n \t3 } catch ( exception ee ) { \n <ect>
<comment> \n \t1 private launcher <identifiersep> constants get <identifiersep> constants ( collection < string > runbundles , boolean exported ) \n \t2 throws exception , file <identifiersep> not <identifiersep> found <identifiersep> exception , io <identifiersep> exception { \n <ect>
\t2 final int to <identifiersep> send = <number_literal> ; \n \t2 final int num <identifiersep> iterations = <number_literal> ; \n \t2 double [ ] no <identifiersep> consumer <identifiersep> stats = produce <identifiersep> messages ( destination , to <identifiersep> send , num <identifiersep> iterations , session , producer , null ) ; \n \t2 start <identifiersep> consumers ( factory , destination ) ; \n <ect>
\t2 data <identifiersep> center dc =  <identifiersep> dc <identifiersep> dao . find <identifiersep> by <identifiersep> id ( network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; \n \t2 string interface <identifiersep> mac = nic . get <identifiersep> mac <identifiersep> address ( ) ; \n \t2 list < brocade <identifiersep> vcs <identifiersep> device <identifiersep> vo > devices =  <identifiersep> brocade <identifiersep> vcs <identifiersep> dao . list <identifiersep> by <identifiersep> physical <identifiersep> network ( network . get <identifiersep> physical <identifiersep> network <identifiersep> id ( ) ) ; \n \t2 if ( devices . is <identifiersep> empty ( ) ) { \n <ect>
\t2 return vpc <identifiersep> off \n \t1 @ attr ( tags = [ <string_literal> ] , required <identifiersep> hardware = <string_literal> ) \n \t1 def test <identifiersep> 01 <identifiersep> vpc <identifiersep> site2site <identifiersep> vpn <identifiersep> multiple <identifiersep> options ( self ) : \n \t2 <string_literal> <string_literal> <string_literal> \n <ect>
\t1 doc <identifiersep> builder <identifiersep> factory . set <identifiersep> namespace <identifiersep> aware ( true ) ; \n \t1 try { \n \t2 doc <identifiersep> builder <identifiersep> factory . set <identifiersep> x <identifiersep> include <identifiersep> aware ( true ) ; \n \t1 } catch ( unsupported <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t1 log . info ( <string_literal> , \n \t2 stack . get <identifiersep> name ( ) , stack . get <identifiersep> version ( ) , source <identifiersep> uri , e . get <identifiersep> message ( ) ) ; \n \t1 throw e ; \n \t1 } finally { \n <ect>
\t2 x <identifiersep> wiki <identifiersep> document next <identifiersep> document ; \n \t2 try { \n \t3 next <identifiersep> document = get <identifiersep> x <identifiersep> wiki <identifiersep> document ( input <identifiersep> stream , wiki <identifiersep> reference ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 locked <identifiersep> select <identifiersep> peers (  <identifiersep> fast <identifiersep> peers , how <identifiersep> many , exclude , matches , <number_literal> ) ; \n \t2 } finally { release <identifiersep> read <identifiersep> lock ( ) ; } \n \t2 if ( matches . size ( ) < how <identifiersep> many ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 try { \n \t1 reply = osp <identifiersep> client . get <identifiersep> object ( request ) ; \n \t1 } catch ( exception e ) { \n \t1 <comment> \n <ect>
\t2 try { \n \t3 context = vmware <identifiersep> context <identifiersep> factory . get <identifiersep> context (  <identifiersep> v <identifiersep> center <identifiersep> address ,  <identifiersep> username ,  <identifiersep> password ) ; \n \t3 s <identifiersep> service <identifiersep> context . set ( context ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 assert . assert <identifiersep> equals ( new big <identifiersep> integer ( 1 , wrapped <identifiersep> aes <identifiersep> key . get <identifiersep> encoded ( ) ) , new big <identifiersep> integer ( 1 , unwrapped <identifiersep> key . get <identifiersep> encoded ( ) ) ) ; \n \t2 wkpp = wrapped <identifiersep> key . wrap <identifiersep> key ( wrapping <identifiersep> eg <identifiersep> key <identifiersep> pair . get <identifiersep> private ( ) , null , a <identifiersep> label , wrapping <identifiersep> key <identifiersep> pair . get <identifiersep> public ( ) ) ; \n \t2 unwrapped <identifiersep> key = wkpp . unwrap <identifiersep> key ( wrapping <identifiersep> key <identifiersep> pair . get <identifiersep> private ( ) ) ; \n \t2 assert . assert <identifiersep> array <identifiersep> equals ( wrapping <identifiersep> eg <identifiersep> key <identifiersep> pair . get <identifiersep> private ( ) . get <identifiersep> encoded ( ) , unwrapped <identifiersep> key . get <identifiersep> encoded ( ) ) ; \n <ect>
\t5 context . get <identifiersep> event <identifiersep> publisher ( ) . post <identifiersep> update ( item . get <identifiersep> name ( ) , new string <identifiersep> type ( value . to <identifiersep> string ( ) ) ) ; } \n \t3 } else { \n \t4 logger . warn ( <string_literal> , item . get <identifiersep> name ( ) ) ; } \n \t2 } else { \n <ect>
\t3 principal <identifiersep> entity . set <identifiersep> cached <identifiersep> keytab <identifiersep> path ( cached <identifiersep> keytab <identifiersep> file <identifiersep> path ) ; \n \t3 kerberos <identifiersep> principal <identifiersep> dao . merge ( principal <identifiersep> entity ) ; \n \t3 if ( previous <identifiersep> cached <identifiersep> file <identifiersep> path != null ) { \n \t3 if ( ! new file ( previous <identifiersep> cached <identifiersep> file <identifiersep> path ) . delete ( ) ) { \n <ect>
\t4 ret = job . run ( context ) ; \n \t3 } catch ( throwable t ) { \n \t4 logger . error ( this , <string_literal> + t + <string_literal> + job , t ) ; \n \t3 } finally { \n <ect>
\t4 <comment> \n \t5 log . info ( <string_literal> + mapmsg . get <identifiersep> type <identifiersep> desc ( ) + <string_literal> ) ; } \n \t2 } catch ( io <identifiersep> exception x ) { \n <ect>
\t2 if ( driver <identifiersep> class != null && driver <identifiersep> class . length ( ) > <number_literal> ) { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t2 if ( jdbc <identifiersep> constants . oracle <identifiersep> driver2 . equals <identifiersep> ignore <identifiersep> case ( driver <identifiersep> class ) ) { \n \t3 driver <identifiersep> class = <string_literal> ; \n <ect>
\t3 max = math . max ( max , duration ) ; \n \t3 if ( duration == max ) { \n \t4 log . info ( <string_literal> + max + <string_literal> + i + <string_literal> + message . get <identifiersep> text ( ) ) ; } \n \t3 sum += duration ; } \n <ect>
\t3 int base <identifiersep> array <identifiersep> offset = rf . read <identifiersep> short ( ) ; \n \t3 list < integer > mark <identifiersep> coverages = read <identifiersep> coverage <identifiersep> format ( lookup <identifiersep> table <identifiersep> location + mark <identifiersep> coverage <identifiersep> offset ) ; \n \t3 log . debug ( <string_literal> + mark <identifiersep> coverages ) ; \n \t3 list < integer > base <identifiersep> coverages = read <identifiersep> coverage <identifiersep> format ( lookup <identifiersep> table <identifiersep> location + base <identifiersep> coverage <identifiersep> offset ) ; \n <ect>
\t2 return digraph <identifiersep> result . ok ; } \n \t2 else { \n \t2 return new digraph <identifiersep> result ( key ) ; } \n \t1 case dig <identifiersep> state <identifiersep> dig <identifiersep> one : \n <ect>
\t3 else if ( files . exists ( current2marker ) ) { \n \t4 current <identifiersep> to <identifiersep> be = <number_literal> ; } \n \t3 else { \n \t4 <comment> \n <ect>
\t4 else { \n \t5 event <identifiersep> counts = new event <identifiersep> counts ( ) ; \n \t5 files . create <identifiersep> directories ( event <identifiersep> counts <identifiersep> file <identifiersep> path . get <identifiersep> parent ( ) ) ; \n \t5 write ( event <identifiersep> counts ) ; \n <ect>
\t1 @ override \n \t1 boolean test ( final multifactor <identifiersep> authentication <identifiersep> provider p ) { \n \t2 logger . info ( <string_literal> , p . get <identifiersep> id ( ) ) \n \t2 if ( p . matches ( <string_literal> ) ) { \n <ect>
\t1 try { \n \t1 controller . try <identifiersep> destroy ( ) \n \t1 } catch { \n \t1 case e : exception = > \n <ect>
<comment> \n \t1 @ override \n \t1 protected void print <identifiersep> formatted <identifiersep> payload ( ) { \n <ect>
\t4 send <identifiersep> update ( configs , zone , binding <identifiersep> type . surround <identifiersep> program , surround <identifiersep> update ) ; \n \t4 send <identifiersep> update ( configs , zone , binding <identifiersep> type . volume <identifiersep> percent , update <identifiersep> volume <identifiersep> percent ) ; \n \t4 send <identifiersep> update ( configs , zone , binding <identifiersep> type . volume <identifiersep> db , update <identifiersep> volume <identifiersep> db ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 throw new runtime <identifiersep> exception ( e ) ; } } \n \t2 try { \n \t3 in . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 } else if ( type . is <identifiersep> instance ( authorizable ) ) { \n \t3 <comment> \n \t3 return ( t ) authorizable ; \n \t2 } else { \n <ect>
\t2 return true ; } \n \t1 @ override \n \t1 public boolean verify <identifiersep> services <identifiersep> combination ( final set < service > services ) { \n \t2 if ( ! services . contains ( service . connectivity ) ) { \n <ect>
\t2  <identifiersep> eth1mask = ( string ) params . get ( <string_literal> ) ; \n \t2 if (  <identifiersep> eth1ip != null ) { <comment> \n \t3 params . put ( <string_literal> , <string_literal> ) ; \n \t2 } else { \n <ect>
\t1 path file <identifiersep> to <identifiersep> be <identifiersep> deleted = new path ( files <identifiersep> for <identifiersep> table . iterator ( ) . next ( ) ) ; \n \t1 file <identifiersep> system fs = get <identifiersep> cluster ( ) . get <identifiersep> file <identifiersep> system ( ) ; \n \t1 boolean file <identifiersep> exists = fs . exists ( file <identifiersep> to <identifiersep> be <identifiersep> deleted ) ; \n \t1 while ( file <identifiersep> exists ) { \n <ect>
\t2 resource <identifiersep> bundle names ; \n \t2 if ( null == locale ) { \n \t3 locale = locale . us ; } \n \t2 if ( null == continent <identifiersep> code ) { \n <ect>
\t1 protected credential construct <identifiersep> credentials <identifiersep> from <identifiersep> request ( final request <identifiersep> context context ) { \n \t2 final http <identifiersep> servlet <identifiersep> request request = web <identifiersep> utils . get <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> from <identifiersep> external <identifiersep> webflow <identifiersep> context ( context ) ; \n \t2 final string remote <identifiersep> user = get <identifiersep> remote <identifiersep> principal <identifiersep> id ( request ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( remote <identifiersep> user ) ) { \n <ect>
\t1 string engine = hive <identifiersep> conf . get <identifiersep> var ( conf , conf <identifiersep> vars . hive <identifiersep> execution <identifiersep> engine ) ; \n \t1 final string mr <identifiersep> engine = <string_literal> ; \n \t1 if ( ! mr <identifiersep> engine . equals <identifiersep> ignore <identifiersep> case ( engine ) ) { \n \t1 hive <identifiersep> conf . set <identifiersep> var ( conf , conf <identifiersep> vars . hive <identifiersep> execution <identifiersep> engine , mr <identifiersep> engine ) ; \n <ect>
\t4 scsi <identifiersep> controller <identifiersep> spec = get <identifiersep> controller <identifiersep> spec ( disk <identifiersep> controller <identifiersep> type . get <identifiersep> type ( scsi <identifiersep> disk <identifiersep> controller ) . to <identifiersep> string ( ) , bus <identifiersep> num ) ; \n \t3 vm <identifiersep> config . get <identifiersep> device <identifiersep> change ( ) . add ( scsi <identifiersep> controller <identifiersep> spec ) ; \n \t3 bus <identifiersep> num ++ ; } } \n \t2 if ( guest <identifiersep> os <identifiersep> identifier . starts <identifiersep> with ( <string_literal> ) ) { <comment> \n <ect>
<comment> \n <ect>
\t2 } catch ( interrupted <identifiersep> exception e ) { \n \t2 if ( tablet <identifiersep> server <identifiersep> batch <identifiersep> reader <identifiersep> iterator . this . query <identifiersep> thread <identifiersep> pool . is <identifiersep> shutdown ( ) ) \n \t3 log . debug ( <string_literal> , e ) ; \n \t2 else \n <ect>
\t1 protected void execute ( ) { \n \t2 long now = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 <comment> \n \t2 if ( cache <identifiersep> period > 0 && last <identifiersep> cache <identifiersep> purge + ( cache <identifiersep> period * <number_literal> ) < now ) { \n <ect>
\t2 <comment> \n \t2 string user <identifiersep> id = user <identifiersep> id <identifiersep> source . get <identifiersep> user <identifiersep> id ( ) ; \n \t2 connection < ? > connection = token . get <identifiersep> connection ( ) ; \n \t2 if ( user <identifiersep> id == null || connection == null ) { \n <ect>
\t4 } else { \n \t5 parent = ( plexus <identifiersep> container ) ctx . get <identifiersep> attribute ( plexus <identifiersep> lifecycle <identifiersep> listener . key ) ; } \n \t4 if ( parent . has <identifiersep> child <identifiersep> container ( child <identifiersep> container <identifiersep> name ) ) { \n <ect>
\t5 sql = select <identifiersep> hypertype <identifiersep> from <identifiersep> cluster <identifiersep> volume ; \n \t4 else if ( scope == scope <identifiersep> type . zone ) \n \t5 sql = select <identifiersep> hypertype <identifiersep> from <identifiersep> zone <identifiersep> volume ; \n \t4 else \n <ect>
<comment> \n \t1 @ override \n \t1 protected void execute ( ) { \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> blank ( db ) ) { \n \t3 logger . warn ( \n \t5 <string_literal> ) ; } \n \t2 collection = ( string ) config . get ( <string_literal> ) ; \n <ect>
\t7 saml <identifiersep> registered <identifiersep> service <identifiersep> caching <identifiersep> metadata <identifiersep> resolver . class ) ; \n \t3 final optional < saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade > facade = \n \t5 saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade . get ( resolver , saml , entity <identifiersep> id ) ; \n \t3 if ( facade == null || ! facade . is <identifiersep> present ( ) ) { \n <ect>
\t4 if ( existing <identifiersep> include <identifiersep> props == null ) { \n \t5 existing <identifiersep> include <identifiersep> props = <string_literal> ; } \n \t4 if ( existing <identifiersep> include <identifiersep> props . index <identifiersep> of ( props <identifiersep> file . get <identifiersep> path ( ) ) > - 1 ) { \n \t5 log . error ( <string_literal> , props <identifiersep> file , existing <identifiersep> include <identifiersep> props ) ; \n <ect>
\t3 component <identifiersep> descriptor < translation <identifiersep> bundle > descriptor = create <identifiersep> component <identifiersep> descriptor ( extension ) ; \n \t3 component <identifiersep> manager component <identifiersep> manager = this . component <identifiersep> manager <identifiersep> manager . get <identifiersep> component <identifiersep> manager ( namespace , false ) ; \n \t3 component <identifiersep> manager . unregister <identifiersep> component ( descriptor ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 host host =  <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( ep . get <identifiersep> id ( ) ) ; \n \t7 if ( host != null && host . get <identifiersep> management <identifiersep> server <identifiersep> id ( ) != null ) { \n \t8 if (  <identifiersep> server <identifiersep> id == host . get <identifiersep> management <identifiersep> server <identifiersep> id ( ) . long <identifiersep> value ( ) ) { \n \t9 if ( ! vol <identifiersep> service . destroy <identifiersep> volume ( volume . get <identifiersep> id ( ) ) ) { \n <ect>
\t2 return time <identifiersep> unit . days . to <identifiersep> millis ( integer . parse <identifiersep> int ( matcher . group ( 1 ) ) ) ; \n \t1 } else { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 return 0 ; } } \n <ect>
\t2 if ( context == null ) { \n \t3 <comment> \n \t3 <comment> \n \t3 <comment> \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 <comment> \n <ect>
\t2 catch ( exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; \n \t3 this . set <identifiersep> active ( false ) ; } \n <ect>
\t2 boolean disconnect = get <identifiersep> endpoint ( ) . get <identifiersep> configuration ( ) . is <identifiersep> disconnect ( ) ; \n \t2 if ( close != null ) { \n \t3 disconnect = close ; } \n \t2 if ( disconnect ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 } catch ( xen <identifiersep> api <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 final string stored = obj . get <identifiersep> string <identifiersep> value ( <string_literal> ) ; \n \t5 result = new password <identifiersep> class ( ) . get <identifiersep> equivalent <identifiersep> password ( stored , password ) . equals ( stored ) ; } \n \t4 return result ; \n \t3 } catch ( throwable e ) { \n <ect>
\t3 return solr <identifiersep> server ; } } \n \t1 static void create <identifiersep> solr <identifiersep> fixtures ( ) throws exception { \n \t2 solr <identifiersep> https <identifiersep> runner = jetty <identifiersep> solr <identifiersep> factory . create <identifiersep> jetty <identifiersep> test <identifiersep> fixture ( true ) ; \n \t2 https <identifiersep> port = solr <identifiersep> https <identifiersep> runner . get <identifiersep> local <identifiersep> port ( ) ; \n <ect>
<comment> \n \t1 public void uncaught <identifiersep> exception ( thread thread , throwable throwable ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 <comment> \n \t2 assert <identifiersep> that ( new test <identifiersep> tasks <identifiersep> request <identifiersep> builder ( client ( ) ) . set <identifiersep> operation ( <string_literal> ) . set <identifiersep> task <identifiersep> id ( first <identifiersep> running <identifiersep> task . get <identifiersep> task <identifiersep> id ( ) ) \n \t4 . get ( ) . get <identifiersep> tasks ( ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n <ect>
\t2 int id = states <identifiersep> with <identifiersep> candidates . take ( ) ; \n \t2 <comment> \n \t2 states <identifiersep> with <identifiersep> candidates . add ( id ) ; \n \t2 log . debug ( <string_literal> , id ) ; \n <ect>
\t7 <comment> \n \t7 logger . debug ( <string_literal> + player . get <identifiersep> name ( ) + <string_literal> + game . get <identifiersep> id ( ) ) ; \n \t7 player . leave ( ) ; } } \n \t4 } else if ( ! player . has <identifiersep> left ( ) ) { \n <ect>
\t4 self . get <identifiersep> desired <identifiersep> status ( command [ self . role ] ) ) \n \t1 elif command [ self . role <identifiersep> command ] == action <identifiersep> queue . role <identifiersep> command <identifiersep> start \\ \n \t2 and self . configured <identifiersep> for <identifiersep> recovery ( command [ self . role ] ) : \n \t1 self . update <identifiersep> desired <identifiersep> status ( command [ self . role ] , live <identifiersep> status . live <identifiersep> status ) \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 if ( ! ( tran instanceof server <identifiersep> transaction ) ) \n \t3 { \n <ect>
\t3 throws exception \n \t1 { \n \t2 if ( ! state . compare <identifiersep> and <identifiersep> set ( state . latent , state . starting ) ) { \n \t3 throw new exception ( <string_literal> ) ; } \n <ect>
\t3 final abstract <identifiersep> resource resource <identifiersep> from = resource <identifiersep> utils . get <identifiersep> resource <identifiersep> from ( script <identifiersep> file ) ; \n \t3 final string script = io <identifiersep> utils . to <identifiersep> string ( resource <identifiersep> from . get <identifiersep> input <identifiersep> stream ( ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ; \n \t3 final object result = get <identifiersep> groovy <identifiersep> attribute <identifiersep> value ( principal , script ) ; \n \t3 if ( result != null ) { \n <ect>
\t2 if ( udp <identifiersep> transport . is <identifiersep> trace ( ) ) { \n \t3 try { \n \t4 transport = transport <identifiersep> logger <identifiersep> support . create <identifiersep> transport <identifiersep> logger ( transport ) ; \n \t3 } catch ( throwable e ) { \n <ect>
\t4 s <identifiersep> logger . error ( <string_literal> ) ; \n \t4 throw new insufficient <identifiersep> virtual <identifiersep> network <identifiersep> capcity <identifiersep> exception ( <string_literal> + max <identifiersep> priority + <string_literal> , \n \t6 guest <identifiersep> network . get <identifiersep> id ( ) ) ; \n \t3 } else if ( max <identifiersep> priority > <number_literal> ) { \n <ect>
\t5 if ( time <identifiersep> value . is <identifiersep> positive ( keep <identifiersep> alive ) ) { \n \t6 s = <string_literal> + keep <identifiersep> alive ; \n \t5 } else { \n \t6 s = <string_literal> ; } \n <ect>
\t6 message msg1 = consumer . receive ( <number_literal> ) ; \n \t6 if ( msg1 != null ) { \n \t7 if ( msg1 instanceof active <identifiersep> mq <identifiersep> text <identifiersep> message ) { \n \t8 if ( count % <number_literal> == 0 ) { \n <ect>
\t2 for ( int i = 0 ; i < listeners . size ( ) ; i ++ ) { \n \t3 try { \n \t4 listeners . get ( i ) . on <identifiersep> stream <identifiersep> half <identifiersep> closed ( stream ) ; \n \t3 } catch ( throwable cause ) { \n <ect>
\t5 if ( log . should <identifiersep> log ( log . warn ) ) \n \t6 log . warn ( <string_literal> , dfe ) ; } } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 if ( log . should <identifiersep> log ( log . warn ) && file . exists ( ) ) \n <ect>
\t4 ps . interested <identifiersep> message ( true ) ; \n \t4 break ; \n \t3 case message . uninterested : \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
<comment> \n \t2 public void registration <identifiersep> state <identifiersep> changed ( registration <identifiersep> state <identifiersep> change <identifiersep> event evt ) \n \t2 { \n <ect>
\t2 if ( ! cmd . has <identifiersep> option ( option <identifiersep> no <identifiersep> detail ) ) { \n \t3 print <identifiersep> topology <identifiersep> info ( context ) ; } \n \t2 if ( ! cmd . has <identifiersep> option ( option <identifiersep> dry <identifiersep> run ) ) { \n \t3 if ( cmd . has <identifiersep> option ( option <identifiersep> remote ) ) { \n <ect>
\t1 public object read ( object request , map kvp , map raw <identifiersep> kvp ) throws exception { \n \t2 if ( raw <identifiersep> kvp . contains <identifiersep> key ( <string_literal> ) ) { \n \t3 accept <identifiersep> versions <identifiersep> kvp <identifiersep> parser avp = new wcs20accept <identifiersep> versions <identifiersep> kvp <identifiersep> parser ( ) ; \n \t3 string value = ( string ) raw <identifiersep> kvp . get ( <string_literal> ) ; \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t5 specified <identifiersep> default <identifiersep> value = <string_literal> , \n \t5 unspecified <identifiersep> default <identifiersep> value = <string_literal> , \n \t5 option <identifiersep> context = <string_literal> ) final string destination ) { \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( file ) ) { \n <ect>
\t1 public services ( ) throws service <identifiersep> exception { \n \t2 set <identifiersep> oozie <identifiersep> home ( ) ; \n \t2 if ( services != null ) { \n \t3 x <identifiersep> log log = x <identifiersep> log . get <identifiersep> log ( get <identifiersep> class ( ) ) ; \n <ect>
\t2 statement stmt = null ; \n \t2 prepared <identifiersep> statement pr <identifiersep> st = null ; \n \t2 result <identifiersep> set rs = null ; \n \t2 pr <identifiersep> st = ambaridatabase . get <identifiersep> table <identifiersep> id <identifiersep> from <identifiersep> instance <identifiersep> name ( c , instance ) ; \n <ect>
\t3 validation <identifiersep> xml <identifiersep> foo foo = new validation <identifiersep> xml <identifiersep> foo ( <string_literal> ) ; \n \t3 response response = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) . accept ( media <identifiersep> type . application <identifiersep> xml ) . post ( entity . entity ( foo , <string_literal> ) ) ; \n \t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> bad <identifiersep> request , response . get <identifiersep> status ( ) ) ; \n \t3 violation <identifiersep> report report = response . read <identifiersep> entity ( violation <identifiersep> report . class ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void run ( ) { \n \t2 if ( ! context . get <identifiersep> topology <identifiersep> metric <identifiersep> contexts ( ) . contains <identifiersep> key ( topology <identifiersep> id ) ) { \n <ect>
\t4 return  <identifiersep> mock <identifiersep> storage <identifiersep> mgr . copy <identifiersep> volume ( ( copy <identifiersep> volume <identifiersep> command ) cmd ) ; \n \t3 } else { \n \t4 return answer . create <identifiersep> unsupported <identifiersep> command <identifiersep> answer ( cmd ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 stack <identifiersep> event <identifiersep> entity <identifiersep> manager . add <identifiersep> stack <identifiersep> event ( stack <identifiersep> resource <identifiersep> entity ) ; } } \n \t1 return <string_literal> ; } \n @ override \n public string get <identifiersep> workflow <identifiersep> execution <identifiersep> close <identifiersep> status ( string stack <identifiersep> id , string workflow <identifiersep> type ) { \n <ect>
\t4 = new unsubscribe <identifiersep> wait ( ) ; \n \t3 operation <identifiersep> set <identifiersep> presence . add <identifiersep> subscription <identifiersep> listener ( unsubscribe <identifiersep> evt <identifiersep> collector ) ; \n \t3 synchronized ( unsubscribe <identifiersep> evt <identifiersep> collector ) { \n \t4 operation <identifiersep> set <identifiersep> presence . unsubscribe ( c ) ; \n <ect>
\t1  <identifiersep> company . log . debug ( <string_literal> + object + <string_literal> ) ; } \n \t1 add <identifiersep> object <identifiersep> to <identifiersep> both <identifiersep> sides <identifiersep> of <identifiersep> relationship <identifiersep> with <identifiersep> key ( object , <string_literal> ) ; } \n public void remove <identifiersep> from <identifiersep> employees <identifiersep> relationship ( er . rest . model . person object ) { \n <ect>
\t2 pm . delete <identifiersep> persistent ( master <identifiersep> key ) ; } \n \t1 success = commit <identifiersep> transaction ( ) ; \n \t1 } finally { \n \t1 rollback <identifiersep> and <identifiersep> cleanup ( success , query ) ; } \n <ect>
\t2 session <identifiersep> stats . close ( ) ; \n \t2 try { \n \t3 content <identifiersep> session . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t2 for ( tuple right <identifiersep> tuple = memory . get <identifiersep> first ( ) ; right <identifiersep> tuple != null ; right <identifiersep> tuple = ( tuple ) right <identifiersep> it . next ( right <identifiersep> tuple ) ) { \n \t5 count ++ ; } \n \t2 logger . info ( indent ( ) + <string_literal> + memory . size ( ) + <string_literal> + count ) ; \n \t2 if ( memory . size ( ) != count ) { \n <ect>
\t2 for ( int i = 0 ; i < math . min ( expected <identifiersep> events . size ( ) , event <identifiersep> list . size ( ) ) ; i ++ ) { \n \t3 if ( ! expected <identifiersep> events . get ( i ) . equals ( event <identifiersep> list . get ( i ) ) ) { \n \t4 status = false ; \n \t4 log . info ( string . format ( <string_literal> , i , event <identifiersep> list . get ( i ) , expected <identifiersep> events . get ( i ) ) ) ; } } \n <ect>
\t2 internal <identifiersep> dispatcher <identifiersep> client proxy = client . target ( generate <identifiersep> base <identifiersep> url ( ) ) . proxy ( internal <identifiersep> dispatcher <identifiersep> client . class ) ; \n \t2 logger . info ( <string_literal> + proxy . get <identifiersep> forward <identifiersep> basic ( ) ) ; \n \t2 int i = 0 ; \n \t2 for ( iterator < string > it = forwarding <identifiersep> resource . uri <identifiersep> stack . iterator ( ) ; it . has <identifiersep> next ( ) ; i ++ ) { \n <ect>
\t2 settings exclude = settings . builder ( ) . put ( <string_literal> , \n \t3 strings . collection <identifiersep> to <identifiersep> comma <identifiersep> delimited <identifiersep> string ( exclude <identifiersep> nodes ) ) . build ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> update <identifiersep> settings ( ) . set <identifiersep> transient <identifiersep> settings ( exclude ) . get ( ) ; \n <ect>
\t6 <comment> \n \t6 geo <identifiersep> cache . put ( cache <identifiersep> key , result ) ; } \n \t4 } catch ( io <identifiersep> exception ioex ) { \n \t5 <comment> \n <ect>
\t6 statement = connection . prepare <identifiersep> statement ( insert ) ; \n \t6 statement . set <identifiersep> int ( 1 , user <identifiersep> id ) ; \n \t6 statement . set <identifiersep> string ( <number_literal> , locale ) ; \n \t6 if ( statement . execute <identifiersep> update ( ) != 1 ) { \n <ect>
\t1 reset <identifiersep> cursor ( vf , editor . get <identifiersep> project ( ) , insert ) ; } \n \t1 else { \n \t1 editor . get <identifiersep> settings ( ) . set <identifiersep> block <identifiersep> cursor ( ! insert ) ; } } \n private static void reset <identifiersep> cursor ( @ not <identifiersep> null virtual <identifiersep> file virtual <identifiersep> file , project proj , boolean insert ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 items ++ ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 map < string , set < string > > persisted <identifiersep> data = null ; \n \t1 try { \n \t2 persisted <identifiersep> data = cache <identifiersep> manager . get <identifiersep> hosted <identifiersep> instances <identifiersep> from <identifiersep> store ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 if ( vsm <identifiersep> map <identifiersep> vo != null ) { \n \t3 vsm <identifiersep> id = vsm <identifiersep> map <identifiersep> vo . get <identifiersep> vsm <identifiersep> id ( ) ; \n \t3 s <identifiersep> logger . info ( <string_literal> + vsm <identifiersep> id ) ; \n \t3 nexus <identifiersep> vsm =  <identifiersep> nexus <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vsm <identifiersep> id ) ; \n <ect>
\t5 s <identifiersep> logger . info ( <string_literal> + info . name ) ; \n \t5 try { \n \t6 info . instance . configure ( info . name , info . params ) ; \n \t5 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 throw e ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
<comment> \n \t1 public object localized <identifiersep> value <identifiersep> for <identifiersep> key <identifiersep> with <identifiersep> default ( string key ) { \n \t2 if ( key == null ) { \n <ect>
\t5 if ( item . get <identifiersep> id <identifiersep> from <identifiersep> item ( stack . get <identifiersep> item ( ) ) < item . get <identifiersep> id <identifiersep> from <identifiersep> item ( best . get <identifiersep> item ( ) ) ) { \n \t6 best = stack ; } } \n \t4 return best . copy ( ) ; } \n \t3 bc <identifiersep> log . logger . warn ( <string_literal> + first . get <identifiersep> class ( ) ) ; } \n <ect>
\t3 ccn <identifiersep> input <identifiersep> stream stream = new ccn <identifiersep> input <identifiersep> stream ( co , null , get <identifiersep> handle ) ; \n \t3 assert . assert <identifiersep> true ( stream <identifiersep> name . equals ( stream . get <identifiersep> base <identifiersep> name ( ) ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 assert . fail ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n <ect>
\t3 } ) ; } \n \t1 @ override \n \t1 public void do <identifiersep> stop ( service <identifiersep> stopper stopper ) throws exception { \n \t2 <comment> \n <ect>
\t1 throw new accumulo <identifiersep> server <identifiersep> exception ( server , tae ) ; \n \t1 } catch ( too <identifiersep> many <identifiersep> files <identifiersep> exception e ) { \n \t1 log . debug ( <string_literal> , extent , server , e . get <identifiersep> message ( ) ) ; \n \t1 } catch ( thrift <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t3 if ( type != null ) { \n \t4 final database <identifiersep> service db \t4 = structr <identifiersep> app . get <identifiersep> instance ( security <identifiersep> context ) . get <identifiersep> database <identifiersep> service ( ) ; \n \t4 final node <identifiersep> factory factory \t4 = new node <identifiersep> factory ( security <identifiersep> context ) ; \n \t4 final iterator < abstract <identifiersep> node > node <identifiersep> iterator = iterables . map ( factory , db . get <identifiersep> nodes <identifiersep> by <identifiersep> label ( entity <identifiersep> type <identifiersep> name ) ) . iterator ( ) ; \n <ect>
\t2 return result ; } \n \t1 protected void handle <identifiersep> metadata <identifiersep> persist <identifiersep> exception ( executable <identifiersep> context context , throwable exception ) { \n \t2 final string [ ] admin <identifiersep> dls = context . get <identifiersep> config ( ) . get <identifiersep> admin <identifiersep> dls ( ) ; \n \t2 if ( admin <identifiersep> dls == null || admin <identifiersep> dls . length < 1 ) { \n <ect>
\t3 con . set <identifiersep> next <identifiersep> send <identifiersep> time (  <identifiersep> context . clock ( ) . now ( ) + con . get <identifiersep> options ( ) . get <identifiersep> connect <identifiersep> delay ( ) ) ; \n \t2 long time <identifiersep> till <identifiersep> send = con . get <identifiersep> next <identifiersep> send <identifiersep> time ( ) -  <identifiersep> context . clock ( ) . now ( ) ; \n \t2 if ( time <identifiersep> till <identifiersep> send < = 0 ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + target . get <identifiersep> class ( ) . get <identifiersep> canonical <identifiersep> name ( ) , e ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + target . get <identifiersep> class ( ) . get <identifiersep> canonical <identifiersep> name ( ) , e ) ; \n \t2 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t4 return ; } } \n \t2 try { \n \t3  <identifiersep> manager = i2p <identifiersep> socket <identifiersep> manager <identifiersep> factory . create <identifiersep> manager ( new file <identifiersep> input <identifiersep> stream (  <identifiersep> dest <identifiersep> file ) , null , - 1 , null ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 string rest <identifiersep> host <identifiersep> url <identifiersep> str = null ; \n \t2 try { \n \t3 rest <identifiersep> host <identifiersep> url <identifiersep> str = read <identifiersep> rest <identifiersep> url ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 reset <identifiersep> auto <identifiersep> commit <identifiersep> state ( ) ; \n \t2 try { \n \t3 jdbc <identifiersep> connection . close ( ) ; } \n \t2 catch ( sql <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public void reindexing <identifiersep> traversal <identifiersep> start ( string path ) { \n \t2 estimated <identifiersep> count = node <identifiersep> count <identifiersep> estimator . get <identifiersep> estimated <identifiersep> node <identifiersep> count ( path , get <identifiersep> reindexed <identifiersep> index <identifiersep> paths ( ) ) ; \n \t2 if ( estimated <identifiersep> count >= 0 ) { \n <ect>
\t3 logger . info ( <string_literal> + failed <identifiersep> write . to <identifiersep> string ( ) ) ; } } \n \t1 @ override \n \t1 public void shutdown ( ) { \n \t2 stop . set ( true ) ; \n <ect>
\t2 public channel create <identifiersep> channel ( boolean transactional ) { \n \t3 if ( ! is <identifiersep> open ( ) ) { \n \t4 synchronized ( this ) { \n \t5 if ( ! is <identifiersep> open ( ) ) { \n <ect>
\t1 log . debug ( <string_literal> + connect <identifiersep> url ) ; \n \t1 try { \n \t2 json <identifiersep> data = mapper . write <identifiersep> value <identifiersep> as <identifiersep> string ( metrics ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 remove <identifiersep> agent ( old , status . removed ) ; } \n \t2 return attache ; } \n \t1 @ override \n \t1 protected agent <identifiersep> attache create <identifiersep> attache <identifiersep> for <identifiersep> connect ( final host <identifiersep> vo host , final link link ) { \n <ect>
\t2 public builder add <identifiersep> transport <identifiersep> distance ( string from , string to , double distance ) { \n \t3 relation <identifiersep> key key = relation <identifiersep> key . new <identifiersep> key ( from , to ) ; \n \t3 if ( ! distances <identifiersep> set ) distances <identifiersep> set = true ; \n \t3 if ( distances . contains <identifiersep> key ( key ) ) { \n <ect>
\t2 directed <identifiersep> weighted <identifiersep> multigraph < node , labeled <identifiersep> link > tree = null ; \n \t2 if ( al != null ) \n \t3 tree = al . get <identifiersep> steiner <identifiersep> tree ( ) ; \n \t2 if ( tree == null ) { \n <ect>
\t5 cards <identifiersep> view . put ( player . get <identifiersep> top <identifiersep> card ( ) . get <identifiersep> id ( ) , player . get <identifiersep> top <identifiersep> card ( ) ) ; \n \t5 handle <identifiersep> game <identifiersep> info <identifiersep> window ( revealed , show <identifiersep> type . reveal <identifiersep> top <identifiersep> library , player . get <identifiersep> name ( ) + <string_literal> , cards <identifiersep> view ) ; } \n \t3 } else if ( ! players . is <identifiersep> empty ( ) ) { \n \t4 logger . warn ( <string_literal> ) ; \n <ect>
\t2 org . jclouds . openstack . nova . v2 <identifiersep> 0 . domain . security <identifiersep> group security <identifiersep> group , int port ) { \n \t1 logger . debug ( <string_literal> , security <identifiersep> group , port ) ; \n \t1 security <identifiersep> group <identifiersep> api . create <identifiersep> rule <identifiersep> allowing <identifiersep> cidr <identifiersep> block ( security <identifiersep> group . get <identifiersep> id ( ) , \n \t3 ingress . builder ( ) . ip <identifiersep> protocol ( ip <identifiersep> protocol . tcp ) . from <identifiersep> port ( port ) . to <identifiersep> port ( port ) . build ( ) , <string_literal> ) ; \n <ect>
\t1 public void test <identifiersep> log ( ) { \n \t2 log . debug ( <string_literal> ) ; \n <ect>
\t4 string name = custom <identifiersep> properties . next <identifiersep> token ( ) ; \n \t4 try { \n \t5 list . add ( new properties <identifiersep> settings ( name ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 b . position ( 0 ) ; \n \t4 b . get ( msg <identifiersep> bytes ) ; \n \t3 } catch ( buffer <identifiersep> underflow <identifiersep> exception be ) { \n <ect>
\t4 cached <identifiersep> credentials \n \t5 . cache <identifiersep> authorization <identifiersep> header ( callid , authorization ) ; } \n \t3 reoriginated <identifiersep> request . add <identifiersep> header ( authorization ) ; } \n <ect>
\t3 remove <identifiersep> namespace <identifiersep> constraint <identifiersep> result result = new remove <identifiersep> namespace <identifiersep> constraint <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t3 svc = context . get <identifiersep> administration <identifiersep> service ( ) ; } \n \t2 catch ( api <identifiersep> exception api <identifiersep> ex ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t3 log . error ( prefix + <string_literal> + entry . get <identifiersep> key ( ) ) ; \n \t3 log . error ( prefix + <string_literal> + entry . get <identifiersep> key ( ) . get <identifiersep> id ( ) ) ; \n \t3 for ( ability ability : entry . get <identifiersep> value ( ) ) { \n \t4 log . error ( prefix + <string_literal> + ability ) ; \t4 } } \n <ect>
\t4 } else if ( str . contains ( process <identifiersep> launcher . class . get <identifiersep> name ( ) ) ) { \n \t5 continue ; \n \t4 } else if ( ! str . contains ( port ) ) { \n \t5 continue ; } \n <ect>
\t1 public path to <identifiersep> real <identifiersep> path ( link <identifiersep> option . . . los ) throws io <identifiersep> exception { \n \t2 logger . info ( <string_literal> ) ; return null ; } \n \t1 @ override \n \t1 public java . io . file to <identifiersep> file ( ) { \n <ect>
\t4 report <identifiersep> method . invoke ( console <identifiersep> proxy . context , gson <identifiersep> load <identifiersep> info ) ; \n \t3 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t3 workspace <identifiersep> item wsi = workspace <identifiersep> item <identifiersep> service . find <identifiersep> by <identifiersep> item ( context , version . get <identifiersep> item ( ) ) ; \n \t3 versioned <identifiersep> item = install <identifiersep> item <identifiersep> service . install <identifiersep> item ( context , wsi ) ; \n \t3 context . restore <identifiersep> auth <identifiersep> system <identifiersep> state ( ) ; \n \t2 } catch ( authorize <identifiersep> exception ex ) { \n <ect>
\t2 if ( conn != null ) { \n \t3 master . log . info ( <string_literal> , tls . current , tls . extent , split <identifiersep> point ) ; \n \t3 conn . split <identifiersep> tablet ( this . master . master <identifiersep> lock , tls . extent , split <identifiersep> point ) ; \n \t2 } else { \n <ect>
\t8 log . trace ( <string_literal> , read <identifiersep> byte ) ; \n \t8 switch ( read <identifiersep> byte ) { \n \t8 case - 1 : \n \t9 if ( echo <identifiersep> socket . is <identifiersep> connected ( ) && ! echo <identifiersep> socket . is <identifiersep> closed ( ) ) { \n <ect>
\t1 notification <identifiersep> firer . dispatch ( new routing <identifiersep> notification ( message <identifiersep> collection <identifiersep> event . get <identifiersep> message ( ) , null , correlation <identifiersep> timeout ) ) ; \n \t1 try { \n \t2 group . clear ( ) ; \n \t1 } catch ( object <identifiersep> store <identifiersep> exception e ) { \n <ect>
\t2 for ( entry < string , table <identifiersep> info > entry : tserver . table <identifiersep> map . entry <identifiersep> set ( ) ) { \n \t2 if ( entry . get <identifiersep> key ( ) . starts <identifiersep> with ( <string_literal> ) || entry . get <identifiersep> key ( ) . starts <identifiersep> with ( <string_literal> ) ) \n \t3 continue ; \n \t2 tablets += entry . get <identifiersep> value ( ) . online <identifiersep> tablets ; } } \n <ect>
\t2 if ( m <identifiersep> bean <identifiersep> server . is <identifiersep> registered ( bean <identifiersep> config <identifiersep> name ) ) { \n \t3 m <identifiersep> bean <identifiersep> server . unregister <identifiersep> m <identifiersep> bean ( bean <identifiersep> config <identifiersep> name ) ; \n \t3 m <identifiersep> bean <identifiersep> server . unregister <identifiersep> m <identifiersep> bean ( bean <identifiersep> pool <identifiersep> name ) ; } } \n \t1 catch ( exception e ) { \n <ect>
\t5 if ( ack <identifiersep> tuple != null && ! send <identifiersep> ack <identifiersep> tuple ( ack <identifiersep> tuple ) ) { \n \t6 try { \n \t7 pending <identifiersep> ack <identifiersep> queue . put ( ack <identifiersep> tuple ) ; \n \t6 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 executor <identifiersep> service . shutdown <identifiersep> now ( ) ; \n \t2 while ( ! executor <identifiersep> service . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . milliseconds ) ) { \n \t2 logger . debug ( <string_literal> ) ; } } \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t6 if ( start <identifiersep> ip != null \n \t8 &&  <identifiersep> ip <identifiersep> address <identifiersep> dao . find <identifiersep> by <identifiersep> ip <identifiersep> and <identifiersep> source <identifiersep> network <identifiersep> id ( guest <identifiersep> network . get <identifiersep> id ( ) , start <identifiersep> ip ) . get <identifiersep> allocated <identifiersep> time ( ) == null ) { \n \t7 default <identifiersep> network <identifiersep> start <identifiersep> ip = start <identifiersep> ip ; \n <ect>
\t8  <identifiersep> project <identifiersep> mgr . delete <identifiersep> project ( call <identifiersep> context . current ( ) . get <identifiersep> calling <identifiersep> account ( ) , call <identifiersep> context . current ( ) . get <identifiersep> calling <identifiersep> user <identifiersep> id ( ) , project ) ; \n \t7 } else { \n \t8 s <identifiersep> logger . debug ( <string_literal> + project + <string_literal> + project . get <identifiersep> id ( ) ) ; } \n \t6 } catch ( exception e ) { \n <ect>
\t4 return ; \n \t3 chan . configure <identifiersep> blocking ( false ) ; \n \t3 if ( !  <identifiersep> transport . allow <identifiersep> connection ( ) ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 em . join <identifiersep> transaction ( ) ; \n \t2 em . persist ( bad <identifiersep> main <identifiersep> object ) ; \n \t2 boolean roll <identifiersep> back <identifiersep> exceptionthrown = false ; \n \t2 try { \n <ect>
\t1 @ override \n \t1 public void exit ( ) { \n \t2 client <identifiersep> j <identifiersep> meter <identifiersep> engine . tidy <identifiersep> rmi ( log ) ; <comment> \n \t2 if ( remote <identifiersep> system <identifiersep> exit ) { <comment> \n <ect>
\t3 instances . add ( instance ) ; } } \n \t1 @ override \n \t1 public describe <identifiersep> instances <identifiersep> result describe <identifiersep> instances ( describe <identifiersep> instances <identifiersep> request describe <identifiersep> instances <identifiersep> request ) throws amazon <identifiersep> service <identifiersep> exception , amazon <identifiersep> client <identifiersep> exception { \n \t2 collection < instance > filtered <identifiersep> instances = new array <identifiersep> list < > ( ) ; \n <ect>
\t3 rate r = null ; \n \t3 if ( rs != null ) \n \t4 r = rs . get <identifiersep> rate ( <number_literal> * <number_literal> ) ; \n \t3 double process <identifiersep> time = ( r != null ? r . get <identifiersep> average <identifiersep> value ( ) : 0 ) ; \n <ect>
\t4 <comment> \n \t4 cached <identifiersep> schema <identifiersep> node = app . node <identifiersep> query ( abstract <identifiersep> schema <identifiersep> node . class ) . and ( abstract <identifiersep> node . name , name ) . get <identifiersep> first ( ) ; \n \t4 tx . success ( ) ; \n \t3 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t7 if ( ! dest . rename <identifiersep> to ( node . client <identifiersep> core . downloads <identifiersep> dir ( ) . file ( base <identifiersep> filename ) ) ) { \n \t8 logger . error ( this , <string_literal> + dest . get <identifiersep> name ( ) + <string_literal> ) ; } \n \t7 on <identifiersep> receive <identifiersep> success ( ) ; } \n \t5 } catch ( throwable t ) { \n <ect>
\t1 assert . assert <identifiersep> false ( stacks . is <identifiersep> empty ( ) ) ; \n \t1 cluster cluster = easy <identifiersep> mock . create <identifiersep> nice <identifiersep> mock ( cluster . class ) ; \n \t1 for ( stack <identifiersep> info stack : stacks ) { \n \t1 if ( ! stack . is <identifiersep> active ( ) ) { \n <ect>
\t4 client . set <identifiersep> keyspace ( system <identifiersep> ks ) ; \n \t4 log . debug ( <string_literal> , keyspace <identifiersep> name ) ; \n \t3 } catch ( invalid <identifiersep> request <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
\t1 logger . info ( <string_literal> , ex ) ; } \n \t1 executor . shutdown <identifiersep> now ( ) ; \n \t1 super . stop ( ) ; \n \t1 source <identifiersep> counter . stop ( ) ; \n <ect>
\t2 catch ( throwable invocation <identifiersep> ex ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 throw new malformed <identifiersep> acl <identifiersep> error <identifiersep> exception ( request . get <identifiersep> bucket ( ) + <string_literal> ) ; } \n \t1 <comment> \n \t1 if ( full <identifiersep> policy . get <identifiersep> access <identifiersep> control <identifiersep> list ( ) == null || full <identifiersep> policy . get <identifiersep> access <identifiersep> control <identifiersep> list ( ) . get <identifiersep> grants ( ) == null \n \t2 || full <identifiersep> policy . get <identifiersep> access <identifiersep> control <identifiersep> list ( ) . get <identifiersep> grants ( ) . size ( ) == 0 ) { \n <ect>
\t7 logger . debug ( <string_literal> + command <identifiersep> name ) ; \n \t7 uc . append ( workspace . get <identifiersep> command <identifiersep> history ( ) . do <identifiersep> command ( comm , workspace , save <identifiersep> to <identifiersep> history ) ) ; \n \t7 comm . set <identifiersep> executed <identifiersep> in <identifiersep> batch ( false ) ; \n \t6 } catch ( exception e ) { \n <ect>
\t5 handle <identifiersep> accept ( client <identifiersep> sock ) ; } \n \t4 catch ( exception ex ) { \n \t5 if ( ex instanceof socket <identifiersep> exception && srv <identifiersep> sock . is <identifiersep> closed ( ) || thread . current <identifiersep> thread ( ) . is <identifiersep> interrupted ( ) ) \n \t6 break ; \n <ect>
\t4 return browser2 . get <identifiersep> total <identifiersep> count ( ) == message <identifiersep> count ; } \n \t2 } ) ; \n \t2 browser1 . join ( ) ; \n \t2 browser2 . join ( ) ; \n <ect>
\t3 while ( ports . has <identifiersep> next ( ) ) { \n \t4 int port = ports . next ( ) ; \n \t4 try { \n \t5 server . start ( port ) ; \n <ect>
\t5 in = a <identifiersep> rurl . open <identifiersep> stream ( ) ; \n \t4 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception fe ) { \n \t5 log . error ( <string_literal> + href ) ; \n \t4 } catch ( connect <identifiersep> exception fe ) { \n <ect>
\t3 } catch ( io <identifiersep> exception ex ) { \n \t5 s <identifiersep> logger . trace ( <string_literal> + ex ) ; } \n \t3 } catch ( http <identifiersep> exception ex ) { \n <ect>
\t8 dup = true ; \n \t8 break ; } } \n \t6 if ( ! dup ) { \n \t7 vd . crls . add ( cim ) ; \n <ect>
\t6 error <identifiersep> messages += attempt . get <identifiersep> error <identifiersep> message ( ) + <string_literal> ; } } } \n \t3 if ( fail <identifiersep> on <identifiersep> error ) { \n \t4 throw new runtime <identifiersep> exception ( <string_literal> + error <identifiersep> messages , thrown <identifiersep> exception ) ; \n \t3 } else { \n <ect>
\t4 if ( properties . contains <identifiersep> key ( <string_literal> ) ) { \n \t5 try { \n \t6 sink . set <identifiersep> state ( abstract <identifiersep> audio <identifiersep> device <identifiersep> config . state . value <identifiersep> of ( properties . get ( <string_literal> ) ) ) ; \n \t5 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t2 log . debug ( <string_literal> + type + <string_literal> + attributes + <string_literal> ) ; \n \t2 final int f <identifiersep> dampening <identifiersep> timeout = get <identifiersep> dampening <identifiersep> timeout ( ) ; \n \t2 <comment> \n \t2 if ( cls . is <identifiersep> interface ( ) && dampening <identifiersep> timeout > - 1 ) { \n <ect>
\t6 ex . add <identifiersep> proxy <identifiersep> object ( api <identifiersep> db <identifiersep> utils . find <identifiersep> zone <identifiersep> by <identifiersep> id ( zone . get <identifiersep> id ( ) ) . get <identifiersep> uuid ( ) ) ; \n \t6 throw ex ; } \n \t5 call <identifiersep> context . current ( ) . set <identifiersep> event <identifiersep> details ( <string_literal> + ip . get <identifiersep> id ( ) ) ; \n \t5 ip ip <identifiersep> address = ip . get <identifiersep> address ( ) ; \n <ect>
\t3 for ( rotation <identifiersep> action action : this . rotation <identifiersep> actions ) { \n \t4 action . execute ( this . fs , this . current <identifiersep> file ) ; } \n \t3 this . current <identifiersep> file = new <identifiersep> file ; } \n \t2 long time = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n <ect>
\t5 result = false ; } \n \t3 } catch ( final operation <identifiersep> timedout <identifiersep> exception e ) { \n \t4 throw new agent <identifiersep> unavailable <identifiersep> exception ( <string_literal> + vm . get <identifiersep> name ( ) + <string_literal> + network , dest . get <identifiersep> host ( ) . get <identifiersep> id ( ) , e ) ; } \n \t2 } else { \n <ect>
\t1 throw new ambari <identifiersep> ldap <identifiersep> exception ( e ) ; } \n \t1 return ambari <identifiersep> ldap <identifiersep> configuration ; } \n @ override \n public ambari <identifiersep> ldap <identifiersep> configuration detect <identifiersep> ldap <identifiersep> group <identifiersep> attributes ( ambari <identifiersep> ldap <identifiersep> configuration ambari <identifiersep> ldap <identifiersep> configuration ) throws ambari <identifiersep> ldap <identifiersep> exception { \n <ect>
\t4 final string [ ] options = range . split ( <string_literal> ) ; \n \t4 for ( final string option : options ) { \n \t5 if ( option . trim ( ) . equals <identifiersep> ignore <identifiersep> case ( value ) ) { \n \t6 return null ; } } \n <ect>
\t2 try { \n \t3 connect conn = libvirt <identifiersep> connection . get <identifiersep> connection ( ) ; \n \t3 storage = conn . storage <identifiersep> pool <identifiersep> lookup <identifiersep> by <identifiersep> uuid <identifiersep> string ( uuid ) ; \n \t3 if ( storage . get <identifiersep> info ( ) . state != storage <identifiersep> pool <identifiersep> state . vir <identifiersep> storage <identifiersep> pool <identifiersep> running ) { \n <ect>
\t2 throw new service <identifiersep> exception ( <string_literal> , e ) ; } \n \t1 } else { \n \t1 log . info ( <string_literal> ) ; } } \n private void stop <identifiersep> or <identifiersep> disconnect <identifiersep> tez <identifiersep> sessions ( ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> ) ; } \n \t2 return new answer ( cmd ) ; } \n \t1 protected answer execute ( pool <identifiersep> eject <identifiersep> command cmd ) { \n <ect>
\t1 logger . info ( <string_literal> ) ; \n \t1 list < node <identifiersep> repository <identifiersep> file <identifiersep> data > result = \n \t2 repo . get <identifiersep> data <identifiersep> for <identifiersep> read <identifiersep> in <identifiersep> batch ( arrays . as <identifiersep> list ( file1 , copied <identifiersep> file ) , node <identifiersep> repository <identifiersep> file <identifiersep> data . class ) ; \n \t1 assert <identifiersep> equals ( <number_literal> , result . size ( ) ) ; \n <ect>
\t7 indexed <identifiersep> key . set <identifiersep> secondary <identifiersep> sort <identifiersep> order ( secondary <identifiersep> sort <identifiersep> order ) ; } \n \t6 tuple2 < indexed <identifiersep> key , tuple > out = new tuple2 < indexed <identifiersep> key , tuple > ( indexed <identifiersep> key , \n \t8 ( tuple ) result <identifiersep> tuple . get ( <number_literal> ) ) ; \n <ect>
\t2 public void bar ( string body ) { \n \t3 fail ( <string_literal> + body ) ; } \n \t2 public void foo ( @ simple ( <string_literal> ) string bar ) { \n \t3 this . bar = bar ; \n <ect>
\t2 logger . info ( <string_literal> . format ( old <identifiersep> conf , current <identifiersep> dir ) ) \n \t2 link ( old <identifiersep> conf , action = <string_literal> ) \n \t2 link ( old <identifiersep> conf , to = current <identifiersep> dir ) \n \t2 else : \n <ect>
\t2 logger . error ( <string_literal> ) ; \n \t2 throw new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n \t1 @ override \n \t1 public long get <identifiersep> size ( ) { \n <ect>
\t3 ucs <identifiersep> blade <identifiersep> response rsp = mgr . associate <identifiersep> profile <identifiersep> to <identifiersep> blade ( this ) ; \n \t3 rsp . set <identifiersep> response <identifiersep> name ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( rsp ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 this . set <identifiersep> file ( base <identifiersep> file <identifiersep> name , false ) ; } \n \t2 catch ( io <identifiersep> exception e ) { \n <ect>
\t4 logger . error ( <string_literal> ) ; \n \t4 return false ; } \n \t3 if ( recovered <identifiersep> packet . get <identifiersep> buffer ( ) . length < fec <identifiersep> packet . get <identifiersep> length ( ) ) \n \t3 { \n <ect>
\t3 raw <identifiersep> packet <identifiersep> pool . offer ( packet ) ; \n \t3 return false ; } \n \t2 number <identifiersep> of <identifiersep> packets ++ ; \n \t2 if ( targets . is <identifiersep> empty ( ) ) \n <ect>
\t2 log . debug ( message <identifiersep> format . format ( <string_literal> , host <identifiersep> name ) ) ; } \n \t1 return host <identifiersep> name ; \n \t1 } catch ( unknown <identifiersep> host <identifiersep> exception ex ) { \n <ect>
\t3 log . info ( <string_literal> , split ) ; } \n \t2 seekable <identifiersep> input in = new fs <identifiersep> data <identifiersep> input <identifiersep> stream <identifiersep> wrapper ( stream , split . get <identifiersep> path ( ) . get <identifiersep> file <identifiersep> system ( ) . get <identifiersep> file <identifiersep> status ( split . get <identifiersep> path ( ) ) . get <identifiersep> len ( ) ) ; \n \t2 data <identifiersep> file <identifiersep> reader < e > data <identifiersep> file <identifiersep> reader = ( data <identifiersep> file <identifiersep> reader ) data <identifiersep> file <identifiersep> reader . open <identifiersep> reader ( in , datum <identifiersep> reader ) ; \n <ect>
\t1 { \n \t1 error <identifiersep> pattern = pattern . compile ( error <identifiersep> status <identifiersep> regex != null ? error <identifiersep> status <identifiersep> regex : default <identifiersep> error <identifiersep> status <identifiersep> regex ) ; } \n \t1 catch ( pattern <identifiersep> syntax <identifiersep> exception ex ) \n \t1 { \n <ect>
\t1 private void log <identifiersep> operation ( string operation , long duration ) { \n \t2 if ( ! stats . contains <identifiersep> key ( operation ) ) { \n \t3 stats . put ( operation , new array <identifiersep> list < > ( ) ) ; } \n \t2 stats . get ( operation ) . add ( duration ) ; \n <ect>
\t2 buf . append ( <string_literal> ) ; \n \t2 string s = buf . to <identifiersep> string ( ) ; \n \t2 log . debug ( <string_literal> + s + <string_literal> ) ; \n \t2 stmt . execute <identifiersep> update ( s ) ; \n <ect>
\t1 private final map < string , string > replace <identifiersep> base <identifiersep> map = new hash <identifiersep> map < > ( ) ; \n \t1 public sand <identifiersep> box <identifiersep> maker ( map conf ) { \n \t2 this . conf = conf ; \n \t2 is <identifiersep> enable = config <identifiersep> extension . is <identifiersep> java <identifiersep> sand <identifiersep> box <identifiersep> enable ( conf ) ; \n <ect>
public class replica <identifiersep> allocated <identifiersep> after <identifiersep> primary <identifiersep> tests extends es <identifiersep> allocation <identifiersep> test <identifiersep> case { \n \t1 private final logger logger = loggers . get <identifiersep> logger ( replica <identifiersep> allocated <identifiersep> after <identifiersep> primary <identifiersep> tests . class ) ; \n \t1 public void test <identifiersep> backup <identifiersep> is <identifiersep> allocated <identifiersep> after <identifiersep> primary ( ) { \n \t2 allocation <identifiersep> service strategy = create <identifiersep> allocation <identifiersep> service ( settings . builder ( ) . put ( <string_literal> , <number_literal> ) . build ( ) ) ; \n <ect>
\t4 thread . sleep ( <number_literal> ) ; \n \t3 } catch ( exception e ) { } } \n \t2 log . info ( <string_literal> + consumer . completed ( ) + <string_literal> ) ; \n \t2 consumer . shutdown ( ) ; \n <ect>
\t1 public static void set <identifiersep> file <identifiersep> mode ( file <identifiersep> mode new <identifiersep> file <identifiersep> mode ) \n \t1 { \n \t2 if ( file <identifiersep> mode != null ) \n \t2 { \n <ect>
\t1 log . debug ( <string_literal> + service <identifiersep> name ) ; \n \t1 return false ; } \n \t1 return is <identifiersep> extension <identifiersep> service ( stack <identifiersep> manager , stack . get <identifiersep> name ( ) , stack . get <identifiersep> parent <identifiersep> stack <identifiersep> version ( ) , service <identifiersep> name , extension <identifiersep> name ) ; } \n private static boolean is <identifiersep> extension <identifiersep> service ( stack <identifiersep> manager stack <identifiersep> manager , string stack <identifiersep> name , string stack <identifiersep> version , string service <identifiersep> name , string extension <identifiersep> name ) { \n <ect>
\t2 mock . expected <identifiersep> minimum <identifiersep> message <identifiersep> count ( 1 ) ; \n \t2 mock . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > tweets = mock . get <identifiersep> exchanges ( ) ; \n \t2 for ( exchange e : tweets ) { \n <ect>
\t2 stop <identifiersep> watch stop <identifiersep> watch = new stop <identifiersep> watch ( ) ; \n \t2 stop <identifiersep> watch . start ( ) ; \n \t2 assert <identifiersep> acked ( ( admin ( ) . indices ( ) . prepare <identifiersep> aliases ( ) . add <identifiersep> alias ( <string_literal> , <string_literal> ) . set <identifiersep> timeout ( timeout ) ) ) ; \n \t2 assert <identifiersep> that ( stop <identifiersep> watch . stop ( ) . last <identifiersep> task <identifiersep> time ( ) . millis ( ) , less <identifiersep> than ( timeout . millis ( ) ) ) ; \n <ect>
\t1 for ( map < string , object > properties : request . get <identifiersep> properties ( ) ) { \n \t1 try { \n \t2 create <identifiersep> resources ( get <identifiersep> create <identifiersep> command ( properties , request . get <identifiersep> request <identifiersep> info <identifiersep> properties ( ) ) ) ; \n \t1 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t2 class clazz = new groovy <identifiersep> class <identifiersep> loader ( ) . parse <identifiersep> class ( <string_literal> <string_literal> <ect>
\t2 } ) ; \n \t2 start <identifiersep> broker ( ) ; \n \t2 int sent = produce <identifiersep> messages <identifiersep> to <identifiersep> consume <identifiersep> multiple <identifiersep> data <identifiersep> files ( <number_literal> ) ; \n \t2 int num <identifiersep> files <identifiersep> after <identifiersep> send = get <identifiersep> number <identifiersep> of <identifiersep> journal <identifiersep> files ( ) ; \n <ect>
\t5 file index = new file ( segment <identifiersep> file ) ; \n \t5 return builder . finish ( index ) ? new on <identifiersep> disk <identifiersep> index ( index , column <identifiersep> index . get <identifiersep> validator ( ) , null ) : null ; } \n \t4 catch ( exception | fs <identifiersep> error e ) \n \t4 { \n <ect>
\t4 exists = mfm . exists ( file <identifiersep> name . substring ( file <identifiersep> name . last <identifiersep> index <identifiersep> of ( <string_literal> ) + 1 ) ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> file <identifiersep> exception nsfe ) { \n \t4 return false ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 executor . execute ( new b ( ) ) ; \n \t2 executor . execute ( new b ( ) ) ; \n \t2 executor . shutdown ( ) ; \n \t2 boolean finished <identifiersep> in <identifiersep> time = executor . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . minutes ) ; \n <ect>
\t3 display <identifiersep> resolution <identifiersep> dependent <identifiersep> fb <identifiersep> os = core <identifiersep> registry . get ( display <identifiersep> resolution <identifiersep> dependent <identifiersep> fb <identifiersep> os . class ) ; } \n \t2 fbo scene <identifiersep> final <identifiersep> fbo = display <identifiersep> resolution <identifiersep> dependent <identifiersep> fb <identifiersep> os . get ( final <identifiersep> buffer ) ; \n \t2 final byte <identifiersep> buffer buffer = scene <identifiersep> final <identifiersep> fbo . get <identifiersep> color <identifiersep> buffer <identifiersep> raw <identifiersep> data ( ) ; \n \t2 if ( buffer == null ) { \n <ect>
\t3 final authentication authentication = web <identifiersep> utils . get <identifiersep> in <identifiersep> progress <identifiersep> authentication ( ) ; \n \t3 if ( authentication == null ) { \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t3 final principal principal = authentication . get <identifiersep> principal ( ) ; \n <ect>
\t2 state = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> state ( ) ; \n \t2 assert <identifiersep> that ( state . nodes ( ) . get <identifiersep> size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 assert <identifiersep> that ( state . meta <identifiersep> data ( ) . indices ( ) . contains <identifiersep> key ( <string_literal> ) , equal <identifiersep> to ( true ) ) ; \n \t2 ensure <identifiersep> green ( ) ; \n <ect>
\t4 public void run ( ) { \n \t5 try { \n \t6 listener . on <identifiersep> connect ( nginx <identifiersep> clojure <identifiersep> asyn <identifiersep> socket . ngx <identifiersep> http <identifiersep> clojure <identifiersep> socket <identifiersep> ok , data ) ; \n \t5 } catch ( throwable e ) { \n <ect>
\t1 try { \n \t1 download <identifiersep> request request = get <identifiersep> download <identifiersep> request ( request <identifiersep> id ) ; \n \t1 return concat ( request ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
\t2 command <identifiersep> task <identifiersep> revert revert = ( command <identifiersep> task <identifiersep> revert ) core ; \n \t2 list < job <identifiersep> task > match = minion . get <identifiersep> matching <identifiersep> jobs ( revert ) ; \n \t2 log . warn ( <string_literal> + revert . get <identifiersep> job <identifiersep> key ( ) + <string_literal> + match . size ( ) ) ; \n \t2 if ( match . size ( ) == 0 && revert . get <identifiersep> node <identifiersep> id ( ) != null && revert . get <identifiersep> node <identifiersep> id ( ) >= 0 ) { \n <ect>
\t3 } finally { \n \t4 if ( output != null ) { \n \t5 output . close ( ) ; } } \n \t2 } catch ( io <identifiersep> exception ie ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 json <identifiersep> node item <identifiersep> data <identifiersep> info = write <identifiersep> item <identifiersep> file ( source ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 create <identifiersep> tt <identifiersep> files ( source ) ; \n <ect>
\t6 . get <identifiersep> binding <identifiersep> config ( item <identifiersep> name ) ; \n \t4 sapp <identifiersep> address <identifiersep> dimmer status <identifiersep> address = sapp <identifiersep> binding <identifiersep> config <identifiersep> dimmer <identifiersep> item . get <identifiersep> status ( ) ; \n \t4 update <identifiersep> dimmer <identifiersep> item ( provider , status <identifiersep> address , item <identifiersep> name , item ) ; \n \t3 } else { \n <ect>
\t4 return new answer ( cmd , false , <string_literal> + result . second ( ) ) ; } \n \t4 s <identifiersep> logger . info ( <string_literal> + cmd . get <identifiersep> access <identifiersep> detail ( network <identifiersep> element <identifiersep> command . router <identifiersep> ip ) + <string_literal> ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t2 object json = mapper . read <identifiersep> value ( json <identifiersep> str , object . class ) ; \n \t2 json <identifiersep> str = mapper . writer <identifiersep> with <identifiersep> default <identifiersep> pretty <identifiersep> printer ( ) . write <identifiersep> value <identifiersep> as <identifiersep> string ( json ) ; } \n \t2 file <identifiersep> writer . write ( json <identifiersep> str ) ; \n \t1 } else { \n <ect>
\t6 log . info ( <string_literal> + spring <identifiersep> ctx ) ; \n \t6 log . info ( <string_literal> + spring <identifiersep> bean2 ) ; \n \t6 log . info ( <string_literal> + ses ) ; \n \t6 log . info ( <string_literal> + job <identifiersep> ctx ) ; \n <ect>
\t3 return false ; } } \n \t1 <comment> \n \t1 protected boolean exec <identifiersep> stream <identifiersep> message ( string opcode , properties props ) { \n \t2 if ( stream <identifiersep> session == null ) { \n <ect>
\t5 conf . get ( job <identifiersep> control <identifiersep> compiler . pig <identifiersep> reduce <identifiersep> stores ) ) ; \n \t3 this . loads = ( list < po <identifiersep> load > ) object <identifiersep> serializer . deserialize ( \n \t5 conf . get ( pig <identifiersep> input <identifiersep> format . pig <identifiersep> loads ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 break ; \n \t5 bout . write ( buf , 0 , n ) ; } \n \t4 inp . close ( ) ; \n \t4 ar . add ( bout . to <identifiersep> byte <identifiersep> array ( ) ) ; \n <ect>
\t2 interceptor . ret <identifiersep> interceptor = new interceptor <identifiersep> adapter ( ) { \n \t3 @ nullable @ override public grid <identifiersep> bi <identifiersep> tuple on <identifiersep> before <identifiersep> remove ( object key , @ nullable object val ) { \n \t4 return new grid <identifiersep> bi <identifiersep> tuple ( true , <number_literal> ) ; } \n \t2 } ; \n <ect>
\t2 while ( ( 1 < < ( exp <identifiersep> retries <identifiersep> threshold + 1 ) ) < ( ( max <identifiersep> sleep <identifiersep> time <identifiersep> ms - base <identifiersep> sleep <identifiersep> time <identifiersep> ms ) / <number_literal> ) ) \n \t3 exp <identifiersep> retries <identifiersep> threshold ++ ; \n \t2 log . info ( <string_literal> + base <identifiersep> sleep <identifiersep> time <identifiersep> ms + <string_literal> + max <identifiersep> sleep <identifiersep> time <identifiersep> ms + <string_literal> + <string_literal> + max <identifiersep> retries + <string_literal> ) ; \n \t2 if ( base <identifiersep> sleep <identifiersep> time <identifiersep> ms > max <identifiersep> sleep <identifiersep> time <identifiersep> ms ) { \n <ect>
<comment> \n \t2 void on <identifiersep> response ( grid <identifiersep> data <identifiersep> load <identifiersep> response res ) { \n <ect>
\t4 logger . debug ( <string_literal> , logger <identifiersep> constants . tfinit ) ; \n \t4 m <identifiersep> device = factory . create <identifiersep> m <identifiersep> bricklet <identifiersep> ambient <identifiersep> light ( ) ; \n \t4 m <identifiersep> device . set <identifiersep> device <identifiersep> identifier ( bricklet <identifiersep> ambient <identifiersep> light . device <identifiersep> identifier ) ; \n \t3 } else if ( device <identifiersep> identifier == bricklet <identifiersep> ambient <identifiersep> light <identifiersep> v2 . device <identifiersep> identifier ) { \n <ect>
\t5 versioned <identifiersep> value value = ep <identifiersep> state . get <identifiersep> application <identifiersep> state ( application <identifiersep> state . schema ) ; \n \t5 uuid current <identifiersep> version = uuid . from <identifiersep> string ( value . value ) ; \n \t5 if ( schema . instance . get <identifiersep> version ( ) . equals ( current <identifiersep> version ) ) \n \t5 { \n <ect>
\t2 return id ; } \n \t1 public ejb <identifiersep> book lookup <identifiersep> book <identifiersep> by <identifiersep> id ( @ path <identifiersep> param ( <string_literal> ) int id ) { \n \t2 log . info ( <string_literal> + id + <string_literal> ) ; \n \t2 log . info ( <string_literal> + collection ) ; \n <ect>
\t4 + <string_literal> <comment> \n \t4 + <string_literal> <comment> \n \t4 + <string_literal> ; \n \t2 document doc = post <identifiersep> as <identifiersep> dom ( <string_literal> , xml ) ; \n <ect>
\t2 void fail ( ) { \n \t3 if ( this . tsh != null ) { \n \t4 this . skm . fail <identifiersep> tags ( this . sent <identifiersep> to , this . session <identifiersep> key , this . tsh ) ; \n \t4 <comment> \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + private <identifiersep> ip <identifiersep> address + <string_literal> + args ) ; } \n \t2 vmware <identifiersep> manager mgr = get <identifiersep> service <identifiersep> context ( ) . get <identifiersep> stock <identifiersep> object ( vmware <identifiersep> manager . context <identifiersep> stock <identifiersep> name ) ; \n \t2 pair < boolean , string > result = ssh <identifiersep> helper . ssh <identifiersep> execute ( private <identifiersep> ip <identifiersep> address , default <identifiersep> domr <identifiersep> sshport , <string_literal> , mgr . get <identifiersep> system <identifiersep> vm <identifiersep> key <identifiersep> file ( ) , null , <string_literal> + args ) ; \n \t2 if ( ! result . first ( ) ) { \n <ect>
\t4 if ( implemented <identifiersep> network == null || implemented <identifiersep> network . first ( ) == null ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + network ) ; } \n \t4 network = implemented <identifiersep> network . second ( ) ; \n \t3 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t6 logger . warn ( <string_literal> ) ; } \n \t5 clean <identifiersep> jobs ( ) ; \n \t5 process <identifiersep> entries ( entries ) ; \n \t4 } catch ( scheduler <identifiersep> exception se ) { \n <ect>
\t3 state = new boolean [ chancount ] ; } \n \t2 @ override \n \t2 public void update ( wago <identifiersep> binding binding , string coupler <identifiersep> name , int module ) { \n \t3 if ( ! connect ( ) ) { \n <ect>
\t3 int v = node <identifiersep> factory <identifiersep> extra . node <identifiersep> to <identifiersep> int ( x ) ; \n \t3 limit = ( v < 0 ) ? - 1 : v ; \n \t3 idx ++ ; \n \t3 if ( idx < list . size ( ) ) { \n <ect>
\t2 } else if ( message instanceof database <identifiersep> search <identifiersep> reply <identifiersep> message ) { \n \t3  <identifiersep> job . reply <identifiersep> found ( ( database <identifiersep> search <identifiersep> reply <identifiersep> message ) message ,  <identifiersep> peer ) ; \n \t2 } else { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t3 unsuback ack = new unsuback ( ) ; \n \t3 ack . message <identifiersep> id ( command . message <identifiersep> id ( ) ) ; \n \t3 send <identifiersep> to <identifiersep> mqtt ( ack . encode ( ) ) ; \n \t2 } else { \n <ect>
\t2 iter . set ( value ) ; \n \t2 } else if ( fallback != null ) { \n \t2 iter . set ( fallback ) ; \n \t2 } else { \n <ect>
\t2 for ( int i = 0 ; i < outbound . length ; i ++ ) { \n \t3 producer . send ( outbound [ i ] ) ; } \n \t2 log . info ( <string_literal> ) ; \n \t2 messcount = proxy . get <identifiersep> queue <identifiersep> size ( ) ; \n <ect>
\t1 protected authentication <identifiersep> handler <identifiersep> execution <identifiersep> result authenticate <identifiersep> username <identifiersep> password <identifiersep> internal ( final username <identifiersep> password <identifiersep> credential transformed <identifiersep> credential , \n <number_literal> final string original <identifiersep> password ) throws general <identifiersep> security <identifiersep> exception { \n \t2 final n1ql <identifiersep> query <identifiersep> result result = couchbase . query ( couchbase <identifiersep> properties . get <identifiersep> username <identifiersep> attribute ( ) , transformed <identifiersep> credential . get <identifiersep> username ( ) ) ; \n \t2 if ( result . all <identifiersep> rows ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t3 long max <identifiersep> burst <identifiersep> out = ( (  <identifiersep> outbound <identifiersep> burst <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second -  <identifiersep> outbound <identifiersep> k <identifiersep> bytes <identifiersep> per <identifiersep> second ) * <number_literal> * num <identifiersep> ms ) / <number_literal> ; \n \t3  <identifiersep> limiter . refill <identifiersep> bandwidth <identifiersep> queues ( buffer , inbound <identifiersep> to <identifiersep> add , outbound <identifiersep> to <identifiersep> add , max <identifiersep> burst <identifiersep> in , max <identifiersep> burst <identifiersep> out ) ; \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 if ( balancer instanceof service <identifiersep> support ) { \n \t3 run = ( ( service <identifiersep> support ) balancer ) . is <identifiersep> run <identifiersep> allowed ( ) ; } \n \t2 if ( ! run ) { \n \t3 <comment> \n <ect>
\t3 if ( ! vn <identifiersep> model . verify ( get <identifiersep> model <identifiersep> controller ( ) ) ) { \n \t4 vn <identifiersep> model . update ( get <identifiersep> model <identifiersep> controller ( ) ) ; } \n \t3 get <identifiersep> database ( ) . get <identifiersep> virtual <identifiersep> networks ( ) . add ( vn <identifiersep> model ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 public string get <identifiersep> test <identifiersep> name ( ) { \n \t2 return name . get <identifiersep> method <identifiersep> name ( ) ; } \n \t1 @ before \n \t1 public void set <identifiersep> up ( ) throws exception { \n <ect>
\t1 try { \n \t2 if ( null != s ) { \n \t2 s . close ( ) ; } \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) \n \t3 assert . assert <identifiersep> equals ( i , ( int ) empty . get ( i ) ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> set <identifiersep> expanding <identifiersep> big ( ) { \n <ect>
\t1 logger . info ( s <string_literal> ) \n \t1 converged = diff < 1e - <number_literal> \n \t1 iteration = iteration + 1 \n \t1 x = x <identifiersep> new } \n <ect>
\t1 stop ( shutdown <identifiersep> mode <identifiersep> normal ) ; } \n public synchronized boolean stop ( int mode ) throws resource <identifiersep> manager <identifiersep> system <identifiersep> exception { \n \t1 return stop ( mode , get <identifiersep> default <identifiersep> transaction <identifiersep> timeout ( ) * default <identifiersep> commit <identifiersep> timeout <identifiersep> factor ) ; } \n public synchronized boolean stop ( int mode , long time <identifiersep> out ) throws resource <identifiersep> manager <identifiersep> system <identifiersep> exception { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t6 ctx . profile <identifiersep> organizer ( ) . select <identifiersep> active <identifiersep> not <identifiersep> failing <identifiersep> peers ( 1 , sanfp <identifiersep> exclude , matches ) ; \n \t6 if ( matches . is <identifiersep> empty ( ) ) { \n \t7 <comment> \n \t7 if ( log . should <identifiersep> info ( ) ) \n <ect>
\t3 if ( boolean . get <identifiersep> boolean ( <string_literal> ) == true ) { \n \t4 log . info ( <string_literal> ) ; \n \t3 } else { \n \t4 enabled = true ; \n <ect>
\t6 dir <identifiersep> resources . add ( path . relativize ( file ) . to <identifiersep> string ( ) ) ; } \n \t5 return super . visit <identifiersep> file ( file , attrs ) ; } \n \t3 } ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public properties <identifiersep> configuration init <identifiersep> configuration ( inet <identifiersep> address ia ) { \n \t2 string id = uuid != null ? uuid : ia != null ? ia . to <identifiersep> string ( ) . substring ( 1 ) : null ; \n \t2 if ( id != null && device <identifiersep> confs . contains <identifiersep> key ( id ) ) { \n \t3 device <identifiersep> conf = device <identifiersep> confs . get ( id ) ; \n <ect>
\t2 resource = new <identifiersep> markup <identifiersep> resource <identifiersep> stream ( locator , get <identifiersep> class ( ) , <string_literal> , null , null , <string_literal> ) ; \n \t2 parser = new markup <identifiersep> parser ( resource ) ; \n \t2 parser . set <identifiersep> wicket <identifiersep> namespace ( <string_literal> ) ; \n \t2 tokens = parser . parse ( ) ; \n <ect>
\t2 throw new accumulo <identifiersep> exception ( e ) ; } \n \t1 } else { \n \t1 try { \n \t2 if ( compaction <identifiersep> config . get <identifiersep> wait ( ) ) { \n <ect>
\t1 else { \n \t2 add <identifiersep> object <identifiersep> to <identifiersep> both <identifiersep> sides <identifiersep> of <identifiersep> relationship <identifiersep> with <identifiersep> key ( object ,  <identifiersep> studio . movies <identifiersep> key ) ; } } \n public void remove <identifiersep> from <identifiersep> movies <identifiersep> relationship ( er . distribution . example . client . eo . movie object ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 private record <identifiersep> reader < long <identifiersep> writable , t > reader ; \n \t1 @ override \n \t1 public void initialize ( input <identifiersep> split generic <identifiersep> split , task <identifiersep> attempt <identifiersep> context context ) throws io <identifiersep> exception , \n \t3 interrupted <identifiersep> exception { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> generate <identifiersep> json3 ( ) { \n \t2 try { \n \t3 string filename = <string_literal> ; \n <ect>
\t4 pstmt . execute <identifiersep> update ( ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 pstmt . close ( ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 } catch ( final exception e ) { \n \t3 logger . debug ( <string_literal> , e ) ; \n \t3 return null ; } } \n \t1 private private <identifiersep> key read <identifiersep> der <identifiersep> private <identifiersep> key ( ) { \n <ect>
\t7 = i <identifiersep> audio <identifiersep> client <identifiersep> get <identifiersep> current <identifiersep> padding ( i <identifiersep> audio <identifiersep> client ) ; } \n \t5 catch ( h <identifiersep> result <identifiersep> exception hre ) \n \t5 { \n \t6 num <identifiersep> padding <identifiersep> frames = num <identifiersep> buffer <identifiersep> frames ; \n <ect>
\t3 state new <identifiersep> state = event . get <identifiersep> new <identifiersep> state ( ) ; \n \t3 state old <identifiersep> state = event . get <identifiersep> old <identifiersep> state ( ) ; \n \t3 aim <identifiersep> connection conn = event . get <identifiersep> aim <identifiersep> connection ( ) ; \n <ect>
\t4 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> ) ; } \n \t3 if ( assign <identifiersep> account <identifiersep> to <identifiersep> project ( project , account . get <identifiersep> id ( ) , project <identifiersep> account . role . regular ) != null ) { \n \t4 return true ; \n \t3 } else { \n <ect>
\t3 } catch ( io <identifiersep> exception ioe ) { \n \t4  <identifiersep> log . error ( <string_literal> , ioe ) ; \n \t4 return false ; \n \t3 } catch ( runtime <identifiersep> exception re ) { \n <ect>
\t7 ver = ( ( fred <identifiersep> plugin <identifiersep> real <identifiersep> versioned ) object ) . get <identifiersep> real <identifiersep> version ( ) ; } } \n \t5 <comment> \n \t5 if ( ver < min <identifiersep> ver ) { \n \t6 system . err . println ( <string_literal> + name + <string_literal> + min <identifiersep> ver + <string_literal> + ver ) ; \n <ect>
\t2 for ( int i = 0 ; i < cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shards ( ) . size ( ) ; i ++ ) { \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . shards ( ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . primary <identifiersep> shard ( ) . state ( ) , equal <identifiersep> to ( initializing ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . replica <identifiersep> shards ( ) . get ( 0 ) . state ( ) , equal <identifiersep> to ( unassigned ) ) ; } \n <ect>
\t1 set <identifiersep> all <identifiersep> children <identifiersep> traits ( child <identifiersep> op , op <identifiersep> traits ) ; } } \n private boolean convert <identifiersep> join <identifiersep> bucket <identifiersep> map <identifiersep> join ( join <identifiersep> operator join <identifiersep> op , optimize <identifiersep> tez <identifiersep> proc <identifiersep> context context , \n \t1 int big <identifiersep> table <identifiersep> position , tez <identifiersep> bucket <identifiersep> join <identifiersep> proc <identifiersep> ctx tez <identifiersep> bucket <identifiersep> join <identifiersep> proc <identifiersep> ctx ) throws semantic <identifiersep> exception { \n \t1 if ( ! check <identifiersep> convert <identifiersep> join <identifiersep> bucket <identifiersep> map <identifiersep> join ( join <identifiersep> op , big <identifiersep> table <identifiersep> position , tez <identifiersep> bucket <identifiersep> join <identifiersep> proc <identifiersep> ctx ) ) { \n <ect>
\t3 set < string > valid <identifiersep> names <identifiersep> found <identifiersep> in <identifiersep> locale = new hash <identifiersep> set < > ( ) ; \n \t3 collection < concept <identifiersep> name > names <identifiersep> in <identifiersep> locale = concept <identifiersep> to <identifiersep> validate . get <identifiersep> names ( concept <identifiersep> name <identifiersep> locale ) ; \n \t3 for ( concept <identifiersep> name name <identifiersep> in <identifiersep> locale : names <identifiersep> in <identifiersep> locale ) { \n \t4 if ( string <identifiersep> utils . is <identifiersep> blank ( name <identifiersep> in <identifiersep> locale . get <identifiersep> name ( ) ) ) { \n <ect>
\t2 if ( dex <identifiersep> source . is <identifiersep> directory ( ) ) { \n \t3 list < file > dex <identifiersep> files = get <identifiersep> all <identifiersep> dex <identifiersep> files <identifiersep> in <identifiersep> directory ( dex <identifiersep> source ) ; \n \t3 if ( dex <identifiersep> files . size ( ) > 1 && ! options . v ( ) . process <identifiersep> multiple <identifiersep> dex ( ) ) { \n \t4 file file = dex <identifiersep> files . get ( 0 ) ; \n <ect>
\t3 try { \n \t4 logger . trace ( <string_literal> , listener , cluster <identifiersep> changed <identifiersep> event . state ( ) . version ( ) ) ; \n \t4 listener . cluster <identifiersep> changed ( cluster <identifiersep> changed <identifiersep> event ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 if ( ( ports <identifiersep> forwarded . size ( ) > 1 ) && ( ! thinks <identifiersep> we <identifiersep> are <identifiersep> double <identifiersep> natted ) ) \n \t4 status = detected <identifiersep> ip . full <identifiersep> internet ; \n \t3 result = new detected <identifiersep> ip ( detected <identifiersep> ip , status ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 try { \n \t1 clazz = class . for <identifiersep> name ( <string_literal> ) ; \n \t1 method = clazz . get <identifiersep> method ( <string_literal> , string . class , boolean . class ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ce ) { \n <ect>
\t2 write <identifiersep> handle . close ( ) ; \n \t2 read <identifiersep> handle . close ( ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> pathfinder ( ) throws exception { \n <ect>
\t3 if ( exception <identifiersep> occured ) { \n \t4 if ( coord <identifiersep> job . get <identifiersep> id ( ) == null || coord <identifiersep> job . get <identifiersep> id ( ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t5 coord <identifiersep> job . set <identifiersep> status ( coordinator <identifiersep> job . status . failed ) ; \n \t5 coord <identifiersep> job . reset <identifiersep> pending ( ) ; } } } \n <ect>
<comment> \n \t1 private boolean execute <identifiersep> modify <identifiersep> operation ( final set < string > new <identifiersep> consent , final ldap <identifiersep> entry entry ) { \n \t2 final map < string , set < string > > attr <identifiersep> map = new hash <identifiersep> map < > ( ) ; \n \t2 attr <identifiersep> map . put ( this . ldap . get <identifiersep> consent <identifiersep> attribute <identifiersep> name ( ) , new <identifiersep> consent ) ; \n <ect>
\t6 break ; \n \t5 } else { \n \t6 <comment> \n \t6 if ( e instanceof session <identifiersep> expired <identifiersep> exception ) { \n <ect>
\t2 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 return new setup <identifiersep> answer ( command , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t3 <comment> \n \t3 try { \n \t4 cached = store . cache . get ( get <identifiersep> identifier ( ) . to <identifiersep> string ( ) ) ; \n \t3 } catch ( final exception e ) { \n <ect>
\t4 <comment> \n \t4 thread . sleep ( <number_literal> ) ; } \n \t3 return ! listener <identifiersep> result . is <identifiersep> empty ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 boolean is <identifiersep> authenticated = conn . authenticate <identifiersep> with <identifiersep> password ( <string_literal> , <string_literal> ) ; \n \t4 if ( is <identifiersep> authenticated == false ) { \n \t5 return <string_literal> ; \n \t4 } else { \n <ect>
\t2 long before =  <identifiersep> context . clock ( ) . now ( ) ; \n \t2 byte elg <identifiersep> encr [ ] =  <identifiersep> context . el <identifiersep> gamal <identifiersep> engine ( ) . encrypt ( elg <identifiersep> src <identifiersep> data , target ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) { \n \t3 long after =  <identifiersep> context . clock ( ) . now ( ) ; \n <ect>
\t4 . filter ( entry - > entry . get <identifiersep> key ( ) . equals ( name ) ) \n \t4 . map ( map . entry : : get <identifiersep> value ) \n \t4 . collect ( to <identifiersep> set ( ) ) ; \n \t2 if ( names . size ( ) > 1 ) { \n <ect>
\t2 graph <identifiersep> object obj \t2 = get <identifiersep> node ( web <identifiersep> socket <identifiersep> data . get <identifiersep> id ( ) ) ; \n \t2 if ( obj != null ) { \n \t3 if ( ! ( ( abstract <identifiersep> node ) obj ) . is <identifiersep> granted ( permission . write , get <identifiersep> web <identifiersep> socket ( ) . get <identifiersep> security <identifiersep> context ( ) ) ) { \n \t4 get <identifiersep> web <identifiersep> socket ( ) . send ( message <identifiersep> builder . status ( ) . message ( <string_literal> ) . code ( <number_literal> ) . build ( ) , true ) ; \n <ect>
\t1 transactions . find ( new bucket <identifiersep> info ( bucket <identifiersep> name ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 throw new no <identifiersep> such <identifiersep> bucket <identifiersep> exception ( bucket <identifiersep> name ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 continue ; } \n \t1 if ( ! command . get <identifiersep> status ( ) . equals ( host <identifiersep> role <identifiersep> status . in <identifiersep> progress ) \n \t2 && ! command . get <identifiersep> status ( ) . equals ( host <identifiersep> role <identifiersep> status . queued ) \n \t2 && ! command . get <identifiersep> status ( ) . equals ( host <identifiersep> role <identifiersep> status . aborted ) ) { \n <ect>
\t2 for ( tunnel <identifiersep> info tun : pool . list <identifiersep> tunnels ( ) ) { \n \t3 int len = tun . get <identifiersep> length ( ) ; \n \t3 if ( len > 1 && tun . get <identifiersep> peer ( 1 ) . equals ( peer ) ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 <comment> \n \t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . nonacidnonbucket + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n \t1 test <identifiersep> txn <identifiersep> commands2 . run <identifiersep> worker ( hive <identifiersep> conf ) ; \n \t1 rs = run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . nonacidnonbucket + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n <ect>
\t4 master <identifiersep> ha <identifiersep> uri = switch <identifiersep> to <identifiersep> master . switch <identifiersep> to <identifiersep> master ( ha <identifiersep> communication <identifiersep> life , me ) ; \n \t4 can <identifiersep> ask <identifiersep> for <identifiersep> elections . set ( true ) ; } \n \t3 catch ( throwable e ) \n \t3 { \n <ect>
<comment> \n \t1 void close <identifiersep> channel ( final channel channel ) { \n \t2 synchronized ( channel <identifiersep> closing ) { \n \t3 if ( closing <identifiersep> channel . contains ( channel ) ) { \n <ect>
\t1 try ( batch <identifiersep> scanner scanner = conn . create <identifiersep> batch <identifiersep> scanner ( table <identifiersep> name , authorizations . empty , 1 ) ) { \n \t1 final iterator <identifiersep> setting cfg = new iterator <identifiersep> setting ( <number_literal> , yielding <identifiersep> iterator . class ) ; \n \t1 scanner . add <identifiersep> scan <identifiersep> iterator ( cfg ) ; \n \t1 scanner . set <identifiersep> ranges ( collections . singleton ( new range ( ) ) ) ; \n <ect>
\t3 client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> restore <identifiersep> snapshot ( <string_literal> , <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) . get ( ) ; \n \t2 assert <identifiersep> equals ( 0 , restore <identifiersep> snapshot <identifiersep> response . get <identifiersep> restore <identifiersep> info ( ) . failed <identifiersep> shards ( ) ) ; } \n \t1 public void test <identifiersep> snapshot <identifiersep> closed <identifiersep> index ( ) throws exception { \n \t2 client client = client ( ) ; \n <ect>
\t2 } catch ( password <identifiersep> history <identifiersep> exception e ) { \n \t3 credentials . set <identifiersep> attribute ( e . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , e . get <identifiersep> message ( ) ) ; \n \t3 log . error ( <string_literal> + login <identifiersep> id , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t1 public bad <identifiersep> query <identifiersep> history get <identifiersep> bad <identifiersep> queries <identifiersep> for <identifiersep> project ( string project ) throws io <identifiersep> exception { \n \t2 bad <identifiersep> query <identifiersep> history bad <identifiersep> query <identifiersep> history = get <identifiersep> store ( ) . get <identifiersep> resource ( get <identifiersep> resource <identifiersep> path <identifiersep> for <identifiersep> project ( project ) , bad <identifiersep> query <identifiersep> history . class , bad <identifiersep> query <identifiersep> instance <identifiersep> serializer ) ; \n \t2 if ( bad <identifiersep> query <identifiersep> history == null ) { \n \t3 bad <identifiersep> query <identifiersep> history = new bad <identifiersep> query <identifiersep> history ( project ) ; } \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 set <identifiersep> header ( cache <identifiersep> constants . cache <identifiersep> element <identifiersep> expiry <identifiersep> idle , constant ( <number_literal> ) ) . \n \t6 to ( <string_literal> ) ; } \n \t2 } ) ; \n \t2 context . start ( ) ; \n <ect>
\t1 public void test <identifiersep> map <identifiersep> produce <identifiersep> polygons <identifiersep> with <identifiersep> skipped <identifiersep> holes ( ) throws exception { \n \t2 final feature <identifiersep> source < simple <identifiersep> feature <identifiersep> type , simple <identifiersep> feature > fs = test <identifiersep> ds \n \t4 . get <identifiersep> feature <identifiersep> source ( <string_literal> ) ; \n \t2 final referenced <identifiersep> envelope env = new referenced <identifiersep> envelope ( fs . get <identifiersep> bounds ( ) , wgs84 ) ; \n <ect>
\t5 if ( service <identifiersep> class . equals ( node <identifiersep> service . class ) ) { \n \t6 logger . debug ( <string_literal> ) ; \n \t6 schema <identifiersep> service . reload <identifiersep> schema ( new error <identifiersep> buffer ( ) , null ) ; } } \n \t4 if ( service != null ) { \n <ect>
\t3 <comment> \n \t3 request . update <identifiersep> next <identifiersep> reconnect <identifiersep> time <identifiersep> stamp ( \n \t5 memcached <identifiersep> connector . this . heal <identifiersep> session <identifiersep> interval \n \t7 * request . get <identifiersep> tries ( ) ) ; \n <ect>
\t2 factories . put ( tool <identifiersep> name , bean ) ; \n \t3 string target <identifiersep> bean <identifiersep> class = bean . get <identifiersep> bean <identifiersep> definition ( ) . get <identifiersep> bean <identifiersep> class <identifiersep> name ( ) ; \n \t3 if ( ref <identifiersep> name != null ) { \n <ect>
\t2 try { \n \t3 method getter = introspection <identifiersep> support . get <identifiersep> property <identifiersep> getter ( get <identifiersep> entity <identifiersep> type ( ) , get <identifiersep> key <identifiersep> property <identifiersep> name ( ) ) ; \n \t3 return getter . get <identifiersep> return <identifiersep> type ( ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t3 log . warn ( <string_literal> , name , eomodel . path <identifiersep> url ( ) , intersection , this ) ; \n \t3 enumeration e = intersection . object <identifiersep> enumerator ( ) ; \n \t3 while ( e . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t4 string entity <identifiersep> name = ( string ) e . next <identifiersep> element ( ) ; \n <ect>
\t4 public void run ( ) { \n \t5 while ( count < total <identifiersep> runs * queues ) { \n \t6 list < sync <identifiersep> queue <identifiersep> item <identifiersep> vo > l = mgr . dequeue <identifiersep> from <identifiersep> any ( 1l , items <identifiersep> per <identifiersep> run ) ; \n \t6 if ( l != null && l . size ( ) > 0 ) { \n <ect>
\t1 @ test \n \t1 public void versioned <identifiersep> seeking ( ) throws io <identifiersep> exception , no <identifiersep> such <identifiersep> algorithm <identifiersep> exception { \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 versioned . seeking ( ) ; \n <ect>
\t1 @ before \n \t1 public void start <identifiersep> grpc <identifiersep> server ( ) throws exception { \n \t2 ping <identifiersep> pong <identifiersep> server = new ping <identifiersep> pong <identifiersep> impl ( ) ; \n \t2 grpc <identifiersep> server = server <identifiersep> builder . for <identifiersep> port ( grpc <identifiersep> test <identifiersep> port ) . add <identifiersep> service ( ping <identifiersep> pong <identifiersep> server ) . build ( ) . start ( ) ; \n <ect>
\t2 if ( null != w ) { \n \t2 try { \n \t3 w . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 if ( state . get <identifiersep> reference ( ) == renting && state . get <identifiersep> stamp ( ) == 0 ) \n \t3 clear <identifiersep> all ( ) ; \n \t2 if ( map . is <identifiersep> empty ( ) && state . compare <identifiersep> and <identifiersep> set ( renting , evicted , 0 , 0 ) ) { \n <ect>
\t2 if ( input . get <identifiersep> scheme ( ) != null && input . get <identifiersep> scheme ( ) . equals ( <string_literal> ) ) \n \t3 return get <identifiersep> class ( ) . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( input . get <identifiersep> path ( ) ) ; \n \t2 return input . to <identifiersep> url ( ) . open <identifiersep> stream ( ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 iter . remove ( ) ; \n \t5 <comment> \n \t4 } else { \n \t5 if ( state . is <identifiersep> complete ( ) ) { \n <ect>
\t4 return cache <identifiersep> message ; } \n \t3 session . set <identifiersep> attribute ( broadcaster <identifiersep> id , string . value <identifiersep> of ( now ) ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception ex ) { \n \t3 logger . trace ( <string_literal> , ex ) ; \n <ect>
\t3 logger . error ( <string_literal> , e . get <identifiersep> out ( ) ) ; \n \t3 set <identifiersep> keep <identifiersep> logs ( true ) ; \n \t3 string errors = check <identifiersep> for <identifiersep> errors ( ) ; \n \t3 if ( errors != null ) \n <ect>
\t2 marshal <identifiersep> credentials ( loc <identifiersep> node ) ; \n \t2 while ( true ) { \n \t3 if ( ! send <identifiersep> join <identifiersep> request <identifiersep> message ( ) ) { \n <ect>
\t5 if ( obj . is <identifiersep> node ( ) ) { \n \t6 nodes . add ( ( abstract <identifiersep> node ) obj . get <identifiersep> sync <identifiersep> node ( ) ) ; \n \t5 } else { \n \t6 rels . add ( ( abstract <identifiersep> relationship ) obj . get <identifiersep> sync <identifiersep> relationship ( ) ) ; } } \n <ect>
\t3 query <identifiersep> stats qs = this . get <identifiersep> query <identifiersep> stats ( sql ) ; \n \t3 if ( qs != null ) { \n \t4 qs . failure ( delta , now ) ; } \n <ect>
\t7 . set <identifiersep> force ( true ) \n \t7 . call ( ) ; \n \t5 git . checkout ( ) . set <identifiersep> name ( branch <identifiersep> name ) . call ( ) ; \n \t4 } catch ( final git <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t4 log . warn ( <string_literal> , reaper <identifiersep> interval ) ; \n \t4 reaper <identifiersep> interval = 0 ; } \n \t3 else if ( conn <identifiersep> expire <identifiersep> time > 0 && reaper <identifiersep> interval == 0 ) { \n \t4 reaper <identifiersep> interval = conn <identifiersep> expire <identifiersep> time / <number_literal> ; \n <ect>
\t5 logger . debug ( <string_literal> , e ) ; } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t3 s <identifiersep> logger . trace ( <string_literal> + affected <identifiersep> vms . size ( ) + <string_literal> ) ; } \n \t2 boolean locked =  <identifiersep> work <identifiersep> lock . lock (  <identifiersep> global <identifiersep> work <identifiersep> lock <identifiersep> timeout ) ; \n \t2 if ( ! locked ) { \n <ect>
\t2 <comment> \n \t2 resolve <identifiersep> events . remove <identifiersep> if ( e - > flattened <identifiersep> providers . stream ( ) \n \t4 . filter ( p - > p . supports ( e , authentication , registered <identifiersep> service , request ) ) \n \t4 . count ( ) == 0 ) ; \n <ect>
\t2 } else if ( event instanceof wiki <identifiersep> ready <identifiersep> event ) { \n \t3 try { \n \t4 initializer . register <identifiersep> existing <identifiersep> wiki <identifiersep> macros ( ( ( wiki <identifiersep> ready <identifiersep> event ) event ) . get <identifiersep> wiki <identifiersep> id ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 this . data = data ; \n \t2 this . topology <identifiersep> id = topology <identifiersep> id ; } \n \t1 @ override \n \t1 public < t > object execute ( t . . . args ) { \n <ect>
\t6 result . put ( pool <identifiersep> name + <string_literal> , manager <identifiersep> bean . get <identifiersep> peak <identifiersep> usage ( ) . get <identifiersep> committed ( ) ) ; \n \t6 result . put ( pool <identifiersep> name + <string_literal> , manager <identifiersep> bean . get <identifiersep> peak <identifiersep> usage ( ) . get <identifiersep> max ( ) ) ; \n \t6 result . put ( pool <identifiersep> name + <string_literal> , ( double ) used / ( double ) peak <identifiersep> used * <number_literal> . 0d ) ; } \n \t4 } catch ( throwable f ) { \n <ect>
\t3 case event . create : \n \t3 case event . modify : \n \t3 case event . modify <identifiersep> metadata : \n \t4 if ( subject == null ) { \n <ect>
\t4 properties props = metadata <identifiersep> version <identifiersep> store <identifiersep> utils . get <identifiersep> properties ( metadata <identifiersep> version <identifiersep> sys <identifiersep> store <identifiersep> client ) ; \n \t4 long retrieved <identifiersep> version = metadata <identifiersep> version <identifiersep> store <identifiersep> utils . get <identifiersep> version ( props , system <identifiersep> store <identifiersep> constants . cluster <identifiersep> version <identifiersep> key ) ; \n \t4 return retrieved <identifiersep> version > this . cluster <identifiersep> version ; } \n \t2 } catch ( exception e ) { \n <ect>
\t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t6  <identifiersep> log . warn ( <string_literal> + bev . to <identifiersep> string ( ) ) ; } \n \t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 attache =  <identifiersep> agent <identifiersep> mgr . handle <identifiersep> direct <identifiersep> connect <identifiersep> agent ( host , cmds , resource , for <identifiersep> rebalance ) ; \n \t4 <comment> \n \t4 host =  <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host . get <identifiersep> id ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 public void rebalance <identifiersep> mq <identifiersep> list ( ) throws exception { \n <ect>
\t1 logger . info ( <string_literal> ) ; \n \t1 if ( leader <identifiersep> offer != null ) { \n \t1 try { \n \t2 zoo <identifiersep> keeper . delete ( leader <identifiersep> offer . get <identifiersep> node <identifiersep> path ( ) , - 1 ) ; \n <ect>
\t3 { \n \t4 socket . set <identifiersep> receive <identifiersep> buffer <identifiersep> size ( this . recv <identifiersep> buffer <identifiersep> size . int <identifiersep> value ( ) ) ; } \n \t3 catch ( socket <identifiersep> exception se ) \n \t3 { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 queue <identifiersep> view . pause ( ) ; \n \t2 message <identifiersep> consumer consumer = session . create <identifiersep> consumer ( destination ) ; \n \t2 assert <identifiersep> null ( consumer . receive ( <number_literal> ) ) ; \n <ect>
\t3 log . info ( <string_literal> + rsrc1 ) ; \n \t3 log . info ( <string_literal> + rsrc2 ) ; \n \t3 log . info ( <string_literal> + rsrc3 ) ; \n \t3 log . info ( <string_literal> + rsrc4 ) ; \n <ect>
\t2 <comment> \n \t2 } else if ( he instanceof h <identifiersep> pool <identifiersep> exhausted <identifiersep> exception ) { \n \t2 if ( pool . get <identifiersep> exhausted <identifiersep> time ( ) >= pool . get <identifiersep> cassandra <identifiersep> host ( ) . get <identifiersep> max <identifiersep> exhausted <identifiersep> time <identifiersep> before <identifiersep> marking <identifiersep> as <identifiersep> down ( ) ) { \n \t3 mark <identifiersep> host <identifiersep> as <identifiersep> down ( pool . get <identifiersep> cassandra <identifiersep> host ( ) ) ; \n <ect>
\t8 true ) ; \n \t7 if ( target <identifiersep> with <identifiersep> replaced <identifiersep> host . is <identifiersep> present ( ) ) { \n \t8 target = target <identifiersep> with <identifiersep> replaced <identifiersep> host . get ( ) ; } \n \t7 if ( ! target . to <identifiersep> lower <identifiersep> case ( ) . starts <identifiersep> with ( secure <identifiersep> url . to <identifiersep> lower <identifiersep> case ( ) ) ) { \n <ect>
\t1 if ( work . get <identifiersep> inputformat ( ) != null ) { \n \t1 hive <identifiersep> conf . set <identifiersep> var ( job , hive <identifiersep> conf . conf <identifiersep> vars . hiveinputformat , work \n \t2 . get <identifiersep> inputformat ( ) ) ; } \n \t1 string inp <identifiersep> format = hive <identifiersep> conf . get <identifiersep> var ( job , hive <identifiersep> conf . conf <identifiersep> vars . hiveinputformat ) ; \n <ect>
<comment> \n private map < string , string > read <identifiersep> existing <identifiersep> locks ( h <identifiersep> lock lock , string lock <identifiersep> name ) { \n <ect>
\t4 this . logger . info ( <string_literal> , e ) ; } \n \t3 try { \n \t4 headers . put ( jms <identifiersep> headers . redelivered , jms <identifiersep> message . get <identifiersep> jms <identifiersep> redelivered ( ) ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t1 for ( int i = 0 ; i < ssh <identifiersep> retries ; i ++ ) { \n \t2 try { \n \t3 logger . debug ( <string_literal> , to <identifiersep> string ( ) , connection ) ; \n \t3 t return <identifiersep> val = connection . create ( ) ; \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 connection connection = source . get <identifiersep> connection <identifiersep> for <identifiersep> writing ( ) ; \n \t2 if ( connection == null ) { \n \t3 throw new io <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t3 return <string_literal> ; } \n \t2 return <string_literal> ; } \n \t1 public void post <identifiersep> model <identifiersep> changed <identifiersep> notification ( dr <identifiersep> report <identifiersep> model model ) { \n \t2 if ( model != null ) { \n <ect>
\t7 log . debug ( <string_literal> + conn <identifiersep> pool <identifiersep> support . format <identifiersep> stats ( connection , route , state , pool ) ) ; } \n \t6 final async <identifiersep> connection <identifiersep> endpoint endpoint = new internal <identifiersep> connection <identifiersep> endpoint ( pool <identifiersep> entry ) ; \n <ect>
\t6 catch ( throwable t ) { \n \t7 log . error ( <string_literal> , local <identifiersep> addr , row , e ) ; } } } } } } \n \t1 protected void attempt <identifiersep> schema <identifiersep> initialization ( ) { \n \t2 if ( string <identifiersep> is <identifiersep> empty ( initialize <identifiersep> sql ) ) { \n <ect>
\t3 wakeup <identifiersep> cnxn ( ) ; } \n \t2 @ override \n \t2 public void exception <identifiersep> caught ( channel <identifiersep> handler <identifiersep> context ctx , \n \t9 exception <identifiersep> event e ) throws exception { \n <ect>
<comment> \n \t1 public subject new <identifiersep> subject ( final name <identifiersep> id name <identifiersep> id , final string recipient , final zoned <identifiersep> date <identifiersep> time not <identifiersep> on <identifiersep> or <identifiersep> after , \n \t7 final string in <identifiersep> response <identifiersep> to , final zoned <identifiersep> date <identifiersep> time not <identifiersep> before ) { \n <ect>
\t3 <comment> \n \t3 for ( int i = 0 ; i < node . get <identifiersep> child <identifiersep> count ( ) ; i ++ ) { \n \t4 add <identifiersep> node ( new <identifiersep> node , ( j <identifiersep> meter <identifiersep> tree <identifiersep> node ) node . get <identifiersep> child <identifiersep> at ( i ) ) ; } \n \t2 } catch ( illegal <identifiersep> user <identifiersep> action <identifiersep> exception iuae ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 <comment> \n \t3 thread . sleep ( 1000l ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 set <identifiersep> speed ( ( short ) 0 , null , null , null ) ; \n \t2 } else if ( state == on <identifiersep> off <identifiersep> value . on ) { \n \t3 set <identifiersep> speed ( tools . get <identifiersep> short <identifiersep> opt ( config <identifiersep> opts <identifiersep> switch <identifiersep> speed . speed . to <identifiersep> string ( ) , opts ) , null , null , null ) ; \n \t2 } else { \n <ect>
\t3 return ; } \n \t2 <comment> \n \t2 if (  <identifiersep> message . get <identifiersep> search <identifiersep> key ( ) . equals ( hash . fake <identifiersep> hash ) ) { \n \t3 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t3 camel <identifiersep> spring <identifiersep> test <identifiersep> helper . do <identifiersep> to <identifiersep> spring <identifiersep> camel <identifiersep> contexts ( context , new do <identifiersep> to <identifiersep> spring <identifiersep> camel <identifiersep> contexts <identifiersep> strategy ( ) { \n \t4 @ override \n \t4 public void execute ( string context <identifiersep> name , spring <identifiersep> camel <identifiersep> context camel <identifiersep> context ) \n \t5 throws exception { \n <ect>
\t7 po . type = <string_literal> ; \n \t7 po . version = version ; \n \t7 put <identifiersep> result put = destination . put ( in , po ) ; \n \t6 } catch ( exception e ) { \n <ect>
\t1 poller = system . scheduler . schedule ( delay , delay , tick <identifiersep> actor , tick ) \n \t1 } else { \n \t1 system . exit ( 1 ) } \n \t1 if ( environment . os == os . osx ) { \n <ect>
\t2 command <identifiersep> builder builder = builder <identifiersep> class . new <identifiersep> instance ( ) ; \n \t2 for ( string builder <identifiersep> name : builder . get <identifiersep> names ( ) ) { \n \t3 log . debug ( <string_literal> , builder <identifiersep> name , builder <identifiersep> class . get <identifiersep> name ( ) ) ; \n \t3 if ( builder <identifiersep> name . contains ( <string_literal> ) ) { \n <ect>
\t5 if ( count % <number_literal> == 0 ) { \n \t6 log . info ( <string_literal> , deleted ) ; \n \t6 deleted . clear ( ) ; } } } \n \t3 if ( ! deleted . is <identifiersep> empty ( ) ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
public void tear <identifiersep> down ( ) { \n \t1 try { \n \t1 oracle <identifiersep> utils . drop <identifiersep> table ( get <identifiersep> table <identifiersep> name ( ) , get <identifiersep> manager ( ) ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 if ( ! core <identifiersep> annotations <identifiersep> found . get ( ) ) { \n \t4 fallback <identifiersep> to <identifiersep> manual <identifiersep> annotated <identifiersep> classes ( get <identifiersep> class ( ) , f , handler ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public json <identifiersep> element serialize <identifiersep> object ( object src , long start <identifiersep> time ) { \n \t2 string local <identifiersep> property <identifiersep> view = property <identifiersep> view . get ( null ) ; \n \t2 <comment> \n \t2 if ( system . current <identifiersep> time <identifiersep> millis ( ) > start <identifiersep> time + max <identifiersep> serialization <identifiersep> time ) { \n <ect>
\t3 log . info ( <string_literal> , delayer ) ; \n \t3 get <identifiersep> context ( ) . add <identifiersep> intercept <identifiersep> strategy ( delayer ) ; } \n \t2 inflight <identifiersep> repository inflight <identifiersep> repository = get <identifiersep> bean <identifiersep> for <identifiersep> type ( inflight <identifiersep> repository . class ) ; \n \t2 if ( inflight <identifiersep> repository != null ) { \n <ect>
\t7 indices <identifiersep> service . process <identifiersep> pending <identifiersep> deletes ( index , index <identifiersep> settings , new time <identifiersep> value ( <number_literal> , time <identifiersep> unit . minutes ) ) ; \n \t6 } catch ( lock <identifiersep> obtain <identifiersep> failed <identifiersep> exception exc ) { \n \t7 logger . warn ( <string_literal> , index ) ; \n \t6 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 ) ; \n \t2 default <identifiersep> value <identifiersep> component <identifiersep> test <identifiersep> entity ent2 = get <identifiersep> audit <identifiersep> reader ( ) . find ( \n \t4 default <identifiersep> value <identifiersep> component <identifiersep> test <identifiersep> entity . class , id4 , <number_literal> \n \t2 ) ; \n <ect>
\t4 logger . warn ( <string_literal> , e ) ; \n \t3 } catch ( not <identifiersep> connected <identifiersep> exception e ) { \n \t4 logger . warn ( <string_literal> , e ) ; } \n \t2 } catch ( not <identifiersep> initialized <identifiersep> exception e ) { \n <ect>
\t3 int current <identifiersep> process = 0 ; \n \t3 try { \n \t4 current <identifiersep> process = get <identifiersep> process <identifiersep> for <identifiersep> cpu ( file ) ; \n \t3 } catch ( runtime <identifiersep> exception | io <identifiersep> exception e ) { \n <ect>
\t9 log . info ( <string_literal> ) ; \n \t9 echo <identifiersep> socket . close ( ) ; \n \t9 break ; \n \t8 case <number_literal> : \n <ect>
\t3 <comment> \n \t3 throw new query <identifiersep> parse <identifiersep> exception ( err . get <identifiersep> message ( ) , err , - 1 , - 1 ) ; } \n \t2 catch ( throwable th ) \n \t2 { \n <ect>
\t2 feed = ( feed ) ctx . create <identifiersep> unmarshaller ( ) . unmarshal ( new string <identifiersep> reader ( writer . to <identifiersep> string ( ) ) ) ; \n \t2 byte <identifiersep> array <identifiersep> output <identifiersep> stream baos = new byte <identifiersep> array <identifiersep> output <identifiersep> stream ( ) ; \n \t2 print <identifiersep> stream ps = new print <identifiersep> stream ( baos ) ; \n \t2 marshaller . marshal ( feed , ps ) ; \n <ect>
\t4 log . error ( string . format ( <string_literal> , task . instance <identifiersep> id ) ) ; \n \t4 try { \n \t5 images . set <identifiersep> image <identifiersep> state ( task . get <identifiersep> image <identifiersep> id ( ) , image <identifiersep> metadata . state . failed ) ; \n \t4 } catch ( final exception ex ) { \n <ect>
\t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 log . info ( <string_literal> + broker . get <identifiersep> broker <identifiersep> name ( ) + <string_literal> + region <identifiersep> broker . get <identifiersep> peer <identifiersep> broker <identifiersep> infos ( ) . length ) ; \n \t4 return max == region <identifiersep> broker . get <identifiersep> peer <identifiersep> broker <identifiersep> infos ( ) . length ; } \n \t2 } ) ; \n <ect>
\t1 <comment> \n \t1 if ( new <identifiersep> qv . get <identifiersep> observing <identifiersep> members ( ) . contains <identifiersep> key ( get <identifiersep> id ( ) ) ) { \n \t2 if ( get <identifiersep> learner <identifiersep> type ( ) != learner <identifiersep> type . observer ) { \n \t3 set <identifiersep> learner <identifiersep> type ( learner <identifiersep> type . observer ) ; \n <ect>
\t3 reply = new j <identifiersep> groups <identifiersep> reply <identifiersep> message ( command <identifiersep> identifier , success , null , serializer ) ; } \n \t2 try { \n \t3 channel . send ( address , reply ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 try { \n \t3 disrupted <identifiersep> exception throwable = new disrupted <identifiersep> exception ( <string_literal> ) ; \n \t3  <identifiersep> executor . execute ( ( ) - > next <identifiersep> filter . on <identifiersep> error ( throwable , request <identifiersep> context , wire <identifiersep> attrs ) ) ; \n \t3 } catch ( rejected <identifiersep> execution <identifiersep> exception e ) { \n <ect>
\t6 file res <identifiersep> path = obfuscation <identifiersep> reflection <identifiersep> helper . get <identifiersep> private <identifiersep> value ( abstract <identifiersep> resource <identifiersep> pack . class , resource <identifiersep> pack , <string_literal> , <string_literal> + <string_literal> ) ; \n \t6 logger . error ( <string_literal> , res <identifiersep> path . get <identifiersep> path ( ) ) ; } \n \t5 else \n \t5 { \n <ect>
\t1 time <identifiersep> unit . seconds . sleep ( <number_literal> ) ; <comment> \n \t1 collection < bucket <identifiersep> writer > writers = sink . get <identifiersep> sf <identifiersep> writers ( ) . values ( ) ; \n \t1 int total <identifiersep> rename <identifiersep> attempts = 0 ; \n \t1 for ( bucket <identifiersep> writer writer : writers ) { \n <ect>
\t3 attempt <identifiersep> item <identifiersep> advance <identifiersep> final ( role . step2 , false ) ; \n \t3 context <identifiersep> reload ( ) ; \n \t2 } catch ( exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t5 final host <identifiersep> vo host = ( host <identifiersep> vo ) create <identifiersep> host <identifiersep> and <identifiersep> agent ( resource , entry . get <identifiersep> value ( ) , true , null , false ) ; \n \t5 if ( host != null ) { \n \t6 hosts . add ( host ) ; } \n \t5 discoverer . post <identifiersep> discovery ( hosts ,  <identifiersep> node <identifiersep> id ) ; } \n <ect>
\t1 { \n \t2 logger . info ( <string_literal> , username , page , action , info ) ; } \n \t1 protected void log <identifiersep> deny ( string name , string resource <identifiersep> key , string access <identifiersep> level , string info , exception e ) \n \t1 { \n <ect>
\t4 if ( data != null ) { \n \t5 try { \n \t6 return utils . java <identifiersep> deserialize ( data ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 logger . error ( this , <string_literal> , e ) ; \n \t3 return null ; } \n \t2 if ( log <identifiersep> debug ) \n <ect>
\t4 if ( m == null ) { \n \t5 logger . info ( <string_literal> ) ; \n \t5 continue ; } \n \t4 string uri = m . as <identifiersep> resource ( ) . get <identifiersep> name <identifiersep> space ( ) ; \n <ect>
\t9 <comment> \n \t9 <comment> \n \t9 <comment> \n \t9 <comment> \n <ect>
\t4 copy ( <number_literal> ) ; <comment> \n \t4 int attr <identifiersep> count = read <identifiersep> u2 ( ) ; \n \t4 write <identifiersep> u2 ( attr <identifiersep> count ) ; \n <ect>
\t3 } else { \n \t4 ip <identifiersep> address . set <identifiersep> one <identifiersep> to <identifiersep> one <identifiersep> nat ( false ) ; \n \t4 ip <identifiersep> address . set <identifiersep> associated <identifiersep> with <identifiersep> vm <identifiersep> id ( null ) ; \n \t4  <identifiersep> ip <identifiersep> address <identifiersep> dao . update ( ip <identifiersep> address . get <identifiersep> id ( ) , ip <identifiersep> address ) ; \n <ect>
\t8 send <identifiersep> ack ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; } } } \n \t5 get <identifiersep> channel ( ) . basic <identifiersep> nack ( delivery <identifiersep> tag , true , \n \t7 container <identifiersep> utils . should <identifiersep> requeue ( is <identifiersep> default <identifiersep> requeue <identifiersep> rejected ( ) , e , this . logger ) ) ; } \n \t4 catch ( io <identifiersep> exception e1 ) { \n <ect>
\t2 logger . info ( <string_literal> , output <identifiersep> dir ) ; \n \t2 files . create <identifiersep> directories ( output <identifiersep> dir ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 json <identifiersep> node item <identifiersep> data <identifiersep> info = write <identifiersep> item <identifiersep> file ( source ) ; \n <ect>
\t1 @ override \n \t1 public void do <identifiersep> action ( action <identifiersep> event e ) { \n \t2 string url = link <identifiersep> map . get ( e . get <identifiersep> action <identifiersep> command ( ) ) ; \n \t2 if ( url == null ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 return ; } \n \t2 for ( string prop : props <identifiersep> to <identifiersep> send . split ( <string_literal> ) ) { \n \t3 string value = conf . get ( prop ) ; \n \t3 if ( value == null ) { \n <ect>
\t1 protected static ns <identifiersep> mutable <identifiersep> dictionary  <identifiersep> importers <identifiersep> by <identifiersep> extension <identifiersep> map = new ns <identifiersep> mutable <identifiersep> dictionary ( ) ; \n \t1 protected static ns <identifiersep> mutable <identifiersep> dictionary  <identifiersep> importers <identifiersep> by <identifiersep> name <identifiersep> map = new ns <identifiersep> mutable <identifiersep> dictionary ( ) ; \n \t1 protected static ns <identifiersep> mutable <identifiersep> dictionary  <identifiersep> exporters <identifiersep> by <identifiersep> name <identifiersep> map = new ns <identifiersep> mutable <identifiersep> dictionary ( ) ; \n \t1 public void register <identifiersep> importer ( string extension , selenium <identifiersep> test <identifiersep> importer importer ) { \n <ect>
\t3 if ( stream != null ) { \n \t4 string string <identifiersep> from <identifiersep> file = string <identifiersep> from <identifiersep> input <identifiersep> stream ( stream , encoding ) ; \n \t4 result = ns <identifiersep> property <identifiersep> list <identifiersep> serialization . property <identifiersep> list <identifiersep> from <identifiersep> string ( string <identifiersep> from <identifiersep> file ) ; } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 logger . info ( format ( <string_literal> ) ) \n \t1 for write <identifiersep> lock <identifiersep> file in command <identifiersep> commons . get <identifiersep> files <identifiersep> by <identifiersep> pattern ( format ( <string_literal> ) , 'write . lock' ) : \n \t1 file ( write <identifiersep> lock <identifiersep> file , action = <string_literal> ) \n else : \n <ect>
\t3 container = action <identifiersep> context . get <identifiersep> context ( ) . get <identifiersep> container ( ) ; \n \t3 if ( container != null ) { \n \t4 boolean dev <identifiersep> mode = boolean . parse <identifiersep> boolean ( container . get <identifiersep> instance ( string . class , struts <identifiersep> constants . struts <identifiersep> devmode ) ) ; \n \t4 if ( dev <identifiersep> mode ) { \n <ect>
\t3  <identifiersep> starting <identifiersep> segment <identifiersep> number = segmentation <identifiersep> profile . get <identifiersep> segment <identifiersep> number ( starting <identifiersep> segment . name ( ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n \t3 throw new io <identifiersep> exception ( <string_literal> ) ; } \n \t2 set <identifiersep> first <identifiersep> segment ( starting <identifiersep> segment ) ; \n <ect>
\t3 log . debug ( <string_literal> , akey ) ; \n \t3 log . debug ( <string_literal> , ause <identifiersep> method ) ; \n \t3 log . debug ( <string_literal> , ause <identifiersep> time <identifiersep> format ) ; \n <ect>
@ override \n public void visit <identifiersep> simple <identifiersep> resource ( visit <identifiersep> context visit <identifiersep> context , \n \t9 simple <identifiersep> schema collection <identifiersep> schema ) \n { \n <ect>
\t3 apply <identifiersep> namespace ( namespace ) ; \n \t3 role <identifiersep> binding old = open <identifiersep> shift <identifiersep> client . role <identifiersep> bindings ( ) . in <identifiersep> namespace ( namespace ) . with <identifiersep> name ( id ) . get ( ) ; \n \t3 if ( is <identifiersep> running ( old ) ) { \n \t4 if ( user <identifiersep> configuration <identifiersep> compare . config <identifiersep> equal ( entity , old ) ) { \n <ect>
public class default <identifiersep> cas <identifiersep> webflow <identifiersep> execution <identifiersep> plan implements cas <identifiersep> webflow <identifiersep> execution <identifiersep> plan { \n \t1 private list < cas <identifiersep> webflow <identifiersep> configurer > webflow <identifiersep> configurers = new array <identifiersep> list < > ( ) ; \n \t1 @ override \n \t1 public void register <identifiersep> webflow <identifiersep> configurer ( final cas <identifiersep> webflow <identifiersep> configurer cfg ) { \n <ect>
<number_literal> final http <identifiersep> servlet <identifiersep> request request ) { \n \t2 final map < string , multifactor <identifiersep> authentication <identifiersep> provider > provider <identifiersep> map = \n \t4 multifactor <identifiersep> authentication <identifiersep> utils . get <identifiersep> available <identifiersep> multifactor <identifiersep> authentication <identifiersep> providers ( this . application <identifiersep> context ) ; \n \t2 if ( provider <identifiersep> map == null || provider <identifiersep> map . is <identifiersep> empty ( ) ) { \n <ect>
\t1 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + \n \t2 <string_literal> ) ; } \n \t1 if ( ephemeral <identifiersep> nodes <identifiersep> file <identifiersep> path != null && ! use <identifiersep> new <identifiersep> watcher ) \n \t1 { \n <ect>
\t3 long value = ( long ) o ; \n \t3 if ( value < = integer . max <identifiersep> value && value >= integer . min <identifiersep> value ) { \n \t4 return ( int ) value ; \n \t3 } else { \n <ect>
\t4 return returned <identifiersep> host <identifiersep> list ; \n \t3 } else { \n \t4 s <identifiersep> logger . error ( <string_literal> + mor . get <identifiersep> type ( ) + <string_literal> + mor . get <identifiersep> value ( ) + <string_literal> + host <identifiersep> inventory <identifiersep> path ) ; \n \t4 return null ; } } \n <ect>
\t3 total <identifiersep> rebalanced += rebalanced ; \n \t3 long elapsed <identifiersep> seconds = ( system . current <identifiersep> time <identifiersep> millis ( ) - curr <identifiersep> start ) / time . ms <identifiersep> per <identifiersep> second ; \n \t3 logger . info ( <string_literal> + engine . get <identifiersep> name ( ) + <string_literal> \n \t6 + elapsed <identifiersep> seconds + <string_literal> ) ; \n <ect>
\t2 logger . info ( <string_literal> + config . get <identifiersep> max <identifiersep> password <identifiersep> length ( ) ) ; \n \t2 logger . info ( <string_literal> + config . get <identifiersep> invalid <identifiersep> user <identifiersep> name <identifiersep> pattern ( ) ) ; \n \t2 logger . info ( <string_literal> + ( config . is <identifiersep> save <identifiersep> game <identifiersep> activated ( ) ? <string_literal> : <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> + config . get <identifiersep> backlog <identifiersep> size ( ) ) ; \n <ect>
\t5 filter . set <identifiersep> parameter ( i , params . get ( i ) ) ; \n \t4 } else { \n \t5 filter . set <identifiersep> parameter ( param <identifiersep> name , params . get ( i ) ) ; } \n \t3 } ) ; } \n <ect>
\t2 try { \n \t3 files . delete ( get <identifiersep> autosave <identifiersep> file ( ) ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> file <identifiersep> exception ignored ) { \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 barlogger . info ( <string_literal> ) ; \n \t2 <comment> \n <ect>
\t2 if ( return <identifiersep> code == return <identifiersep> code . unknown ) { \n \t3 log . warn ( <string_literal> ) ; \n \t3 return <string_literal> ; } \n \t2 if ( pig <identifiersep> context == null ) { \n <ect>
\t3 log . error ( <string_literal> , e ) ; \n \t2 } catch ( m <identifiersep> bean <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t2 } catch ( instance <identifiersep> already <identifiersep> exists <identifiersep> exception e ) { \n <ect>
\t4 set <identifiersep> value ( type . get <identifiersep> id ( ) + open <identifiersep> cms . get <identifiersep> org <identifiersep> unit <identifiersep> manager ( ) . read <identifiersep> organizational <identifiersep> unit ( m <identifiersep> cms , path ) . get <identifiersep> name ( ) ) ; \n \t4 return ; } \n \t3 set <identifiersep> value ( open <identifiersep> cms . get <identifiersep> org <identifiersep> unit <identifiersep> manager ( ) . read <identifiersep> organizational <identifiersep> unit ( m <identifiersep> cms , path ) ) ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t2 log . warn ( <string_literal> + sr . get <identifiersep> path ( ) + <string_literal> ) ; \n \t2 } else { \n \t2 log . trace ( <string_literal> + sr . get <identifiersep> path ( ) ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + vpc + <string_literal> ) ; \n \t3 return false ; } \n \t2 <comment> \n \t2 if ( ! cleanup <identifiersep> vpc <identifiersep> resources ( vpc . get <identifiersep> id ( ) , caller , caller <identifiersep> user <identifiersep> id ) ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> error <identifiersep> format ( ) \n \t1 { \n \t2 <comment> \n <ect>
\t4 params . put ( <string_literal> , <string_literal> ) ; \n \t4 params . put ( <string_literal> , <string_literal> + src <identifiersep> nat <identifiersep> name + <string_literal> ) ; \n \t4 string response = request ( palo <identifiersep> alto <identifiersep> method . get , params ) ; \n \t4 boolean result = ( valid <identifiersep> response ( response ) && response <identifiersep> not <identifiersep> empty ( response ) ) ; \n <ect>
\t2 <comment> \n \t2 query <identifiersep> user = session <identifiersep> state . get <identifiersep> user <identifiersep> from <identifiersep> authenticator ( ) ; \n \t2 if ( query <identifiersep> user == null ) { \n \t2 query <identifiersep> user = user <identifiersep> group <identifiersep> information . get <identifiersep> current <identifiersep> user ( ) . get <identifiersep> user <identifiersep> name ( ) ; \n <ect>
\t4 . maximum <identifiersep> size ( max <identifiersep> cache <identifiersep> size ) \n \t4 . record <identifiersep> stats ( ) \n \t4 . expire <identifiersep> after <identifiersep> write ( expiration <identifiersep> time , time <identifiersep> unit . hours ) \n \t4 . build ( s - > { \n <ect>
\t1 try { \n \t2 result result = erx <identifiersep> runtime <identifiersep> utilities . execute ( watermark <identifiersep> commands , null , null , 0 ) ; \n \t2 int exit <identifiersep> value = result . get <identifiersep> exit <identifiersep> value ( ) ; \n \t2 if ( exit <identifiersep> value != 0 ) { \n <ect>
<comment> \n \t1 protected static list < string > get <identifiersep> supported <identifiersep> name <identifiersep> id <identifiersep> formats ( final saml <identifiersep> registered <identifiersep> service service , \n <number_literal> final saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade adaptor ) { \n \t2 final list < string > supported <identifiersep> name <identifiersep> formats = adaptor . get <identifiersep> supported <identifiersep> name <identifiersep> id <identifiersep> formats ( ) ; \n <ect>
\t5 return ; } \n \t4 try { \n \t5 log . info ( <string_literal> + port ) ; \n \t5 if ( ! connector . wait <identifiersep> until <identifiersep> idle ( <number_literal> ) ) { \n <ect>
\t5 list <identifiersep> multimap < static <identifiersep> buffer , entry > mutations = array <identifiersep> list <identifiersep> multimap . create ( ) ; \n \t5 for ( message <identifiersep> envelope env : msg <identifiersep> envelopes ) { \n \t6 mutations . put ( env . key , env . entry ) ; \n \t6 long ts = env . entry . get <identifiersep> column ( ) . get <identifiersep> long ( 0 ) ; \n <ect>
\t8 destroy <identifiersep> load <identifiersep> balancer <identifiersep> appliance <identifiersep> answer answer = null ; \n \t8 try { \n \t9 answer = ( destroy <identifiersep> load <identifiersep> balancer <identifiersep> appliance <identifiersep> answer )  <identifiersep> agent <identifiersep> mgr . easy <identifiersep> send ( lb <identifiersep> provider <identifiersep> device . get <identifiersep> host <identifiersep> id ( ) , lb <identifiersep> delete <identifiersep> cmd ) ; \n \t9 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t1 private final int socket <identifiersep> timeout <identifiersep> ms = <number_literal> ; \n \t1 private boolean network <identifiersep> connect ( ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 try { \n <ect>
\t6 quorum <identifiersep> base . shutdown ( peer ) ; \n \t6 flag = false ; \n \t6 round [ <number_literal> ] = 1 ; \n \t6 finish3 . release ( ) ; \n <ect>
\t3 final message m = new message ( ) . set <identifiersep> key ( key ) ; \n \t3 <comment> \n \t3 log . info ( m . to <identifiersep> string ( ) ) ; \n \t3 string message <identifiersep> id = producer . send <identifiersep> message ( m ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 2l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> size ( 0 ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 2l ) ) ; } \n <ect>
\t2 && src <identifiersep> content <identifiersep> summary . get <identifiersep> length ( ) > \n \t3 metastore <identifiersep> conf . get <identifiersep> long <identifiersep> var ( conf , conf <identifiersep> vars . repl <identifiersep> copyfile <identifiersep> maxsize ) ) { \n \t2 log . info ( <string_literal> + src <identifiersep> content <identifiersep> summary . get <identifiersep> length ( ) + <string_literal> + \n \t3 metastore <identifiersep> conf . get <identifiersep> long <identifiersep> var ( conf , conf <identifiersep> vars . repl <identifiersep> copyfile <identifiersep> maxsize ) + <string_literal> ) ; \n <ect>
\t2 error = false ; \n \t2 <comment> \n \t2 } catch ( final exception ex ) { \n \t2 error = true ; \n <ect>
\t5 try { \n \t6 final vm <identifiersep> instance vm = task . get <identifiersep> vm <identifiersep> instance ( ) ; \n \t6 if ( vm . get <identifiersep> runtime <identifiersep> state ( ) != null && <string_literal> . equals ( vm . get <identifiersep> runtime <identifiersep> state ( ) . get <identifiersep> guest <identifiersep> state ( ) ) ) { \n \t7 task . start <identifiersep> instance ( ) ; \n <ect>
\t3 init <identifiersep> sym <identifiersep> ciphers ( sym <identifiersep> algorithm , secret <identifiersep> key ) ; \n \t3 log . debug ( <string_literal> , local <identifiersep> addr , util . byte <identifiersep> array <identifiersep> to <identifiersep> hex <identifiersep> string ( sym <identifiersep> version ) ) ; \n \t3 stop <identifiersep> queueing ( ) ; } \n \t2 catch ( exception ex ) { \n <ect>
\t1 try { \n \t1 final http <identifiersep> headers headers = http <identifiersep> response . headers ( ) ; \n \t1 manager . put ( uri , maps . as <identifiersep> map ( headers . names ( ) , input - > headers . get <identifiersep> all ( input ) ) ) ; } \n \t1 catch ( io <identifiersep> exception e ) { \n <ect>
\t1 check <identifiersep> not <identifiersep> null ( root <identifiersep> artifact <identifiersep> classes <identifiersep> folder , <string_literal> ) ; \n \t1 file root <identifiersep> artifact <identifiersep> folder = root <identifiersep> artifact <identifiersep> classes <identifiersep> folder . get <identifiersep> parent <identifiersep> file ( ) . get <identifiersep> parent <identifiersep> file ( ) ; \n \t1 logger . debug ( <string_literal> , root <identifiersep> artifact <identifiersep> folder ) ; \n \t1 if ( ! contains <identifiersep> maven <identifiersep> project ( root <identifiersep> artifact <identifiersep> folder ) ) { \n <ect>
\t1 try { \n \t1 options = new import <identifiersep> tool ( ) . parse <identifiersep> arguments ( argv , \n \t2 null , options , true ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t7 events . add ( event ) ; } \n \t5 } else { \n \t6 logger . debug ( <string_literal> , predicate , value ) ; } \n \t4 } catch ( final exception e ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 return factory <identifiersep> class . new <identifiersep> instance ( ) ; } \n \t2 catch ( exception | linkage <identifiersep> error e ) { \n <ect>
\t1 if ( end <identifiersep> field != null ) { \n \t1 <comment> \n \t1 record <identifiersep> consumer . end <identifiersep> field ( end <identifiersep> field , end <identifiersep> index ) ; \n \t1 end <identifiersep> field = null ; } \n <ect>
\t3 string updated = coord <identifiersep> el <identifiersep> functions . eval <identifiersep> and <identifiersep> wrap ( eval , tag <identifiersep> elem . get <identifiersep> text ( ) ) ; \n \t3 tag <identifiersep> elem . remove <identifiersep> content ( ) ; \n \t3 tag <identifiersep> elem . add <identifiersep> content ( updated ) ; } \n \t2 else { \n <ect>
\t4 else \n \t5  <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , rtt ) ; } \n \t2 } else { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 if ( tokens . length == <number_literal> ) { \n \t4 s <identifiersep> logger . info ( <string_literal> + tokens [ 0 ] + <string_literal> + tokens [ 1 ] + <string_literal> ) ; \n \t4  <identifiersep> arg <identifiersep> map . put ( tokens [ 0 ] . trim ( ) , tokens [ 1 ] . trim ( ) ) ; \n \t3 } else { \n <ect>
\t2 fbo fbo = fbo <identifiersep> lookup . get ( fbo <identifiersep> name ) ; \n \t2 if ( fbo != null ) { \n \t3 fbo . bind <identifiersep> normals <identifiersep> texture ( ) ; \n \t3 return true ; } \n <ect>
\t4 if ( shard <identifiersep> routing . get <identifiersep> index <identifiersep> name ( ) . equals ( <string_literal> ) && shard <identifiersep> routing . shard <identifiersep> id ( ) . get <identifiersep> id ( ) == 0 ) { \n \t5 return byte <identifiersep> size ; } \n \t4 return null ; } \n \t2 } ) ; \n <ect>
\t1 try { \n \t2 log . debug ( <string_literal> , hostname ) ; \n \t2 host <identifiersep> object . handle <identifiersep> event ( new host <identifiersep> status <identifiersep> updates <identifiersep> received <identifiersep> event ( hostname , now ) ) ; \n \t1 } catch ( invalid <identifiersep> state <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t10 map < long , double > time <identifiersep> slice <identifiersep> value <identifiersep> map ) { \n \t1 for ( pattern pattern : skip <identifiersep> interpolation <identifiersep> metric <identifiersep> patterns ) { \n \t1 matcher m = pattern . matcher ( timeline <identifiersep> metric . get <identifiersep> metric <identifiersep> name ( ) ) ; \n \t1 if ( m . matches ( ) ) { \n <ect>
\t2 try { \n \t3 if ( super . find <identifiersep> session ( id ) != null ) \n \t4 return true ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( this . global <identifiersep> failure <identifiersep> mode ) ) { \n \t3 failure <identifiersep> mode = registered <identifiersep> service <identifiersep> multifactor <identifiersep> policy . failure <identifiersep> modes . value <identifiersep> of ( this . global <identifiersep> failure <identifiersep> mode ) ; \n \t3 logger . debug ( <string_literal> , service , failure <identifiersep> mode ) ; } \n \t2 if ( service != null ) { \n <ect>
\t3 engine <identifiersep> subsystem subsystem = shutdown <identifiersep> iter . next ( ) ; \n \t3 try { \n \t4 subsystem . shutdown ( ) ; \n \t3 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t5 } catch ( illegal <identifiersep> access <identifiersep> exception ex ) { \n \t6 log . error ( ex ) ; } } \n \t4 system . out . print ( <string_literal> ) ; } \n \t2 } finally { \n <ect>
\t5 test <identifiersep> consumer . set <identifiersep> message <identifiersep> listener ( new message <identifiersep> listener ( ) { \n \t8 @ override \n \t8 public void on <identifiersep> message ( message message ) { \n \t9 try { \n <ect>
\t1 if ( ! dest <identifiersep> table <identifiersep> is <identifiersep> materialization && \n \t2 hive <identifiersep> conf . get <identifiersep> var ( conf , hivestatsdbclass ) . equals <identifiersep> ignore <identifiersep> case ( stat <identifiersep> db . fs . name ( ) ) ) { \n \t1 string stats <identifiersep> tmp <identifiersep> loc = ctx . get <identifiersep> temp <identifiersep> dir <identifiersep> for <identifiersep> interim <identifiersep> job <identifiersep> path ( dest <identifiersep> path ) . to <identifiersep> string ( ) ; \n \t1 file <identifiersep> sink <identifiersep> desc . set <identifiersep> stats <identifiersep> tmp <identifiersep> dir ( stats <identifiersep> tmp <identifiersep> loc ) ; \n <ect>
\t4 break \n \t1 else : \n \t2 logger . error ( 'ambari admin user creation failed' ) \n \t1 elif not self . skip <identifiersep> if <identifiersep> rangeradmin <identifiersep> down : \n <ect>
\t2 final registered <identifiersep> service service = resolve <identifiersep> registered <identifiersep> service <identifiersep> in <identifiersep> request <identifiersep> context ( context ) ; \n \t2 final authentication authentication = web <identifiersep> utils . get <identifiersep> authentication ( context ) ; \n \t2 final http <identifiersep> servlet <identifiersep> request request = web <identifiersep> utils . get <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> from <identifiersep> external <identifiersep> webflow <identifiersep> context ( context ) ; \n \t2 if ( service == null || authentication == null ) { \n <ect>
\t2 bf . file . write <identifiersep> int ( span <identifiersep> page ) ; } \n \t1 @ override \n \t1 public void flush ( ) { \n \t2 if ( is <identifiersep> killed ) { \n <ect>
\t3 cluster . describe <identifiersep> cluster <identifiersep> name ( ) ; \n \t3 list < keyspace <identifiersep> definition > keyspaces = cluster . describe <identifiersep> keyspaces ( ) ; \n \t3 log . info ( <string_literal> + keyspaces . size ( ) ) ; \n \t3 for ( keyspace <identifiersep> definition keyspace : keyspaces ) { \n <ect>
\t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + interphace . get <identifiersep> name ( ) ) ; } \n \t3 info . name = get <identifiersep> attribute ( atts , <string_literal> ) ; \n \t3 if ( info . name == null ) { \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + interphace . get <identifiersep> name ( ) ) ; } \n <ect>
\t1 public long length ( ) { \n \t2 try { \n \t3 return binary . get <identifiersep> size ( ) ; \n \t2 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t3 result . tnase = ( org . apache . accumulo . core . client . impl . thrift . thrift <identifiersep> not <identifiersep> active <identifiersep> service <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> tnase <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t4 clazz . get <identifiersep> annotation ( class <identifiersep> of [ table <identifiersep> type ] ) \n \t3 val table <identifiersep> type = table <identifiersep> type <identifiersep> annotation . value ( ) \n \t3 val converter <identifiersep> clazz = clazz . as <identifiersep> instance <identifiersep> of [ class [  <identifiersep>  < : table <identifiersep> source <identifiersep> converter [  <identifiersep>  ] ] ] \n \t3 registered <identifiersep> converters . add <identifiersep> binding ( table <identifiersep> type , converter <identifiersep> clazz ) \n <ect>
\t4 log . error ( <string_literal> , name ( ) ) ; \n \t4 try { \n \t5 thread . sleep ( <number_literal> ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 return ; } \n \t3 if ( out <identifiersep> queue . size ( ) >= max <identifiersep> queue <identifiersep> length ) { \n \t4 if ( never <identifiersep> drop <identifiersep> a <identifiersep> message ) { \n <ect>
\t4 . set <identifiersep> user ( user ) \n \t4 . set <identifiersep> password ( password ) \n \t4 . set <identifiersep> locale ( locale . get <identifiersep> default ( ) ) \n \t4 . set <identifiersep> time <identifiersep> zone ( time <identifiersep> zone . get <identifiersep> default ( ) ) ; \n <ect>
\t1 pass \n def disable <identifiersep> security ( self , env ) : \n \t1 import params \n \t1 if not params . stack <identifiersep> supports <identifiersep> zk <identifiersep> security : \n <ect>
\t3 image <identifiersep> input <identifiersep> stream iis = image <identifiersep> io . create <identifiersep> image <identifiersep> input <identifiersep> stream ( new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( image ) ) ; \n \t3 logger . debug ( <string_literal> , iis . length ( ) ) ; \n \t3 iterator < image <identifiersep> reader > image <identifiersep> readers = image <identifiersep> io . get <identifiersep> image <identifiersep> readers ( iis ) ; \n \t3 if ( ! image <identifiersep> readers . has <identifiersep> next ( ) ) { \n <ect>
\t2 ) ; \n \t2 ensure <identifiersep> green ( <string_literal> ) ; \n \t2 cluster <identifiersep> state state = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . get ( ) . get <identifiersep> state ( ) ; \n \t2 index index = state . meta <identifiersep> data ( ) . index ( <string_literal> ) . get <identifiersep> index ( ) ; \n <ect>
\t7 cause = t . to <identifiersep> string ( ) ; } \n \t6 msg = msg + <string_literal> + cause ; } \n \t5 j <identifiersep> meter <identifiersep> utils . report <identifiersep> error <identifiersep> to <identifiersep> user ( msg ) ; \n \t4 } catch ( exception err ) { \n <ect>
\t4 outbound <identifiersep> establish <identifiersep> state state = iter . next ( ) ; \n \t4 if ( state . get <identifiersep> lifetime ( ) > <number_literal> * max <identifiersep> ob <identifiersep> establish <identifiersep> time ) { \n \t5 iter . remove ( ) ; \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 try { \n \t4 lo <identifiersep> dev <identifiersep> name = create <identifiersep> loopback ( raw <identifiersep> file <identifiersep> name ) ; \n \t4 lvm <identifiersep> volume <identifiersep> info . set <identifiersep> lo <identifiersep> dev <identifiersep> name ( lo <identifiersep> dev <identifiersep> name ) ; \n \t3 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception ex ) { \n <ect>
\t4 text . set ( next <identifiersep> token . to <identifiersep> string ( ) ) ; \n \t4 ++ total <identifiersep> matches ; \n \t4 return true ; \n <ect>
\t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n \t1 log . error ( <string_literal> , ex ) ; \n \t1 throw ex ; \n \t1 } catch ( exception ex ) { \n <ect>
\t6 logger . warn ( <string_literal> , get <identifiersep> uuid ( ) ) ; } \n \t4 } else { \n \t5 logger . warn ( <string_literal> , get <identifiersep> uuid ( ) , node . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; } \n \t3 } else { \n <ect>
\t2 return ( reader <identifiersep> uses == count && writer <identifiersep> uses == count ) ? <number_literal> : <number_literal> ; } \n \t1 @ get \n \t1 @ path ( <string_literal> ) \n \t1 public void reset ( ) { \n <ect>
\t1 } else { \n \t1 return false ; } } \n private static void release <identifiersep> restricted <identifiersep> op ( string . . . command ) { \n \t1 concurrent <identifiersep> ops . release ( ) ; \n <ect>
\t1 thread . sleep ( <number_literal> ) ; \n \t1 num ++ ; } \n \t1 <comment> \n \t1 thread . sleep ( <number_literal> ) ; \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> dest1deletion ( ) throws exception { \n \t2 log . info ( <string_literal> , dest1 , dest2 ) ; \n <ect>
\t4 key . attach ( null ) ; \n \t4 key . cancel ( ) ; } \n \t2 } catch ( io <identifiersep> exception ignore ) { \n <ect>
\t2 } else { } \n \t2 return null ; } \n \t1 } ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 log . info ( <string_literal> + entry . get <identifiersep> key ( ) ) ; \n \t2 try { \n \t2 wal <identifiersep> marker . forget ( entry . get <identifiersep> key ( ) ) ; \n \t2 } catch ( wal <identifiersep> marker <identifiersep> exception ex ) { \n <ect>
\t3 if ( chk <identifiersep> sum == build <identifiersep> check <identifiersep> sum ( answer , 1 , answer . length - 1 ) ) { \n \t4 if ( command . name ( ) . equals ( to <identifiersep> string ( answer , 1 , <number_literal> ) ) ) { \n \t5 return to <identifiersep> string ( answer , <number_literal> , answer . length - <number_literal> ) ; \n \t4 } else { \n <ect>
<comment> \n \t1 public boolean check <identifiersep> service <identifiersep> valid ( final registered <identifiersep> service registered <identifiersep> service ) { \n \t2 if ( registered <identifiersep> service == null ) { \n <ect>
\t5 log . warn ( <string_literal> , name , descriptor . get <identifiersep> property <identifiersep> type ( ) , \n \t7 bean <identifiersep> info . get <identifiersep> bean <identifiersep> descriptor ( ) . get <identifiersep> display <identifiersep> name ( ) ) ; } \n \t4 editors [ i ] = null ; \n \t4 continue ; } \n <ect>
\t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 t . send <identifiersep> response <identifiersep> headers ( <number_literal> , - 1 ) ; \t2 <comment> \n \t2 } catch ( throwable e ) { \n <ect>
\t3 synchronized (  <identifiersep> interests ) { \n \t4  <identifiersep> interests . put ( interest . name ( ) , interest ) ; } \n \t2 return interest ; } \n \t1 public void stop ( ) { \n <ect>
\t1 public void stop <identifiersep> thrift <identifiersep> client ( ) throws exception { \n \t2 if ( transport != null ) { \n \t3 transport . close ( ) ; \n \t3 transport = null ; \n <ect>
\t4 if ( server . is <identifiersep> registered ( name ) ) \n \t5 jmx <identifiersep> utils . unregister <identifiersep> mbean ( server , name ) ; \n \t4 server . register <identifiersep> m <identifiersep> bean ( mbean , name ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 throws uri <identifiersep> syntax <identifiersep> exception , storage <identifiersep> exception { \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t1 if ( ostream != null ) { \n \t2 log . debug ( <string_literal> , file <identifiersep> to <identifiersep> lock , lock <identifiersep> file , spout <identifiersep> id ) ; \n \t2 return new file <identifiersep> lock ( fs , lock <identifiersep> file , ostream , spout <identifiersep> id ) ; \n \t1 } else { \n <ect>
\t1 protected node <identifiersep> state <identifiersep> entry compute <identifiersep> next ( ) { \n \t2 <comment> \n \t2 current = compute <identifiersep> next <identifiersep> entry ( ) ; \n \t2 if ( current == null ) { \n <ect>
\t7 last <identifiersep> was <identifiersep> dupe = false ; } } \n \t5 last <identifiersep> filepath = current <identifiersep> filepath ; \n \t5 last <identifiersep> file = file ; \n \t4 } catch ( class <identifiersep> cast <identifiersep> exception cce ) { \n <ect>
\t2 orc <identifiersep> codec <identifiersep> pool . return <identifiersep> codec ( kind , codec ) ; \n \t2 } else { \n \t2 codec . close ( ) ; } \n \t1 } catch ( exception ex ) { \n <ect>
\t2 if ( ! eq ) \n \t3 throw new i2np <identifiersep> message <identifiersep> exception ( <string_literal> + size + <string_literal> + get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t2 <comment> \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 include <identifiersep> region = ! include <identifiersep> region ; } \n \t2 return active ; } \n \t1 @ test ( enabled = true && ! debug , data <identifiersep> provider = <string_literal> ) \n \t1 public void test <identifiersep> art <identifiersep> reads <identifiersep> in <identifiersep> active <identifiersep> regions ( final traverse <identifiersep> active <identifiersep> regions < integer , integer > traversal , final int id , final genome <identifiersep> loc <identifiersep> sorted <identifiersep> set active <identifiersep> regions , final enum <identifiersep> set < active <identifiersep> region <identifiersep> read <identifiersep> state > read <identifiersep> states , final artificial <identifiersep> bam <identifiersep> builder bam <identifiersep> builder ) { \n <ect>
\t1 public void dispatch <identifiersep> rule ( tree <identifiersep> mapper <identifiersep> path <identifiersep> reference t ) { \n \t2 if ( ( t != null ) && ( bundle != null ) && ( processor != null ) ) { \n \t3 processor . process <identifiersep> bundle ( bundle , t ) ; \n \t2 } else if ( debug > 0 ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + mbean . get <identifiersep> name ( ) , e ) ; \n \t2 } catch ( instance <identifiersep> already <identifiersep> exists <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + mbean . get <identifiersep> name ( ) , e ) ; \n \t2 } catch ( m <identifiersep> bean <identifiersep> registration <identifiersep> exception e ) { \n <ect>
\t1 protected void error ( throwable e , string msg ) { \n \t2 errors <identifiersep>  += <string_literal> ; \n \t2 if ( null != e ) { \n \t3 errors <identifiersep>  += e . to <identifiersep> string ( ) + <string_literal> ; \n <ect>
\t7 string property <identifiersep> name = from <identifiersep> header <identifiersep> name ( header <identifiersep> name ) ; \n \t7 jms <identifiersep> message . set <identifiersep> object <identifiersep> property ( property <identifiersep> name , value . to <identifiersep> string ( ) ) ; } } } } } \n \t2 catch ( exception e ) { \n <ect>
\t3 logger . debug ( indent ( node . depth ) + <string_literal> + node . get <identifiersep> children ( ) . size ( ) ) ; \n \t3 val = minimax <identifiersep> ab ( node , alpha , beta ) ; } \n \t2 else { \n <ect>
\t2 client client = client ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> acked ( client . admin ( ) . cluster ( ) . prepare <identifiersep> put <identifiersep> repository ( <string_literal> ) \n \t4 . set <identifiersep> type ( <string_literal> ) . set <identifiersep> settings ( settings . builder ( ) . put ( <string_literal> , random <identifiersep> repo <identifiersep> path ( ) ) ) ) ; \n <ect>
\t5 protocol <identifiersep> provider <identifiersep> factory . class . get <identifiersep> name ( ) , \n \t5 sip <identifiersep> provider <identifiersep> factory , \n \t5 properties ) ; \n <ect>
\t3 if ( ( any = any . next ) == edge ) { \n \t4 break ; } } \n \t2 double shift <identifiersep> offset = any . coordinate . x > dateline ? dateline : ( any . coordinate . x < - dateline ? - dateline : 0 ) ; \n \t2 if ( debug <identifiersep> enabled ( ) ) { \n <ect>
\t2 list < network <identifiersep> vo > db <identifiersep> nets = controller . get <identifiersep> network <identifiersep> dao ( ) . search ( sc , null ) ; \n \t2 if ( db <identifiersep> nets == null || db <identifiersep> nets . size ( ) == 0 ) { \n \t3 return null ; } \n \t2 if ( db <identifiersep> nets . size ( ) > 1 ) { \n <ect>
\t2 { \n \t3 log <identifiersep> packet ( message , sender ) ; } \n \t2 catch ( throwable e ) \n \t2 { \n <ect>
\t9 . build ( ) ; \n \t7 try { \n \t8 sched . schedule <identifiersep> job ( job , trigger ) ; \n \t7 } catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t4 apps . add ( app ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 get <identifiersep> blob <identifiersep> request <identifiersep> handler ( standby <identifiersep> blob <identifiersep> reader reader ) { \n \t2 this . reader = reader ; } \n \t1 @ override \n \t1 protected void channel <identifiersep> read0 ( channel <identifiersep> handler <identifiersep> context ctx , get <identifiersep> blob <identifiersep> request msg ) throws exception { \n <ect>
<comment> \n \t1 protected void listen ( ) throws exception { \n \t2 if ( do <identifiersep> listen ( ) ) { \n <ect>
\t3 for ( int i = 0 ; i <  <identifiersep> queue . size ( ) ; i ++ ) { \n \t4 pending <identifiersep> gateway <identifiersep> message m =  <identifiersep> queue . get ( i ) ; \n \t4 if ( m . get <identifiersep> expiration ( ) + router . clock <identifiersep> fudge <identifiersep> factor <  <identifiersep> last <identifiersep> flush ) { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 @ override public void run ( ) { \n \t2 try { \n \t3 closeable . close ( ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t1 public void prepare ( map storm <identifiersep> conf , topology <identifiersep> context context ) { \n \t2 this . conf = storm <identifiersep> conf ; \n \t2 int timeout <identifiersep> seconds = j <identifiersep> storm <identifiersep> utils . parse <identifiersep> int ( conf . get ( config . topology <identifiersep> message <identifiersep> timeout <identifiersep> secs ) , <number_literal> ) ; \n \t2 counters = new time <identifiersep> cache <identifiersep> map < > ( timeout <identifiersep> seconds ) ; \n <ect>
\t2 s = set . lower <identifiersep> compatible ( <string_literal> ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> + s ) ; \n \t2 assert . assert <identifiersep> true ( <string_literal> . equals ( s ) ) ; \t2 \n \t2 s = set . lower <identifiersep> compatible ( <string_literal> ) ; \n <ect>
\t5 opponent . append ( m <identifiersep> player . get <identifiersep> name ( ) ) ; } } \n \t3 server <identifiersep> messages <identifiersep> util . instance . inc <identifiersep> games <identifiersep> started ( ) ; \n \t3 <comment> \n \t3 logger . info ( <string_literal> + ( match . get <identifiersep> game ( ) != null ? match . get <identifiersep> game ( ) . get <identifiersep> id ( ) : <string_literal> ) + <string_literal> + match . get <identifiersep> name ( ) + <string_literal> + creator + <string_literal> + opponent . to <identifiersep> string ( ) ) ; \n <ect>
\t6 break ; } } } } \n \t2 long t <identifiersep> end = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 if ( t <identifiersep> end - now > <number_literal> ) { \n \t3 if ( t <identifiersep> end - now > <number_literal> ) \n <ect>
\t3 if ( thread . state . blocked . equals ( thread <identifiersep> info . get <identifiersep> thread <identifiersep> state ( ) ) ) { \n \t4 log . error ( <string_literal> , thread <identifiersep> info ) ; \n \t3 } else { \n \t4 log . info ( <string_literal> , thread <identifiersep> info ) ; } \n <ect>
<comment> \n \t1 @ override \n \t1 protected void internal <identifiersep> receive <identifiersep> command ( string item <identifiersep> name , command command ) { \n <ect>
\t1 <comment> \n \t1 void default <identifiersep> handler ( string subject , string topic , org . apache . cloudstack . framework . events . event event ) { \n \t2 s <identifiersep> logger . debug ( <string_literal> + subject + <string_literal> + topic ) ; \n \t2 s <identifiersep> logger . debug ( <string_literal> + event . get <identifiersep> description ( ) ) ; \n <ect>
\t2 try { \n \t3 set <identifiersep> stores <identifiersep> lower <identifiersep> case <identifiersep> identifiers ( database <identifiersep> meta <identifiersep> data . stores <identifiersep> lower <identifiersep> case <identifiersep> identifiers ( ) ) ; } \n \t2 catch ( sql <identifiersep> exception ex ) { \n <ect>
\t2 } else if ( core instanceof status <identifiersep> task <identifiersep> replica ) { \n \t3 status <identifiersep> task <identifiersep> replica replica = ( status <identifiersep> task <identifiersep> replica ) core ; \n \t3 job = get <identifiersep> job ( replica . get <identifiersep> job <identifiersep> uuid ( ) ) ; \n \t3 if ( job == null ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + mbean . get <identifiersep> name ( ) , e ) ; \n \t2 } catch ( m <identifiersep> bean <identifiersep> registration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + mbean . get <identifiersep> name ( ) , e ) ; \n \t2 } catch ( not <identifiersep> compliant <identifiersep> m <identifiersep> bean <identifiersep> exception e ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t4 if ( this . pool . pool <identifiersep> shutting <identifiersep> down ) { \n \t5 break ; } \n \t4 this . partition . add <identifiersep> free <identifiersep> connection ( new connection <identifiersep> handle ( null , this . partition , this . pool , false ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( triple . get <identifiersep> object ( ) instanceof rdf <identifiersep> resource <identifiersep> iri ) { \n \t3 try { \n \t4 object = vf . create <identifiersep> iri ( triple . get <identifiersep> object ( ) . get <identifiersep> iri ( ) . to <identifiersep> string ( ) ) ; \n \t3 } catch ( @ suppress <identifiersep> warnings ( <string_literal> ) illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t1 public faceted <identifiersep> world <identifiersep> configurator ( list < configurable <identifiersep> facet <identifiersep> provider > providers <identifiersep> list ) { \n \t2 for ( configurable <identifiersep> facet <identifiersep> provider provider : providers <identifiersep> list ) { \n \t3 component old = properties . put ( provider . get <identifiersep> configuration <identifiersep> name ( ) , provider . get <identifiersep> configuration ( ) ) ; \n \t3 if ( old != null ) { \n <ect>
\t2 <comment> \n \t2 logger . info ( <string_literal> ) ; \n \t2 mary <identifiersep> data result = new mary <identifiersep> data ( output <identifiersep> type ( ) , d . get <identifiersep> locale ( ) ) ; \n \t2 result . read <identifiersep> from ( from ( ) , output <identifiersep> type ( ) . end <identifiersep> marker ( ) ) ; \n <ect>
\t2 if ( profile <identifiersep> path != null ) { \n \t3 if ( ! file <identifiersep> util . is <identifiersep> valid <identifiersep> file <identifiersep> name ( profile <identifiersep> path . get <identifiersep> name ( ) ) ) { \n \t4 logger . warn ( <string_literal> ) ; \n \t3 } else if ( ! profile <identifiersep> path . exists ( ) ) { \n <ect>
\t2 try { \n \t3 logger . debug ( <string_literal> + model <identifiersep> request . get <identifiersep> model <identifiersep> desc <identifiersep> data ( ) ) ; \n \t3 desc = json <identifiersep> util . read <identifiersep> value ( model <identifiersep> request . get <identifiersep> model <identifiersep> desc <identifiersep> data ( ) , data <identifiersep> model <identifiersep> desc . class ) ; \n \t2 } catch ( json <identifiersep> parse <identifiersep> exception e ) { \n <ect>
\t4 if ( ( tmp <identifiersep> value . length > 0 ) ) { \n \t5 do <identifiersep> expr <identifiersep> override = true ; \n \t5 fake <identifiersep> params . put ( full <identifiersep> field <identifiersep> name , escape ( tmp <identifiersep> value [ 0 ] ) ) ; \n \t4 } else { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t6 . get <identifiersep> callback <identifiersep> token ( ) ) ; \n \t4 callback <identifiersep> url = o <identifiersep> auth . add <identifiersep> parameters ( callback <identifiersep> url , o <identifiersep> auth . oauth <identifiersep> token , current <identifiersep> entry . get <identifiersep> token ( ) ) ; } \n \t3 catch ( io <identifiersep> exception ioe ) \n \t3 { \n <ect>
\t3 velocity <identifiersep> manager velocity <identifiersep> manager = utils . get <identifiersep> component ( velocity <identifiersep> manager . class ) ; \n \t3 velocity <identifiersep> manager . get <identifiersep> velocity <identifiersep> engine ( ) . evaluate ( vcontext , writer , name , content ) ; \n \t3 return writer . to <identifiersep> string ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 string filename = cl . get <identifiersep> name ( ) . replace ( ' . ' , ' / ' ) + <string_literal> ; \n \t2 input <identifiersep> stream in = null ; \n <ect>
\t4 if ( rollback <identifiersep> exception == null ) { \n \t5 rollback <identifiersep> exception = ex ; \n \t5 rollback <identifiersep> exception <identifiersep> transaction <identifiersep> manager = transaction <identifiersep> manager ; \n \t4 } else { \n <ect>
\t2 if ( log != null ) log . info ( <string_literal> , msg ) ; } \n \t1 public static void error ( log log , string msg ) { \n \t2 if ( log != null ) log . error ( <string_literal> , msg ) ; } \n \t1 public static void error ( log log , throwable t ) { \n <ect>
\t4 modification <identifiersep> queue . delete ( user , relationship , passive ) ; \n \t3 } else { \n \t4 logger . error ( <string_literal> ) ; } \n \t2 } else { \n <ect>
\t2 try { \n \t3 connector . connect ( ) ; \n \t3 return connector . set <identifiersep> param ( param , value ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> , \n \t6 transformation <identifiersep> type ) ; \n \t4 return item ; } \n \t2 } catch ( transformation <identifiersep> exception te ) { \n <ect>
\t2 return false ; } \n \t1 private void add <identifiersep> idp <identifiersep> to <identifiersep> map ( entity <identifiersep> descriptor descriptor , map < string , saml <identifiersep> provider <identifiersep> metadata > idp <identifiersep> map ) { \n \t2 saml <identifiersep> provider <identifiersep> metadata idp <identifiersep> metadata = new saml <identifiersep> provider <identifiersep> metadata ( ) ; \n \t2 idp <identifiersep> metadata . set <identifiersep> entity <identifiersep> id ( descriptor . get <identifiersep> entity <identifiersep> id ( ) ) ; \n <ect>
\t2 boolean test <identifiersep> template = random <identifiersep> boolean ( ) ; \n \t2 boolean test <identifiersep> pipeline = random <identifiersep> boolean ( ) ; \n \t2 boolean test <identifiersep> script = ( test <identifiersep> template == false && test <identifiersep> pipeline == false ) || random <identifiersep> boolean ( ) ; <comment> \n \t2 if ( test <identifiersep> template ) { \n <ect>
\t4 string topic = decorate <identifiersep> topic ( record . get <identifiersep> type ( ) ) ; \n \t4 if ( ! check <identifiersep> available ( topic ) ) { \n \t5 if ( n <identifiersep> record <identifiersep> skip % max <identifiersep> record <identifiersep> skip <identifiersep> for <identifiersep> log <identifiersep> num == 0 ) { \n \t6 n <identifiersep> record <identifiersep> skip = 0 ; \n <ect>
\t5 connector <identifiersep> thread . send <identifiersep> io ( io <identifiersep> nr , new <identifiersep> state <identifiersep> boolean ) ; } \n \t3 } else { \n \t4 logger . warn ( <string_literal> + cmd . name ( ) + <string_literal> + command ) ; } \n \t2 } else { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t6 logger . info ( <string_literal> ) ; } \n \t4 } ; } \n \t3 @ override \n \t3 public < a extends basic <identifiersep> file <identifiersep> attributes > a read <identifiersep> attributes ( path path , class < a > type , link <identifiersep> option . . . options ) throws io <identifiersep> exception { \n <ect>
\t6 if ( recursive <identifiersep> parser <identifiersep> expression <identifiersep> verifier ( second <identifiersep> part , new parsed <identifiersep> word [ 0 ] , cb ) ) { \n \t7 if ( log <identifiersep> debug ) logger . debug ( this , <string_literal> + second <identifiersep> part ) ; \n \t7 return true ; \n \t6 } else { \n <ect>
\t3 throwable cause = exception ; \n \t3 while ( cause != null && cause instanceof io <identifiersep> exception ) { \n \t4 string message = cause . get <identifiersep> message ( ) ; \n \t4 if ( message != null && message . contains ( no <identifiersep> space <identifiersep> message ) ) { \n <ect>
\t2 <comment> \n \t2 string user <identifiersep> id =  <identifiersep> user <identifiersep> id . get ( ) . to <identifiersep> string ( ) ; \n \t2 string encoded <identifiersep> user <identifiersep> id = url <identifiersep> encoder . encode ( user <identifiersep> id , <string_literal> ) ; \n \t2 string url = server + <string_literal> + encoded <identifiersep> user <identifiersep> id ; \n <ect>
\t3 log . debug ( config <identifiersep> info ( <string_literal> , loc <identifiersep> port <identifiersep> range ) ) ; \n \t3 log . debug ( config <identifiersep> info ( <string_literal> , idle <identifiersep> conn <identifiersep> timeout ) ) ; \n \t3 log . debug ( config <identifiersep> info ( <string_literal> , direct <identifiersep> buf ) ) ; \n \t3 log . debug ( config <identifiersep> info ( <string_literal> , direct <identifiersep> snd <identifiersep> buf ) ) ; \n <ect>
\t2 test <identifiersep> no <identifiersep> override <identifiersep> browser ( client <identifiersep> id ) ; } \n \t1 private void test <identifiersep> no <identifiersep> override <identifiersep> browser ( string client <identifiersep> id ) { \n \t2 oauth . client <identifiersep> id ( client <identifiersep> id ) ; \n \t2 string login <identifiersep> form <identifiersep> url = oauth . get <identifiersep> login <identifiersep> form <identifiersep> url ( ) ; \n <ect>
\t4 system . out . println ( <string_literal> + doi . scheme \n \t9 + doi <identifiersep> row . get <identifiersep> doi ( ) + <string_literal> ) ; } \n \t2 } catch ( identifier <identifiersep> exception ex ) { \n \t3 if ( ! ( ex instanceof doi <identifiersep> identifier <identifiersep> exception ) ) { \n <ect>
\t1 try { \n \t2 mark <identifiersep> snapshot <identifiersep> failed ( ) ; \n \t2 log . debug ( <string_literal> + this . snapshot <identifiersep> id + <string_literal> ) ; \n \t1 } catch ( transaction <identifiersep> exception | no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t1 migrationresult . set <identifiersep> jobtype ( <string_literal> ) ; \n \t1 migrationresult . set <identifiersep> total <identifiersep> time <identifiersep> taken ( string . value <identifiersep> of ( elapsed <identifiersep> time ) ) ; \n \t1 get <identifiersep> resource <identifiersep> manager ( view ) . update ( migrationresult , jobid ) ; \n \t1 logger . info ( <string_literal> ) ; \n <ect>
\t6 snapshot <identifiersep> srv . process <identifiersep> event <identifiersep> on <identifiersep> snapshot <identifiersep> object ( snapshot , snapshot . event . operation <identifiersep> failed ) ; \n \t6  <identifiersep> snapshot <identifiersep> details <identifiersep> dao . remove <identifiersep> detail ( snapshot <identifiersep> details <identifiersep> vo . get <identifiersep> resource <identifiersep> id ( ) , async <identifiersep> job . constants . ms <identifiersep> id ) ; } } \n \t3 } ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t3 if ( <string_literal> . equals ( args [ cur <identifiersep> idx ++ ] ) ) { \n \t4 local <identifiersep> coprocessor <identifiersep> jar = kylin <identifiersep> config . get <identifiersep> coprocessor <identifiersep> local <identifiersep> jar ( ) ; \n \t3 } else { \n \t4 local <identifiersep> coprocessor <identifiersep> jar = new file ( args [ cur <identifiersep> idx ++ ] ) . get <identifiersep> absolute <identifiersep> path ( ) ; } \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> dest1deletion ( ) throws exception { \n <ect>
\t1 public void kill <identifiersep> process ( ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 string pid = get <identifiersep> pid ( ) ; \n \t2 if ( check <identifiersep> process ( pid ) ) { \n <ect>
\t3 remove <identifiersep> property <identifiersep> result result = new remove <identifiersep> property <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t1 logger . info ( <string_literal> ) \n \t1 return \n json <identifiersep> version = load <identifiersep> version ( struct <identifiersep> out <identifiersep> file ) \n if not json <identifiersep> version : \n <ect>
\t2 document doc = null ; \n \t2 try { \n \t3 doc = document <identifiersep> builder <identifiersep> factory . new <identifiersep> instance ( ) . new <identifiersep> document <identifiersep> builder ( ) . parse ( stats <identifiersep> source ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 start <identifiersep> stopwatch ( ) ; \n \t2 assert <identifiersep> parameter ( cred != null , <string_literal> ) ; \n \t3 log . debug ( config <identifiersep> info ( <string_literal> , cred ) ) ; \n <ect>
\t1 boolean valid = false ; \n \t1 if ( jws <identifiersep> object . state . signed == jwt <identifiersep> token . get <identifiersep> state ( ) ) { \n \t1 log . debug ( <string_literal> ) ; \n \t1 if ( jwt <identifiersep> token . get <identifiersep> signature ( ) != null ) { \n <ect>
\t3 context . get <identifiersep> ssk <identifiersep> fetch <identifiersep> scheduler ( real <identifiersep> time <identifiersep> flag ) . register ( null , new sendable <identifiersep> get [ ] { running <identifiersep> store <identifiersep> checker } , false , null , false ) ; \n \t2 } catch ( throwable t ) { \n \t3 synchronized ( this ) { \n \t4 running <identifiersep> store <identifiersep> checker = null ; } \n <ect>
\t6 for ( final string module : licensed <identifiersep> modules . split ( <string_literal> ) ) { \n \t7 modules . add ( module . trim ( ) ) ; } } } } } \n \t2 logger . info ( <string_literal> , edition , all <identifiersep> modules <identifiersep> licensed ? <string_literal> : <string_literal> + modules . to <identifiersep> string ( ) ) ; \n \t2 if ( licensee != null ) { \n <ect>
\t4 opennet . purge <identifiersep> old <identifiersep> opennet <identifiersep> peer ( opn ) ; } \n \t3 <comment> \n \t2 if ( ( ! dont <identifiersep> want ) && ! crypto . allow <identifiersep> connection ( pn , reply <identifiersep> to . get <identifiersep> freenet <identifiersep> address ( ) ) ) { \n \t3 if ( pn instanceof darknet <identifiersep> peer <identifiersep> node ) { \n <ect>
\t2 verify <identifiersep> consistency ( db <identifiersep> session ) ; } } } \n private void clean <identifiersep> on <identifiersep> upgrade ( ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t4 if ( ! up . add <identifiersep> key ( pubkey , signer ) ) { \n \t5 <comment> \n \t5 f . delete ( ) ; \n \t5 to . delete ( ) ; \n <ect>
\t3 change <identifiersep> local <identifiersep> user <identifiersep> password <identifiersep> result result = new change <identifiersep> local <identifiersep> user <identifiersep> password <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t4 if ( servername . ends <identifiersep> with ( domain ) ) { \n \t5 cookie <identifiersep> domain = domain ; \n \t5 break ; } } } \n <ect>
\t2 optimize ( game , all <identifiersep> actions ) ; \n \t4 && ! all <identifiersep> actions . is <identifiersep> empty ( ) \n \t4 && depth == max <identifiersep> depth ) { \n <ect>
\t2 grid <identifiersep> closure < v , v > transform <identifiersep> c , long dr <identifiersep> ttl , long dr <identifiersep> expire <identifiersep> time , @ nullable grid <identifiersep> cache <identifiersep> version dr <identifiersep> ver , long ttl ) { \n \t2 long top <identifiersep> ver = update <identifiersep> req . topology <identifiersep> version ( ) ; \n \t2 collection < grid <identifiersep> node > dht <identifiersep> nodes = cctx . dht ( ) . topology ( ) . nodes ( entry . partition ( ) , top <identifiersep> ver ) ; \n <ect>
\t1 private boolean is <identifiersep> target <identifiersep> initialized ( ) { \n \t2 return target <identifiersep> node <identifiersep> store . get <identifiersep> root ( ) . has <identifiersep> child <identifiersep> node ( <string_literal> ) ; } \n \t1 public void migrate ( ) throws io <identifiersep> exception , commit <identifiersep> failed <identifiersep> exception { \n \t2 if ( is <identifiersep> target <identifiersep> initialized ( ) ) { \n <ect>
<comment> \n \t1 public boolean is <identifiersep> connected ( ) { \n \t2 return connection . get <identifiersep> socket ( ) != null && ! connection . get <identifiersep> socket ( ) . is <identifiersep> closed ( ) ; } \n \t1 private void notify <identifiersep> config <identifiersep> received ( ) { \n <ect>
\t1 login ( username <identifiersep> admin , main <identifiersep> tenant <identifiersep> 1 , new string [ ] { tenant <identifiersep> admin <identifiersep> role <identifiersep> name , tenant <identifiersep> authenticated <identifiersep> role <identifiersep> name } ) ; \n \t1 list < string > all <identifiersep> roles <identifiersep> for <identifiersep> default <identifiersep> tenant = service . get <identifiersep> all <identifiersep> roles ( ) ; \n \t1 list < string > all <identifiersep> roles <identifiersep> for <identifiersep> tenant = service . get <identifiersep> all <identifiersep> roles ( main <identifiersep> tenant <identifiersep> <number_literal> ) ; \n \t1 logger . info ( <string_literal> + all <identifiersep> roles <identifiersep> for <identifiersep> default <identifiersep> tenant . size ( ) ) ; \n <ect>
private static < type > type check ( final type obj ) { \n \t1 if ( obj == null ) { \n \t1 stack <identifiersep> trace <identifiersep> element ste <identifiersep> method = thread . current <identifiersep> thread ( ) . get <identifiersep> stack <identifiersep> trace ( ) [ 1 ] ; \n \t1 stack <identifiersep> trace <identifiersep> element ste <identifiersep> caller = thread . current <identifiersep> thread ( ) . get <identifiersep> stack <identifiersep> trace ( ) [ <number_literal> ] ; \n <ect>
\t6 answer =  <identifiersep> agent <identifiersep> mgr . send <identifiersep> to <identifiersep> ssvm ( dc <identifiersep> id , cmd ) ; \n \t5 } catch ( exception e ) { \n \t6 s <identifiersep> logger . warn ( <string_literal> + volume <identifiersep> id + <string_literal> + ss <identifiersep> host . get <identifiersep> storage <identifiersep> url ( ) ) ; } \n \t5 if ( ( answer != null ) && answer . get <identifiersep> result ( ) ) { \n <ect>
\t5 return false ; \n \t3 } else { \n \t4 return false ; } \n \t2 } catch ( final exception ex ) { \n <ect>
\t3 obs . stop <identifiersep> watching ( ) } \n \t2 observer = todo <identifiersep> observer ( path ) \n \t2 logger . info ( tag , <string_literal> ) } \n \t1 override fun save <identifiersep> tasks <identifiersep> to <identifiersep> file ( path : string , lines : list < string > , eol : string ) : string { \n <ect>
\t3 log . warn ( <string_literal> , e ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> , e ) ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t4 if ( channel . is <identifiersep> connected ( ) ) { \n \t5 log . trace ( <string_literal> , channel ) ; \n \t5 pool . return <identifiersep> object ( channel ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t4 byte [ ] bs ; \n \t4 try { \n \t4 bs = new byte [ piece <identifiersep> length ] ; \n \t4 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error oom ) { \n <ect>
\t2 common <identifiersep> prefixes <identifiersep> list . add ( new common <identifiersep> prefixes <identifiersep> entry ( prefix <identifiersep> entry ) ) ; } \n \t2 reply . set <identifiersep> common <identifiersep> prefixes <identifiersep> list ( common <identifiersep> prefixes <identifiersep> list ) ; } \n \t1 return reply ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 final undertow <identifiersep> http <identifiersep> binding binding = endpoint . get <identifiersep> undertow <identifiersep> http <identifiersep> binding ( ) ; \n \t4 final message result = binding . to <identifiersep> camel <identifiersep> message ( client <identifiersep> exchange , exchange ) ; \n \t4 <comment> \n \t4 final int code = client <identifiersep> exchange . get <identifiersep> response ( ) . get <identifiersep> response <identifiersep> code ( ) ; \n <ect>
\t6 for ( map . entry < string , string > entry : segment . get <identifiersep> snapshots ( ) . entry <identifiersep> set ( ) ) { \n \t7 if ( entry . get <identifiersep> value ( ) . equals <identifiersep> ignore <identifiersep> case ( item ) ) { \n \t8 entry . set <identifiersep> value ( snap <identifiersep> saved . get <identifiersep> resource <identifiersep> path ( ) ) ; } } } \n \t5 dst <identifiersep> store . put <identifiersep> resource ( cube <identifiersep> res <identifiersep> path , cube , cube <identifiersep> serializer ) ; \n <ect>
\t3 if ( ! cfg . is <identifiersep> absolute ( ) ) { \n \t4 cfg = new file ( i2p <identifiersep> app <identifiersep> context . get <identifiersep> global <identifiersep> context ( ) . get <identifiersep> config <identifiersep> dir ( ) , config <identifiersep> location ) ; } \n \t3 file <identifiersep> output <identifiersep> stream fo = null ; \n \t3 try { \n <ect>
\t2 action <identifiersep> future < delete <identifiersep> snapshot <identifiersep> response > delete <identifiersep> snapshot <identifiersep> response <identifiersep> future = internal <identifiersep> cluster ( ) . client ( nodes . get ( 0 ) ) . admin ( ) . cluster ( ) . prepare <identifiersep> delete <identifiersep> snapshot ( <string_literal> , <string_literal> ) . execute ( ) ; \n \t2 <comment> \n \t2 thread . sleep ( <number_literal> ) ; \n \t2 unblock <identifiersep> node ( <string_literal> , blocked <identifiersep> node ) ; \n <ect>
\t1 entities . persist ( group ) ; \n \t1 db . commit ( ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n \t1 } catch ( exception ex ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t3 return suitable <identifiersep> pools ; } \n \t2 collections . shuffle ( pools ) ; \n <ect>
\t3 long if <identifiersep> modified <identifiersep> since <identifiersep> date <identifiersep> seconds = if <identifiersep> modified <identifiersep> since <identifiersep> date . get <identifiersep> time ( ) / <number_literal> ; \n \t3 long file <identifiersep> last <identifiersep> modified <identifiersep> seconds = file . last <identifiersep> modified ( ) / <number_literal> ; \n \t3 if ( if <identifiersep> modified <identifiersep> since <identifiersep> date <identifiersep> seconds == file <identifiersep> last <identifiersep> modified <identifiersep> seconds ) { \n <ect>
\t5 method . set <identifiersep> header ( files <identifiersep> constants . x <identifiersep> auth <identifiersep> token , auth <identifiersep> token ) ; \n \t5 response = new files <identifiersep> response ( client . execute ( method ) ) ; } \n \t4 if ( response . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> ok ) \n \t4 { \n <ect>
\t4 configuration = new configuration ( ) ; \n \t4 configuration . set <identifiersep> strips <identifiersep> white <identifiersep> space ( is <identifiersep> strips <identifiersep> all <identifiersep> white <identifiersep> space ( ) ? whitespace . all : whitespace . ignorable ) ; \n \t4 log . debug ( <string_literal> , configuration ) ; \n \t3 } else { \n <ect>
\t4 scope <identifiersep> obj = community <identifiersep> service . find ( context , uuid ) ; \n \t4 if ( scope <identifiersep> obj == null ) { \n \t5 scope <identifiersep> obj = collection <identifiersep> service . find ( context , uuid ) ; } \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { \n <ect>
\t2 grid <identifiersep> job <identifiersep> stealing <identifiersep> job ( long arg ) { \n \t3 super ( arg ) ; } \n \t2 <comment> \n \t2 @ override public serializable execute ( ) throws grid <identifiersep> exception { \n <ect>
\t5 list < quota <identifiersep> tariff <identifiersep> vo > result = search ( sc , filter ) ; \n \t5 if ( result != null && ! result . is <identifiersep> empty ( ) ) { \n \t6 tariffs . add ( result . get ( 0 ) ) ; \n <ect>
\t3 rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( ! rs . next ( ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> ) ; \n \t3 } else if ( ! rs . get <identifiersep> string ( 1 ) . equals ( <string_literal> ) ) { \n <ect>
\t3 catch ( not <identifiersep> serializable <identifiersep> exception not <identifiersep> serializable ) { \n \t4 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) log . error ( util . get <identifiersep> message ( <string_literal> ) + reply + <string_literal> ) ; \n \t4 return ; } \n \t3 catch ( throwable tt ) { \n <ect>
<comment> \n \t1 list < action > get <identifiersep> applicable <identifiersep> action <identifiersep> list ( element <identifiersep> path element <identifiersep> path , attributes attributes ) { \n \t2 list < action > applicable <identifiersep> action <identifiersep> list = rule <identifiersep> store . match <identifiersep> actions ( element <identifiersep> path ) ; \n <ect>
\t3 urls = get <identifiersep> resources ( loader , package <identifiersep> name ) ; \n \t3 if ( ! urls . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t4 log . trace ( <string_literal> ) ; } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 <comment> \n \t2 if ( e . code ( ) == code . nonode ) { \n \t3 throw new namespace <identifiersep> not <identifiersep> found <identifiersep> exception ( namespace . canonical <identifiersep> id ( ) , null , \n \t4 <string_literal> ) ; } \n <ect>
\t8 s <identifiersep> logger . debug ( <string_literal> + project + <string_literal> + project . get <identifiersep> id ( ) ) ; } \n \t6 } catch ( exception e ) { \n \t7 s <identifiersep> logger . error ( <string_literal> + project , e ) ; } } \n \t4 } catch ( exception e ) { \n <ect>
\t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n \t2 < button ng - click = <string_literal> > info < / button > \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 stored <identifiersep> block head = get <identifiersep> chain <identifiersep> head ( ) ; \n \t2 final stored <identifiersep> block split <identifiersep> point = find <identifiersep> split ( new <identifiersep> chain <identifiersep> head , head , block <identifiersep> store ) ; \n <ect>
\t3 if ( version < last <identifiersep> cache <identifiersep> changed . get ( ) ) { \n \t4 return ; \n \t3 } else { \n \t4 registry <identifiersep> cache <identifiersep> executor . execute ( new save <identifiersep> properties ( last <identifiersep> cache <identifiersep> changed . increment <identifiersep> and <identifiersep> get ( ) ) ) ; } \n <ect>
\t3 if ( ! condition ( actor ) ) { \n \t4 return behavior <identifiersep> state . failure ; } \n \t3 return behavior <identifiersep> state . success ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 try { \n \t2 expected <identifiersep> date = df . parse ( expected <identifiersep> values [ i ] ) ; \n \t1 } catch ( parse <identifiersep> exception ex ) { \n <ect>
\t4 cmd <identifiersep> line <identifiersep> config . dataset <identifiersep> path = get <identifiersep> positional <identifiersep> arg ( 0 ) ; \n \t4 if ( cmd <identifiersep> line <identifiersep> config . dataset <identifiersep> path . length ( ) > 0 && ! cmd <identifiersep> line <identifiersep> config . dataset <identifiersep> path . starts <identifiersep> with ( <string_literal> ) ) \n \t5 throw new cmd <identifiersep> exception ( <string_literal> + cmd <identifiersep> line <identifiersep> config . dataset <identifiersep> path ) ; \n \t4 if ( ! cmd <identifiersep> line <identifiersep> config . allow <identifiersep> update ) \n <ect>
\t2 log . info ( <string_literal> , get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; } \n \t1 @ override \n \t1 public void stop ( ) throws exception { \n \t2 super . stop ( ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t8 interval ) ; \n \t4 logger . info ( <string_literal> + interval \n \t7 + <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 assert ( tokens != null && tokens . length == <number_literal> ) ; \n \t2 managed <identifiersep> object <identifiersep> reference mor <identifiersep> hyper <identifiersep> host = new managed <identifiersep> object <identifiersep> reference ( ) ; \n \t2 string [ ] host <identifiersep> tokens = tokens [ 0 ] . split ( <string_literal> ) ; \n \t2 if ( host <identifiersep> tokens == null || host <identifiersep> tokens . length != <number_literal> ) { \n <ect>
\t4 element el = query <identifiersep> async <identifiersep> job <identifiersep> result ( server , input ) ; \n \t4 map < string , string > values = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( el , \n \t6 new string [ ] { <string_literal> } ) ; \n \t4 if ( values . get ( <string_literal> ) == null ) { \n <ect>
\t1 dancers . for <identifiersep> each ( ( key , dancer ) - > { \n \t1 try { \n \t2 disable ( key , dancer ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 group grp ; \n \t3 authorizable a = user <identifiersep> manager . get <identifiersep> authorizable ( ext <identifiersep> group . get <identifiersep> id ( ) ) ; \n \t3 if ( a == null ) { \n \t4 grp = create <identifiersep> group ( ext <identifiersep> group ) ; \n <ect>
\t2 if ( action <identifiersep> to <identifiersep> execute == null ) { \n \t2 log . warn ( <string_literal> + action ) ; <comment> \n \t2 <comment> \n \t2 else if ( action <identifiersep> to <identifiersep> execute . always <identifiersep> execute ( ) || state <identifiersep> just <identifiersep> changed ) { \n <ect>
\t4 logger . debug ( <string_literal> , saved <identifiersep> connection <identifiersep> container . get <identifiersep> saved <identifiersep> connections ( ) . size ( ) ) ; } \n \t3 mapper . writer <identifiersep> with <identifiersep> default <identifiersep> pretty <identifiersep> printer ( ) . write <identifiersep> value ( new file ( saved <identifiersep> connection <identifiersep> file ) , saved <identifiersep> connection <identifiersep> container ) ; \n \t2 } catch ( json <identifiersep> generation <identifiersep> exception e1 ) { \n <ect>
\t7 if (  <identifiersep> ip <identifiersep> address <identifiersep> dao . update ( addr . get <identifiersep> id ( ) , addr ) ) { \n \t8 final <identifiersep> addr = addr ; \n \t8 break ; } } } } \n \t4 if ( final <identifiersep> addr == null ) { \n <ect>
\t4 m <identifiersep> knx <identifiersep> bus <identifiersep> reader <identifiersep> scheduler . read <identifiersep> once ( datapoint ) ; \n \t4 int auto <identifiersep> refresh <identifiersep> time <identifiersep> in <identifiersep> secs = knx <identifiersep> provider . get <identifiersep> auto <identifiersep> refresh <identifiersep> time ( datapoint ) ; \n \t4 if ( auto <identifiersep> refresh <identifiersep> time <identifiersep> in <identifiersep> secs > 0 ) { \n \t5 if ( ! m <identifiersep> knx <identifiersep> bus <identifiersep> reader <identifiersep> scheduler . schedule <identifiersep> read ( datapoint , auto <identifiersep> refresh <identifiersep> time <identifiersep> in <identifiersep> secs ) ) { \n <ect>
\t3 audit <identifiersep> trail <identifiersep> sb . append ( <string_literal> ) ; \n \t2 } finally { \n \t3 s <identifiersep> access <identifiersep> logger . info ( audit <identifiersep> trail <identifiersep> sb . to <identifiersep> string ( ) ) ; \n <ect>
\t2 try { \n \t3  <identifiersep> network <identifiersep> mgr . release ( profile , force ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> + vm ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 log . error ( <string_literal> + command <identifiersep> context , ex ) ; \n \t4 full <identifiersep> http <identifiersep> response response = http <identifiersep> <number_literal> ( ) ; \n \t4 ctx . write <identifiersep> and <identifiersep> flush ( response ) . add <identifiersep> listener ( channel <identifiersep> future <identifiersep> listener . close ) ; \n \t3 } catch ( exception qos <identifiersep> ex ) { \n <ect>
\t2 for ( static <identifiersep> database <identifiersep> property <identifiersep> entry entry : entities ) { \n \t2 if ( reporting <identifiersep> default <identifiersep> poll <identifiersep> interval <identifiersep> mins <identifiersep> field <identifiersep> name . equals ( entry . get <identifiersep> field <identifiersep> name ( ) ) && \n \t3 reporting <identifiersep> default <identifiersep> poll <identifiersep> interval <identifiersep> mins . equals ( entry . get <identifiersep> prop <identifiersep> name ( ) ) ) { \n \t3 entry . set <identifiersep> prop <identifiersep> name ( cloud <identifiersep> monitor <identifiersep> default <identifiersep> poll <identifiersep> interval <identifiersep> mins ) ; \n <ect>
<comment> \n \t1 public static void fill <identifiersep> item <identifiersep> default ( item resource <identifiersep> item , cms <identifiersep> object cms , cms <identifiersep> resource resource , locale locale ) { \n \t2 if ( resource == null ) { \n <ect>
\t4 if ( resource <identifiersep> dir . exists ( ) ) { \n \t5 sourcepath . add ( resource <identifiersep> dir . get <identifiersep> canonical <identifiersep> file ( ) ) ; \n \t5 delta | = build <identifiersep> context . has <identifiersep> delta ( resource <identifiersep> dir ) ; } } \n \t3 builder . set <identifiersep> property ( <string_literal> , strings . join ( file . path <identifiersep> separator , sourcepath ) ) ; \n <ect>
\t3 for ( knx <identifiersep> connection <identifiersep> listener listener : knx <identifiersep> connection . s <identifiersep> connection <identifiersep> listeners ) { \n \t4 listener . connection <identifiersep> established ( ) ; } \n \t3 success <identifiersep> ret <identifiersep> val = true ; \n \t2 } catch ( knx <identifiersep> exception e ) { \n <ect>
\t2 result <identifiersep> vars <identifiersep> set = true ; \n \t2 if ( get <identifiersep> query <identifiersep> pattern ( ) == null ) \n \t2 { \n \t3 if ( ! this . is <identifiersep> describe <identifiersep> type ( ) ) \n <ect>
\t4 context <identifiersep> path = context <identifiersep> path . substring ( context <identifiersep> path . last <identifiersep> index <identifiersep> of ( <string_literal> ) ) ; } \n \t3 catch ( exception e ) { \n \t4 log . error ( <string_literal> , e ) ; } } \n \t2 catch ( exception e ) { \n <ect>
\t1  <identifiersep> notify ( <string_literal> ) \n \t1 log . info ( <string_literal> ) \n \t1 case  <identifiersep>  = > \n \t1  <identifiersep> notify ( <string_literal> ) \n <ect>
\t1 public windows <identifiersep> named <identifiersep> pipe ( string basename , boolean force <identifiersep> reconnect , boolean in , output <identifiersep> params params ) { \n \t2 this . path = <string_literal> + basename ; \n \t2 this . in = in ; \n \t2 this . force <identifiersep> reconnect = force <identifiersep> reconnect ; \n <ect>
\t1 @ override \n \t1 public void visit ( node n ) { \n \t2 <comment> \n \t2 if ( ! ret . contains ( n ) ) { \n <ect>
\t2 case map : mapping <identifiersep> edge = > <comment> } \n \t1 ) \n \t1 val detector = new cycle <identifiersep> detector ( job <identifiersep> graph ) \n \t1 if ( detector . detect <identifiersep> cycles ) { \n <ect>
\t3 string public <identifiersep> ip <identifiersep> resource <identifiersep> group = public <identifiersep> ip . resource <identifiersep> group ( ) ; \n \t3 string public <identifiersep> ip <identifiersep> name = public <identifiersep> ip . name ( ) ; \n \t3 public <identifiersep> ip <identifiersep> address ip = api . get <identifiersep> public <identifiersep> ip <identifiersep> address <identifiersep> api ( public <identifiersep> ip <identifiersep> resource <identifiersep> group ) . get ( public <identifiersep> ip <identifiersep> name ) ; \n \t3 if ( ip . tags ( ) != null && boolean . parse <identifiersep> boolean ( ip . tags ( ) . get ( autogenerated <identifiersep> ip <identifiersep> key ) ) ) { \n <ect>
\t3 logger . debug ( <string_literal> + evt ) ; \n \t3 collected <identifiersep> new <identifiersep> states . add ( evt . get <identifiersep> new <identifiersep> state ( ) ) ; \n \t3 if ( evt . get <identifiersep> new <identifiersep> state ( ) . equals ( registration <identifiersep> state . registered ) ) \n \t3 { \n <ect>
\t2 if ( is <identifiersep> killed ) { \n \t3 bf . log . error ( <string_literal> + this , new exception ( ) ) ; \n \t3 return ; } \n \t2 if ( bf . log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t6 <comment> \n \t6 return ; } \n \t5 catch ( io <identifiersep> exception ee ) { \n \t6 last <identifiersep> exception = ee ; \n <ect>
\t5 if ( deployment . get <identifiersep> idp ( ) . get <identifiersep> single <identifiersep> logout <identifiersep> service ( ) . validate <identifiersep> response <identifiersep> signature ( ) ) { \n \t6 try { \n \t7 validate <identifiersep> saml <identifiersep> signature ( holder , post <identifiersep> binding , general <identifiersep> constants . saml <identifiersep> response <identifiersep> key ) ; \n \t6 } catch ( verification <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 allocation . reroute ( cluster <identifiersep> state , new allocation <identifiersep> commands ( new cancel <identifiersep> allocation <identifiersep> command ( <string_literal> , 0 , <string_literal> , false ) ) , false , false ) ; \n \t3 fail ( ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { } \n <ect>
\t4 logger . warn ( <string_literal> , table <identifiersep> name , \n \t6 table <identifiersep> description . get <identifiersep> table <identifiersep> status ( ) ) ; } \n \t3 return success ; \n \t2 } catch ( amazon <identifiersep> client <identifiersep> exception e ) { \n <ect>
\t2 certs . add ( cert ) ; \n \t2 try { \n \t3 return certificate <identifiersep> helper . build <identifiersep> and <identifiersep> save <identifiersep> keystore ( certs , store <identifiersep> password ) ; \n \t2 } catch ( key <identifiersep> store <identifiersep> exception e ) { \n <ect>
\t1 private final class receive <identifiersep> handler extends io <identifiersep> handler <identifiersep> adapter { \n \t2 @ override \n \t2 public void exception <identifiersep> caught ( io <identifiersep> session session , throwable cause ) throws exception { \n \t3 if ( cause instanceof io <identifiersep> exception ) { \n <ect>
\t1 protected void register <identifiersep> script <identifiersep> engines ( bundle bundle , list < bundle <identifiersep> script <identifiersep> engine <identifiersep> resolver > resolvers ) { \n \t2 try { \n \t3 for ( enumeration < ? > e = bundle . adapt ( bundle <identifiersep> wiring . class ) . get <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> resources ( meta <identifiersep> <number_literal> <identifiersep> services <identifiersep> dir + <string_literal> + script <identifiersep> engine <identifiersep> service <identifiersep> file ) ; e != null && e . has <identifiersep> more <identifiersep> elements ( ) ; ) { \n \t4 url config <identifiersep> url = ( url ) e . next <identifiersep> element ( ) ; \n <ect>
\t4 tuple <identifiersep> impl <identifiersep> ext tp = new tuple <identifiersep> impl <identifiersep> ext ( topology <identifiersep> context , values , task <identifiersep> id , out <identifiersep> stream <identifiersep> id , msg <identifiersep> id ) ; \n \t4 tp . set <identifiersep> target <identifiersep> task <identifiersep> id ( t ) ; \n \t4 task <identifiersep> transfer . transfer ( tp ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 public void on <identifiersep> error ( string msg ) { \n \t3 log . error ( <string_literal> , msg ) ; } \n \t2 @ override \n \t2 public void on <identifiersep> error ( int num , string msg ) { \n <ect>
\t6 log . debug ( \n \t7 <string_literal> + schema + <string_literal> + element + <string_literal> + qualifier + \n \t8 <string_literal> + ctl + <string_literal> + req ) ; } } \n \t3 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t8 if ( cmd == stop <identifiersep> move <identifiersep> type . stop ) { \n \t9 ( ( move <identifiersep> actor ) m <identifiersep> device ) . stop ( ) ; \n \t8 } else { \n \t9 ( ( move <identifiersep> actor ) m <identifiersep> device ) . moveon ( provider . get <identifiersep> device <identifiersep> options ( item <identifiersep> name ) ) ; } } \n <ect>
<comment> \n \t1 private void parse <identifiersep> file <identifiersep> annotation <identifiersep> list ( annotation <identifiersep> parsing <identifiersep> mode mode ) { \n \t2 if ( ! mode . is <identifiersep> file <identifiersep> annotation <identifiersep> parsing <identifiersep> mode ) { \n <ect>
\t2 } else { \n \t3 permissions = <string_literal> ; } \n \t2 return permissions ; } \n \t1 private void display <identifiersep> banner ( ) throws io <identifiersep> exception { \n <ect>
\t3  <identifiersep> log . debug ( <string_literal> , path ) ; \n \t3  <identifiersep> zk . set <identifiersep> data ( path ,  <identifiersep> serializer . to <identifiersep> bytes ( discovery <identifiersep> properties ) , - 1 , data <identifiersep> callback , null ) ; } \n \t3 else \n \t3 { \n <ect>
\t2 final x509certificate [ ] certificates = ( x509certificate [ ] ) context . get <identifiersep> external <identifiersep> context ( ) . get <identifiersep> request <identifiersep> map ( ) . get ( certificate <identifiersep> request <identifiersep> attribute ) ; \n \t2 if ( certificates == null || certificates . length == 0 ) { \n \t3 logger . debug ( <string_literal> , certificate <identifiersep> request <identifiersep> attribute ) ; \n \t3 return null ; } \n <ect>
\t2 set <identifiersep> rebalance <identifiersep> source ( rebalance <identifiersep> source ) ; \n \t2 set <identifiersep> rebalance <identifiersep> target ( rebalance <identifiersep> target ) ; \n \t2 set <identifiersep> was <identifiersep> queued ( was <identifiersep> queued ) ; \n <ect>
\t3 for ( failed <identifiersep> shard <identifiersep> entry task : tasks ) { \n \t4 index <identifiersep> meta <identifiersep> data index <identifiersep> meta <identifiersep> data = current <identifiersep> state . meta <identifiersep> data ( ) . index ( task . shard <identifiersep> id . get <identifiersep> index ( ) ) ; \n \t4 if ( index <identifiersep> meta <identifiersep> data == null ) { \n \t5 <comment> \n <ect>
\t4 break ; } \n \t3 else \n \t4 prev <identifiersep> idx <identifiersep> entry = cur <identifiersep> idx <identifiersep> entry ; } \n \t2 if ( matched <identifiersep> entry == null ) { \n <ect>
\t2 int offset = 0 ; \n \t2 <comment> \n \t2 system . arraycopy ( nonce <identifiersep> initiator , 0 , message3 , offset , nonce <identifiersep> size ) ; \n \t2 offset += nonce <identifiersep> size ; \n <ect>
\t6 logger . error ( <string_literal> , request . shard <identifiersep> id , request ) ; \n \t6 try { \n \t7 channel . send <identifiersep> response ( new not <identifiersep> master <identifiersep> exception ( source ) ) ; \n \t6 } catch ( exception channel <identifiersep> exception ) { \n <ect>
\t2 @ override \n \t2 public void init <identifiersep> state ( object state ) { \n \t3 if ( state != null ) { \n \t4 index = ( integer ) state ; } \n <ect>
\t3 if ( results . first ( ) ) { \n \t4 logger . debug ( <string_literal> , prepared <identifiersep> stmt . get <identifiersep> statement ( ) ) ; \n \t4 return prepared <identifiersep> stmt . map <identifiersep> row ( results ) ; \n \t3 } else { \n <ect>
\t1 public static string localize ( string key , object . . . args ) { \n \t2 string localized = i18n . translate <identifiersep> to <identifiersep> local ( key ) ; \n \t2 if ( localized == key ) { \n \t3 if ( debug && failed <identifiersep> strings . add ( localized ) ) { \n <ect>
\t3 if ( field . get <identifiersep> variables ( ) . is <identifiersep> empty ( ) ) { \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + field + <string_literal> ) ; } \n \t3 final variable <identifiersep> declarator var = field . get <identifiersep> variable ( 0 ) ; \n \t3 if ( field . get <identifiersep> modifiers ( ) . contains ( modifier . static ) ) { \n <ect>
\t4 log . debug ( <string_literal> , name ) ; \n \t3 } else { \n \t4 log . warn ( <string_literal> , name ) ; } \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 private final set < string > done <identifiersep> states = sets . new <identifiersep> hash <identifiersep> set ( <string_literal> , <string_literal> , <string_literal> ) ; \n \t1 private void poll <identifiersep> cluster <identifiersep> for <identifiersep> completion ( string job <identifiersep> flow <identifiersep> id , final string step <identifiersep> name ) \n \t3 throws exception { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return null ; } \n \t2 <comment> \n \t2 if ( examples == null || examples . is <identifiersep> empty ( ) || num <identifiersep> predictions < = 0 ) { \n <ect>
\t2 public void handle <identifiersep> your <identifiersep> info ( main <identifiersep> bos <identifiersep> service service , \n \t8 full <identifiersep> user <identifiersep> info user <identifiersep> info ) \n \t2 { \n <ect>
\t2 log . debug ( <string_literal> + import <identifiersep> statement1 ) ; } \n \t2 statements . add ( ps <identifiersep> import1 ) ; \n \t2 ps <identifiersep> import1 . execute ( ) ; \n <ect>
\t4 int hour = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset + 1 ) & 0x1f ; \n \t4 int minute = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset + <number_literal> ) ; \n \t4 string days [ ] = new date <identifiersep> format <identifiersep> symbols ( ) . get <identifiersep> weekdays ( ) ; \n \t4 int java <identifiersep> day = day == <number_literal> ? 1 : day + 1 ; \n <ect>
\t2 string . format ( <string_literal> , ui . get <identifiersep> absolute <identifiersep> path ( ) . to <identifiersep> string ( ) , job . get <identifiersep> id ( ) ) ) ; \n \t1 json <identifiersep> object job <identifiersep> object = json <identifiersep> object <identifiersep> from <identifiersep> job ( created <identifiersep> job <identifiersep> controller ) ; \n \t1 return response . ok ( job <identifiersep> object ) . status ( <number_literal> ) . build ( ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
<comment> \n \t4 final boolean valid = key != null && key . reset ( ) ; \n \t4 if ( ! valid ) { \n <ect>
\t7 s <identifiersep> logger . info ( <string_literal> ) ; \n \t7 method method = console <identifiersep> proxy <identifiersep> clazz . get <identifiersep> method ( <string_literal> , properties . class , object . class , byte [ ] . class , string . class , string . class ) ; \n \t7 method . invoke ( null ,  <identifiersep> properties , resource , ks <identifiersep> bits , ks <identifiersep> password , encryptor <identifiersep> password ) ; \n \t6 } catch ( security <identifiersep> exception e ) { \n <ect>
\t2 vm <identifiersep> instance . last <identifiersep> updated <identifiersep> criterion ( \n \t3 system . current <identifiersep> time <identifiersep> millis ( ) - time <identifiersep> unit . minutes . to <identifiersep> millis ( vm <identifiersep> instances . pending <identifiersep> time ) ) , \n \t2 vm <identifiersep> instance . null <identifiersep> node <identifiersep> criterion ( ) ) ) ; \n \t1 for ( final string instance <identifiersep> id : instance <identifiersep> ids ) { \n <ect>
\t3 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> target <identifiersep> exception ( ) . to <identifiersep> string ( ) , e ) ; \n \t4 system . exit ( exit <identifiersep> status . error . value ( ) ) ; \n \t3 } catch ( final class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> ccn <identifiersep> time <identifiersep> date ( ) { \n <ect>
\t2 init <identifiersep> connection ( ) ; \n \t2 init <identifiersep> session ( ) ; } \n \t1 private void shutdown <identifiersep> client ( ) \n \t3 throws jms <identifiersep> exception { \n <ect>
\t3 log . debug ( <string_literal> ) ; \n \t3 try { \n \t4 socket <identifiersep> transport <identifiersep> started . await ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 int num <identifiersep> removed =  <identifiersep> security <identifiersep> group <identifiersep> dao . remove <identifiersep> by <identifiersep> account <identifiersep> id ( account <identifiersep> id ) ; \n \t3 s <identifiersep> logger . info ( <string_literal> + num <identifiersep> removed + <string_literal> + account <identifiersep> id ) ; \n \t3 <comment> \n \t3 int num <identifiersep> ag <identifiersep> removed =  <identifiersep> affinity <identifiersep> group <identifiersep> dao . remove <identifiersep> by <identifiersep> account <identifiersep> id ( account <identifiersep> id ) ; \n <ect>
\t5 state state = get <identifiersep> data ( commmand <identifiersep> type , item <identifiersep> type , target ) ; \n \t5 if ( state != null ) { \n \t6 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , state ) ; \n \t5 } else { \n <ect>
\t1 if ( state . is <identifiersep> first <identifiersep> pass ( ) ) { \n \t1 log . info ( <string_literal> ) ; \n \t1 return true ; } \n \t1 matrix previous <identifiersep> eigens = state . get <identifiersep> current <identifiersep> eigens ( ) ; \n <ect>
\t6 log . error ( <string_literal> <string_literal> \\ <string_literal> ) ; \n \t6 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t6 rules <identifiersep> since <identifiersep> first <identifiersep> fail ++ ; } } \n \t4 if ( ! threw && block . throws <identifiersep> exception ) { \n <ect>
\t6 logger . debug ( <string_literal> ) ; } \n \t5 serial <identifiersep> port . enable <identifiersep> receive <identifiersep> timeout ( <number_literal> ) ; \n \t4 } catch ( unsupported <identifiersep> comm <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t4 if ( connection != null ) { \n \t5 connection . close ( ) ; } \n \t3 } catch ( sql <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
\t2 info . put ( key , value ) ; \n \t2 add <identifiersep> job <identifiersep> info ( id , info ) ; } \n \t1 private abstract <identifiersep> executable parse <identifiersep> to ( executable <identifiersep> po executable <identifiersep> po ) { \n \t2 if ( executable <identifiersep> po == null ) { \n <ect>
\t3 byte [ ] random <identifiersep> bytes = new byte [ <number_literal> ] ; \n \t3 random . next <identifiersep> bytes ( random <identifiersep> bytes ) ; \n \t3 return base64 . encode ( random <identifiersep> bytes ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t3 port . add ( integer . to <identifiersep> string ( j ) ) ; } \n \t2 <comment> \n \t2 for ( string port <identifiersep> value : port ) { \n \t3 try { \n <ect>
\t6 } catch ( exception e ) { \n \t7 if ( logger != null && logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n \t8 logger . error ( e . get <identifiersep> message ( ) , e ) ; } } } } \n <ect>
\t3 } catch ( unknown <identifiersep> host <identifiersep> exception an <identifiersep> exception ) { \n \t4 <comment> \n \t4 <comment> \n \t4 <comment> \n <ect>
\t1 protected map < string , object > get <identifiersep> principal <identifiersep> attributes <identifiersep> from <identifiersep> release <identifiersep> policy ( final principal p , final service service , final registered <identifiersep> service registered <identifiersep> service ) { \n \t2 if ( registered <identifiersep> service != null && registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed ( ) ) { \n \t3 logger . debug ( <string_literal> , registered <identifiersep> service , p . get <identifiersep> id ( ) ) ; \n \t3 if ( registered <identifiersep> service . get <identifiersep> attribute <identifiersep> release <identifiersep> policy ( ) == null ) { \n <ect>
\t1 set <identifiersep> resource <identifiersep> property ( resource , cluster <identifiersep> health <identifiersep> report <identifiersep> property <identifiersep> id , response . get <identifiersep> cluster <identifiersep> health <identifiersep> report ( ) , requested <identifiersep> ids ) ; \n \t1 set <identifiersep> resource <identifiersep> property ( resource , cluster <identifiersep> credential <identifiersep> store <identifiersep> properties <identifiersep> property <identifiersep> id , response . get <identifiersep> credential <identifiersep> store <identifiersep> service <identifiersep> properties ( ) , requested <identifiersep> ids ) ; \n \t1 set <identifiersep> resource <identifiersep> property ( resource , cluster <identifiersep> version <identifiersep> property <identifiersep> id , response . get <identifiersep> desired <identifiersep> stack <identifiersep> version ( ) , requested <identifiersep> ids ) ; \n <ect>
\t2 if ( ! type . has <identifiersep> descendant ( child . type ) ) \n \t2 { \n \t3 if ( debug ) \n \t3 { \n <ect>
\t3 log . info ( <string_literal> + rsrc1 ) ; \n \t3 log . info ( <string_literal> + rsrc2 ) ; \n \t3 log . info ( <string_literal> + rsrc3 ) ; \n \t3 log . info ( <string_literal> + rsrc4 ) ; \n <ect>
\t2 logger . debug ( <string_literal> , names . size ( ) ) ; \n \t2 if ( names . is <identifiersep> empty ( ) ) { \n \t3 return false ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( attr <identifiersep> value ) ) { \n <ect>
\t2 cors <identifiersep> rule converted = convert <identifiersep> cors <identifiersep> rule ( rule <identifiersep> info , bucket <identifiersep> uuid ) ; \n \t2 entities . merge ( converted ) ; } } \n \t1 tran . commit ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t3 try { \n \t4 ns <identifiersep> notification <identifiersep> center . default <identifiersep> center ( ) . post <identifiersep> notification ( indexing <identifiersep> started <identifiersep> notification , transaction ) ; \n \t4 boolean create = transaction . has <identifiersep> clear ( ) ; \n \t4 if ( create ) { \n <ect>
\t3 empty . set <identifiersep> string ( 0 , <string_literal> ) ; \n \t3 ret = vr <identifiersep> overlay . show <identifiersep> keyboard . apply ( 0 , 0 , pointer , <number_literal> , empty , ( byte ) 1 , 0 ) ; \n \t3 keyboard <identifiersep> showing = 0 == ret ; <comment> \n \t3 if ( ret != 0 ) { \n <ect>
\t5 script <identifiersep> name ) ; \n \t3 } catch ( exception e ) { \n \t4 log . error ( <string_literal> ) ; \n \t4 try { \n <ect>
\t4 logger . info ( <string_literal> + domain + <string_literal> + task <identifiersep> list + <string_literal> ) ; \n \t4 } else if ( persistence <identifiersep> exceptions . is <identifiersep> lock <identifiersep> error ( e ) ) { \n \t4 logger . info ( <string_literal> + domain + <string_literal> + task <identifiersep> list + <string_literal> ) ; \n \t4 } else { \n <ect>
\t5 log . error ( <string_literal> , e ) ; \n \t5 set <identifiersep> fail <identifiersep> continuous ( true ) ; \n \t5 continue ; \n \t4 } catch ( error e ) { \n <ect>
\t2 log . error ( <string_literal> , ie ) ; \n \t2 throw new meta <identifiersep> exception ( <string_literal> + \n \t3 listener <identifiersep> impl + <string_literal> + ie . get <identifiersep> cause ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 request . answer ( output , start <identifiersep> stop <identifiersep> listener <identifiersep> delegate ) ; } \n \t3 if ( request != null && request . get <identifiersep> input <identifiersep> stream ( ) != null ) { \n \t4 request . get <identifiersep> input <identifiersep> stream ( ) . close ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void member <identifiersep> is <identifiersep> available ( string role , instance <identifiersep> id available <identifiersep> id , uri at <identifiersep> uri , store <identifiersep> id store <identifiersep> id ) \n \t1 { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t3 } catch ( io <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> ) ; } } } \n \t1 @ override \n \t1 public void on <identifiersep> web <identifiersep> socket <identifiersep> close ( int status <identifiersep> code , string reason ) { \n <ect>
\t2 <comment> \n \t2 file <identifiersep> system output <identifiersep> fs = output <identifiersep> dir . get <identifiersep> file <identifiersep> system ( this . conf ) ; \n \t2 output <identifiersep> fs . mkdirs ( output <identifiersep> dir ) ; \n \t2 output <identifiersep> fs . set <identifiersep> permission ( output <identifiersep> dir , new fs <identifiersep> permission ( hadoop <identifiersep> store <identifiersep> builder . hadoop <identifiersep> file <identifiersep> permission ) ) ; \n <ect>
\t2 eo <identifiersep> entity wrong <identifiersep> param <identifiersep> entity = eo <identifiersep> model <identifiersep> group . default <identifiersep> group ( ) . entity <identifiersep> named ( fetch <identifiersep> spec ) ; \n \t2 if ( wrong <identifiersep> param <identifiersep> entity != null ) { \n \t3 fetch <identifiersep> spec = entity ; \n \t3 entity = wrong <identifiersep> param <identifiersep> entity . name ( ) ; \n <ect>
\t2 verify <identifiersep> repository <identifiersep> response verify <identifiersep> repository <identifiersep> response = client . admin ( ) . cluster ( ) . prepare <identifiersep> verify <identifiersep> repository ( <string_literal> ) . get ( ) ; \n \t2 assert <identifiersep> that ( verify <identifiersep> repository <identifiersep> response . get <identifiersep> nodes ( ) . length , equal <identifiersep> to ( cluster ( ) . num <identifiersep> data <identifiersep> and <identifiersep> master <identifiersep> nodes ( ) ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> that ( file <identifiersep> system <identifiersep> utils . files ( location ) . length , equal <identifiersep> to ( number <identifiersep> of <identifiersep> files ) ) ; \n <ect>
\t2 text <identifiersep> input <identifiersep> field = find <identifiersep> view <identifiersep> by <identifiersep> id < edit <identifiersep> text > ( r . id . task <identifiersep> text ) \n \t2 val input : string = text <identifiersep> input <identifiersep> field . text . to <identifiersep> string ( ) \n \t2 <comment> \n \t2 if ( input . trim { it < = ' ' } . is <identifiersep> empty ( ) ) { \n <ect>
\t3 new timeout ( <string_literal> , <number_literal> ) . sleep ( ) ; <comment> \n \t2 j <identifiersep> table <identifiersep> operator jto = new j <identifiersep> table <identifiersep> operator ( wo , 0 ) ; \n \t2 int row = jto . find <identifiersep> cell <identifiersep> row ( <string_literal> , <number_literal> , 0 ) ; \n \t2 jto . click <identifiersep> on <identifiersep> cell ( row , 1 ) ; \n <ect>
\t2 <comment> \n \t2 boolean ok =  <identifiersep> validator . receive <identifiersep> iv ( iv , 0 , orig , offset + hop <identifiersep> processor . iv <identifiersep> length ) ; \n \t2 if ( ! ok ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n \t1 log . error ( <string_literal> , ex ) ; \n \t1 throw ex ; \n \t1 } catch ( item <identifiersep> not <identifiersep> found item <identifiersep> not <identifiersep> found ) { \n <ect>
\t5 received <identifiersep> one <identifiersep> condition . count <identifiersep> down ( ) ; \n \t5 received . increment <identifiersep> and <identifiersep> get ( ) ; \n \t5 wait <identifiersep> condition . await ( <number_literal> , time <identifiersep> unit . minutes ) ; \n <ect>
\t5 open <identifiersep> devices . remove ( handler ) ; \n \t5 try { \n \t6 handler . send ( <string_literal> ) ; \n \t5 } catch ( cul <identifiersep> communication <identifiersep> exception e ) { \n <ect>
\t3 response response = null ; \n \t3 if ( attache == null ) { \n \t4 request . log <identifiersep> d ( <string_literal> ) ; \n \t4 if ( ! ( cmd instanceof startup <identifiersep> command ) ) { \n <ect>
\t1 if ( file <identifiersep> util . up <identifiersep> to <identifiersep> date ( source <identifiersep> files , target <identifiersep> files ) ) \n \t1 { \n \t1  <identifiersep> log . info ( <string_literal> + target <identifiersep> files ) ; \n \t1 return ; } \n <ect>
\t5 pan <identifiersep> stamp <identifiersep> binding <identifiersep> config < ? > conf = prov . get <identifiersep> config ( item <identifiersep> name ) ; \n \t5 if ( ! network . has <identifiersep> device ( conf . get <identifiersep> address ( ) ) ) { \n \t6 try { \n \t7 network . add <identifiersep> device ( new pan <identifiersep> stamp ( network , conf . get <identifiersep> address ( ) ) ) ; \n <ect>
\t2 rf . seek ( lang <identifiersep> sys <identifiersep> table <identifiersep> location <identifiersep> offset ) ; \n \t2 int lookup <identifiersep> order <identifiersep> offset = rf . read <identifiersep> short ( ) ; \n \t2 log . debug ( <string_literal> + lookup <identifiersep> order <identifiersep> offset ) ; \n \t2 int req <identifiersep> feature <identifiersep> index = rf . read <identifiersep> short ( ) ; \n <ect>
\t2 string [ ] nodes = config . get <identifiersep> rest <identifiersep> servers ( ) ; \n \t2 for ( string node : nodes ) { \n \t3 rest <identifiersep> client rest <identifiersep> client = new rest <identifiersep> client ( node ) ; \n \t3 try { \n <ect>
\t2 return ( int ) storage <identifiersep> metrics . total <identifiersep> hints <identifiersep> in <identifiersep> progress . get <identifiersep> count ( ) ; } \n \t1 public void verify <identifiersep> no <identifiersep> hints <identifiersep> in <identifiersep> progress ( ) \n \t1 { \n \t2 if ( get <identifiersep> hints <identifiersep> in <identifiersep> progress ( ) > 0 ) \n <ect>
\t5 results . put ( alias + <string_literal> , max ) ; \n \t5 results . put ( alias + <string_literal> , active ) ; \n \t5 results . put ( alias + <string_literal> , active < max ? stats <identifiersep> output <identifiersep> values . check <identifiersep> ok : stats <identifiersep> output <identifiersep> values . check <identifiersep> failed ) ; } \n \t3 } catch ( throwable f ) { \n <ect>
\t1 public boolean disable <identifiersep> account ( long account <identifiersep> id ) throws concurrent <identifiersep> operation <identifiersep> exception , resource <identifiersep> unavailable <identifiersep> exception { \n \t2 boolean success = false ; \n \t2 if ( account <identifiersep> id < = <number_literal> ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + rules . size ( ) + <string_literal> ) ; \n \t3 for ( firewall <identifiersep> rule rule : rules ) { \n \t4 boolean result = delete <identifiersep> load <identifiersep> balancer <identifiersep> rule ( rule . get <identifiersep> id ( ) , true , caller , caller <identifiersep> user <identifiersep> id , false ) ; \n \t4 if ( result == false ) { \n <ect>
\t3 if ( network . get <identifiersep> state ( ) == network . state . allocated ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + network ) ; \n \t4 return true ; } \n \t3 if ( network . get <identifiersep> state ( ) != network . state . implemented && network . get <identifiersep> state ( ) != network . state . shutdown ) { \n <ect>
\t2 else : \n \t2 logger . info ( <string_literal> . format ( old <identifiersep> conf , current <identifiersep> dir ) ) \n \t1 elif os . path . isdir ( old <identifiersep> conf ) : \n \t2 # the / etc / < component > / conf directory is not a link , so turn it into one \n <ect>
\t5 sb . append ( '0' ) ; } \n \t4 sb . append ( integer . to <identifiersep> hex <identifiersep> string ( b ) ) ; } \n \t3 this . value <identifiersep> after <identifiersep> md5 = sb . to <identifiersep> string ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public set < cms <identifiersep> resource > get <identifiersep> publish <identifiersep> list <identifiersep> files ( ) throws cms <identifiersep> exception { \n \t2 string context = <string_literal> + random <identifiersep> string <identifiersep> utils . random <identifiersep> alphabetic ( <number_literal> ) + <string_literal> ; \n \t2 list < cms <identifiersep> resource > offline <identifiersep> results = compute <identifiersep> collector <identifiersep> results ( offline ) ; \n <ect>
\t2 spring <identifiersep> application <identifiersep> builder builder = new grails <identifiersep> app <identifiersep> builder ( ) \n \t2 builder . main ( get <identifiersep> class ( ) ) \n \t2 application <identifiersep> context parent = get <identifiersep> existing <identifiersep> root <identifiersep> web <identifiersep> application <identifiersep> context ( servlet <identifiersep> context ) \n \t2 if ( parent != null ) { \n <ect>
\t1 logger . debug ( <string_literal> % path ) \n \t1 os . remove ( path ) \n def touch <identifiersep> file ( self , path ) : \n \t1 if not os . path . isfile ( path ) : \n <ect>
\t3 try { \n \t4 context . turn <identifiersep> off <identifiersep> authorisation <identifiersep> system ( ) ; \n \t4 update ( context , e <identifiersep> person ) ; \n \t3 } catch ( sql <identifiersep> exception | authorize <identifiersep> exception ex ) { \n <ect>
\t6 ) ; \n \t3 else if ( e instanceof object <identifiersep> property <identifiersep> specialization <identifiersep> link ) \n \t4 link = new object <identifiersep> property <identifiersep> specialization <identifiersep> link ( id , ( ( object <identifiersep> property <identifiersep> specialization <identifiersep> link ) e ) . get <identifiersep> specialized <identifiersep> link <identifiersep> id ( ) ) ; \n \t3 else { \n <ect>
\t3 uuid = uuid . name <identifiersep> uuid <identifiersep> from <identifiersep> bytes ( ( storage <identifiersep> host + host <identifiersep> path ) . get <identifiersep> bytes ( ) ) . to <identifiersep> string ( ) ; } \n \t2 list < storage <identifiersep> pool <identifiersep> vo > sp <identifiersep> handles = primary <identifiersep> data <identifiersep> store <identifiersep> dao . find <identifiersep> if <identifiersep> duplicate <identifiersep> pools <identifiersep> exist <identifiersep> by <identifiersep> uuid ( uuid ) ; \n \t2 if ( ( sp <identifiersep> handles != null ) && ( sp <identifiersep> handles . size ( ) > 0 ) ) { \n <ect>
\t2 return result ; } \n \t1 public static byte [ ] [ ] get <identifiersep> region <identifiersep> splits <identifiersep> from <identifiersep> cuboid <identifiersep> statistics ( final map < long , double > cube <identifiersep> size <identifiersep> map , final kylin <identifiersep> config kylin <identifiersep> config , final cube <identifiersep> segment cube <identifiersep> segment , final path hfile <identifiersep> splits <identifiersep> output <identifiersep> folder ) throws io <identifiersep> exception { \n \t2 final cube <identifiersep> desc cube <identifiersep> desc = cube <identifiersep> segment . get <identifiersep> cube <identifiersep> desc ( ) ; \n \t2 float cut = cube <identifiersep> desc . get <identifiersep> config ( ) . get <identifiersep> kylin <identifiersep> h <identifiersep> base <identifiersep> region <identifiersep> cut ( ) ; \n <ect>
\t2 if response [ 'restart <identifiersep> agent' ] : \n \t2 logger . error ( <string_literal> ) \n \t2 self . restart <identifiersep> agent ( ) \n \t2 else : \n <ect>
<comment> \n \t1 @ override \n \t1 public answer create <identifiersep> snapshot ( create <identifiersep> object <identifiersep> command cmd ) { \n <ect>
\t2 if ( relocation != null ) { \n \t3 if ( group <identifiersep> id != null && artifact <identifiersep> id != null && artifact <identifiersep> id . equals ( relocation . get <identifiersep> name ( ) ) && group <identifiersep> id . equals ( relocation . get <identifiersep> group ( ) ) ) { \n \t4 logger . error ( <string_literal> , \n \t6 md <identifiersep> builder . get <identifiersep> component <identifiersep> identifier ( ) , relocation ) ; \n <ect>
\t2 public storage <identifiersep> garbage <identifiersep> collector ( ) { } \n \t2 @ override \n \t2 public void run ( ) { \n \t3 try { \n <ect>
\t3 return enabled <identifiersep> arr ; } \n \t2 if ( log . should <identifiersep> log ( log . debug ) ) { \n \t3 list < string > foo = new array <identifiersep> list < string > ( selected ) ; \n \t3 collections . sort ( foo ) ; \n <ect>
<number_literal> final authentication <identifiersep> result <identifiersep> builder authentication <identifiersep> result ) \n \t3 throws authentication <identifiersep> exception { \n \t2 if ( ! authentication <identifiersep> transaction . get <identifiersep> credentials ( ) . is <identifiersep> empty ( ) ) { \n \t3 final authentication authentication = this . authentication <identifiersep> manager . authenticate ( authentication <identifiersep> transaction ) ; \n <ect>
\t3 <comment> \n \t3 app . cypher ( <string_literal> , collections . empty <identifiersep> map ( ) ) ; \n \t3 tx . success ( ) ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 load <identifiersep> classes ( evaluation <identifiersep> context , classes ) \n \t1 } catch ( e : evaluate <identifiersep> exception ) { \n \t2 throw e \n \t1 } catch ( e : throwable ) { \n <ect>
\t4 break ; \n \t3 case silent : \n \t4 break ; \n \t3 case fail : \n <ect>
\t3 @ override \n \t3 public void run ( buf b ) { \n \t4 b . set ( res . buf , res . md5 ) ; \n \t4 b . write ( ) ; \n <ect>
\t3 log . error ( <string_literal> \n \t6 + <string_literal> + uri + <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( name <identifiersep> node == null ) { \n <ect>
\t2 <comment> \n \t2 file java <identifiersep> tmpdir = new file ( system . get <identifiersep> property ( <string_literal> ) ) ; \n \t2 if ( ! file <identifiersep> util . is <identifiersep> directory <identifiersep> writable ( java <identifiersep> tmpdir ) ) { \n \t3 logger . error ( <string_literal> { } \\ <string_literal> , java <identifiersep> tmpdir . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n <ect>
\t1 metrics replication <identifiersep> metrics = factory . create <identifiersep> replication <identifiersep> metrics ( ) ; \n \t1 try { \n \t1 replication <identifiersep> metrics . register ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 args , predicate . class ) ; \n \t2 logger . debug ( <string_literal> , \n \t3 predicate . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , predicate <identifiersep> resource , providers ) ; \n \t2 if ( providers == null || providers . is <identifiersep> empty ( ) ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 if ( registering ) { \n <ect>
\t2 try { \n \t3 for ( t entity : entities ) { \n \t4 lifecycle <identifiersep> handler . on <identifiersep> pre <identifiersep> remove ( entity ) ; \n \t4 if ( verbose ) \n <ect>
\t2 long value = rand . next <identifiersep> int ( <number_literal> ) ; \n \t2 collector . emit ( new values ( id , value ) ) ; } \n \t1 @ override \n \t1 public void cleanup ( ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 leader <identifiersep> retrieval <identifiersep> service . stop ( ) ; \n \t3 } catch ( exception fe ) { \n <ect>
\t2 ldap <identifiersep> trust <identifiersep> map <identifiersep> vo vo =  <identifiersep> ldap <identifiersep> trust <identifiersep> map <identifiersep> dao . persist ( new ldap <identifiersep> trust <identifiersep> map <identifiersep> vo ( domain <identifiersep> id , link <identifiersep> type , name , account <identifiersep> type , 0 ) ) ; \n \t2 domain <identifiersep> vo domain = domain <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vo . get <identifiersep> domain <identifiersep> id ( ) ) ; \n \t2 string domain <identifiersep> uuid = <string_literal> ; \n \t2 if ( domain == null ) { \n <ect>
public synchronized void close ( ) { \n \t1 <comment> \n \t1 if ( this . closed ) { \n \t2 return ; } \n <ect>
\t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n \t2 < button ng - click = <string_literal> > info < / button > \n <ect>
\t3 for ( indexing <identifiersep> operation <identifiersep> listener listener : listeners ) { \n \t4 try { \n \t5 listener . pre <identifiersep> index ( shard <identifiersep> id , operation ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 mock <identifiersep> endpoint mock = get <identifiersep> mock <identifiersep> endpoint ( <string_literal> ) ; \n \t2 mock . expected <identifiersep> bodies <identifiersep> received ( <string_literal> ) ; \n \t2 template . send <identifiersep> body ( <string_literal> , <string_literal> ) ; \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( ) ; \n <ect>
\t3 for ( enumeration < ? > e = config . keys ( ) ; e . has <identifiersep> more <identifiersep> elements ( ) ; ) { \n \t4 string tv = ( string ) e . next <identifiersep> element ( ) ; \n \t4 if ( tv . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) || tv . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t5 continue ; } \n <ect>
\t2 { \n \t3 chain . do <identifiersep> filter ( http <identifiersep> request , wrapped <identifiersep> response ) ; } \n \t2 catch ( io <identifiersep> exception t ) \n \t2 { \n <ect>
\t3 callback . set <identifiersep> mime <identifiersep> type ( mime <identifiersep> type ) ; } \n \t3 generator <identifiersep> streaming <identifiersep> output . this . set <identifiersep> mime <identifiersep> type ( mime <identifiersep> type ) ; } \n \t2 } catch ( throwable th ) { \n \t2 mime <identifiersep> trace ( <string_literal> , th . get <identifiersep> message ( ) ) ; \n <ect>
\t3 checkpoint ( stateful , read , end ) ; \n \t3 return null ; } \n \t2 <comment> \n \t2 else { \n <ect>
\t2 final rest <identifiersep> response res = serializer . read <identifiersep> rest <identifiersep> response ( res <identifiersep> in ) ; \n \t2 db . put ( canonicalize ( req ) , res ) ; } \n \t1 catch ( io <identifiersep> exception e ) \n \t1 { \n <ect>
\t8 switch ( read <identifiersep> byte ) { \n \t8 case - 1 : \n \t9 if ( echo <identifiersep> socket . is <identifiersep> connected ( ) && ! echo <identifiersep> socket . is <identifiersep> closed ( ) ) { \n \t10 log . info ( <string_literal> , reader . available ( ) ) ; \n <ect>
\t4 attempts , <string_literal> + exclusion <identifiersep> set ) ; \n \t3 retry = do <identifiersep> retry <identifiersep> request (  <identifiersep> request ,  <identifiersep> context ) ; } \n \t2 else \n \t2 { \n <ect>
\t2 simple <identifiersep> crawl . setup ( ) ; \n \t2 crawl <identifiersep> overview plugin = new crawl <identifiersep> overview ( ) ; \n \t2 simple <identifiersep> crawl . crawl <identifiersep> with ( plugin ) ; \n \t2 result = plugin . get <identifiersep> result ( ) ; \n <ect>
\t5 requested <identifiersep> hosts <identifiersep> will <identifiersep> become <identifiersep> available = true ; \n \t5 } else { \n \t5 if ( node <identifiersep> info . get <identifiersep> enable <identifiersep> time ( ) > request . get <identifiersep> locality <identifiersep> delay <identifiersep> timeout ( ) && \n \t6 node <identifiersep> info . is <identifiersep> disabled ( ) && node <identifiersep> info . had <identifiersep> comm <identifiersep> failure ( ) ) { \n <ect>
\t3 new job ( i , p <identifiersep> list <identifiersep> test <identifiersep> support . task <identifiersep> type . add , iterations ) . run ( ) ; } \n \t2 log . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < num <identifiersep> lists ; i ++ ) { \n \t3 new job ( i , p <identifiersep> list <identifiersep> test <identifiersep> support . task <identifiersep> type . remove , iterations ) . run ( ) ; } \n <ect>
\t7 get <identifiersep> job <identifiersep> id ( ) , vertex . get <identifiersep> job <identifiersep> vertex <identifiersep> id ( ) , vertex . get <identifiersep> job <identifiersep> vertex ( ) . get <identifiersep> name ( ) , \n \t7 vertex . get <identifiersep> parallelism ( ) , execution . get <identifiersep> parallel <identifiersep> subtask <identifiersep> index ( ) , \n \t7 execution . get <identifiersep> attempt <identifiersep> id ( ) , new <identifiersep> execution <identifiersep> state , timestamp , message ) ; \n \t4 } catch ( throwable t ) { \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> + dv <identifiersep> switch <identifiersep> uuid ) ; \n \t4 nic = vmware <identifiersep> helper . prepare <identifiersep> dv <identifiersep> nic <identifiersep> device ( vm <identifiersep> mo , network <identifiersep> info . first ( ) , nic <identifiersep> device <identifiersep> type , network <identifiersep> info . second ( ) , dv <identifiersep> switch <identifiersep> uuid , \n \t6 nic <identifiersep> to . get <identifiersep> mac ( ) , device <identifiersep> number + 1 , true , true ) ; \n \t3 } else { \n <ect>
\t2 try { \n \t3 graph . clear ( ) ; \n \t2 } catch ( exception ex ) \n \t2 { \n <ect>
\t4 description . put <identifiersep> field ( <string_literal> , obj . to <identifiersep> string ( ) ) ; \n \t3 } if ( obj instanceof describable ) { \n \t4 ( ( describable ) obj ) . describe <identifiersep> to ( description ) ; \n \t3 } else if ( obj instanceof serializable ) { \n <ect>
\t2 end <identifiersep> bolt <identifiersep> tasks = new hash <identifiersep> set < integer > ( context . get <identifiersep> components <identifiersep> tasks ( end <identifiersep> bolts ) ) ; \n \t2 snapshot <identifiersep> state = new snapshot <identifiersep> state ( context , spouts , stateful <identifiersep> bolts , non <identifiersep> stateful <identifiersep> bolt <identifiersep> tasks , end <identifiersep> bolt <identifiersep> tasks , state <identifiersep> operator ) ; \n \t2 snapshot <identifiersep> state commit <identifiersep> state = config <identifiersep> extension . reset <identifiersep> transaction <identifiersep> topology <identifiersep> state ( conf ) ? null : ( snapshot <identifiersep> state ) state <identifiersep> operator . init <identifiersep> state ( topology <identifiersep> name ) ; \n \t2 snapshot <identifiersep> state . init <identifiersep> state ( commit <identifiersep> state ) ; \n <ect>
\t2 thread . sleep ( <number_literal> ) ; \n \t2 continue ; } \n \t1 } while ( retry <identifiersep> count ++ < op <identifiersep> max <identifiersep> retry ) ; \n \t1 if ( retry <identifiersep> count >= op <identifiersep> max <identifiersep> retry ) { \n <ect>
\t2 string new <identifiersep> index <identifiersep> uuid = client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> get <identifiersep> settings ( <string_literal> ) . get ( ) . get <identifiersep> setting ( <string_literal> , index <identifiersep> meta <identifiersep> data . setting <identifiersep> index <identifiersep> uuid ) ; \n \t2 assert <identifiersep> true ( new <identifiersep> index <identifiersep> uuid , new <identifiersep> index <identifiersep> uuid != null ) ; \n \t2 assert <identifiersep> false ( new <identifiersep> index <identifiersep> uuid , new <identifiersep> index <identifiersep> uuid . equals ( index <identifiersep> meta <identifiersep> data . index <identifiersep> uuid <identifiersep> na <identifiersep> value ) ) ; \n \t2 assert <identifiersep> false ( new <identifiersep> index <identifiersep> uuid , new <identifiersep> index <identifiersep> uuid . equals ( original <identifiersep> index <identifiersep> uuid ) ) ; \n <ect>
\t3 log . error ( <string_literal> , e ) ; } \n \t2 try { \n \t3 override <identifiersep> primary <identifiersep> keys ( result ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t5 fault = fault . with <identifiersep> var ( name <identifiersep> value <identifiersep> pair . get <identifiersep> name ( ) , name <identifiersep> value <identifiersep> pair . get <identifiersep> value ( ) ) ; } \n \t4 fault <identifiersep> logger . log ( fault ) ; \n \t2 fault <identifiersep> message = fault . to <identifiersep> string ( ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t2 try { \n \t3 gslb <identifiersep> service <identifiersep> impl . delete <identifiersep> global <identifiersep> load <identifiersep> balancer <identifiersep> rule ( delete <identifiersep> cmd ) ; \n \t3 assert . assert <identifiersep> true ( gslb <identifiersep> rule . get <identifiersep> state ( ) == global <identifiersep> load <identifiersep> balancer <identifiersep> rule . state . revoke ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 properties column <identifiersep> mapping = options . get <identifiersep> column <identifiersep> names ( ) ; \n \t1 if ( null != column <identifiersep> mapping && column <identifiersep> mapping . contains <identifiersep> key ( column <identifiersep> name ) ) { \n \t1 string type = ( string ) column <identifiersep> mapping . get ( column <identifiersep> name ) ; \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 kp = converter . get <identifiersep> key <identifiersep> pair ( ( pem <identifiersep> key <identifiersep> pair ) private <identifiersep> key <identifiersep> pem <identifiersep> object ) ; } \n \t2 final x509cert <identifiersep> parser cert <identifiersep> parser = new x509cert <identifiersep> parser ( ) ; \n \t2 <comment> \n <ect>
\t2 logger . debug ( <string_literal> + batch <identifiersep> id + <string_literal> ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> prepare <identifiersep> end ( map < string , object > parameters ) \n \t1 { \n <ect>
\t3 log . info ( thread <identifiersep> name + <string_literal> + this . get <identifiersep> sent <identifiersep> count ( ) + <string_literal> ) ; \n \t3 long t <identifiersep> end = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 long elapsed = ( t <identifiersep> end - t <identifiersep> start ) / <number_literal> ; \n \t3 log . info ( thread <identifiersep> name + <string_literal> + elapsed + <string_literal> ) ; \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name , driver ) ; \n \t1 string repl <identifiersep> dump <identifiersep> locn = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 string repl <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t1 myagg . count <identifiersep> nulls = 0 ; } \n \t1 private void print <identifiersep> debug <identifiersep> output ( string function <identifiersep> name , aggregation <identifiersep> buffer agg ) { \n \t1 boolean <identifiersep> stats <identifiersep> agg myagg = ( boolean <identifiersep> stats <identifiersep> agg ) agg ; \n \t1 log . debug ( function <identifiersep> name ) ; \n <ect>
\t4 try { \n \t5 list < write <identifiersep> tuple > output <identifiersep> list = drain <identifiersep> output <identifiersep> bundles ( size ( ) ) ; \n \t5 dequeue <identifiersep> write ( output <identifiersep> list ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void visit ( final op <identifiersep> group op <identifiersep> group ) { \n <ect>
\t6 string mss <identifiersep> root = parameter . value ( <string_literal> , <string_literal> ) ; \n \t6 string meshy <identifiersep> ports = parameter . value ( <string_literal> , <string_literal> ) ; \n \t6 string meshy <identifiersep> peers = parameter . value ( <string_literal> , <string_literal> ) ; \n \t6 for ( string port <identifiersep> group : less <identifiersep> strings . split <identifiersep> array ( meshy <identifiersep> ports , <string_literal> ) ) { \n <ect>
\t6 this . get <identifiersep> command <identifiersep> class ( ) . get <identifiersep> label ( ) , this . get <identifiersep> command <identifiersep> class ( ) . get <identifiersep> key ( ) ) ) ; } } \n \t1 private alarm get <identifiersep> alarm ( int alarm <identifiersep> type <identifiersep> code ) { \n \t2 alarm <identifiersep> type alarm <identifiersep> type = alarm <identifiersep> type . get <identifiersep> alarm <identifiersep> type ( alarm <identifiersep> type <identifiersep> code ) ; \n \t2 if ( alarm <identifiersep> type == null ) { \n <ect>
\t4 logger . trace ( <string_literal> ) ; } \n \t3 try { \n \t4 this . cache . get <identifiersep> cache ( ) . refresh ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t7 <comment> \n \t7 <comment> \n \t7 leader . zk . set <identifiersep> owner ( id , this ) ; \n \t6 } catch ( session <identifiersep> expired <identifiersep> exception e ) { \n <ect>
\t3 logger . info ( <string_literal> , partition <identifiersep> infos . size ( ) , topic ) ; \n \t3 for ( partition <identifiersep> info partition <identifiersep> info : partition <identifiersep> infos ) { \n \t4 if ( result . get <identifiersep> source <identifiersep> partition <identifiersep> offset <identifiersep> start ( ) . contains <identifiersep> key ( partition <identifiersep> info . partition ( ) ) == false ) { \n \t5 long earliest = kafka <identifiersep> client . get <identifiersep> earliest <identifiersep> offset ( consumer , topic , partition <identifiersep> info . partition ( ) ) ; \n <ect>
\t3 test <identifiersep> sub ( <string_literal> , <string_literal> , <string_literal> ) ; \n \t2 } catch ( null <identifiersep> pointer <identifiersep> exception ex ) { \n \t3 if ( is <identifiersep> probably <identifiersep> ibmjvm ( ) ) \n \t4 <comment> \n <ect>
\t2 command . add ( <string_literal> ) ; \n \t2 command . add ( <string_literal> + parent <identifiersep> dir + <string_literal> + extract <identifiersep> mount <identifiersep> point ) ; \n \t2 result = command . execute ( ) ; \n \t2 if ( result != null ) { \n <ect>
\t7 + default <identifiersep> if <identifiersep> null ( wrapped <identifiersep> request . get <identifiersep> path <identifiersep> info ( ) , empty <identifiersep> string ) ; \n \t2 string path = original <identifiersep> path ; \n \t2 boolean parameter <identifiersep> substituted = false ; \n <ect>
\t3 populate <identifiersep> java <identifiersep> property <identifiersep> variables ( ) ; \n \t2 } catch ( exception e ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> , e ) ; } } \n \t1 public static void cleanup ( ) { \n <ect>
\t3 node <identifiersep> registrations . put ( deployment . get <identifiersep> register <identifiersep> node <identifiersep> url ( ) , reg <identifiersep> context ) ; \n \t3 log . debugf ( <string_literal> , host ) ; \n \t2 } catch ( server <identifiersep> request . http <identifiersep> failure failure ) { \n \t3 log . error ( <string_literal> ) ; \n <ect>
\t3 assert v2 . get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> class ( ) . get <identifiersep> name ( ) . contains ( <string_literal> ) ; \n \t3 <comment> \n \t3 cache2 . evict ( key ) ; \n \t3 v2 = cache2 . promote ( key ) ; \n <ect>
\t3 responder . check <identifiersep> error ( ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( object ) ; \n \t3 log . info ( log . fac <identifiersep> test , <string_literal> + object . name ( ) + <string_literal> + verify . name ( ) ) ; \n \t3 assert . assert <identifiersep> true ( versioning <identifiersep> profile . get <identifiersep> last <identifiersep> version <identifiersep> as <identifiersep> long ( object . name ( ) ) == versioning <identifiersep> profile . get <identifiersep> last <identifiersep> version <identifiersep> as <identifiersep> long ( verify . name ( ) ) ) ; \n <ect>
\t5 send <identifiersep> mute <identifiersep> command ( item <identifiersep> name , sonance <identifiersep> consts . mute <identifiersep> on + group , out <identifiersep> to <identifiersep> server , i ) ; \n \t4 } else if ( new <identifiersep> state . equals ( on <identifiersep> off <identifiersep> type . on ) ) { \n \t5 send <identifiersep> mute <identifiersep> command ( item <identifiersep> name , sonance <identifiersep> consts . mute <identifiersep> off + group , out <identifiersep> to <identifiersep> server , i ) ; \n \t4 } else { \n <ect>
\t2 <comment> \n \t2 log . debug ( <string_literal> ) ; \n \t2 meta <identifiersep> class <identifiersep> registry meta <identifiersep> class <identifiersep> registry = groovy <identifiersep> system . get <identifiersep> meta <identifiersep> class <identifiersep> registry ( ) ; \n \t2 for ( final class < ? > the <identifiersep> class : classes ) { \n <ect>
\t3 log <identifiersep> messages . logger . error ( messages . messages . failed <identifiersep> to <identifiersep> turn <identifiersep> code <identifiersep> into <identifiersep> token ( ) ) ; \n \t3 send <identifiersep> error ( response . status . forbidden . get <identifiersep> status <identifiersep> code ( ) ) ; \n \t3 return false ; } \n \t2 log <identifiersep> messages . logger . debug ( messages . messages . media <identifiersep> type ( res . get <identifiersep> media <identifiersep> type ( ) ) ) ; \n <ect>
\t2 interceptor . ret <identifiersep> interceptor = new interceptor <identifiersep> adapter ( ) { \n \t3 @ nullable @ override public object on <identifiersep> get ( object key , object val ) { \n \t4 return null ; } \n \t2 } ; \n <ect>
\t4 extractor <identifiersep> instance = named <identifiersep> entity <identifiersep> extractor <identifiersep> class . get <identifiersep> declared <identifiersep> constructor ( new class [ ] { string . class } ) . new <identifiersep> instance ( model <identifiersep> path ) ; \n \t4 this . available = true ; } \n \t2 } catch ( exception e ) { \n \t3 log . warn ( <string_literal> , e . get <identifiersep> message ( ) , model <identifiersep> path ) ; } \n <ect>
\t1 @ override \n \t1 @ db \n \t1 public void update <identifiersep> async <identifiersep> job <identifiersep> attachment ( final long job <identifiersep> id , final string instance <identifiersep> type , final long instance <identifiersep> id ) { \n <ect>
\t1 } catch ( meta <identifiersep> exception e ) { \n \t2 log . error ( <string_literal> + ep , e ) ; \n \t2 throw new partition <identifiersep> creation <identifiersep> failed ( ep , e ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> object <identifiersep> exception e ) { \n <ect>
\t4 } else { \n \t5 m <identifiersep> socket = new datagram <identifiersep> socket ( ) ; \n \t5 m <identifiersep> local <identifiersep> port = m <identifiersep> socket . get <identifiersep> local <identifiersep> port ( ) ; \n \t5 m <identifiersep> local <identifiersep> address = m <identifiersep> socket . get <identifiersep> local <identifiersep> address ( ) ; } } \n <ect>
\t4 . put ( elect <identifiersep> master <identifiersep> service . discovery <identifiersep> zen <identifiersep> minimum <identifiersep> master <identifiersep> nodes <identifiersep> setting . get <identifiersep> key ( ) , <number_literal> ) \n \t4 . build ( ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> master <identifiersep> only <identifiersep> nodes ( <number_literal> , shared <identifiersep> settings ) ; \n \t2 string data <identifiersep> node = internal <identifiersep> cluster ( ) . start <identifiersep> data <identifiersep> only <identifiersep> node ( shared <identifiersep> settings ) ; \n <ect>
\t1 if ( output . failed ( ) || string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( output . error ) ) { \n \t1 if ( output . return <identifiersep> value == resource <identifiersep> not <identifiersep> found && output . error . contains ( <string_literal> ) ) { \n \t2 log . debug ( <string_literal> + volume <identifiersep> id + <string_literal> ) ; \n \t2 throw new resource <identifiersep> not <identifiersep> found <identifiersep> exception ( <string_literal> + tid ) ; } \n <ect>
\t4 bind <identifiersep> gpio <identifiersep> pin ( ( mcp23017binding <identifiersep> provider ) provider , item <identifiersep> name ) ; \n \t4 logger . debug ( <string_literal> , item <identifiersep> name , all <identifiersep> item <identifiersep> names ) ; \n \t3 } else { \n \t4 un <identifiersep> bind <identifiersep> gpio <identifiersep> pin ( ( mcp23017binding <identifiersep> provider ) provider , item <identifiersep> name ) ; \n <ect>
\t3 destination result = new destination ( ) ; \n \t3 result . from <identifiersep> base64 ( hostname ) ; \n \t3 return result ; \n \t2 } catch ( data <identifiersep> format <identifiersep> exception dfe ) { \n <ect>
\t2 log . info ( <string_literal> + plan . size ( ) ) ; } \n \t1 @ override \n \t1 public void visit ( ) throws visitor <identifiersep> exception { \n \t2 super . visit ( ) ; \n <ect>
\t4 target . append ( port ) ; } \n \t3 return target . to <identifiersep> string ( ) ; } \n \t2 catch ( uri <identifiersep> syntax <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 result . add <identifiersep> all ( e . get <identifiersep> successful <identifiersep> nodes ( ) ) ; } \n \t1 result = verify <identifiersep> hosts ( result ) ; \n \t1 for ( node <identifiersep> metadata node : result ) { \n \t2 m <identifiersep> live <identifiersep> hosts . put ( public <identifiersep> ip <identifiersep> or <identifiersep> hostname ( node ) , system . current <identifiersep> time <identifiersep> millis ( ) ) ; } \n <ect>
\t2 try { \n \t3 usage <identifiersep> event <identifiersep> utils . publish <identifiersep> usage <identifiersep> event ( type , vm <identifiersep> snapshot . get <identifiersep> account <identifiersep> id ( ) , user <identifiersep> vm . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , user <identifiersep> vm . get <identifiersep> id ( ) , vm <identifiersep> snapshot . get <identifiersep> name ( ) , 0l , 0l , vm <identifiersep> snap <identifiersep> size , virtual <identifiersep> size , \n \t5 vm <identifiersep> snapshot . class . get <identifiersep> name ( ) , vm <identifiersep> snapshot . get <identifiersep> uuid ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 try { \n \t3 convert <identifiersep> sub <identifiersep> tree ( sub <identifiersep> tree ) ; \n \t2 } catch ( exception err ) { \n <ect>
\t4 <comment> \n \t4 alarm alarm = get <identifiersep> alarm ( alarm <identifiersep> type <identifiersep> code ) ; \n \t4 if ( alarm != null ) { \n \t5 alarm . set <identifiersep> initialised ( ) ; \n <ect>
\t4 continue ; } \n \t3 if ( is <identifiersep> ignore <identifiersep> idle <identifiersep> consumers ( ) && subscriber . get <identifiersep> dispatched <identifiersep> queue <identifiersep> size ( ) == 0 ) { \n \t4 <comment> \n \t4 if ( slow <identifiersep> consumers . remove ( subscriber ) != null ) { \n <ect>
\t2 try { \n \t2 conn . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception sql ) { \n \t2 <comment> \n <ect>
\t4 logger . debug ( <string_literal> , t ) ; } \n \t3 try { \n \t4 on <identifiersep> throwable ( event ) ; \n \t3 } catch ( throwable t2 ) { \n <ect>
<comment> \n \t1 public detected <identifiersep> ip [ ] get <identifiersep> address ( ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 redirect <identifiersep> uri <identifiersep> builder . append ( <string_literal> + url . get <identifiersep> authority ( ) ) ; \n \t4 redirect <identifiersep> uri <identifiersep> builder . append ( url . get <identifiersep> path ( ) . replace <identifiersep> first ( rule . get <identifiersep> key ( ) , rule . get <identifiersep> value ( ) ) ) ; \n \t4 return redirect <identifiersep> uri <identifiersep> builder . to <identifiersep> string ( ) ; \n \t3 } catch ( malformed <identifiersep> url <identifiersep> exception ex ) { \n <ect>
\t1 public query <identifiersep> iterator exec ( binding binding , prop <identifiersep> func <identifiersep> arg arg <identifiersep> subject , \n \t3 node predicate , prop <identifiersep> func <identifiersep> arg arg <identifiersep> object , execution <identifiersep> context exec <identifiersep> cxt ) { \n \t2 if ( server == null ) { \n \t3 if ( ! warning <identifiersep> issued ) { \n <ect>
\t4 for ( exception e : exceptions ) { \n \t5 e . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t4 fail ( <string_literal> ) ; } \n \t2 } catch ( assertion <identifiersep> error ae ) { \n <ect>
\t1 final o <identifiersep> document doc = ( o <identifiersep> document ) ( use <identifiersep> cache ? \n \t2 configuration <identifiersep> map . get <identifiersep> local <identifiersep> cached <identifiersep> value ( config <identifiersep> node <identifiersep> prefix + i <identifiersep> node <identifiersep> id ) : \n \t2 configuration <identifiersep> map . get ( config <identifiersep> node <identifiersep> prefix + i <identifiersep> node <identifiersep> id ) ) ; \n \t1 if ( doc == null ) \n <ect>
\t5 } else { \n \t6 connection . this . factory . all <identifiersep> channels . add ( channel ) ; \n \t6 if ( ! future . is <identifiersep> success ( ) ) { \n <ect>
\t5 direct <identifiersep> byte <identifiersep> buffer <identifiersep> free <identifiersep> method . set <identifiersep> accessible ( true ) ; \n \t5 direct <identifiersep> byte <identifiersep> buffer <identifiersep> free <identifiersep> method . invoke ( direct <identifiersep> byte <identifiersep> buffer ) ; \n \t5 success = true ; \n \t4 } catch ( illegal <identifiersep> access <identifiersep> exception | illegal <identifiersep> argument <identifiersep> exception | invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t4 try { \n \t5 while ( running . get ( ) ) { \n \t6 data <identifiersep> tree . dump <identifiersep> ephemerals ( pwriter ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t1 public void add <identifiersep> expire <identifiersep> time <identifiersep> for <identifiersep> endpoint ( inet <identifiersep> address endpoint , long expire <identifiersep> time ) \n \t1 { \n \t2 { \n <ect>
\t3 if ( this . is <identifiersep> initializable ( component . get <identifiersep> class ( ) . get <identifiersep> interfaces ( ) ) ) { \n \t4 try { \n \t5 ( ( initializable ) component ) . initialize ( ) ; \n \t4 } catch ( initialization <identifiersep> exception e ) { \n <ect>
\t1 public static void run <identifiersep> flink <identifiersep> zk <identifiersep> quorum <identifiersep> peer ( string zk <identifiersep> config <identifiersep> file , int peer <identifiersep> id ) throws exception { \n \t2 properties zk <identifiersep> props = new properties ( ) ; \n \t2 try ( input <identifiersep> stream in <identifiersep> stream = new file <identifiersep> input <identifiersep> stream ( new file ( zk <identifiersep> config <identifiersep> file ) ) ) { \n \t3 zk <identifiersep> props . load ( in <identifiersep> stream ) ; } \n <ect>
\t3 error = new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n \t2 if ( error == null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t2 int count =  <identifiersep> lock <identifiersep> master . owns ( <string_literal> + <number_literal> ) ; \n \t2 assert . assert <identifiersep> equals ( count , <number_literal> ) ; \n \t2 count =  <identifiersep> lock <identifiersep> master . owns ( <string_literal> + <number_literal> ) ; \n \t2 assert . assert <identifiersep> equals ( count , 1 ) ; \n <ect>
\t5 parse <identifiersep> scenario ( include <identifiersep> path ) ; \n \t4 } else { \n \t5 logger . warn ( <string_literal> + line ) ; } \n \t3 } else { \n <ect>
\t3 public void configure ( ) throws exception { \n \t4 from ( <string_literal> ) . transform ( constant ( <string_literal> ) ) ; \n \t4 from ( <string_literal> ) . process ( new processor ( ) { \n \t5 public void process ( exchange exchange ) throws exception { \n <ect>
\t2 snapshot <identifiersep> info snapshot <identifiersep> info = wait <identifiersep> for <identifiersep> completion ( <string_literal> , <string_literal> , time <identifiersep> value . time <identifiersep> value <identifiersep> seconds ( <number_literal> ) ) ; \n \t2 logger . info ( <string_literal> , snapshot <identifiersep> info . shard <identifiersep> failures ( ) . size ( ) ) ; \n \t2 logger . info ( <string_literal> ) ; } \n \t1 public void test <identifiersep> snapshot <identifiersep> with <identifiersep> stuck <identifiersep> node ( ) throws exception { \n <ect>
\t7 break ; \n \t6 case broker <identifiersep> subscription <identifiersep> info . data <identifiersep> structure <identifiersep> type : \n \t7 break ; \n \t6 default : \n <ect>
\t4 return ; } \n \t3 druid <identifiersep> connection <identifiersep> holder holder = this . holder ; \n \t3 if ( holder == null ) { \n \t4 if ( dup <identifiersep> close <identifiersep> log <identifiersep> enable ) { \n <ect>
\t3 ) ; \n \t3 break ; \n \t2 case console <identifiersep> proxy <identifiersep> alert <identifiersep> event <identifiersep> args . proxy <identifiersep> down : \n <ect>
\t3 return ; \n \t2 } catch ( cms <identifiersep> exception ex ) { \n \t3 resp . set <identifiersep> status ( cms <identifiersep> webdav <identifiersep> status . sc <identifiersep> internal <identifiersep> server <identifiersep> error ) ; \n \t3 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t5 if ( classloader != null ) { \n \t6 this . auth <identifiersep> service = ( x <identifiersep> wiki <identifiersep> auth <identifiersep> service ) class . for <identifiersep> name ( auth <identifiersep> class , true , classloader ) . new <identifiersep> instance ( ) ; \n \t5 } else { \n \t6 this . auth <identifiersep> service = ( x <identifiersep> wiki <identifiersep> auth <identifiersep> service ) class . for <identifiersep> name ( auth <identifiersep> class ) . new <identifiersep> instance ( ) ; } \n <ect>
\t1 lb = load <identifiersep> balancers . get <identifiersep> loadbalancer ( account <identifiersep> number , lb <identifiersep> name ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n \t1 return ; \n \t1 } catch ( exception ex ) { \n <ect>
\t4 logger . debug ( e . get <identifiersep> message ( ) , e ) ; \n \t3 } finally { \n \t4 handler . destroy ( ) ; } } \n \t2 if ( ! found <identifiersep> valid <identifiersep> credential ) { \n <ect>
\t2 collection < file > store <identifiersep> files = file <identifiersep> utils . list <identifiersep> files ( store <identifiersep> dir , new wildcard <identifiersep> file <identifiersep> filter ( <string_literal> ) , get <identifiersep> store <identifiersep> file <identifiersep> filter ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , 0 , store <identifiersep> files . size ( ) ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> store <identifiersep> cleanup <identifiersep> delete <identifiersep> dest2first ( ) throws exception { \n <ect>
<comment> \n \t1 @ deprecated \n \t1 public void set <identifiersep> max <identifiersep> connection <identifiersep> age ( long max <identifiersep> connection <identifiersep> age <identifiersep> in <identifiersep> seconds ) { \n <ect>
\t2 input <identifiersep> stream in = class <identifiersep> loader . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( uri ) ; \n \t2 if ( in == null ) { \n \t3 in = log <identifiersep> writer <identifiersep> finder . class . get <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( uri ) ; \n \t3 if ( in == null ) { \n <ect>
\t3 if ( response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> unauthorized ) { \n \t4 method . release <identifiersep> connection ( ) ; \n \t4 response =  <identifiersep> client . execute ( method ) ; } \n \t2 } catch ( final io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void internal <identifiersep> receive <identifiersep> command ( string item <identifiersep> name , command command ) { \n <ect>
\t2 if ( heartbeat == null ) { \n \t3 break ; } \n \t2 process <identifiersep> heartbeat ( heartbeat ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 appender appender = new default <identifiersep> test <identifiersep> appender ( ) { \n \t3 @ override \n \t3 public void do <identifiersep> append ( logging <identifiersep> event event ) { \n \t4 if ( event . get <identifiersep> level ( ) . equals ( level . info ) && event . get <identifiersep> message ( ) . to <identifiersep> string ( ) . contains ( <string_literal> ) ) { \n <ect>
\t2 @ override \n \t2 public void on <identifiersep> ping ( string ping ) { } \n \t2 @ override \n \t2 public void on <identifiersep> quit ( irc <identifiersep> user user , string msg ) { \n <ect>
\t2 vec ( 0 until n1 ) : = vector <identifiersep> a \n \t2 vec ( n1 until n ) : = vector <identifiersep> b \n \t2 key <identifiersep> a - > vec } \n \t1 } else { \n <ect>
\t5 generate <identifiersep> ruleset <identifiersep> cmd ( vm . get <identifiersep> instance <identifiersep> name ( ) , vm . get <identifiersep> private <identifiersep> ip <identifiersep> address ( ) , nic . get <identifiersep> i <identifiersep> pv6address ( ) , vm . get <identifiersep> private <identifiersep> mac <identifiersep> address ( ) , vm . get <identifiersep> id ( ) , null , work . get <identifiersep> logsequence <identifiersep> number ( ) , \n \t6 ingress <identifiersep> rules , egress <identifiersep> rules , nic <identifiersep> sec <identifiersep> ips ) ; \n \t4 cmd . set <identifiersep> ms <identifiersep> id (  <identifiersep> server <identifiersep> id ) ; \n <ect>
\t7 if (  <identifiersep> console <identifiersep> proxy <identifiersep> dao . get <identifiersep> proxy <identifiersep> active <identifiersep> load ( proxy . get <identifiersep> id ( ) ) <  <identifiersep> capacity <identifiersep> per <identifiersep> proxy || has <identifiersep> previous <identifiersep> session ( proxy , vm ) ) { \n \t9 s <identifiersep> logger . trace ( <string_literal> + vm <identifiersep> id ) ; } \n \t8 if ( proxy . get <identifiersep> active <identifiersep> session ( ) >=  <identifiersep> capacity <identifiersep> per <identifiersep> proxy ) { \n <ect>
\t2 synchronized ( names <identifiersep> lock ) { \n \t3 assert . assert <identifiersep> not <identifiersep> null ( names ) ; \n \t3 assert . assert <identifiersep> true ( names . size ( ) == <number_literal> ) ; \n \t3 for ( content <identifiersep> name cn : names ) { \n <ect>
\t8 final message <identifiersep> producer producer = session . create <identifiersep> producer ( new active <identifiersep> mq <identifiersep> queue ( <string_literal> + ( j%destination <identifiersep> count ) ) ) ; \n \t8 producer . send ( session . create <identifiersep> message ( ) ) ; } \n \t7 connection . close ( ) ; \n \t7 all <identifiersep> done . count <identifiersep> down ( ) ; \n <ect>
\t6 s <identifiersep> logger . warn ( <string_literal> + vm + <string_literal> + state . migrating + <string_literal> ) ; \n \t6 return false ; } } \n \t3 } else if ( state == state . running ) { \n \t4 if ( ! send <identifiersep> stop ( guru , profile , clean <identifiersep> up <identifiersep> even <identifiersep> if <identifiersep> unable <identifiersep> to <identifiersep> stop , false ) ) { \n <ect>
\t5 <string_literal> + num <identifiersep> pages <identifiersep> split . get ( ) ) ; \n \t3 if ( track <identifiersep> encoding <identifiersep> byte <identifiersep> usage ) { \n \t4 log . info ( metrics <identifiersep> util . histogram <identifiersep> to <identifiersep> string ( <string_literal> , metrics . encode <identifiersep> first <identifiersep> key <identifiersep> size ) ) ; \n \t4 log . info ( metrics <identifiersep> util . histogram <identifiersep> to <identifiersep> string ( <string_literal> , metrics . encode <identifiersep> next <identifiersep> first <identifiersep> key <identifiersep> size ) ) ; \n <ect>
\t2 xdom xdom ; \n \t2 try { \n \t3 xdom = get <identifiersep> xdom ( template ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t2 if ( result [ i ] < = 0 ) { \n \t2 logger . error ( <string_literal> , period ) ; \n \t2 errors = true ; } \n \t1 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t5 legend <identifiersep> properties ,  <identifiersep> width ,  <identifiersep> height ) ; \n \t3 axis <identifiersep> chart . set <identifiersep> graphics2d ( ( graphics2d ) g ) ; \n \t3 axis <identifiersep> chart . render ( ) ; \n \t2 } catch ( chart <identifiersep> data <identifiersep> exception | property <identifiersep> exception e ) { \n <ect>
\t4 pos2 = s . index <identifiersep> of ( pck <identifiersep> generator . termination , pos1 ) ; } \n \t3 this . read <identifiersep> buffer . limit ( this . read <identifiersep> buffer . capacity ( ) ) ; \n \t3 this . read <identifiersep> buffer . position ( n - a <identifiersep> pos ) ; <comment> \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception ex ) { \n <ect>
\t1 protected void send <identifiersep> lease <identifiersep> search ( router <identifiersep> info router ) { \n \t2 hash to = router . get <identifiersep> identity ( ) . get <identifiersep> hash ( ) ; \n \t2 tunnel <identifiersep> info in <identifiersep> tunnel = get <identifiersep> context ( ) . tunnel <identifiersep> manager ( ) . select <identifiersep> inbound <identifiersep> exploratory <identifiersep> tunnel ( to ) ; \n \t2 if ( in <identifiersep> tunnel == null ) { \n <ect>
\t4 try { \n \t5 get <identifiersep> ratings <identifiersep> manager ( document <identifiersep> ref ) . update <identifiersep> user <identifiersep> reputation ( rating . get <identifiersep> author ( ) , voter <identifiersep> rating ) ; \n \t4 } catch ( ratings <identifiersep> exception re ) { \n \t5 if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t3 if ( slave != null ) { \n \t4 try { \n \t5 slave . update <identifiersep> items ( items ) ; \n \t4 } catch ( exception e ) { \n <ect>
<number_literal> endpoint , \n <number_literal> host <identifiersep> id ) ) ; } } \n \t3 uuid stored <identifiersep> id = endpoint <identifiersep> to <identifiersep> host <identifiersep> id <identifiersep> map . get ( endpoint ) ; \n \t3 if ( ( stored <identifiersep> id != null ) && ( ! stored <identifiersep> id . equals ( host <identifiersep> id ) ) ) \n <ect>
\t2 try { \n \t3 context . turn <identifiersep> off <identifiersep> authorisation <identifiersep> system ( ) ; \n \t3 community <identifiersep> service . delete ( context , owning <identifiersep> community ) ; \n \t2 } catch ( sql <identifiersep> exception | authorize <identifiersep> exception | io <identifiersep> exception ex ) { \n <ect>
\t3 perf <identifiersep> test <identifiersep> service . mark <identifiersep> progress <identifiersep> and <identifiersep> status <identifiersep> and <identifiersep> finish <identifiersep> time <identifiersep> and <identifiersep> statistics ( perf <identifiersep> test , status . stop <identifiersep> by <identifiersep> error , \n \t5 <string_literal> ) ; \n \t2 } catch ( exception e ) { \n \t3 log . error ( <string_literal> , perf <identifiersep> test . get <identifiersep> test <identifiersep> identifier ( ) , e . get <identifiersep> message ( ) ) ; \n <ect>
\t7 found = true ; \n \t6 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t7 log . debug ( <string_literal> + pid <identifiersep> text + <string_literal> + message ) ; } } } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n \t3 if ( success ) \n \t4  <identifiersep> log . warn ( <string_literal> + port + <string_literal> + addresses . to <identifiersep> string ( ip , external <identifiersep> port ) ) ; \n \t3 else \n <ect>
\t5 opt <identifiersep> param = new optional <identifiersep> parameter . int ( key , ( integer ) value ) ; \n \t4 } else if ( value instanceof short ) { \n \t5 opt <identifiersep> param = new optional <identifiersep> parameter . short ( key , ( short ) value ) ; \n \t4 } else { \n <ect>
\t2 boolean task <identifiersep> output <identifiersep> caching <identifiersep> enabled = state . get <identifiersep> task <identifiersep> output <identifiersep> caching ( ) . is <identifiersep> enabled ( ) ; \n \t2 sorted <identifiersep> set < resolved <identifiersep> task <identifiersep> output <identifiersep> file <identifiersep> property <identifiersep> spec > output <identifiersep> properties = null ; \n \t2 if ( task <identifiersep> output <identifiersep> caching <identifiersep> enabled ) { \n \t3 if ( task . is <identifiersep> has <identifiersep> custom <identifiersep> actions ( ) ) { \n <ect>
\t6 . start <identifiersep> object ( <string_literal> ) . field ( <string_literal> , <string_literal> ) . field ( <string_literal> , true ) . end <identifiersep> object ( ) \n \t6 . start <identifiersep> object ( <string_literal> ) . field ( <string_literal> , <string_literal> ) . field ( <string_literal> , true ) . end <identifiersep> object ( ) \n \t6 . end <identifiersep> object ( ) . end <identifiersep> object ( ) . end <identifiersep> object ( ) ) \n \t4 . execute ( ) . action <identifiersep> get ( ) ; \n <ect>
\t5 if ( txn != null ) { \n \t6 txn . close ( ) ; } \n \t5 lock . unlock ( ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t3 } else { \n \t4 logger . log ( level . info , <string_literal> ) ; \n \t4 history <identifiersep> guru . get <identifiersep> instance ( ) . create <identifiersep> cache ( ) ; \n <ect>
\t1 public k8055binding ( ) { } \n \t1 protected boolean connect ( ) { \n \t2 try { \n \t3 if ( sys <identifiersep> library == null ) { \n <ect>
public string address1 ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <string_literal> ) ; } \n public void set <identifiersep> address1 ( string value ) { \n <ect>
\t3 set <identifiersep> properly <identifiersep> configured ( true ) ; \n \t2 } else if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( serial <identifiersep> port <identifiersep> string ) ) { \n \t3 serial <identifiersep> port = serial <identifiersep> port <identifiersep> string ; \n \t3 host = null ; \n <ect>
\t4 ( is <identifiersep> task <identifiersep> successful ( check <identifiersep> idl <identifiersep> task ) && ! ( check <identifiersep> idl <identifiersep> task . is <identifiersep> equivalent ) ) \n \t3 ) \n \t3 ) \n \t2 ) } } \n <ect>
\t3 return token <identifiersep> eof ; \n \t2 token t = peek <identifiersep> tokens . next ( ) ; \n \t2 curr <identifiersep> line = t . get <identifiersep> line ( ) ; \n \t2 curr <identifiersep> col = t . get <identifiersep> column ( ) ; \n <ect>
\t1 if ( success ) { \n \t1 operation <identifiersep> mode = operation <identifiersep> mode <identifiersep> stopped ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 } else { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t6 break ; } \n \t4 try { \n \t5 return new string ( decoder . decode ( input ) ) ; \n \t4 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t9 . count <identifiersep> down <identifiersep> latch ( <string_literal> , <number_literal> , false , true ) ; \n \t8 assert latch != null && latch . count ( ) == <number_literal> ; \n \t8 log . info ( <string_literal> + thread . current <identifiersep> thread ( ) . get <identifiersep> name ( ) ) ; \n \t8 assert latch . await ( 1 , minutes ) ; \n <ect>
\t3 logger . debug ( <string_literal> , ticket . get <identifiersep> id ( ) ) ; \n \t3 final ticket <identifiersep> holder holder = build <identifiersep> ticket <identifiersep> as <identifiersep> document ( ticket ) ; \n \t3 final ticket <identifiersep> definition metadata = this . ticket <identifiersep> catalog . find ( ticket ) ; \n \t3 if ( metadata == null ) { \n <ect>
<comment> \n public void release ( ) throws io <identifiersep> exception { \n \t1 lock <identifiersep> file <identifiersep> stream . close ( ) ; \n \t1 if ( ! fs . delete ( lock <identifiersep> file , false ) ) { \n <ect>
\t8 server <identifiersep> wf . set ( ( wire <identifiersep> format <identifiersep> info ) command ) ; \n \t8 negociation <identifiersep> counter . count <identifiersep> down ( ) ; } } \n \t6 public void on <identifiersep> exception ( io <identifiersep> exception error ) { \n \t7 if ( ! ignore <identifiersep> asyc <identifiersep> error . get ( ) ) { \n <ect>
\t2 if ( key == null ) { \n \t3 log . warn ( <string_literal> , e ) ; \n \t3 return null ; } \n \t2 if ( value == null ) { \n <ect>
\t2 decoder . set <identifiersep> parser <identifiersep> pool ( this . parser <identifiersep> pool ) ; \n \t2 decoder . initialize ( ) ; \n \t2 decoder . decode ( ) ; \n \t2 final message <identifiersep> context message <identifiersep> context = decoder . get <identifiersep> message <identifiersep> context ( ) ; \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + values . get ( <string_literal> ) ) ; \n \t2 } else if ( response <identifiersep> code == <number_literal> ) { \n \t3 input <identifiersep> stream is = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t3 map < string , string > error <identifiersep> info = test <identifiersep> client <identifiersep> with <identifiersep> api . get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> , <string_literal> } ) ; \n <ect>
\t1 @ db \n \t1 public boolean prepare ( final network network , final nic <identifiersep> profile nic , final virtual <identifiersep> machine <identifiersep> profile vm , deploy <identifiersep> destination dest , reservation <identifiersep> context context ) \n \t3 throws concurrent <identifiersep> operation <identifiersep> exception , resource <identifiersep> unavailable <identifiersep> exception , insufficient <identifiersep> capacity <identifiersep> exception { \n \t2 if ( ! is <identifiersep> type <identifiersep> supported ( vm . get <identifiersep> type ( ) ) ) { \n <ect>
\t3 do { \n \t4 available <identifiersep> input . append ( ( char ) input <identifiersep> stream . read ( ) ) ; \n \t3 } while ( 0 < input <identifiersep> stream . available ( ) ) ; \n \t2 } catch ( socket <identifiersep> timeout <identifiersep> exception timeout <identifiersep> ex ) { \n <ect>
\t2 list < service <identifiersep> offering <identifiersep> vo > service <identifiersep> offerings <identifiersep> for <identifiersep> this <identifiersep> domain =  <identifiersep> offerings <identifiersep> dao . find <identifiersep> service <identifiersep> offering <identifiersep> by <identifiersep> domain <identifiersep> id ( domain <identifiersep> id ) ; \n \t2 for ( service <identifiersep> offering <identifiersep> vo service <identifiersep> offering : service <identifiersep> offerings <identifiersep> for <identifiersep> this <identifiersep> domain ) { \n \t3  <identifiersep> offerings <identifiersep> dao . remove ( service <identifiersep> offering . get <identifiersep> id ( ) ) ; } } \n \t1 protected boolean cleanup <identifiersep> domain ( long domain <identifiersep> id , long owner <identifiersep> id ) throws concurrent <identifiersep> operation <identifiersep> exception , resource <identifiersep> unavailable <identifiersep> exception { \n <ect>
\t5 else if ( meta . get <identifiersep> parameter <identifiersep> type ( ) == database <identifiersep> meta <identifiersep> data . procedure <identifiersep> column <identifiersep> in <identifiersep> out ) { \n \t6 work <identifiersep> params . add ( provider . create <identifiersep> default <identifiersep> in <identifiersep> out <identifiersep> parameter ( param <identifiersep> name <identifiersep> to <identifiersep> use , meta ) ) ; \n \t6 out <identifiersep> param <identifiersep> names . add ( param <identifiersep> name <identifiersep> to <identifiersep> use ) ; \n <ect>
\t5 + <string_literal> ) ; \n \t2 try { \n \t3 thread . sleep ( time <identifiersep> unit . seconds . to <identifiersep> millis ( proxy <identifiersep> pause <identifiersep> sec ) ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 private void log <identifiersep> and <identifiersep> mark <identifiersep> indexes <identifiersep> failed ( set < index > indexes , throwable index <identifiersep> build <identifiersep> failure ) \n \t1 { \n \t2 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( index <identifiersep> build <identifiersep> failure ) ; \n \t2 if ( index <identifiersep> build <identifiersep> failure != null ) \n <ect>
\t1 @ override \n \t1 public void shutdown ( network <identifiersep> profile profile , network <identifiersep> offering offering ) { \n \t2 network <identifiersep> vo network <identifiersep> object = network <identifiersep> dao . find <identifiersep> by <identifiersep> id ( profile . get <identifiersep> id ( ) ) ; \n \t2 if ( network <identifiersep> object . get <identifiersep> broadcast <identifiersep> domain <identifiersep> type ( ) != broadcast <identifiersep> domain <identifiersep> type . open <identifiersep> daylight || network <identifiersep> object . get <identifiersep> broadcast <identifiersep> uri ( ) == null ) { \n <ect>
\t3 result <identifiersep> set rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( rs . next ( ) ) { \n \t4 return rs . get <identifiersep> long ( 1 ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
<comment> \n \t1 protected auth <identifiersep> challenge resolve <identifiersep> code ( string code ) { \n \t2 <comment> \n \t2 if ( ! is <identifiersep> request <identifiersep> secure ( ) && deployment . get <identifiersep> ssl <identifiersep> required ( ) . is <identifiersep> required ( facade . get <identifiersep> request ( ) . get <identifiersep> remote <identifiersep> addr ( ) ) ) { \n <ect>
\t3 writer . write ( ' \\ n' ) ; \n \t3 writer . flush ( ) ; \n \t3 log . info ( <string_literal> , i , reader . read <identifiersep> line ( ) ) ; \n \t3 thread . sleep ( <number_literal> ) ; } \n <ect>
\t3 while ( ! shutdown ) { \n \t4 try { \n \t5 execute ( ) ; \n \t4 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t3 return ; } \n \t2 final list < x509crl > expired <identifiersep> crls = new array <identifiersep> list < > ( ) ; \n \t2 final list < x509crl <identifiersep> entry > revoked <identifiersep> crls ; \n \t2 crls . stream ( ) . filter ( cert <identifiersep> utils : : is <identifiersep> expired ) . for <identifiersep> each ( crl - > { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 logger . info ( line ) ; } \n \t1 private void print <identifiersep> authentication <identifiersep> failed ( o <identifiersep> auth <identifiersep> exception ex ) { \n \t2 logger . info ( line ) ; \n <ect>
\t9 iterator . remove ( ) ; \n \t9 try { \n \t10  <identifiersep> executor . execute ( new rebalance <identifiersep> task ( host <identifiersep> id , transfer <identifiersep> map . get <identifiersep> initial <identifiersep> owner ( ) , transfer <identifiersep> map . get <identifiersep> future <identifiersep> owner ( ) ) ) ; \n \t9 } catch ( final rejected <identifiersep> execution <identifiersep> exception ex ) { \n <ect>
\t4 log . warn ( <string_literal> , ce ) ; } \n \t3 catch ( java . io . io <identifiersep> exception ioe ) { \n \t4 err <identifiersep> msg = ioe . get <identifiersep> message ( ) ; \n \t4 err <identifiersep> code = <string_literal> ; \n <ect>
\t1 private long get <identifiersep> stored <identifiersep> sequence <identifiersep> id <identifiersep> for <identifiersep> message ( message <identifiersep> id message <identifiersep> id ) { \n \t2 try { \n \t3 return broker <identifiersep> service . get <identifiersep> persistence <identifiersep> adapter ( ) . get <identifiersep> last <identifiersep> producer <identifiersep> sequence <identifiersep> id ( message <identifiersep> id . get <identifiersep> producer <identifiersep> id ( ) ) ; \n \t2 } catch ( io <identifiersep> exception ignored ) { \n <ect>
\t4 for ( map . entry < destination , lease <identifiersep> info > e :  <identifiersep> existing <identifiersep> lease <identifiersep> sets . entry <identifiersep> set ( ) ) { \n \t5 if ( pk . equals ( e . get <identifiersep> key ( ) . get <identifiersep> public <identifiersep> key ( ) ) ) { \n \t6 priv <identifiersep> key = e . get <identifiersep> value ( ) . get <identifiersep> private <identifiersep> key ( ) ; \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 lb = load <identifiersep> balancers . get <identifiersep> loadbalancer ( account <identifiersep> number , lb <identifiersep> name ) ; \n \t1 backend <identifiersep> instances = lists . transform ( lists . new <identifiersep> array <identifiersep> list ( lb . get <identifiersep> backend <identifiersep> instances ( ) ) , \n \t2 load <identifiersep> balancer <identifiersep> backend <identifiersep> instance <identifiersep> entity <identifiersep> transform . instance ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t4 current <identifiersep> info = info ; \n \t3 } else if ( q <identifiersep> name . equals ( <string_literal> ) ) { \n \t4 component <identifiersep> info < pluggable <identifiersep> service > info = new component <identifiersep> info < pluggable <identifiersep> service > ( ) ; \n \t4 fill <identifiersep> info ( atts , pluggable <identifiersep> service . class , info ) ; \n <ect>
\t4 } else if ( action == action . suspend <identifiersep> all <identifiersep> routes ) { \n \t5 log . info ( <string_literal> , tail ) ; \n \t5 camel <identifiersep> context . suspend ( ) ; } \n \t3 } catch ( throwable e ) { \n <ect>
\t2 if ( ! dir <identifiersep> file . exists ( ) ) { \n \t3 log . warn ( <string_literal> + dir + <string_literal> ) ; \n \t3 return collections . empty <identifiersep> list ( ) ; } \n \t2 if ( ! dir <identifiersep> file . is <identifiersep> directory ( ) ) { \n <ect>
\t2 response . set <identifiersep> content <identifiersep> type ( media <identifiersep> type . application <identifiersep> json <identifiersep> value ) ; \n \t2 final j2e <identifiersep> context context = pac4j <identifiersep> utils . get <identifiersep> pac4j <identifiersep> j2e <identifiersep> context ( request , response ) ; \n \t2 final string access <identifiersep> token = get <identifiersep> access <identifiersep> token <identifiersep> from <identifiersep> request ( request ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( access <identifiersep> token ) ) { \n <ect>
\t3 log . info ( <string_literal> , subtask <identifiersep> idx ) ; \n \t3 for ( pending <identifiersep> checkpoint pending <identifiersep> checkpoint : checkpointed <identifiersep> state . get ( ) ) { \n \t4 this . pending <identifiersep> checkpoints . add ( pending <identifiersep> checkpoint ) ; } \n <ect>
\t6 should <identifiersep> anticompact = true ; \n \t6 break ; } \n \t5 else if ( sstable <identifiersep> range . intersects ( r ) ) \n \t5 { \n <ect>
\t3 string dom = to <identifiersep> uniform <identifiersep> dom ( dom <identifiersep> utils . get <identifiersep> document <identifiersep> to <identifiersep> string ( get <identifiersep> dom <identifiersep> tree <identifiersep> with <identifiersep> frames ( ) ) ) ; \n \t3 logger . trace ( dom ) ; \n \t3 return dom ; \n \t2 } catch ( web <identifiersep> driver <identifiersep> exception | crawljax <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private integer exec <identifiersep> cmd ( file wd , string [ ] cmd <identifiersep> with <identifiersep> arguments , string <identifiersep> builder out ) throws exception { \n <ect>
\t1 public void contents <identifiersep> cleared ( ) { \n \t1 log . info ( this . print <identifiersep> map ( <string_literal> ) ) ; } \n \t1 @ override \n \t1 public void contents <identifiersep> set ( final map < string , host > input ) { \n <ect>
\t2 blocking <identifiersep> rpc <identifiersep> continuation < consumer > k = new blocking <identifiersep> rpc <identifiersep> continuation < consumer > ( m ) { \n \t3 @ override \n \t3 public consumer transform <identifiersep> reply ( amq <identifiersep> command reply <identifiersep> command ) { \n \t4 if ( ! ( reply <identifiersep> command . get <identifiersep> method ( ) instanceof basic . cancel <identifiersep> ok ) ) \n <ect>
\t2 } catch ( exception e ) { \n \t3 log . error ( e . get <identifiersep> message ( ) , e ) ; } \n \t2 log . info ( <string_literal> ) ; } \n \t1 private void write <identifiersep> index <identifiersep> file ( out <identifiersep> put <identifiersep> model model , crawljax <identifiersep> configuration config ) { \n <ect>
\t5 thread . sleep ( 25000l ) ; <comment> \n \t4 logger . trace ( <string_literal> ) ; \n \t4 client . disconnect ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 list < network <identifiersep> security <identifiersep> group > network <identifiersep> groups = api . get <identifiersep> network <identifiersep> security <identifiersep> group <identifiersep> api ( resource <identifiersep> group ) . list ( ) ; \n \t1 return immutable <identifiersep> set . copy <identifiersep> of ( transform ( filter ( network <identifiersep> groups , not <identifiersep> null ( ) ) , security <identifiersep> group <identifiersep> converter ) ) ; } \n @ override \n public set < security <identifiersep> group > list <identifiersep> security <identifiersep> groups <identifiersep> for <identifiersep> node ( string node <identifiersep> id ) { \n <ect>
\t3 boolean result = job . get <identifiersep> submit <identifiersep> time ( ) . equals ( json . get ( <string_literal> ) . as <identifiersep> long ( ) ) ; \n \t3 log . info ( <string_literal> , job . get <identifiersep> id ( ) , result ) ; \n \t3 return result ; \n \t2 } else { \n <ect>
\t3 tbl <identifiersep> path = wh . get <identifiersep> default <identifiersep> table <identifiersep> path ( \n \t4 ms . get <identifiersep> database ( tbl . get <identifiersep> db <identifiersep> name ( ) ) , tbl . get <identifiersep> table <identifiersep> name ( ) ) ; \n \t2 } else { \n \t3 if ( ! is <identifiersep> external ( tbl ) && ! meta <identifiersep> store <identifiersep> utils . is <identifiersep> non <identifiersep> native <identifiersep> table ( tbl ) ) { \n <ect>
\t3 if ( closer != null ) { \n \t4 closer . close ( ) ; \n \t4 closer = null ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( ae <identifiersep> config . instance ( ) . is <identifiersep> feature <identifiersep> enabled ( ae <identifiersep> feature . log <identifiersep> security <identifiersep> audits ) ) \n \t3 { \n \t4 final dimensional <identifiersep> coord a <identifiersep> coordinates = a . get <identifiersep> grid <identifiersep> block ( ) . get <identifiersep> location ( ) ; \n \t4 final dimensional <identifiersep> coord b <identifiersep> coordinates = b . get <identifiersep> grid <identifiersep> block ( ) . get <identifiersep> location ( ) ; \n <ect>
\t2 i <identifiersep> filter bf = get <identifiersep> filter ( size , filter <identifiersep> test <identifiersep> helper . spec . buckets <identifiersep> per <identifiersep> element ) ; \n \t2 double fp = test <identifiersep> false <identifiersep> positives ( bf , \n \t9 new key <identifiersep> generator . int <identifiersep> generator ( size ) , \n \t9 new key <identifiersep> generator . int <identifiersep> generator ( size , size * <number_literal> ) ) ; \n <ect>
\t3 this . selector = selector . open ( ) ; \n \t3 this . thread = new thread ( this ) ; \n \t3 this . thread . start ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 assert . assert <identifiersep> false ( prefixes . contains ( test <identifiersep> name5 ) ) ; \n \t2 put <identifiersep> handle . unregister <identifiersep> filter ( test <identifiersep> name1 , tfl ) ; \n \t2 put <identifiersep> handle . unregister <identifiersep> filter ( slash <identifiersep> name , tfl ) ; \n \t2 put <identifiersep> handle . unregister <identifiersep> filter ( test <identifiersep> name5 , tfl ) ; \n <ect>
\t4 long elapsed <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) - connection . get <identifiersep> time <identifiersep> created ( ) ; \n \t4 <comment> \n \t4 <comment> \n \t4 if ( elapsed <identifiersep> time > about <identifiersep> unstarted <identifiersep> connection <identifiersep> timeout ) { \n <ect>
\t5 final string value = attr <identifiersep> combo . get ( 1 ) . trim ( ) ; \n \t5 logger . debug ( <string_literal> , name , value ) ; \n \t5 multimap . put ( name , value ) ; \n \t4 } else { \n <ect>
\t3 cf . create <identifiersep> connection ( ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( jms <identifiersep> exception expected <identifiersep> on <identifiersep> no <identifiersep> broker <identifiersep> and <identifiersep> no <identifiersep> create ) { } \n \t2 long end <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t1 a . save ( ) ; \n \t1 txn . commit <identifiersep> and <identifiersep> continue ( ) ; \n \t1 txn . set <identifiersep> batch <identifiersep> mode ( true ) ; \n \t1 b . save ( ) ; \n <ect>
\t4 publish <identifiersep> state ( master . action , state , master . cluster <identifiersep> state , <number_literal> ) . await ( 1 , time <identifiersep> unit . hours ) ; \n \t4 success = true ; \n \t3 } catch ( discovery . failed <identifiersep> to <identifiersep> commit <identifiersep> cluster <identifiersep> state <identifiersep> exception ok ) { \n \t4 success = false ; } \n <ect>
\t3 build <identifiersep> update <identifiersep> map ( ) ; \n \t3 item <identifiersep> has <identifiersep> changed = true ; \n \t2 } else { \n \t3 set <identifiersep> panel <identifiersep> message ( <string_literal> ) ; \n <ect>
\t2 try { \n \t3 final client <identifiersep> credential client <identifiersep> credentials = ( client <identifiersep> credential ) credential ; \n \t3 logger . debug ( <string_literal> , client <identifiersep> credentials ) ; \n \t3 final credentials credentials = client <identifiersep> credentials . get <identifiersep> credentials ( ) ; \n <ect>
\t4 log . debug ( <string_literal> , route . get <identifiersep> id ( ) , route ) ; \n \t4 if ( resume <identifiersep> only ) { \n \t5 log . debug ( <string_literal> , order , route . get <identifiersep> id ( ) ) ; \n \t4 } else { \n <ect>
\t2 boolean interrupted = false ; \n \t2 data <identifiersep> listener ( ) { } \n \t2 @ override \n \t2 public void run ( ) { \n <ect>
\t2 acl <identifiersep> status = fs . get <identifiersep> acl <identifiersep> status ( file ) ; \n \t2 } catch ( exception e ) { \n \t2 log . info ( <string_literal> + file + <string_literal> + \n \t3 <string_literal> ) ; \n <ect>
\t2 long expected <identifiersep> result <identifiersep> count = ( page <identifiersep> size == 0 || page == 0 ) \n \t5 ? 0 \n \t5 : math . min ( number , page <identifiersep> size ) ; \n \t2 int start <identifiersep> index = ( math . max ( page , 1 ) - 1 ) * page <identifiersep> size ; \n <ect>
\t1 f = c . get <identifiersep> declared <identifiersep> field ( <string_literal> ) ; \n \t1 f . set <identifiersep> accessible ( true ) ; \n \t1 } catch ( throwable t ) { \n \t1 <comment> \n <ect>
\t2  <identifiersep> name = name ; \n \t2 component <identifiersep> locator locator = component <identifiersep> locator . get <identifiersep> current <identifiersep> locator ( ) ; \n \t2 configuration <identifiersep> dao config <identifiersep> dao = locator . get <identifiersep> dao ( configuration <identifiersep> dao . class ) ; \n \t2 if ( config <identifiersep> dao == null ) { \n <ect>
\t1 @ override \n \t1 protected big <identifiersep> decimal calculate <identifiersep> score ( final http <identifiersep> servlet <identifiersep> request request , final authentication authentication , \n \t10 final registered <identifiersep> service service , final collection < cas <identifiersep> event > events ) { \n \t2 final zoned <identifiersep> date <identifiersep> time timestamp = zoned <identifiersep> date <identifiersep> time . now ( zone <identifiersep> offset . utc ) ; \n <ect>
\t3 if ( ! get <identifiersep> m <identifiersep> bean <identifiersep> server ( ) . is <identifiersep> registered ( cluster <identifiersep> name ) ) { \n \t4 get <identifiersep> m <identifiersep> bean <identifiersep> server ( ) . register <identifiersep> m <identifiersep> bean ( get <identifiersep> managed <identifiersep> bean ( cluster ) , cluster <identifiersep> name ) ; } \n \t3 return true ; \n \t2 } catch ( exception x ) { \n <ect>
<comment> \n \t1 void search <identifiersep> complete ( hash key ) { \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 super ( ) ; } \n \t1 @ override \n \t1 public boolean fence <identifiersep> off ( vm <identifiersep> instance <identifiersep> vo vm , host <identifiersep> vo host ) { \n \t2 if ( host . get <identifiersep> hypervisor <identifiersep> type ( ) != hypervisor <identifiersep> type . ovm ) { \n <ect>
\t1 @ bean \n \t1 public authentication <identifiersep> event <identifiersep> execution <identifiersep> plan <identifiersep> configurer pac4j <identifiersep> authentication <identifiersep> event <identifiersep> execution <identifiersep> plan <identifiersep> configurer ( ) { \n \t2 return plan - > { \n \t3 if ( ! built <identifiersep> clients ( ) . find <identifiersep> all <identifiersep> clients ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t3 instance . set <identifiersep> protected <identifiersep> from <identifiersep> scale <identifiersep> in ( false ) ; \n \t3 log . info ( <string_literal> + instance . get <identifiersep> instance <identifiersep> id ( ) ) ; } } \n \t2 tran . commit ( ) ; } \n \t1 catch ( exception ex ) { \n <ect>
\t3 arguments <identifiersep> are <identifiersep> valid = false ; \n \t3 logger . warn ( <string_literal> ) ; } \n \t2 if ( fbo <identifiersep> manager == null ) { \n \t3 arguments <identifiersep> are <identifiersep> valid = false ; \n <ect>
\t3 + <string_literal> , cached <identifiersep> service ) ; \n \t2 update <identifiersep> service <identifiersep> registry <identifiersep> with <identifiersep> registered <identifiersep> service ( services , cached <identifiersep> service , service <identifiersep> registry ) ; } \n \t1 private void update <identifiersep> service <identifiersep> registry <identifiersep> with <identifiersep> matching <identifiersep> service ( final list < registered <identifiersep> service > services , final registered <identifiersep> service cached <identifiersep> service , \n <number_literal> final registered <identifiersep> service matching <identifiersep> service , final service <identifiersep> registry service <identifiersep> registry ) { \n <ect>
\t6 . to ( <string_literal> ) \n \t6 . process ( new processor ( ) { \n \t7 @ override \n \t7 public void process ( exchange exchange ) throws exception { \n <ect>
\t2 return destinations ; } \n \t1 protected int get <identifiersep> number <identifiersep> of <identifiersep> routers <identifiersep> to <identifiersep> deploy ( ) { \n \t2 <comment> \n \t2 if ( routers . size ( ) >= limit <identifiersep> number <identifiersep> of <identifiersep> routers ) { \n <ect>
\t4 <comment> \n \t2 try { \n \t3 if ( permission <identifiersep> check <identifiersep> folder == null ) { \n \t4 return false ; } \n <ect>
\t3 start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 clear <identifiersep> entity <identifiersep> manager <identifiersep> mapper . execute ( null ) ; \n \t3 stream <identifiersep> contributor <identifiersep> count = get <identifiersep> daily <identifiersep> stream <identifiersep> contributor <identifiersep> count <identifiersep> mapper . execute ( stream <identifiersep> info <identifiersep> request ) ; \n \t3 timer <identifiersep> log += <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) ; \n <ect>
\t5 thread . sleep ( <number_literal> ) ; } \n \t4 <comment> \n \t4 try { \n \t5 main <identifiersep> context . complete ( ) ; \n <ect>
\t5 logger . debug ( <string_literal> , \n \t7 primare <identifiersep> tcp <identifiersep> connector . this . to <identifiersep> string ( ) , socket <identifiersep> timeout ) ; \n \t4 } catch ( exception e ) { \n \t5 if ( interrupted != true && this . is <identifiersep> interrupted ( ) != true ) { \n <ect>
\t2 <comment> \n \t2 boolean missing = false ; \n \t2 for ( ccn <identifiersep> time version : sent ) { \n \t3 if ( ! recv . contains ( version ) ) { \n <ect>
\t5 logger . info ( <string_literal> , nm ( ) , dev . get <identifiersep> address ( ) ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> , nm ( ) , e ) ; \n \t3 } catch ( field <identifiersep> exception e ) { \n <ect>
\t2 template . send <identifiersep> body ( record ) ; \n \t2 result . expected <identifiersep> message <identifiersep> count ( 1 ) ; \n \t2 result . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 object data = result . get <identifiersep> received <identifiersep> exchanges ( ) . get ( 0 ) . get <identifiersep> in ( ) . get <identifiersep> body ( ) ; \n <ect>
\t3 return re <identifiersep> connect ; } \n \t2 private void commit <identifiersep> offset ( state <identifiersep> repository < string , string > offset <identifiersep> repository , topic <identifiersep> partition partition , long partition <identifiersep> last <identifiersep> offset , boolean force <identifiersep> commit ) { \n \t3 if ( partition <identifiersep> last <identifiersep> offset != - 1 ) { \n \t4 if ( offset <identifiersep> repository != null ) { \n <ect>
\t1 @ override \n \t1 public void init ( config . scope config ) { \n \t2 input <identifiersep> stream is = get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ; \n \t2 if ( is == null ) { \n <ect>
\t2 <comment> \n \t2 account caller = user <identifiersep> context . current ( ) . get <identifiersep> caller ( ) ; \n \t2 if ( caller . get <identifiersep> type ( ) != account . account <identifiersep> type <identifiersep> admin ) { \n <ect>
\t5 logger . debug ( <string_literal> , item <identifiersep> name ) ; \n \t5 command <identifiersep> line = string . format ( command <identifiersep> line , calendar . get <identifiersep> instance ( ) . get <identifiersep> time ( ) , <string_literal> , item <identifiersep> name ) ; \n \t5 string response = execute <identifiersep> command <identifiersep> and <identifiersep> wait <identifiersep> response ( command <identifiersep> line ) ; \n \t5 if ( response == null ) { \n <ect>
\t2 } else if ( uri . equals ( system <identifiersep> properties <identifiersep> namespace ) ) { \n \t3 try { \n \t4 answer = system . get <identifiersep> property ( local <identifiersep> part ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 final http <identifiersep> servlet <identifiersep> request request = web <identifiersep> utils . get <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> from <identifiersep> external <identifiersep> webflow <identifiersep> context ( request <identifiersep> context ) ; \n \t2 logger . debug ( <string_literal> , parameter <identifiersep> name <identifiersep> token ) ; \n \t2 final string token = request . get <identifiersep> parameter ( parameter <identifiersep> name <identifiersep> token ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( token ) ) { \n <ect>
\t4 if ( smart <identifiersep> sending <identifiersep> enabled <identifiersep> object <identifiersep> types <identifiersep> string \n \t6 . contains ( cardio2e <identifiersep> object <identifiersep> types . hvac <identifiersep> control . name ( ) ) ) { \n \t5 cardio2e <identifiersep> hvac <identifiersep> control <identifiersep> transaction \n \t7 . set <identifiersep> smart <identifiersep> sending <identifiersep> enabled <identifiersep> class ( true ) ; \n <ect>
\t2 if ( mode == private || mode == isolated ) { \n \t3 grid <identifiersep> node node = cctx . discovery ( ) . node ( snd <identifiersep> id ) ; \n \t3 if ( node == null ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 } finally { \n \t1 s . close ( ) ; } \n \t1 set <identifiersep> root <identifiersep> property ( storage <identifiersep> version <identifiersep> key , no <identifiersep> version , \n \t2 integer . to <identifiersep> string ( cur <identifiersep> storage <identifiersep> version ) ) ; \n <ect>
\t4 { \n \t5 index . maybe <identifiersep> refresh <identifiersep> blocking ( ) ; } } \n \t3 catch ( throwable e ) \n \t3 { \n <ect>
\t4 final map < ? , ? > record = it . next ( ) ; \n \t4 final registered <identifiersep> service svc = convert <identifiersep> service <identifiersep> properties ( record ) ; \n \t4 logger . debug ( <string_literal> , svc ) ; \n \t4 results . add ( svc ) ; } \n <ect>
\t9  <identifiersep> log . info ( <string_literal> + this ) ; \n \t8 schedule (  <identifiersep> next <identifiersep> run - system . current <identifiersep> time <identifiersep> millis ( ) ) ; } } } } } \n \t3 long time = system . current <identifiersep> time <identifiersep> millis ( ) - before ; \n \t3 if ( time > <number_literal> &&  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 delete <identifiersep> stored <identifiersep> items ( ) ; \n \t4 } catch ( interrupted <identifiersep> exception ex ) { \n \t5 break ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 if ( host != null && ( host . get <identifiersep> reconnection <identifiersep> attempt <identifiersep> future ( ) == null || host . get <identifiersep> reconnection <identifiersep> attempt <identifiersep> future ( ) . is <identifiersep> done ( ) ) ) { \n <ect>
\t1 public void enter <identifiersep> address ( string address ) { \n \t2 logger . info ( <string_literal> + address ) ; } \n \t1 @ step \n \t1 public void enter <identifiersep> name <identifiersep> and <identifiersep> age ( string name , string age ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t3 breaks += breaker <identifiersep> stats . get <identifiersep> tripped <identifiersep> count ( ) ; } \n \t2 assert <identifiersep> that ( breaks , greater <identifiersep> than <identifiersep> or <identifiersep> equal <identifiersep> to ( 1 ) ) ; } \n \t1 public void test <identifiersep> can <identifiersep> reset <identifiersep> unreasonable <identifiersep> settings ( ) { \n \t2 if ( noop <identifiersep> breaker <identifiersep> used ( ) ) { \n <ect>
\t1 public boolean configure ( string name , map < string , object > params ) throws configuration <identifiersep> exception { \n \t2 com . trilead . ssh2 . connection ssh <identifiersep> connection = null ; \n \t2 try { \n \t3 super . configure ( name , params ) ; \n <ect>
\t2 tinkerforge <identifiersep> device . add <identifiersep> motion <identifiersep> detected <identifiersep> listener ( motion <identifiersep> detected <identifiersep> listener ) ; \n \t2 detection <identifiersep> cycle <identifiersep> ended <identifiersep> listener = new bricklet <identifiersep> motion <identifiersep> detector . detection <identifiersep> cycle <identifiersep> ended <identifiersep> listener ( ) { \n \t3 @ override \n \t3 public void detection <identifiersep> cycle <identifiersep> ended ( ) { \n <ect>
@ slf4j \n public class allow <identifiersep> revocation <identifiersep> policy implements revocation <identifiersep> policy < void > { \n \t1 @ override \n \t1 public void apply ( final void data ) { \n <ect>
\t2 throw new hive <identifiersep> exception ( <string_literal> + old <identifiersep> path . to <identifiersep> string ( ) \n \t3 + <string_literal> , e ) ; \n \t1 } else { \n \t2 <comment> \n <ect>
\t5 keyspace . get <identifiersep> serializer <identifiersep> package ( cf <identifiersep> users . get <identifiersep> name ( ) , false ) ) \n \t5 . set <identifiersep> rows <identifiersep> as <identifiersep> array ( true ) \n \t5 . set <identifiersep> fixed <identifiersep> column <identifiersep> names ( <string_literal> , <string_literal> ) \n \t5 . set <identifiersep> ignore <identifiersep> undefined <identifiersep> columns ( true ) . write ( rows ) ; \n <ect>
\t3 trace <identifiersep> parameters . put ( <string_literal> , consistency <identifiersep> level . name ( ) ) ; \n \t3 tracing . instance . begin ( <string_literal> , trace <identifiersep> parameters ) ; } \n \t2 else \n \t2 { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t3 result . tnase = ( org . apache . accumulo . core . client . impl . thrift . thrift <identifiersep> not <identifiersep> active <identifiersep> service <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> tnase <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
project . logger . warn ( <string_literal> ) ; \n project . logger . lifecycle ( <string_literal> ) ; \n project . logger . quiet ( <string_literal> ) ; \n project . logger . info ( <string_literal> ) ; \n <ect>
\t2 logger . info ( <string_literal> . format ( cached <identifiersep> hostname , scriptname ) ) \n \t1 except : \n \t1 cached <identifiersep> hostname = socket . getfqdn ( ) \n \t1 logger . warn ( <string_literal> . format ( sys . exc <identifiersep> info ( ) ) ) \n <ect>
\t1 @ override \n \t1 public event do <identifiersep> execute ( final request <identifiersep> context request <identifiersep> context ) { \n \t2 final authentication c = web <identifiersep> utils . get <identifiersep> authentication ( request <identifiersep> context ) ; \n \t2 if ( c == null ) { \n <ect>
\t4 if ( latest <identifiersep> event != null ) { \n \t5 return latest <identifiersep> event . get <identifiersep> id ( ) ; } } \n \t3 return 0 ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 < p > reload this page with open console , enter text and hit the log button . . . < / p > \n \t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n <ect>
\t2 command . add ( <string_literal> + intf + <string_literal> + port + <string_literal> + \n \t4 <string_literal> + intf + <string_literal> + <string_literal> + <string_literal> ) ; \n \t2 result = command . execute ( ) ; \n \t2 if ( result != null ) { \n <ect>
\t5 final string index = search <identifiersep> hit . get <identifiersep> index ( ) ; \n \t5 final string type = search <identifiersep> hit . get <identifiersep> type ( ) ; \n \t5 final string id = search <identifiersep> hit . get <identifiersep> id ( ) ; \n \t5 final explain <identifiersep> response explanation = client ( ) . prepare <identifiersep> explain ( index , type , id ) . set <identifiersep> query ( query <identifiersep> builders . exists <identifiersep> query ( field <identifiersep> name ) ) . get ( ) ; \n <ect>
\t2 string raw <identifiersep> col <identifiersep> name = raw <identifiersep> col <identifiersep> names [ i ] ; \n \t2 int sql <identifiersep> type = col <identifiersep> types . get ( col <identifiersep> name ) ; \n \t2 string java <identifiersep> type = to <identifiersep> java <identifiersep> type ( col <identifiersep> name , sql <identifiersep> type ) ; \n \t2 if ( null == java <identifiersep> type ) { \n <ect>
\t4 long zxid = packets <identifiersep> committed . peek <identifiersep> first ( ) ; \n \t4 if ( p . hdr . get <identifiersep> zxid ( ) != zxid ) { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t1 list < iterator <identifiersep> setting > itrs = lists . new <identifiersep> array <identifiersep> list ( ) ; \n \t1 boolean should <identifiersep> pushdown = conf . get <identifiersep> boolean ( accumulo <identifiersep> ser <identifiersep> de <identifiersep> parameters . iterator <identifiersep> pushdown <identifiersep> key , \n \t2 accumulo <identifiersep> ser <identifiersep> de <identifiersep> parameters . iterator <identifiersep> pushdown <identifiersep> default ) ; \n \t1 if ( ! should <identifiersep> pushdown ) { \n <ect>
\t4 while ( keep <identifiersep> going . get ( ) ) { \n \t5 try { \n \t6 producer . send ( session . create <identifiersep> text <identifiersep> message ( <string_literal> ) ) ; \n \t5 } catch ( jms <identifiersep> exception jms <identifiersep> ex ) { \n <ect>
\t2 } else { \n \t2 move <identifiersep> custom <identifiersep> location <identifiersep> task <identifiersep> outputs ( fs , table , hive <identifiersep> conf ) ; } \n \t2 try { \n \t2 update <identifiersep> table <identifiersep> schema ( client , table , job <identifiersep> info . get <identifiersep> output <identifiersep> schema ( ) ) ; \n <ect>
\t2 tile <identifiersep> entity tile = get <identifiersep> local <identifiersep> tile ( search ) ; \n \t2 if ( tile instanceof tile <identifiersep> heat <identifiersep> exchange <identifiersep> end ) { \n \t3 tile <identifiersep> end = ( tile <identifiersep> heat <identifiersep> exchange <identifiersep> end ) tile ; \n \t2 } else { \n <ect>
\t3 set <identifiersep> byte ( <string_literal> , data [ <number_literal> ] ) ; \n \t3 set <identifiersep> byte ( <string_literal> , data [ <number_literal> ] ) ; \n \t3 set <identifiersep> byte ( <string_literal> , data [ <number_literal> ] ) ; \n \t2 } catch ( field <identifiersep> exception e ) { \n <ect>
\t4 logger . trace ( <string_literal> ) ; \n \t4 int value = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset + 1 ) ; \n \t4 sensor <identifiersep> type sensor <identifiersep> type = sensor <identifiersep> type . unknown ; \n \t4 if ( this . get <identifiersep> version ( ) > 1 && serial <identifiersep> message . get <identifiersep> message <identifiersep> payload ( ) . length > offset + <number_literal> ) { \n <ect>
@ get \n public response get <identifiersep> data ( @ context uri <identifiersep> info uri <identifiersep> info , @ path <identifiersep> param ( <string_literal> ) string endpoint ) { \n \t1 string url = get <identifiersep> proxy <identifiersep> url ( endpoint , uri <identifiersep> info . get <identifiersep> query <identifiersep> parameters ( ) ) ; \n \t1 try { \n <ect>
\t3 throws throwable \n \t1 { \n \t2 try \n \t2 { \n <ect>
\t2 } catch ( not <identifiersep> compliant <identifiersep> m <identifiersep> bean <identifiersep> exception e ) { \n \t3 <comment> \n \t3 log . debug ( <string_literal> , e ) ; \n \t2 } catch ( instance <identifiersep> already <identifiersep> exists <identifiersep> exception e ) { \n <ect>
\t2 for ( string pattern : text <identifiersep> parse <identifiersep> util . comma <identifiersep> delimited <identifiersep> string <identifiersep> to <identifiersep> set ( acceptable <identifiersep> patterns ) ) { \n \t3 accepted <identifiersep> patterns . add ( pattern . compile ( pattern , pattern . case <identifiersep> insensitive ) ) ; } } \n \t1 @ inject ( value = x <identifiersep> work <identifiersep> constants . additional <identifiersep> accepted <identifiersep> patterns , required = false ) \n \t1 public void set <identifiersep> additional <identifiersep> accepted <identifiersep> patterns ( string acceptable <identifiersep> patterns ) { \n <ect>
\t2 assert <identifiersep> true ( <string_literal> \n \t4 + redelivery <identifiersep> consumer <identifiersep> latch . get <identifiersep> count ( ) , redelivery <identifiersep> consumer <identifiersep> latch . await ( <number_literal> , time <identifiersep> unit . seconds ) ) ; \n \t2 assert <identifiersep> true ( <string_literal> , dlq <identifiersep> consumer <identifiersep> latch . await ( <number_literal> , time <identifiersep> unit . seconds ) ) ; \n \t2 close <identifiersep> consumer ( ) ; \n <ect>
\t5 . http <identifiersep> request ( uri . to <identifiersep> string ( ) ) \n \t5 . status ( response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) ) \n \t5 . body ( entity <identifiersep> utils . to <identifiersep> string ( response . get <identifiersep> entity ( ) ) ) \n \t5 . build ( ) ; \n <ect>
\t1 @ override \n \t1 public void run ( ) { \n \t2 log . trace ( <string_literal> ) ; \n \t2 if ( ! is <identifiersep> run <identifiersep> allowed ( ) ) { \n <ect>
\t2 string cluster <identifiersep> name = cluster <identifiersep> stack <identifiersep> info <identifiersep> entry . get <identifiersep> key ( ) ; \n \t2 map < string , string > stack <identifiersep> info = cluster <identifiersep> stack <identifiersep> info <identifiersep> entry . get <identifiersep> value ( ) ; \n \t2 string stack <identifiersep> name = stack <identifiersep> info . key <identifiersep> set ( ) . iterator ( ) . next ( ) ; \n \t2 string stack <identifiersep> version = stack <identifiersep> info . get ( stack <identifiersep> name ) ; \n <ect>
\t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n \t1 log . error ( <string_literal> , ex ) ; \n \t1 throw ex ; \n \t1 } catch ( exception ex ) { \n <ect>
\t3 super ( <string_literal> ) ; } \n \t2 @ override \n \t2 public void run ( ) { \n \t3 map < object , boolean > history = new identity <identifiersep> hash <identifiersep> map < object , boolean > ( ) ; \n <ect>
\t3 try { \n \t4 connection . subscribe ( new topic [ ] { topics [ i ] } ) ; \n \t4 fail ( <string_literal> ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t7 remote <identifiersep> stdin . write ( password <identifiersep> bytes ) ; \n \t7 remote <identifiersep> stdin . flush ( ) ; \n \t7 logger . debug ( <string_literal> ) ; \n \t6 } catch ( io <identifiersep> exception exc ) { \n <ect>
\t1 } else { \n \t2 log . error ( <string_literal> + dump <identifiersep> data <identifiersep> on <identifiersep> error <identifiersep> key + <string_literal> ) ; } \n \t1 input <identifiersep> split is = context . get <identifiersep> input <identifiersep> split ( ) ; \n \t1 if ( is instanceof file <identifiersep> split ) { \n <ect>
\t4 response <identifiersep> producer = responder <identifiersep> session . create <identifiersep> producer ( reply <identifiersep> destination ) ; \n \t4 response <identifiersep> producer . send ( reply <identifiersep> message ) ; \n \t3 } else { \n \t4 response <identifiersep> producer . send ( reply <identifiersep> destination , reply <identifiersep> message ) ; } \n <ect>
\t1 saved += value <identifiersep> length <identifiersep> limit ; \n \t1 page += 1 ; \n \t1 log . debug ( <string_literal> + model <identifiersep> prop <identifiersep> name + <string_literal> + page + <string_literal> + substring ) ; } \n \t1 get <identifiersep> config ( ) . set <identifiersep> property ( model <identifiersep> prop <identifiersep> name , page - 1 ) ; \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + cmd . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> + result . second ( ) . get <identifiersep> details ( ) + <string_literal> + result . first ( ) ) ; } \n \t4 host <identifiersep> ids <identifiersep> to <identifiersep> avoid . add ( result . first ( ) ) ; \n \t3 } catch ( storage <identifiersep> unavailable <identifiersep> exception e1 ) { \n <ect>
\t3 resp . set <identifiersep> content <identifiersep> type ( <string_literal> ) ; \n \t3 resp . set <identifiersep> status ( status <identifiersep> code ) ; \n \t3 resp . get <identifiersep> writer ( ) . print ( response <identifiersep> message ) ; \n \t2 } catch ( exception ex ) { \n <ect>
<comment> \n <ect>
\t2 for ( tar <identifiersep> reader closeable : iterable ( closeables ) ) { \n \t3 try { \n \t4 closeable . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 connected = false ; \n \t2 logger . debug ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void deactivate ( ) { \n <ect>
\t2 if ( net <identifiersep> db == null ) return true ; \n \t2 if (  <identifiersep> context . router ( ) == null ) return true ; \n \t2 if ( (  <identifiersep> context . banlist ( ) != null ) && (  <identifiersep> context . banlist ( ) . is <identifiersep> banlisted ( peer ) ) ) { \n \t3 <comment> \n <ect>
\t3 actions [ i ] = new test <identifiersep> nodes <identifiersep> action ( cluster <identifiersep> settings , <string_literal> , thread <identifiersep> pool , test <identifiersep> nodes [ i ] . cluster <identifiersep> service , \n \t5 test <identifiersep> nodes [ i ] . transport <identifiersep> service ) { \n \t4 @ override \n \t4 protected node <identifiersep> response node <identifiersep> operation ( node <identifiersep> request request ) { \n <ect>
<comment> \n \t1 private lenskit <identifiersep> recommender <identifiersep> engine load <identifiersep> internal ( input <identifiersep> stream stream ) throws io <identifiersep> exception , recommender <identifiersep> configuration <identifiersep> exception { \n <ect>
\t2 profile . add <identifiersep> defaults ( get <identifiersep> default <identifiersep> thread <identifiersep> pool <identifiersep> profile ( ) ) ; \n \t2 scheduled <identifiersep> executor <identifiersep> service answer = thread <identifiersep> pool <identifiersep> factory . new <identifiersep> scheduled <identifiersep> thread <identifiersep> pool ( profile , create <identifiersep> thread <identifiersep> factory ( sanitized <identifiersep> name , true ) ) ; \n \t2 on <identifiersep> thread <identifiersep> pool <identifiersep> created ( answer , source , null ) ; \n <ect>
\t3 while ( may <identifiersep> run ( ) ) { \n \t4 try { \n \t5 thread . sleep ( sleep <identifiersep> period <identifiersep> ms ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 txn <identifiersep> iterator itr = txn <identifiersep> log . read ( 0 ) ; \n \t2 <comment> \n \t2 file <identifiersep> txn <identifiersep> iterator file <identifiersep> itr = ( file <identifiersep> txn <identifiersep> iterator ) itr ; \n \t2 long storage <identifiersep> size = file <identifiersep> itr . get <identifiersep> storage <identifiersep> size ( ) ; \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 list < port <identifiersep> forwarding <identifiersep> rule <identifiersep> vo > all <identifiersep> rules = new array <identifiersep> list < port <identifiersep> forwarding <identifiersep> rule <identifiersep> vo > ( ) ; \n \t2 for ( ip <identifiersep> address addr : addrs ) { \n \t3 if ( ! addr . ready <identifiersep> to <identifiersep> use ( ) ) { \n <ect>
\t2 for ( string stmt : stmts ) { \n \t2 down <identifiersep> sampling <identifiersep> condition . set <identifiersep> statement ( query <identifiersep> prefix + stmt ) ; \n \t2 run <identifiersep> down <identifiersep> sampler <identifiersep> query ( conn , down <identifiersep> sampling <identifiersep> condition ) ; } \n \t1 } else { \n <ect>
\t3 logger . debug ( <string_literal> , view . get <identifiersep> namespace ( ) , count . get ( ) ) ; \n \t3 count . retain ( ) ; \n \t3 return get ( ) ; } \n \t2 void release ( ) { \n <ect>
\t5 <comment> \n \t3 member <identifiersep> set = get <identifiersep> current <identifiersep> members ( ) ; \n \t3 log . info ( <string_literal> , path , member <identifiersep> set ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 stop <identifiersep> jetty ( ) ; \n \t3 return false ; } \n \t2 catch ( multi <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 try { \n \t4 this . build <identifiersep> file <identifiersep> sha <identifiersep> map ( ) ; \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception fe ) { \n <ect>
\t4 server . register <identifiersep> m <identifiersep> bean ( loader , loader <identifiersep> name ) ; \n \t4 loader = loader . scan ( false ) ; \n \t3 } catch ( throwable t ) { \n \t4 if ( log != null ) \n <ect>
\t6 prepared <identifiersep> statement stmt1 = txn . prepare <identifiersep> auto <identifiersep> close <identifiersep> statement ( insert <identifiersep> sql1 ) ; \n \t6 stmt1 . execute <identifiersep> update ( ) ; \n \t6 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t5 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t2 <comment> \n \t2 object <identifiersep> helper . not <identifiersep> null ( this . pair <identifiersep> separator , <string_literal> ) ; \n \t2 char separator = converter <identifiersep> utils . get <identifiersep> char <identifiersep> delimiter ( this . get <identifiersep> pair <identifiersep> separator ( ) ) ; \n <ect>
\t1 @ post \n \t1 @ path ( <string_literal> ) \n \t1 @ consumes ( <string_literal> ) \n \t1 public string string <identifiersep> accepts <identifiersep> default ( string s ) { \n <ect>
\t1 @ override \n \t1 public access <identifiersep> token <identifiersep> request <identifiersep> data <identifiersep> holder extract ( final http <identifiersep> servlet <identifiersep> request request , final http <identifiersep> servlet <identifiersep> response response ) { \n \t2 final string grant <identifiersep> type = request . get <identifiersep> parameter ( o <identifiersep> auth20constants . grant <identifiersep> type ) ; \n \t2 final set < string > scopes = o <identifiersep> auth20utils . parse <identifiersep> request <identifiersep> scopes ( request ) ; \n <ect>
\t1 @ override \n \t1 protected boolean is <identifiersep> response <identifiersep> valid ( satel <identifiersep> message response ) { \n \t2 <comment> \n \t2 if ( response . get <identifiersep> command ( ) != command <identifiersep> code ) { \n <ect>
\t4 invocation . set <identifiersep> input ( <string_literal> , enqueue <identifiersep> as <identifiersep> next ) ; \n \t3 } catch ( invalid <identifiersep> value <identifiersep> exception ex ) { \n \t4 logger . error ( <string_literal> , ex . get <identifiersep> message ( ) ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n <ect>
\t4 exception exception = ex . get <identifiersep> exception ( ) ; \n \t4 if ( exception instanceof io <identifiersep> exception ) { \n \t5 throw ( io <identifiersep> exception ) exception ; } \n <ect>
\t8 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n \t9 log . info ( log . fac <identifiersep> io , <string_literal> ,  <identifiersep> current <identifiersep> interest . name ( ) , co . name ( ) ) ; } \n \t6 } catch ( io <identifiersep> exception ex ) { \n \t7 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n <ect>
\t3 } else if ( input <identifiersep> line . starts <identifiersep> with ( <string_literal> ) ) { \n \t4 logger . debug ( <string_literal> + input <identifiersep> line ) ; \n \t4 return list <identifiersep> audio <identifiersep> file <identifiersep> format <identifiersep> types ( ) ; \n \t3 } else if ( input <identifiersep> line . starts <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t4 if ( vm != null && vm . get <identifiersep> state ( ) == virtual <identifiersep> machine . state . migrating ) { \n \t5 try { \n \t6 vm <identifiersep> mgr . state <identifiersep> transit <identifiersep> to ( vm , virtual <identifiersep> machine . event . agent <identifiersep> report <identifiersep> stopped , null ) ; \n \t5 } catch ( no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t2 smtp <identifiersep> server . set <identifiersep> host <identifiersep> name ( host ) ; \n \t2 smtp <identifiersep> server . set <identifiersep> port ( integer . parse <identifiersep> int ( port <identifiersep> ssl ) ) ; \n \t2 smtp <identifiersep> server . set <identifiersep> enable <identifiersep> tls ( true ) ; \n \t2 smtp <identifiersep> server . start ( ) ; \n <ect>
\t3 logger . info ( <string_literal> + query <identifiersep> name + <string_literal> + query <identifiersep> folder + <string_literal> ) ; \n \t3 i <identifiersep> database <identifiersep> connection kylin <identifiersep> conn = new database <identifiersep> connection ( cube <identifiersep> connection ) ; \n \t3 i <identifiersep> table kylin <identifiersep> table = execute <identifiersep> query ( kylin <identifiersep> conn , query <identifiersep> name , sql , need <identifiersep> sort ) ; \n \t3 <comment> \n <ect>
\t6 return sql <identifiersep> string <identifiersep> for <identifiersep> sql <identifiersep> expression <identifiersep> with <identifiersep> key <identifiersep> path <identifiersep> with <identifiersep> derived <identifiersep> attribute ( eoqualifier , e ) ; } \n \t4 <comment> \n \t4 return support <identifiersep> for <identifiersep> qualifier ( eoqualifier ) . sql <identifiersep> string <identifiersep> for <identifiersep> sql <identifiersep> expression ( eoqualifier , e ) ; } \n \t3 catch ( jdbc <identifiersep> adaptor <identifiersep> exception ex ) { \n <ect>
\t3 return false ; } \n \t2 final string client <identifiersep> id = context . get <identifiersep> request <identifiersep> parameter ( o <identifiersep> auth20constants . client <identifiersep> id ) ; \n \t2 final o <identifiersep> auth <identifiersep> registered <identifiersep> service registered <identifiersep> service = get <identifiersep> registered <identifiersep> service <identifiersep> by <identifiersep> client <identifiersep> id ( client <identifiersep> id ) ; \n \t2 if ( ! validator . check <identifiersep> service <identifiersep> valid ( registered <identifiersep> service ) ) { \n <ect>
\t1 ) ; \n \t1 if ( ! table <identifiersep> export . write ( ) ) { \n \t2 throw new semantic <identifiersep> exception ( error <identifiersep> msg . exim <identifiersep> for <identifiersep> non <identifiersep> native . get <identifiersep> msg ( ) ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t2 schedule <identifiersep> pending <identifiersep> tasks ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception ie ) { \n \t2 if ( is <identifiersep> shutdown . get ( ) ) { \n \t3 return null ; <comment> \n <ect>
\t6 map < string , string > success = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( disassocipel , new string [ ] { <string_literal> } ) ; \n \t3 <comment> \n \t6 s <identifiersep> logger . info ( <string_literal> + success . get ( <string_literal> ) ) ; \n \t5 } else { \n <ect>
\t3 log . info ( <string_literal> + msg <identifiersep> id ) ; \n \t2 } else { \n \t3 msg <identifiersep> id . set <identifiersep> batch <identifiersep> status ( new <identifiersep> status ) ; \n \t3 batch <identifiersep> queue . offer ( msg <identifiersep> id ) ; \n <ect>
\t2 console <identifiersep> handler = new output <identifiersep> stream <identifiersep> handler ( stream ) ; \n \t2 root . add <identifiersep> handler ( console <identifiersep> handler ) ; } \n \t1 public synchronized void disable <identifiersep> console ( ) \n \t1 { \n <ect>
\t2 } else if ( core instanceof status <identifiersep> task <identifiersep> revert ) { \n \t3 status <identifiersep> task <identifiersep> revert revert = ( status <identifiersep> task <identifiersep> revert ) core ; \n \t3 job = get <identifiersep> job ( revert . get <identifiersep> job <identifiersep> uuid ( ) ) ; \n \t3 if ( job == null ) { \n <ect>
\t5 logger . debug ( <string_literal> + username + <string_literal> ) ; } \n \t4 logger . debug ( ( system . current <identifiersep> time <identifiersep> millis ( ) - time ) + <string_literal> ) ; } \n \t3 return result ; \n \t2 } catch ( throwable e ) { \n <ect>
<number_literal> } else { \n <number_literal> <comment> \n <number_literal> <comment> \n <number_literal> if ( curr <identifiersep> message <identifiersep> trigger <identifiersep> time > most <identifiersep> recent <identifiersep> trigger <identifiersep> time ) { \n <ect>
public void remove <identifiersep> from <identifiersep> roles ( webobjectsexamples . businesslogic . eo . movie <identifiersep> role object ) { \n \t1 exclude <identifiersep> object <identifiersep> from <identifiersep> property <identifiersep> with <identifiersep> key ( object ,  <identifiersep> talent . roles <identifiersep> key ) ; } \n public void add <identifiersep> to <identifiersep> roles <identifiersep> relationship ( webobjectsexamples . businesslogic . eo . movie <identifiersep> role object ) { \n <ect>
\t2 list < client <identifiersep> representation > clients = bc . create <identifiersep> provider <identifiersep> clients ( suite <identifiersep> context ) ; \n \t2 if ( clients != null ) { \n \t3 realm <identifiersep> resource provider <identifiersep> realm = admin <identifiersep> client . realm ( bc . provider <identifiersep> realm <identifiersep> name ( ) ) ; \n \t3 for ( client <identifiersep> representation client : clients ) { \n <ect>
\t3 client . unregister <identifiersep> client ( ) ; \n \t3 if ( client . responder != null ) { \n \t3 client . responder . task <identifiersep> killed ( task <identifiersep> attempt <identifiersep> id ) ; } \n \t2 } catch ( exception err ) { \n <ect>
\t2 log . info ( <string_literal> + uuid <identifiersep> generator . generate <identifiersep> uuid ( ) ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 uuid <identifiersep> generator . generate <identifiersep> uuid ( ) ; } \n \t2 log . info ( <string_literal> + uuid <identifiersep> generator . generate <identifiersep> uuid ( ) ) ; \n <ect>
\t4 suite <identifiersep> count ++ ; } } \n \t2 if ( suite <identifiersep> count == 0 ) { \n \t3 log . warn ( <string_literal> + test <identifiersep> suite + <string_literal> ) ; \n \t2 } else if ( test <identifiersep> case <identifiersep> count == 0 ) { \n <ect>
\t1 for ( int m = 0 ; m < <number_literal> ; ++ m ) { \n \t2 path file <identifiersep> path = new path ( table <identifiersep> path , <string_literal> + integer . to <identifiersep> string ( m ) ) ; \n \t2 if ( fs . exists ( file <identifiersep> path ) ) { \n \t2 ++ num <identifiersep> part <identifiersep> files ; \n <ect>
<number_literal>  <identifiersep> transport . get <identifiersep> external <identifiersep> port ( state . get <identifiersep> sent <identifiersep> ip ( ) . length == <number_literal> ) , \n <number_literal>  <identifiersep> transport . get <identifiersep> intro <identifiersep> key ( ) ) ; \n \t2 if ( pkt == null ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 file <identifiersep> status [ ] list <identifiersep> status ; \n \t1 try { \n \t2 list <identifiersep> status = fs <identifiersep> as <identifiersep> user . list <identifiersep> status ( path ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 nat <identifiersep> gateway . example <identifiersep> with <identifiersep> state ( state ) , \n \t2 predicates . < nat <identifiersep> gateway > always <identifiersep> true ( ) , \n \t2 cloud <identifiersep> metadatas . < nat <identifiersep> gateway > to <identifiersep> display <identifiersep> name ( ) ) ; \n \t1 } catch ( vpc <identifiersep> metadata <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public void checkpoint <identifiersep> database ( ) throws handle <identifiersep> exception { \n \t2 <comment> \n <ect>
\t2 try { \n \t3 final string control <identifiersep> ip = get <identifiersep> router <identifiersep> ssh <identifiersep> control <identifiersep> ip ( cmd ) ; \n \t3 final pair < boolean , string > result = ssh <identifiersep> helper . ssh <identifiersep> execute ( control <identifiersep> ip , default <identifiersep> domr <identifiersep> sshport , <string_literal> , get <identifiersep> system <identifiersep> vm <identifiersep> key <identifiersep> file ( ) , null , <string_literal> + args ) ; \n \t3 if ( ! result . first ( ) ) { \n <ect>
\t2 new <identifiersep> value = ' , ' . join ( phoenix <identifiersep> query <identifiersep> server <identifiersep> hosts ) \n \t2 # update the proxyuser setting , deferring to out callback to merge results together \n \t2 self . put <identifiersep> proxyuser <identifiersep> value ( <string_literal> , new <identifiersep> value , services = services , configurations = configurations , put <identifiersep> function = put <identifiersep> core <identifiersep> site <identifiersep> property ) \n \t1 else : \n <ect>
\t2 matches ( names , <string_literal> , new string [ ] { abb , abb , ab , a } , new int [ ] { <number_literal> , <number_literal> , <number_literal> , 1 } ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> simple <identifiersep> removes ( ) throws invalid <identifiersep> key <identifiersep> exception , malformed <identifiersep> content <identifiersep> name <identifiersep> string <identifiersep> exception , signature <identifiersep> exception , configuration <identifiersep> exception { \n <ect>
\t4 context . get <identifiersep> job <identifiersep> scheduler ( ) . restart ( ) ; } } \n \t2 super . binding <identifiersep> changed ( provider , item <identifiersep> name ) ; } \n \t1 @ override \n \t1 protected void internal <identifiersep> receive <identifiersep> command ( string item <identifiersep> name , command command ) { \n <ect>
\t2 super ( endpoint ) ; \n \t2 this . event = event ; } \n \t1 @ override \n \t1 public void process ( exchange exchange ) { \n <ect>
\t3 string key = conf <identifiersep> entry . get <identifiersep> key ( ) ; \n \t3 object value = conf <identifiersep> entry . get <identifiersep> value ( ) ; \n \t3 if ( key . starts <identifiersep> with ( key <identifiersep> prefix ) && value != null ) { \n \t4 key = key . substring ( key <identifiersep> prefix . length ( ) , key . length ( ) ) ; \n <ect>
\t3 if (  <identifiersep> network <identifiersep> acl <identifiersep> mgr . revoke <identifiersep> acl <identifiersep> items <identifiersep> for <identifiersep> network ( network <identifiersep> id ) ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + network <identifiersep> id ) ; \n \t3 } else { \n \t4 success = false ; \n <ect>
\t3 try { \n \t4 ret = p . wait <identifiersep> for ( ) ; \n \t4 log . info ( j <identifiersep> storm <identifiersep> utils . get <identifiersep> output ( p . get <identifiersep> error <identifiersep> stream ( ) ) ) ; \n \t4 log . info ( j <identifiersep> storm <identifiersep> utils . get <identifiersep> output ( p . get <identifiersep> input <identifiersep> stream ( ) ) ) ; \n <ect>
\t1 if ( auto <identifiersep> commit ) { \n \t2 <comment> \n \t2 connection . set <identifiersep> auto <identifiersep> commit ( true ) ; } \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t5 sql <identifiersep> type = field <identifiersep> type . get <identifiersep> sql <identifiersep> type ( ) ; } \n \t4 stmt . set <identifiersep> object ( i , arg <identifiersep> value , sql <identifiersep> type ) ; \n \t4 if ( arg <identifiersep> values != null ) { \n \t5 arg <identifiersep> values [ i ] = arg <identifiersep> value ; } } \n <ect>
<comment> \n \t2 public void prune <identifiersep> job ( int node <identifiersep> id , string store ) { \n <ect>
\t3 logger . error ( <string_literal> , node . get <identifiersep> node <identifiersep> id ( ) ) ; \n \t3 return null ; } \n \t2 int parm <identifiersep> value = integer . parse <identifiersep> int ( parm <identifiersep> number ) ; \n \t2 if ( parm <identifiersep> value < 0 || parm <identifiersep> value > <number_literal> ) { \n <ect>
\t3 if ( default <identifiersep> max <identifiersep> capacity <identifiersep> per <identifiersep> thread == 0 ) { \n \t4 logger . debug ( <string_literal> ) ; \n \t4 logger . debug ( <string_literal> ) ; \n <ect>
\t1 if ( ! check <identifiersep> connection <identifiersep> for <identifiersep> precision <identifiersep> exception ( connection ) ) { \n \t2 <comment> \n \t2 string higher <identifiersep> precision = get <identifiersep> higher <identifiersep> precision ( uri <identifiersep> builder , start <identifiersep> time , end <identifiersep> time ) ; \n \t2 if ( higher <identifiersep> precision != null ) { \n <ect>
\t4 } catch ( interrupted <identifiersep> exception ignored ) { } } \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof out <identifiersep> of <identifiersep> memory <identifiersep> error ) { \n \t4 log . error ( <string_literal> ) ; } \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return false ; } \n \t2 final string grant <identifiersep> type = context . get <identifiersep> request <identifiersep> parameter ( o <identifiersep> auth20constants . grant <identifiersep> type ) ; \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . client <identifiersep> id ) ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( ) throws homematic <identifiersep> client <identifiersep> exception { \n <ect>
\t2 integer current <identifiersep> poll = rooms <identifiersep> to <identifiersep> poll . get ( room <identifiersep> id ) ; \n \t2 if ( current <identifiersep> poll == null || requested <identifiersep> poll < current <identifiersep> poll . int <identifiersep> value ( ) ) { \n \t3 current <identifiersep> poll = requested <identifiersep> poll ; \n \t3 rooms <identifiersep> to <identifiersep> poll . put ( room <identifiersep> id , current <identifiersep> poll ) ; \n <ect>
\t6 string name = jdbc <identifiersep> utils . extract <identifiersep> database <identifiersep> meta <identifiersep> data ( data <identifiersep> source , <string_literal> ) ; \n \t6 if ( string <identifiersep> utils . has <identifiersep> length ( name ) ) { \n \t7 return register <identifiersep> database ( data <identifiersep> source , name ) ; } } \n \t5 catch ( meta <identifiersep> data <identifiersep> access <identifiersep> exception ex ) { \n <ect>
\t2 final zoned <identifiersep> date <identifiersep> time creation <identifiersep> time = ticket <identifiersep> state . get <identifiersep> creation <identifiersep> time ( ) ; \n \t2 <comment> \n \t2 zoned <identifiersep> date <identifiersep> time expiration <identifiersep> time = creation <identifiersep> time . plus ( this . max <identifiersep> time <identifiersep> to <identifiersep> live <identifiersep> in <identifiersep> seconds , chrono <identifiersep> unit . seconds ) ; \n \t2 if ( current <identifiersep> system <identifiersep> time . is <identifiersep> after ( expiration <identifiersep> time ) ) { \n <ect>
\t2 if ( parts == null || parts . size ( ) == 0 ) { \n \t2 <comment> \n \t2 return null ; } \n \t1 } catch ( exception e ) { \n <ect>
\t3 protected void do <identifiersep> run ( ) throws exception { \n \t4 finish <identifiersep> pinging <identifiersep> round ( pinging <identifiersep> round ) ; } \n \t3 @ override \n \t3 public void on <identifiersep> failure ( exception e ) { \n <ect>
\t6 string . format ( <string_literal> , type . get <identifiersep> name ( ) ) , \n \t6 ex \n \t5 ) ; } \n \t4 this . immutable . add ( type ) ; \n <ect>
\t2 if ( action instanceof portlet <identifiersep> preferences <identifiersep> aware ) { \n \t3 portlet <identifiersep> request request = ( portlet <identifiersep> request ) context . get ( portlet <identifiersep> constants . request ) ; \n \t3 <comment> \n \t3 if ( request == null ) { \n <ect>
\t2 try { \n \t3 connection . subscribe ( new topic [ ] { topic } ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( exception ex ) { \n <ect>
public static future < ? > kill <identifiersep> client ( hot <identifiersep> rod <identifiersep> client client ) { \n \t1 try { \n \t2 if ( client != null ) return client . stop ( ) ; } \n \t1 catch ( throwable t ) { \n <ect>
\t6 write <identifiersep> compressed <identifiersep> object ( file , obj ) ; \n \t6 logger . info ( <string_literal> , \n \t9 obj , key , files . size ( file ) ) ; } \n \t4 } else { \n <ect>
\t9 string name , string value ) { \n \t2 if ( subject . has <identifiersep> property ( rdf . type , dmrm . resource <identifiersep> generator ) ) { \n \t3 string generated <identifiersep> iri = parse <identifiersep> resource <identifiersep> generator ( subject , value , dso <identifiersep> iri ) ; \n \t3 if ( generated <identifiersep> iri == null ) { \n <ect>
\t3 try { \n \t4 if ( vm <identifiersep> mo . get <identifiersep> snapshot <identifiersep> mor ( vm <identifiersep> snapshot <identifiersep> name ) != null ) { \n \t5 vm <identifiersep> mo . remove <identifiersep> snapshot ( vm <identifiersep> snapshot <identifiersep> name , false ) ; } \n \t3 } catch ( exception e1 ) { \n <ect>
\t4 if ( local <identifiersep> transaction <identifiersep> event <identifiersep> listener != null ) { \n \t5 local <identifiersep> transaction <identifiersep> event <identifiersep> listener . commit <identifiersep> event ( ) ; } \n \t4 after <identifiersep> commit ( ) ; \n \t3 } catch ( jms <identifiersep> exception cause ) { \n <ect>
\t2 if ( producer != null ) { \n \t3 log . info ( <string_literal> , producer . get <identifiersep> outstanding <identifiersep> records <identifiersep> count ( ) ) ; \n \t3 <comment> \n \t3 flush <identifiersep> sync ( ) ; \n <ect>
\t1 try { \n \t1 api = new hdfs <identifiersep> api ( configuration <identifiersep> builder , get <identifiersep> hdfs <identifiersep> username ( context ) ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + encoded <identifiersep> username + <string_literal> + network <identifiersep> id <identifiersep> str ) ; \n \t3 if ( network <identifiersep> id <identifiersep> str != null ) { \n \t4  <identifiersep> network <identifiersep> id . set ( network <identifiersep> id <identifiersep> str ) ; } \n \t2 } else { \n <ect>
\t1 } else { \n \t2 api = hdfs <identifiersep> util . connect <identifiersep> to <identifiersep> hdfs <identifiersep> api ( context ) ; } \n \t1 api . get <identifiersep> status ( ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
\t4 string path <identifiersep> info = request . get <identifiersep> path <identifiersep> info ( ) ; \n \t4 if ( path <identifiersep> info != null ) { \n \t5 jsp <identifiersep> uri += path <identifiersep> info ; } } } \n <ect>
\t2 object result = create <identifiersep> json <identifiersep> object ( new json <identifiersep> tokener ( json <identifiersep> string ) ) ; \n \t2 if ( result == null ) { \n \t3 result = create <identifiersep> json <identifiersep> array ( new json <identifiersep> tokener ( json <identifiersep> string ) ) ; } \n \t2 if ( result == null ) { \n <ect>
\t2 } else if ( database <identifiersep> product . postgresql == database <identifiersep> product ) { \n \t3 if ( is <identifiersep> in <identifiersep> schema <identifiersep> mode ( ) ) { \n \t4 statement . execute ( <string_literal> + escaped <identifiersep> schema <identifiersep> name + <string_literal> ) ; \n \t3 } else { \n <ect>
\t5 <comment> \n \t5 continue ; } } \n \t4 try { \n \t5 int backup = integer . parse <identifiersep> int ( files [ i ] . substring ( index + 1 , files [ i ] . length ( ) ) ) ; \n <ect>
\t1 <comment> \n \t1 if ( ! this . emitted <identifiersep> no <identifiersep> appender <identifiersep> warning ) { \n \t1 log <identifiersep> log . warn ( <string_literal> + \n \t2 cat . get <identifiersep> name ( ) + <string_literal> ) ; \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public string get <identifiersep> name ( ) { \n <ect>
\t3 error <identifiersep> string = <string_literal> ; \n \t3 status = template <identifiersep> downloader . status . unrecoverable <identifiersep> error ; \n \t3 s <identifiersep> logger . warn ( <string_literal> + ex . to <identifiersep> string ( ) ) ; \n \t2 } catch ( throwable th ) { \n <ect>
<comment> \n public h <identifiersep> client create <identifiersep> client ( cassandra <identifiersep> host ch ) { \n <ect>
\t3 if ( volumes <identifiersep> v <identifiersep> os . size ( ) > 1 ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + vol <identifiersep> id + <string_literal> + event . get <identifiersep> account <identifiersep> id ( ) + <string_literal> ) ; } \n \t3 for ( usage <identifiersep> volume <identifiersep> vo volumes <identifiersep> vo : volumes <identifiersep> v <identifiersep> os ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 action <identifiersep> future < delete <identifiersep> snapshot <identifiersep> response > future = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> delete <identifiersep> snapshot ( repo , snapshot2 ) . execute ( ) ; \n \t2 logger . info ( <string_literal> , blocked <identifiersep> node ) ; \n \t2 wait <identifiersep> for <identifiersep> block ( blocked <identifiersep> node , repo , time <identifiersep> value . time <identifiersep> value <identifiersep> seconds ( <number_literal> ) ) ; \n <ect>
\t2 references . add ( end <identifiersep> signal ) ; \n \t2 semaphore . try <identifiersep> unlock <identifiersep> write ( ) ; \n \t2 log . debug ( <string_literal> , this ) ; \n \t2 if ( short <identifiersep> circuited ) { \n <ect>
\t4 try { \n \t5 tag . set <identifiersep> served <identifiersep> from <identifiersep> datastore ( ) ; \n \t5 return new client <identifiersep> chk <identifiersep> block ( ( chk <identifiersep> block ) o , key ) ; \n \t4 } catch ( chk <identifiersep> verify <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public synchronized void test <identifiersep> cluster <identifiersep> closed ( ) { } \n \t1 @ override \n \t1 public synchronized void start <identifiersep> disrupting ( ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + project + <string_literal> ) ; \n \t3 list < ? extends project <identifiersep> account > project <identifiersep> accounts =  <identifiersep> project <identifiersep> account <identifiersep> dao . list <identifiersep> by <identifiersep> project <identifiersep> id ( project . get <identifiersep> id ( ) ) ; \n \t3 for ( project <identifiersep> account project <identifiersep> account : project <identifiersep> accounts ) { \n \t4 result = result && unassign <identifiersep> account <identifiersep> from <identifiersep> project ( project <identifiersep> account . get <identifiersep> project <identifiersep> id ( ) , project <identifiersep> account . get <identifiersep> account <identifiersep> id ( ) ) ; } \n <ect>
\t7 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n \t8 s <identifiersep> logger . debug ( <string_literal> + destroyed <identifiersep> template <identifiersep> host <identifiersep> vo + <string_literal> + ( ( answer == null ) ? <string_literal> : answer . get <identifiersep> details ( ) ) ) ; \n \t7 } else { \n \t8  <identifiersep> vm <identifiersep> template <identifiersep> host <identifiersep> dao . remove ( destroyed <identifiersep> template <identifiersep> host <identifiersep> vo . get <identifiersep> id ( ) ) ; \n <ect>
\t4 log . warn ( <string_literal> + file <identifiersep> to <identifiersep> use ) ; } \n \t3 try { \n \t4 source ( file <identifiersep> to <identifiersep> use ) ; \n \t3 } catch ( j <identifiersep> meter <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 file <identifiersep> utils . write <identifiersep> string <identifiersep> to <identifiersep> file ( new file ( output <identifiersep> dir <identifiersep> name , file <identifiersep> name ) , \n <number_literal> new store <identifiersep> definitions <identifiersep> mapper ( ) . write <identifiersep> store <identifiersep> list ( store <identifiersep> defs ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 bundle <identifiersep> context . get <identifiersep> service <identifiersep> references ( \n \t5 protocol <identifiersep> provider <identifiersep> factory . class . get <identifiersep> name ( ) , null ) ; } \n \t2 catch ( invalid <identifiersep> syntax <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 log . info ( <string_literal> + ( stop <identifiersep> time - start <identifiersep> time ) + <string_literal> ) ; } } \n @ visible <identifiersep> for <identifiersep> testing \n void log <identifiersep> success ( @ nullable string task <identifiersep> id ) { \n \t1 if ( task <identifiersep> id == null ) { \n <ect>
\t4 <comment> \n \t4 for ( int i = 0 ; ! shouldnt <identifiersep> request && ! blocks <identifiersep> requested . contains ( next <identifiersep> block . get <identifiersep> hash ( ) ) ; i ++ ) { \n \t5 int sleep <identifiersep> time = 1 ; \n \t5 if ( i % <number_literal> / sleep <identifiersep> time == <number_literal> / sleep <identifiersep> time - 1 ) \n <ect>
\t2 catch ( throwable t ) { \n \t3 log . warn ( <string_literal> , t ) ; } } \n \t1 protected synchronized void become <identifiersep> keyserver ( ) throws exception { \n \t2 if ( srv <identifiersep> sock == null || srv <identifiersep> sock . is <identifiersep> closed ( ) ) { \n <ect>
\t5 } else if (  <identifiersep> keep <identifiersep> running ) { \n \t6 <comment> \n \t6 try { thread . sleep ( <number_literal> ) ; } catch ( interrupted <identifiersep> exception ie ) { } } } } \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 string query <identifiersep> str = <string_literal> ; \n \t1 query = pm . new <identifiersep> query ( m <identifiersep> table <identifiersep> privilege . class , query <identifiersep> str ) ; \n \t1 query . declare <identifiersep> parameters ( <string_literal> ) ; \n \t1 list < m <identifiersep> table <identifiersep> privilege > m <identifiersep> privs = ( list < m <identifiersep> table <identifiersep> privilege > ) query . execute <identifiersep> with <identifiersep> array ( table <identifiersep> name , db <identifiersep> name ) ; \n <ect>
\t4 browser . close ( ) ; \n \t3 } catch ( jms <identifiersep> exception e ) { \n \t4 log . error ( <string_literal> , e ) ; } \n \t3 browser = null ; \n <ect>
\t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 return null ; \n \t2 } catch ( dom <identifiersep> exception e ) { \n <ect>
\t3 md = conn . get <identifiersep> meta <identifiersep> data ( ) ; \n \t3 db . product <identifiersep> name = md . get <identifiersep> database <identifiersep> product <identifiersep> name ( ) ; \n \t3 db . product <identifiersep> version = md . get <identifiersep> database <identifiersep> product <identifiersep> version ( ) ; \n \t3 db . catalog <identifiersep> name = conn . get <identifiersep> catalog ( ) ; \n <ect>
\t2 list < string > old <identifiersep> non <identifiersep> master <identifiersep> nodes = new array <identifiersep> list < > ( old <identifiersep> non <identifiersep> master <identifiersep> nodes <identifiersep> set ) ; \n \t2 logger . info ( <string_literal> , old <identifiersep> master <identifiersep> node ) ; \n \t2 for ( string node : old <identifiersep> non <identifiersep> master <identifiersep> nodes <identifiersep> set ) { \n \t3 assert <identifiersep> different <identifiersep> master ( node , old <identifiersep> master <identifiersep> node ) ; } \n <ect>
\t3 application <identifiersep> context = gac ; } \n \t2 if ( ! ( application <identifiersep> context instanceof configurable <identifiersep> application <identifiersep> context ) ) { \n \t4 string context <identifiersep> type = application <identifiersep> context . get <identifiersep> class ( ) . get <identifiersep> name ( ) ; \n <ect>
\t3 return ; } \n \t2 element signature <identifiersep> policy <identifiersep> identifier = create <identifiersep> element ( <string_literal> , doc , input ) ; \n \t2 signed <identifiersep> properties . append <identifiersep> child ( signature <identifiersep> policy <identifiersep> identifier ) ; \n \t2 if ( sig <identifiersep> policy <identifiersep> implied . equals ( get <identifiersep> signature <identifiersep> policy ( ) ) ) { \n <ect>
\t4 return ; } \n \t3 char buf [ ] = new char [ <number_literal> ] ; \n \t3 int read = reader . read ( buf ) ; \n \t3 if ( read != <number_literal> ) { \n <ect>
\t2 pre <identifiersep> initialize ( ) ; \n \t2 initialize ( ) ; \n \t2 post <identifiersep> initialize ( ) ; } \n \t1 private void pre <identifiersep> initialize ( ) { \n <ect>
\t3 long [ ] sample <identifiersep> counts = new long [ samples . length ] ; \n \t3 for ( int c = 0 ; c < results . size ( ) ; c ++ ) { \n \t4 test <identifiersep> step <identifiersep> result test <identifiersep> step <identifiersep> result = results . get ( c ) ; \n \t4 if ( test <identifiersep> step <identifiersep> result == null ) { \n <ect>
\t2 <comment> \n \t2 jms <identifiersep> queue <identifiersep> endpoint endpoint = get <identifiersep> mandatory <identifiersep> endpoint ( <string_literal> , jms <identifiersep> queue <identifiersep> endpoint . class ) ; \n \t2 assert <identifiersep> equals ( <number_literal> , endpoint . get <identifiersep> maximum <identifiersep> browse <identifiersep> size ( ) ) ; \n \t2 list < exchange > list = endpoint . get <identifiersep> exchanges ( ) ; \n <ect>
\t3 logger . info ( <string_literal> , jp ) ; \n \t2 } else if ( parent != null && parent . get <identifiersep> type ( ) . equals ( experiment <identifiersep> job . job <identifiersep> type ) ) { \n \t3 logger . info ( <string_literal> , jp ) ; \n \t2 } else { \n <ect>
\t2 ut <identifiersep> master master = create <identifiersep> master ( i + <number_literal> ) ; \n \t2 logger . info ( <string_literal> , i ) ; \n \t2 server . save ( master ) ; \n \t2 if ( i == 1 ) { \n <ect>
\t3 return image <identifiersep> io . read ( new memory <identifiersep> cache <identifiersep> image <identifiersep> input <identifiersep> stream ( \n \t4 kitten <identifiersep> captcha <identifiersep> panel . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( filename ) ) ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
public delete <identifiersep> session ( string mapped <identifiersep> uri ) { \n \t1 super ( mapped <identifiersep> uri ) ; } \n @ override \n public response safe <identifiersep> handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n <ect>
\t5 s = mcast <identifiersep> send <identifiersep> sockets [ i ] ; \n \t5 try { \n \t6 s . send ( packet ) ; } \n \t5 catch ( exception e ) { \n <ect>
\t4 system . err . println ( <string_literal> + count + <string_literal> + geo <identifiersep> file ) ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n \t4 ioe . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t4 <comment> \n <ect>
\t2 public void property <identifiersep> change ( property <identifiersep> change <identifiersep> event evt ) { \n \t3 string old <identifiersep> name = ( string ) evt . get <identifiersep> old <identifiersep> value ( ) ; \n \t3 string new <identifiersep> value = ( string ) evt . get <identifiersep> new <identifiersep> value ( ) ; \n \t3 if ( new <identifiersep> value == null ) { \n <ect>
\t6 } finally { \n \t7 try { \n \t8 os . close ( ) ; \n \t7 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 log . info ( <string_literal> + rsrc2 ) ; \n \t3 log . info ( <string_literal> + rsrc3 ) ; \n \t3 log . info ( <string_literal> + rsrc4 ) ; \n \t3 log . info ( <string_literal> + log ) ; \n <ect>
\t4 logger . normal ( this , <string_literal> + p . name + <string_literal> + p . port <identifiersep> number + <string_literal> + p . protocol + <string_literal> + status . reason <identifiersep> string ) ; \n \t3 } else if ( status . status == forward <identifiersep> port <identifiersep> status . maybe <identifiersep> success ) { \n \t4 logger . normal ( this , <string_literal> + p . name + <string_literal> + p . port <identifiersep> number + <string_literal> + p . protocol + <string_literal> + status . reason <identifiersep> string ) ; \n \t3 } else if ( status . status == forward <identifiersep> port <identifiersep> status . definite <identifiersep> failure ) { \n <ect>
\t4 <string_literal> ) ; \n \t3 try { \n \t4 velocity <identifiersep> engine . init ( props ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t2 public void run ( ) { \n \t3 try { \n \t4 kill ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 lb <identifiersep> response =  <identifiersep> response <identifiersep> generator . create <identifiersep> load <identifiersep> balancer <identifiersep> response ( rule ) ; \n \t4 set <identifiersep> response <identifiersep> object ( lb <identifiersep> response ) ; } \n \t3 lb <identifiersep> response . set <identifiersep> response <identifiersep> name ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t6 for ( final pbd pbd : pbds ) { \n \t7 s <identifiersep> logger . trace ( log <identifiersep> x ( pbd , <string_literal> ) ) ; } } } \n \t3 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t3 logger . error ( <string_literal> ) ; \n \t3 return false ; } \n \t2 final json <identifiersep> backed <identifiersep> account account = this . json <identifiersep> backed <identifiersep> accounts . get <identifiersep> or <identifiersep> default ( c . get <identifiersep> id ( ) , null ) ; \n \t2 if ( account == null ) { \n <ect>
\t5 for ( volume <identifiersep> vo vol : vols ) { \n \t6 try { \n \t7 expunge <identifiersep> volume ( vol , false ) ; \n \t6 } catch ( exception e ) { \n <ect>
\t2 log . info ( <string_literal> + producer <identifiersep> destination + <string_literal> \n \t4 + producer <identifiersep> destination . get <identifiersep> class ( ) ) ; \n \t2 consumer = create <identifiersep> consumer ( receive <identifiersep> session , consumer <identifiersep> destination ) ; \n \t2 consumer . set <identifiersep> message <identifiersep> listener ( this ) ; \n <ect>
\t5 for ( int i = 0 ; i < num <identifiersep> messages ; ++ i ) { \n \t6 producer . send ( session . create <identifiersep> text <identifiersep> message ( <string_literal> ) ) ; \n \t6 time <identifiersep> unit . milliseconds . sleep ( pause . next <identifiersep> int ( <number_literal> ) ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t2 logger . error ( ovm <identifiersep> dispatch , <string_literal> %clz <identifiersep> name ) \n \t2 raise fault ( dispatch <identifiersep> err <identifiersep> code ( 'invaild <identifiersep> class' ) , <string_literal> %clz <identifiersep> name ) \n \t1 clz = exposed <identifiersep> class [ clz <identifiersep> name ] \n \t1 if not hasattr ( clz , func <identifiersep> name ) : \n <ect>
\t4 try { \n \t4 log . info ( <string_literal> + san <identifiersep> volume <identifiersep> id + <string_literal> + sc <identifiersep> iqn ) ; \n \t4 connection <identifiersep> manager . unexport <identifiersep> resource ( san <identifiersep> volume <identifiersep> id , sc <identifiersep> iqn ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 rs1 = pstmt . execute <identifiersep> query ( ) ; \n \t3 long ntwk <identifiersep> off <identifiersep> count = 0 ; \n \t3 while ( rs1 . next ( ) ) { \n \t4 ntwk <identifiersep> off <identifiersep> count = rs1 . get <identifiersep> long ( 1 ) ; } \n <ect>
\t4 boolean result = false ; \n \t4 try { \n \t5 result = ( ( node <identifiersep> wrapper ) get <identifiersep> node ( ) ) . evaluate <identifiersep> custom <identifiersep> query ( custom <identifiersep> permission <identifiersep> query , params ) ; \n \t4 } catch ( final exception ex ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t2 final string name = get <identifiersep> expiration <identifiersep> policy <identifiersep> name <identifiersep> for ( ticket <identifiersep> state ) ; \n \t2 logger . debug ( <string_literal> , name ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( name ) && policies . contains <identifiersep> key ( name ) ) { \n \t3 final expiration <identifiersep> policy policy = policies . get ( name ) ; \n <ect>
\t2 oos . flush ( ) \n \t2 return base64 . get <identifiersep> encoder ( ) . encode <identifiersep> to <identifiersep> string ( os . to <identifiersep> byte <identifiersep> array ( ) ) } \n \t1 private fun kapt3subplugin <identifiersep> context . add <identifiersep> misc <identifiersep> options ( plugin <identifiersep> options : mutable <identifiersep> list < subplugin <identifiersep> option > ) { \n \t2 if ( kapt <identifiersep> extension . generate <identifiersep> stubs ) { \n <ect>
\t6 s <identifiersep> logger . warn ( warning + <string_literal> + old <identifiersep> current <identifiersep> bytes <identifiersep> sent + <string_literal> + new <identifiersep> current <identifiersep> bytes <identifiersep> sent + <string_literal> ) ; \n \t6 user <identifiersep> stats . set <identifiersep> net <identifiersep> bytes <identifiersep> sent ( old <identifiersep> net <identifiersep> bytes <identifiersep> sent + old <identifiersep> current <identifiersep> bytes <identifiersep> sent ) ; } \n \t5 user <identifiersep> stats . set <identifiersep> current <identifiersep> bytes <identifiersep> received ( new <identifiersep> current <identifiersep> bytes <identifiersep> received ) ; \n \t5 if ( old <identifiersep> current <identifiersep> bytes <identifiersep> received > new <identifiersep> current <identifiersep> bytes <identifiersep> received ) { \n <ect>
\t3 db . commit ( ) ; } \n \t2 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception nse ) { \n \t2 log . debug ( <string_literal> + monitor <identifiersep> inst . get <identifiersep> instance <identifiersep> id ( ) ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t2 { \n \t3 return failure <identifiersep> detector . initial <identifiersep> value <identifiersep> nanos ; } \n \t2 else \n \t2 { \n <ect>
\t4 cache . delete ( cache <identifiersep> keys . appdata <identifiersep> by <identifiersep> gadget <identifiersep> definition <identifiersep> id <identifiersep> and <identifiersep> underscore <identifiersep> and <identifiersep> person <identifiersep> open <identifiersep> social <identifiersep> id \n \t6 + application <identifiersep> id + <string_literal> + open <identifiersep> social <identifiersep> id ) ; } } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t3 ambari <identifiersep> upgrade <identifiersep> config <identifiersep> updates <identifiersep> file <identifiersep> path = log <identifiersep> path + file . separator + write <identifiersep> to <identifiersep> ambari <identifiersep> upgrade <identifiersep> config <identifiersep> updates <identifiersep> file ; } \n \t2 } else { \n \t2 log . warn ( <string_literal> ) ; } } \n \t1 } catch ( exception e ) { \n <ect>
\t1 public long shutdown ( ) throws t <identifiersep> exception { \n \t2 shutdown ( config . message <identifiersep> router <identifiersep> max <identifiersep> poll <identifiersep> timeout * <number_literal> ) ; \n \t2 return 0 ; } \n \t1 public void shutdown ( long timeout ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( client <identifiersep> entity ) ; \n \t2 log . info ( <string_literal> , client <identifiersep> entity . get <identifiersep> properties ( ) ) ; \n \t2 int status <identifiersep> code = response <identifiersep> parts . get ( <number_literal> ) . get <identifiersep> status <identifiersep> code ( ) ; \n \t2 assert <identifiersep> equals ( http <identifiersep> status <identifiersep> code . no <identifiersep> content . get <identifiersep> status <identifiersep> code ( ) , status <identifiersep> code ) ; \n <ect>
\t7 log . debug ( <string_literal> , x , ctx , ignored ) ; } } } } \n \t3 throw to <identifiersep> xa <identifiersep> exception ( e ) ; } } \n \t1 @ override \n \t1 public void forget ( xid xid ) throws xa <identifiersep> exception { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 synchronized ( registration <identifiersep> lock ) \n \t3 { \n <ect>
\t3 while ( ! stop . get ( ) ) { \n \t3 try { \n \t4 counter . increment ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 event . set <identifiersep> description ( event <identifiersep> description ) ; \n \t2 try { \n \t3 s <identifiersep> event <identifiersep> bus . publish ( event ) ; \n \t2 } catch ( event <identifiersep> bus <identifiersep> exception e ) { \n <ect>
\t2 if ( ability . activate ( sim , false ) && ability . is <identifiersep> uses <identifiersep> stack ( ) ) { \n \t3 game . fire <identifiersep> event ( new game <identifiersep> event ( game <identifiersep> event . event <identifiersep> type . triggered <identifiersep> ability , ability . get <identifiersep> id ( ) , ability . get <identifiersep> source <identifiersep> id ( ) , ability . get <identifiersep> controller <identifiersep> id ( ) ) ) ; } \n \t2 sim . apply <identifiersep> effects ( ) ; \n \t2 simulation <identifiersep> node2 new <identifiersep> node = new simulation <identifiersep> node2 ( parent , sim , depth , player <identifiersep> id ) ; \n <ect>
\t3 class < ? > clazz = class . for <identifiersep> name ( resource <identifiersep> name ) ; \n \t3 constructor constructor = clazz . get <identifiersep> constructor ( ) ; \n \t3 resource = ( server <identifiersep> resource ) constructor . new <identifiersep> instance ( ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 if ( ! ( clazz . get <identifiersep> class <identifiersep> loader ( ) == my <identifiersep> class <identifiersep> loader ) ) { \n \t4 log . info ( <string_literal> + clazz . get <identifiersep> class <identifiersep> loader ( ) \n \t6 + <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 update . set <identifiersep> capacity ( capacity ) ; \n \t2 entities . persist ( update ) ; \n \t2 db . commit ( ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n <ect>
\t3 list < file > plugin <identifiersep> file <identifiersep> list = new array <identifiersep> list < > ( ) ; \n \t3 product <identifiersep> bodyguard product <identifiersep> bodyguard = new product <identifiersep> bodyguard ( ) ; \n \t3 for ( file f : plugin <identifiersep> files ) { \n \t4 if ( ! product <identifiersep> bodyguard . is <identifiersep> known ( f ) ) { \n <ect>
public record <identifiersep> reader < writable <identifiersep> comparable , h <identifiersep> cat <identifiersep> record > \n \t1 create <identifiersep> h <identifiersep> cat <identifiersep> record <identifiersep> reader ( input <identifiersep> split split , \n \t1 task <identifiersep> attempt <identifiersep> context task <identifiersep> context ) \n \t1 throws io <identifiersep> exception , interrupted <identifiersep> exception { \n <ect>
\t5 return - 1 ; \n \t4 } else { \n \t5 stream <identifiersep> state . pagein ( page ) ; } \n \t3 } else if ( result1 == - 1 ) { \n <ect>
<comment> \n \t1 protected void process <identifiersep> finally ( org . dspace . core . context context ) throws web <identifiersep> application <identifiersep> exception { \n \t2 if ( ( context != null ) && ( context . is <identifiersep> valid ( ) ) ) { \n \t3 context . abort ( ) ; \n <ect>
\t4 create <identifiersep> namespace = false ; \n \t4 log . debug ( <string_literal> ) ; } } \n \t2 if ( create <identifiersep> namespace ) { \n \t3 session . get <identifiersep> workspace ( ) . get <identifiersep> namespace <identifiersep> registry ( ) . register <identifiersep> namespace ( <string_literal> , <string_literal> ) ; \n <ect>
\t3 if ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) . size ( ) > 0 ) { \n \t4 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; } \n \t2 } while ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . initializing ) . size ( ) != 0 || \n \t4 cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . unassigned ) . size ( ) != 0 && iterations < <number_literal> ) ; \n <ect>
\t1 for ( string database <identifiersep> name : get <identifiersep> managed <identifiersep> databases ( ) ) { \n \t2 final db <identifiersep> status node <identifiersep> left <identifiersep> status = get <identifiersep> database <identifiersep> status ( node <identifiersep> left <identifiersep> name , database <identifiersep> name ) ; \n \t2 if ( node <identifiersep> left <identifiersep> status != db <identifiersep> status . offline && node <identifiersep> left <identifiersep> status != db <identifiersep> status . not <identifiersep> available ) \n \t2 configuration <identifiersep> map . put ( config <identifiersep> dbstatus <identifiersep> prefix + node <identifiersep> left <identifiersep> name + <string_literal> + database <identifiersep> name , db <identifiersep> status . not <identifiersep> available ) ; } \n <ect>
\t1 protected void delay ( long delay <identifiersep> ms , string desc ) { \n \t2 try { \n \t3 thread . sleep ( delay <identifiersep> ms ) ; \n \t2 } catch ( interrupted <identifiersep> exception int <identifiersep> exc ) { \n <ect>
\t2 logger . info ( <string_literal> + foo <identifiersep> resource . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; \n \t2 for ( method m : foo <identifiersep> resource . get <identifiersep> class ( ) . get <identifiersep> methods ( ) ) { \n \t3 if ( m . get <identifiersep> name ( ) . equals ( <string_literal> ) ) { \n \t4 logger . info ( m ) ; \n <ect>
\t4 tuple < view , digest > tuple = gms . get <identifiersep> view <identifiersep> and <identifiersep> digest ( ) ; \n \t4 if ( tuple != null ) \n \t5 gms . send <identifiersep> join <identifiersep> response ( new join <identifiersep> rsp ( tuple . get <identifiersep> val1 ( ) , tuple . get <identifiersep> val2 ( ) ) , mbr ) ; \n \t4 else \n <ect>
\t3 response response = client . target ( generate <identifiersep> url ( <string_literal> , url <identifiersep> prefix + ext ) ) . request ( ) \n \t5 . post ( entity . entity ( big <identifiersep> xml <identifiersep> type , <string_literal> ) ) ; \n \t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> bad <identifiersep> request , response . get <identifiersep> status ( ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t4 transformed <identifiersep> xdom ) ; \n \t2 } catch ( transformation <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , role <identifiersep> hint ) ; \n \t2 } catch ( x <identifiersep> wiki <identifiersep> exception ex ) { \n <ect>
\t2 { \n \t3 logger . info ( <string_literal> , e . get <identifiersep> message ( ) ) ; } \n \t2 catch ( unsatisfied <identifiersep> link <identifiersep> error link <identifiersep> error ) \n \t2 { \n <ect>
\t3 . exceptionally ( \n \t4 ( throwable throwable ) - > { \n \t5 <comment> \n \t5 actor <identifiersep> system . stop ( actor <identifiersep> ref ) ; \n <ect>
\t1 } finally { \n \t1 try { \n \t2 block <identifiersep> manager . clean <identifiersep> snapshot ( snapshot <identifiersep> id , null ) ; \n \t1 } catch ( exception e ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t3 return false ; \n \t2 } catch ( server <identifiersep> request . http <identifiersep> failure http <identifiersep> failure ) { \n <ect>
\t2 public void starting ( ) { \n \t3 erl <identifiersep> logger . debug ( <string_literal> , get <identifiersep> node <identifiersep> name ( ) ) ; } \n \t2 @ override \n \t2 public void running ( ) { \n <ect>
\t4 for ( int i = 0 ; i < metadata . length ; i ++ ) { \n \t5 md <identifiersep> bits [ i ] = interpret <identifiersep> field ( metadata [ i ] , null ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t3 connect <identifiersep> listener = new client <identifiersep> session <identifiersep> channel . message <identifiersep> listener ( ) { \n \t4 public void on <identifiersep> message ( client <identifiersep> session <identifiersep> channel channel , message message ) { \n \t5 log . debug ( <string_literal> , message ) ; \n \t5 if ( ! message . is <identifiersep> successful ( ) ) { \n <ect>
\t6 assert rsrc4 == rsrc8 ; \n \t6 log . info ( <string_literal> + rsrc1 ) ; \n \t6 log . info ( <string_literal> + rsrc2 ) ; \n \t6 log . info ( <string_literal> + rsrc3 ) ; \n <ect>
\t1 if ( t instanceof error ) { \n \t1 throw ( error ) t ; <comment> \n \t1 if ( is <identifiersep> production <identifiersep> mode ( ) ) { \n \t1 if ( ! is <identifiersep> recoverable <identifiersep> exception ( t ) ) { \n <ect>
\t3 s <identifiersep> logger . error ( <string_literal> + e . to <identifiersep> string ( ) , e ) ; \n \t3 return new answer ( cmd , false , <string_literal> + e . get <identifiersep> message ( ) ) ; } } \n \t1 protected answer execute ( final save <identifiersep> password <identifiersep> command cmd ) { \n <ect>
\t3 <comment> \n \t3 return false ; } \n \t2 byte data [ ] = get <identifiersep> bytes ( ) ; \n \t2 if ( data == null ) { \n <ect>
\t2 configure <identifiersep> port <identifiersep> command cmd = new configure <identifiersep> port <identifiersep> command ( uuid . from <identifiersep> string ( nic . get <identifiersep> uuid ( ) ) , uuid . from <identifiersep> string ( broadcast <identifiersep> domain <identifiersep> type . get <identifiersep> value ( network . get <identifiersep> broadcast <identifiersep> uri ( ) ) ) , context \n \t4 . get <identifiersep> account ( ) . get <identifiersep> account <identifiersep> name ( ) , nic . get <identifiersep> mac <identifiersep> address ( ) ) ; \n \t2 configure <identifiersep> port <identifiersep> answer answer = ( configure <identifiersep> port <identifiersep> answer ) agent <identifiersep> manager . easy <identifiersep> send ( controller . get <identifiersep> host <identifiersep> id ( ) , cmd ) ; \n \t2 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t3 final map < string , shared <identifiersep> node <identifiersep> interface > nodes = new linked <identifiersep> hash <identifiersep> map < > ( ) ; \n \t3 for ( final shared <identifiersep> node <identifiersep> interface node : app . node <identifiersep> query ( shared <identifiersep> node <identifiersep> interface . class ) . get <identifiersep> as <identifiersep> list ( ) ) { \n \t4 nodes . put ( node . get <identifiersep> uuid ( ) , node ) ; } \n \t3 if ( nodes . size ( ) != repository . object <identifiersep> count ( ) ) { \n <ect>
\t4 height = h ; } } \n \t2 try { \n \t3 url = icon != null ? new url ( base , icon . get <identifiersep> uri ( ) . to <identifiersep> string ( ) ) . to <identifiersep> string ( ) : null ; \n \t2 } catch ( exception e ) { } \n <ect>
\t4 logger . info ( <string_literal> , retry <identifiersep> timeout ) ; \n \t4 try { \n \t5  <identifiersep> mutex . wait ( retry <identifiersep> timeout * <number_literal> ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 if ( spawn <identifiersep> mq != null ) { \n \t4 log . info ( <string_literal> ) ; \n \t4 spawn <identifiersep> mq . close <identifiersep> consumers ( ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t2 final optional < user <identifiersep> profile > profile = manager . get ( true ) ; \n \t2 logger . debug ( <string_literal> , access <identifiersep> token <identifiersep> id ) ; \n \t2 final jwt <identifiersep> claims claims = produce <identifiersep> id <identifiersep> token <identifiersep> claims ( request , access <identifiersep> token <identifiersep> id , timeout , \n \t4 oidc <identifiersep> registered <identifiersep> service , profile . get ( ) , context , response <identifiersep> type ) ; \n <ect>
\t3 p <identifiersep> networktraffic <identifiersep> type =  <identifiersep> p <identifiersep> n <identifiersep> traffic <identifiersep> type <identifiersep> dao . persist ( p <identifiersep> networktraffic <identifiersep> type ) ; \n \t3 txn . commit ( ) ; \n \t3 return p <identifiersep> networktraffic <identifiersep> type ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 needs <identifiersep> to <identifiersep> select <identifiersep> again = false ; \n \t2 try { \n \t3 selector . select <identifiersep> now ( ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 logger . info ( <string_literal> + get <identifiersep> type ( ) . get <identifiersep> display <identifiersep> name ( ) ) ; \n \t2 start <identifiersep> inner ( ) ; } \n \t1 @ jmx <identifiersep> operation ( description = <string_literal> , impact = m <identifiersep> bean <identifiersep> operation <identifiersep> info . action ) \n \t1 public void stop ( ) { \n <ect>
\t3 thruput <identifiersep> metrics . end <identifiersep> operation ( monitored <identifiersep> action . delete <identifiersep> snapshot , snap . get <identifiersep> snapshot <identifiersep> id ( ) , system . current <identifiersep> time <identifiersep> millis ( ) ) ; } } \n \t1 } else { \n \t2 log . trace ( <string_literal> ) ; } \n \t1 } catch ( exception e ) { <comment> \n <ect>
\t1 address = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( url2 ) ; \n \t1 turl = is <identifiersep> perform <identifiersep> name <identifiersep> resolution ( ) ? address . get <identifiersep> host <identifiersep> name ( ) : url2 ; \n \t1 tip = address . get <identifiersep> host <identifiersep> address ( ) ; \n \t1 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t3 log . warn ( <string_literal> , path ) ; \n \t3 return prop ; } \n \t2 try { \n \t3 prop . load ( file ) ; \n <ect>
\t6 invoke <identifiersep> or <identifiersep> bail <identifiersep> out ( el , write <identifiersep> method , new object [ ] { value } ) ; } } } \n \t2 } catch ( introspection <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , el . get <identifiersep> class ( ) , e ) ; \n \t2 } catch ( unsatisfied <identifiersep> link <identifiersep> error ule ) { <comment> \n <ect>
\t2 while ( it . has <identifiersep> next ( ) ) { \n \t3 map . entry entry = ( map . entry ) it . next ( ) ; \n \t3 list . add ( entry . get <identifiersep> value ( ) ) ; } } } \n \t1 } else { \n <ect>
\t3 assert <identifiersep> true ( incoming . starts <identifiersep> with ( <string_literal> ) ) ; \n \t3 assert <identifiersep> true ( incoming . index <identifiersep> of ( <string_literal> ) >= 0 ) ; \n \t3 assert <identifiersep> true ( incoming . index <identifiersep> of ( <string_literal> ) >= 0 ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 e = new io <identifiersep> exception ( <string_literal> ) ; \n \t2 e . init <identifiersep> cause ( new illegal <identifiersep> argument <identifiersep> exception ( ) ) ; \n \t2 helper . init ( <string_literal> , e , null ) ; \n \t2 reset ( log ) ; \n <ect>
\t3 } else if ( police . get <identifiersep> not <identifiersep> prevented ( ) . is <identifiersep> enabled ( ) ) { \n \t4 logger . debug ( <string_literal> , not <identifiersep> prevented <identifiersep> authentication <identifiersep> policy . class . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t4 plan . register <identifiersep> authentication <identifiersep> policy ( not <identifiersep> prevented <identifiersep> authentication <identifiersep> policy ( ) ) ; \n \t3 } else if ( police . get <identifiersep> unique <identifiersep> principal ( ) . is <identifiersep> enabled ( ) ) { \n <ect>
\t3 route . set <identifiersep> state ( new <identifiersep> state ) ; \n \t3 route <identifiersep> table . update <identifiersep> time <identifiersep> stamps ( ) ; } } \n \t2 tx . commit ( ) ; \n \t1 } catch ( final vpc <identifiersep> metadata <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t10 object handback ) \n \t2 throws illegal <identifiersep> argument <identifiersep> exception { \n \t2 if ( listener == null ) \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; \n <ect>
\t2 catch ( timeout <identifiersep> exception e ) { \n \t3 if ( throw <identifiersep> exception <identifiersep> on <identifiersep> timeout ) \n \t4 throw new runtime <identifiersep> exception ( e ) ; \n <ect>
\t1 private eo <identifiersep> data <identifiersep> source \t2  <identifiersep> data <identifiersep> source ; \n \t1 private wo <identifiersep> component \t2  <identifiersep> follow <identifiersep> page ; \n \t1 <comment> \n \t1 protected wo <identifiersep> component follow <identifiersep> page ( wo <identifiersep> component sender ) { \n <ect>
\t4 s <identifiersep> logger . warn ( <string_literal> + network <identifiersep> id + <string_literal> ) ; } \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n \t3 success = false ; \n \t3 <comment> \n <ect>
\t10 final collection < cas <identifiersep> event > events ) { \n \t2 final string remote <identifiersep> addr = client <identifiersep> info <identifiersep> holder . get <identifiersep> client <identifiersep> info ( ) . get <identifiersep> client <identifiersep> ip <identifiersep> address ( ) ; \n \t2 logger . debug ( <string_literal> , remote <identifiersep> addr ) ; \n \t2 final long count = events . stream ( ) . filter ( e - > e . get <identifiersep> client <identifiersep> ip <identifiersep> address ( ) . equals <identifiersep> ignore <identifiersep> case ( remote <identifiersep> addr ) ) . count ( ) ; \n <ect>
\t2 ) : class <identifiersep> file <identifiersep> factory { \n \t3 return run <identifiersep> read <identifiersep> action { \n \t4 val file <identifiersep> for <identifiersep> debugger = create <identifiersep> file <identifiersep> for <identifiersep> debugger ( code <identifiersep> fragment , extracted <identifiersep> function ) \n <ect>
\t2 { \n \t2  <identifiersep> zk <identifiersep> connection . start ( ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t2 break ; \n \t2 case xml <identifiersep> stream <identifiersep> constants . end <identifiersep> element : \n \t2 end <identifiersep> element end <identifiersep> element = event . as <identifiersep> end <identifiersep> element ( ) ; \n \t2 string name = end <identifiersep> element . get <identifiersep> name ( ) . get <identifiersep> local <identifiersep> part ( ) ; \n <ect>
\t1 final volume volume = create <identifiersep> preferred <identifiersep> volume <identifiersep> from <identifiersep> disk ( ) ; \n \t1 try { \n \t2 check <identifiersep> volume ( volume ) ; \n \t2 virtual <identifiersep> machine virtual <identifiersep> machine = get <identifiersep> preferred <identifiersep> virtual <identifiersep> machine ( ) ; \n <ect>
\t4 string error <identifiersep> message = <string_literal> + log <identifiersep> message ; \n \t4 logger . error ( error <identifiersep> message ) ; \n \t4 throw new quota <identifiersep> exceeded <identifiersep> exception ( error <identifiersep> message ) ; } \n \t2 } else { \n <ect>
\t3 spawn <identifiersep> balancer . update <identifiersep> aggregate <identifiersep> statistics ( all <identifiersep> hosts ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n \t3 if ( ( error <identifiersep> counter . get <identifiersep> and <identifiersep> increment ( ) % <number_literal> ) == 0 ) { \n <ect>
\t1 @ consumes ( <string_literal> ) \n \t1 @ produces ( media <identifiersep> type . application <identifiersep> xml ) \n \t1 @ path ( <string_literal> ) \n \t1 public list < context <identifiersep> providers <identifiersep> name > post <identifiersep> mixed ( multipart <identifiersep> input input ) throws io <identifiersep> exception { \n <ect>
\t1 assert <identifiersep> equals ( <string_literal> , <string_literal> , json <identifiersep> params . remove ( <string_literal> ) ) ; \n \t1 assert <identifiersep> true ( <string_literal> , json <identifiersep> params . is <identifiersep> empty ( ) ) ; } \n @ test \n public void test <identifiersep> json <identifiersep> filter <identifiersep> code <identifiersep> invalid <identifiersep> json ( ) throws exception { \n <ect>
\t3 silent <identifiersep> close ( new close <identifiersep> status ( <number_literal> , <string_literal> ) ) ; } } \n \t1 private void handle <identifiersep> message <identifiersep> frame ( sock <identifiersep> js <identifiersep> frame frame ) { \n \t2 if ( ! is <identifiersep> open ( ) ) { \n \t3 if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t3 if ( remapped ) \n \t4 return ; \n \t3 remapped = true ; \n <ect>
\t5 local <identifiersep> broadcast <identifiersep> manager ? . send <identifiersep> broadcast ( intent ( constants . broadcast <identifiersep> update <identifiersep> ui ) ) \n \t5 show <identifiersep> toast <identifiersep> short ( this , r . string . saved <identifiersep> filters <identifiersep> imported ) } \n \t3 } catch ( e : exception ) { \n \t4 <comment> \n <ect>
\t5 } else { \n \t6 log . info ( <string_literal> ) ; \n \t6 return 1 ; } \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 map < string , object > connector <identifiersep> options = model . get <identifiersep> connector <identifiersep> options ( ) ; \n \t5 for ( map . entry < string , object > entry : options . entry <identifiersep> set ( ) ) { \n \t6 <comment> \n \t6 if ( ! endpoint <identifiersep> options . contains ( entry . get <identifiersep> key ( ) ) && ! connector <identifiersep> options . contains <identifiersep> key ( entry . get <identifiersep> key ( ) ) ) { \n <ect>
\t5 catch ( grid <identifiersep> exception e ) { \n \t6 throw new grid <identifiersep> runtime <identifiersep> exception ( <string_literal> + entry , e ) ; } \n \t5 catch ( grid <identifiersep> cache <identifiersep> entry <identifiersep> removed <identifiersep> exception ignore ) { \n <ect>
\t2 assert <identifiersep> true ( latch . await ( <number_literal> , time <identifiersep> unit . seconds ) ) ; \n \t2 assert <identifiersep> equals ( 0 , latch . get <identifiersep> count ( ) ) ; \n \t2 for ( int i = 0 ; i < count ; i ++ ) { \n \t3 scheduler . schedule ( <string_literal> + i , payload , <string_literal> , time , 0 , 0 ) ; } \n <ect>
\t5 background <identifiersep> observer <identifiersep> m <identifiersep> bean . class , \n \t5 background <identifiersep> observer . get <identifiersep> m <identifiersep> bean ( ) , \n \t5 background <identifiersep> observer <identifiersep> m <identifiersep> bean . type , \n \t5 <string_literal> ) ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public serial <identifiersep> message execute <identifiersep> refresh ( z <identifiersep> wave <identifiersep> node node , z <identifiersep> wave <identifiersep> indicator <identifiersep> command <identifiersep> class command <identifiersep> class , int endpoint <identifiersep> id , \n \t3 map < string , string > arguments ) { \n <ect>
\t5 lifecycle <identifiersep> state . starting <identifiersep> prep . equals ( get <identifiersep> state ( ) ) ) && \n \t5 start <identifiersep> children ) { \n \t4 child . start ( ) ; } \n \t2 } catch ( lifecycle <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 log . warn ( <string_literal> , process <identifiersep> id , e ) ; \n \t1 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n \t1 } catch ( throwable e ) { \n <ect>
\t3 final string value = get <identifiersep> character <identifiersep> data <identifiersep> from <identifiersep> element ( u8node ) ; \n \t3 logger . trace ( <string_literal> + value ) ; \n \t3 return integer . parse <identifiersep> int ( value ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 logger . error ( <string_literal> , ae ) ; \n \t3 throw ae ; } } \n \t1 @ test ( timeout = <number_literal> ) \n \t1 public void test <identifiersep> server <identifiersep> side <identifiersep> routing ( ) throws exception { \n <ect>
\t2 final string thread <identifiersep> pool <identifiersep> name = timer <identifiersep> service <identifiersep> resource <identifiersep> definition . thread <identifiersep> pool <identifiersep> name . resolve <identifiersep> model <identifiersep> attribute ( context , model ) . as <identifiersep> string ( ) ; \n \t2 final service <identifiersep> name thread <identifiersep> pool <identifiersep> service <identifiersep> name = ejb3subsystem <identifiersep> model . base <identifiersep> thread <identifiersep> pool <identifiersep> service <identifiersep> name . append ( thread <identifiersep> pool <identifiersep> name ) ; \n \t2 context . add <identifiersep> step ( new abstract <identifiersep> deployment <identifiersep> chain <identifiersep> step ( ) { \n \t3 protected void execute ( deployment <identifiersep> processor <identifiersep> target processor <identifiersep> target ) { \n <ect>
\t2 return requester . new <identifiersep> request ( type ) . put <identifiersep> string ( handle ) ; } \n \t1 @ override \n \t1 public void close ( ) \n \t3 throws io <identifiersep> exception { \n <ect>
\t4 workers <identifiersep> in <identifiersep> zoo <identifiersep> keeper . add <identifiersep> and <identifiersep> lock ( path , worker ) ; \n \t4 log . debug ( <string_literal> , worker ) ; \n \t3 } else { \n \t4 workers <identifiersep> in <identifiersep> zoo <identifiersep> keeper . replace ( path , current <identifiersep> version , worker ) ; \n <ect>
\t1 long time <identifiersep> spent <identifiersep> reading = system . current <identifiersep> time <identifiersep> millis ( ) - t0 ; \n \t1 total <identifiersep> time <identifiersep> spent <identifiersep> reading <identifiersep> bytes += time <identifiersep> spent <identifiersep> reading ; \n \t1 benchmark <identifiersep> counter . increment <identifiersep> time ( time <identifiersep> spent <identifiersep> reading ) ; \n <ect>
\t6 obs <identifiersep> exit . set <identifiersep> value <identifiersep> coded <identifiersep> name ( cause . get <identifiersep> name ( ) ) ; <comment> \n \t6 obs <identifiersep> exit . set <identifiersep> obs <identifiersep> datetime ( exit <identifiersep> date ) ; \n \t6 context . get <identifiersep> obs <identifiersep> service ( ) . save <identifiersep> obs ( obs <identifiersep> exit , <string_literal> ) ; } } } \n \t2 } else { \n <ect>
\t2 if ( service <identifiersep> credential != null ) { \n \t3 try { \n \t4 proxy <identifiersep> granting <identifiersep> ticket <identifiersep> id = handle <identifiersep> proxy <identifiersep> granting <identifiersep> ticket <identifiersep> delivery ( service <identifiersep> ticket <identifiersep> id , service <identifiersep> credential ) ; \n \t3 } catch ( final authentication <identifiersep> exception e ) { \n <ect>
\t4 log . debug ( <string_literal> , builder ) ; \n \t4 context . add <identifiersep> routes ( builder ) ; } \n \t3 start <identifiersep> camel <identifiersep> context ( ) ; \n \t2 } else { \n <ect>
\t5 count = consumer <identifiersep> count . decrement <identifiersep> and <identifiersep> get ( ) ; \n \t5 count = extract <identifiersep> consumer <identifiersep> count <identifiersep> from <identifiersep> message ( message , count ) ; \n \t5 fire <identifiersep> consumer <identifiersep> event ( new consumer <identifiersep> stopped <identifiersep> event ( this , destination , ( consumer <identifiersep> id ) remove <identifiersep> info . get <identifiersep> object <identifiersep> id ( ) , count ) ) ; } \n \t3 } else { \n <ect>
<comment> \n \t1 public void write <identifiersep> records ( ) \n \t1 { \n <ect>
\t4 && remote <identifiersep> solr <identifiersep> server <identifiersep> configuration . get <identifiersep> solr <identifiersep> http <identifiersep> urls ( ) [ 0 ] != null && remote <identifiersep> solr <identifiersep> server <identifiersep> configuration . get <identifiersep> solr <identifiersep> http <identifiersep> urls ( ) [ 0 ] . length ( ) > 0 ) { \n \t3 try { \n \t4 solr <identifiersep> server = initialize <identifiersep> with <identifiersep> existing <identifiersep> http <identifiersep> server ( ) ; \n \t3 } catch ( exception e1 ) { \n <ect>
\t1 if ( s != null ) { \n \t1 try { \n \t1 return long . value <identifiersep> of ( s ) . long <identifiersep> value ( ) * multiplier ; } \n \t1 catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 synchronized ( server . send <identifiersep> mutex ) { \n \t4 client = new client ( ++ client <identifiersep> rover , type ) ; \n \t4 clients . add ( client ) ; } \n \t3 client . start ( ) ; \n <ect>
\t8 listeners . remove ( listener ) ; \n \t7 } catch ( throwable t ) { <comment> \n \t8 logger . warn ( <string_literal> + failed + <string_literal> + t . get <identifiersep> message ( ) , t ) ; } } } \n \t4 } catch ( throwable t ) { <comment> \n <ect>
<comment> \n \t1 public abstract double get <identifiersep> coherence <identifiersep> value ( ) ; \n <comment> \n <comment> \n <ect>
\t4 return ; } \n \t3 string quorum <identifiersep> specs = params . substring ( 0 , space <identifiersep> index ) ; \n \t3 string cmd = params . substring ( space <identifiersep> index + 1 ) ; \n <ect>
\t1 @ override \n \t1 public void status <identifiersep> update <identifiersep> received ( event <identifiersep> object event , ws <identifiersep> controller <identifiersep> state state ) { \n \t2 logger . trace ( <string_literal> , state . get <identifiersep> state ( ) ) ; \n \t2 if ( controller <identifiersep> state . get <identifiersep> state ( ) . equals ( state . get <identifiersep> state ( ) ) == false ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t4 rmi <identifiersep> host = uri . get <identifiersep> host ( ) ; \n \t4 rmi <identifiersep> port = uri . get <identifiersep> port ( ) ; \n \t4 rmi <identifiersep> name = uri . get <identifiersep> path ( ) ; \n \t3 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t5 log . debug ( <string_literal> , \n \t7 checkpoint <identifiersep> id , reason ) ; \n \t4 } else { \n \t5 <comment> \n <ect>
\t3 logger . info ( <string_literal> , person . get <identifiersep> display <identifiersep> name ( ) ) ; \n \t2 } catch ( spark <identifiersep> exception se ) { \n \t3 logger . warn ( <string_literal> , se ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 } catch ( sapp <identifiersep> exception e ) { \n \t5 logger . error ( <string_literal> , e ) ; } \n \t4 break ; \n \t3 default : \n <ect>
synchronized void set <identifiersep> master <identifiersep> state ( master <identifiersep> state new <identifiersep> state ) { \n \t1 if ( state . equals ( new <identifiersep> state ) ) \n \t1 return ; \n \t1 if ( ! transition <identifiersep> ok [ state . ordinal ( ) ] [ new <identifiersep> state . ordinal ( ) ] ) { \n <ect>
\t7 network . class , network . get <identifiersep> id ( ) ) ; } \n \t4 <comment> \n \t4 network <identifiersep> offering offering =  <identifiersep> ntwk <identifiersep> offering <identifiersep> dao . find <identifiersep> by <identifiersep> id ( network . get <identifiersep> network <identifiersep> offering <identifiersep> id ( ) ) ; \n \t4 if ( ! implement ( network . get <identifiersep> vpc <identifiersep> id ( ) , network . get <identifiersep> physical <identifiersep> network <identifiersep> id ( ) , vsp <identifiersep> network , null ,  <identifiersep> nuage <identifiersep> vsp <identifiersep> entity <identifiersep> builder . build <identifiersep> network <identifiersep> dhcp <identifiersep> option ( network , offering ) ) ) { \n <ect>
\t1 if ( null == providers ) { \n \t1 throw new io <identifiersep> exception ( \n \t2 <string_literal> ) ; } \n \t1 if ( 1 != providers . size ( ) ) { \n <ect>
\t2 try { \n \t3 json . get <identifiersep> json <identifiersep> object ( <string_literal> ) . put ( pref . name ( ) , value ) ; \n \t3 this . save <identifiersep> preferences ( ) ; \n \t2 } catch ( json <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 serialization <identifiersep> policy = serialization <identifiersep> policy <identifiersep> loader . load <identifiersep> from <identifiersep> stream ( is , null ) ; \n \t2 } catch ( parse <identifiersep> exception e ) { \n <ect>
\t3 job . get <identifiersep> configuration ( ) . set ( batch <identifiersep> constants . cfg <identifiersep> output <identifiersep> path , output . to <identifiersep> string ( ) ) ; \n \t3 delete <identifiersep> path ( job . get <identifiersep> configuration ( ) , output ) ; \n \t3 return wait <identifiersep> for <identifiersep> completion ( job ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 m <identifiersep> bean <identifiersep> server mbsc = management <identifiersep> factory . get <identifiersep> platform <identifiersep> m <identifiersep> bean <identifiersep> server ( ) ; \n \t2 string d = get <identifiersep> domain <identifiersep> name ( domain ) ; \n \t2 set < object <identifiersep> name > s = mbsc . query <identifiersep> names ( new object <identifiersep> name ( d + <string_literal> ) , null ) ; \n \t2 if ( s . size ( ) > 0 ) { \n <ect>
\t2 1 * listener . on <identifiersep> output ( text <identifiersep> util . platform <identifiersep> line <identifiersep> separator ) \n \t2 0 * listener .  <identifiersep>  \n \t2 when : \n \t2 logging <identifiersep> manager . stop ( ) \n <ect>
\t4 raw <identifiersep> scan <identifiersep> buffer . flip ( ) ; \n \t4 raw <identifiersep> scan <identifiersep> byte <identifiersep> string = h <identifiersep> base <identifiersep> zero <identifiersep> copy <identifiersep> byte <identifiersep> string . wrap ( raw <identifiersep> scan <identifiersep> buffer . array ( ) , raw <identifiersep> scan <identifiersep> buffer . position ( ) , raw <identifiersep> scan <identifiersep> buffer . limit ( ) ) ; \n \t4 break ; \n \t3 } catch ( buffer <identifiersep> overflow <identifiersep> exception boe ) { \n <ect>
\t5 long public <identifiersep> ip <identifiersep> id = long . parse <identifiersep> long ( values . get ( <string_literal> ) ) ; \n \t5 s <identifiersep> logger . info ( <string_literal> + public <identifiersep> ip <identifiersep> id ) ; \n \t5 s <identifiersep> public <identifiersep> ip <identifiersep> id . set ( values . get ( <string_literal> ) ) ; } \n \t3 } else { \n <ect>
\t3 target = new file ( target . get <identifiersep> path ( ) ) ; \n \t2 bucket shadow = ( finished && succeeded ) ? get <identifiersep> bucket ( ) : null ; \n \t2 if ( shadow != null ) { \n \t3 if ( data <identifiersep> size != shadow . size ( ) ) { \n <ect>
\t1 def current <identifiersep> attributes = args [ 0 ] \n \t1 def logger = args [ 1 ] \n \t1 def principal = args [ <number_literal> ] \n \t1 def service = args [ <number_literal> ] \n <ect>
\t2 transaction <identifiersep> map . put ( txn <identifiersep> id , flume <identifiersep> event <identifiersep> pointer . from <identifiersep> long ( event <identifiersep> pointer ) ) ; } } \n \t1 set <identifiersep> multimap < long , long > inflight <identifiersep> takes = queue . deserialize <identifiersep> inflight <identifiersep> takes ( ) ; \n \t1 try { \n \t1 for ( file log : logs ) { \n <ect>
\t2 try { \n \t3 d <identifiersep> bdao = ( jdbc <identifiersep> base <identifiersep> dao ) class . for <identifiersep> name ( ddp ) . new <identifiersep> instance ( ) ; \n \t3 logger . debug ( <string_literal> , d <identifiersep> bdao . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; \n \t2 } catch ( instantiation <identifiersep> exception e ) { \n <ect>
\t3 command command = commands . get ( command <identifiersep> key ) ; \n \t3 if ( command != null ) { \n \t4 if ( request . get <identifiersep> method ( ) . equals ( <string_literal> ) ) { \n <ect>
\t3 logger l = logger <identifiersep> factory . get <identifiersep> logger ( logger <identifiersep> name ) ; \n \t3 if ( null != l ) { \n \t4 b . output <identifiersep> to ( l ) ; \n \t3 } else { \n <ect>
\t2 saml <identifiersep> document <identifiersep> holder document <identifiersep> holder = new saml <identifiersep> client <identifiersep> builder ( ) \n \t2 . idp <identifiersep> initiated <identifiersep> login ( get <identifiersep> auth <identifiersep> server <identifiersep> saml <identifiersep> endpoint ( samlservletdemo ) , <string_literal> ) . build ( ) \n \t2 . login ( ) . user ( bburke <identifiersep> user ) . build ( ) \n \t2 . get <identifiersep> saml <identifiersep> response ( binding . post ) ; \n <ect>
\t3 if ( mary <identifiersep> voice != null ) { \n \t4 directed <identifiersep> graph voice <identifiersep> cart = mary <identifiersep> voice . get <identifiersep> duration <identifiersep> graph ( ) ; \n \t4 if ( voice <identifiersep> cart != null ) { \n \t5 current <identifiersep> cart = voice <identifiersep> cart ; \n <ect>
\t1 public list < task < ? extends serializable > > get <identifiersep> dependent <identifiersep> tasks ( ) { \n \t1 count ++ ; \n \t1 system . err . println ( <string_literal> ) ; \n \t1 ( new exception ( ) ) . print <identifiersep> stack <identifiersep> trace ( system . err ) ; \n <ect>
\t5 <string_literal> \n \t4 ) ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) \n \t2 { \n <ect>
\t4 try { \n \t5 sync <identifiersep> meta <identifiersep> from <identifiersep> cache ( topology , metric <identifiersep> context ) ; \n \t5 sync <identifiersep> non <identifiersep> sys <identifiersep> meta <identifiersep> from <identifiersep> remote ( topology , metric <identifiersep> context ) ; \n \t4 } catch ( exception e1 ) { \n <ect>
\t4 { \n \t5 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t4 if ( entry != null ) \n \t4 { \n <ect>
\t2 @ override \n \t2 public void run ( ) { \n \t3 long now = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 if ( ( now - start <identifiersep> time ) >= connection <identifiersep> timeout && connect <identifiersep> checker <identifiersep> task != null && ! async <identifiersep> tasks . is <identifiersep> shutdown ( ) ) { \n <ect>
\t9 session <identifiersep> handler . join <identifiersep> tournament <identifiersep> table ( room <identifiersep> id , table <identifiersep> id , session <identifiersep> handler . get <identifiersep> user <identifiersep> name ( ) , player <identifiersep> type . human , 1 , null , <string_literal> ) ; } \n \t7 } else { \n \t8 join <identifiersep> table <identifiersep> dialog . show <identifiersep> dialog ( room <identifiersep> id , table <identifiersep> id , true , deck <identifiersep> type . starts <identifiersep> with ( <string_literal> ) ) ; } \n \t6 } else { \n <ect>
\t3 connector . write ( data <identifiersep> parser . escape ) ; \n \t3 byte [ ] response = receive <identifiersep> data ( ) ; \n \t3 return response ; \n \t2 } catch ( exception e ) { \n <ect>
public get <identifiersep> cookies ( string mapped <identifiersep> uri ) { \n \t1 super ( mapped <identifiersep> uri ) ; } \n @ override \n public response safe <identifiersep> handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n <ect>
\t3 file file = new file ( upload <identifiersep> directory ( ) + file . separator + object <identifiersep> key <identifiersep> path <identifiersep> value ( ) ) ; \n \t3 file . delete ( ) ; \n \t3 log . debug ( <string_literal> + file + <string_literal> ) ; \n \t2 } else { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 logger . debug ( <string_literal> ) ; \n <ect>
\t4 satel <identifiersep> message response = this . read <identifiersep> message ( ) ; \n \t4 timeout <identifiersep> timer . stop ( ) ; \n \t4 if ( response == null ) { \n \t5 break ; } \n <ect>
\t3 final set < string > ips = get <identifiersep> client <identifiersep> ips ( cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> radius ( ) . get <identifiersep> client ( ) ) ; \n \t3 if ( ! ips . is <identifiersep> empty ( ) ) { \n \t4 plan . register <identifiersep> authentication <identifiersep> handler ( radius <identifiersep> authentication <identifiersep> handler ( ) ) ; \n \t3 } else { \n <ect>
\t2 return new maintain <identifiersep> answer ( cmd ) ; } \n \t1 @ override \n \t1 public answer check <identifiersep> network <identifiersep> command ( check <identifiersep> network <identifiersep> command cmd ) { \n <ect>
\t2 if ( pb < 0 || pb > <number_literal> ) { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + pb + <string_literal> ) ; } \n \t2 if ( lc + lp > <number_literal> ) { \n \t3 if ( ! warning <identifiersep> logged ) { \n <ect>
<comment> \n \t1 protected void exec <identifiersep> groovy ( final string txt , final print <identifiersep> stream out ) { \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 if ( ! should <identifiersep> be <identifiersep> enabled ( ) ) \n \t4 this . disable ( ) ; } \n \t2 catch ( configuration <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 con . set <identifiersep> next <identifiersep> send <identifiersep> time ( - 1 ) ; \n \t2 } else { \n \t3 if ( con . get <identifiersep> next <identifiersep> send <identifiersep> time ( ) > 0 ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 assert <identifiersep> equals ( 0 , common . docs . get <identifiersep> count ( ) ) ; \n \t3 if ( 1 == common . refresh . get <identifiersep> listeners ( ) ) { \n \t4 break ; } \n \t3 if ( end - system . nano <identifiersep> time ( ) < 0 ) { \n <ect>
\t3 for ( string ip : ips ) { \n \t4 try { \n \t5 inet <identifiersep> address address = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( ip ) ; \n \t5  <identifiersep> add <identifiersep> inet <identifiersep> address ( address , local <identifiersep> ns <identifiersep> mutable <identifiersep> array ) ; \n <ect>
\t3 log . info ( <string_literal> ) ; \n \t3 for ( stored <identifiersep> block b : old <identifiersep> blocks ) { \n \t4 log . info ( <string_literal> , b . get <identifiersep> header ( ) . get <identifiersep> hash <identifiersep> as <identifiersep> string ( ) ) ; \n \t4 old <identifiersep> block <identifiersep> hashes . add ( b . get <identifiersep> header ( ) . get <identifiersep> hash ( ) ) ; } \n <ect>
\t3 if ( log . should <identifiersep> log ( log . warn ) ) \n \t4 log . warn ( <string_literal> + file ) ; \n \t2 } else { \n \t3 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 try { \n \t2 security <identifiersep> helper . get <identifiersep> instance ( ) . run <identifiersep> as <identifiersep> system ( new callable < void > ( ) { \n \t3 @ override \n \t3 public void call ( ) throws exception { \n <ect>
\t5 retry -- ; \n \t5 s <identifiersep> logger . info ( <string_literal> + template <identifiersep> id + <string_literal> + checksum + <string_literal> + retry ) ; \n \t5 valid = digest <identifiersep> helper . check ( checksum , new file <identifiersep> input <identifiersep> stream ( downloaded <identifiersep> file <identifiersep> path ) ) ; \n \t5 if ( ! valid && retry > 0 ) { \n <ect>
\t5 if ( ( eq > 0 ) && ( eq < pair . length ( ) - 1 ) ) { \n \t6 string name = pair . substring ( 0 , eq ) ; \n \t6 string val = pair . substring ( eq + 1 ) ; \n \t6 if ( val . length ( ) < = 0 ) { \n <ect>
\t3 } else { \n \t4 log . info ( <string_literal> ) ; \n \t4 broker2 . wait <identifiersep> until <identifiersep> stopped ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
input <identifiersep> stream locate <identifiersep> with <identifiersep> dispatcher ( final string uri ) \n \t1 throws io <identifiersep> exception { \n \t1 final context context = context . get ( ) ; \n \t1 if ( dispatcher <identifiersep> locator == null ) { \n <ect>
\t2 keys <identifiersep> removed ++ ; \n \t2 try { \n \t2 key <identifiersep> distributor . remove ( key ) ; \n \t2 } catch ( keeper <identifiersep> exception | interrupted <identifiersep> exception e ) { \n <ect>
\t3 em . persist ( p <identifiersep> item ) ; \n \t3 em . get <identifiersep> transaction ( ) . commit ( ) ; \n \t3 logger . debug ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 logger . debug ( <string_literal> , name ) ; \n \t5 try { \n \t6 add <identifiersep> url ( urls , deria5string . get <identifiersep> instance ( name . get <identifiersep> name ( ) ) . get <identifiersep> string ( ) ) ; \n \t5 } catch ( final exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 protected void internal <identifiersep> receive <identifiersep> command ( string item <identifiersep> name , command command ) { \n <ect>
\t3 log . warn ( <string_literal> , port , uhe ) ; \n \t3 write <identifiersep> error <identifiersep> to <identifiersep> client ( http <identifiersep> reply <identifiersep> hdr . form <identifiersep> server <identifiersep> not <identifiersep> found ( ) ) ; \n \t3 result = generate <identifiersep> error <identifiersep> result ( result , request , uhe ) ; <comment> \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t1 public boolean revoke <identifiersep> all <identifiersep> firewall <identifiersep> rules <identifiersep> for <identifiersep> network ( long network <identifiersep> id , long user <identifiersep> id , account caller ) throws resource <identifiersep> unavailable <identifiersep> exception { \n \t2 list < firewall <identifiersep> rule > rules = new array <identifiersep> list < firewall <identifiersep> rule > ( ) ; \n \t2 list < firewall <identifiersep> rule <identifiersep> vo > fw <identifiersep> rules =  <identifiersep> firewall <identifiersep> dao . list <identifiersep> by <identifiersep> network <identifiersep> and <identifiersep> purpose <identifiersep> and <identifiersep> not <identifiersep> revoked ( network <identifiersep> id , purpose . firewall ) ; \n <ect>
\t7 <comment> \n \t7 command <identifiersep> pre <identifiersep> processor pp = ( command <identifiersep> pre <identifiersep> processor ) i ; \n \t7 pp . initialize ( init <identifiersep> props ) ; \n \t7 conn . add <identifiersep> pre <identifiersep> processor ( pp ) ; \n <ect>
\t3 if ( result && accept ) { \n \t4 <comment> \n \t4 project <identifiersep> account project <identifiersep> account =  <identifiersep> project <identifiersep> account <identifiersep> dao . find <identifiersep> by <identifiersep> project <identifiersep> id <identifiersep> account <identifiersep> id ( project <identifiersep> id , account <identifiersep> id ) ; \n \t4 if ( project <identifiersep> account != null ) { \n <ect>
\t3 try { \n \t4 file <identifiersep> utils . delete <identifiersep> directory ( tempdir ) ; \n \t3 } catch ( io <identifiersep> exception ex ) { \n \t4 <comment> \n <ect>
\t2 try { \n \t3 el <identifiersep> name = strategy . find <identifiersep> q <identifiersep> name <identifiersep> for <identifiersep> soap <identifiersep> action <identifiersep> or <identifiersep> type ( <string_literal> , class . class ) ; \n \t3 fail ( ) ; \n \t2 } catch ( runtime <identifiersep> camel <identifiersep> exception e ) { \n <ect>
\t2 for ( entry < key , value > entry : md <identifiersep> scanner ) { \n \t2 if ( ! entry . get <identifiersep> key ( ) . get <identifiersep> row ( ) . equals ( row ) ) \n \t3 break ; } \n \t1 } catch ( table <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 logger . info ( <string_literal> + results . get <identifiersep> first ( ) . size ( ) ) ; \n \t3 logger . info ( <string_literal> + results . get <identifiersep> first ( ) ) ; \n \t3 logger . error ( <string_literal> + results . get <identifiersep> second ( ) . size ( ) ) ; \n \t3 logger . error ( <string_literal> + results . get <identifiersep> second ( ) ) ; \n <ect>
\t2 } catch ( joran <identifiersep> exception je ) { \n \t3 status <identifiersep> printer . print ( lc ) ; } \n \t2 logger . debug ( <string_literal> + 0 ) ; \n \t2 mdc . put ( <string_literal> , <string_literal> ) ; \n <ect>
\t2 message <identifiersep> consumer consumer <identifiersep> b = create <identifiersep> consumer ( <string_literal> , advisory <identifiersep> topic ) ; \n \t2 this . send <identifiersep> messages ( <string_literal> , new active <identifiersep> mq <identifiersep> topic ( <string_literal> ) , 1 ) ; \n \t2 message <identifiersep> id <identifiersep> list messages <identifiersep> a = get <identifiersep> consumer <identifiersep> messages ( <string_literal> , consumer <identifiersep> a ) ; \n \t2 message <identifiersep> id <identifiersep> list messages <identifiersep> b = get <identifiersep> consumer <identifiersep> messages ( <string_literal> , consumer <identifiersep> b ) ; \n <ect>
\t3 actual <identifiersep> db <identifiersep> name + <string_literal> + actual <identifiersep> tbl <identifiersep> name , part <identifiersep> spec , \n \t3 context . event <identifiersep> only <identifiersep> replication <identifiersep> spec ( ) ) ; \n \t1 task < ddl <identifiersep> work > truncate <identifiersep> ptn <identifiersep> task = task <identifiersep> factory . get ( \n \t2 new ddl <identifiersep> work ( read <identifiersep> entity <identifiersep> set , write <identifiersep> entity <identifiersep> set , truncate <identifiersep> table <identifiersep> desc ) ) ; \n <ect>
\t3 if ( ! aws . get <identifiersep> result ( ) ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + dest . get <identifiersep> host ( ) . get <identifiersep> id ( ) + <string_literal> + aws . get <identifiersep> details ( ) ) ; } \n \t3 return aws . get <identifiersep> result ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 <comment> \n \t7 get <identifiersep> context ( ) . profile <identifiersep> manager ( ) . heard <identifiersep> about ( ri . get <identifiersep> identity ( ) . get <identifiersep> hash ( ) , ri . get <identifiersep> published ( ) ) ; \n \t6 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n \t7 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 if not params . zookeeper <identifiersep> connect : \n \t1 logger . info ( <string_literal> ) \n \t1 return \n \t1 if not params . secure <identifiersep> acls : \n <ect>
<comment> \n \t1 public string get <identifiersep> model <identifiersep> id ( string device <identifiersep> id ) { \n \t2 if ( settings <identifiersep> data == null ) { \n <ect>
\t6 new <identifiersep> zone . set <identifiersep> state ( load <identifiersep> balancer <identifiersep> zone . state . in <identifiersep> service ) ; \n \t6 entities . persist ( new <identifiersep> zone ) ; } \n \t5 db . commit ( ) ; \n \t4 } catch ( final exception ex ) { \n <ect>
\t4 } catch ( exception e ) { \n \t5 final io <identifiersep> exception corrupt <identifiersep> index <identifiersep> exception ; \n \t5 if ( ( corrupt <identifiersep> index <identifiersep> exception = exceptions <identifiersep> helper . unwrap <identifiersep> corruption ( e ) ) != null ) { \n \t6 if ( store . check <identifiersep> integrity <identifiersep> no <identifiersep> exception ( md ) == false ) { <comment> \n <ect>
\t4 new <identifiersep> cond <identifiersep> ab . add ( e ) ; \n \t3 else \n \t4 new <identifiersep> cond <identifiersep> c . add ( e ) ; } \n \t2 if ( new <identifiersep> cond <identifiersep> ab . size ( ) + new <identifiersep> cond <identifiersep> c . size ( ) != conditions . size ( ) ) \n <ect>
\t1 @ path ( <string_literal> ) \n \t1 @ consumes ( <string_literal> ) \n \t1 public keep <identifiersep> charset <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element xml <identifiersep> accepts ( keep <identifiersep> charset <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element movie ) { \n \t2 logger . info ( <string_literal> + charset . default <identifiersep> charset ( ) ) ; \n <ect>
\t5 . get <identifiersep> local <identifiersep> socket <identifiersep> address ( new inet <identifiersep> socket <identifiersep> address ( \n \t6 intended <identifiersep> destination , random <identifiersep> addr <identifiersep> disc <identifiersep> port ) ) ; } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t1 public web <identifiersep> application <identifiersep> service extract <identifiersep> service <identifiersep> internal ( final http <identifiersep> servlet <identifiersep> request request ) { \n \t2 return get <identifiersep> service <identifiersep> factories ( ) . stream ( ) . map ( factory - > { \n \t3 final web <identifiersep> application <identifiersep> service service = factory . create <identifiersep> service ( request ) ; \n \t3 if ( service != null ) { \n <ect>
\t3 thread . sleep ( <number_literal> ) ; } \n \t2 catch ( interrupted <identifiersep> exception ex ) \n \t2 { } \n \t2 string room <identifiersep> name = test <identifiersep> room <identifiersep> base <identifiersep> name + room <identifiersep> id ; \n <ect>
\t2 for ( map . entry < string , collection < string > > e : new <identifiersep> references . as <identifiersep> map ( ) . entry <identifiersep> set ( ) ) { \n \t3 string uuid = e . get <identifiersep> key ( ) ; \n \t3 string passive <identifiersep> path = get <identifiersep> path <identifiersep> by <identifiersep> uuid ( uuid ) ; \n \t3 if ( passive <identifiersep> path == null ) { \n <ect>
\t1 private string  <identifiersep> name ; \n \t1 private management <identifiersep> server <identifiersep> host <identifiersep> dao  <identifiersep> mshost <identifiersep> dao ; \n \t1 public void on <identifiersep> cluster <identifiersep> alert ( object sender , event <identifiersep> args args ) { \n <ect>
\t2 } else { \n \t2 sb . append ( string . format ( <string_literal> , new object [ ] { byte . value <identifiersep> of ( b ) } ) ) ; } } \n \t1 return sb . to <identifiersep> string ( ) ; } \n \t1 public void close ( reporter reporter ) throws io <identifiersep> exception { \n <ect>
\t4 sent <identifiersep> so <identifiersep> far += sent ; \n \t4 if ( ( encoded <identifiersep> size - sent <identifiersep> so <identifiersep> far ) == 0 ) { \n \t5 break ; } \n \t3 } else { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 url += auth <identifiersep> option . get <identifiersep> query ( <string_literal> ) ; } \n \t2 return url ; } \n \t1 public string get <identifiersep> o <identifiersep> auth <identifiersep> re <identifiersep> authentication <identifiersep> url ( string callback <identifiersep> url , string nonce ) { \n \t2 if ( nonce == null ) { \n <ect>
\t3 list < vsp <identifiersep> dhcp <identifiersep> vm <identifiersep> option > dhcp <identifiersep> options = dhcp <identifiersep> options <identifiersep> per <identifiersep> domain . get ( domain <identifiersep> id ) ; \n \t3 update <identifiersep> dhcp <identifiersep> option <identifiersep> vsp <identifiersep> command cmd = new update <identifiersep> dhcp <identifiersep> option <identifiersep> vsp <identifiersep> command ( dhcp <identifiersep> options , vsp <identifiersep> network <identifiersep> for <identifiersep> domain ) ; \n \t3 answer answer =  <identifiersep> agent <identifiersep> mgr . easy <identifiersep> send ( nuage <identifiersep> vsp <identifiersep> host . get <identifiersep> id ( ) , cmd ) ; \n \t3 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t1 if ( key . equals ( javamail <identifiersep> from <identifiersep> property ) ) { \n \t2 from <identifiersep> address = value ; } } \n \t1 <comment> \n \t1 if ( null == notification . recipients ) { \n <ect>
\t3 <string_literal> , blueprint <identifiersep> service <identifiersep> for <identifiersep> excluded <identifiersep> config , config <identifiersep> type ) ; \n \t2 continue ; } \n \t2 map < string , string > config <identifiersep> properties = stack . get <identifiersep> configuration <identifiersep> properties ( blueprint <identifiersep> service , config <identifiersep> type ) ; \n \t2 for ( map . entry < string , string > entry : config <identifiersep> properties . entry <identifiersep> set ( ) ) { \n <ect>
\t3 logger . info ( <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) ) ; \n \t3 logger . info ( <string_literal> + results . get <identifiersep> first ( ) . size ( ) ) ; \n \t3 logger . info ( <string_literal> + results . get <identifiersep> first ( ) ) ; \n \t3 logger . error ( <string_literal> + results . get <identifiersep> second ( ) . size ( ) ) ; \n <ect>
\t2 @ override \n \t2 public void ack ( object msg <identifiersep> id ) { } \n \t2 @ override \n \t2 public void fail ( object msg <identifiersep> id ) { \n <ect>
\t2 this . password <identifiersep> management <identifiersep> service = password <identifiersep> management <identifiersep> service ; } \n \t1 @ override \n \t1 protected event do <identifiersep> execute ( final request <identifiersep> context request <identifiersep> context ) { \n \t2 if ( ! communications <identifiersep> manager . is <identifiersep> mail <identifiersep> sender <identifiersep> defined ( ) ) { \n <ect>
\t5 } else { \n \t6 logger . warn ( <string_literal> , get <identifiersep> parameters <identifiersep> as <identifiersep> string ( sources ) ) ; \n \t6 return <string_literal> ; } \n \t4 } else { \n <ect>
\t2 log . info ( <string_literal> + duration + <string_literal> ) ; \n \t2 log . info ( <string_literal> + save <identifiersep> count . int <identifiersep> value ( ) + <string_literal> + bytes <identifiersep> written . get ( ) + <string_literal> ) ; \n \t2 log . info ( <string_literal> + ( read1count . get ( ) + read2count . get ( ) ) + <string_literal> + bytes <identifiersep> read . get ( ) + \n \t3 <string_literal> ) ; \n <ect>
\t1 string h <identifiersep> cat <identifiersep> key <identifiersep> token <identifiersep> signature = context . get <identifiersep> configuration ( ) . get ( \n \t2 h <identifiersep> cat <identifiersep> constants . hcat <identifiersep> key <identifiersep> token <identifiersep> signature ) ; \n \t1 if ( token <identifiersep> str <identifiersep> form != null \n \t2 && h <identifiersep> cat <identifiersep> key <identifiersep> token <identifiersep> signature != null ) { \n <ect>
<comment> \n \t1 public static void handle <identifiersep> error ( logger logger , string message , throwable e ) { \n <ect>
\t2  <identifiersep> ugent <identifiersep> task <identifiersep> pool . shutdown <identifiersep> now ( ) ; } \n \t1 public long get <identifiersep> id ( ) { \n \t2 return  <identifiersep> id ; } \n \t1 public void set <identifiersep> id ( final long id ) { \n <ect>
\t2 case e : exception = > main . show <identifiersep> error <identifiersep> dialog ( <string_literal> , e ) } } \n private def handle <identifiersep> analyser <identifiersep> event ( changed : analyser <identifiersep> event ) = changed match { \n \t1 case analyser <identifiersep> event . arena <identifiersep> end = > \n \t1  <identifiersep> notify ( <string_literal> ) \n <ect>
\t3 item <identifiersep> service item <identifiersep> service = content <identifiersep> service <identifiersep> factory . get <identifiersep> instance ( ) . get <identifiersep> item <identifiersep> service ( ) ; \n \t3 bitstream <identifiersep> service bitstream <identifiersep> service = content <identifiersep> service <identifiersep> factory . get <identifiersep> instance ( ) . get <identifiersep> bitstream <identifiersep> service ( ) ; \n \t3 workspace <identifiersep> item <identifiersep> service workspace <identifiersep> item <identifiersep> service = content <identifiersep> service <identifiersep> factory . get <identifiersep> instance ( ) . get <identifiersep> workspace <identifiersep> item <identifiersep> service ( ) ; \n \t3 install <identifiersep> item <identifiersep> service install <identifiersep> item <identifiersep> service = content <identifiersep> service <identifiersep> factory . get <identifiersep> instance ( ) . get <identifiersep> install <identifiersep> item <identifiersep> service ( ) ; \n <ect>
\t3 if ( return <identifiersep> item != null ) { \n \t4 final ticket ticket = deserialize <identifiersep> ticket ( return <identifiersep> item ) ; \n \t4 logger . debug ( <string_literal> , ticket ) ; \n \t4 if ( ticket == null || ticket . is <identifiersep> expired ( ) ) { \n <ect>
\t3 { \n \t4 <comment> \n \t4 <comment> \n \t4 <comment> \n <ect>
\t4 } ) ; \n \t3 } else { \n \t4 process <identifiersep> builder process <identifiersep> builder = get <identifiersep> builders ( ) [ 0 ] ; \n \t4 list < string > program <identifiersep> and <identifiersep> args = process <identifiersep> builder . command ( ) ; \n <ect>
\t1 llap <identifiersep> app <identifiersep> status <identifiersep> cmd <identifiersep> timeout = 0 \n \t1 llap <identifiersep> status <identifiersep> cmd = format ( <string_literal> ) \n \t1 code , output , error = shell . checked <identifiersep> call ( llap <identifiersep> status <identifiersep> cmd , user = status <identifiersep> params . hive <identifiersep> user , stderr = subprocess . pipe , \n <number_literal> logoutput = false ) \n <ect>
\t4 set <identifiersep> response <identifiersep> object ( store <identifiersep> response ) ; \n \t3 } else { \n \t4 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , <string_literal> ) ; } \n \t2 } catch ( discovery <identifiersep> exception ex ) { \n <ect>
\t4 <comment> \n \t4 if ( point . length ( ) > 0 && advice <identifiersep> class . length ( ) > 0 ) { \n \t5 advice <identifiersep> points . add ( new advice <identifiersep> point ( mod , point , advice <identifiersep> class ) ) ; \n \t4 } else { \n <ect>
\t3 logger . error ( <string_literal> ) ; \n \t3 stop <identifiersep> rpc <identifiersep> server ( ) ; } \n \t2 if ( is <identifiersep> native <identifiersep> transport <identifiersep> running ( ) ) \n \t2 { \n <ect>
\t3 assert <identifiersep> true ( <string_literal> , ex instanceof camel <identifiersep> execution <identifiersep> exception ) ; \n \t3 assert <identifiersep> true ( <string_literal> , ex . get <identifiersep> cause ( ) instanceof invalid <identifiersep> operation ) ; } } \n \t1 @ test \n \t1 public void test <identifiersep> void <identifiersep> method <identifiersep> invocation ( ) throws exception { \n <ect>
\t1 public void on <identifiersep> topic ( string chan , irc <identifiersep> user user , string topic ) { \n \t2 log . debug ( <string_literal> + server + <string_literal> + chan + <string_literal> + user + <string_literal> + topic ) ; } \n \t1 @ override \n \t1 public void unknown ( string prefix , string command , string middle , string trailing ) { \n <ect>
\t5 log . debug ( <string_literal> + uri + <string_literal> + mapping . get <identifiersep> url <identifiersep> data ( ) . get <identifiersep> url <identifiersep> pattern ( ) + <string_literal> ) ; } \n \t4 url <identifiersep> mapping <identifiersep> info current = mapping . match ( uri ) ; \n \t4 if ( current != null ) { \n <ect>
\t4 writing = true ; } \n \t3 try { \n \t4 write <identifiersep> buffer ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 get <identifiersep> resource <identifiersep> converter ( ) . get <identifiersep> string ( \n \t5 <string_literal> , \n \t5 <string_literal> ) , \n \t4 j <identifiersep> option <identifiersep> pane . error <identifiersep> message ) ; \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 throw new unauthorized <identifiersep> service <identifiersep> exception ( unauthorized <identifiersep> service <identifiersep> exception . code <identifiersep> unauthz <identifiersep> service ) ; } \n \t2 if ( prop <identifiersep> name . is <identifiersep> assigned <identifiersep> to ( service ) ) { \n \t3 return prop <identifiersep> name . get <identifiersep> property <identifiersep> value ( service ) . get <identifiersep> value ( ) ; } \n <ect>
\t2 } catch ( unauthorized <identifiersep> action <identifiersep> exception ex ) { \n \t3 throw ex ; \n \t2 } catch ( exception ex ) { \n \t3 throw <identifiersep> ex = true ; \n <ect>
\t7 log . info ( <string_literal> , attempt , exchange ) ; \n \t7 string body = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( string . class ) ; \n \t7 if ( body . contains ( <string_literal> ) ) { \n \t8 if ( ++ attempt < = <number_literal> ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 indexer . stop ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 assert <identifiersep> no <identifiersep> timeout ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> timeout ( <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> no <identifiersep> relocating <identifiersep> shards ( true ) ) ; \n <ect>
<comment> \n \t5 wfso = wait <identifiersep> failed ; \n <ect>
\t4 rs . close ( ) ; } \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 pstmt . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> sender ( json <identifiersep> object json , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception { \n \t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> status ( json <identifiersep> object json , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception { \n <ect>
@ override \n public lazy <identifiersep> object <identifiersep> base create <identifiersep> row <identifiersep> id ( object <identifiersep> inspector inspector ) throws ser <identifiersep> de <identifiersep> exception { \n \t1 lazy <identifiersep> object <identifiersep> base lazy <identifiersep> obj = lazy <identifiersep> factory . create <identifiersep> lazy <identifiersep> object ( inspector , \n \t2 column <identifiersep> encoding . binary == row <identifiersep> id <identifiersep> mapping . get <identifiersep> encoding ( ) ) ; \n <ect>
\t3 if ( debug ) { \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( \n \t5 <string_literal> + ( widget == null ? <string_literal> : widget . get <identifiersep> class ( ) ) + <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 if ( return <identifiersep> value instanceof response ) { \n \t3 return get <identifiersep> principal <identifiersep> id <identifiersep> from <identifiersep> saml <identifiersep> response ( ( response ) return <identifiersep> value ) ; } \n \t2 if ( return <identifiersep> value instanceof envelope ) { \n \t3 return get <identifiersep> principal <identifiersep> id <identifiersep> from <identifiersep> saml <identifiersep> ecp <identifiersep> response ( ( envelope ) return <identifiersep> value ) ; } \n <ect>
\t6 <comment> \n \t6 worker <identifiersep> vm . detach <identifiersep> all <identifiersep> disks ( ) ; \n \t6 worker <identifiersep> vm . destroy ( ) ; } \n \t4 } catch ( throwable e ) { \n <ect>
\t1 string error <identifiersep> message = <string_literal> ambari - server start -- skip - database - validation \\ <string_literal> ; \n \t1 log . error ( error <identifiersep> message ) ; \n \t1 throw new ambari <identifiersep> exception ( error <identifiersep> message ) ; } } \n public static void check <identifiersep> db <identifiersep> version ( ) throws ambari <identifiersep> exception { \n <ect>
<comment> \n \t1 private void flush <identifiersep> new <identifiersep> partitions ( ) { \n <ect>
\t10 old <identifiersep> val , has <identifiersep> old <identifiersep> val , cu . subject <identifiersep> id ( tx , cctx ) , null , \n \t10 in <identifiersep> tx ( ) ? tx . resolve <identifiersep> task <identifiersep> name ( ) : null ) ; \n \t8 cctx . cache ( ) . metrics0 ( ) . on <identifiersep> read ( false ) ; } \n <ect>
\t3 con . set <identifiersep> connection <identifiersep> error ( <string_literal> + waited + <string_literal> ) ; \n \t3 con . disconnect ( false ) ; \n \t3 reschedule ( 0 , con ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t7 if ( ! ( digest . equals <identifiersep> ignore <identifiersep> case ( testsum ) ) ) { \n \t8 logger . error ( this , <string_literal> + digest + <string_literal> + testsum ) ; \n \t8 throw new plugin <identifiersep> not <identifiersep> found <identifiersep> exception ( <string_literal> + digest + <string_literal> + testsum ) ; } } \n \t5 } catch ( io <identifiersep> exception ioe1 ) { \n <ect>
\t1 mutator = mutator <identifiersep> factory . new <identifiersep> mutator ( output <identifiersep> format , table . get <identifiersep> write <identifiersep> id ( ) , new <identifiersep> partition <identifiersep> path , new <identifiersep> bucket <identifiersep> id ) ; \n \t1 bucket <identifiersep> id = new <identifiersep> bucket <identifiersep> id ; \n \t1 partition <identifiersep> values = new <identifiersep> partition <identifiersep> values ; \n \t1 partition <identifiersep> path = new <identifiersep> partition <identifiersep> path ; \n <ect>
<comment> \n private static callable < boolean > handle <identifiersep> state <identifiersep> transition ( final vm <identifiersep> instance vm , final vm <identifiersep> state new <identifiersep> state , final vm <identifiersep> state old <identifiersep> state , final vm <identifiersep> state older <identifiersep> state ) { \n \t1 callable < boolean > action = null ; \n <ect>
\t2 iterator < string > templates = template <identifiersep> engine . doc <identifiersep> templates <identifiersep> iterator ( ) ; \n \t2 while ( templates . has <identifiersep> next ( ) ) { \n \t3 string template = templates . next ( ) ; \n \t3 string dest <identifiersep> file <identifiersep> name = destdir + fs + tool . get <identifiersep> file ( template ) ; \n <ect>
\t2 if ( s3object == null ) { \n \t3 return null ; } \n \t2 return new s3resource ( s3object , location ) ; } \n \t1 public external <identifiersep> resource <identifiersep> meta <identifiersep> data get <identifiersep> meta <identifiersep> data ( uri location , boolean revalidate ) { \n <ect>
\t1 void write <identifiersep> state ( ) { \n \t2 try { \n \t3 less <identifiersep> files . write ( state <identifiersep> file , codec <identifiersep> json . instance . encode ( spawn <identifiersep> state ) , false ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 final long duration \t3 = system . current <identifiersep> time <identifiersep> millis ( ) - chunk <identifiersep> start <identifiersep> time ; \n \t2 final decimal <identifiersep> format decimal <identifiersep> format = new decimal <identifiersep> format ( <string_literal> , decimal <identifiersep> format <identifiersep> symbols . get <identifiersep> instance ( locale . english ) ) ; \n \t2 final string formatted <identifiersep> duration \t1 = decimal <identifiersep> format . format ( ( duration / <number_literal> . 0 ) ) + <string_literal> ; \n \t2 final string objects <identifiersep> per <identifiersep> second \t1 = decimal <identifiersep> format . format ( chunk <identifiersep> size / ( duration / <number_literal> . 0 ) ) ; \n <ect>
\t4 if ( topic <identifiersep> pattern != null ) { \n \t5 log . info ( <string_literal> , thread <identifiersep> id , topic <identifiersep> name ) ; \n \t5 consumer . subscribe ( topic <identifiersep> pattern , this ) ; \n \t4 } else { \n <ect>
\t2 <comment> \n \t2 wrap <identifiersep> up <identifiersep> finish <identifiersep> latch . await ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n <ect>
\t1 set < t > dict <identifiersep> set = expand <identifiersep> dictionary ( meta ) ; \n \t1 if ( dict <identifiersep> set != null && ! dict <identifiersep> set . contains ( value ) ) { \n \t2 return block <identifiersep> cannot <identifiersep> match ; } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 if ( inner <identifiersep> set <identifiersep> files <identifiersep> and <identifiersep> load ( false , dir , base <identifiersep> name , write <identifiersep> encrypted , encryption <identifiersep> key , context , \n \t6 request <identifiersep> starters , random ) ) { \n <ect>
\t7 min <identifiersep> bytes <identifiersep> on <identifiersep> disk = math . min ( min <identifiersep> bytes <identifiersep> on <identifiersep> disk , size ) ; } } } } \n \t3 memtable . cfs . replace <identifiersep> flushed ( memtable , sstables ) ; \n \t3 reclaim ( memtable ) ; \n \t3 memtable . cfs . compaction <identifiersep> strategy <identifiersep> manager . compaction <identifiersep> logger . flush ( sstables ) ; \n <ect>
\t7 size = long . parse <identifiersep> long ( data . get <identifiersep> text <identifiersep> content ( ) ) ; } \n \t6 else if ( <string_literal> . equals ( data . get <identifiersep> node <identifiersep> name ( ) ) ) { \n \t7 count = integer . parse <identifiersep> int ( data . get <identifiersep> text <identifiersep> content ( ) ) ; } \n \t6 else { \n <ect>
\t3 clients <identifiersep> list . for <identifiersep> each ( client - > { \n \t4 try { \n \t5 client . invoke <identifiersep> method ( <string_literal> , params , false ) ; \n \t4 } catch ( framework <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 @ nullable \n \t1 public object find <identifiersep> template <identifiersep> source ( string name ) throws io <identifiersep> exception { \n <ect>
\t2 final map < string , object > attributes <identifiersep> to <identifiersep> release = new hash <identifiersep> map < > ( ) ; \n \t2 given <identifiersep> attributes . entry <identifiersep> set ( ) . stream ( ) . filter ( entry - > { \n \t3 final string attribute <identifiersep> name = entry . get <identifiersep> key ( ) ; \n \t3 final object attribute <identifiersep> value = entry . get <identifiersep> value ( ) ; \n <ect>
\t4 if ( array <identifiersep> util . is <identifiersep> empty <identifiersep> array ( plaintext ) ) { \n \t5 log . warn ( <string_literal> + encoded ) ; \n \t5 return null ; } \n \t3 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 http <identifiersep> client . execute ( post ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t1 public void test <identifiersep> simple <identifiersep> more <identifiersep> like <identifiersep> on <identifiersep> long <identifiersep> field ( ) throws exception { \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> acked ( prepare <identifiersep> create ( <string_literal> ) \n \t4 . add <identifiersep> mapping ( <string_literal> , <string_literal> , <string_literal> ) ) ; \n <ect>
\t2 if ( ! string <identifiersep> utils . is <identifiersep> empty ( client <identifiersep> cert <identifiersep> alias <identifiersep> var <identifiersep> name ) ) { \n \t3 <comment> \n \t3 string alias <identifiersep> name = j <identifiersep> meter <identifiersep> context <identifiersep> service . get <identifiersep> context ( ) . get <identifiersep> variables ( ) . get ( client <identifiersep> cert <identifiersep> alias <identifiersep> var <identifiersep> name ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> empty ( alias <identifiersep> name ) ) { \n <ect>
\t2 if ( ! closed && dispose <identifiersep> cluster <identifiersep> command <identifiersep> executor <identifiersep> on <identifiersep> close ) { \n \t3 try { \n \t4 cluster <identifiersep> command <identifiersep> executor . destroy ( ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t6 receive <identifiersep> known <identifiersep> con ( con , packet ) ; \n \t6 return ; \n \t5 } else { \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 for ( int j = 0 ; j < dbpojo <identifiersep> pig <identifiersep> savedscript . size ( ) ; j ++ ) { \n \t2 logger . info ( <string_literal> + dbpojo <identifiersep> pig <identifiersep> savedscript . get ( j ) . get <identifiersep> script ( ) ) ; } \n \t2 <comment> \n \t2 if ( dbpojo <identifiersep> pig <identifiersep> savedscript . size ( ) == 0 ) { \n <ect>
\t2 } catch ( na <identifiersep> exception nae ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , nae ) ; \n \t3 throw new server <identifiersep> exception ( <string_literal> , nae ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 get <identifiersep> context ( ) . message <identifiersep> registry ( ) . unregister <identifiersep> pending (  <identifiersep> out ) ; \n \t2 long time = system . current <identifiersep> time <identifiersep> millis ( ) -  <identifiersep> created ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) { \n \t3 int time <identifiersep> remaining = ( int ) (  <identifiersep> expiration - get <identifiersep> context ( ) . clock ( ) . now ( ) ) ; \n <ect>
<comment> \n \t1 synchronized nonce get <identifiersep> useable <identifiersep> device <identifiersep> nonce ( ) { \n \t2 nonce nonce = device <identifiersep> nonce <identifiersep> table . get <identifiersep> device <identifiersep> nonce <identifiersep> to <identifiersep> encrypt <identifiersep> message ( ) ; \n <ect>
\t3 <comment> \n \t3 check <identifiersep> session <identifiersep> attributes ( task <identifiersep> ses , job <identifiersep> id . to <identifiersep> string ( ) , m ) ; \n \t3 collection < grid <identifiersep> compute <identifiersep> job <identifiersep> sibling > siblings = task <identifiersep> ses . get <identifiersep> job <identifiersep> siblings ( ) ; \n <ect>
\t3 this . rotation <identifiersep> actions . add ( action ) ; \n \t3 return this ; } \n \t2 @ override \n \t2 void do <identifiersep> prepare ( map conf , int partition <identifiersep> index , int num <identifiersep> partitions ) throws io <identifiersep> exception { \n <ect>
\t4 <comment> \n \t4 exchange . set <identifiersep> property ( exchange . charset <identifiersep> name , <string_literal> ) ; \n \t4 message in = exchange . get <identifiersep> in ( ) ; \n \t4 in . set <identifiersep> body ( fragment ) ; \n <ect>
\t6 <comment> \n \t6 worker <identifiersep> vm . detach <identifiersep> all <identifiersep> disks ( ) ; \n \t6 worker <identifiersep> vm . destroy ( ) ; } \n \t4 } catch ( throwable e ) { \n <ect>
\t1 connected = true ; } \n private boolean check <identifiersep> connection ( ) { \n \t1 boolean db <identifiersep> status = false ; \n \t1 if ( ! connected ) { \n <ect>
\t5 <comment> \n \t5 log . error ( <string_literal> \n \t7 + name + <string_literal> , e ) ; } } } \n \t2 catch ( throwable t ) { \n <ect>
public void tear <identifiersep> down ( ) { \n \t1 try { \n \t1 manager . close ( ) ; \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t1 private boolean check <identifiersep> list <identifiersep> of <identifiersep> paths ( string <identifiersep> builder exist <identifiersep> list , string <identifiersep> builder non <identifiersep> exist <identifiersep> list , configuration conf ) \n \t3 throws io <identifiersep> exception { \n \t2 string [ ] uri <identifiersep> list = non <identifiersep> exist <identifiersep> list . to <identifiersep> string ( ) . split ( coord <identifiersep> el <identifiersep> functions . instance <identifiersep> separator ) ; \n \t2 if ( uri <identifiersep> list [ 0 ] != null ) { \n <ect>
\t2 if ( results . size ( ) == 0 ) { \n \t3 log . warn ( this , <string_literal> + root ) ; \n \t3 throw new text <identifiersep> index <identifiersep> exception ( <string_literal> + root ) ; } \n \t2 if ( results . size ( ) != 1 ) { \n <ect>
\t3 log . debug ( <string_literal> , reg ) ; \n \t3 reg . rebind ( jmeter <identifiersep> engine <identifiersep> rmi <identifiersep> name , this ) ; \n \t3 log . info ( <string_literal> , this . rmi <identifiersep> registry <identifiersep> port ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 plexus <identifiersep> utils . configure ( child , <string_literal> ) ; \n \t3 child . initialize ( ) ; \n \t3 child . start ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 } catch ( parse <identifiersep> exception e ) { \n \t1 logger . error ( <string_literal> , e ) ; \n \t1 migrationresult . set <identifiersep> error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t1 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> that ( state <identifiersep> response . get <identifiersep> state ( ) . meta <identifiersep> data ( ) . index ( <string_literal> ) . get <identifiersep> state ( ) , equal <identifiersep> to ( index <identifiersep> meta <identifiersep> data . state . close ) ) ; \n \t2 assert <identifiersep> that ( state <identifiersep> response . get <identifiersep> state ( ) . routing <identifiersep> table ( ) . index ( <string_literal> ) , null <identifiersep> value ( ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . full <identifiersep> restart ( ) ; \n <ect>
\t3 try { \n \t4 sr = pbd . get <identifiersep> sr ( conn ) ; \n \t4 sr <identifiersep> rec = sr . get <identifiersep> record ( conn ) ; \n \t3 } catch ( final exception e ) { \n <ect>
\t2 assert <identifiersep> ordered <identifiersep> search <identifiersep> hits ( response , <string_literal> , <string_literal> ) ; \n \t2 response = client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> query ( \n \t4 new more <identifiersep> like <identifiersep> this <identifiersep> query <identifiersep> builder ( null , new item [ ] { new item ( <string_literal> , <string_literal> , <string_literal> ) } ) . min <identifiersep> term <identifiersep> freq ( 1 ) . min <identifiersep> doc <identifiersep> freq ( 1 ) . include ( true ) . minimum <identifiersep> should <identifiersep> match ( <string_literal> ) ) . get ( ) ; \n \t2 assert <identifiersep> ordered <identifiersep> search <identifiersep> hits ( response , <string_literal> , <string_literal> ) ; \n <ect>
\t2 if ( e instanceof pig <identifiersep> exception ) { \n \t3 log . error ( <string_literal> + ( ( pig <identifiersep> exception ) e ) . get <identifiersep> error <identifiersep> code ( ) + <string_literal> \n \t5 + e . get <identifiersep> localized <identifiersep> message ( ) ) ; \n \t2 } else if ( e != null ) { \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 log . debug ( <string_literal> , system . get <identifiersep> property ( <string_literal> ) ) ; \n <ect>
\t3 if ( ! aggr <identifiersep> toggled <identifiersep> on ) { <comment> \n \t4 look <identifiersep> and <identifiersep> forget ( result ) ; \n \t4 return new empty <identifiersep> gt <identifiersep> scanner ( ) ; } \n \t3 if ( ! this . is <identifiersep> allow <identifiersep> storage <identifiersep> aggregation ( ) && having <identifiersep> filter <identifiersep> push <identifiersep> down == null ) { \n <ect>
\t2 assert <identifiersep> busy ( ( ) - > { \n \t3 int number <identifiersep> of <identifiersep> blocked <identifiersep> plugins = 0 ; \n \t3 for ( scripted <identifiersep> block <identifiersep> plugin plugin : plugins ) { \n \t4 number <identifiersep> of <identifiersep> blocked <identifiersep> plugins += plugin . hits . get ( ) ; } \n <ect>
\t6 break ; } \n \t5 default : \n \t6 throw new runtime <identifiersep> exception ( <string_literal> + message <identifiersep> type + <string_literal> ) ; } } \n \t2 } catch ( throwable e ) { \n <ect>
\t3 input <identifiersep> stream is = class <identifiersep> loader . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( path ) ; \n \t3 if ( is != null ) { \n \t4 answer [ 1 ] = load <identifiersep> text ( is ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t4 return i ; } } \n \t2 throw new exception ( <string_literal> ) ; } \n \t1 protected answer execute ( ip <identifiersep> assoc <identifiersep> command cmd ) { \n <ect>
\t1 @ get \n \t1 @ produces ( <string_literal> ) \n \t1 @ path ( <string_literal> ) \n \t1 public string get <identifiersep> encoded <identifiersep> matrix <identifiersep> param ( @ encoded @ matrix <identifiersep> param ( <string_literal> ) string matrix <identifiersep> param ) { \n <ect>
\t2 <comment> \n \t2 logger . info ( <string_literal> ) ; \n \t2 this . process <identifiersep> schema <identifiersep> org <identifiersep> ontology ( ) ; \n \t2 <comment> \n <ect>
<comment> \n protected void on <identifiersep> exception ( final exception e , final http <identifiersep> servlet <identifiersep> response response , final filter <identifiersep> chain chain ) { \n \t1 log . debug ( <string_literal> , e ) ; \n \t1 try { \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name , driver ) ; \n \t1 string repl <identifiersep> dump <identifiersep> locn = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 string repl <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t2 try {  <identifiersep> context . client <identifiersep> message <identifiersep> pool ( ) . shutdown ( ) ; } catch ( throwable t ) {  <identifiersep> log . error ( <string_literal> , t ) ; } \n \t2 try {  <identifiersep> context . session <identifiersep> key <identifiersep> manager ( ) . shutdown ( ) ; } catch ( throwable t ) {  <identifiersep> log . error ( <string_literal> , t ) ; } \n \t2 try {  <identifiersep> context . message <identifiersep> history ( ) . shutdown ( ) ; } catch ( throwable t ) {  <identifiersep> log . error ( <string_literal> , t ) ; } \n \t2 <comment> \n <ect>
\t5 if ( client <identifiersep> id . length ( ) > <number_literal> && ! allow <identifiersep> longer <identifiersep> client <identifiersep> ids ) { \n \t6 client <identifiersep> id = mqtt <identifiersep> client . generate <identifiersep> client <identifiersep> id ( ) ; } } } \n \t3 string tmp <identifiersep> dir = system . get <identifiersep> property ( <string_literal> ) + <string_literal> + name ; \n \t3 mqtt <identifiersep> default <identifiersep> file <identifiersep> persistence data <identifiersep> store = new mqtt <identifiersep> default <identifiersep> file <identifiersep> persistence ( tmp <identifiersep> dir ) ; \n <ect>
public void remove <identifiersep> from <identifiersep> wishes ( com . secretpal . model . sp <identifiersep> wish object ) { \n \t1 exclude <identifiersep> object <identifiersep> from <identifiersep> property <identifiersep> with <identifiersep> key ( object ,  <identifiersep> sp <identifiersep> person . wishes <identifiersep> key ) ; } \n public void add <identifiersep> to <identifiersep> wishes <identifiersep> relationship ( com . secretpal . model . sp <identifiersep> wish object ) { \n <ect>
\t2 return rocks <identifiersep> db <identifiersep> cache <identifiersep> class ; } \n \t1 public nimbus <identifiersep> cache ( map conf , storm <identifiersep> cluster <identifiersep> state zk <identifiersep> cluster ) { \n \t2 super ( ) ; \n \t2 string db <identifiersep> cache <identifiersep> class = get <identifiersep> nimbus <identifiersep> cache <identifiersep> class ( conf ) ; \n <ect>
\t3 con . set <identifiersep> tcp <identifiersep> no <identifiersep> delay ( get <identifiersep> no <identifiersep> delay ( ) ) ; \n \t4 log . debug ( <string_literal> , this , get <identifiersep> timeout ( ) , get <identifiersep> no <identifiersep> delay ( ) ) ; <comment> \n \t2 } catch ( socket <identifiersep> exception se ) { \n <ect>
\t5 . accept <identifiersep> language ( <string_literal> , <string_literal> ) . get ( ) ; \n \t3 assert . assert <identifiersep> equals ( <number_literal> , response . get <identifiersep> status ( ) ) ; \n \t3 string vary = response . get <identifiersep> header <identifiersep> string ( http <identifiersep> header <identifiersep> names . vary ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( vary ) ; \n <ect>
\t7 if ( vm . resident <identifiersep> on != null && ! vm . resident <identifiersep> on . to <identifiersep> wire <identifiersep> string ( ) . contains ( <string_literal> ) ) { \n \t8 host <identifiersep> uuid = vm . resident <identifiersep> on . get <identifiersep> uuid ( conn ) ; } \n \t7 record <identifiersep> changes ( conn , vm , host <identifiersep> uuid ) ; \n \t6 } catch ( final exception e ) { \n <ect>
\t5 utils . parse <identifiersep> template ( utils . get <identifiersep> page ( context . get <identifiersep> request ( ) , exception <identifiersep> template ) , context ) ; \n \t5 return null ; \n \t4 } catch ( x <identifiersep> wiki <identifiersep> exception ex ) { \n \t5 if ( ex . get <identifiersep> code ( ) == x <identifiersep> wiki <identifiersep> exception . error <identifiersep> xwiki <identifiersep> app <identifiersep> send <identifiersep> response <identifiersep> exception ) { \n <ect>
\t3 log . info ( <string_literal> ) ; \n \t3 indexer . create <identifiersep> index ( context ) ; \n \t3 check <identifiersep> rebuild <identifiersep> spell <identifiersep> check ( line , indexer ) ; \n \t2 } else if ( line . has <identifiersep> option ( <string_literal> ) ) { \n <ect>
\t5 self . fail ( <string_literal> % ( public <identifiersep> ip . ipaddress . ipaddress ) ) \n \t4 else : \n \t5 logger . debug ( <string_literal> % ( public <identifiersep> ip . ipaddress . ipaddress ) ) \n \t1 def acquire <identifiersep> publicip ( self , network ) : \n <ect>
\t3 string who = address . get <identifiersep> host <identifiersep> address ( ) ; \n \t3 string why = kisses . get ( who ) ; \n \t3 if ( why != null ) { \n \t4 if ( log != null ) \n <ect>
\t1 public void teardown ( ) throws exception { \n \t2 try { \n \t3 broker <identifiersep> service . stop ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 <comment> \n \t4 if ( results != null && results . next ( ) && results . get <identifiersep> int ( 1 ) > 0 ) { \n \t5 exists = true ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t5 try { \n \t6 method . invoke ( this ) ; \n \t6 return ; \n \t5 } catch ( exception e ) { \n <ect>
\t1 public static boolean is <identifiersep> debug ( ) { \n \t2 return debug ; } \n \t1 public static void set <identifiersep> debug ( boolean debug ) { \n \t2 j <identifiersep> storm <identifiersep> metrics . debug = debug ; \n <ect>
\t4 log . trace ( <string_literal> , exit ) ; \n \t4 break ; } } \n \t2 log . trace ( <string_literal> ) ; \n \t2 shutdown <identifiersep> driver <identifiersep> now ( ) ; \n <ect>
\t1 transactions . find ( new object <identifiersep> info ( bucket <identifiersep> name , object <identifiersep> key ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 throw new no <identifiersep> such <identifiersep> entity <identifiersep> exception ( object <identifiersep> key ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 } ) ; \n \t1 } ) ; \n \t1 logger . debug ( <string_literal> , component ) ; \n \t1 add <identifiersep> key <identifiersep> up <identifiersep> event <identifiersep> listener ( component , listener ) ; \n <ect>
\t2 file <identifiersep> output <identifiersep> stream fos = new file <identifiersep> output <identifiersep> stream ( system . get <identifiersep> property ( <string_literal> ) + <string_literal> + test <identifiersep> fop . class . get <identifiersep> simple <identifiersep> name ( ) + <string_literal> ) ; \n \t2 tfop . generate <identifiersep> pdf ( fos ) ; \n \t2 fos . close ( ) ; \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 date next <identifiersep> time = scheduler <identifiersep> util . get <identifiersep> next <identifiersep> execution ( task <identifiersep> definition ) ; \n \t6 <comment> \n <ect>
\t2 check <identifiersep> cli . execute ( cube <identifiersep> name ) ; } \n \t1 private static void check <identifiersep> and <identifiersep> get <identifiersep> hbase <identifiersep> url ( ) { \n \t2 storage <identifiersep> url src <identifiersep> metadata <identifiersep> url = src <identifiersep> config . get <identifiersep> metadata <identifiersep> url ( ) ; \n \t2 storage <identifiersep> url dst <identifiersep> metadata <identifiersep> url = dst <identifiersep> config . get <identifiersep> metadata <identifiersep> url ( ) ; \n <ect>
\t6 log . error ( <string_literal> , consumer <identifiersep> name , received <identifiersep> count , message . get <identifiersep> class ( ) . get <identifiersep> canonical <identifiersep> name ( ) ) ; \n \t6 return false ; } \n \t5 text <identifiersep> message tm = ( text <identifiersep> message ) message ; \n \t5 if ( ! tm . get <identifiersep> text ( ) . equals ( text <identifiersep> message + received <identifiersep> count ) ) { \n <ect>
\t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 return destination <identifiersep> view . get <identifiersep> in <identifiersep> flight <identifiersep> count ( ) == 0 ; } \n \t2 } ) ) ; \n <ect>
\t2 <comment> \n \t2 try { \n \t3 <comment> \n \t3 if ( logging <identifiersep> level . error == run <identifiersep> logging <identifiersep> level ) { \n <ect>
\t4 checkpointer . checkpoint ( ) ; \n \t4 break ; \n \t3 } catch ( shutdown <identifiersep> exception se ) { \n \t4 <comment> \n <ect>
\t1 bw . add <identifiersep> mutation ( m ) ; \n \t1 bw . close ( ) ; \n \t1 log . info ( <string_literal> , table <identifiersep> name ) ; \n \t1 conn . table <identifiersep> operations ( ) . online ( table <identifiersep> name , true ) ; \n <ect>
\t5 log . info ( <string_literal> ) ; \n \t5 start . await ( ) ; \n \t5 log . info ( <string_literal> , id ) ; \n \t5 file cached = cache . get ( id ) ; \n <ect>
\t1 stack <identifiersep> entity <identifiersep> manager . update <identifiersep> stack ( stack <identifiersep> entity ) ; \n \t1 return <string_literal> ; } \n @ override \n public string init <identifiersep> update <identifiersep> rollback <identifiersep> cleanup <identifiersep> resource ( string resource <identifiersep> id , string stack <identifiersep> id , string account <identifiersep> id , string effective <identifiersep> user <identifiersep> id , int rolled <identifiersep> back <identifiersep> resource <identifiersep> version ) { \n <ect>
\t4 d <identifiersep> params . put ( <string_literal> , <string_literal> +  <identifiersep> ping <identifiersep> management <identifiersep> profile + <string_literal> ) ; \n \t4 cmd <identifiersep> list . add ( new default <identifiersep> palo <identifiersep> alto <identifiersep> command ( palo <identifiersep> alto <identifiersep> method . get , d <identifiersep> params ) ) ; \n \t4 return true ; \n \t3 default : \n <ect>
\t2 <comment> \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 test <identifiersep> get <identifiersep> response ( <number_literal> ) ; \n \t2 <comment> \n <ect>
\t1 this . session <identifiersep> conf = conf ; \n \t1 this . user <identifiersep> name = user <identifiersep> name ; \n \t1 this . registry = new registry ( false ) ; \n <ect>
\t1 @ override \n \t1 protected void do <identifiersep> stop ( ) throws exception { \n \t2 int count = size ( ) ; \n \t2 if ( count > 0 ) { \n <ect>
\t1 read <identifiersep> lock . unlock ( ) ; } } \n @ override \n public void dag <identifiersep> complete ( ) { \n \t1 <comment> \n <ect>
\t4 assertion . add <identifiersep> statement ( attribute <identifiersep> statement ) ; } \n \t3 saml <identifiersep> model = transform <identifiersep> login <identifiersep> response ( login <identifiersep> response <identifiersep> mappers , saml <identifiersep> model , session , user <identifiersep> session , client <identifiersep> session ) ; \n \t3 saml <identifiersep> document = builder . build <identifiersep> document ( saml <identifiersep> model ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } else { \n \t3 logger . debug ( <string_literal> , \n \t5 new string [ ] { h . get <identifiersep> class ( ) . get <identifiersep> name ( ) , mapping , broadcaster . get <identifiersep> class ( ) . get <identifiersep> name ( ) } ) ; } \n \t2 if ( ! l . is <identifiersep> empty ( ) ) { \n <ect>
* ns <identifiersep> array all = eo <identifiersep> utilities . objects <identifiersep> for <identifiersep> entity <identifiersep> named ( ec , <string_literal> ) ; \n * eo <identifiersep> qualifier q ; \n * \n * objects = eo <identifiersep> utilities . objects <identifiersep> matching <identifiersep> key <identifiersep> and <identifiersep> value ( ec , <string_literal> , <string_literal> , test . status . off ) ; \n <ect>
\t5 messaging <identifiersep> service . instance ( ) . send <identifiersep> reply ( new message <identifiersep> out ( messaging <identifiersep> service . verb . internal <identifiersep> response ) , id , message . from ) ; \n \t5 break ; \n \t4 case validation <identifiersep> request : \n \t5 validation <identifiersep> request validation <identifiersep> request = ( validation <identifiersep> request ) message . payload ; \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 run <identifiersep> command ( new string [ ] { <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , <string_literal> , collection <identifiersep> name , <string_literal> , <string_literal> + collection <identifiersep> name + <string_literal> , <string_literal> , collection <identifiersep> name + <string_literal> } ) ; } \n private void run <identifiersep> command ( string [ ] command ) { \n \t1 try { \n <ect>
\t1 try { \n \t2 if ( connection != null ) \n \t2 connection . close ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 @ description ( <string_literal> ) \n \t1 public void  <identifiersep> refresh ( refresh <identifiersep> options opts ) throws exception { \n \t2 for ( object o : repos ) { \n \t3 if ( o instanceof refreshable ) { \n <ect>
\t3 return new primary <identifiersep> storage <identifiersep> download <identifiersep> answer ( msg ) ; } } \n \t1 @ override \n \t1 public answer execute ( destroy <identifiersep> command cmd ) { \n <ect>
\t8 <string_literal> + pdu . get <identifiersep> agent <identifiersep> id ( ) + <string_literal> + pdu . get <identifiersep> json <identifiersep> package ( ) + <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> tick ) + <string_literal> ) ; } } \n \t3 } catch ( final agent <identifiersep> unavailable <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 } catch ( final operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 try { \n \t6 set <identifiersep> read <identifiersep> only ( c , ! c . is <identifiersep> read <identifiersep> only ( ) ) ; \n \t6 set <identifiersep> read <identifiersep> only ( c , ! c . is <identifiersep> read <identifiersep> only ( ) ) ; \n \t5 } catch ( sql <identifiersep> exception ex2 ) { \n <ect>
\t8 <string_literal> \n \t9 + send <identifiersep> stream . hash <identifiersep> code ( ) ) ; } } \n \t4 catch ( io <identifiersep> exception ioe ) \n \t4 { \n <ect>
\t4 json <identifiersep> reader json <identifiersep> reader = new json <identifiersep> reader ( reader ) ; \n \t4 json <identifiersep> reader . set <identifiersep> lenient ( true ) ; \n \t4  <identifiersep> cmds = s <identifiersep> gson . from <identifiersep> json ( json <identifiersep> reader , ( type ) command [ ] . class ) ; \n \t3 } catch ( runtime <identifiersep> exception e ) { \n <ect>
class outer { \n \t1 @ transactional ( label = <string_literal> ) \n \t1 void do <identifiersep> outer ( ) { \n \t1 outer <identifiersep> txn = ebean . current <identifiersep> transaction ( ) ; \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 multimap < xid , xa <identifiersep> queue <identifiersep> tx <identifiersep> journal <identifiersep> entry > xid <identifiersep> xa <identifiersep> journal <identifiersep> entry <identifiersep> multimap = xa <identifiersep> tx <identifiersep> queue <identifiersep> transaction <identifiersep> journal . get <identifiersep> all <identifiersep> log <identifiersep> entries ( ) ; \n <ect>
\t3 if ( server <identifiersep> config . server <identifiersep> config != null ) { \n \t4 <comment> \n \t4 fmt <identifiersep> log . info ( log , <string_literal> , server <identifiersep> config . server <identifiersep> config ) ; \n \t4 map <identifiersep> dataset <identifiersep> endpoints . for <identifiersep> each ( ( path , endpoints ) - > { \n <ect>
\t2 webhook webhook <identifiersep> request = new webhook ( ) ; \n \t2 string uuid = uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ; \n \t2 webhook <identifiersep> request . set <identifiersep> url ( webhooks <identifiersep> input <identifiersep> data . webhook <identifiersep> url + uuid ) ; \n \t2 webhook <identifiersep> request . set <identifiersep> event <identifiersep> types ( event <identifiersep> type <identifiersep> list <identifiersep> test <identifiersep> case . create <identifiersep> auth <identifiersep> event <identifiersep> type <identifiersep> list ( ) ) ; \n <ect>
\t3 log . info ( <string_literal> , processor <identifiersep> factory ) ; \n \t3 get <identifiersep> context ( ) . set <identifiersep> processor <identifiersep> factory ( processor <identifiersep> factory ) ; } \n \t2 debugger debugger = get <identifiersep> bean <identifiersep> for <identifiersep> type ( debugger . class ) ; \n \t2 if ( debugger != null ) { \n <ect>
\t3 e <identifiersep> person <identifiersep> service e <identifiersep> person <identifiersep> service = e <identifiersep> person <identifiersep> service <identifiersep> factory . get <identifiersep> instance ( ) . get <identifiersep> e <identifiersep> person <identifiersep> service ( ) ; \n \t3 eperson = e <identifiersep> person <identifiersep> service . find <identifiersep> by <identifiersep> email ( context , <string_literal> ) ; \n \t3 if ( eperson == null ) { \n \t4 <comment> \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + iso <identifiersep> id + <string_literal> + event . get <identifiersep> account <identifiersep> id ( ) ) ; } \n \t3 list < usage <identifiersep> storage <identifiersep> vo > storage <identifiersep> v <identifiersep> os =  <identifiersep> usage <identifiersep> storage <identifiersep> dao . list <identifiersep> by <identifiersep> id <identifiersep> and <identifiersep> zone ( event . get <identifiersep> account <identifiersep> id ( ) , iso <identifiersep> id , storage <identifiersep> types . iso , zone <identifiersep> id ) ; \n \t3 if ( storage <identifiersep> v <identifiersep> os . size ( ) > 0 ) { \n <ect>
\t3 && ( ( mapping <identifiersep> http <identifiersep> request ) msg <identifiersep> event . get <identifiersep> message ( ) ) . get <identifiersep> message ( ) instanceof object <identifiersep> storage <identifiersep> data <identifiersep> request <identifiersep> type ) { \n \t2 object <identifiersep> storage <identifiersep> data <identifiersep> request <identifiersep> type data <identifiersep> req = ( object <identifiersep> storage <identifiersep> data <identifiersep> request <identifiersep> type ) ( ( mapping <identifiersep> http <identifiersep> request ) msg <identifiersep> event . get <identifiersep> message ( ) ) . get <identifiersep> message ( ) ; \n \t2 handle <identifiersep> data ( data <identifiersep> req , first <identifiersep> chunk . get <identifiersep> content ( ) ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t4 } else if ( style . equals ( <string_literal> ) ) { \n \t5 string dir = ( string ) props . remove ( <string_literal> ) ; \n \t5 if ( dir == null ) { \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t3 current , csd , to <identifiersep> release , to <identifiersep> release <identifiersep> copies , to <identifiersep> decompress , bad <identifiersep> estimates ) \n \t2 : prepare <identifiersep> ranges <identifiersep> for <identifiersep> uncompressed <identifiersep> read ( \n \t3 c <identifiersep> offset , end <identifiersep> c <identifiersep> offset , stream <identifiersep> offset , unlock <identifiersep> until <identifiersep> c <identifiersep> offset , current , csd ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t4 super . append <identifiersep> to <identifiersep> response ( response , context ) ; } \n \t3 catch ( throwable ex ) { \n \t4 response . append <identifiersep> content <identifiersep> string ( ex . to <identifiersep> string ( ) ) ; \n \t4 context .  <identifiersep> set <identifiersep> current <identifiersep> component ( component ) ; \n <ect>
\t2 bootstrap . set <identifiersep> pipeline <identifiersep> factory ( new storm <identifiersep> server <identifiersep> pipeline <identifiersep> factory ( this , storm <identifiersep> conf ) ) ; \n \t2 <comment> \n \t2 channel channel = bootstrap . bind ( new inet <identifiersep> socket <identifiersep> address ( port ) ) ; \n \t2 all <identifiersep> channels . add ( channel ) ; \n <ect>
\t3 } catch ( malformed <identifiersep> url <identifiersep> exception ex ) { \n \t4 logger . error ( <string_literal> , address . concat ( <string_literal> ) ) ; \n \t4 return null ; \n \t3 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 file file = new file ( path ) ; \n \t2 try { \n \t3 actual <identifiersep> path = file . get <identifiersep> canonical <identifiersep> path ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 protected void check <identifiersep> property <identifiersep> in <identifiersep> jsp ( final url web <identifiersep> app <identifiersep> url , final string property <identifiersep> name , final int expected <identifiersep> code , \n \t3 final string expected <identifiersep> body <identifiersep> start ) throws exception { \n \t2 final uri sys <identifiersep> prop <identifiersep> uri = new uri ( web <identifiersep> app <identifiersep> url . to <identifiersep> external <identifiersep> form ( ) + <string_literal> + <string_literal> \n \t4 + utils . encode <identifiersep> query <identifiersep> param ( print <identifiersep> system <identifiersep> property <identifiersep> servlet . param <identifiersep> property <identifiersep> name , property <identifiersep> name ) ) ; \n <ect>
\t3 iris . add ( i . get <identifiersep> iri ( ) ) ; } \n \t2 ontology . axioms ( axiom <identifiersep> type . annotation <identifiersep> assertion ) . for <identifiersep> each ( annotation - > { \n \t3 if ( iris . contains ( annotation . get <identifiersep> subject ( ) ) ) { \n \t4 enriched <identifiersep> module . add ( annotation ) ; \n <ect>
\t1 public void set <identifiersep> service ( java <identifiersep> config <identifiersep> service service ) { \n \t2 logger . info ( <string_literal> + service ) ; \n \t2 this . service = service ; } \n \t1 public java <identifiersep> config <identifiersep> resource ( ) { \n <ect>
\t4 try { \n \t5 con . set <identifiersep> auto <identifiersep> commit ( false ) ; \n \t5 con . set <identifiersep> read <identifiersep> only ( false ) ; \n \t4 } catch ( sql <identifiersep> exception e ) { \n <ect>
@ override \n public synchronized void stop ( ) { \n \t1 producer . close ( ) ; \n \t1 counter . stop ( ) ; \n <ect>
\t3 public void key <identifiersep> released ( key <identifiersep> event e ) { \n \t4 try { \n \t5 configuration . set <identifiersep> mencoder <identifiersep> scale <identifiersep> y ( integer . parse <identifiersep> int ( scale <identifiersep> y . get <identifiersep> text ( ) ) ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t7 lists . new <identifiersep> array <identifiersep> list ( meta <identifiersep> type . topology , meta <identifiersep> type . component ) ) ; \n \t5 <comment> \n \t5 metric <identifiersep> context . set <identifiersep> sync <identifiersep> meta ( ! modify ) ; } } \n \t2 } catch ( exception e1 ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t2 final string s = tokenizer . next <identifiersep> token ( ) ; \n \t2 final file file = new file ( s ) ; \n \t2 if ( file . exists ( ) == false || file . can <identifiersep> read ( ) == false ) \n \t2 { \n <ect>
\t4 cms <identifiersep> resource resource = cms . read <identifiersep> resource ( alias . get <identifiersep> structure <identifiersep> id ( ) ) ; \n \t4 csv <identifiersep> writer . write <identifiersep> next ( \n \t5 new string [ ] { alias . get <identifiersep> alias <identifiersep> path ( ) , cms . get <identifiersep> site <identifiersep> path ( resource ) , alias . get <identifiersep> mode ( ) . to <identifiersep> string ( ) } ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t1 current <identifiersep> admin <identifiersep> users = services [ <string_literal> ] [ <string_literal> ] [ <string_literal> ] [ <string_literal> ] \n \t1 self . logger . info ( <string_literal> % current <identifiersep> admin <identifiersep> users ) \n \t1 else : \n \t1 current <identifiersep> admin <identifiersep> users = <string_literal> . format ( oozie <identifiersep> user ) \n <ect>
\t4 return null ; } \n \t3 logger . debug ( <string_literal> , metadata ) ; \n \t3 final string collection <identifiersep> name = get <identifiersep> ticket <identifiersep> collection <identifiersep> instance <identifiersep> by <identifiersep> metadata ( metadata ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> blank ( collection <identifiersep> name ) ) { \n <ect>
\t1 protected principal identity ; \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 @ override \n \t1 public boolean login ( ) throws login <identifiersep> exception { \n <ect>
\t3 input <identifiersep> stream input = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t3 element el = query <identifiersep> async <identifiersep> job <identifiersep> result ( server , input ) ; \n \t3 map < string , string > values = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( el , new string [ ] { <string_literal> } ) ; \n \t3 if ( values . get ( <string_literal> ) == null ) { \n <ect>
<comment> \n \t1 public static string get <identifiersep> token <identifiersep> name ( ) { \n \t2 http <identifiersep> parameters params = action <identifiersep> context . get <identifiersep> context ( ) . get <identifiersep> parameters ( ) ; \n \t2 if ( ! params . contains ( token <identifiersep> name <identifiersep> field ) ) { \n <ect>
\t1 public void start <identifiersep> replay ( final uuid game <identifiersep> id , final string session <identifiersep> id ) throws mage <identifiersep> exception { \n \t2 execute ( <string_literal> , session <identifiersep> id , ( ) - > { \n \t3 optional < session > session = session <identifiersep> manager . instance . get <identifiersep> session ( session <identifiersep> id ) ; \n \t3 if ( ! session . is <identifiersep> present ( ) ) { \n <ect>
\t1 } else { \n \t2 try { \n \t2 store . clear ( ) ; \n \t2 } catch ( unsupported <identifiersep> operation <identifiersep> exception e ) { \n <ect>
private string get <identifiersep> sql <identifiersep> md5hash ( ) { \n \t1 try { \n \t1 return md5 . hash ( sql ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4  <identifiersep> agent <identifiersep> mgr . send ( host <identifiersep> id , cmds ) ; \n \t4 if ( ! cmds . is <identifiersep> successful ( ) ) { \n \t5 for ( final answer answer : cmds . get <identifiersep> answers ( ) ) { \n \t6 if ( ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t2 if ( result . equals ( <string_literal> ) ) { \n \t3  <identifiersep> context . wait <identifiersep> for <identifiersep> task <identifiersep> progress <identifiersep> done ( mor <identifiersep> task ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t1 super ( ctx ) ; } \n public vector <identifiersep> reduce <identifiersep> sink <identifiersep> object <identifiersep> hash <identifiersep> operator ( compilation <identifiersep> op <identifiersep> context ctx , operator <identifiersep> desc conf , \n \t1 vectorization <identifiersep> context v <identifiersep> context , vector <identifiersep> desc vector <identifiersep> desc ) throws hive <identifiersep> exception { \n \t1 super ( ctx , conf , v <identifiersep> context , vector <identifiersep> desc ) ; \n <ect>
\t1 int ret = sqoop . run <identifiersep> sqoop ( importer , argv ) ; \n \t1 assert <identifiersep> true ( <string_literal> , 1 == ret ) ; \n \t1 } catch ( exception e ) { \n \t1 <comment> \n <ect>
\t2 final static <identifiersep> database <identifiersep> property <identifiersep> entry property = entities . unique <identifiersep> result ( new static <identifiersep> database <identifiersep> property <identifiersep> entry ( null , property <identifiersep> name , null ) ) ; \n \t2 log . info ( <string_literal> + property <identifiersep> name ) ; \n \t2 entities . delete ( property ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t3 list < string > lines = io <identifiersep> utils . read <identifiersep> lines ( new file <identifiersep> input <identifiersep> stream ( procfs <identifiersep> meminfo ) ) ; \n \t3 string free = lines . get ( 1 ) . split ( <string_literal> ) [ 1 ] ; \n \t3 return long . value <identifiersep> of ( free ) ; \n \t2 } catch ( exception ignored ) { \n <ect>
\t1 timeline <identifiersep> metrics . set <identifiersep> metrics ( metric <identifiersep> list ) ; \n \t1 if ( ! metric <identifiersep> list . is <identifiersep> empty ( ) ) { \n \t2 emit <identifiersep> metrics ( timeline <identifiersep> metrics ) ; } \n \t1 } catch ( unable <identifiersep> to <identifiersep> connect <identifiersep> exception uce ) { \n <ect>
\t6 } else { \n \t7 string error <identifiersep> msg = null ; \n \t7 int error <identifiersep> code = base <identifiersep> cmd . internal <identifiersep> error ; \n \t7 if ( ! ( e instanceof server <identifiersep> api <identifiersep> exception ) ) { \n <ect>
\t3 request . add <identifiersep> header ( <string_literal> , message . get <identifiersep> content <identifiersep> type ( ) ) ; \n \t3 final string <identifiersep> entity entity = new string <identifiersep> entity ( message . get <identifiersep> message ( ) , content <identifiersep> type . create ( message . get <identifiersep> content <identifiersep> type ( ) ) ) ; \n \t3 request . set <identifiersep> entity ( entity ) ; \n \t3 final response <identifiersep> handler < boolean > handler = response - > response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> status <identifiersep> code ( ) == http <identifiersep> status . sc <identifiersep> ok ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> master <identifiersep> only <identifiersep> nodes ( <number_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> data <identifiersep> only <identifiersep> nodes ( <number_literal> ) ; \n \t2 final client client = client ( ) ; \n <ect>
\t1 error <identifiersep> str . append ( <string_literal> ) ; \n \t1 dump <identifiersep> object ( error <identifiersep> str , <string_literal> , jdo <identifiersep> result , clazz , 0 ) ; \n \t1 } catch ( throwable t ) { \n \t1 error <identifiersep> str . append ( <string_literal> + t ) ; } \n <ect>
\t3 writer = new print <identifiersep> writer ( new output <identifiersep> stream <identifiersep> writer ( new file <identifiersep> output <identifiersep> stream ( file <identifiersep> to <identifiersep> write <identifiersep> to ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ) ; \n \t3 writer . write ( hl7in <identifiersep> archive . get <identifiersep> hl7data ( ) ) ; \n \t3 <comment> \n \t3 if ( writer . check <identifiersep> error ( ) ) { \n <ect>
\t2 regionserver <identifiersep> port ) ; \n \t1 hbase <identifiersep> cluster . start <identifiersep> master ( ) ; \n \t1 hbase <identifiersep> cluster . start <identifiersep> region <identifiersep> server ( ) ; \n \t1 wait <identifiersep> for <identifiersep> h <identifiersep> base <identifiersep> to <identifiersep> come <identifiersep> online ( hbase <identifiersep> cluster ) ; \n <ect>
\t6 } catch ( exception e ) { \n \t7 logger . error ( <string_literal> , e ) ; } \n \t6 old <identifiersep> state . set <identifiersep> state ( current <identifiersep> state . get <identifiersep> state ( ) ) ; } \n \t4 } catch ( ihc <identifiersep> execption e ) { \n <ect>
private void initialize <identifiersep> from <identifiersep> file ( file master <identifiersep> file ) throws exception { \n \t1 try { \n \t1 list < string > lines = file <identifiersep> utils . read <identifiersep> lines ( master <identifiersep> file , <string_literal> ) ; \n \t1 string tag = lines . get ( 0 ) ; \n <ect>
\t1 $log . info ( <string_literal> + r . get <identifiersep> region <identifiersep> name <identifiersep> as <identifiersep> string ( ) + <string_literal> + count . to <identifiersep> s + \n \t2 <string_literal> + regions . length . to <identifiersep> s + <string_literal> + servername ) \n \t1 next \n \t1 end \n <ect>
\t3 if ( ! result . first ( ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + cmd . get <identifiersep> access <identifiersep> detail ( network <identifiersep> element <identifiersep> command . router <identifiersep> ip ) + <string_literal> + result . second ( ) ) ; \n \t4 return new check <identifiersep> router <identifiersep> answer ( cmd , <string_literal> + result . second ( ) ) ; } \n <ect>
\t3 key <identifiersep> store . load ( in , <string_literal> . to <identifiersep> char <identifiersep> array ( ) ) ; \n \t3 private <identifiersep> key = ( private <identifiersep> key ) key <identifiersep> store . get <identifiersep> key ( <string_literal> , <string_literal> . to <identifiersep> char <identifiersep> array ( ) ) ; \n \t3 x509 = ( x509certificate ) key <identifiersep> store . get <identifiersep> certificate ( <string_literal> ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t3 } ; \n \t3 try { \n \t4 this . session . connection . get <identifiersep> scheduler ( ) . execute <identifiersep> periodically ( optimized <identifiersep> ack <identifiersep> task , optimized <identifiersep> ack <identifiersep> scheduled <identifiersep> ack <identifiersep> interval ) ; \n \t3 } catch ( jms <identifiersep> exception e ) { \n <ect>
else : \n \t1 stack <identifiersep> select <identifiersep> component = get <identifiersep> package <identifiersep> name ( ) \n if stack <identifiersep> select <identifiersep> component is none : \n \t1 if not role : \n <ect>
\t2 if ( ! ( wsdl <identifiersep> request instanceof wsdl <identifiersep> request ) || ! ( ( wsdl <identifiersep> request ) wsdl <identifiersep> request ) . is <identifiersep> ws <identifiersep> addressing ( ) ) { \n \t3 return ; } \n \t2 string content = ( string ) context . get <identifiersep> property ( base <identifiersep> http <identifiersep> request <identifiersep> transport . request <identifiersep> content ) ; \n \t2 if ( content == null ) { \n <ect>
\t2 try \n \t2 { \n \t3 return context . get <identifiersep> wiki ( ) . get <identifiersep> document ( reference , context ) ; \n \t2 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t4 if ( ! abort ) { \n \t5 <comment> \n \t5 final long backoff = restart <identifiersep> backoff . get <identifiersep> and <identifiersep> add ( backoff <identifiersep> increment ) ; \n \t5 if ( backoff > max <identifiersep> backoff ) { \n <ect>
\t5 tag . unlock <identifiersep> handler ( ) ; \n \t5 <comment> \n \t4 } catch ( throwable t ) { \n \t5 tag . unlock <identifiersep> handler ( ) ; \n <ect>
\t3 logger . error ( <string_literal> , type . get <identifiersep> simple <identifiersep> name ( ) , e ) ; \n \t3 return null ; \n \t2 } catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error e ) { \n \t3 <comment> \n <ect>
\t3 pull <identifiersep> request . get <identifiersep> title ( ) ; \n \t3 pull <identifiersep> request . get <identifiersep> html <identifiersep> url ( ) ; \n \t3 pull <identifiersep> request . get <identifiersep> user ( ) . get <identifiersep> login ( ) ; \n \t3 pull <identifiersep> request . get <identifiersep> user ( ) . get <identifiersep> html <identifiersep> url ( ) ; \n <ect>
\t2 string next <identifiersep> file = mdis . read <identifiersep> utf ( ) ; \n \t2 if ( ! committed . add ( next <identifiersep> file ) ) { \n \t3 throw new hive <identifiersep> exception ( next <identifiersep> file + <string_literal> ) ; } } } } \n \t1 if ( manifest <identifiersep> dir != null ) { \n <ect>
\t2 close <identifiersep> hardware ( ) ; \n \t2 try { \n \t3 open <identifiersep> hardware ( ) ; \n \t2 } catch ( cul <identifiersep> device <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t1 statement stmt = manager . get <identifiersep> connection ( ) . create <identifiersep> statement ( ) ; \n \t1 stmt . execute ( <string_literal> + get <identifiersep> table <identifiersep> name ( ) ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <comment> \n \t1 private void shutdown <identifiersep> cluster ( application <identifiersep> status status , string diagnostics ) { \n <ect>
<number_literal> config . get <identifiersep> agent <identifiersep> ssh <identifiersep> password ( ) , \n <number_literal> dest <identifiersep> path , src <identifiersep> iso . get <identifiersep> absolute <identifiersep> path ( ) \n <number_literal> . to <identifiersep> string ( ) , <string_literal> ) ; \n \t6 } catch ( exception es ) { \n <ect>
\t3 } catch ( io <identifiersep> exception e ) { \n \t4 logger . warn ( e . get <identifiersep> message ( ) , e ) ; } } } \n \t1 private void log <identifiersep> java <identifiersep> code ( string class <identifiersep> name , string sorce <identifiersep> code ) throws io <identifiersep> exception { \n <ect>
\t3 log . info ( ex . get <identifiersep> message ( ) ) ; \n \t3 log . debug ( ex . get <identifiersep> message ( ) , ex ) ; \n \t3 candidate <identifiersep> action <identifiersep> cache . purge <identifiersep> actions <identifiersep> for <identifiersep> state ( ex . get <identifiersep> target ( ) ) ; \n \t2 } catch ( crawler <identifiersep> left <identifiersep> domain <identifiersep> exception e ) { \n <ect>
\t6 if ( m <identifiersep> state == agent <identifiersep> controller <identifiersep> state . updating ) { \n \t7 m <identifiersep> agent <identifiersep> controller <identifiersep> server <identifiersep> listener . wait <identifiersep> for <identifiersep> message ( ) ; \n \t7 break ; \n \t6 } else { \n <ect>
\t4 if ( output <identifiersep> stream != null ) { \n \t5 output <identifiersep> stream . close ( ) ; } } \n \t3 catch ( io <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
\t7 storage <identifiersep> vol <identifiersep> map . remove ( vol ) ; } \n \t6 deploy <identifiersep> destination dest = new deploy <identifiersep> destination ( dc , pod , cluster , host , storage <identifiersep> vol <identifiersep> map ) ; \n \t6 s <identifiersep> logger . debug ( <string_literal> + dest ) ; \n \t6 return dest ; } } } \n <ect>
\t1 thread . sleep ( 1000l ) ; <comment> \n \t1 try { \n \t2 server . join ( ) ; \n \t1 } catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t1 @ override \n \t1 public void validate ( object obj , errors errors ) { \n \t2 concept <identifiersep> state <identifiersep> conversion c = ( concept <identifiersep> state <identifiersep> conversion ) obj ; \n \t2 if ( c == null ) { \n <ect>
\t2 sid = sidmatch . group ( 1 ) ; \n \t2 matcher accmatch = access <identifiersep> pattern . matcher ( login <identifiersep> xml ) ; \n \t2 if ( accmatch . find ( ) ) { \n \t3 if ( accmatch . group ( 1 ) == <string_literal> ) { \n <ect>
\t2 self . test <identifiersep> ssh <identifiersep> command ( self . vm <identifiersep> <number_literal> , nat <identifiersep> rule2 , <string_literal> ) \n \t2 self . logger . debug ( <string_literal> % ( self . vm <identifiersep> 1 . id , self . vm <identifiersep> <number_literal> . id ) ) \n \t2 self . test <identifiersep> dhcphosts ( self . vm <identifiersep> 1 , router ) \n \t2 self . test <identifiersep> dhcphosts ( self . vm <identifiersep> <number_literal> , router ) \n <ect>
\t2 int pk <identifiersep> index = pk <identifiersep> columns . index <identifiersep> of ( pk <identifiersep> column ) ; \n \t2 int fk <identifiersep> index = fk <identifiersep> columns . index <identifiersep> of ( fk <identifiersep> column ) ; \n \t2 if ( pk <identifiersep> index != - 1 && fk <identifiersep> index != - 1 ) { \n \t3 if ( pk <identifiersep> index != fk <identifiersep> index ) { \n <ect>
\t3 rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 if ( ! rs . next ( ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> ) ; \n \t3 } else if ( ! rs . get <identifiersep> string ( 1 ) . equals ( <string_literal> ) ) { \n <ect>
\t2 if ( transport != null ) { \n \t3 try { \n \t3 transport . close ( ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 new path ( output <identifiersep> dir , dictionary <identifiersep> vectorizer . document <identifiersep> vector <identifiersep> output <identifiersep> folder ) , \n \t4 output <identifiersep> dir , conf , doc <identifiersep> frequencies <identifiersep> features , min <identifiersep> df , max <identifiersep> df , norm , log <identifiersep> normalize , \n \t4 sequential <identifiersep> access <identifiersep> output , named <identifiersep> vectors , reduce <identifiersep> tasks ) ; } \n \t1 } catch ( option <identifiersep> exception e ) { \n <ect>
\t3 system <identifiersep> keyspace . update <identifiersep> compaction <identifiersep> history ( cfs . keyspace . get <identifiersep> name ( ) , cfs . name , system . current <identifiersep> time <identifiersep> millis ( ) , startsize , endsize , merged <identifiersep> rows ) ; \n \t3 logger . info ( string . format ( <string_literal> , \n \t9 old <identifiersep> s <identifiersep> stables . size ( ) , new <identifiersep> ss <identifiersep> table <identifiersep> names . to <identifiersep> string ( ) , startsize , endsize , ( int ) ( ratio * <number_literal> ) , d <identifiersep> time , mbps , total <identifiersep> source <identifiersep> rows , total <identifiersep> keys <identifiersep> written , merge <identifiersep> summary . to <identifiersep> string ( ) ) ) ; \n \t3 logger . debug ( string . format ( <string_literal> , compaction <identifiersep> task . add <identifiersep> to <identifiersep> total <identifiersep> bytes <identifiersep> compacted ( endsize ) ) ) ; \n <ect>
\t4 ro = null ; \n \t4 sn . close ( ) ; \n \t4 sn = null ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 } catch ( final exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } \n \t2 return null ; } \n \t1 private tree <identifiersep> set < one <identifiersep> time <identifiersep> token <identifiersep> account > read <identifiersep> accounts <identifiersep> from <identifiersep> json <identifiersep> repository ( ) throws io <identifiersep> exception { \n <ect>
\t2 break ; } } \n \t1 byte [ ] array = blob != null ? blob . to <identifiersep> byte <identifiersep> array ( ) : new byte [ 0 ] ; \n \t1 event event = event <identifiersep> builder . with <identifiersep> body ( array , headers ) ; \n <ect>
\t1 private static boolean validate <identifiersep> path ( string path ) { \n \t2 int i = path . index <identifiersep> of ( <string_literal> ) ; \n \t2 if ( i == - 1 ) { \n <ect>
\t3 session . execute ( <string_literal> + keyspace ) ; } \n \t2 mailbox <identifiersep> impl mailbox = new mailbox <identifiersep> impl ( session , keyspace ) ; \n \t2 mailbox . init ( ) ; \n \t2 context . register <identifiersep> service ( mailbox <identifiersep> service . class . get <identifiersep> name ( ) , mailbox , new hashtable < string , string > ( ) ) ; \n <ect>
\t2 <comment> \n \t2 eucalyptus <identifiersep> activity <identifiersep> tasks . get <identifiersep> instance ( ) . delete <identifiersep> auto <identifiersep> scaling <identifiersep> group ( asg <identifiersep> name , true , \n \t3 lb . use <identifiersep> system <identifiersep> account ( ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + network <identifiersep> id + <string_literal> ) ; } \n \t3 try { \n \t4 <comment> \n \t4 if ( !  <identifiersep> network <identifiersep> acl <identifiersep> mgr . revoke <identifiersep> acl <identifiersep> items <identifiersep> for <identifiersep> network ( network <identifiersep> id ) ) { \n <ect>
\t2 get <identifiersep> controller ( ) . update <identifiersep> clusters ( collections . singleton ( cluster <identifiersep> request ) , null ) ; \n \t2 return null ; } \n \t1 } ) ; \n \t1 } catch ( ambari <identifiersep> exception e ) { \n <ect>
\t3 if ( ! ( e instanceof last <identifiersep> error <identifiersep> exception ) ) \n \t4 logger . error ( <string_literal> , e ) ; \n \t3 last <identifiersep> error <identifiersep> exception le = ( last <identifiersep> error <identifiersep> exception ) e ; \n \t3 if ( le . get <identifiersep> error <identifiersep> code ( ) == enomem && is <identifiersep> operating <identifiersep> system ( <string_literal> ) ) { \n <ect>
\t9 project . get <identifiersep> columns ( ) , project . get <identifiersep> result <identifiersep> type ( ) ) ; } \n \t6 if ( plan . get <identifiersep> successors ( node ) == null ) \n \t7 node = null ; \n \t6 else if ( plan . get <identifiersep> successors ( node ) . size ( ) != 1 ) { \n <ect>
\t3 if ( dir != null ) { \n \t4 less <identifiersep> files . delete <identifiersep> dir ( dir ) ; } } } \n \t1 @ test \n \t1 public void delete <identifiersep> one <identifiersep> thread ( ) throws exception { \n <ect>
\t1 if ( producer != null ) { \n \t1 try { \n \t2 producer . close ( ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t2 } catch ( final insufficient <identifiersep> capacity <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + e . to <identifiersep> string ( ) ) ; \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + e . to <identifiersep> string ( ) ) ; \n \t2 } catch ( final storage <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t2 fire <identifiersep> object <identifiersep> creation <identifiersep> event ( bucket . get <identifiersep> bucket <identifiersep> name ( ) , object <identifiersep> entity . get <identifiersep> object <identifiersep> key ( ) , object <identifiersep> entity . get <identifiersep> version <identifiersep> id ( ) , request <identifiersep> user . get <identifiersep> user <identifiersep> id ( ) , \n \t3 request <identifiersep> user . get <identifiersep> name ( ) , request <identifiersep> user . get <identifiersep> account <identifiersep> number ( ) , object <identifiersep> entity . get <identifiersep> size ( ) , null ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t3 service <identifiersep> registry <identifiersep> dao . remove <identifiersep> registered <identifiersep> service ( service ) ; \n \t3 logger . debug ( <string_literal> , service . get <identifiersep> name ( ) ) ; \n \t3 service <identifiersep> registry <identifiersep> dao . publish <identifiersep> event ( new cas <identifiersep> registered <identifiersep> service <identifiersep> deleted <identifiersep> event ( this , service ) ) ; \n \t2 } else { \n <ect>
\t1 <comment> \n \t1 protected void register <identifiersep> bundled <identifiersep> components ( component <identifiersep> registry registry ) { \n <ect>
\t2 for ( error <identifiersep> heuristic e : heuristics . key <identifiersep> set ( ) ) { \n \t3 e . process <identifiersep> log <identifiersep> line ( input <identifiersep> line ) ; } } \n \t2 in . close ( ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 final string project <identifiersep> names = string <identifiersep> utils . join ( get <identifiersep> projects ( project <identifiersep> input ) , <string_literal> ) ; \n \t2 final int period = options <identifiersep> helper . has <identifiersep> option ( option <identifiersep> period ) \n \t4 ? integer . value <identifiersep> of ( options <identifiersep> helper . get <identifiersep> option <identifiersep> value ( option <identifiersep> period ) ) \n \t4 : default <identifiersep> period ; \n <ect>
\t4 tmp <identifiersep> file = file . create <identifiersep> temp <identifiersep> file ( file <identifiersep> name + <string_literal> , ext , dir ) ; \n \t4 fos = new file <identifiersep> output <identifiersep> stream ( tmp <identifiersep> file ) ; \n \t4 write <identifiersep> document ( doc , fos ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 public void run ( ) { \n \t4 current <identifiersep> reconnect <identifiersep> delay = initial <identifiersep> reconnect <identifiersep> delay ; \n \t4 message <identifiersep> activation <identifiersep> spec activation <identifiersep> spec = endpoint <identifiersep> activation <identifiersep> key . get <identifiersep> activation <identifiersep> spec ( ) ; \n <ect>
\t6 s <identifiersep> logger . debug ( \n \t8 <string_literal> + pdu . get <identifiersep> agent <identifiersep> id ( ) + <string_literal> + pdu . get <identifiersep> json <identifiersep> package ( ) + <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> tick ) + <string_literal> ) ; } } \n \t3 } catch ( final agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t2 xml <identifiersep> encodable <identifiersep> tester . encode <identifiersep> decode <identifiersep> test ( <string_literal> , cd , cdec , bdec ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> encode <identifiersep> decode <identifiersep> byte <identifiersep> array ( ) { \n <ect>
\t3 conn . do <identifiersep> request ( request <identifiersep> set <identifiersep> volume , params ) ; \n \t3 current <identifiersep> volume = volume ; \n \t3 return ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 final injectable <identifiersep> impl injectable <identifiersep> as <identifiersep> impl = ( injectable <identifiersep> impl ) injectable ; \n \t1 injectable <identifiersep> as <identifiersep> impl . dependencies . add ( base <identifiersep> dependency . class . cast ( dependency ) ) ; } \n @ override \n public dependency <identifiersep> graph create <identifiersep> graph ( final reachability <identifiersep> strategy strategy ) { \n <ect>
\t2 self . new <identifiersep> page <identifiersep> loaded = true ; \n \t1 } ; \n \t1 this . is <identifiersep> new <identifiersep> page <identifiersep> loaded = function ( ) { \n \t2 if ( this . page <identifiersep> load <identifiersep> error ) { \n <ect>
\t4 type . set <identifiersep> expressions ( null ) ; \n \t4 log . warn ( <string_literal> , <string_literal> + type ) ; } \n \t3 if ( string <identifiersep> utils . is <identifiersep> blank ( type . get <identifiersep> name ( ) ) ) { \n \t4 if ( string <identifiersep> utils . is <identifiersep> blank ( type . get <identifiersep> user <identifiersep> type ( ) ) ) { \n <ect>
\t3 lists . new <identifiersep> array <identifiersep> list ( worker <identifiersep> id ) ) ; \n \t1 if ( instances != null && instances . size ( ) == 1 ) \n \t2 instance <identifiersep> id = instances . get ( 0 ) . get <identifiersep> instance <identifiersep> id ( ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t4 if ( ( ( setup <identifiersep> answer ) answer ) . need <identifiersep> reconnect ( ) ) { \n \t5 throw new connection <identifiersep> exception ( false , <string_literal> ) ; } \n \t4 return ; \n \t3 } else { \n <ect>
\t3  <identifiersep> config <identifiersep> sync <identifiersep> api . save <identifiersep> configuration ( <string_literal> , system <identifiersep> config <identifiersep> sync <identifiersep> save <identifiersep> mode . save <identifiersep> base <identifiersep> level <identifiersep> config ) ; \n \t3  <identifiersep> config <identifiersep> sync <identifiersep> api . save <identifiersep> configuration ( <string_literal> , system <identifiersep> config <identifiersep> sync <identifiersep> save <identifiersep> mode . save <identifiersep> high <identifiersep> level <identifiersep> config ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t2 } catch ( remote <identifiersep> exception e ) { \n <ect>
\t3  <identifiersep> cidr = <string_literal> ; } \n \t2  <identifiersep> gateway = db <identifiersep> params . get ( config . control <identifiersep> gateway ) ; \n \t2 if (  <identifiersep> gateway == null ) { \n \t3  <identifiersep> gateway = net <identifiersep> utils . get <identifiersep> link <identifiersep> local <identifiersep> gateway ( ) ; } \n <ect>
\t3 com . xpn . xwiki . doc . deleted <identifiersep> attachment attachment = this . xwiki . get <identifiersep> deleted <identifiersep> attachment ( id , this . context ) ; \n \t3 if ( attachment != null ) { \n \t4 return new deleted <identifiersep> attachment ( attachment , this . context ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
<comment> \n \t1 protected void start <identifiersep> checkpoint ( ) { \n \t2 if ( checkpoint <identifiersep> interval == 0 && cleanup <identifiersep> interval == 0 ) { \n <ect>
\t2 log . error ( <string_literal> ) ; \n \t2 continue ; } \n \t1 output output = ( output ) alias <identifiersep> util . get <identifiersep> class <identifiersep> instance ( value , alias <identifiersep> util . alias <identifiersep> type . output ) ; \n \t1 if ( output == null ) { \n <ect>
\t1 public boolean test ( string key ) { \n \t2 log . info ( <string_literal> + key + <string_literal> ) ; \n \t2 hash <identifiersep> map < string , object > substore = store . get ( key ) ; \n \t2 int saved <identifiersep> secret = integer . class . cast ( substore . get ( <string_literal> ) ) ; \n <ect>
\t2 try { \n \t3 cloud <identifiersep> stack <identifiersep> user <identifiersep> vm vm = client . call ( command , api <identifiersep> key , secret <identifiersep> key , true , <string_literal> , <string_literal> , cloud <identifiersep> stack <identifiersep> user <identifiersep> vm . class ) ; \n \t3 assert . assert <identifiersep> true ( vm . get <identifiersep> id ( ) == <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( ! <string_literal> . equals ( test <identifiersep> bean2 . print <identifiersep> string ( ) ) ) { \n \t3 log . error ( <string_literal> ) ; \n \t3 current <identifiersep> state = false ; } \n \t2 if ( this . boolean1 == null || this . boolean1 != true ) { \n <ect>
\t1 protected collection < x509crl > get <identifiersep> cr <identifiersep> ls ( final x509certificate cert ) { \n \t2 final x500principal principal = cert . get <identifiersep> issuer <identifiersep> x500principal ( ) ; \n \t2 if ( this . crl <identifiersep> issuer <identifiersep> map . contains <identifiersep> key ( principal ) ) { \n \t3 return collection <identifiersep> utils . wrap ( this . crl <identifiersep> issuer <identifiersep> map . get ( principal ) ) ; } \n <ect>
\t4 { \n \t5 index . close ( ) ; } \n \t4 catch ( exception e ) \n \t4 { \n <ect>
\t3 capabilities . append <identifiersep> child ( capability ) ; \n \t3 doc . get <identifiersep> document <identifiersep> element ( ) . append <identifiersep> child ( capabilities ) ; \n \t3 return serialize ( dom <identifiersep> impl , doc ) ; \n \t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n <ect>
\t8 logger . warn ( <string_literal> , servlet <identifiersep> class <identifiersep> name , servlet <identifiersep> name ) ; } \n \t6 } else { \n \t7 logger . warn ( <string_literal> , servlet <identifiersep> name , servlet <identifiersep> name ) ; } \n \t5 } else { \n <ect>
\t1 protected string get <identifiersep> schema <identifiersep> resource <identifiersep> uri ( message message ) { \n \t2 string schema <identifiersep> resource <identifiersep> uri = message . get <identifiersep> header ( xml <identifiersep> signature <identifiersep> constants . header <identifiersep> schema <identifiersep> resource <identifiersep> uri , string . class ) ; \n \t2 if ( schema <identifiersep> resource <identifiersep> uri == null ) { \n \t3 schema <identifiersep> resource <identifiersep> uri = get <identifiersep> configuration ( ) . get <identifiersep> schema <identifiersep> resource <identifiersep> uri ( ) ; } \n <ect>
\t5 <comment> \n \t5 coord <identifiersep> job . set <identifiersep> last <identifiersep> modified <identifiersep> time ( new date ( ) ) ; \n \t5 jpa <identifiersep> service . execute ( new coord <identifiersep> job <identifiersep> update <identifiersep> jpa <identifiersep> executor ( coord <identifiersep> job ) ) ; } } \n \t3 catch ( jpa <identifiersep> executor <identifiersep> exception jex ) { \n <ect>
\t3 method = http <identifiersep> method . of ( request ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 throw new method <identifiersep> not <identifiersep> allowed <identifiersep> exception ( router . allowed <identifiersep> methods <identifiersep> for ( resource <identifiersep> name ) , request . get <identifiersep> method ( ) ) ; } \n \t2 resource <identifiersep> method resource = router . parse ( resource <identifiersep> name , method , request ) ; \n <ect>
\t2 alc10 . alc <identifiersep> get <identifiersep> integer ( device , alc11 . alc <identifiersep> stereo <identifiersep> sources , buffer ) ; \n \t2 logger . info ( <string_literal> , buffer . get ( 0 ) ) ; \n \t2 buffer . rewind ( ) ; \n \t2 alc10 . alc <identifiersep> get <identifiersep> integer ( device , alc10 . alc <identifiersep> frequency , buffer ) ; \n <ect>
\t5 file f = ( file ) e . next <identifiersep> element ( ) ; \n \t5 if ( ! f . delete ( ) ) \n \t6 f . delete ( ) ; } \n \t4 <comment> \n <ect>
\t2 if ( offer ( context , row , 1 , time <identifiersep> unit . minutes , <number_literal> ) ) { \n \t3 counter ++ ; \n \t3 count <identifiersep> of <identifiersep> last <identifiersep> split ++ ; \n \t3 if ( counter % batch <identifiersep> constants . normal <identifiersep> record <identifiersep> log <identifiersep> threshold == 0 ) { \n <ect>
\t2 conn = new connection ( this ) ; \n \t2 conn . start ( ) ; } \n \t1 @ override \n \t1 public void  <identifiersep> on <identifiersep> data ( string name , json <identifiersep> object obj ) { \n <ect>
\t2 while ( it . has <identifiersep> next ( ) ) { \n \t3 string title = map . get ( it . next ( ) ) . get <identifiersep> title ( ) ; \n \t3 int len = math . min ( title . length ( ) , <number_literal> ) ; \n \t3 logger . info ( <string_literal> + title . substring ( 0 , len ) + <string_literal> ) ; \n <ect>
\t1 if ( url == null ) { \n \t2 log . info ( name + <string_literal> ) ; \n \t2 return null ; \n \t1 } else { \n <ect>
\t2  <identifiersep> last <identifiersep> activity =  <identifiersep> context . clock ( ) . now ( ) ; \n \t2 if (  <identifiersep> is <identifiersep> reduced ) { \n \t3  <identifiersep> is <identifiersep> reduced = false ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 rmi <identifiersep> server = <string_literal> + get <identifiersep> connector <identifiersep> host ( ) + <string_literal> + rmi <identifiersep> server <identifiersep> port ; } \n \t2 string service <identifiersep> url = <string_literal> + rmi <identifiersep> server + <string_literal> + get <identifiersep> connector <identifiersep> host ( ) + <string_literal> + connector <identifiersep> port + connector <identifiersep> path ; \n \t2 jmx <identifiersep> service <identifiersep> url url = new jmx <identifiersep> service <identifiersep> url ( service <identifiersep> url ) ; \n \t2 connector <identifiersep> server = jmx <identifiersep> connector <identifiersep> server <identifiersep> factory . new <identifiersep> jmx <identifiersep> connector <identifiersep> server ( url , environment , mbean <identifiersep> server ) ; \n <ect>
\t2 build <identifiersep> request <identifiersep> record req =  <identifiersep> processor . decrypt ( state . msg ,  <identifiersep> context . router <identifiersep> hash ( ) ,  <identifiersep> context . key <identifiersep> manager ( ) . get <identifiersep> private <identifiersep> key ( ) ) ; \n \t2 long decrypt <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) - before <identifiersep> decrypt ; \n \t2  <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , decrypt <identifiersep> time ) ; \n \t2 if ( decrypt <identifiersep> time > <number_literal> &&  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 tx <identifiersep> context <identifiersep> reset ( ) ; \n \t4 log . debug ( <string_literal> + tx ) ; } \n <ect>
\t5 if ( nodes <identifiersep> iterator . has <identifiersep> next ( ) ) { \n \t6 next <identifiersep> node <identifiersep> message = <string_literal> ; \n \t5 } else { \n \t6 next <identifiersep> node <identifiersep> message = <string_literal> ; } \n <ect>
\t1 public set < event > resolve <identifiersep> internal ( final request <identifiersep> context context ) { \n \t2 final registered <identifiersep> service service = resolve <identifiersep> registered <identifiersep> service <identifiersep> in <identifiersep> request <identifiersep> context ( context ) ; \n \t2 final authentication authentication = web <identifiersep> utils . get <identifiersep> authentication ( context ) ; \n \t2 if ( service == null || authentication == null ) { \n <ect>
\t2 { \n \t3 process ( string . format ( <string_literal> , auth . auth <identifiersep> ks , permissions <identifiersep> cf , escape ( dropped <identifiersep> user ) ) ) ; } \n \t2 catch ( request <identifiersep> execution <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 future < bulk <identifiersep> by <identifiersep> scroll <identifiersep> response > response = copy . execute ( ) ; \n \t3 client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> delete ( <string_literal> ) . get ( ) ; \n \t3 try { \n \t4 response . get ( ) ; \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 int i = 0 ; \n \t2 for ( signer <identifiersep> information signer : signers . get <identifiersep> signers ( ) ) { \n \t3 i ++ ; \n <ect>
\t7 this . priority <identifiersep> enabled ) ) ; } \n \t2 catch ( duplicate <identifiersep> key <identifiersep> exception e ) { \n \t4 string message <identifiersep> id = get <identifiersep> key ( message . get <identifiersep> headers ( ) . get <identifiersep> id ( ) ) ; \n <ect>
\t1 public void test <identifiersep> method15 ( ) { \n \t2 string conf <identifiersep> debug = <string_literal> + <string_literal> ) ; \n <ect>
\t5 buffer . append ( <string_literal> ) ; } \n \t4 buffer . append ( hex ) ; } \n \t3 md5 = buffer . to <identifiersep> string ( ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception ex ) { \n <ect>
\t4 s <identifiersep> logger . warn ( msg ) ; \n \t4 return new reboot <identifiersep> answer ( cmd , msg ) ; } \n \t2 } catch ( exception e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t2 private form <identifiersep> validation load ( string json , long data <identifiersep> timestamp ) throws io <identifiersep> exception { \n \t3 text <identifiersep> file df = get <identifiersep> data <identifiersep> file ( ) ; \n \t3 df . write ( json ) ; \n \t3 df . file . set <identifiersep> last <identifiersep> modified ( data <identifiersep> timestamp ) ; \n <ect>
\t3 response . set <identifiersep> responses ( res <identifiersep> list ) ; \n \t3 response . set <identifiersep> response <identifiersep> name ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void execute ( ) { \n <ect>
\t3 return new answer ( cmd , false , msg ) ; } \n \t2 return new answer ( cmd ) ; } \n \t1 protected answer execute ( final create <identifiersep> ip <identifiersep> alias <identifiersep> command cmd ) { \n <ect>
\t2 long token = 1 + get <identifiersep> context ( ) . random ( ) . next <identifiersep> long ( i2np <identifiersep> message . max <identifiersep> id <identifiersep> value ) ; \n \t2 hash to = peer . get <identifiersep> identity ( ) . get <identifiersep> hash ( ) ; \n \t2 tunnel <identifiersep> info reply <identifiersep> tunnel = get <identifiersep> context ( ) . tunnel <identifiersep> manager ( ) . select <identifiersep> inbound <identifiersep> exploratory <identifiersep> tunnel ( to ) ; \n \t2 if ( reply <identifiersep> tunnel == null ) { \n <ect>
\t6 plugin <identifiersep> output <identifiersep> stream . close ( ) ; \n \t6 if ( temp <identifiersep> plugin <identifiersep> file . length ( ) == 0 ) \n \t7 throw new plugin <identifiersep> not <identifiersep> found <identifiersep> exception ( <string_literal> ) ; \n \t6 if ( ! file <identifiersep> util . rename <identifiersep> to ( temp <identifiersep> plugin <identifiersep> file , plugin <identifiersep> file ) ) { \n <ect>
\t1 log . warn ( <string_literal> + print <identifiersep> duration ( duration ) ) ; } \n private void warmup ( ) throws interrupted <identifiersep> exception { \n \t1 long start <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 task <identifiersep> runner runner = new task <identifiersep> runner ( num <identifiersep> threads ) ; \n <ect>
\t4 public void run ( ) { \n \t5 try { \n \t6 do <identifiersep> deregister ( ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t2 logger . debug ( <string_literal> + valve <identifiersep> pos ) ; \n \t2 logger . debug ( <string_literal> + ctrl <identifiersep> mode ) ; \n \t2 logger . debug ( <string_literal> + dst <identifiersep> active ) ; \n \t2 logger . debug ( <string_literal> + lan <identifiersep> gateway ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 try { \n \t3  <identifiersep> target <identifiersep> adaptor = ( jdbc <identifiersep> adaptor ) eo <identifiersep> adaptor . adaptor <identifiersep> with <identifiersep> name ( <string_literal> ) ; } \n \t2 catch ( java . lang . illegal <identifiersep> state <identifiersep> exception e ) { \n <ect>
\t3 if ( conf . disk <identifiersep> access <identifiersep> mode == config . disk <identifiersep> access <identifiersep> mode . auto ) \n \t3 { \n \t4 conf . disk <identifiersep> access <identifiersep> mode = has <identifiersep> large <identifiersep> address <identifiersep> space ( ) ? config . disk <identifiersep> access <identifiersep> mode . mmap : config . disk <identifiersep> access <identifiersep> mode . standard ; \n \t4 index <identifiersep> access <identifiersep> mode = conf . disk <identifiersep> access <identifiersep> mode ; \n <ect>
\t2 get <identifiersep> cluster <identifiersep> controller ( ) . ensure <identifiersep> resource <identifiersep> provider ( resource . type . config <identifiersep> group ) ; \n \t1 try { \n \t2 config <identifiersep> group <identifiersep> provider . create <identifiersep> resources ( collections . singleton ( request ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 public void notify <identifiersep> close <identifiersep> sent ( ) { \n \t2 if ( !  <identifiersep> close <identifiersep> sent <identifiersep> on . compare <identifiersep> and <identifiersep> set ( 0 ,  <identifiersep> context . clock ( ) . now ( ) ) ) { \n \t3 <comment> \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 self .  <identifiersep> llap <identifiersep> stop ( env ) \n \t1 self .  <identifiersep> llap <identifiersep> start ( env ) \n \t1 def  <identifiersep> llap <identifiersep> stop ( self , env ) : \n \t1 import params \n <ect>
\t3 int target <identifiersep> block = index / block <identifiersep> size ; \n \t3 for ( int i = 0 ; i < blocks . length ; i ++ ) { \n \t4 block block = blocks [ i ] ; \n \t4 if ( i != ( blocks . length - 1 ) && block . reqs . length != block <identifiersep> size ) { \n <ect>
\t2 app . get <identifiersep> bean ( scheduler . class ) . shutdown ( ) ; \n \t2 io <identifiersep> helper . close ( app ) ; \n \t2 log . warn ( <string_literal> ) ; \n \t2 log . warn ( <string_literal> ) ; \n <ect>
\t2 try { \n \t3 grid <identifiersep> ggfs <identifiersep> path path = convert ( f ) ; \n \t3 grid <identifiersep> ggfs <identifiersep> mode mode = mode ( path ) ; \n <ect>
\t5 value v = row . get <identifiersep> value ( qr . get <identifiersep> column <identifiersep> names ( ) [ i ] ) ; \n \t5 list [ i ] = v != null ? v . get <identifiersep> string ( ) : <string_literal> ; } \n \t4 rows . add ( list ) ; } \n \t3 rs . set <identifiersep> rows ( rows ) ; \n <ect>
\t4 new <identifiersep> allocation <identifiersep> state = grouping . allocation <identifiersep> state . value <identifiersep> of ( allocation <identifiersep> state ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { \n \t4 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> + allocation <identifiersep> state + <string_literal> ) ; } \n \t3 if ( new <identifiersep> allocation <identifiersep> state == null ) { \n <ect>
\t4 identifiers = completed <identifiersep> request <identifiersep> identifiers . to <identifiersep> array ( new string [ completed <identifiersep> request <identifiersep> identifiers . size ( ) ] ) ; } \n \t3 for ( string identifier : identifiers ) \n \t4 bw . write ( identifier + ' \\ n' ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 private static void log <identifiersep> status ( ) \n \t1 { \n \t2 m <identifiersep> bean <identifiersep> server server = management <identifiersep> factory . get <identifiersep> platform <identifiersep> m <identifiersep> bean <identifiersep> server ( ) ; \n \t2 <comment> \n <ect>
<comment> \n \t1 @ override \n \t1 public void validate <identifiersep> item <identifiersep> type ( item pv <identifiersep> item , string pv <identifiersep> binding <identifiersep> config ) throws binding <identifiersep> config <identifiersep> parse <identifiersep> exception { \n <ect>
\t1 <comment> \n \t1 private int consume <identifiersep> messages ( int number <identifiersep> of <identifiersep> message ) throws exception { \n <ect>
\t2 try { \n \t3 if ( ac != null ) { \n \t4 ac . close ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 2l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> size ( 0 ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 2l ) ) ; } \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> , e ) ; \n \t3 try { \n \t4 snapshot <identifiersep> obj . process <identifiersep> event ( snapshot . event . operation <identifiersep> failed ) ; } \n \t3 catch ( no <identifiersep> transition <identifiersep> exception e1 ) { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> number <identifiersep> of <identifiersep> replicas ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> active <identifiersep> shards ( ) , equal <identifiersep> to ( num <identifiersep> shards . num <identifiersep> primaries * <number_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 allow <identifiersep> nodes ( <string_literal> , <number_literal> ) ; \n <ect>
public static void set ( map < string , string > conf ) { \n \t1 objects . require <identifiersep> non <identifiersep> null ( conf ) ; \n \t1 config = conf ; } \n public static void print ( ) { \n <ect>
\t4 <string_literal> + <string_literal> + \n \t4 <string_literal> + stomp . null ; \n \t2 stomp <identifiersep> connection . send <identifiersep> frame ( frame ) ; \n \t2 receipt = stomp <identifiersep> connection . receive ( ) ; \n <ect>
\t6 range <identifiersep> to <identifiersep> neighbors . put ( range , neighbors ) ; \n \t6 all <identifiersep> neighbors . add <identifiersep> all ( neighbors ) ; } \n \t5 catch ( illegal <identifiersep> argument <identifiersep> exception e ) \n \t5 { \n <ect>
\t3 log . warn ( <string_literal> ) ; \n \t3 log . warn ( <string_literal> ) ; \n \t3 log . warn ( <string_literal> ) ; \n \t3 log . warn ( <string_literal> ) ; \n <ect>
\t2 repo . set <identifiersep> level <identifiersep> db <identifiersep> file ( level <identifiersep> db <identifiersep> file ) ; \n \t2 repo . set <identifiersep> repository <identifiersep> name ( <string_literal> ) ; \n \t2 exchange exchange = new default <identifiersep> exchange ( context ) ; \n \t2 exchange . get <identifiersep> in ( ) . set <identifiersep> body ( <string_literal> ) ; \n <ect>
\t3 context . get <identifiersep> ignore <identifiersep> event <identifiersep> list ( ) . put ( item <identifiersep> name + command . to <identifiersep> string ( ) , system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t3 logger . debug ( <string_literal> , item <identifiersep> name , \n \t5 command . to <identifiersep> string ( ) ) ; \n \t2 } else { \n <ect>
\t4 logger . debug ( <string_literal> , provider , service ) ; \n \t4 final map < string , object > attributes = build <identifiersep> event <identifiersep> attribute <identifiersep> map ( authentication . get <identifiersep> principal ( ) , service , provider ) ; \n \t4 final event event = validate <identifiersep> event <identifiersep> id <identifiersep> for <identifiersep> matching <identifiersep> transition <identifiersep> in <identifiersep> context ( provider . get <identifiersep> id ( ) , context , attributes ) ; \n \t4 return collection <identifiersep> utils . wrap <identifiersep> set ( event ) ; } \n <ect>
\t6 . less <identifiersep> than <identifiersep> equals ( 1 ) \n \t6 . build ( ) ) . execute ( ) ; \n \t2 assert . assert <identifiersep> true ( 1 == result . get <identifiersep> result ( ) . size ( ) ) ; \n \t2 for ( column < mock <identifiersep> composite <identifiersep> type > col : result . get <identifiersep> result ( ) ) { \n <ect>
\t3 self . server <identifiersep> terminated = true \n \t3 try : \n \t4 self .  <identifiersep> write ( self . stream . close ( code = code , reason = reason ) . single ( mask = self . stream . always <identifiersep> mask ) ) \n \t3 except exception as ex : \n <ect>
\t3 fail ( <string_literal> ) ; } \n \t2 args . add ( <string_literal> ) ; \n \t2 args . add ( <string_literal> ) ; \n \t2 for ( string a : args ) { \n <ect>
\t2 try ( final tx tx = app . tx ( true , false , false ) ) { \n \t3 final dom <identifiersep> node existing <identifiersep> component = ( by <identifiersep> id ? app . get ( dom <identifiersep> node . class , component <identifiersep> name ) : ( by <identifiersep> name <identifiersep> and <identifiersep> id ? app . get ( dom <identifiersep> node . class , component <identifiersep> name . substring ( component <identifiersep> name . length ( ) - <number_literal> ) ) : get <identifiersep> existing <identifiersep> component ( component <identifiersep> name ) ) ) ; \n \t3 final property <identifiersep> map properties \t1 = get <identifiersep> properties <identifiersep> for <identifiersep> component ( component <identifiersep> name ) ; \n \t3 if ( properties == null ) { \n <ect>
\t2 if ( host <identifiersep> name . length ( ) > <number_literal> || host <identifiersep> name . length ( ) < 1 ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t3 return false ; \n \t2 } else if ( ! host <identifiersep> name . to <identifiersep> lower <identifiersep> case ( ) . matches ( <string_literal> ) ) { \n <ect>
\t5 . error ( <string_literal> \n \t7 + username ) ; \n \t3 return - 1 ; \n \t2 } else { \n <ect>
\t9 return new pair < virtual <identifiersep> disk , string > ( ( virtual <identifiersep> disk ) device , device <identifiersep> numbering ) ; } \n \t7 } else { \n \t8 if ( backing <identifiersep> base <identifiersep> name . contains ( trimmed <identifiersep> src <identifiersep> base <identifiersep> name ) ) { \n \t9 string device <identifiersep> numbering = get <identifiersep> device <identifiersep> bus <identifiersep> name ( devices , device ) ; \n <ect>
\t2 if ( delegate <identifiersep> target . get <identifiersep> state ( ) == received <identifiersep> token . state . valid && delegate <identifiersep> target . get <identifiersep> principal ( ) != null ) { \n \t3 response . set <identifiersep> delegation <identifiersep> allowed ( true ) ; \n \t3 logger . debug ( <string_literal> , delegate <identifiersep> target . get <identifiersep> principal ( ) ) ; \n \t2 } else { \n <ect>
\t3 testing <identifiersep> client . close ( ) ; } } \n \t1 public static void remove <identifiersep> test <identifiersep> realms ( test <identifiersep> context test <identifiersep> context , keycloak admin <identifiersep> client ) { \n \t2 list < realm <identifiersep> representation > test <identifiersep> realm <identifiersep> reps = test <identifiersep> context . get <identifiersep> test <identifiersep> realm <identifiersep> reps ( ) ; \n \t2 if ( test <identifiersep> realm <identifiersep> reps != null ) { \n <ect>
\t2 if ( hfile <identifiersep> size <identifiersep> mb > 0 . 0 && hfile <identifiersep> size <identifiersep> mb * compaction <identifiersep> threshold < mb <identifiersep> per <identifiersep> region ) { \n \t3 hfile <identifiersep> size <identifiersep> mb = mb <identifiersep> per <identifiersep> region / compaction <identifiersep> threshold ; } \n \t2 if ( hfile <identifiersep> size <identifiersep> mb < = 0 ) { \n \t3 hfile <identifiersep> size <identifiersep> mb = mb <identifiersep> per <identifiersep> region ; } \n <ect>
\t6 continue ; } \n \t5 int port ; \n \t5 string port <identifiersep> string = ( string ) configuration . get ( string . format ( config <identifiersep> key <identifiersep> pnmas <identifiersep> port , pnmas <identifiersep> id ) ) ; \n \t5 if ( port <identifiersep> string == null ) { \n <ect>
\t3 string row = string . format ( <string_literal> , r . next <identifiersep> int ( map <identifiersep> size <identifiersep> per <identifiersep> thread ) ) ; \n \t3 string val = row + <string_literal> ; \n \t3 value value = nm . get ( new key ( new text ( row ) ) ) ; \n \t3 if ( value == null || ! value . to <identifiersep> string ( ) . equals ( val ) ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 if ( avoids . should <identifiersep> avoid ( dc ) ) { \n <ect>
\t1 private static boolean evaluate <identifiersep> payload <identifiersep> map <identifiersep> validator ( @ nonnull final rule <identifiersep> evaluator rule <identifiersep> evaluator , final string rule , @ nonnull final payload payload ) throws incompatible <identifiersep> test <identifiersep> matrix <identifiersep> exception { \n \t2 try { \n \t3 return rule <identifiersep> evaluator . evaluate <identifiersep> boolean <identifiersep> rule ( rule , payload . get <identifiersep> map ( ) ) ; \n \t2 } catch ( @ nonnull final illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t4 if ( target <identifiersep> names . is <identifiersep> empty ( ) ) \n \t5 return true ; } \n \t3 catch ( malformed <identifiersep> object <identifiersep> name <identifiersep> exception e ) \n \t3 { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 final iterator < qual <identifiersep> interval > it1p = intervals . iterator ( ) ; \n \t2 it1p . next ( ) ; <comment> \n \t2 <comment> \n \t2 qual <identifiersep> interval min <identifiersep> merge = null ; \n <ect>
\t5 return super . resolve <identifiersep> class ( desc ) ; } \n \t3 } ; \n \t3 result = ois . read <identifiersep> object ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 purge ( ) ; \n \t2 } catch ( throwable t ) { \n \t3 <comment> \n <ect>
\t2 assert <identifiersep> equals ( http <identifiersep> status <identifiersep> codes . no <identifiersep> content . get <identifiersep> status <identifiersep> code ( ) , response <identifiersep> parts . get ( <number_literal> ) . get <identifiersep> status <identifiersep> code ( ) ) ; \n \t2 assert <identifiersep> equals ( http <identifiersep> status <identifiersep> codes . not <identifiersep> found . get <identifiersep> status <identifiersep> code ( ) , response <identifiersep> parts . get ( <number_literal> ) . get <identifiersep> status <identifiersep> code ( ) ) ; \n \t2 final exception exception = ( exception ) response <identifiersep> parts . get ( <number_literal> ) . get <identifiersep> body ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( exception ) ; \n <ect>
\t3 case timer <identifiersep> constants . task <identifiersep> heartbeat : { \n \t4 task <identifiersep> hb <identifiersep> trigger . set <identifiersep> exe <identifiersep> thread <identifiersep> hb <identifiersep> time ( time <identifiersep> utils . current <identifiersep> time <identifiersep> secs ( ) ) ; \n \t4 break ; } \n \t3 default : { \n <ect>
\t4 final c test <identifiersep> definition = object <identifiersep> mapper . read <identifiersep> value ( reader , c ) ; \n \t4 return test <identifiersep> definition ; \n \t3 } else { \n <ect>
\t2 while ( ! work . is <identifiersep> empty ( ) ) { \n \t3 final transaction tx = work . poll ( ) ; \n \t3 log . warn ( <string_literal> , tx . get <identifiersep> hash <identifiersep> as <identifiersep> string ( ) , \n \t5 overriding <identifiersep> tx != null ? <string_literal> + overriding <identifiersep> tx . get <identifiersep> hash <identifiersep> as <identifiersep> string ( ) : <string_literal> ) ; \n <ect>
\t2 return bounds . to <identifiersep> rectangle ( ) ; } \n public boolean bring <identifiersep> window <identifiersep> to <identifiersep> foreground ( ) { \n \t1 hwnd current <identifiersep> window <identifiersep> handle = get <identifiersep> window <identifiersep> handle ( ) ; \n \t1 if ( current <identifiersep> window <identifiersep> handle == null ) { \n <ect>
\t2 configuration . set <identifiersep> boolean ( akka <identifiersep> options . jvm <identifiersep> exit <identifiersep> on <identifiersep> fatal <identifiersep> error , true ) ; \n \t2 <comment> \n \t2 string container <identifiersep> id = preconditions . check <identifiersep> not <identifiersep> null ( envs . get ( mesos <identifiersep> config <identifiersep> keys . env <identifiersep> flink <identifiersep> container <identifiersep> id ) ) ; \n \t2 final resource <identifiersep> id resource <identifiersep> id = new resource <identifiersep> id ( container <identifiersep> id ) ; \n <ect>
\t2 } ) ; \n \t2 if ( node <identifiersep> scoped <identifiersep> condition . get ( ) && ! indexing <identifiersep> rule . is <identifiersep> node <identifiersep> full <identifiersep> text <identifiersep> indexed ( ) ) { \n \t3 return false ; } \n \t2 if ( relative <identifiersep> parents <identifiersep> found . get ( ) ) { \n <ect>
\t2 cluster <identifiersep> health <identifiersep> response cluster <identifiersep> health = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> green <identifiersep> status ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> nodes ( <string_literal> ) . get ( ) ; \n \t2 logger . info ( <string_literal> , cluster <identifiersep> health . get <identifiersep> status ( ) ) ; \n \t2 string server1node <identifiersep> id = internal <identifiersep> cluster ( ) . get <identifiersep> instance ( cluster <identifiersep> service . class , node <identifiersep> 1 ) . state ( ) . nodes ( ) . get <identifiersep> local <identifiersep> node <identifiersep> id ( ) ; \n \t2 string server2node <identifiersep> id = internal <identifiersep> cluster ( ) . get <identifiersep> instance ( cluster <identifiersep> service . class , node <identifiersep> <number_literal> ) . state ( ) . nodes ( ) . get <identifiersep> local <identifiersep> node <identifiersep> id ( ) ; \n <ect>
\t5 final string host <identifiersep> description = string . format ( <string_literal> , host . get <identifiersep> id ( ) , host . get <identifiersep> uuid ( ) , host . get <identifiersep> name ( ) , host <identifiersep> ip , host . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; \n \t5 try { \n \t6 certificate . check <identifiersep> validity ( now . plus <identifiersep> days ( cert <identifiersep> expiry <identifiersep> alert <identifiersep> period . value <identifiersep> in ( host . get <identifiersep> cluster <identifiersep> id ( ) ) ) . to <identifiersep> date ( ) ) ; \n \t5 } catch ( final certificate <identifiersep> expired <identifiersep> exception | certificate <identifiersep> not <identifiersep> yet <identifiersep> valid <identifiersep> exception e ) { \n <ect>
\t2 shutdown ( ) ; } \n \t1 private i <identifiersep> map < string , ticket > get <identifiersep> ticket <identifiersep> map <identifiersep> instance ( final string map <identifiersep> name ) { \n \t2 try { \n \t3 final i <identifiersep> map < string , ticket > inst = hazelcast <identifiersep> instance . get <identifiersep> map ( map <identifiersep> name ) ; \n <ect>
\t3 try { \n \t4 if ( iterator != null ) \n \t5 iterator . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 private boolean check <identifiersep> condition <identifiersep> down ( auto <identifiersep> scale <identifiersep> vm <identifiersep> group <identifiersep> vo as <identifiersep> group ) { \n \t2 integer current <identifiersep> vm =  <identifiersep> auto <identifiersep> scale <identifiersep> vm <identifiersep> group <identifiersep> vm <identifiersep> map <identifiersep> dao . count <identifiersep> by <identifiersep> group ( as <identifiersep> group . get <identifiersep> id ( ) ) ; \n \t2 integer min <identifiersep> vm = as <identifiersep> group . get <identifiersep> min <identifiersep> members ( ) ; \n \t2 if ( current <identifiersep> vm - 1 < min <identifiersep> vm ) { \n <ect>
\t4 throw e ; \n \t3 } catch ( key <identifiersep> management <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t4 . locality ( <string_literal> ) \n \t2 ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n \t2 assert <identifiersep> true ( result . is <identifiersep> success ( ) ) ; \n <ect>
\t4 byte old <identifiersep> value = bb . get ( 0 ) ; \n \t4 byte new <identifiersep> value = ( byte ) ~old <identifiersep> value ; \n \t4 bb . put ( 0 , new <identifiersep> value ) ; \n \t4 raf . write ( bb , file <identifiersep> pointer ) ; \n <ect>
\t3 current = cursor . next ( ) ; \n \t3 seen ++ ; \n \t3 return true ; \n \t2 } catch ( mongo <identifiersep> exception e ) { \n <ect>
\t2 load <identifiersep> sub <identifiersep> configuration ( export <identifiersep> configurations , props , \n \t4 report <identifiersep> generator <identifiersep> exporter <identifiersep> key <identifiersep> prefix , false , \n \t4 new exporter <identifiersep> configuration <identifiersep> factory ( props ) ) ; \n \t2 if ( export <identifiersep> configurations . is <identifiersep> empty ( ) ) { \n <ect>
\t5 rs . close ( ) ; } \n \t4 if ( pstmt != null ) { \n \t5 pstmt . close ( ) ; } \n \t3 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 validator . validate ( new stream <identifiersep> source ( new string <identifiersep> reader ( xml <identifiersep> content ) ) ) ; } \n \t2 catch ( sax <identifiersep> exception ex ) { \n <ect>
\t6 <string_literal> + \n \t6 <string_literal> + stomp . null ; \n \t2 stomp <identifiersep> connection . send <identifiersep> frame ( subscribe ) ; \n \t2 stomp <identifiersep> frame receipt = stomp <identifiersep> connection . receive ( ) ; \n <ect>
\t5 } catch ( exception ex ) { \n \t6 logger . warn ( <string_literal> , e ) ; \n \t6 throw new runtime <identifiersep> exception ( <string_literal> , e ) ; } \n \t4 } else { \n <ect>
\t6 return url <identifiersep> decoder . decode ( pe [ 1 ] , <string_literal> ) ; \n \t5 } else { \n \t6 log . warn ( <string_literal> + profile <identifiersep> url ) ; } \n \t4 } else { \n <ect>
\t3 } else { \n \t4 try { \n \t5 virtual <identifiersep> ethernet <identifiersep> card <identifiersep> type . value <identifiersep> of ( nic <identifiersep> device <identifiersep> type ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 { \n \t3 response response = client . target ( generate <identifiersep> url ( <string_literal> , url <identifiersep> prefix + ext ) ) . request ( ) \n \t5 . post ( entity . entity ( external <identifiersep> collection , <string_literal> ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t3 } catch ( exception e ) { \n \t4 logger . warn ( <string_literal> , device <identifiersep> config . to <identifiersep> string ( ) , item <identifiersep> name , \n \t6 command , e . get <identifiersep> message ( ) ) ; } \n \t2 } else { \n <ect>
\t4 if ( vm <identifiersep> name . starts <identifiersep> with ( <string_literal> ) || vm <identifiersep> name . starts <identifiersep> with ( <string_literal> ) ) \n \t5 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 pair < boolean , string > ret = ssh <identifiersep> helper . ssh <identifiersep> execute ( command . get <identifiersep> control <identifiersep> ip ( ) , <number_literal> , <string_literal> , pem <identifiersep> file , null , <string_literal> + cmdline <identifiersep> backup <identifiersep> path + <string_literal> + cmdline <identifiersep> path ) ; \n \t4 if ( ! ret . first ( ) ) { \n <ect>
\t5 if ( jetty <identifiersep> solr <identifiersep> runner != null && ! jetty <identifiersep> solr <identifiersep> runner . is <identifiersep> running ( ) ) { \n \t6 try { \n \t7 jetty <identifiersep> solr <identifiersep> runner . stop ( ) ; \n <ect>
\t1 } else { \n \t2 log . trace ( <string_literal> ) ; } \n \t1 tr . commit ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 set <identifiersep> all <identifiersep> tables ( dbs ) ; \n \t3 db . add <identifiersep> db <identifiersep> schema ( dbs ) ; } } \n \t1 <comment> \n \t1 private void set <identifiersep> all <identifiersep> tables ( db <identifiersep> schema dbs ) { \n <ect>
\t1 try { \n \t1 m <identifiersep> bean <identifiersep> server . unregister <identifiersep> m <identifiersep> bean ( new object <identifiersep> name ( <string_literal> , keys ) ) ; \n \t1 } catch ( javax . management . instance <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 throw new io <identifiersep> exception ( <string_literal> + output <identifiersep> path ) ; } \n \t1 log . info ( <string_literal> ) ; \n \t1 <comment> \n \t1 distributed <identifiersep> cache . add <identifiersep> cache <identifiersep> file ( dataset <identifiersep> path . to <identifiersep> uri ( ) , conf ) ; \n <ect>
<comment> \n protected string format <identifiersep> versioned <identifiersep> resource ( final string hash , final string resource <identifiersep> path ) { \n \t1 return string . format ( <string_literal> , hash , resource <identifiersep> path ) ; } \n public final void on <identifiersep> cache <identifiersep> period <identifiersep> changed ( final long period ) { \n <ect>
\t3 byte msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply ; \n \t3 org . apache . thrift . t <identifiersep> serializable msg ; \n \t3 invalidate <identifiersep> conditional <identifiersep> update <identifiersep> result result = new invalidate <identifiersep> conditional <identifiersep> update <identifiersep> result ( ) ; \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t4 string name = o . to <identifiersep> string ( ) ; \n \t4 if ( name . starts <identifiersep> with ( <string_literal> ) ) { \n \t5 name = name . substring ( 1 ) ; } \n \t4 module module = camel <identifiersep> context <identifiersep> helper . mandatory <identifiersep> lookup ( camel <identifiersep> context , name , module . class ) ; \n <ect>
\t4 byte [ ] bytes = less <identifiersep> bytes . read <identifiersep> bytes ( dis , new <identifiersep> len ) ; \n \t4 if ( bytes == null || bytes . length == 0 || new <identifiersep> len == 0 ) { \n \t5 log . warn ( <string_literal> + i + <string_literal> + new <identifiersep> num + <string_literal> + index + <string_literal> + file ) ; \n \t4 } else { \n <ect>
\t2 string lexical <identifiersep> form = v . get <identifiersep> string ( ) ; \n \t2 <comment> \n \t2 if ( ! lexical <identifiersep> form . matches ( <string_literal> <ect>
\t3 } catch ( final throwable e ) { \n \t4 logger . trace ( e . get <identifiersep> message ( ) , e ) ; \n \t4 c = null ; } \n \t3 if ( c != null ) { \n <ect>
\t3 method = o . get <identifiersep> class ( ) . get <identifiersep> method ( method <identifiersep> name ) ; \n \t2 } catch ( security <identifiersep> exception e1 ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + o . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> + prop <identifiersep> name ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e1 ) { \n <ect>
\t2 builder <identifiersep> b . local <identifiersep> node <identifiersep> id ( random <identifiersep> picks . random <identifiersep> from ( random ( ) , nodes <identifiersep> b ) . get <identifiersep> id ( ) ) ; \n \t2 final discovery <identifiersep> nodes disco <identifiersep> nodes <identifiersep> a = builder <identifiersep> a . build ( ) ; \n \t2 final discovery <identifiersep> nodes disco <identifiersep> nodes <identifiersep> b = builder <identifiersep> b . build ( ) ; \n \t2 logger . info ( <string_literal> , disco <identifiersep> nodes <identifiersep> a ) ; \n <ect>
\t3 return new set <identifiersep> firewall <identifiersep> rules <identifiersep> answer ( cmd , false , results ) ; } \n \t2 return new set <identifiersep> firewall <identifiersep> rules <identifiersep> answer ( cmd , true , results ) ; } \n \t1 protected answer execute ( final vm <identifiersep> data <identifiersep> command cmd ) { \n <ect>
\t2 string overrides <identifiersep> file = system . getenv ( env <identifiersep> override <identifiersep> file ) ; \n \t2 commons <identifiersep> configuration o = null ; \n \t2 if ( null != overrides <identifiersep> file ) { \n \t3 if ( ! new file ( overrides <identifiersep> file ) . is <identifiersep> file ( ) ) { \n <ect>
\t3 timeline <identifiersep> metrics <identifiersep> aggregator <identifiersep> sink . class ) ; \n \t1 if ( metric <identifiersep> sink <identifiersep> class != null ) { \n \t1 aggregator <identifiersep> sink = \n \t2 reflection <identifiersep> utils . new <identifiersep> instance ( metric <identifiersep> sink <identifiersep> class , metrics <identifiersep> conf ) ; \n <ect>
\t1 @ override \n \t1 protected object handle <identifiersep> down <identifiersep> message ( final message msg ) { \n \t2 address dest = msg . dest ( ) ; \n \t2 if ( dest == null ) { <comment> \n <ect>
\t10 final java <identifiersep> class calling <identifiersep> class = ( java <identifiersep> class ) app . node <identifiersep> query ( java <identifiersep> class . class ) . and ( java <identifiersep> class . name , fqcn ) . get <identifiersep> first ( ) ; \n \t10 if ( calling <identifiersep> class != null ) { \n <number_literal> final method method = ( method ) app . node <identifiersep> query ( method . class ) . and ( method . name , calling <identifiersep> method <identifiersep> name ) . and ( method . class <identifiersep> or <identifiersep> interface , calling <identifiersep> class ) . get <identifiersep> first ( ) ; \n <number_literal> if ( method != null ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t3 <comment> \n \t3 status = http <identifiersep> servlet <identifiersep> response . sc <identifiersep> service <identifiersep> unavailable ; \n \t3 is <identifiersep> guest = false ; \n \t2 } else if ( t instanceof cms <identifiersep> vfs <identifiersep> resource <identifiersep> not <identifiersep> found <identifiersep> exception ) { \n <ect>
\t3 queue4sink . close ( ) ; \n \t3 inner <identifiersep> close ( ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t4 stream . close ( ) ; <comment> \n \t3 } catch ( io <identifiersep> exception ioe ) { \n \t4 log . warn ( <string_literal> , ioe ) ; <comment> \n \t2 if ( response . length ( ) == 0 && document . length > 0 ) { \n <ect>
\t3 <comment> \n \t3 try { \n \t4 connection . close ( ) ; \n \t3 } catch ( final exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 } catch ( io <identifiersep> exception ex ) { \n \t5 <comment> \n \t3 } catch ( socket <identifiersep> exception e ) { \n \t4 if ( ! <string_literal> . equals ( e . get <identifiersep> message ( ) ) ) { \n <ect>
\t5 entry1 . unswap ( ) ; \n \t5 break ; } \n \t4 catch ( grid <identifiersep> cache <identifiersep> entry <identifiersep> removed <identifiersep> exception ignored ) { \n <ect>
\t4 if ( peer != null ) \n \t5 send <identifiersep> destroy ( peer ) ; \n \t4 drop <identifiersep> peer ( peer <identifiersep> hash , false , <string_literal> ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 try { \n \t5 node . set <identifiersep> master <identifiersep> password ( master <identifiersep> password , false ) ; \n \t4 } catch ( already <identifiersep> set <identifiersep> password <identifiersep> exception e ) { \n \t5 system . err . println ( <string_literal> ) ; \n <ect>
\t7 ret = data <identifiersep> type . compare ( res2 . result , res1 . result ) ; \n \t7 if ( ret != 0 ) { \n \t8 return ret ; } } } \n \t4 } catch ( exec <identifiersep> exception e ) { \n <ect>
\t4 release ( ) ; \n \t3 } catch ( exception ex ) { \n \t4 release ( ) ; \n \t4 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t3 if ( debug ) logger . info ( <string_literal> , entry . get <identifiersep> key ( ) ) ; \n \t3 try { \n \t4 entry . get <identifiersep> value ( ) . write ( new buffer ( reply ) ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 object <identifiersep> mapper mapper <identifiersep> obj = new object <identifiersep> mapper ( ) ; \n \t4 response . set <identifiersep> status ( http <identifiersep> status . sc <identifiersep> ok ) ; \n \t4 string json <identifiersep> str = mapper <identifiersep> obj . write <identifiersep> value <identifiersep> as <identifiersep> string ( database <identifiersep> info ) ; \n <ect>
<comment> \n \t3 if ( force <identifiersep> snap <identifiersep> sync ) { \n \t4 <comment> \n <ect>
\t6 log . warn ( <string_literal> ) ; } } \n \t4 log . debug ( <string_literal> ) ; \n \t4 connection . commit ( ) ; } \n \t3 catch ( batch <identifiersep> update <identifiersep> exception be ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 super . add <identifiersep> session ( context , info ) ; } \n \t1 @ override \n \t1 public void remove <identifiersep> session ( connection <identifiersep> context context , session <identifiersep> info info ) throws exception { \n \t2 if ( is <identifiersep> log <identifiersep> all ( ) || is <identifiersep> log <identifiersep> session <identifiersep> events ( ) ) { \n <ect>
\t2 integer psk <identifiersep> length =  <identifiersep> psk <identifiersep> length ; \n \t2 if ( psk <identifiersep> length != null && ( psk <identifiersep> length < <number_literal> || psk <identifiersep> length > <number_literal> ) ) { \n \t3 throw new configuration <identifiersep> exception ( <string_literal> ) ; \n \t2 } else if ( psk <identifiersep> length == null ) { \n <ect>
\t1 try { \n \t1 string <identifiersep> props = hsql <identifiersep> properties . arg <identifiersep> array <identifiersep> to <identifiersep> props ( args , <string_literal> ) ; \n \t1 props . add <identifiersep> properties ( string <identifiersep> props ) ; \n \t1 } catch ( array <identifiersep> index <identifiersep> out <identifiersep> of <identifiersep> bounds <identifiersep> exception ex ) { \n <ect>
\t6 unregister ( url ) ; \n \t7 logger . info ( <string_literal> + url ) ; } \n \t5 } catch ( throwable t ) { \n <ect>
\t2 log . info ( <string_literal> ) <comment> \n \t2 compile <identifiersep> service . call <identifiersep> result . good ( daemon <identifiersep> jvm <identifiersep> options ) } \n \t1 override fun register <identifiersep> client ( alive <identifiersep> flag <identifiersep> path : string ? ) : compile <identifiersep> service . call <identifiersep> result < nothing > = if <identifiersep> alive ( min <identifiersep> aliveness = aliveness . alive ) { \n \t2 state . add <identifiersep> client ( alive <identifiersep> flag <identifiersep> path ) \n <ect>
\t2 final map < string , object > authn <identifiersep> attributes = authentication <identifiersep> attribute <identifiersep> release <identifiersep> policy \n \t4 . get <identifiersep> authentication <identifiersep> attributes <identifiersep> for <identifiersep> release ( get <identifiersep> primary <identifiersep> authentication <identifiersep> from ( model ) ) ; \n \t2 if ( is <identifiersep> remember <identifiersep> me <identifiersep> authentication ( model ) ) { \n \t3 authn <identifiersep> attributes . put ( this . remember <identifiersep> me <identifiersep> attribute <identifiersep> name , boolean . true . to <identifiersep> string ( ) ) ; } \n <ect>
add <identifiersep> foreign <identifiersep> key <identifiersep> handler ( notification <identifiersep> event event ) { \n \t1 super ( event ) ; } \n @ override \n public void handle ( context within <identifiersep> context ) throws exception { \n <ect>
\t3 static <identifiersep> nat <identifiersep> rule rule =  <identifiersep> rules <identifiersep> service . create <identifiersep> static <identifiersep> nat <identifiersep> rule ( this , get <identifiersep> open <identifiersep> firewall ( ) ) ; \n \t3 set <identifiersep> entity <identifiersep> id ( rule . get <identifiersep> id ( ) ) ; \n \t3 set <identifiersep> entity <identifiersep> uuid ( rule . get <identifiersep> uuid ( ) ) ; \n \t2 } catch ( network <identifiersep> rule <identifiersep> conflict <identifiersep> exception e ) { \n <ect>
\t4 new <identifiersep> managed <identifiersep> state = managed . managed <identifiersep> state . value <identifiersep> of ( managedstate ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { \n \t4 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> + managedstate + <string_literal> ) ; } \n \t3 if ( new <identifiersep> managed <identifiersep> state == null ) { \n <ect>
\t4 latch2 . await ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t4 locked . set ( true ) ; } \n \t3 catch ( interrupted <identifiersep> exception e1 ) { \n \t4 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n <ect>
\t3 log . warn ( <string_literal> + parent <identifiersep> tag ) ; \n \t3 return ; } \n \t2 node <identifiersep> list remove <identifiersep> nodes = parent <identifiersep> element . get <identifiersep> elements <identifiersep> by <identifiersep> tag <identifiersep> name ( remove <identifiersep> node ) ; \n \t2 if ( remove <identifiersep> nodes == null ) { \n <ect>
\t2 assertion <identifiersep> error e = run <identifiersep> catching <identifiersep> assertion <identifiersep> error ( test ) ; \n \t2 if ( e == null ) \n \t3 return ; \t1 <comment> \n \t2 logger . info ( <string_literal> , message , e ) ; \n <ect>
\t4 if ( type != null ) { \n \t5 cursor . to <identifiersep> first <identifiersep> child ( ) ; \n \t5 xml <identifiersep> generator . create <identifiersep> sample <identifiersep> for <identifiersep> type ( type , cursor ) ; \n \t4 } else { \n <ect>
\t3 sc . add <identifiersep> and ( <string_literal> , search <identifiersep> criteria . op . eq , usage <identifiersep> types . allocated <identifiersep> vm ) ; \n \t3 list < usage <identifiersep> vm <identifiersep> instance <identifiersep> vo > usage <identifiersep> instances =  <identifiersep> usage <identifiersep> instance <identifiersep> dao . search ( sc , null ) ; \n \t3 if ( usage <identifiersep> instances != null ) { \n \t4 if ( usage <identifiersep> instances . size ( ) > 1 ) { \n <ect>
\t4 log . info ( <string_literal> + f . get <identifiersep> name ( ) ) ; \n \t4 try { \n \t5 f . delete ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 if ( leases . size ( ) < wanted ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 # must be prior to any other operation \n \t2 self . update <identifiersep> caches <identifiersep> from <identifiersep> heartbeat ( ret ) \n \t2 self . recovery <identifiersep> manager . update <identifiersep> configuration <identifiersep> from <identifiersep> registration ( ret ) \n \t2 self . config . update <identifiersep> configuration <identifiersep> from <identifiersep> registration ( ret ) \n <ect>
\t7 for ( snapshot <identifiersep> data <identifiersep> store <identifiersep> vo ref : store <identifiersep> refs ) { \n \t8  <identifiersep> snapshot <identifiersep> store <identifiersep> dao . expunge ( ref . get <identifiersep> id ( ) ) ; } \n \t7  <identifiersep> snapshot <identifiersep> dao . expunge ( snapshot <identifiersep> vo . get <identifiersep> id ( ) ) ; \n \t6 } catch ( exception e ) { \n <ect>
\t4 i <identifiersep> block <identifiersep> state old <identifiersep> state = w . get <identifiersep> block <identifiersep> state ( r . pos ) ; \n \t4 nbt <identifiersep> tag <identifiersep> compound nbt = new nbt <identifiersep> tag <identifiersep> compound ( ) ; \n \t4 tile <identifiersep> entity old = w . get <identifiersep> tile <identifiersep> entity ( r . pos ) ; \n \t4 if ( ! ( old instanceof tile <identifiersep> generic <identifiersep> pipe ) ) { \n <ect>
\t4 cp <identifiersep> template <identifiersep> cmd = [ 'cp' , template <identifiersep> sec <identifiersep> path , tgt ] \n \t4 logger . info ( ovm <identifiersep> storage <identifiersep> pool . download <identifiersep> template , <string_literal> . join ( cp <identifiersep> template <identifiersep> cmd ) ) \n \t4 do <identifiersep> cmd ( cp <identifiersep> template <identifiersep> cmd ) \n \t4 template <identifiersep> size = os . path . getsize ( tgt ) \n <ect>
<comment> \n \t1 public boolean is <identifiersep> valid ( final string expected <identifiersep> audience , final string expected <identifiersep> issuer , final long time <identifiersep> drift ) { \n \t2 if ( ! this . get <identifiersep> audience ( ) . equals <identifiersep> ignore <identifiersep> case ( expected <identifiersep> audience ) ) { \n <ect>
\t2 server <identifiersep> http <identifiersep> request request = exchange . get <identifiersep> request ( ) ; \n \t2 http <identifiersep> method method = request . get <identifiersep> method ( ) ; \n \t2 http <identifiersep> headers headers = request . get <identifiersep> headers ( ) ; \n <ect>
\t5 continue ; } \n \t4 <comment> \n \t4 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t5  <identifiersep> log . debug ( <string_literal> , e ) ; \n \t4 notify <identifiersep> stream <identifiersep> result ( verbose , <string_literal> , e . get <identifiersep> message ( ) ) ; \n \t3 } catch ( interrupted <identifiersep> io <identifiersep> exception e ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; \n \t2 } else { \n \t3 eval . set <identifiersep> algorithm ( algos . get ( 0 ) ) ; } \n \t2 stopwatch timer = stopwatch . create <identifiersep> started ( ) ; \n <ect>
public response save <identifiersep> workflow ( string post <identifiersep> body , @ context http <identifiersep> headers headers , \n \t7 @ context uri <identifiersep> info ui , @ query <identifiersep> param ( <string_literal> ) string app <identifiersep> path , \n \t7 @ query <identifiersep> param ( <string_literal> ) string job <identifiersep> type <identifiersep> str , \n \t7 @ default <identifiersep> value ( <string_literal> ) @ query <identifiersep> param ( <string_literal> ) boolean overwrite ) { \n <ect>
\t3 if ( task != null ) { \n \t4 try { \n \t5 task . destroy ( conn ) ; \n \t4 } catch ( exception e1 ) { \n <ect>
\t2 qp . load ( is ) ; \n \t2 start <identifiersep> servers ( ) ; \n \t2 cht . host <identifiersep> port = host <identifiersep> port ; \n \t2 cht . set <identifiersep> up <identifiersep> all ( ) ; \n <ect>
\t2 if ( f == null ) throw new illegal <identifiersep> state <identifiersep> exception ( ) ; \n \t2 f . change <identifiersep> usk <identifiersep> poll <identifiersep> parameters ( time , tries , context ) ; } \n \t1 @ override \n \t1 public void inner <identifiersep> on <identifiersep> resume ( client <identifiersep> context context ) { \n <ect>
\t3 if ( max <identifiersep> nb <identifiersep> channels != null ) { \n \t4 try { \n \t5 i <identifiersep> max <identifiersep> nb <identifiersep> channels = integer . parse <identifiersep> int ( max <identifiersep> nb <identifiersep> channels ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t2 public boolean has <identifiersep> next ( ) { \n \t3 if ( next == null && iter . has <identifiersep> next ( ) ) { \n \t4 next = iter . next ( ) ; \n \t4 if ( to != null && next . get <identifiersep> key ( ) . compare <identifiersep> to ( to ) >= 0 ) { \n <ect>
\t2 if ( in != null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 io <identifiersep> utils . close <identifiersep> quietly ( in ) ; } \n \t2 if ( serial <identifiersep> port != null ) { \n <ect>
\t2 try { \n \t3 bits <identifiersep> field = bloom <identifiersep> filter . class . get <identifiersep> declared <identifiersep> field ( <string_literal> ) ; \n \t3 bits <identifiersep> field . set <identifiersep> accessible ( true ) ; \n \t2 } catch ( security <identifiersep> exception | no <identifiersep> such <identifiersep> field <identifiersep> exception e ) { \n <ect>
\t3 this . consent <identifiersep> policy = new default <identifiersep> registered <identifiersep> service <identifiersep> consent <identifiersep> policy ( ) ; } } \n \t1 @ override \n \t1 public map < string , object > get <identifiersep> consentable <identifiersep> attributes ( final principal p , final service selected <identifiersep> service , final registered <identifiersep> service service ) { \n \t2 if ( this . consent <identifiersep> policy != null && ! this . consent <identifiersep> policy . is <identifiersep> enabled ( ) ) { \n <ect>
\t1 public response produce <identifiersep> book <identifiersep> message ( cdi <identifiersep> injection <identifiersep> book book ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 try { \n \t3 log . info ( <string_literal> + book <identifiersep> queue ) ; \n <ect>
\t3 if ( class <identifiersep> obj == null ) { \n \t4 log . warn ( loader . class , <string_literal> + class <identifiersep> name ) ; \n \t4 return null ; } } \n \t2 if ( required <identifiersep> class != null && ! required <identifiersep> class . is <identifiersep> assignable <identifiersep> from ( class <identifiersep> obj ) ) { \n <ect>
\t2 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 if ( registered <identifiersep> service == null || ! registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed ( ) ) { \n \t3 logger . warn ( <string_literal> , registered <identifiersep> service ) ; \n \t3 return false ; } \n <ect>
\t2 } finally { \n \t3 if ( files . exists ( temp <identifiersep> dir ) ) { \n \t4 boolean success = less <identifiersep> files . delete <identifiersep> dir ( temp <identifiersep> dir . to <identifiersep> file ( ) ) ; \n \t4 if ( ! success ) { \n <ect>
\t3 int rport = map . get ( <string_literal> ) . get <identifiersep> int ( ) ; \n \t3 listener . got <identifiersep> port ( peer , qport , rport ) ; \n \t2 } catch ( exception e ) { \n \t3 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 if ( spool <identifiersep> directory . exists ( ) ) { \n \t4 if ( spool <identifiersep> directory . is <identifiersep> directory ( ) ) { \n \t5 log . debug ( <string_literal> , spool <identifiersep> directory ) ; \n \t4 } else { \n <ect>
\t4 with self .  <identifiersep>  <identifiersep> socket <identifiersep> semaphore : \n \t5 self . socket . sendall ( encoded <identifiersep> frame ) \n \t3 except exception : \n \t4  <identifiersep>  , e ,  <identifiersep>  = sys . exc <identifiersep> info ( ) \n <ect>
\t7 continue ; } \n \t6 final storage <identifiersep> pool pool = ( storage <identifiersep> pool ) data <identifiersep> store <identifiersep> mgr . get <identifiersep> primary <identifiersep> data <identifiersep> store ( vol . get <identifiersep> pool <identifiersep> id ( ) ) ; \n \t6 if ( ! pool . is <identifiersep> in <identifiersep> maintenance ( ) ) { \n <ect>
\t4 index <identifiersep> relation <identifiersep> type = mgmt . get <identifiersep> relation <identifiersep> type ( index <identifiersep> relation <identifiersep> type <identifiersep> name ) ; \n \t4 preconditions . check <identifiersep> argument ( index <identifiersep> relation <identifiersep> type != null , <string_literal> , index <identifiersep> relation <identifiersep> type <identifiersep> name ) ; \n \t4 index = mgmt . get <identifiersep> relation <identifiersep> index ( index <identifiersep> relation <identifiersep> type , index <identifiersep> name ) ; } \n \t3 preconditions . check <identifiersep> argument ( index != null , <string_literal> , index <identifiersep> name , index <identifiersep> relation <identifiersep> type <identifiersep> name ) ; \n <ect>
\t7 channel <identifiersep> listener < object > l = en . get <identifiersep> value ( ) ; \n \t7 if ( l instanceof message <identifiersep> listener ) { \n \t8 ( ( message <identifiersep> listener ) l ) . on <identifiersep> close ( en . get <identifiersep> key ( ) , status , txt ) ; } \n \t6 } catch ( throwable e ) { \n <ect>
\t2 string key <identifiersep> store <identifiersep> password <identifiersep> prop = config . get <identifiersep> property ( zk <identifiersep> config . ssl <identifiersep> keystore <identifiersep> passwd ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 if ( key <identifiersep> store <identifiersep> location <identifiersep> prop == null && key <identifiersep> store <identifiersep> password <identifiersep> prop == null ) { \n <ect>
\t2 if ( security <identifiersep> domain == null ) { \n \t3 return ; } \n \t2 if ( ! security <identifiersep> domain . get <identifiersep> class <identifiersep> level <identifiersep> annotations ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t4 answer answer =  <identifiersep> agent <identifiersep> mgr . easy <identifiersep> send ( neighbor . get <identifiersep> id ( ) , cmd ) ; \n \t4 if ( answer != null ) { \n \t5 return answer . get <identifiersep> result ( ) ? status . down : status . up ; } \n \t3 } catch ( exception e ) { \n <ect>
\t3 vmware <identifiersep> manager mgr = context . get <identifiersep> stock <identifiersep> object ( vmware <identifiersep> manager . context <identifiersep> stock <identifiersep> name ) ; \n \t3 return ( copy <identifiersep> volume <identifiersep> answer ) mgr . get <identifiersep> storage <identifiersep> manager ( ) . execute ( this , cmd ) ; \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t4 handle <identifiersep> request ( client <identifiersep> socket ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 m <identifiersep> cms = get <identifiersep> cms <identifiersep> object ( ) ; \n \t3 list < cms <identifiersep> role > roles = open <identifiersep> cms . get <identifiersep> role <identifiersep> manager ( ) . get <identifiersep> roles ( m <identifiersep> cms , ou , false ) ; \n \t3 init ( roles ) ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 type <identifiersep> serializer = \n \t6 new unloadable <identifiersep> dummy <identifiersep> type <identifiersep> serializer < > ( buffer ) ; \n <ect>
\t2 simulation <identifiersep> node best <identifiersep> node = null ; \n \t2 simulated <identifiersep> player attacker = ( simulated <identifiersep> player ) game . get <identifiersep> player ( attacker <identifiersep> id ) ; \n \t2 uuid defender <identifiersep> id = game . get <identifiersep> opponents ( attacker <identifiersep> id ) . iterator ( ) . next ( ) ; \n <ect>
\t1 } catch ( sql <identifiersep> exception ex ) { \n \t1 try { \n \t2 connection . rollback ( ) ; \n \t1 } catch ( sql <identifiersep> exception ex2 ) { \n <ect>
\t4 <string_literal> ) ; \n \t4 for ( string fqcn : not <identifiersep> renamed ) { \n \t5 log . error ( <string_literal> , fqcn . replace ( ' / ' , ' . ' ) ) ; } \n \t4 for ( string path : os <identifiersep> jar <identifiersep> path ) { \n <ect>
\t3 string base <identifiersep> name = first <identifiersep> non <identifiersep> null ( ( string ) bundle , default <identifiersep> bundle <identifiersep> name ) ; \n \t3 try { \n \t4 return resource <identifiersep> bundle . get <identifiersep> bundle ( base <identifiersep> name , locale ) ; \n \t3 } catch ( missing <identifiersep> resource <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 final principal principal = create <identifiersep> principal ( upc . get <identifiersep> username ( ) , response . get <identifiersep> ldap <identifiersep> entry ( ) ) ; \n \t3 return create <identifiersep> handler <identifiersep> result ( upc , principal , message <identifiersep> list ) ; } \n \t2 if ( authentication <identifiersep> result <identifiersep> code . dn <identifiersep> resolution <identifiersep> failure == response . get <identifiersep> authentication <identifiersep> result <identifiersep> code ( ) ) { \n <ect>
\t4  <identifiersep> found = true ; \n \t4 return true ; \n \t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 file <identifiersep> item fileitem = null ; \n \t2 for ( file <identifiersep> item item : fileuploadlist ) { \n \t3 if ( formfield <identifiersep> name . equals ( item . get <identifiersep> field <identifiersep> name ( ) ) ) { \n \t4 fileitem = item ; \n <ect>
\t1 <comment> \n \t1 public void start ( ) { \n <ect>
\t1 logger . info ( <string_literal> ) \n \t1 self .  <identifiersep> hardware = { \n \t1 'mounts' : self . osdisks ( ) } \n \t1 self .  <identifiersep> hardware . update ( facter ( self . config ) . facter <identifiersep> info ( ) ) \n <ect>
\t4 || driver . get <identifiersep> current <identifiersep> url ( ) . matches ( <string_literal> ) ) ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 navigate <identifiersep> to <identifiersep> uri ( uri , wait <identifiersep> for <identifiersep> match , false ) ; } \n \t2 else { \n <ect>
\t3 log . info ( <string_literal> + rsrc3 ) ; \n \t3 log . info ( <string_literal> + rsrc4 ) ; \n \t3 log . info ( <string_literal> + rsrc5 ) ; \n \t3 log . info ( <string_literal> + rsrc6 ) ; \n <ect>
\t1 if ( result != null && ! result [ i ] ) continue ; \n \t1 is <identifiersep> eliminated = false ; \n \t1 stripe <identifiersep> information si = stripes . get ( i ) ; \n <ect>
\t3 if ( task != null ) { \n \t4 try { \n \t5 task . destroy ( connection ) ; \n \t4 } catch ( final exception e ) { \n <ect>
\t2 try { \n \t3 module <identifiersep> util . shutdown ( ) ; } \n \t2 catch ( exception e ) { \n \t3 log . warn ( <string_literal> , e ) ; } \n <ect>
\t2 <comment> \n \t2 headers . put ( <string_literal> , the <identifiersep> test <identifiersep> file ) ; \n \t2 file result = request <identifiersep> body <identifiersep> and <identifiersep> headers ( <string_literal> , null , headers ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t3 success = success && build <identifiersep> ip <identifiersep> vm <identifiersep> map ( ) ; \n \t3 if ( success ) { \n \t4 setup <identifiersep> jetty ( vm <identifiersep> data <identifiersep> port , fileserving <identifiersep> port ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 s <identifiersep> logger . info ( <string_literal> ) ; \n \t2 return true ; } \n \t1 @ override \n \t1 public boolean stop ( ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> , profile <identifiersep> directory <identifiersep> path ) ; \n \t2 try { \n \t3 <comment> \n <ect>
\t6 pstmt . execute <identifiersep> update ( ) ; } } \n \t4 rs2 . close ( ) ; } \n \t3 rs . close ( ) ; \n \t3 pstmt . close ( ) ; \n <ect>
\t4 if ( executable <identifiersep> output <identifiersep> po . get <identifiersep> status ( ) . equals <identifiersep> ignore <identifiersep> case ( executable <identifiersep> state . running . to <identifiersep> string ( ) ) ) { \n \t5 executable <identifiersep> output <identifiersep> po . set <identifiersep> status ( executable <identifiersep> state . ready . to <identifiersep> string ( ) ) ; \n \t5 executable <identifiersep> dao . update <identifiersep> job <identifiersep> output ( executable <identifiersep> output <identifiersep> po ) ; } } \n \t2 } catch ( persistent <identifiersep> exception e ) { \n <ect>
\t2 } catch ( instantiation <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 throw new runtime <identifiersep> exception ( <string_literal> + clz . get <identifiersep> name ( ) + <string_literal> ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t1 protected collection < x509crl > get <identifiersep> cr <identifiersep> ls ( final x509certificate cert ) { \n \t2 final x500principal principal = cert . get <identifiersep> issuer <identifiersep> x500principal ( ) ; \n \t2 if ( this . crl <identifiersep> issuer <identifiersep> map . contains <identifiersep> key ( principal ) ) { \n \t3 return collection <identifiersep> utils . wrap ( this . crl <identifiersep> issuer <identifiersep> map . get ( principal ) ) ; } \n <ect>
\t1 if ( data != null ) { \n \t1 zk <identifiersep> node <identifiersep> props props = zk <identifiersep> node <identifiersep> props . load ( data ) ; \n \t1 config <identifiersep> name = props . get <identifiersep> str ( zk <identifiersep> controller . configname <identifiersep> prop ) ; } \n \t1 if ( config <identifiersep> name != null && ! zk <identifiersep> client . exists ( zk <identifiersep> controller . configs <identifiersep> zknode + <string_literal> + config <identifiersep> name , true ) ) { \n <ect>
\t3 logger . debug ( <string_literal> , message ) ; } \n \t2 try { \n \t3 time = get <identifiersep> date <identifiersep> from <identifiersep> text ( time <identifiersep> id <identifiersep> reg <identifiersep> exp , message ) ; \n \t2 } catch ( lightwave <identifiersep> rf <identifiersep> message <identifiersep> exception le ) { \n <ect>
\t4 dir = props . get <identifiersep> property ( <string_literal> ) ; \n \t4 if ( dir == null ) { \n \t5 dir = pid <identifiersep> dir == null ? <string_literal> : pid <identifiersep> dir ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 msg <identifiersep> builder . build <identifiersep> request <identifiersep> level <identifiersep> message ( msg <identifiersep> buffer , device ) ; \n \t2 enqueue <identifiersep> command ( msg <identifiersep> buffer ) ; } \n \t1 private void enqueue <identifiersep> command ( byte [ ] msg <identifiersep> buffer ) { \n \t2 if ( ! transport . is <identifiersep> started ( ) ) { \n <ect>
\t4 logs . messages . trace ( <string_literal> + delivered + <string_literal> + new unique <identifiersep> id ( msg . get <identifiersep> unique <identifiersep> id ( ) ) ) ; } \n \t2 } catch ( exception x ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t4 logger . debug ( <string_literal> + source <identifiersep> name ) ; \n \t4 if ( source <identifiersep> id . trim ( ) . length ( ) > 0 ) \n \t5 source <identifiersep> list . add ( new data <identifiersep> source ( source <identifiersep> id , source <identifiersep> name ) ) ; \n \t4 else \n <ect>
\t3 smack <identifiersep> configuration . set <identifiersep> packet <identifiersep> reply <identifiersep> timeout ( <number_literal> ) ; \n \t3 new <identifiersep> parent . add <identifiersep> contact ( contact ) ; } \n \t2 catch ( xmpp <identifiersep> exception ex ) \n \t2 { \n <ect>
\t2 if ( magic != graph <identifiersep> magic ) { \n \t3 log . warn ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( count < 0 ) { \n <ect>
\t4 log . info ( <string_literal> , path ) ; \n \t4 @ syntax ( <string_literal> ) string content = new string ( files . read <identifiersep> all <identifiersep> bytes ( path ) ) ; \n \t4 manager = configs . decode <identifiersep> object ( authentication <identifiersep> manager <identifiersep> static . class , content ) ; } \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 <comment> \n \t3 this . watchlist . get <identifiersep> notifier ( ) . send <identifiersep> notification ( subscribers , events , notification <identifiersep> data ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t3 assert <identifiersep> that ( e . get <identifiersep> message ( ) , starts <identifiersep> with ( <string_literal> + active <identifiersep> shard <identifiersep> count . all + <string_literal> ) ) ; \n \t3 <comment> \n \t2 allow <identifiersep> nodes ( <string_literal> , <number_literal> ) ; \n \t2 cluster <identifiersep> health = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> wait <identifiersep> for <identifiersep> active <identifiersep> shards ( <number_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> green <identifiersep> status ( ) . execute ( ) . action <identifiersep> get ( ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void delete ( decorated <identifiersep> key key , op <identifiersep> order . group op <identifiersep> group ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 list . add ( new properties <identifiersep> settings ( <string_literal> ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 object parent <identifiersep> method <identifiersep> schema , \n \t7 parameter <identifiersep> schema parameter <identifiersep> schema ) \n { \n \t1  <identifiersep> logger . info ( <string_literal> + parameter <identifiersep> schema . get <identifiersep> name ( ) ) ; \n <ect>
\t2 return ping <identifiersep> management <identifiersep> node ( mshost ) ; } \n \t1 private boolean ping <identifiersep> management <identifiersep> node ( management <identifiersep> server <identifiersep> host <identifiersep> vo mshost ) { \n \t2 string target <identifiersep> ip = mshost . get <identifiersep> service <identifiersep> ip ( ) ; \n \t2 if ( <string_literal> . equals ( target <identifiersep> ip ) || <string_literal> . equals ( target <identifiersep> ip ) ) { \n <ect>
\t2 producers <identifiersep> finished . acquire ( ) ; \n \t2 long end1 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 consumers <identifiersep> finished . acquire ( ) ; \n \t2 long end2 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t4 log . debug ( <string_literal> + init <identifiersep> conn + <string_literal> + servers [ i ] ) ; \n \t3 for ( int j = 0 ; j < init <identifiersep> conn ; j ++ ) { \n \t4 sock <identifiersep> io socket = create <identifiersep> socket ( servers [ i ] ) ; \n \t4 if ( socket == null ) { \n <ect>
\t1 if ( null != this . mysql <identifiersep> import <identifiersep> process ) { \n \t1 <comment> \n \t1 log . info ( <string_literal> ) ; \n \t1 ret = this . mysql <identifiersep> import <identifiersep> process . wait <identifiersep> for ( ) ; \n <ect>
\t3 return false ; } \n \t2 string [ ] domain <identifiersep> name <identifiersep> labels = domain <identifiersep> name . split ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < domain <identifiersep> name <identifiersep> labels . length ; i ++ ) { \n \t3 if ( ! verify <identifiersep> domain <identifiersep> name <identifiersep> label ( domain <identifiersep> name <identifiersep> labels [ i ] , false ) ) { \n <ect>
\t3 public boolean accept ( file dir , string name ) { \n \t4 return name . starts <identifiersep> with ( index <identifiersep> name + export <identifiersep> sep ) && name . ends <identifiersep> with ( <string_literal> ) ; } \n \t2 } ) ; \n \t2 if ( files == null || files . length == 0 ) { \n <ect>
\t8 done = false ; \n \t8 retry <identifiersep> counter = - 1 ; \n \t8 log . trace ( <string_literal> , polled <identifiersep> messages ) ; } \n \t6 } else { \n <ect>
\t2 return new input <identifiersep> stream <identifiersep> reader ( bis , encoding ) ; } \n \t1 public static string get <identifiersep> string ( file file , string encoding ) throws io <identifiersep> exception { \n \t2 string <identifiersep> writer sw = new string <identifiersep> writer ( ) ; \n \t2 file <identifiersep> input <identifiersep> stream fis = new file <identifiersep> input <identifiersep> stream ( file ) ; \n <ect>
\t5 packet . set <identifiersep> length ( b . length ) ; } \n \t3 } catch ( runtime <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 prepare <identifiersep> response ( saml <identifiersep> response , model ) ; \n \t3 logger . debug ( <string_literal> , service <identifiersep> id ) ; \n \t3 this . saml <identifiersep> object <identifiersep> builder . encode <identifiersep> saml <identifiersep> response ( response , request , saml <identifiersep> response ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t3 send <identifiersep> queue . notify <identifiersep> all ( ) ; \n \t3 send <identifiersep> queue <identifiersep> size . decrement <identifiersep> and <identifiersep> get ( ) ; } \n \t2 sent = true ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 try { \n \t3 file <identifiersep> object file <identifiersep> object = outputter . prepare <identifiersep> source <identifiersep> file ( type , meta <identifiersep> <number_literal> ) ; \n \t3 writer = new buffered <identifiersep> writer ( file <identifiersep> object . open <identifiersep> writer ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 connection ( ) . exec ( <string_literal> ) ; \n \t2 } catch ( sql <identifiersep> exception ex ) \n \t2 { \n <ect>
import org . apache . log4j . logger ; \n public class main { \n \t1 private static final logger logger = logger . get <identifiersep> logger ( main . class ) ; \n \t1 public static void main ( string args [ ] ) { \n <ect>
\t2 if ( new <identifiersep> ss <identifiersep> tables . is <identifiersep> empty ( ) ) \n \t2 { \n \t3 logger . info ( <string_literal> , keyspace . get <identifiersep> name ( ) , name ) ; \n \t3 return ; } \n <ect>
\t4 this . channel . rename ( path <identifiersep> from , path <identifiersep> to ) ; } \n \t3 catch ( sftp <identifiersep> exception sftpex2 ) { \n \t4 throw new nested <identifiersep> io <identifiersep> exception ( <string_literal> + path <identifiersep> from + <string_literal> + path <identifiersep> to , sftpex2 ) ; } } \n <ect>
\t1 @ override \n \t1 final protected void setup ( mapper < keyin , valuein , keyout , valueout > . context context ) \n \t3 throws io <identifiersep> exception , interrupted <identifiersep> exception { \n \t2 try { \n <ect>
\t2 throw new invalid <identifiersep> command <identifiersep> exception ( error , cmd ) ; } } \n \t1 logger . debug ( <string_literal> + ranges ) ; \n \t1 logger . debug ( <string_literal> + command ) ; \n <ect>
\t5 return cache <identifiersep> update <identifiersep> handler . update <identifiersep> parent <identifiersep> cache <identifiersep> entry ( request . get <identifiersep> request <identifiersep> uri ( ) , existing , entry , variant <identifiersep> key , variant <identifiersep> cache <identifiersep> key ) ; } \n \t3 } ) ; \n \t2 } catch ( final http <identifiersep> cache <identifiersep> update <identifiersep> exception ex ) { \n <ect>
\t3 logger . debug ( <string_literal> + name + <string_literal> + value ) ; } \n \t2 this . attributes . put ( name , value ) ; } \n \t1 public void remove <identifiersep> attribute ( object name ) { \n <ect>
\t1 if ( v . is <identifiersep> last <identifiersep> stripe <identifiersep> in <identifiersep> file ( ) ) { \n \t2 out <identifiersep> writer . append <identifiersep> user <identifiersep> metadata ( v . get <identifiersep> user <identifiersep> metadata ( ) ) ; } \n \t1 } catch ( throwable e ) { \n \t1 exception = true ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 return new default <identifiersep> partition <identifiersep> expression <identifiersep> proxy ( ) ; } \n <ect>
\t3 file dir = new file ( data <identifiersep> dir ) ; \n \t3 <comment> \n \t3 if ( ! dir . exists ( ) ) \n \t3 { \n <ect>
\t2 string <identifiersep> writer sw = new string <identifiersep> writer ( ) ; \n \t2 try { \n \t3 write <identifiersep> to ( sw ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , duo <identifiersep> verify <identifiersep> response ) ; \n \t3 final string primary <identifiersep> credentials <identifiersep> username = duo <identifiersep> credential . get <identifiersep> username ( ) ; \n \t3 final boolean is <identifiersep> good <identifiersep> authentication = duo <identifiersep> verify <identifiersep> response . equals ( primary <identifiersep> credentials <identifiersep> username ) ; \n \t3 if ( is <identifiersep> good <identifiersep> authentication ) { \n <ect>
\t6 new processor ( ) { \n \t7 @ override \n \t7 public void process ( exchange exchange ) throws exception { \n \t8 if ( exchange . get <identifiersep> in ( ) . get <identifiersep> header ( <string_literal> , boolean . class ) ) { \n <ect>
\t1 string filter = osgi <identifiersep> utils . create <identifiersep> filter ( properties ) ; \n \t1 try { \n \t1 collection < service <identifiersep> reference < t > > refs = context . get <identifiersep> service <identifiersep> references ( interface <identifiersep> class , filter ) ; \n \t1 if ( refs == null || refs . size ( ) == 0 ) { \n <ect>
\t1 @ override \n \t1 public void handle <identifiersep> upload <identifiersep> sync ( long sserver <identifiersep> id ) { \n \t2 host <identifiersep> vo storage <identifiersep> host =  <identifiersep> server <identifiersep> dao . find <identifiersep> by <identifiersep> id ( sserver <identifiersep> id ) ; \n \t2 if ( storage <identifiersep> host == null ) { \n <ect>
\t1 <comment> \n \t1 synchronized ( cache <identifiersep> entry ) { \n \t2 cache <identifiersep> entry . notify <identifiersep> all ( ) ; } \n \t1 } catch ( exception err ) { \n <ect>
\t3 system . err . println ( <string_literal> + config <identifiersep> definition ) ; \n \t3 throw new runtime <identifiersep> exception ( ce ) ; } \n \t2 <comment> \n \t2 set <identifiersep> dynamic <identifiersep> properties ( ) ; \n <ect>
\t3 item <identifiersep> service . update ( context , item4 ) ; \n \t3 <comment> \n \t3 context . restore <identifiersep> auth <identifiersep> system <identifiersep> state ( ) ; \n \t2 } catch ( authorize <identifiersep> exception ex ) { \n <ect>
\t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 thread . current <identifiersep> thread ( ) . interrupt ( ) ; \n \t2 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t3 uninterruptibles . join <identifiersep> uninterruptibly ( thread ) ; } } \n \t1 private void close <identifiersep> source <identifiersep> if <identifiersep> needed ( ) { \n \t2 if ( ! has <identifiersep> closed <identifiersep> streams ) { \n \t3 has <identifiersep> closed <identifiersep> streams = true ; \n <ect>
\t2 log . info ( <string_literal> , container <identifiersep> name ) ; \n \t2 properties props = get <identifiersep> azure <identifiersep> config ( ) ; \n \t2 cloud <identifiersep> blob <identifiersep> container container = utils . get <identifiersep> blob <identifiersep> container ( utils . get <identifiersep> connection <identifiersep> string <identifiersep> from <identifiersep> properties ( props ) , container <identifiersep> name ) ; \n \t2 boolean result = container . delete <identifiersep> if <identifiersep> exists ( ) ; \n <ect>
\t1 return ( accumulo <identifiersep> row <identifiersep> id <identifiersep> factory ) reflection <identifiersep> utils . new <identifiersep> instance ( factory <identifiersep> clazz , job ) ; } \n \t1 <comment> \n \t1 string key <identifiersep> class <identifiersep> name = tbl . get <identifiersep> property ( composite <identifiersep> rowid <identifiersep> class ) ; \n \t1 if ( key <identifiersep> class <identifiersep> name != null ) { \n <ect>
\t2 if ( boot <identifiersep> args != null && boot <identifiersep> args . length ( ) > 0 ) { \n \t3 string pvargs = vm . get <identifiersep> pv <identifiersep> args ( conn ) ; \n \t3 pvargs = pvargs + vm <identifiersep> spec . get <identifiersep> boot <identifiersep> args ( ) . replace <identifiersep> all ( <string_literal> , <string_literal> ) ; \n <ect>
\t3 set < vm > vms = vm . get <identifiersep> by <identifiersep> name <identifiersep> label ( conn , cmd . get <identifiersep> vm <identifiersep> name ( ) ) ; \n \t3 for ( vm vm : vms ) { \n \t4 synchronized (  <identifiersep> cluster . intern ( ) ) { \n \t5 s <identifiersep> vms . remove (  <identifiersep> cluster ,  <identifiersep> name , vm . get <identifiersep> name <identifiersep> label ( conn ) ) ; } \n <ect>
\t1 log . warn ( <string_literal> , \n \t2 attempts , retry <identifiersep> attempts <identifiersep> limit , operations <identifiersep> retry <identifiersep> attempts . get <identifiersep> default <identifiersep> value ( ) ) ; \n \t1 attempts = operations <identifiersep> retry <identifiersep> attempts . get <identifiersep> default <identifiersep> value ( ) ; \n \t1 } else if ( attempts > retry <identifiersep> attempts <identifiersep> limit ) { \n <ect>
\t4 current . put ( marker <identifiersep> name , pid <identifiersep> string ) ; \n \t4 if ( config . get <identifiersep> bundle <identifiersep> location ( ) != null ) { \n \t5 config . set <identifiersep> bundle <identifiersep> location ( null ) ; } \n \t4 if ( old == null ) { \n <ect>
\t3 { \n \t4 desktop <identifiersep> interact = new desktop <identifiersep> interact <identifiersep> impl ( ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t3 <comment> \n \t3 cfg <identifiersep> stream . read ( ) ; \n \t3 return true ; } \n \t2 catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( num <identifiersep> err <identifiersep> log <identifiersep> lines ++ < max <identifiersep> err <identifiersep> log <identifiersep> lines <identifiersep> for <identifiersep> rpc ) { \n \t3 err <identifiersep> logs . add ( line ) ; } } } \n \t1 } catch ( io <identifiersep> exception e ) { \n \t1 if ( callback . is <identifiersep> alive ( ) ) { \n <ect>
\t2 if ( euca <identifiersep> volumes . size ( ) != 0 ) { \n \t2 ec2client . get <identifiersep> instance ( ) . delete <identifiersep> volume ( this . get <identifiersep> owner <identifiersep> user <identifiersep> id ( ) , volume <identifiersep> id ) ; } \n \t2 set <identifiersep> clean <identifiersep> up <identifiersep> done ( true ) ; \n \t1 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n <ect>
\t4 zk <identifiersep> client . create ( ) . creating <identifiersep> parents <identifiersep> if <identifiersep> needed ( ) . for <identifiersep> path ( up <identifiersep> path , null ) ; } \n \t2 } catch ( keeper <identifiersep> exception . node <identifiersep> exists <identifiersep> exception e ) { \n \t3 <comment> \n \t2 } catch ( exception e ) { \n <ect>
\t1 @ managed <identifiersep> operation ( description = <string_literal> ) \n \t1 public boolean start <identifiersep> node <identifiersep> crash <identifiersep> monitor ( ) { \n \t2 if ( members . size ( ) > 1 ) { \n \t3 if ( start <identifiersep> pinger <identifiersep> thread ( ) ) { \n <ect>
\t3 throw new illegal <identifiersep> argument <identifiersep> exception ( ) ; \n \t2 try { \n \t3 port = integer . parse <identifiersep> int ( port <identifiersep> str ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t4 reporter . start ( ) ; \n \t4 reporters . add ( reporter ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception | instantiation <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception \n \t5 | invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t3 log . error ( <string_literal> + schema <identifiersep> class + <string_literal> , cnfe ) ; \n \t3 throw new runtime <identifiersep> exception ( cnfe ) ; \n \t2 } catch ( instantiation <identifiersep> exception ie ) { \n \t3 system . err . printf ( <string_literal> ) ; \n <ect>
\t1 @ post \n \t1 @ path ( <string_literal> ) \n \t1 public response test3 ( ) { \n \t2 int current <identifiersep> secret3 = oo3 . get <identifiersep> secret ( ) ; \n <ect>
\t4 list < domain <identifiersep> definition > e = get <identifiersep> domains0 ( ) ; \n \t4 domains = sort ( filter <identifiersep> exclude <identifiersep> include ( e ) ) ; \n \t4 log . info ( <string_literal> , fetched <identifiersep> size ( e , domains ) ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t3 delete <identifiersep> recursive <identifiersep> if <identifiersep> exists ( dest <identifiersep> dir ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> + dest <identifiersep> dir , e ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 final flow <identifiersep> result result = engine . execute ( function <identifiersep> context , start <identifiersep> node ) ; \n \t4 <comment> \n \t4 context . set <identifiersep> data ( result . get <identifiersep> result ( ) ) ; \n \t3 } else { \n <ect>
\t1 } else { \n \t2 log . debug ( <string_literal> ) ; \n \t2 return false ; } \n \t1 } catch ( exception ex ) { \n <ect>
\t2 public boolean enable <identifiersep> response <identifiersep> buffering ( ) { \n \t3 return true ; } \n \t2 @ override \n \t2 public void failure ( throwable e ) { \n <ect>
\t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + startup . get <identifiersep> private <identifiersep> ip <identifiersep> address ( ) + <string_literal> + data <identifiersep> center ) ; } \n \t2 dc <identifiersep> id = dc . get <identifiersep> id ( ) ; \n \t2 hypervisor <identifiersep> type hypervisor <identifiersep> type = startup . get <identifiersep> hypervisor <identifiersep> type ( ) ; \n <ect>
\t3 if ( firewall <identifiersep> rules <identifiersep> egress . is <identifiersep> empty ( ) ) { \n \t4 <comment> \n \t4 create <identifiersep> default <identifiersep> egress <identifiersep> firewall <identifiersep> rule ( firewall <identifiersep> rules <identifiersep> egress , guest <identifiersep> network <identifiersep> id ) ; } } \n \t2 <comment> \n <ect>
\t5 try { \n \t6 if ( ! cleanup ( task ) ) { \n \t7 retries . add ( task ) ; } \n \t5 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 thread . sleep ( <number_literal> ) ; \n \t3 } catch ( exception e ) { \n \t4 log . info ( <string_literal> ) ; } } \n <ect>
\t1 private void set <identifiersep> collection <identifiersep> field ( field f , object object , node node , string item <identifiersep> element <identifiersep> name , string item <identifiersep> class ) \n \t2 throws illegal <identifiersep> argument <identifiersep> exception , illegal <identifiersep> access <identifiersep> exception { \n \t2 object field <identifiersep> object = f . get ( object ) ; \n \t2 if ( field <identifiersep> object == null ) { \n <ect>
\t3 if ( jms <identifiersep> correlation <identifiersep> id instanceof string ) { \n \t4 try { \n \t5 jms <identifiersep> message . set <identifiersep> jms <identifiersep> correlation <identifiersep> id ( ( string ) jms <identifiersep> correlation <identifiersep> id ) ; } \n \t4 catch ( exception ex ) { \n <ect>
\t6 service <identifiersep> record . set ( joy <identifiersep> constants . nimbus <identifiersep> container , allocated <identifiersep> container . get <identifiersep> id ( ) . to <identifiersep> string ( ) ) ; \n \t6 registry <identifiersep> operations . bind ( path , service <identifiersep> record , bind <identifiersep> flags . overwrite ) ; \n \t5 } catch ( exception ex ) { \n \t6 log . error ( ex ) ; } \n <ect>
\t5 { \n \t6 match <identifiersep> result range = token <identifiersep> scanner . match ( ) ; \n \t6 token start <identifiersep> token = factory . from <identifiersep> string ( range . group ( 1 ) ) ; \n \t6 token end <identifiersep> token = factory . from <identifiersep> string ( range . group ( <number_literal> ) ) ; \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + public <identifiersep> nework <identifiersep> name + <string_literal> + public <identifiersep> nic <identifiersep> info . first ( ) ) ; } \n \t4 boolean add <identifiersep> vif = false ; \n \t4 if ( ip . is <identifiersep> add ( ) && public <identifiersep> nic <identifiersep> info . first ( ) . int <identifiersep> value ( ) == - 1 ) { \n <ect>
\t5 return file . is <identifiersep> file ( ) && file . get <identifiersep> name ( ) . to <identifiersep> lower <identifiersep> case ( ) . ends <identifiersep> with ( <string_literal> ) ; } } \n \t2 ) ; \n \t2 int n <identifiersep> jars = ( jar <identifiersep> files == null ) ? 0 : jar <identifiersep> files . length ; \n \t2 if ( n <identifiersep> jars == 0 ) { \n <ect>
\t4 } else if ( job <identifiersep> key . get <identifiersep> job <identifiersep> uuid ( ) == null ) { \n \t5 log . warn ( <string_literal> , job <identifiersep> key ) ; \n \t5 continue ; \n \t4 } else if ( job <identifiersep> key . get <identifiersep> node <identifiersep> number ( ) == null ) { \n <ect>
\t3 log . warn ( <string_literal> ) ; \n \t3 return null ; } \n \t2 object result = localized <identifiersep> value <identifiersep> for <identifiersep> key ( key ) ; \n \t2 if ( result == null || not <identifiersep> found . equals ( result ) ) { \n <ect>
\t3 system . err . println ( <string_literal> + bucket + <string_literal> + e ) ; \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t3 loaded . set <identifiersep> something <identifiersep> failed ( ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> active <identifiersep> primary <identifiersep> shards ( ) , equal <identifiersep> to ( num <identifiersep> shards . num <identifiersep> primaries ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> number <identifiersep> of <identifiersep> replicas ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 <comment> \n \t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> active <identifiersep> shards ( ) , equal <identifiersep> to ( num <identifiersep> shards . num <identifiersep> primaries * <number_literal> ) ) ; \n <ect>
<comment> \n \t1 protected model <identifiersep> and <identifiersep> view handle <identifiersep> type <identifiersep> mismatch ( type <identifiersep> mismatch <identifiersep> exception ex , \n \t3 http <identifiersep> servlet <identifiersep> request request , http <identifiersep> servlet <identifiersep> response response , @ nullable object handler ) throws io <identifiersep> exception { \n <ect>
\t2 logger . error ( e , <string_literal> ) ; \n \t2 throw new servlet <identifiersep> exception ( e ) ; } } \n private void add <identifiersep> resources <identifiersep> to <identifiersep> request ( http <identifiersep> servlet <identifiersep> request request ) { \n \t1 stopwatch watch = new stopwatch ( ) . start ( ) ; \n <ect>
\t4  <identifiersep> last <identifiersep> write =  <identifiersep> file . last <identifiersep> modified ( ) ; \n \t4  <identifiersep> size = rv . size ( ) ; } \n \t3 return rv ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 total <identifiersep> blocks += num ; \n \t3 was <identifiersep> finalized = block <identifiersep> set <identifiersep> finalized ; } \n \t2 if ( was <identifiersep> finalized ) { \n \t3 if ( log <identifiersep> level . minor . matches <identifiersep> threshold ( logger . global <identifiersep> get <identifiersep> threshold <identifiersep> new ( ) ) ) \n <ect>
<number_literal> vpcid = self . vpc . id \n <number_literal> ) \n \t2 return nat <identifiersep> rule \n \t1 def acquire <identifiersep> publicip ( self , network ) : \n <ect>
\t2 try { \n \t3 final file <identifiersep> output <identifiersep> stream out = new file <identifiersep> output <identifiersep> stream ( output ) ; \n \t3 boolean is <identifiersep> first <identifiersep> file = true ; \n \t3 for ( final file f : vcfs ) { \n <ect>
\t3 else if ( items . size ( ) > 1 ) \n \t4 throw new inconsistent <identifiersep> data <identifiersep> exception ( <string_literal> + key \n <number_literal> + <string_literal> + items , items ) ; \n \t3 if ( versioned != null ) \n <ect>
\t2 { \n \t3 string ck <identifiersep> value = integer . to <identifiersep> string ( ck ) + long <identifiersep> string ; \n \t3 for ( int pk = 0 ; pk < <number_literal> ; pk ++ ) \n \t3 { \n <ect>
\t4 + old <identifiersep> mc <identifiersep> node ) ; \n \t3 return ; } \n \t2 if ( new <identifiersep> mc <identifiersep> node == null ) \n \t2 { \n <ect>
\t3 <comment> \n \t2 log . debug ( <string_literal> ) ; \n \t2 db <identifiersep> conn . commit ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 if ( ! ip <identifiersep> range <identifiersep> config . valid <identifiersep> ip ( start <identifiersep> ip ) ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + start <identifiersep> ip + <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( ! ip <identifiersep> range <identifiersep> config . valid <identifiersep> or <identifiersep> blank <identifiersep> ip ( end <identifiersep> ip ) ) { \n <ect>
\t4 fire <identifiersep> interceptor <identifiersep> event ( new coordination <identifiersep> event ( coordination <identifiersep> event . evt <identifiersep> mbr <identifiersep> del , this , <string_literal> + member . get <identifiersep> name ( ) + <string_literal> ) ) ; \n \t4 if ( started && ( is <identifiersep> coordinator ( ) || is <identifiersep> highest ( ) ) ) \n \t5 start <identifiersep> election ( true ) ; <comment> \n \t3 } catch ( channel <identifiersep> exception x ) { \n <ect>
\t3 if ( strings . is <identifiersep> null <identifiersep> or <identifiersep> blank ( address ) ) { \n \t4 log . warn ( <string_literal> + namespace + <string_literal> + kubernetes . get <identifiersep> master <identifiersep> url ( ) ) ; \n \t4 return null ; } \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t2 } else { \n \t4 logger . trace ( <string_literal> , task . source , new <identifiersep> cluster <identifiersep> state ) ; \n <ect>
\t2 url <identifiersep> codec codec = new url <identifiersep> codec ( ) ; \n \t2 try { \n \t3 return codec . decode ( str ) ; } \n \t2 catch ( decoder <identifiersep> exception ee ) { \n <ect>
\t3 message . set <identifiersep> int <identifiersep> property ( <string_literal> , ++ message <identifiersep> rover ) ; \n \t3 message . set <identifiersep> boolean <identifiersep> property ( <string_literal> , true ) ; \n \t3 prod . send ( topic , message ) ; \n \t3 msg <identifiersep> count ++ ; \n <ect>
\t2 try { \n \t2 log . trace ( <string_literal> + pool <identifiersep> name ) ; \n \t2 return arrays . as <identifiersep> list ( arg0 . get <identifiersep> rbd ( ) . list ( ) ) ; \n \t2 } catch ( rbd <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 return ; } \n \t4 try { \n \t5 runnable . run ( ) ; } \n \t4 catch ( exception ex ) { \n <ect>
\t5 s <identifiersep> logger . error ( <string_literal> + s <identifiersep> account . get ( ) + <string_literal> + bytes <identifiersep> received + <string_literal> + \n \t6 <string_literal> + bytes <identifiersep> sent + <string_literal> ) ; \n \t5 return false ; } \n \t3 } else { \n <ect>
\t2 remove ( obj . get <identifiersep> key ( ) ) ; \n \t2 excess -- ; \n \t2 obj = sorted <identifiersep> max <identifiersep> entries . poll ( ) ; } } \n \t1 } catch ( exception e ) { \n <ect>
\t2 array <identifiersep> list < string > line ; \n \t2 string <identifiersep> buffer buffer ; \n \t2 string csv <identifiersep> line <identifiersep> element ; \n \t2 try { \n <ect>
\t1 assert ! lock <identifiersep> manager ( 1 ) . is <identifiersep> locked ( k0 ) ; \n \t1 assert ! lock <identifiersep> manager ( 1 , <string_literal> ) . is <identifiersep> locked ( k0 ) ; \n \t1 transaction transaction = tm ( 1 ) . suspend ( ) ; \n \t1 tm ( 0 ) . begin ( ) ; \n <ect>
\t2 awt <identifiersep> key <identifiersep> stroke ks = awt <identifiersep> key <identifiersep> stroke . get <identifiersep> awt <identifiersep> key <identifiersep> stroke ( <string_literal> ) ; \n \t2 awt <identifiersep> key <identifiersep> stroke ks2 = awt <identifiersep> key <identifiersep> stroke . get <identifiersep> awt <identifiersep> key <identifiersep> stroke ( <string_literal> ) ; \n \t2 if ( ks == null ) \n \t2 { \n <ect>
\t2 logger . error ( ovm <identifiersep> dispatch , <string_literal> % ( clz <identifiersep> name , func <identifiersep> name ) ) \n \t2 raise fault ( dispatch <identifiersep> err <identifiersep> code ( 'invaild <identifiersep> function' ) , <string_literal> % ( clz <identifiersep> name , func <identifiersep> name ) ) \n \t1 logger . debug ( ovm <identifiersep> dispatch , <string_literal> % ( clz <identifiersep> name , func <identifiersep> name ) ) \n \t1 rs = getattr ( clz , func <identifiersep> name ) ( * params ) \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 return ; } \n \t2 final refresh <identifiersep> token <identifiersep> request request = new refresh <identifiersep> token <identifiersep> request ( this . get <identifiersep> client <identifiersep> id ( ) , this . get <identifiersep> client <identifiersep> secret ( ) , \n \t4 this . get <identifiersep> refresh <identifiersep> token ( ) , this . get <identifiersep> weather ( ) , this . get <identifiersep> camera ( ) ) ; \n <ect>
\t5 byte cmd1 = ( byte ) ( ( cmd == on <identifiersep> off <identifiersep> type . on ) ? 0x11 : 0x13 ) ; \n \t5 byte value = ( byte ) ( ( cmd == on <identifiersep> off <identifiersep> type . on ) ? 0x <identifiersep> ff : 0x00 ) ; \n \t5 int group = s <identifiersep> get <identifiersep> group ( conf ) ; \n \t5 if ( group == - 1 ) { \n <ect>
\t1 checkpoint <identifiersep> rebuilder rebuilder = new checkpoint <identifiersep> rebuilder ( log <identifiersep> files , queue , true ) ; \n \t1 if ( rebuilder . rebuild ( ) ) { \n \t2 rebuilder . write <identifiersep> checkpoint ( ) ; \n \t1 } else { \n <ect>
\t1 } catch ( throwable e ) { \n \t1 try { \n \t2 stop ( ) ; \n \t1 } catch ( interrupted <identifiersep> exception e2 ) { \n <ect>
\t4 snap . set <identifiersep> progress ( string . value <identifiersep> of ( progress ) ) ; \n \t4 } else { \n \t4 <comment> \n \t3 } catch ( transaction <identifiersep> exception | no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 else if ( batch <identifiersep> sql . length > 0 ) { \n \t4 if ( batch <identifiersep> sql [ batch <identifiersep> sql . length - 1 ] != null ) \n \t5 for ( string sql : batch <identifiersep> sql ) \n <ect>
\t3 final abstract <identifiersep> resource resource <identifiersep> from = resource <identifiersep> utils . get <identifiersep> resource <identifiersep> from ( script <identifiersep> file ) ; \n \t3 final string script = io <identifiersep> utils . to <identifiersep> string ( resource <identifiersep> from . get <identifiersep> input <identifiersep> stream ( ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ; \n \t3 final object result = get <identifiersep> groovy <identifiersep> attribute <identifiersep> value ( principal , script ) ; \n \t3 if ( result != null ) { \n <ect>
\t2 if ( rollback ) { \n \t3 failed <identifiersep> fetch <identifiersep> strategy <identifiersep> list . add ( \n \t5 new delete <identifiersep> all <identifiersep> failed <identifiersep> fetch <identifiersep> strategy ( admin <identifiersep> client <identifiersep> per <identifiersep> cluster . get ( url ) ) ) ; } \n \t2 cluster cluster = admin <identifiersep> client <identifiersep> per <identifiersep> cluster . get ( url ) . get <identifiersep> admin <identifiersep> client <identifiersep> cluster ( ) ; \n <ect>
public boolean can ( object <identifiersep> storage <identifiersep> properties . permission permission , string canonical <identifiersep> id ) { \n \t1 try { \n \t1 map < string , integer > my <identifiersep> acl = get <identifiersep> decoded <identifiersep> acl ( ) ; \n \t1 if ( my <identifiersep> acl == null ) { \n <ect>
\t5 cpu <identifiersep> util , rx <identifiersep> bytes , tx <identifiersep> bytes , <string_literal> , total <identifiersep> memory , free <identifiersep> memory , \n \t5 0 , 0 ) ; \n \t3 return new get <identifiersep> host <identifiersep> stats <identifiersep> answer ( cmd , host <identifiersep> stats ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 get <identifiersep> sink ( ) . after <identifiersep> fetch ( ) ; \n \t2 } catch ( throwable e ) { \n \t3 set <identifiersep> throwable ( e ) ; \n <ect>
\t1 service <identifiersep> master <identifiersep> map . remove ( service . type . hbase . to <identifiersep> string ( ) ) ; \n \t1 <comment> \n \t1 if ( service <identifiersep> master <identifiersep> map . is <identifiersep> empty ( ) ) { \n \t1 return ; } \n <ect>
\t5  <identifiersep> log . info ( <string_literal> +  <identifiersep> peer + <string_literal> + ( get <identifiersep> context ( ) . clock ( ) . now ( ) -  <identifiersep> sent <identifiersep> on ) ) ; \n \t4 get <identifiersep> context ( ) . profile <identifiersep> manager ( ) . db <identifiersep> lookup <identifiersep> failed (  <identifiersep> peer ) ; \n \t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . error ) ) \n <ect>
\t5 ns <identifiersep> timestamp <identifiersep> formatter tsf = new ns <identifiersep> timestamp <identifiersep> formatter ( ) ; \n \t5 try { \n \t6 current <identifiersep> value = tsf . parse <identifiersep> object ( ( string ) current <identifiersep> value ) ; \t1 \n \t5 } catch ( java . text . parse <identifiersep> exception ex ) { \n <ect>
\t2 } else if ( blob <identifiersep> migration <identifiersep> case == blob <identifiersep> migration <identifiersep> case . copy <identifiersep> references ) { \n \t3 result = new loopback <identifiersep> blob <identifiersep> store <identifiersep> factory ( ) ; \n \t2 } else { \n \t3 result = new dummy <identifiersep> blob <identifiersep> store <identifiersep> factory ( ) ; <comment> \n <ect>
\t9 client . execute <identifiersep> method ( new get <identifiersep> method ( url ) ) ; } \n \t8 if ( success ) { \n \t9 s <identifiersep> logger . info ( <string_literal> + username + <string_literal> + ( ( system . current <identifiersep> time <identifiersep> millis ( ) - now ) / 1000l ) + <string_literal> ) ; \n \t8 } else { \n <ect>
\t2 } catch ( invalid <identifiersep> topology <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> , e ) ; \n \t3 throw e ; \n \t2 } catch ( already <identifiersep> alive <identifiersep> exception e ) { \n <ect>
\t2 logger . info ( <string_literal> + username ) ; \n \t2 dbpojo <identifiersep> pig <identifiersep> savedscript = pigsavedscriptmigration . fetch <identifiersep> from <identifiersep> hue <identifiersep> database ( username , start <identifiersep> date , end <identifiersep> date , connection <identifiersep> huedb , huedatabase ) ; <comment> \n \t2 total <identifiersep> queries += dbpojo <identifiersep> pig <identifiersep> savedscript . size ( ) ; \n \t2 for ( int j = 0 ; j < dbpojo <identifiersep> pig <identifiersep> savedscript . size ( ) ; j ++ ) { \n <ect>
\t1 if ( requested <identifiersep> class <identifiersep> list == null || requested <identifiersep> class <identifiersep> list . is <identifiersep> empty ( ) ) \n \t1 { \n \t1 <comment> \n \t1 base <identifiersep> partition <identifiersep> accessor partition <identifiersep> accessor = partition <identifiersep> accessors . get ( 0 ) ; \n <ect>
\t10 fw . write ( json ) ; \n \t10 fw . flush ( ) ; } } \n \t8 update <identifiersep> overview = true ; \n \t7 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 logger <identifiersep> to <identifiersep> adjust . set <identifiersep> level ( level . trace ) ; } \n \t2 this . logger . warn ( <string_literal> + this . test <identifiersep> name . get <identifiersep> method <identifiersep> name ( ) + <string_literal> ) ; } \n \t1 @ after \n \t1 public void after <identifiersep> test ( ) { \n <ect>
\t2 } catch ( recognition <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> + filename + <string_literal> + e . get <identifiersep> message ( ) + <string_literal> ) ; \n \t3 log . debug ( <string_literal> + filename + <string_literal> + e . get <identifiersep> message ( ) + <string_literal> , e ) ; \n \t2 } catch ( token <identifiersep> stream <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public static void validate <identifiersep> identifier ( string identifier , patient <identifiersep> identifier <identifiersep> type pit ) throws patient <identifiersep> identifier <identifiersep> exception { \n <ect>
void commit ( ) { \n \t1 try { \n \t1 session . commit ( ) ; \n \t1 } catch ( jms <identifiersep> exception jms <identifiersep> exception ) { \n <ect>
<comment> } } \n \t2 catch ( xmpp <identifiersep> exception ex ) \n \t2 { \n <ect>
\t4 logger . debug ( <string_literal> ) ; } \n \t3 if ( ! this . handler <identifiersep> map . is <identifiersep> empty ( ) ) { \n \t4 this . autodetect = false ; } } } \n \t1 protected void detect <identifiersep> resource <identifiersep> handlers ( application <identifiersep> context app <identifiersep> context ) { \n <ect>
\t4 if ( ! result ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + router + <string_literal> ) ; } \n \t4 result = (  <identifiersep> router <identifiersep> mgr . destroy <identifiersep> router ( router . get <identifiersep> id ( ) ) != null ) ; \n \t4 if ( ! result ) { \n <ect>
\t4 logger . error ( <string_literal> , e ) ; } } \n \t1 } ; \n \t1 @ override \n \t1 public void run ( ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> delete <identifiersep> record ( ) { \n \t2 try { \n \t3 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t3 if ( t != null && t . is <identifiersep> alive ( ) && ! t . is <identifiersep> daemon ( ) ) \n \t4 assert <identifiersep> true ( <string_literal> + t , wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t5 @ override \n \t5 public boolean is <identifiersep> satisified ( ) throws exception { \n <ect>
\t1 if max <identifiersep> count < = 0 : \n \t1 logger . warn ( <string_literal> ) \n \t1 return \n \t1 if window <identifiersep> in <identifiersep> min < = 0 : \n <ect>
\t3 logger . debug ( <string_literal> , service . get <identifiersep> jwks ( ) ) ; \n \t3 final resource resource = this . resource <identifiersep> loader . get <identifiersep> resource ( service . get <identifiersep> jwks ( ) ) ; \n \t3 final json <identifiersep> web <identifiersep> key <identifiersep> set json <identifiersep> web <identifiersep> key <identifiersep> set = build <identifiersep> json <identifiersep> web <identifiersep> key <identifiersep> set ( resource ) ; \n \t3 if ( json <identifiersep> web <identifiersep> key <identifiersep> set == null || json <identifiersep> web <identifiersep> key <identifiersep> set . get <identifiersep> json <identifiersep> web <identifiersep> keys ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t4 if ( auth <identifiersep> allowed && obo <identifiersep> allowed ) { \n \t5 allowed . add ( comm ) ; } } \n \t3 return allowed ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 long start = clock . get <identifiersep> instance ( ) . now ( ) ; \n \t3 key <identifiersep> generator . get <identifiersep> instance ( ) . generate <identifiersep> session <identifiersep> key ( ) ; \n \t3 long end = clock . get <identifiersep> instance ( ) . now ( ) ; \n \t3 time += end - start ; } \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t4 if ( net <identifiersep> details . get <identifiersep> gc <identifiersep> tag ( ) != null && net <identifiersep> details . get <identifiersep> gc <identifiersep> tag ( ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t5 if ( net <identifiersep> details . get <identifiersep> vm <identifiersep> mors <identifiersep> on <identifiersep> network ( ) == null || net <identifiersep> details . get <identifiersep> vm <identifiersep> mors <identifiersep> on <identifiersep> network ( ) . length == 1 ) { \n \t6 cleanup <identifiersep> network ( host <identifiersep> mo , net <identifiersep> details ) ; } } } } \n <ect>
<comment> \n \t1 private static web <identifiersep> archive create <identifiersep> deployment ( string permissions <identifiersep> filename , string deployment <identifiersep> name ) { \n <ect>
<comment> \n \t1 public void initialize ( string repository <identifiersep> root , file policy <identifiersep> file , string local <identifiersep> name , string global <identifiersep> prefix , \n \t4 string namespace , ccn <identifiersep> handle handle ) throws repository <identifiersep> exception { \n <ect>
\t3 trnsport . send <identifiersep> message ( message , message . get <identifiersep> all <identifiersep> recipients ( ) ) ; \n \t3 trnsport . close ( ) ; \n \t3 return true ; \n \t2 } catch ( messaging <identifiersep> exception ex ) { \n <ect>
\t1 write <identifiersep> resources . release ( ) ; \n \t1 if ( future . is <identifiersep> cancelled ( ) ) { \n \t2 log . error ( <string_literal> + id ) ; \n \t1 } else if ( ! future . is <identifiersep> success ( ) ) { \n <ect>
for servicename , servicedetail in cluster <identifiersep> version <identifiersep> summary . iteritems ( ) : \n \t1 if servicedetail [ 'upgrade' ] : \n \t1 service <identifiersep> names . append ( servicename ) \n if 0 == len ( service <identifiersep> names ) : \n <ect>
\t2 for ( int i = 0 ; i < input ; i ++ ) { \n \t3 sb . append ( buffer . take ( ) ) . append ( <string_literal> ) ; } \n \t2 millis = system . current <identifiersep> time <identifiersep> millis ( ) - millis ; \n \t2 log . info ( sb . to <identifiersep> string ( ) ) ; \n <ect>
\t2 logger . debug ( <string_literal> + event . get <identifiersep> artifact ( ) + <string_literal> + event . get <identifiersep> repository ( ) ) ; } \n \t1 public void artifact <identifiersep> downloading ( repository <identifiersep> event event ) { \n \t2 logger . debug ( <string_literal> + event . get <identifiersep> artifact ( ) + <string_literal> + event . get <identifiersep> repository ( ) ) ; } \n \t1 public void artifact <identifiersep> downloaded ( repository <identifiersep> event event ) { \n <ect>
\t7 <string_literal> + log <identifiersep> file <identifiersep> directory ) ; } \n \t1 calculate <identifiersep> journal <identifiersep> file <identifiersep> size ( maximum <identifiersep> file <identifiersep> size <identifiersep> in <identifiersep> megabytes ) ; \n \t1 file log <identifiersep> file1 = new file ( log <identifiersep> file <identifiersep> directory , tx1 <identifiersep> log <identifiersep> file <identifiersep> name ) ; \n \t1 file log <identifiersep> file2 = new file ( log <identifiersep> file <identifiersep> directory , tx2 <identifiersep> log <identifiersep> file <identifiersep> name ) ; \n <ect>
private string copy <identifiersep> cluster <identifiersep> property ( string property <identifiersep> name , string instance <identifiersep> property <identifiersep> name ) { \n \t1 string value = get <identifiersep> property ( hdfs <identifiersep> site , property <identifiersep> name , instance <identifiersep> property <identifiersep> name ) ; \n \t1 if ( ! string <identifiersep> utils . is <identifiersep> empty ( value ) ) { \n \t1 conf . set ( property <identifiersep> name , value ) ; } \n <ect>
\t3 <comment> \n \t1 } else if ( obj != null ) { \n \t2 log . info ( <string_literal> + obj . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; \n \t1 } else { \n <ect>
\t3 } else if ( result is file <identifiersep> processing <identifiersep> result . modify ) { \n \t4 val result <identifiersep> text = result . get <identifiersep> modified <identifiersep> text ( ) \n \t4 if ( target <identifiersep> file . exists ( ) && target <identifiersep> file . is <identifiersep> text <identifiersep> equal <identifiersep> to ( result <identifiersep> text ) ) \n \t5 continue \n <ect>
<comment> \n private void on <identifiersep> error ( final int sc , final string msg ) { \n <ect>
\t2 name = ccn <identifiersep> protocol <identifiersep> d <identifiersep> tags . tag <identifiersep> to <identifiersep> string ( ccn <identifiersep> protocol <identifiersep> d <identifiersep> tags . profile <identifiersep> name ) ; \n \t2 assert . assert <identifiersep> equals ( <string_literal> , name ) ; \n \t2 name = ccn <identifiersep> protocol <identifiersep> d <identifiersep> tags . tag <identifiersep> to <identifiersep> string ( ccn <identifiersep> protocol <identifiersep> d <identifiersep> tags . parameters ) ; \n \t2 assert . assert <identifiersep> equals ( <string_literal> , name ) ; \n <ect>
\t1 log . info ( <string_literal> + existing <identifiersep> vol . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) + <string_literal> ) ; \n \t1 if ( connection <identifiersep> manager . volume <identifiersep> exists ( existing <identifiersep> vol . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) , existing <identifiersep> vol . get <identifiersep> iqn ( ) ) ) { \n \t2 throw new volume <identifiersep> already <identifiersep> exists <identifiersep> exception ( <string_literal> + existing <identifiersep> vol . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) ) ; \n \t1 } else { \n <ect>
\t1 private void repair <identifiersep> extension ( extension <identifiersep> id extension <identifiersep> id , string namespace , boolean dependency , \n \t2 map < string , extension <identifiersep> dependency > managed <identifiersep> dependencies ) throws install <identifiersep> exception \n \t1 { \n \t2 if ( this . installed <identifiersep> repository . get <identifiersep> installed <identifiersep> extension ( extension <identifiersep> id . get <identifiersep> id ( ) , namespace ) != null ) { \n <ect>
\t3 if ( ! env <identifiersep> exposed <identifiersep> classes . contains ( meta <identifiersep> class ) ) { \n \t3 alias <identifiersep> mapping <identifiersep> def . set <identifiersep> lazy ( true ) ; } \n \t3 exposed <identifiersep> classes . add ( meta <identifiersep> class ) ; \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 if ( this . closed ) { \n \t2 return ; } \n <ect>
\t1 int num <identifiersep> attempts = local <identifiersep> conf . get <identifiersep> count ( property . replication <identifiersep> work <identifiersep> attempts ) ; \n \t1 for ( int i = 0 ; i < num <identifiersep> attempts ; i ++ ) { \n \t2 log . debug ( <string_literal> , i ) ; \n \t2 string peer <identifiersep> tserver <identifiersep> str ; \n <ect>
\t3 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t4 system . exit ( exit <identifiersep> status . error . value ( ) ) ; \n \t3 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
<comment> \n @ override \n public listenable <identifiersep> future < blob > get <identifiersep> blob ( final string container <identifiersep> name , final string key , get <identifiersep> options options ) { \n <ect>
<comment> \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 private void check <identifiersep> transform ( ) throws exception { \n <ect>
\t5 cmd . set <identifiersep> cluster (  <identifiersep> cluster ) ; \n \t5 s <identifiersep> logger . info ( <string_literal> +  <identifiersep> gson . to <identifiersep> json ( cmd ) ) ; \n \t5 storage <identifiersep> cmds . add ( cmd ) ; } \n \t3 } else { \n <ect>
\t3 while ( line != null ) { \n \t4 sb . append ( line ) . append ( <string_literal> ) ; \n \t4 line = reader . read <identifiersep> line ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 mac . update ( string . value <identifiersep> of ( ts ) . get <identifiersep> bytes ( ) ) ; \n \t3 byte [ ] encrypted <identifiersep> bytes = mac . do <identifiersep> final ( ) ; \n \t3 return base64 . encode <identifiersep> base64string ( encrypted <identifiersep> bytes ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } catch ( sql <identifiersep> exception ex ) { \n \t3 log . error ( <string_literal> , ex ) ; \n \t3 throw new identifier <identifiersep> exception ( ex ) ; \n \t2 } catch ( authorize <identifiersep> exception ex ) { \n <ect>
\t1 @ override \n \t1 protected fcp <identifiersep> message persistent <identifiersep> tag <identifiersep> message ( ) { \n \t2 <comment> \n \t2 if ( low <identifiersep> level <identifiersep> client == null ) \n <ect>
\t6 log . debug ( <string_literal> , dir ) ; } \n \t4 } else { \n \t5 log . warn ( <string_literal> , dir ) ; } \n \t3 } else { \n <ect>
\t3 for ( cms <identifiersep> project p : open <identifiersep> cms . get <identifiersep> org <identifiersep> unit <identifiersep> manager ( ) . get <identifiersep> all <identifiersep> accessible <identifiersep> projects ( m <identifiersep> clone , <string_literal> , true ) ) { \n \t4 if ( ! p . is <identifiersep> online <identifiersep> project ( ) ) { \n \t5 return p ; } } \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t2 object <identifiersep> name on = object <identifiersep> name . get <identifiersep> instance ( <string_literal> ) ; \n \t2 <comment> \n \t2 set < object <identifiersep> name > names = mbean <identifiersep> server . query <identifiersep> names ( on , null ) ; \n \t2 assert <identifiersep> equals ( services , names . size ( ) ) ; \n <ect>
\t3 string unit <identifiersep> reader <identifiersep> class = mary <identifiersep> properties . need <identifiersep> property ( header + <string_literal> ) ; \n \t3 string units <identifiersep> file = mary <identifiersep> properties . need <identifiersep> filename ( header + <string_literal> ) ; \n \t3 unit <identifiersep> file <identifiersep> reader unit <identifiersep> reader = ( unit <identifiersep> file <identifiersep> reader ) class . for <identifiersep> name ( unit <identifiersep> reader <identifiersep> class ) . new <identifiersep> instance ( ) ; \n \t3 unit <identifiersep> reader . load ( units <identifiersep> file ) ; \n <ect>
\t4 project <identifiersep> member <identifiersep> link assign <identifiersep> user <identifiersep> link = new project <identifiersep> member <identifiersep> link ( assign <identifiersep> user <identifiersep> name , \n \t6 assign <identifiersep> user <identifiersep> avatar <identifiersep> id , assign <identifiersep> user <identifiersep> display <identifiersep> name ) ; \n \t4 layout . add <identifiersep> component ( assign <identifiersep> user <identifiersep> link , 1 , 1 ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t10 profiler <identifiersep> heartbeat <identifiersep> update . to <identifiersep> string ( ) + <string_literal> + profiler <identifiersep> peer <identifiersep> scan . to <identifiersep> string ( ) ) ; } } } \n \t4 } catch ( final cloud <identifiersep> runtime <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . error ( <string_literal> , e . get <identifiersep> cause ( ) ) ; \n \t5 if ( e . get <identifiersep> cause ( ) instanceof cluster <identifiersep> invalid <identifiersep> session <identifiersep> exception ) { \n <ect>
\t3 remove <identifiersep> undeployed <identifiersep> views ( ) ; } } \n \t1 } else { \n \t2 log . error ( <string_literal> + extracted <identifiersep> archives <identifiersep> path + <string_literal> ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 web <identifiersep> socket <identifiersep> data . set <identifiersep> result ( arrays . as <identifiersep> list ( principal ) ) ; \n \t4 <comment> \n \t4 get <identifiersep> web <identifiersep> socket ( ) . send ( web <identifiersep> socket <identifiersep> data , true ) ; \n \t3 } catch ( framework <identifiersep> exception ex ) { \n <ect>
\t4 cmd . get <identifiersep> counter <identifiersep> param <identifiersep> list ( ) , cmd . get <identifiersep> destroy <identifiersep> vm <identifiersep> graceperiod ( ) , autoscale <identifiersep> user <identifiersep> id ) ; \n \t2 if ( cmd . get <identifiersep> display ( ) != null ) { \n \t3 profile <identifiersep> vo . set <identifiersep> display ( cmd . get <identifiersep> display ( ) ) ; } \n \t2 profile <identifiersep> vo = check <identifiersep> validity <identifiersep> and <identifiersep> persist ( profile <identifiersep> vo ) ; \n <ect>
\t3 impls . put ( client , tmp ) ; } \n \t2 try { \n \t3 tmp . init ( ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t4 <comment> \n \t4 trans <identifiersep> recipient <identifiersep> info key <identifiersep> transrecipient <identifiersep> info = ( trans <identifiersep> recipient <identifiersep> info ) recipient <identifiersep> info ; \n \t4 log . debug ( <string_literal> , key <identifiersep> transrecipient <identifiersep> info ) ; \n \t4 x509certificate encrypt <identifiersep> cert = key <identifiersep> transrecipient <identifiersep> info . get <identifiersep> certificate ( exchange ) ; \n <ect>
\t1 for ( motion <identifiersep> event event : events ) { \n \t2 instrumentation . get <identifiersep> instrumentation ( ) . send <identifiersep> pointer <identifiersep> sync ( event ) ; } \n \t1 return true ; \n \t1 } catch ( security <identifiersep> exception ignored ) { \n <ect>
\t4 print <identifiersep> literal ( ( literal ) value ) ; \n \t3 else if ( value . is <identifiersep> resource ( ) ) \n \t4 print <identifiersep> resource ( ( resource ) value ) ; \n \t3 else \n <ect>
\t3 for ( string list :  <identifiersep> lists ) { \n \t4 try { \n \t5 skip <identifiersep> list sl =  <identifiersep> bf . get <identifiersep> index ( list ,  <identifiersep> string <identifiersep> serializer ,  <identifiersep> dest <identifiersep> serializer ) ; \n \t5 if ( sl == null ) { \n <ect>
\t3 script <identifiersep> plugin configurer = configurer <identifiersep> factory . create ( project . get <identifiersep> build <identifiersep> script <identifiersep> source ( ) , project . get <identifiersep> buildscript ( ) , project . get <identifiersep> class <identifiersep> loader <identifiersep> scope ( ) , project . get <identifiersep> base <identifiersep> class <identifiersep> loader <identifiersep> scope ( ) , true ) ; \n \t3 configurer . apply ( project ) ; \n \t2 } finally { \n <ect>
\t2 if ( matcher . find ( ) ) { \n \t3 string hive <identifiersep> flat <identifiersep> table <identifiersep> hdfs <identifiersep> url = matcher . group ( 1 ) ; \n \t3 long size = get <identifiersep> file <identifiersep> size ( hive <identifiersep> flat <identifiersep> table <identifiersep> hdfs <identifiersep> url ) ; \n \t3 info . put ( executable <identifiersep> constants . hdfs <identifiersep> bytes <identifiersep> written , <string_literal> + size ) ; \n <ect>
\t1 private void flatten <identifiersep> prototypes ( ) { \n \t2 if ( ! erx <identifiersep> model <identifiersep> group . flatten <identifiersep> prototypes ) { \n \t3 return ; } \n \t2 else if ( erx <identifiersep> model . is <identifiersep> use <identifiersep> extended <identifiersep> prototypes <identifiersep> enabled ( ) ) { \n <ect>
\t1 input <identifiersep> list . clear ( ) ; \n \t1 inputs . remove ( service <identifiersep> name ) ; } \n @ override \n public void remove <identifiersep> input ( input input ) { \n <ect>
\t2 if ( is <identifiersep> function ( ) ) { \n \t3 return get <identifiersep> function <identifiersep> return <identifiersep> name ( ) ; } \n \t2 else { \n \t3 if ( this . out <identifiersep> parameter <identifiersep> names . size ( ) > 1 ) { \n <ect>
\t2 catch ( throwable t ) { \n \t3 <comment> \n \t3 <comment> \n \t3 exception <identifiersep> utils . rethrow <identifiersep> if <identifiersep> fatal <identifiersep> error <identifiersep> or <identifiersep> oom ( t ) ; \n <ect>
\t2 file destination = new file ( dir , filename ) ; \n \t2 try { \n \t3 write ( list , new file <identifiersep> output <identifiersep> stream ( destination ) ) ; } \n \t2 catch ( exception ioe ) { \n <ect>
\t6 listener . on <identifiersep> file <identifiersep> init ( file ) ; \n \t5 } else { \n \t6 listener . on <identifiersep> file <identifiersep> created ( file ) ; } \n \t4 } catch ( exception e ) { \n <ect>
public class login <identifiersep> cross <identifiersep> dc <identifiersep> test extends abstract <identifiersep> admin <identifiersep> cross <identifiersep> dc <identifiersep> test { \n \t1 @ test \n \t1 public void login <identifiersep> test ( ) throws exception { \n \t2 enable <identifiersep> dc <identifiersep> on <identifiersep> load <identifiersep> balancer ( dc . second ) ; \n <ect>
\t6  <identifiersep> executor . submit ( new agent <identifiersep> request <identifiersep> handler ( get <identifiersep> type ( ) , get <identifiersep> link ( ) , request ) ) ; } \n \t4 } catch ( final class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . error ( <string_literal> ) ; \n \t4 } catch ( final exception e ) { \n <ect>
\t6 status <identifiersep> holder . set <identifiersep> cooling <identifiersep> on ( true ) ; \n \t5 } else { \n \t6 status <identifiersep> holder . set <identifiersep> cooling <identifiersep> on ( false ) ; } \n \t4 } else { \n <ect>
\t1 private method <identifiersep> to <identifiersep> contexts method <identifiersep> to <identifiersep> contexts ; \n \t1 private call <identifiersep> graph cg ; \n \t1 private boolean show <identifiersep> lib <identifiersep> meths ; \n \t1 private array <identifiersep> list < meth <identifiersep> info > get <identifiersep> tgt <identifiersep> methods ( soot <identifiersep> method method , boolean recurse ) { \n <ect>
\t2 message <identifiersep> digest md5 ; \n \t2 try { \n \t3 md5 = message <identifiersep> digest . get <identifiersep> instance ( <string_literal> ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t1 list l = new array <identifiersep> list ( ) ; \n \t1 driver . get <identifiersep> results ( l ) ; \n \t1 log . debug ( <string_literal> + tbl <identifiersep> name ) ; \n \t1 for ( object t : l ) { \n <ect>
\t2 reliable <identifiersep> transport . set <identifiersep> replay <identifiersep> strategy ( create <identifiersep> replay <identifiersep> strategy ( replayer ) ) ; \n \t2 return new command <identifiersep> joiner ( reliable <identifiersep> transport , wire <identifiersep> format ) ; } \n \t1 @ override \n \t1 protected transport create <identifiersep> consumer ( ) throws exception { \n <ect>
* \n * \t1 . . . \n * \t1 logger . debug ( <string_literal> ) ; \n * \t1 . . . \n <ect>
\t5 logger . trace ( <string_literal> , \n \t7 system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ) ; } \n \t3 } catch ( exception e ) { \n \t4 try { \n <ect>
\t3 cidrlist = [ '0 . 0 . 0 . 0 / 0' ] , \n \t3 startport = self . services [ <string_literal> ] [ <string_literal> ] , \n \t3 endport = self . services [ <string_literal> ] [ <string_literal> ] \n \t2 ) \n <ect>
\t2 final http <identifiersep> servlet <identifiersep> request request = web <identifiersep> utils . get <identifiersep> http <identifiersep> servlet <identifiersep> request <identifiersep> from <identifiersep> external <identifiersep> webflow <identifiersep> context ( context ) ; \n \t2 final registered <identifiersep> service service = web <identifiersep> utils . get <identifiersep> registered <identifiersep> service ( context ) ; \n \t2 final authentication authentication = web <identifiersep> utils . get <identifiersep> authentication ( context ) ; \n \t2 if ( service == null || authentication == null ) { \n <ect>
\t2 string reset <identifiersep> uri = oauth . auth <identifiersep> server <identifiersep> root + <string_literal> ; \n \t2 driver . navigate ( ) . to ( reset <identifiersep> uri ) ; \n \t2 reset <identifiersep> password <identifiersep> page . assert <identifiersep> current ( ) ; \n \t2 reset <identifiersep> password <identifiersep> page . change <identifiersep> password ( username ) ; \n <ect>
\t4  <identifiersep> alloc <identifiersep> proxy <identifiersep> lock . unlock ( ) ; } \n \t2 } else { \n \t3 s <identifiersep> logger . error ( <string_literal> + vm <identifiersep> id + <string_literal> ) ; } \n \t2 if ( proxy == null ) { \n <ect>
\t1 for ( host host : hosts ) { \n \t2 host <identifiersep> names . add ( host . get <identifiersep> host <identifiersep> name ( ) ) ; } \n \t1 enqueue <identifiersep> agent <identifiersep> commands ( cluster , cluster <identifiersep> name , host <identifiersep> names ) ; \n \t1 } catch ( ambari <identifiersep> exception ae ) { \n <ect>
\t5 logger . warn ( <string_literal> , http <identifiersep> post . get <identifiersep> status <identifiersep> line ( ) ) ; \n \t5 return null ; } \n \t4 response = io <identifiersep> utils . to <identifiersep> string ( http <identifiersep> post . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) , utf <identifiersep> <number_literal> <identifiersep> encoding ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 if ( result ) { \n \t5 logger . debug ( <string_literal> + username + <string_literal> ) ; \n \t4 } else { \n <ect>
\t4 return response <identifiersep> code ; } } \n \t2 <comment> \n \t2 { \n \t3 url = server + <string_literal> + disk <identifiersep> offering <identifiersep> id + <string_literal> + zone <identifiersep> id + <string_literal> +  <identifiersep> account . get ( ) + <string_literal> ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 list < entry < operator < ? > , long > > sorted <identifiersep> rs <identifiersep> groups = \n \t3 rank <identifiersep> ops <identifiersep> by <identifiersep> accumulated <identifiersep> size ( parent <identifiersep> to <identifiersep> rs <identifiersep> ops . key <identifiersep> set ( ) ) ; \n <ect>
\t2 if ( run <identifiersep> h2 ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 server = server . create <identifiersep> tcp <identifiersep> server ( ) ; \n \t3 server . start ( ) ; \n <ect>
\t3 pstmt <identifiersep> update . set <identifiersep> string ( <number_literal> , broadcast <identifiersep> domain <identifiersep> range ) ; \n \t3 pstmt <identifiersep> update . set <identifiersep> string ( <number_literal> , <string_literal> ) ; \n \t3 zone <identifiersep> name = zone <identifiersep> name + <string_literal> ; \n \t3 pstmt <identifiersep> update . set <identifiersep> string ( <number_literal> , zone <identifiersep> name ) ; \n <ect>
\t6 return ; } \n \t5 cluster <identifiersep> service . submit <identifiersep> state <identifiersep> update <identifiersep> task ( cluster <identifiersep> update <identifiersep> task <identifiersep> source , delayed <identifiersep> reroute <identifiersep> task . this ) ; } \n \t4 @ override \n \t4 public void on <identifiersep> failure ( exception e ) { \n <ect>
\t2 if ( text . char <identifiersep> at ( pos ) == '0' && pos < text . length ( ) - 1 && <string_literal> . index <identifiersep> of ( text . char <identifiersep> at ( pos + 1 ) ) >= 0 ) { \n \t2 pos += <number_literal> ; } \n \t2 else if ( <string_literal> . index <identifiersep> of ( text . char <identifiersep> at ( pos ) ) >= 0 && pos > 0 && text . char <identifiersep> at ( pos - 1 ) == '0' ) { \n \t2 pos ++ ; } \n <ect>
\t5 sd . post ( span , exchange , route . get <identifiersep> endpoint ( ) ) ; \n \t5 span . finish ( ) ; \n \t5 active <identifiersep> span <identifiersep> manager . deactivate ( exchange ) ; \n \t4 } else { \n <ect>
\t2 log . info ( <string_literal> ) ; } \n \t1 protected void stop <identifiersep> session <identifiersep> timer ( ) { \n \t2 if ( session <identifiersep> timer <identifiersep> future != null ) { \n \t3 if ( session <identifiersep> timer <identifiersep> future . cancel ( true ) ) \n <ect>
\t4 log . debug ( <string_literal> , next <identifiersep> batch . count ( ) , batch <identifiersep> fs ) ; \n \t4 if ( primary <identifiersep> keys <identifiersep> to <identifiersep> fetch . count ( ) > next <identifiersep> batch . count ( ) ) { \n \t5 ns <identifiersep> array missed <identifiersep> keys = erx <identifiersep> array <identifiersep> utilities . array <identifiersep> minus <identifiersep> array ( primary <identifiersep> keys <identifiersep> to <identifiersep> fetch , ( ns <identifiersep> array ) next <identifiersep> batch . value <identifiersep> for <identifiersep> key ( primary <identifiersep> key <identifiersep> attribute <identifiersep> name ) ) ; \n <ect>
\t2 try { \n \t3 work . set <identifiersep> step ( step . migrating ) ; \n \t3  <identifiersep> ha <identifiersep> dao . update ( work . get <identifiersep> id ( ) , work ) ; \n \t3 if ( !  <identifiersep> it <identifiersep> mgr . migrate <identifiersep> away ( work . get <identifiersep> type ( ) , vm <identifiersep> id , src <identifiersep> host <identifiersep> id ) ) { \n <ect>
\t1 @ override \n \t1 public void subscribe ( string service , url url , notify <identifiersep> listener listener ) { \n \t2 string client = rpc <identifiersep> context . get <identifiersep> context ( ) . get <identifiersep> remote <identifiersep> address <identifiersep> string ( ) ; \n <ect>
\t1 try { \n \t2 connection <identifiersep> ambaridb . rollback ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t1 } catch ( sql <identifiersep> exception e1 ) { \n <ect>
\t3 byte [ ] response = receive <identifiersep> data ( ) ; \n \t3 logger . info ( <string_literal> , data <identifiersep> parser . bytes <identifiersep> to <identifiersep> hex ( response ) ) ; \n \t3 return ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 log . warn ( <string_literal> ) ; } } \n \t1 @ override \n \t1 public void rstop <identifiersep> test ( boolean now ) throws remote <identifiersep> exception { \n \t2 if ( now ) { \n <ect>
\t4 add <identifiersep> profile <identifiersep> roles ( user <identifiersep> entry , profile , attribute , this . role <identifiersep> prefix ) ; \n \t3 } else { \n \t4 logger . warn ( <string_literal> ) ; } \n \t2 } else { \n <ect>
\t1 log . warn ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t1 try { \n \t2 storage = new hdfs <identifiersep> storage ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t4 logger . log ( level . fine , <string_literal> , e ) ; } } \n \t2 catalog . validate ( data <identifiersep> store , true ) . throw <identifiersep> if <identifiersep> invalid ( ) ; \n \t2 catalog . add ( data <identifiersep> store ) ; \n \t2 string store <identifiersep> name = data <identifiersep> store . get <identifiersep> name ( ) ; \n <ect>
\t1 public table <identifiersep> proto get <identifiersep> proto ( ) { \n \t2 try { \n \t3 return table <identifiersep> proto . parse <identifiersep> from ( this . proto ) ; \n \t2 } catch ( invalid <identifiersep> protocol <identifiersep> buffer <identifiersep> exception ex ) { \n <ect>
\t3 new <identifiersep> peak <identifiersep> bandwidth = new <identifiersep> peak <identifiersep> bandwidth <identifiersep> policy . get <identifiersep> value ( ) ; } \n \t2 if ( new <identifiersep> is <identifiersep> enabled <identifiersep> policy != null ) { \n \t3 new <identifiersep> is <identifiersep> enabled = new <identifiersep> is <identifiersep> enabled <identifiersep> policy . is <identifiersep> value ( ) ; } \n \t2 if ( ! old <identifiersep> is <identifiersep> enabled . equals ( new <identifiersep> is <identifiersep> enabled ) ) { \n <ect>
\t8 logger . info ( <string_literal> ) ; \n \t8 latch . count <identifiersep> down ( ) ; } \n \t7 @ override \n \t7 public void on <identifiersep> failure ( exception e ) { \n <ect>
<comment> \n \t1 static void get <identifiersep> delegate ( ) { \n \t2 resteasy <identifiersep> provider <identifiersep> factory factory = resteasy <identifiersep> provider <identifiersep> factory . get <identifiersep> instance ( ) ; \n \t2 delegate = factory . get <identifiersep> message <identifiersep> body <identifiersep> writer ( non <identifiersep> book . class , null , null , media <identifiersep> type . application <identifiersep> xml <identifiersep> type ) ; \n <ect>
\t2 if ( this . acquire <identifiersep> increment < = 0 ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 this . acquire <identifiersep> increment = 1 ; } \n \t2 if ( this . partition <identifiersep> count < 1 ) { \n <ect>
\t3 handle <identifiersep> cancellation <identifiersep> post <identifiersep> operation ( operation <identifiersep> parameters . get <identifiersep> cancellation <identifiersep> token ( ) , callback ) ; } } \n \t1 private runnable handle <identifiersep> cancellation <identifiersep> pre <identifiersep> operation ( build <identifiersep> cancellation <identifiersep> token cancellation <identifiersep> token ) { \n \t2 runnable callback = new runnable ( ) { \n \t3 public void run ( ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void put ( ) throws exception { \n <ect>
<number_literal> <comment> \n <number_literal> <comment> \n <number_literal> <comment> \n \t3 } else { \n <ect>
\t2 synchronized ( in <identifiersep> order <identifiersep> segments ) { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t2 <comment> \n \t2 now = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 do <identifiersep> partial <identifiersep> sort ( vec2 , true , limit ) ; \n \t2 dt = system . current <identifiersep> time <identifiersep> millis ( ) - now ; \n <ect>
\t2 try { \n \t3 output . set <identifiersep> last <identifiersep> modified ( 0 ) ; \n \t3 write <identifiersep> job <identifiersep> output <identifiersep> resource ( path <identifiersep> of <identifiersep> job <identifiersep> output ( output . get <identifiersep> uuid ( ) ) , output ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public void release ( string name , boolean test ) throws exception { \n \t2 list < repository <identifiersep> plugin > release <identifiersep> repos = get <identifiersep> release <identifiersep> repos ( name ) ; \n \t2 if ( release <identifiersep> repos . is <identifiersep> empty ( ) ) { \n \t3 return ; } \n <ect>
\t2 log . info ( log . fac <identifiersep> test , <string_literal> + name + <string_literal> + ecd . get <identifiersep> versioned <identifiersep> name ( ) + <string_literal> + ecd . get <identifiersep> version ( ) + <string_literal> + old <identifiersep> version + <string_literal> + <string_literal> + ecd . is <identifiersep> gone ( ) + <string_literal> + ecd ) ; \n \t2 return ecd . get <identifiersep> version ( ) ; } \n \t1 public ccn <identifiersep> time wait <identifiersep> for <identifiersep> data <identifiersep> and <identifiersep> log ( string name , ccn <identifiersep> network <identifiersep> object < ? > ecd ) throws io <identifiersep> exception { \n \t2 ecd . wait <identifiersep> for <identifiersep> data ( ) ; \n <ect>
\t2 session = connection . create <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n \t2 topic = session . create <identifiersep> topic ( topic <identifiersep> name ) ; \n \t2 subscriber = session . create <identifiersep> durable <identifiersep> subscriber ( topic , subscriber <identifiersep> name ) ; \n \t2 connection . start ( ) ; \n <ect>
\t3 output <identifiersep> writer . add <identifiersep> alignment ( rec ) ; \n \t3 progress . record ( rec ) ; } \n \t2 filtering <identifiersep> iterator . close ( ) ; \n \t2 output <identifiersep> writer . close ( ) ; \n <ect>
\t3 byte <identifiersep> array key <identifiersep> bytes = proto <identifiersep> utils . decode <identifiersep> bytes ( request . get <identifiersep> key ( ) ) ; \n \t3 string key <identifiersep> string = byte <identifiersep> utils . get <identifiersep> string ( key <identifiersep> bytes . get ( ) , <string_literal> ) ; \n \t3 if ( metadata <identifiersep> store . metadata <identifiersep> keys . contains ( key <identifiersep> string ) ) { \n \t4 versioned < byte [ ] > versioned <identifiersep> value = proto <identifiersep> utils . decode <identifiersep> versioned ( request . get <identifiersep> versioned ( ) ) ; \n <ect>
\t1 direct <identifiersep> storage <identifiersep> info conf = null ; \n \t1 try { \n \t1 conf = transactions . find ( new direct <identifiersep> storage <identifiersep> info ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 <comment> \n \t4 if ( ! f . is <identifiersep> empty ( steal <identifiersep> attrs ) && \n \t5 ( next . attributes ( ) == null || ! u . contains <identifiersep> all ( next . attributes ( ) , steal <identifiersep> attrs ) ) ) { \n <ect>
\t1 throw new parquet <identifiersep> encoding <identifiersep> exception ( <string_literal> ) ; } \n \t1 mem <identifiersep> size += bytes <identifiersep> input . size ( ) ; \n \t1 pages . add ( new data <identifiersep> page <identifiersep> v1 ( bytes <identifiersep> input . copy ( bytes <identifiersep> input ) , value <identifiersep> count , ( int ) bytes <identifiersep> input . size ( ) , statistics , rl <identifiersep> encoding , dl <identifiersep> encoding , values <identifiersep> encoding ) ) ; \n \t1 total <identifiersep> value <identifiersep> count += value <identifiersep> count ; \n <ect>
\t6 vlan <identifiersep> id = tokens [ <number_literal> ] ; \n \t5 hypervisor <identifiersep> host <identifiersep> helper . prepare <identifiersep> network ( this .  <identifiersep> public <identifiersep> network <identifiersep> v <identifiersep> switch <identifiersep> name , <string_literal> , \n \t6 host <identifiersep> mo , vlan <identifiersep> id , network <identifiersep> rate <identifiersep> mbps , null , this .  <identifiersep> ops <identifiersep> timeout , false ) ; \n \t4 } else { \n <ect>
\t3 base <identifiersep> builder . close ( ) ; } \n \t2 long time <identifiersep> spent = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n \t2 logger . info ( <string_literal> + base <identifiersep> cuboid <identifiersep> id + <string_literal> + count + <string_literal> + time <identifiersep> spent + <string_literal> ) ; \n \t2 int mb <identifiersep> estimate <identifiersep> base <identifiersep> aggr <identifiersep> cache = ( int ) ( aggregation <identifiersep> scanner . get <identifiersep> estimate <identifiersep> size <identifiersep> of <identifiersep> aggr <identifiersep> cache ( ) / memory <identifiersep> budget <identifiersep> controller . one <identifiersep> mb ) ; \n <ect>
\t1 return get <identifiersep> policies <identifiersep> from <identifiersep> ranger ( ranger <identifiersep> url , database , table ) ; } \n private list < policy > get <identifiersep> policies <identifiersep> from <identifiersep> non <identifiersep> ambari <identifiersep> cluster ( string database , string table ) { \n \t1 string ranger <identifiersep> url = get <identifiersep> ranger <identifiersep> url <identifiersep> from <identifiersep> config ( ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> empty ( ranger <identifiersep> url ) ) { \n <ect>
\t5 logger . error ( <string_literal> + lifecycle + <string_literal> + role , e ) ; } \n \t3 } ) ; } \n \t2 else { \n <ect>
\t6 <string_literal> + context . get <identifiersep> indexing <identifiersep> context ( ) . get <identifiersep> index <identifiersep> path ( ) , e ) ; \n \t4 context . get <identifiersep> indexing <identifiersep> context ( ) . index <identifiersep> update <identifiersep> failed ( ce ) ; \n \t4 throw ce ; } \n \t3 if ( context . get <identifiersep> indexed <identifiersep> nodes ( ) > 0 ) { \n <ect>
\t2 cache1 \n \t4 . get <identifiersep> advanced <identifiersep> cache ( ) . with <identifiersep> flags ( flag . skip <identifiersep> cache <identifiersep> load ) \n \t4 . entry <identifiersep> set ( ) . stream ( ) . for <identifiersep> each ( e - > { \n \t2 } ) ; \n <ect>
\t1 public optional < output <identifiersep> stream > get <identifiersep> output <identifiersep> stream ( ) { \n \t2 try { \n \t3 return optional ( new buffered <identifiersep> output <identifiersep> stream ( new file <identifiersep> output <identifiersep> stream ( file ) ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 runnable message <identifiersep> sending <identifiersep> task = create <identifiersep> message <identifiersep> sending <identifiersep> task ( mail <identifiersep> message ) ; \n \t6 imap <identifiersep> idle <identifiersep> channel <identifiersep> adapter . this . sending <identifiersep> task <identifiersep> executor . execute ( message <identifiersep> sending <identifiersep> task ) ; } } } \n \t3 catch ( messaging <identifiersep> exception e ) { \n <ect>
<comment> \n public void start ( ) { \n \t1 if ( null == server ) { \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 <comment> \n \t6 <comment> \n <ect>
\t3  <identifiersep> agent <identifiersep> mgr . send ( host . get <identifiersep> id ( ) , cmd ) ; \n \t2 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t2 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> that ( wait <identifiersep> for <identifiersep> no <identifiersep> blocks <identifiersep> on <identifiersep> node ( block <identifiersep> wait <identifiersep> timeout , client <identifiersep> node1 ) . is <identifiersep> empty ( ) , equal <identifiersep> to ( true ) ) ; \n \t2 assert <identifiersep> that ( wait <identifiersep> for <identifiersep> no <identifiersep> blocks <identifiersep> on <identifiersep> node ( block <identifiersep> wait <identifiersep> timeout , client <identifiersep> node2 ) . is <identifiersep> empty ( ) , equal <identifiersep> to ( true ) ) ; \n \t2 assert <identifiersep> that ( wait <identifiersep> for <identifiersep> no <identifiersep> blocks <identifiersep> on <identifiersep> node ( block <identifiersep> wait <identifiersep> timeout , client <identifiersep> node3 ) . is <identifiersep> empty ( ) , equal <identifiersep> to ( true ) ) ; } \n \t1 public void test <identifiersep> recover <identifiersep> after <identifiersep> master <identifiersep> nodes ( ) throws exception { \n <ect>
\t2 check <identifiersep> thread ( ) ; \n \t2 try { \n \t3 return cache . get <identifiersep> segment <identifiersep> headers ( ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t4 string line ; \n \t4 while ( ( line = lines . read <identifiersep> line ( ) ) != null ) { \n \t5 revisions . add ( string <identifiersep> utils . trim ( line ) ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 cluster <identifiersep> configuration <identifiersep> request config <identifiersep> request = new cluster <identifiersep> configuration <identifiersep> request ( ambari <identifiersep> context , topology , false , stack <identifiersep> advisor <identifiersep> blueprint <identifiersep> processor ) ; \n \t3 add <identifiersep> cluster <identifiersep> config <identifiersep> request ( provision <identifiersep> request , topology , config <identifiersep> request ) ; } \n \t2 } else { \n \t2 get <identifiersep> or <identifiersep> create <identifiersep> topology <identifiersep> task <identifiersep> executor ( topology . get <identifiersep> cluster <identifiersep> id ( ) ) . start ( ) ; } } } \n <ect>
\t5 if ( session != null && session . get <identifiersep> transacted ( ) ) { \n \t6 session . commit ( ) ; } \n \t5 ( ( batch <identifiersep> transaction <identifiersep> commit <identifiersep> strategy ) commit <identifiersep> strategy ) . reset ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 if ( high <identifiersep> availability <identifiersep> services != null ) { \n \t3 try { \n \t4 high <identifiersep> availability <identifiersep> services . close ( ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t2 public void restore <identifiersep> state ( list < tuple2 < long , integer > > list ) throws exception { \n \t3 if ( list . is <identifiersep> empty ( ) || list . size ( ) > 1 ) { \n \t4 throw new runtime <identifiersep> exception ( <string_literal> + list . size ( ) ) ; } \n \t3 tuple2 < long , integer > state = list . get ( 0 ) ; \n <ect>
\t3 public void completed ( final http <identifiersep> cache <identifiersep> entry parent <identifiersep> entry ) { \n \t4 if ( request <identifiersep> should <identifiersep> not <identifiersep> be <identifiersep> cached ( request ) || should <identifiersep> invalidate <identifiersep> head <identifiersep> cache <identifiersep> entry ( request , parent <identifiersep> entry ) ) { \n \t5 if ( parent <identifiersep> entry != null ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t1 private string passwd = null ; \n \t1 @ override \n \t1 public void run ( ) { \n \t2 <comment> \n <ect>
\t2 reservation <identifiersep> context context = new reservation <identifiersep> context <identifiersep> impl ( null , null , caller <identifiersep> user , owner ) ; \n \t2 list < nic <identifiersep> vo > nics =  <identifiersep> nic <identifiersep> dao . list <identifiersep> by <identifiersep> vm <identifiersep> id ( router <identifiersep> id ) ; \n \t2 for ( nic <identifiersep> vo nic : nics ) { \n \t3 if ( !  <identifiersep> network <identifiersep> mgr . start <identifiersep> network ( nic . get <identifiersep> network <identifiersep> id ( ) , dest , context ) ) { \n <ect>
\t1 lb = load <identifiersep> balancers . get <identifiersep> loadbalancer ( ctx , lb <identifiersep> name ) ; \n \t1 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n \t1 throw new access <identifiersep> point <identifiersep> not <identifiersep> found <identifiersep> exception ( ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t3 if ( ( ( otp <identifiersep> erlang <identifiersep> atom ) t . element <identifiersep> at ( 0 ) ) . atom <identifiersep> value ( ) . compare <identifiersep> to ( <string_literal> ) == 0 ) { \n \t4 return true ; } \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 ended = null ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 if ( suspended != null ) { \n \t3 try { \n <ect>
\t2 command <identifiersep> output result <identifiersep> obj2 = system <identifiersep> util . run <identifiersep> with <identifiersep> raw <identifiersep> output ( command ) ; \n \t2 log . debug ( <string_literal> + joiner . join ( command ) + <string_literal> + result <identifiersep> obj2 . return <identifiersep> value + <string_literal> + result <identifiersep> obj2 . output + <string_literal> \n \t3 + result <identifiersep> obj2 . error ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( result <identifiersep> obj2 . output ) ) { \n <ect>
\t3 logger . error ( <string_literal> , e ) ; \n \t3 throw new resource <identifiersep> exception ( status . client <identifiersep> error <identifiersep> bad <identifiersep> request , <string_literal> ) ; } \n \t2 catch ( parse <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 flink = new testing <identifiersep> cluster ( config ) ; \n \t2 try { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 write <identifiersep> process <identifiersep> event . fire ( <string_literal> ) ; \n \t2 if ( book == null ) { \n \t3 throw new web <identifiersep> application <identifiersep> exception ( response . status . not <identifiersep> found ) ; } \n <ect>
\t1 cache cache1 = cache ( 0 , <string_literal> ) ; \n \t1 cache cache2 = cache ( 1 , <string_literal> ) ; \n \t1 cache2 . get <identifiersep> advanced <identifiersep> cache ( ) . add <identifiersep> interceptor <identifiersep> after ( \n \t3 new error <identifiersep> inducing <identifiersep> interceptor ( ) , non <identifiersep> transactional <identifiersep> locking <identifiersep> interceptor . class ) ; \n <ect>
\t3 element root <identifiersep> element = doc . get <identifiersep> document <identifiersep> element ( ) ; \n \t3 for ( int i = 0 ; i < tag <identifiersep> names . length ; i ++ ) { \n \t4 node <identifiersep> list target <identifiersep> nodes = root <identifiersep> element . get <identifiersep> elements <identifiersep> by <identifiersep> tag <identifiersep> name ( tag <identifiersep> names [ i ] ) ; \n \t4 if ( target <identifiersep> nodes . get <identifiersep> length ( ) < = 0 ) { \n <ect>
\t10 + store . get <identifiersep> current <identifiersep> version <identifiersep> id ( ) ) ; } \n \t2 <comment> \n \t2 file fetch <identifiersep> dir = null ; \n \t2 if ( file <identifiersep> fetcher == null ) { \n <ect>
\t2 url url = null ; \n \t2 try { \n \t3 url = new url ( protocol , host , port , <string_literal> ) ; \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t5 ( refresh <identifiersep> interval . millis ( ) < 0 || ( system . current <identifiersep> time <identifiersep> millis ( ) - last <identifiersep> refresh ) < refresh <identifiersep> interval . millis ( ) ) ) { \n \t4 return cached <identifiersep> disco <identifiersep> nodes ; } \n \t3 last <identifiersep> refresh = system . current <identifiersep> time <identifiersep> millis ( ) ; } \n <ect>
\t4 throw new configuration <identifiersep> exception ( <string_literal> ) ; \n \t3 file <identifiersep> utils . create <identifiersep> directory ( conf . saved <identifiersep> caches <identifiersep> directory ) ; } \n \t2 catch ( configuration <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 conversion <identifiersep> executor conversion <identifiersep> executor = conversion <identifiersep> service . get <identifiersep> conversion <identifiersep> executor ( binding . get <identifiersep> converter ( ) , \n \t5 string . class , target . get <identifiersep> value <identifiersep> type ( model ) ) ; \n \t3 mapping . set <identifiersep> type <identifiersep> converter ( conversion <identifiersep> executor ) ; } \n <ect>
\t2 type obx5 = values [ 0 ] . get <identifiersep> data ( ) ; \n \t2 if ( <string_literal> . equals ( hl7datatype ) ) { \n \t3 string value = ( ( nm ) obx5 ) . get <identifiersep> value ( ) ; \n \t3 if ( value == null || value . length ( ) == 0 ) { \n <ect>
\t6 model ( ) . add <identifiersep> to <identifiersep> h <identifiersep> list ( group ) ; \n \t5 else if ( <string_literal> . equals ( dimension ) ) \n \t6 model ( ) . add <identifiersep> to <identifiersep> v <identifiersep> list ( group ) ; \n \t4 } else { \n <ect>
<comment> \n \t1 private void initialize <identifiersep> item ( string item <identifiersep> name ) { \n <ect>
\t3  <identifiersep> lease <identifiersep> set = get <identifiersep> context ( ) . net <identifiersep> db ( ) . lookup <identifiersep> lease <identifiersep> set <identifiersep> locally (  <identifiersep> to . calculate <identifiersep> hash ( ) ) ; \n \t3 if (  <identifiersep> lease <identifiersep> set == null ) { \n \t4 <comment> \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 if ( parent <identifiersep> id != null ) { \n \t5 log . debug ( string . format ( <string_literal> , service <identifiersep> name , trace <identifiersep> id , span <identifiersep> id , parent <identifiersep> id ) ) ; \n \t4 } else { \n <ect>
\t2 assert <identifiersep> acked ( prepare <identifiersep> create ( <string_literal> , <number_literal> , settings . builder ( ) \n \t4 . put ( setting <identifiersep> number <identifiersep> of <identifiersep> shards , num <identifiersep> shards . num <identifiersep> primaries ) . put ( setting <identifiersep> number <identifiersep> of <identifiersep> replicas , between ( 0 , 1 ) ) . put ( <string_literal> , <number_literal> , time <identifiersep> unit . seconds ) ) ) ; \n \t2 assert <identifiersep> acked ( client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> put <identifiersep> mapping ( <string_literal> ) . set <identifiersep> type ( <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) ) ; \n \t2 ensure <identifiersep> green ( ) ; \n <ect>
\t2 object . . . args ) throws grid <identifiersep> exception { \n \t2 <comment> \n \t2 final int num <identifiersep> threads = ( integer ) args [ 0 ] ; \n \t2 int entry <identifiersep> cnt = ( integer ) args [ 1 ] ; \n <ect>
\t3 synchronized ( lock ) { \n \t4 if ( received <identifiersep> command == null ) { \n \t5 received <identifiersep> command = command ; \n \t4 } else { \n <ect>
\t2 log . debug ( <string_literal> + \n \t4 timeline <identifiersep> utils . dump <identifiersep> timeline <identifiersep> recordto <identifiersep> json ( metrics , true ) ) ; } \n \t1 return timeline <identifiersep> metric <identifiersep> store . put <identifiersep> host <identifiersep> aggregated <identifiersep> metrics ( metrics ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 tbl <identifiersep> col <identifiersep> ref tbl <identifiersep> col <identifiersep> ref = model . find <identifiersep> column ( column <identifiersep> name ) ; \n \t4 row <identifiersep> key <identifiersep> col <identifiersep> desc row <identifiersep> key <identifiersep> col <identifiersep> desc = row <identifiersep> key <identifiersep> col <identifiersep> desc <identifiersep> map . get ( tbl <identifiersep> col <identifiersep> ref . get <identifiersep> identity ( ) ) ; \n \t4 <comment> \n \t4 if ( row <identifiersep> key <identifiersep> col <identifiersep> desc == null ) { \n <ect>
\t2 if ( options . has ( date <identifiersep> flag ) ) { \n \t3 rotation <identifiersep> time <identifiersep> secs = options . value <identifiersep> of ( date <identifiersep> flag ) . get <identifiersep> time ( ) / <number_literal> ; \n \t2 } else if ( options . has ( unixtime <identifiersep> flag ) ) { \n \t3 rotation <identifiersep> time <identifiersep> secs = options . value <identifiersep> of ( unixtime <identifiersep> flag ) ; } \n <ect>
\t2 if ( device <identifiersep> connector . is <identifiersep> connected ( ) ) { \n \t3 try { \n \t4 device <identifiersep> connector . send <identifiersep> command ( command , device <identifiersep> cmd ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . relocating ) . get ( 0 ) . relocating <identifiersep> node <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . started ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n <ect>
\t5 { \n \t6 the <identifiersep> port = port ; } \n \t5 else if ( port != the <identifiersep> port ) \n \t5 { \n <ect>
\t4 byte <identifiersep> block block = byte <identifiersep> block . wrap ( o . to <identifiersep> byte <identifiersep> array ( ) ) ; \n \t4 return block ; } \n \t3 catch ( io <identifiersep> exception ex ) \n \t3 { \n <ect>
\t5 provider , service . get <identifiersep> name ( ) ) ; \n \t3 final event event = validate <identifiersep> event <identifiersep> id <identifiersep> for <identifiersep> matching <identifiersep> transition <identifiersep> in <identifiersep> context ( provider . get <identifiersep> id ( ) , context , \n \t5 build <identifiersep> event <identifiersep> attribute <identifiersep> map ( authentication . get <identifiersep> principal ( ) , service , provider ) ) ; \n \t3 return collection <identifiersep> utils . wrap <identifiersep> set ( event ) ; } \n <ect>
public operation <identifiersep> handle get <identifiersep> table <identifiersep> types ( session <identifiersep> handle session <identifiersep> handle ) \n \t1 throws hive <identifiersep> sql <identifiersep> exception { \n \t1 operation <identifiersep> handle op <identifiersep> handle = session <identifiersep> manager . get <identifiersep> session ( session <identifiersep> handle ) \n \t2 . get <identifiersep> table <identifiersep> types ( ) ; \n <ect>
\t4 log . debug ( <string_literal> , e1 ) ; } \n \t3 return ; } \n \t2 long t2 = system . nano <identifiersep> time ( ) ; \n <ect>
\t3 s <identifiersep> logger . error ( <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) + <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> display <identifiersep> name ( ) + <string_literal> + logical <identifiersep> switch <identifiersep> uuid + <string_literal> + exception <identifiersep> delete <identifiersep> l <identifiersep> switch <identifiersep> port . get <identifiersep> message ( ) ) ; } \n \t2 s <identifiersep> logger . warn ( <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) + <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> display <identifiersep> name ( ) + <string_literal> ) ; } \n \t1 private answer handle <identifiersep> exception ( nicira <identifiersep> nvp <identifiersep> api <identifiersep> exception e , configure <identifiersep> shared <identifiersep> network <identifiersep> vlan <identifiersep> id <identifiersep> command command , nicira <identifiersep> nvp <identifiersep> resource nicira <identifiersep> nvp <identifiersep> resource ) { \n \t2 if ( http <identifiersep> status <identifiersep> code <identifiersep> helper . is <identifiersep> conflict ( e . get <identifiersep> error <identifiersep> code ( ) ) ) { \n <ect>
public static void shutdown ( ) { \n \t1 rlock . lock ( ) ; \n \t1 try { \n \t1 if ( upload <identifiersep> part <identifiersep> pool != null ) { \n <ect>
\t3 try { \n \t4 final integer bucket <identifiersep> value = integer . value <identifiersep> of ( bucket <identifiersep> value <identifiersep> str ) ; \n \t4 forced <identifiersep> groups . put ( test <identifiersep> name , bucket <identifiersep> value ) ; \n \t3 } catch ( final number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 } catch ( resource <identifiersep> manager <identifiersep> exception e ) { \n \t1 throw ( xa <identifiersep> exception ) new xa <identifiersep> exception ( xa <identifiersep> exception . xaer <identifiersep> rmerr ) . init <identifiersep> cause ( e ) ; } } \n public void forget ( xid xid ) throws xa <identifiersep> exception { \n <ect>
\t4 send <identifiersep> message . set <identifiersep> int <identifiersep> property ( <string_literal> , i ) ; \n \t4 jms <identifiersep> producer . send ( send <identifiersep> message ) ; \n \t4 producer <identifiersep> session . commit ( ) ; \n \t4 number <identifiersep> of <identifiersep> message <identifiersep> sent ++ ; } \n <ect>
\t6 query <identifiersep> map . put ( <string_literal> , string . value <identifiersep> of ( code ) ) ; \n \t6 query <identifiersep> map . put ( <string_literal> , string . value <identifiersep> of ( modifiers ) ) ; \n \t6 handle <identifiersep> client <identifiersep> event ( viewer , event , query <identifiersep> map ) ; } } \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 if ( ! router <identifiersep> info . is <identifiersep> valid ( ) ) { \n \t3 <comment> \n \t3 process <identifiersep> store <identifiersep> failure ( key , router <identifiersep> info ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t8 result . set <identifiersep> content <identifiersep> type ( <string_literal> ) ; \n \t8 result . set <identifiersep> location ( <string_literal> ) ; \n \t8 result . execute ( inv ) ; \n \t7 } catch ( exception ex ) { \n <ect>
\t3 if ( backend <identifiersep> response . get <identifiersep> code ( ) != http <identifiersep> status . sc <identifiersep> not <identifiersep> modified ) { \n \t4 return handle <identifiersep> backend <identifiersep> response ( target , request , scope , request <identifiersep> date , response <identifiersep> date , backend <identifiersep> response ) ; } \n \t3 final header result <identifiersep> etag <identifiersep> header = backend <identifiersep> response . get <identifiersep> first <identifiersep> header ( header <identifiersep> constants . etag ) ; \n \t3 if ( result <identifiersep> etag <identifiersep> header == null ) { \n <ect>
\t1 public string get <identifiersep> name ( ) { \n \t2 if ( get <identifiersep> person ( ) != null && get <identifiersep> person ( ) . get <identifiersep> person <identifiersep> name ( ) != null ) { \n \t3 return get <identifiersep> person ( ) . get <identifiersep> person <identifiersep> name ( ) . get <identifiersep> full <identifiersep> name ( ) ; \n \t2 } else { \n <ect>
\t3 { \n \t4 mekanism . add <identifiersep> enrichment <identifiersep> chamber <identifiersep> recipe ( is , this . pro <identifiersep> output [ 0 ] . get <identifiersep> item <identifiersep> stack ( ) ) ; } \n \t3 catch ( final java . lang . runtime <identifiersep> exception err ) \n \t3 { \n <ect>
\t4 content <identifiersep> generator . put <identifiersep> variable ( <string_literal> , comments ) \n \t4 notifiers . for <identifiersep> each { \n \t5 val notifier <identifiersep> full <identifiersep> name = it . display <identifiersep> name \n \t5 if ( notifier <identifiersep> full <identifiersep> name == null ) { \n <ect>
\t2 <comment> \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 try { \n \t4 exec <identifiersep> command ( <string_literal> + pid ) ; \n <ect>
\t7 if ( delay <identifiersep> before <identifiersep> start <identifiersep> of <identifiersep> block > 0 ) { \n \t8 unchecked <identifiersep> sleep ( delay <identifiersep> before <identifiersep> start <identifiersep> of <identifiersep> block ) ; \n \t8 unchecked <identifiersep> flush ( outstream ) ; } } \n \t6 if ( exclude <identifiersep> acknowledgement ( message <identifiersep> counter ) ) { \n <ect>
\t3 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t1 log <identifiersep> log . error ( <string_literal> + pri <identifiersep> str + \n \t3 <string_literal> , oops ) ; \n \t1 return ; } } } \n <ect>
\t5 detected <identifiersep> errors . add ( error ) \n \t5 detected <identifiersep> whitelist <identifiersep> errors . add ( error [ <number_literal> ] ) \n \t4 } else { \n \t5 parsed <identifiersep> errors . add ( error ) } } } \n <ect>
public void set <identifiersep> person ( com . secretpal . model . sp <identifiersep> person value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value ,  <identifiersep> sp <identifiersep> membership . person <identifiersep> key ) ; } \n public void set <identifiersep> person <identifiersep> relationship ( com . secretpal . model . sp <identifiersep> person value ) { \n <ect>
\t3 flink . start ( true ) ; \n \t3 <comment> \n \t3 log . info ( <string_literal> ) ; \n \t3 actor <identifiersep> gateway job <identifiersep> manager = await . result ( flink . leader <identifiersep> gateway ( ) . future ( ) , deadline . time <identifiersep> left ( ) ) ; \n <ect>
\t4 return ; } \n \t3 try { \n \t4 fail <identifiersep> next <identifiersep> host ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 if ( condition . get <identifiersep> limit ( ) != null ) { \n \t1 sb . append ( <string_literal> ) . append ( condition . get <identifiersep> limit ( ) ) ; } \n \t1 string query = sb . to <identifiersep> string ( ) ; \n <ect>
\t3 stream . close ( ) ; \n \t3 if ( ( null != response ) && ( null == response . get <identifiersep> push <identifiersep> error ( ) ) ) { \n \t4 result = true ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( d < min ) { \n \t3 logger . error ( this , <string_literal> + d , new exception ( <string_literal> ) ) ; \n \t3 d = min ; } \n \t2 if ( d > max ) { \n <ect>
\t1 public result on ( class < ? extends exception > exception ) { \n \t2 return exceptions . record ( exception ) ; } \n \t1 @ override \n \t1 public result include ( string key , object value ) { \n <ect>
\t2 workspace workspace = initialize <identifiersep> workspace ( context <identifiersep> parameters ) ; \n \t2 logger . debug ( <string_literal> , source <identifiersep> name ) ; \n \t2 try \n \t2 { \n <ect>
\t6 for ( map . entry < string , string > entry : segment . get <identifiersep> dictionaries ( ) . entry <identifiersep> set ( ) ) { \n \t7 if ( entry . get <identifiersep> value ( ) . equals <identifiersep> ignore <identifiersep> case ( item ) ) { \n \t8 entry . set <identifiersep> value ( dict <identifiersep> saved . get <identifiersep> resource <identifiersep> path ( ) ) ; } } } \n \t5 dst <identifiersep> store . put <identifiersep> resource ( cube <identifiersep> res <identifiersep> path , cube , cube <identifiersep> serializer ) ; \n <ect>
\t2 final endpoint <identifiersep> description endpoint = ua <identifiersep> tcp <identifiersep> stack <identifiersep> client . get <identifiersep> endpoints ( this . configuration . get <identifiersep> endpoint <identifiersep> uri ( ) ) . then <identifiersep> apply ( endpoints - > { \n \t4 log . debug ( <string_literal> ) ; \n \t4 for ( final endpoint <identifiersep> description ep : endpoints ) { \n <ect>
\t3 s <identifiersep> logger . error ( msg , e ) ; \n \t3 return new answer ( cmd , false , msg ) ; } } \n \t1 protected answer execute ( delete <identifiersep> storage <identifiersep> pool <identifiersep> command cmd ) { \n <ect>
\t2 } else { \n \t3 rdf <identifiersep> format format ; \n \t3 long start <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 if ( verbose ) { \n <ect>
\t2 search <identifiersep> request <identifiersep> builder . set <identifiersep> paging ( query , 0 , max <identifiersep> results ) ; \n \t2 list < long > activity <identifiersep> ids = query . get <identifiersep> result <identifiersep> list ( ) ; \n \t2 { \n <ect>
\t6 inject <identifiersep> source <identifiersep> name . set <identifiersep> value ( next , source <identifiersep> name ) ; } } \n \t4 return next ; \n \t3 } catch ( exception ex ) { \n \t4 if ( ! ignore <identifiersep> marks <identifiersep> errors ) { \n <ect>
\t7 current <identifiersep> stage . to <identifiersep> string ( ) ) ; \n \t5 if ( current <identifiersep> stage . is <identifiersep> stage <identifiersep> mandatory ( ) == false ) { \n \t6 <comment> \n \t6 <comment> \n <ect>
\t1 string min <identifiersep> open <identifiersep> info = <string_literal> ; \n \t1 if ( write <identifiersep> ids . get <identifiersep> min <identifiersep> open <identifiersep> write <identifiersep> id ( ) != null ) { \n \t2 min <identifiersep> open <identifiersep> info = <string_literal> + java <identifiersep> utils . write <identifiersep> id <identifiersep> to <identifiersep> string ( write <identifiersep> ids . get <identifiersep> min <identifiersep> open <identifiersep> write <identifiersep> id ( ) ) + \n \t2 <string_literal> ; } \n <ect>
\t3 response = ( security <identifiersep> token <identifiersep> response ) action <identifiersep> controller . execute ( current <identifiersep> context , \n \t5 get <identifiersep> security <identifiersep> token <identifiersep> for <identifiersep> consumer <identifiersep> request <identifiersep> action ) ; } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t3 writer . output ( xml <identifiersep> document , new buffered <identifiersep> output <identifiersep> stream ( os ) ) ; \n \t2 } else if ( type . is <identifiersep> text <identifiersep> type ( ) ) { <comment> \n \t3 write <identifiersep> to ( new output <identifiersep> stream <identifiersep> writer ( os , <string_literal> ) ) ; \n \t2 } else { <comment> \n <ect>
\t4 recurring <identifiersep> network <identifiersep> usage <identifiersep> command watch = new recurring <identifiersep> network <identifiersep> usage <identifiersep> command (  <identifiersep> interval ) ; \n \t4 try { \n \t5  <identifiersep> agent <identifiersep> mgr . send ( agent <identifiersep> id , new commands ( watch ) , this ) ; \n \t4 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t3 assert <identifiersep> equals ( <number_literal> , sl . offset ( ) ) ; \n \t3 throwable cause = fe . get <identifiersep> cause ( ) ; \n \t3 assert <identifiersep> true ( cause instanceof parser <identifiersep> exception ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> , result , script <identifiersep> file ) ; \n \t4 return result . to <identifiersep> string ( ) ; } \n \t2 } catch ( final io <identifiersep> exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } \n <ect>
\t5 . on <identifiersep> error <identifiersep> resume ( t - > error ? mono . error ( t ) : handle <identifiersep> send <identifiersep> error ( request <identifiersep> message , t ) ) ; \n \t2 } ) ; } \n \t1 private mono < message < ? > > handle <identifiersep> send <identifiersep> error ( message < ? > request <identifiersep> message , throwable exception ) { \n <ect>
\t5 consumer <identifiersep> started . count <identifiersep> down ( ) ; \n \t5 active <identifiersep> mq <identifiersep> object <identifiersep> message message = ( active <identifiersep> mq <identifiersep> object <identifiersep> message ) consumer . receive ( <number_literal> ) ; \n \t5 if ( message != null ) { \n \t6 my <identifiersep> object object = ( my <identifiersep> object ) message . get <identifiersep> object ( ) ; \n <ect>
\t4 } catch ( runtime <identifiersep> exception e ) { \n \t5 logger . error ( <string_literal> , get <identifiersep> name ( ) , e ) ; } \n \t4 pause ( refresh <identifiersep> interval ) ; } \n \t3 refresh <identifiersep> thread = null ; \n <ect>
\t5 <comment> \n \t5 set <identifiersep> need <identifiersep> to <identifiersep> restart ( true ) ; } \n \t4 remove <identifiersep> request ( request ) ; \n \t4 throw new io <identifiersep> exception ( <string_literal> + name ( ) + <string_literal> ) ; } } \n <ect>
\t3 if ( s != null ) { \n \t4 try { \n \t5 s . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . warn ( <string_literal> + src <identifiersep> host <identifiersep> id ) ; \n \t4  <identifiersep> resource <identifiersep> mgr . maintenance <identifiersep> failed ( src <identifiersep> host <identifiersep> id ) ; } \n \t3 return null ; \n \t2 } catch ( insufficient <identifiersep> server <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t1 permission p ; \n \t1 try { \n \t2 p = permission . load ( o ) ; \n \t1 } catch ( exception exp ) { \n <ect>
<comment> \n \t1 public static void register <identifiersep> udf ( string udffile , string namespace ) \n \t3 throws io <identifiersep> exception { \n <ect>
\t3 callback = new callback ( ) { \n \t4 @ override \n \t4 public void on <identifiersep> completion ( record <identifiersep> metadata metadata , exception e ) { \n \t5 if ( e != null ) { \n <ect>
\t4 } catch ( interrupted <identifiersep> exception ie ) { \n \t5 log . debug ( <string_literal> + ie ) ; } } \n \t3 consumer . close ( ) ; \n \t3 log . info ( <string_literal> ) ; \n <ect>
\t3 } catch ( storage <identifiersep> format <identifiersep> exception e ) { \n \t4 logger . error ( this , <string_literal> + e , e ) ; \n \t4 return false ; \n \t3 } catch ( resume <identifiersep> failed <identifiersep> exception e ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 session1 = commit ( server1 , session1 ) ; \n \t2 <comment> \n \t2 sessions1 = get <identifiersep> sessions ( session1 ) ; \n \t2 sessions2 = get <identifiersep> sessions ( session2 ) ; \n <ect>
public response do <identifiersep> get ( @ path <identifiersep> param ( <string_literal> ) string context <identifiersep> id , @ path <identifiersep> param ( <string_literal> ) string resource <identifiersep> id ) \n \t1 throws object <identifiersep> factory <identifiersep> exception , plugin <identifiersep> bean <identifiersep> exception , io <identifiersep> exception , uri <identifiersep> syntax <identifiersep> exception { \n \t1 for ( object key : http <identifiersep> servlet <identifiersep> request . get <identifiersep> parameter <identifiersep> map ( ) . key <identifiersep> set ( ) ) { \n <ect>
\t6 } catch ( exception e ) { \n \t7 logger . error ( <string_literal> + connection + <string_literal> + e . get <identifiersep> message ( ) , e ) ; \n \t7 lb . mark <identifiersep> server <identifiersep> down ( server ) ; } } } } } \n \t2 if ( connection == null ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 int [ ] ref <identifiersep> count = token <identifiersep> ref <identifiersep> map . get ( token <identifiersep> identifier ) ; \n \t1 if ( ref <identifiersep> count == null ) { \n <ect>
\t1 } else if ( ! largest <identifiersep> idle <identifiersep> mem <identifiersep> tablets . is <identifiersep> empty ( ) ) { \n \t2 start <identifiersep> min <identifiersep> c = true ; \n \t2 <comment> \n \t2 largest <identifiersep> mem <identifiersep> tablets = largest <identifiersep> idle <identifiersep> mem <identifiersep> tablets ; \n <ect>
\t2 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( index <identifiersep> name ) . set <identifiersep> size ( 0 ) . get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( ( long ) nb <identifiersep> docs ) ) ; } \n \t1 public void test <identifiersep> deletion <identifiersep> of <identifiersep> failing <identifiersep> to <identifiersep> recover <identifiersep> index <identifiersep> should <identifiersep> stop <identifiersep> restore ( ) throws exception { \n \t2 path repository <identifiersep> location = random <identifiersep> repo <identifiersep> path ( ) ; \n \t2 client client = client ( ) ; \n <ect>
\t4 if ( access <identifiersep> control <identifiersep> max <identifiersep> age != null ) { \n \t5 response . set <identifiersep> access <identifiersep> control <identifiersep> max <identifiersep> age ( access <identifiersep> control <identifiersep> max <identifiersep> age ) ; } \n \t3 } else { \n \t4 <comment> \n <ect>
\t3 assert rsrc3 != null ; \n \t3 assert rsrc4 != null ; \n \t3 assert log != null ; \n \t3 log . info ( <string_literal> + rsrc1 ) ; \n <ect>
\t2 try { \n \t3 if ( an <identifiersep> object instanceof string ) { \n \t4 number = ( number ) number <identifiersep> format <identifiersep> value <identifiersep> for <identifiersep> string ( ( string ) an <identifiersep> object ) ; \n \t3 } else if ( an <identifiersep> object != null && ! ( an <identifiersep> object instanceof number ) ) { \n <ect>
\t1 <comment> \n \t1 log . info ( <string_literal> , table2 ) ; \n \t1 c . table <identifiersep> operations ( ) . offline ( table2 , true ) ; \n \t1 log . info ( <string_literal> , table2 ) ; \n <ect>
<comment> \n \t5 final duration delta = duration . between ( message <identifiersep> time <identifiersep> end , message <identifiersep> time <identifiersep> start ) ; \n \t5 if ( delta . to <identifiersep> nanos ( ) / <number_literal> > read <identifiersep> lag <identifiersep> time . to <identifiersep> nanos ( ) ) { \n <ect>
\t4 } else { \n \t5 system . err . println ( <string_literal> + jar <identifiersep> name ( ) + <string_literal> + fetching <identifiersep> version + <string_literal> + available <identifiersep> version ) ; } \n \t4 is <identifiersep> fetching = true ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 { \n \t3 document = xml <identifiersep> utils . create <identifiersep> document ( ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t3 { \n \t4 return true ; } } \n \t2 catch ( throwable ex ) \n \t2 { \n <ect>
\t6 + <string_literal> ) ; \n \t4 answer [ ] answers =  <identifiersep> agent <identifiersep> mgr . send ( host <identifiersep> id , cmds ) ; \n \t4 handle <identifiersep> setup <identifiersep> bridge <identifiersep> answer ( answers ) ; \n \t3 } catch ( operation <identifiersep> timedout <identifiersep> exception | agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t2 } else if ( name . equals ( property <identifiersep> specific <identifiersep> option . property <identifiersep> name ) ) { \n \t3 try { \n \t4 set <identifiersep> property <identifiersep> specific <identifiersep> option ( property <identifiersep> specific <identifiersep> option . value <identifiersep> of ( value . to <identifiersep> upper <identifiersep> case ( ) ) ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t4 builder . append ( <string_literal> ) . append ( exception . get <identifiersep> column <identifiersep> number ( ) ) ; \n \t4 builder . append ( <string_literal> ) . append ( exception . get <identifiersep> public <identifiersep> id ( ) ) ; \n \t4 builder . append ( <string_literal> ) . append ( exception . get <identifiersep> system <identifiersep> id ( ) ) ; \n \t4 builder . append ( <string_literal> ) . append ( exception . get <identifiersep> localized <identifiersep> message ( ) ) ; \n <ect>
\t2 <comment> \n \t2 series . remove <identifiersep> all ( standard <identifiersep> headers ) ; \n \t2 <comment> \n \t2 log . debug ( <string_literal> , extension <identifiersep> headers . get <identifiersep> headers ( ) . size ( ) ) ; \n <ect>
<comment> \n \t1 public void next <identifiersep> iteration ( ) { \n \t2 m <identifiersep> ticker . reschedule <identifiersep> timed <identifiersep> job ( this , m <identifiersep> name , 0 ) ; } \n \t1 protected void abort <identifiersep> all <identifiersep> transfers ( ) { \n <ect>
\t5 try { \n \t6  <identifiersep> vm <identifiersep> mgr . destroy <identifiersep> vm ( vm . get <identifiersep> id ( ) , false ) ; \n \t5 } catch ( exception e ) { \n \t6 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t4 try { \n \t5 long value = long . parse <identifiersep> long ( property ) ; \n \t5 this . set <identifiersep> min <identifiersep> evictable <identifiersep> idle <identifiersep> time <identifiersep> millis ( value ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 if ( p != null ) { \n \t2 try { \n \t3 logger . info ( <string_literal> , get <identifiersep> pool <identifiersep> name ( ) ) ; \n \t3 p . shutdown ( ) ; \n <ect>
\t5 <comment> \n \t5 if ( connection != null ) { \n \t6 connection . close ( ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t3 if ( remove <identifiersep> bouncy <identifiersep> castle ) { \n \t4 try { \n \t5 security . remove <identifiersep> provider ( bouncy <identifiersep> castle <identifiersep> provider . provider <identifiersep> name ) ; \n \t4 } catch ( security <identifiersep> exception ex ) { \n <ect>
\t3 message . set <identifiersep> int <identifiersep> property ( <string_literal> , i ) ; \n \t3 log . debug ( <string_literal> , message <identifiersep> text ) ; \n \t3 producer . send ( message ) ; } \n \t2 <comment> \n <ect>
\t3 soap <identifiersep> ui . log <identifiersep> error ( e ) ; \n \t3 throw new schema <identifiersep> exception ( e , error <identifiersep> list ) ; \n \t2 } finally { \n \t3 for ( int c = 0 ; c < error <identifiersep> list . size ( ) ; c ++ ) { \n <ect>
\t1 private void release <identifiersep> lease ( ) throws io <identifiersep> exception { \n \t2 try { \n \t3 blob . release <identifiersep> lease ( access <identifiersep> condition . generate <identifiersep> lease <identifiersep> condition ( lease <identifiersep> id ) ) ; \n \t3 blob . delete ( ) ; \n <ect>
\t2 public void run ( ) { \n \t3 logger . trace ( <string_literal> ) ; \n \t3 if ( ( receive <identifiersep> thread != null && ! receive <identifiersep> thread . is <identifiersep> alive ( ) ) || ( send <identifiersep> thread != null && ! send <identifiersep> thread . is <identifiersep> alive ( ) ) \n \t5 || ( input <identifiersep> thread != null && ! input <identifiersep> thread . is <identifiersep> alive ( ) ) ) { \n <ect>
\t2 rotary <identifiersep> encoder rotary <identifiersep> encoder = model <identifiersep> factory . e <identifiersep> instance . create <identifiersep> rotary <identifiersep> encoder ( ) ; \n \t2 rotary <identifiersep> encoder . set <identifiersep> uid ( get <identifiersep> uid ( ) ) ; \n \t2 string sub <identifiersep> id <identifiersep> encoder = <string_literal> ; \n \t2 rotary <identifiersep> encoder . set <identifiersep> sub <identifiersep> id ( sub <identifiersep> id <identifiersep> encoder ) ; \n <ect>
\t4 try { \n \t5 decimal <identifiersep> format my <identifiersep> formatter = new decimal <identifiersep> format ( file <identifiersep> name ) ; \n \t5 file <identifiersep> name = my <identifiersep> formatter . format ( my <identifiersep> current ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t4 string filename = old <identifiersep> attachment . get <identifiersep> filename ( ) ; \n \t4 x <identifiersep> wiki <identifiersep> attachment equivalent <identifiersep> attachment = tdoc . get <identifiersep> attachment ( filename ) ; \n \t4 if ( equivalent <identifiersep> attachment == null ) { \n \t5 <comment> \n <ect>
\t4 monitor . start <identifiersep> timer ( <string_literal> ) ; } \n \t3 for ( string element : create <identifiersep> sql ) { \n \t4 sql = element ; \n <ect>
\t2 try { \n \t2 file f = new file ( new uri ( config <identifiersep> file ) ) ; \n \t2 if ( f . exists ( ) && ! f . is <identifiersep> directory ( ) ) { \n \t3 xml <identifiersep> config . add <identifiersep> resource ( f . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ) ; \n <ect>
\t4 @ override \n \t4 public void on <identifiersep> no <identifiersep> longer <identifiersep> master ( string source ) { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t5 { \n \t6 iter . remove ( ) ; \n \t6 { \n <ect>
\t2 partition p = db . get <identifiersep> partition ( table , part <identifiersep> spec , false ) ; \n \t2 if ( p != null ) { \n \t3 parts . add ( p ) ; } \n \t2 } catch ( hive <identifiersep> exception e ) { \n <ect>
\t3 if ( result != null ) { \n \t4 s <identifiersep> logger . info ( <string_literal> + vm <identifiersep> name ) ; \n \t4 if ( result == script . err <identifiersep> timeout ) { \n \t5 result = vm <identifiersep> mgr . stop <identifiersep> vm ( vm <identifiersep> name , true ) ; } \n <ect>
\t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t5 uc . add ( new trivial <identifiersep> error <identifiersep> update ( <string_literal> + ontology . get <identifiersep> absolute <identifiersep> path ( ) + <string_literal> ) ) ; } } \n \t3 <comment> \n \t3 ontology <identifiersep> manager . update <identifiersep> cache ( ) ; \n \t2 } else { \n <ect>
\t2 log . info ( <string_literal> + hosts . get <identifiersep> coordinator ( ) ) ; \n \t2 hosts . coordinator . instance . await ( ) ; \n \t2 coordinator . instance . initialize ( host <identifiersep> map . values ( ) ) ; \n \t2 <comment> <ect>
\t3 { \n \t4 set <identifiersep> method = find <identifiersep> setter ( get <identifiersep> method , object . get <identifiersep> class ( ) ) ; } \n \t3 if ( set <identifiersep> method == null ) \n \t3 { \n <ect>
\t6 connected = false ; \n \t6 connect <identifiersep> socket ( ) ; \n \t5 } catch ( exception ex ) { \n \t6 logger . error ( <string_literal> , ex ) ; } } } \n <ect>
\t1 <comment> \n \t1 for ( string group : unix <identifiersep> user <identifiersep> groups ) { \n \t2 group <identifiersep> entity group <identifiersep> entity = users . get <identifiersep> group <identifiersep> entity ( group , group <identifiersep> type . pam ) ; \n \t2 if ( group <identifiersep> entity == null ) { \n <ect>
\t1 h <identifiersep> cat <identifiersep> input <identifiersep> format hif = h <identifiersep> cat <identifiersep> input <identifiersep> format . set <identifiersep> input ( h <identifiersep> cat <identifiersep> job , h <identifiersep> cat <identifiersep> database <identifiersep> name , \n \t1 h <identifiersep> cat <identifiersep> table <identifiersep> name ) ; \n \t1 <comment> \n \t1 if ( filter <identifiersep> str != null ) { \n <ect>
\t4 s <identifiersep> logger . trace ( <string_literal> ) ; \n \t2 } else { \n \t4 s <identifiersep> logger . trace ( <string_literal> ) ; \n <ect>
\t2 < p > reload this page with open console , enter text and hit the log button . . . < / p > \n \t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n <ect>
<comment> \n \t3 if ( port <identifiersep> state == port <identifiersep> state . closed ) { \n \t4 <comment> \n <ect>
\t2 ve . evaluate ( batch ) ; } \n \t1 final int input <identifiersep> logical <identifiersep> size = batch . size ; \n \t1 if ( input <identifiersep> logical <identifiersep> size == 0 ) { \n <ect>
\t3 string header = response . get <identifiersep> header <identifiersep> string ( validation . validation <identifiersep> header ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( <string_literal> , header ) ; \n \t3 assert . assert <identifiersep> true ( <string_literal> , boolean . value <identifiersep> of ( header ) ) ; \n \t3 object entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t1 return txn ; } \n \t1 private static raw <identifiersep> store new <identifiersep> raw <identifiersep> store <identifiersep> for <identifiersep> conf ( configuration conf ) throws meta <identifiersep> exception { \n \t1 configuration new <identifiersep> conf = new configuration ( conf ) ; \n \t1 string raw <identifiersep> store <identifiersep> class <identifiersep> name = metastore <identifiersep> conf . get <identifiersep> var ( new <identifiersep> conf , conf <identifiersep> vars . raw <identifiersep> store <identifiersep> impl ) ; \n <ect>
\t1 public void test <identifiersep> search ( ) throws exception { \n \t2 <comment> \n \t2 final com . braintreegateway . resource <identifiersep> collection result = request <identifiersep> body ( <string_literal> , null ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
<comment> \n \t1 public void write <identifiersep> message ( string port , msg m ) throws io <identifiersep> exception { \n \t2 port p = get <identifiersep> port ( port ) ; \n \t2 if ( p == null ) { \n <ect>
\t3 logger . debug ( <string_literal> , command <identifiersep> line ) ; \n \t2 } catch ( execute <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> + command <identifiersep> line + <string_literal> , e ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 } , <string_literal> ) ; } \n @ override \n protected cache <identifiersep> value load <identifiersep> value ( final cache <identifiersep> key key ) { \n \t1 resource <identifiersep> watcher <identifiersep> scheduler . schedule <identifiersep> with <identifiersep> period ( get <identifiersep> resource <identifiersep> watcher <identifiersep> update <identifiersep> period ( ) , get <identifiersep> time <identifiersep> unit <identifiersep> for <identifiersep> resource <identifiersep> watcher ( ) ) ; \n <ect>
\t3 harvest <identifiersep> row . set <identifiersep> harvest <identifiersep> message ( <string_literal> ) ; \n \t3 harvest <identifiersep> row . set <identifiersep> harvest <identifiersep> status ( harvested <identifiersep> collection . status <identifiersep> unknown <identifiersep> error ) ; \n \t3 harvested <identifiersep> collection . update ( our <identifiersep> context , harvest <identifiersep> row ) ; \n \t3 alert <identifiersep> admin ( harvested <identifiersep> collection . status <identifiersep> unknown <identifiersep> error , ex ) ; \n <ect>
\t2 } catch ( json <identifiersep> parse <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> + to <identifiersep> parse , e ) ; \n \t3 return null ; \n \t2 } catch ( json <identifiersep> mapping <identifiersep> exception e ) { \n <ect>
\t7 logger . info ( <string_literal> + status + <string_literal> ) ; \n \t6 source <identifiersep> contact . set <identifiersep> status <identifiersep> message ( status ) ; } } } \n <ect>
\t3 level <identifiersep> db <identifiersep> data <identifiersep> store . init ( this . data <identifiersep> store <identifiersep> config , transfer <identifiersep> queue , my <identifiersep> sql <identifiersep> data <identifiersep> store ) ; \n \t3 try { \n \t4 my <identifiersep> sql <identifiersep> data <identifiersep> store . init ( this . data <identifiersep> store <identifiersep> config , transfer <identifiersep> queue , end <identifiersep> of <identifiersep> the <identifiersep> line <identifiersep> map <identifiersep> store ) ; \n \t3 } catch ( exception ex ) { \n <ect>
public integer int <identifiersep> lock ( ) { \n \t1 return ( integer ) stored <identifiersep> value <identifiersep> for <identifiersep> key (  <identifiersep> er <identifiersep> session <identifiersep> info . int <identifiersep> lock <identifiersep> key ) ; } \n public void set <identifiersep> int <identifiersep> lock ( integer value ) { \n <ect>
\t5 s <identifiersep> logger . info ( <string_literal> + vm + <string_literal> ) ; \n \t5 return null ; } \n \t3 } else if ( work . get <identifiersep> work <identifiersep> type ( ) == work <identifiersep> type . force <identifiersep> stop ) { \n \t4 if ( ( vm . get <identifiersep> state ( ) != work . get <identifiersep> previous <identifiersep> state ( ) ) || vm . get <identifiersep> updated ( ) != work . get <identifiersep> update <identifiersep> time ( ) || vm . get <identifiersep> host <identifiersep> id ( ) == null || vm . get <identifiersep> host <identifiersep> id ( ) . long <identifiersep> value ( ) != work . get <identifiersep> host <identifiersep> id ( ) ) { \n <ect>
\t1 boolean run <identifiersep> sequential ) throws io <identifiersep> exception , interrupted <identifiersep> exception , class <identifiersep> not <identifiersep> found <identifiersep> exception { \n \t1 <comment> \n \t1 string delta = double . to <identifiersep> string ( convergence <identifiersep> delta ) ; \n <ect>
\t2 level level ; } \n \t1 protected object <identifiersep> name assert <identifiersep> registered <identifiersep> object <identifiersep> name ( string name ) throws malformed <identifiersep> object <identifiersep> name <identifiersep> exception , null <identifiersep> pointer <identifiersep> exception { \n \t2 object <identifiersep> name object <identifiersep> name = new object <identifiersep> name ( name ) ; \n \t2 if ( mbean <identifiersep> server . is <identifiersep> registered ( object <identifiersep> name ) ) { \n <ect>
<comment> \n \t1 public boolean check <identifiersep> callback <identifiersep> valid ( final registered <identifiersep> service registered <identifiersep> service , final string redirect <identifiersep> uri ) { \n \t2 final string registered <identifiersep> service <identifiersep> id = registered <identifiersep> service . get <identifiersep> service <identifiersep> id ( ) ; \n <ect>
\t1 string nullability = column . is <identifiersep> nullable ( ) ? <string_literal> : <string_literal> ; \n \t1 string size = column . get <identifiersep> size ( ) >= 0 ? string . value <identifiersep> of ( column . get <identifiersep> size ( ) ) : <string_literal> ; \n \t1 string alter <identifiersep> sql = format ( <string_literal> , \n \t1 column . get <identifiersep> table ( ) , column . get <identifiersep> column ( ) , column . get <identifiersep> data <identifiersep> type ( ) , size , expected <identifiersep> collation , nullability ) ; \n <ect>
\t2 logger . error ( <string_literal> , e1 ) } \n \t2 try { \n \t2 addresses . get <identifiersep> instance ( ) . unassign ( address , null ) \n \t2 } catch ( final exception e2 ) { \n <ect>
\t1 object <identifiersep> mapper mapper = new object <identifiersep> mapper ( ) ; \n \t1 input <identifiersep> stream is = \n \t2 exchange <identifiersep> utils . class . get <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ; \n \t1 if ( is == null ) { \n <ect>
\t3 biome <identifiersep> registrator registrator ; \n \t3 try { \n \t4 registrator = ( biome <identifiersep> registrator ) biome <identifiersep> registrator . new <identifiersep> instance ( ) ; \n \t3 } catch ( instantiation <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t1 if ( uses <identifiersep> implicit <identifiersep> feedback ) { \n \t1 user <identifiersep> y = user <identifiersep> features <identifiersep> mapping ( data <identifiersep> model . get <identifiersep> user <identifiersep> i <identifiersep> ds ( ) , data <identifiersep> model . get <identifiersep> num <identifiersep> users ( ) , features . get <identifiersep> u ( ) ) ; \n \t1 item <identifiersep> y = item <identifiersep> features <identifiersep> mapping ( data <identifiersep> model . get <identifiersep> item <identifiersep> i <identifiersep> ds ( ) , data <identifiersep> model . get <identifiersep> num <identifiersep> items ( ) , features . get <identifiersep> m ( ) ) ; } \n \t1 for ( int iteration = 0 ; iteration < num <identifiersep> iterations ; iteration ++ ) { \n <ect>
\t2 nicira <identifiersep> nvp <identifiersep> device <identifiersep> vo nicira <identifiersep> nvp <identifiersep> device = devices . get ( 0 ) ; \n \t2 host <identifiersep> vo nicira <identifiersep> nvp <identifiersep> host = host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( nicira <identifiersep> nvp <identifiersep> device . get <identifiersep> host <identifiersep> id ( ) ) ; \n \t2 nicira <identifiersep> nvp <identifiersep> router <identifiersep> mapping <identifiersep> vo routermapping = nicira <identifiersep> nvp <identifiersep> router <identifiersep> mapping <identifiersep> dao . find <identifiersep> by <identifiersep> network <identifiersep> id ( network . get <identifiersep> id ( ) ) ; \n \t2 if ( routermapping == null ) { \n <ect>
\t3 tr <identifiersep> row6 . append <identifiersep> child ( cell61 , cell62 ) \n \t3 tooltip <identifiersep> builder . append <identifiersep> row ( tr <identifiersep> row6 ) \n \t3 return tooltip <identifiersep> builder . create ( ) . write ( ) \n \t2 } catch ( e : exception ) { \n <ect>
\t4 } else if (  <identifiersep> state . get <identifiersep> data ( ) . get <identifiersep> type ( ) == database <identifiersep> entry . key <identifiersep> type <identifiersep> leaseset && \n \t6 ! supports <identifiersep> cert ( ( router <identifiersep> info ) ds , \n \t10 ( ( lease <identifiersep> set )  <identifiersep> state . get <identifiersep> data ( ) ) . get <identifiersep> destination ( ) . get <identifiersep> certificate ( ) ) ) { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t5 s <identifiersep> logger . info ( <string_literal> + dest . get <identifiersep> host ( ) + <string_literal> + ( start <identifiersep> answer == null ? <string_literal> : start <identifiersep> answer . get <identifiersep> details ( ) ) ) ; \n \t5 if ( start <identifiersep> answer != null && start <identifiersep> answer . get <identifiersep> context <identifiersep> param ( <string_literal> ) != null ) { \n \t6 break ; } \n \t4 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 if ( hystrix <identifiersep> execution <identifiersep> exception == null && camel <identifiersep> exchange <identifiersep> exception != null ) { \n \t4 throw camel <identifiersep> exchange <identifiersep> exception ; } \n <ect>
\t1 } else if ( file <identifiersep> type == file <identifiersep> type . avro <identifiersep> data <identifiersep> file ) { \n \t1 log . debug ( <string_literal> ) ; \n \t1 configure <identifiersep> generic <identifiersep> record <identifiersep> export <identifiersep> input <identifiersep> format ( job , table <identifiersep> name ) ; \n \t1 } else if ( file <identifiersep> type == file <identifiersep> type . parquet <identifiersep> file ) { \n <ect>
\t2 <comment> \n \t2 for ( class < ? > resource : config . get <identifiersep> root <identifiersep> resource <identifiersep> classes ( ) ) { \n \t3 if ( resource . is <identifiersep> annotation <identifiersep> present ( com . google . inject . singleton . class ) \n \t4 || resource . is <identifiersep> annotation <identifiersep> present ( javax . inject . singleton . class ) ) { \n <ect>
\t5 log . trace ( <string_literal> , \n \t7 check <identifiersep> point <identifiersep> cycles <identifiersep> with <identifiersep> no <identifiersep> gc , get <identifiersep> compact <identifiersep> acks <identifiersep> after <identifiersep> no <identifiersep> gc ( ) ) ; } \n \t4 journal <identifiersep> log <identifiersep> on <identifiersep> last <identifiersep> compaction <identifiersep> check = journal . get <identifiersep> current <identifiersep> data <identifiersep> file <identifiersep> id ( ) ; } } \n \t2 mdc . remove ( <string_literal> ) ; \n <ect>
\t3 logger . debug ( <string_literal> , get <identifiersep> default <identifiersep> theme <identifiersep> name ( ) ) ; \n \t3 return remember <identifiersep> theme <identifiersep> name ( request ) ; } \n \t2 final registered <identifiersep> service r <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 if ( r <identifiersep> service == null || ! r <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed ( ) ) { \n <ect>
<comment> \n public static void add <identifiersep> login <identifiersep> name <identifiersep> alias ( string ambari <identifiersep> user <identifiersep> name , string login <identifiersep> alias ) { \n \t1 servlet <identifiersep> request <identifiersep> attributes attr = ( servlet <identifiersep> request <identifiersep> attributes ) request <identifiersep> context <identifiersep> holder . get <identifiersep> request <identifiersep> attributes ( ) ; \n \t1 if ( attr != null ) { \n <ect>
\t1 for ( ambari <identifiersep> update <identifiersep> event . type type : ambari <identifiersep> update <identifiersep> event . type . values ( ) ) { \n \t1 events . put ( type , 0l ) ; } } \n @ override \n public void start ( ) { \n <ect>
\t1 throw new runtime <identifiersep> exception ( e ) ; } } \n private protocol <identifiersep> type create <identifiersep> proxy ( final llap <identifiersep> node <identifiersep> id node <identifiersep> id , token < token <identifiersep> type > node <identifiersep> token ) { \n \t1 if ( node <identifiersep> token == null && token == null ) { \n <ect>
\t2 if user : \n \t2 command = user <identifiersep> erase <identifiersep> cmd . format ( user ) \n \t2 ( returncode , stdoutdata , stderrdata ) = self . run <identifiersep> os <identifiersep> command ( command ) \n \t2 if returncode != 0 : \n <ect>
\t3 return job <identifiersep> store <identifiersep> git . fetch <identifiersep> job <identifiersep> config <identifiersep> from <identifiersep> history ( job <identifiersep> id , commit <identifiersep> id ) ; \n \t2 } catch ( io <identifiersep> exception io ) { \n \t3 log . warn ( <string_literal> + job <identifiersep> id + <string_literal> + io , io ) ; \n \t2 } catch ( git <identifiersep> api <identifiersep> exception g ) { \n <ect>
\t4 } catch ( not <identifiersep> connected <identifiersep> exception e ) { \n \t5 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> ) ; \n \t5 return ; \n \t4 } catch ( sync <identifiersep> send <identifiersep> waited <identifiersep> too <identifiersep> long <identifiersep> exception e ) { \n <ect>
\t4 this . logger . info ( <string_literal> , document <identifiersep> diff . get <identifiersep> previous <identifiersep> reference ( ) ) ; \n \t3 } else if ( document <identifiersep> diff . get <identifiersep> previous <identifiersep> reference ( ) == null ) { \n \t4 this . logger . info ( <string_literal> , document <identifiersep> diff . get <identifiersep> next <identifiersep> reference ( ) ) ; \n \t3 } else if ( differences <identifiersep> count > 0 ) { \n <ect>
\t3 current <identifiersep> phase <identifiersep> enabled ( false ) ; \n \t3 set <identifiersep> interact <identifiersep> this <identifiersep> analysis ( false ) ; } } \n \t1 public void handle <identifiersep> cfg <identifiersep> event ( directed <identifiersep> graph < ? > g ) { \n \t2 if ( current <identifiersep> phase <identifiersep> enabled ( ) ) { \n <ect>
\t4 log . warn ( e . to <identifiersep> string ( ) ) ; } \n \t3 result . set <identifiersep> result <identifiersep> for <identifiersep> failure ( e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 set <identifiersep> last <identifiersep> used ( \n \t4 get <identifiersep> workbench <identifiersep> property ( last <identifiersep> used2 ) , get <identifiersep> workbench <identifiersep> property ( \n \t5 last <identifiersep> used2 <identifiersep> url ) ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t3 send <identifiersep> response ( resp , <string_literal> ) ; \n \t3 return ; } \n \t2 host <identifiersep> vo host =  <identifiersep> ms . get <identifiersep> host <identifiersep> by ( vm . get <identifiersep> host <identifiersep> id ( ) ) ; \n \t2 if ( host == null ) { \n <ect>
\t2 so <identifiersep> proc <identifiersep> ctx . stop <identifiersep> process = true ; \n \t2 pctx . set <identifiersep> fetch <identifiersep> task ( null ) ; } } } \n \t1 private column <identifiersep> statistics <identifiersep> data validate <identifiersep> single <identifiersep> col <identifiersep> stat ( list < column <identifiersep> statistics <identifiersep> obj > stat <identifiersep> obj ) { \n \t1 if ( stat <identifiersep> obj . size ( ) > 1 ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + e . to <identifiersep> string ( ) ) ; } \n \t2 if ( config <identifiersep> file == null || properties <identifiersep> util . find <identifiersep> config <identifiersep> file ( config <identifiersep> file ) == null ) { \n \t3 config <identifiersep> file = <string_literal> ; \n \t3 if ( properties <identifiersep> util . find <identifiersep> config <identifiersep> file ( config <identifiersep> file ) == null ) { \n <ect>
\t1 media <identifiersep> type media <identifiersep> type ; \n \t1 try { \n \t2 media <identifiersep> type = media <identifiersep> type . value <identifiersep> of ( wrapper . get <identifiersep> mimetype ( ) ) ; \n \t1 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t3 if ( can <identifiersep> be <identifiersep> deleted ) { \n \t4 arg0 . get <identifiersep> rbd ( ) . close ( image ) ; \n \t4 image = null ; \n <ect>
\t3 key <identifiersep> file = new file ( url . get <identifiersep> path ( ) ) ; } \n \t2 if ( key <identifiersep> file == null || ! key <identifiersep> file . exists ( ) ) { \n \t3 file <identifiersep> path = s <identifiersep> default <identifiersep> path <identifiersep> system <identifiersep> vm <identifiersep> key <identifiersep> file ; \n \t3 key <identifiersep> file = new file ( file <identifiersep> path ) ; \n <ect>
\t2 <comment> <ect>
<comment> \n \t1 public synchronized void set <identifiersep> expired <identifiersep> from <identifiersep> cache ( ) { \n \t1 if ( users . get ( ) != 0 ) { \n <ect>
\t4 copy <identifiersep> local <identifiersep> to <identifiersep> nfs ( tmp <identifiersep> iso <identifiersep> store , new file ( cmd . get <identifiersep> iso <identifiersep> file ( ) ) , cmd . get <identifiersep> dest <identifiersep> store ( ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 return new answer ( cmd , e ) ; \n \t3 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t3 if ( configuration . get <identifiersep> decoder <identifiersep> max <identifiersep> line <identifiersep> length ( ) > 0 ) { \n \t4 codec <identifiersep> factory . set <identifiersep> decoder <identifiersep> max <identifiersep> line <identifiersep> length ( configuration . get <identifiersep> decoder <identifiersep> max <identifiersep> line <identifiersep> length ( ) ) ; } \n \t3 add <identifiersep> codec <identifiersep> factory ( service , codec <identifiersep> factory ) ; \n <ect>
\t1 import <identifiersep> handler <identifiersep> mime <identifiersep> type <identifiersep> definitions = from <identifiersep> xml ( input <identifiersep> stream ) ; \n \t1 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t1 log . error ( <string_literal> <string_literal> \\ <string_literal> , e ) ; \n \t1 } catch ( jaxb <identifiersep> exception e ) { \n <ect>
\t4 snapshot <identifiersep> info snapshot <identifiersep> info = snapshots <identifiersep> status <identifiersep> response . get <identifiersep> snapshots ( ) . get ( 0 ) ; \n \t4 assert <identifiersep> equals ( snapshot <identifiersep> state . success , snapshot <identifiersep> info . state ( ) ) ; \n \t4 assert <identifiersep> equals ( snapshot <identifiersep> info . total <identifiersep> shards ( ) , snapshot <identifiersep> info . successful <identifiersep> shards ( ) ) ; \n \t4 assert <identifiersep> equals ( 0 , snapshot <identifiersep> info . failed <identifiersep> shards ( ) ) ; \n <ect>
\t3 try { \n \t4 uri str = new uri ( download <identifiersep> url ) ; \n \t4 uripath = str . get <identifiersep> path ( ) ; \n \t3 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t3 subject = node ( triple . get <identifiersep> subject ( ) , vf ) ; } \n \t2 try { \n \t3 predicate = vf . create <identifiersep> iri ( triple . get <identifiersep> predicate ( ) . get <identifiersep> iri ( ) . to <identifiersep> string ( ) ) ; \n \t2 } catch ( @ suppress <identifiersep> warnings ( <string_literal> ) illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> + db <identifiersep> version + <string_literal> + current <identifiersep> version ) ; \n \t4 if ( db <identifiersep> version . compare <identifiersep> to ( current <identifiersep> version ) > 0 ) { \n \t5 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + db <identifiersep> version + <string_literal> + current <identifiersep> version <identifiersep> value ) ; } \n \t4 if ( db <identifiersep> version . compare <identifiersep> to ( current <identifiersep> version ) == 0 ) { \n <ect>
\t2 if ( port <identifiersep> identifier . is <identifiersep> currently <identifiersep> owned ( ) ) { \n \t3 throw new exception ( <string_literal> + port <identifiersep> name + <string_literal> ) ; } \n \t2 <comment> \n \t2 port = port <identifiersep> identifier . open ( this . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , connect <identifiersep> timeout ) ; \n <ect>
\t3 if ( dir != null ) { \n \t4 less <identifiersep> files . delete <identifiersep> dir ( dir ) ; } } } \n \t1 @ test \n \t1 public void recursive <identifiersep> delete ( ) throws exception { \n <ect>
\t2 this . is <identifiersep> jstorm <identifiersep> on <identifiersep> yarn = j <identifiersep> storm <identifiersep> utils . parse <identifiersep> boolean ( system . get <identifiersep> property ( <string_literal> ) , false ) || \n \t4 config <identifiersep> extension . is <identifiersep> j <identifiersep> storm <identifiersep> on <identifiersep> yarn ( conf ) ; \n \t2 parse <identifiersep> yarn <identifiersep> config <identifiersep> black <identifiersep> list ( this . conf ) ; \n \t2 if ( is <identifiersep> jstorm <identifiersep> on <identifiersep> yarn ) { \n <ect>
\t1 final long start <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 while ( done <identifiersep> runner <identifiersep> count . get ( ) < <number_literal> && system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time < <number_literal> ) { \n \t1 thread . sleep ( <number_literal> ) ; } \n \t1 if ( done <identifiersep> runner <identifiersep> count . get ( ) < <number_literal> ) { \n <ect>
\t2 test <identifiersep> repo <identifiersep> key <identifiersep> read <identifiersep> write ( stored <identifiersep> key <identifiersep> names [ 1 ] [ 0 ] , pair1 . get <identifiersep> public ( ) , pair2 . get <identifiersep> public ( ) ) ; \n \t2 test <identifiersep> repo <identifiersep> key <identifiersep> read <identifiersep> write ( stored <identifiersep> key <identifiersep> names [ 1 ] [ 1 ] , eg <identifiersep> pair . get <identifiersep> public ( ) , null ) ; \n \t2 test <identifiersep> repo <identifiersep> key <identifiersep> read <identifiersep> write ( stored <identifiersep> key <identifiersep> names [ 1 ] [ <number_literal> ] , ecc <identifiersep> pair . get <identifiersep> public ( ) , ecies <identifiersep> pair . get <identifiersep> public ( ) ) ; } \n \t1 public void test <identifiersep> raw <identifiersep> key <identifiersep> read <identifiersep> write ( content <identifiersep> name key <identifiersep> name , public <identifiersep> key key , public <identifiersep> key optional2nd <identifiersep> key ) throws configuration <identifiersep> exception , io <identifiersep> exception , version <identifiersep> missing <identifiersep> exception { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + vm . to <identifiersep> string ( ) + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3  <identifiersep> alert <identifiersep> mgr . send <identifiersep> alert ( alert <identifiersep> type , vm . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , vm . get <identifiersep> pod <identifiersep> id <identifiersep> to <identifiersep> deploy <identifiersep> in ( ) , <string_literal> + vm . get <identifiersep> host <identifiersep> name ( ) + <string_literal> + \n \t4 host <identifiersep> desc , <string_literal> + vm . get <identifiersep> host <identifiersep> name ( ) + <string_literal> + vm <identifiersep> id + <string_literal> + host <identifiersep> desc ) ; \n \t2 } catch ( final resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t4 } catch ( invocation <identifiersep> target <identifiersep> exception ite ) { \n \t5 log . error ( <string_literal> + ite . get <identifiersep> target <identifiersep> exception ( ) + <string_literal> + branch <identifiersep> name , ite . get <identifiersep> target <identifiersep> exception ( ) ) ; \n \t5 throw new ns <identifiersep> forward <identifiersep> exception ( ite . get <identifiersep> target <identifiersep> exception ( ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 ticket <identifiersep> map . set ( enc <identifiersep> ticket . get <identifiersep> id ( ) , enc <identifiersep> ticket , ttl , time <identifiersep> unit . seconds ) ; \n \t2 logger . debug ( <string_literal> , enc <identifiersep> ticket . get <identifiersep> id ( ) , ttl ) ; } \n \t1 private i <identifiersep> map < string , ticket > get <identifiersep> ticket <identifiersep> map <identifiersep> instance <identifiersep> by <identifiersep> metadata ( final ticket <identifiersep> definition metadata ) { \n \t2 final string map <identifiersep> name = metadata . get <identifiersep> properties ( ) . get <identifiersep> storage <identifiersep> name ( ) ; \n <ect>
\t2 if ( grid . get <identifiersep> tile <identifiersep> size ( ) == null ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( grid . get <identifiersep> grid <identifiersep> dimensions ( ) == null ) { \n <ect>
\t1 for ( string col : col <identifiersep> names ) { \n \t2 integer col <identifiersep> type = column <identifiersep> types . get ( col ) ; \n \t2 sb <identifiersep> col <identifiersep> types . append ( col + <string_literal> + col <identifiersep> type + <string_literal> ) ; } \n \t1 string col <identifiersep> type <identifiersep> str = sb <identifiersep> col <identifiersep> types . to <identifiersep> string ( ) ; \n <ect>
\t2 <comment> \n \t2 for ( final folder subfolder : folder . get <identifiersep> folders ( ) ) { \n \t3 parse <identifiersep> folder ( subfolder , depth + 1 , folder ) ; } } \n \t1 private void analyze <identifiersep> folder ( final folder folder , final int depth , final folder parent <identifiersep> folder ) { \n <ect>
\t2 <comment> \n \t2 int magic = b1 | ( b2 < < <number_literal> ) ; \n \t2 logger . debug ( string . format ( <string_literal> , magic ) ) ; \n \t2 if ( magic == gzip <identifiersep> input <identifiersep> stream . gzip <identifiersep> magic ) { \n <ect>
\t6 ex = e ; \n \t6 logger . error ( <string_literal> , e ) ; \n \t6 i ++ ; } } \n \t4 if ( i > 0 ) { \n <ect>
\t4 try \n \t4 { \n \t5 for ( fake <identifiersep> file index <identifiersep> file : index <identifiersep> files ) \n \t5 { \n <ect>
\t1 if ( file != null && file . exists ( ) ) { \n \t1 try { \n \t2 file . delete ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t6 lb . set <identifiersep> algorithm ( lb <identifiersep> backup . get <identifiersep> algorithm ( ) ) ; } \n \t5 lb . set <identifiersep> state ( lb <identifiersep> backup . get <identifiersep> state ( ) ) ; \n \t5  <identifiersep> lb <identifiersep> dao . update ( lb . get <identifiersep> id ( ) , lb ) ; \n \t5  <identifiersep> lb <identifiersep> dao . persist ( lb ) ; \n <ect>
\t1 void after <identifiersep> bean <identifiersep> discovery ( @ observes after <identifiersep> bean <identifiersep> discovery abd , bean <identifiersep> manager bm ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 cdi <identifiersep> extensions <identifiersep> boston <identifiersep> bean < ? > rb = new cdi <identifiersep> extensions <identifiersep> boston <identifiersep> bean ( cdi <identifiersep> extensions <identifiersep> boston <identifiersep> holder . class , bm . create <identifiersep> injection <identifiersep> target ( bm . create <identifiersep> annotated <identifiersep> type ( cdi <identifiersep> extensions <identifiersep> boston <identifiersep> holder . class ) ) ) ; \n \t2 abd . add <identifiersep> bean ( rb ) ; \n <ect>
\t2 global = false ; } \n \t1 @ override \n \t1 public simple <identifiersep> field <identifiersep> set get <identifiersep> field <identifiersep> set ( ) { \n \t2 if ( hashes == null ) { \n <ect>
\t2 logger . error ( <string_literal> , e ) ; \n \t1 } catch ( jdom <identifiersep> exception e ) { \n \t2 logger . error ( <string_literal> , e ) ; \n \t1 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t1 public cloud <identifiersep> host <identifiersep> listener ( final string cloud <identifiersep> host <identifiersep> label , final atomic <identifiersep> reference < cloud <identifiersep> host > host <identifiersep> holder ) { \n \t2 this . cloud <identifiersep> host <identifiersep> label = cloud <identifiersep> host <identifiersep> label ; \n \t2 this . host <identifiersep> holder = host <identifiersep> holder ; } \n \t1 public void on <identifiersep> start ( i <identifiersep> suite suite ) { \n <ect>
\t4 chan . socket ( ) . set <identifiersep> keep <identifiersep> alive ( true ) ; \n \t3 selection <identifiersep> key ckey = chan . register (  <identifiersep> selector , selection <identifiersep> key . op <identifiersep> read ) ; \n \t3 new ntcp <identifiersep> connection (  <identifiersep> context ,  <identifiersep> transport , chan , ckey ) ; \n \t3 <comment> \n <ect>
\t2 final int delay = beanstalk <identifiersep> exchange <identifiersep> helper . get <identifiersep> delay ( endpoint , in ) ; \n \t2 final int time <identifiersep> to <identifiersep> run = beanstalk <identifiersep> exchange <identifiersep> helper . get <identifiersep> time <identifiersep> to <identifiersep> run ( endpoint , in ) ; \n \t2 final long job <identifiersep> id = client . put ( priority , delay , time <identifiersep> to <identifiersep> run , in . get <identifiersep> body ( byte [ ] . class ) ) ; \n <ect>
\t5 mav . with <identifiersep> binary <identifiersep> value ( ( byte <identifiersep> buffer ) value ) ; \n \t5 result . put ( entry . get <identifiersep> key ( ) , mav ) ; \n \t4 } else { \n \t5 <comment> \n <ect>
\t6 logger . trace ( <string_literal> , network <identifiersep> address , address ) ; \n \t6 cached <identifiersep> disco <identifiersep> nodes . add ( new discovery <identifiersep> node ( <string_literal> + instance . get <identifiersep> instance <identifiersep> name ( ) , address , empty <identifiersep> map ( ) , \n \t8 empty <identifiersep> set ( ) , version . current . minimum <identifiersep> compatibility <identifiersep> version ( ) ) ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t6 stop <identifiersep> point , data <identifiersep> node <identifiersep> name ) ; } \n \t3 throw new io <identifiersep> exception ( <string_literal> + stop <identifiersep> point + <string_literal> + \n \t5 data <identifiersep> node <identifiersep> name + <string_literal> ) ; } \n \t2 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> accesscontrol , level . info ) ) { \n <ect>
\t3 log . warn ( <string_literal> , e ) ; } } \n \t1 private void add <identifiersep> shutdown <identifiersep> hook ( ) \n \t1 { \n \t2 shutdown <identifiersep> hook = new thread ( ( ) - > { \n <ect>
\t3 <comment> \n \t3 list < long > results = count <identifiersep> query . execute ( ) ; \n \t3 result = results . get ( 0 ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 return storage . get <identifiersep> entry ( cache <identifiersep> key ) ; \n \t2 } catch ( final resource <identifiersep> io <identifiersep> exception ex ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void activate ( ) { \n <ect>
\t3 if ( event . state ( ) . nodes ( ) . get <identifiersep> master <identifiersep> node <identifiersep> id ( ) == null ) { \n \t4 old <identifiersep> master <identifiersep> node <identifiersep> stepped <identifiersep> down . count <identifiersep> down ( ) ; } \n \t2 } ) ; \n \t2 internal <identifiersep> cluster ( ) . set <identifiersep> disruption <identifiersep> scheme ( master <identifiersep> node <identifiersep> disruption ) ; \n <ect>
\t1 run <identifiersep> import ( argv ) ; \n \t1 fail ( <string_literal> ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n \t1 <comment> \n <ect>
\t3 final search <identifiersep> result group <identifiersep> result = response . get <identifiersep> result ( ) ; \n \t3 for ( final ldap <identifiersep> entry entry : group <identifiersep> result . get <identifiersep> entries ( ) ) { \n \t4 final ldap <identifiersep> attribute group <identifiersep> attribute = entry . get <identifiersep> attribute ( this . group <identifiersep> attribute <identifiersep> name ) ; \n \t4 if ( group <identifiersep> attribute == null ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void get <identifiersep> invalidate <identifiersep> concurrent ( ) throws exception { \n <ect>
\t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t2 } else { \n <ect>
\t3 logger . error ( <string_literal> , message , binding <identifiersep> config , exception . get <identifiersep> message ( ) ) ; \n \t3 throw new binding <identifiersep> config <identifiersep> parse <identifiersep> exception ( message + <string_literal> + binding <identifiersep> config + <string_literal> ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> field <identifiersep> exception exception ) { \n \t3 final string message = <string_literal> ; \n <ect>
\t1 try { \n \t1 logger . info ( <string_literal> ) ; \n \t1 <comment> \n \t1 ambari <identifiersep> ldap <identifiersep> configuration = ldap <identifiersep> attribute <identifiersep> detection <identifiersep> service . detect <identifiersep> ldap <identifiersep> user <identifiersep> attributes ( ambari <identifiersep> ldap <identifiersep> configuration ) ; \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + vm <identifiersep> id + <string_literal> ) ; \n \t3 return new console <identifiersep> access <identifiersep> authentication <identifiersep> answer ( cmd , false ) ; } \n \t2 host <identifiersep> vo host =  <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm . get <identifiersep> host <identifiersep> id ( ) ) ; \n \t2 if ( host == null ) { \n <ect>
\t4 log . info ( <string_literal> + date ) ; \n \t3 } catch ( exception e ) { \n \t4 log . error ( <string_literal> + date ) ; } \n \t2 } else { \n <ect>
\t1 if ( init ) { \n \t2 log <identifiersep> search <identifiersep> config . init ( properties , cluster <identifiersep> name ) ; } \n \t1 return log <identifiersep> search <identifiersep> config ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 max <identifiersep> too <identifiersep> low = true ; } \n \t3 <comment> \n \t3 if ( thread <identifiersep> pool . get <identifiersep> core <identifiersep> pool <identifiersep> size ( ) != dynamic <identifiersep> core <identifiersep> size || ( allow <identifiersep> sizes <identifiersep> to <identifiersep> diverge && thread <identifiersep> pool . get <identifiersep> maximum <identifiersep> pool <identifiersep> size ( ) != dynamic <identifiersep> maximum <identifiersep> size ) ) { \n \t4 if ( max <identifiersep> too <identifiersep> low ) { \n <ect>
\t2 return management <identifiersep> client . online ( online <identifiersep> options ) ; } \n \t1 public static model <identifiersep> node <identifiersep> result run <identifiersep> cmd ( online <identifiersep> management <identifiersep> client client , string cmd ) throws exception { \n \t2 model <identifiersep> node <identifiersep> result result = client . execute ( cmd ) ; \n \t2 logger . info ( <string_literal> + cmd ) ; \n <ect>
\t5 worksheet . get <identifiersep> semantic <identifiersep> types ( ) , rdf <identifiersep> prefix , rdf <identifiersep> namespace , \n \t5 false ) ; \n \t2 } catch ( karma <identifiersep> exception e ) \n \t2 { \n <ect>
\t6 cluster <identifiersep> details <identifiersep> insert . set <identifiersep> long ( 1 , cluster <identifiersep> id ) ; \n \t6 cluster <identifiersep> details <identifiersep> insert . set <identifiersep> string ( <number_literal> , key ) ; \n \t6 cluster <identifiersep> details <identifiersep> insert . set <identifiersep> string ( <number_literal> , val ) ; \n \t6 cluster <identifiersep> details <identifiersep> insert . execute <identifiersep> update ( ) ; } \n <ect>
<comment> \n \t2 final org . apache . camel . component . linkedin . api . model . connections result = request <identifiersep> body <identifiersep> and <identifiersep> headers ( <string_literal> , null , headers ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t3 if ( ! to <identifiersep> check . is <identifiersep> empty ( ) ) { \n \t4 for ( long msg <identifiersep> id : to <identifiersep> check ) { \n \t5 message <identifiersep> payload <identifiersep> message removed =  <identifiersep> available <identifiersep> messages . remove ( msg <identifiersep> id ) ; \n \t5 if ( removed != null ) \n <ect>
\t1 if ( effective <identifiersep> duration < 0 ) { \n \t1 logger . warn ( <string_literal> + scheduled <identifiersep> fire <identifiersep> time + <string_literal> + this . duration \n \t2 + <string_literal> ) ; \n \t1 } else { \n <ect>
\t4 job <identifiersep> output . set <identifiersep> content ( output ) ; } \n \t3 executable <identifiersep> dao . update <identifiersep> job <identifiersep> output ( job <identifiersep> output ) ; \n \t3 logger . info ( <string_literal> + job <identifiersep> id + <string_literal> + old <identifiersep> status + <string_literal> + new <identifiersep> status ) ; \n \t2 } catch ( persistent <identifiersep> exception e ) { \n <ect>
\t6 log . debug ( <string_literal> ) ; } \n \t5 thread . sleep ( <number_literal> ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 if ( succ ) { \n \t5 log . debug ( <string_literal> + file . to <identifiersep> string ( ) + <string_literal> ) ; } \n \t4 } else { \n <ect>
\t3 if ( max <identifiersep> nb <identifiersep> channels != null ) { \n \t4 try { \n \t5 i <identifiersep> max <identifiersep> nb <identifiersep> channels = integer . parse <identifiersep> int ( max <identifiersep> nb <identifiersep> channels ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t2 actual <identifiersep> entries = iterables . filter ( actual <identifiersep> entries , new predicate < entry > ( ) { \n \t3 @ override \n \t3 public boolean apply ( entry input ) { \n \t4 if ( ! input . get <identifiersep> column ( ) . equals ( kc . get <identifiersep> column ( ) ) ) { \n <ect>
\t4 runnable . get <identifiersep> task ( ) . get <identifiersep> exception ( ) ) ; \n \t3 log . trace ( <string_literal> , extent , duration ) ; } } \n \t1 } catch ( exception e ) { \n <ect>
\t3 if ( ! task . get <identifiersep> execution <identifiersep> state ( ) . is <identifiersep> terminal ( ) ) { \n \t4 try { \n \t5 task . fail <identifiersep> externally ( new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 output <identifiersep> stream os = t . get <identifiersep> response <identifiersep> body ( ) ; \n \t3 os . write ( bs ) ; \n \t3 os . close ( ) ; \n <ect>
\t2 try { \n \t3 registry <identifiersep> operations . delete ( app <identifiersep> path , true ) ; \n \t3 log . info ( <string_literal> + app <identifiersep> path ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 if ( ifc . is <identifiersep> up ( ) && ! ifc . is <identifiersep> virtual ( ) ) { \n \t5 for ( inet <identifiersep> address addr : iterator <identifiersep> util . enumeration <identifiersep> as <identifiersep> iterable ( ifc . get <identifiersep> inet <identifiersep> addresses ( ) ) ) { \n \t6 addr <identifiersep> list . add ( addr ) ; } } } \n \t2 } catch ( socket <identifiersep> exception e ) { \n <ect>
\t3 logger . error ( <string_literal> , ticket <identifiersep> to <identifiersep> add , e ) ; } } \n \t1 @ override \n \t1 public ticket get <identifiersep> ticket ( final string ticket <identifiersep> id ) { \n \t2 try { \n <ect>
\t1 try { \n \t1 bean <identifiersep> info bi = introspector . get <identifiersep> bean <identifiersep> info ( obj . get <identifiersep> class ( ) ) ; \n \t1 props = bi . get <identifiersep> property <identifiersep> descriptors ( ) ; \n \t1 } catch ( introspection <identifiersep> exception ex ) { \n <ect>
\t2 { \n \t2 final string resource <identifiersep> file <identifiersep> name = class <identifiersep> file <identifiersep> names . get ( resource <identifiersep> class ) ; \n \t2 if ( resource <identifiersep> file <identifiersep> name == null ) \n \t2 { \n <ect>
\t7 cnt += gc <identifiersep> bean . get <identifiersep> collection <identifiersep> count ( ) ; } \n \t6 return cnt ; } \n \t4 } ) \n \t2 ) ; \n <ect>
\t3 throws resource <identifiersep> unavailable <identifiersep> exception { \n \t2 if ( ip <identifiersep> address == null || ip <identifiersep> address . is <identifiersep> empty ( ) ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + network . get <identifiersep> id ( ) ) ; \n \t3 return true ; } \n <ect>
\t4 logger . debug ( <string_literal> , e . get <identifiersep> message ( ) ) ; } } \n \t2 try { \n \t3 int status <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n \t3 if ( status <identifiersep> code != http <identifiersep> status . sc <identifiersep> ok ) { \n <ect>
\t2 } else { \n \t3 int memory <identifiersep> hungry <identifiersep> measures = 0 ; \n \t3 for ( measure <identifiersep> desc measure : seg . get <identifiersep> cube <identifiersep> desc ( ) . get <identifiersep> measures ( ) ) { \n \t4 if ( measure . get <identifiersep> function ( ) . get <identifiersep> measure <identifiersep> type ( ) . is <identifiersep> memory <identifiersep> hungry ( ) ) { \n <ect>
\t5  <identifiersep> work <identifiersep> tracker . handle <identifiersep> exception ( agent <identifiersep> id ) ; } } \n \t2 } else { \n \t4 if ( vm != null ) \n <ect>
\t1 log . info ( <string_literal> + percentage <identifiersep> error + <string_literal> ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 } else if ( percentage <identifiersep> error < = <number_literal> . <number_literal> ) { \n \t1 num <identifiersep> bit <identifiersep> vectors = <number_literal> ; \n <ect>
\t2 . privilege <identifiersep> from <identifiersep> name ( <string_literal> ) } ) ; <comment> \n \t1 } else { \n \t1 <comment> \n <ect>
\t2 if ( tmd . is <identifiersep> id <identifiersep> binary ( ) ) { \n \t3 try { \n \t4 return new string ( rs . get <identifiersep> bytes ( idx ) , <string_literal> ) ; \n \t3 } catch ( unsupported <identifiersep> encoding <identifiersep> exception ex ) { \n <ect>
\t4 final string msg = <string_literal> + vm <identifiersep> name + <string_literal> + e . to <identifiersep> string ( ) ; \n \t4 s <identifiersep> logger . warn ( msg , e ) ; \n \t4 return msg ; } \n <ect>
\t2 <comment> \n \t2 filter <identifiersep> by <identifiersep> address ( current <identifiersep> listeners <identifiersep> copy , request ) ; \n \t2 if ( current <identifiersep> listeners <identifiersep> copy . size ( ) == 0 ) \n \t2 { \n <ect>
\t1 public void describe <identifiersep> to ( log log ) \n \t1 { \n \t2 <comment> \n \t2 <comment> \n <ect>
\t4 final string network = split <identifiersep> address . get ( 0 ) . trim ( ) ; \n \t4 final string netmask = split <identifiersep> address . get ( 1 ) . trim ( ) ; \n \t4 try { \n \t5 this . inet <identifiersep> network <identifiersep> range = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( network ) ; \n <ect>
\t2 synchronized ( this . message <identifiersep> listeners ) \n \t2 { \n \t3 listeners = new array <identifiersep> list < message <identifiersep> listener > ( this . message <identifiersep> listeners ) ; } \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t4 try { \n \t5 shutdown ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 collections . add <identifiersep> all ( resource <identifiersep> set , properties <identifiersep> files ) ; } } \n \t2 catch ( io <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; } \n <ect>
\t6 osgi <identifiersep> filter ) ; } \n \t2 catch ( invalid <identifiersep> syntax <identifiersep> exception ex ) \n \t2 { \n \t3 ser <identifiersep> refs = null ; \n <ect>
public void record <identifiersep> new <identifiersep> status ( path file <identifiersep> path , status status , replication <identifiersep> target target ) \n \t1 throws accumulo <identifiersep> exception , accumulo <identifiersep> security <identifiersep> exception , table <identifiersep> not <identifiersep> found <identifiersep> exception { \n \t1 try ( batch <identifiersep> writer bw = context . get <identifiersep> connector ( ) . create <identifiersep> batch <identifiersep> writer ( replication <identifiersep> table . name , \n \t2 new batch <identifiersep> writer <identifiersep> config ( ) ) ) { \n <ect>
\t1 return ip ; } \n @ override \n public public <identifiersep> ip <identifiersep> address apply ( network input ) { \n \t1 try { \n <ect>
\t3 eo <identifiersep> entity entity = erxeo <identifiersep> access <identifiersep> utilities . entity <identifiersep> named ( shared <identifiersep> ec , entity <identifiersep> name ) ; \n \t3 eo <identifiersep> database <identifiersep> context . registered <identifiersep> database <identifiersep> context <identifiersep> for <identifiersep> model ( entity . model ( ) , shared <identifiersep> ec ) ; \n \t3 shared <identifiersep> eos = ( ns <identifiersep> array ) shared <identifiersep> ec . objects <identifiersep> by <identifiersep> entity <identifiersep> name ( ) . object <identifiersep> for <identifiersep> key ( entity <identifiersep> name ) ; } \n \t2 if ( shared <identifiersep> eos == null ) { \n <ect>
\t2 } catch ( interrupted <identifiersep> exception e ) { \n \t2 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t2 try { \n \t2 string ip = public <identifiersep> ip <identifiersep> or <identifiersep> hostname ( node ) ; \n <ect>
\t10 string xml = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( string . class ) ; \n \t10 assert <identifiersep> true ( xml , xml . contains ( <string_literal> ) ) ; \n \t10 int num = small . increment <identifiersep> and <identifiersep> get ( ) ; \n \t10 if ( num % <number_literal> == 0 ) { \n <ect>
\t2 final m <identifiersep> bean <identifiersep> server jmx <identifiersep> server = management <identifiersep> factory . get <identifiersep> platform <identifiersep> m <identifiersep> bean <identifiersep> server ( ) ; \n \t2 try { \n \t3 jmx <identifiersep> server . register <identifiersep> m <identifiersep> bean ( new standard <identifiersep> m <identifiersep> bean ( this , standby <identifiersep> status <identifiersep> m <identifiersep> bean . class ) , new object <identifiersep> name ( this . get <identifiersep> m <identifiersep> bean <identifiersep> name ( ) ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 this . known <identifiersep> hosts <identifiersep> resource = known <identifiersep> hosts <identifiersep> resource ; \n \t2 this . fail <identifiersep> on <identifiersep> unknown <identifiersep> host = fail <identifiersep> on <identifiersep> unknown <identifiersep> host ; } \n \t1 @ override \n \t1 public boolean verify <identifiersep> server <identifiersep> key ( client <identifiersep> session ssh <identifiersep> client <identifiersep> session , socket <identifiersep> address remote <identifiersep> address , public <identifiersep> key server <identifiersep> key ) { \n <ect>
\t2 match <identifiersep> next <identifiersep> or <identifiersep> last ( interest <identifiersep> type . next ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> match <identifiersep> last ( ) throws malformed <identifiersep> content <identifiersep> name <identifiersep> string <identifiersep> exception , invalid <identifiersep> key <identifiersep> exception , signature <identifiersep> exception , configuration <identifiersep> exception { \n <ect>
\t1 public string get <identifiersep> access <identifiersep> key ( ) { \n \t2 if ( annonymous ) \n \t3 return string <identifiersep> helper . empty <identifiersep> string ; \n \t2 if ( access <identifiersep> key == null ) { \n <ect>
\t4 if ( attache != null ) { \n \t5 result = handle <identifiersep> disconnect ( attache , event . agent <identifiersep> disconnected , false , false , true ) ; } \n \t4 if ( result ) { \n <ect>
\t3 current <identifiersep> pos = 0 ; \n \t3 previous <identifiersep> byte = 0 ; } \n \t2 void mark <identifiersep> start ( int position ) { \n \t3 if ( is <identifiersep> started ( ) ) { \n <ect>
\t2 final principal <identifiersep> attributes <identifiersep> properties attrs = cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> attribute <identifiersep> repository ( ) ; \n \t2 attrs . get <identifiersep> ldap ( ) . for <identifiersep> each ( ldap - > { \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( ldap . get <identifiersep> base <identifiersep> dn ( ) ) && string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( ldap . get <identifiersep> ldap <identifiersep> url ( ) ) ) { \n \t4 final ldaptive <identifiersep> person <identifiersep> attribute <identifiersep> dao ldap <identifiersep> dao = new ldaptive <identifiersep> person <identifiersep> attribute <identifiersep> dao ( ) ; \n <ect>
\t3 string <identifiersep> builder sb = new string <identifiersep> builder ( ) ; \n \t4 for ( string name : voices . key <identifiersep> set ( ) ) { \n \t5 sb . append ( name + <string_literal> ) ; } \n <ect>
\t2 this . group <identifiersep> listener . set <identifiersep> zoo <identifiersep> keeper <identifiersep> password ( endpoint . get <identifiersep> component ( ) . get <identifiersep> zoo <identifiersep> keeper <identifiersep> password ( ) ) ; \n \t2 this . group <identifiersep> listener . set <identifiersep> curator ( endpoint . get <identifiersep> component ( ) . get <identifiersep> curator ( ) ) ; \n \t2 this . group <identifiersep> listener . set <identifiersep> maximum <identifiersep> connection <identifiersep> timeout ( endpoint . get <identifiersep> component ( ) . get <identifiersep> maximum <identifiersep> connection <identifiersep> timeout ( ) ) ; \n \t2 service <identifiersep> helper . start <identifiersep> service ( group <identifiersep> listener ) ; \n <ect>
\t2 execute ( <string_literal> , session <identifiersep> id , ( ) - > { \n \t3 if ( chat <identifiersep> id != null ) { \n \t4 optional < session > session = session <identifiersep> manager . instance . get <identifiersep> session ( session <identifiersep> id ) ; \n \t4 if ( ! session . is <identifiersep> present ( ) ) { \n <ect>
\t2 public index <identifiersep> input open <identifiersep> input ( io <identifiersep> context context ) throws io <identifiersep> exception { \n \t3 return local . open <identifiersep> input ( name , context ) ; } \n \t2 @ override \n \t2 public index <identifiersep> output create <identifiersep> output ( io <identifiersep> context context ) throws io <identifiersep> exception { \n <ect>
\t4 log . debug ( <string_literal> + this ) ; \n \t3 if ( pending <identifiersep> locks . is <identifiersep> empty ( ) ) { \n <ect>
\t2 log . info ( <string_literal> + pid ) ; \n \t2 assert . assert <identifiersep> not <identifiersep> null ( <string_literal> , stateful <identifiersep> object ) ; \n \t2 string uuid = uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ; \n \t2 stateful <identifiersep> object . set <identifiersep> name ( uuid ) ; \n <ect>
\t7 <string_literal> + dc . get <identifiersep> name ( ) + <string_literal> ) ; \n \t3 break ; \n \t2 case sec <identifiersep> storage <identifiersep> vm <identifiersep> alert <identifiersep> event <identifiersep> args . ssvm <identifiersep> firewall <identifiersep> alert : \n <ect>
\t1 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t1 logger . error ( get <identifiersep> messages <identifiersep> instance ( ) . get <identifiersep> string ( <string_literal> , e . get <identifiersep> message ( ) ) , e ) ; \n \t1 return build <identifiersep> status <identifiersep> response ( response . status . not <identifiersep> found ) ; \n \t1 } catch ( throwable e ) { \n <ect>
\t5 continue ; } \n \t4 string service <identifiersep> uri = s . to <identifiersep> string ( ) ; \n \t4 service <identifiersep> id = service <identifiersep> uri . substring ( service <identifiersep> uri . last <identifiersep> index <identifiersep> of ( <string_literal> ) + 1 , service <identifiersep> uri . length ( ) - 1 ) ; \n \t4 logger . debug ( <string_literal> + service <identifiersep> uri ) ; \n <ect>
\t2 final service target <identifiersep> service = this . service <identifiersep> selection <identifiersep> strategy . resolve <identifiersep> service <identifiersep> from ( this . web <identifiersep> application <identifiersep> service <identifiersep> factory . create <identifiersep> service ( service <identifiersep> url ) ) ; \n \t2 final ws <identifiersep> federation <identifiersep> registered <identifiersep> service svc = get <identifiersep> ws <identifiersep> federation <identifiersep> registered <identifiersep> service ( target <identifiersep> service ) ; \n \t2 final ws <identifiersep> federation <identifiersep> properties . identity <identifiersep> provider idp = cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> wsfed <identifiersep> idp ( ) . get <identifiersep> idp ( ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( fed <identifiersep> request . get <identifiersep> wtrealm ( ) ) || ! string <identifiersep> utils . equals ( fed <identifiersep> request . get <identifiersep> wtrealm ( ) , svc . get <identifiersep> realm ( ) ) ) { \n <ect>
\t2 <comment> \n \t2 security <identifiersep> constraint constraints [ ] = context . find <identifiersep> constraints ( ) ; \n \t2 if ( ( constraints == null ) || ( constraints . length == 0 ) ) { \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 log . debug ( ex , ex ) ; \n \t1 return false ; \n \t1 } catch ( exception ex ) { \n <ect>
\t7 vars . put ( current <identifiersep> ref <identifiersep> name + ref <identifiersep> match <identifiersep> nr , integer . to <identifiersep> string ( extracted <identifiersep> values . size ( ) ) ) ; } } } \n \t3 } catch ( exception e ) { \n \t4 <comment> \n <ect>
\t3 message message = null ; \n \t3 try { \n \t4 log . debug ( <string_literal> + ( messages <identifiersep> received + 1 ) + <string_literal> + messages <identifiersep> expected ) ; \n \t4 message = consumer . receive ( <number_literal> ) ; \n <ect>
\t6 <string_literal> + ( semantic <identifiersep> type <identifiersep> mappings == null ? 0 : semantic <identifiersep> type <identifiersep> mappings . size ( ) ) ) ; \n \t4 num <identifiersep> of <identifiersep> mappings *= ( semantic <identifiersep> type <identifiersep> mappings == null || semantic <identifiersep> type <identifiersep> mappings . is <identifiersep> empty ( ) ? 1 : semantic <identifiersep> type <identifiersep> mappings . size ( ) ) ; \n \t4 logger . debug ( <string_literal> + candidate <identifiersep> steiner <identifiersep> sets . get <identifiersep> steiner <identifiersep> sets ( ) . size ( ) ) ; \n \t4 candidate <identifiersep> steiner <identifiersep> sets . update <identifiersep> steiner <identifiersep> sets ( semantic <identifiersep> type <identifiersep> mappings ) ; \n <ect>
\t5 vmware <identifiersep> storage <identifiersep> layout <identifiersep> helper . sync <identifiersep> volume <identifiersep> to <identifiersep> root <identifiersep> folder ( ds <identifiersep> mo . get <identifiersep> owner <identifiersep> datacenter ( ) . first ( ) , ds <identifiersep> mo , volume <identifiersep> to . get <identifiersep> path ( ) , vm <identifiersep> name , vmware <identifiersep> manager . s <identifiersep> vmware <identifiersep> search <identifiersep> exclude <identifiersep> folder . value ( ) ) ; } } \n \t3 return answer ; \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t2 list < load <identifiersep> balancer <identifiersep> vo > lbs =  <identifiersep> lb <identifiersep> dao . list <identifiersep> by <identifiersep> network <identifiersep> id ( network <identifiersep> id ) ; \n \t2 if ( lbs != null ) { \n \t3 return apply <identifiersep> load <identifiersep> balancer <identifiersep> rules ( lbs , true ) ; \n \t2 } else { \n <ect>
\t1 public void marshal ( exchange exchange , object graph , output <identifiersep> stream stream ) throws exception { \n \t2 object <identifiersep> helper . not <identifiersep> null ( graph , <string_literal> ) ; \n \t2 list < map < string , object > > data = ( list < map < string , object > > ) graph ; \n \t2 if ( data . is <identifiersep> empty ( ) ) { \n <ect>
\t2 try { \n \t3 start <identifiersep> vlan = integer . parse <identifiersep> int ( vlan <identifiersep> range [ 0 ] ) ; \n \t3 end <identifiersep> vlan = integer . parse <identifiersep> int ( vlan <identifiersep> range [ 1 ] ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . error ( <string_literal> + exec <identifiersep> time + <string_literal> + aggregation <identifiersep> range ) ; \n \t4 throw new configuration <identifiersep> exception ( <string_literal> + exec <identifiersep> time + <string_literal> + aggregation <identifiersep> range ) ; } \n \t3 string [ ] exec <identifiersep> time <identifiersep> segments = exec <identifiersep> time . split ( <string_literal> ) ; \n \t3 if ( exec <identifiersep> time <identifiersep> segments . length != <number_literal> ) { \n <ect>
\t2 x <identifiersep> wiki <identifiersep> document cachedoc ; \n \t2 try { \n \t3 cachedoc = get <identifiersep> cache ( ) . get ( key ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 if ( obj != null ) { \n \t6 ret . add ( obj ) ; } } \n \t4 return ret ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t3 string [ ] event <identifiersep> descriptions = null ; \n \t3 client = new http <identifiersep> client ( ) ; \n \t3 method = new get <identifiersep> method ( url ) ; \n \t3 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t1 @ override \n \t1 public boolean process <identifiersep> answers ( long agent <identifiersep> id , long seq , answer [ ] answers ) { \n \t2 for ( answer answer : answers ) { \n \t3 if ( answer . get <identifiersep> result ( ) == false ) { \n <ect>
\t6 + <string_literal> + e . get <identifiersep> cause ( ) , e ) ; } \n \t3 try { \n \t4 signal <identifiersep> handler old <identifiersep> handler = old <identifiersep> signal <identifiersep> handlers . get ( signal . get <identifiersep> number ( ) ) ; \n \t4 if ( old <identifiersep> handler != null ) { \n <ect>
\t1 public boolean send <identifiersep> zone <identifiersep> bypass ( boolean bypass , byte zone , string pin <identifiersep> code ) { \n \t2 logger . debug ( <string_literal> , bypass ? <string_literal> : <string_literal> , zone ) ; \n \t2 boolean done = false ; \n \t2 if ( ( pin <identifiersep> code == null ) || ( pin <identifiersep> code . length ( ) != <number_literal> ) ) { \n <ect>
\t3 if ( sn . get <identifiersep> confidence ( ) . get <identifiersep> confidence <identifiersep> value ( ) < largest <identifiersep> observed <identifiersep> confidence ) \n \t4 continue ; \n \t3 largest <identifiersep> observed <identifiersep> confidence = sn . get <identifiersep> confidence ( ) . get <identifiersep> confidence <identifiersep> value ( ) ; \n \t3 pareto <identifiersep> frontier <identifiersep> steiner <identifiersep> sets . add ( sn ) ; } \n <ect>
\t1 public void set <identifiersep> default <identifiersep> options ( i2p <identifiersep> socket <identifiersep> options options ) { \n \t2 if ( ! ( options instanceof connection <identifiersep> options ) ) \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 submit <identifiersep> to <identifiersep> pool ( task ) ; } \n \t3 catch ( interrupted <identifiersep> exception interrupted ) { \n \t4 <comment> \n \t3 catch ( throwable t ) { \n <ect>
\t5  <identifiersep> log . info ( <string_literal> ) ; } \n \t4  <identifiersep> use <identifiersep> reflection <identifiersep> to <identifiersep> translate <identifiersep> throwable = false ; } \n \t3 catch ( security <identifiersep> exception se ) { \n <ect>
\t4 broker . stop ( ) ; \n \t4 broker . wait <identifiersep> until <identifiersep> stopped ( ) ; \n \t4 broker = null ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 u . await ( io <identifiersep> init <identifiersep> latch ) ; \n \t2 grid <identifiersep> worker snd0 = snd ; \n \t2 if ( snd0 != null ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 if ( is <identifiersep> create <identifiersep> camel <identifiersep> context <identifiersep> per <identifiersep> class ( ) ) { \n \t3 <comment> \n \t3 return ; } \n <ect>
\t2 log . error ( <string_literal> + request . get <identifiersep> hostname ( ) ) ; \n \t2 throw new parent <identifiersep> object <identifiersep> not <identifiersep> found <identifiersep> exception ( <string_literal> , \n \t3 new host <identifiersep> not <identifiersep> found <identifiersep> exception ( request . get <identifiersep> cluster <identifiersep> name ( ) , request . get <identifiersep> hostname ( ) ) ) ; } \n \t1 } catch ( host <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 private object deserialize <identifiersep> mongo <identifiersep> type ( final object value ) { \n \t2 if ( value instanceof symbol ) { \n \t3 return value . to <identifiersep> string ( ) ; \n \t2 } else { \n <ect>
\t3 { \n \t4 error <identifiersep> folder = store . get <identifiersep> folder ( error <identifiersep> folder <identifiersep> name ) ; \n \t4 if ( ! error <identifiersep> folder . exists ( ) ) \n \t4 { \n <ect>
\t1 local <identifiersep> dirs = new string [ num <identifiersep> local <identifiersep> dirs ] ; \n \t1 for ( int i = 0 ; i < num <identifiersep> local <identifiersep> dirs ; i ++ ) { \n \t1 file f = new file ( test <identifiersep> work <identifiersep> dir , <string_literal> ) ; \n \t1 f . mkdirs ( ) ; \n <ect>
\t2 default <identifiersep> retry <identifiersep> wait <identifiersep> max ) ; \n \t1 retry <identifiersep> wait <identifiersep> interval = conf . get <identifiersep> int ( connection <identifiersep> retry <identifiersep> wait <identifiersep> interval , \n \t2 default <identifiersep> retry <identifiersep> wait <identifiersep> interval ) ; \n \t1 if ( retry <identifiersep> wait <identifiersep> max < = retry <identifiersep> wait <identifiersep> interval || retry <identifiersep> wait <identifiersep> interval < = 0 ) { \n <ect>
\t2 return remote <identifiersep> addr ; } \n \t1 public string name ( ) { \n \t2 return name ; } \n \t1 public void handle <identifiersep> response ( channel channel , object msg ) { \n <ect>
\t2 generate <identifiersep> inputs ( ops <identifiersep> per <identifiersep> thread ) ; \n \t2 for ( t <identifiersep> idx = 0 ; t <identifiersep> idx < num <identifiersep> threads ; t <identifiersep> idx ++ ) \n \t2 daemons . add ( new stats <identifiersep> daemon ( t <identifiersep> idx , ops <identifiersep> per <identifiersep> thread [ t <identifiersep> idx ] , this ) ) ; \n \t2 start = now ( ) ; \n <ect>
\t4 con . close ( ) ; <comment> \n \t3 } catch ( execution <identifiersep> exception ex ) { \n \t4 <comment> \n \t3 } catch ( exception x ) { \n <ect>
\t3 log . error ( <string_literal> , x ) ; \n \t2 } catch ( io <identifiersep> exception x ) { \n \t3 log . error ( <string_literal> , x ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception x ) { \n <ect>
\t2 handle <identifiersep> targets ( cmd . get <identifiersep> add ( ) , cmd . get <identifiersep> target <identifiersep> type <identifiersep> to <identifiersep> remove ( ) , cmd . is <identifiersep> remove <identifiersep> async ( ) , cmd . get <identifiersep> targets ( ) , host <identifiersep> m <identifiersep> os ) ; \n \t2 return new modify <identifiersep> targets <identifiersep> answer ( ) ; } \n \t1 protected answer execute ( modify <identifiersep> storage <identifiersep> pool <identifiersep> command cmd ) { \n <ect>
\t1 <comment> \n \t1 public void run ( ) { \n <ect>
\t6 return true ; } \n \t5 break ; } \n \t4 catch ( grid <identifiersep> cache <identifiersep> entry <identifiersep> removed <identifiersep> exception ignore ) { \n <ect>
\t2 public long next <identifiersep> delay <identifiersep> ms ( ) { \n \t3 if ( first <identifiersep> delay ) \n \t4 first <identifiersep> delay = false ; \n \t3 else { \n <ect>
\t3 event <identifiersep> container . get <identifiersep> event <identifiersep> list ( ) . add ( cal <identifiersep> dav <identifiersep> event ) ; \n \t3 event <identifiersep> container . set <identifiersep> last <identifiersep> changed ( cal <identifiersep> dav <identifiersep> event . get <identifiersep> last <identifiersep> changed ( ) ) ; \n \t3 this . add <identifiersep> event <identifiersep> to <identifiersep> map ( event <identifiersep> container , false ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t5 try { \n \t6 exception wrapped <identifiersep> ex = execution <identifiersep> hook . on <identifiersep> run <identifiersep> error ( cmd , e ) ; \n \t6 subscriber . on <identifiersep> error ( wrapped <identifiersep> ex ) ; \n \t5 } catch ( throwable hook <identifiersep> ex ) { \n <ect>
\t2 if ( vpn . get <identifiersep> vpc <identifiersep> id ( ) == null ) { \n \t3 return false ; } \n \t2 final list < domain <identifiersep> router <identifiersep> vo > routers =  <identifiersep> vpc <identifiersep> router <identifiersep> mgr . get <identifiersep> vpc <identifiersep> routers ( vpn . get <identifiersep> vpc <identifiersep> id ( ) ) ; \n \t2 if ( routers == null ) { \n <ect>
\t2 if ( is <identifiersep> save <identifiersep> after <identifiersep> run ( ) && ! project . is <identifiersep> remote ( ) ) { \n \t3 try { \n \t4 project . save ( ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t1 public void test <identifiersep> ccn <identifiersep> versioned <identifiersep> input <identifiersep> stream <identifiersep> content <identifiersep> name <identifiersep> publisher <identifiersep> key <identifiersep> idccn <identifiersep> library ( ) throws exception { \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> + first <identifiersep> version <identifiersep> name ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> + middle <identifiersep> version <identifiersep> name ) ; \n <ect>
\t3 if ( string <identifiersep> utils . is <identifiersep> blank ( result ) ) { \n \t4 try { \n \t5 result = io <identifiersep> utils . to <identifiersep> string ( stdout , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ; } \n \t4 catch ( io <identifiersep> exception e ) { \n <ect>
\t1 } ; \n \t1 try { \n \t1 return entities . as <identifiersep> transaction ( volume <identifiersep> info . class , add <identifiersep> token , volume <identifiersep> token . tx <identifiersep> retries ) . apply ( vol ) ; \n \t1 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t2 if ( server <identifiersep> socket != null ) { \n \t3 try { \n \t4 server <identifiersep> socket . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . debug ( sd . to <identifiersep> string ( ) ) ; \n \t4 s = conn . secret <identifiersep> define <identifiersep> xml ( sd . to <identifiersep> string ( ) ) ; \n \t4 s . set <identifiersep> value ( base64 . decode <identifiersep> base64 ( user <identifiersep> info <identifiersep> temp [ 1 ] ) ) ; \n \t3 } catch ( libvirt <identifiersep> exception e ) { \n <ect>
\t4 string existing <identifiersep> include <identifiersep> props = get <identifiersep> property (  <identifiersep> properties . include <identifiersep> props <identifiersep> key ) ; \n \t4 if ( existing <identifiersep> include <identifiersep> props == null ) { \n \t5 existing <identifiersep> include <identifiersep> props = <string_literal> ; } \n \t4 if ( existing <identifiersep> include <identifiersep> props . index <identifiersep> of ( props <identifiersep> file . get <identifiersep> path ( ) ) > - 1 ) { \n <ect>
\t1 desired <identifiersep> config desired <identifiersep> config = desired <identifiersep> config <identifiersep> entry . get <identifiersep> value ( ) ; \n \t1 actual <identifiersep> configs . put ( config <identifiersep> type , cluster . get <identifiersep> config ( config <identifiersep> type , desired <identifiersep> config . get <identifiersep> tag ( ) ) ) ; } \n \t1 for ( string stack <identifiersep> config <identifiersep> type : stack <identifiersep> config <identifiersep> types ) { \n \t1 if ( ! actual <identifiersep> configs . contains <identifiersep> key ( stack <identifiersep> config <identifiersep> type ) ) { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 log . debug ( <string_literal> , components <identifiersep> response ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t1 public void finish <identifiersep> inbound <identifiersep> establishment ( session <identifiersep> key key , long clock <identifiersep> skew , byte prev <identifiersep> write <identifiersep> end [ ] , byte prev <identifiersep> read <identifiersep> end [ ] ) { \n \t2 ntcp <identifiersep> connection to <identifiersep> close = locked <identifiersep> finish <identifiersep> inbound <identifiersep> establishment ( key , clock <identifiersep> skew , prev <identifiersep> write <identifiersep> end , prev <identifiersep> read <identifiersep> end ) ; \n \t2 if ( to <identifiersep> close != null ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t9 obj , key ) ; \n \t7 string <identifiersep> description <identifiersep> writer sdw = descriptions . string <identifiersep> writer ( ) ; \n \t7 node <identifiersep> describer . instance . describe ( node , sdw ) ; \n <ect>
\t2 for ( rule <identifiersep> template <identifiersep> configuration template : configuration . get <identifiersep> rule <identifiersep> template <identifiersep> configurations ( ) ) { \n \t3 try { \n \t4 drls . add ( converter . compile ( resource . get <identifiersep> input <identifiersep> stream ( ) , template . get <identifiersep> template ( ) . get <identifiersep> input <identifiersep> stream ( ) , template . get <identifiersep> row ( ) , template . get <identifiersep> col ( ) ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
class some <identifiersep> transactional <identifiersep> with <identifiersep> supports { \n \t1 @ transactional ( type = tx <identifiersep> type . supports ) \n \t1 void do <identifiersep> stuff ( ) { \n \t1 outer <identifiersep> txn = ebean . current <identifiersep> transaction ( ) ; \n <ect>
\t1 if retry <identifiersep> gap >= window <identifiersep> in <identifiersep> min : \n \t1 logger . warn ( <string_literal> ) \n \t1 return \n \t1 if max <identifiersep> lifetime <identifiersep> count < 0 or max <identifiersep> lifetime <identifiersep> count < max <identifiersep> count : \n <ect>
\t1 kdc . create <identifiersep> principal ( keytab , user ) ; \n \t1 <comment> \n \t1 user <identifiersep> group <identifiersep> information ugi = user <identifiersep> group <identifiersep> information . login <identifiersep> user <identifiersep> from <identifiersep> keytab <identifiersep> and <identifiersep> return <identifiersep> ugi ( user , \n \t2 keytab . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n <ect>
\t3 output <identifiersep> stream . close ( ) ; } \n \t2 size = written ; \n \t2 if ( defined <identifiersep> size > 0 && defined <identifiersep> size < size ) { \n \t3 if ( ! file . delete ( ) ) { \n <ect>
\t3 self . command = command \n \t2 else : \n \t3 self . command = which ( <string_literal> ) \n \t2 if not self . command : \n <ect>
\t7 return ; \n \t6 if ( update <identifiersep> manager . has <identifiersep> new <identifiersep> main <identifiersep> jar ( ) ) \n \t7 return ; \n \t6 if ( ! update <identifiersep> manager . node . is <identifiersep> oudated ( ) ) { \n <ect>
\t3 if ( snapshot <identifiersep> test . equals ( <string_literal> ) ) { \n \t4 <comment> \n \t4 { \n \t5 url = server + <string_literal> + s <identifiersep> linux <identifiersep> vm <identifiersep> id . get ( ) + <string_literal> ; \n <ect>
\t3 log . trace ( <string_literal> , th ) ; \n \t1 } else { \n \t2 if ( th instanceof write <identifiersep> skew <identifiersep> exception ) { \n \t3 <comment> \n <ect>
\t2 continue ; } \n \t2 collection < table <identifiersep> scan <identifiersep> operator > prev <identifiersep> ts <identifiersep> ops = existing <identifiersep> ops . get ( table <identifiersep> name ) ; \n \t2 for ( table <identifiersep> scan <identifiersep> operator retainable <identifiersep> ts <identifiersep> op : prev <identifiersep> ts <identifiersep> ops ) { \n \t2 if ( removed <identifiersep> ops . contains ( retainable <identifiersep> ts <identifiersep> op ) ) { \n <ect>
\t6 logger . warn ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t5 try { \n \t6 process . get <identifiersep> error <identifiersep> stream ( ) . close ( ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t4 offset += hash . hash <identifiersep> length ; \n \t4 data <identifiersep> helper . to <identifiersep> long ( rv , offset , <number_literal> ,  <identifiersep> tunnel <identifiersep> id . get <identifiersep> tunnel <identifiersep> id ( ) ) ; \n \t4 offset += <number_literal> ; \n \t4 <comment> \n <ect>
<number_literal> output <identifiersep> batch <identifiersep> size , \n <number_literal> details ) ; \n \t3 try { \n \t4 if ( ! sampler . sample <identifiersep> stores ( ) ) { \n <ect>
\t6 page <identifiersep> names . add ( get <identifiersep> compact <identifiersep> entity <identifiersep> reference <identifiersep> serializer ( ) . serialize ( document <identifiersep> reference ) ) ; } } } \n \t3 return page <identifiersep> names ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t6 try { \n \t7 compiled <identifiersep> script compile = comp <identifiersep> engine . compile ( script ) ; \n \t7 entry . get <identifiersep> value ( ) . set <identifiersep> csript ( compile ) ; \n \t6 } catch ( script <identifiersep> exception e ) { \n <ect>
<comment> \n public static void save <identifiersep> png <identifiersep> image ( final buffered <identifiersep> image image , final string filename ) { \n \t1 debug <identifiersep> log . debug ( <string_literal> , image == null ? null : image . get <identifiersep> width ( ) , filename ) ; \n \t1 if ( image == null ) { \n <ect>
\t3 if ( oldmodcount != null ) { \n \t4 stmt . set <identifiersep> object ( si ++ , oldmodcount , types . bigint ) ; } \n \t3 int result = stmt . execute <identifiersep> update ( ) ; \n \t3 if ( result != 1 ) { \n <ect>
\t1 return true ; } \n \t1 return false ; } \n public void restart ( int id ) throws io <identifiersep> exception , exception \n { \n <ect>
\t1 lb = load <identifiersep> balancers . get <identifiersep> loadbalancer ( ctx , lb <identifiersep> name ) ; \n \t1 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n \t1 throw new access <identifiersep> point <identifiersep> not <identifiersep> found <identifiersep> exception ( ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 throw new runtime <identifiersep> camel <identifiersep> exception ( e ) ; } } \n \t1 private void set <identifiersep> leader ( boolean is <identifiersep> leader ) { \n \t2 if ( is <identifiersep> leader && leader . compare <identifiersep> and <identifiersep> set ( false , is <identifiersep> leader ) ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t5 } catch ( exception ignored ) { } \n \t5 all <identifiersep> channels = null ; } \n \t3 } ) . start ( ) ; \n \t3 j <identifiersep> storm <identifiersep> utils . sleep <identifiersep> ms ( <number_literal> ) ; } \n <ect>
\t3 site <identifiersep> path , \n \t3 cms . get <identifiersep> request <identifiersep> context ( ) . get <identifiersep> current <identifiersep> project ( ) . get <identifiersep> uuid ( ) . to <identifiersep> string ( ) ) . as <identifiersep> string ( ) ; \n \t2 log . debug ( p + <string_literal> + state ) ; \n \t2 log . debug ( p + <string_literal> + m <identifiersep> current <identifiersep> state ) ; \n <ect>
\t1 { \n \t2 if ( ! gossip <identifiersep> active ) \n \t2 { \n \t3 check <identifiersep> service <identifiersep> allowed <identifiersep> to <identifiersep> start ( <string_literal> ) ; \n <ect>
\t2 if ( memparts . length > 1 ) { \n \t3 logger . debug ( <string_literal> , memparts [ 0 ] , memparts [ 1 ] ) ; \n \t3 bit = integer . parse <identifiersep> int ( memparts [ 1 ] ) ; \n \t3 if ( ( bit < 0 ) || ( bit > <number_literal> ) ) { \n <ect>
\t6 slot = i ; } } \n \t4 if ( msg == null ) \n \t5 return ; \n \t4 <comment> \n <ect>
\t4 try { \n \t5 update <identifiersep> counts = stmt . execute <identifiersep> batch ( ) ; \n \t4 } catch ( sql <identifiersep> exception e ) { \n \t5 for ( int i = 0 ; i < batch <identifiersep> size ; i ++ ) { \n <ect>
\t1 public void stop <identifiersep> thrift <identifiersep> client ( ) throws exception { \n \t2 if ( transport != null ) { \n \t3 transport . close ( ) ; \n \t3 transport = null ; \n <ect>
\t2 if ( event <identifiersep> str != null ) { \n \t3 try { \n \t4 event = integer . parse <identifiersep> int ( event <identifiersep> str ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 log . trace ( <string_literal> , reader . get <identifiersep> class ( ) ) ; \n \t3 <comment> \n \t3 int coff = reader . get <identifiersep> location ( ) . get <identifiersep> character <identifiersep> offset ( ) ; \n \t3 if ( coff != 0 ) { \n <ect>
\t3 key . set <identifiersep> doc ( this . current <identifiersep> key . get <identifiersep> doc ( ) ) ; \n \t3 value . set <identifiersep> doc ( this . current <identifiersep> val . get <identifiersep> doc ( ) ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t4 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> ) ; } \n \t3 s <identifiersep> logger . debug ( <string_literal> + elb <identifiersep> vm ) ; \n \t3 return elb <identifiersep> vm ; \n \t2 } catch ( final throwable t ) { \n <ect>
\t7 <comment> \n \t7 if ( mvcc <identifiersep> fut . on <identifiersep> owner <identifiersep> changed ( entry , owner ) ) \n \t8 return ; } } } } \n <ect>
\t2 { \n \t3 logger . debug ( <string_literal> , source <identifiersep> name ) ; \n \t3 worksheet worksheet = generate <identifiersep> worksheet ( source <identifiersep> name , new buffered <identifiersep> input <identifiersep> stream ( data ) , data <identifiersep> type , input <identifiersep> type <identifiersep> parameters , \n \t5 workspace ) ; \n <ect>
logger . info ( <string_literal> . format ( name ) ) \n ( success , source <identifiersep> file , dest <identifiersep> file , prepare <identifiersep> function ) = get <identifiersep> tarball <identifiersep> paths ( name , use <identifiersep> upgrading <identifiersep> version <identifiersep> during <identifiersep> upgrade , \n <number_literal> custom <identifiersep> source <identifiersep> file , custom <identifiersep> dest <identifiersep> file ) \n if not success : \n <ect>
\t2 <comment> \n \t2 if ( properties == null || properties . is <identifiersep> empty ( ) ) { \n \t3 logger . trace ( <string_literal> ) ; \n \t3 return ; } \n <ect>
\t4 host <identifiersep> vo host =  <identifiersep> resource <identifiersep> mgr . find <identifiersep> host <identifiersep> by <identifiersep> name ( ss <identifiersep> vm . get <identifiersep> instance <identifiersep> name ( ) ) ; \n \t4 answer answer =  <identifiersep> agent <identifiersep> mgr . easy <identifiersep> send ( host . get <identifiersep> id ( ) , setup <identifiersep> cmd ) ; \n \t4 if ( answer != null && answer . get <identifiersep> result ( ) ) { \n <ect>
\t2 string [ ] merge <identifiersep> path = this . merge <identifiersep> path . split ( <string_literal> ) ; \n \t2 join <identifiersep> json <identifiersep> object ( object <identifiersep> to <identifiersep> join , merge <identifiersep> path , 0 ) ; \n \t2 output <identifiersep> collector . emit ( new values ( object <identifiersep> to <identifiersep> join . get <identifiersep> string ( at <identifiersep> id ) , object <identifiersep> to <identifiersep> join . to <identifiersep> string ( ) ) ) ; \n \t2 output <identifiersep> collector . ack ( tuple ) ; \n <ect>
\t4 task . set <identifiersep> future ( sf ) ; } } \n \t2 new <identifiersep> v <identifiersep> mnames . clear ( ) ; } \n \t1 public synchronized void add <identifiersep> vm ( string vm <identifiersep> name ) { \n \t2 new <identifiersep> v <identifiersep> mnames . add ( vm <identifiersep> name ) ; \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t1 json <identifiersep> ser <identifiersep> de jsde = new json <identifiersep> ser <identifiersep> de ( ) ; \n \t1 ser <identifiersep> de <identifiersep> utils . initialize <identifiersep> ser <identifiersep> de ( jsde , conf , tbl <identifiersep> props , null ) ; \n \t1 log . info ( <string_literal> , r ) ; \n \t1 writable s = hrsd . serialize ( r , hrsd . get <identifiersep> object <identifiersep> inspector ( ) ) ; \n <ect>
\t7 try ( prepared <identifiersep> statement pstmt = conn . prepare <identifiersep> statement ( <string_literal> ) ; ) { \n \t8 pstmt . set <identifiersep> long ( 1 , id ) ; \n \t8 pstmt . execute <identifiersep> update ( ) ; \n \t8 s <identifiersep> logger . debug ( <string_literal> + id + <string_literal> ) ; } } } } } \n <ect>
\t2 meta <identifiersep> store <identifiersep> service . stop ( ) ; \n \t1 } catch ( exception e ) { \n \t2 <comment> \n \t2 <comment> \n <ect>
\t3 gb . set <identifiersep> version ( 1 . <number_literal> ) ; \n \t3 gson gson = gb . create ( ) ; \n \t3 status = gson . from <identifiersep> json ( answer . get <identifiersep> details ( ) , console <identifiersep> proxy <identifiersep> status . class ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t2 element workflow <identifiersep> properties = null ; \n \t2 try { \n \t3 workflow <identifiersep> properties = xml <identifiersep> utils . parse <identifiersep> xml ( action <identifiersep> xml ) ; } \n \t2 catch ( jdom <identifiersep> exception e1 ) { \n <ect>
\t4 case nak <identifiersep> ack <identifiersep> header2 . highest <identifiersep> seqno : \n \t5 handle <identifiersep> highest <identifiersep> seqno ( batch . sender ( ) , hdr . seqno ) ; \n \t5 break ; \n \t4 default : \n <ect>
\t1 } catch ( recognition <identifiersep> exception e ) { \n \t1 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t1 throw new parse <identifiersep> exception ( parser . errors ) ; } \n \t1 if ( lexer . get <identifiersep> errors ( ) . size ( ) == 0 && parser . errors . size ( ) == 0 ) { \n <ect>
\t4 job <identifiersep> latch . count <identifiersep> down ( ) ; \n \t4 log . info ( <string_literal> ) ; \n \t4 <comment> \n \t4 latch . await ( ) ; \n <ect>
\t5 <string_literal> ) ; } \n \t2 <comment> \n \t2 if ( ! new <identifiersep> service <identifiersep> offering . is <identifiersep> dynamic ( ) && vm <identifiersep> instance . get <identifiersep> service <identifiersep> offering <identifiersep> id ( ) == new <identifiersep> service <identifiersep> offering . get <identifiersep> id ( ) ) { \n <ect>
\t3 deployment . set <identifiersep> turn <identifiersep> off <identifiersep> change <identifiersep> session <identifiersep> id <identifiersep> on <identifiersep> login ( adapter <identifiersep> config . get <identifiersep> turn <identifiersep> off <identifiersep> change <identifiersep> session <identifiersep> id <identifiersep> on <identifiersep> login ( ) ) ; } \n \t2 policy <identifiersep> enforcer <identifiersep> config policy <identifiersep> enforcer <identifiersep> config = adapter <identifiersep> config . get <identifiersep> policy <identifiersep> enforcer <identifiersep> config ( ) ; \n \t2 if ( policy <identifiersep> enforcer <identifiersep> config != null ) { \n \t3 deployment . set <identifiersep> policy <identifiersep> enforcer ( new policy <identifiersep> enforcer ( deployment , adapter <identifiersep> config ) ) ; } \n <ect>
\t4 snap <identifiersep> info = lookup ( snapshot <identifiersep> id ) ; \n \t4 iqn <identifiersep> and <identifiersep> lun = snap <identifiersep> info . get <identifiersep> iqn ( ) ; \n \t4 san <identifiersep> volume <identifiersep> id = snap <identifiersep> info . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> record <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 hts <identifiersep> mlsa <identifiersep> vocoder ( lf0pst , mcep <identifiersep> pst , str <identifiersep> pst , mag <identifiersep> pst , voiced , hts <identifiersep> data , this ) ; \n \t4 put <identifiersep> end <identifiersep> of <identifiersep> stream ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 action <identifiersep> manager manager = injector . get <identifiersep> instance ( action <identifiersep> manager . class ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 ambari <identifiersep> management <identifiersep> controller controller = injector . get <identifiersep> instance ( \n \t2 ambari <identifiersep> management <identifiersep> controller . class ) ; \n <ect>
\t2 && op . get <identifiersep> child <identifiersep> operators ( ) . get ( 0 ) instanceof join <identifiersep> operator ) { \n \t2 join <identifiersep> operator join <identifiersep> op = ( join <identifiersep> operator ) op . get <identifiersep> child <identifiersep> operators ( ) . get ( 0 ) ; \n \t2 if ( skip <identifiersep> folding ( join <identifiersep> op . get <identifiersep> conf ( ) ) ) { \n <ect>
\t3 { \n \t4 this . obj <identifiersep> method . invoke ( obj , e ) ; } \n \t3 catch ( final throwable e1 ) \n \t3 { \n <ect>
\t3 if ( c != null ) \n \t4 c . close ( ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t4 dump ( <string_literal> ) ; } \n \t3 return - 1 ; } \n <ect>
\t4 if ( ifc . is <identifiersep> up ( ) && ! ifc . is <identifiersep> virtual ( ) ) { \n \t5 for ( inet <identifiersep> address addr : iterator <identifiersep> helper . enumeration <identifiersep> as <identifiersep> iterable ( ifc . get <identifiersep> inet <identifiersep> addresses ( ) ) ) { \n \t6 addr <identifiersep> list . add ( addr ) ; } } } \n \t2 } catch ( socket <identifiersep> exception e ) { \n <ect>
\t4 case udp <identifiersep> packet . payload <identifiersep> type <identifiersep> session <identifiersep> destroy : \n \t5  <identifiersep> state = <number_literal> ; \n \t5 if ( auth == auth <identifiersep> type . bobintro ) { \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 @ sneaky <identifiersep> throws \n \t1 protected boolean execute <identifiersep> search <identifiersep> for <identifiersep> spnego <identifiersep> attribute ( final string remote <identifiersep> ip ) { \n \t2 connection connection = null ; \n \t2 final string remote <identifiersep> host <identifiersep> name = get <identifiersep> remote <identifiersep> host <identifiersep> name ( remote <identifiersep> ip ) ; \n <ect>
\t3 found <identifiersep> unexpected = false ; \n \t3 for ( string name : expected <identifiersep> names ) { \n \t4 for ( object <identifiersep> name bean : beans ) { \n \t5 if ( bean . to <identifiersep> string ( ) . contains ( name ) ) { \n <ect>
\t6 if ( !  <identifiersep> private <identifiersep> ip <identifiersep> address <identifiersep> dao . delete <identifiersep> ip <identifiersep> address <identifiersep> by <identifiersep> pod <identifiersep> dc ( net <identifiersep> utils . long2ip ( ip <identifiersep> addr ) , pod <identifiersep> id , pod . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ) { \n \t7 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + net <identifiersep> utils . long2ip ( ip <identifiersep> addr ) + <string_literal> + pod <identifiersep> id + <string_literal> + pod . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; } } } \n \t3 } ) ; \n \t2 } catch ( final exception e ) { \n <ect>
<number_literal> insert <identifiersep> port <identifiersep> forwarding <identifiersep> rules . set <identifiersep> int ( <number_literal> , integer . parse <identifiersep> int ( private <identifiersep> port . trim ( ) ) ) ; \n <number_literal> insert <identifiersep> port <identifiersep> forwarding <identifiersep> rules . set <identifiersep> int ( <number_literal> , integer . parse <identifiersep> int ( private <identifiersep> port . trim ( ) ) ) ; \n <number_literal> insert <identifiersep> port <identifiersep> forwarding <identifiersep> rules . execute <identifiersep> update ( ) ; } \n \t10 s <identifiersep> logger . trace ( <string_literal> ) ; } } } } } } } \n <ect>
\t2 if ( suspected <identifiersep> members . is <identifiersep> empty ( ) ) \n \t3 return ; \n \t2 suspected <identifiersep> members . stream ( ) . filter ( mbr - > ! suspected <identifiersep> mbrs . contains ( mbr ) ) . for <identifiersep> each ( suspected <identifiersep> mbrs : : add ) ; \n \t2 if ( would <identifiersep> i <identifiersep> be <identifiersep> coordinator ( ) ) { \n <ect>
\t4  <identifiersep> log . warn ( <string_literal> , new exception ( <string_literal> ) ) ; \n \t3  <identifiersep> transport . failed ( state , false ) ; \n \t3 return ; } \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 executor <identifiersep> service . shutdown ( ) ; \n \t3 try { \n \t4 executor <identifiersep> service . await <identifiersep> termination ( 1 , time <identifiersep> unit . minutes ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t7 s <identifiersep> logger . debug ( <string_literal> + work . get <identifiersep> id ( ) ) ; } \n \t6 if ( ! change <identifiersep> state ( vm , event . agent <identifiersep> report <identifiersep> stopped , null , work , step . done ) ) { \n \t7 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + vm ) ; } \n \t5 } catch ( final no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
<number_literal> new default <identifiersep> message <identifiersep> container ( new message ( topic , message ) , json <identifiersep> mapper ) ) ; \n \t8 } catch ( consumer <identifiersep> timeout <identifiersep> exception timeout <identifiersep> exception ) { \n \t9 <comment> \n \t8 } catch ( exception e ) { \n <ect>
\t2 int budget = system <identifiersep> avail <identifiersep> mb - reserve ; \n \t2 if ( budget < base <identifiersep> result . aggr <identifiersep> cache <identifiersep> mb ) { \n \t3 <comment> \n \t3 budget = base <identifiersep> result . aggr <identifiersep> cache <identifiersep> mb ; \n <ect>
\t2 integer xacceleration = acceleration != null ? acceleration : this . acceleration ; \n \t2 integer xpwm = pwm != null ? pwm : this . pwm <identifiersep> frequency ; \n \t2 short xspeed = 0 ; \n \t2 if ( speed == null ) { \n <ect>
\t3 service <identifiersep> manager service <identifiersep> manager = kernel . get <identifiersep> service <identifiersep> manager ( ) ; \n \t3 request <identifiersep> service = service <identifiersep> manager . get <identifiersep> service <identifiersep> by <identifiersep> name ( request <identifiersep> service . class . get <identifiersep> name ( ) , request <identifiersep> service . class ) ; \n \t3 if ( request <identifiersep> service == null ) { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t6 break ; } } } \n \t3 state = domain <identifiersep> state . vir <identifiersep> domain <identifiersep> running ; \n \t3 return new start <identifiersep> answer ( command ) ; \n \t2 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 logger . warn ( <string_literal> , type , dpt <identifiersep> id , \n \t5 e . get <identifiersep> message ( ) ) ; \n \t3 return null ; } \n <ect>
\t6 class  <identifiersep> c = class <identifiersep> loader <identifiersep> util . load <identifiersep> class ( ( string ) entry . get <identifiersep> value ( ) , this . get <identifiersep> class ( ) ) ; \n \t6 log . debug ( <string_literal> , key , entry . get <identifiersep> value ( ) ,  <identifiersep> c ) ; \n \t6 mapping . put ( key ,  <identifiersep> c ) ; } } } \n \t2 } catch ( exception ex ) { \n <ect>
\t1 public static final int connection <identifiersep> timeout = client <identifiersep> base . connection <identifiersep> timeout ; \n \t1 private final quorum <identifiersep> base qb = new quorum <identifiersep> base ( ) ; \n \t1 @ before \n \t1 public void set <identifiersep> up ( ) throws exception { \n <ect>
\t2 mock <identifiersep> endpoint . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 assert <identifiersep> equals ( thrift <identifiersep> test <identifiersep> num1 * thrift <identifiersep> test <identifiersep> num2 , calculate <identifiersep> result ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> echo <identifiersep> method <identifiersep> invocation ( ) throws exception { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 entities . persist ( update ) ; } \n \t2 db . commit ( ) ; } \n \t1 for ( final string instance <identifiersep> id : unhealthy <identifiersep> instances ) { \n \t1 eucalyptus <identifiersep> activity <identifiersep> tasks . get <identifiersep> instance ( ) . terminate <identifiersep> instances ( lists . new <identifiersep> array <identifiersep> list ( instance <identifiersep> id ) ) ; \n <ect>
\t1 action <identifiersep> final <identifiersep> report <identifiersep> received <identifiersep> event event = new action <identifiersep> final <identifiersep> report <identifiersep> received <identifiersep> event ( \n \t3 cluster <identifiersep> id , hostname , report , true ) ; \n \t1 ambari <identifiersep> event <identifiersep> publisher . publish ( event ) ; \n \t1 } catch ( ambari <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4  <identifiersep> ts <identifiersep> a = ( now + <number_literal> ) / <number_literal> ; \n \t4  <identifiersep> peer <identifiersep> skew = ( now - (  <identifiersep> ts <identifiersep> b * <number_literal> ) - ( rtt / <number_literal> ) + <number_literal> ) / <number_literal> ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t5 int diff = 0 ; \n \t5 while ( messages <identifiersep> count != messages <identifiersep> count ) { \n \t6 message msg = consumer . receive ( message <identifiersep> receive <identifiersep> timeout ) ; \n \t6 if ( msg == null ) { \n <ect>
\t4 if ( port == - 1 ) \n \t5 port = <number_literal> ; \n \t4 if (  <identifiersep> should <identifiersep> proxy ) { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 begin <identifiersep> tx ( ) ; \n \t2 producer . send ( outbound [ 0 ] ) ; \n \t2 producer . send ( outbound [ 1 ] ) ; \n \t2 commit <identifiersep> tx ( ) ; \n <ect>
\t3 try { \n \t4 response . send <identifiersep> redirect ( oauth <identifiersep> server . get <identifiersep> end <identifiersep> user <identifiersep> authorization <identifiersep> request <identifiersep> uri ( request ) ) ; \n \t4 return null ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 public void stop <identifiersep> nodes ( ) { \n \t2 try { \n \t3 close <identifiersep> nodes ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 return true ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + e . to <identifiersep> string ( ) ) ; \n \t2 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 generate <identifiersep> report ( ) ; \n \t3 } catch ( exception e ) { \n \t4 system . err . println ( <string_literal> + e ) ; <comment> \n <ect>
\t2 if ( ! version <identifiersep> table <identifiersep> exists ( ) ) { \n \t3 create <identifiersep> schema <identifiersep> version <identifiersep> table ( ) ; } \n \t2 final collection < migration > pending <identifiersep> migrations = get <identifiersep> pending <identifiersep> migrations ( ) ; \n \t2 if ( pending <identifiersep> migrations . is <identifiersep> empty ( ) ) { \n <ect>
\t2 args . not <identifiersep> null ( endpoint , <string_literal> ) ; \n \t2 final internal <identifiersep> connection <identifiersep> endpoint internal <identifiersep> endpoint = cast ( endpoint ) ; \n \t2 final managed <identifiersep> http <identifiersep> client <identifiersep> connection conn = internal <identifiersep> endpoint . detach ( ) ; \n <ect>
\t2 nginx <identifiersep> http <identifiersep> server <identifiersep> channel downstream = req . hijack ( true ) ; \n \t2 downstream . add <identifiersep> listener ( downstream , new channel <identifiersep> close <identifiersep> adapter < nginx <identifiersep> http <identifiersep> server <identifiersep> channel > ( ) { \n \t3 @ override \n \t3 public void on <identifiersep> close ( nginx <identifiersep> http <identifiersep> server <identifiersep> channel data ) { \n <ect>
\t1 public static final boolean debug = bc <identifiersep> debugging . should <identifiersep> debug <identifiersep> log ( <string_literal> ) ; \n \t1 public static item <identifiersep> stack load <identifiersep> complex <identifiersep> item <identifiersep> stack ( string line ) { \n \t2 string [ ] args = line . split ( <string_literal> ) ; \n \t2 if ( args . length == 0 ) { \n <ect>
\t3 if ( ! result . first ( ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + control <identifiersep> ip + <string_literal> + result . second ( ) ) ; \n \t4 return new answer ( cmd , false , <string_literal> + result . second ( ) ) ; } \n <ect>
\t6 log . info ( format ( <string_literal> , action . id , uri , ex . get <identifiersep> message ( ) ) ) ; \n \t6 error <identifiersep> bad <identifiersep> request ( <string_literal> + uri + <string_literal> + ex . get <identifiersep> message ( ) ) ; \n \t5 } catch ( exception ex ) \n \t5 { \n <ect>
<comment> \n \t1 @ override \n \t1 public void handle <identifiersep> application <identifiersep> command <identifiersep> request ( serial <identifiersep> message serial <identifiersep> message , int offset , int endpoint ) { \n <ect>
\t2 dir <identifiersep> exists = not dfs <identifiersep> ret <identifiersep> code # dfs - test - d returns 0 in case the dir exists \n \t1 if not dir <identifiersep> exists : \n \t2 raise fail ( <string_literal> + dir <identifiersep> path + <string_literal> ) \n \t1 else : \n <ect>
\t2  <identifiersep> usage <identifiersep> time <identifiersep> zone = configs . get ( <string_literal> ) ; \n \t2 if (  <identifiersep> usage <identifiersep> time <identifiersep> zone == null ) { \n \t3  <identifiersep> usage <identifiersep> time <identifiersep> zone = <string_literal> ; } \n \t2  <identifiersep> agent <identifiersep> mgr . register <identifiersep> for <identifiersep> host <identifiersep> events ( this , true , false , false ) ; \n <ect>
\t2 enabled <identifiersep> protocols = string <identifiersep> utils . split <identifiersep> and <identifiersep> trim ( enabled <identifiersep> protocols <identifiersep> property , <string_literal> ) ; } \n \t2 if ( default <identifiersep> protocol <identifiersep> property != null ) { \n \t2 default <identifiersep> protocol = default <identifiersep> protocol <identifiersep> property . trim ( ) ; } } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 } catch ( i2p <identifiersep> exception ie ) { \n \t4  <identifiersep> log . error ( <string_literal> , ie ) ; \n \t4 return ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 } else { \n \t3 log . debug ( <string_literal> , cpool . get <identifiersep> retry <identifiersep> backoff <identifiersep> strategy ( ) ) ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( local <identifiersep> datacenter ) ) { \n \t3 cpool . set <identifiersep> local <identifiersep> datacenter ( local <identifiersep> datacenter ) ; \n <ect>
\t2 } else if ( action == action . suspend ) { \n \t3 if ( route <identifiersep> status == service <identifiersep> status . started ) { \n \t4 suspend <identifiersep> or <identifiersep> stop <identifiersep> consumer ( route . get <identifiersep> consumer ( ) ) ; \n \t3 } else { \n <ect>
\t4 <comment> \n \t4 for ( state <identifiersep> change desired <identifiersep> state <identifiersep> change : node . get <identifiersep> desired <identifiersep> state <identifiersep> changes ( ) ) { \n \t5 logger . info ( desired <identifiersep> state <identifiersep> change . to <identifiersep> string ( ) ) ; } \n \t4 <comment> \n <ect>
\t3 ut . join ( ) ; <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 for ( throwable throwable : failures ) { \n <ect>
<comment> \n \t1 public void send <identifiersep> mail <identifiersep> messages ( ns <identifiersep> array mail <identifiersep> messages ) { \n \t2 if ( mail <identifiersep> messages . count ( ) > 0 ) { \n <ect>
\t2 if ( new <identifiersep> service <identifiersep> offering == null ) { \n \t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> ) ; } \n \t2 <comment> \n \t2 if ( ! ( vm <identifiersep> instance . get <identifiersep> state ( ) . equals ( state . stopped ) || vm <identifiersep> instance . get <identifiersep> state ( ) . equals ( state . running ) ) ) { \n <ect>
\t3 result . tope = ( thrift <identifiersep> table <identifiersep> operation <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> tope <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t5 config <identifiersep> stream = config <identifiersep> url . open <identifiersep> stream ( ) ; } } \n \t3 if ( config <identifiersep> stream != null ) { \n \t4 return new tika <identifiersep> config <identifiersep> holder ( new tika <identifiersep> config ( config <identifiersep> stream ) , config <identifiersep> source ) ; } \n \t2 } catch ( tika <identifiersep> exception | io <identifiersep> exception | sax <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t1 service <identifiersep> configuration walrus <identifiersep> config = topology . lookup ( object <identifiersep> storage . class ) ; \n \t1 walrus <identifiersep> url = service <identifiersep> uris . remote ( walrus <identifiersep> config ) . to <identifiersep> ascii <identifiersep> string ( ) ; \n \t1 storage <identifiersep> properties . enable <identifiersep> snapshots = true ; \n <ect>
\t3 public void life <identifiersep> cycle <identifiersep> failure ( life <identifiersep> cycle lc , throwable t ) \n \t3 { \n \t4 if ( verbose ) \n \t4 { \n <ect>
\t5 try { \n \t6 if ( socket != null ) { \n \t7 socket . close ( ) ; } \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 @ test \n \t1 public void create <identifiersep> album <identifiersep> with <identifiersep> invalid <identifiersep> user ( ) throws exception { \n \t2 login <identifiersep> to <identifiersep> client <identifiersep> page ( <string_literal> , <string_literal> ) ; \n \t2 client <identifiersep> page . create <identifiersep> album <identifiersep> with <identifiersep> invalid <identifiersep> user ( <string_literal> ) ; \n <ect>
\t3 if ( is <identifiersep> done ( ) ) \n \t4 return ; \n \t3 if ( rcv <identifiersep> res . compare <identifiersep> and <identifiersep> set ( false , true ) ) { \n <ect>
\t2 throw new semantic <identifiersep> exception ( e1 ) ; } \n \t1 ctx . reset <identifiersep> op <identifiersep> context ( ) ; \n \t1 ctx . reset <identifiersep> stream ( ) ; \n \t1 task <identifiersep> factory . reset <identifiersep> id ( ) ; \n <ect>
public class multiple <identifiersep> containers <identifiersep> extension implements loadable <identifiersep> extension { \n \t1 private static final logger logger = logger . get <identifiersep> logger ( multiple <identifiersep> containers <identifiersep> extension . class . get <identifiersep> name ( ) ) ; \n \t1 @ override \n \t1 public void register ( extension <identifiersep> builder builder ) { \n <ect>
\t2 <comment> \n \t2 if ( pit . has <identifiersep> validator ( ) ) { \n \t3 identifier <identifiersep> validator validator = context . get <identifiersep> patient <identifiersep> service ( ) . get <identifiersep> identifier <identifiersep> validator ( pit . get <identifiersep> validator ( ) ) ; \n \t3 check <identifiersep> identifier <identifiersep> against <identifiersep> validator ( identifier , validator ) ; } \n <ect>
\t3 try { \n \t4 decimal <identifiersep> format my <identifiersep> formatter = new decimal <identifiersep> format ( format ) ; \n \t4 return my <identifiersep> formatter . format ( value ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception ignored ) { \n <ect>
\t5 log . info ( <string_literal> + number <identifiersep> consumed <identifiersep> message ) ; \n \t5 break ; } \n \t4 int new <identifiersep> app <identifiersep> id = message . get <identifiersep> int <identifiersep> property ( <string_literal> ) ; \n \t4 number <identifiersep> consumed <identifiersep> message ++ ; \n <ect>
\t2 metaspace <identifiersep> size = <string_literal> \n \t2 cmd = cmd [ : - 1 ] + <string_literal> + metaspace <identifiersep> size + <string_literal> \n \t1 run <identifiersep> file <identifiersep> path = none \n \t1 try : \n <ect>
\t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t6  <identifiersep> log . warn ( <string_literal> + addresses . to <identifiersep> string ( from <identifiersep> ip , from <identifiersep> port ) ) ; \n \t5 return ; } \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t8 . put ( <string_literal> , repository <identifiersep> location ) \n \t8 . put ( <string_literal> , random <identifiersep> alpha <identifiersep> of <identifiersep> length ( <number_literal> ) ) \n \t8 . put ( <string_literal> , 0 . <number_literal> ) ) ) ; \n \t2 <comment> \n <ect>
\t1 try { \n \t1 submitted <identifiersep> job <identifiersep> graphs . start ( this ) \n \t1 } catch { \n \t1 case e : exception = > \n <ect>
\t2 answer [ ] answers = null ; \n \t2 try { \n \t3 answers =  <identifiersep> agent <identifiersep> mgr . send ( router . get <identifiersep> host <identifiersep> id ( ) , cmds ) ; \n \t2 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t1 public key unwrap <identifiersep> key ( key unwrap <identifiersep> key , string wrapped <identifiersep> key <identifiersep> algorithm ) \n \t3 throws invalid <identifiersep> key <identifiersep> exception , no <identifiersep> such <identifiersep> algorithm <identifiersep> exception { \n \t2 key unwrapped <identifiersep> key ; \n \t2 if ( log . is <identifiersep> loggable ( level . info ) ) { \n <ect>
\t3 method method = druid <identifiersep> data <identifiersep> source . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> ) ; \n \t3 object obj = method . invoke ( druid <identifiersep> data <identifiersep> source ) ; \n \t3 return ( boolean ) obj ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 } catch ( jms <identifiersep> exception e ) { \n \t6 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t5 } ; \n \t4 } catch ( exception e ) { \n <ect>
public static class script <identifiersep> ppd extends default <identifiersep> ppd implements node <identifiersep> processor { \n \t1 @ override \n \t1 public object process ( node nd , stack < node > stack , node <identifiersep> processor <identifiersep> ctx proc <identifiersep> ctx , \n \t2 object . . . node <identifiersep> outputs ) throws semantic <identifiersep> exception { \n <ect>
\t3 return cache <identifiersep> key <identifiersep> generator . generate <identifiersep> key ( host , request , cache <identifiersep> entry ) ; } } \n \t1 @ override \n \t1 public void flush <identifiersep> cache <identifiersep> entries <identifiersep> for ( final http <identifiersep> host host , final http <identifiersep> request request ) { \n <ect>
\t2 int log <identifiersep> period = options <identifiersep> helper . has <identifiersep> option ( option <identifiersep> log <identifiersep> period ) ? integer . value <identifiersep> of ( options <identifiersep> helper . get <identifiersep> option <identifiersep> value ( option <identifiersep> log <identifiersep> period ) ) : default <identifiersep> log <identifiersep> period ; \n \t2 if ( log <identifiersep> period < 1 ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return ; } \n <ect>
\t5 return bson <identifiersep> loader . convert <identifiersep> bso <identifiersep> nto <identifiersep> pig <identifiersep> type ( obj ) ; } \n \t2 } catch ( exception e ) { \n \t3 string field <identifiersep> name = field . get <identifiersep> name ( ) == null ? <string_literal> : field . get <identifiersep> name ( ) ; \n \t3 string type = data <identifiersep> type . gen <identifiersep> type <identifiersep> to <identifiersep> name <identifiersep> map ( ) . get ( field . get <identifiersep> type ( ) ) ; \n <ect>
\t4  <identifiersep> log . debug ( <string_literal> ) ; \n \t3  <identifiersep> context . job <identifiersep> queue ( ) . add <identifiersep> job ( search <identifiersep> job ) ; \n \t2 } else { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 date <identifiersep> time now = context ( ) . get <identifiersep> value <identifiersep> factories ( ) . get <identifiersep> date <identifiersep> factory ( ) . create ( ) ; \n \t3 editor . set <identifiersep> date ( repository <identifiersep> upgraded <identifiersep> at <identifiersep> field <identifiersep> name , now . to <identifiersep> date ( ) ) ; \n \t3 editor . set <identifiersep> number ( repository <identifiersep> upgrade <identifiersep> id <identifiersep> field <identifiersep> name , last <identifiersep> upgrade <identifiersep> id ) ; \n \t3 editor . remove ( repository <identifiersep> upgrader <identifiersep> field <identifiersep> name ) ; \n <ect>
\t6  <identifiersep> log . debug ( prefix ( ) + <string_literal> + base64 . encode ( hxy ) ) ; \n \t6  <identifiersep> log . debug ( prefix ( ) + <string_literal> +  <identifiersep> ts <identifiersep> b ) ; \n \t6  <identifiersep> log . debug ( prefix ( ) + <string_literal> + base64 . encode ( to <identifiersep> encrypt ) ) ; \n \t6  <identifiersep> log . debug ( prefix ( ) + <string_literal> + base64 . encode (  <identifiersep> y , xy <identifiersep> size - aes <identifiersep> size , aes <identifiersep> size ) ) ; \n <ect>
\t5 object <identifiersep> name ) . get <identifiersep> connection ( ) ; \n \t3 http <identifiersep> response response = utils . do <identifiersep> read <identifiersep> operation ( url <identifiersep> connection ) ; \n \t3 if ( ! response . is <identifiersep> success <identifiersep> code ( ) ) { \n \t4 if ( response . is <identifiersep> auth <identifiersep> denied ( ) ) { \n <ect>
\t1 public binding <identifiersep> report ( ) { \n \t2 this ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void call ( injector injector ) { \n <ect>
\t2 java . io . file file1 = null ; \n \t2 java . io . file file2 = null ; \n \t2 java . io . file file3 = null ; \n \t2 try { \n <ect>
\t1 @ override \n \t1 public void destroy ( ) { } \n \t1 public static void main ( string [ ] args ) { \n \t2 try { \n <ect>
\t4 if ( file . exists ( ) ) { \n \t5 file <identifiersep> input <identifiersep> stream file <identifiersep> input <identifiersep> stream = new file <identifiersep> input <identifiersep> stream ( file ) ; \n \t5 complex <identifiersep> data = new complex <identifiersep> data ( original <identifiersep> filename , file <identifiersep> input <identifiersep> stream ) ; \n \t4 } else { \n <ect>
\t4 log . info ( <string_literal> + qstats . get <identifiersep> cache <identifiersep> hit <identifiersep> count ( ) ) ; \n \t4 log . info ( <string_literal> + qstats . get <identifiersep> cache <identifiersep> miss <identifiersep> count ( ) ) ; \n \t4 log . info ( <string_literal> + qstats . get <identifiersep> cache <identifiersep> put <identifiersep> count ( ) ) ; \n \t4 log . info ( <string_literal> + qstats . get <identifiersep> execution <identifiersep> count ( ) ) ; \n <ect>
\t1 string san <identifiersep> volume <identifiersep> id = volume <identifiersep> info . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) ; \n \t1 log . info ( <string_literal> + san <identifiersep> volume <identifiersep> id + <string_literal> + node <identifiersep> iqn ) ; \n \t1 string lun = connection <identifiersep> manager . export <identifiersep> resource ( san <identifiersep> volume <identifiersep> id , node <identifiersep> iqn , volume <identifiersep> info . get <identifiersep> iqn ( ) ) ; \n \t1 if ( lun == null ) { \n <ect>
\t7 m . invoke ( null , ( object ) cutargs ( args ) ) ; \n \t6 } else { \n \t7 usage ( ) ; } } \n \t3 } catch ( exception e ) { \n <ect>
\t2 final optional < saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade > adaptor = \n \t3 saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade . get ( this . saml <identifiersep> registered <identifiersep> service <identifiersep> caching <identifiersep> metadata <identifiersep> resolver , \n \t4 registered <identifiersep> service , authn <identifiersep> request ) ; \n \t2 if ( ! adaptor . is <identifiersep> present ( ) ) { \n <ect>
\t2 try { \n \t3 object <identifiersep> name object <identifiersep> name = broker <identifiersep> m <identifiersep> bean <identifiersep> support . create <identifiersep> destination <identifiersep> name ( broker <identifiersep> object <identifiersep> name , dest <identifiersep> name ) ; \n \t3 unregister <identifiersep> destination ( object <identifiersep> name ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( direction != null && direction != direction <identifiersep> value . undef ) { \n \t3 up <identifiersep> down <identifiersep> type directiontmp = this . direction == direction <identifiersep> value . left ? up <identifiersep> down <identifiersep> type . up : up <identifiersep> down <identifiersep> type . down ; \n \t3 move ( directiontmp , opts ) ; \n \t2 } else { \n <ect>
\t2 get <identifiersep> channel <identifiersep> processor ( ) . process <identifiersep> event ( e ) ; \n \t2 counter <identifiersep> group . increment <identifiersep> and <identifiersep> get ( <string_literal> ) ; \n \t1 } catch ( channel <identifiersep> exception ex ) { \n \t2 counter <identifiersep> group . increment <identifiersep> and <identifiersep> get ( <string_literal> ) ; \n <ect>
\t1 public void on <identifiersep> success ( none result ) \n \t1 { \n \t2 if (  <identifiersep> state . try <identifiersep> enable <identifiersep> quarantine ( ) ) \n \t2 { \n <ect>
\t2 command <identifiersep> line cmd ; \n \t2 try { \n \t3 cmd = parser . parse ( all <identifiersep> options , args ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t4 break ; } \n \t3 coordinator <identifiersep> action <identifiersep> bean action <identifiersep> bean = new coordinator <identifiersep> action <identifiersep> bean ( ) ; \n \t3 last <identifiersep> action <identifiersep> number ++ ; \n \t3 int timeout = coord <identifiersep> job . get <identifiersep> timeout ( ) ; \n <ect>
\t6 netconf <identifiersep> client . disconnect ( ) ; \n \t6 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t5 throw new cloud <identifiersep> runtime <identifiersep> exception ( msg ) ; } } } \n \t2 if ( vlan <identifiersep> id == null ) { \n <ect>
\t3 system . out . println ( <string_literal> + value ) ; \n \t2 } catch ( memcached <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t2 } catch ( timeout <identifiersep> exception e ) { \n <ect>
\t2 for ( int i = 0 ; i < ids . length ; i ++ ) { \n \t3 ids [ i ] = client <identifiersep> unknowns . remove ( ) . id ; } \n \t2 if ( ids . length > 0 ) { \n \t3 if ( debug <identifiersep> cplx ) { \n <ect>
\t1 @ override \n \t1 public boolean validate ( final j2e <identifiersep> context context ) { \n \t2 final http <identifiersep> servlet <identifiersep> request request = context . get <identifiersep> request ( ) ; \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . grant <identifiersep> type ) ) { \n <ect>
\t2 try { \n \t3 close <identifiersep> internal ( status ) ; } \n \t2 catch ( throwable ex ) { \n <ect>
\t1 final int exit <identifiersep> value = process . wait <identifiersep> for ( ) ; \n \t1 log . debug ( <string_literal> , exit <identifiersep> value , io <identifiersep> utils . to <identifiersep> string ( process . get <identifiersep> input <identifiersep> stream ( ) ) ) ; \n \t1 if ( exit <identifiersep> value != 0 ) { \n \t2 throw new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t4 if ( ! tracker . has <identifiersep> changed ( ( source <identifiersep> type <identifiersep> stateful ) ostream ) ) { \n \t5 continue ; } \n \t4 source <identifiersep> init <identifiersep> service . execute ( new source <identifiersep> initializer ( queued <identifiersep> source <identifiersep> init <identifiersep> tasks . increment <identifiersep> and <identifiersep> get ( ) , next <identifiersep> stream , ostream ) ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t5 try { \n \t6 map < string , object > item = items . get ( 0 ) ; \n \t6 string date = ( string ) item . get ( hipchat <identifiersep> api <identifiersep> constants . api <identifiersep> date ) ; \n \t6 string message = ( string ) item . get ( hipchat <identifiersep> api <identifiersep> constants . api <identifiersep> message ) ; \n <ect>
\t2 property has <identifiersep> name <identifiersep> property = model . get <identifiersep> property ( namespaces . karma + <string_literal> ) ; \n \t2 property is <identifiersep> gounded <identifiersep> in <identifiersep> property = model . get <identifiersep> property ( namespaces . hrests + <string_literal> ) ; \n \t2 <comment> \n \t2 att <identifiersep> id = att <identifiersep> resource . get <identifiersep> local <identifiersep> name ( ) ; \n <ect>
\t4 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error e2 ) { \n \t5 logger . error ( <string_literal> + formatter . format ( buffer . length ) + <string_literal> + formatter . format ( realistic <identifiersep> size ) + <string_literal> , e2 ) ; \n \t5 logger . error ( <string_literal> + formatter . format ( runtime . get <identifiersep> runtime ( ) . free <identifiersep> memory ( ) ) ) ; \n \t5 logger . error ( <string_literal> + formatter . format ( runtime . get <identifiersep> runtime ( ) . total <identifiersep> memory ( ) ) ) ; \n <ect>
\t6 push <identifiersep> image <identifiersep> cmd cmd = client . push <identifiersep> image <identifiersep> cmd ( identifier ) ; \n \t6 docker <identifiersep> cloud . set <identifiersep> registry <identifiersep> authentication ( cmd , registry , jenkins . get <identifiersep> instance ( ) ) ; \n \t6 cmd . exec ( result <identifiersep> callback ) . await <identifiersep> success ( ) ; \n \t5 } catch ( docker <identifiersep> exception ex ) { \n <ect>
\t9 playlists <identifiersep> folder = new virtual <identifiersep> folder ( <string_literal> , null ) ; \n \t9 res . add <identifiersep> child ( playlists <identifiersep> folder ) ; } \n \t8 playlists <identifiersep> folder . add <identifiersep> child ( pf ) ; } } } \n \t4 } else { \n <ect>
\t3 context . complete ( ) ; \n \t3 context = new context ( ) ; \n \t3 context . set <identifiersep> current <identifiersep> user ( current <identifiersep> user ) ; \n \t2 } catch ( authorize <identifiersep> exception ex ) { \n <ect>
\t3 try { \n \t4 audio <identifiersep> system . write ( request . get <identifiersep> audio ( ) , request . get <identifiersep> audio <identifiersep> file <identifiersep> format ( ) . get <identifiersep> type ( ) , output ) ; \n \t4 output . flush ( ) ; \n \t4 output . close ( ) ; \n <ect>
\t4 throw user <identifiersep> invalid <identifiersep> input <identifiersep> exception ( <string_literal> ) } \n \t3 if ( register <identifiersep> status <identifiersep> constants . not <identifiersep> log <identifiersep> in <identifiersep> yet == user . registerstatus ) { \n \t4 update <identifiersep> user <identifiersep> account <identifiersep> status ( user . username , user . account <identifiersep> id ! ! , register <identifiersep> status <identifiersep> constants . active ) \n \t4 async <identifiersep> event <identifiersep> bus . post ( new <identifiersep> user <identifiersep> join <identifiersep> event ( user . username , user . account <identifiersep> id ! ! ) ) } \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> blank ( id ) ) { \n \t3 if ( provider <identifiersep> map . size ( ) == 1 ) { \n \t4 id = provider <identifiersep> map . values ( ) . iterator ( ) . next ( ) . get <identifiersep> id ( ) ; \n \t3 } else { \n <ect>
\t5 iterator < message > message <identifiersep> iterator = stick . sent <identifiersep> queue . iterator ( ) ; \n \t5 while ( message <identifiersep> iterator . has <identifiersep> next ( ) ) { \n \t6 message sent <identifiersep> message = message <identifiersep> iterator . next ( ) ; \n \t6 if ( sent <identifiersep> message . get <identifiersep> sequence <identifiersep> number ( ) == message . get <identifiersep> sequence <identifiersep> number ( ) ) { \n <ect>
\t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t5  <identifiersep> log . warn ( <string_literal> ) ; } \n \t2 } catch ( data <identifiersep> format <identifiersep> exception e ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 public final inet <identifiersep> socket <identifiersep> address address ( ) { \n \t2 return new inet <identifiersep> socket <identifiersep> address ( net <identifiersep> util . localhost , ch . local <identifiersep> address ( ) . get <identifiersep> port ( ) ) ; } \n \t1 protected abstract void configure ( socket <identifiersep> channel ch ) throws exception ; \n \t1 final void record <identifiersep> exception ( throwable t ) { \n <ect>
\t4 . add ( new <identifiersep> node ( <string_literal> , singleton <identifiersep> map ( <string_literal> , <string_literal> ) ) ) \n \t2 ) . build ( ) ; \n \t2 cluster <identifiersep> state = strategy . reroute ( cluster <identifiersep> state , <string_literal> ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n <ect>
<comment> \n \t1 public void add <identifiersep> transactional <identifiersep> method ( string method <identifiersep> name , transaction <identifiersep> attribute attr ) { \n <ect>
\t2 try \n \t2 { \n \t3 class . for <identifiersep> name ( <string_literal> ) ; \n \t3 using <identifiersep> javax <identifiersep> web <identifiersep> socket = true ; \n <ect>
\t1 class < ? > action <identifiersep> class = null ; \n \t1 try { \n \t2 action <identifiersep> class = class . for <identifiersep> name ( classname ) ; \n \t2 if ( action <identifiersep> class == null ) { \n <ect>
\t4 boolean written = write <identifiersep> dest ( our <identifiersep> dest ) ; \n \t4  <identifiersep> log . debug ( <string_literal> ) ; \n \t4 if ( written ) { \n \t5 connect <identifiersep> with <identifiersep> peers ( ) ; \n <ect>
\t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n \t1 log . error ( <string_literal> , ex ) ; \n \t1 throw ex ; \n \t1 } catch ( exception ex ) { \n <ect>
\t6 socket <identifiersep> output <identifiersep> stream <identifiersep> pool . invalidate <identifiersep> object ( socket <identifiersep> connection <identifiersep> infos , out ) ; \n \t5 } catch ( exception e1 ) { \n \t6 log . warn ( <string_literal> , \n \t8 socket <identifiersep> connection <identifiersep> infos . get <identifiersep> host ( ) , socket <identifiersep> connection <identifiersep> infos . get <identifiersep> port ( ) , e1 ) ; } } \n <ect>
<number_literal> versioned ) ) ; } \n \t3 for ( node <identifiersep> value < byte <identifiersep> array , byte [ ] > v : to <identifiersep> read <identifiersep> repair ) { \n \t4 try { \n <ect>
<comment> \n \t1 public event bind <identifiersep> and <identifiersep> validate ( request <identifiersep> context context ) throws exception { \n <ect>
\t3 response . set <identifiersep> response <identifiersep> name ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 response . set <identifiersep> object <identifiersep> name ( <string_literal> ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 for write <identifiersep> lock <identifiersep> file in command <identifiersep> commons . get <identifiersep> files <identifiersep> by <identifiersep> pattern ( format ( <string_literal> ) , 'write . lock' ) : \n \t1 file ( write <identifiersep> lock <identifiersep> file , action = <string_literal> ) \n else : \n \t1 logger . info ( <string_literal> ) \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 try { \n \t4 <comment> \n \t4 selector . select <identifiersep> now ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 if ( do <identifiersep> close ) { \n \t5 session . close ( ) ; } \n \t3 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t1 log . info ( <string_literal> + volume <identifiersep> info . get <identifiersep> volume <identifiersep> id ( ) ) ; \n \t1 try { \n \t1 block <identifiersep> manager . clean <identifiersep> volume ( volume <identifiersep> id ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 if ( job . get <identifiersep> status ( ) != executable <identifiersep> state . discarded ) { \n \t4 logger . warn ( <string_literal> + job <identifiersep> id + <string_literal> + job . get <identifiersep> status ( ) . to <identifiersep> string ( ) \n \t6 + <string_literal> ) ; \n \t3 } else { \n <ect>
\t1 for ( int i = 0 ; i < pool <identifiersep> size ; i ++ ) { \n \t1 executor . schedule <identifiersep> at <identifiersep> fixed <identifiersep> rate ( new heartbeat <identifiersep> processing <identifiersep> task ( ) , delay , period , time <identifiersep> unit . milliseconds ) ; } } \n @ override \n protected void do <identifiersep> stop ( ) { \n <ect>
\t7 int id = integer . parse <identifiersep> int ( hit . get <identifiersep> id ( ) ) ; \n \t7 if ( ! set . remove ( id ) ) { \n \t8 logger . error ( <string_literal> , id ) ; } } \n \t6 set . for <identifiersep> each ( ( int <identifiersep> procedure ) value - > { \n <ect>
\t2 boolean success = false ; \n \t2 try { \n \t3 success = apply <identifiersep> ip <identifiersep> associations ( network , false ) ; \n \t3 if ( success ) { \n <ect>
\t5 h . process <identifiersep> imc <identifiersep> event ( event , m ) ; } } } } \n \t1 public static void process <identifiersep> assembly <identifiersep> recipe <identifiersep> remove <identifiersep> imc ( imc <identifiersep> event event , imc <identifiersep> message msg ) { \n \t2 if ( msg . is <identifiersep> string <identifiersep> message ( ) ) { \n \t3 assembly <identifiersep> recipe <identifiersep> manager . instance . remove <identifiersep> recipe ( msg . get <identifiersep> string <identifiersep> value ( ) ) ; \n <ect>
\t1 if ( null != hdfs <identifiersep> stream ) \n \t2 try { \n \t2 hdfs <identifiersep> stream . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 return true ; \n \t4 } else { \n \t5 logger . error ( <string_literal> + name ) ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 public void process ( final exchange exchange ) throws exception { \n \t2 final object data = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( ) ; \n \t2 final sql <identifiersep> parameter <identifiersep> source param = new elsql <identifiersep> sql <identifiersep> map <identifiersep> source ( exchange , data ) ; \n \t2 final string sql = el <identifiersep> sql . get <identifiersep> sql ( el <identifiersep> sql <identifiersep> name , new spring <identifiersep> sql <identifiersep> params ( param ) ) ; \n <ect>
\t3 <comment> \n \t3 try { \n \t4 return method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> string ( <number_literal> ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( delayed <identifiersep> startup ) { \n \t3 try { \n \t4 thread <identifiersep> starter . interrupt ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 return ; } \n \t1 string dest <identifiersep> path = <string_literal> + dest <identifiersep> name ; \n <ect>
\t1 try { \n \t1 function <identifiersep> desc <identifiersep> builder builder = new function <identifiersep> desc <identifiersep> builder ( context ) ; \n \t1 create <identifiersep> function <identifiersep> desc desc <identifiersep> to <identifiersep> load = builder . build ( ) ; \n \t1 this . function <identifiersep> name = builder . metadata . function . get <identifiersep> function <identifiersep> name ( ) ; \n <ect>
\t1 protected void load <identifiersep> bean <identifiersep> definitions ( \n \t3 generic <identifiersep> web <identifiersep> application <identifiersep> context context , web <identifiersep> merged <identifiersep> context <identifiersep> configuration web <identifiersep> merged <identifiersep> config ) { \n \t2 class < ? > [ ] annotated <identifiersep> classes = web <identifiersep> merged <identifiersep> config . get <identifiersep> classes ( ) ; \n <ect>
\t2 thread thread = s . get <identifiersep> key ( ) ; \n \t2 if ( ignore <identifiersep> thread ( thread ) ) \n \t3 continue ; \n \t2 if ( count == 0 ) { \n <ect>
\t4 current <identifiersep> state = statecomment ; \n \t4 if ( buffer . char <identifiersep> at ( buffer . length ( ) - 1 ) == ' / ' ) \n \t4 { \n \t5 buffer . delete <identifiersep> char <identifiersep> at ( buffer . length ( ) - 1 ) ; } \n <ect>
\t2 if ( code <identifiersep> fragment . context ! is kt <identifiersep> element ) { \n \t3 val attachments = array <identifiersep> of ( attachment <identifiersep> by <identifiersep> psi <identifiersep> file ( position . file ) , \n \t9 attachment <identifiersep> by <identifiersep> psi <identifiersep> file ( code <identifiersep> fragment ) , \n \t9 attachment ( <string_literal> , <string_literal> ) ) \n <ect>
\t6 log . warn ( <string_literal> + update <identifiersep> count ) ; \n \t5 } else if ( update <identifiersep> count == statement . success <identifiersep> no <identifiersep> info ) { \n \t6 log . warn ( <string_literal> ) ; \n \t5 } else if ( update <identifiersep> count == statement . execute <identifiersep> failed ) { \n <ect>
\t1 final long start <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 delete <identifiersep> storage <identifiersep> snapshot <identifiersep> response <identifiersep> type reply = ( delete <identifiersep> storage <identifiersep> snapshot <identifiersep> response <identifiersep> type ) request . get <identifiersep> reply ( ) ; \n \t1 storage <identifiersep> properties . update <identifiersep> walrus <identifiersep> url ( ) ; \n \t1 if ( ! storage <identifiersep> properties . enable <identifiersep> snapshots ) { \n <ect>
\t5 if ( sprite == null ) { \n \t6 sprite = atlas <identifiersep> sprite <identifiersep> variants . create <identifiersep> for <identifiersep> config ( new resource <identifiersep> location ( name ) ) ; \n \t6 map . set <identifiersep> texture <identifiersep> entry ( sprite ) ; \n \t5 } else { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t3 if ( ! clients <identifiersep> to <identifiersep> stop . is <identifiersep> empty ( ) ) { \n \t4 stop <identifiersep> workers ( clients <identifiersep> to <identifiersep> stop ) ; } } } \n \t1 private void stop <identifiersep> workers ( list < worker <identifiersep> daemon <identifiersep> client > clients <identifiersep> to <identifiersep> stop ) { \n \t2 if ( clients <identifiersep> to <identifiersep> stop . size ( ) > 0 ) { \n <ect>
\t3 return this . context . get <identifiersep> server <identifiersep> session <identifiersep> context ( ) ; } \n \t2 @ override \n \t2 protected ssl <identifiersep> server <identifiersep> socket <identifiersep> factory engine <identifiersep> get <identifiersep> server <identifiersep> socket <identifiersep> factory ( ) { \n \t3 ssl <identifiersep> server <identifiersep> socket <identifiersep> factory factory = this . context . get <identifiersep> server <identifiersep> socket <identifiersep> factory ( ) ; \n <ect>
\t3 store <identifiersep> version <identifiersep> manager . sync <identifiersep> internal <identifiersep> state <identifiersep> from <identifiersep> file <identifiersep> system ( false ) ; \n \t3 this . last <identifiersep> swapped = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 this . is <identifiersep> open = true ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 sql = context . get <identifiersep> wiki ( ) . parse <identifiersep> content ( sql , context ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 impl = system . get <identifiersep> property ( <string_literal> ) ; } \n \t4 catch ( security <identifiersep> exception e ) \n \t4 { \n \t5 <comment> \n <ect>
\t7 s <identifiersep> logger . debug ( <string_literal> +  <identifiersep> gson . to <identifiersep> json ( iso <identifiersep> info . first ( ) ) ) ; \n \t6 device <identifiersep> config <identifiersep> spec <identifiersep> array [ i ] . set <identifiersep> operation ( virtual <identifiersep> device <identifiersep> config <identifiersep> spec <identifiersep> operation . add ) ; \n \t5 } else { \n <ect>
\t3 params . put ( <string_literal> ,  <identifiersep> config <identifiersep> dao . get <identifiersep> value ( config . migrate <identifiersep> wait . to <identifiersep> string ( ) ) ) ; \n \t3 try { \n \t4 resource . configure ( host . get <identifiersep> name ( ) , params ) ; \n \t3 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t1 conf <identifiersep> select <identifiersep> name = <string_literal> \n \t1 base <identifiersep> dir = os . path . dirname ( os . path . dirname ( os . path . realpath (  <identifiersep>  <identifiersep> file <identifiersep>  <identifiersep>  ) ) ) \n \t1 config <identifiersep> dir = self . get <identifiersep> config <identifiersep> dir <identifiersep> during <identifiersep> stack <identifiersep> upgrade ( env , base <identifiersep> dir , conf <identifiersep> select <identifiersep> name ) \n \t1 if config <identifiersep> dir : \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t4 <comment> \n \t4 context . set <identifiersep> binding <identifiersep> changed ( true ) ; \n \t3 } catch ( exception e1 ) { \n <ect>
\t5 if ( transmitted ) { \n \t6 add <identifiersep> echo ( device . get <identifiersep> dsid ( ) . get <identifiersep> value ( ) , ( short ) zone <identifiersep> scene <identifiersep> enum . decrement . get <identifiersep> scene <identifiersep> number ( ) ) ; \n \t6 device . decrease ( ) ; \n \t5 } else { \n <ect>
\t4 return response <identifiersep> code ; } } \n \t2 <comment> \n \t2 { \n \t3 url = server + <string_literal> +  <identifiersep> new <identifiersep> volume . get ( ) + <string_literal> +  <identifiersep> linux <identifiersep> vm <identifiersep> id . get ( ) ; \n <ect>
\t2 else if ( new <identifiersep> jb . get <identifiersep> locals ( ) . size ( ) > old <identifiersep> jb . get <identifiersep> locals ( ) . size ( ) ) \n \t3 cmp = - <number_literal> ; \n \t2 else \n \t3 cmp = compare <identifiersep> typings ( old <identifiersep> jb , new <identifiersep> jb ) ; \n <ect>
\t2 } while ( ! is <identifiersep> ready && waiting <identifiersep> time < max <identifiersep> time ) ; \n \t2 <comment> \n \t2 if ( ! is <identifiersep> ready ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + max <identifiersep> time + <string_literal> ) ; } \n <ect>
\t7 closeables . close ( stream , threw ) ; } } \n \t4 } ) ; \n \t4 return new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( content ) ; \n \t3 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t5 listener . on <identifiersep> succeeded ( ) ; \n \t4 else { \n \t5 switch ( status ) { \n \t6 case request <identifiersep> sender . not <identifiersep> finished : \n <ect>
<comment> \n \t1 private void difference ( garbage <identifiersep> collector <identifiersep> file <identifiersep> state fs ) throws io <identifiersep> exception { \n <ect>
\t3 context = create <identifiersep> context ( ) ; \n \t3 list < org . dspace . content . community > dspace <identifiersep> communities = community <identifiersep> service . find <identifiersep> all ( context ) ; \n \t3 communities = new array <identifiersep> list < community > ( ) ; \n \t3 if ( ! ( ( limit != null ) && ( limit >= 0 ) && ( offset != null ) && ( offset >= 0 ) ) ) { \n <ect>
\t2 list < user <identifiersep> session <identifiersep> model > sessions1 = get <identifiersep> sessions ( session1 ) ; \n \t2 list < user <identifiersep> session <identifiersep> model > sessions2 = get <identifiersep> sessions ( session2 ) ; \n \t2 assert . assert <identifiersep> equals ( <number_literal> , sessions1 . size ( ) ) ; \n \t2 assert . assert <identifiersep> equals ( <number_literal> , sessions2 . size ( ) ) ; \n <ect>
\t1 <comment> \n \t1 log . info ( <string_literal> + san <identifiersep> snapshot <identifiersep> id + <string_literal> + actual <identifiersep> size <identifiersep> in <identifiersep> mb + <string_literal> ) ; \n \t1 iqn = connection <identifiersep> manager . create <identifiersep> snapshot <identifiersep> holder ( san <identifiersep> snapshot <identifiersep> id , actual <identifiersep> size <identifiersep> in <identifiersep> mb ) ; \n \t1 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n <ect>
\t4 return null ; } \n \t4 s <identifiersep> logger . debug ( <string_literal> + vm . to <identifiersep> string ( ) + <string_literal> +  <identifiersep> restart <identifiersep> retry <identifiersep> interval ) ; } \n \t2 } catch ( final insufficient <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t3 if ( !  <identifiersep> firewall <identifiersep> mgr . apply <identifiersep> rules ( firewall <identifiersep> rules , true , false ) ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t4 success = false ; } \n \t2 } catch ( final resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t2 if ( binding <identifiersep> config != null ) { \n \t3 asterisk <identifiersep> binding <identifiersep> config config = parse <identifiersep> binding <identifiersep> config ( item , binding <identifiersep> config ) ; \n \t3 add <identifiersep> binding <identifiersep> config ( item , config ) ; \n \t2 } else { \n <ect>
\t6 log . trace ( <string_literal> , nested <identifiersep> url ) ; \n \t6 list < string > nested <identifiersep> entries = do <identifiersep> load <identifiersep> jar <identifiersep> class <identifiersep> entries ( jar <identifiersep> stream , nested <identifiersep> url , false , false ) ; \n \t6 entries . add <identifiersep> all ( nested <identifiersep> entries ) ; } } } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t7 known . add ( p ) ; } \n \t5 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t6 log . warn ( <string_literal> , e ) ; \n \t5 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t2 if ( conn != null && conn . is <identifiersep> open ( ) ) { \n \t3 try { \n \t4 return <identifiersep> object ( keyspace , conn ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 for ( final storage <identifiersep> pool <identifiersep> vo pool : pools ) { \n \t3 if ( pool . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) == zone <identifiersep> id ) { \n \t4 prepare <identifiersep> template <identifiersep> in <identifiersep> one <identifiersep> storage <identifiersep> pool ( template , pool ) ; \n \t3 } else { \n <ect>
\t2 try { \n \t3 byte <identifiersep> buffer . put ( get <identifiersep> firmware <identifiersep> version . get <identifiersep> bytes ( <string_literal> ) ) ; \n \t3 response = write <identifiersep> buffer ( byte <identifiersep> buffer , channel , true , time <identifiersep> out ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t3 final string password = credentials == null ? null : credentials . to <identifiersep> string ( ) ; \n \t3 logger . debug ( <string_literal> , username ) ; \n \t3 final authentication <identifiersep> request request = new authentication <identifiersep> request ( username , new org . ldaptive . credential ( password ) , return <identifiersep> attributes . all . value ( ) ) ; \n \t3 final authenticator authenticator = ldap <identifiersep> utils . new <identifiersep> ldaptive <identifiersep> authenticator ( admin <identifiersep> pages <identifiersep> security <identifiersep> properties . get <identifiersep> ldap ( ) ) ; \n <ect>
\t4 contains <identifiersep> frags = ! next . is <identifiersep> paired ( ) ; } } \n \t2 mark <identifiersep> duplicate <identifiersep> fragments ( next <identifiersep> chunk , contains <identifiersep> pairs ) ; \n \t2 this . frag <identifiersep> sort . cleanup ( ) ; \n \t2 this . frag <identifiersep> sort = null ; \n <ect>
\t4 exp <identifiersep> header = protocol <identifiersep> provider \n \t6 . get <identifiersep> header <identifiersep> factory ( ) . create <identifiersep> expires <identifiersep> header ( 0 ) ; } \n \t3 catch ( invalid <identifiersep> argument <identifiersep> exception e ) \n \t3 { \n <ect>
\t4 get <identifiersep> report ( ) . println ( \n \t5 messages . get ( ) . container ( messages . rpt <identifiersep> databaseapp <identifiersep> del <identifiersep> property <identifiersep> end <identifiersep> ok <identifiersep> 0 ) , \n \t5 i <identifiersep> cms <identifiersep> report . format <identifiersep> ok ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t5 if ( inet . is <identifiersep> reachable ( <number_literal> ) ) { \n \t6 logger . debug ( <string_literal> ) ; \n \t6 connection . checkpairing ( ) ; } \n \t4 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> + uuid <identifiersep> generator . generate <identifiersep> uuid ( ) ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 uuid <identifiersep> generator . generate <identifiersep> uuid ( ) ; } \n \t2 log . info ( <string_literal> + uuid <identifiersep> generator . generate <identifiersep> uuid ( ) ) ; \n <ect>
\t4 if ( input . is <identifiersep> ready ( ) ) { \n \t4 input . monitor ( ) ; \n \t4 iter . remove ( ) ; } \n \t3 } catch ( throwable t ) { \n <ect>
<comment> \n <comment> \n <comment> \n \t2 <comment> \n <ect>
\t4 logger . debug ( <string_literal> , result , this . groovy <identifiersep> script ) ; \n \t4 return result . to <identifiersep> string ( ) ; } \n \t2 } catch ( final exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } \n <ect>
\t2 <comment> \n \t2 connect <identifiersep> to <identifiersep> database ( ) ; \n \t2 <comment> \n \t2 initialized = true ; \n <ect>
\t6 if ( fh == null && from != null ) \n \t7 fh = from . calculate <identifiersep> hash ( ) ; \n \t6 if ( fh != null &&  <identifiersep> request <identifiersep> throttler . should <identifiersep> throttle ( fh ) ) { \n \t7 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 gson <identifiersep> builder logger <identifiersep> builder = new gson <identifiersep> builder ( ) ; \n \t2 logger <identifiersep> builder . disable <identifiersep> html <identifiersep> escaping ( ) ; \n \t2 logger <identifiersep> builder . set <identifiersep> exclusion <identifiersep> strategies ( new logging <identifiersep> exclusion <identifiersep> strategy ( s <identifiersep> logger ) ) ; \n \t2 s <identifiersep> gogger = set <identifiersep> default <identifiersep> gson <identifiersep> config ( logger <identifiersep> builder ) ; \n <ect>
\t2 if ( ! satisfied ) { \n \t3 logger . warn ( <string_literal> , get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , \n \t4 cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> renew ) ; \n \t3 return false ; } \n <ect>
\t2 <comment> \n \t2 logger . error ( record <identifiersep> type . neo <identifiersep> store , new neo <identifiersep> store <identifiersep> record ( ) , <string_literal> <ect>
\t7  <identifiersep> lb2vm <identifiersep> map <identifiersep> dao . persist ( map ) ; } } \n \t4 } ) ; } \n \t3 try { \n \t4 if ( ! apply <identifiersep> load <identifiersep> balancer <identifiersep> config ( load <identifiersep> balancer <identifiersep> id ) ) { \n <ect>
\t2 if ( maps != null ) { \n \t3 for ( load <identifiersep> balancer <identifiersep> vm <identifiersep> map <identifiersep> vo map : maps ) { \n \t4 map . set <identifiersep> revoke ( true ) ; \n \t4  <identifiersep> lb2vm <identifiersep> map <identifiersep> dao . persist ( map ) ; \n <ect>
\t5 out . write ( buf , offset , length ) ; \n \t4 out . write ( stomp . null <identifiersep> byte ) ; \n \t4 out . flush ( ) ; } } \n \t2 catch ( io <identifiersep> exception e ) { \n <ect>
\t1 @ db \n \t1 public list < host <identifiersep> vo > find <identifiersep> and <identifiersep> update <identifiersep> direct <identifiersep> agent <identifiersep> to <identifiersep> load ( long last <identifiersep> ping <identifiersep> seconds <identifiersep> after , long limit , long management <identifiersep> server <identifiersep> id ) { \n \t2 transaction <identifiersep> legacy txn = transaction <identifiersep> legacy . current <identifiersep> txn ( ) ; \n <ect>
\t1 return false ; } \n \t1 return true ; } \n private boolean has <identifiersep> at <identifiersep> least <identifiersep> one <identifiersep> mime <identifiersep> type ( record record ) { \n \t1 if ( ! record . get <identifiersep> fields ( ) . contains <identifiersep> key ( fields . attachment <identifiersep> mime <identifiersep> type ) ) { \n <ect>
\t2 if ( ! wsdl <identifiersep> request . is <identifiersep> strip <identifiersep> whitespaces ( ) ) { \n \t3 return ; } \n \t2 string content = ( string ) context . get <identifiersep> property ( base <identifiersep> http <identifiersep> request <identifiersep> transport . request <identifiersep> content ) ; \n \t2 if ( content == null ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 return new file <identifiersep> system <identifiersep> provider ( ) { \n \t3 @ override \n \t3 public output <identifiersep> stream new <identifiersep> output <identifiersep> stream ( path path , open <identifiersep> option . . . options ) throws io <identifiersep> exception { \n <ect>
\t6 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n \t7  <identifiersep> log . warn ( <string_literal> + type + <string_literal> + auth + <string_literal> + packet ) ; \n \t6 break ; } \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 p . request = null ; \n \t3 <comment> \n \t3 has <identifiersep> next = itr . next ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
public static byte [ ] bytes ( string s ) { \n \t1 try { \n \t1 return s . get <identifiersep> bytes ( encoding ) ; \n \t1 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t3 log . error ( format ( <string_literal> , server <identifiersep> address ) + location <identifiersep> msg , tfe ) ; \n \t3 return graph <identifiersep> database <identifiersep> startup <identifiersep> error <identifiersep> code ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t2 callback < none > startup <identifiersep> callback =  <identifiersep> startup <identifiersep> callback . get <identifiersep> and <identifiersep> set ( null ) ; \n \t2 <comment> \n \t2 balancer . enable <identifiersep> backup ( startup <identifiersep> callback ) ; \n \t2 return ; } \n <ect>
\t6 } catch ( exception e ) { \n \t7 <comment> \n \t7 continue ; } } } \n \t4 template = template . create ( sandbox <identifiersep> context ) ; } } \n <ect>
\t2 final iterator < management <identifiersep> server <identifiersep> host <identifiersep> vo > it = removed <identifiersep> node <identifiersep> list . iterator ( ) ; \n \t2 while ( it . has <identifiersep> next ( ) ) { \n \t3 final management <identifiersep> server <identifiersep> host <identifiersep> vo mshost = it . next ( ) ; \n \t3 if ( ! ping <identifiersep> management <identifiersep> node ( mshost ) ) { \n <ect>
\t3 string token = generate <identifiersep> token ( <number_literal> ) ; \n \t3 if ( generate <identifiersep> token <identifiersep> based <identifiersep> invitation ( project , email , token ) != null ) { \n \t4 return true ; \n \t3 } else { \n <ect>
\t5 retval = con ; \n \t5 eligible <identifiersep> count ++ ; } \n \t4 log . debug ( <string_literal> , invokable ) ; \n \t3 } else { \n <ect>
<comment> \n \t1 private void handle <identifiersep> uncaught <identifiersep> throwable ( throwable t ) { \n \t2 if ( errored . compare <identifiersep> and <identifiersep> set ( false , true ) ) { \n <ect>
\t3 write <identifiersep> spawn <identifiersep> queue ( ) ; \n \t2 } catch ( exception ex ) { \n \t3 log . warn ( <string_literal> , ex ) ; } \n \t2 try { \n <ect>
\t2 this . topology <identifiersep> id =  <identifiersep> topology <identifiersep> id ; \n \t2 this . task <identifiersep> id =  <identifiersep> task <identifiersep> id ; } \n \t1 @ override \n \t1 public void report ( throwable error ) { \n <ect>
\t2 job <identifiersep> task <identifiersep> item <identifiersep> by <identifiersep> host <identifiersep> map tasks <identifiersep> by <identifiersep> host = generate <identifiersep> task <identifiersep> count <identifiersep> by <identifiersep> host ( hosts , job . get <identifiersep> copy <identifiersep> of <identifiersep> tasks ( ) ) ; \n \t2 <comment> \n \t2 int max <identifiersep> per <identifiersep> host = max <identifiersep> tasks <identifiersep> per <identifiersep> host ( job , tasks <identifiersep> by <identifiersep> host . size ( ) ) ; \n <ect>
\t3 scanned += count ; } \n \t2 if ( timer != null ) { \n \t3 <comment> \n \t3 timer . stop ( ) ; \n <ect>
\t3 if ( needs <identifiersep> commit ) { \n \t4 logger . info ( <string_literal> ) ; \n \t4 this . begin <identifiersep> transaction ( read <identifiersep> write . read ) ; \n \t3 } else if ( needs <identifiersep> begin ) { \n <ect>
<comment> \n \t2 if ( null == writer ) { \n <ect>
\t2 } catch ( instantiation <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> + converter , e ) ; \n \t3 throw new runtime <identifiersep> exception ( e ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t4 properties <identifiersep> on <identifiersep> classpath . close ( ) ; } } } \n \t1 private void update <identifiersep> preferences <identifiersep> from ( file preferences <identifiersep> file ) throws io <identifiersep> exception { \n \t2 if ( preferences <identifiersep> file . exists ( ) ) { \n \t3 properties local <identifiersep> preferences = new properties ( ) ; \n <ect>
\t1 iterable < string > blob <identifiersep> belonging <identifiersep> to <identifiersep> container = null ; \n \t1 try { \n \t2 blob <identifiersep> belonging <identifiersep> to <identifiersep> container = storage <identifiersep> strategy . get <identifiersep> blob <identifiersep> keys <identifiersep> inside <identifiersep> container ( container <identifiersep> name ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 try { \n \t5 install <identifiersep> item <identifiersep> service . install <identifiersep> item ( c , wi , myhandle ) ; \n \t4 } catch ( exception e ) { \n \t5 workspace <identifiersep> item <identifiersep> service . delete <identifiersep> all ( c , wi ) ; \n <ect>
\t2 assert <identifiersep> equals ( password , creds . get <identifiersep> password ( ) ) ; } \n \t1 @ test \n \t1 public void verify <identifiersep> proxy <identifiersep> granting <identifiersep> ticket <identifiersep> as <identifiersep> authentication <identifiersep> attribute <identifiersep> can <identifiersep> decrypt ( ) throws exception { \n \t2 final map < ? , ? > attributes = render <identifiersep> view ( ) ; \n <ect>
\t2 int command = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset ) ; \n \t2 switch ( command ) { \n \t3 case version <identifiersep> get : \n \t3 case version <identifiersep> command <identifiersep> class <identifiersep> get : \n <ect>
\t3 if ( this . datatypes . length > 0 ) { \n \t4 message = this . convert <identifiersep> payload <identifiersep> if <identifiersep> necessary ( message ) ; } \n \t3 if ( debug <identifiersep> enabled ) { \n <ect>
\t1 n =  <identifiersep> keys <identifiersep> to <identifiersep> fetch . size ( ) - initial ; } \n \t1 hash <identifiersep> set < string > keys = new hash <identifiersep> set < > (  <identifiersep> keys <identifiersep> to <identifiersep> fetch . sub <identifiersep> list ( initial , initial + n ) ) ; \n \t1 { \n <ect>
\t3 result . ouch3 = ( accumulo <identifiersep> security <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> ouch3is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t6 log . info ( <string_literal> + rsrc5 ) ; \n \t6 log . info ( <string_literal> + rsrc6 ) ; \n \t6 log . info ( <string_literal> + rsrc7 ) ; \n \t6 log . info ( <string_literal> + rsrc8 ) ; \n <ect>
\t7 obj = rs . get <identifiersep> int ( 1 ) ; \n \t6 } else { \n \t7 obj = rs . get <identifiersep> object ( 1 ) ; } } \n \t5 if ( obj == null ) { \n <ect>
\t4  <identifiersep> log . info ( <string_literal> +  <identifiersep> socket . get <identifiersep> peer <identifiersep> destination ( ) . calculate <identifiersep> hash ( ) , ihe ) ; \n \t3 try {  <identifiersep> socket . close ( ) ; } catch ( io <identifiersep> exception ignored ) { } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t6 device <identifiersep> cmd = convert <identifiersep> open <identifiersep> hab <identifiersep> command <identifiersep> to <identifiersep> device <identifiersep> command ( command , device <identifiersep> cmd ) ; } } \n \t4 if ( device <identifiersep> cmd != null ) { \n \t5 remote <identifiersep> controller . send ( device <identifiersep> cmd ) ; \n \t4 } else { \n <ect>
\t3 move <identifiersep> session . future . set ( true ) ; \n \t3 record <identifiersep> move <identifiersep> events . put ( move <identifiersep> session . src <identifiersep> session , move <identifiersep> event ) ; \n \t3 return ; \n \t2 } else { \n <ect>
\t4 for ( object key : config . key <identifiersep> set ( ) ) { \n \t5 if ( key . to <identifiersep> string ( ) . starts <identifiersep> with ( service <identifiersep> name ) ) { \n \t6 return true ; } } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 private boolean download <identifiersep> template ( ) { \n \t2 try { \n \t3 client . execute <identifiersep> method ( request ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private void request <identifiersep> credit <identifiersep> report ( ) { \n \t2 <comment> \n <ect>
\t5 <comment> \n \t5 if ( rmv <identifiersep> cnt == shmem <identifiersep> toks . length ) { \n \t6 u . delete ( f ) ; \n <ect>
\t4 return ; } } \n \t2 expression . push ( equality . create ( e1 , e2 ) ) ; } \n \t1 private void convert <identifiersep> not <identifiersep> equals ( e <identifiersep> not <identifiersep> equals expr ) \n \t1 { \n <ect>
\t1 private void xml <identifiersep> default ( string path ) throws exception { \n \t2 web <identifiersep> target target = client . target ( port <identifiersep> provider <identifiersep> util . generate <identifiersep> url ( <string_literal> , path ) ) ; \n \t2 logger . info ( entity <identifiersep> xml ) ; \n \t2 logger . info ( <string_literal> + charset . default <identifiersep> charset ( ) ) ; \n <ect>
\t4 if ( ! master <identifiersep> device . get <identifiersep> enabled <identifiersep> a ( ) . get ( ) ) { \n \t5 logger . debug ( <string_literal> , logger <identifiersep> constants . tfinitsub , master <identifiersep> device . get <identifiersep> uid ( ) ) ; \n \t5 add <identifiersep> m <identifiersep> device ( master <identifiersep> device , uid , null ) ; } } \n \t3 if ( device instanceof mtf <identifiersep> config <identifiersep> consumer < ? > && device <identifiersep> config != null ) { \n <ect>
\t5 vmware <identifiersep> hypervisor <identifiersep> host <identifiersep> network <identifiersep> summary net <identifiersep> summary = \n \t6 host <identifiersep> iterator <identifiersep> mo . get <identifiersep> hyper <identifiersep> host <identifiersep> network <identifiersep> summary ( host <identifiersep> iterator <identifiersep> mo . get <identifiersep> host <identifiersep> type ( ) == vmware <identifiersep> host <identifiersep> type . es <identifiersep> xi ? cmd . get <identifiersep> context <identifiersep> param ( <string_literal> ) \n \t7 : cmd . get <identifiersep> context <identifiersep> param ( <string_literal> ) ) ; \n \t5  <identifiersep> resource . ensure <identifiersep> outgoing <identifiersep> rule <identifiersep> for <identifiersep> address ( net <identifiersep> summary . get <identifiersep> host <identifiersep> ip ( ) ) ; \n <ect>
\t3 assert . assert <identifiersep> null ( row ) ; \n \t3 row = result . get <identifiersep> result ( ) . get <identifiersep> rows ( ) . get <identifiersep> row <identifiersep> by <identifiersep> index ( <number_literal> ) ; \n \t3 assert . assert <identifiersep> equals ( <string_literal> , row . get <identifiersep> key ( ) ) ; \n \t3 for ( row < string , string > row1 : result . get <identifiersep> result ( ) . get <identifiersep> rows ( ) ) { \n <ect>
\t2 given http url , this api gets the content of it \n \t2 returns ( content - type , image <identifiersep> content ) \n \t1 <string_literal> <string_literal> <ect>
\t1 @ override \n \t1 protected void do <identifiersep> put ( http <identifiersep> servlet <identifiersep> request req , http <identifiersep> servlet <identifiersep> response resp ) throws servlet <identifiersep> exception , io <identifiersep> exception { \n \t2 string group = req . get <identifiersep> path <identifiersep> info ( ) ; \n \t2 string service = req . get <identifiersep> header ( <string_literal> ) ; \n <ect>
\t1 protected list < discovery <identifiersep> node > build <identifiersep> dynamic <identifiersep> nodes ( gce <identifiersep> instances <identifiersep> service <identifiersep> impl gce <identifiersep> instances <identifiersep> service , settings node <identifiersep> settings ) { \n \t2 gce <identifiersep> unicast <identifiersep> hosts <identifiersep> provider provider = new gce <identifiersep> unicast <identifiersep> hosts <identifiersep> provider ( node <identifiersep> settings , gce <identifiersep> instances <identifiersep> service , \n \t3 transport <identifiersep> service , new network <identifiersep> service ( collections . empty <identifiersep> list ( ) ) ) ; \n \t2 list < discovery <identifiersep> node > discovery <identifiersep> nodes = provider . build <identifiersep> dynamic <identifiersep> nodes ( ) ; \n <ect>
\t3 validation <identifiersep> complex <identifiersep> interface <identifiersep> super . t = <string_literal> ; \n \t3 validation <identifiersep> complex <identifiersep> interface <identifiersep> sub . u = <string_literal> ; \n \t3 response response = client . target ( generate <identifiersep> url ( basic <identifiersep> deployment , <string_literal> , validation <identifiersep> complex <identifiersep> interface <identifiersep> sub . class . get <identifiersep> simple <identifiersep> name ( ) ) ) \n \t5 . request ( ) . post ( entity . entity ( <string_literal> , media <identifiersep> type . text <identifiersep> plain <identifiersep> type ) ) ; \n <ect>
\t3 return null ; } \n \t2 file [ ] files = zone <identifiersep> dir . list <identifiersep> files ( ) ; \n \t2 update <identifiersep> zone <identifiersep> files ( files ) ; \n \t2 if ( files == null || files . length == 0 ) { \n <ect>
\t2 bf . log . warn ( <string_literal> + this . level <identifiersep> page ) ; \n \t2 skip <identifiersep> levels < k , v > higher = null ; \n \t2 for ( int i = levels . length - 1 ; i >= 0 ; i -- ) { \n \t3 if ( levels [ i ] != null ) { \n <ect>
<comment> \n \t1 @ check <identifiersep> for <identifiersep> null \n \t1 public static git <identifiersep> hub <identifiersep> repository <identifiersep> name create ( string url ) { \n <ect>
\t1 tag <identifiersep> keys . add <identifiersep> all ( response . get <identifiersep> describe <identifiersep> tags <identifiersep> result ( ) . get <identifiersep> tag <identifiersep> descriptions ( ) . get <identifiersep> member ( ) . stream ( ) \n \t2 . flat <identifiersep> map ( tag <identifiersep> desc - > tag <identifiersep> desc . get <identifiersep> tags ( ) . get <identifiersep> member ( ) . stream ( ) ) \n \t2 . map ( tag : : get <identifiersep> key ) . collect ( collectors . to <identifiersep> set ( ) ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 string file <identifiersep> name = get <identifiersep> next <identifiersep> dynamic <identifiersep> config <identifiersep> filename ( ) ; \n \t5 if ( file <identifiersep> name != null ) { \n \t6 quorum <identifiersep> peer <identifiersep> config . write <identifiersep> dynamic <identifiersep> config ( file <identifiersep> name , qv , true ) ; } \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 case <string_literal> : \n \t7 local <identifiersep> mesh <identifiersep> find <identifiersep> running = false ; \n \t7 unfinished <identifiersep> hosts . remove ( mesh <identifiersep> host ) ; \n \t7 responding <identifiersep> peer <identifiersep> count . increment <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t2 list < string > device <identifiersep> list = new array <identifiersep> list < string > ( ) ; \n \t2 socket socket = new socket ( source <identifiersep> address , gc100ir <identifiersep> control <identifiersep> point . connect <identifiersep> port ) ; \n \t2 socket <identifiersep> address socket <identifiersep> address = socket . get <identifiersep> remote <identifiersep> socket <identifiersep> address ( ) ; \n \t2 if ( socket . is <identifiersep> connected ( ) ) { \n <ect>
\t2 break ; } } \n \t1 if ( found <identifiersep> occ <identifiersep> mapping ) { \n \t1 for ( field <identifiersep> mapping field <identifiersep> mapping : entity <identifiersep> schema2 . get <identifiersep> field <identifiersep> mappings ( ) ) { \n \t2 if ( field <identifiersep> mapping . get <identifiersep> mapping <identifiersep> type ( ) == mapping <identifiersep> type . occ <identifiersep> version ) { \n <ect>
\t2 params . put ( <string_literal> ,  <identifiersep> config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) ) ; \n \t2 try { \n \t3 storage . configure ( <string_literal> , params ) ; \n \t2 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t2 if ( user <identifiersep> pool != null ) { \n \t3 try { \n \t4 user <identifiersep> pool . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 } else { \n \t4 if ( fail <identifiersep> on <identifiersep> missing ) { \n \t5 throw new mojo <identifiersep> execution <identifiersep> exception ( <string_literal> ) ; \n \t4 } else { \n <ect>
\t4 in . read <identifiersep> fully ( data ) ; \n \t4 sam <identifiersep> message <identifiersep> sess sess = is <identifiersep> raw ? raw <identifiersep> session : datagram <identifiersep> session ; \n \t4 if ( ! sess . send <identifiersep> bytes ( dest , data , proto , from <identifiersep> port , to <identifiersep> port ) ) { \n \t5 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t4 log . debug ( <string_literal> + this ) ; } \n \t2 else { \n <ect>
\t4 . add ( new <identifiersep> node ( <string_literal> , singleton <identifiersep> map ( <string_literal> , <string_literal> ) ) ) \n \t2 ) . build ( ) ; \n \t2 cluster <identifiersep> state = strategy . reroute ( cluster <identifiersep> state , <string_literal> ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( relocating ) . size ( ) , greater <identifiersep> than ( 0 ) ) ; \n <ect>
\t1 if ( ! configuration . is <identifiersep> user <identifiersep> hook <identifiersep> enabled ( ) ) { \n \t1 logger . warn ( <string_literal> ) ; \n \t1 return false ; } \n \t1 if ( clusters . get <identifiersep> clusters ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t2 return try { \n \t3 val value = property <identifiersep> utils . get <identifiersep> property ( wrapped <identifiersep> bean , field <identifiersep> name ) \n \t3 format <identifiersep> email ( value as string ) \n \t2 } catch ( e : exception ) { \n <ect>
\t6 assert rsrc1 == rsrc5 ; \n \t6 assert rsrc2 == rsrc6 ; \n \t6 assert rsrc3 == rsrc7 ; \n \t6 assert rsrc4 == rsrc8 ; \n <ect>
\t3 if ( log == null ) { \n \t4 <comment> \n \t4 log = log ; } \n \t3 if ( name != null ) { \n <ect>
\t3 logger . warning ( this , <string_literal> , e ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( this , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( ip <identifiersep> converter <identifiersep> parse <identifiersep> exception e ) { \n <ect>
\t2 if ( ! extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . exists ( ) ) { \n \t3 logger . error ( this , <string_literal> + extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . get <identifiersep> path ( ) ) ; \n \t3 return false ; } \n \t2 if ( ! extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . is <identifiersep> directory ( ) ) { \n <ect>
\t6 send <identifiersep> next . add ( next ) ; \n \t6 cur <identifiersep> total <identifiersep> data <identifiersep> size += next <identifiersep> data <identifiersep> size ; \n \t6 max <identifiersep> avail = packet <identifiersep> builder . get <identifiersep> max <identifiersep> additional <identifiersep> fragment <identifiersep> size ( peer , send <identifiersep> next . size ( ) , cur <identifiersep> total <identifiersep> data <identifiersep> size ) ; \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 logger . error ( \n \t4 <string_literal> + reference , ex ) ; \n \t3 throw ex ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 if ( result <identifiersep> out != null ) { \n \t2 try { \n \t3 result <identifiersep> out . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( associated && association <identifiersep> valid ) { \n \t4 assertion = central <identifiersep> authentication <identifiersep> service . validate <identifiersep> service <identifiersep> ticket ( ticket <identifiersep> id , service ) ; \n \t4 logger . debug ( <string_literal> , ticket <identifiersep> id , service ) ; \n \t3 } else if ( ! associated ) { \n <ect>
\t1 } finally { \n \t1 try { \n \t2 sc . close ( ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 plugin <identifiersep> descriptor = \n \t4 plugin <identifiersep> manager . get <identifiersep> plugin <identifiersep> descriptor ( plugin , request . get <identifiersep> repositories ( ) , request . get <identifiersep> repository <identifiersep> session ( ) ) ; } \n \t2 catch ( plugin <identifiersep> resolution <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 for ( file child : children ) \n \t3 if ( options . is <identifiersep> recursive ( ) || child . is <identifiersep> file ( ) ) { \n \t4 utils . delete <identifiersep> recursively ( child ) ; } } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 assign <identifiersep> names <identifiersep> to <identifiersep> transactions ( critical <identifiersep> sections ) ; \n \t2 if ( option <identifiersep> on <identifiersep> fly <identifiersep> tlo ) \n \t2 { \n <ect>
\t1 private final i <identifiersep> map < string , distributed <identifiersep> cache <identifiersep> object < registered <identifiersep> service > > map <identifiersep> instance ; \n \t1 public registered <identifiersep> service <identifiersep> hazelcast <identifiersep> distributed <identifiersep> cache <identifiersep> manager ( final hazelcast <identifiersep> instance instance ) { \n \t2 this . instance = instance ; \n \t2 final string map <identifiersep> name = instance . get <identifiersep> config ( ) . get <identifiersep> map <identifiersep> configs ( ) . key <identifiersep> set ( ) . iterator ( ) . next ( ) ; \n <ect>
\t4 channel . request <identifiersep> output ( ) ; } \n \t3 @ override \n \t3 public int write ( final byte <identifiersep> buffer src ) throws io <identifiersep> exception { \n <ect>
\t6  <identifiersep> log . info ( <string_literal> + pp + <string_literal> ) ; \n \t5 else \n \t6  <identifiersep> log . info ( <string_literal> + pp + <string_literal> ) ; } } } \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) && ! partial <identifiersep> pieces . is <identifiersep> empty ( ) ) \n <ect>
\t5 thread . sleep ( sleep <identifiersep> time ) ; \n \t4 } catch ( interrupted <identifiersep> exception e1 ) { \n \t5 logger . trace ( <string_literal> ) ; } \n \t4 sleep <identifiersep> time *= delay <identifiersep> factor ; } } \n <ect>
\t2 if ( hosts <identifiersep> type . has <identifiersep> masters ( ) ) { \n \t3 collection . add ( new task <identifiersep> wrapper ( service , component , hosts <identifiersep> type . get <identifiersep> masters ( ) , params , t ) ) ; \n \t3 continue ; \n \t2 } else { \n <ect>
\t1 log . debug ( <string_literal> , get <identifiersep> extent ( ) ) ; \n \t1 } catch ( io <identifiersep> exception ioe ) { \n \t1 log . error ( <string_literal> + get <identifiersep> extent ( ) , ioe ) ; \n \t1 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t5 public void run ( ) { \n \t6 try { \n \t7 stop <identifiersep> and <identifiersep> destroy <identifiersep> listener <identifiersep> container ( ) ; \n \t6 } catch ( throwable e ) { \n <ect>
\t1 @ override \n \t1 public void stop ( ) \n \t3 throws throwable \n \t1 { \n <ect>
\t9 grid <identifiersep> uuid ldr <identifiersep> id = parties . get ( meta . sender <identifiersep> node <identifiersep> id ( ) ) ; \n \t9 if ( ldr <identifiersep> id != null ) { \n \t10 assert ! ldr <identifiersep> id . equals ( meta . class <identifiersep> loader <identifiersep> id ( ) ) ; \n <ect>
\t2 ve . evaluate ( batch ) ; } \n \t1 final int input <identifiersep> logical <identifiersep> size = batch . size ; \n \t1 if ( input <identifiersep> logical <identifiersep> size == 0 ) { \n <ect>
\t4 log . info ( <string_literal> , fail <identifiersep> fs <identifiersep> okay ) ; \n \t4 load <identifiersep> hosts <identifiersep> from <identifiersep> json <identifiersep> array ( fail <identifiersep> fs <identifiersep> dead , decoded . opt <identifiersep> json <identifiersep> array ( filesystem <identifiersep> dead <identifiersep> key ) ) ; \n \t4 log . info ( <string_literal> , fail <identifiersep> fs <identifiersep> dead ) ; \n \t4 load <identifiersep> hosts <identifiersep> from <identifiersep> json <identifiersep> array ( fs <identifiersep> full , decoded . opt <identifiersep> json <identifiersep> array ( filesystem <identifiersep> full <identifiersep> key ) ) ; \n <ect>
\t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t2 if ( ! ( delegate instanceof erx <identifiersep> editing <identifiersep> context <identifiersep> delegate ) ) { \n \t3 boolean  <identifiersep> raise <identifiersep> on <identifiersep> missing <identifiersep> editing <identifiersep> context <identifiersep> delegate = erx <identifiersep> properties . boolean <identifiersep> for <identifiersep> key <identifiersep> with <identifiersep> default ( <string_literal> , true ) ; \n \t3 if ( !  <identifiersep> raise <identifiersep> on <identifiersep> missing <identifiersep> editing <identifiersep> context <identifiersep> delegate ) { \n <ect>
<number_literal> for ( permanent <identifiersep> view permanent : player . get <identifiersep> battlefield ( ) . values ( ) ) { \n <number_literal> if ( permanent . get <identifiersep> id ( ) . equals ( card <identifiersep> played . get <identifiersep> id ( ) ) ) { \n <number_literal> found <identifiersep> land = true ; } } \n <number_literal> break ; } } \n <ect>
\t3 if ( class <identifiersep> file == null ) { \n \t4 return empty <identifiersep> byte <identifiersep> array ; } \n \t3 final string class <identifiersep> name = to <identifiersep> class <identifiersep> name ( class <identifiersep> file ) ; \n \t3 if ( executor <identifiersep> class <identifiersep> names . contains ( class <identifiersep> name ) ) { \n <ect>
\t3 if ( charset != null ) { \n \t4 if ( locale <identifiersep> util . is <identifiersep> charset <identifiersep> supported ( charset ) ) { \n \t5 input <identifiersep> charset <identifiersep> overridden = charset ; \n \t4 } else { \n <ect>
\t3 if ( min <identifiersep> merge == null || ( merged . get <identifiersep> penalty ( ) < min <identifiersep> merge . get <identifiersep> penalty ( ) ) ) { \n \t4 min <identifiersep> merge = merged ; } } \n \t2 <comment> \n <ect>
\t3 } ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> , e ) ; \n \t2 } catch ( key <identifiersep> management <identifiersep> exception e ) { \n <ect>
\t3 credential . set <identifiersep> expiration <identifiersep> time <identifiersep> milliseconds ( stored . get <identifiersep> expiration <identifiersep> time <identifiersep> milliseconds ( ) ) ; \n \t4 logger . debug ( <string_literal> ) ; \n \t4 logger . debug ( <string_literal> , stored . get <identifiersep> access <identifiersep> token ( ) ) ; \n <ect>
\t4 plugin <identifiersep> file . delete ( ) ; \n \t4 if ( ! downloaded ) continue ; \n \t4 throw new plugin <identifiersep> not <identifiersep> found <identifiersep> exception ( <string_literal> , ncdfe1 ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t1 protected void apply <identifiersep> membership ( @ nonnull authorizable member , @ nonnull set < string > groups ) throws repository <identifiersep> exception { \n \t2 for ( string group <identifiersep> name : groups ) { \n \t3 authorizable group = user <identifiersep> manager . get <identifiersep> authorizable ( group <identifiersep> name ) ; \n \t3 if ( group == null ) { \n <ect>
\t2 for ( int col = 1 ; col < table <identifiersep> model . get <identifiersep> column <identifiersep> count ( ) ; col ++ ) { \n \t3 thread <identifiersep> lists . add <identifiersep> item ( table <identifiersep> model . get <identifiersep> column <identifiersep> data ( get <identifiersep> user <identifiersep> col <identifiersep> name ( col ) ) ) ; \n \t4 log . debug ( <string_literal> , table <identifiersep> model . get <identifiersep> column <identifiersep> data ( get <identifiersep> user <identifiersep> col <identifiersep> name ( col ) ) ) ; \n <ect>
\t6 v . property ( vertex <identifiersep> property . cardinality . single , prop . get <identifiersep> key ( ) , prop . get <identifiersep> value ( ) ) ; } } \n \t4 tx . commit ( ) ; \n \t3 } catch ( throwable e ) { \n \t4 failures . increment <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t3 if ( tx == null || tx . get <identifiersep> status ( ) != status . status <identifiersep> active ) { \n \t4 log . error ( <string_literal> ) ; \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t2 } catch ( system <identifiersep> exception e ) { \n <ect>
\t2 for ( int i = 0 ; i < strings . length ; i ++ ) { \n \t3 try { \n \t4 ret [ i ] = float . value <identifiersep> of ( strings [ i ] ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 log . info ( <string_literal> , src . get <identifiersep> absolute <identifiersep> path ( ) , target . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t3 try { \n \t4 file <identifiersep> utils . copy <identifiersep> directory <identifiersep> to <identifiersep> directory ( src , target ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 uri = uri + <string_literal> + request . get <identifiersep> query <identifiersep> string ( ) ; } \n \t2 if ( dev <identifiersep> mode ) { \n \t3 log . error ( <string_literal> , uri , e ) ; \n <ect>
\t5 logout <identifiersep> request . set <identifiersep> status ( logout <identifiersep> request <identifiersep> status . failure ) ; \n \t5 logger . warn ( <string_literal> , single <identifiersep> logout <identifiersep> service . get <identifiersep> id ( ) ) ; } \n \t4 break ; \n \t3 default : \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2  <identifiersep> certificate = certificate . create ( in ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t5 ( proxy . get <identifiersep> private <identifiersep> ip <identifiersep> address ( ) == null ? <string_literal> : proxy . get <identifiersep> private <identifiersep> ip <identifiersep> address ( ) ) , <string_literal> + dc . get <identifiersep> name ( ) + <string_literal> ) ; \n \t3 break ; \n \t2 case console <identifiersep> proxy <identifiersep> alert <identifiersep> event <identifiersep> args . proxy <identifiersep> rebooted : \n <ect>
\t1 canonical <identifiersep> rbd <identifiersep> object parent = canonical <identifiersep> rbd <identifiersep> object . parse ( snapshot <identifiersep> iqn ) ; \n \t1 if ( parent != null && ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( parent . get <identifiersep> pool ( ) ) && ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( parent . get <identifiersep> image ( ) ) ) { \n \t1 rbd <identifiersep> service . delete <identifiersep> all <identifiersep> snapshots ( parent . get <identifiersep> image ( ) , parent . get <identifiersep> pool ( ) , ceph <identifiersep> rbd <identifiersep> info . snapshot <identifiersep> on <identifiersep> prefix + snapshot <identifiersep> id ) ; \n \t1 } else { \n <ect>
\t1 public boolean revoke <identifiersep> all <identifiersep> pf <identifiersep> static <identifiersep> nat <identifiersep> rules <identifiersep> for <identifiersep> network ( long network <identifiersep> id , long user <identifiersep> id , account caller ) throws resource <identifiersep> unavailable <identifiersep> exception { \n \t2 list < firewall <identifiersep> rule > rules = new array <identifiersep> list < firewall <identifiersep> rule > ( ) ; \n \t2 list < port <identifiersep> forwarding <identifiersep> rule <identifiersep> vo > pf <identifiersep> rules =  <identifiersep> port <identifiersep> forwarding <identifiersep> dao . list <identifiersep> by <identifiersep> network ( network <identifiersep> id ) ; \n <ect>
\t5 . set <identifiersep> header <identifiersep> if <identifiersep> absent ( file <identifiersep> headers . filename , file . get <identifiersep> name ( ) ) \n \t5 . build ( ) ; \n \t3 if ( this . delete <identifiersep> files ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( ) throws exception { \n <ect>
\t1 try ( buffered <identifiersep> reader br = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( fs . open ( file <identifiersep> listing ) ) ) ) { \n \t1 <comment> \n \t1 string line = null ; \n \t1 while ( ( line = br . read <identifiersep> line ( ) ) != null ) { \n <ect>
\t2 if ( dest <identifiersep> end < dest <identifiersep> start + <number_literal> ) \n \t3 return orig <identifiersep> announce ; \n \t2 int path <identifiersep> start = orig <identifiersep> announce . index <identifiersep> of ( ' / ' , dest <identifiersep> end ) ; \n \t2 string rv = <string_literal> + orig <identifiersep> announce . substring ( dest <identifiersep> start , dest <identifiersep> end ) + orig <identifiersep> announce . substring ( path <identifiersep> start ) ; \n <ect>
\t1 for ( final string test : q <identifiersep> file <identifiersep> test <identifiersep> names ) { \n \t1 if ( excluded . contains ( test ) ) { \n \t2 logger . info ( <string_literal> + driver + <string_literal> + test ) ; \n \t1 } else if ( isolated . contains ( test ) ) { \n <ect>
\t4 nodes <identifiersep> with <identifiersep> exception ++ ; \n \t4 if ( ! faulty <identifiersep> nodes . contains ( node . get <identifiersep> id ( ) ) ) \n \t5 faulty <identifiersep> nodes . add ( node . get <identifiersep> id ( ) ) ; } } \n \t2 if ( nodes <identifiersep> with <identifiersep> exception > 0 ) { \n <ect>
<comment> \n \t1 protected session <identifiersep> factory lookup <identifiersep> session <identifiersep> factory ( ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( policy . get <identifiersep> principal <identifiersep> attribute <identifiersep> name <identifiersep> trigger ( ) ) \n \t4 || string <identifiersep> utils . is <identifiersep> blank ( policy . get <identifiersep> principal <identifiersep> attribute <identifiersep> value <identifiersep> to <identifiersep> match ( ) ) ) { \n <ect>
\t1 @ get \n \t1 @ produces ( <string_literal> ) \n \t1 @ path ( <string_literal> ) \n \t1 public string get <identifiersep> decoded <identifiersep> path <identifiersep> param ( @ path <identifiersep> param ( <string_literal> ) string path <identifiersep> param ) { \n <ect>
\t3 return null ; } \n \t2 final matcher href <identifiersep> matcher = href <identifiersep> pattern . matcher ( data ) ; \n \t2 if ( ! href <identifiersep> matcher . find ( ) ) \n \t2 { \n <ect>
\t2 if ( null != entry . get <identifiersep> key ( ) ) { \n \t2 null <identifiersep> byte | = 1 < < ( b % <number_literal> ) ; \n \t2 } else if ( warned <identifiersep> once <identifiersep> null <identifiersep> map <identifiersep> key != null ) { \n \t2 if ( ! warned <identifiersep> once <identifiersep> null <identifiersep> map <identifiersep> key . value ) { \n <ect>
\t5 cache <identifiersep> item = listeners [ index ] ; } \n \t4 if ( ! el || ! cache <identifiersep> item ) { \n \t5 <comment> \n \t5 return false ; } \n <ect>
\t1 public void set <identifiersep> pushdown <identifiersep> predicate ( expression expr ) throws io <identifiersep> exception { \n \t2 search <identifiersep> argument s <identifiersep> arg = get <identifiersep> search <identifiersep> argument ( expr ) ; \n \t2 if ( s <identifiersep> arg != null ) { \n \t3 log . info ( <string_literal> + expr ) ; \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 set <identifiersep> sleep <identifiersep> timer ( ) ; } \n \t2 } else { \n <ect>
\t3 if ( privkey <identifiersep> base64 == null || privkey <identifiersep> base64 . is <identifiersep> empty ( ) ) { \n \t4 logger . warn ( <string_literal> , private <identifiersep> key <identifiersep> file <identifiersep> name ) ; \n \t4 return null ; } \n \t3 if ( pubkey <identifiersep> base64 == null || pubkey <identifiersep> base64 . is <identifiersep> empty ( ) ) { \n <ect>
\t4 } else if ( command instanceof stop <identifiersep> move <identifiersep> type && ( ( stop <identifiersep> move <identifiersep> type ) command ) == stop <identifiersep> move <identifiersep> type . stop ) { \n \t5 control <identifiersep> address = sapp <identifiersep> binding <identifiersep> config <identifiersep> rollershutter <identifiersep> item . get <identifiersep> stop <identifiersep> control ( ) ; } \n \t4 if ( control <identifiersep> address != null ) { \n \t5 if ( ! provider . get <identifiersep> pnmas <identifiersep> map ( ) . contains <identifiersep> key ( control <identifiersep> address . get <identifiersep> pnmas <identifiersep> id ( ) ) ) { \n <ect>
\t6 <string_literal> , e . get <identifiersep> cause ( ) ) ; \n \t4 publish <identifiersep> consumer <identifiersep> failed <identifiersep> event ( <string_literal> , false , e ) ; } \n \t3 else if ( e . get <identifiersep> cause ( ) instanceof shutdown <identifiersep> signal <identifiersep> exception \n \t5 && rabbit <identifiersep> utils . is <identifiersep> passive <identifiersep> declaration <identifiersep> channel <identifiersep> close ( ( shutdown <identifiersep> signal <identifiersep> exception ) e . get <identifiersep> cause ( ) ) ) { \n <ect>
\t4 cred . add <identifiersep> property ( key , val ) ; \n \t4 try { \n \t5 cred . save ( ) ; \n \t4 } catch ( configuration <identifiersep> exception e1 ) { \n <ect>
\t1 } else { \n \t2 log . info ( hearthstone <identifiersep> analyser . get <identifiersep> mode + <string_literal> ) } \n \t1 case new <identifiersep> arena = > \n \t1 if ( hearthstone <identifiersep> analyser . is <identifiersep> new <identifiersep> arena )  <identifiersep> notify ( <string_literal> ) \n <ect>
\t4 log . debug ( <string_literal> + t ) ; } \n \t3 tuple2 < tuple , object > out = new tuple2 < tuple , object > ( t , null ) ; \n <ect>
\t1 public void activate ( ) { \n \t2 log . info ( <string_literal> + task <identifiersep> name ) ; } \n \t1 @ override \n \t1 public void deactivate ( ) { \n <ect>
\t8 logger . debug ( <string_literal> + mute <identifiersep> state ) ; \n \t8 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , mute <identifiersep> state ? on <identifiersep> off <identifiersep> type . on : on <identifiersep> off <identifiersep> type . off ) ; } \n \t7 break ; \n \t6 default : \n <ect>
\t1 public void run ( test <identifiersep> result result , final test <identifiersep> connection connection ) throws interrupted <identifiersep> exception { \n \t2 log . debug ( <string_literal> + client <identifiersep> id + <string_literal> + data + <string_literal> + expected <identifiersep> fields ) ; \n \t2 char <identifiersep> sequence message = connection . read <identifiersep> message ( client <identifiersep> id , timeout <identifiersep> in <identifiersep> ms ) ; \n \t2 if ( message == null ) { \n <ect>
<comment> \n \t1 public static boolean is <identifiersep> authorized <identifiersep> response <identifiersep> type <identifiersep> for <identifiersep> service ( final j2e <identifiersep> context context , final o <identifiersep> auth <identifiersep> registered <identifiersep> service registered <identifiersep> service ) { \n \t2 final string response <identifiersep> type = context . get <identifiersep> request <identifiersep> parameter ( o <identifiersep> auth20constants . response <identifiersep> type ) ; \n \t2 if ( registered <identifiersep> service . get <identifiersep> supported <identifiersep> response <identifiersep> types ( ) != null && ! registered <identifiersep> service . get <identifiersep> supported <identifiersep> response <identifiersep> types ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t4 lang = default <identifiersep> lang ; \n \t4 break ; } } \n \t2 assert ( lang != null ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> empty ( handle ) ) { \n <ect>
\t3 user <identifiersep> context ctx = user <identifiersep> context . current ( ) ; \n \t3 try { \n \t4  <identifiersep> rules <identifiersep> mgr . disable <identifiersep> static <identifiersep> nat ( ip . get <identifiersep> id ( ) , ctx . get <identifiersep> caller ( ) , ctx . get <identifiersep> caller <identifiersep> user <identifiersep> id ( ) , true ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t6 cmd . get <identifiersep> kind ( ) ) ; \n \t4 event <identifiersep> descriptions . put ( map <identifiersep> key , event <identifiersep> desc ) ; \n \t4 return event <identifiersep> desc ; \n \t3 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t2 if ( watch <identifiersep> mode ) { \n \t2 console <identifiersep> logger . info ( <string_literal> , \n \t3 time <identifiersep> unit . seconds . convert ( watch <identifiersep> timeout , time <identifiersep> unit . milliseconds ) ) ; \n \t2 } else { \n <ect>
<comment> \n \t1 @ test \n \t1 public void cipher <identifiersep> stream <identifiersep> encrypt <identifiersep> decrypt ( ) throws invalid <identifiersep> key <identifiersep> exception , invalid <identifiersep> algorithm <identifiersep> parameter <identifiersep> exception , illegal <identifiersep> block <identifiersep> size <identifiersep> exception , bad <identifiersep> padding <identifiersep> exception , io <identifiersep> exception { \n <ect>
\t3 log . info ( <string_literal> , last <identifiersep> queued <identifiersep> tx <identifiersep> id ) ; \n \t3 state = store <identifiersep> copying ; \n \t3 return false ; \n \t2 default : \n <ect>
\t2 log . info ( <string_literal> , local <identifiersep> dirs ) ; \n \t2 final string curr <identifiersep> dir = envs . get ( environment . pwd . key ( ) ) ; \n \t2 log . info ( <string_literal> , curr <identifiersep> dir ) ; \n \t2 final string remote <identifiersep> keytab <identifiersep> principal = envs . get ( yarn <identifiersep> config <identifiersep> keys . keytab <identifiersep> principal ) ; \n <ect>
\t2 types . add ( object <identifiersep> type ) ; \n \t2 context = new jsonjaxb <identifiersep> context ( config , types . to <identifiersep> array ( new class [ types . size ( ) ] ) ) ; } \n \t1 return context ; \n \t1 } catch ( jaxb <identifiersep> exception e ) { \n <ect>
\t5 final ticket ticket = ( ticket ) document . content ( ) ; \n \t5 logger . debug ( <string_literal> , ticket ) ; \n \t5 final ticket decoded = decode <identifiersep> ticket ( ticket ) ; \n \t5 if ( decoded == null || decoded . is <identifiersep> expired ( ) ) { \n <ect>
<comment> \n \t1 private static asn1sequence get <identifiersep> altname <identifiersep> sequence ( final list san <identifiersep> item ) { \n \t2 <comment> \n \t2 if ( san <identifiersep> item . size ( ) < <number_literal> ) { \n <ect>
\t1 final optional < file > newest = get <identifiersep> newest ( locations ) ; \n \t1 if ( locations . size ( ) > 1 ) { \n \t2 log . warn ( <string_literal> + fully <identifiersep> qualified <identifiersep> class <identifiersep> name + <string_literal> + \n \t4 <string_literal> ) ; \n <ect>
\t3 try { \n \t3 <comment> \n \t3 cache . put ( fqn , <string_literal> , collections . empty <identifiersep> map ( ) ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t3 parser . parse ( stream , handler , metadata , context ) ; \n \t3 response = handler . to <identifiersep> string ( ) ; \n \t2 } catch ( exception e ) { \n \t3 response = e . to <identifiersep> string ( ) ; \n <ect>
\t3 closer . close ( fos ) ; \n \t3 fis = null ; \n \t3 fos = null ; \n \t3 if ( old <identifiersep> config . exists ( ) ) new <identifiersep> config . delete ( ) ; \n <ect>
\t6 py <identifiersep> transform <identifiersep> map . put ( value , py <identifiersep> transform . to <identifiersep> string ( ) ) ; } \n \t4 } catch ( exception e ) { \n \t5 logger . error ( <string_literal> ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t1 try { \n \t1 query <identifiersep> info query <identifiersep> info = query <identifiersep> info <identifiersep> map . get ( query <identifiersep> identifier ) ; \n \t1 if ( query <identifiersep> info == null ) { \n \t2 <comment> \n <ect>
\t2 cassandra <identifiersep> host <identifiersep> configurator . get <identifiersep> retry <identifiersep> downed <identifiersep> hosts <identifiersep> queue <identifiersep> size ( ) , \n \t2 retry <identifiersep> delay <identifiersep> in <identifiersep> seconds ) ; } \n @ override \n void shutdown ( ) { \n <ect>
\t2 if ( event == event . shutdown <identifiersep> requested ) { \n \t3 try { \n \t4 reconnect ( host <identifiersep> id ) ; \n \t3 } catch ( cloud <identifiersep> runtime <identifiersep> exception e ) { \n <ect>
\t4 result . add ( convert <identifiersep> history <identifiersep> record <identifiersep> to <identifiersep> call <identifiersep> record ( hr ) ) ; } \n \t3 remove <identifiersep> history <identifiersep> search <identifiersep> progress <identifiersep> listeners ( history <identifiersep> reader ) ; } \n \t2 catch ( io <identifiersep> exception ex ) \n \t2 { \n <ect>
\t6 logger . warn ( <string_literal> , path ) ; } \n \t4 } else { \n \t5 logger . warn ( <string_literal> , path ) ; } \n \t3 } else { \n <ect>
\t2 final string parameter = request . get <identifiersep> parameter ( name ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( parameter ) ) { \n \t3 logger . error ( <string_literal> , name ) ; \n \t3 return false ; } \n <ect>
\t2 if ( length % <number_literal> != 0 ) { \n \t3 <comment> \n \t3 numblock ++ ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 indexer <identifiersep> interface . close ( ) ; } \n \t2 log . info ( <string_literal> ) ; \n \t2 system . out . println ( <string_literal> ) ; \n \t2 indexing <identifiersep> service . clean <identifiersep> index ( ) ; \n <ect>
\t2 flume <identifiersep> events . add ( event <identifiersep> builder . with <identifiersep> body ( event . get <identifiersep> body ( ) , event . get <identifiersep> headers ( ) ) ) ; } \n \t1 try { \n \t2 get <identifiersep> channel <identifiersep> processor ( ) . process <identifiersep> event <identifiersep> batch ( flume <identifiersep> events ) ; \n \t1 } catch ( channel <identifiersep> exception ex ) { \n <ect>
\t4 logger . error ( <string_literal> ) \n \t4 node . start <identifiersep> log . each <identifiersep> line { line - > logger . error ( <string_literal> ) } } \n \t3 if ( node . pid <identifiersep> file . exists ( ) && node . failed <identifiersep> marker . exists ( ) == false && \n \t4 ( node . http <identifiersep> ports <identifiersep> file . exists ( ) == false || node . transport <identifiersep> ports <identifiersep> file . exists ( ) == false ) ) { \n <ect>
\t4 found <identifiersep> user = true ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + found <identifiersep> user ) ; \n \t3 } else if ( name . equals ( <string_literal> ) ) { \n \t4 found <identifiersep> pswd = true ; \n <ect>
\t2 ha <identifiersep> work <identifiersep> vo work = new ha <identifiersep> work <identifiersep> vo ( vm . get <identifiersep> id ( ) , vm . get <identifiersep> type ( ) , work <identifiersep> type . ha , investigate ? step . investigating : step . scheduled , \n \t4 host <identifiersep> id != null ? host <identifiersep> id : 0l , vm . get <identifiersep> state ( ) , times <identifiersep> tried , vm . get <identifiersep> updated ( ) ) ; \n \t2  <identifiersep> ha <identifiersep> dao . persist ( work ) ; \n <ect>
<comment> \n \t1 protected string get <identifiersep> authentication <identifiersep> context <identifiersep> by <identifiersep> assertion ( final object assertion , \n <number_literal> final requested <identifiersep> authn <identifiersep> context requested <identifiersep> authn <identifiersep> context , \n <number_literal> final list < authn <identifiersep> context <identifiersep> class <identifiersep> ref > authn <identifiersep> context <identifiersep> class <identifiersep> refs ) { \n <ect>
\t3 return ; \n \t2 try { \n \t3 assert status . state ( ) != running ; \n <ect>
\t2 val binary <identifiersep> class = class <identifiersep> finder . find <identifiersep> kotlin <identifiersep> class ( class <identifiersep> id ) ? : return null \n \t2 val class <identifiersep> header = binary <identifiersep> class . class <identifiersep> header \n \t2 val data = class <identifiersep> header . data \n \t2 if ( data == null ) { \n <ect>
\t4 f . set <identifiersep> maximum <identifiersep> active <identifiersep> session <identifiersep> per <identifiersep> connection ( maximum <identifiersep> active ) ; \n \t4 f . set <identifiersep> connection <identifiersep> factory ( connection <identifiersep> factory ) ; \n \t4 this . pooled <identifiersep> connection <identifiersep> factory = f ; \n \t3 } catch ( throwable t ) { \n <ect>
\t1 string instance <identifiersep> name = instance <identifiersep> entity . get <identifiersep> name ( ) ; \n \t1 string view <identifiersep> name = view <identifiersep> entity . get <identifiersep> common <identifiersep> name ( ) ; \n \t1 string version = view <identifiersep> entity . get <identifiersep> version ( ) ; \n \t1 view <identifiersep> instance <identifiersep> entity instance <identifiersep> definition = instance <identifiersep> dao . find <identifiersep> by <identifiersep> name ( instance <identifiersep> entity . get <identifiersep> view <identifiersep> name ( ) , instance <identifiersep> entity . get <identifiersep> name ( ) ) ; <comment> \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t3 if ( message . is <identifiersep> asynchronous ( ) ) { \n \t4 return true ; } \n \t3 return task . get ( ) ; \n \t2 } catch ( final rejected <identifiersep> execution <identifiersep> exception e ) { \n <ect>
\t1 try { \n \t1 bw . add <identifiersep> mutations ( mutations ) ; \n \t1 bw . flush ( ) ; \n \t1 } catch ( mutations <identifiersep> rejected <identifiersep> exception e ) { \n <ect>
\t5 log . debug ( <string_literal> , part <identifiersep> path ) ; \n \t5 <comment> \n \t5 fs . rename ( part <identifiersep> pending <identifiersep> path , part <identifiersep> path ) ; \n \t4 } else if ( fs . exists ( part <identifiersep> in <identifiersep> progress <identifiersep> path ) ) { \n <ect>
\t5 new <identifiersep> record . set ( i , record . get ( c ) ) ; } \n \t4 builder . write ( new <identifiersep> record ) ; } \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 basic . seek <identifiersep> zero ( ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void versioned <identifiersep> seek <identifiersep> zero ( ) throws io <identifiersep> exception , no <identifiersep> such <identifiersep> algorithm <identifiersep> exception { \n <ect>
\t3 unregister <identifiersep> member ( member ) ; \n \t3 <comment> \n \t3 fire <identifiersep> lifecycle <identifiersep> event ( after <identifiersep> memberunregister <identifiersep> event , member ) ; \n \t2 } catch ( exception x ) { \n <ect>
\t2 try { \n \t2 bucket <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . delete <identifiersep> bucket <identifiersep> metadata ( bucket ) ; \n \t2 return true ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 entry = map . get ( pos ) ; } \n \t4 if ( entry != null ) { \n \t5 entry . add <identifiersep> event ( b <identifiersep> event ) ; \n \t4 } else { \n <ect>
\t7 errors . reject ( <string_literal> ) ; } \n \t6 preferred <identifiersep> name <identifiersep> for <identifiersep> locale <identifiersep> found = true ; } \n \t5 <comment> \n \t5 else if ( name <identifiersep> in <identifiersep> locale . get <identifiersep> locale <identifiersep> preferred ( ) && preferred <identifiersep> name <identifiersep> for <identifiersep> locale <identifiersep> found ) { \n <ect>
\t3 final boolean allow <identifiersep> unmatched <identifiersep> state , \n \t3 final logger log ) throws flink <identifiersep> exception { \n \t2 <comment> \n \t2 if ( states == null || states . is <identifiersep> empty ( ) || master <identifiersep> hooks == null || master <identifiersep> hooks . is <identifiersep> empty ( ) ) { \n <ect>
\t3 if ( result . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + tmplt <identifiersep> filename ) ; \n \t4 success = true ; \n \t3 } else { \n <ect>
\t1 index <identifiersep> meta <identifiersep> data archive <identifiersep> broken <identifiersep> index <identifiersep> settings ( index <identifiersep> meta <identifiersep> data index <identifiersep> meta <identifiersep> data ) { \n \t2 final settings settings = index <identifiersep> meta <identifiersep> data . get <identifiersep> settings ( ) ; \n \t2 final settings upgrade = index <identifiersep> scoped <identifiersep> settings . archive <identifiersep> unknown <identifiersep> or <identifiersep> invalid <identifiersep> settings ( \n \t3 settings , \n <ect>
\t2 <comment> \n \t2 return field . get ( object ) ; } \n \t1 @ override \n \t1 public void set <identifiersep> field <identifiersep> value ( object object , field field , object value ) throws illegal <identifiersep> argument <identifiersep> exception , illegal <identifiersep> access <identifiersep> exception { \n <ect>
\t2 if ( method == null ) { \n \t3 try { \n \t4 method = connection . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 referenced <identifiersep> objects . add ( manifest <identifiersep> referenced <identifiersep> ob ) ; } } } \n \t1 protected string get <identifiersep> same <identifiersep> document <identifiersep> reference <identifiersep> uri ( reference ref ) { \n \t2 string ref <identifiersep> uri = ref . get <identifiersep> uri ( ) ; \n \t2 if ( ref <identifiersep> uri == null ) { \n <ect>
\t1 string <identifiersep> buffer sb = new string <identifiersep> buffer ( ) ; \n \t1 for ( int i = 1 ; i < = <number_literal> ; i ++ ) { \n \t1 sb . append ( i ) . append ( <string_literal> ) ; } \n \t1 string expected <identifiersep> output = sb . to <identifiersep> string ( ) ; \n <ect>
\t5 throw new runtime <identifiersep> exception ( <string_literal> + limit ) ; } \n \t4 time <identifiersep> unit . seconds . sleep ( <number_literal> ) ; \n \t4 string missing = find <identifiersep> first <identifiersep> missing <identifiersep> message ( ) ; \n \t4 if ( missing != null ) { \n <ect>
\t7 node . attr ( <string_literal> ,  <identifiersep> html <identifiersep> src ) ; } \n \t6 new <identifiersep> node . set <identifiersep> shared <identifiersep> component ( component ) ; \n \t6 new <identifiersep> node . set <identifiersep> owner <identifiersep> document ( page ) ; \n \t5 } else { \n <ect>
\t3 try { \n \t4 thread . sleep (  <identifiersep> pause <identifiersep> interval * <number_literal> ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { } \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; } \n <ect>
\t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t2 level level = small <identifiersep> logging <identifiersep> configuration . appender <identifiersep> threshold <identifiersep> levels . get ( name ) ; \n \t2 if ( ! ( appender instanceof appender <identifiersep> skeleton ) ) { \n \t3 <comment> \n <ect>
\t3 if (  <identifiersep> storage <identifiersep> network <identifiersep> name2 != null ) { \n \t4 storage <identifiersep> nic2 = get <identifiersep> network <identifiersep> by <identifiersep> name ( conn ,  <identifiersep> storage <identifiersep> network <identifiersep> name2 ) ; \n \t4 if ( storage <identifiersep> nic2 != null ) { \n \t5  <identifiersep> host . set <identifiersep> storage <identifiersep> pif2 ( storage <identifiersep> nic2 . get <identifiersep> pif <identifiersep> record ( conn ) . uuid ) ; } } \n <ect>
\t5 custom <identifiersep> resolver . pname <identifiersep> dnssec <identifiersep> resolver <identifiersep> enabled , \n \t5 chk <identifiersep> enabled . is <identifiersep> selected ( ) ) ; } \n \t3 catch ( exception ex ) \n \t3 { \n <ect>
@ override \n public void gl <identifiersep> vertex <identifiersep> attrib <identifiersep> pointer ( int array <identifiersep> id , int size , int type , boolean normalize , \n \t9 int byte <identifiersep> stride , buffer nio <identifiersep> buffer ) { \n \t1 vertex <identifiersep> attrib <identifiersep> array <identifiersep> state data = vertex <identifiersep> attrib <identifiersep> array <identifiersep> state [ array <identifiersep> id ] ; \n <ect>
\t2 if ( abs == null ) { \n \t3 base = test <identifiersep> port <identifiersep> provider . create <identifiersep> uri ( <string_literal> ) ; \n \t2 } else { \n \t3 base = test <identifiersep> port <identifiersep> provider . create <identifiersep> uri ( <string_literal> + abs + <string_literal> ) ; } \n <ect>
\t2 while ( ( v = count . decrement <identifiersep> and <identifiersep> get ( ) ) > 0 ) { \n \t3 if ( ( count . get ( ) % <number_literal> ) == 0 ) { \n \t4 log . info ( <string_literal> , num <identifiersep> sends - count . get ( ) ) ; } \n \t3 assert <identifiersep> not <identifiersep> null ( <string_literal> + v , consumer . receive ( <number_literal> ) ) ; } \n <ect>
\t3 logger . info ( <string_literal> ) \n \t3 logger . info ( <string_literal> ) \n \t3 logger . info ( <string_literal> ) \n \t3 logger . info ( <string_literal> ) \n <ect>
\t3 else { \n \t3 log . debug ( <string_literal> , extension . get <identifiersep> name ( ) , extension . get <identifiersep> version ( ) , \n \t5 stack . get <identifiersep> name ( ) , stack . get <identifiersep> version ( ) ) ; } } } } \n \t1 else { \n <ect>
\t1 log . warn ( <string_literal> + message ) ; \n \t1 error = message . to <identifiersep> string ( ) ; \n \t1 notify ( ) ; } \n public synchronized void complete ( ) { \n <ect>
\t4 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t5 log . error ( <string_literal> , url <identifiersep> value , e ) ; \n \t5 break ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public void bind ( string name , object obj ) { \n <ect>
\t4 user = auth . do <identifiersep> login ( socket . get <identifiersep> request ( ) , username , password ) ; \n \t4 if ( user != null ) { \n \t5 string session <identifiersep> id = web <identifiersep> socket <identifiersep> data . get <identifiersep> session <identifiersep> id ( ) ; \n \t5 if ( session <identifiersep> id == null ) { \n <ect>
\t1 public void initialize ( ) { \n \t2 thread . current <identifiersep> thread ( ) . set <identifiersep> priority ( thread . max <identifiersep> priority ) ; \n \t2 stopwatch total <identifiersep> init <identifiersep> time = stopwatch . create <identifiersep> started ( ) ; \n \t2 try { \n <ect>
\t3 assertion . get <identifiersep> principal ( ) . get <identifiersep> attributes ( ) . for <identifiersep> each ( ( k , v ) - > { \n \t4 try { \n \t5 if ( ws <identifiersep> federation <identifiersep> claims . contains ( k ) ) { \n \t6 final string uri = ws <identifiersep> federation <identifiersep> claims . value <identifiersep> of ( k ) . get <identifiersep> uri ( ) ; \n <ect>
\t2 } catch ( ec2service <identifiersep> exception error ) { \n \t3 logger . error ( <string_literal> , error ) ; \n \t3 throw error ; \n \t2 } catch ( exception e ) { \n <ect>
\t6 synchronized ( connections ) { \n \t7 connections . add ( new bridge ( source , target ) ) ; } \n \t5 } catch ( socket <identifiersep> timeout <identifiersep> exception expected ) { } } \n \t3 } catch ( exception e ) { \n <ect>
\t3 catch ( exception e ) \n \t3 { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t9 size += comp <identifiersep> stream <identifiersep> metrics . get <identifiersep> metrics <identifiersep> size ( ) ; \n \t9 send <identifiersep> metric <identifiersep> info ( topology <identifiersep> id , comp <identifiersep> stream <identifiersep> metrics , meta <identifiersep> type . component <identifiersep> stream , time ) ; } } \n \t7 cost = ticker . stop ( ) ; \n \t6 } catch ( throwable ex ) { \n <ect>
\t2 <comment> \n \t2 s <identifiersep> bucket <identifiersep> dao bucket <identifiersep> dao = new s <identifiersep> bucket <identifiersep> dao ( ) ; \n \t2 s <identifiersep> bucket bucket = bucket <identifiersep> dao . get <identifiersep> by <identifiersep> name ( bucket <identifiersep> name ) ; \n \t2 if ( bucket == null ) { \n <ect>
\t2 <comment> \n \t2 this . memory <identifiersep> manager . release ( this . empty <identifiersep> segments ) ; \n \t2 this . empty <identifiersep> segments . clear ( ) ; \n <ect>
\t1 default map < string , object > decode ( map < string , object > properties ) { \n \t2 final map < string , object > decrypted = new hash <identifiersep> map < > ( ) ; \n \t2 properties . for <identifiersep> each ( ( key , value ) - > { \n \t3 try { \n <ect>
\t4 slot <identifiersep> ports <identifiersep> str = slot <identifiersep> ports <identifiersep> view . get <identifiersep> supervisor <identifiersep> slot <identifiersep> ports ( container . get <identifiersep> resource ( ) . get <identifiersep> memory ( ) , \n \t6 container . get <identifiersep> resource ( ) . get <identifiersep> virtual <identifiersep> cores ( ) , container . get <identifiersep> node <identifiersep> id ( ) . get <identifiersep> host ( ) ) ; \n \t4 vargs . add ( slot <identifiersep> ports <identifiersep> str ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t5 return get <identifiersep> elastic <identifiersep> lb <identifiersep> rules <identifiersep> health <identifiersep> check ( network , lbrules ) ; \n \t4 } else { \n \t5 return get <identifiersep> lb <identifiersep> health <identifiersep> checks ( network , lbrules ) ; } \n \t3 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t3 { \n \t4 log . error ( <string_literal> , e ) ; \n \t3 } catch ( illegal <identifiersep> access <identifiersep> exception e ) \n \t3 { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 if ( imports . remove ( import <identifiersep> spec ) ) { \n \t4 log . debug ( 'removed duplicate import from list' ) } \n <ect>
\t2 ( ( configurable <identifiersep> t <identifiersep> protocol ) iprot <identifiersep>  ) . initialize ( job , tbl ) ; } \n \t1 <comment> \n \t1 list < string > include <identifiersep> path = new array <identifiersep> list < string > ( ) ; \n \t1 include <identifiersep> path . add ( <string_literal> ) ; \n <ect>
\t1 private string start <identifiersep> date <identifiersep> string \t3 = null ; \n \t1 private string end <identifiersep> date <identifiersep> string \t4 = null ; \n \t1 private int edition <identifiersep> mask \t5 = community <identifiersep> mask ; \n \t1 public structr <identifiersep> license <identifiersep> manager ( final string license <identifiersep> file <identifiersep> name ) { \n <ect>
\t6 log . debug ( <string_literal> , ctx . get <identifiersep> authorization <identifiersep> id ( ) ) ; } \n \t5 return true ; \n \t4 } else { \n <ect>
\t3 candidate <identifiersep> semantic <identifiersep> types = steiner <identifiersep> node . get <identifiersep> top <identifiersep> k <identifiersep> learned <identifiersep> semantic <identifiersep> types ( number <identifiersep> of <identifiersep> candidates ) ; \n \t2 } else if ( steiner <identifiersep> node . get <identifiersep> semantic <identifiersep> type <identifiersep> status ( ) == column <identifiersep> semantic <identifiersep> type <identifiersep> status . user <identifiersep> assigned ) { \n \t3 candidate <identifiersep> semantic <identifiersep> types = steiner <identifiersep> node . get <identifiersep> user <identifiersep> semantic <identifiersep> types ( ) ; } \n \t2 if ( candidate <identifiersep> semantic <identifiersep> types == null ) { \n <ect>
\t1 if ( dir <identifiersep> end != - 1 ) { \n \t1 task <identifiersep> id = filename . substring ( dir <identifiersep> end + 1 ) ; } \n \t1 matcher m = copy <identifiersep> file <identifiersep> name <identifiersep> to <identifiersep> task <identifiersep> id <identifiersep> regex . matcher ( task <identifiersep> id ) ; \n \t1 if ( ! m . matches ( ) ) { \n <ect>
\t2 . add <identifiersep> work ( sort <identifiersep> id , work . get <identifiersep> bytes ( utf <identifiersep> <number_literal> ) ) ; \n \t1 synchronized ( this ) { \n \t1 sorts <identifiersep> queued . add ( sort <identifiersep> id ) ; } \n \t1 final string path = zoo <identifiersep> util . get <identifiersep> root ( master . get <identifiersep> instance ( ) ) + constants . zrecovery + <string_literal> + sort <identifiersep> id ; \n <ect>
\t7 do { \n \t8 try { \n \t9 reading <identifiersep> thread . join ( timeout ) ; \n \t8 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 return grid <identifiersep> compute <identifiersep> job <identifiersep> result <identifiersep> policy . reduce ; } \n \t2 <comment> \n \t2 @ override public serializable reduce ( list < grid <identifiersep> compute <identifiersep> job <identifiersep> result > results ) throws grid <identifiersep> exception { \n <ect>
\t4 flyway . migrate ( ) ; \n \t4 <comment> \n \t4 set <identifiersep> reindex <identifiersep> discovery ( true ) ; \n \t3 } else { \n <ect>
\t2 s = replication <identifiersep> table . get <identifiersep> scanner ( conn ) ; \n \t2 if ( null == writer ) { \n \t2 set <identifiersep> batch <identifiersep> writer ( replication <identifiersep> table . get <identifiersep> batch <identifiersep> writer ( conn ) ) ; } \n \t1 } catch ( replication <identifiersep> table <identifiersep> offline <identifiersep> exception e ) { \n <ect>
\t3 copy <identifiersep> strategy < ? > key <identifiersep> strategy ; \n \t3 if ( key <identifiersep> parameter != null ) { \n \t4 key <identifiersep> strategy = get <identifiersep> strategy ( key <identifiersep> parameter ) ; \n \t3 } else { \n <ect>
\t4 return false ; \n \t3 } else { \n \t4 return  <identifiersep> project <identifiersep> dao . remove ( project . get <identifiersep> id ( ) ) ; } \n \t2 } else { \n <ect>
\t1 if ( \n \t1 config . get <identifiersep> boolean ( config <identifiersep> constants . local <identifiersep> start <identifiersep> webserver , false ) && \n \t2 config . get <identifiersep> integer ( web <identifiersep> options . port , 0 ) >= 0 ) { \n \t1 val flink <identifiersep> timeout = future <identifiersep> utils . to <identifiersep> time ( timeout ) \n <ect>
\t2 pig <identifiersep> reducer <identifiersep> estimator estimator = conf . get ( pig <identifiersep> exec <identifiersep> reducer <identifiersep> estimator ) == null ? \n \t4 new input <identifiersep> size <identifiersep> reducer <identifiersep> estimator ( ) : \n \t5 pig <identifiersep> context . instantiate <identifiersep> object <identifiersep> from <identifiersep> params ( conf , \n \t7 pig <identifiersep> exec <identifiersep> reducer <identifiersep> estimator , pig <identifiersep> exec <identifiersep> reducer <identifiersep> estimator <identifiersep> constructor <identifiersep> arg <identifiersep> key , pig <identifiersep> reducer <identifiersep> estimator . class ) ; \n <ect>
\t2 initialize <identifiersep> reporter ( ) ; \n \t2 if ( props . get <identifiersep> boolean ( timeline <identifiersep> reporter <identifiersep> enabled <identifiersep> property , false ) ) { \n \t2 start <identifiersep> reporter ( metrics <identifiersep> config . polling <identifiersep> interval <identifiersep> secs ( ) ) ; } \n <ect>
\t2 current <identifiersep> window = some ( new export <identifiersep> deck <identifiersep> box <identifiersep> impl ( ) ) \n \t2 some ( open ( current <identifiersep> window . get ) ) } } \n } catch { \n \t1 case e : exception = > \n <ect>
\t2 if ( constants . windows ) { \n \t3 try { \n \t4 boolean result = jna <identifiersep> kernel32library . get <identifiersep> instance ( ) . add <identifiersep> console <identifiersep> ctrl <identifiersep> handler ( handler ) ; \n \t4 if ( result ) { \n <ect>
\t3 vm <identifiersep> inst . get <identifiersep> boot <identifiersep> record ( ) . set <identifiersep> monitoring ( <string_literal> . equals ( monitor <identifiersep> inst . get <identifiersep> monitoring <identifiersep> state ( ) ) ) ; \n \t3 monitor <identifiersep> instance <identifiersep> set . add ( monitor <identifiersep> inst ) ; \n \t3 db . commit ( ) ; } \n \t2 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception nse ) { \n <ect>
\t4 if ( analyzer != null ) { \n \t5 analyzer . analyze <identifiersep> file ( file , resource <identifiersep> builder . safe <identifiersep> resource <identifiersep> builder ( ) ) ; } \n \t4 return resource <identifiersep> builder . build ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 builder . put ( region , filters ( filter ) ) ; \n \t1 iterable < entry < string , describe <identifiersep> images <identifiersep> options > > queries = builder . build ( ) . entry <identifiersep> set ( ) ; \n \t1 iterable < image > return <identifiersep> val = filter ( transform ( describer . apply ( queries ) , parser ) , predicates . not <identifiersep> null ( ) ) ; \n <ect>
\t3 } else if ( ! filter <identifiersep> type . equals ( <string_literal> ) ) { \n \t4 print <identifiersep> usage <identifiersep> and <identifiersep> exit ( ) ; } \n \t3 logger . info ( <string_literal> + filter <identifiersep> type + <string_literal> + table <identifiersep> names ) ; \n \t3 table <identifiersep> names = filter <identifiersep> by <identifiersep> git <identifiersep> commit ( hbase <identifiersep> admin , table <identifiersep> names ) ; \n <ect>
\t10  <identifiersep> log . warn ( <string_literal> + addresses . to <identifiersep> string ( ip ) + <string_literal> + h ) ; \n \t9 continue ; } \n \t8 if ( ( v4 && ip . length == <number_literal> ) || ( v6 && ip . length == <number_literal> ) ) { \n \t9 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t1 <comment> \n \t1 private boolean wait <identifiersep> for <identifiersep> sync ( quorum <identifiersep> util qu , int index , int timeout ) throws interrupted <identifiersep> exception { \n <ect>
\t2 if ( pause <identifiersep> count < 0 ) \n \t2 { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t2 pause <identifiersep> count ++ ; \n <ect>
\t2 notify <identifiersep> builder notify = new notify <identifiersep> builder ( context ) . when <identifiersep> done ( size ) . create ( ) ; \n \t2 boolean matches = notify . matches ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t2 log . info ( <string_literal> + size + <string_literal> + time <identifiersep> utils . print <identifiersep> duration ( watch . stop ( ) ) ) ; \n \t2 log . info ( <string_literal> + tiny . get ( ) + <string_literal> ) ; \n <ect>
\t3 k ckey = this . key <identifiersep> ser . construct ( k ) ; \n \t3 if ( ckey == null ) { \n \t4 <comment> \n \t4 cur <identifiersep> page = this . bf . skip <identifiersep> multi <identifiersep> page <identifiersep> bytes ( vsz , cur <identifiersep> page , page <identifiersep> counter , cur <identifiersep> next <identifiersep> page ) ; \n <ect>
\t5 logger . warn ( <string_literal> , service ) ; \n \t5 return null ; } \n \t4 type = object . get <identifiersep> service <identifiersep> type ( ) ; \n \t3 } else { \n <ect>
\t2 final task <identifiersep> result task <identifiersep> result ; \n \t2 try { \n \t3 task <identifiersep> result = task . result ( local <identifiersep> node , response ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t1 cluster <identifiersep> definition <identifiersep> provider . instance ( ) . init ( ambari <identifiersep> server . configuration ) ; \n \t1 if ( ambari <identifiersep> server != null ) { \n \t2 ambari <identifiersep> server . run ( ) ; } \n \t1 } catch ( throwable t ) { \n <ect>
\t5 values . put ( value <identifiersep> server <identifiersep> prefix + count , hostname ) ; \n \t5 ++ count ; } \n \t4 else \n \t4 { \n <ect>
\t2 { \n \t3 try { \n \t4 listener . sample <identifiersep> occurred ( event ) ; \n \t3 } catch ( remote <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 switch <identifiersep> lanes ( ) ; \n <ect>
\t4  <identifiersep> log . info ( tunnel . get <identifiersep> client <identifiersep> options ( ) . get <identifiersep> property ( <string_literal> ) + <string_literal> ) ; \n \t3 socket <identifiersep> manager = build <identifiersep> socket <identifiersep> manager ( tunnel , pkf ) ; \n \t3 i2p <identifiersep> session sub = add <identifiersep> subsession ( tunnel ) ; \n \t3 if ( sub != null &&  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 ops . reset <identifiersep> message ( ) ; \n \t2 x <identifiersep> log . debug ( <string_literal> ) ; \n \t2 assert <identifiersep> true ( log . get <identifiersep> message ( ) . ends <identifiersep> with ( <string_literal> ) ) ; \n \t2 assert <identifiersep> null ( ops . get <identifiersep> message ( ) ) ; \n <ect>
\t3 try { \n \t4 l . changed ( ) ; } \n \t3 catch ( throwable t ) { \n \t4 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) \n <ect>
\t3 broker . set <identifiersep> use <identifiersep> jmx ( false ) ; \n \t3 broker . start ( ) ; \n \t3 broker . wait <identifiersep> until <identifiersep> started ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } catch ( final exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } \n \t2 return optional . empty ( ) ; } \n \t1 private static json <identifiersep> web <identifiersep> key <identifiersep> set build <identifiersep> json <identifiersep> web <identifiersep> key <identifiersep> set ( final resource resource ) throws exception { \n <ect>
\t4 pool pool = pools . iterator ( ) . next ( ) ; \n \t4 master <identifiersep> ip = pool . get <identifiersep> master ( host <identifiersep> conn ) . get <identifiersep> address ( host <identifiersep> conn ) ; \n \t4 break ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 public void updated ( dictionary < string , ? > config ) throws configuration <identifiersep> exception { \n \t2 if ( config != null ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
<comment> \n \t1 @ test \n \t1 public void connection ( ) throws exception { \n <ect>
\t3 if ( add <identifiersep> contact <identifiersep> to <identifiersep> white <identifiersep> list ( contact ) ) \n \t4 update <identifiersep> pres <identifiersep> rules ( ) ; } \n \t2 catch ( x <identifiersep> cap <identifiersep> exception ex ) \n \t2 { \n <ect>
\t10 string xml = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( string . class ) ; \n \t10 assert <identifiersep> true ( xml , xml . contains ( <string_literal> ) ) ; \n \t10 int num = tiny . increment <identifiersep> and <identifiersep> get ( ) ; \n \t10 if ( num % <number_literal> == 0 ) { \n <ect>
\t6 <comment> \n \t6 check <identifiersep> fiesta <identifiersep> state ( instances , inactive <identifiersep> ids . key <identifiersep> set ( ) ) ; \n \t6 final simplified <identifiersep> instance instance = instances . remove ( random . next <identifiersep> int ( instances . size ( ) ) ) ; \n \t6 assert <identifiersep> not <identifiersep> null ( instance . working <identifiersep> dir ) ; \n <ect>
\t2 string plugin = get <identifiersep> property ( model <identifiersep> name + <string_literal> , <string_literal> ) ; \n \t2 ns <identifiersep> dictionary < string , object > connection <identifiersep> dictionary = model . connection <identifiersep> dictionary ( ) ; \n \t2 if ( connection <identifiersep> dictionary == null ) { \n \t3 connection <identifiersep> dictionary = new ns <identifiersep> mutable <identifiersep> dictionary < > ( ) ; \n <ect>
\t3 if ( initial <identifiersep> context != null ) { \n \t4 try { \n \t5 initial <identifiersep> context . close ( ) ; \n \t4 } catch ( naming <identifiersep> exception e ) { \n <ect>
\t2 job job = get <identifiersep> job ( job <identifiersep> key . get <identifiersep> job <identifiersep> uuid ( ) ) ; \n \t2 job <identifiersep> task task = get <identifiersep> task ( job <identifiersep> key . get <identifiersep> job <identifiersep> uuid ( ) , job <identifiersep> key . get <identifiersep> node <identifiersep> number ( ) ) ; \n \t2 if ( ( job != null ) && ( task != null ) ) { \n \t3 if ( ( task . get <identifiersep> state ( ) == job <identifiersep> task <identifiersep> state . queued ) || job . set <identifiersep> task <identifiersep> state ( task , job <identifiersep> task <identifiersep> state . queued ) ) { \n <ect>
\t1 @ override \n \t1 protected boolean is <identifiersep> response <identifiersep> valid ( satel <identifiersep> message response ) { \n \t2 <comment> \n \t2 if ( response . get <identifiersep> command ( ) != command <identifiersep> code ) { \n <ect>
\t3 long in <identifiersep> lock = 0 ; \n \t3 synchronized (  <identifiersep> already <identifiersep> processed ) { \n \t4 in <identifiersep> lock =  <identifiersep> context . clock ( ) . now ( ) ; \n \t4 if (  <identifiersep> already <identifiersep> processed . contains (  <identifiersep> message <identifiersep> id ) ) { \n <ect>
\t2 while ( true ) { \n \t3 try { \n \t4 if ( real <identifiersep> run ( ) ) return ; <comment> \n \t3 } catch ( throwable t ) { \n <ect>
\t4 if ( local <identifiersep> assignment == null ) { \n \t5 local <identifiersep> assignment = new hash <identifiersep> map < > ( ) ; } \n \t4 local <identifiersep> state . put ( common . ls <identifiersep> local <identifiersep> assignments , zk <identifiersep> assignment ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 return generate <identifiersep> certificate ( keys , subject <identifiersep> dn , signer , signing <identifiersep> key , cal . get <identifiersep> time ( ) ) ; } \n @ override \n public x509certificate generate <identifiersep> certificate ( public <identifiersep> key key , x500principal subject <identifiersep> dn , x500principal signer , private <identifiersep> key signing <identifiersep> key , date not <identifiersep> after ) { \n \t1 if ( signing <identifiersep> key == null ) { \n <ect>
\t1 public < t > completable <identifiersep> future < t > send <identifiersep> message <identifiersep> with <identifiersep> future ( address dest , buffer data , request <identifiersep> options opts ) throws exception { \n \t2 if ( dest == null ) \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; \n \t2 if ( opts == null ) { \n <ect>
\t5 try { \n \t6 patient <identifiersep> identifier <identifiersep> validator . validate <identifiersep> identifier ( pi ) ; \n \t6 good <identifiersep> identifiers . add ( pi ) ; } \n \t5 catch ( patient <identifiersep> identifier <identifiersep> exception ex ) { \n <ect>
\t2 s <identifiersep> logger . warn ( <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) + <string_literal> + l <identifiersep> switch <identifiersep> port . get <identifiersep> display <identifiersep> name ( ) + <string_literal> + logical <identifiersep> switch <identifiersep> uuid ) ; \n \t2 try { \n \t3 nicira <identifiersep> nvp <identifiersep> api . delete <identifiersep> logical <identifiersep> switch <identifiersep> port ( logical <identifiersep> switch <identifiersep> uuid , l <identifiersep> switch <identifiersep> port . get <identifiersep> uuid ( ) ) ; \n \t2 } catch ( nicira <identifiersep> nvp <identifiersep> api <identifiersep> exception exception <identifiersep> delete <identifiersep> l <identifiersep> switch <identifiersep> port ) { \n <ect>
\t2 } else { \n \t3 base = port <identifiersep> provider <identifiersep> util . create <identifiersep> uri ( <string_literal> + abs + <string_literal> , reponse <identifiersep> info <identifiersep> test . class . get <identifiersep> simple <identifiersep> name ( ) ) ; } \n \t2 response response = response . temporary <identifiersep> redirect ( uri . create ( <string_literal> ) ) . build ( ) ; \n \t2 uri uri = ( uri ) response . get <identifiersep> metadata ( ) . get <identifiersep> first ( http <identifiersep> header <identifiersep> names . location ) ; \n <ect>
\t3 properties prop = new properties ( ) ; \n \t3 try { \n \t4 prop . load ( new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( get <identifiersep> bytes ( file <identifiersep> name + <string_literal> ) ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
<number_literal> && next <identifiersep> major <identifiersep> release . to <identifiersep> lower <identifiersep> case ( ) . index <identifiersep> of ( <string_literal> ) == - 1 ) { \n \t10 next <identifiersep> available = true ; } } } \n \t6 } finally { \n \t7 if ( client <identifiersep> version != null ) { \n <ect>
\t2 @ override \n \t2 public void resolve <identifiersep> artifact ( component <identifiersep> artifact <identifiersep> metadata artifact , module <identifiersep> source module <identifiersep> source , buildable <identifiersep> artifact <identifiersep> resolve <identifiersep> result result ) { \n \t3 final caching <identifiersep> module <identifiersep> source caching <identifiersep> module <identifiersep> source = ( caching <identifiersep> module <identifiersep> source ) module <identifiersep> source ; \n \t3 delegate . get <identifiersep> remote <identifiersep> access ( ) . resolve <identifiersep> artifact ( artifact , caching <identifiersep> module <identifiersep> source . get <identifiersep> delegate ( ) , result ) ; \n <ect>
\t3 string topology <identifiersep> id = cluster . get <identifiersep> topology <identifiersep> id ( storm <identifiersep> cluster <identifiersep> state , topology <identifiersep> name ) ; \n \t3 if ( topology <identifiersep> id != null ) { \n \t4 return topology <identifiersep> id ; } \n \t2 } catch ( exception e ) { \n <ect>
\t4 if ( end < 0 ) \n \t5 cp = cp . substring ( begin ) ; \n \t4 else \n \t5 cp = cp . substring ( begin , end ) ; \n <ect>
\t6 log . trace ( <string_literal> , synchronization , exchange ) ; \n \t6 synchronization . on <identifiersep> complete ( exchange ) ; } \n \t4 } catch ( throwable e ) { \n \t5 <comment> \n <ect>
\t3 get <identifiersep> user ( user <identifiersep> id ) . if <identifiersep> present ( user \n \t5 - > user <identifiersep> executor . execute ( \n \t7 ( ) - > { \n \t8 try { \n <ect>
\t2 for ( file <identifiersep> manager fm : users ) { \n \t3 if ( fm . support ( ) ) { \n \t4 log . debug ( <string_literal> , fm . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t4 return fm ; } } \n <ect>
\t5 if ( iter >= <number_literal> ) { \n \t6 iter = 0 ; \n \t6 logger . debug ( <string_literal> + var <identifiersep> node <identifiersep> work <identifiersep> list . size ( ) + <string_literal> ) ; } } } \n \t3 if ( verbose ) { \n <ect>
\t3 txn . start ( ) ; \n \t3 cluster <identifiersep> vo cluster =  <identifiersep> cluster <identifiersep> dao . lock <identifiersep> row ( cmd . get <identifiersep> id ( ) , true ) ; \n \t3 if ( cluster == null ) { \n <ect>
\t3 <comment> \n \t3 method m = get <identifiersep> class ( ) . get <identifiersep> method ( key <identifiersep> for <identifiersep> method <identifiersep> lookup ( c ) , d2w <identifiersep> context <identifiersep> class <identifiersep> array ) ; \n \t3 result = m . invoke ( this , new object [ ] { c } ) ; \n \t2 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t2 return region ; } \n \t1 private rect2i get <identifiersep> target <identifiersep> region ( string id , canvas canvas ) { \n \t2 if ( id != null && ! id . is <identifiersep> empty ( ) ) { \n \t3 if ( loop <identifiersep> detection <identifiersep> id . equals ( id ) ) { \n <ect>
\t1 extant <identifiersep> entity . set <identifiersep> acl ( acp ) ; \n \t1 trans . commit ( ) ; \n \t1 return extant <identifiersep> entity ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 } catch ( exception e ) { \n \t6 s <identifiersep> logger . warn ( <string_literal> + template . get <identifiersep> name ( ) + <string_literal> , e ) ; \n \t6 all <identifiersep> templates <identifiersep> deleted = false ; } } } \n \t3 if ( ! all <identifiersep> templates <identifiersep> deleted ) { \n <ect>
\t3 matcher subst <identifiersep> matcher = subst <identifiersep> pattern . matcher ( reg <identifiersep> expression ) ; \n \t3 <comment> \n \t3 string result = source ; \n \t3 if ( subst <identifiersep> matcher . matches ( ) ) { \n <ect>
\t3 response = protocol <identifiersep> provider \n \t5 . get <identifiersep> message <identifiersep> factory ( ) . create <identifiersep> response ( response . ok , request ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t4 int val = vis2 . read ( ) ; \n \t4 if ( val < 0 ) \n \t5 break ; \n \t4 baos2 . write ( ( byte ) val ) ; } \n <ect>
\t3 super . interrupt ( ) ; \n \t3 try { \n \t4 gateway <identifiersep> socket . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 dao . persist ( job ) ; \n \t2 publish <identifiersep> on <identifiersep> event <identifiersep> bus ( job , <string_literal> ) ; \n \t2 schedule <identifiersep> execution ( job , schedule <identifiersep> job <identifiersep> execution <identifiersep> in <identifiersep> context ) ; \n <ect>
\t4 return response <identifiersep> code ; } } \n \t2 <comment> \n \t2 { \n \t3 url = server + <string_literal> + s <identifiersep> new <identifiersep> volume1 . get ( ) + <string_literal> + s <identifiersep> linux <identifiersep> vm <identifiersep> id1 . get ( ) ; \n <ect>
\t6 . set <identifiersep> settings ( settings . builder ( ) . put ( <string_literal> , random <identifiersep> repo <identifiersep> path ( ) ) ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 final string index <identifiersep> name = <string_literal> ; \n \t2 assert <identifiersep> acked ( prepare <identifiersep> create ( index <identifiersep> name ) . set <identifiersep> wait <identifiersep> for <identifiersep> active <identifiersep> shards ( active <identifiersep> shard <identifiersep> count . all ) ) ; \n <ect>
\t3 <comment> \n \t3 logger . warn ( e , <string_literal> , ssh . to <identifiersep> string ( ) , e . get <identifiersep> message ( ) ) ; \n \t3 else \n <ect>
\t1 private void fill <identifiersep> host <identifiersep> hardware <identifiersep> info ( vmware <identifiersep> context service <identifiersep> context , startup <identifiersep> routing <identifiersep> command cmd ) throws runtime <identifiersep> fault <identifiersep> fault <identifiersep> msg , remote <identifiersep> exception , exception { \n \t2 vmware <identifiersep> hypervisor <identifiersep> host hyper <identifiersep> host = get <identifiersep> hyper <identifiersep> host ( get <identifiersep> service <identifiersep> context ( ) ) ; \n \t2 vmware <identifiersep> hypervisor <identifiersep> host <identifiersep> resource <identifiersep> summary summary = hyper <identifiersep> host . get <identifiersep> hyper <identifiersep> host <identifiersep> resource <identifiersep> summary ( ) ; \n <ect>
\t3 if ( target <identifiersep> scaler != null ) { \n \t4 result = create <identifiersep> variation ( target <identifiersep> scaler ) ; } \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 for ( service <identifiersep> component sc : service . get <identifiersep> service <identifiersep> components ( ) . values ( ) ) { \n \t2 sc . update <identifiersep> component <identifiersep> info ( ) ; } \n \t1 } catch ( ambari <identifiersep> exception e ) { \n \t2 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t1 private hash <identifiersep> map < string , host <identifiersep> vm <identifiersep> state <identifiersep> report <identifiersep> entry > get <identifiersep> host <identifiersep> vm <identifiersep> state <identifiersep> report ( ) throws exception { \n \t2 vmware <identifiersep> hypervisor <identifiersep> host hyper <identifiersep> host = get <identifiersep> hyper <identifiersep> host ( get <identifiersep> service <identifiersep> context ( ) ) ; \n \t2 int key = ( ( host <identifiersep> mo ) hyper <identifiersep> host ) . get <identifiersep> custom <identifiersep> field <identifiersep> key ( <string_literal> , custom <identifiersep> field <identifiersep> constants . cloud <identifiersep> vm <identifiersep> internal <identifiersep> name ) ; \n \t2 if ( key == 0 ) { \n <ect>
@ test ( expected = event <identifiersep> delivery <identifiersep> exception . class ) \n public void test <identifiersep> throwing <identifiersep> server <identifiersep> simple ( ) throws flume <identifiersep> exception , \n \t1 event <identifiersep> delivery <identifiersep> exception { \n \t1 rpc <identifiersep> test <identifiersep> utils . handler <identifiersep> simple <identifiersep> append <identifiersep> test ( new throwing <identifiersep> avro <identifiersep> handler ( ) ) ; \n <ect>
\t4 byte <identifiersep> buffer bb = s . slice ( ) ; \n \t4 obj <identifiersep> list . add ( from <identifiersep> byte <identifiersep> buffer ( bb ) ) ; } \n \t3 catch ( serialization <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
\t6 default : \n \t7 unreachable <identifiersep> code ( ) ; } \n \t4 } catch ( exception e ) { \n \t5 <comment> \n <ect>
\t1 public static resource prepare <identifiersep> classpath <identifiersep> resource <identifiersep> if <identifiersep> needed ( final resource resource , \n <number_literal> final boolean is <identifiersep> directory , \n <number_literal> final string contains <identifiersep> name ) { \n \t2 if ( resource == null ) { \n <ect>
\t4 if ( values . get ( <string_literal> ) == null ) { \n \t5 s <identifiersep> logger . info ( <string_literal> ) ; \n \t5 return <number_literal> ; } \n \t4 else { \n <ect>
\t3 if ( shutdown <identifiersep> await <identifiersep> termination > 0 ) { \n \t4 try { \n \t5 if ( ! await <identifiersep> termination ( executor <identifiersep> service , shutdown <identifiersep> await <identifiersep> termination ) ) { \n \t6 warned = true ; \n <ect>
\t4 integer pid = process <identifiersep> util . get <identifiersep> process <identifiersep> id ( process ) ; \n \t4 if ( pid != null ) { \n \t5 logger . debug ( <string_literal> + pid + <string_literal> + this ) ; \n \t4 } else { \n <ect>
\t5 log . info ( <string_literal> , fetched <identifiersep> size ( r , indexes ) ) ; } \n \t4 catch ( exception e ) { \n \t5 log . error ( <string_literal> , e ) ; } } \n \t3 else \n <ect>
\t1 authz <identifiersep> context <identifiersep> builder . set <identifiersep> forwarded <identifiersep> addresses ( ss . get <identifiersep> forwarded <identifiersep> addresses ( ) ) ; \n \t1 try { \n \t1 return ss . get <identifiersep> authorizer <identifiersep> v2 ( ) . filter <identifiersep> list <identifiersep> cmd <identifiersep> objects ( list <identifiersep> objs , authz <identifiersep> context <identifiersep> builder . build ( ) ) ; \n \t1 } catch ( hive <identifiersep> authz <identifiersep> plugin <identifiersep> exception e ) { \n <ect>
\t3 logger . error ( this , <string_literal> + extra <identifiersep> peer <identifiersep> data <identifiersep> peer <identifiersep> dir . get <identifiersep> path ( ) ) ; \n \t3 return false ; } \n \t2 file extra <identifiersep> peer <identifiersep> data <identifiersep> file = new file ( extra <identifiersep> peer <identifiersep> data <identifiersep> dir <identifiersep> path + file . separator + get <identifiersep> identity <identifiersep> string ( ) + file . separator + file <identifiersep> number ) ; \n \t2 if ( ! extra <identifiersep> peer <identifiersep> data <identifiersep> file . exists ( ) ) { \n <ect>
\t2 } else { \n \t3 port p = new port ( port , this ) ; \n \t3 p . set <identifiersep> modem <identifiersep> db <identifiersep> retry <identifiersep> timeout ( m <identifiersep> modem <identifiersep> db <identifiersep> retry <identifiersep> timeout ) ; \n \t3 m <identifiersep> ports . put ( port , p ) ; \n <ect>
\t6 logger . info ( job <identifiersep> desc + <string_literal> ) ; \n \t5 } catch ( exception ex ) { \n \t6 if ( executable != null ) \n \t7 context . remove <identifiersep> running <identifiersep> job ( executable ) ; \n <ect>
\t2 private memory <identifiersep> locks . lock <identifiersep> token lock ; \n \t2 public status <identifiersep> transit <identifiersep> runnable ( ) { \n \t3 jpa <identifiersep> service = services . get ( ) . get ( jpa <identifiersep> service . class ) ; \n \t3 if ( jpa <identifiersep> service == null ) { \n <ect>
\t3 if ( is <identifiersep> ip <identifiersep> system && ! release <identifiersep> ip <identifiersep> if <identifiersep> elastic ) { \n \t4 ip <identifiersep> address . set <identifiersep> system ( false ) ; } \n \t3  <identifiersep> ip <identifiersep> address <identifiersep> dao . update ( ip <identifiersep> address . get <identifiersep> id ( ) , ip <identifiersep> address ) ; \n \t3 if ( is <identifiersep> ip <identifiersep> system && release <identifiersep> ip <identifiersep> if <identifiersep> elastic && !  <identifiersep> network <identifiersep> mgr . handle <identifiersep> system <identifiersep> ip <identifiersep> release ( ip <identifiersep> address ) ) { \n <ect>
\t4 len = m <identifiersep> byte <identifiersep> out . size ( ) ; \n \t4 byte buf [ ] = m <identifiersep> byte <identifiersep> out . get <identifiersep> buffer ( ) ; \n \t4 m <identifiersep> output <identifiersep> stream . write ( buf , 0 , len ) ; <comment> \n \t4 m <identifiersep> output <identifiersep> stream . flush ( ) ; \n <ect>
\t6 try { \n \t7 o . set <identifiersep> value ( s ) ; \n \t6 } catch ( exception e ) { \n \t7 <comment> \n <ect>
\t2 test <identifiersep> get <identifiersep> unwrapped <identifiersep> key ( ) ; \n \t2 test <identifiersep> get <identifiersep> private <identifiersep> key ( ) ; \n \t2 test <identifiersep> get <identifiersep> unwrapped <identifiersep> key <identifiersep> superseded ( ) ; \n \t2 test <identifiersep> add <identifiersep> previous <identifiersep> key <identifiersep> block ( ) ; \n <ect>
\t2 this . metrics . num <identifiersep> command <identifiersep> errors += 1 ; \n \t2 this .  <identifiersep> record <identifiersep> failure ( error <identifiersep> message ) ; \n \t1 } , \n \t1  <identifiersep> record <identifiersep> failure : function ( error <identifiersep> msg ) { \n <ect>
\t5 { \n \t6 sstable = open ( entry . get <identifiersep> key ( ) , entry . get <identifiersep> value ( ) , metadata , partitioner ) ; } \n \t5 catch ( io <identifiersep> exception ex ) \n \t5 { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 if ( value != null ) { \n \t3 try { \n \t4 return kubernetes <identifiersep> helper . to <identifiersep> yaml ( value ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 return true ; } \n \t3 <comment> \n \t3 volume <identifiersep> info vol <identifiersep> on <identifiersep> primary = vol <identifiersep> factory . get <identifiersep> volume ( volume . get <identifiersep> id ( ) , data <identifiersep> store <identifiersep> role . primary ) ; \n \t3 if ( vol <identifiersep> on <identifiersep> primary != null ) { \n <ect>
\t4 management <identifiersep> server <identifiersep> host <identifiersep> peer <identifiersep> vo peer = new management <identifiersep> server <identifiersep> host <identifiersep> peer <identifiersep> vo ( owner <identifiersep> mshost , peer <identifiersep> mshost , peer <identifiersep> runid , peer <identifiersep> state ) ; \n \t4 persist ( peer ) ; } \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t8 + interval <identifiersep> in <identifiersep> secs + <string_literal> ) ; \n \t4 } else { \n \t5 logger . warn ( <string_literal> ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t3 return ; } \n \t2 try { \n \t3 transaction <identifiersep> manager . resume ( suspended <identifiersep> transaction ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t5 if ( tcp <identifiersep> connection != null ) { \n \t6 handle <identifiersep> tcp <identifiersep> connection <identifiersep> failure ( <string_literal> + \n \t8 accessor . get <identifiersep> short <identifiersep> log <identifiersep> message ( message . get <identifiersep> payload ( ) ) , ex ) ; } \n \t5 else if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t2 sc . add <identifiersep> and ( sc . get <identifiersep> entity ( ) . get <identifiersep> type ( ) , op . eq , host . type . routing ) ; \n \t2 sc . add <identifiersep> and ( sc . get <identifiersep> entity ( ) . get <identifiersep> management <identifiersep> server <identifiersep> id ( ) , op . eq , ms <identifiersep> id ) ; \n \t2 list < host <identifiersep> vo > all <identifiersep> hosts = sc . list ( ) ; \n \t2 if ( all <identifiersep> hosts . size ( ) < = av <identifiersep> load ) { \n <ect>
protected void on <identifiersep> url <identifiersep> replaced ( final string replaced <identifiersep> url ) { \n \t1 final string allowed <identifiersep> url = string <identifiersep> utils . remove <identifiersep> start ( replaced <identifiersep> url , get <identifiersep> url <identifiersep> prefix ( ) ) ; \n \t1 if ( authorization <identifiersep> manager instanceof mutable <identifiersep> resource <identifiersep> authorization <identifiersep> manager ) { \n \t1 if ( ! authorization <identifiersep> manager . is <identifiersep> authorized ( allowed <identifiersep> url ) ) { \n <ect>
\t2 try { \n \t3 ovm <identifiersep> volume . destroy (  <identifiersep> conn , cmd . get <identifiersep> volume ( ) . get <identifiersep> pool <identifiersep> uuid ( ) , cmd . get <identifiersep> volume ( ) . get <identifiersep> path ( ) ) ; \n \t3 return new answer ( cmd , true , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> id ) ; \n \t4 return  <identifiersep> host <identifiersep> dao . remove ( host . get <identifiersep> id ( ) ) ; } \n \t3 return true ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t4 try { \n \t5 close <identifiersep> client <identifiersep> socket ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n \t5 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 result . set <identifiersep> featured <identifiersep> streams ( featured <identifiersep> stream <identifiersep> dto <identifiersep> mapper . execute ( null ) ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 result . set <identifiersep> most <identifiersep> active <identifiersep> streams ( most <identifiersep> active <identifiersep> streams <identifiersep> mapper . execute ( null ) ) ; \n <ect>
\t2 set < string > existing <identifiersep> after <identifiersep> gc = gc <identifiersep> internal ( after <identifiersep> setup <identifiersep> time - start <identifiersep> reference <identifiersep> time + <number_literal> ) ; \n \t2 assert <identifiersep> true ( sets . symmetric <identifiersep> difference ( state . blobs <identifiersep> added , existing <identifiersep> after <identifiersep> gc ) . is <identifiersep> empty ( ) ) ; } \n \t1 @ test \n \t1 public void gc <identifiersep> check <identifiersep> deleted <identifiersep> size ( ) throws exception { \n <ect>
\t1 public action invoke <identifiersep> interceptors ( list < atmosphere <identifiersep> interceptor > c , atmosphere <identifiersep> resource r , int tracing ) { \n \t2 action a = action . continue ; \n \t2 for ( atmosphere <identifiersep> interceptor arc : c ) { \n \t3 if ( ! atmosphere <identifiersep> resource <identifiersep> impl . class . cast ( r ) . is <identifiersep> in <identifiersep> scope ( ) ) { \n <ect>
\t2 try { \n \t3 security <identifiersep> cache <identifiersep> entry entry = get <identifiersep> entry ( entity ) ; \n \t3 if ( entry != null ) { \n <ect>
\t3 return true ; } \n \t2 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> + pn + <string_literal> + old <identifiersep> id ) ; \n \t2 int htl = m . get <identifiersep> int ( dmt . htl ) ; \n \t2 if ( htl > swap <identifiersep> max <identifiersep> htl ) { \n <ect>
\t5 set <identifiersep> response <identifiersep> object ( store <identifiersep> response ) ; \n \t3 } else { \n \t4 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , <string_literal> ) ; } \n \t2 } catch ( discovery <identifiersep> exception ex ) { \n <ect>
\t2 wrapped <identifiersep> key wkpp = wrapped <identifiersep> key . wrap <identifiersep> key ( wrapping <identifiersep> key <identifiersep> pair . get <identifiersep> private ( ) , null , a <identifiersep> label , wrapping <identifiersep> key <identifiersep> pair . get <identifiersep> public ( ) ) ; \n \t2 unwrapped <identifiersep> key = wkpp . unwrap <identifiersep> key ( wrapping <identifiersep> key <identifiersep> pair . get <identifiersep> private ( ) ) ; \n \t2 assert . assert <identifiersep> array <identifiersep> equals ( wrapping <identifiersep> key <identifiersep> pair . get <identifiersep> private ( ) . get <identifiersep> encoded ( ) , unwrapped <identifiersep> key . get <identifiersep> encoded ( ) ) ; \n \t2 <comment> \n <ect>
\t2 log . warn ( <string_literal> ) ; \n \t2 state = elb <identifiersep> workflow <identifiersep> state . workflow <identifiersep> cancelled ; \n \t2 return ; } \n \t2 state = elb <identifiersep> workflow <identifiersep> state . workflow <identifiersep> failed ; \n <ect>
\t4  <identifiersep> ip <identifiersep> address <identifiersep> dao . update ( ip <identifiersep> address . get <identifiersep> id ( ) , ip <identifiersep> address ) ; \n \t4 s <identifiersep> logger . warn ( <string_literal> + ip <identifiersep> id + <string_literal> ) ; \n \t4 return false ; } \n \t2 } else { \n <ect>
\t2 iterator < string > keys <identifiersep> iterator = properties . key <identifiersep> set ( ) . iterator ( ) ; keys <identifiersep> iterator . has <identifiersep> next ( ) ; ) { \n \t3 string obj <identifiersep> property <identifiersep> name = keys <identifiersep> iterator . next ( ) ; \n \t3 string property <identifiersep> name = obj <identifiersep> property <identifiersep> name ; \n \t3 string value = ( ( string ) properties . get ( property <identifiersep> name ) ) ; \n <ect>
\t5 final list < otp <identifiersep> erlang <identifiersep> object > messages = receive <identifiersep> some <identifiersep> messages ( mbox ) ; \n \t5 if ( ! messages . is <identifiersep> empty ( ) ) { \n \t6 if ( debugger <identifiersep> event <identifiersep> daemon . debug ) { \n \t7 for ( final otp <identifiersep> erlang <identifiersep> object message : messages ) { \n <ect>
\t5 pipeline . add <identifiersep> last ( network <identifiersep> failure <identifiersep> handler <identifiersep> name , failure <identifiersep> handler ) ; } \n \t4 return pipeline ; } \n \t2 } ) ; \n \t2 channel = server <identifiersep> bootstrap . bind ( new inet <identifiersep> socket <identifiersep> address ( local <identifiersep> port ) ) ; \n <ect>
\t3 soap <identifiersep> element = ( soap <identifiersep> element ) soap <identifiersep> element . get <identifiersep> child <identifiersep> elements ( ) . next ( ) ; \n \t3 string old <identifiersep> value = soap <identifiersep> element . get <identifiersep> value ( ) ; \n \t3 string new <identifiersep> value = old <identifiersep> value + <string_literal> + direction + <string_literal> ; \n \t3 soap <identifiersep> element . set <identifiersep> value ( new <identifiersep> value ) ; \n <ect>
\t10 log . error ( <string_literal> , e ) ; \n \t10 cancel ( ) ; \n \t10 return false ; } \n \t8 } else { \n <ect>
\t3 } else if ( timeout == 0 ) { \n \t4 log . debug ( <string_literal> , consumer ) ; \n \t4 resource <identifiersep> exchange = consumer . receive <identifiersep> no <identifiersep> wait ( ) ; \n \t3 } else { \n <ect>
\t5 pstmt . set <identifiersep> long ( 1 , network <identifiersep> id ) ; \n \t5 pstmt . execute <identifiersep> update ( ) ; } \n \t4 rs . close ( ) ; \n \t4 pstmt . close ( ) ; } \n <ect>
\t3 pstmt . execute <identifiersep> update ( ) ; \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t4 if ( version . is <identifiersep> empty ( ) ) { \n \t5 log . warn ( <string_literal> , line <identifiersep> number ) ; \n \t5 continue ; } \n \t4 if ( config . is <identifiersep> empty ( ) ) { \n <ect>
\t3 method method = druid <identifiersep> data <identifiersep> source . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> ) ; \n \t3 object obj = method . invoke ( druid <identifiersep> data <identifiersep> source ) ; \n \t3 return ( object <identifiersep> name ) obj ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 . put ( cluster <identifiersep> rebalance <identifiersep> allocation <identifiersep> decider . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> allow <identifiersep> rebalance <identifiersep> setting . get <identifiersep> key ( ) , <string_literal> ) \n \t4 . put ( <string_literal> , <string_literal> ) \n \t4 . put ( <string_literal> , <string_literal> ) \n \t4 . build ( ) ) ; \n <ect>
\t2 serial <identifiersep> message serial <identifiersep> message = node . encapsulate ( \n \t4 command <identifiersep> class . set <identifiersep> value <identifiersep> message ( ( integer ) converter . convert <identifiersep> from <identifiersep> command <identifiersep> to <identifiersep> value ( item , command ) ) , \n \t4 command <identifiersep> class , endpoint <identifiersep> id ) ; \n \t2 if ( serial <identifiersep> message == null ) { \n <ect>
\t5 string error <identifiersep> message = \n \t6 localize <identifiersep> plain <identifiersep> or <identifiersep> key ( <string_literal> ) ; \n \t5 <comment> \n \t5 <comment> \n <ect>
\t8 remove <identifiersep> iterator . next ( ) ; \n \t8 remove <identifiersep> iterator . remove ( ) ; \n \t8 if ( remove <identifiersep> count ++ > iterations ) { \n \t9 break ; } } } \n <ect>
\t2 } else if ( type == cal <identifiersep> dav <identifiersep> type . disable ) { \n \t3 <comment> \n \t3 return ; \n \t2 } else { \n <ect>
\t1 protected list < string > get <identifiersep> all <identifiersep> topics ( ) { \n \t2 list < string > topics = new linked <identifiersep> list < > ( ) ; \n \t2 retry <identifiersep> loop : for ( int retry = 0 ; retry < num <identifiersep> retries ; retry ++ ) { \n \t3 brokers <identifiersep> loop : for ( int arr <identifiersep> idx = 0 ; arr <identifiersep> idx < seed <identifiersep> broker <identifiersep> addresses . length ; arr <identifiersep> idx ++ ) { \n <ect>
\t3 this . stop ( ) ; } } \n \t1 <comment> \n \t1 @ override \n \t1 public void run ( ) { \n <ect>
\t3 object value = message . get <identifiersep> object <identifiersep> property ( <string_literal> ) ; \n \t3 if ( value instanceof number ) { \n \t4 number n = ( number ) value ; \n \t4 return n . int <identifiersep> value ( ) ; } \n <ect>
\t5 . read <identifiersep> timeout ( <number_literal> ) \n \t5 . send ( object <identifiersep> mapper . writer ( ) . write <identifiersep> value <identifiersep> as <identifiersep> string ( stats ) . get <identifiersep> bytes ( charsets . utf <identifiersep> <number_literal> ) ) \n \t5 . code ( ) ; \n \t3 if ( code >= <number_literal> ) { \n <ect>
\t1 protected final log logger = log <identifiersep> factory . get <identifiersep> log ( get <identifiersep> class ( ) ) ; \n \t1 protected annotation <identifiersep> config <identifiersep> web <identifiersep> application <identifiersep> context wac ; \n \t1 @ before \n \t1 public void setup ( ) throws exception { \n <ect>
\t3 message t = long <identifiersep> term <identifiersep> store . get <identifiersep> message ( message <identifiersep> ack . get <identifiersep> last <identifiersep> message <identifiersep> id ( ) ) ; \n \t3 if ( t != null ) { \n \t4 long <identifiersep> term <identifiersep> store . remove <identifiersep> message ( context , message <identifiersep> ack ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t1 try { \n \t2 for ( class <identifiersep> loader loader : m <identifiersep> session <identifiersep> udf <identifiersep> loaders ) { \n \t2 java <identifiersep> utils . close <identifiersep> class <identifiersep> loader ( loader ) ; } \n \t1 } catch ( io <identifiersep> exception ie ) { \n <ect>
\t3 if ( \n \t5 meta <identifiersep> method instanceof number <identifiersep> number <identifiersep> meta <identifiersep> method || \n \t5 ( method instanceof generated <identifiersep> meta <identifiersep> method && ( name . equals ( <string_literal> ) || name . equals ( <string_literal> ) ) ) \n \t3 ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 map < string , integer > e <identifiersep> map = exception <identifiersep> count ; \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t2 thread1start . count <identifiersep> down ( ) ; \n \t2 thread2start . count <identifiersep> down ( ) ; \n \t2 future1 . get ( ) ; \n \t2 future2 . get ( ) ; \n <ect>
\t2 } else { \n \t2 fs . rename ( child <identifiersep> in <identifiersep> src , child <identifiersep> in <identifiersep> dest ) ; } \n \t1 } else { \n \t2 <comment> \n <ect>
\t4 final response <identifiersep> status status = response . get <identifiersep> status ( ) ; \n \t4 if ( status . compare <identifiersep> to ( response <identifiersep> status . ok ) == 0 ) { \n \t5 logger . debug ( <string_literal> , status , response . get <identifiersep> timestamp ( ) ) ; \n \t5 return true ; } \n <ect>
private final stopwatch stopwatch = stopwatch . create <identifiersep> unstarted ( ) ; \n public local <identifiersep> command ( logger logger , output <identifiersep> policy output <identifiersep> policy , string command ) throws io <identifiersep> exception { \n \t1 this . command <identifiersep> id = local <identifiersep> command <identifiersep> counter . increment <identifiersep> and <identifiersep> get ( ) ; \n \t1 this . logger = logger ; \n <ect>
\t4 case udp <identifiersep> packet . payload <identifiersep> type <identifiersep> data : \n \t5  <identifiersep> state = <number_literal> ; \n \t5 if ( auth != auth <identifiersep> type . session ) { \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 this . process <identifiersep> events ( ) ; \n \t1 this . prune <identifiersep> partitions ( ) ; \n <ect>
\t2 list < transaction <identifiersep> lifecycle > components = dsg <identifiersep> txn . get <identifiersep> transaction ( ) . lifecycle <identifiersep> components ( ) ; \n \t2 if ( mode == read <identifiersep> write . read ) { \n \t3 <comment> \n \t3 if ( components . size ( ) != 0 ) \n <ect>
\t7 null ) ; } \n static void initialize <identifiersep> deserializer ( deserializer deserializer , configuration conf , \n \t5 h <identifiersep> cat <identifiersep> table <identifiersep> info info , h <identifiersep> cat <identifiersep> schema schema ) throws ser <identifiersep> de <identifiersep> exception { \n \t1 properties props = get <identifiersep> serde <identifiersep> properties ( info , schema ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 <comment> \n \t4 return null ; } \n \t3 s <identifiersep> logger . info ( <string_literal> +  <identifiersep> name + <string_literal> +  <identifiersep> agent <identifiersep> ip + <string_literal> + s <identifiersep> gson . to <identifiersep> json ( start <identifiersep> cmds [ 1 ] ) ) ; \n \t2 } else { \n <ect>
\t2 return new reflections <identifiersep> and <identifiersep> class <identifiersep> loader ( new reflections ( configuration <identifiersep> builder ) , jar <identifiersep> class <identifiersep> loader ) ; } \n \t1 private class < ? > read <identifiersep> plugin <identifiersep> configuration <identifiersep> classes ( file plugin <identifiersep> file , reflections jar <identifiersep> file <identifiersep> scanner ) { \n \t2 set < class < ? > > plugin <identifiersep> classes = jar <identifiersep> file <identifiersep> scanner . get <identifiersep> types <identifiersep> annotated <identifiersep> with ( plugin <identifiersep> configuration . class ) ; \n \t2 if ( plugin <identifiersep> classes . is <identifiersep> empty ( ) ) { \n <ect>
\t2 temp <identifiersep> imp = temp <identifiersep> imp . to <identifiersep> upper <identifiersep> case ( ) ; \n \t2 return temp <identifiersep> imp . starts <identifiersep> with ( <string_literal> ) || temp <identifiersep> imp . starts <identifiersep> with ( <string_literal> ) || temp <identifiersep> imp . starts <identifiersep> with ( <string_literal> ) ; } \n \t1 public string get <identifiersep> latest <identifiersep> import <identifiersep> uri ( ) { \n \t2 string result = last == null ? url : last ; \n <ect>
\t2 boolean matches = false ; \n \t2 if ( catcher . server <identifiersep> certs != null ) { \n \t3 for ( int i = 0 ; i < catcher . server <identifiersep> certs . length ; i ++ ) { \n \t4 x509certificate cert = catcher . server <identifiersep> certs [ i ] ; \n <ect>
\t4 log . error ( util . get <identifiersep> message ( <string_literal> ) , e ) ; \n \t3 } finally { \n \t4 close <identifiersep> connection ( connection ) ; } } \n \t2 else { \n <ect>
\t4 && cartesian <identifiersep> product <identifiersep> edge <identifiersep> enabled && no <identifiersep> outer <identifiersep> join ) { \n \t2 list < base <identifiersep> work > parents = tez <identifiersep> work . get <identifiersep> parents ( null == orig <identifiersep> wrk ? wrk : orig <identifiersep> wrk ) ; \n \t2 for ( base <identifiersep> work p : parents ) { \n \t3 tez <identifiersep> edge <identifiersep> property prop = tez <identifiersep> work . get <identifiersep> edge <identifiersep> property ( p , null == orig <identifiersep> wrk ? wrk : orig <identifiersep> wrk ) ; \n <ect>
\t2 { \n \t3 log . debug ( <string_literal> ) ; \n \t3 log . info ( <string_literal> ) ; \n \t3 log . warn ( <string_literal> ) ; \n <ect>
\t5 proxy . set <identifiersep> net <identifiersep> radio ( ( ( decimal <identifiersep> type ) command ) . int <identifiersep> value ( ) ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> + proxy . get <identifiersep> host ( ) + <string_literal> + config . get <identifiersep> device <identifiersep> uid ( ) + <string_literal> ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 new json <identifiersep> object ( \n \t3 ( string ) execute <identifiersep> script ( <string_literal> ) ) ; \n \t1 return source . get <identifiersep> string ( <string_literal> ) ; } \n protected void init ( string handle ) { \n <ect>
\t4 dis . read <identifiersep> fully ( arr2 ) ; \n \t3 } catch ( eof <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 client . send ( request ) ; \n \t2 } catch ( socket <identifiersep> timeout <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 } finally { \n \t3 system . set <identifiersep> err ( old <identifiersep> err ) ; \n \t3 byte [ ] error <identifiersep> bytes = err <identifiersep> baos . to <identifiersep> byte <identifiersep> array ( ) ; \n \t3 if ( error <identifiersep> bytes . length > 0 ) { \n <ect>
\t2 for ( string header : header <identifiersep> map . key <identifiersep> set ( ) ) { \n \t3 if ( header . starts <identifiersep> with ( object <identifiersep> property <identifiersep> prefix ) ) num <identifiersep> of <identifiersep> object <identifiersep> properties ++ ; \n \t3 if ( header . starts <identifiersep> with ( data <identifiersep> property <identifiersep> prefix ) ) num <identifiersep> of <identifiersep> data <identifiersep> properties ++ ; } \n \t2 if ( num <identifiersep> of <identifiersep> data <identifiersep> properties == 0 && num <identifiersep> of <identifiersep> object <identifiersep> properties == 0 ) { <comment> \n <ect>
\t3 if ( listener . is <identifiersep> empty ( ) ) { \n \t4 try { \n \t5 remove <identifiersep> pending <identifiersep> keys ( listener ) ; \n \t4 } catch ( throwable t ) { \n <ect>
\t1 @ override \n \t1 public void receive ( message msg ) \n \t1 { \n \t2 remote <identifiersep> event <identifiersep> data remote <identifiersep> event = ( remote <identifiersep> event <identifiersep> data ) msg . get <identifiersep> object ( ) ; \n <ect>
\t1 @ override \n \t1 public virtual <identifiersep> router <identifiersep> provider configure ( final configure <identifiersep> virtual <identifiersep> router <identifiersep> element <identifiersep> cmd cmd ) { \n \t2 final virtual <identifiersep> router <identifiersep> provider <identifiersep> vo element =  <identifiersep> vr <identifiersep> provider <identifiersep> dao . find <identifiersep> by <identifiersep> id ( cmd . get <identifiersep> id ( ) ) ; \n \t2 if ( element == null || ! ( element . get <identifiersep> type ( ) == type . virtual <identifiersep> router || element . get <identifiersep> type ( ) == type . vpc <identifiersep> virtual <identifiersep> router ) ) { \n <ect>
\t2 proposed <identifiersep> leader = - 1 ; \n \t2 proposed <identifiersep> zxid = - 1 ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 manager . halt ( ) ; \n <ect>
\t4 nsp . set <identifiersep> destination <identifiersep> physical <identifiersep> network <identifiersep> id ( destination <identifiersep> physical <identifiersep> network <identifiersep> id ) ; } \n \t3 nsp =  <identifiersep> p <identifiersep> nsp <identifiersep> dao . persist ( nsp ) ; \n \t3 return nsp ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 restored <identifiersep> reader <identifiersep> state = new array <identifiersep> list < > ( ) ; \n \t4 for ( timestamped <identifiersep> file <identifiersep> input <identifiersep> split split : checkpointed <identifiersep> state . get ( ) ) { \n \t5 restored <identifiersep> reader <identifiersep> state . add ( split ) ; } \n <ect>
\t4 int i = 1 ; \n \t4 if ( last <identifiersep> processed <identifiersep> event != null ) { \n \t5 pstmt . set <identifiersep> long ( i ++ , last <identifiersep> processed <identifiersep> event ) ; } \n \t4 try ( result <identifiersep> set rs = pstmt . execute <identifiersep> query ( ) ; ) { \n <ect>
\t1 try { \n \t1 <comment> \n \t1 b . save ( ) ; \n \t1 } catch ( persistence <identifiersep> exception e ) { \n <ect>
\t2 } else { \n \t2 <comment> \n \t2 meta <identifiersep> store <identifiersep> utils . clear <identifiersep> quick <identifiersep> stats ( new <identifiersep> t <identifiersep> part . get <identifiersep> parameters ( ) ) ; } \n \t2 try { \n <ect>
\t2 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n \t2 } finally { \n \t3 if ( ! stopped ) { \n \t4 if ( ! forced ) { \n <ect>
\t6 logger . warn ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t5 try { \n \t6 process . get <identifiersep> error <identifiersep> stream ( ) . close ( ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t3 <comment> \n \t3 if ( constant <identifiersep> pool [ e . signature <identifiersep> index ] instanceof constant <identifiersep> utf8 <identifiersep> info ) \n \t2 { \n \t2 string n = ( ( constant <identifiersep> utf8 <identifiersep> info ) ( constant <identifiersep> pool [ e . signature <identifiersep> index ] ) ) . convert ( ) ; \n <ect>
private string krb <identifiersep> service <identifiersep> principal <identifiersep> name ; \n private tssl <identifiersep> transport <identifiersep> parameters params ; \n public h <identifiersep> kerberos <identifiersep> secured <identifiersep> thrift <identifiersep> client <identifiersep> factory <identifiersep> impl ( ) { \n \t1 params = ssl <identifiersep> helper . get <identifiersep> tssl <identifiersep> transport <identifiersep> parameters ( ) ; \n <ect>
\t2 int [ ] values = generate <identifiersep> values ( i ) ; \n \t2 int [ ] unpacked = new int [ <number_literal> ] ; \n \t2 { \n \t2 pack <identifiersep> unpack ( packer . new <identifiersep> int <identifiersep> packer ( i ) , values , unpacked ) ; \n <ect>
\t2 ensure <identifiersep> green ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> index <identifiersep> in <identifiersep> meta <identifiersep> state ( data <identifiersep> node , index ) ; \n \t2 assert <identifiersep> index <identifiersep> in <identifiersep> meta <identifiersep> state ( master <identifiersep> node , index ) ; \n <ect>
\t3 connector = broker <identifiersep> service . add <identifiersep> connector ( \n \t4 <string_literal> + get <identifiersep> proxy <identifiersep> port ( amqp <identifiersep> ws <identifiersep> port ) + <string_literal> + get <identifiersep> amqp <identifiersep> transformer ( ) + get <identifiersep> additional <identifiersep> config ( ) ) ; \n \t3 amqp <identifiersep> ws <identifiersep> port = connector . get <identifiersep> connect <identifiersep> uri ( ) . get <identifiersep> port ( ) ; \n \t3 amqp <identifiersep> ws <identifiersep> uri = connector . get <identifiersep> publishable <identifiersep> connect <identifiersep> uri ( ) ; \n <ect>
\t3 && counter <identifiersep> mutation <identifiersep> stage . is <identifiersep> terminated ( ) \n \t3 && view <identifiersep> mutation <identifiersep> stage . is <identifiersep> terminated ( ) ) \n \t2 { \n \t3 if ( ! is <identifiersep> final <identifiersep> shutdown ) \n <ect>
\t2 if ( network . get <identifiersep> vpc <identifiersep> id ( ) != null ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> ) ; } \n \t2 if (  <identifiersep> config <identifiersep> mgr . is <identifiersep> offering <identifiersep> for <identifiersep> vpc ( new <identifiersep> ntwk <identifiersep> off ) ) { \n <ect>
\t3 public void on <identifiersep> state <identifiersep> change ( session <identifiersep> state new <identifiersep> state , session <identifiersep> state old <identifiersep> state , session source ) { \n \t4 if ( configuration . get <identifiersep> session <identifiersep> state <identifiersep> listener ( ) != null ) { \n \t5 configuration . get <identifiersep> session <identifiersep> state <identifiersep> listener ( ) . on <identifiersep> state <identifiersep> change ( new <identifiersep> state , old <identifiersep> state , source ) ; } \n \t4 if ( new <identifiersep> state . equals ( session <identifiersep> state . closed ) ) { \n <ect>
\t2 ssl <identifiersep> handler ssl <identifiersep> handler = configure <identifiersep> server <identifiersep> ssl <identifiersep> on <identifiersep> demand ( ) ; \n \t2 if ( ssl <identifiersep> handler != null ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t3 inet <identifiersep> address <identifiersep> address <identifiersep> tracker <identifiersep> item ip <identifiersep> item = ip <identifiersep> trackers . get ( ip ) ; \n \t3 if ( ip <identifiersep> item == null ) { \n \t4 ip <identifiersep> item = new inet <identifiersep> address <identifiersep> address <identifiersep> tracker <identifiersep> item ( time <identifiersep> definitely <identifiersep> no <identifiersep> packets <identifiersep> received <identifiersep> ip , time <identifiersep> definitely <identifiersep> no <identifiersep> packets <identifiersep> sent <identifiersep> ip , ip ) ; \n \t4 if ( ip <identifiersep> trackers . size ( ) > max <identifiersep> items ) { \n <ect>
\t4 try { \n \t5 if ( getter . resume <identifiersep> from <identifiersep> trivial <identifiersep> progress ( inner <identifiersep> dis , context ) ) { \n \t6 read <identifiersep> transient <identifiersep> progress <identifiersep> fields ( inner <identifiersep> dis ) ; } \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 if ( ! utf8encoder . can <identifiersep> encode ( id ) ) { \n \t5 throw new io <identifiersep> exception ( <string_literal> ) ; } \n \t4 stmt . set <identifiersep> string ( idx , id ) ; } \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t6 form <identifiersep> class = bean <identifiersep> validator <identifiersep> form . get <identifiersep> instance ( ) . get <identifiersep> class ( ) ; } \n \t5 class config <identifiersep> class = \n \t6 class <identifiersep> utils . get <identifiersep> application <identifiersep> class ( this . get <identifiersep> type ( ) ) ; \n \t5 if ( config <identifiersep> class . is <identifiersep> assignable <identifiersep> from ( form <identifiersep> class ) ) { \n <ect>
\t1 private set < glsl <identifiersep> material > progamatic <identifiersep> shaders = sets . new <identifiersep> hash <identifiersep> set ( ) ; \n \t1 public shader <identifiersep> manager <identifiersep> lwjgl ( ) { \n \t2 logger . info ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> , sys . get <identifiersep> version ( ) , lwjgl <identifiersep> util . get <identifiersep> platform <identifiersep> name ( ) ) ; \n <ect>
\t5 this . key <identifiersep> store . load ( null , <string_literal> ) ; } \n \t3 } catch ( exception e ) { \n \t4 log . error ( <string_literal> , e . get <identifiersep> message ( ) , e ) ; } \n <ect>
\t3 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n \t3 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t2 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t4 fuseki . config <identifiersep> log . warn ( <string_literal> ) ; \n \t3 if ( contains ( arg <identifiersep> home ) ) \n \t4 fuseki . config <identifiersep> log . warn ( <string_literal> ) ; \n \t3 if ( contains ( arg <identifiersep> pages ) ) \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 routing <identifiersep> nodes routing <identifiersep> nodes = cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) ; \n \t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , routing <identifiersep> nodes . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 routing <identifiersep> nodes = cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) ; \n <ect>
\t1 this . services = resp . get <identifiersep> service <identifiersep> statuses ( ) ; } \n \t1 public list < service <identifiersep> status <identifiersep> type > get <identifiersep> service <identifiersep> detais ( ) { \n \t1 return this . services ; } } \n public list < service <identifiersep> status <identifiersep> type > describe <identifiersep> services ( final string component <identifiersep> type ) { \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + host . get <identifiersep> id ( ) + <string_literal> \n \t7 + cpu <identifiersep> core <identifiersep> cap . get <identifiersep> reserved <identifiersep> capacity ( ) + <string_literal> + reserved <identifiersep> cpu <identifiersep> core ) ; \n \t5 cpu <identifiersep> core <identifiersep> cap . set <identifiersep> reserved <identifiersep> capacity ( reserved <identifiersep> cpu <identifiersep> core ) ; } \n \t4 if ( cpu <identifiersep> core <identifiersep> cap . get <identifiersep> used <identifiersep> capacity ( ) != used <identifiersep> cpu <identifiersep> core ) { \n <ect>
\t3 session <identifiersep> config pcfg =  <identifiersep> runner . get <identifiersep> primary <identifiersep> config ( ) ; \n \t3 if ( pcfg != null ) { \n \t4 props . put <identifiersep> all ( pcfg . get <identifiersep> options ( ) ) ; \n \t3 } else { \n <ect>
\t4 document info = document <identifiersep> store ( ) . local <identifiersep> store ( ) . get ( repository <identifiersep> info <identifiersep> key ) . content ( ) ; \n \t4 int last <identifiersep> upgrade <identifiersep> id = info . get <identifiersep> integer ( repository <identifiersep> upgrade <identifiersep> id <identifiersep> field <identifiersep> name , 0 ) ; \n \t4 return ! upgrades . is <identifiersep> upgrade <identifiersep> required ( last <identifiersep> upgrade <identifiersep> id ) ; \n \t3 } , <number_literal> , time <identifiersep> unit . minutes , jcr <identifiersep> i18n . repository <identifiersep> was <identifiersep> never <identifiersep> upgraded <identifiersep> after <identifiersep> minutes ) ; \n <ect>
\t2 if ( cause instanceof unresolvable <identifiersep> grant <identifiersep> by <identifiersep> email <identifiersep> address <identifiersep> exception ) { \n \t3 throw ( unresolvable <identifiersep> grant <identifiersep> by <identifiersep> email <identifiersep> address <identifiersep> exception ) cause ; } \n \t2 if ( cause instanceof invalid <identifiersep> argument <identifiersep> exception ) { \n \t3 throw ( invalid <identifiersep> argument <identifiersep> exception ) cause ; } } \n <ect>
\t2 for ( domain <identifiersep> router <identifiersep> vo router : routers ) { \n \t3 result = result &&  <identifiersep> router <identifiersep> mgr . stop ( router , false , context . get <identifiersep> caller ( ) , context . get <identifiersep> account ( ) ) != null ; \n \t3 if ( cleanup ) { \n \t4 if ( ! result ) { \n <ect>
\t1 try { \n \t1 initialize <identifiersep> database <identifiersep> connection ( conf ) ; \n \t1 string sql = jdbc <identifiersep> storage <identifiersep> config <identifiersep> manager . get <identifiersep> query <identifiersep> to <identifiersep> execute ( conf ) ; \n \t1 string count <identifiersep> query = <string_literal> + sql + <string_literal> ; \n <ect>
\t3 log . error ( <string_literal> , class <identifiersep> name , method <identifiersep> name , method <identifiersep> arg <identifiersep> type . get <identifiersep> simple <identifiersep> name ( ) , e ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , class <identifiersep> name , method <identifiersep> name , method <identifiersep> arg <identifiersep> type . get <identifiersep> simple <identifiersep> name ( ) , e ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t3 if method == <string_literal> : \n \t4 # self . logger . debug ( <string_literal> ) \n \t4 return self . send <identifiersep> post <identifiersep> requst <identifiersep> to <identifiersep> ncc ( url , payload , header ) \n \t3 if method == <string_literal> : \n <ect>
<comment> \n \t1 private static void run ( string [ ] args ) { \n \t2 try { \n <ect>
\t5 register ( ) ; \n \t5 return ; } \n \t4 catch ( throwable e ) \n \t4 { \n <ect>
\t2 } catch ( json <identifiersep> mapping <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> + payload ) ; \n \t3 return null ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 log . warn ( <string_literal> , destination ) ; } \n \t3 if ( view != null ) { \n \t4 register <identifiersep> destination ( object <identifiersep> name , dest <identifiersep> name , view ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t8 callback . message <identifiersep> received ( connection , status ) ; } } \n \t6 line = in . read <identifiersep> line ( ) ; } } \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 logger . debug ( <string_literal> , e ) ; } \n <ect>
\t1 { \n \t2 set < string > des = sets . new <identifiersep> hash <identifiersep> set ( desired ) ; \n \t2 set < string > to <identifiersep> return = sets . intersection ( sets . new <identifiersep> hash <identifiersep> set ( supported ) , des ) ; \n \t2 if ( des . size ( ) > to <identifiersep> return . size ( ) ) \n <ect>
\t5 try { \n \t6 start <identifiersep> latch . await ( ) ; \n \t6 for ( int i = 0 ; i < number <identifiersep> of <identifiersep> updates <identifiersep> per <identifiersep> thread ; i ++ ) { \n \t7 if ( i % <number_literal> == 0 ) { \n <ect>
public static job <identifiersep> summary <identifiersep> level get <identifiersep> job <identifiersep> summary <identifiersep> level ( configuration conf ) { \n \t1 string level = conf . get ( job <identifiersep> summary <identifiersep> level ) ; \n \t1 string deprecated <identifiersep> flag = conf . get ( enable <identifiersep> job <identifiersep> summary ) ; \n \t1 if ( deprecated <identifiersep> flag != null ) { \n <ect>
\t3 sc . add <identifiersep> and ( <string_literal> , search <identifiersep> criteria . op . null ) ; \n \t3 list < usage <identifiersep> storage <identifiersep> vo > volumes <identifiersep> v <identifiersep> os =  <identifiersep> usage <identifiersep> storage <identifiersep> dao . search ( sc , null ) ; \n \t3 if ( volumes <identifiersep> v <identifiersep> os . size ( ) > 0 ) { \n \t4 <comment> \n <ect>
\t7 really <identifiersep> run ( ) ; \n \t6 } catch ( throwable e ) { \n \t7 s <identifiersep> logger . warn ( <string_literal> , e ) ; } } \n \t5 private void really <identifiersep> run ( ) { \n <ect>
\t8 all <identifiersep> member <identifiersep> list . add ( m ) ; \n \t8 found = true ; \n \t8 break ; } } \n \t6 if ( ! found ) { \n <ect>
def install ( self , env ) : \n \t1 self . install <identifiersep> packages ( env ) \n \t1 self . configure ( env ) \n def pre <identifiersep> upgrade <identifiersep> restart ( self , env , upgrade <identifiersep> type = none ) : \n <ect>
\t1 string parameter <identifiersep> name = injectable <identifiersep> param . get <identifiersep> parameter <identifiersep> name ( ) ; \n \t1 try { \n \t2 parameter <identifiersep> value = parameter <identifiersep> value <identifiersep> resolver . get <identifiersep> parameter <identifiersep> value ( parameter <identifiersep> name ) ; \n \t1 } catch ( org . mule . runtime . module . extension . internal . runtime . value <identifiersep> resolving <identifiersep> exception ignored ) { \n <ect>
\t2 if ( sync <identifiersep> indexing ) { \n \t3 property <identifiersep> index <identifiersep> cleaner cleaner = new property <identifiersep> index <identifiersep> cleaner ( node <identifiersep> store , index <identifiersep> path <identifiersep> service , async <identifiersep> index <identifiersep> info <identifiersep> service , stats <identifiersep> provider ) ; \n \t3 regs . add ( schedule <identifiersep> with <identifiersep> fixed <identifiersep> delay ( whiteboard , cleaner , \n \t5 cleaner <identifiersep> interval <identifiersep> in <identifiersep> secs , true , true ) ) ; } \n <ect>
\t2 request . set <identifiersep> attribute ( this . local <identifiersep> param <identifiersep> name , session . get ( this . local <identifiersep> param <identifiersep> name ) ) ; \n \t2 request . set <identifiersep> attribute ( cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> method , session . get ( cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> method ) ) ; \n \t2 final string service <identifiersep> key = cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> service + <string_literal> + w <identifiersep> ctx ; \n \t2 final service service = ( service ) session . get ( service <identifiersep> key ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 logger . warn ( <string_literal> ) ; \n \t2 logger . warn ( <string_literal> ) ; \n \t2 logger . warn ( <string_literal> + \n \t4 <string_literal> ) ; \n <ect>
\t3 <comment> \n \t3 throw new data <identifiersep> format <identifiersep> exception ( <string_literal> , e ) ; \n \t2 <comment> \n \t2 <comment> \n <ect>
\t4 config , \n \t4 io <identifiersep> executor , \n \t4 high <identifiersep> availability <identifiersep> services <identifiersep> utils . address <identifiersep> resolution . no <identifiersep> address <identifiersep> resolution ) ; \n \t3 <comment> \n <ect>
\t3 if ( value > 0 ) { \n \t4 filled ++ ; } } \n \t2 logger . info ( <string_literal> , max <identifiersep> repeat ) ; \n \t2 logger . info ( <string_literal> , sum <identifiersep> repeat / ( double ) filled ) ; \n <ect>
\t5 ow <identifiersep> server <identifiersep> config server = server <identifiersep> list . get ( unit ) ; \n \t5 needs <identifiersep> update = false ; \n \t5 if ( server == null ) { \n \t6 needs <identifiersep> update = false ; \n <ect>
\t4 log . warn ( <string_literal> + coord <identifiersep> action . get <identifiersep> run <identifiersep> conf ( ) , ioe ) ; } \n \t3 catch ( exception ex ) { \n \t4 err <identifiersep> msg = ex . get <identifiersep> message ( ) ; \n \t4 err <identifiersep> code = <string_literal> ; \n <ect>
\t3 <comment> \n \t3 log . error ( <string_literal> + next <identifiersep> to <identifiersep> expire + <string_literal> , e ) ; \n \t3 next <identifiersep> to <identifiersep> expire = null ; \n \t3 break ; <comment> \n <ect>
\t1 log . error ( err <identifiersep> msg ) ; \n \t1 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( err <identifiersep> msg ) ; } \n \t1 log . trace ( <string_literal> ) ; } \n public static void stop ( ) throws eucalyptus <identifiersep> cloud <identifiersep> exception { \n <ect>
\t4 command command = ( command ) daemon <identifiersep> connection . receive ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t4 logger . info ( <string_literal> , command ) ; \n \t4 return command ; \n \t3 } catch ( throwable e ) { \n <ect>
\t4 coord <identifiersep> name = coord <identifiersep> name . trim ( ) ; \n \t4 if ( coord <identifiersep> name <identifiersep> to <identifiersep> ba <identifiersep> mapping . key <identifiersep> set ( ) . contains ( coord <identifiersep> name ) ) { \n \t5 string coord <identifiersep> id = coord <identifiersep> name <identifiersep> to <identifiersep> ba <identifiersep> mapping . get ( coord <identifiersep> name ) . get <identifiersep> coord <identifiersep> id ( ) ; \n \t5 if ( coord <identifiersep> id == null ) { \n <ect>
\t1 private void connect <identifiersep> to <identifiersep> database ( ) { \n \t2 try { \n \t3 <comment> \n \t3 err <identifiersep> cnt = 0 ; \n <ect>
\t2 { \n \t3 read <identifiersep> replicas = read <identifiersep> replicas ( hazelcast <identifiersep> instance ) ; } \n \t2 else \n \t2 { \n <ect>
\t3 return out <identifiersep> transformation <identifiersep> service ; } \n \t2 bundle <identifiersep> context context = mios <identifiersep> activator . get <identifiersep> context ( ) ; \n \t2 out <identifiersep> transformation <identifiersep> service = transformation <identifiersep> helper . get <identifiersep> transformation <identifiersep> service ( context , name ) ; \n \t2 if ( out <identifiersep> transformation <identifiersep> service == null ) { \n <ect>
\t2 login <identifiersep> settings <identifiersep> page . form ( ) . set <identifiersep> reset <identifiersep> password <identifiersep> allowed ( false ) ; \n \t2 assert <identifiersep> false ( login <identifiersep> settings <identifiersep> page . form ( ) . is <identifiersep> reset <identifiersep> password <identifiersep> allowed ( ) ) ; \n \t2 login <identifiersep> settings <identifiersep> page . form ( ) . save ( ) ; \n \t2 assert <identifiersep> alert <identifiersep> success ( ) ; \n <ect>
\t3 http <identifiersep> util . execute <identifiersep> url ( get , \n \t5 create <identifiersep> user <identifiersep> password <identifiersep> hostname <identifiersep> prefix ( ) + suffix <identifiersep> powerstate + <string_literal> + power <identifiersep> state . get <identifiersep> value ( ) , \n \t5 this . time <identifiersep> out ) ; \n \t2 } else { \n <ect>
\t1 @ post \n \t1 @ path ( <string_literal> ) \n \t1 @ validation <identifiersep> foo <identifiersep> constraint ( min = <number_literal> , max = <number_literal> ) \n \t1 public validation <identifiersep> foo post ( @ validation <identifiersep> foo <identifiersep> constraint ( min = <number_literal> , max = <number_literal> ) validation <identifiersep> foo validation <identifiersep> foo , @ path <identifiersep> param ( <string_literal> ) string s ) { \n <ect>
\t2 while ( null != ( line = reader . read <identifiersep> line ( ) ) ) { \n \t3 ln ++ ; \n \t3 string [ ] tokens = line . split ( <string_literal> ) ; \n \t3 if ( tokens <identifiersep> per <identifiersep> line != tokens . length ) { \n <ect>
\t2 assert <identifiersep> equals ( health <identifiersep> status , current <identifiersep> status ) ; } \n \t1 protected object <identifiersep> name assert <identifiersep> registered <identifiersep> object <identifiersep> name ( string name ) throws malformed <identifiersep> object <identifiersep> name <identifiersep> exception , null <identifiersep> pointer <identifiersep> exception { \n \t2 object <identifiersep> name object <identifiersep> name = new object <identifiersep> name ( name ) ; \n \t2 if ( mbean <identifiersep> server . is <identifiersep> registered ( object <identifiersep> name ) ) { \n <ect>
\t4  <identifiersep> network <identifiersep> mgr . allocate ( vm <identifiersep> profile , networks , null ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + networks . size ( ) + <string_literal> + vm . get <identifiersep> instance <identifiersep> name ( ) ) ; \n \t3 } <comment> \n \t2 } <comment> \n <ect>
<comment> \n \t1 public void add <identifiersep> proxy <identifiersep> privilege ( string privilege ) { \n <ect>
\t3 result . ouch4 = ( table <identifiersep> exists <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> ouch4is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t4 vm <identifiersep> template <identifiersep> vo template =  <identifiersep> tmplt <identifiersep> dao . find <identifiersep> by <identifiersep> id ( template <identifiersep> id ) ; \n \t4 if ( template == null ) { \n \t5 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + template <identifiersep> id ) ; } \n \t4 if ( template . get <identifiersep> template <identifiersep> type ( ) == template <identifiersep> type . system ) { \n <ect>
\t3 cmd . set <identifiersep> cpus ( <number_literal> ) ; \n \t3 long ram = new long ( <string_literal> ) ; \n \t3 cmd . set <identifiersep> memory ( ram ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t3 if ( checked <identifiersep> out && ! broken ) <comment> \n \t3 { \n \t4 if ( logger . is <identifiersep> loggable ( m <identifiersep> level . info ) ) \n \t4 { \n <ect>
\t2 if ( result . is <identifiersep> present ( ) ) { \n \t3 final string entity <identifiersep> id = result . get ( ) ; \n \t3 logger . debug ( <string_literal> , entity <identifiersep> id , service . get <identifiersep> id ( ) ) ; \n \t3 return this . web <identifiersep> application <identifiersep> service <identifiersep> factory . create <identifiersep> service ( entity <identifiersep> id ) ; } \n <ect>
\t3 if ( socket == null ) { \n \t5 continue ; \n \t3 } else { \n \t4 if ( socket . get <identifiersep> peer <identifiersep> destination ( ) . equals (  <identifiersep> util . get <identifiersep> my <identifiersep> destination ( ) ) ) { \n <ect>
\t2 if ( system . getenv ( <string_literal> ) != null ) { \n \t3 string krb5config = system . get <identifiersep> property ( <string_literal> ) ; \n \t3 if ( krb5config != null && krb5config . length ( ) != 0 ) { \n \t4 file krb5 = new file ( krb5config ) ; \n <ect>
\t2 send <identifiersep> message ( message <identifiersep> bytes , bridge <identifiersep> id ) ; \n \t2 set <identifiersep> current <identifiersep> state ( bulb , bridge <identifiersep> id , new <identifiersep> value , binding <identifiersep> type . brightness ) ; \n \t2 return new <identifiersep> value ; } \n \t1 private percent <identifiersep> type send <identifiersep> cooler ( int bulb , string bridge <identifiersep> id ) { \n <ect>
\t2 <comment> \n \t2 wait <identifiersep> for ( expectation1after <identifiersep> crash <identifiersep> while <identifiersep> last <identifiersep> rev <identifiersep> recovery <identifiersep> locking , test <identifiersep> wait <identifiersep> timeout , <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 clock . wait <identifiersep> until ( clock . get <identifiersep> time ( ) + <number_literal> ) ; \n <ect>
\t7 } else { \n \t8 sink . received ( buf , 0 , len ) ; } } \n \t6 sink . closed ( ) ; \n \t5 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 log . warn ( <string_literal> + \n \t3 operation <identifiersep> log <identifiersep> root <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t2 is <identifiersep> operation <identifiersep> log <identifiersep> enabled = false ; } } \n \t1 if ( is <identifiersep> operation <identifiersep> log <identifiersep> enabled ) { \n <ect>
\t9 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t9 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; } } \n \t6 catch ( exception e ) \n \t6 { \n <ect>
\t1 entity <identifiersep> transaction db = entities . get ( block <identifiersep> storage <identifiersep> image <identifiersep> info . class ) ; \n \t1 try { \n \t2 list < block <identifiersep> storage <identifiersep> image <identifiersep> info > images = entities . query ( new block <identifiersep> storage <identifiersep> image <identifiersep> info ( ) ) ; \n \t2 for ( block <identifiersep> storage <identifiersep> image <identifiersep> info image : images ) { \n <ect>
\t3 for ( map . entry < string , object > binding : bindings . entry <identifiersep> set ( ) ) { \n \t4 try { \n \t5 internal <identifiersep> bind ( binding . get <identifiersep> key ( ) , binding . get <identifiersep> value ( ) ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t7 ca <identifiersep> manager . send <identifiersep> alert ( host , <string_literal> + host <identifiersep> description , \n \t9 string . format ( <string_literal> , host <identifiersep> description , certificate . get <identifiersep> not <identifiersep> after ( ) ) ) ; \n \t7 alert <identifiersep> map . put ( host <identifiersep> ip , new date ( ) ) ; } } } \n \t3 } catch ( final throwable t ) { \n <ect>
\t4 pending <identifiersep> ranges . put ( keyspace <identifiersep> name , new pending <identifiersep> range <identifiersep> maps ( ) ) ; } \n \t3 else \n \t3 { \n <ect>
\t2 log . debug ( <string_literal> , registry <identifiersep> name ) ; \n \t2 metric <identifiersep> registry result = get <identifiersep> metric <identifiersep> registry <identifiersep> from <identifiersep> camel <identifiersep> registry ( camel <identifiersep> registry , registry <identifiersep> name ) ; \n \t2 if ( result == null ) { \n \t3 log . debug ( <string_literal> , registry <identifiersep> name ) ; \n <ect>
\t1 object val = s . next <identifiersep> id ( null ) ; \n \t1 log . warn ( <string_literal> + val ) ; } \n \t1 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t1 object val = s . next <identifiersep> id ( null ) ; \n <ect>
\t3 logger . debug ( <string_literal> access - control - allow - origin \\ <string_literal> ) ; \n \t3 return true ; } \n \t2 servlet <identifiersep> server <identifiersep> http <identifiersep> request server <identifiersep> request = new servlet <identifiersep> server <identifiersep> http <identifiersep> request ( request ) ; \n \t2 if ( web <identifiersep> utils . is <identifiersep> same <identifiersep> origin ( server <identifiersep> request ) ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void run ( ) { \n \t2 running = true ; \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t5 return false ; } \n \t4 success =  <identifiersep> auto <identifiersep> scale <identifiersep> policy <identifiersep> condition <identifiersep> map <identifiersep> dao . remove <identifiersep> by <identifiersep> auto <identifiersep> scale <identifiersep> policy <identifiersep> id ( id ) ; \n \t4 if ( ! success ) { \n <ect>
\t3 system . out . println ( <string_literal> + e . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; } \n \t2 system . out . println ( <string_literal> + face <identifiersep> to <identifiersep> decode <identifiersep> to ) ; \n \t2 assert <identifiersep> equals ( face <identifiersep> to <identifiersep> encode , face <identifiersep> to <identifiersep> decode <identifiersep> to ) ; \n <ect>
\t1 @ override \n \t1 public object clone ( ) { \n \t2 return new selenium <identifiersep> test ( name , elements ) ; } \n \t1 public void dump ( ) { \n <ect>
\t2 update <identifiersep> supervisor <identifiersep> info ( ) ; \n \t2 try { \n \t3 storm <identifiersep> cluster <identifiersep> state . supervisor <identifiersep> heartbeat ( supervisor <identifiersep> id , supervisor <identifiersep> info ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 if ( ! config . contains ( task <identifiersep> manager <identifiersep> options . managed <identifiersep> memory <identifiersep> size ) ) { \n \t5 config . set <identifiersep> long ( task <identifiersep> manager <identifiersep> options . managed <identifiersep> memory <identifiersep> size , 4l ) ; } \n \t4 if ( ! config . contains ( task <identifiersep> manager <identifiersep> options . network <identifiersep> num <identifiersep> buffers ) ) { \n \t5 config . set <identifiersep> integer ( task <identifiersep> manager <identifiersep> options . network <identifiersep> num <identifiersep> buffers , <number_literal> ) ; } \n <ect>
<number_literal> final boolean credentials <identifiersep> provided ) { \n \t2 if ( ! registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . is <identifiersep> service <identifiersep> access <identifiersep> allowed <identifiersep> for <identifiersep> sso ( ) ) { \n \t3 logger . debug ( <string_literal> , service . get <identifiersep> id ( ) ) ; \n \t3 if ( ticket <identifiersep> granting <identifiersep> ticket . get <identifiersep> proxied <identifiersep> by ( ) != null ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 string module <identifiersep> name = module . get <identifiersep> name <identifiersep> as <identifiersep> string ( ) ; \n \t3 if ( ! module . is <identifiersep> default ( ) ) \n \t4 module <identifiersep> name += <string_literal> + module . get <identifiersep> version ( ) ; \n <ect>
\t2 try { \n \t3 final byte [ ] mac = nic . get <identifiersep> hardware <identifiersep> address ( ) ; \n \t3 result [ 1 ] = byte2mac ( mac ) ; \n \t2 } catch ( final socket <identifiersep> exception e ) { \n <ect>
\t1 val about <identifiersep> reader = new input <identifiersep> stream <identifiersep> reader ( class <identifiersep> of [ log <identifiersep> pane ] . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ) \n \t1 val about <identifiersep> text = str <identifiersep> substitutor . replace ( io <identifiersep> utils to <identifiersep> string about <identifiersep> reader , locale <identifiersep> strings ) \n \t1 contributors <identifiersep> text . set <identifiersep> text ( about <identifiersep> text ) \n \t1 } catch { \n <ect>
\t1 } catch ( io <identifiersep> exception ex ) { \n \t1 logger . error ( <string_literal> + file \n \t2 + <string_literal> , ex ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 if ( ois != null ) { \n \t2 try { \n \t3 ois . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void set <identifiersep> enabled ( boolean enabled ) { \n <ect>
\t4 wo <identifiersep> application . application ( ) . page <identifiersep> with <identifiersep> name ( name , context ( ) ) ; \n \t4  <identifiersep> page <identifiersep> wrapper <identifiersep> name = name ; \n \t3 } catch ( throwable e ) { \n \t4  <identifiersep> page <identifiersep> wrapper <identifiersep> name = <string_literal> ; \n <ect>
\t6 py <identifiersep> transform . append ( <string_literal> ) . append ( linebreak ) ; \n \t6 py <identifiersep> transform . append ( linebreak ) ; \n \t6 pw . print ( py <identifiersep> transform . to <identifiersep> string ( ) ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t2 { \n \t3 <comment> \n \t3 <comment> \n \t3 string x = txn . get <identifiersep> base <identifiersep> dataset ( ) . get <identifiersep> location ( ) . get <identifiersep> directory <identifiersep> path ( ) ; \n <ect>
public er . rest . model . company company ( ) { \n \t1 return ( er . rest . model . company ) stored <identifiersep> value <identifiersep> for <identifiersep> key ( <string_literal> ) ; } \n public void set <identifiersep> company <identifiersep> relationship ( er . rest . model . company value ) { \n <ect>
\t6 if ( abort <identifiersep> after <identifiersep> timeout ) { \n \t7 log . warn ( <string_literal> ) ; \n \t7 return ; \n \t6 } else { \n <ect>
\t4 public void handle ( file store <identifiersep> dir , page <identifiersep> cache page <identifiersep> cache , log <identifiersep> service log <identifiersep> service ) throws io <identifiersep> exception \n \t4 { \n \t5 log msg <identifiersep> log = log <identifiersep> service . get <identifiersep> internal <identifiersep> log ( get <identifiersep> class ( ) ) ; \n \t5 file branched <identifiersep> data <identifiersep> dir = new <identifiersep> branched <identifiersep> data <identifiersep> dir ( store <identifiersep> dir ) ; \n <ect>
\t3 try { \n \t4 if ( retry > 0 ) { \n \t5 s <identifiersep> logger . info ( <string_literal> + retry + <string_literal> ) ; \n \t5 thread . sleep ( <number_literal> ) ; } \n <ect>
\t2 mock <identifiersep> bar . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 mock . assert <identifiersep> is <identifiersep> satisfied ( <number_literal> ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , context . get <identifiersep> route <identifiersep> status ( <string_literal> ) . name ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , context . get <identifiersep> route <identifiersep> status ( <string_literal> ) . name ( ) ) ; \n <ect>
\t7 long idle <identifiersep> time = current <identifiersep> ticks - last <identifiersep> received <identifiersep> message <identifiersep> ticks ; \n \t7 if ( idle <identifiersep> time >= consumer . get <identifiersep> configuration ( ) . get <identifiersep> idle <identifiersep> timeout ( ) ) { \n \t8 string reset <identifiersep> message = string . format ( <string_literal> , idle <identifiersep> time , consumer . get <identifiersep> configuration ( ) . get <identifiersep> idle <identifiersep> timeout ( ) ) ; \n \t8 mllp <identifiersep> buffer . reset <identifiersep> socket ( client <identifiersep> socket , reset <identifiersep> message ) ; } } \n <ect>
\t4 resp . set <identifiersep> zone <identifiersep> name ( vol . get <identifiersep> zone <identifiersep> name ( ) ) ; \n \t4 return resp ; } \n \t3 return null ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> + queue . get <identifiersep> name ( ) ) ; } \n \t3 queue . remove ( offered <identifiersep> value ) ; } } } } \n <ect>
\t2 message <identifiersep> consumer consumer = consumer <identifiersep> session . create <identifiersep> consumer ( destination ) ; \n \t2 while ( consumer . receive ( message <identifiersep> receive <identifiersep> timeout ) != null ) { \n \t3 messages <identifiersep> consumed . increment <identifiersep> and <identifiersep> get ( ) ; \n \t3 if ( messages <identifiersep> consumed . get ( ) % <number_literal> == 0 ) { \n <ect>
@ override \n public void signal ( server <identifiersep> type server , string hostname , string signal ) throws io <identifiersep> exception { \n \t1 string pid = get <identifiersep> pid ( server , accumulo <identifiersep> home , hostname ) ; \n \t1 if ( pid . trim ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t5 assert <identifiersep> results <identifiersep> and <identifiersep> log <identifiersep> on <identifiersep> failure ( expected <identifiersep> results , search <identifiersep> response ) ; } \n \t4 <comment> \n \t4 search <identifiersep> response = client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> types ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) \n \t5 . set <identifiersep> size ( num <identifiersep> created + num <identifiersep> initial <identifiersep> docs ) . add <identifiersep> sort ( <string_literal> , sort <identifiersep> order . asc ) . get ( ) ; \n <ect>
\t1 int exit <identifiersep> code ; \n \t1 try { \n \t1 exit <identifiersep> code = p . wait <identifiersep> for ( ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 } catch ( final io <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> iso + <string_literal> +  <identifiersep> host , e ) ; \n \t3 return false ; \n \t2 } catch ( final xml <identifiersep> rpc <identifiersep> exception e ) { \n <ect>
\t2 answer answer = cmds . get <identifiersep> answer ( <string_literal> ) ; \n \t2 if ( answer != null && answer instanceof check <identifiersep> ssh <identifiersep> answer ) { \n \t3 check <identifiersep> ssh <identifiersep> answer ssh <identifiersep> answer = ( check <identifiersep> ssh <identifiersep> answer ) answer ; \n \t3 if ( ssh <identifiersep> answer == null || ! ssh <identifiersep> answer . get <identifiersep> result ( ) ) { \n <ect>
\t3 teardown <identifiersep> task <identifiersep> errors ( topology <identifiersep> id ) ; \n \t3 delete <identifiersep> object ( cluster . metric <identifiersep> path ( topology <identifiersep> id ) ) ; \n \t3 delete <identifiersep> object ( cluster . gray <identifiersep> upgrade <identifiersep> base <identifiersep> path ( topology <identifiersep> id ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 private static void log <identifiersep> deprecation ( ) { \n \t2 if ( ! logged <identifiersep> deprecation ) { \n \t3 <comment> \n \t3 logged <identifiersep> deprecation = true ; \n <ect>
\t1 case internal <identifiersep> error : \n \t2 log . debug ( <string_literal> ) ; \n \t2 throw new internal <identifiersep> error <identifiersep> exception ( request . get <identifiersep> bucket ( ) ) ; \n \t1 case not <identifiersep> found : \n <ect>
\t3 { \n \t4 <comment> \n \t4 <comment> \n \t4 <comment> \n <ect>
\t1 file tmp = session <identifiersep> state . get <identifiersep> tmp <identifiersep> output <identifiersep> file ( ) ; \n \t1 try { \n \t2 result <identifiersep> reader = new buffered <identifiersep> reader ( new file <identifiersep> reader ( tmp ) ) ; \n \t1 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t4 return manifest ( input <identifiersep> stream ) } \n \t3 finally { \n \t4 input <identifiersep> stream . close ( ) } } \n \t2 catch ( ignored : io <identifiersep> exception ) { \n <ect>
\t3 } else { \n \t4 try { \n \t5 hdfs <identifiersep> bytes <identifiersep> written = job <identifiersep> stats . get <identifiersep> output <identifiersep> size ( sto , conf ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 if os . path . isdir ( path ) : \n \t4 try : \n \t4 shutil . rmtree ( path ) \n \t4 except : \n <ect>
\t3 try { \n \t4 lock . release ( ) ; \n \t4 return true ; \n \t3 } catch ( final exception e ) { \n <ect>
\t6 logger . minor ( this , <string_literal> + job + <string_literal> + ( end - start ) + <string_literal> ) ; } \n \t5 if ( statistics != null ) { \n \t6 statistics . report <identifiersep> database <identifiersep> job ( job . to <identifiersep> string ( ) , end - start ) ; } \n \t4 } catch ( throwable t ) { \n <ect>
\t3 if ( bstrp == null ) { \n \t4 log . error ( <string_literal> ) ; \n \t3 } else { \n \t4 log . error ( <string_literal> ) ; \n <ect>
\t4 logger . warn ( <string_literal> , new object [ ] { address , t . get <identifiersep> message ( ) } ) ; } \n \t2 } else if ( <string_literal> . equals ( status ) ) { \n \t3 if ( count < <number_literal> ) { \n \t4 count ++ ; \n <ect>
\t2 logger . debug ( <string_literal> , row <identifiersep> id , item <identifiersep> name ) ; \n \t2 table <identifiersep> name = get <identifiersep> table <identifiersep> name ( row <identifiersep> id , item <identifiersep> name ) ; \n \t2 <comment> \n \t2 if ( table <identifiersep> name == null ) { \n <ect>
\t1 @ bean \n \t1 public embedded <identifiersep> servlet <identifiersep> container <identifiersep> customizer container <identifiersep> customizer ( ) { \n \t2 return container - > { \n \t3 try ( server <identifiersep> socket socket = new server <identifiersep> socket ( 0 ) ) { \n <ect>
\t1 private boolean set <identifiersep> id <identifiersep> generator ( application <identifiersep> context context ) { \n \t2 try { \n \t3 id <identifiersep> generator id <identifiersep> generator <identifiersep> bean = context . get <identifiersep> bean ( id <identifiersep> generator . class ) ; \n <ect>
\t2 logging <identifiersep> connection <identifiersep> listener ( ) { \n \t3 super ( ) ; } \n \t2 @ override \n \t2 public void reconnection <identifiersep> successful ( ) { \n <ect>
\t3 } else if ( data instanceof simple <identifiersep> case ) { \n \t4 property <identifiersep> utils . set <identifiersep> property ( bean , <string_literal> , ( ( simple <identifiersep> case ) data ) . get <identifiersep> id ( ) ) ; \n \t4 item <identifiersep> field . set <identifiersep> value ( ( ( simple <identifiersep> case ) data ) . get <identifiersep> subject ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 { \n \t2 store <identifiersep> maker f = registry . get ( db <identifiersep> type , layout <identifiersep> type ) ; \n \t2 if ( f == null ) \n \t2 { \n <ect>
\t2 event <identifiersep> list . add ( event ) ; \n \t2 log . info ( <string_literal> + event ) ; } \n \t1 public void read ( @ observes @ events <identifiersep> read ( context = <string_literal> ) string event ) { \n \t2 event <identifiersep> list . add ( event ) ; \n <ect>
\t2 this . task = context . get <identifiersep> this <identifiersep> task <identifiersep> index ( ) ; \n \t2 this . metric <identifiersep> client = new metric <identifiersep> client ( context ) ; \n \t2 this . emit <identifiersep> counter = metric <identifiersep> client . register <identifiersep> counter ( in <identifiersep> order <identifiersep> test <identifiersep> metrics <identifiersep> def . metric <identifiersep> spout <identifiersep> emit ) ; \n \t2 this . emit <identifiersep> counter . set <identifiersep> op ( asm <identifiersep> metric . metric <identifiersep> op . log & asm <identifiersep> metric . metric <identifiersep> op . report ) ; \n <ect>
\t4 log . error ( <string_literal> ) ; \n \t3 } else { \n \t4 idp = idp <identifiersep> manager . get <identifiersep> provider ( idp <identifiersep> name ) ; \n \t4 if ( idp == null ) { \n <ect>
\t2 system . set <identifiersep> out ( pout ) ; \n \t2 try { \n \t3 log . debug ( <string_literal> + <string_literal> ) ; \n \t3 log . info ( <string_literal> + <string_literal> ) ; \n <ect>
\t1 dp <identifiersep> part <identifiersep> specs = ( collection < partition > ) feed <identifiersep> value ; } } \n public static executor <identifiersep> service new <identifiersep> thread <identifiersep> pool ( hive <identifiersep> conf conf ) { \n \t1 int num <identifiersep> threads = hive <identifiersep> conf . get <identifiersep> int <identifiersep> var ( conf , conf <identifiersep> vars . hive <identifiersep> stats <identifiersep> gather <identifiersep> num <identifiersep> threads ) ; \n \t1 executor <identifiersep> service executor = executors . new <identifiersep> fixed <identifiersep> thread <identifiersep> pool ( num <identifiersep> threads , new thread <identifiersep> factory <identifiersep> builder ( ) . set <identifiersep> daemon ( true ) . set <identifiersep> name <identifiersep> format ( <string_literal> ) . build ( ) ) ; \n <ect>
\t5  <identifiersep> lb2healthcheck <identifiersep> dao . persist ( health <identifiersep> check <identifiersep> policy ) ; \n \t5 load <identifiersep> balancer . set <identifiersep> state ( backup <identifiersep> state ) ; \n \t5  <identifiersep> lb <identifiersep> dao . persist ( load <identifiersep> balancer ) ; \n \t5 s <identifiersep> logger . debug ( <string_literal> + load <identifiersep> balancer . get <identifiersep> id ( ) + <string_literal> + health <identifiersep> check <identifiersep> policy <identifiersep> id ) ; } \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 try { \n \t4 thread . sleep ( <number_literal> ) ; \n \t3 } catch ( final interrupted <identifiersep> exception e ) { \n <ect>
\t6 result = create <identifiersep> node ( context ) ; \n \t5 } catch ( exception e ) { \n \t6 log . error ( format ( <string_literal> , node ) , e ) ; } \n \t5 if ( result == null || ! result . is <identifiersep> ok ( ) ) { \n <ect>
\t2 initialize ( exchange ) ; \n \t2 string text = evaluate <identifiersep> as <identifiersep> string ( exchange ) ; \n \t2 return new string <identifiersep> source ( text ) ; } \n \t1 public object evaluate <identifiersep> as <identifiersep> bytes <identifiersep> source ( exchange exchange ) throws exception { \n <ect>
\t3 log . warn ( <string_literal> ) ; } } \n \t1 public void process <identifiersep> dialog <identifiersep> terminated ( dialog <identifiersep> terminated <identifiersep> event dialog <identifiersep> terminated <identifiersep> event ) { \n <ect>
\t4 try { \n \t5 use <identifiersep> connection ( connection2 ) ; \n \t5 fail ( <string_literal> + i ) ; \n \t4 } catch ( invalid <identifiersep> client <identifiersep> id <identifiersep> exception e ) { \n <ect>
\t3 if ( gz != null ) { \n \t4 try { \n \t5 gz . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 tx . commit ( ) ; \n \t1 } catch ( throwable t ) { \n \t2 tx . rollback ( ) ; \n \t2 if ( t instanceof error ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t1 long start <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 cache . start ( ) ; \n \t1 long duration = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n <ect>
\t3 } catch ( already <identifiersep> closed <identifiersep> exception ex ) { \n \t4 <comment> \n \t4 <comment> \n \t3 } catch ( io <identifiersep> exception ex ) { <comment> \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t1 for ( upgrade <identifiersep> group <identifiersep> holder group : groups ) { \n \t2 log . debug ( group . name ) ; \n \t2 int i = 0 ; \n \t2 for ( stage <identifiersep> wrapper proxy : group . items ) { \n <ect>
<number_literal> descriptor . cfname , \n <number_literal> file <identifiersep> index <identifiersep> generator . increment <identifiersep> and <identifiersep> get ( ) , \n <number_literal> descriptor . type . final ) ; } \n \t3 while ( new file ( new <identifiersep> descriptor . filename <identifiersep> for ( component . data ) ) . exists ( ) ) ; \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> blank ( this . spnego <identifiersep> attribute <identifiersep> name ) ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( this . connection <identifiersep> factory == null ) { \n <ect>
\t5 base <identifiersep> property property = ( base <identifiersep> property ) object . get ( property <identifiersep> name ) ; \n \t5 if ( property != null ) { \n \t6 value = property . get <identifiersep> value ( ) ; } } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 node node = new mock <identifiersep> node ( environment , plugins ) ; \n \t2 abstract <identifiersep> client client = ( abstract <identifiersep> client ) node . client ( ) ; \n \t2 nodes . put ( id , node ) ; \n \t2 clients . put ( id , client ) ; \n <ect>
\t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } else { \n <ect>
\t2 log . info ( <string_literal> \n \t3 + arrays . as <identifiersep> list ( ( ( url <identifiersep> class <identifiersep> loader ) thread . current <identifiersep> thread ( ) \n \t3 . get <identifiersep> context <identifiersep> class <identifiersep> loader ( ) ) . get <identifiersep> ur <identifiersep> ls ( ) ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 for ( string item <identifiersep> name : provider . get <identifiersep> item <identifiersep> names ( ) ) { \n \t4 isy <identifiersep> binding <identifiersep> config config = provider . get <identifiersep> binding <identifiersep> config <identifiersep> from <identifiersep> item <identifiersep> name ( item <identifiersep> name ) ; \n \t4 update <identifiersep> status ( item <identifiersep> name , config ) ; } } } \n \t1 private void update <identifiersep> status ( final string item <identifiersep> name , final isy <identifiersep> binding <identifiersep> config config ) { \n <ect>
\t7 throw new resource <identifiersep> unavailable <identifiersep> exception ( err <identifiersep> msg , this . get <identifiersep> class ( ) , 0 ) ; } } \n \t5 return true ; } } \n \t3 return true ; \n \t2 } catch ( exception e ) { \n <ect>
\t9 } catch ( interrupted <identifiersep> exception ex ) { } } } \n \t7 if ( transport <identifiersep> listener != null ) { \n \t8 transport <identifiersep> listener . transport <identifiersep> resumed ( ) ; \n \t7 } else { \n <ect>
\t1 @ inject \n \t1 private logger log ; \n \t1 @ around <identifiersep> invoke \n \t1 public object intercept ( invocation <identifiersep> context ctx ) throws exception { \n <ect>
\t2 } catch ( address <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return false ; } \n \t2 try { \n <ect>
\t1 public optional < user > get <identifiersep> user ( @ nonnull string session <identifiersep> id ) { \n \t2 session session = sessions . get ( session <identifiersep> id ) ; \n \t2 if ( session != null ) { \n \t3 return user <identifiersep> manager . instance . get <identifiersep> user ( sessions . get ( session <identifiersep> id ) . get <identifiersep> user <identifiersep> id ( ) ) ; } \n <ect>
\t3 <comment> \n \t2 } else if ( cmd instanceof get <identifiersep> storage <identifiersep> stats <identifiersep> command ) { \n \t3 return execute ( ( get <identifiersep> storage <identifiersep> stats <identifiersep> command ) cmd ) ; \n \t2 } else if ( cmd instanceof primary <identifiersep> storage <identifiersep> download <identifiersep> command ) { \n <ect>
\t6 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t7 log . warn ( <string_literal> , command . get <identifiersep> target ( ) ) ; \n \t7 throw new selenium <identifiersep> exception ( e ) ; \n \t6 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 this . request <identifiersep> transformer = new generic <identifiersep> request <identifiersep> transformer ( ) ; \n \t2 this . item <identifiersep> command <identifiersep> processor = new item <identifiersep> command <identifiersep> processor < t > ( event <identifiersep> publisher ) ; \n \t2 this . item <identifiersep> state <identifiersep> request <identifiersep> processor = new item <identifiersep> state <identifiersep> request <identifiersep> processor ( ) ; } \n \t1 public void process <identifiersep> received <identifiersep> messages ( set < object > messages ) throws transform <identifiersep> exception , service <identifiersep> exception { \n <ect>
\t3 if ( password != null ) { \n \t4  <identifiersep> zk . add <identifiersep> auth <identifiersep> info ( <string_literal> , ( <string_literal> + password ) . get <identifiersep> bytes ( <string_literal> ) ) ; } } } \n \t1 public void process ( watched <identifiersep> event event ) { \n \t2 if ( event . get <identifiersep> state ( ) != null ) { \n <ect>
this function will obtain the kerberos ticket if security is enabled . \n : return : \n ''' \n import params \n <ect>
\t2 if ( file <identifiersep> out != null ) { \n \t3 try { \n \t3 file <identifiersep> out . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 log . warn ( <string_literal> + name ) ; \n \t6 continue ; } \n \t5 class < ? > [ ] parameter <identifiersep> types = write <identifiersep> method . get <identifiersep> parameter <identifiersep> types ( ) ; \n \t5 if ( parameter <identifiersep> types . length == 0 || ! parameter <identifiersep> types [ 0 ] . equals ( string . class ) ) { \n <ect>
\t4 { \n \t5 method = clz . get <identifiersep> method ( is + name , ( class [ ] ) null ) ; } \n \t4 catch ( exception e ) \n \t4 { \n <ect>
\t2 response response = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) \n \t4 . header ( <string_literal> , <string_literal> ) . get ( ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> partial <identifiersep> content , response . get <identifiersep> status ( ) ) ; \n \t2 assert . assert <identifiersep> equals ( <string_literal> , <number_literal> , response . get <identifiersep> length ( ) ) ; \n <ect>
\t3 try { \n \t4 log . info ( <string_literal> + closeable . to <identifiersep> string ( ) ) ; \n \t4 closeable . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . error ( this , <string_literal> + e , e ) ; \n \t3 on <identifiersep> failure ( new fetch <identifiersep> exception ( fetch <identifiersep> exception <identifiersep> mode . internal <identifiersep> error , e ) , state , context ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t7 s <identifiersep> message <identifiersep> processing ( ( s <identifiersep> message ) message ) ; \n \t7 cont = false ; \n \t6 } else if ( message . get <identifiersep> type ( ) == message <identifiersep> type . l ) { \n \t7 ( ( l <identifiersep> message ) message ) . update <identifiersep> devices ( devices , configurations ) ; \n <ect>
\t1 public void test <identifiersep> ended ( string host ) { \n \t2 for ( map . entry < string , dir <identifiersep> context > entry : ldap <identifiersep> contexts . entry <identifiersep> set ( ) ) { \n \t3 dir <identifiersep> context dc = entry . get <identifiersep> value ( ) ; \n \t3 try { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( shard <identifiersep> routing <identifiersep> state . started ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( <string_literal> ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( <string_literal> ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( <string_literal> ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n <ect>
\t3 minutes = integer . parse <identifiersep> int ( matcher . group ( <number_literal> ) , <number_literal> ) ; \n \t3 seconds = integer . parse <identifiersep> int ( matcher . group ( <number_literal> ) , <number_literal> ) ; \n \t3 weekday = integer . parse <identifiersep> int ( matcher . group ( <number_literal> ) , <number_literal> ) ; \n \t2 } else { \n <ect>
\t2 refresh <identifiersep> response refresh <identifiersep> response = client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> refresh ( ) . execute ( ) . action <identifiersep> get ( ) ; \n \t2 assert <identifiersep> that ( refresh <identifiersep> response . get <identifiersep> failed <identifiersep> shards ( ) , equal <identifiersep> to ( 0 ) ) ; \n \t2 search <identifiersep> response response = client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> size ( 0 ) . execute ( ) . action <identifiersep> get ( ) ; \n \t2 assert <identifiersep> that ( response . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( ( long ) rec <identifiersep> count ) ) ; \n <ect>
\t1 select <identifiersep> operator sel <identifiersep> op = ( select <identifiersep> operator ) operator <identifiersep> factory . get <identifiersep> and <identifiersep> make <identifiersep> child ( sd , new row <identifiersep> schema ( \n \t2 col <identifiersep> info <identifiersep> v <identifiersep> col <identifiersep> pair . get <identifiersep> key ( ) ) , input <identifiersep> op <identifiersep> af . inputs . get ( 0 ) ) ; \n \t1 sel <identifiersep> op . set <identifiersep> column <identifiersep> expr <identifiersep> map ( col <identifiersep> expr <identifiersep> map ) ; \n <ect>
\t2 } else if ( simple <identifiersep> class . get <identifiersep> annotation ( broadcast <identifiersep> event . class ) != null ) { \n \t3 network <identifiersep> event <identifiersep> type = network <identifiersep> event <identifiersep> type . broadcast ; \n \t3 skip <identifiersep> instigator = simple <identifiersep> class . get <identifiersep> annotation ( broadcast <identifiersep> event . class ) . skip <identifiersep> instigator ( ) ; } \n \t2 if ( network <identifiersep> event <identifiersep> type != network <identifiersep> event <identifiersep> type . none && ! is <identifiersep> constructable ( ) && ! modifier . is <identifiersep> abstract ( simple <identifiersep> class . get <identifiersep> modifiers ( ) ) ) { \n <ect>
\t1 @ override \n \t1 public void put ( k key , versioned < v > value , t transform ) throws voldemort <identifiersep> exception { \n \t2 if ( fail ) { \n <ect>
\t1 try { \n \t1 hdfs <identifiersep> admin hdfs <identifiersep> admin = new hdfs <identifiersep> admin ( fs <identifiersep> uri , conf ) ; \n \t1 return ( hdfs <identifiersep> admin . get <identifiersep> encryption <identifiersep> zone <identifiersep> for <identifiersep> path ( full <identifiersep> path ) != null ) ; \n \t1 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception fnfe ) { \n <ect>
\t2 <comment> \n \t2 if ( session <identifiersep> id == null ) { \n \t3 <comment> \n \t3 session <identifiersep> id = java . util . uuid . random <identifiersep> uuid ( ) . to <identifiersep> string ( ) ; \n <ect>
\t2 if ( do <identifiersep> rejected <identifiersep> attributes <identifiersep> refuse <identifiersep> principal <identifiersep> access ( principal <identifiersep> attributes ) ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( ! do <identifiersep> required <identifiersep> attributes <identifiersep> allow <identifiersep> principal <identifiersep> access ( principal <identifiersep> attributes , this . required <identifiersep> attributes ) ) { \n <ect>
\t4 break ; \n \t3 case transaction <identifiersep> commit : \n \t4 long success <identifiersep> batch <identifiersep> id = ( long ) event . get <identifiersep> event <identifiersep> value ( ) . get ( 0 ) ; \n \t4 remove <identifiersep> success <identifiersep> batch ( success <identifiersep> batch <identifiersep> id ) ; \n <ect>
\t4 final double [ ] original <identifiersep> likelihoods = g . get <identifiersep> likelihoods ( ) . get <identifiersep> as <identifiersep> vector ( ) ; \n \t4 if ( likelihood <identifiersep> indexes <identifiersep> to <identifiersep> use == null ) { \n \t5 new <identifiersep> likelihoods = original <identifiersep> likelihoods ; \n \t4 } else if ( original <identifiersep> likelihoods . length != expected <identifiersep> num <identifiersep> likelihoods ) { \n <ect>
\t5 ) ) ; \n \t3 values <identifiersep> count <identifiersep> read <identifiersep> so <identifiersep> far += data <identifiersep> header <identifiersep> v2 . get <identifiersep> num <identifiersep> values ( ) ; \n \t3 break ; \n \t2 default : \n <ect>
\t3 string content <identifiersep> type = <string_literal> ; \n \t3 try { \n \t4 content <identifiersep> type = msg . get <identifiersep> content <identifiersep> type ( ) ; } \n \t3 catch ( javax . mail . messaging <identifiersep> exception x ) { \n <ect>
\t2 return new answer ( cmd ) ; } \n \t1 @ override \n \t1 public boolean configure ( string name , map < string , object > params ) throws configuration <identifiersep> exception { \n \t2 if ( ! super . configure ( name , params ) ) { \n <ect>
\t5 <comment> \n \t5 logger . trace ( <string_literal> , shard <identifiersep> id , snapshot <identifiersep> id ) ; \n \t5 recovery <identifiersep> target <identifiersep> metadata = store . metadata <identifiersep> snapshot . empty ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 send <identifiersep> status <identifiersep> fail <identifiersep> count . inc ( ) ; } } \n \t3 try { \n \t4 thread . sleep ( send <identifiersep> status <identifiersep> retry <identifiersep> delay ) ; \n \t3 } catch ( interrupted <identifiersep> exception ie ) { \n <ect>
\t3 jmx <identifiersep> server . unregister <identifiersep> m <identifiersep> bean ( new object <identifiersep> name ( this . get <identifiersep> m <identifiersep> bean <identifiersep> name ( ) ) ) ; \n \t2 } catch ( instance <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 <comment> \n \t2 } catch ( exception e ) { \n <ect>
\t3 for ( string n : template . template <identifiersep> names ) { \n \t4 copy <identifiersep> file <identifiersep> if <identifiersep> missing ( null , n , fuseki <identifiersep> base ) ; } \n \t3 server <identifiersep> initialized = true ; \n \t2 } catch ( runtime <identifiersep> exception ex ) { \n <ect>
\t2 if ( collection <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( possible <identifiersep> entry <identifiersep> points ) ) { \n \t3 return possible <identifiersep> entry <identifiersep> points ; } \n \t2 final int number <identifiersep> of <identifiersep> parts = path <identifiersep> helper . get <identifiersep> parts ( path ) . length ; \n \t2 if ( number <identifiersep> of <identifiersep> parts > 0 ) { \n <ect>
\t3 messages <identifiersep> ids . remove ( cache . get <identifiersep> id ( ) ) ; } \n \t2 return this ; } \n \t1 @ override \n \t1 public broadcaster <identifiersep> cache exclude <identifiersep> from <identifiersep> cache ( string broadcaster <identifiersep> id , atmosphere <identifiersep> resource r ) { \n <ect>
\t2 config ams <identifiersep> ssl <identifiersep> client = cluster . get <identifiersep> desired <identifiersep> config <identifiersep> by <identifiersep> type ( ams <identifiersep> ssl <identifiersep> client ) ; \n \t2 if ( ams <identifiersep> ssl <identifiersep> client != null ) { \n \t3 map < string , string > ams <identifiersep> ssl <identifiersep> client <identifiersep> properties = ams <identifiersep> ssl <identifiersep> client . get <identifiersep> properties ( ) ; \n \t3 if ( ams <identifiersep> ssl <identifiersep> client <identifiersep> properties . contains <identifiersep> key ( metric <identifiersep> truststore <identifiersep> alias ) ) { \n <ect>
\t3 if ( null == vfs ) \n \t4 return volumes ; \n \t3 else return vfs . evaluate ( volumes ) ; \t1 \n \t2 } catch ( exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , err <identifiersep> reconnect <identifiersep> threshold ) ; } \n \t2 string np = ( string ) configuration . get ( <string_literal> ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( np ) ) { \n \t3 table <identifiersep> name <identifiersep> prefix = np ; \n <ect>
\t2 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 return new copy <identifiersep> cmd <identifiersep> answer ( <string_literal> + e . to <identifiersep> string ( ) ) ; \n \t2 } catch ( final xml <identifiersep> rpc <identifiersep> exception e ) { \n <ect>
\t3 response response = client . target ( generate <identifiersep> url ( <string_literal> , url <identifiersep> prefix + ext ) ) . request ( ) \n \t5 . post ( entity . entity ( external <identifiersep> map , <string_literal> ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n \t3 int len = math . min ( entity . length ( ) , <number_literal> ) ; \n <ect>
\t3 fetcher <identifiersep> pool . shutdown <identifiersep> now ( ) ; <comment> \n \t3 fetcher <identifiersep> pool . await <identifiersep> termination ( 1 , time <identifiersep> unit . minutes ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t4 throw new permanent <identifiersep> backend <identifiersep> exception ( <string_literal> + query . get <identifiersep> slice <identifiersep> start ( ) + \n \t6 <string_literal> + query . get <identifiersep> slice <identifiersep> end ( ) + <string_literal> + \n \t6 <string_literal> ) ; } \n \t3 if ( 0 != query . get <identifiersep> slice <identifiersep> start ( ) . length ( ) && 0 != query . get <identifiersep> slice <identifiersep> end ( ) . length ( ) ) { \n <ect>
<comment> \n \t1 public void check ( update <identifiersep> type type , string id ) { \n \t2 if ( is <identifiersep> check <identifiersep> in <identifiersep> progress ( type , id ) ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 try { \n \t4 cron <identifiersep> field seconds = parse <identifiersep> field ( seconds <identifiersep> field , 0 , <number_literal> ) ; \n \t4 cron <identifiersep> entry . set <identifiersep> seconds ( seconds ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t4 if ( m . get <identifiersep> voiced ( state ) ) \n \t5 lf0frame += dur ; } } \n \t2 <comment> \n \t2 <comment> \n <ect>
\t2 class c = class . for <identifiersep> name ( format <identifiersep> type ) ; \n \t2 if ( c != null && sequence <identifiersep> file <identifiersep> serializer . builder . class . is <identifiersep> assignable <identifiersep> from ( c ) ) { \n \t2 builder <identifiersep> class = ( class < ? extends sequence <identifiersep> file <identifiersep> serializer . builder > ) c ; \n \t2 } else { \n <ect>
\t2 if ( data <identifiersep> source <identifiersep> class <identifiersep> name != null ) { \n \t3 logger . warn ( <string_literal> , pool <identifiersep> name ) ; } } \n \t1 else if ( data <identifiersep> source <identifiersep> class <identifiersep> name != null ) { \n \t2 if ( driver <identifiersep> class <identifiersep> name != null ) { \n <ect>
\t2 if ( previous <identifiersep> box != null ) { \n \t3 try { \n \t4 previous <identifiersep> box . box . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 output <identifiersep> buffer = byte <identifiersep> buffer . allocate ( tcp <identifiersep> command <identifiersep> name . get <identifiersep> bytes ( charset ) . length ) ; \n \t4 output <identifiersep> buffer . put ( tcp <identifiersep> command <identifiersep> name . get <identifiersep> bytes ( charset ) ) ; \n \t3 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t2 record <identifiersep> reader <identifiersep> time ( start <identifiersep> time ) ; \n \t2 llap <identifiersep> io <identifiersep> impl . log . trace ( <string_literal> , split ) ; } \n \t1 } catch ( throwable e ) { \n <ect>
\t2 } else { \n \t3 string property <identifiersep> key = d2w <identifiersep> context ( ) . property <identifiersep> key ( ) ; \n \t3 boolean contains = key <identifiersep> paths <identifiersep> with <identifiersep> validation <identifiersep> exceptions ( ) . contains <identifiersep> object ( property <identifiersep> key ) ; \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> refresh <identifiersep> volume ( ) { \n <ect>
\t3 final file temp <identifiersep> file = file . create <identifiersep> temp <identifiersep> file ( <string_literal> , <string_literal> ) ; \n \t3 temp <identifiersep> file . delete <identifiersep> on <identifiersep> exit ( ) ; \n \t3 logger . debug ( <string_literal> , this , temp <identifiersep> file ) ; \n \t3 connection . get <identifiersep> ssh <identifiersep> client ( ) . new <identifiersep> scp <identifiersep> file <identifiersep> transfer ( ) . download ( get <identifiersep> path ( ) , temp <identifiersep> file . get <identifiersep> path ( ) ) ; \n <ect>
\t4 sent = true ; } \n \t3 catch ( throwable error <identifiersep> delivery <identifiersep> error ) { <comment> \n \t4 <comment> \n <ect>
\t1 code , output , error = shell . call ( stop <identifiersep> cmd , user = params . hive <identifiersep> user , stderr = subprocess32 . pipe , logoutput = true ) \n \t1 if code == 0 : \n \t2 logger . info ( format ( <string_literal> ) ) \n \t1 elif code == <number_literal> and output is not none and <string_literal> in output : \n <ect>
\t3 throws transport <identifiersep> exception { \n \t2 switch ( expected ) { \n \t3 case kexinit : \n \t4 ensure <identifiersep> received <identifiersep> matches <identifiersep> expected ( msg , message . kexinit ) ; \n <ect>
\t3 } catch ( exception e ) { \n \t5 log . trace ( <string_literal> , e ) ; \n \t4 } else { \n <ect>
\t2 return new titan <identifiersep> h1output <identifiersep> committer ( this ) ; } \n \t1 void commit ( task <identifiersep> attempt <identifiersep> id id ) { \n \t2 standard <identifiersep> titan <identifiersep> tx tx = transactions . remove ( id ) ; \n \t2 if ( null == tx ) { \n <ect>
<comment> \n public static add <identifiersep> path <identifiersep> return <identifiersep> status add <identifiersep> path ( file <identifiersep> system fs , string path <identifiersep> pattern , long size <identifiersep> left , int file <identifiersep> limit , \n \t1 collection < path > ret <identifiersep> path <identifiersep> list ) \n \t1 throws io <identifiersep> exception { \n <ect>
\t4 title <identifiersep> from <identifiersep> database = pms . get ( ) . get <identifiersep> similar <identifiersep> tv <identifiersep> series <identifiersep> name ( title <identifiersep> from <identifiersep> filename ) ; \n \t4 title <identifiersep> from <identifiersep> database <identifiersep> simplified = pms . get ( ) . get <identifiersep> simplified <identifiersep> show <identifiersep> name ( title <identifiersep> from <identifiersep> database ) ; \n \t4 if ( over <identifiersep> the <identifiersep> top <identifiersep> logging ) { \n \t5 logger . info ( <string_literal> + title <identifiersep> from <identifiersep> database ) ; \n <ect>
\t1 if ( ! sig <identifiersep> valid ) { \n \t1 log . warn ( <string_literal> ) ; } \n \t1 boolean aud <identifiersep> valid = validate <identifiersep> audiences ( jwt <identifiersep> token ) ; \n \t1 if ( ! aud <identifiersep> valid ) { \n <ect>
\t2 } ) ; } \n \t1 @ override \n \t1 public void shutdown ( ) { \n \t2 try { \n <ect>
\t2 http <identifiersep> client http <identifiersep> client = new http <identifiersep> client ( ) ; \n \t2 http <identifiersep> client . start ( ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 string session <identifiersep> id = subscribe ( http <identifiersep> client , port , <string_literal> ) ; \n <ect>
\t3 try { \n \t4 cassandra = new cassandra <identifiersep> daemon ( ) ; \n \t4 cassandra . init ( null ) ; } \n \t3 catch ( io <identifiersep> exception e ) { \n <ect>
\t3 network . id \n \t2 ) ) \n \t2 return public <identifiersep> ip \n \t1 def create <identifiersep> natrule ( self , vpc , vm , public <identifiersep> port , private <identifiersep> port , public <identifiersep> ip , network , services = none ) : \n <ect>
\t2 finish <identifiersep> shutdown ( ) ; } \n \t2 @ override \n \t2 public void on <identifiersep> error ( throwable e ) \n \t2 { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + pstmt <identifiersep> update . to <identifiersep> string ( ) ) ; \n \t3 pstmt <identifiersep> update . execute <identifiersep> update ( ) ; \n \t3 pstmt <identifiersep> update . close ( ) ; \n \t3 if ( domain <identifiersep> id != null && domain <identifiersep> id . long <identifiersep> value ( ) != 0 ) { \n <ect>
\t2 did <identifiersep> finish <identifiersep> launching ( ) ; \n \t2 erx <identifiersep> stats . log <identifiersep> statistics <identifiersep> for <identifiersep> operation ( stats <identifiersep> log , <string_literal> ) ; \n \t2 <comment> \n \t2 if ( is <identifiersep> development <identifiersep> mode ( ) && ! auto <identifiersep> open <identifiersep> in <identifiersep> browser ( ) ) { \n <ect>
\t1 if ( string <identifiersep> utils . is <identifiersep> empty ( hdfs <identifiersep> out <identifiersep> dir ) ) { \n \t1 log . error ( <string_literal> ) ; \n \t1 return ; } \n \t1 if ( string <identifiersep> utils . is <identifiersep> empty ( hdfs <identifiersep> host ) ) { \n <ect>
\t1 if ( callables . size ( ) == 1 ) { \n \t1 final t result = callables . iterator ( ) . next ( ) . call ( ) ; \n \t1 on <identifiersep> result <identifiersep> available ( result ) ; \n \t1 } else { \n <ect>
\t8 log . warn ( <string_literal> , t ) ; } \n \t7 try { \n \t8 thread . sleep ( <number_literal> ) ; \n \t7 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 final string lock <identifiersep> file <identifiersep> path = lock <identifiersep> check . to <identifiersep> file ( al . cpu <identifiersep> id ( ) ) . get <identifiersep> absolute <identifiersep> path ( ) ; \n \t2 try { \n \t3 files . delete ( paths . get ( lock <identifiersep> file <identifiersep> path ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
\t2 <comment> \n \t2 if ( kylin <identifiersep> version . is <identifiersep> before200 ( cube <identifiersep> desc . get <identifiersep> version ( ) ) ) { \n \t3 is <identifiersep> use <identifiersep> put <identifiersep> row <identifiersep> key <identifiersep> to <identifiersep> hll <identifiersep> new <identifiersep> algorithm = false ; \n \t3 hf = hashing . murmur3 <identifiersep> <number_literal> ( ) ; \n <ect>
\t3 s <identifiersep> logger . error ( <string_literal> ) ; \n \t3 return null ; } \n \t2 implemented . set <identifiersep> broadcast <identifiersep> uri ( broadcast <identifiersep> domain <identifiersep> type . open <identifiersep> daylight . to <identifiersep> uri ( answer . get <identifiersep> network <identifiersep> uuid ( ) ) ) ; \n \t2 implemented . set <identifiersep> broadcast <identifiersep> domain <identifiersep> type ( broadcast <identifiersep> domain <identifiersep> type . open <identifiersep> daylight ) ; \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 long now = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 if ( now - start <identifiersep> time > <number_literal> ) { \n <ect>
\t5 remote <identifiersep> controller . send ( device <identifiersep> cmd , command . to <identifiersep> string ( ) ) ; \n \t4 } else { \n \t5 logger . warn ( <string_literal> , command ) ; } \n \t3 } else { \n <ect>
\t3 final table <identifiersep> description table <identifiersep> description ; \n \t3 try { \n \t4 table <identifiersep> description = db . get <identifiersep> dynamo <identifiersep> db ( ) . get <identifiersep> table ( table <identifiersep> name ) . wait <identifiersep> for <identifiersep> active ( ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t3 @ override \n \t3 public void on <identifiersep> new <identifiersep> state ( crawler <identifiersep> context context , state <identifiersep> vertex new <identifiersep> state ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t3 for ( metric <identifiersep> datum datum : transformer . to <identifiersep> metric <identifiersep> data ( type , request , response ) ) { \n \t4 try { \n \t5 if ( ! add <identifiersep> metrics <identifiersep> to <identifiersep> queue ( datum ) ) { \n <ect>
\t2 try : \n \t3 # clean up , terminate the created network offerings \n \t3 cleanup <identifiersep> resources ( self . apiclient , self . cleanup ) \n \t2 except exception as e : \n <ect>
\t2 try { \n \t3 while ( ! is <identifiersep> interrupted ( ) ) { \n \t4 final int hi = get <identifiersep> positive <identifiersep> interval ( ) ; \n \t4 if ( conn . get <identifiersep> transport ( ) . is <identifiersep> running ( ) ) { \n <ect>
\t4 mgr . destroy <identifiersep> socket <identifiersep> manager ( ) ; \n \t4 mgr = null ; \n \t4 socket = null ; \n \t3 } catch ( exception e ) { \n <ect>
<comment> \n \t1 public ipx800device <identifiersep> connector ( ipx800device <identifiersep> config config ) { \n \t2 this . config = config ; \n \t2 create <identifiersep> ports ( ) ; \n <ect>
\t2 for ( alignment <identifiersep> score a : alignment <identifiersep> scores ) { \n \t3 alternative <identifiersep> links . add ( a . get <identifiersep> link ( ) ) ; } \n \t2 return alternative <identifiersep> links ; \t2 } \n \t1 public void align ( ) { \n <ect>
\t5 source <identifiersep> crs = crs . decode ( srid , true ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> authority <identifiersep> code <identifiersep> exception e ) { \n \t5 logger . error ( <string_literal> , e ) ; \n \t4 } catch ( factory <identifiersep> exception e ) { \n <ect>
\t4 answer [ ] answers =  <identifiersep> agent <identifiersep> mgr . send ( host <identifiersep> id , cmds ) ; \n \t4 handle <identifiersep> setup <identifiersep> bridge <identifiersep> answer ( answers ) ; } \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t5 ( ( data <identifiersep> byte <identifiersep> array ) pig <identifiersep> prefix <identifiersep> cf <identifiersep> map . get ( <string_literal> ) ) . to <identifiersep> string ( ) ) ; \n \t3 assert . assert <identifiersep> equals ( 1 , pig <identifiersep> prefix <identifiersep> cf <identifiersep> map . size ( ) ) ; \n \t3 count ++ ; } \n \t2 assert . assert <identifiersep> equals ( test <identifiersep> row <identifiersep> count , count ) ; \n <ect>
\t3 string auth <identifiersep> string = base64 . encode ( ( connection . get <identifiersep> username ( ) + <string_literal> + connection . get <identifiersep> password ( ) ) . get <identifiersep> bytes ( ) ) ; \n \t3 parameters . put ( <string_literal> , <string_literal> + auth <identifiersep> string ) ; \n \t3 user user = post <identifiersep> document ( sign <identifiersep> in <identifiersep> url , parameters , user . class ) ; \n \t3 if ( user != null ) { \n <ect>
\t3 net . start <identifiersep> ovs <identifiersep> local <identifiersep> config ( control <identifiersep> iface ) ; \n \t3 <comment> \n \t3 int cont <identifiersep> count = 0 ; \n \t3 while ( net . get <identifiersep> interface <identifiersep> by <identifiersep> name ( control <identifiersep> iface ) == null ) { \n <ect>
\t1 <comment> \n \t1 return mpu <identifiersep> part <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . finalize <identifiersep> creation ( entity , last <identifiersep> modified , etag ) ; \n \t1 } catch ( exception e ) { \n \t1 <comment> \n <ect>
\t3 perf <identifiersep> logger . end ( start , <number_literal> , \n \t5 <string_literal> , \n \t5 before , after ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 @ after \n \t1 public void tear <identifiersep> down ( ) throws exception { } \n \t1 @ test \n \t1 public void test <identifiersep> injected ( ) throws exception { \n <ect>
\t4 logger . debug ( <string_literal> , contrast ) ; \n \t4 set <identifiersep> contrast ( contrast ) ; } \n \t3 if ( tf <identifiersep> config . e <identifiersep> is <identifiersep> set ( tf <identifiersep> config . e <identifiersep> class ( ) . get <identifiersep> e <identifiersep> structural <identifiersep> feature ( <string_literal> ) ) ) { \n \t4 boolean invert = tf <identifiersep> config . is <identifiersep> invert ( ) ; \n <ect>
\t5 logger . info ( <string_literal> + this ) ; } } \n \t3 this . running = false ; } \n \t2 catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public final list < input <identifiersep> split > get <identifiersep> splits ( job <identifiersep> context job ) throws io <identifiersep> exception { \n \t2 if ( debug && file <identifiersep> input <identifiersep> format . get <identifiersep> input <identifiersep> dir <identifiersep> recursive ( job ) ) { \n <ect>
\t5 public void handle <identifiersep> exception ( transport <identifiersep> exception exp ) { \n \t6 if ( is <identifiersep> master <identifiersep> channel <identifiersep> exception ( exp ) ) { \n \t7 wait <identifiersep> for <identifiersep> new <identifiersep> master <identifiersep> and <identifiersep> retry ( action <identifiersep> name , observer , request , listener , change <identifiersep> predicate ) ; \n \t6 } else { \n <ect>
\t5 new <identifiersep> vol . set <identifiersep> path ( vdi . get <identifiersep> uuid ( connection ) ) ; \n \t5 new <identifiersep> vol . set <identifiersep> id ( vol . get <identifiersep> id ( ) ) ; \n \t5 volume <identifiersep> to <identifiersep> list . add ( new <identifiersep> vol ) ; } } \n \t2 } catch ( final exception e ) { \n <ect>
\t4 connection <identifiersep> map . put ( client <identifiersep> key , viewer ) ; \n \t4 s <identifiersep> logger . info ( <string_literal> + viewer ) ; \n \t4 report <identifiersep> load <identifiersep> change = true ; \n \t3 } else if ( ! viewer . is <identifiersep> front <identifiersep> end <identifiersep> alive ( ) ) { \n <ect>
\t1 <comment> \n \t1 int pos = context . map <identifiersep> join <identifiersep> parent <identifiersep> map . get ( map <identifiersep> join <identifiersep> op ) . index <identifiersep> of ( parent <identifiersep> rs ) ; \n \t1 if ( pos == - 1 ) { \n \t1 throw new semantic <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t1 int round2mode = round <identifiersep> <number_literal> <identifiersep> mode <identifiersep> default <identifiersep> value ; \n \t1 final string rpa <identifiersep> value = system . get <identifiersep> property ( sys <identifiersep> property <identifiersep> round <identifiersep> <number_literal> <identifiersep> mode ) ; \n \t1 if ( utils . is <identifiersep> empty ( rpa <identifiersep> value ) ) { \n \t1 round2mode = round <identifiersep> <number_literal> <identifiersep> mode <identifiersep> default <identifiersep> value ; \n <ect>
\t1 for ( data <identifiersep> disk data <identifiersep> disk : virtual <identifiersep> machine . properties ( ) . storage <identifiersep> profile ( ) . data <identifiersep> disks ( ) ) { \n \t2 delete <identifiersep> managed <identifiersep> disk ( data <identifiersep> disk . managed <identifiersep> disk <identifiersep> parameters ( ) , delete <identifiersep> jobs ) ; } \n \t1 set < string > non <identifiersep> deleted <identifiersep> disks = filter <identifiersep> values ( delete <identifiersep> jobs , not ( resource <identifiersep> deleted ) ) . key <identifiersep> set ( ) ; \n \t1 if ( ! non <identifiersep> deleted <identifiersep> disks . is <identifiersep> empty ( ) ) { \n <ect>
\t1 llap <identifiersep> io <identifiersep> impl . log . trace ( <string_literal> , \n \t2 is <identifiersep> closed , is <identifiersep> interrupted , pending <identifiersep> error . get ( ) , queue . size ( ) ) ; } \n \t1 llap <identifiersep> io <identifiersep> impl . log . info ( <string_literal> + max <identifiersep> queue <identifiersep> size ) ; \n <ect>
\t6  <identifiersep> private <identifiersep> nic = nic ; \n \t6 s <identifiersep> logger . info ( <string_literal> + nic <identifiersep> name ) ; \n \t6 break ; } } \n \t4 <comment> \n <ect>
\t3 return ; } \n \t2 i <identifiersep> verb <identifiersep> handler verb <identifiersep> handler = messaging <identifiersep> service . instance ( ) . get <identifiersep> verb <identifiersep> handler ( verb ) ; \n \t2 if ( verb <identifiersep> handler == null ) \n \t2 { \n <ect>
\t1 for ( supplier < instance <identifiersep> usage <identifiersep> event > ec2disk <identifiersep> metric : ec2disk <identifiersep> metrics <identifiersep> sorted ) { \n \t1 try { \n \t2 add <identifiersep> to <identifiersep> queue <identifiersep> items ( absolute <identifiersep> metric <identifiersep> queue <identifiersep> items , ec2disk <identifiersep> metric ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t3 try { \n \t4 cur . server <identifiersep> closed ( event ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 zoo <identifiersep> keeper <identifiersep> leader <identifiersep> retrieval <identifiersep> service leader <identifiersep> retrieval <identifiersep> service = null ; \n \t2 testing <identifiersep> listener listener = new testing <identifiersep> listener ( ) ; \n \t2 try { \n \t3 leader <identifiersep> retrieval <identifiersep> service = zoo <identifiersep> keeper <identifiersep> utils . create <identifiersep> leader <identifiersep> retrieval <identifiersep> service ( client , configuration ) ; \n <ect>
\t4 this . connect ( new inet <identifiersep> socket <identifiersep> address <identifiersep> wrapper ( \n \t6 node . get <identifiersep> inet <identifiersep> socket <identifiersep> address ( ) , \n \t6 this . config <identifiersep> poller . get <identifiersep> cache <identifiersep> node <identifiersep> order ( node ) , 1 , null ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t7 wait <identifiersep> for <identifiersep> pending <identifiersep> events <identifiersep> timeout <identifiersep> secs ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n \t3 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( t ) ; \n <ect>
\t4 transition <identifiersep> to <identifiersep> failed <identifiersep> state ( cluster . get <identifiersep> cluster <identifiersep> name ( ) , c . get <identifiersep> service <identifiersep> name ( ) , role <identifiersep> str , host , now , false ) ; } \n \t3 if ( c . get <identifiersep> role <identifiersep> command ( ) . equals ( role <identifiersep> command . actionexecute ) ) { \n \t4 process <identifiersep> action <identifiersep> death ( cluster . get <identifiersep> cluster <identifiersep> name ( ) , c . get <identifiersep> hostname ( ) , role <identifiersep> str ) ; } } \n \t3 <comment> \n <ect>
\t1 } catch ( exception e ) { \n \t1 log . info ( class <identifiersep> name + <string_literal> + e ) ; \n \t1 throw new hive <identifiersep> exception ( e ) ; } \n <ect>
\t3 bb . limit ( ( int ) len ) ; \n \t3 string tmpfile = decode ( bb , default <identifiersep> encoding , pick <identifiersep> char <identifiersep> buffer ( ) ) ; \n \t3 try { \n <ect>
\t6 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) \n \t7 log . info ( log . fac <identifiersep> pipeline , <string_literal> ) ; \n \t6 return ; } \n \t5 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) \n <ect>
\t3 file data <identifiersep> file = util . get <identifiersep> first <identifiersep> part <identifiersep> file ( output <identifiersep> file ) ; \n \t3 <comment> \n \t3 assert <identifiersep> equals ( data <identifiersep> file . length ( ) , stats . get <identifiersep> bytes <identifiersep> written ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 return true ; } } \n \t1 private boolean execute ( service <identifiersep> definition server , exchange exchange , async <identifiersep> callback callback ) throws exception { \n \t2 string host = server . get <identifiersep> host ( ) ; \n \t2 int port = server . get <identifiersep> port ( ) ; \n <ect>
\t2 public void run ( ) { \n \t3 try { \n \t3 mini <identifiersep> accumulo <identifiersep> cluster <identifiersep> impl . this . stop ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 } else { \n \t4 bolt . execute ( tuple ) ; } \n \t2 } catch ( throwable e ) { \n \t3 error = e ; \n <ect>
\t4 client <identifiersep> id <identifiersep> set . put ( client <identifiersep> id , context ) ; } } \n \t2 if ( old <identifiersep> context != null ) { \n \t3 if ( old <identifiersep> context . get <identifiersep> connection ( ) != null ) { \n \t4 connection connection = old <identifiersep> context . get <identifiersep> connection ( ) ; \n <ect>
\t3 routes <identifiersep> builder builder = instantiate <identifiersep> builder ( ( class < ? extends routes <identifiersep> builder > ) a <identifiersep> class ) ; \n \t3 if ( bean <identifiersep> post <identifiersep> processor != null ) { \n \t4 <comment> \n \t4 bean <identifiersep> post <identifiersep> processor . post <identifiersep> process <identifiersep> before <identifiersep> initialization ( builder , builder . to <identifiersep> string ( ) ) ; } \n <ect>
\t2 if ( get <identifiersep> jms <identifiersep> consumer ( ) == null ) { \n \t3 create <identifiersep> jms <identifiersep> consumer ( ) ; } \n \t2 try { \n \t3 get <identifiersep> connection ( ) . start ( ) ; \n <ect>
\t2 scheduler . shutdown ( ) ; \n \t2 wait <identifiersep> for <identifiersep> job <identifiersep> finish ( job . get <identifiersep> id ( ) , <number_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> scheduler <identifiersep> restart ( ) throws exception { \n <ect>
\t2 <comment> \n \t2 validate <identifiersep> method = find <identifiersep> validation <identifiersep> method ( model , validator , <string_literal> , errors . class ) ; \n \t2 if ( validate <identifiersep> method != null ) { \n <ect>
\t4 return key ; } \n \t3  <identifiersep> log . error ( <string_literal> + url + hostname ) ; \n \t3 return null ; \n \t2 } catch ( throwable t ) { \n <ect>
\t6 } else { \n \t7 squeeze <identifiersep> server . player <identifiersep> command ( player <identifiersep> id , binding <identifiersep> config . get <identifiersep> extra ( ) ) ; } \n \t6 break ; \n \t5 default : \n <ect>
\t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n <ect>
\t3 return entries ; } \n \t2 public void add <identifiersep> entry ( final map < string , object > entry ) { \n \t3 entries . add ( entry ) ; } \n \t2 public void add <identifiersep> correlation <identifiersep> entry ( final string key , final log <identifiersep> event event ) { \n <ect>
\t4 if ( ! type <identifiersep> util . is <identifiersep> valid ( token , column <identifiersep> index . get <identifiersep> validator ( ) ) ) \n \t4 { \n \t5 if ( ( token = type <identifiersep> util . try <identifiersep> upcast ( token , column <identifiersep> index . get <identifiersep> validator ( ) ) ) == null ) \n \t5 { \n <ect>
\t1 public void attribute <identifiersep> manager <identifiersep> error ( throwable t ) { \n \t2 logger . error ( <string_literal> , t ) ; } \n \t1 @ override \n \t1 public void could <identifiersep> not <identifiersep> obtain <identifiersep> security <identifiersep> context ( ) { \n <ect>
\t3 t <identifiersep> handler . get <identifiersep> transformer ( ) . set <identifiersep> error <identifiersep> listener ( transformer <identifiersep> error <identifiersep> listener ) ; \n \t3 handler . set <identifiersep> transformer <identifiersep> handler ( t <identifiersep> handler ) ; } \n \t2 catch ( transformer <identifiersep> configuration <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 logger . trace ( <string_literal> + request <identifiersep> file <identifiersep> loc ) ; \n \t2 final input <identifiersep> stream request <identifiersep> stream = j <identifiersep> boss <identifiersep> pdp <identifiersep> interoperability <identifiersep> test <identifiersep> case . class \n \t4 . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( xacml <identifiersep> test <identifiersep> utils . testobjects <identifiersep> requests + <string_literal> + request <identifiersep> file <identifiersep> loc ) ; \n \t2 if ( request <identifiersep> stream == null ) { \n <ect>
\t2 for ( future < pig <identifiersep> stats > future : futures ) { \n \t3 try { \n \t4 stats . add ( future . get ( ) ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t6 string line = br . read <identifiersep> line ( ) ; \n \t6 logger . trace ( <string_literal> , line ) ; \n \t6 process <identifiersep> next <identifiersep> line ( line ) ; } \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name , driver ) ; \n \t1 string repl <identifiersep> dump <identifiersep> locn = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 string repl <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t2 string job <identifiersep> name = daily <identifiersep> job . class . get <identifiersep> simple <identifiersep> name ( ) ; \n \t2 cron <identifiersep> trigger cron <identifiersep> trigger = new <identifiersep> trigger ( ) . with <identifiersep> identity ( job <identifiersep> name + <string_literal> , job <identifiersep> group ) . start <identifiersep> now ( ) \n \t4 . with <identifiersep> schedule ( cron <identifiersep> schedule <identifiersep> builder . cron <identifiersep> schedule ( <string_literal> ) ) . build ( ) ; \n \t2 schedule ( job <identifiersep> name , daily <identifiersep> job . class , cron <identifiersep> trigger , new job <identifiersep> data <identifiersep> map ( ) ) ; \n <ect>
\t1 { } \n \t1 @ override \n \t1 public void job <identifiersep> paused ( job <identifiersep> key job <identifiersep> key ) \n \t1 { \n <ect>
\t2 private throttled <identifiersep> submission <identifiersep> handler <identifiersep> interceptor handler <identifiersep> interceptor ; \n \t2 @ override \n \t2 public void add <identifiersep> interceptors ( final interceptor <identifiersep> registry registry ) { \n \t3 if ( handler <identifiersep> interceptor != null ) { \n <ect>
\t3 <comment> \n \t3 try { \n \t4 release <identifiersep> nic ( vm , nic . get <identifiersep> id ( ) ) ; \n \t3 } catch ( final exception ex ) { \n <ect>
\t2 nginx <identifiersep> clojure <identifiersep> rt . ngx <identifiersep> http <identifiersep> hijack <identifiersep> send <identifiersep> header ( request . native <identifiersep> request ( ) , flag ) ; } \n \t1 protected int send <identifiersep> header ( byte [ ] message , long off , int len , int flag ) { \n \t2 int rc = ( int ) nginx <identifiersep> clojure <identifiersep> rt . ngx <identifiersep> http <identifiersep> hijack <identifiersep> send <identifiersep> header ( request . native <identifiersep> request ( ) , message , mini <identifiersep> constants . byte <identifiersep> array <identifiersep> offset + off , len , flag ) ; \n \t2 if ( rc < 0 ) { \n <ect>
\t3 return null ; } \n \t2 try { \n \t3 return integer . parse <identifiersep> int ( in ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 user <identifiersep> transaction ut = get <identifiersep> user <identifiersep> transaction ( ) ; \n \t1 if ( ut == null ) { \n \t1 <comment> \n <ect>
\t3 managed <identifiersep> group <identifiersep> factory . close ( ) ; \n \t3 managed <identifiersep> group <identifiersep> factory = null ; } } \n \t1 @ override \n \t1 public void state <identifiersep> changed ( curator <identifiersep> framework client , connection <identifiersep> state new <identifiersep> state ) { \n <ect>
\t3 me . set <identifiersep> last <identifiersep> active ( new date ( ) ) ; \n \t3 try { \n \t4 e <identifiersep> person <identifiersep> service . update ( context , me ) ; \n \t3 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + s <identifiersep> new <identifiersep> volume . get ( ) + <string_literal> + s <identifiersep> linux <identifiersep> vm <identifiersep> id . get ( ) ) ; \n \t3 client = new http <identifiersep> client ( ) ; \n \t3 method = new get <identifiersep> method ( url ) ; \n \t3 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t1 @ override \n \t1 protected void internal <identifiersep> receive <identifiersep> update ( string item <identifiersep> name , state new <identifiersep> state ) { \n \t2 plc <identifiersep> bus <identifiersep> binding <identifiersep> config config = try <identifiersep> get <identifiersep> config <identifiersep> for ( item <identifiersep> name ) ; \n \t2 if ( config == null ) { \n <ect>
\t4 try { \n \t5 log . info ( <string_literal> + san <identifiersep> volume <identifiersep> id + <string_literal> ) ; \n \t5 connection <identifiersep> manager . disconnect <identifiersep> target ( san <identifiersep> volume <identifiersep> id , parts [ 0 ] , parts [ 1 ] ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t5 public void operation <identifiersep> complete ( channel <identifiersep> future future ) { \n \t6 try { \n \t7 input <identifiersep> stream . close ( ) ; \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 log . info ( <string_literal> + mark <identifiersep> file . host + <string_literal> + mark <identifiersep> file . path + <string_literal> + match ) ; } \n \t3 return false ; } \n \t2 if ( joda <identifiersep> start <identifiersep> date != null && mark <identifiersep> file . date <identifiersep> time != null && mark <identifiersep> file . date <identifiersep> time . is <identifiersep> before ( joda <identifiersep> start <identifiersep> date ) ) { \n <ect>
\t2 { \n \t3 { \n <ect>
\t2 app . get <identifiersep> bean ( scheduler . class ) . shutdown ( ) ; \n \t2 io <identifiersep> helper . close ( app ) ; \n \t2 log . warn ( <string_literal> ) ; \n \t2 log . warn ( <string_literal> ) ; \n <ect>
\t2 <comment> \n \t2 if ( sub <identifiersep> object . editing <identifiersep> context ( ) . has <identifiersep> changes ( ) && ! erxeo <identifiersep> control <identifiersep> utilities . is <identifiersep> new <identifiersep> object ( sub <identifiersep> object ) ) { \n \t3 try { \n <ect>
\t3 throw new configuration <identifiersep> exception ( <string_literal> + class <identifiersep> name + <string_literal> , e , loc ) ; \n \t2 } catch ( runtime <identifiersep> exception ex ) { \n \t3 <comment> \n \t3 log . info ( <string_literal> , class <identifiersep> name ) ; \n <ect>
\t6 try { \n \t7 <comment> \n \t7 log . error ( <string_literal> , bundle <identifiersep> name ) ; \n \t7 bundle . stop ( bundle . stop <identifiersep> transient ) ; \n <ect>
\t3 names [ i ] = <string_literal> + i ; \n \t3 ids [ i ] = i ; \n \t3 nodes [ i ] = tx . add <identifiersep> vertex ( <string_literal> , names [ i ] , <string_literal> , ids [ i ] ) ; \n \t3 if ( ( i + 1 ) % <number_literal> == 0 ) log . debug ( <string_literal> ) ; } \n <ect>
\t1 monitor <identifiersep> lock . try <identifiersep> to <identifiersep> cancel <identifiersep> async <identifiersep> lock <identifiersep> or <identifiersep> unlock ( ) ; \n \t1 sleep <identifiersep> uninterruptibly ( \n \t2 get <identifiersep> context ( ) . get <identifiersep> configuration ( ) . get <identifiersep> time <identifiersep> in <identifiersep> millis ( property . monitor <identifiersep> lock <identifiersep> check <identifiersep> interval ) , \n \t2 time <identifiersep> unit . milliseconds ) ; } \n <ect>
\t4 session . put ( message <identifiersep> store <identifiersep> interceptor . action <identifiersep> errors <identifiersep> session <identifiersep> key , validation <identifiersep> aware <identifiersep> action . get <identifiersep> action <identifiersep> errors ( ) ) ; \n \t4 session . put ( message <identifiersep> store <identifiersep> interceptor . action <identifiersep> messages <identifiersep> session <identifiersep> key , validation <identifiersep> aware <identifiersep> action . get <identifiersep> action <identifiersep> messages ( ) ) ; \n \t4 session . put ( message <identifiersep> store <identifiersep> interceptor . field <identifiersep> errors <identifiersep> session <identifiersep> key , validation <identifiersep> aware <identifiersep> action . get <identifiersep> field <identifiersep> errors ( ) ) ; \n \t3 } else { \n <ect>
\t4 async . resume ( output <identifiersep> stream . to <identifiersep> string ( <string_literal> ) ) ; \n \t4 logger . info ( <string_literal> ) ; } \n \t3 @ override \n \t3 public void on <identifiersep> error ( throwable t ) { \n <ect>
\t1 if ( metrics != null ) { \n \t2 try { \n \t2 metrics . increment <identifiersep> counter ( name , count ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 protected final void complete <identifiersep> restore ( restore <identifiersep> options options ) throws execution <identifiersep> exception , exception { \n \t2 if ( get <identifiersep> state ( ) == state . restoring ) { \n \t3 logger . debug ( <string_literal> , get <identifiersep> name ( ) ) ; \n \t3 do <identifiersep> shutdown ( false ) ; \n <ect>
\t4 boolean find = false ; \n \t4 int i = 0 ; \n \t4 for ( ; i < fields . length ; i ++ ) { \n \t5 string field = fields [ i ] ; \n <ect>
\t5  <identifiersep> log . info ( <string_literal> ) ; } \n \t4  <identifiersep> use <identifiersep> reflection <identifiersep> to <identifiersep> translate <identifiersep> throwable = false ; } \n \t3 catch ( security <identifiersep> exception se ) { \n <ect>
\t2 super ( saml <identifiersep> id <identifiersep> p <identifiersep> properties , config <identifiersep> bean ) ; \n \t2 this . http <identifiersep> client = http <identifiersep> client ; } \n \t1 @ override \n \t1 public list < metadata <identifiersep> resolver > resolve ( final saml <identifiersep> registered <identifiersep> service service ) { \n <ect>
\t1 public string get <identifiersep> scheme ( ) { \n \t2 return <string_literal> ; } \n \t1 @ override \n \t1 public expression get <identifiersep> temp <identifiersep> file <identifiersep> name ( ) { \n <ect>
\t2 s <identifiersep> logger . info ( <string_literal> + vmdk <identifiersep> datastore <identifiersep> path + <string_literal> + src <identifiersep> base <identifiersep> name ) ; \n \t2 if ( devices != null && devices . size ( ) > 0 ) { \n \t3 for ( virtual <identifiersep> device device : devices ) { \n \t4 if ( device instanceof virtual <identifiersep> disk ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + old <identifiersep> name ) ; } \n \t3 vlan <identifiersep> nic = get <identifiersep> network <identifiersep> by <identifiersep> name ( conn , old <identifiersep> name ) ; \n \t3 if ( vlan <identifiersep> nic != null ) { \n <ect>
\t4 vr <identifiersep> compositor . read ( ) ; \n \t4 vr <identifiersep> compositor . set <identifiersep> tracking <identifiersep> space . apply ( j <identifiersep> open <identifiersep> vr <identifiersep> library . e <identifiersep> tracking <identifiersep> universe <identifiersep> origin . e <identifiersep> tracking <identifiersep> universe <identifiersep> origin <identifiersep> tracking <identifiersep> universe <identifiersep> standing ) ; \n \t3 } else { \n \t4 string error <identifiersep> string = jopenvr . j <identifiersep> open <identifiersep> vr <identifiersep> library . vr <identifiersep> get <identifiersep> vr <identifiersep> init <identifiersep> error <identifiersep> as <identifiersep> english <identifiersep> description ( hmd <identifiersep> error <identifiersep> store . get ( 0 ) ) . get <identifiersep> string ( 0 ) ; \n <ect>
\t3 if ( tx <identifiersep> out == null ) { \n \t4 continue ; } \n \t3 script script <identifiersep> pub <identifiersep> key = tx <identifiersep> out . get <identifiersep> script <identifiersep> pub <identifiersep> key ( ) ; \n \t3 if ( ! script <identifiersep> pattern . is <identifiersep> pay <identifiersep> to <identifiersep> script <identifiersep> hash ( script <identifiersep> pub <identifiersep> key ) ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 assert <identifiersep> true ( <string_literal> + msg <identifiersep> count + <string_literal> , wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 hash <identifiersep> set < > ( ) ; \n \t1 if ( requests != null ) { \n \t1 for ( request <identifiersep> schedule <identifiersep> request request : requests ) { \n \t2 if ( request . get <identifiersep> cluster <identifiersep> name ( ) == null ) { \n <ect>
\t2 return  <identifiersep> policy . get <identifiersep> global <identifiersep> prefix ( ) ; } \n \t1 public string get <identifiersep> local <identifiersep> name ( ) { \n \t2 return  <identifiersep> policy . get <identifiersep> local <identifiersep> name ( ) ; } \n \t1 public void shut <identifiersep> down ( ) { \n <ect>
\t4 this . add ( ' , ' ) ; } \n \t3 has <identifiersep> data = true ; \n \t3 if ( ! warned <identifiersep> non <identifiersep> string && ! ( key instanceof string ) ) { \n <ect>
\t7 failed <identifiersep> unregistered . remove ( url ) ; \n \t6 } catch ( throwable t ) { <comment> \n \t7 logger . warn ( <string_literal> + failed + <string_literal> + t . get <identifiersep> message ( ) , t ) ; } } \n \t4 } catch ( throwable t ) { <comment> \n <ect>
\t4 exclusive , \n \t4 error , \n \t4 use <identifiersep> permanent <identifiersep> redirects ) ; \n \t2 } catch ( cms <identifiersep> configuration <identifiersep> exception e ) { \n <ect>
\t2  <identifiersep> log . debug ( <string_literal> + num <identifiersep> peers + <string_literal> ) ; \n \t2  <identifiersep> endpoints = new udp <identifiersep> endpoint [ num <identifiersep> peers ] ; \n \t2 int base = <number_literal> +  <identifiersep> context . random ( ) . next <identifiersep> int ( <number_literal> ) ; \n \t2 for ( int i = 0 ; i < num <identifiersep> peers ; i ++ ) { \n <ect>
\t2 <comment> \n \t2 while ( new <identifiersep> groups <identifiersep> enum . has <identifiersep> more <identifiersep> elements ( ) ) \n \t2 { \n \t3 string group <identifiersep> name = new <identifiersep> groups <identifiersep> enum . next <identifiersep> element ( ) ; \n <ect>
\t2 method . set <identifiersep> accessible ( true ) ; \n \t2 return method . invoke ( session ) ; } \n \t1 private void failed <identifiersep> to <identifiersep> verify <identifiersep> master <identifiersep> secret ( throwable t ) { \n <ect>
\t3 byte <identifiersep> buffer buffer = byte <identifiersep> buffer . allocate ( <number_literal> * <number_literal> ) ; \n \t3 try { \n \t4 fis = new file <identifiersep> input <identifiersep> stream ( src ) ; \n \t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
public void test <identifiersep> non <identifiersep> serializable ( ) throws exception { \n \t1 try { \n \t2 marshaller . object <identifiersep> to <identifiersep> byte <identifiersep> buffer ( new object ( ) ) ; \n \t1 } catch ( not <identifiersep> serializable <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 protected void after ( ) { \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> blank ( ticket <identifiersep> id ) ) { \n \t3 return null ; } \n \t2 final ticket <identifiersep> definition metadata = this . ticket <identifiersep> catalog . find ( ticket <identifiersep> id <identifiersep> to <identifiersep> get ) ; \n \t2 if ( metadata == null ) { \n <ect>
\t1 public void test <identifiersep> create <identifiersep> route <identifiersep> from <identifiersep> camel <identifiersep> context ( ) throws exception { \n \t2 list < route <identifiersep> definition > list = context . get <identifiersep> route <identifiersep> definitions ( ) ; \n \t2 assert <identifiersep> equals ( <string_literal> + list , 1 , list . size ( ) ) ; \n \t2 route <identifiersep> definition route <identifiersep> type = list . get ( 0 ) ; \n <ect>
\t2 admin hadmin = conn . get <identifiersep> admin ( ) ; \n \t2 try { \n \t3 boolean table <identifiersep> exist = hadmin . table <identifiersep> exists ( table <identifiersep> name . value <identifiersep> of ( table <identifiersep> name ) ) ; \n \t3 if ( table <identifiersep> exist ) { \n <ect>
\t2 sid = sidmatch . group ( 1 ) ; \n \t2 accmatch = access <identifiersep> pattern . matcher ( login <identifiersep> xml ) ; \n \t2 if ( accmatch . find ( ) ) { \n \t3 if ( accmatch . group ( 1 ) == <string_literal> ) { \n <ect>
\t2 set < compaction <identifiersep> info > potentials = txn <identifiersep> handler . find <identifiersep> potential <identifiersep> compactions ( aborted <identifiersep> threshold ) ; \n \t2 log . debug ( <string_literal> + potentials . size ( ) + <string_literal> + \n \t3 <string_literal> ) ; \n \t2 for ( compaction <identifiersep> info ci : potentials ) { \n <ect>
\t3 for ( int i = 0 ; i < node <identifiersep> definitions . length ; i ++ ) { \n \t4 resource resource = node <identifiersep> definitions [ i ] ; \n \t4 if ( debug ) { \n <ect>
\t1 protected void run <identifiersep> in <identifiersep> context ( ) { \n \t2 try { \n \t3 parse ( null ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 protected long send <identifiersep> response <identifiersep> help ( nginx <identifiersep> response resp , long chain ) { \n \t2 nginx <identifiersep> request req = resp . request ( ) ; \n \t2 if ( req . is <identifiersep> released ( ) ) { \n \t3 if ( resp . type ( ) > 0 ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return null ; } \n \t2 final string encoding <identifiersep> char <identifiersep> to <identifiersep> use = string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( this . character <identifiersep> encoding ) \n \t4 ? this . character <identifiersep> encoding : charset . default <identifiersep> charset ( ) . name ( ) ; \n <ect>
\t3 expand <identifiersep> kick <identifiersep> executor . shutdown ( ) ; \n \t3 expand <identifiersep> kick <identifiersep> executor . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t2 } catch ( exception ex ) { \n \t3 log . warn ( <string_literal> , ex ) ; } \n <ect>
\t2 log . debug ( error <identifiersep> message ) ; \n \t2 log . trace ( e , e ) ; \n \t2 return futures . < service <identifiersep> configuration > predestined <identifiersep> failed <identifiersep> future ( exceptions . to <identifiersep> undeclared ( error <identifiersep> message ) ) ; } } \n \t1 public future < service <identifiersep> configuration > deregister ( ) { \n <ect>
\t5 else { \n \t6 ( ( rabbit <identifiersep> message <identifiersep> future ) future ) . set ( message ) ; } } \n \t4 else { \n <ect>
\t3 this . set <identifiersep> source <identifiersep> directory ( source <identifiersep> directory ) ; \n \t3 add ( get <identifiersep> source <identifiersep> directory ( ) ) ; \n \t3 source <identifiersep> directory <identifiersep> indexed = true ; } } \n \t1 public void index ( exchange exchange ) throws exception { \n <ect>
\t1 } else { \n \t2 platform <identifiersep> preferences = new hash <identifiersep> map ( base . get <identifiersep> platform <identifiersep> preferences ( platform ) ) ; } \n \t1 logger . debug ( <string_literal> ) ; \n \t1 logger . debug ( <string_literal> + program ) ; \n <ect>
\t3 list < x <identifiersep> wiki <identifiersep> attachment > current <identifiersep> attachments = tdoc . get <identifiersep> attachment <identifiersep> list ( ) ; \n \t3 list < x <identifiersep> wiki <identifiersep> attachment > to <identifiersep> restore = new array <identifiersep> list < > ( ) ; \n \t3 list < x <identifiersep> wiki <identifiersep> attachment > to <identifiersep> revert = new array <identifiersep> list < > ( ) ; \n \t3 <comment> \n <ect>
\t2 for ( final file f : files ) { \n \t3 try { \n \t4 lists . add ( interval <identifiersep> list <identifiersep> input <identifiersep> type . get <identifiersep> interval <identifiersep> list ( f , include <identifiersep> filtered ) . padded ( padding ) ) ; \n \t3 } catch ( final exception e ) { \n <ect>
\t3 throws invalid <identifiersep> variable <identifiersep> exception { \n \t2 string variable <identifiersep> name = ( ( compound <identifiersep> variable ) values [ 0 ] ) . execute ( ) ; \n \t2 final j <identifiersep> meter <identifiersep> variables vars = get <identifiersep> variables ( ) ; \n \t2 if ( vars == null ) { \n <ect>
\t2 abstract <identifiersep> xml <identifiersep> application <identifiersep> context db = new class <identifiersep> path <identifiersep> xml <identifiersep> application <identifiersep> context ( <string_literal> ) ; \n \t2 <comment> \n \t2 abstract <identifiersep> xml <identifiersep> application <identifiersep> context app = new class <identifiersep> path <identifiersep> xml <identifiersep> application <identifiersep> context ( <string_literal> ) ; \n \t2 <comment> \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( 0 ) . primary <identifiersep> shard ( ) . current <identifiersep> node <identifiersep> id ( ) , equal <identifiersep> to ( node <identifiersep> holding <identifiersep> primary ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( 0 ) . replica <identifiersep> shards ( ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( 0 ) . replica <identifiersep> shards ( ) . get ( 0 ) . state ( ) , equal <identifiersep> to ( started ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( 0 ) . replica <identifiersep> shards ( ) . get ( 0 ) . current <identifiersep> node <identifiersep> id ( ) , equal <identifiersep> to ( node <identifiersep> holding <identifiersep> replica ) ) ; \n <ect>
\t2 <comment> \n \t2 exchange . set <identifiersep> property ( exchange . batch <identifiersep> index , 0 ) ; \n \t2 exchange . set <identifiersep> property ( exchange . batch <identifiersep> size , 1 ) ; \n \t2 exchange . set <identifiersep> property ( exchange . batch <identifiersep> complete , true ) ; \n <ect>
\t3 for ( com . xpn . xwiki . doc . deleted <identifiersep> attachment attachment : attachments ) { \n \t4 result . add ( new deleted <identifiersep> attachment ( attachment , this . context ) ) ; } \n \t3 return result ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 if ( lun == null ) \n \t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> ) ; \n \t2 netapp <identifiersep> volume <identifiersep> vo vol =  <identifiersep> volume <identifiersep> dao . acquire <identifiersep> in <identifiersep> lock <identifiersep> table ( lun . get <identifiersep> volume <identifiersep> id ( ) ) ; \n \t2 if ( vol == null ) { \n <ect>
\t3 if ( ! result . first ( ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> ) ; \n \t4 return new answer ( cmd , false , <string_literal> + result . second ( ) ) ; } \n <ect>
\t4 object [ ] args = { config , context } ; \n \t4 options = ( options ) ctor . new <identifiersep> instance ( args ) ; \n \t3 } catch ( throwable e ) { \n \t4 <comment> \n <ect>
\t3 public long get <identifiersep> value ( ) { \n \t4 try { \n \t5 return metrics . get <identifiersep> rolling <identifiersep> count ( event <identifiersep> thunk . call ( ) ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> field <identifiersep> error error ) { \n <ect>
@ override \n public void callback ( final message message ) { \n \t1 final queue <identifiersep> session queue <identifiersep> session = message . get <identifiersep> resource ( queue <identifiersep> session . class , <string_literal> ) ; \n \t1 if ( queue <identifiersep> session != intrabus <identifiersep> queue <identifiersep> session . instance ) { \n <ect>
\t4 if ( decoded == null ) { \n \t5 decoded = o ; } \n \t4 object object <identifiersep> to <identifiersep> encode = null ; \n \t4 if ( m . method . get <identifiersep> parameter <identifiersep> types ( ) . length > <number_literal> ) { \n <ect>
\t2 this . set <identifiersep> print <identifiersep> request <identifiersep> attribute <identifiersep> set ( print <identifiersep> request <identifiersep> attribute <identifiersep> set ) ; } \n \t1 public void print ( doc doc , boolean send <identifiersep> to <identifiersep> printer , string mime <identifiersep> type , string job <identifiersep> name ) throws print <identifiersep> exception { \n \t2 log . trace ( <string_literal> + this . print <identifiersep> service . get <identifiersep> name ( ) ) ; \n \t2 if ( ! send <identifiersep> to <identifiersep> printer ) { \n <ect>
\t2 boolean all <identifiersep> complete = executor <identifiersep> service . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t2 executor <identifiersep> service . shutdown <identifiersep> now ( ) ; \n \t2 log . info ( <string_literal> + broker . get <identifiersep> admin <identifiersep> view ( ) . get <identifiersep> total <identifiersep> message <identifiersep> count ( ) ) ; \n \t2 log . info ( <string_literal> + broker . get <identifiersep> admin <identifiersep> view ( ) . get <identifiersep> total <identifiersep> enqueue <identifiersep> count ( ) ) ; \n <ect>
\t3 } finally { \n \t4 try { \n \t5 is . close ( ) ; \n \t4 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t5 file [ ] ssfiles = snapshotdir . list <identifiersep> files ( ) ; \n \t5 <comment> \n \t5 for ( int i = 0 ; i < ssfiles . length ; i ++ ) { \n \t6 string vmdkfile = ssfiles [ i ] . get <identifiersep> name ( ) ; \n <ect>
\t4 final int pending <identifiersep> nodes = my <identifiersep> election <identifiersep> context . get <identifiersep> pending <identifiersep> master <identifiersep> joins <identifiersep> count ( ) ; \n \t4 logger . trace ( <string_literal> , time <identifiersep> value , pending <identifiersep> nodes ) ; } \n \t3 fail <identifiersep> context <identifiersep> if <identifiersep> needed ( my <identifiersep> election <identifiersep> context , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 for ( future < map < stack <identifiersep> module , repo <identifiersep> url <identifiersep> info <identifiersep> result > > future : results ) { \n \t2 try { \n \t2 url <identifiersep> info <identifiersep> results . add ( future . get ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 producer . set <identifiersep> time <identifiersep> to <identifiersep> live ( time <identifiersep> to <identifiersep> live ) ; \n \t2 return producer ; } \n \t1 protected message <identifiersep> consumer create <identifiersep> consumer ( ) throws jms <identifiersep> exception { \n \t2 if ( durable ) { \n <ect>
\t1 <comment> \n \t1 public void process <identifiersep> result ( int rc , string path , object ctx , byte [ ] bytes , stat stat ) \n \t1 { \n \t1 keeper <identifiersep> exception . code code = keeper <identifiersep> exception . code . get ( rc ) ; \n <ect>
\t2 core = core <identifiersep> data [ 'core' ] \n \t2 base <identifiersep> url = core <identifiersep> data [ 'base <identifiersep> url' ] \n \t2 domain =  <identifiersep>  <identifiersep> get <identifiersep> domain <identifiersep> name ( base <identifiersep> url ) \n \t2 hosts . add ( domain ) \n <ect>
\t5 <string_literal> ) ; } \n \t2 try { \n \t3 configuration . add <identifiersep> resource ( ams <identifiersep> res <identifiersep> url . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 final boolean valid = boolean . parse <identifiersep> boolean ( builder . evaluate ( pack <identifiersep> it , <string_literal> ) . to <identifiersep> string ( ) ) ; \n \t1 if ( ! valid ) { \n \t1 final string json = builder . add <identifiersep> json ( ) . evaluate ( \n \t2 string . format ( <string_literal> , get <identifiersep> linter <identifiersep> name ( ) ) , <string_literal> ) . to <identifiersep> string ( ) ; \n <ect>
\t2 for ( temporary <identifiersep> topic temp <identifiersep> topic : conn <identifiersep> temp <identifiersep> topics ) { \n \t3 try { \n \t4 temp <identifiersep> topic . delete ( ) ; \n \t3 } catch ( jms <identifiersep> exception ex ) { \n <ect>
\t1 if ( null != cluster ) { \n \t1 try { \n \t2 cluster . stop ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 } finally { \n \t3 scanner . close ( ) ; \n \t3 builder . close ( ) ; } \n \t2 long time <identifiersep> spent = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n <ect>
\t3 for ( grid <identifiersep> node node : subgrid ) { \n \t4 map . put ( new grid <identifiersep> compute <identifiersep> job <identifiersep> adapter ( ) { \n \t5 @ override public serializable execute ( ) { \n <ect>
\t1 return ' { 0 } ? fields = requests' . format ( url <identifiersep> str ) \n \t1 else : \n \t1 return url <identifiersep> str \n else : \n <ect>
\t2 this . bean = bean ; \n \t2 try { \n \t3 type <identifiersep> id = ( integer ) property <identifiersep> utils . get <identifiersep> property ( bean , <string_literal> ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception | invocation <identifiersep> target <identifiersep> exception | no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> , e ) ; } } \n \t1 @ override \n \t1 protected void before ( ) throws throwable { \n <ect>
\t2 logger . error ( messages . get <identifiersep> instance ( ) . get <identifiersep> string ( <string_literal> , query ) ) ; <comment> \n \t1 } else { \n \t2 logger . error ( messages . get <identifiersep> instance ( ) . get <identifiersep> string ( <string_literal> , query ) , e ) ; <comment> \n \t1 } catch ( throwable t ) { \n <ect>
\t5 throw new org . apache . jorphan . util . j <identifiersep> meter <identifiersep> error ( e1 ) ; } } \n \t3 return gui <identifiersep> factory . get <identifiersep> icon ( class . for <identifiersep> name ( test <identifiersep> element . get <identifiersep> property <identifiersep> as <identifiersep> string ( test <identifiersep> element . gui <identifiersep> class ) ) , \n \t6 enabled ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t2 fs = new path ( storage <identifiersep> root ) . get <identifiersep> file <identifiersep> system ( app <identifiersep> conf ) ; \n \t2 check <identifiersep> files ( fs ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 if ( broker . get <identifiersep> persistence <identifiersep> adapter ( ) != null ) { \n \t4 broker . get <identifiersep> persistence <identifiersep> adapter ( ) . allow <identifiersep> io <identifiersep> resumption ( ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 } else if ( result instanceof range ) { \n \t1 log . info ( <string_literal> + result ) ; \n \t1 return collections . singleton <identifiersep> list ( ( range ) result ) ; \n \t1 } else if ( result instanceof list ) { \n <ect>
\t2 super ( no <identifiersep> jobs ) ; \n \t2 logger . debug ( <string_literal> , this ) ; } \n \t1 public void set <identifiersep> weight <identifiersep> of <identifiersep> fix <identifiersep> cost ( double weight ) { \n \t2 weight <identifiersep> delta <identifiersep> fix <identifiersep> cost = weight ; \n <ect>
\t3 management <identifiersep> key <identifiersep> store . set <identifiersep> certificate <identifiersep> entry ( ca <identifiersep> alias , ca <identifiersep> certificate ) ; \n \t3 management <identifiersep> key <identifiersep> store . set <identifiersep> key <identifiersep> entry ( management <identifiersep> alias , server <identifiersep> certificate . get <identifiersep> private <identifiersep> key ( ) , get <identifiersep> key <identifiersep> store <identifiersep> passphrase ( ) , \n \t5 new x509certificate [ ] { server <identifiersep> certificate . get <identifiersep> client <identifiersep> certificate ( ) , ca <identifiersep> certificate } ) ; \n \t2 } catch ( final certificate <identifiersep> exception | no <identifiersep> such <identifiersep> algorithm <identifiersep> exception | key <identifiersep> store <identifiersep> exception | io <identifiersep> exception e ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 if ( is != null ) is . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 add <identifiersep> virtual <identifiersep> server ( virtual <identifiersep> server <identifiersep> name , lb <identifiersep> protocol , src <identifiersep> ip , src <identifiersep> port , load <identifiersep> balancer . get <identifiersep> stickiness <identifiersep> policies ( ) ) ; } } \n \t3 save <identifiersep> configuration ( ) ; \n \t3 return new answer ( cmd ) ; \n \t2 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t1 protected boolean process <identifiersep> state <identifiersep> events = true ; \n \t1 private unknown <identifiersep> fork <identifiersep> handler unknown <identifiersep> fork <identifiersep> handler = new unknown <identifiersep> fork <identifiersep> handler ( ) { \n \t2 @ override \n \t2 public object handle <identifiersep> unknown <identifiersep> fork <identifiersep> stack ( message message , string fork <identifiersep> stack <identifiersep> id ) { \n <ect>
\t1 final atomic <identifiersep> long max <identifiersep> seq <identifiersep> id = new atomic <identifiersep> long ( 0 ) ; \n \t1 if ( index . is <identifiersep> loaded ( ) ) { \n \t2 log . debug ( <string_literal> ) ; \n \t1 } else if ( configuration . purge <identifiersep> on <identifiersep> startup ( ) ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 return false ; } \n \t2 } catch ( final throwable t ) { \n <ect>
\t4 string page <identifiersep> name = page <identifiersep> name <identifiersep> sb . to <identifiersep> string ( ) ; \n \t4 log . info ( <string_literal> + page <identifiersep> name ) ; \n \t4 string service <identifiersep> request = service <identifiersep> url + <string_literal> + url <identifiersep> encoder . encode ( key , char <identifiersep> encoding ) \n \t10 + <string_literal> + url <identifiersep> encoder . encode ( page <identifiersep> name , char <identifiersep> encoding ) ; \n <ect>
\t2 log . info ( <string_literal> + receive <identifiersep> connection ) ; \n \t2 session = send <identifiersep> connection . create <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n \t2 receive <identifiersep> session = receive <identifiersep> connection . create <identifiersep> session ( false , session . auto <identifiersep> acknowledge ) ; \n \t2 log . info ( <string_literal> + session ) ; \n <ect>
\t2 log . info ( <string_literal> + collection ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 process <identifiersep> event . fire ( <string_literal> ) ; \n \t2 ejb <identifiersep> book book = collection . get ( id ) ; \n <ect>
\t3 } catch ( exception e ) { \n \t4 log . warn ( <string_literal> + sid + <string_literal> \n \t6 + quorum <identifiersep> cnx <identifiersep> manager . this . my <identifiersep> sid + <string_literal> , e ) ; \n \t3 } finally { \n <ect>
\t3 set <identifiersep> project <identifiersep> properties ( child <identifiersep> project , applicator ) ; } } \n \t1 private void add <identifiersep> properties <identifiersep> to <identifiersep> project ( project project , caching <identifiersep> property <identifiersep> applicator applicator ) { \n \t2 properties project <identifiersep> properties = new properties ( ) ; \n \t2 file project <identifiersep> properties <identifiersep> file = new file ( project . get <identifiersep> project <identifiersep> dir ( ) , project . gradle <identifiersep> properties ) ; \n <ect>
\t6 logger . error ( <string_literal> ) ; } } } \n \t3 catch ( h <identifiersep> result <identifiersep> exception hre ) \n \t3 { \n \t4 dw <identifiersep> status = 0 ; \n <ect>
\t3 log . warn ( <string_literal> + fs . get <identifiersep> path ( ) ) ; \n \t3 is <identifiersep> warn <identifiersep> logged = true ; } \n \t2 continue ; } \n \t2 file <identifiersep> id = generate <identifiersep> test <identifiersep> file <identifiersep> id ( fs , files , i ) ; \n <ect>
\t4 log <identifiersep> multiline ( <string_literal> , <string_literal> + string <identifiersep> utils . default <identifiersep> if <identifiersep> null ( record ( ctx . configuration ( ) , ctx . routine ( ) ) , <string_literal> ) , level . fine ) ; } \n \t1 @ override \n \t1 public void exception ( execute <identifiersep> context ctx ) { \n <ect>
\t2 for ( index <identifiersep> event <identifiersep> listener listener : listeners ) { \n \t3 try { \n \t4 listener . after <identifiersep> index <identifiersep> shard <identifiersep> created ( index <identifiersep> shard ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 mgr = get <identifiersep> manager ( ) ; \n \t3 object o = eval <identifiersep> file <identifiersep> or <identifiersep> script ( mgr ) ; \n \t3 if ( o == null ) { \n <ect>
\t1 public void activate ( ) { \n \t2 logger . debug ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void deactivate ( ) { \n <ect>
\t2 recovery <identifiersep> thread . set <identifiersep> daemon ( true ) ; \n \t2 recovery <identifiersep> thread . set <identifiersep> uncaught <identifiersep> exception <identifiersep> handler ( new uncaught <identifiersep> exception <identifiersep> handler ( ) { \n \t3 public void uncaught <identifiersep> exception ( thread t , throwable e ) { \n \t4 if ( logger . is <identifiersep> enabled <identifiersep> for ( level . error ) ) \n <ect>
\t6 new broadcast <identifiersep> message ( string . value <identifiersep> of ( token . future . hash <identifiersep> code ( ) ) , token . original <identifiersep> message ) ) ; \n \t4 logger . trace ( <string_literal> , token . original <identifiersep> message ) ; } \n \t2 } catch ( throwable t2 ) { \n \t3 logger . error ( <string_literal> , token . original <identifiersep> message , r != null ? r . uuid ( ) : <string_literal> ) ; \n <ect>
\t3 accumulo <identifiersep> input <identifiersep> format . class , job <identifiersep> conf ) ; \n \t2 if ( null != token && ! job <identifiersep> conf . get <identifiersep> credentials ( ) . get <identifiersep> all <identifiersep> tokens ( ) . is <identifiersep> empty ( ) ) { \n \t2 <comment> \n \t2 log . info ( <string_literal> + token ) ; \n <ect>
\t1 private synchronized void check <identifiersep> for <identifiersep> endpoint <identifiersep> collision ( uuid local <identifiersep> host <identifiersep> id ) throws configuration <identifiersep> exception \n \t1 { \n \t2 if ( boolean . get <identifiersep> boolean ( <string_literal> ) ) \n \t2 { \n <ect>
\t1 protected answer execute ( network <identifiersep> usage <identifiersep> command cmd ) { \n \t2 if ( cmd . is <identifiersep> for <identifiersep> vpc ( ) ) { \n \t3 return vpc <identifiersep> network <identifiersep> usage ( cmd ) ; } \n <ect>
<comment> \n \t1 public void test <identifiersep> recover <identifiersep> broken <identifiersep> index <identifiersep> metadata ( ) throws exception { \n <ect>
\t6 } else { \n \t7 mapping . put ( key , converter <identifiersep> creator . create <identifiersep> type <identifiersep> converter ( tc . converter <identifiersep> class ( ) ) ) ; } \n \t5 } else { \n \t6 mapping . put ( key , converter <identifiersep> class ) ; \n <ect>
\t4 answers [ 0 ] = new answer ( cmd , result , null ) ; \n \t4 return  <identifiersep> gson . to <identifiersep> json ( answers ) ; \n \t3 } else if ( cmds . length == 1 && cmds [ 0 ] instanceof propagate <identifiersep> resource <identifiersep> event <identifiersep> command ) { \n \t4 final propagate <identifiersep> resource <identifiersep> event <identifiersep> command cmd = ( propagate <identifiersep> resource <identifiersep> event <identifiersep> command ) cmds [ 0 ] ; \n <ect>
\t5 catch ( grid <identifiersep> cache <identifiersep> entry <identifiersep> removed <identifiersep> exception ignored ) { \n \t6 assert entry . obsolete <identifiersep> version ( ) != null : <string_literal> + \n \t7 entry ; \n <ect>
\t5 catch <identifiersep> exception = false ; \n \t5 if ( log <identifiersep> enabled ) log . info ( <string_literal> ) ; \n \t5 return ; } } \n \t3 boolean is <identifiersep> category <identifiersep> type <identifiersep> method = meta <identifiersep> method instanceof new <identifiersep> instance <identifiersep> meta <identifiersep> method ; \n <ect>
\t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception enf ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 return transactions . save <identifiersep> direct ( new s3provider <identifiersep> configuration ( ) . initialize <identifiersep> defaults ( ) ) ; } \n \t1 } catch ( throwable f ) { \n <ect>
\t1 partition partition = vm . lookup <identifiersep> partition ( ) ; \n \t1 service <identifiersep> configuration sc = topology . lookup ( storage . class , partition ) ; \n \t1 <comment> <ect>
\t3 try { mgt <identifiersep> server . start ( ) ; } \n \t3 catch ( java . net . bind <identifiersep> exception ex ) \n \t3 { server <identifiersep> log . error ( <string_literal> + ex . get <identifiersep> message ( ) ) ; system . exit ( 1 ) ; } \n \t3 catch ( exception ex ) \n <ect>
\t2 link <identifiersep> deletion -= link <identifiersep> relabeling ; \n \t2 logger . debug ( <string_literal> + node <identifiersep> insertion ) ; \n \t2 logger . debug ( <string_literal> + node <identifiersep> deletion ) ; \n \t2 logger . debug ( <string_literal> + link <identifiersep> insertion ) ; \n <ect>
\t1 @ override \n \t1 public void monitor <identifiersep> target ( resource <identifiersep> id resource <identifiersep> id , heartbeat <identifiersep> target < o > heartbeat <identifiersep> target ) { \n \t2 if ( ! stopped ) { \n \t3 if ( heartbeat <identifiersep> targets . contains <identifiersep> key ( resource <identifiersep> id ) ) { \n <ect>
\t2 return new <identifiersep> message ; } \n \t1 @ override \n \t1 public boolean handle <identifiersep> response ( z <identifiersep> wave <identifiersep> controller z <identifiersep> controller , serial <identifiersep> message last <identifiersep> sent <identifiersep> message , \n \t3 serial <identifiersep> message incoming <identifiersep> message ) { \n <ect>
\t9 && ( ( previous <identifiersep> vm <identifiersep> disk <identifiersep> stats . get <identifiersep> current <identifiersep> io <identifiersep> read ( ) != vm <identifiersep> disk <identifiersep> stat <identifiersep> lock . get <identifiersep> current <identifiersep> io <identifiersep> read ( ) ) || ( ( previous <identifiersep> vm <identifiersep> disk <identifiersep> stats . get <identifiersep> current <identifiersep> io <identifiersep> write ( ) != vm <identifiersep> disk <identifiersep> stat <identifiersep> lock \n <number_literal> . get <identifiersep> current <identifiersep> io <identifiersep> write ( ) ) \n <number_literal> || ( previous <identifiersep> vm <identifiersep> disk <identifiersep> stats . get <identifiersep> current <identifiersep> bytes <identifiersep> read ( ) != vm <identifiersep> disk <identifiersep> stat <identifiersep> lock . get <identifiersep> current <identifiersep> bytes <identifiersep> read ( ) ) || ( previous <identifiersep> vm <identifiersep> disk <identifiersep> stats \n <number_literal> . get <identifiersep> current <identifiersep> bytes <identifiersep> write ( ) != vm <identifiersep> disk <identifiersep> stat <identifiersep> lock . get <identifiersep> current <identifiersep> bytes <identifiersep> write ( ) ) ) ) ) { \n <ect>
\t3 if ( ise != null ) { \n \t4 <comment> \n \t4 log . debug ( <string_literal> , e ) ; \n \t3 } else { \n <ect>
\t2 if ( parameters . get <identifiersep> realm ( ) == null || ! parameters . get <identifiersep> realm ( ) . equals <identifiersep> ignore <identifiersep> case ( this . handler <identifiersep> realm ) ) { \n \t3 logger . warn ( <string_literal> , parameters . get <identifiersep> realm ( ) , this . handler <identifiersep> realm ) ; \n \t3 return new processed <identifiersep> claim <identifiersep> collection ( ) ; } \n \t2 if ( parameters . get <identifiersep> principal ( ) == null ) { \n <ect>
\t1 list < part > reply <identifiersep> parts = reply . get <identifiersep> parts ( ) ; \n \t1 for ( part <identifiersep> summary part : parts ) { \n \t2 reply <identifiersep> parts . add ( new part ( part . get <identifiersep> part <identifiersep> number ( ) , part . get <identifiersep> e <identifiersep> tag ( ) , part . get <identifiersep> last <identifiersep> modified ( ) , part . get <identifiersep> size ( ) ) ) ; } \n \t1 } catch ( amazon <identifiersep> service <identifiersep> exception ex ) { \n <ect>
\t2 if ( max <identifiersep> consec <identifiersep> under <identifiersep> repl <identifiersep> rotations > 0 && \n \t3 consecutive <identifiersep> under <identifiersep> repl <identifiersep> rotate <identifiersep> count >= max <identifiersep> consec <identifiersep> under <identifiersep> repl <identifiersep> rotations ) { \n \t2 do <identifiersep> rotate = false ; \n \t2 if ( consecutive <identifiersep> under <identifiersep> repl <identifiersep> rotate <identifiersep> count == max <identifiersep> consec <identifiersep> under <identifiersep> repl <identifiersep> rotations ) { \n <ect>
\t4 string db <identifiersep> version =  <identifiersep> dao . get <identifiersep> current <identifiersep> version ( ) ; \n \t4 string current <identifiersep> version = this . get <identifiersep> class ( ) . get <identifiersep> package ( ) . get <identifiersep> implementation <identifiersep> version ( ) ; \n \t4 if ( current <identifiersep> version == null ) { \n \t5 current <identifiersep> version = this . get <identifiersep> class ( ) . get <identifiersep> superclass ( ) . get <identifiersep> package ( ) . get <identifiersep> implementation <identifiersep> version ( ) ; } \n <ect>
<comment> \n \t2 if ( get <identifiersep> server <identifiersep> id ( available <identifiersep> master <identifiersep> id ) . equals ( instance <identifiersep> id ) ) \n \t2 { \n <ect>
\t2 echo <identifiersep> server . stop <identifiersep> server ( ) ; \n \t2  <identifiersep> log . info ( <string_literal> ) ; } \n \t1 catch ( exception e ) \n \t1 { \n <ect>
\t1 } catch ( io <identifiersep> exception e ) { \n \t1 can <identifiersep> save <identifiersep> state = false ; \n \t1 <comment> \n \t1 node <identifiersep> id = super . get <identifiersep> node <identifiersep> id <identifiersep> bytes ( ) ; \n <ect>
\t1 protected static logger log = logger . get <identifiersep> logger ( wildfly <identifiersep> keycloak <identifiersep> servlet <identifiersep> extension . class ) ; \n \t1 @ override \n \t1 protected servlet <identifiersep> keycloak <identifiersep> auth <identifiersep> mech create <identifiersep> authentication <identifiersep> mechanism ( deployment <identifiersep> info deployment <identifiersep> info , adapter <identifiersep> deployment <identifiersep> context deployment <identifiersep> context , \n <number_literal> undertow <identifiersep> user <identifiersep> session <identifiersep> management user <identifiersep> session <identifiersep> management , nodes <identifiersep> registration <identifiersep> management nodes <identifiersep> registration <identifiersep> management ) { \n <ect>
\t3 s <identifiersep> logger . debug ( string . format ( <string_literal> + \n \t5 <string_literal> , ipmi <identifiersep> ip , username , <string_literal> , cpu <identifiersep> num , cpu <identifiersep> capacity , mem <identifiersep> capacity ) ) ; \n \t3 return resources ; \n \t2 } catch ( exception e ) { \n <ect>
<number_literal> . find <identifiersep> by <identifiersep> short <identifiersep> description ( context , s ) ; \n \t4 if ( format != null ) { \n \t5 priority <identifiersep> map . put ( format . get <identifiersep> mime <identifiersep> type ( ) , priority ) ; \n \t4 } else { \n <ect>
<comment> \n \t1 public final void tear <identifiersep> down ( management <identifiersep> client management <identifiersep> client , string container <identifiersep> id ) throws exception { \n \t2 final data <identifiersep> source [ ] data <identifiersep> source <identifiersep> configurations = get <identifiersep> data <identifiersep> source <identifiersep> configurations ( management <identifiersep> client , container <identifiersep> id ) ; \n \t2 if ( data <identifiersep> source <identifiersep> configurations == null ) { \n <ect>
\t1 private void initialize <identifiersep> drivers <identifiersep> map ( ) { \n \t2 if ( out <identifiersep> of <identifiersep> band <identifiersep> management <identifiersep> drivers <identifiersep> map . is <identifiersep> empty ( ) && out <identifiersep> of <identifiersep> band <identifiersep> management <identifiersep> drivers != null && out <identifiersep> of <identifiersep> band <identifiersep> management <identifiersep> drivers . size ( ) > 0 ) { \n \t3 for ( final out <identifiersep> of <identifiersep> band <identifiersep> management <identifiersep> driver driver : out <identifiersep> of <identifiersep> band <identifiersep> management <identifiersep> drivers ) { \n \t4 out <identifiersep> of <identifiersep> band <identifiersep> management <identifiersep> drivers <identifiersep> map . put ( driver . get <identifiersep> name ( ) . to <identifiersep> lower <identifiersep> case ( ) , driver ) ; } \n <ect>
\t5 transformer <identifiersep> factory . set <identifiersep> attribute ( xml <identifiersep> constants . access <identifiersep> external <identifiersep> dtd , <string_literal> ) ; \n \t5 transformer <identifiersep> factory . set <identifiersep> attribute ( xml <identifiersep> constants . access <identifiersep> external <identifiersep> stylesheet , <string_literal> ) ; \n \t4 } catch ( exception ignored ) { \n \t5 <comment> \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + cmd . get <identifiersep> storage <identifiersep> id ( ) + <string_literal> + cmd . get <identifiersep> local <identifiersep> path ( ) + <string_literal> + cmd . get <identifiersep> pooltype ( ) + <string_literal> + capacity \n \t7 + <string_literal> + free + <string_literal> + used ) ; } \n \t4 if ( summary . get <identifiersep> capacity ( ) < = 0 ) { \n <ect>
\t3 open . decrement <identifiersep> and <identifiersep> get ( ) ; \n \t3 return false ; \n \t2 } catch ( connection <identifiersep> exception e ) { \n \t3 open . decrement <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t3 dropped = dropped . trim ( ) ; } \n \t2 try { \n \t3 this . ch . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n <ect>
\t1 connection connection = get <identifiersep> connection ( ) ; \n \t1 try { \n \t1 statement = connection . create <identifiersep> statement ( ) ; \n \t1 string query = get <identifiersep> bounding <identifiersep> vals <identifiersep> query ( ) ; \n <ect>
public execute <identifiersep> async <identifiersep> script ( string mapped <identifiersep> uri ) { \n \t1 super ( mapped <identifiersep> uri ) ; } \n @ override \n public response safe <identifiersep> handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n <ect>
\t5 try { \n \t6 <comment> \n \t6 string [ ] hbase <identifiersep> args = { <string_literal> , new file ( export <identifiersep> dir , <string_literal> ) . get <identifiersep> absolute <identifiersep> path ( ) , <string_literal> , \n \t8 project <identifiersep> names , <string_literal> , <string_literal> , <string_literal> , <string_literal> } ; \n <ect>
\t4 @ override \n \t4 public void run ( build <identifiersep> operation <identifiersep> context context ) { \n \t5 for ( file file : files <identifiersep> to <identifiersep> delete ) { \n \t6 if ( file . exists ( ) ) { \n <ect>
\t5 send <identifiersep> tree <identifiersep> requests <identifiersep> internal ( endpoints ) ; } \n \t4 public void on <identifiersep> failure ( throwable throwable ) \n \t4 { \n \t5 <comment> \n <ect>
\t4 to <identifiersep> register . set <identifiersep> float ( <string_literal> , 1 . 0f ) ; \n \t4 fml <identifiersep> inter <identifiersep> mod <identifiersep> comms . send <identifiersep> message ( <string_literal> , <string_literal> , to <identifiersep> register ) ; } \n \t3 catch ( final java . lang . runtime <identifiersep> exception err ) \n \t3 { \n <ect>
\t3 buffer . append ( ' ] ' ) ; \n \t3 return buffer . to <identifiersep> string ( ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t3 print <identifiersep> writer print <identifiersep> writer = new print <identifiersep> writer ( new file <identifiersep> writer ( get <identifiersep> file ( filename ) ) ) ; \n \t3 print <identifiersep> writer . write ( json . to <identifiersep> json <identifiersep> string ( o ) ) ; \n \t3 print <identifiersep> writer . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( introspection <identifiersep> support . get <identifiersep> properties ( endpoint <identifiersep> configuration , properties , null , false ) ) { \n \t3 names = properties . key <identifiersep> set ( ) ; \n \t3 <comment> \n \t3 names . remove <identifiersep> all ( component <identifiersep> config <identifiersep> fields ) ; } \n <ect>
\t2 return coordinator <identifiersep> state ; } \n \t1 @ override \n \t1 public void attach ( transaction <identifiersep> coordinator <identifiersep> state coordinator <identifiersep> state ) { \n \t2 if ( track <identifiersep> attach <identifiersep> detach ) \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> + target . get <identifiersep> class ( ) . get <identifiersep> canonical <identifiersep> name ( ) , e ) ; \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + target . get <identifiersep> class ( ) . get <identifiersep> canonical <identifiersep> name ( ) , e ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t1 private void register <identifiersep> bean ( object o , object <identifiersep> name name ) { \n \t2 synchronized ( registered <identifiersep> beans ) { \n \t3 try { \n \t4 if ( mbean <identifiersep> server . is <identifiersep> registered ( name ) ) { \n <ect>
\t1 thread <identifiersep> one . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 job <identifiersep> acquisition <identifiersep> thread thread <identifiersep> two = new job <identifiersep> acquisition <identifiersep> thread ( ) ; \n \t1 thread <identifiersep> two . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n <ect>
\t3 assert <identifiersep> equals ( <string_literal> , new <identifiersep> working <identifiersep> directory ) ; \n \t3 ftp . disconnect ( ) ; \n \t3 tx . success ( ) ; \n \t2 } catch ( io <identifiersep> exception | framework <identifiersep> exception ex ) { \n <ect>
\t3 } else { <comment> \n \t3 simple <identifiersep> workflow <identifiersep> service <identifiersep> name = <string_literal> } \n \t3 try { \n \t3 service <identifiersep> configurations . lookup <identifiersep> by <identifiersep> name ( simple <identifiersep> workflow , simple <identifiersep> workflow <identifiersep> service <identifiersep> name ) \n <ect>
\t6 if ( i < usages . size ( ) ) { \n \t7 usage = <string_literal> + usages . get ( i ) ; } } \n \t5 s <identifiersep> logger . info ( <string_literal> + desc + usage ) ; } } \n \t2 } else { \n <ect>
\t1 json <identifiersep> object object = new json <identifiersep> object ( ) ; \n \t1 object . put ( <string_literal> , job ) ; \n \t1 return response . ok ( object ) . build ( ) ; \n \t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n <ect>
\t5 font . truetype <identifiersep> font , in ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . info ( <string_literal> + name + <string_literal> ) ; \n \t2 } catch ( font <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 public list < exception > validate ( ) { \n \t2 try { \n \t3  <identifiersep> pkg . validate ( ) ; \n \t2 } catch ( validation <identifiersep> exception | io <identifiersep> exception | data <identifiersep> package <identifiersep> exception e ) { \n <ect>
\t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 log . error ( e , <string_literal> ) ; \n \t3 throw new runtime <identifiersep> exception ( e ) ; \n \t2 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t3 return ; } \n \t2 log . info ( <string_literal> , seed <identifiersep> mount . get <identifiersep> name ( ) ) ; \n \t2 log . info ( <string_literal> , include <identifiersep> paths ) ; \n \t2 log . info ( <string_literal> , exclude <identifiersep> paths ) ; \n <ect>
\t5 solution <identifiersep> set <identifiersep> update <identifiersep> barrier . wait <identifiersep> for <identifiersep> solution <identifiersep> set <identifiersep> update ( ) ; } \n \t4 <comment> \n \t4 superstep <identifiersep> result = back <identifiersep> channel . get <identifiersep> read <identifiersep> end <identifiersep> after <identifiersep> superstep <identifiersep> ended ( ) ; \n <ect>
\t6 ( ( response <identifiersep> code <identifiersep> url <identifiersep> mapping ) url <identifiersep> mapping ) . set <identifiersep> exception <identifiersep> type ( ex <identifiersep> class ) ; \n \t5 } else { \n \t6 log . error ( <string_literal> + exception <identifiersep> arg + <string_literal> ) ; } \n \t4 } else { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 cleanup <identifiersep> lb <identifiersep> vm <identifiersep> maps ( conn ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t1 public ticket <identifiersep> catalog ticket <identifiersep> catalog ( final list < ticket <identifiersep> catalog <identifiersep> configurer > configurers ) { \n \t2 final default <identifiersep> ticket <identifiersep> catalog plan = new default <identifiersep> ticket <identifiersep> catalog ( ) ; \n \t2 configurers . for <identifiersep> each ( c - > { \n \t3 final string name = string <identifiersep> utils . remove <identifiersep> pattern ( c . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , <string_literal> ) ; \n <ect>
class some <identifiersep> transactional <identifiersep> with <identifiersep> never { \n \t1 @ transactional ( type = tx <identifiersep> type . never ) \n \t1 void do <identifiersep> stuff ( ) { \n \t1 outer <identifiersep> txn = ebean . current <identifiersep> transaction ( ) ; \n <ect>
\t3 tm <identifiersep> handler handler = entry . get <identifiersep> value ( ) ; \n \t3 handler . cleanup ( ) ; } \n \t2 handlers . clear ( ) ; \n \t2 thread <identifiersep> pools . shutdown <identifiersep> now ( ) ; \n <ect>
\t3 serial <identifiersep> port . remove <identifiersep> event <identifiersep> listener ( ) ; \n \t3 serial <identifiersep> port = null ; \n \t3 out = null ; \n \t3 in = null ; \n <ect>
\t1 protected active <identifiersep> mq <identifiersep> connection <identifiersep> factory create <identifiersep> broker <identifiersep> two <identifiersep> http <identifiersep> connection <identifiersep> factory ( ) { \n \t2 return new active <identifiersep> mq <identifiersep> connection <identifiersep> factory ( <string_literal> ) ; } \n \t1 @ before \n \t1 public void set <identifiersep> up ( ) throws exception { \n <ect>
\t1 configuration : configuration , \n \t1 high <identifiersep> availability <identifiersep> services : high <identifiersep> availability <identifiersep> services , \n \t1 task <identifiersep> manager <identifiersep> class : class [  <identifiersep>  < : task <identifiersep> manager ] ) \n \t1 : unit = { \n <ect>
\t2 if ( should <identifiersep> cache <identifiersep> result && response != null ) { \n \t3 try { \n \t4 erxwo <identifiersep> response <identifiersep> cache . shared <identifiersep> instance ( ) . cache <identifiersep> response <identifiersep> for <identifiersep> request ( action <identifiersep> class , action <identifiersep> name , request , response ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 final framework <identifiersep> exception fex = ( framework <identifiersep> exception ) t ; \n \t4 logger . error ( fex . to <identifiersep> string ( ) ) ; \n \t4 content = error <identifiersep> page ( fex ) ; \n \t3 } else { \n <ect>
\t4 try { \n \t5 sync <identifiersep> command . import <identifiersep> from <identifiersep> file ( graph <identifiersep> db , security <identifiersep> context . get <identifiersep> super <identifiersep> user <identifiersep> instance ( ) , seed <identifiersep> file . get <identifiersep> absolute <identifiersep> file ( ) . get <identifiersep> absolute <identifiersep> path ( ) , false ) ; \n \t4 } catch ( framework <identifiersep> exception fex ) { \n \t5 logger . warn ( <string_literal> , fex ) ; } } \n <ect>
\t3 result . tsnpe = ( t <identifiersep> sample <identifiersep> not <identifiersep> present <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> tsnpe <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> destination <identifiersep> wildcard <identifiersep> three <identifiersep> entries ( ) throws exception { \n <ect>
\t1 public void begin ( ) { } \n \t1 @ override \n \t1 public void commit ( ) { \n \t2 try { \n <ect>
\t4 if ( ! ( sdf . format ( last ) . equals ( sdf . format ( now ) ) ) ) { \n \t5 scheduled <identifiersep> filename = base <identifiersep> file <identifiersep> name + sdf . format ( last ) ; \n \t5 log <identifiersep> log . debug ( <string_literal> + scheduled <identifiersep> filename ) ; \n \t5 roll <identifiersep> over <identifiersep> time ( ) ; } } } \n <ect>
\t1 public void fatal <identifiersep> error ( transformer <identifiersep> exception e ) throws transformer <identifiersep> exception { \n \t1 log . error ( <string_literal> + e . get <identifiersep> message <identifiersep> and <identifiersep> location ( ) , e ) ; \n \t1 throw e ; } \n \t1 public void warning ( transformer <identifiersep> exception e ) throws transformer <identifiersep> exception { \n <ect>
\t3 <comment> \n \t3 string <identifiersep> entity cmd <identifiersep> json = new string <identifiersep> entity ( json <identifiersep> cmd ) ; \n \t3 request . add <identifiersep> header ( <string_literal> , <string_literal> ) ; \n \t3 request . add <identifiersep> header ( <string_literal> , <string_literal> + session <identifiersep> id ) ; \n <ect>
\t3 server . set <identifiersep> directory <identifiersep> service ( ds ) ; \n \t3 server . start ( ) ; \n \t2 } catch ( throwable t ) { \n \t3 t . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t5 public void run ( ) throws exception { \n \t6 listener . element <identifiersep> changed ( extra <identifiersep> event ) ; } \n \t4 } ) ; \n \t4 if ( model <identifiersep> config . verbose ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 } else { \n \t3 to <identifiersep> string <identifiersep> builder tsb = new to <identifiersep> string <identifiersep> builder ( this , to <identifiersep> string <identifiersep> style . short <identifiersep> prefix <identifiersep> style ) \n \t5 . append ( <string_literal> , weather . get <identifiersep> provider ( ) ) . append ( <string_literal> , cond . get <identifiersep> id ( ) ) \n \t5 . append ( <string_literal> , cond . get <identifiersep> icon ( ) ) ; \n <ect>
\t2 try { \n \t3 m <identifiersep> bean <identifiersep> server mbs = management <identifiersep> factory . get <identifiersep> platform <identifiersep> m <identifiersep> bean <identifiersep> server ( ) ; \n \t3 jmx <identifiersep> configurator . unregister ( channel , mbs , channel . get <identifiersep> cluster <identifiersep> name ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 log . debug ( <string_literal> , body , cluster <identifiersep> name ) ; \n \t3 if ( destination <identifiersep> address != null ) { \n \t4 log . debug ( <string_literal> , destination <identifiersep> address ) ; } \n \t3 if ( source <identifiersep> address != null ) { \n <ect>
\t2 } else if ( cmd instanceof set <identifiersep> static <identifiersep> nat <identifiersep> rules <identifiersep> command ) { \n \t3 s <identifiersep> logger . info ( <string_literal> ) ; \n \t3 <comment> \n \t2 } else if ( cmd instanceof load <identifiersep> balancer <identifiersep> config <identifiersep> command ) { \n <ect>
\t5 x509authentication <identifiersep> provider auth <identifiersep> provider = \n \t7 ( x509authentication <identifiersep> provider ) \n \t9 provider <identifiersep> registry . get <identifiersep> provider ( auth <identifiersep> provider <identifiersep> prop ) ; \n \t5 if ( auth <identifiersep> provider == null ) { \n <ect>
\t3 enumeration < url > resources = get <identifiersep> class ( ) . get <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> resources ( <string_literal> ) ; \n \t3 while ( resources . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t4 load <identifiersep> bundles <identifiersep> from <identifiersep> uri ( resources . next <identifiersep> element ( ) . to <identifiersep> uri ( ) ) ; } \n \t2 } catch ( io <identifiersep> exception | uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t2 group <identifiersep> view = lb . get <identifiersep> group ( ) ; } \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n \t1 return ; \n \t1 } catch ( exception ex ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void group <identifiersep> write ( process <identifiersep> event e ) { \n <ect>
\t3 if ( ! result . first ( ) ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + result . second ( ) ) ; \n \t4 return new answer ( cmd , false , <string_literal> + result . second ( ) ) ; } \n <ect>
\t5  <identifiersep> ugent <identifiersep> task <identifiersep> pool . submit ( new server <identifiersep> handler ( task . type . other ,  <identifiersep> link ,  <identifiersep> request ) ) ; \n \t4 } else { \n \t5  <identifiersep> link . schedule ( new server <identifiersep> handler ( task . type . other ,  <identifiersep> link ,  <identifiersep> request ) ) ; } \n \t3 } catch ( final closed <identifiersep> channel <identifiersep> exception e ) { \n <ect>
\t5 cms <identifiersep> user user = ( ( set < cms <identifiersep> user > ) get <identifiersep> value ( ) ) . iterator ( ) . next ( ) ; \n \t5 try { \n \t6 open <identifiersep> info <identifiersep> dialog ( user . get <identifiersep> id ( ) ) ; \n \t5 } catch ( cms <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void validate ( object obj , errors errors ) throws api <identifiersep> exception { \n <ect>
\t3 <comment> \n \t3 log . warn ( <string_literal> + minimum <identifiersep> pct + \n \t5 <string_literal> ) ; \n \t3 final insert <identifiersep> size <identifiersep> metrics <identifiersep> collector . per <identifiersep> unit <identifiersep> insert <identifiersep> size <identifiersep> metrics <identifiersep> collector all <identifiersep> reads <identifiersep> collector = ( insert <identifiersep> size <identifiersep> metrics <identifiersep> collector . per <identifiersep> unit <identifiersep> insert <identifiersep> size <identifiersep> metrics <identifiersep> collector ) multi <identifiersep> collector . get <identifiersep> all <identifiersep> reads <identifiersep> collector ( ) ; \n <ect>
\t4 new object [ 0 ] ) ; \n \t2 erl <identifiersep> logger . debug ( <string_literal> + res ) ; \n \t2 res = mb . call <identifiersep> noexception ( <string_literal> , <string_literal> , <string_literal> , \n \t4 new otp <identifiersep> erlang <identifiersep> list ( ) ) ; \n <ect>
\t3 req . tag <identifiersep> released ( ) ; } } \n \t1 @ override \n \t1 public void on <identifiersep> connect ( final long status , final nginx <identifiersep> request req ) { \n <ect>
\t3 } else { \n \t4 s <identifiersep> logger . error ( <string_literal> + url ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + url ) ; } \n \t2 } else { \n <ect>
\t3 if ( stdout <identifiersep> thread != null ) { \n \t4 stdout <identifiersep> thread . join ( 0 ) ; } \n \t3 stdout <identifiersep> thread = null ; \n \t2 } catch ( interrupted <identifiersep> exception ie ) { \n <ect>
\t5 build <identifiersep> number = integer . parse <identifiersep> int ( build <identifiersep> number <identifiersep> str ) ; \n \t5 if ( build <identifiersep> number < last <identifiersep> good <identifiersep> main <identifiersep> build <identifiersep> number ) \n \t6 return true ; \n \t5 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 hash <identifiersep> map < string , integer > expected <identifiersep> events = new hash <identifiersep> map < string , integer > ( ) ; \n \t2 expected <identifiersep> events . put ( <string_literal> , 1 ) ; \n \t2 boolean event <identifiersep> result = api <identifiersep> command . verify <identifiersep> events ( expected <identifiersep> events , <string_literal> , <string_literal> + this . get <identifiersep> param ( ) . get ( <string_literal> ) + <string_literal> , <string_literal> + this . get <identifiersep> param ( ) . get ( <string_literal> ) + <string_literal> ) ; \n <ect>
\t3 wm <identifiersep> event . end <identifiersep> event ( to <identifiersep> kill ) ; \n \t3 log . debug ( <string_literal> + query <identifiersep> id ) ; \n \t3 return ; \n \t3 } catch ( hive <identifiersep> exception ex ) { \n <ect>
\t1 @ override \n \t1 public void process <identifiersep> result ( int rc , string path , object ctx , byte [ ] bytes , stat stat ) \n \t1 { \n \t1 keeper <identifiersep> exception . code code = keeper <identifiersep> exception . code . get ( rc ) ; \n <ect>
\t3 file <identifiersep> name = form <identifiersep> file . get <identifiersep> file <identifiersep> name ( ) ; \n \t4  <identifiersep> log . info ( <string_literal> + file <identifiersep> name ) ; \n \t4  <identifiersep> log . info ( <string_literal> + form <identifiersep> file . get <identifiersep> content <identifiersep> type ( ) ) ; \n <ect>
\t1 public void async <identifiersep> call ( ) { \n \t2 async <identifiersep> job <identifiersep> manager async <identifiersep> mgr = component <identifiersep> locator . get <identifiersep> locator ( management <identifiersep> server . name ) . get <identifiersep> manager ( async <identifiersep> job <identifiersep> manager . class ) ; \n <comment> \n \t2 long job <identifiersep> id = 0l ; \n <ect>
<comment> \n \t1 private provider <identifiersep> name get <identifiersep> provider <identifiersep> name ( string name ) throws configuration <identifiersep> exception { \n \t2 provider <identifiersep> name provider <identifiersep> name = provider <identifiersep> name . parse ( name ) ; \n \t2 if ( provider <identifiersep> name == null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void set <identifiersep> value ( percent <identifiersep> type new <identifiersep> value , device <identifiersep> options opts ) { \n <ect>
\t1 h <identifiersep> consistency <identifiersep> level wcf = write <identifiersep> cf <identifiersep> consistency <identifiersep> levels . get ( cf <identifiersep> name ) ; \n \t1 return wcf != null ? wcf : default <identifiersep> write <identifiersep> consistency <identifiersep> level ; } } \n public void set <identifiersep> read <identifiersep> cf <identifiersep> consistency <identifiersep> levels ( map < string , h <identifiersep> consistency <identifiersep> level > column <identifiersep> family <identifiersep> consistency <identifiersep> levels ) { \n \t1 this . read <identifiersep> cf <identifiersep> consistency <identifiersep> levels = column <identifiersep> family <identifiersep> consistency <identifiersep> levels ; \n <ect>
\t1 params . hdfs <identifiersep> resource ( none , action = <string_literal> ) \n directory ( params . hive <identifiersep> interactive <identifiersep> etc <identifiersep> dir <identifiersep> prefix , \n \t3 mode = <number_literal> \n \t3 ) \n <ect>
\t4 channel . attr ( read <identifiersep> suspended ) . set ( false ) ; \n \t4 config . set <identifiersep> auto <identifiersep> read ( true ) ; \n \t4 channel . read ( ) ; } \n <ect>
\t3 tr <identifiersep> row6 . append <identifiersep> child ( cell61 , cell62 ) \n \t3 tooltip <identifiersep> manager . append <identifiersep> row ( tr <identifiersep> row6 ) \n \t3 return tooltip <identifiersep> manager . create ( ) . write ( ) \n \t2 } catch ( e : exception ) { \n <ect>
\t1 <comment> \n \t1 for ( string table : tables ) { \n \t2 functional <identifiersep> test <identifiersep> utils . check <identifiersep> r <identifiersep> files ( c , table , 1 , 1 , 1 , 1 ) ; } \n \t1 <comment> \n <ect>
\t5 cctx . config ( ) . get <identifiersep> interceptor ( ) . on <identifiersep> after <identifiersep> remove ( key , old ) ; \n \t4 if ( intercept <identifiersep> res != null ) \n \t5 old = cctx . unwrap <identifiersep> temporary ( intercept <identifiersep> res . get2 ( ) ) ; } } \n <ect>
\t3 return answer . create <identifiersep> unsupported <identifiersep> command <identifiersep> answer ( cmd ) ; } \n \t2 return answer . create <identifiersep> unsupported <identifiersep> command <identifiersep> answer ( cmd ) ; } \n \t1 public primary <identifiersep> storage <identifiersep> download <identifiersep> answer execute ( primary <identifiersep> storage <identifiersep> download <identifiersep> command cmd ) { \n <ect>
\t5 for ( int i = 0 ; i < prc . size ( ) ; i ++ ) { \n \t6 package <identifiersep> part package <identifiersep> part = document <identifiersep> part . get <identifiersep> related <identifiersep> part ( prc . get <identifiersep> relationship ( i ) ) ; \n \t6 handle <identifiersep> part ( package <identifiersep> part , xwpf <identifiersep> list <identifiersep> manager , sb ) ; } } \n \t3 } catch ( invalid <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t5 if ( inet <identifiersep> addrs != null && ! inet <identifiersep> addrs . is <identifiersep> empty ( ) ) { <comment> \n \t6 s . join <identifiersep> group ( group <identifiersep> addr , i ) ; \n \t6 log . trace ( <string_literal> , group <identifiersep> addr , i . get <identifiersep> name ( ) ) ; } } } \n \t3 catch ( exception e ) { <comment> \n <ect>
\t1 @ override \n \t1 public void process <identifiersep> message ( final web <identifiersep> socket <identifiersep> message web <identifiersep> socket <identifiersep> data ) { \n \t2 final string type = ( string ) web <identifiersep> socket <identifiersep> data . get <identifiersep> node <identifiersep> data ( ) . get ( <string_literal> ) ; \n \t2 if ( type == null ) { \n <ect>
\t6 if ( r . get <identifiersep> identifier ( ) . equals ( identifier ) ) { \n \t7 req = r ; \n \t7 running <identifiersep> persistent <identifiersep> requests . remove ( r ) ; \n \t7 removed <identifiersep> from <identifiersep> running = true ; \n <ect>
\t3 <comment> \n \t3 final message m = new message ( ) . set <identifiersep> unique <identifiersep> key ( key ) ; \n \t3 log . info ( <string_literal> + m ) ; \n \t3 final string message <identifiersep> id2 = producer . send <identifiersep> message ( m ) ; \n <ect>
\t3 cache <identifiersep> only . remove <identifiersep> all ( exp <identifiersep> vals . key <identifiersep> set ( ) ) ; \n \t3 if ( ! exp <identifiersep> only . is <identifiersep> empty ( ) ) \n \t4 log . error ( <string_literal> + exp <identifiersep> only ) ; \n \t3 if ( ! cache <identifiersep> only . is <identifiersep> empty ( ) ) \n <ect>
\t1 san <identifiersep> snapshot = lookup ( snapshot <identifiersep> id ) ; \n \t1 san <identifiersep> snapshot <identifiersep> id = san <identifiersep> snapshot . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) ; \n \t1 iqn = san <identifiersep> snapshot . get <identifiersep> iqn ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t2 list < registered <identifiersep> yarn <identifiersep> worker <identifiersep> node > accepted = new array <identifiersep> list < > ( ) ; \n \t2 for ( resource <identifiersep> id resource <identifiersep> id : to <identifiersep> consolidate ) { \n \t3 yarn <identifiersep> container <identifiersep> in <identifiersep> launch yci = containers <identifiersep> in <identifiersep> launch . remove ( resource <identifiersep> id ) ; \n \t3 if ( yci != null ) { \n <ect>
\t2 file <identifiersep> system file <identifiersep> system = job <identifiersep> scratch <identifiersep> dir . get <identifiersep> file <identifiersep> system ( hive <identifiersep> conf ) ; \n \t2 file <identifiersep> system . delete ( job <identifiersep> scratch <identifiersep> dir , true ) ; } \n \t1 <comment> \n \t1 catch ( throwable e ) { \n <ect>
\t2 assert <identifiersep> equals ( response <identifiersep> code , <number_literal> ) ; \n \t2 conn . disconnect ( ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> get <identifiersep> all <identifiersep> with <identifiersep> non <identifiersep> existing <identifiersep> key ( ) { \n <ect>
\t1 { \n \t1 @ override \n \t1 public void run ( ) \n \t1 { \n <ect>
\t4 final discovery <identifiersep> nodes . delta nodes <identifiersep> delta = cluster <identifiersep> changed <identifiersep> event . nodes <identifiersep> delta ( ) ; \n \t5 string node <identifiersep> summary = nodes <identifiersep> delta . short <identifiersep> summary ( ) ; \n \t5 if ( node <identifiersep> summary . length ( ) > 0 ) { \n <ect>
\t4 try { \n \t5 thread . sleep ( retry <identifiersep> delay ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n \t5 return false ; <comment> \n <ect>
@ override \n public void start ( ) { \n \t1 for ( view view : views ) { \n \t1 string page <identifiersep> or <identifiersep> widget = view instanceof widget ? <string_literal> : <string_literal> ; \n <ect>
\t3  <identifiersep> log . info ( <string_literal> + socket . get <identifiersep> peer <identifiersep> destination ( ) . calculate <identifiersep> hash ( ) . to <identifiersep> base64 ( ) \n \t6 + <string_literal> + base64 . encode ( peer <identifiersep> info <identifiersep> hash ) ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 socket = new socket ( ip <identifiersep> address , ip <identifiersep> port ) ; \n \t3 in = socket . get <identifiersep> input <identifiersep> stream ( ) ; \n \t3 out = socket . get <identifiersep> output <identifiersep> stream ( ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t4 try { \n \t5 entry . export <identifiersep> to <identifiersep> file ( entry <identifiersep> file <identifiersep> name ) ; \n \t4 } catch ( exception e ) { \n \t5 soap <identifiersep> ui . log <identifiersep> error ( e ) ; } } } \n <ect>
\t5 if ( os <identifiersep> version <identifiersep> minor < <number_literal> ) { \n \t6 logger . warn ( <string_literal> ) ; \n \t6 logger . warn ( <string_literal> ) ; \n \t6 logger . warn ( <string_literal> ) ; \n <ect>
\t3 add <identifiersep> materialized <identifiersep> view ( db . get <identifiersep> conf ( ) , mv , op <identifiersep> type . load ) ; } } \n \t2 initialized . set ( true ) ; \n \t2 log . info ( <string_literal> ) ; \n \t1 } catch ( hive <identifiersep> exception e ) { \n <ect>
\t2 if ( use <identifiersep> wait <identifiersep> for <identifiersep> space <identifiersep> thread ) { \n \t3 try { \n \t4 wait <identifiersep> for <identifiersep> space <identifiersep> thread . join ( <number_literal> ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public long get <identifiersep> output <identifiersep> size ( po <identifiersep> store sto , configuration conf ) throws io <identifiersep> exception { \n \t2 if ( ! supports ( sto , conf ) ) { \n <ect>
\t1 public static void ignore <identifiersep> and <identifiersep> log ( unchecked <identifiersep> runnable runnable ) { \n \t2 try { \n \t3 runnable . run ( ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 ( ( active <identifiersep> mq <identifiersep> connection ) connection ) . add <identifiersep> transport <identifiersep> listener ( this ) ; \n \t2 assert <identifiersep> true ( <string_literal> , got <identifiersep> exception . await ( <number_literal> , time <identifiersep> unit . seconds ) ) ; \n \t2 assert <identifiersep> null ( <string_literal> + reconnect <identifiersep> exception , reconnect <identifiersep> exception ) ; } \n \t1 public void on <identifiersep> exception ( jms <identifiersep> exception exception ) { \n <ect>
\t3 <string_literal> . format ( llap <identifiersep> app <identifiersep> name , llap <identifiersep> app <identifiersep> info [ 'state' ] ) ) \n \t2 logger . info ( llap <identifiersep> app <identifiersep> info ) \n \t2 return false \n \t2 if desired <identifiersep> instances == 0 : \n <ect>
\t5 house <identifiersep> keeper . abandoned <identifiersep> subscriptions . add ( con <identifiersep> client <identifiersep> id ) ; } \n \t3 } catch ( throwable e ) { \n \t4 exit ( to <identifiersep> string ( ) + <string_literal> , e ) ; } \n \t3 client <identifiersep> manager . remove <identifiersep> client ( this ) ; \n <ect>
\t6 string [ ] parts = line . split ( <string_literal> ) ; \n \t6 int i = 0 ; \n \t6 if (  <identifiersep> mode == dg ) { \n \t7 string dest = parts [ 0 ] ; \n <ect>
\t2 assert <identifiersep> true ( response <identifiersep> body instanceof integer ) ; \n \t2 assert <identifiersep> equals ( thrift <identifiersep> test <identifiersep> num1 * thrift <identifiersep> test <identifiersep> num2 , response <identifiersep> body ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> void <identifiersep> method <identifiersep> invocation ( ) throws exception { \n <ect>
\t3 when ( value ) { \n \t4 null - > span ( ) . write ( ) \n \t4 else - > span ( ) . append <identifiersep> text ( value as string ) . write ( ) } \n \t2 } catch ( e : exception ) { \n <ect>
\t1 <comment> \n \t1 try { \n \t2 hook <identifiersep> runner . run <identifiersep> after <identifiersep> execution <identifiersep> hook ( query <identifiersep> str , hook <identifiersep> context , execution <identifiersep> error ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 list < integer > node <identifiersep> id <identifiersep> list = new array <identifiersep> list < integer > ( ) ; \n \t3 for ( int partition : partition <identifiersep> list ) { \n \t4 node <identifiersep> id <identifiersep> list . add ( partition <identifiersep> to <identifiersep> node [ partition ] . get <identifiersep> id ( ) ) ; } \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t2 { \n \t3 swing <identifiersep> utilities . invoke <identifiersep> and <identifiersep> wait ( creator ) ; } \n \t2 catch ( interrupted <identifiersep> exception e ) \n \t2 { \n <ect>
\t4 } else { \n \t5 log . warn ( <string_literal> <string_literal> \\ <string_literal> ) ; } } } \n \t2 local <identifiersep> schemas = result . to <identifiersep> string ( ) ; \n <ect>
\t2 <comment> \n \t2 try { \n \t3 drop <identifiersep> table <identifiersep> if <identifiersep> exists ( <string_literal> ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 drop <identifiersep> local <identifiersep> user <identifiersep> result result = new drop <identifiersep> local <identifiersep> user <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t3 destination <identifiersep> object <identifiersep> name <identifiersep> map . put ( bridge , m <identifiersep> bean <identifiersep> bridge <identifiersep> destination ) ; \n \t3 m <identifiersep> bean <identifiersep> bridge <identifiersep> destination . start ( ) ; \n \t3 log . debug ( <string_literal> , bridge , object <identifiersep> name ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t1 } finally { \n \t1 try { \n \t2 in . close ( ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> + columns [ <number_literal> ] + \n \t4 <string_literal> + line ) ; } \n \t1 } else { \n <ect>
\t4 log . debug ( <string_literal> , \n \t6 local <identifiersep> addr , msg . get <identifiersep> src ( ) , util . byte <identifiersep> array <identifiersep> to <identifiersep> hex <identifiersep> string ( key <identifiersep> version ) ) ; \n \t4 set <identifiersep> keys ( tmp , key <identifiersep> version ) ; } } \n \t2 catch ( exception e ) { \n <ect>
\t2 try { \n \t3 bean <identifiersep> name = get <identifiersep> object <identifiersep> name ( ) ; \n \t3 server . unregister <identifiersep> m <identifiersep> bean ( bean <identifiersep> name ) ; \n \t2 } catch ( instance <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 bug . set <identifiersep> state ( random <identifiersep> state ( ) ) ; \n \t3 bug . set <identifiersep> is <identifiersep> feature <identifiersep> request ( i % <number_literal> == 0 ) ; \n \t3 bug . set <identifiersep> target <identifiersep> release ( random <identifiersep> release ( ) ) ; \n \t3 add <identifiersep> comments ( bug ) ; } \n <ect>
\t1 private file attachment <identifiersep> to <identifiersep> file ( string attachment ) { <comment> \n \t2 file file = new file ( attachment ) ; \n \t2 if ( ! file . is <identifiersep> absolute ( ) && ! file . exists ( ) ) { \n <ect>
\t2 if ( repository <identifiersep> config != null ) \n \t3 return ; \n \t2 if ( this . configuration == null ) { \n <ect>
\t7 buf . append ( con ) ; \n \t7 buf . append ( <string_literal> ) ; \n \t7 for ( connection cur :  <identifiersep> manager . list <identifiersep> connections ( ) ) { \n \t8 buf . append ( ' \\ n' ) . append ( cur ) ; } \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 server = new test <identifiersep> zookeeper <identifiersep> server ( get <identifiersep> server <identifiersep> port ( ) , clear <identifiersep> server <identifiersep> data ( ) ) ; \n \t2 wait <identifiersep> for <identifiersep> server <identifiersep> up ( <string_literal> + get <identifiersep> server <identifiersep> port ( ) , <number_literal> ) ; \n \t2 client = new test <identifiersep> zookeeper <identifiersep> client ( get <identifiersep> server <identifiersep> port ( ) , get <identifiersep> test <identifiersep> client <identifiersep> session <identifiersep> timeout ( ) ) ; \n <ect>
\t3 logger . trace ( <string_literal> , item . get <identifiersep> name ( ) ) ; \n \t3 return ; } \n \t2 try { \n \t3 publisher . publish ( item , alias ) ; \n <ect>
\t2 if ( ! property . is <identifiersep> valid <identifiersep> zoo <identifiersep> property <identifiersep> key ( property ) ) { \n \t2 shell . log . warn ( <string_literal> + property \n \t3 + <string_literal> ) ; } \n \t2 shell <identifiersep> state . get <identifiersep> connector ( ) . instance <identifiersep> operations ( ) . remove <identifiersep> property ( property ) ; \n <ect>
\t2 try { \n \t3 if ( counters . contains ( name ) ) \n \t4 counters . dec ( name ) ; } \n \t2 catch ( exception ex ) { \n <ect>
\t3 ip <identifiersep> addresses . add ( port <identifiersep> ip <identifiersep> address ) ; \n \t3 l <identifiersep> router <identifiersep> port . set <identifiersep> ip <identifiersep> addresses ( ip <identifiersep> addresses ) ; \n \t3 l <identifiersep> router <identifiersep> port = nicira <identifiersep> nvp <identifiersep> api . create <identifiersep> logical <identifiersep> router <identifiersep> port ( logical <identifiersep> router <identifiersep> uuid , l <identifiersep> router <identifiersep> port ) ; } \n \t2 catch ( nicira <identifiersep> nvp <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t5 log . debug ( <string_literal> ) ; } \n \t4 compression <identifiersep> stream . flush ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 return true ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n \t3 if ( needs <identifiersep> commit ) { \n \t4 <comment> \n <ect>
\t2 class cls ; \n \t2 try { \n \t3 cls = class . for <identifiersep> name ( <string_literal> ) ; } \n \t2 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t6 else \n \t7 nsl . entry <identifiersep> added ( this , hostname , d , options ) ; } } \n \t4 return true ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 c . table <identifiersep> operations ( ) . add <identifiersep> splits ( table <identifiersep> name , splits ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 c . instance <identifiersep> operations ( ) . wait <identifiersep> for <identifiersep> balance ( ) ; \n \t1 final instance inst = c . get <identifiersep> instance ( ) ; \n <ect>
\t3 if ( physical <identifiersep> network <identifiersep> id == null ) { \n \t4 physical <identifiersep> network <identifiersep> id = find <identifiersep> physical <identifiersep> network <identifiersep> id ( network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , offering . get <identifiersep> tags ( ) , offering . get <identifiersep> traffic <identifiersep> type ( ) ) ; } } \n \t2 if ( physical <identifiersep> network <identifiersep> id == null ) { \n \t3 assert ( false ) : <string_literal> ; \n <ect>
\t2 if ( executor <identifiersep> future != null && executor <identifiersep> future . is <identifiersep> done ( ) ) { \n \t3 try { \n \t4 executor <identifiersep> future . get ( ) ; \n \t3 } catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t8 label = integer . to <identifiersep> string ( count . int <identifiersep> value ( ) ) + ' - ' + label ; } \n \t7 name = label ; \n \t7 data = ole . get <identifiersep> data <identifiersep> buffer ( ) ; } \n \t5 } catch ( ole10native <identifiersep> exception ex ) { \n <ect>
\t4 return false ; } \n \t3 if ( alt <identifiersep> ce2 . get <identifiersep> operator ( ) == cigar <identifiersep> operator . i || alt <identifiersep> ce2 . get <identifiersep> operator ( ) == cigar <identifiersep> operator . d ) { \n \t4 indel <identifiersep> ce = alt <identifiersep> ce2 ; \n \t3 } else { \n <ect>
\t2 list < volume <identifiersep> vo > vols =  <identifiersep> vols <identifiersep> dao . find <identifiersep> usable <identifiersep> volumes <identifiersep> for <identifiersep> instance ( vm . get <identifiersep> id ( ) ) ; \n \t2 list < volume > volumes <identifiersep> need <identifiersep> to <identifiersep> migrate = new array <identifiersep> list < volume > ( ) ; \n \t2 for ( volume <identifiersep> vo volume : vols ) { \n \t3 if ( volume . get <identifiersep> state ( ) != volume . state . ready ) { \n <ect>
\t3 pstmt . set <identifiersep> string ( <number_literal> , date <identifiersep> util . get <identifiersep> date <identifiersep> display <identifiersep> string ( time <identifiersep> zone . get <identifiersep> time <identifiersep> zone ( <string_literal> ) , dt ) ) ; \n \t3 pstmt . set <identifiersep> string ( <number_literal> , date <identifiersep> util . get <identifiersep> date <identifiersep> display <identifiersep> string ( time <identifiersep> zone . get <identifiersep> time <identifiersep> zone ( <string_literal> ) , dt ) ) ; \n \t3 pstmt . execute ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 public result process <identifiersep> input ( ) throws exec <identifiersep> exception { \n \t2 result res = new result ( ) ; \n \t2 map < string , object > inp <identifiersep> value = null ; \n \t2 if ( input == null && ( inputs == null || inputs . size ( ) == 0 ) ) { \n <ect>
\t3 if ( ! vn <identifiersep> model . verify (  <identifiersep> manager . get <identifiersep> model <identifiersep> controller ( ) ) ) { \n \t4 vn <identifiersep> model . update (  <identifiersep> manager . get <identifiersep> model <identifiersep> controller ( ) ) ; } \n \t3  <identifiersep> manager . get <identifiersep> database ( ) . get <identifiersep> virtual <identifiersep> networks ( ) . add ( vn <identifiersep> model ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t5 : component <identifiersep> manager . < notification <identifiersep> filter <identifiersep> preference <identifiersep> provider > get <identifiersep> instance <identifiersep> list ( \n \t5 notification <identifiersep> filter <identifiersep> preference <identifiersep> provider . class ) ) { \n \t4 provider . set <identifiersep> filter <identifiersep> preference <identifiersep> enabled ( filter <identifiersep> preference <identifiersep> name , enabled ) ; } \n \t2 } catch ( component <identifiersep> lookup <identifiersep> exception e ) { \n <ect>
\t3 <string_literal> , now ) , <string_literal> , <string_literal> , false , false ) ; \n \t1 stage . add <identifiersep> host <identifiersep> role <identifiersep> execution <identifiersep> command ( <string_literal> , role . hbase <identifiersep> regionserver , \n \t2 role <identifiersep> command . upgrade , new service <identifiersep> component <identifiersep> host <identifiersep> start <identifiersep> event ( <string_literal> , \n \t3 <string_literal> , now ) , <string_literal> , <string_literal> , false , false ) ; \n <ect>
\t2 details = null ; \n \t2 return new manage <identifiersep> snapshot <identifiersep> answer ( cmd , snapshot <identifiersep> id , snapshot <identifiersep> uuid , success , details ) ; } \n \t1 protected answer execute ( backup <identifiersep> snapshot <identifiersep> command cmd ) { \n <ect>
\t2 service <identifiersep> component sc = s . get <identifiersep> service <identifiersep> component ( sch . get <identifiersep> service <identifiersep> component <identifiersep> name ( ) ) ; \n \t2 if ( ! sc . is <identifiersep> client <identifiersep> component ( ) && \n \t3 sch . get <identifiersep> state ( ) . equals ( state . unknown ) ) { \n \t2 state last <identifiersep> valid <identifiersep> state = sch . get <identifiersep> last <identifiersep> valid <identifiersep> state ( ) ; \n <ect>
\t4 log . info ( <string_literal> + rsrc1 ) ; \n \t4 log . info ( <string_literal> + rsrc2 ) ; \n \t4 log . info ( <string_literal> + rsrc3 ) ; \n \t4 log . info ( <string_literal> + rsrc4 ) ; \n <ect>
\t3 web <identifiersep> socket <identifiersep> data . set <identifiersep> result ( arrays . as <identifiersep> list ( graph <identifiersep> object ) ) ; \n \t3 <comment> \n \t3 get <identifiersep> web <identifiersep> socket ( ) . send ( web <identifiersep> socket <identifiersep> data , true ) ; \n \t2 } else { \n <ect>
\t6 string key = ( string ) exchange . get <identifiersep> in ( ) . get <identifiersep> header ( cache <identifiersep> constants . cache <identifiersep> key ) ; \n \t6 object body = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( ) ; \n \t6 string data = exchange . get <identifiersep> context ( ) . get <identifiersep> type <identifiersep> converter ( ) . convert <identifiersep> to ( string . class , body ) ; \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 if ( throwable instanceof interrupted <identifiersep> exception ) { \n <ect>
\t8 for ( uuid attacker <identifiersep> id : group . get <identifiersep> attackers ( ) ) { \n \t9 sim . get <identifiersep> player ( active <identifiersep> player <identifiersep> id ) . declare <identifiersep> attacker ( attacker <identifiersep> id , defender <identifiersep> id , sim , false ) ; } } \n \t7 sim . fire <identifiersep> event ( game <identifiersep> event . get <identifiersep> event ( game <identifiersep> event . event <identifiersep> type . declared <identifiersep> attackers , player <identifiersep> id , player <identifiersep> id ) ) ; \n \t7 simulation <identifiersep> node new <identifiersep> node = new simulation <identifiersep> node ( node , sim , active <identifiersep> player <identifiersep> id ) ; \n <ect>
\t2 log . warn ( <string_literal> , resource ) ; \n \t2 group . replace ( resource , new array <identifiersep> list < resource > ( ) ) ; \n \t2 } else { \n \t2 final list < resource > expanded <identifiersep> resources = new array <identifiersep> list < resource > ( ) ; \n <ect>
\t1 } finally { \n \t1 try { \n \t2 replication <identifiersep> writer . flush ( ) ; \n \t1 } catch ( mutations <identifiersep> rejected <identifiersep> exception e ) { \n <ect>
\t4 expand <identifiersep> to = expand <identifiersep> to \n \t5 . replace <identifiersep> all ( <string_literal> , visitor . get <identifiersep> tool ( ) . get <identifiersep> id ( ( iri ) ax . get <identifiersep> subject ( ) ) ) ; \n \t4 expand <identifiersep> to = expand <identifiersep> to \n \t5 . replace <identifiersep> all ( <string_literal> , visitor . get <identifiersep> tool ( ) . get <identifiersep> id ( ( iri ) ax . get <identifiersep> value ( ) ) ) ; \n <ect>
<number_literal> s <identifiersep> logger . warn ( <string_literal> + vlan <identifiersep> id + <string_literal> + other <identifiersep> host <identifiersep> mo . get <identifiersep> host <identifiersep> name ( ) ) ; } } } } \n \t6 } finally { \n \t7 lock . unlock ( ) ; } \n \t5 } else { \n <ect>
\t4 log ( discovered <identifiersep> solution ) ; } \n \t3 memorize <identifiersep> if <identifiersep> best <identifiersep> ever ( discovered <identifiersep> solution ) ; \n \t3 selected <identifiersep> strategy ( discovered <identifiersep> solution , problem , solutions ) ; \n \t3 if ( termination <identifiersep> manager . is <identifiersep> premature <identifiersep> break ( discovered <identifiersep> solution ) ) { \n <ect>
\t2 return composite <identifiersep> property <identifiersep> source ; } \n \t1 private property <identifiersep> source < ? > load <identifiersep> settings <identifiersep> from <identifiersep> standalone <identifiersep> config <identifiersep> file ( final file config <identifiersep> file ) { \n \t2 final properties props = new properties ( ) ; \n \t2 try ( reader r = files . new <identifiersep> buffered <identifiersep> reader ( config <identifiersep> file . to <identifiersep> path ( ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ) { \n <ect>
\t3 options = caching <identifiersep> options . from <identifiersep> map ( get <identifiersep> map ( kw <identifiersep> caching ) ) ; \n \t2 else if ( val instanceof string ) <comment> \n \t2 { \n \t3 options = caching <identifiersep> options . from <identifiersep> string ( get <identifiersep> simple ( kw <identifiersep> caching ) ) ; \n <ect>
\t1 long last <identifiersep> check <identifiersep> point <identifiersep> time = - 1 ; \n \t1 try { \n \t1 last <identifiersep> check <identifiersep> point <identifiersep> time = read <identifiersep> check <identifiersep> point ( ) ; \n \t1 if ( last <identifiersep> check <identifiersep> point <identifiersep> time != - 1 ) { \n <ect>
\t6  <identifiersep> cmd . event <identifiersep> notifier . mark <identifiersep> event ( hystrix <identifiersep> event <identifiersep> type . cancelled ,  <identifiersep> cmd . command <identifiersep> key ) ; \n \t6 try { \n \t7 execution <identifiersep> hook . on <identifiersep> unsubscribe (  <identifiersep> cmd ) ; \n \t6 } catch ( throwable hook <identifiersep> ex ) { \n <ect>
\t1 bw . add <identifiersep> mutation ( m ) ; \n \t1 bw . close ( ) ; \n \t1 log . info ( <string_literal> , table <identifiersep> name ) ; \n \t1 conn . table <identifiersep> operations ( ) . online ( table <identifiersep> name , true ) ; \n <ect>
\t5 if ( d <identifiersep> pattern . matcher ( filename ) . find ( ) ) { \n \t6 log . error ( <string_literal> + filename ) ; \n \t6 return false ; } \n \t5 if ( h <identifiersep> pattern . matcher ( filename ) . find ( ) ) { \n <ect>
\t2 try { \n \t3 snapshot <identifiersep> format . delete ( snapshots <identifiersep> blob <identifiersep> container , blob <identifiersep> id ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 if ( snapshot <identifiersep> info != null ) { \n <ect>
\t2 log . error ( <string_literal> , e ) ; } \n \t1 } else { \n \t2 txn . commit ( ) ; \n \t2 status = status . backoff ; \n <ect>
\t1 string last <identifiersep> line = null ; \n \t1 string current <identifiersep> line = null ; \n \t1 while ( ( current <identifiersep> line = reader . read <identifiersep> line ( ) ) != null ) { \n \t2 last <identifiersep> line = current <identifiersep> line ; } \n <ect>
\t2 if ( fip <identifiersep> model != null ) { \n \t3 try { \n \t4 fip <identifiersep> model . destroy ( get <identifiersep> model <identifiersep> controller ( ) ) ; \n \t3 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 throw new repository <identifiersep> exception ( metadata . name ( ) , <string_literal> ) ; } \n \t2 path location <identifiersep> file = environment . resolve <identifiersep> repo <identifiersep> file ( location ) ; \n \t2 if ( location <identifiersep> file == null ) { \n \t3 if ( environment . repo <identifiersep> files ( ) . length > 0 ) { \n <ect>
\t3 try { \n \t4 crl . verify ( crl <identifiersep> issuer . get <identifiersep> public <identifiersep> key ( ) ) ; \n \t4 return true ; \n \t3 } catch ( general <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t2 find ( long dc <identifiersep> id , long pod <identifiersep> id , long cluster <identifiersep> id , uri uri , string username , string password , list < string > host <identifiersep> tags ) throws discovery <identifiersep> exception { \n \t2 cluster <identifiersep> vo cluster =  <identifiersep> cluster <identifiersep> dao . find <identifiersep> by <identifiersep> id ( cluster <identifiersep> id ) ; \n \t2 if ( cluster == null || cluster . get <identifiersep> hypervisor <identifiersep> type ( ) != get <identifiersep> hypervisor <identifiersep> type ( ) ) { \n <ect>
\t3 <comment> \n \t1 if ( all <identifiersep> closed ) { \n \t2 log . info ( <string_literal> + i ) ; \n \t2 return ; } } \n <ect>
\t3 logger . debug ( <string_literal> , def <identifiersep> class ) ; \n \t3 return def <identifiersep> class ; } \n \t2 final string final <identifiersep> ctx = string <identifiersep> utils . default <identifiersep> if <identifiersep> blank ( get <identifiersep> authentication <identifiersep> context <identifiersep> by <identifiersep> assertion ( assertion , \n \t4 requested <identifiersep> authn <identifiersep> context , authn <identifiersep> context <identifiersep> class <identifiersep> refs ) , def <identifiersep> class ) ; \n <ect>
\t6 + vm <identifiersep> name + <string_literal> + result ) ; } \n \t2 } catch ( exception e ) { \n \t3 return new check <identifiersep> ssh <identifiersep> answer ( cmd , e ) ; } \n <ect>
\t8 s <identifiersep> logger . warn ( <string_literal> + vm + <string_literal> + ( answer != null ? answer . get <identifiersep> details ( ) : <string_literal> ) ) ; \n \t8  <identifiersep> ha <identifiersep> mgr . schedule <identifiersep> stop ( vm , dest <identifiersep> host <identifiersep> id , work <identifiersep> type . force <identifiersep> stop ) ; \n \t8 throw new execution <identifiersep> exception ( <string_literal> + vm + <string_literal> ) ; } \n \t7 throw new execution <identifiersep> exception ( <string_literal> + vm + <string_literal> ) ; } } \n <ect>
<comment> \n \t1 public eo <identifiersep> editing <identifiersep> context editing <identifiersep> context ( ) { \n \t2 if ( editing <identifiersep> context == null ) { \n \t3 if ( ! has <identifiersep> cooperating <identifiersep> object <identifiersep> stores ( ) ) { \n <ect>
\t7 ++ num <identifiersep> grant <identifiersep> lock <identifiersep> reqs <identifiersep> received ; \n \t7 system . out . printf ( <string_literal> , num <identifiersep> grant <identifiersep> lock <identifiersep> reqs <identifiersep> received ) ; \n \t7 break ; } } \n \t4 catch ( exception ex ) { \n <ect>
\t4 eo <identifiersep> adaptor <identifiersep> operation adaptor <identifiersep> op = ( eo <identifiersep> adaptor <identifiersep> operation ) user <identifiersep> info . object <identifiersep> for <identifiersep> key ( eo <identifiersep> adaptor <identifiersep> channel . failed <identifiersep> adaptor <identifiersep> operation <identifiersep> key ) ; \n \t4 eo <identifiersep> database <identifiersep> operation database <identifiersep> op = ( eo <identifiersep> database <identifiersep> operation ) user <identifiersep> info . object <identifiersep> for <identifiersep> key ( eo <identifiersep> database <identifiersep> context . failed <identifiersep> database <identifiersep> operation <identifiersep> key ) ; \n \t4 was <identifiersep> handled = ( adaptor <identifiersep> op != null && database <identifiersep> op != null ) ; \n \t3 } else { \n <ect>
\t1 public set < event > resolve <identifiersep> internal ( final request <identifiersep> context context ) { \n \t2 final registered <identifiersep> service service = resolve <identifiersep> registered <identifiersep> service <identifiersep> in <identifiersep> request <identifiersep> context ( context ) ; \n \t2 final authentication authentication = web <identifiersep> utils . get <identifiersep> authentication ( context ) ; \n \t2 if ( service == null || authentication == null ) { \n <ect>
\t1 # this function should not execute if the version can't be determined or \n \t1 # the stack does not support rolling upgrade \n \t1 if not ( params . version and check <identifiersep> stack <identifiersep> feature ( stack <identifiersep> feature . rolling <identifiersep> upgrade , params . version ) ) : \n \t1 return \n <ect>
\t2 if (  <identifiersep> rw <identifiersep> mode ) { \n \t3 try { \n \t4 vm <identifiersep> model . update (  <identifiersep> manager . get <identifiersep> model <identifiersep> controller ( ) ) ; \n \t3 } catch ( internal <identifiersep> error <identifiersep> exception ex ) { \n <ect>
\t5 zone <identifiersep> scene <identifiersep> enum . area <identifiersep> stepping <identifiersep> continue , false ) ; \n \t3 if ( transmitted ) { \n \t4 add <identifiersep> echo ( device . get <identifiersep> dsid ( ) . get <identifiersep> value ( ) , ( short ) zone <identifiersep> scene <identifiersep> enum . area <identifiersep> stepping <identifiersep> continue . get <identifiersep> scene <identifiersep> number ( ) ) ; \n \t3 } else { \n <ect>
\t1 { \n \t2 if ( local <identifiersep> database . is <identifiersep> empty ( ) ) \n \t2 { \n \t3 debug <identifiersep> log . info ( <string_literal> , source ) ; \n <ect>
\t2 return null ; } \n \t1 @ override \n \t1 public boolean migrate ( string vm <identifiersep> name , string params ) { \n <ect>
\t2 model . add <identifiersep> attribute ( <string_literal> , ui <identifiersep> utils . get <identifiersep> supervisor <identifiersep> port ( name ) ) ; \n \t2 model . add <identifiersep> attribute ( <string_literal> , name ) ; \n \t2 model . add <identifiersep> attribute ( <string_literal> , <string_literal> ) ; \n \t2 ui <identifiersep> utils . add <identifiersep> title <identifiersep> attribute ( model , <string_literal> ) ; \n <ect>
\t3 close <identifiersep> output <identifiersep> file ( ) ; \n \t3 this . rotation ++ ; \n \t3 path new <identifiersep> file = create <identifiersep> output <identifiersep> file ( ) ; \n \t3 if ( do <identifiersep> rotate <identifiersep> action ) { \n <ect>
\t3 byte [ ] ks <identifiersep> bits = certificate <identifiersep> helper . build <identifiersep> and <identifiersep> save <identifiersep> keystore ( domain <identifiersep> suffix , certificate , get <identifiersep> key <identifiersep> content ( key ) , ks <identifiersep> password ) ; \n \t3 key <identifiersep> store ks = certificate <identifiersep> helper . load <identifiersep> keystore ( ks <identifiersep> bits , ks <identifiersep> password ) ; \n \t3 if ( ks != null ) \n \t4 return true ; \n <ect>
\t3 <comment> \n \t3 return ; <comment> \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 if ( add <identifiersep> a <identifiersep> queue <identifiersep> if <identifiersep> leader && leader <identifiersep> latch . has <identifiersep> leadership ( ) ) \n \t3 { \n \t4 if ( queues . size ( ) < policies . get <identifiersep> max <identifiersep> queues ( ) ) \n \t4 { \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( started ) . size ( ) , equal <identifiersep> to ( 0 ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( unassigned ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 assert <identifiersep> equals ( cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . get <identifiersep> incoming <identifiersep> recoveries ( <string_literal> ) , <number_literal> ) ; \n <ect>
\t3 while ( is == null && timer < <number_literal> ) { \n \t4 is = external <identifiersep> process . get <identifiersep> input <identifiersep> stream ( low ) ; \n \t4 timer ++ ; \n \t4 if ( is == null ) { \n <ect>
\t3 { \n \t4 method = clz . get <identifiersep> method ( expression , ( class [ ] ) null ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t3 gui <identifiersep> activator . get <identifiersep> desktop <identifiersep> service ( ) . open ( download <identifiersep> file ) ; } \n \t2 catch ( illegal <identifiersep> argument <identifiersep> exception e ) \n \t2 { \n <ect>
\t4 final delete <identifiersep> logical <identifiersep> router <identifiersep> port <identifiersep> answer answer <identifiersep> delete = ( delete <identifiersep> logical <identifiersep> router <identifiersep> port <identifiersep> answer ) agent <identifiersep> mgr . easy <identifiersep> send ( nicira <identifiersep> nvp <identifiersep> host . get <identifiersep> id ( ) , cmd <identifiersep> delete <identifiersep> port ) ; \n \t4 if ( answer <identifiersep> delete != null && answer <identifiersep> delete . get <identifiersep> result ( ) ) { \n \t5 s <identifiersep> logger . info ( <string_literal> + logical <identifiersep> router <identifiersep> port <identifiersep> uuid ) ; } \n \t4 else { \n <ect>
\t1 log . info ( <string_literal> + logs . size ( ) ) ; \n \t1 for ( file log <identifiersep> file : logs ) { \n \t1 log . info ( <string_literal> + log <identifiersep> file ) ; } \n \t1 log . info ( <string_literal> + sink <identifiersep> runner . get <identifiersep> count ( ) ) ; \n <ect>
\t1 string sqoop <identifiersep> jar = jars . get <identifiersep> sqoop <identifiersep> jar <identifiersep> path ( ) ; \n \t1 if ( null != sqoop <identifiersep> jar ) { \n \t1 sqoop <identifiersep> jar = file . path <identifiersep> separator + sqoop <identifiersep> jar ; \n \t1 } else { \n <ect>
\t3 return new ssl <identifiersep> connection <identifiersep> socket <identifiersep> factory ( create <identifiersep> ignore <identifiersep> verify <identifiersep> ssl ( ) , new string [ ] { <string_literal> , <string_literal> , <string_literal> , <string_literal> } , \n \t5 null , \n \t5 new default <identifiersep> hostname <identifiersep> verifier ( ) ) ; <comment> \n \t2 } catch ( key <identifiersep> management <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 class trident <identifiersep> window <identifiersep> life <identifiersep> cycle <identifiersep> listener implements window <identifiersep> lifecycle <identifiersep> listener < t > { \n \t2 @ override \n \t2 public void on <identifiersep> expiry ( list < t > expired <identifiersep> events ) { \n <ect>
\t4 result = callable . call ( ) ; } \n \t3 catch ( throwable t ) \n \t3 { \n \t4 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( t ) ; \n <ect>
\t5 try { \n \t6 listener . fire <identifiersep> on <identifiersep> timeout ( event ) ; \n \t5 } catch ( throwable t ) { \n \t6 exception <identifiersep> utils . handle <identifiersep> throwable ( t ) ; \n <ect>
\t1 override fun on <identifiersep> create <identifiersep> view ( inflater : layout <identifiersep> inflater , container : view <identifiersep> group ? , \n \t7 saved <identifiersep> instance <identifiersep> state : bundle ? ) : view ? { \n \t2 log . debug ( tag , <string_literal> + this ) \n \t2 val arguments = arguments \n <ect>
\t2 string property <identifiersep> value = <string_literal> ; \n \t2 mdc . put ( property <identifiersep> name , property <identifiersep> value ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t1 <comment> \n \t1 try { \n \t2 fill <identifiersep> tokenizer ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 log . info ( <string_literal> ) ; \n \t3 if ( consumers <identifiersep> shutdown <identifiersep> latch . await ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n \t4 log . warn ( <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 for ( int i = 0 ; i < count ; i ++ ) { \n \t3 string cpath = path + <string_literal> + i ; \n \t3 try { \n \t4 if ( i%10 == 0 ) \n <ect>
\t3 return true ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> + this . network <identifiersep> host ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 long hb = 0 ; \n \t2 try { \n \t3 hb = long . value <identifiersep> of ( biggest ) ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t2 map < string , integer > encodings ; \n \t2 try { \n \t3 encodings = dimension <identifiersep> encoding <identifiersep> factory . get <identifiersep> valid <identifiersep> encodings ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 final string <identifiersep> buffer buf = new string <identifiersep> buffer ( ) ; \n \t2 final count <identifiersep> down <identifiersep> latch latch = \n \t4 async <identifiersep> request ( http <identifiersep> client , <string_literal> + port + <string_literal> , buf ) ; \n \t2 latch . await ( ) ; \n <ect>
\t4 this . re <identifiersep> tx <identifiersep> msg = msg ; \n \t4 this . re <identifiersep> tx <identifiersep> state = state ; } \n \t3 state = pairing <identifiersep> initialisation <identifiersep> state . retx <identifiersep> wakeup <identifiersep> ack ; \n \t2 } else { \n <ect>
\t2 set < kerberos <identifiersep> ticket > tickets = subject . get <identifiersep> private <identifiersep> credentials ( kerberos <identifiersep> ticket . class ) ; \n \t2 for ( kerberos <identifiersep> ticket ticket : tickets ) { \n \t3 kerberos <identifiersep> principal server = ticket . get <identifiersep> server ( ) ; \n \t3 if ( server . get <identifiersep> name ( ) . equals ( <string_literal> + server . get <identifiersep> realm ( ) + <string_literal> + server . get <identifiersep> realm ( ) ) ) { \n <ect>
\t2 } catch ( zone <identifiersep> transfer <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> + this . secondary <identifiersep> zone . get <identifiersep> zone <identifiersep> name ( ) + <string_literal> + this . secondary <identifiersep> zone . get <identifiersep> remote <identifiersep> server <identifiersep> address ( ) + <string_literal> + e ) ; \n \t3 check <identifiersep> expired ( ) ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t8 domainid = self . account . domainid , \n \t8 serviceofferingid = self . service <identifiersep> offering . id , \n \t8 networkids = [ str ( network . id ) ] \n \t8 ) \n <ect>
\t3 if ( this . reader == null ) { \n \t4 this . reader = get <identifiersep> reader ( this . source ) ; } \n \t3 return parse ( this . reader , el , parse <identifiersep> count ) ; \n \t2 } catch ( exception exception ) { \n <ect>
\t1 register <identifiersep> change <identifiersep> listeners ( ) ; \n \t1 register <identifiersep> m <identifiersep> bean ( ) ; \n \t1 do <identifiersep> init ( config ) ; \n \t1 log . info ( <string_literal> , wro <identifiersep> util . get <identifiersep> implementation <identifiersep> version ( ) ) ; \n <ect>
\t7 if ( kt <identifiersep> k <identifiersep> classes ( ) != null ) { \n \t8 is <identifiersep> kotlin <identifiersep> available = true ; } \n \t7 else { \n \t8 is <identifiersep> kotlin <identifiersep> available = false ; \n <ect>
\t1 private event build <identifiersep> credentials <identifiersep> from <identifiersep> assertion ( final request <identifiersep> context context , \n <number_literal> final pair < assertion , ws <identifiersep> federation <identifiersep> configuration > assertion , \n <number_literal> final service service ) { \n \t2 try { \n <ect>
\t2 if ( fallback <identifiersep> to <identifiersep> tmp ) { \n \t3 hadoop <identifiersep> log <identifiersep> dir = tmp <identifiersep> dir ; } \n \t2 log . debug ( <string_literal> + job <identifiersep> id ) ; \n \t2 log . debug ( <string_literal> + task <identifiersep> id ) ; \n <ect>
\t3 recover ( file ) ; } \n \t1 public int block <identifiersep> for <identifiersep> writes ( ) \n \t1 { \n \t2 for ( map . entry < uuid , atomic <identifiersep> integer > entry : invalid <identifiersep> mutations . entry <identifiersep> set ( ) ) \n <ect>
\t1 @ post \n \t1 @ path ( <string_literal> ) \n \t1 @ consumes ( <string_literal> ) \n \t1 public char <identifiersep> set <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element xml <identifiersep> accepts ( char <identifiersep> set <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element movie ) { \n <ect>
\t1 public void clear ( ) { \n \t2 config . clear <identifiersep> managers ( ) ; } \n \t1 public void verify ( ) { \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t2 update <identifiersep> task <identifiersep> cleanup <identifiersep> timeout ( download <identifiersep> topologies ) ; } \n \t1 public void remove <identifiersep> useless <identifiersep> topology ( map < string , string > topology <identifiersep> codes , list < string > downloaded <identifiersep> topology <identifiersep> ids ) { \n \t2 for ( string topology <identifiersep> id : downloaded <identifiersep> topology <identifiersep> ids ) { \n \t3 if ( ! topology <identifiersep> codes . contains <identifiersep> key ( topology <identifiersep> id ) ) { \n <ect>
\t2 if ( do <identifiersep> export ) { \n \t3 try { \n \t4 files . copy ( src , target <identifiersep> path , standard <identifiersep> copy <identifiersep> option . replace <identifiersep> existing ) ; \n \t3 } catch ( io <identifiersep> exception ioex ) { \n <ect>
\t1 public void close ( ) { \n \t2 this . kryo <identifiersep> pool . release ( this ) ; } \n \t1 @ override \n \t1 public registration register ( final class type , final serializer serializer ) { \n <ect>
\t2 registered <identifiersep> service <identifiersep> access <identifiersep> strategy <identifiersep> utils . ensure <identifiersep> service <identifiersep> access <identifiersep> is <identifiersep> allowed ( service , registered <identifiersep> service ) ; \n \t2 final boolean token <identifiersep> as <identifiersep> response = registered <identifiersep> service <identifiersep> property . registered <identifiersep> service <identifiersep> properties . token <identifiersep> as <identifiersep> response . is <identifiersep> assigned <identifiersep> to ( registered <identifiersep> service ) \n \t3 || registered <identifiersep> service <identifiersep> property . registered <identifiersep> service <identifiersep> properties . token <identifiersep> as <identifiersep> service <identifiersep> ticket . is <identifiersep> assigned <identifiersep> to ( registered <identifiersep> service ) ; \n \t2 if ( ! token <identifiersep> as <identifiersep> response ) { \n <ect>
\t2 connection con =  <identifiersep> manager . get <identifiersep> connection <identifiersep> by <identifiersep> outbound <identifiersep> id ( packet . get <identifiersep> receive <identifiersep> stream <identifiersep> id ( ) ) ; \n \t2 if ( con != null ) { \n \t3 <comment> \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 if ( service == null || authentication == null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( multifactor <identifiersep> map == null || multifactor <identifiersep> map . is <identifiersep> empty ( ) ) { \n <ect>
\t2 string key = compose <identifiersep> key ( host , port , user , password ) ; \n \t2 if ( ! key . equals ( data <identifiersep> source <identifiersep> key ) ) { \n \t3 reset <identifiersep> data <identifiersep> source ( host , port , user , password ) ; } \n \t2 connection conn = data <identifiersep> source . get <identifiersep> connection ( ) ; \n <ect>
\t4 for ( pif pif : nr . pi <identifiersep> fs ) { \n \t5 pif . record pr = pif . get <identifiersep> record ( conn ) ; \n \t5 if (  <identifiersep> host . uuid . equals ( pr . host . get <identifiersep> uuid ( conn ) ) ) { \n <ect>
def matrix <identifiersep> snapshot ( ) : \n \t1 <string_literal> <string_literal> <string_literal> \n <ect>
\t3 return null ; \n \t2 } else { \n \t3 is = file <identifiersep> manager . get ( ) . open ( mapping ) ; \n \t3 if ( is == null ) { \n <ect>
\t4 if ( canonical <identifiersep> path . contains ( dir ) ) { \n \t5 is <identifiersep> child = true ; \n \t5 break ; } } \n \t3 if ( ! is <identifiersep> child ) { \n <ect>
\t4 return new ovs <identifiersep> create <identifiersep> gre <identifiersep> tunnel <identifiersep> answer ( command , false , result , citrix <identifiersep> resource <identifiersep> base . get <identifiersep> host ( ) . get <identifiersep> ip ( ) , bridge ) ; \n \t3 } else { \n \t4 return new ovs <identifiersep> create <identifiersep> gre <identifiersep> tunnel <identifiersep> answer ( command , true , result , citrix <identifiersep> resource <identifiersep> base . get <identifiersep> host ( ) . get <identifiersep> ip ( ) , bridge , integer . parse <identifiersep> int ( res [ 1 ] ) ) ; } \n \t2 } catch ( final bad <identifiersep> server <identifiersep> response e ) { \n <ect>
\t3 throw new exec <identifiersep> exception ( e ) ; } \n \t2 string cache <identifiersep> key = <string_literal> + get <identifiersep> operator <identifiersep> key ( ) . to <identifiersep> string ( ) ; \n \t2 if ( is <identifiersep> input <identifiersep> cached ) { \n \t3 counter <identifiersep> offsets = ( map < integer , long > ) object <identifiersep> cache . get <identifiersep> instance ( ) . retrieve ( cache <identifiersep> key ) ; \n <ect>
<comment> \n \t1 private item <identifiersep> map determine <identifiersep> item <identifiersep> mapping <identifiersep> by <identifiersep> item <identifiersep> command ( string item <identifiersep> command ) { \n \t2 item <identifiersep> map found <identifiersep> mapping =  <identifiersep> all <identifiersep> item <identifiersep> map . get ( item <identifiersep> command ) ; \n \t2 if ( found <identifiersep> mapping == null ) { \n <ect>
\t5 d = new grid <identifiersep> dht <identifiersep> partition <identifiersep> demand <identifiersep> message < > ( d , remaining ) ; \n \t5 long timeout = grid <identifiersep> dht <identifiersep> partition <identifiersep> demand <identifiersep> pool . this . timeout . get ( ) ; \n \t5 d . timeout ( timeout ) ; \n <ect>
\t3 result <identifiersep> set rs = pstmt . execute <identifiersep> query ( ) ; \n \t3 while ( rs . next ( ) ) { \n \t4 vm <identifiersep> disk <identifiersep> stats . add ( to <identifiersep> entity <identifiersep> bean ( rs , false ) ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t4 do <identifiersep> aggregate <identifiersep> internal ( get <identifiersep> aggregation <identifiersep> strategy ( sub <identifiersep> exchange ) , result , sub <identifiersep> exchange ) ; \n \t3 } else { \n \t4 do <identifiersep> aggregate ( get <identifiersep> aggregation <identifiersep> strategy ( sub <identifiersep> exchange ) , result , sub <identifiersep> exchange ) ; } \n \t3 total . increment <identifiersep> and <identifiersep> get ( ) ; } \n <ect>
\t2 this . snapshot <identifiersep> strategy = enable <identifiersep> incremental <identifiersep> checkpointing ? \n \t3 new incremental <identifiersep> snapshot <identifiersep> strategy ( ) : \n \t3 new full <identifiersep> snapshot <identifiersep> strategy ( ) ; \n \t2 this . write <identifiersep> options = new write <identifiersep> options ( ) . set <identifiersep> disable <identifiersep> wal ( true ) ; \n <ect>
\t2 if ( broker != null ) { \n \t3 broker . stop ( ) ; \n \t3 broker . wait <identifiersep> until <identifiersep> stopped ( ) ; } \n \t2 broker = null ; \n <ect>
\t5 async <identifiersep> call <identifiersep> future < volume <identifiersep> api <identifiersep> result > future = vol <identifiersep> service . expunge <identifiersep> volume <identifiersep> async ( vol <identifiersep> factory . get <identifiersep> volume ( vol . get <identifiersep> id ( ) ) ) ; \n \t5 try { \n \t6 future . get ( ) ; \n \t5 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 on <identifiersep> message ( ( quickfix . fix44 . new <identifiersep> order <identifiersep> single ) message , session <identifiersep> id ) ; \n \t3 } else if ( message instanceof quickfix . fix50 . new <identifiersep> order <identifiersep> single ) { \n \t4 on <identifiersep> message ( ( quickfix . fix50 . new <identifiersep> order <identifiersep> single ) message , session <identifiersep> id ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t6 sb . append ( <string_literal> ) . append ( <string_literal> ) . append ( fis . get <identifiersep> name ( ) ) . append ( <string_literal> ) . append ( fis . get <identifiersep> content <identifiersep> type ( ) ) \n \t6 . append ( <string_literal> ) . append ( streams . as <identifiersep> string ( fis . open <identifiersep> stream ( ) , <string_literal> ) ) . append ( <string_literal> ) ; } } \n \t4 return new object [ ] { <number_literal> , array <identifiersep> map . create ( <string_literal> , <string_literal> ) , sb . to <identifiersep> string ( ) } ; \n \t3 } catch ( file <identifiersep> upload <identifiersep> exception e ) { \n <ect>
@ override \n public core <identifiersep> event process ( core <identifiersep> event event ) throws mule <identifiersep> exception { \n \t1 string key = identifier <identifiersep> evaluator . resolve <identifiersep> value ( event ) ; \n \t1 if ( key == null ) { \n <ect>
\t4 if ( handling <identifiersep> timeouts != null ) { \n \t5 expected = true ; \n \t5 for ( peer <identifiersep> node pn : currently <identifiersep> routing <identifiersep> to ) { \n \t6 if ( handling <identifiersep> timeouts . contains ( pn ) ) { \n <ect>
public operating <identifiersep> system apply ( template from ) { \n \t1 builder builder = operating <identifiersep> system . builder ( ) . description ( from . get <identifiersep> os <identifiersep> type ( ) ) ; \n \t1 os <identifiersep> type type = os <identifiersep> types . get ( ) . get ( from . get <identifiersep> os <identifiersep> type <identifiersep> id ( ) ) ; \n \t1 if ( type == null ) { \n <ect>
\t2 ssl <identifiersep> handler ssl <identifiersep> handler = configure <identifiersep> client <identifiersep> ssl <identifiersep> on <identifiersep> demand ( ) ; \n \t2 if ( ssl <identifiersep> handler != null ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 when : \n \t2 def processors = detector . detect <identifiersep> processors ( cp ) \n \t2 then : \n \t2 processors == [ : ] \n <ect>
\t1 { \n \t1 if ( is <identifiersep> exists ( id ) ) \n \t1 { \n \t2 start ( id ) ; \n <ect>
\t2 if ( decryptor != null ) { \n \t2 buffer = decryptor . decrypt ( buffer ) ; } \n \t2 event = transaction <identifiersep> event <identifiersep> record . from <identifiersep> byte <identifiersep> array ( buffer ) ; \n \t1 } catch ( corrupt <identifiersep> event <identifiersep> exception ex ) { \n <ect>
\t2 } else if ( action == action . suspend ) { \n \t3 if ( route <identifiersep> status == service <identifiersep> status . started ) { \n \t4 suspend <identifiersep> or <identifiersep> stop <identifiersep> consumer ( route . get <identifiersep> consumer ( ) ) ; \n \t3 } else { \n <ect>
\t4 log . debug ( artifact + <string_literal> + artifact . get <identifiersep> file ( ) ) ; \n \t4 if ( is <identifiersep> k <identifiersep> jar ( artifact . get <identifiersep> file ( ) ) ) { \n \t5 deps <identifiersep> map . put ( adapt ( dep . get <identifiersep> release <identifiersep> id <identifiersep> without <identifiersep> version ( ) ) , new dependency <identifiersep> descriptor ( artifact ) ) ; } \n \t3 } else { \n <ect>
<comment> \n <comment> \n <comment> \n \t1 public list < sortable <identifiersep> semantic <identifiersep> model > hypothesize ( boolean use <identifiersep> correct <identifiersep> types , int number <identifiersep> of <identifiersep> candidates ) throws exception { \n <ect>
<comment> \n \t1 @ override \n \t1 public void object <identifiersep> added ( naming <identifiersep> event event ) { \n <ect>
\t1 private void transfer <identifiersep> alignment <identifiersep> info <identifiersep> to <identifiersep> fragment ( final sam <identifiersep> record unaligned , final sam <identifiersep> record aligned , final boolean is <identifiersep> contaminant , final boolean needs <identifiersep> safe <identifiersep> reverse <identifiersep> complement ) { \n \t2 set <identifiersep> values <identifiersep> from <identifiersep> alignment ( unaligned , aligned , needs <identifiersep> safe <identifiersep> reverse <identifiersep> complement ) ; \n \t2 update <identifiersep> cigar <identifiersep> for <identifiersep> trimmed <identifiersep> or <identifiersep> clipped <identifiersep> bases ( unaligned , aligned ) ; \n \t2 if ( sam <identifiersep> utils . cigar <identifiersep> maps <identifiersep> no <identifiersep> bases <identifiersep> to <identifiersep> ref ( unaligned . get <identifiersep> cigar ( ) ) ) { \n <ect>
\t3 return consumer <identifiersep> session . create <identifiersep> consumer ( destination ) ; } } \n \t1 public void set <identifiersep> up ( ) throws exception { \n \t2 super . set <identifiersep> up ( ) ; \n \t2 client <identifiersep> test <identifiersep> support . remove <identifiersep> message <identifiersep> store ( ) ; \n <ect>
\t2 log . info ( <string_literal> , request <identifiersep> id ) ; \n \t2 if ( killtimer <identifiersep> watch . is <identifiersep> running ( ) ) { \n \t3 killtimer <identifiersep> watch . stop ( ) ; \n \t3 long elapsed = killtimer <identifiersep> watch . elapsed ( time <identifiersep> unit . milliseconds ) ; \n <ect>
\t3 return byte . parse <identifiersep> byte ( string <identifiersep> utils . substring <identifiersep> before ( value , <string_literal> ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n \t3 <comment> \n \t3 logger . warn ( <string_literal> , value ) ; \n <ect>
\t3 uid = int ( line . split ( ) [ 1 ] ) \n \t3 user = pwd . getpwuid ( uid ) . pw <identifiersep> name \n \t3 logger . debug ( <string_literal> + user ) ; \n \t3 if user in users and user not in user <identifiersep> black <identifiersep> list : \n <ect>
\t5 writing = true ; } \n \t4 try { \n \t5 write <identifiersep> buffer ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 } else { \n \t4 logger . warn ( <string_literal> \n \t6 + <string_literal> , service ) ; } \n \t2 } else { \n <ect>
\t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 return queue <identifiersep> view . get <identifiersep> in <identifiersep> flight <identifiersep> count ( ) == 0 ; } \n \t2 } ) ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> dequeue <identifiersep> count ( ) ) ; \n <ect>
\t1 private boolean is <identifiersep> run <identifiersep> mode <identifiersep> allow <identifiersep> saving ( ) { \n \t2 network <identifiersep> system network <identifiersep> system = core <identifiersep> registry . get ( network <identifiersep> system . class ) ; \n \t2 return network <identifiersep> system . get <identifiersep> mode ( ) . is <identifiersep> authority ( ) ; } \n \t1 private void start <identifiersep> saving ( ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t2 final security <identifiersep> parameters <identifiersep> context sec <identifiersep> ctx = context . get <identifiersep> subcontext ( security <identifiersep> parameters <identifiersep> context . class , true ) ; \n \t2 final signature <identifiersep> validation <identifiersep> parameters validation <identifiersep> params = new signature <identifiersep> validation <identifiersep> parameters ( ) ; \n \t2 if ( override <identifiersep> black <identifiersep> listed <identifiersep> signature <identifiersep> algorithms != null && ! override <identifiersep> black <identifiersep> listed <identifiersep> signature <identifiersep> algorithms . is <identifiersep> empty ( ) ) { \n \t3 validation <identifiersep> params . set <identifiersep> blacklisted <identifiersep> algorithms ( this . override <identifiersep> black <identifiersep> listed <identifiersep> signature <identifiersep> algorithms ) ; \n <ect>
<comment> \n public object null <identifiersep> safe <identifiersep> get ( final result <identifiersep> set arg0 , final string [ ] arg1 , final object arg2 ) throws hibernate <identifiersep> exception , \n \t1 sql <identifiersep> exception { \n \t1 if ( blob <identifiersep> user <identifiersep> type . debug ) { \n <ect>
\t3 load <identifiersep> row <identifiersep> and <identifiersep> key <identifiersep> cache <identifiersep> async ( ) . get ( ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n \t3 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( t ) ; \n <ect>
\t5 song <identifiersep> changed ( player <identifiersep> id , cur <identifiersep> song ) ; } \n \t3 } catch ( mpd <identifiersep> player <identifiersep> exception pe ) { \n \t4 logger . error ( <string_literal> , player <identifiersep> id , pe . get <identifiersep> message ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 long value = long . decode ( number <identifiersep> string ) . long <identifiersep> value ( ) ; \n \t4 char ch = ( char ) value ; \n \t4 sb . append ( ch ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 if ( input <identifiersep> file . is <identifiersep> directory ( ) ) { \n \t3 <comment> \n \t3 try { \n \t4 file [ ] directory <identifiersep> listing = input <identifiersep> file . list <identifiersep> files ( ) ; \n <ect>
\t3 return ; } \n \t2 double [ ] locations = fields . bytes <identifiersep> to <identifiersep> doubles ( data , <number_literal> , data . length - <number_literal> ) ; \n \t2 double his <identifiersep> loc = locations [ 0 ] ; \n \t2 if ( ! location . is <identifiersep> valid ( his <identifiersep> loc ) ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 system . arraycopy ( orig , offset , iv , 0 , hop <identifiersep> processor . iv <identifiersep> length ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) { \n <ect>
\t1 } catch ( io <identifiersep> exception e ) { \n \t1 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> , e ) ; } \n \t1 for ( int i = 0 ; i < port <identifiersep> range ; i ++ ) { \n \t1 int port = min <identifiersep> port <identifiersep> number + random . next <identifiersep> int ( port <identifiersep> range ) ; \n <ect>
\t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> friends ( json <identifiersep> object json , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception , json <identifiersep> exception { \n \t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> favorite ( json <identifiersep> object source , json <identifiersep> object target , json <identifiersep> object target <identifiersep> object , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception { \n <ect>
\t1 public boolean load ( i <identifiersep> resource <identifiersep> manager manager , resource <identifiersep> location location , function < resource <identifiersep> location , texture <identifiersep> atlas <identifiersep> sprite > texture <identifiersep> getter ) { \n \t2 resource <identifiersep> location from = sprite <identifiersep> util . transform <identifiersep> location ( from <identifiersep> name ) ; \n \t2 texture <identifiersep> atlas <identifiersep> sprite sprite = load <identifiersep> sprite ( manager , from . to <identifiersep> string ( ) , from , true ) ; \n \t2 if ( sprite == null ) { \n <ect>
\t2 check <identifiersep> state ( checkpointed <identifiersep> state == null , \t1 <string_literal> ) ; \n \t2 checkpointed <identifiersep> state = context . get <identifiersep> operator <identifiersep> state <identifiersep> store ( ) . get <identifiersep> serializable <identifiersep> list <identifiersep> state ( <string_literal> ) ; \n \t2 int subtask <identifiersep> idx = get <identifiersep> runtime <identifiersep> context ( ) . get <identifiersep> index <identifiersep> of <identifiersep> this <identifiersep> subtask ( ) ; \n \t2 if ( context . is <identifiersep> restored ( ) ) { \n <ect>
\t1 string xsd <identifiersep> name = xml <identifiersep> reader . get <identifiersep> attribute <identifiersep> value ( xml <identifiersep> constants . w3c <identifiersep> xml <identifiersep> schema <identifiersep> instance <identifiersep> ns <identifiersep> uri , <string_literal> ) ; \n \t1 input <identifiersep> stream xsd <identifiersep> stream = null ; \n \t1 if ( null != xsd <identifiersep> name ) { \n \t1 if ( log <identifiersep> xsd ) { \n <ect>
\t2 file <identifiersep> system . close ( ) ; \n \t2 return null ; } \n \t1 } ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t2 } catch ( query <identifiersep> exception e ) { \n <ect>
\t2 if ( service <identifiersep> info . get <identifiersep> advisor <identifiersep> file ( ) != null ) { \n \t2 service <identifiersep> version . put ( <string_literal> , service <identifiersep> info . get <identifiersep> advisor <identifiersep> name ( ) ) ; \n \t2 service <identifiersep> version . put ( <string_literal> , service <identifiersep> info . get <identifiersep> advisor <identifiersep> file ( ) . get <identifiersep> absolute <identifiersep> path ( ) ) ; } } \n \t1 catch ( exception e ) { \n <ect>
\t4 fire <identifiersep> destination <identifiersep> event ( event ) ; } \n \t3 else { \n \t4 log . warn ( <string_literal> + command ) ; } } \n \t2 else { \n <ect>
\t3 } finally { \n \t4 <comment> \n \t4 stop <identifiersep> server ( server <identifiersep> list ) ; } \n \t2 } catch ( assertion <identifiersep> error ae ) { \n <ect>
\t3 sc . add <identifiersep> and ( <string_literal> , search <identifiersep> criteria . op . eq , ip <identifiersep> address ) ; \n \t3 sc . add <identifiersep> and ( <string_literal> , search <identifiersep> criteria . op . null ) ; \n \t3 list < usage <identifiersep> ip <identifiersep> address <identifiersep> vo > ip <identifiersep> address <identifiersep> v <identifiersep> os =  <identifiersep> usage <identifiersep> ip <identifiersep> address <identifiersep> dao . search ( sc , null ) ; \n \t3 if ( ip <identifiersep> address <identifiersep> v <identifiersep> os . size ( ) > 1 ) { \n <ect>
\t3 using the uri from global setting network . loadbalancer . haproxy . stats . uri . \n \t3 it uses a redundant routers vpc \n \t2 <string_literal> <string_literal> starting test <identifiersep> <number_literal> <identifiersep> rvpc <identifiersep> internallb <identifiersep> haproxy <identifiersep> stats <identifiersep> on <identifiersep> all <identifiersep> interfaces <string_literal> <ect>
\t2 return true ; \n \t2 } else { \n \t2 return non <identifiersep> boolean <identifiersep> returns <identifiersep> true ; } \n \t1 } else { \n <ect>
\t2 if ( event . is <identifiersep> down ( ) && event . get <identifiersep> key ( ) == keyboard . key . escape ) { \n \t3 save <identifiersep> settings ( ) ; } \n \t2 return false ; } \n \t1 public void save <identifiersep> settings ( ) { \n <ect>
\t1 <comment> \n \t1 protected void do <identifiersep> execute ( string final <identifiersep> location , action <identifiersep> invocation invocation ) throws exception { \n <ect>
\t2 m . with <identifiersep> row ( cf <identifiersep> standard1 , row <identifiersep> key ) . delete <identifiersep> column ( <string_literal> ) ; \n \t2 m . execute ( ) ; \n \t2 column = keyspace . prepare <identifiersep> query ( cf <identifiersep> standard1 ) . get <identifiersep> row ( row <identifiersep> key ) . get <identifiersep> column ( <string_literal> ) . execute ( ) . get <identifiersep> result ( ) ; \n \t2 assert . assert <identifiersep> null ( column ) ; \n <ect>
\t4 if ( contained ) break ; } \n \t3 return contained ; } \n \t2 } ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 if ( strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( cause <identifiersep> message ) ) { \n \t6 cause <identifiersep> message = cause . to <identifiersep> string ( ) ; } \n \t4 } else { \n \t5 cause <identifiersep> message = e . get <identifiersep> localized <identifiersep> message ( ) ; } \n <ect>
\t3 } catch ( channel <identifiersep> exception x ) { \n \t4 <comment> \n \t4 <comment> \n \t4 <comment> \n <ect>
<comment> \n \t2 public static < t extends erx <identifiersep> copyable < t > > t copy ( ns <identifiersep> mutable <identifiersep> dictionary < eo <identifiersep> global <identifiersep> id , erx <identifiersep> copyable < ? > > copied <identifiersep> objects , t source ) { \n \t3 eo <identifiersep> global <identifiersep> id global <identifiersep> id = source . editing <identifiersep> context ( ) . global <identifiersep> id <identifiersep> for <identifiersep> object ( source ) ; \n <ect>
\t2 synchronized ( running <identifiersep> inserts ) { \n \t3 boolean retval = running <identifiersep> inserts . add ( token ) ; \n \t3 if ( ! retval ) { \n \t4 <comment> \n <ect>
\t1 @ sneaky <identifiersep> throws \n \t1 private void redirect <identifiersep> to <identifiersep> identity <identifiersep> provider ( final ws <identifiersep> federation <identifiersep> request fed <identifiersep> request , final http <identifiersep> servlet <identifiersep> response response , \n <number_literal> final http <identifiersep> servlet <identifiersep> request request , final ws <identifiersep> federation <identifiersep> registered <identifiersep> service service ) { \n \t2 final string service <identifiersep> url = construct <identifiersep> service <identifiersep> url ( request , response , fed <identifiersep> request ) ; \n <ect>
\t6 implement <identifiersep> network <identifiersep> elements <identifiersep> and <identifiersep> resources ( dest , context , network ,  <identifiersep> network <identifiersep> offering <identifiersep> dao . find <identifiersep> by <identifiersep> id ( network . get <identifiersep> network <identifiersep> offering <identifiersep> id ( ) ) ) ; \n \t5 } else { \n \t6 implement <identifiersep> network ( network . get <identifiersep> id ( ) , dest , context ) ; } \n \t4 } catch ( exception ex ) { \n <ect>
\t4 catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t5 throw new hl7exception ( context . get <identifiersep> message <identifiersep> source <identifiersep> service ( ) . get <identifiersep> message ( <string_literal> , \n \t6 new object [ ] { value <identifiersep> identifier , value <identifiersep> name } , null ) ) ; } } \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( policy . get <identifiersep> principal <identifiersep> attribute <identifiersep> name <identifiersep> trigger ( ) ) \n \t4 || string <identifiersep> utils . is <identifiersep> blank ( policy . get <identifiersep> principal <identifiersep> attribute <identifiersep> value <identifiersep> to <identifiersep> match ( ) ) ) { \n <ect>
\t2 begin <identifiersep> tx ( ) ; \n \t2 producer . send ( outbound [ 0 ] ) ; \n \t2 producer . send ( outbound [ 1 ] ) ; \n \t2 commit <identifiersep> tx ( ) ; \n <ect>
\t3 repository r = ( repository ) ctx . lookup ( repository <identifiersep> name ) ; \n \t3 log . info ( <string_literal> ) ; \n \t3 return r ; \n \t2 } catch ( naming <identifiersep> exception e ) { \n <ect>
\t6 } else if ( old <identifiersep> id == packet . get <identifiersep> receive <identifiersep> stream <identifiersep> id ( ) ) { \n \t7 <comment> \n \t6 } else { \n \t7 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 logger . debug ( <string_literal> + fs20command . to <identifiersep> string ( ) + <string_literal> + config . get <identifiersep> address ( ) ) ; \n \t3 event <identifiersep> publisher . post <identifiersep> update ( config . get <identifiersep> item ( ) . get <identifiersep> name ( ) , \n \t5 fs20command <identifiersep> helper . get <identifiersep> state <identifiersep> from <identifiersep> fs20command ( fs20command ) ) ; \n \t2 } else { \n <ect>
\t1 public void set <identifiersep> sample <identifiersep> frequency ( string media <identifiersep> info <identifiersep> value ) { \n \t2 this . sample <identifiersep> frequency = get <identifiersep> sample <identifiersep> frequency <identifiersep> from <identifiersep> lib <identifiersep> media <identifiersep> info ( media <identifiersep> info <identifiersep> value ) ; } \n \t1 public static int get <identifiersep> channels <identifiersep> number <identifiersep> from <identifiersep> lib <identifiersep> media <identifiersep> info ( string media <identifiersep> info <identifiersep> value ) { \n \t2 if ( is <identifiersep> empty ( media <identifiersep> info <identifiersep> value ) ) { \n <ect>
\t3  <identifiersep> log . debug ( <string_literal> ) ; \n \t3 try { thread . sleep ( <number_literal> * <number_literal> ) ; } catch ( interrupted <identifiersep> exception ie ) { } \n \t3 s . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 try { \n \t4 init <identifiersep> network <identifiersep> connection ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 if ( ! m <identifiersep> jmx <identifiersep> endpoint . get <identifiersep> test <identifiersep> connection <identifiersep> on <identifiersep> startup ( ) ) { \n <ect>
\t4 u . error ( log , <string_literal> , e ) ; \n \t4 fail ( <string_literal> + msg + <string_literal> + e . get <identifiersep> message ( ) + ' ] ' , e ) ; } \n \t3 if ( log != null ) { \n <ect>
\t2 . get <identifiersep> id ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 single <identifiersep> thread thread <identifiersep> one = new manual <identifiersep> start <identifiersep> single <identifiersep> thread ( first <identifiersep> human <identifiersep> task <identifiersep> id ) ; \n \t1 thread <identifiersep> one . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n <ect>
\t3 xml <identifiersep> mapper = new xml <identifiersep> mapper ( ) ; } \n \t2 if ( enable <identifiersep> jaxb <identifiersep> annotation <identifiersep> module ) { \n \t3 <comment> \n \t3 jaxb <identifiersep> annotation <identifiersep> module module = new jaxb <identifiersep> annotation <identifiersep> module ( ) ; \n <ect>
\t2 if ( e instanceof transport <identifiersep> exception ) \n \t3 return new error <identifiersep> message ( ( transport <identifiersep> exception ) e , stream <identifiersep> id ) ; \n \t2 <comment> \n \t2 if ( unexpected <identifiersep> exception <identifiersep> handler == null || ! unexpected <identifiersep> exception <identifiersep> handler . apply ( e ) ) \n <ect>
\t2 if ( storage <identifiersep> service . instance . is <identifiersep> starting ( ) ) \n \t2 { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return ; } \n <ect>
\t5 if ( retval == null ) \n \t6 retval = new array <identifiersep> list < > ( ) ; \n \t5 retval . add ( new ping <identifiersep> data ( uuid , true , name <identifiersep> str , phys <identifiersep> addr ) . coord ( is <identifiersep> coordinator ) ) ; } \n \t4 catch ( throwable t ) { \n <ect>
\t5 assertion <identifiersep> element = document <identifiersep> util . get <identifiersep> element ( holder . get <identifiersep> saml <identifiersep> document ( ) , new q <identifiersep> name ( j <identifiersep> boss <identifiersep> saml <identifiersep> constants . assertion . get ( ) ) ) ; } \n \t4 boolean signed = assertion <identifiersep> util . is <identifiersep> signed <identifiersep> element ( assertion <identifiersep> element ) ; \n \t4 if ( ( config . is <identifiersep> want <identifiersep> assertions <identifiersep> signed ( ) && ! signed ) \n \t6 || ( signed && config . is <identifiersep> validate <identifiersep> signature ( ) && ! assertion <identifiersep> util . is <identifiersep> signature <identifiersep> valid ( assertion <identifiersep> element , get <identifiersep> idp <identifiersep> key <identifiersep> locator ( ) ) ) ) { \n <ect>
\t5 public void run ( ) { \n \t6 try { \n \t7 session . send <identifiersep> ack ( ack <identifiersep> to <identifiersep> send , true ) ; \n \t6 } catch ( jms <identifiersep> exception e ) { \n <ect>
\t10 vmware <identifiersep> helper . prepare <identifiersep> iso <identifiersep> device ( vm <identifiersep> mo , iso <identifiersep> datastore <identifiersep> info . first ( ) , iso <identifiersep> datastore <identifiersep> info . second ( ) , true , true , ide <identifiersep> unit <identifiersep> number ++ , i + 1 ) ; \n \t8 device <identifiersep> config <identifiersep> spec <identifiersep> array [ i ] . set <identifiersep> device ( iso <identifiersep> info . first ( ) ) ; \n \t8 if ( iso <identifiersep> info . second ( ) ) { \n <ect>
\t4 map . entry < ? , ? > me = ( map . entry < ? , ? > ) it . next ( ) ; \n \t4 string key = ( string ) me . get <identifiersep> key ( ) ; \n \t4 string value = ( string ) me . get <identifiersep> value ( ) ; \n \t4 if ( value == null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void handle ( string target , request base <identifiersep> request , http <identifiersep> servlet <identifiersep> request request , http <identifiersep> servlet <identifiersep> response response ) throws io <identifiersep> exception , servlet <identifiersep> exception { \n <ect>
\t2 try { \n \t3 string name = management <identifiersep> factory . get <identifiersep> runtime <identifiersep> mx <identifiersep> bean ( ) . get <identifiersep> name ( ) ; \n \t3 return long . parse <identifiersep> long ( name . substring ( 0 , name . index <identifiersep> of ( ' @ ' ) ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 set <identifiersep> view <identifiersep> status ( view <identifiersep> definition , view <identifiersep> entity . view <identifiersep> status . error , msg + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t1 log . error ( msg , e ) ; } } \n private void migrate <identifiersep> data <identifiersep> from <identifiersep> previous <identifiersep> version ( view <identifiersep> entity view <identifiersep> definition , string server <identifiersep> version ) { \n \t1 if ( ! view <identifiersep> definitions . contains <identifiersep> key ( view <identifiersep> definition . get <identifiersep> name ( ) ) ) { <comment> \n <ect>
\t1 os . remove ( command <identifiersep> json <identifiersep> path ) \n def save <identifiersep> data ( solr <identifiersep> kinit <identifiersep> command , hdfs <identifiersep> kinit <identifiersep> command , curl <identifiersep> prefix , solr <identifiersep> url , collection , filter <identifiersep> field , id <identifiersep> field , \n \t3 range <identifiersep> end , read <identifiersep> block <identifiersep> size , write <identifiersep> block <identifiersep> size , working <identifiersep> dir , additional <identifiersep> filter , name , json <identifiersep> file , \n \t3 compression , hdfs <identifiersep> user , hdfs <identifiersep> path , key <identifiersep> file <identifiersep> path , bucket , key <identifiersep> prefix , local <identifiersep> path ) : \n <ect>
\t1 public data <identifiersep> store <identifiersep> to get <identifiersep> store <identifiersep> to ( data <identifiersep> store store ) { \n \t2 return null ; } \n \t1 public answer create <identifiersep> volume ( volume <identifiersep> info volume ) throws storage <identifiersep> unavailable <identifiersep> exception { \n <ect>
\t5 tdoc . set <identifiersep> lock ( context . get <identifiersep> user ( ) , context ) ; } \n \t3 } catch ( exception e ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
<comment> \n \t1 @ override \n \t1 public void run ( ) { \n <ect>
\t2 map . put ( <string_literal> , hyperlink <identifiersep> builder <identifiersep> generator ( opportunity <identifiersep> title <identifiersep> expr , opportunity <identifiersep> href <identifiersep> expr ) . set <identifiersep> style ( style <identifiersep> builder ) ) \n \t2 map . put ( <string_literal> , simple <identifiersep> expression <identifiersep> builder <identifiersep> generator ( date <identifiersep> expression ( <string_literal> ) ) ) \n \t2 return map } \n \t1 private fun build <identifiersep> case <identifiersep> map ( ) : map < string , component <identifiersep> builder <identifiersep> generator > { \n <ect>
\t2 final commit <identifiersep> queue . callback c = new commit <identifiersep> queue . callback ( ) { \n \t3 private revision before = revision . new <identifiersep> revision ( 1 ) ; \n \t3 @ override \n \t3 public void head <identifiersep> of <identifiersep> queue ( @ nonnull revision r ) { \n <ect>
\t3 exception e = wrap <identifiersep> with <identifiersep> on <identifiersep> error <identifiersep> hook ( failure <identifiersep> type , original <identifiersep> exception ) ; \n \t3 return observable . error ( new hystrix <identifiersep> runtime <identifiersep> exception ( failure <identifiersep> type , this . get <identifiersep> class ( ) , get <identifiersep> log <identifiersep> message <identifiersep> prefix ( ) + <string_literal> + message + <string_literal> , e , null ) ) ; \n \t2 } else { \n \t3 if ( is <identifiersep> recoverable <identifiersep> error ( original <identifiersep> exception ) ) { \n <ect>
\t4 reseeder reseeder = new reseeder (  <identifiersep> context , this ) ; \n \t4 reseeder . request <identifiersep> reseed ( ) ; \n \t4 return true ; \n \t3 } catch ( throwable t ) { \n <ect>
\t2 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t2 list < string > ordered <identifiersep> libs = ( list < string > ) ctx . get <identifiersep> servlet <identifiersep> context ( ) \n \t4 . get <identifiersep> attribute ( servlet <identifiersep> context . ordered <identifiersep> libs ) ; \n \t2 if ( ordered <identifiersep> libs . size ( ) > <number_literal> ) { \n <ect>
\t6 || value . equals ( <string_literal> ) \n \t6 || value . equals ( <string_literal> ) \n \t4 ) { \n \t5 if ( java <identifiersep> version != 0 && java <identifiersep> version != java <identifiersep> version <identifiersep> <number_literal> ) { \n <ect>
\t2 xdom xdom ; \n \t2 try { \n \t3 xdom = execute ( template ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t3 throw e ; \n \t2 } catch ( exception e ) { \n \t3 log . warn ( <string_literal> , name , e ) ; } \n \t2 if ( hide <identifiersep> bean || ( item != null && elements <identifiersep> to <identifiersep> skip . contains ( item . get <identifiersep> static <identifiersep> label ( ) ) ) ) { \n <ect>
\t1 mem <identifiersep> obj . part <identifiersep> number = integer . parse <identifiersep> int ( request . get <identifiersep> part <identifiersep> number ( ) ) ; \n \t1 try { \n \t2 mem <identifiersep> obj . size = data <identifiersep> content . read ( mem <identifiersep> obj . content ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
# server configurations \n # default value used in hdp <number_literal> . <number_literal> . 0 . 0 and earlier . \n knox <identifiersep> data <identifiersep> dir = ' / var / lib / knox / data' \n # important , it has to be strictly greater than <number_literal> . <number_literal> . 0 . 0 ! ! ! \n <ect>
\t4 catch ( io <identifiersep> exception e ) { } } } \n \t2 else { \n \t3 <comment> \n <ect>
@ override \n public void delete <identifiersep> identities ( cluster cluster , list < component > components , set < string > identities ) throws ambari <identifiersep> exception , kerberos <identifiersep> operation <identifiersep> exception { \n \t1 if ( identities . is <identifiersep> empty ( ) ) { \n \t1 return ; } \n <ect>
\t2 init <identifiersep> sql <identifiersep> queries ( ) ; \n \t2 init <identifiersep> sql <identifiersep> types ( ) ; \n \t2 init <identifiersep> db <identifiersep> props ( ) ; } \n \t1 private void init <identifiersep> sql <identifiersep> queries ( ) { \n <ect>
\t2 xml <identifiersep> default ( no <identifiersep> expand ) ; } \n \t1 private void xml <identifiersep> default ( string path ) throws exception { \n \t2 web <identifiersep> target target = client . target ( port <identifiersep> provider <identifiersep> util . generate <identifiersep> url ( <string_literal> , path ) ) ; \n \t2 logger . info ( entity <identifiersep> xml ) ; \n <ect>
\t3 event <identifiersep> logger event <identifiersep> logger = event <identifiersep> log <identifiersep> manager . get <identifiersep> event <identifiersep> logger ( cm ) ; \n \t3 assert <identifiersep> true ( event <identifiersep> logger . get <identifiersep> class ( ) . get <identifiersep> name ( ) , event <identifiersep> logger instanceof server <identifiersep> event <identifiersep> logger ) ; \n \t3 event <identifiersep> logger . info ( event <identifiersep> log <identifiersep> category . cluster , <string_literal> ) ; \n \t3 event <identifiersep> logger . info ( event <identifiersep> log <identifiersep> category . tasks , <string_literal> ) ; \n <ect>
public class custom <identifiersep> forbidden <identifiersep> message <identifiersep> exception <identifiersep> mapper implements exception <identifiersep> mapper < forbidden <identifiersep> exception > { \n \t1 private static logger log = logger . get <identifiersep> logger ( custom <identifiersep> forbidden <identifiersep> message <identifiersep> exception <identifiersep> mapper . class ) ; \n \t1 @ override \n \t1 public response to <identifiersep> response ( forbidden <identifiersep> exception e ) { \n <ect>
\t5 lb . set <identifiersep> state ( lb <identifiersep> backup . get <identifiersep> state ( ) ) ; \n \t5  <identifiersep> lb <identifiersep> dao . update ( lb . get <identifiersep> id ( ) , lb ) ; \n \t5  <identifiersep> lb <identifiersep> dao . persist ( lb ) ; \n \t5 s <identifiersep> logger . debug ( <string_literal> + lb <identifiersep> rule <identifiersep> id + <string_literal> ) ; } \n <ect>
\t3 } catch ( io <identifiersep> exception e ) { \n \t4 log . error ( e . get <identifiersep> message ( ) ) ; } } \n \t2 credentials creds = get <identifiersep> shared <identifiersep> credentials ( ) ; \n \t2 if ( creds != null && supported . contains ( creds . get <identifiersep> class ( ) ) ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
<comment> \n \t5 switch ( n . state ) { \n \t5 case looking : \n \t6 if ( get <identifiersep> init <identifiersep> last <identifiersep> logged <identifiersep> zxid ( ) == - 1 ) { \n <ect>
\t1 while ( rs . next ( ) ) { \n \t2 prefs . add ( build <identifiersep> preference ( rs ) ) ; } \n \t1 return prefs ; \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n <ect>
\t10 log . debug ( <string_literal> , cause ) ; \n \t9 } else if ( cause instanceof http <identifiersep> exception ) { \n \t10 log . error ( <string_literal> , cause ) ; \n \t9 } else { \n <ect>
\t6 cluster <identifiersep> client . stop ( ) ; \n \t6 ha <identifiersep> communication <identifiersep> life . shutdown ( ) ; } \n \t5 catch ( throwable t ) \n \t5 { \n <ect>
\t2 void collect ( cuboid <identifiersep> result result ) ; } \n \t1 private < t > void build ( record <identifiersep> consume <identifiersep> blocking <identifiersep> queue <identifiersep> controller < t > input , i <identifiersep> cuboid <identifiersep> collector collector ) \n \t3 throws io <identifiersep> exception { \n \t2 long start <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t2 if ( fnode . path == null ) \n \t3 log . fine ( <string_literal> ) ; \n \t2 else \n \t3 log . fine ( <string_literal> + fnode . path . to <identifiersep> string ( ) + <string_literal> + new content <identifiersep> name ( fnode . name ) ) ; \n <ect>
\t3 try { \n \t4  <identifiersep> bf . close ( ) ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3  <identifiersep> watched <identifiersep> tester = new im <identifiersep> connection <identifiersep> tester (  <identifiersep> watched <identifiersep> instant <identifiersep> messenger ,  <identifiersep> watcher <identifiersep> instant <identifiersep> messenger , <number_literal> , <number_literal> ) ; \n \t3  <identifiersep> watched <identifiersep> thread = new thread (  <identifiersep> watched <identifiersep> tester ) ; \n \t3  <identifiersep> watched <identifiersep> thread . start ( ) ; } \n \t2 catch ( throwable e ) { \n <ect>
\t4 log . debug ( <string_literal> , cl . get <identifiersep> name ( ) , tomcat <identifiersep> resource <identifiersep> entries <identifiersep> field , nsfe ) ; \n \t4 try { \n \t5 clear <identifiersep> map ( cl . get <identifiersep> superclass ( ) , loader , tomcat <identifiersep> resource <identifiersep> entries <identifiersep> field ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t1 <comment> \n \t1 protected void on <identifiersep> missing <identifiersep> response ( command command , future <identifiersep> response response ) { \n <ect>
\t1 this . mysql <identifiersep> char <identifiersep> set = my <identifiersep> sql <identifiersep> utils . mysql <identifiersep> default <identifiersep> charset ; \n \t1 this . checkpoint <identifiersep> dist <identifiersep> in <identifiersep> bytes = conf . get <identifiersep> long ( \n \t2 mysql <identifiersep> checkpoint <identifiersep> bytes <identifiersep> key , default <identifiersep> checkpoint <identifiersep> bytes ) ; \n \t1 if ( this . checkpoint <identifiersep> dist <identifiersep> in <identifiersep> bytes < 0 ) { \n <ect>
\t4 } else { \n \t5 throw new configuration <identifiersep> exception ( <string_literal> , \n \t7 <string_literal> + modestring + <string_literal> ) ; } \n \t3 } else { <comment> \n <ect>
\t3 rs = stmt . execute <identifiersep> query ( ) ; \n \t3 if ( rs . next ( ) ) { \n \t4 return rs . get <identifiersep> string ( 1 ) ; } \n \t2 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t3  <identifiersep> cluster . set <identifiersep> status ( top <identifiersep> id , <string_literal> ) ; \n \t3 return 0 ; } \n \t2 int slots <identifiersep> needed = slots <identifiersep> to <identifiersep> use - slots <identifiersep> free ; \n \t2 int num <identifiersep> new <identifiersep> nodes = node <identifiersep> pool . get <identifiersep> node <identifiersep> count <identifiersep> if <identifiersep> slots <identifiersep> were <identifiersep> taken ( slots <identifiersep> needed , lesser <identifiersep> pools ) ; \n <ect>
\t1 public console <identifiersep> proxy <identifiersep> vo do <identifiersep> assign <identifiersep> proxy ( long data <identifiersep> center <identifiersep> id , long vm <identifiersep> id ) { \n \t2 console <identifiersep> proxy <identifiersep> vo proxy = null ; \n \t2 vm <identifiersep> instance <identifiersep> vo vm =  <identifiersep> instance <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm == null ) { \n <ect>
\t4 if ( dm != null ) { \n \t5 dm . free ( ) ; } \n \t3 } catch ( libvirt <identifiersep> exception l ) { \n \t4 s <identifiersep> logger . trace ( <string_literal> , l ) ; } } \n <ect>
\t3 logger . warn ( <string_literal> , get <identifiersep> response <identifiersep> type ( ) ) ; \n \t3 return false ; } \n \t2 final string response <identifiersep> type = request . get <identifiersep> parameter ( o <identifiersep> auth20constants . response <identifiersep> type ) ; \n \t2 if ( ! validator . check <identifiersep> response <identifiersep> types ( response <identifiersep> type , o <identifiersep> auth20response <identifiersep> types . values ( ) ) ) { \n <ect>
\t2 response response = client . target ( port <identifiersep> provider <identifiersep> util . generate <identifiersep> url ( <string_literal> , t <identifiersep> true ) ) . request ( ) \n \t4 . post ( entity . entity ( small , <string_literal> ) ) ; \n \t2 assert . assert <identifiersep> equals ( <number_literal> , response . get <identifiersep> status ( ) ) ; \n \t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t5  <identifiersep> log . warn ( <string_literal> ) ; \n \t4 return rv ; \n \t3 } catch ( general <identifiersep> security <identifiersep> exception gse ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 new <identifiersep> gz . delete <identifiersep> on <identifiersep> exit ( ) ; \n \t1 return new <identifiersep> gz ; } \n public static void end <identifiersep> set <identifiersep> slider <identifiersep> lib <identifiersep> dir ( file new <identifiersep> gz ) throws io <identifiersep> exception { \n \t1 if ( new <identifiersep> gz == null || ! new <identifiersep> gz . exists ( ) ) return ; \n <ect>
\t1 @ override \n \t1 public d <identifiersep> space <identifiersep> object resolve ( context context , string identifier , \n \t8 string . . . attributes ) \n \t2 throws identifier <identifiersep> not <identifiersep> found <identifiersep> exception , identifier <identifiersep> not <identifiersep> resolvable <identifiersep> exception { \n <ect>
\t1 <comment> \n \t1 final string table <identifiersep> id = conn . table <identifiersep> operations ( ) . table <identifiersep> id <identifiersep> map ( ) . get ( dest <identifiersep> table ) ; \n \t1 assert . assert <identifiersep> not <identifiersep> null ( table <identifiersep> id ) ; \n \t1 <comment> \n <ect>
\t2 final message <identifiersep> recoverer message <identifiersep> recoverer = get <identifiersep> message <identifiersep> recoverer ( ) ; \n \t2 retry <identifiersep> interceptor . set <identifiersep> recoverer ( ( args , cause ) - > { \n \t3 message message = ( message ) args [ 1 ] ; \n \t3 if ( message <identifiersep> recoverer == null ) { \n <ect>
\t8 <comment> \n \t8 <comment> \n \t8  <identifiersep> last <identifiersep> ping = - 1 ; \n \t8 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t1 inet <identifiersep> address address = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( \n \t2 <string_literal> . equals <identifiersep> ignore <identifiersep> case ( name ) ? null : name ) ; \n \t1 return address . get <identifiersep> canonical <identifiersep> host <identifiersep> name ( ) ; } \n \t1 catch ( unknown <identifiersep> host <identifiersep> exception ex ) { \n <ect>
\t3 if ( is <identifiersep> transacted ( ) || is <identifiersep> synchronous ( ) ) { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t1 public void change <identifiersep> password ( user u , string pw ) throws dao <identifiersep> exception { \n \t2 user auth <identifiersep> user = context . get <identifiersep> authenticated <identifiersep> user ( ) ; \n \t2 if ( auth <identifiersep> user == null ) { \n \t3 auth <identifiersep> user = u ; } \n <ect>
@ override \n protected string generate ( final tree <identifiersep> logger tree <identifiersep> logger , final generator <identifiersep> context context ) { \n \t1 logger . info ( <string_literal> , serializer <identifiersep> package <identifiersep> name , serializer <identifiersep> class <identifiersep> name ) ; \n \t1 final string source = non <identifiersep> gwt <identifiersep> event <identifiersep> qualifier <identifiersep> serializer <identifiersep> generator . generate <identifiersep> source ( translatable <identifiersep> annotation <identifiersep> utils . get <identifiersep> translatable <identifiersep> qualifiers ( context . get <identifiersep> type <identifiersep> oracle ( ) ) ) ; \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t1 response response = request . post ( entity . entity ( str , media <identifiersep> type . application <identifiersep> xml <identifiersep> type ) ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t1 char <identifiersep> set <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element entity = response . read <identifiersep> entity ( char <identifiersep> set <identifiersep> favorite <identifiersep> movie <identifiersep> xml <identifiersep> root <identifiersep> element . class ) ; \n <ect>
\t3 } else { \n \t4 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n \t4 bc <identifiersep> log . logger \n \t5 . warn ( <string_literal> + widget <identifiersep> id + <string_literal> + widget . get <identifiersep> class ( ) + <string_literal> ) ; \n <ect>
\t5 node <identifiersep> stats . furthest <identifiersep> client <identifiersep> cache <identifiersep> ssk <identifiersep> success = dist ; \n \t5 if ( log <identifiersep> debug ) logger . debug ( this , <string_literal> + key + <string_literal> ) ; \n \t5 return block ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 } finally { \n \t3 try { \n \t4 if ( reader != null ) reader . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 session <identifiersep> helper . clear <identifiersep> session ( id ) ; \n \t3 tx . success ( ) ; \n \t3 return true ; \n \t2 } catch ( framework <identifiersep> exception ex ) { \n <ect>
\t7 saml <identifiersep> registered <identifiersep> service <identifiersep> caching <identifiersep> metadata <identifiersep> resolver . class ) ; \n \t3 final optional < saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade > facade = \n \t5 saml <identifiersep> registered <identifiersep> service <identifiersep> service <identifiersep> provider <identifiersep> metadata <identifiersep> facade . get ( resolver , saml , entity <identifiersep> id ) ; \n \t3 if ( facade == null || ! facade . is <identifiersep> present ( ) ) { \n <ect>
\t1 @ override \n \t1 public void revert ( batch <identifiersep> id id , byte [ ] commit <identifiersep> result ) { \n \t2 commited <identifiersep> value commited <identifiersep> value = utils . deserialize ( commit <identifiersep> result , commited <identifiersep> value . class ) ; \n \t2 if ( commited <identifiersep> value == null ) { \n <ect>
\t1 while ( read <identifiersep> len != - 1 ) { \n \t2 zip . write ( chunk , 0 , read <identifiersep> len ) ; \n \t2 read <identifiersep> len = in . read ( chunk ) ; } \n \t1 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 repository . reset <identifiersep> configuration ( ) ; } } \n \t1 string conf <identifiersep> debug = subst ( element . get <identifiersep> attribute ( config <identifiersep> debug <identifiersep> attr ) ) ; \n \t1 if ( ! conf <identifiersep> debug . equals ( <string_literal> ) && ! conf <identifiersep> debug . equals ( <string_literal> ) ) { \t1 \n \t1 log <identifiersep> log . warn ( <string_literal> <string_literal> \\ <string_literal> ) ; \n <ect>
\t1 static { \n \t2 try { \n \t3 load <identifiersep> multi <identifiersep> word <identifiersep> dict ( ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t4 web <identifiersep> monitor <identifiersep> endpoint . get <identifiersep> rest <identifiersep> base <identifiersep> url ( ) ) ; \n \t3 log . debug ( <string_literal> ) ; \n \t3 resource <identifiersep> manager . start ( ) ; \n \t3 resource <identifiersep> manager <identifiersep> retrieval <identifiersep> service . start ( resource <identifiersep> manager <identifiersep> gateway <identifiersep> retriever ) ; \n <ect>
\t3 tokens = inventory <identifiersep> path . substring ( 1 ) . split ( <string_literal> ) ; \n \t2 else \n \t3 tokens = inventory <identifiersep> path . split ( <string_literal> ) ; \n \t2 if ( tokens == null || tokens . length != <number_literal> ) { \n <ect>
\t4 new bi <identifiersep> function [ completed <identifiersep> checkpoint , throwable , void ] { \n \t4 override def apply ( success : completed <identifiersep> checkpoint , cause : throwable ) : void = { \n \t5 if ( success != null ) { \n \t5 val path = success . get <identifiersep> external <identifiersep> pointer ( ) \n <ect>
\t3 persist the configuration to an external file post dc creation \n \t3 ''' \n \t3 self .  <identifiersep>  <identifiersep> persist <identifiersep> dc <identifiersep> config ( ) \n \t3 print <string_literal> \n <ect>
\t4 if ( ! sess . is <identifiersep> closed ( ) ) { \n \t5 byte [ ] h <identifiersep> data = base32 . decode ( destination . substring ( 0 , <number_literal> ) ) ; \n \t5 if ( h <identifiersep> data != null ) { \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) { \n <ect>
\t2 log . warn ( <string_literal> ) ; \n \t2 try { \n \t3 storm <identifiersep> base storm <identifiersep> base = data . get <identifiersep> storm <identifiersep> cluster <identifiersep> state ( ) . storm <identifiersep> base ( topology <identifiersep> id , null ) ; \n \t3 if ( storm <identifiersep> base . get <identifiersep> status ( ) . get <identifiersep> status <identifiersep> type ( ) == status <identifiersep> type . rollback ) { \n <ect>
\t2 schema <identifiersep> tuple <identifiersep> factory [ ] key <identifiersep> schema <identifiersep> tuple <identifiersep> factories = new schema <identifiersep> tuple <identifiersep> factory [ input <identifiersep> schemas . length ] ; \n \t2 for ( int i = 0 ; i < input <identifiersep> schemas . length ; i ++ ) { \n \t3 schema schema = input <identifiersep> schemas [ i ] ; \n \t3 if ( schema != null ) { \n <ect>
\t2 try { \n \t2 if ( sql != null ) { \n \t3 sql . close ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 public string to <identifiersep> dpt <identifiersep> value ( type type , string dpt <identifiersep> id ) { \n \t2 dpt dpt ; \n \t2 int main <identifiersep> number = get <identifiersep> main <identifiersep> number ( dpt <identifiersep> id ) ; \n \t2 if ( main <identifiersep> number == - 1 ) { \n <ect>
\t2 if ( material == null ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( mesh == null ) { \n <ect>
\t6 bf . log . warn ( <string_literal> + higher . key ( ) ) ; } \n \t3 } else { \n \t4 bf . log . info ( <string_literal> + i + <string_literal> ) ; \n \t4 if ( higher != null ) \n <ect>
\t2  <identifiersep> negative <identifiersep> cache . clear ( ) ; } \n \t1 public synchronized void restart ( ) { \n \t2  <identifiersep> db <identifiersep> dir =  <identifiersep> context . router ( ) . get <identifiersep> config <identifiersep> setting ( prop <identifiersep> db <identifiersep> dir ) ; \n \t2 if (  <identifiersep> db <identifiersep> dir == null ) { \n <ect>
\t1 private void create <identifiersep> exchange ( channel channel , string exchange <identifiersep> name ) throws exception { \n \t2 try { \n \t3 channel . exchange <identifiersep> declare ( exchange <identifiersep> name , <string_literal> , true ) ; \n \t2 } catch ( java . io . io <identifiersep> exception exception ) { \n <ect>
\t4 module module = camel <identifiersep> context <identifiersep> helper . mandatory <identifiersep> lookup ( camel <identifiersep> context , name , module . class ) ; \n \t4 log . debug ( <string_literal> , name , module ) ; \n \t4 object <identifiersep> mapper . register <identifiersep> module ( module ) ; } } \n \t2 if ( object <identifiersep> helper . is <identifiersep> not <identifiersep> empty ( timezone ) ) { \n <ect>
\t2 logger . warn ( <string_literal> ) ; \n \t2 return new file ( <string_literal> ) . get <identifiersep> absolute <identifiersep> path ( ) + <string_literal> ; } \n \t1 else if ( candidate <identifiersep> roots . size ( ) != 1 ) { \n \t2 for ( final string res : candidate <identifiersep> roots ) { \n <ect>
<number_literal> logger . debug ( <string_literal> , variable , tmp , result ) ; \n <number_literal> state = new decimal <identifiersep> type ( result ) ; \n <number_literal> found = true ; \n <number_literal> } catch ( exception e ) { \n <ect>
\t3 clear <identifiersep> locator <identifiersep> cache <identifiersep> result result = new clear <identifiersep> locator <identifiersep> cache <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 log . info ( merged . to <identifiersep> string ( ) ) ; \n \t2 assert . assert <identifiersep> equals ( merged . get <identifiersep> row <identifiersep> count ( ) , <number_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> delete ( ) { \n <ect>
\t1 log . info ( <string_literal> + image <identifiersep> uri <identifiersep> string ) ; \n \t1 error <identifiersep> response ( request , response , <string_literal> ) ; \n \t1 return ; } \n \t1 if ( dest <identifiersep> host <identifiersep> tracker . is <identifiersep> banned ( image <identifiersep> url . get <identifiersep> host ( ) ) ) { \n <ect>
\t5 } else { \n \t6 <comment> \n \t6 return null ; } } \n \t3 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t5 physical <identifiersep> network physical <identifiersep> network =  <identifiersep> physical <identifiersep> network <identifiersep> dao . find <identifiersep> by <identifiersep> id ( physical <identifiersep> network <identifiersep> id ) ; \n \t5 if ( physical <identifiersep> network == null ) { \n \t6 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> + physical <identifiersep> network <identifiersep> id + <string_literal> \n \t8 + required <identifiersep> offerings . get ( 0 ) . get <identifiersep> tags ( ) ) ; } \n <ect>
\t2 synchronized ( fentries ) { \n \t3 fentries . clear ( ) ; \n \t3 document = parser . parse (  <identifiersep> ccndurl ) ; \n \t3 node <identifiersep> list nodes = document . get <identifiersep> elements <identifiersep> by <identifiersep> tag <identifiersep> name ( <string_literal> ) ; \n <ect>
\t1 final executor <identifiersep> service executor = ( executor <identifiersep> service ) class . for <identifiersep> name ( <string_literal> ) . new <identifiersep> instance ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 return executor ; \n \t1 } catch ( final exception e ) { \n <ect>
\t1 public void start ( bundle <identifiersep> context bundle <identifiersep> context ) \n \t2 throws exception \n \t1 { \n <ect>
\t1 <comment> \n \t1 static final string tika <identifiersep> files = <string_literal> ; \n \t1 public void test <identifiersep> files ( ) throws exception { \n \t2 path tmp = create <identifiersep> temp <identifiersep> dir ( ) ; \n <ect>
\t6 return ; } } } \n \t3 u . warn ( log , <string_literal> + res + \n \t4 <string_literal> + this + ' ] ' ) ; } \n <ect>
\t6 { \n \t7 message += <string_literal> + relocation . get <identifiersep> message ( ) + <string_literal> ; } \n \t6 if ( artifact . get <identifiersep> dependency <identifiersep> trail ( ) != null && artifact . get <identifiersep> dependency <identifiersep> trail ( ) . size ( ) == 1 ) \n \t6 { \n <ect>
\t2 config . set <identifiersep> url ( webhook <identifiersep> url ) ; \n \t2 config . set <identifiersep> secret ( webhook <identifiersep> secret ) ; \n \t2 web <identifiersep> hook <identifiersep> dto webhook = repo <identifiersep> client . create <identifiersep> webhook ( gogs <identifiersep> user , repo <identifiersep> name , create <identifiersep> webhook ) ; \n <ect>
\t5 file queue = new file ( q <identifiersep> dir , <string_literal> + integer . to <identifiersep> string ( queue <identifiersep> idx ) ) ; \n \t5 if ( ! queue . delete ( ) ) { \n \t6 log . error ( <string_literal> + queue . get <identifiersep> name ( ) ) ; } } \n \t4 if ( ! lock . delete ( ) ) { \n <ect>
\t4 handle <identifiersep> error ( e , keys ) ; \n \t4 return ; } \n \t3 finally { \n <ect>
@ override \n public boolean is <identifiersep> selendroid <identifiersep> running ( ) { \n \t1 http <identifiersep> client http <identifiersep> client = http <identifiersep> client <identifiersep> builder . create ( ) . build ( ) ; \n \t1 string url = wd <identifiersep> status <identifiersep> endpoint . replace ( <string_literal> , string . value <identifiersep> of ( local <identifiersep> port ) ) ; \n <ect>
\t1 check <identifiersep> not <identifiersep> null ( id , <string_literal> ) ; \n \t1 logger . debug ( <string_literal> , id ) ; \n \t1 atomic <identifiersep> reference < node <identifiersep> metadata > node = atomics . new <identifiersep> reference ( suspend <identifiersep> node <identifiersep> strategy . suspend <identifiersep> node ( id ) ) ; \n \t1 boolean successful = node <identifiersep> suspended . apply ( node ) ; \n <ect>
\t3 response . set <identifiersep> responses ( res <identifiersep> list ) ; \n \t3 response . set <identifiersep> response <identifiersep> name ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 . get <identifiersep> job ( cubing <identifiersep> executable <identifiersep> util . get <identifiersep> cubing <identifiersep> job <identifiersep> id ( this . get <identifiersep> params ( ) ) ) ; \n \t3 statistics <identifiersep> decision <identifiersep> util . decide <identifiersep> cubing <identifiersep> algorithm ( cubing <identifiersep> job , optimize <identifiersep> segment ) ; \n \t3 return new execute <identifiersep> result ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> + id ) ; \n \t2 if ( current <identifiersep> id == null ) { \n \t3 current <identifiersep> id = id ; \n \t2 } else if ( current <identifiersep> id . get <identifiersep> id ( ) >= id . get <identifiersep> id ( ) ) { \n <ect>
\t7 router . get <identifiersep> host <identifiersep> name ( ) + <string_literal> ) ; } \n \t5 return boolean . true ; } \n \t3 } catch ( exception e ) { \n <ect>
\t3 return null ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( global <identifiersep> provider <identifiersep> id ) ) { \n \t3 logger . debug ( <string_literal> , global <identifiersep> provider <identifiersep> id ) ; \n \t3 return null ; } \n <ect>
\t5 adapter . no <identifiersep> content ( ) ; \n \t4 } else { \n \t5 support . render <identifiersep> resource <identifiersep> listing ( adapter , swagger <identifiersep> config , name , route , json , yaml , exchange . get <identifiersep> context ( ) . get <identifiersep> class <identifiersep> resolver ( ) , configuration ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 field field = null ; \n \t2 try { \n \t3 field = clazz . get <identifiersep> field ( property ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> field <identifiersep> exception e ) { \n <ect>
\t4 return retry ( cmd , num <identifiersep> retries ) ; \n \t3 } else { \n \t4 return new answer ( cmd , e ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 string create <identifiersep> sql = ( <string_literal> + view <identifiersep> name + <string_literal> + table <identifiersep> name ) ; \n \t2 return new string [ ] { drop <identifiersep> view , drop <identifiersep> table , create <identifiersep> sql } ; } \n \t1 private void execute <identifiersep> sql ( string sql ) throws sql <identifiersep> exception { \n \t2 connection con = sql <identifiersep> util . get <identifiersep> connection ( dbconf ) ; \n <ect>
\t1 } catch ( exception ex ) { \n \t2 log . error ( ex ) ; \n \t2 logs . extreme ( ) . error ( ex , ex ) ; } \n \t1 try { \n <ect>
\t6 s <identifiersep> logger . debug ( log ( seq , <string_literal> ) ) ; } \n \t5 throw new operation <identifiersep> timedout <identifiersep> exception ( req . get <identifiersep> commands ( ) ,  <identifiersep> id , seq , wait , false ) ; } \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 offset +=  <identifiersep> message [ offset ] & 0xff ; \n \t3 offset += 1 + <number_literal> ; \n \t3 int rv =  <identifiersep> message [ offset ] & 0xff ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 return ; \n \t3 } else { \n \t4 s <identifiersep> logger . warn ( <string_literal> + agent <identifiersep> id + <string_literal> + ( ( answer != null ) ? answer . get <identifiersep> details ( ) : <string_literal> ) ) ; } \n \t2 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ nullable \n \t1 public property <identifiersep> source < ? > remove ( string name ) { \n <ect>
\t4 try { \n \t5 cold <identifiersep> classes . add <identifiersep> all ( cold <identifiersep> classes . extract <identifiersep> from <identifiersep> resources ( main <identifiersep> factory <identifiersep> class <identifiersep> loader ) ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n \t5 logger . warn ( <string_literal> , e . get <identifiersep> message ( ) ) ; } \n <ect>
\t4 result . xpath . add <identifiersep> namespace ( xlink <identifiersep> ns ) ; \n \t4 document d = builder . build ( new string <identifiersep> reader ( prolog + xml + postlog ) ) ; \n \t4 result . xml = ( element ) d . get <identifiersep> root <identifiersep> element ( ) . get <identifiersep> content ( 0 ) ; \n \t3 } catch ( jdom <identifiersep> exception je ) { \n <ect>
\t1 if ( principal <identifiersep> entity != null ) { \n \t1 principal <identifiersep> entity . remove <identifiersep> privilege ( privilege <identifiersep> entity ) ; } \n \t1 privilege <identifiersep> dao . remove ( privilege <identifiersep> entity ) ; } \n public void uninstall <identifiersep> view <identifiersep> instance ( view <identifiersep> instance <identifiersep> entity instance <identifiersep> entity ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t7 if ( authorizable . is <identifiersep> group ( ) ) { \n \t8 try { \n \t9 return ! ( ( group <identifiersep> impl ) authorizable ) . is <identifiersep> everyone ( ) ; \n \t8 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t7 logger . error ( <string_literal> , e ) ; \n \t7 workspace <identifiersep> provider . clean <identifiersep> working <identifiersep> directory ( ) ; \n \t7 git = clone <identifiersep> repository ( working <identifiersep> dir ) ; } } \n \t4 } catch ( final git <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t2 if ( delayed <identifiersep> startup ) { \n \t3 try { \n \t4 thread <identifiersep> starter . interrupt ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 if ( <string_literal> . equals ( test <identifiersep> string ) ) { \n \t3 c . create <identifiersep> statement ( ) . execute <identifiersep> update ( <string_literal> ) ; \n \t3 log . trace ( <string_literal> + c ) ; \n \t2 } else { \n <ect>
\t3 feature <identifiersep> processor <identifiersep> manager manager = ( feature <identifiersep> processor <identifiersep> manager ) class . for <identifiersep> name ( manager <identifiersep> class ) . new <identifiersep> instance ( ) ; \n \t3 string features = mary <identifiersep> properties . need <identifiersep> property ( mary <identifiersep> properties . locale <identifiersep> prefix ( get <identifiersep> locale ( ) ) \n \t5 + <string_literal> ) ; \n \t3 this . feature <identifiersep> computer = new target <identifiersep> feature <identifiersep> computer ( manager , features ) ; } \n <ect>
\t1 else { \n \t2 log . error ( <string_literal> , ex ) ; \n \t2 throw new euare <identifiersep> exception ( http <identifiersep> response <identifiersep> status . internal <identifiersep> server <identifiersep> error , euare <identifiersep> exception . internal <identifiersep> failure ) ; } \n \t1 } catch ( final exception ex ) { \n <ect>
\t6 device <identifiersep> cmd = convert <identifiersep> open <identifiersep> hab <identifiersep> command <identifiersep> to <identifiersep> device <identifiersep> command ( command , device <identifiersep> cmd ) ; } } \n \t4 if ( device <identifiersep> cmd != null ) { \n \t5 remote <identifiersep> controller . send ( device <identifiersep> cmd , command . to <identifiersep> string ( ) ) ; \n \t4 } else { \n <ect>
\t2 long seq = req . get <identifiersep> sequence ( ) ; \n \t2 if ( listener != null ) { \n \t3 register <identifiersep> listener ( seq , listener ) ; \n <ect>
\t5 commit <identifiersep> failed <identifiersep> exception exception = new conflict <identifiersep> exception ( <string_literal> , revisions ) . as <identifiersep> commit <identifiersep> failed <identifiersep> exception ( ) ; \n \t5 b . merge ( new hook <identifiersep> failing <identifiersep> once ( exception ) , commit <identifiersep> info . empty ) ; \n \t5 merged . set ( true ) ; \n \t4 } catch ( commit <identifiersep> failed <identifiersep> exception e ) { \n <ect>
\t3 return default <identifiersep> conf <identifiersep> mapping <identifiersep> descriptor ; } \n \t2 protected void add <identifiersep> error ( string msg ) { \n \t3 errors . add ( msg + <string_literal> + res . get <identifiersep> display <identifiersep> name ( ) ) ; } \n \t2 public void warning ( sax <identifiersep> parse <identifiersep> exception ex ) { \n <ect>
<comment> \n \t1 protected void destroy <identifiersep> m <identifiersep> beans ( ) { \n <ect>
\t5 return false ; } } } \n \t2 else { \n \t3 if ( ! state ( rolling <identifiersep> back ) ) { \n <ect>
\t4  <identifiersep> volume <identifiersep> stats = volume <identifiersep> stats ; \n \t3 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . debug ( e . get <identifiersep> message ( ) ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t1 @ override \n \t1 public iterable < historic <identifiersep> item > query ( filter <identifiersep> criteria filter ) { \n \t2 logger . debug ( <string_literal> , filter . get <identifiersep> item <identifiersep> name ( ) ) ; \n \t2 if ( ! jpa <identifiersep> configuration . is <identifiersep> initialized ) { \n <ect>
\t3 try { \n \t4 resource <identifiersep> root <identifiersep> folder = cms <identifiersep> resource . get <identifiersep> folder <identifiersep> path ( \n \t5 cms . read <identifiersep> resource ( structure <identifiersep> id , cms <identifiersep> resource <identifiersep> filter . only <identifiersep> visible <identifiersep> no <identifiersep> deleted ) . get <identifiersep> root <identifiersep> path ( ) ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t1 private boolean get <identifiersep> write <identifiersep> lock ( ) { \n \t2 try { \n \t3 boolean rv =  <identifiersep> reorganize <identifiersep> lock . write <identifiersep> lock ( ) . try <identifiersep> lock ( <number_literal> , time <identifiersep> unit . milliseconds ) ; \n \t3 if ( ( ! rv ) &&  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t6 case release <identifiersep> lock : \n \t7 system . out . printf ( <string_literal> , up <identifiersep> prot . get <identifiersep> protocol <identifiersep> stack ( ) . get <identifiersep> channel ( ) . get <identifiersep> address ( ) , req ) ; \n \t7 return null ; } } \n \t4 catch ( exception ex ) { \n <ect>
\t3 { \n \t4 string msg = error . get <identifiersep> message ( ) ; \n \t4 error <identifiersep> message = ( ( msg != null ) ? ( msg + <string_literal> ) : <string_literal> ) \n \t5 + <string_literal> + error . get <identifiersep> code ( ) ; } \n <ect>
<comment> \n \t1 public void initialize <identifiersep> process ( ) throws exception { \n <ect>
\t4 update <identifiersep> latest <identifiersep> leader <identifiersep> info ( new <identifiersep> config <identifiersep> map , members ) ; \n \t4 return true ; \n \t3 } catch ( exception ex ) { \n \t4 <comment> \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t2 thread . yield ( ) ; \n \t2 long start = system . nano <identifiersep> time ( ) ; \n \t2 for ( long i = 0 ; i < len ; i ++ ) \n <ect>
\t1 count = count + 1 \n \t1 next unless exists \n \t1 current <identifiersep> server = get <identifiersep> server <identifiersep> name <identifiersep> for <identifiersep> region ( admin , r ) \n \t1 if current <identifiersep> server and current <identifiersep> server == servername \n <ect>
\t5 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n \t6 s <identifiersep> logger . error ( <string_literal> ) ; \n \t6 system . exit ( exit <identifiersep> status . error . value ( ) ) ; \n \t5 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t2 delete <identifiersep> snapshot <identifiersep> backup <identifiersep> command cmd = new delete <identifiersep> snapshot <identifiersep> backup <identifiersep> command ( swift , secondary <identifiersep> storage <identifiersep> pool <identifiersep> url , dc <identifiersep> id , account <identifiersep> id , volume <identifiersep> id , null , true ) ; \n \t2 try { \n \t3 answer ans =  <identifiersep> agent <identifiersep> mgr . send <identifiersep> to <identifiersep> ssvm ( dc <identifiersep> id , cmd ) ; \n \t3 if ( ans == null || ! ans . get <identifiersep> result ( ) ) { \n <ect>
\t3 router <identifiersep> info ri =  <identifiersep> context . net <identifiersep> db ( ) . lookup <identifiersep> router <identifiersep> info <identifiersep> locally (  <identifiersep> config . get <identifiersep> send <identifiersep> to ( ) ) ; \n \t3 if ( ri != null ) { \n \t4  <identifiersep> next <identifiersep> hop <identifiersep> cache = ri ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 synchronized (  <identifiersep> vms ) { \n \t5  <identifiersep> vms . put ( vm <identifiersep> name , state . running ) ; } } \n \t3 return new check <identifiersep> virtual <identifiersep> machine <identifiersep> answer ( cmd , vm <identifiersep> state , vnc <identifiersep> port ) ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 protected void select <identifiersep> exception ( io <identifiersep> exception exception ) { \n <ect>
\t3 } else if ( target == test ) { \n \t4 if ( action == stop <identifiersep> now ) { \n \t5 log . info ( <string_literal> , get <identifiersep> name ( ) ) ; \n \t5 context . get <identifiersep> thread ( ) . stop ( ) ; \n <ect>
\t1 { \n \t2 assert ! removed . is <identifiersep> empty ( ) ; <comment> \n \t2 log <identifiersep> distribution ( ) ; \n <ect>
\t7 try { \n \t8 conn . close ( ) ; \n \t7 } catch ( exception e ) { } \n \t7 log . info ( get <identifiersep> name ( ) + <string_literal> + i ) ; } } \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t1 public aws <identifiersep> credentials get <identifiersep> credentials ( ) { \n \t2 try { \n \t3 return super . get <identifiersep> credentials ( ) ; \n \t2 } catch ( amazon <identifiersep> client <identifiersep> exception ace ) { } \n <ect>
\t7 shutting <identifiersep> down <identifiersep> le = false ; \n \t7 start <identifiersep> leader <identifiersep> election ( ) ; } \n \t7 set <identifiersep> current <identifiersep> vote ( make <identifiersep> le <identifiersep> strategy ( ) . look <identifiersep> for <identifiersep> leader ( ) ) ; \n \t6 } catch ( exception e ) { \n <ect>
\t1 ctx . fire <identifiersep> user <identifiersep> event <identifiersep> triggered ( evt ) ; } \n @ override \n public void exception <identifiersep> caught ( channel <identifiersep> handler <identifiersep> context ctx , throwable cause ) throws exception \n { \n <ect>
\t1 try { \n \t1 properties . load ( input <identifiersep> stream ) ; \n \t1 input <identifiersep> stream . close ( ) ; \n \t1 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception fnf ) { \n <ect>
\t3 job current <identifiersep> job = null ; \n \t3 try { \n \t4 current <identifiersep> job = this . component <identifiersep> manager . < job <identifiersep> context > get <identifiersep> instance ( job <identifiersep> context . class ) . get <identifiersep> current <identifiersep> job ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 ser <identifiersep> refs = bundle <identifiersep> context . get <identifiersep> service <identifiersep> references ( \n \t4 protocol <identifiersep> provider <identifiersep> factory . class . get <identifiersep> name ( ) , osgi <identifiersep> filter ) ; } \n \t2 catch ( invalid <identifiersep> syntax <identifiersep> exception ex ) \n \t2 { \n <ect>
\t3 get <identifiersep> context ( ) . router ( ) . read <identifiersep> config ( ) ; \n \t3  <identifiersep> last <identifiersep> read = get <identifiersep> context ( ) . clock ( ) . now ( ) ; \n \t3 log log = get <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( read <identifiersep> config <identifiersep> job . class ) ; \n \t3 if ( log . should <identifiersep> debug ( ) ) \n <ect>
\t3 else \n \t4 return null ; } \n \t2 public acquire <identifiersep> result call ( ) throws exception \n \t2 { \n <ect>
\t3 { \n \t4 query <identifiersep> solution soln = results . next <identifiersep> solution ( ) ; \n \t4 rdf <identifiersep> node x = soln . get ( <string_literal> ) ; \t1 <comment> \n \t4 service <identifiersep> uri = x . to <identifiersep> string ( ) ; \n <ect>
\t7 return ; \n \t6 case busy : \n \t6 case canceled : \n \t6 case stop <identifiersep> requested : \n <ect>
\t1 map = new hash <identifiersep> map < string , collection < object > > ( map ) ; <comment> \n \t1 field field = schema . get <identifiersep> fields ( ) . get ( 0 ) ; \n \t1 object avro <identifiersep> result = avro <identifiersep> conversions . to <identifiersep> avro ( map , field . schema ( ) ) ; \n \t1 if ( avro <identifiersep> result == avro <identifiersep> conversions . error ) { \n <ect>
\t4  <identifiersep> idp <identifiersep> metadata <identifiersep> map = metadata <identifiersep> map ; \n \t4 expire <identifiersep> tokens ( ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 } catch ( metadata <identifiersep> provider <identifiersep> exception e ) { \n <ect>
\t4 catch ( exception e ) { \n \t5 string msg = <string_literal> ; \n \t5 mod . set <identifiersep> startup <identifiersep> error <identifiersep> message ( msg , e ) ; \n <ect>
\t3 string jvm <identifiersep> local <identifiersep> flavor = data <identifiersep> flavor . java <identifiersep> jvm <identifiersep> local <identifiersep> object <identifiersep> mime <identifiersep> type + <string_literal> <string_literal> \\ <string_literal> ; \n \t3 node <identifiersep> flavor = new data <identifiersep> flavor ( jvm <identifiersep> local <identifiersep> flavor ) ; \n \t3 j <identifiersep> meter <identifiersep> tree <identifiersep> node <identifiersep> data <identifiersep> flavors [ 0 ] = node <identifiersep> flavor ; } \n \t2 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t4 string host <identifiersep> desc = <string_literal> + vm . get <identifiersep> host <identifiersep> id ( ) + <string_literal> + vm . get <identifiersep> data <identifiersep> center <identifiersep> id <identifiersep> to <identifiersep> deploy <identifiersep> in ( ) + <string_literal> + vm . get <identifiersep> pod <identifiersep> id <identifiersep> to <identifiersep> deploy <identifiersep> in ( ) ; \n \t4  <identifiersep> alert <identifiersep> mgr . send <identifiersep> alert ( alert <identifiersep> type , vm . get <identifiersep> data <identifiersep> center <identifiersep> id <identifiersep> to <identifiersep> deploy <identifiersep> in ( ) , vm . get <identifiersep> pod <identifiersep> id <identifiersep> to <identifiersep> deploy <identifiersep> in ( ) , <string_literal> + vm . get <identifiersep> host <identifiersep> name ( ) + <string_literal> + vm . get <identifiersep> id ( ) + <string_literal> + host <identifiersep> desc , \n \t6 <string_literal> + vm . get <identifiersep> host <identifiersep> name ( ) + <string_literal> + vm . get <identifiersep> id ( ) + <string_literal> + vm . get <identifiersep> host <identifiersep> id ( ) + <string_literal> ) ; \n <ect>
\t2 logger . debug ( <string_literal> , node . get <identifiersep> node <identifiersep> id ( ) , \n \t4 command <identifiersep> class . get <identifiersep> command <identifiersep> class ( ) . get <identifiersep> label ( ) , endpoint <identifiersep> id ) ; \n \t2 string parm <identifiersep> number = arguments . get ( <string_literal> ) ; \n \t2 if ( parm <identifiersep> number == null ) { \n <ect>
\t2 url override <identifiersep> url = class <identifiersep> loader <identifiersep> helper . get <identifiersep> resource ( <string_literal> + config <identifiersep> override <identifiersep> resource , internal <identifiersep> config . class ) ; \n \t2 if ( override <identifiersep> url == null ) { <comment> \n \t3 override <identifiersep> url = class <identifiersep> loader <identifiersep> helper . get <identifiersep> resource ( config <identifiersep> override <identifiersep> resource , internal <identifiersep> config . class ) ; } \n \t2 if ( override <identifiersep> url == null ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t4 if ( runner . get <identifiersep> status ( ) == status . running ) { \n \t5 log . info ( <string_literal> + load <identifiersep> test . get <identifiersep> name ( ) + <string_literal> + runner . get <identifiersep> progress ( ) + <string_literal> \n \t7 + runner . get <identifiersep> running <identifiersep> thread <identifiersep> count ( ) ) ; } \n \t4 thread . sleep ( <number_literal> ) ; } \n <ect>
\t3 cloud <identifiersep> runtime <identifiersep> exception ex = new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> ) ; \n \t3 ex . add <identifiersep> proxy <identifiersep> object ( project . get <identifiersep> uuid ( ) , <string_literal> ) ; \n \t3 throw ex ; } } \n \t1 private boolean suspend <identifiersep> project ( project <identifiersep> vo project ) throws concurrent <identifiersep> operation <identifiersep> exception , resource <identifiersep> unavailable <identifiersep> exception { \n <ect>
\t1 private final dynamo <identifiersep> db <identifiersep> ticket <identifiersep> registry <identifiersep> facilitator db <identifiersep> table <identifiersep> service ; \n \t1 public dynamo <identifiersep> db <identifiersep> ticket <identifiersep> registry ( final cipher <identifiersep> executor cipher , final dynamo <identifiersep> db <identifiersep> ticket <identifiersep> registry <identifiersep> facilitator db <identifiersep> table <identifiersep> service ) { \n \t2 set <identifiersep> cipher <identifiersep> executor ( cipher ) ; \n \t2 this . db <identifiersep> table <identifiersep> service = db <identifiersep> table <identifiersep> service ; \n <ect>
\t4 final network <identifiersep> group network <identifiersep> group = \n \t5 entities . unique <identifiersep> result ( network <identifiersep> group . named ( account <identifiersep> full <identifiersep> name . get <identifiersep> instance ( network <identifiersep> peer . get <identifiersep> user <identifiersep> query <identifiersep> key ( ) ) , network <identifiersep> peer . get <identifiersep> group <identifiersep> name ( ) ) ) ; \n \t4 group <identifiersep> id = network <identifiersep> group . get <identifiersep> group <identifiersep> id ( ) ; \n \t4 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n <ect>
\t2 contact <identifiersep> group root <identifiersep> group2 \n \t3 = ( ( operation <identifiersep> set <identifiersep> persistent <identifiersep> presence ) op <identifiersep> set <identifiersep> presence2 ) . \n \t3 get <identifiersep> server <identifiersep> stored <identifiersep> contact <identifiersep> list <identifiersep> root ( ) ; \n \t2 logger . debug ( <string_literal> ) ; \n <ect>
\t2 for ( phone phone : phones ) { \n \t3 double left <identifiersep> duration <identifiersep> factor = phone . get <identifiersep> left <identifiersep> duration <identifiersep> factor ( ) ; \n \t3 if ( left <identifiersep> duration <identifiersep> factor > 0 ) { \n \t4 duration <identifiersep> factors . add ( left <identifiersep> duration <identifiersep> factor ) ; \n <ect>
\t2 string <identifiersep> writer sw = new string <identifiersep> writer ( ) ; \n \t2 try ( print <identifiersep> writer pw = new print <identifiersep> writer ( sw ) ) { \n \t3 pe . print <identifiersep> stack <identifiersep> trace ( pw ) ; } \n \t2 string python <identifiersep> stack <identifiersep> trace = sw . to <identifiersep> string ( ) . trim ( ) ; \n <ect>
\t1 tez <identifiersep> scratch <identifiersep> dir = create <identifiersep> tez <identifiersep> dir ( session <identifiersep> id , null ) ; \n \t1 if ( resources != null ) { \n \t1 <comment> \n \t1 this . resources = resources ; \n <ect>
\t6 || ( calendar <identifiersep> name . equals ( <string_literal> ) ) && entry . is <identifiersep> primary ( ) ) { \n \t5 calendar <identifiersep> id = entry ; \n \t5 logger . debug ( <string_literal> , calendar <identifiersep> name , calendar <identifiersep> id . get <identifiersep> id ( ) ) ; } } } \n \t2 if ( calendar <identifiersep> id == null ) { \n <ect>
\t1 listeners . for <identifiersep> each ( listener - > { \n \t1 try { \n \t2 call . accept ( listener ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t2 option <identifiersep> parser parser = ttc . get <identifiersep> parser ( ) ; \n \t2 for ( path translog <identifiersep> dir : translog <identifiersep> dirs ) { \n \t3 final path idx <identifiersep> location = translog <identifiersep> dir . get <identifiersep> parent ( ) . resolve ( <string_literal> ) ; \n \t3 assert <identifiersep> busy ( ( ) - > { \n <ect>
\t1 @ override \n \t1 public void close ( ) throws io <identifiersep> exception { \n \t2 list < runnable > runnables = service . shutdown <identifiersep> now ( ) ; \n \t2 if ( ! runnables . is <identifiersep> empty ( ) ) \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 camel <identifiersep> context . set <identifiersep> package <identifiersep> scan <identifiersep> class <identifiersep> resolver ( new osgi <identifiersep> package <identifiersep> scan <identifiersep> class <identifiersep> resolver ( bundle <identifiersep> context ) ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 camel <identifiersep> context . set <identifiersep> component <identifiersep> resolver ( new osgi <identifiersep> component <identifiersep> resolver ( bundle <identifiersep> context ) ) ; \n <ect>
\t4  <identifiersep> state = <number_literal> ; \n \t4 return ; \n \t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 message . write <identifiersep> to ( baos ) ; \n \t3 logger . trace ( baos . to <identifiersep> string ( ) ) ; \n \t3 logger . trace ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public worker <identifiersep> daemon <identifiersep> starter ( worker <identifiersep> process <identifiersep> factory worker <identifiersep> daemon <identifiersep> process <identifiersep> factory , logging <identifiersep> manager logging <identifiersep> manager ) { \n \t2 this . worker <identifiersep> daemon <identifiersep> process <identifiersep> factory = worker <identifiersep> daemon <identifiersep> process <identifiersep> factory ; \n \t2 this . logging <identifiersep> manager = logging <identifiersep> manager ; } \n \t1 public < t extends work <identifiersep> spec > worker <identifiersep> daemon <identifiersep> client start <identifiersep> daemon ( class < ? extends worker <identifiersep> protocol < action <identifiersep> execution <identifiersep> spec > > worker <identifiersep> protocol <identifiersep> implementation <identifiersep> class , daemon <identifiersep> fork <identifiersep> options fork <identifiersep> options ) { \n <ect>
public refresh ( string mapped <identifiersep> uri ) { \n \t1 super ( mapped <identifiersep> uri ) ; } \n @ override \n public response safe <identifiersep> handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n <ect>
\t3 if ( lock == null ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 return ; } \n \t3 if ( ! lock . lock ( <number_literal> ) ) { \n <ect>
\t5 <comment> \n \t5 notify <identifiersep> head ( ) ; } } } } \n \t1 private void notify <identifiersep> head ( ) { \n \t2 if ( ! commits . is <identifiersep> empty ( ) ) { \n <ect>
\t5 logger . info ( <string_literal> , nm ( ) , dev . get <identifiersep> address ( ) , bd ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> , nm ( ) , e ) ; \n \t3 } catch ( field <identifiersep> exception e ) { \n <ect>
\t4 <comment> \n \t4 wait ( minutes . to <identifiersep> millis ( <number_literal> ) ) ; \n \t4 long time = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n \t4 if ( time > minutes . to <identifiersep> millis ( <number_literal> ) ) \n <ect>
\t3 try { \n \t4 thread . sleep ( <number_literal> ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
private integer get <identifiersep> int <identifiersep> value ( map < string , ? extends object > properties , string property <identifiersep> key ) \n { \n \t1 if ( properties == null ) \n \t1 { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 return null ; } } \n \t2 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> accesscontrol , level . info ) ) { \n <ect>
\t3 reply . set <identifiersep> local <identifiersep> port ( syn <identifiersep> packet . get <identifiersep> local <identifiersep> port ( ) ) ; \n \t3 reply . set <identifiersep> remote <identifiersep> port ( syn <identifiersep> packet . get <identifiersep> remote <identifiersep> port ( ) ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> info ( ) ) \n \t4 <comment> \n <ect>
\t6 cookie <identifiersep> manager . remove <identifiersep> matching <identifiersep> cookies ( new <identifiersep> cookie ) ; \n \t6 if ( debug <identifiersep> enabled ) { \n \t7 log . info ( <string_literal> , new <identifiersep> cookie . to <identifiersep> string ( ) ) ; } } \n \t4 } catch ( malformed <identifiersep> cookie <identifiersep> exception e ) { <comment> \n <ect>
\t1 return start <identifiersep> hot <identifiersep> rod <identifiersep> server ( cache <identifiersep> manager ) ; } \n @ after <identifiersep> class ( always <identifiersep> run = true ) \n @ override \n protected void destroy <identifiersep> after <identifiersep> class ( ) { \n <ect>
\t2 } catch ( json <identifiersep> mapping <identifiersep> exception e1 ) { \n \t3 logger . error ( <string_literal> , e1 ) ; \n \t2 <comment> \n \t2 } catch ( io <identifiersep> exception e1 ) { \n <ect>
\t2 for ( integer i = 1 ; i < = <number_literal> ; i ++ ) { \n \t3 assert . assert <identifiersep> equals ( i . double <identifiersep> value ( ) , has <identifiersep> ten . get ( i . to <identifiersep> string ( ) ) ) ; } } \n \t1 @ test \n \t1 public void test <identifiersep> setting <identifiersep> default ( ) { \n <ect>
\t3 throw new class <identifiersep> not <identifiersep> found <identifiersep> exception ( bsh <identifiersep> interpreter ) ; } \n \t2 try { \n \t3 bsh <identifiersep> instance = bsh <identifiersep> class . new <identifiersep> instance ( ) ; \n \t2 } catch ( instantiation <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t3 public void write ( channel <identifiersep> handler <identifiersep> context ctx , object msg , channel <identifiersep> promise promise ) \n \t3 { \n \t4 if ( ! ( msg instanceof byte <identifiersep> buf ) ) \n \t4 { \n <ect>
\t4 can <identifiersep> commit = true ; \n \t4 finish ( status ) ; \n \t4 return ; } \n \t3 <comment> \n <ect>
\t2 string exist <identifiersep> separator = <string_literal> , non <identifiersep> exist <identifiersep> separator = <string_literal> ; \n \t2 for ( int i = 0 ; i < uri <identifiersep> list . length ; i ++ ) { \n \t3 if ( all <identifiersep> exists ) { \n \t4 all <identifiersep> exists = path <identifiersep> exists ( uri <identifiersep> list [ i ] , conf ) ; \n <ect>
\t2 return ; } \n \t2 fallback <identifiersep> ms < < = 1 ; } \n \t1 try { \n \t2 if ( op . apply ( orc <identifiersep> writer , cache <identifiersep> writer ) ) { \n <ect>
\t3 log . debug ( <string_literal> ) \n \t3 if ( type . declared <identifiersep> methods . any { method it - > it . name == 'main' } ) { \n \t4 result = script . run ( ) } \n \t3 <comment> \n <ect>
\t4 <comment> \n \t4 s = root . get <identifiersep> property ( alt <identifiersep> url ) ; \n \t4 if ( s != null ) add <identifiersep> alt <identifiersep> entry ( public <identifiersep> uri , s . get <identifiersep> resource ( ) . get <identifiersep> uri ( ) ) ; } \n \t3 else { \n <ect>
\t5 error ++ ; \n \t4 } else { \n \t5 s <identifiersep> logger . info ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> ) ; } \n \t3 } else if ( ( api . get <identifiersep> response <identifiersep> type ( ) != response <identifiersep> type . error ) && ( api . get <identifiersep> response <identifiersep> code ( ) != <number_literal> ) ) { \n <ect>
\t3 <string_literal> ) ; } \n \t1 private static premature <identifiersep> algorithm <identifiersep> termination get <identifiersep> termination <identifiersep> criterion ( hierarchical <identifiersep> configuration config , set < prioritized <identifiersep> vra <identifiersep> listener > algorithm <identifiersep> listeners ) { \n \t2 string based <identifiersep> on = config . get <identifiersep> string ( <string_literal> ) ; \n \t2 if ( based <identifiersep> on == null ) { \n <ect>
\t1 child <identifiersep> contexts <identifiersep> read <identifiersep> write <identifiersep> lock . read <identifiersep> lock ( ) . unlock ( ) ; } \n \t1 synchronized ( this ) { \n \t1 if ( state == state <identifiersep> response && all <identifiersep> children <identifiersep> complete ) { \n <ect>
\t1 if ( null != this . conn ) { \n \t1 try { \n \t2 this . conn . close ( ) ; \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t2 grid <identifiersep> cache < integer , integer > cache0 = grid0 . cache ( null ) ; \n \t2 grid <identifiersep> cache <identifiersep> affinity < integer > aff = cache0 . affinity ( ) ; \n \t2 uuid id0 = grid0 . local <identifiersep> node ( ) . id ( ) ; \n \t2 integer primary <identifiersep> key = key ( grid0 , primary ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public boolean execute ( final object in <identifiersep> request ) \n \t1 { \n <ect>
\t3 } else { \n \t4 log . warn ( <string_literal> , url ) ; \n \t4 return null ; } \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t5 log . info ( <string_literal> ) ; \n \t5 break ; } } \n \t3 throw new data <identifiersep> channel <identifiersep> error ( <string_literal> + queue <identifiersep> attempt <identifiersep> limit + <string_literal> ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 logger . warn ( <string_literal> , get <identifiersep> key ( ) , e ) ; \n \t1 } finally { \n \t1 stop ( ) ; } } \n private void launch ( logger logger ) throws interrupted <identifiersep> exception { \n <ect>
private x509certificate generate <identifiersep> certificate ( string certificate <identifiersep> location , key <identifiersep> pair key <identifiersep> pair , string algorithm ) throws exception { \n \t1 try { \n \t1 file cert <identifiersep> file = new file ( certificate <identifiersep> location ) ; \n \t1 if ( cert <identifiersep> file . exists ( ) ) { \n <ect>
\t4 if ( old == null ) { \n \t5 log . info ( <string_literal> + kind + <string_literal> + name + <string_literal> + source <identifiersep> name ) ; \n \t5 resource . create ( entity ) ; \n \t4 } else { \n <ect>
\t1 if ( ugi != null ) { \n \t2 if ( cur <identifiersep> user != null && cur <identifiersep> user . get <identifiersep> user <identifiersep> name ( ) . equals ( ugi . get <identifiersep> user <identifiersep> name ( ) ) ) { \n \t2 log . debug ( <string_literal> , ugi ) ; \n \t2 } else { \n <ect>
<comment> \n \t1 protected static void roll <identifiersep> file ( string from , string to ) { \n \t2 file target = new file ( to ) ; \n \t2 if ( target . exists ( ) ) { \n <ect>
\t2 logger . debug ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) ) ; \n \t2 int command = serial <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( offset ) ; \n \t2 switch ( command ) { \n \t3 case manufacturer <identifiersep> specific <identifiersep> get : \n <ect>
\t9 log . info ( <string_literal> ) ; \n \t9 session . login ( session . get <identifiersep> access <identifiersep> token ( ) ) ; \n \t9 log . info ( <string_literal> ) ; \n \t8 } catch ( salesforce <identifiersep> exception e ) { \n <ect>
\t10 title <identifiersep> from <identifiersep> database = pms . get ( ) . get <identifiersep> similar <identifiersep> tv <identifiersep> series <identifiersep> name ( title <identifiersep> from <identifiersep> open <identifiersep> subtitles ) ; \n \t10 title <identifiersep> from <identifiersep> database <identifiersep> simplified = pms . get ( ) . get <identifiersep> simplified <identifiersep> show <identifiersep> name ( title <identifiersep> from <identifiersep> database ) ; \n \t10 if ( over <identifiersep> the <identifiersep> top <identifiersep> logging ) { \n <number_literal> logger . info ( <string_literal> + title <identifiersep> from <identifiersep> database ) ; \n <ect>
\t8 if ( ! attribute . is <identifiersep> flattened ( ) ) { \n \t9 string prototype <identifiersep> attribute <identifiersep> name = attribute . prototype <identifiersep> name ( ) ; \n \t9 if ( prototype <identifiersep> attribute <identifiersep> name == null ) { \n \t10 if ( attribute . external <identifiersep> type ( ) == null ) { \n <ect>
\t3 if ( curate ( curator , c , wfi ) ) { \n \t4 basic <identifiersep> workflow <identifiersep> service . advance ( c , wfi , c . get <identifiersep> current <identifiersep> user ( ) , false , true ) ; \n \t4 return true ; } \n \t2 } else { \n <ect>
\t1 public builder ( processor parent ) { \n \t2 super ( parent ) ; } \n \t1 public builder ( ) { } \n \t1 public jar build ( ) throws exception { \n <ect>
\t2 { \n \t3 response response = client . target ( generate <identifiersep> url ( <string_literal> , url <identifiersep> prefix + ext ) ) . request ( ) \n \t5 . post ( entity . entity ( external <identifiersep> xml <identifiersep> type , <string_literal> ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t3  <identifiersep> error <identifiersep> string = <string_literal> +  <identifiersep> remote <identifiersep> size + <string_literal> + downloaded ; \n \t3  <identifiersep> download <identifiersep> time += system . current <identifiersep> time <identifiersep> millis ( ) -  <identifiersep> start ; \n \t3 return  <identifiersep> total <identifiersep> bytes ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 create <identifiersep> broker ( new class <identifiersep> path <identifiersep> resource ( <string_literal> ) ) ; \n \t2 brokers . get ( <string_literal> ) . broker . wait <identifiersep> until <identifiersep> started ( ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n <ect>
\t5 + id + <string_literal> + facade <identifiersep> api . nbt <identifiersep> custom <identifiersep> item <identifiersep> stack ) ; \n \t4 return ; } \n \t3 block block = block . registry . get <identifiersep> object ( new resource <identifiersep> location ( reg <identifiersep> name ) ) ; \n \t3 if ( block == blocks . air ) { \n <ect>
\t4 public void run ( ) { \n \t5 try { \n \t6 check <identifiersep> store <identifiersep> usage <identifiersep> limits ( ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 public void before ( @ not <identifiersep> null list < ? extends v <identifiersep> file <identifiersep> event > events ) { \n \t2 for ( v <identifiersep> file <identifiersep> event event : events ) { \n \t3 if ( event instanceof v <identifiersep> file <identifiersep> delete <identifiersep> event ) { \n <ect>
\t7 try { \n \t8 do <identifiersep> unsubscribe ( url , listener ) ; \n \t8 listeners . remove ( listener ) ; \n \t7 } catch ( throwable t ) { <comment> \n <ect>
\t1 protected event do <identifiersep> execute ( final request <identifiersep> context context ) { \n \t2 final string ticket <identifiersep> granting <identifiersep> ticket <identifiersep> id = web <identifiersep> utils . get <identifiersep> ticket <identifiersep> granting <identifiersep> ticket <identifiersep> id ( context ) ; \n \t2 final string ticket <identifiersep> granting <identifiersep> ticket <identifiersep> value <identifiersep> from <identifiersep> cookie = ( string ) context . get <identifiersep> flow <identifiersep> scope ( ) . get ( web <identifiersep> utils . parameter <identifiersep> ticket <identifiersep> granting <identifiersep> ticket <identifiersep> id ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( ticket <identifiersep> granting <identifiersep> ticket <identifiersep> id ) ) { \n <ect>
\t4 if ( ! result ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + internal <identifiersep> lb <identifiersep> vm + <string_literal> ) ; } \n \t4 result = (  <identifiersep> internal <identifiersep> lb <identifiersep> mgr . destroy <identifiersep> internal <identifiersep> lb <identifiersep> vm ( internal <identifiersep> lb <identifiersep> vm . get <identifiersep> id ( ) , context . get <identifiersep> account ( ) , context . get <identifiersep> caller ( ) . get <identifiersep> id ( ) ) ) ; \n \t4 if ( ! result ) { \n <ect>
\t1 public int get <identifiersep> max <identifiersep> session <identifiersep> timeout ( ) { \n \t2 return max <identifiersep> session <identifiersep> timeout ; } \n \t1 <comment> \n \t1 public void set <identifiersep> max <identifiersep> session <identifiersep> timeout ( int max ) { \n <ect>
<comment> \n \t1 public long get <identifiersep> time ( ) \n \t1 { \n \t2 if ( ! start <identifiersep> time <identifiersep> is <identifiersep> set ) \n <ect>
\t2 <comment> \n \t2 string token = extract <identifiersep> header <identifiersep> token ( request ) ; \n \t2 <comment> \n \t2 if ( token == null ) { \n <ect>
\t1 iterable < ? extends image > parsed <identifiersep> images ; \n \t1 try { \n \t2 parsed <identifiersep> images = immutable <identifiersep> set . copy <identifiersep> of ( concat ( cluster <identifiersep> images , normal <identifiersep> images . get ( ) ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 super ( input , context ) ; \n \t2 this . current <identifiersep> stage = null ; \n \t2 if ( input == null ) \n \t2 { \n <ect>
\t1 public static void write ( string base <identifiersep> dir , string url ) { \n \t2 file file = path ( base <identifiersep> dir ) ; \n \t2 dot <identifiersep> floo <identifiersep> json dot <identifiersep> floo <identifiersep> json = parse ( base <identifiersep> dir ) ; \n \t2 if ( dot <identifiersep> floo <identifiersep> json == null ) { \n <ect>
\t3 padding <identifiersep> length = node . fast <identifiersep> weak <identifiersep> random . next <identifiersep> int ( math . min ( <number_literal> , max <identifiersep> packet <identifiersep> size - pre <identifiersep> padding <identifiersep> length ) ) ; \n \t2 } else { \n \t3 padding <identifiersep> length = 0 ; <comment> \n \t3 <comment> \n <ect>
\t3 if (  <identifiersep> max <identifiersep> object <identifiersep> store <identifiersep> coordinators > 0 ) { \n \t4 eo <identifiersep> object <identifiersep> store <identifiersep> coordinator . set <identifiersep> default <identifiersep> coordinator (  <identifiersep> object <identifiersep> stores . get ( 0 ) ) ; } } \n \t2 catch ( exception e ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + class <identifiersep> name , e ) ; } \n <ect>
\t2 try { \n \t3 add <identifiersep> parameter ( <string_literal> , body ) ; \n \t3 merge <identifiersep> template ( writer , build <identifiersep> template <identifiersep> name ( template , get <identifiersep> default <identifiersep> template ( ) ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 if ( future . get ( ) ) { \n \t2 log . info ( <string_literal> , wm <identifiersep> tez <identifiersep> session . get <identifiersep> session <identifiersep> id ( ) , wm <identifiersep> tez <identifiersep> session . get <identifiersep> pool <identifiersep> name ( ) ) ; } \n \t1 } catch ( interrupted <identifiersep> exception | execution <identifiersep> exception e ) { \n <ect>
\t2 if ( connection . is <identifiersep> closed ( ) ) { \n \t3 try { \n \t4 connection . open ( connection <identifiersep> string ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t4 valve <identifiersep> maximum = float . to <identifiersep> string ( bytes [ plus <identifiersep> data <identifiersep> start + <number_literal> ] & 0x <identifiersep> ff * <number_literal> / <number_literal> ) ; \n \t4 valve <identifiersep> offset = float . to <identifiersep> string ( bytes [ plus <identifiersep> data <identifiersep> start + <number_literal> ] & 0x <identifiersep> ff * <number_literal> / <number_literal> ) ; \n \t4 logger . debug ( <string_literal> , temp <identifiersep> offset ) ; \n \t4 logger . debug ( <string_literal> , temp <identifiersep> open <identifiersep> window ) ; \n <ect>
\t3 return verify <identifiersep> access <identifiersep> for <identifiersep> grant <identifiersep> client <identifiersep> credentials ( request , grant <identifiersep> type , u <identifiersep> profile ) ; } \n \t2 return false ; } \n \t1 private boolean verify <identifiersep> access <identifiersep> for <identifiersep> grant <identifiersep> client <identifiersep> credentials ( final http <identifiersep> servlet <identifiersep> request request , final string grant <identifiersep> type , final user <identifiersep> profile u <identifiersep> profile ) { \n \t2 final string client <identifiersep> id = request . get <identifiersep> parameter ( o <identifiersep> auth20constants . client <identifiersep> id ) ; \n <ect>
\t2 } catch ( discovery <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( resource <identifiersep> in <identifiersep> use <identifiersep> exception ex ) { \n <ect>
\t1 thread <identifiersep> one . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 signal <identifiersep> thread thread <identifiersep> two = new signal <identifiersep> thread ( process <identifiersep> instance <identifiersep> id ) ; \n \t1 thread <identifiersep> two . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n <ect>
\t5 csv += quotechar + values . get ( i ) . get ( j ) + quotechar ; } \n \t4 csv += endlinechar ; } \n \t3 return csv ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 final string qualified <identifiersep> user1 = kdc . qualify <identifiersep> user ( user1 ) ; \n \t1 <comment> \n \t1 user <identifiersep> group <identifiersep> information ugi = user <identifiersep> group <identifiersep> information . login <identifiersep> user <identifiersep> from <identifiersep> keytab <identifiersep> and <identifiersep> return <identifiersep> ugi ( qualified <identifiersep> user1 , \n \t2 user1keytab . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n <ect>
\t2 stop <identifiersep> watch watch = new stop <identifiersep> watch ( ) ; \n \t2 log . info ( <string_literal> , times ) ; \n \t2 for ( int i = 0 ; i < times ; i ++ ) { \n \t3 template . send <identifiersep> body ( <string_literal> , <string_literal> ) ; } \n <ect>
\t3 { \t1 logger . error ( <string_literal> ) ; \n \t4 response . set <identifiersep> status ( <number_literal> ) ; \n \t4 return ; } } \n \t2 catch ( exception e ) { \n <ect>
\t3 result . tnase = ( org . apache . accumulo . core . client . impl . thrift . thrift <identifiersep> not <identifiersep> active <identifiersep> service <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> tnase <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t1 while ( true ) { \n \t2 long last = time <identifiersep> stamp . get ( ) ; \n \t2 delta = current - last ; \n \t2 if ( delta < - <number_literal> * <number_literal> ) { \n <ect>
\t3 result . ouch2 = ( accumulo <identifiersep> security <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> ouch2is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t5 response . get <identifiersep> attributes ( ) . for <identifiersep> each ( attribute - > attributes . put ( attribute . get <identifiersep> attribute <identifiersep> name ( ) , attribute . get <identifiersep> value ( ) . to <identifiersep> string ( ) ) ) ; \n \t5 return pair . of ( boolean . true , optional . of ( attributes ) ) ; } \n \t4 if ( ! failover <identifiersep> on <identifiersep> authentication <identifiersep> failure ) { \n \t5 throw new failed <identifiersep> login <identifiersep> exception ( <string_literal> + username ) ; } \n <ect>
\t2 try ( buffered <identifiersep> input <identifiersep> stream in = new buffered <identifiersep> input <identifiersep> stream ( new file <identifiersep> input <identifiersep> stream ( file ) ) ) { \n \t3 return this . registered <identifiersep> service <identifiersep> serializers . stream ( ) . filter ( s - > s . supports ( file ) ) . map ( s - > s . load ( in ) ) \n \t4 . filter ( objects : : non <identifiersep> null ) . flat <identifiersep> map ( collection : : stream ) . collect ( collectors . to <identifiersep> list ( ) ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t1 { \n \t2 int period = metadata . get <identifiersep> memtable <identifiersep> flush <identifiersep> period ( ) ; \n \t2 if ( period > 0 ) \n \t2 { \n <ect>
\t5  <identifiersep> state = <number_literal> ; \n \t5 <comment> \n \t5 if ( auth != auth <identifiersep> type . bobintro && auth != auth <identifiersep> type . session ) { \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 default : \n \t3 metrics . decrement <identifiersep> counter ( metrics <identifiersep> constant . zookeeper <identifiersep> hive <identifiersep> sharedlocks ) ; \n \t3 break ; } \n \t2 } catch ( exception e ) { \n <ect>
\t7 list < ? extends buddy > old <identifiersep> items , \n \t7 list < ? extends buddy > new <identifiersep> items , \n \t7 buddy buddy ) \n \t2 { \n <ect>
\t6 statement . close ( ) ; } \n \t5 catch ( throwable ignore ) { \n \t6 <comment> \n \t3 catch ( exception e ) { \n <ect>
\t6 need <identifiersep> restart = true ; \n \t5 } catch ( exception e ) { \n \t6 errbuf . append ( o . get <identifiersep> name ( ) ) . append ( ' ' ) . append ( e ) \n \t8 . append ( ' \\ n' ) ; \n <ect>
<comment> \n \t1 public byte [ ] compose <identifiersep> send <identifiersep> data ( e <identifiersep> bus <identifiersep> binding <identifiersep> provider provider , string item <identifiersep> name , command command ) { \n \t2 if ( configuration <identifiersep> provider == null || configuration <identifiersep> provider . is <identifiersep> empty ( ) ) { \n <ect>
\t3 if ( data != null ) { \n \t4 try { \n \t5 return deserialize ( data ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 super . channel <identifiersep> inactive ( ctx ) ; } \n \t2 @ override \n \t2 public void exception <identifiersep> caught ( final channel <identifiersep> handler <identifiersep> context ctx , \n \t4 final throwable cause ) { \n <ect>
\t3 print <identifiersep> class <identifiersep> javadoc ( out , udt ) ; \n \t2 else \n \t3 print <identifiersep> class <identifiersep> javadoc ( out , <string_literal> + udt . get <identifiersep> qualified <identifiersep> input <identifiersep> name ( ) + <string_literal> ) ; } \n \t1 protected void generate <identifiersep> udt <identifiersep> interfaces ( schema <identifiersep> definition schema ) { \n <ect>
\t3 if ( socket <identifiersep> buffer <identifiersep> size > 0 ) { \n \t4 sock . set <identifiersep> receive <identifiersep> buffer <identifiersep> size ( socket <identifiersep> buffer <identifiersep> size ) ; \n \t4 sock . set <identifiersep> send <identifiersep> buffer <identifiersep> size ( socket <identifiersep> buffer <identifiersep> size ) ; \n \t3 } else { \n <ect>
\t5 em . close ( ) ; } \n \t4 else { \n \t5 log . warn ( <string_literal> , executor . get <identifiersep> name ( ) ) ; } } \n \t3 catch ( exception ex ) { \n <ect>
\t3 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> + this . snapshot <identifiersep> id , e ) ; } \n \t2 storage <identifiersep> resource <identifiersep> with <identifiersep> callback srwc = null ; \n \t2 storage <identifiersep> resource snapshot <identifiersep> resource = null ; \n \t2 if ( prev <identifiersep> snap != null ) { \n <ect>
\t1 protected file <identifiersep> project <identifiersep> manager ( file dir ) { \n \t2 super ( ) ; \n \t2  <identifiersep> workspace <identifiersep> dir = dir ; \n \t2 if ( !  <identifiersep> workspace <identifiersep> dir . exists ( ) && !  <identifiersep> workspace <identifiersep> dir . mkdirs ( ) ) { \n <ect>
\t4 . data ( false ) \n \t4 . node ( ) ; \n \t3 client client = node . client ( ) ; \n <ect>
\t1 public outstanding <identifiersep> migrations ( logger logger ) { \n \t1 super ( logger ) ; } \n \t1 @ override \n \t1 public void run ( ) { \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 try { \n \t4 int result = results [ i ] . get ( ) ; \n \t4 string reply = ( string ) reply <identifiersep> channel . receive ( <number_literal> ) . get <identifiersep> payload ( ) ; \n <ect>
\t1 filepath <identifiersep> to <identifiersep> property <identifiersep> attributes = { } \n \t1 configuration <identifiersep> type = os . path . splitext ( filename ) [ 0 ] \n \t1 for path <identifiersep> and <identifiersep> parser in paths <identifiersep> and <identifiersep> parsers : \n \t2 path , parser = path <identifiersep> and <identifiersep> parser \n <ect>
\t1 final hash <identifiersep> set < string > pools <identifiersep> to <identifiersep> redistribute , \n \t1 final map < wm <identifiersep> tez <identifiersep> session , get <identifiersep> request > to <identifiersep> reuse , \n \t1 final map < wm <identifiersep> tez <identifiersep> session , wm <identifiersep> event > record <identifiersep> move <identifiersep> events ) { \n \t1 string dest <identifiersep> pool <identifiersep> name = move <identifiersep> session . dest <identifiersep> pool ; \n <ect>
@ test \n public void test <identifiersep> schema <identifiersep> literal ( ) throws io <identifiersep> exception { \n \t1 file temp <identifiersep> file = new <identifiersep> test <identifiersep> file ( true ) ; \n \t1 string target = temp <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ; \n <ect>
\t4 } else { \n \t5 log . warn ( <string_literal> + exchange ) ; } \n \t3 } catch ( throwable t ) { \n \t4 <comment> \n <ect>
\t2 bc <identifiersep> log . logger . info ( <string_literal> ) ; \n \t2 if ( ! git <identifiersep> commit <identifiersep> hash . starts <identifiersep> with ( <string_literal> ) ) { \n \t3 bc <identifiersep> log . logger . info ( <string_literal> ) ; \n \t3 bc <identifiersep> log . logger . info ( <string_literal> + git <identifiersep> branch ) ; \n <ect>
\t3 if ( host <identifiersep> map . contains <identifiersep> key ( hostname <identifiersep> key ) ) { \n \t3 string hostname = host <identifiersep> map . get ( hostname <identifiersep> key ) ; \n \t3 hosts . add ( hostname ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( <string_literal> . equals ( s ) ) { \n \t3 log . debug ( <string_literal> ) ; \n \t3 answer = new camel <identifiersep> conduit <identifiersep> definition <identifiersep> parser ( ) . parse ( element , context ) ; } \n \t2 if ( <string_literal> . equals ( s ) ) { \n <ect>
\t8 var run = function ( ) { \n \t9 try { \n \t10 document . create <identifiersep> style <identifiersep> sheet ( ) . css <identifiersep> text = content ; } \n \t9 catch ( e ) { \n <ect>
\t1 client client = null ; \n \t1 while ( true ) { \n \t1 try { \n \t2 client = master <identifiersep> client . get <identifiersep> connection <identifiersep> with <identifiersep> retry ( context ) ; \n <ect>
\t5 return msg ; } } \n \t3 logger . warn ( <string_literal> , response <identifiersep> code , url ) ; \n \t3 if ( response <identifiersep> code == http <identifiersep> status . sc <identifiersep> internal <identifiersep> server <identifiersep> error ) { \n \t4 final string value = response . get <identifiersep> status <identifiersep> line ( ) . get <identifiersep> reason <identifiersep> phrase ( ) ; \n <ect>
\t4 int level <identifiersep> num = 0 ; \n \t4 try { \n \t5 level <identifiersep> num = integer . parse <identifiersep> int ( raw <identifiersep> level <identifiersep> num ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t5 final level log <identifiersep> level = level . get <identifiersep> level ( name ) ; \n \t5 if ( log <identifiersep> level != null ) { \n \t6 configurator . set <identifiersep> root <identifiersep> level ( log <identifiersep> level ) ; \n \t5 } else { \n <ect>
\t3 if ( volume . get <identifiersep> state ( ) != volume . state . ready ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + volume . get <identifiersep> id ( ) + <string_literal> + volume . get <identifiersep> state ( ) + <string_literal> ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + volume . get <identifiersep> id ( ) + <string_literal> + volume . get <identifiersep> state ( ) + <string_literal> ) ; } \n \t3 if ( volume . get <identifiersep> pool <identifiersep> id ( ) == dest <identifiersep> pool . get <identifiersep> id ( ) ) { \n <ect>
\t3 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + groovy <identifiersep> home ) ; } \n \t2 final file [ ] files = jar <identifiersep> dir . list <identifiersep> files ( ) ; \n \t2 for ( file file : files ) { \n \t3 try { \n <ect>
\t3 outsb . append ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 logger . error ( this , <string_literal> + e , e ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n \t3 outsb . append ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n <ect>
\t2 return config ; } \n \t1 @ override \n \t1 public void process ( exchange exchange ) throws exception { <comment> \n \t2 try { \n <ect>
<comment> \n \t1 @ deprecated \n \t1 public generic <identifiersep> test <identifiersep> bean <identifiersep> customizer ( ) { \n <ect>
\t4 if ( hash <identifiersep> table != null ) { \n \t5 try { \n \t6 hash <identifiersep> table . close ( ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t1 this . email <identifiersep> service = email <identifiersep> service ; \n \t1 try { \n \t1 policy = pentaho <identifiersep> system . get ( i <identifiersep> authorization <identifiersep> policy . class ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t4 timedout <identifiersep> task . run ( ) ; \n \t4 if ( !  <identifiersep> password <identifiersep> command ) { \n \t5  <identifiersep> logger . warn ( <string_literal> + build <identifiersep> command <identifiersep> line ( command ) + <string_literal> + timedout <identifiersep> task . get <identifiersep> result ( ) ) ; \n \t4 } else { \n <ect>
\t5 stmt . set <identifiersep> bytes ( si ++ , bytes ) ; } \n \t4 stmt . add <identifiersep> batch ( ) ; } \n \t3 results = stmt . execute <identifiersep> batch ( ) ; \n \t2 } catch ( batch <identifiersep> update <identifiersep> exception ex ) { \n <ect>
@ after <identifiersep> class \n public static void tear <identifiersep> down ( ) throws io <identifiersep> exception , interrupted <identifiersep> exception { \n \t1 log . debug ( <string_literal> ) ; \n \t1 service . stop ( ) ; \n <ect>
\t1 collections . shuffle ( order , random ) ; \n \t1 <comment> \n \t1 list < integer > train = order . sub <identifiersep> list ( 0 , <number_literal> ) ; \n \t1 list < integer > test = order . sub <identifiersep> list ( <number_literal> , <number_literal> ) ; \n <ect>
\t5 solr = solr <identifiersep> server ; \n \t4 } catch ( solr <identifiersep> server <identifiersep> exception e ) { \n \t5 log . error ( <string_literal> , e ) ; } \n \t3 } else { \n <ect>
\t5 throw new exception ( <string_literal> + jar <identifiersep> file . get <identifiersep> name ( ) ) ; } \n \t4 try ( input <identifiersep> stream is = zip <identifiersep> file . get <identifiersep> input <identifiersep> stream ( zip <identifiersep> file . get <identifiersep> entry ( <string_literal> ) ) ) { \n \t5 plugin <identifiersep> descriptor = plugin <identifiersep> descriptor . from <identifiersep> xml <identifiersep> stream ( is ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t4 log . error ( <string_literal> + i ) ; \n \t4 log . error ( sent . to <identifiersep> string ( ) ) ; \n \t4 log . error ( consumed . to <identifiersep> string ( ) ) ; \n \t4 <comment> <ect>
\t1 public void commit ( ) { \n \t2 try { \n \t3 get <identifiersep> solr ( ) . commit ( ) ; \n \t2 } catch ( solr <identifiersep> server <identifiersep> exception e ) { \n <ect>
\t2 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + map <identifiersep> name ) ; } \n \t1 private db <identifiersep> collection get <identifiersep> ticket <identifiersep> collection <identifiersep> instance ( final string map <identifiersep> name ) { \n \t2 try { \n \t3 final db <identifiersep> collection inst = this . mongo <identifiersep> template . get <identifiersep> collection ( map <identifiersep> name ) ; \n <ect>
\t8 conflict <identifiersep> revisions , store . get <identifiersep> head <identifiersep> revision ( ) ) ; \n \t6 suspended = true ; \n \t6 store . suspend <identifiersep> until <identifiersep> all ( conflict <identifiersep> revisions ) ; \n \t6 conflict <identifiersep> revisions . clear ( ) ; \n <ect>
\t4 return false ; \n \t3 } finally { \n \t4 <comment> \n \t4 http <identifiersep> post . release <identifiersep> connection ( ) ; } \n <ect>
\t2 out <identifiersep> stream . close ( ) ; \n \t2 buffer = null ; \n \t2 return <identifiersep> value = storage <identifiersep> resource . get <identifiersep> id ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 final list < domain <identifiersep> router <identifiersep> vo > routers =  <identifiersep> router <identifiersep> dao . list <identifiersep> isolated <identifiersep> by <identifiersep> host <identifiersep> id ( null ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + routers . size ( ) + <string_literal> ) ; \n \t4 update <identifiersep> site2site <identifiersep> vpn <identifiersep> connection <identifiersep> state ( routers ) ; \n \t4 list < network <identifiersep> vo > networks =  <identifiersep> network <identifiersep> dao . list <identifiersep> vpc <identifiersep> networks ( ) ; \n <ect>
\t2 if ( callable == null ) { \n \t3 return true ; } \n \t2 boolean queued = false ; \n \t2 if ( services . get ( ) . get <identifiersep> system <identifiersep> mode ( ) == system <identifiersep> mode . safemode ) { \n <ect>
\t6 if ( api . set <identifiersep> param ( this . get <identifiersep> param ( ) ) == false ) { \n \t7 s <identifiersep> logger . error ( <string_literal> + api . get <identifiersep> name ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; \n \t7 return false ; } \n \t6 else if ( api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) != null ) { \n <ect>
\t3 final string scheme <identifiersep> caps = lb <identifiersep> caps . get ( capability . lb <identifiersep> schemes ) ; \n \t3 if ( scheme <identifiersep> caps != null ) { \n \t4 for ( final load <identifiersep> balancing <identifiersep> rule rule : rules ) { \n \t5 if ( ! scheme <identifiersep> caps . contains ( rule . get <identifiersep> scheme ( ) . to <identifiersep> string ( ) ) ) { \n <ect>
\t3 if ( chosen <identifiersep> colors != null ) { \n \t4 colors = <string_literal> ; \n \t4 for ( colored <identifiersep> mana <identifiersep> symbol symbol : chosen <identifiersep> colors ) { \n \t5 colors += symbol . to <identifiersep> string ( ) ; } } \n <ect>
\t2 if ( !  <identifiersep> enabled ) { \n \t3 return ; } \n \t2 list < load <identifiersep> balancer <identifiersep> vo > remaining <identifiersep> lbs =  <identifiersep> load <identifiersep> balancer <identifiersep> dao . list <identifiersep> by <identifiersep> ip <identifiersep> address ( lb . get <identifiersep> source <identifiersep> ip <identifiersep> address <identifiersep> id ( ) ) ; \n \t2 if ( remaining <identifiersep> lbs . size ( ) == 0 ) { \n <ect>
\t1 test <identifiersep> server = new hsqldb <identifiersep> test <identifiersep> server ( ) ; \n \t1 try { \n \t1 test <identifiersep> server . reset <identifiersep> server ( ) ; \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t3 message <identifiersep> producer producer = session . create <identifiersep> producer ( book <identifiersep> queue ) ; \n \t3 text <identifiersep> message message = session . create <identifiersep> text <identifiersep> message ( book . get <identifiersep> name ( ) ) ; \n \t3 producer . set <identifiersep> delivery <identifiersep> mode ( delivery <identifiersep> mode . non <identifiersep> persistent ) ; \n \t3 producer . send ( message ) ; \n <ect>
\t1 final atomic <identifiersep> integer count = new atomic <identifiersep> integer ( 0 ) ; \n \t1 executor <identifiersep> service real <identifiersep> executor = executors . new <identifiersep> fixed <identifiersep> thread <identifiersep> pool ( num <identifiersep> threads ) ; \n \t1 executor = new unstoppable <identifiersep> executor <identifiersep> service ( real <identifiersep> executor ) ; \n \t1 latch <identifiersep> task blocked <identifiersep> no <identifiersep> op = new latch <identifiersep> task ( count : : increment <identifiersep> and <identifiersep> get ) ; \n <ect>
\t3 service <identifiersep> action <identifiersep> context current <identifiersep> context = new service <identifiersep> action <identifiersep> context ( entry . get <identifiersep> token ( ) , null ) ; \n \t3 action <identifiersep> controller . execute ( current <identifiersep> context , remove <identifiersep> o <identifiersep> auth <identifiersep> token <identifiersep> action ) ; } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t3 if ( ! voice . is <identifiersep> loaded ( ) ) { \n \t4 voice . allocate ( ) ; } \n \t3 voice . speak ( text ) ; \n \t2 } else { \n <ect>
\t2 @ non <identifiersep> null \n \t2 final assertion <identifiersep> consumer <identifiersep> service acs = adaptor . get <identifiersep> assertion <identifiersep> consumer <identifiersep> service ( binding ) ; \n \t2 final string location = string <identifiersep> utils . is <identifiersep> blank ( acs . get <identifiersep> response <identifiersep> location ( ) ) ? acs . get <identifiersep> location ( ) : acs . get <identifiersep> response <identifiersep> location ( ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( location ) ) { \n <ect>
\t4 type = config . get <identifiersep> node <identifiersep> entity <identifiersep> class ( type <identifiersep> string ) ; \n \t4 if ( type != null ) { \n \t5 query . and <identifiersep> types ( type ) ; \n \t4 } else { \n <ect>
\t1 log . info ( <string_literal> + san <identifiersep> snapshot <identifiersep> id + <string_literal> ) ; \n \t1 storage <identifiersep> resource = connection <identifiersep> manager . connect <identifiersep> target ( snap <identifiersep> iqn , lun ) ; \n \t1 storage <identifiersep> resource . set <identifiersep> id ( snapshot <identifiersep> id ) ; \n \t1 } catch ( exception conn <identifiersep> ex ) { \n <ect>
\t2 out . set <identifiersep> password ( credentials <identifiersep> util . fetch <identifiersep> password ( out ) ) ; \n \t2 <comment> \n \t2 credentials <identifiersep> util . clean <identifiersep> up <identifiersep> sensitive <identifiersep> properties ( out . get <identifiersep> conf ( ) ) ; \n \t1 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 logger . debug ( <string_literal> , e ) ; } \n \t1 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception | security <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception \n \t2 | illegal <identifiersep> argument <identifiersep> exception | invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 reader = new buffered <identifiersep> reader ( new file <identifiersep> reader ( file ) ) ; \n \t3 set <identifiersep> script ( reader ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 <comment> \n \t1 run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . acidnobucket + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n \t1 test <identifiersep> txn <identifiersep> commands2 . run <identifiersep> worker ( hive <identifiersep> conf ) ; \n \t1 rs = run <identifiersep> statement <identifiersep> on <identifiersep> driver ( <string_literal> + table . acidnobucket + <string_literal> , conf <identifiersep> for <identifiersep> tez ) ; \n <ect>
\t3 output <identifiersep> stream output <identifiersep> stream =  <identifiersep> session . get <identifiersep> stdin ( ) ; \n \t3 output <identifiersep> stream . write ( message . get <identifiersep> bytes ( ) ) ; \n \t3 output <identifiersep> stream . flush ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 if ( alive == null ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 return new fence <identifiersep> answer ( command , false , <string_literal> ) ; } \n \t3 if ( alive ) { \n <ect>
\t2 if ( retries <identifiersep> made > 0 || has <identifiersep> connection <identifiersep> life <identifiersep> time <identifiersep> reached ( method ) ) { \n \t3 if ( this . ugi != null ) { \n \t3 <comment> \n \t3 try { \n <ect>
\t2 queue destination = session . create <identifiersep> queue ( get <identifiersep> destination <identifiersep> name ( ) ) ; \n \t2 message <identifiersep> producer producer = session . create <identifiersep> producer ( destination ) ; \n \t2 message <identifiersep> consumer consumer = session . create <identifiersep> consumer ( destination ) ; \n \t2 for ( int i = 1 ; i < = msg <identifiersep> count ; i ++ ) { \n <ect>
\t2 process <identifiersep> component <identifiersep> attributes ( current <identifiersep> time <identifiersep> millis , component , attribute <identifiersep> map ) ; } \n \t1 } catch ( unable <identifiersep> to <identifiersep> connect <identifiersep> exception uce ) { \n \t2 log . warn ( <string_literal> + uce . get <identifiersep> connect <identifiersep> url ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 super ( timeout ) ; \n \t2 this . port = port ; } \n \t1 @ override \n \t1 protected communication <identifiersep> channel connect ( ) { \n <ect>
\t4 ext . set <identifiersep> module <identifiersep> id ( this . get <identifiersep> module <identifiersep> id ( ) ) ; \n \t4 extensions . add ( ext ) ; \n \t4 log . debug ( get <identifiersep> module <identifiersep> id ( ) + <string_literal> , ext . get <identifiersep> extension <identifiersep> id ( ) , ext . get <identifiersep> class ( ) ) ; } \n \t3 catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception | instantiation <identifiersep> exception | illegal <identifiersep> access <identifiersep> exception | no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error e ) { \n <ect>
<comment> \n protected void on <identifiersep> css <identifiersep> lint <identifiersep> exception ( final css <identifiersep> lint <identifiersep> exception e , final resource resource ) { \n <ect>
\t1 public void test <identifiersep> create ( ) throws exception { \n \t2 <comment> \n \t2 final com . braintreegateway . result result = request <identifiersep> body ( <string_literal> , null ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t2 <comment> \n \t2 string json ; \n \t2 for ( string fn : trevni <identifiersep> schemas ) { \n \t3 json = basedir + <string_literal> + fn + <string_literal> ; \n <ect>
\t2 try { \n \t3 send <identifiersep> alert ( alert <identifiersep> type , data <identifiersep> center <identifiersep> id , pod <identifiersep> id , msg , msg ) ; \n \t3 return true ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 . create ( ) ; \n \t2 try { \n \t3 custom . starting ( ) ; \n \t3 log . info ( <string_literal> ) ; \n <ect>
\t2 snapshot <identifiersep> transfer . set <identifiersep> bucket <identifiersep> name ( names [ 0 ] ) ; \n \t2 snapshot <identifiersep> transfer . set <identifiersep> key <identifiersep> name ( names [ 1 ] ) ; \n \t2 snapshot <identifiersep> transfer . cancel <identifiersep> upload ( ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 if (  <identifiersep> upnp <identifiersep> manager != null && addresses . get <identifiersep> any <identifiersep> address ( ) == null ) \n \t3  <identifiersep> upnp <identifiersep> manager . start ( ) ; \n \t2 config <identifiersep> transports ( ) ; \n <ect>
\t3 lock . unlock ( ) ; } } \n \t1 @ override \n \t1 public void remove <identifiersep> stop <identifiersep> events ( final collection < daemon <identifiersep> stop <identifiersep> event > events ) { \n \t2 lock . lock ( ) ; \n <ect>
\t3 { \n \t4 local <identifiersep> host = inet <identifiersep> address . get <identifiersep> local <identifiersep> host ( ) ; } \n \t3 catch ( unknown <identifiersep> host <identifiersep> exception e ) \n \t3 { \n <ect>
\t2 assert <identifiersep> null ( ops . get <identifiersep> message ( ) ) ; \n \t2 x <identifiersep> log . info ( <string_literal> ) ; \n \t2 assert <identifiersep> true ( log . get <identifiersep> message ( ) . ends <identifiersep> with ( <string_literal> ) ) ; \n \t2 assert <identifiersep> null ( ops . get <identifiersep> message ( ) ) ; \n <ect>
\t3 logger . debug ( <string_literal> , logger <identifiersep> constants . tfinit , is <identifiersep> pull <identifiersep> up <identifiersep> resistor <identifiersep> enabled ( ) , \n \t5 get <identifiersep> sub <identifiersep> id ( ) ) ; } \n \t2 m <identifiersep> bricklet <identifiersep> io4 bricklet = get <identifiersep> mbrick ( ) ; \n \t2 if ( bricklet == null ) { \n <ect>
\t7 for ( string disk <identifiersep> path : disks ) { \n \t8 datastore <identifiersep> file file = new datastore <identifiersep> file ( disk <identifiersep> path ) ; \n \t8 disk <identifiersep> info = disk <identifiersep> info <identifiersep> builder . get <identifiersep> disk <identifiersep> info <identifiersep> by <identifiersep> backing <identifiersep> file <identifiersep> base <identifiersep> name ( file . get <identifiersep> file <identifiersep> base <identifiersep> name ( ) , ds <identifiersep> name ) ; \n \t8 if ( disk <identifiersep> info != null ) { \n <ect>
\t1 @ refresh <identifiersep> scope \n \t1 public services <identifiersep> manager services <identifiersep> manager ( @ qualifier ( <string_literal> ) final service <identifiersep> registry service <identifiersep> registry ) { \n \t2 switch ( cas <identifiersep> properties . get <identifiersep> service <identifiersep> registry ( ) . get <identifiersep> management <identifiersep> type ( ) ) { \n \t3 case domain : \n <ect>
\t2 results = ( ns <identifiersep> array < er . neo4jadaptor . test . eo . first <identifiersep> entity > ) eo <identifiersep> sort <identifiersep> ordering . sorted <identifiersep> array <identifiersep> using <identifiersep> key <identifiersep> order <identifiersep> array ( results , sort <identifiersep> orderings ) ; } \n \t1 return results ; } \n public void add <identifiersep> to <identifiersep> joins <identifiersep> second <identifiersep> entity <identifiersep> first <identifiersep> entities <identifiersep> relationship ( er . neo4jadaptor . test . eo . first <identifiersep> entity object ) { \n <ect>
\t3 return ( raw ) ; } \n \t2 private int extract <identifiersep> value ( msg msg , int group ) throws field <identifiersep> exception { \n \t3 string low <identifiersep> byte = get <identifiersep> string <identifiersep> parameter ( <string_literal> , <string_literal> ) ; \n \t3 if ( low <identifiersep> byte . equals ( <string_literal> ) ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 byte [ ] new <identifiersep> payload = { ( byte ) remove <identifiersep> node <identifiersep> any , ( byte ) <number_literal> } ; \n \t2 new <identifiersep> message . set <identifiersep> message <identifiersep> payload ( new <identifiersep> payload ) ; \n \t2 return new <identifiersep> message ; } \n \t1 public serial <identifiersep> message do <identifiersep> request <identifiersep> stop ( ) { \n <ect>
\t4 log . info ( <string_literal> + rsrc3 ) ; \n \t4 log . info ( <string_literal> + rsrc4 ) ; \n \t4 log . info ( <string_literal> + rsrc5 ) ; \n \t4 log . info ( <string_literal> + rsrc6 ) ; \n <ect>
\t2 private short  <identifiersep> sync <identifiersep> mode = db <identifiersep> sync <identifiersep> generic . sync <identifiersep> mode <identifiersep> update ; \n \t2 @ override \n \t2 public void run ( ) { \n \t3 try { \n <ect>
\t3 is <identifiersep> full ( context , memory <identifiersep> usage ) ; \n \t3 fast <identifiersep> producer ( context , producer <identifiersep> info ) ; \n \t3 if ( is <identifiersep> producer <identifiersep> flow <identifiersep> control ( ) && context . is <identifiersep> producer <identifiersep> flow <identifiersep> control ( ) ) { \n \t4 if ( is <identifiersep> flow <identifiersep> control <identifiersep> log <identifiersep> required ( ) ) { \n <ect>
\t2 try { \n \t3 return integer . parse <identifiersep> int ( p ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception ex ) \n \t2 { \n <ect>
\t2 <comment> \n \t2 if ( 0 == colfam <identifiersep> prefix && ! input <identifiersep> format <identifiersep> columns . is <identifiersep> empty ( ) ) { \n \t3 accumulo <identifiersep> input <identifiersep> format . fetch <identifiersep> columns ( job , input <identifiersep> format <identifiersep> columns ) ; } \n \t2 collection < range > ranges = collections . singleton ( new range ( start , end ) ) ; \n <ect>
\t6 + layer <identifiersep> base <identifiersep> name + <string_literal> + p <identifiersep> id + <string_literal> ) ; \n \t5 for ( layer <identifiersep> info layer : catalog . get <identifiersep> layers ( ) ) { \n \t6 logger . info ( <string_literal> + layer . get <identifiersep> name ( ) ) ; \n \t6 if ( layer . get <identifiersep> name ( ) . contains ( layer <identifiersep> base <identifiersep> name ) && layer . get <identifiersep> name ( ) . contains ( p <identifiersep> id ) ) { \n <ect>
<comment> \n \t1 private resource file <identifiersep> upload ( resource directory , string filename , http <identifiersep> servlet <identifiersep> request request ) { \n \t2 if ( logger . is <identifiersep> loggable ( level . info ) ) { \n <ect>
\t3 log . warn ( <string_literal> + from <identifiersep> dir . get <identifiersep> canonical <identifiersep> path ( ) + <string_literal> + index <identifiersep> name ) ; \n \t3 return ; } \n \t2 arrays . sort ( files ) ; \n \t2 for ( file file : files ) { \n <ect>
\t3 building <identifiersep> slot <identifiersep> map <identifiersep> iterator . max <identifiersep> per <identifiersep> item = builder <identifiersep> max <identifiersep> per <identifiersep> item <identifiersep> factor ; } \n \t2 if ( utils . cauldron <identifiersep> detected ) { \n \t3 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n \t3 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 <comment> \n \t1 private int find <identifiersep> router <identifiersep> eth <identifiersep> device <identifiersep> index ( final string domr <identifiersep> name , final string router <identifiersep> ip , final string mac ) throws exception { \n <ect>
\t1 @ override \n \t1 public task <identifiersep> definition get <identifiersep> task ( integer task <identifiersep> id ) throws dao <identifiersep> exception { \n \t2 task <identifiersep> definition task = ( task <identifiersep> definition ) session <identifiersep> factory . get <identifiersep> current <identifiersep> session ( ) . get ( task <identifiersep> definition . class , task <identifiersep> id ) ; \n \t2 if ( task == null ) { \n <ect>
\t1 { \n \t2 try { \n \t3 return get <identifiersep> url ( wiki , spaces , name , filename , null , context ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t3 this . keys <identifiersep> by <identifiersep> value = db . get <identifiersep> tree <identifiersep> map ( name ) ; \n \t3 this . values <identifiersep> by <identifiersep> key = db . get <identifiersep> tree <identifiersep> set ( name + <string_literal> ) ; \n \t3 this . is <identifiersep> new = false ; \n \t2 } else { \n <ect>
\t4 configuration . get <identifiersep> port ( ) ) ) ; } } \n \t2 } else { \n \t2 logger . info ( <string_literal> ) ; } \n \t1 } catch ( final exception e ) { \n <ect>
\t1 public void set <identifiersep> up ( ) throws exception { \n \t2 log . info ( <string_literal> , bundle <identifiersep> context ) ; } \n \t1 @ after \n \t1 public void tear <identifiersep> down ( ) throws exception { \n <ect>
\t2 log . info ( <string_literal> + session ) ; \n \t2 log . info ( <string_literal> + receive <identifiersep> session ) ; \n \t2 producer = session . create <identifiersep> producer ( null ) ; \n \t2 producer . set <identifiersep> delivery <identifiersep> mode ( delivery <identifiersep> mode ) ; \n <ect>
\t3 catch ( unknown <identifiersep> host <identifiersep> exception e ) \n \t3 { \n \t4 <comment> \n \t4 <comment> \n <ect>
\t1 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t2 ut <identifiersep> master master = create <identifiersep> master ( i + <number_literal> ) ; \n \t2 logger . info ( <string_literal> , i ) ; \n \t2 server . save ( master ) ; } \n <ect>
\t3 } else { \n \t4 s <identifiersep> logger . warn ( <string_literal> + ip . get <identifiersep> address ( ) . addr ( ) + <string_literal> + owner . get <identifiersep> id ( ) + <string_literal> + network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; } \n \t3 return ip ; \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t2 } ) ; \n \t2 futures . add ( future ) ; } \n \t1 barrier . await ( ) ; <comment> \n \t1 barrier . await ( ) ; <comment> \n <ect>
\t3 uri <identifiersep> components <identifiersep> builder builder ) { \n \t2 catalog . validate ( coverage <identifiersep> store , true ) . throw <identifiersep> if <identifiersep> invalid ( ) ; \n \t2 catalog . add ( coverage <identifiersep> store ) ; \n \t2 string store <identifiersep> name = coverage <identifiersep> store . get <identifiersep> name ( ) ; \n <ect>
\t3 string msg = get <identifiersep> error <identifiersep> message ( file , line , \n \t5 <string_literal> + name + <string_literal> , \n \t5 e . get <identifiersep> message ( ) + <string_literal> + body ) ; \n \t3 throw new parser <identifiersep> exception ( msg ) ; } \n <ect>
\t7 logger . error ( <string_literal> \n <number_literal> + completed <identifiersep> node <identifiersep> id , \n \t10 exception ) ; } } \n \t4 } else { \n <ect>
\t2 } catch ( exception e ) { \n \t3 throw make <identifiersep> invalid <identifiersep> definition <identifiersep> exception ( url , e ) ; } } \n \t1 private invalid <identifiersep> definition <identifiersep> exception make <identifiersep> invalid <identifiersep> definition <identifiersep> exception ( string url , exception e ) throws invalid <identifiersep> definition <identifiersep> exception { \n \t2 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
<number_literal> filtered <identifiersep> tokens . append ( ' ; ' ) ; \n \t6 if ( log <identifiersep> debug ) logger . debug ( this , <string_literal> + property <identifiersep> name + <string_literal> + property <identifiersep> value ) ; \n \t6 if ( log <identifiersep> debug ) logger . debug ( this , <string_literal> <string_literal> \\ <string_literal> ) ; \n \t5 } else { \n <ect>
\t7 event . kind ( ) == standard <identifiersep> watch <identifiersep> event <identifiersep> kinds . entry <identifiersep> delete ) { \n \t6 path item = ( path ) event . context ( ) ; \n \t6 file file = new file ( parent <identifiersep> dir , item . to <identifiersep> file ( ) . get <identifiersep> name ( ) ) ; \n <ect>
\t6 for ( transaction <identifiersep> lifecycle x : blk <identifiersep> mgrs ) \n \t7 x . abort ( this ) ; } \n \t5 catch ( runtime <identifiersep> exception ex ) { \n \t6 if ( is <identifiersep> io <identifiersep> exception ( ex ) ) \n <ect>
\t2 if ( pages . get ( request <identifiersep> id ) != null ) for ( base <identifiersep> updateable <identifiersep> element element : pages . get ( request <identifiersep> id ) ) { \n \t3 if ( element . get <identifiersep> updater <identifiersep> id ( request <identifiersep> id ) . compare <identifiersep> to ( id ) == 0 ) { \n \t4 element . update <identifiersep> state ( false ) ; \n \t4 return element ; } } \n <ect>
\t5 created <identifiersep> object = main <identifiersep> class . new <identifiersep> instance ( ) ; \t2 } \n \t3 } else { \n \t4 log . warn ( <string_literal> + value ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t5 test <identifiersep> file src <identifiersep> dir = new integration <identifiersep> test <identifiersep> build <identifiersep> context ( ) . get <identifiersep> samples <identifiersep> dir ( ) . file ( sample <identifiersep> name ) . assert <identifiersep> is <identifiersep> dir ( hint <identifiersep> for <identifiersep> missing <identifiersep> sample ) ; \n \t5 logger . debug ( <string_literal> , sample <identifiersep> name ) ; \n \t5 src <identifiersep> dir . copy <identifiersep> to ( get <identifiersep> dir ( ) ) ; \n \t4 } else { \n <ect>
\t2 job . set <identifiersep> dag <identifiersep> id ( message . get <identifiersep> dag <identifiersep> id ( ) ) ; } \n \t2 if ( message . get <identifiersep> dag <identifiersep> name ( ) != null ) { \n \t2 job . set <identifiersep> dag <identifiersep> name ( message . get <identifiersep> dag <identifiersep> name ( ) ) ; } } \n \t1 } . save ( ) ; \n <ect>
\t1 saved += value <identifiersep> length <identifiersep> limit ; \n \t1 page += 1 ; \n \t1 log . debug ( <string_literal> + model <identifiersep> prop <identifiersep> name + <string_literal> + page + <string_literal> + substring ) ; } \n \t1 get <identifiersep> config ( ) . set <identifiersep> property ( model <identifiersep> prop <identifiersep> name , page - 1 ) ; \n <ect>
\t1 logger . info ( format ( <string_literal> \\ \n \t6 <string_literal> ) ) \n else : \n \t1 run <identifiersep> prepare <identifiersep> war = true \n <ect>
\t4 field <identifiersep> metadata < t , float > field <identifiersep> metadata = ( field <identifiersep> metadata < t , float > ) class <identifiersep> metadata . get <identifiersep> field ( field . get <identifiersep> name ( ) ) ; \n \t4 property property = new float <identifiersep> property ( target , field <identifiersep> metadata , range . min ( ) , range . max ( ) ) ; \n \t4 properties . add ( property ) ; } \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < items ; i ++ ) { \n \t3 assert <identifiersep> equals ( ( integer ) i , queue . poll ( ) ) ; \n \t3 if ( ( i + 1 ) % <number_literal> == 0 ) \n <ect>
\t5 } else { \n \t6 <comment> \n \t6 consumer <identifiersep> id consumer <identifiersep> with <identifiersep> pending <identifiersep> transaction ; \n \t6 if ( redelivery <identifiersep> expected <identifiersep> in <identifiersep> current <identifiersep> transaction ( md , true ) ) { \n <ect>
\t5 state on <identifiersep> off <identifiersep> state = item . get <identifiersep> state ( ) ; \n \t5 if ( on <identifiersep> off <identifiersep> state instanceof on <identifiersep> off <identifiersep> type ) { \n \t6 on <identifiersep> off <identifiersep> type value = ( on <identifiersep> off <identifiersep> type ) on <identifiersep> off <identifiersep> state ; \n \t6 if ( ( string <identifiersep> utils . is <identifiersep> empty ( time <identifiersep> stamp ) && value . equals ( on <identifiersep> off <identifiersep> type . off ) ) || ( string <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( time <identifiersep> stamp ) && value . equals ( on <identifiersep> off <identifiersep> type . on ) ) ) { \n <ect>
\t2 fml <identifiersep> injection <identifiersep> data . build ( minecraft <identifiersep> home , class <identifiersep> loader ) ; \n \t2 fml <identifiersep> relaunch <identifiersep> log . minecraft <identifiersep> home = minecraft <identifiersep> home ; \n \t2 fml <identifiersep> relaunch <identifiersep> log . info ( <string_literal> , fml <identifiersep> injection <identifiersep> data . major , fml <identifiersep> injection <identifiersep> data . minor , \n \t4 fml <identifiersep> injection <identifiersep> data . rev , fml <identifiersep> injection <identifiersep> data . build , fml <identifiersep> injection <identifiersep> data . mccversion , fml <identifiersep> injection <identifiersep> data . mcpversion ) ; \n <ect>
\t4 client <identifiersep> scheme = <string_literal> ; } \n \t2 string amqp <identifiersep> uri = client <identifiersep> scheme + remote <identifiersep> uri . get <identifiersep> host ( ) + <string_literal> + remote <identifiersep> uri . get <identifiersep> port ( ) ; \n \t2 if ( use <identifiersep> ssl ) { \n \t3 amqp <identifiersep> uri += <string_literal> ; } \n <ect>
\t1 try { \n \t1 <comment> \n \t1 <comment> \n \t1 while ( ! thread <identifiersep> pool . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n <ect>
\t2 if ( null != connection ) { \n \t3 try { \n \t4 connection . close ( ) ; \n \t3 } catch ( sql <identifiersep> exception e1 ) { \n <ect>
\t6 result . add ( doctype ) ; } } } \n \t2 } else { \n \t3 result = collections . empty <identifiersep> list ( ) ; \n \t3 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t2 wm <identifiersep> log . info ( <string_literal> + total <identifiersep> updated ) ; } \n \t2 int result = ( unused <identifiersep> guaranteed += delta ) ; \n \t2 if ( metrics != null ) { \n \t2 metrics . set <identifiersep> wm <identifiersep> unused <identifiersep> guaranteed ( result ) ; } \n <ect>
\t2 } catch ( throwable t ) { \n \t3 logger . warn ( <string_literal> + file <identifiersep> name + <string_literal> + t . get <identifiersep> message ( ) , t ) ; } \n \t2 if ( list . is <identifiersep> empty ( ) ) { \n \t3 if ( ! optional ) { \n <ect>
\t6 if ( parsed <identifiersep> short <identifiersep> mac <identifiersep> address != 0xff && parsed <identifiersep> short <identifiersep> mac <identifiersep> address != 0x00 ) \n \t7 break ; } \n \t5 mac <identifiersep> address = null ; } } \n \t2 } catch ( security <identifiersep> exception ex ) { \n <ect>
\t2 log . warn ( <string_literal> ) ; \n \t2 } else if ( ex instanceof cancellation <identifiersep> exception ) { \n \t2 log . warn ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t2 continue ; } \n \t1 try { \n \t2 test <identifiersep> cases . add ( ( iterator <identifiersep> test <identifiersep> case ) clz . new <identifiersep> instance ( ) ) ; \n \t1 } catch ( illegal <identifiersep> access <identifiersep> exception | instantiation <identifiersep> exception e ) { \n <ect>
\t2 for ( cluster <identifiersep> vo cluster : clusters ) { \n \t3 if ( ha <identifiersep> vm <identifiersep> tag == null ) { \n \t4 hosts =  <identifiersep> resource <identifiersep> mgr . list <identifiersep> all <identifiersep> up <identifiersep> and <identifiersep> enabled <identifiersep> non <identifiersep> ha <identifiersep> hosts ( host . type . routing , cluster . get <identifiersep> id ( ) , cluster . get <identifiersep> pod <identifiersep> id ( ) , cluster . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; \n \t3 } else { \n <ect>
\t7 log . warn ( <string_literal> , bean <identifiersep> name ) ; \n \t7 skip <identifiersep> bean <identifiersep> names . add ( bean <identifiersep> name ) ; } \n \t5 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e1 ) { \n \t6 skip <identifiersep> bean <identifiersep> names . add ( bean <identifiersep> name ) ; } } } } \n <ect>
\t1 public void clear <identifiersep> warnings ( ) { \n \t2 try { \n \t3 connection . clear <identifiersep> warnings ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 private static void replace <identifiersep> lang <identifiersep> entries ( ) { \n \t2 try { \n \t3 replace <identifiersep> lang <identifiersep> entries0 ( ) ; \n \t2 } catch ( reflective <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t2 string property <identifiersep> name = language + <string_literal> ; \n \t2 string default <identifiersep> regex = <string_literal> ; \n \t2 string regex = mary <identifiersep> properties . get <identifiersep> property ( property <identifiersep> name ) ; \n \t2 if ( regex == null ) { \n <ect>
\t1 scoped <identifiersep> transaction scoped <identifiersep> transaction = transaction <identifiersep> manager . external <identifiersep> begin <identifiersep> transaction ( external <identifiersep> txn , tx <identifiersep> scope . required ( ) ) ; \n \t1 transaction current = transaction . current ( ) ; \n \t1 assert <identifiersep> that ( current ) . as ( <string_literal> ) . is <identifiersep> same <identifiersep> as ( scoped <identifiersep> transaction ) ; \n \t1 customer . find . by <identifiersep> name ( <string_literal> ) ; \n <ect>
\t2 if ( state == read ) \n \t3 return get <identifiersep> mgr <identifiersep> read ( sub <identifiersep> id ) ; \n \t2 if ( state == write ) \n \t3 return get <identifiersep> mgr <identifiersep> write ( sub <identifiersep> id ) ; \n <ect>
\t4 basic <identifiersep> pattern bgp = op <identifiersep> quad <identifiersep> pattern . get <identifiersep> basic <identifiersep> pattern ( ) ; \n \t4 explain . explain ( <string_literal> , bgp , exec <identifiersep> cxt . get <identifiersep> context ( ) ) ; \n \t4 <comment> \n \t4 return solver <identifiersep> lib . execute ( ( ( graph <identifiersep> tdb ) g ) . get <identifiersep> dataset <identifiersep> graph <identifiersep> tdb ( ) , gn , bgp , input , filter , exec <identifiersep> cxt ) ; } \n <ect>
\t2 mock . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > events = mock . get <identifiersep> exchanges ( ) ; \n \t3 for ( exchange e : events ) { \n <ect>
\t4 event <identifiersep> handling <identifiersep> strategy . block <identifiersep> in <identifiersep> thread ( ) ; \n \t3 } else { \n \t4 event <identifiersep> handling <identifiersep> strategy . block ( ) ; } \n \t2 } else { \n <ect>
\t2 file old <identifiersep> temp <identifiersep> files <identifiersep> peer <identifiersep> dir = update <identifiersep> manager . node . client <identifiersep> core . get <identifiersep> persistent <identifiersep> temp <identifiersep> dir ( ) ; \n \t2 if ( ! old <identifiersep> temp <identifiersep> files <identifiersep> peer <identifiersep> dir . exists ( ) ) \n \t3 return false ; \n \t2 if ( ! old <identifiersep> temp <identifiersep> files <identifiersep> peer <identifiersep> dir . is <identifiersep> directory ( ) ) { \n <ect>
\t7 pstmt <identifiersep> network <identifiersep> id . set <identifiersep> long ( 1 , zone <identifiersep> id ) ; \n \t7 try ( result <identifiersep> set rs <identifiersep> net = pstmt <identifiersep> network <identifiersep> id . execute <identifiersep> query ( ) ; ) { \n \t8 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t8 s <identifiersep> logger . debug ( <string_literal> ) ; \n <ect>
\t3 log . warn ( <string_literal> + uri <identifiersep> builder , e ) ; \n \t3 } else { \n <ect>
\t2 open <identifiersep> and <identifiersep> send ( timeout <identifiersep> seconds , server , channel <identifiersep> id , <number_literal> , client <identifiersep> channel <identifiersep> properties ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 log . info ( app <identifiersep> kit . wallet ( ) . to <identifiersep> string ( ) ) ; \n \t2 open <identifiersep> and <identifiersep> send ( timeout <identifiersep> seconds , server , channel <identifiersep> id , <number_literal> , client <identifiersep> channel <identifiersep> properties ) ; <comment> \n <ect>
\t2 continue ; } \n \t1 try { \n \t2 class <identifiersep> list . add ( class . for <identifiersep> name ( class <identifiersep> name ) ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> + todo . key ) ; \n \t5 try { \n \t6 ( ( socket <identifiersep> channel ) todo . key ) . close ( ) ; \n \t5 } catch ( final io <identifiersep> exception ignore ) { \n <ect>
@ test \n public void test <identifiersep> add <identifiersep> local <identifiersep> jar ( ) throws exception { \n \t1 test <identifiersep> beeline bl = new test <identifiersep> beeline ( ) ; \n \t1 assert . assert <identifiersep> null ( bl . find <identifiersep> local <identifiersep> driver ( connection <identifiersep> string ) ) ; \n <ect>
\t5 <comment> \n \t5 <comment> \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t2 string dest <identifiersep> name = name <identifiersep> from <identifiersep> destination <identifiersep> filter ( queue ) ; \n \t2 string [ ] index = new file ( kaha <identifiersep> index <identifiersep> dir , dest <identifiersep> name ) . list ( new filename <identifiersep> filter ( ) { \n \t3 @ override \n \t3 public boolean accept ( file dir , string name ) { \n <ect>
\t1 val d = desktop . get <identifiersep> desktop \n \t1 try { \n \t2 d . browse ( new uri ( profiles <identifiersep> url ) ) \n \t1 } catch { \n <ect>
\t2 utf = <string_literal> . get <identifiersep> bytes ( <string_literal> ) ; \n \t2 iso = <string_literal> . get <identifiersep> bytes ( <string_literal> ) ; \n \t2 delete <identifiersep> directory ( <string_literal> ) ; \n \t2 create <identifiersep> directory ( <string_literal> ) ; \n <ect>
\t3 return false ; } \n \t2 string value = connector . read ( controller <identifiersep> addr , command ) ; \n \t2 if ( value == null || value . contains ( <string_literal> ) ) { \n \t3 disabled <identifiersep> commands . add ( command ) ; \n <ect>
\t4 <comment> \n \t4 writer . write ( in <identifiersep> output ) ; \n \t4 log . debug ( <string_literal> , filename ) ; \n \t3 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t1 string value = get <identifiersep> property ( configuration <identifiersep> property ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> numeric ( value ) ) { \n \t1 return value ; \n \t1 } else { \n <ect>
\t2 if ( g1 . vertex <identifiersep> set ( ) . size ( ) < <number_literal> ) { \n \t3 this . tree = new weighted <identifiersep> multigraph < > ( default <identifiersep> link . class ) ; \n \t3 for ( node n : g1 . vertex <identifiersep> set ( ) ) this . tree . add <identifiersep> vertex ( n ) ; \n \t3 return ; } \n <ect>
\t2 for ( object <identifiersep> name name : names ) { \n \t3 try { \n \t3 get <identifiersep> metrics ( con , filter , metrics , name ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 public void stop ( ) \n \t1 { \n \t2 if ( graph != null ) \n \t2 { \n <ect>
browser <identifiersep> bot . prototype .  <identifiersep> modify <identifiersep> window = function ( win ) { \n \t1 <comment> \n \t1 if ( this .  <identifiersep> window <identifiersep> closed ( win ) ) { \n \t2 if ( ! this . proxy <identifiersep> injection <identifiersep> mode ) { \n <ect>
\t2 logger . debug ( <string_literal> , connector <identifiersep> address ) ; \n \t2 try { \n \t3 daemon <identifiersep> registry . remove ( connector <identifiersep> address ) ; \n \t2 } catch ( daemon <identifiersep> registry . empty <identifiersep> registry <identifiersep> exception e ) { \n <ect>
\t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 method . release <identifiersep> connection ( ) ; \n \t3 throw new big <identifiersep> switch <identifiersep> bcf <identifiersep> api <identifiersep> exception ( <string_literal> , e ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 try ( x <identifiersep> content <identifiersep> parser parser = x <identifiersep> content <identifiersep> helper . create <identifiersep> parser ( named <identifiersep> x <identifiersep> content <identifiersep> registry . empty , \n \t5 logging <identifiersep> deprecation <identifiersep> handler . instance , out . bytes ( ) , x <identifiersep> content <identifiersep> type . json ) ) { \n \t5 repository <identifiersep> data = repository <identifiersep> data . snapshots <identifiersep> from <identifiersep> x <identifiersep> content ( parser , index <identifiersep> gen ) ; \n \t4 } catch ( not <identifiersep> x <identifiersep> content <identifiersep> exception e ) { \n <ect>
\t2 collection < ss <identifiersep> table <identifiersep> reader > sstables = cfs . get <identifiersep> ss <identifiersep> tables ( ) ; \n \t2 try ( refs < ss <identifiersep> table <identifiersep> reader > refs = refs . ref ( sstables ) ) \n \t2 { \n \t3 cfs . index <identifiersep> manager . set <identifiersep> index <identifiersep> removed ( indexes ) ; \n <ect>
\t5 string message = cause . get <identifiersep> message ( ) ; \n \t5 if ( message == null ) { \n \t6 message = <string_literal> ; } \n \t5 if ( message . contains ( sql <identifiersep> exception <identifiersep> message ) ) { \n <ect>
\t1 return num <identifiersep> blocks < desired <identifiersep> blocks ; \n \t1 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n \t1 logger . error ( <string_literal> , e ) ; \n \t1 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 return response . ok ( ) . entity ( count <identifiersep> temp <identifiersep> files ( ) ) . build ( ) ; } \n \t1 private int count <identifiersep> temp <identifiersep> files ( ) throws exception { \n \t2 string tmpdir = system . get <identifiersep> property ( <string_literal> ) ; \n <ect>
\t8 <string_literal> , app <identifiersep> name , config <identifiersep> spi <identifiersep> name ) ; } \n \t4 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n \t5 log . warn ( <string_literal> , config <identifiersep> spi <identifiersep> name , e ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> provider <identifiersep> exception e ) { \n <ect>
\t2 { \n \t3 storage <identifiersep> service . instance . init <identifiersep> server ( ) ; } \n \t2 catch ( configuration <identifiersep> exception e ) \n \t2 { \n <ect>
private boolean do <identifiersep> dispose ( t item ) \n { \n \t1 if ( item == null ) \n \t1 { \n <ect>
\t6 int global = global <identifiersep> cntr <identifiersep> multi <identifiersep> node . get ( ) ; \n \t6 assert cur <identifiersep> cntr >= global : invalid ( <string_literal> , pri , true , cur <identifiersep> cntr , global ) ; \n \t6 int new <identifiersep> cntr = cur <identifiersep> cntr + 1 ; \n \t6 if ( debug ) \n <ect>
\t2 while ( true ) { \n \t3 if ( semaphore . try <identifiersep> write <identifiersep> lock ( remaining , time <identifiersep> unit . nanoseconds ) == 0 ) { \n \t4 late <identifiersep> file <identifiersep> ref <identifiersep> finds = concurrent <identifiersep> hash <identifiersep> multiset . create ( ) ; \n \t4 short <identifiersep> circuited = true ; \n <ect>
\t3 if ( r != null ) { \n \t4 bos . write <identifiersep> record ( r , tag ) ; } \n \t3 baos . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 assert rsrc4 == rsrc8 ; \n \t6 log . info ( <string_literal> + rsrc1 ) ; \n \t6 log . info ( <string_literal> + rsrc2 ) ; \n \t6 log . info ( <string_literal> + rsrc3 ) ; \n <ect>
\t2 private void parse <identifiersep> property ( ) { \n \t3 try { \n \t4 value = execution <identifiersep> isolation <identifiersep> strategy . value <identifiersep> of ( property . get ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 wrapped <identifiersep> ctx . complete ( ) ; } } \n \t2 } ) ; } \n \t2 else \n \t2 { \n <ect>
\t2 <comment> \n \t2 long waiting <identifiersep> time = 0l ; \n \t2 <comment> \n \t2 long time <identifiersep> quant = 500l ; \n <ect>
\t1 log . info ( <string_literal> + san <identifiersep> volume <identifiersep> id + <string_literal> ) ; \n \t1 connection <identifiersep> manager . unexport <identifiersep> resource <identifiersep> from <identifiersep> all ( san <identifiersep> volume <identifiersep> id ) ; } \n public void unexport <identifiersep> volume ( string volume <identifiersep> id , string node <identifiersep> iqn ) throws eucalyptus <identifiersep> cloud <identifiersep> exception , unsupported <identifiersep> operation <identifiersep> exception { \n \t1 string san <identifiersep> volume <identifiersep> id = lookup ( volume <identifiersep> id ) . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) ; \n <ect>
\t2 { \n \t3 string job <identifiersep> name = jobexecutioncontext . get <identifiersep> job <identifiersep> detail ( ) . get <identifiersep> key ( ) . get <identifiersep> name ( ) ; \n \t3 string job <identifiersep> group = jobexecutioncontext . get <identifiersep> job <identifiersep> detail ( ) . get <identifiersep> key ( ) . get <identifiersep> group ( ) ; \n \t3 log . debug ( <string_literal> + job <identifiersep> group + <string_literal> + job <identifiersep> name ) ; \n <ect>
\t4 modify <identifiersep> storage <identifiersep> pool <identifiersep> command cmd = new modify <identifiersep> storage <identifiersep> pool <identifiersep> command ( false , storage <identifiersep> pool ) ; \n \t4 final answer answer = agent <identifiersep> mgr . easy <identifiersep> send ( host . get <identifiersep> id ( ) , cmd ) ; \n \t4 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t4 <comment> \n \t4 if ( verifier . verify ( the <identifiersep> result ) && ( content <identifiersep> type . key == the <identifiersep> result . signed <identifiersep> info ( ) . get <identifiersep> type ( ) ) ) { \n \t5 <comment> \n \t5 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> keys , level . info ) ) { \n <ect>
\t3 } catch ( exception e ) { \n \t4 if ( exception == null ) { \n \t5 exception = e ; } } } \n \t2 if ( template == null ) { \n <ect>
\t3 if ( no <identifiersep> v <identifiersep> os . size ( ) > 1 ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + network <identifiersep> offering <identifiersep> id + <string_literal> + vm <identifiersep> id + <string_literal> + event . get <identifiersep> account <identifiersep> id ( ) + <string_literal> ) ; } \n \t3 for ( usage <identifiersep> network <identifiersep> offering <identifiersep> vo no <identifiersep> vo : no <identifiersep> v <identifiersep> os ) { \n <ect>
\t2 while ( file <identifiersep> parameter <identifiersep> names != null && file <identifiersep> parameter <identifiersep> names . has <identifiersep> more <identifiersep> elements ( ) ) { \n \t3 string input <identifiersep> value = ( string ) file <identifiersep> parameter <identifiersep> names . next <identifiersep> element ( ) ; \n \t3 uploaded <identifiersep> file [ ] files = get <identifiersep> file ( input <identifiersep> value ) ; \n \t3 for ( uploaded <identifiersep> file current <identifiersep> file : files ) { \n <ect>
\t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 if ( connection <identifiersep> alive ) { \n \t4 close <identifiersep> connection ( ) ; } \n \t2 } finally { \n <ect>
\t3 <comment> \n \t3 try { \n \t4 sender . init ( this ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t1 logger . info ( <string_literal> . format ( params . version , orchestration . upper ( ) ) ) \n \t1 for stack <identifiersep> select <identifiersep> package <identifiersep> name in stack <identifiersep> select <identifiersep> packages : \n \t1 stack <identifiersep> select . select ( stack <identifiersep> select <identifiersep> package <identifiersep> name , params . version ) \n \t1 if params . stack <identifiersep> supports <identifiersep> ranger <identifiersep> tagsync <identifiersep> ssl <identifiersep> xml <identifiersep> support : \n <ect>
\t3 copy ( <number_literal> + <number_literal> + <number_literal> ) ; <comment> \n \t3 int constant <identifiersep> pool <identifiersep> count <identifiersep> pos = gen <identifiersep> pos ; \n \t3 int constant <identifiersep> pool <identifiersep> count = read <identifiersep> u2 ( ) ; \n <ect>
\t2 <comment> \n \t2 } catch ( io <identifiersep> exception e ) { \n \t2 logger . error ( <string_literal> , e ) ; \n \t2 counter <identifiersep> group . increment <identifiersep> and <identifiersep> get ( <string_literal> ) ; } } \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + disabled <identifiersep> pods ) ; } \n \t5 pods <identifiersep> with <identifiersep> capacity . remove <identifiersep> all ( disabled <identifiersep> pods ) ; } } \n \t2 } else { \n <ect>
public synchronized void halt ( boolean fast ) { \n \t1 boolean was <identifiersep> stopped = stop ; \n \t1 if ( was <identifiersep> stopped ) { \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t8 <comment> \n \t8 <comment> \n \t8 break ; \n \t7 default : \n <ect>
\t2 try { \n \t3 public <identifiersep> key tmp <identifiersep> key = generate <identifiersep> pub <identifiersep> key ( msg . get <identifiersep> buffer ( ) ) ; \n \t3 send <identifiersep> secret <identifiersep> key ( secret <identifiersep> key , tmp <identifiersep> key , msg . get <identifiersep> src ( ) ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t2 file stats <identifiersep> file = new file (  <identifiersep> repository <identifiersep> root , debug <identifiersep> stats <identifiersep> file ) ; \n \t2 print <identifiersep> stream stats <identifiersep> out = null ; \n \t2 try { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> repo , level . info ) ) { \n <ect>
\t2 if ( src <identifiersep> tmplt <identifiersep> host == null ) { \n \t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> + template . get <identifiersep> name ( ) + <string_literal> + source <identifiersep> server . get <identifiersep> name ( ) ) ; } \n \t2 string url = generate <identifiersep> copy <identifiersep> url ( source <identifiersep> server , src <identifiersep> tmplt <identifiersep> host ) ; \n \t2 if ( url == null ) { \n <ect>
\t2 final string profiled <identifiersep> properties = profiles . stream ( ) \n \t3 . map ( p - > string . format ( <string_literal> , p ) ) \n \t3 . collect ( collectors . joining ( <string_literal> ) ) ; \n \t2 final string regex = string . format ( <string_literal> , property <identifiersep> names , profiled <identifiersep> properties ) ; \n <ect>
\t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) )  <identifiersep> log . warn ( <string_literal> + con , cke ) ; \n \t3  <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , 1 ) ; \n \t3 con . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 { \n \t2 if ( offset > reader . length ( ) - commit <identifiersep> log <identifiersep> segment . sync <identifiersep> marker <identifiersep> size ) \n \t2 { \n \t3 if ( offset != reader . length ( ) && offset != integer . max <identifiersep> value ) \n <ect>
\t1 public void set <identifiersep> up ( ) throws setup <identifiersep> exception { \n \t2 this . kc <identifiersep> session = thread <identifiersep> local <identifiersep> session <identifiersep> context . get <identifiersep> current <identifiersep> session ( ) ; \n \t2 if ( this . kc <identifiersep> session == null ) { \n \t3 <comment> \n <ect>
\t2 this . probe = process <identifiersep> probe . get <identifiersep> instance ( ) ; \n \t2 final time <identifiersep> value refresh <identifiersep> interval = refresh <identifiersep> interval <identifiersep> setting . get ( settings ) ; \n \t2 process <identifiersep> stats <identifiersep> cache = new process <identifiersep> stats <identifiersep> cache ( refresh <identifiersep> interval , probe . process <identifiersep> stats ( ) ) ; \n \t2 this . info = probe . process <identifiersep> info ( refresh <identifiersep> interval . millis ( ) ) ; \n <ect>
\t2 stmt = db <identifiersep> conn . create <identifiersep> statement ( ) ; \n \t2 string s = <string_literal> + quote <identifiersep> string ( hadoop <identifiersep> job <identifiersep> id ) + <string_literal> + id ; \n \t2 log . debug ( <string_literal> + s + <string_literal> ) ; \n \t2 int update <identifiersep> count = stmt . execute <identifiersep> update ( s ) ; \n <ect>
\t1 @ override \n \t1 protected event do <identifiersep> execute ( final request <identifiersep> context request <identifiersep> context ) { \n \t2 final authentication c = web <identifiersep> utils . get <identifiersep> authentication ( request <identifiersep> context ) ; \n \t2 if ( c == null ) { \n <ect>
\t2 if ( this . uri != null && ! this . uri . is <identifiersep> empty ( ) ) { \n \t3 try { \n \t4 factory . set <identifiersep> uri ( this . uri ) ; \n \t3 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
* snapshot <identifiersep> info ( snapshot <identifiersep> id ) ) ; string status = found <identifiersep> snapshot <identifiersep> info . get <identifiersep> status ( ) ; if ( status . equals ( storage <identifiersep> properties . status . available . to <identifiersep> string ( ) ) || \n * status . equals ( storage <identifiersep> properties . status . failed . to <identifiersep> string ( ) ) ) { found <identifiersep> snapshot <identifiersep> info . set <identifiersep> status ( storage <identifiersep> properties . status . deleting . to <identifiersep> string ( ) ) ; \n * tr . commit ( ) ; } else { <comment> \n * checker . clean <identifiersep> failed <identifiersep> snapshot ( snapshot <identifiersep> id ) ; } } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { <comment> \n <ect>
\t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n \t2 < button ng - click = <string_literal> > info < / button > \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 vm <identifiersep> instance <identifiersep> vo vm =  <identifiersep> vm <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm == null ) { \n <ect>
\t1 @ post \n \t1 @ path ( <string_literal> ) \n \t1 @ produces ( <string_literal> ) \n \t1 public string human ( xml <identifiersep> java <identifiersep> type <identifiersep> adapter <identifiersep> human human ) { \n <ect>
\t2 int retry = <number_literal> ; \n \t2 while ( -- retry > 0 ) { \n \t3 socket <identifiersep> channel sch = null ; \n \t3 try { \n <ect>
\t1 private boolean do <identifiersep> cancel <identifiersep> maintenance ( long host <identifiersep> id ) { \n \t2 host <identifiersep> vo host ; \n \t2 host =  <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host <identifiersep> id ) ; \n \t2 if ( host == null || host . get <identifiersep> removed ( ) != null ) { \n <ect>
\t3 r = null ; \n \t3 if ( rs != null ) \n \t4 r = rs . get <identifiersep> rate ( <number_literal> * <number_literal> ) ; \n \t3 double bps = ( r != null ? r . get <identifiersep> average <identifiersep> value ( ) : 0 ) ; \n <ect>
\t1 while ( ( document = document <identifiersep> reader . read ( ) ) != null ) { \n \t2 if ( writer != null && written <identifiersep> count >= write <identifiersep> block <identifiersep> size ) { \n \t2 step <identifiersep> execution = job <identifiersep> context <identifiersep> repository . get <identifiersep> step <identifiersep> execution ( step <identifiersep> execution . get <identifiersep> job <identifiersep> execution <identifiersep> id ( ) , step <identifiersep> execution . get <identifiersep> id ( ) ) ; \n \t2 if ( step <identifiersep> execution . get <identifiersep> job <identifiersep> execution ( ) . get <identifiersep> status ( ) == batch <identifiersep> status . stopping ) { \n <ect>
\t1 for ( conf <identifiersep> logger logger : conf <identifiersep> loggers . get <identifiersep> loggers ( ) ) { \n \t2 string logger <identifiersep> name = logger . get <identifiersep> logger ( ) ; \n \t2 level log <identifiersep> level = level . get <identifiersep> level ( logger . get <identifiersep> level ( ) ) ; \n \t2 if ( log <identifiersep> level == null ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2  <identifiersep> alert <identifiersep> mgr . send <identifiersep> alert ( alert <identifiersep> manager . alert <identifiersep> type <identifiersep> host , host . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , host . get <identifiersep> pod <identifiersep> id ( ) , <string_literal> + host <identifiersep> desc , <string_literal> + host <identifiersep> desc + <string_literal> \n \t4 + ( ( sb != null ) ? sb . to <identifiersep> string ( ) : <string_literal> ) ) ; \n \t2 for ( final vm <identifiersep> instance <identifiersep> vo vm : vms ) { \n <ect>
\t3 <comment> \n \t3 return false ; \n \t2 } catch ( throwable t ) { \n \t3 <comment> \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( name ) ; \n \t2 content <identifiersep> name tn = new content <identifiersep> name ( ) ; \n \t2 content <identifiersep> name bn = new content <identifiersep> name ( ) ; \n \t2 xml <identifiersep> encodable <identifiersep> tester . encode <identifiersep> decode <identifiersep> test ( <string_literal> , name , tn , bn ) ; \n <ect>
\t1 map < string , collection < dependency <identifiersep> info > > missing <identifiersep> dependencies = new hash <identifiersep> map < > ( ) ; \n \t1 for ( string component : new hash <identifiersep> set < > ( group . get <identifiersep> component <identifiersep> names ( ) ) ) { \n \t1 logger . debug ( <string_literal> , component ) ; \n \t1 for ( dependency <identifiersep> info dependency : stack . get <identifiersep> dependencies <identifiersep> for <identifiersep> component ( component ) ) { \n <ect>
\t2 final rsa <identifiersep> json <identifiersep> web <identifiersep> key key = ( rsa <identifiersep> json <identifiersep> web <identifiersep> key ) jwks . get <identifiersep> json <identifiersep> web <identifiersep> keys ( ) . get ( 0 ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( key . get <identifiersep> algorithm ( ) ) ) { \n \t3 logger . warn ( <string_literal> , key ) ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( key . get <identifiersep> key <identifiersep> id ( ) ) ) { \n <ect>
\t3 required <identifiersep> attributes . put ( <string_literal> , collections . singleton ( <string_literal> ) ) ; \n \t3 strategy . set <identifiersep> required <identifiersep> attributes ( required <identifiersep> attributes ) ; \n \t3 strategy . do <identifiersep> principal <identifiersep> attributes <identifiersep> allow <identifiersep> service <identifiersep> access ( <string_literal> , ( map ) registered <identifiersep> service <identifiersep> test <identifiersep> utils . get <identifiersep> test <identifiersep> attributes ( ) ) ; \n \t2 } else { \n <ect>
<comment> \n \t4 long ts = get <identifiersep> next <identifiersep> aligned <identifiersep> window <identifiersep> ts ( window <identifiersep> end <identifiersep> ts , watermark <identifiersep> ts ) ; \n \t4 log . debug ( <string_literal> , ts ) ; \n \t4 if ( ts == long . max <identifiersep> value ) { \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> ) ; } } \n \t2 s <identifiersep> logger . info ( <string_literal> ) ; \n \t2 return false ; \n \t2 <comment> <ect>
\t2 try { \n \t3 log . debug ( <string_literal> ) ; \n \t3 session . rollback ( ) ; \n \t2 } catch ( jms <identifiersep> exception ex ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void external <identifiersep> address <identifiersep> received ( transport . address <identifiersep> source source , byte [ ] ip , int port ) { \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 path import <identifiersep> dir = new path ( base <identifiersep> dir , <string_literal> ) ; \n \t1 for ( path p : new path [ ] { export <identifiersep> dir , import <identifiersep> dir } ) { \n \t1 assert <identifiersep> true ( <string_literal> + base <identifiersep> dir , fs . mkdirs ( p ) ) ; } \n \t1 log . info ( <string_literal> , export <identifiersep> dir ) ; \n <ect>
\t1 command = [ <string_literal> % ( storagehealth ) ] \n \t1 p = subprocess . popen ( command , shell = true , stdout = subprocess . pipe ) \n \t1 for x in p . stdout : \n \t2 if x : \n <ect>
\t3 public void inform ( sampling <identifiersep> life <identifiersep> cycle <identifiersep> listener listener ) { \n \t4 try { \n \t5 listener . on <identifiersep> sampling <identifiersep> ended ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t4 log . debug ( <string_literal> ) ; \n \t4 decode <identifiersep> get <identifiersep> head <identifiersep> response ( length , in , out ) ; \n \t4 break ; \n \t3 case messages . header <identifiersep> segment : \n <ect>
\t5 throwable c = evt . get <identifiersep> source <identifiersep> exception ( ) . get <identifiersep> cause ( ) ; \n \t5 while ( c != null ) { \n \t6 log . error ( <string_literal> , c . get <identifiersep> class ( ) , c . get <identifiersep> message ( ) != null ? c . get <identifiersep> message ( ) : <string_literal> ) ; \n \t6 c = c . get <identifiersep> cause ( ) ; } \n <ect>
\t3 int cur <identifiersep> page = overflow <identifiersep> page ; \n \t3 bf . free <identifiersep> page ( page ) ; \n \t3 free <identifiersep> continuation <identifiersep> pages ( cur <identifiersep> page ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t7 v <identifiersep> store = new spv <identifiersep> block <identifiersep> store ( params , chain <identifiersep> file ) ; } \n \t5 } else if ( restore <identifiersep> from <identifiersep> key != null ) { \n \t6 time = restore <identifiersep> from <identifiersep> key . get <identifiersep> creation <identifiersep> time <identifiersep> seconds ( ) ; \n \t6 if ( chain <identifiersep> file <identifiersep> exists ) { \n <ect>
\t1 object instance = null ; \n \t1 try { \n \t1 instance = class . for <identifiersep> name ( class <identifiersep> full <identifiersep> name ) . get <identifiersep> constructor ( ) . new <identifiersep> instance ( ) ; \n \t1 } catch ( exception exception ) { \n <ect>
\t5 { \n \t6 callback . handle <identifiersep> result ( ( t ) response <identifiersep> object ) ; } } \n \t4 catch \n \t4 { \n <ect>
\t3 for ( entry < string , list < integer > > entry : component <identifiersep> to <identifiersep> tasks . entry <identifiersep> set ( ) ) { \n \t4 string name = entry . get <identifiersep> key ( ) ; \n \t4 list < integer > task <identifiersep> ids = entry . get <identifiersep> value ( ) ; \n \t4 if ( task <identifiersep> ids == null || task <identifiersep> ids . size ( ) == 0 ) { \n <ect>
\t4 logger . error ( <string_literal> , rl . get <identifiersep> resource <identifiersep> path ( ) ) ; } \n \t3 logger . error ( strings . repeat ( <string_literal> , <number_literal> ) ) ; \n \t3 if ( ! broken <identifiersep> textures . contains <identifiersep> row ( resource <identifiersep> domain ) ) \n \t3 { \n <ect>
\t2 pooled <identifiersep> tunnel <identifiersep> creator <identifiersep> config cfg =  <identifiersep> exec . remove <identifiersep> from <identifiersep> building ( reply <identifiersep> message <identifiersep> id ) ; \n \t2 if ( cfg == null ) { \n \t3 <comment> \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
public class v20150401 <identifiersep> <number_literal> <identifiersep>  <identifiersep> insert <identifiersep> default <identifiersep> values implements spring <identifiersep> jdbc <identifiersep> migration { \n \t1 private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( v20150401 <identifiersep> <number_literal> <identifiersep>  <identifiersep> insert <identifiersep> default <identifiersep> values . class ) ; \n \t1 public void migrate ( jdbc <identifiersep> template jdbc <identifiersep> template ) throws exception { \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t3 log . debug ( <string_literal> ) ; \n \t3 return false ; } \n \t2 keycloak <identifiersep> deployment deployment = http <identifiersep> facade . get <identifiersep> deployment ( ) ; \n \t2 if ( ! deployment . get <identifiersep> realm ( ) . equals ( account . get <identifiersep> keycloak <identifiersep> security <identifiersep> context ( ) . get <identifiersep> realm ( ) ) ) { \n <ect>
\t2 oneurl = new url ( onestr ) ; \n \t1 } else { \n \t2 oneurl = new file ( onestr ) . to <identifiersep> url ( ) ; } \n \t1 } catch ( exception err ) { \n <ect>
\t2 set < string > url <identifiersep> patterns = get <identifiersep> filter <identifiersep> paths ( filter <identifiersep> name , mapping , name , \n \t3 document . get <identifiersep> child <identifiersep> nodes ( ) ) ; \n \t2 if ( url <identifiersep> patterns . size ( ) == 0 ) \n \t2 { \n <ect>
\t2 try { \n \t2 ctx . clear ( ) ; \n \t2 } catch ( exception e ) { \n \t2 <comment> \n <ect>
\t6 <comment> \n \t6 if ( thrown <identifiersep> exception == null ) { \n \t7 thrown <identifiersep> exception = new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t5 } else { \n <ect>
\t2 sessions . put ( session <identifiersep> id , session ) ; } \n \t1 public boolean register <identifiersep> user ( string session <identifiersep> id , string user <identifiersep> name , string password , string email ) throws mage <identifiersep> exception { \n \t2 session session = sessions . get ( session <identifiersep> id ) ; \n \t2 if ( session == null ) { \n <ect>
\t4 refill ( ) ; \n \t3 } ) ; \n \t2 } else { \n \t3 <comment> \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> verify <identifiersep> scopes <identifiersep> local <identifiersep> ejb ( ) throws exception { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t4 } catch ( final execution <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . error ( <string_literal> + vm , e ) ; \n \t5 throw new agent <identifiersep> unavailable <identifiersep> exception ( <string_literal> + e . get <identifiersep> message ( ) , dest <identifiersep> host <identifiersep> id , e ) ; \n \t4 } catch ( final no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 this . on <identifiersep> events . add ( event . type . value <identifiersep> of ( event <identifiersep> type ) ) ; \n \t3 } catch ( runtime <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
public static void add ( snapshot <identifiersep> creator task ) throws thread <identifiersep> pool <identifiersep> not <identifiersep> initialized <identifiersep> exception { \n \t1 if ( pool != null && ! pool . is <identifiersep> shutdown ( ) ) { \n \t1 pool . execute ( task ) ; \n \t1 } else { \n <ect>
\t3 serializable ser = task <identifiersep> ses . get <identifiersep> attribute ( argument ( 0 ) ) ; \n \t3 assert ser != null ; \n \t3 int val = ( integer ) ser + 1 ; \n <ect>
<comment> \n public void test <identifiersep> other <identifiersep> logging ( ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 missing <identifiersep> journal <identifiersep> files . remove <identifiersep> all ( journal . get <identifiersep> file <identifiersep> map ( ) . key <identifiersep> set ( ) ) ; \n \t2 if ( ! missing <identifiersep> journal <identifiersep> files . is <identifiersep> empty ( ) ) { \n <ect>
public java . math . big <identifiersep> decimal budget ( ) { \n \t1 return ( java . math . big <identifiersep> decimal ) stored <identifiersep> value <identifiersep> for <identifiersep> key (  <identifiersep> studio . budget <identifiersep> key ) ; } \n public void set <identifiersep> budget ( java . math . big <identifiersep> decimal value ) { \n <ect>
\t2 try { \n \t3 final client <identifiersep> credential client <identifiersep> credentials = ( client <identifiersep> credential ) credential ; \n \t3 logger . debug ( <string_literal> , client <identifiersep> credentials ) ; \n \t3 final credentials credentials = client <identifiersep> credentials . get <identifiersep> credentials ( ) ; \n <ect>
\t3 return new answer ( cmd , false , msg ) ; } \n \t2 return new answer ( cmd ) ; } \n \t1 protected answer execute ( check <identifiersep> router <identifiersep> command cmd ) { \n <ect>
\t1 { \n \t2 init <identifiersep> server ( ring <identifiersep> delay ) ; } \n \t1 public synchronized void init <identifiersep> server ( int delay ) throws configuration <identifiersep> exception \n \t1 { \n <ect>
\t2 if ( group == null ) { \n \t3 throw new io <identifiersep> exception ( <string_literal> ) ; } \n \t2 string type = get <identifiersep> type ( ) ; \n \t2 if ( ! type . ends <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t7 <string_literal> ) ; } \n \t4 config . set <identifiersep> device <identifiersep> param ( value ) ; \n \t4 <comment> \n \t3 } else { \n <ect>
\t1 public void test <identifiersep> organize <identifiersep> columns ( ) { \n \t2 try { \n \t3 execute <identifiersep> basic <identifiersep> json <identifiersep> test ( <string_literal> , <string_literal> , false , <number_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( f . exists ( ) && ! f . is <identifiersep> directory ( ) ) { \n \t3 xml <identifiersep> config . add <identifiersep> resource ( f . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ) ; \n \t3 log . info ( <string_literal> , config <identifiersep> file ) ; \n \t2 } else { \n <ect>
private static configuration configure <identifiersep> dfs <identifiersep> cluster ( configuration config , \n \t1 string local <identifiersep> dfs <identifiersep> location , string bind <identifiersep> ip , int namenode <identifiersep> rpc <identifiersep> port , \n \t1 int namenode <identifiersep> http <identifiersep> port , int datanode <identifiersep> port , int datanode <identifiersep> ipc <identifiersep> port , \n \t1 int datanode <identifiersep> http <identifiersep> port ) { \n <ect>
\t5 try { \n \t6 con . recovery <identifiersep> result = attempt <identifiersep> recovery ( old <identifiersep> replay <identifiersep> log ) ; <comment> \n \t6 con . set <identifiersep> replay <identifiersep> log ( old <identifiersep> replay <identifiersep> log ) ; <comment> \n \t6 con . set <identifiersep> in <identifiersep> replay <identifiersep> mode ( false ) ; <comment> \n <ect>
\t8 final integer value = ( integer ) field . get ( null ) ; \n \t8 m <identifiersep> project <identifiersep> resources . put ( value , pair . of ( res <identifiersep> type , field . get <identifiersep> name ( ) ) ) ; \n \t8 res <identifiersep> name2id . put ( field . get <identifiersep> name ( ) , value ) ; \n \t7 } else { \n <ect>
\t2 log . debug ( <string_literal> + tls ) ; \n \t2 tablet <identifiersep> state <identifiersep> store . suspend ( tablet <identifiersep> server . this , tls , null , \n \t3 request <identifiersep> time <identifiersep> skew + milliseconds . convert ( system . nano <identifiersep> time ( ) , nanoseconds ) ) ; } \n \t1 } catch ( distributed <identifiersep> store <identifiersep> exception ex ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 if ( get <identifiersep> session ( ) != null ) { \n \t3 get <identifiersep> session ( ) . close ( ) ; \n \t3 set <identifiersep> session ( null ) ; } \n <ect>
\t1 list < acid <identifiersep> utils . parsed <identifiersep> delta > deltas = dir . get <identifiersep> current <identifiersep> directories ( ) ; \n \t1 for ( acid <identifiersep> utils . parsed <identifiersep> delta delta : deltas ) { \n \t1 stat = fs . get <identifiersep> file <identifiersep> status ( delta . get <identifiersep> path ( ) ) ; \n \t1 if ( ! stat . is <identifiersep> dir ( ) ) { \n <ect>
\t3 <comment> \n \t3 ns <identifiersep> dictionary < string , object > current <identifiersep> l <identifiersep> es = ( ns <identifiersep> dictionary < string , object > ) cache . value <identifiersep> for <identifiersep> key ( key <identifiersep> localizer <identifiersep> exceptions ) ; \n \t3 ns <identifiersep> dictionary < string , object > new <identifiersep> l <identifiersep> es = ( ns <identifiersep> dictionary < string , object > ) dict . value <identifiersep> for <identifiersep> key ( key <identifiersep> localizer <identifiersep> exceptions ) ; \n \t3 if ( current <identifiersep> l <identifiersep> es != null && new <identifiersep> l <identifiersep> es != null ) { \n <ect>
\t8 break ; \n \t7 default : \n \t8 logger . warn ( <string_literal> , c ) ; } } \n \t4 } else { \n <ect>
\t3 if ( name . length ( ) == <number_literal> && name . to <identifiersep> lower <identifiersep> case ( locale . us ) . ends <identifiersep> with ( <string_literal> ) ) \n \t4 return lookup <identifiersep> dest ( hash . create ( base32 . decode ( name . to <identifiersep> lower <identifiersep> case ( locale . us ) . substring ( 0 , <number_literal> ) ) ) , max <identifiersep> wait ) ; \n \t3 <comment> \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 if ( i == <number_literal> || i == <number_literal> || i == <number_literal> ) { \n \t4 thread . sleep ( <number_literal> ) ; } } \n \t2 <comment> \n \t2 if ( ! sem . try <identifiersep> acquire ( client <identifiersep> base . connection <identifiersep> timeout , time <identifiersep> unit . milliseconds ) ) { \n <ect>
\t5 q . convert ( src <identifiersep> file , dest <identifiersep> file ) ; \n \t5 final file snap <identifiersep> file = new file ( snapshot <identifiersep> file ) ; \n \t5 if ( snap <identifiersep> file . exists ( ) ) { \n \t6 size = snap <identifiersep> file . length ( ) ; } \n <ect>
\t2 schedule <identifiersep> finish ( ) ; } } } \n private static void schedule <identifiersep> finish ( ) { \n \t1 if (  <identifiersep> init <identifiersep> wait ) \n \t1 return ; \n <ect>
\t1 public void set <identifiersep> task <identifiersep> info ( wowodc . eof . task <identifiersep> info value ) { \n \t2 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value , <string_literal> ) ; } \n \t1 public void set <identifiersep> task <identifiersep> info <identifiersep> relationship ( wowodc . eof . task <identifiersep> info value ) { \n <ect>
\t2 if ( reader != null ) { \n \t3 try { \n \t4 reader . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 if ( ! ipmi <identifiersep> ping ( ) ) { \n \t4 thread . sleep ( <number_literal> ) ; \n \t4 if ( ! ipmi <identifiersep> ping ( ) ) { \n <ect>
\t3 out . finish ( ) ; \n \t3 byte [ ] compressed <identifiersep> data = bos . to <identifiersep> byte <identifiersep> array ( ) ; \n \t3 return compressed <identifiersep> data ; } \n \t2 catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 protected void on <identifiersep> e <identifiersep> bus <identifiersep> telegram <identifiersep> received ( final byte [ ] received <identifiersep> telegram ) { \n \t2 if ( thread <identifiersep> pool == null ) { \n <ect>
public void initialize ( configuration configuration , properties properties ) throws ser <identifiersep> de <identifiersep> exception { \n \t1 <comment> \n \t1 if ( schema != null ) { \n \t1 log . debug ( <string_literal> ) ; } \n <ect>
\t2 if ( ! ip <identifiersep> range <identifiersep> config . valid <identifiersep> or <identifiersep> blank <identifiersep> ip ( end <identifiersep> ip ) ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + end <identifiersep> ip + <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( ! ip <identifiersep> range <identifiersep> config . valid <identifiersep> ip <identifiersep> range ( start <identifiersep> ip , end <identifiersep> ip ) ) { \n <ect>
\t2 object  <identifiersep> value = entry . get <identifiersep> value ( ) ; \n \t2 if (  <identifiersep> value instanceof lazy <identifiersep> struct ) { \n \t3 lazy <identifiersep> map . get <identifiersep> map ( ) . put (  <identifiersep> key , deserialize <identifiersep> struct (  <identifiersep> value , f . get <identifiersep> field <identifiersep> name ( ) ) ) ; } } \n <ect>
\t3 monitor . start <identifiersep> read <identifiersep> checker ( ) ; \n \t3 log . debug ( <string_literal> , \n \t5 new object [ ] { get <identifiersep> client <identifiersep> id ( ) , keep <identifiersep> alive <identifiersep> ms , keep <identifiersep> alive <identifiersep> ms , read <identifiersep> grace <identifiersep> period } ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 public template translate ( resource resource , \n \t7 node root , map < string , class < ? > > parameter <identifiersep> types ) throws parse <identifiersep> exception , \n \t3 io <identifiersep> exception { \n <ect>
\t1 private bigquery build <identifiersep> client ( http <identifiersep> transport http <identifiersep> transport ) throws exception { \n \t2 google <identifiersep> credential credential = null ; \n \t2 if ( ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( service <identifiersep> account ) && ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( service <identifiersep> account <identifiersep> key ) ) { \n <ect>
\t2 <comment> \n \t2 try { \n \t3 if ( !  <identifiersep> network <identifiersep> acl <identifiersep> mgr . replace <identifiersep> network <identifiersep> acl ( acl , ( network <identifiersep> vo ) network ) ) { \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + network . get <identifiersep> id ( ) ) ; } \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t5 } else { \n \t6 break ; } \n \t5 method . release <identifiersep> connection ( ) ; \n \t4 } else { \n <ect>
\t3 } else { \n \t4 log . error ( <string_literal> + acknowledgement . to <identifiersep> string ( ) . replace ( ' \\ r' , ' \\ n' ) , timeout <identifiersep> ex ) ; } \n \t3 throw new mllp <identifiersep> j <identifiersep> unit <identifiersep> resource <identifiersep> timeout <identifiersep> exception ( <string_literal> , timeout <identifiersep> ex ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t2 <comment> \n \t2 thread . sleep ( sleep <identifiersep> time ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 shutdown <identifiersep> all ( ) ; \n \t2 for ( int i = 1 ; i < = all ; ++ i ) { \n \t3 start ( i ) ; \n \t3 log . info ( <string_literal> + i ) ; } \n <ect>
\t3 s <identifiersep> logger . error ( <string_literal> ) ; } } \n \t1 private void on <identifiersep> cluster <identifiersep> node <identifiersep> joined ( object sender , cluster <identifiersep> node <identifiersep> join <identifiersep> event <identifiersep> args args ) { \n \t3 for ( management <identifiersep> server <identifiersep> host <identifiersep> vo mshost : args . get <identifiersep> joined <identifiersep> nodes ( ) ) { \n <ect>
\t5 . for <identifiersep> each ( info <identifiersep> header <identifiersep> line - > log . info ( <string_literal> + info <identifiersep> header <identifiersep> line . get <identifiersep> id ( ) ) ) ; \n \t3 out <identifiersep> header . get <identifiersep> format <identifiersep> header <identifiersep> lines ( ) \n \t5 . stream ( ) \n \t5 . filter ( format <identifiersep> header <identifiersep> line - > ! reader . get <identifiersep> file <identifiersep> header ( ) . has <identifiersep> info <identifiersep> line ( format <identifiersep> header <identifiersep> line . get <identifiersep> id ( ) ) ) \n <ect>
\t2 assert <identifiersep> that ( cluster <identifiersep> health . get <identifiersep> indices ( ) . get ( <string_literal> ) . get <identifiersep> active <identifiersep> shards ( ) , equal <identifiersep> to ( num <identifiersep> shards . num <identifiersep> primaries * <number_literal> ) ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 search <identifiersep> response count <identifiersep> response = client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> size ( 0 ) . set <identifiersep> query ( match <identifiersep> all <identifiersep> query ( ) ) . get ( ) ; \n \t3 assert <identifiersep> hit <identifiersep> count ( count <identifiersep> response , 10l ) ; } \n <ect>
\t5 attrs . put ( <string_literal> , string . value <identifiersep> of ( file . last <identifiersep> modified ( ) ) ) ; } \n \t4 return attrs ; } \n \t3 return null ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 if ( file . exists ( ) ) { \n \t4 try { \n \t5 java . awt . desktop . get <identifiersep> desktop ( ) . open ( file ) ; \n \t4 } catch ( io <identifiersep> exception e2 ) { \n <ect>
\t3 o <identifiersep> auth2connection <identifiersep> factory < ? > connection <identifiersep> factory = ( o <identifiersep> auth2connection <identifiersep> factory < ? > ) connection <identifiersep> factory <identifiersep> locator . get <identifiersep> connection <identifiersep> factory ( provider <identifiersep> id ) ; \n \t3 connection < ? > connection = connect <identifiersep> support . complete <identifiersep> connection ( connection <identifiersep> factory , request ) ; \n \t3 return handle <identifiersep> sign <identifiersep> in ( connection , connection <identifiersep> factory , request ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 for ( path f : files ) { \n \t3 if ( thread . current <identifiersep> thread ( ) . is <identifiersep> interrupted ( ) ) { \n \t4 throw new interrupted <identifiersep> exception ( <string_literal> ) ; } \n \t3 if ( ! files . is <identifiersep> readable ( f ) ) { \n <ect>
\t3 if ( multi <identifiersep> post . size ( ) == 0 && <string_literal> . equals ( access <identifiersep> type ) ) { \n \t4 log . error ( <string_literal> ) ; \n \t4 return false ; } \n \t3 if ( access <identifiersep> type == null && ! gui <identifiersep> mode ) { \n <ect>
\t3 if ( !  <identifiersep> firewall <identifiersep> mgr . apply <identifiersep> rules ( static <identifiersep> nat <identifiersep> rules , true , false ) ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t4 success = false ; } \n \t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 do <identifiersep> initialize <identifiersep> connection ( true ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 if ( session == null ) { \n \t3 logger . trace ( <string_literal> + session <identifiersep> id + <string_literal> ) ; \n \t3 return optional . empty ( ) ; } \n \t2 if ( session . get <identifiersep> user <identifiersep> id ( ) != null && user <identifiersep> manager . instance . get <identifiersep> user ( session . get <identifiersep> user <identifiersep> id ( ) ) == null ) { \n <ect>
\t4 scroll = client ( ) . prepare <identifiersep> search <identifiersep> scroll ( scroll . get <identifiersep> scroll <identifiersep> id ( ) ) . set <identifiersep> scroll ( <string_literal> ) . get ( ) ; } \n \t3 assert <identifiersep> equals ( control . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , scroll <identifiersep> docs ) ; \n \t2 } catch ( assertion <identifiersep> error e ) { \n \t3 logger . info ( <string_literal> , control ) ; \n <ect>
\t2 <comment> \n \t2 pair < integer , record > pair = iter . next ( ) ; \n \t2 if ( iter . has <identifiersep> next ( ) ) \n \t2 { \n <ect>
\t1 { \n \t2 try { \n \t3 return get <identifiersep> activity <identifiersep> stream ( ) . search <identifiersep> daily <identifiersep> pages ( optional <identifiersep> where <identifiersep> clause , max <identifiersep> items , start <identifiersep> at , this . context ) ; \n \t2 } catch ( activity <identifiersep> stream <identifiersep> exception ex ) { \n <ect>
\t3 ncs = new number <identifiersep> cruncher <identifiersep> server ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 registry registry = locate <identifiersep> registry . create <identifiersep> registry ( registry . registry <identifiersep> port ) ; \n \t3 registry . rebind ( <string_literal> , ncs ) ; \n <ect>
\t1 @ override \n \t1 final public void reset ( block block2 ) \n \t1 { \n \t2 if ( block2 . get <identifiersep> id ( ) != id ) \n <ect>
\t1 public < t extends ticket > t create ( final ticket <identifiersep> granting <identifiersep> ticket ticket <identifiersep> granting <identifiersep> ticket , final service service , \n \t9 final boolean credential <identifiersep> provided , final class < t > clazz ) { \n \t2 string ticket <identifiersep> id = produce <identifiersep> ticket <identifiersep> identifier ( service , ticket <identifiersep> granting <identifiersep> ticket , credential <identifiersep> provided ) ; \n \t2 if ( this . cipher <identifiersep> executor != null ) { \n <ect>
\t3 } else { \n \t4 string cls = iter . next ( ) . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ; \n \t4 bf . log . info ( <string_literal> + key . to <identifiersep> string ( ) + <string_literal> + cls ) ; } \n \t3 items ++ ; } \n <ect>
\t1 protected answer execute ( final network <identifiersep> usage <identifiersep> command cmd ) { \n \t2 if ( cmd . is <identifiersep> for <identifiersep> vpc ( ) ) { \n \t3 <comment> \n <ect>
<comment> \n \t2 public sam <identifiersep> message <identifiersep> session <identifiersep> handler ( input <identifiersep> stream dest <identifiersep> stream , properties props ) throws i2p <identifiersep> session <identifiersep> exception { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 go ( ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t5 period <identifiersep> formatter p <identifiersep> formatter = new period <identifiersep> formatter <identifiersep> builder ( ) . append <identifiersep> hours ( ) . append <identifiersep> separator ( <string_literal> ) \n \t7 . append <identifiersep> minutes ( ) . append <identifiersep> separator ( <string_literal> ) . append <identifiersep> seconds ( ) . to <identifiersep> formatter ( ) ; \n \t5 final <identifiersep> duration = p <identifiersep> formatter . parse <identifiersep> period ( duration ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 list < provider > providers =  <identifiersep> network <identifiersep> mgr . get <identifiersep> providers <identifiersep> for <identifiersep> service <identifiersep> in <identifiersep> network ( network , service . firewall ) ; \n \t2 <comment> \n \t2 if ( providers == null ) { \n <ect>
\t1 remove <identifiersep> source <identifiersep> field = boolean <identifiersep> utils . to <identifiersep> boolean <identifiersep> default <identifiersep> if <identifiersep> null ( get <identifiersep> filter <identifiersep> descriptor ( ) . is <identifiersep> remove <identifiersep> source <identifiersep> field ( ) , remove <identifiersep> source <identifiersep> field ) ; \n \t1 log . info ( <string_literal> + message <identifiersep> pattern + <string_literal> + multiline <identifiersep> pattern + <string_literal> + \n \t1 get <identifiersep> short <identifiersep> description ( ) ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> empty ( message <identifiersep> pattern ) ) { \n <ect>
\t3 source <identifiersep> jar = get <identifiersep> jar <identifiersep> from <identifiersep> file <identifiersep> or <identifiersep> url ( source ) ; } \n \t2 source <identifiersep> jar . calc <identifiersep> checksums ( null ) ; \n \t2 jar javadoc <identifiersep> jar ; \n \t2 if ( javadoc == null ) { \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> , ioe ) ; \n \t3 throw new server <identifiersep> exception ( <string_literal> , ioe ) ; \n \t2 } catch ( na <identifiersep> api <identifiersep> failed <identifiersep> exception naf ) { \n \t3 if ( naf . get <identifiersep> errno ( ) == <number_literal> ) { <comment> \n <ect>
\t1 throw new hive <identifiersep> exception ( error <identifiersep> msg . database <identifiersep> not <identifiersep> exists , db <identifiersep> name ) ; } \n \t1 map < string , string > params = database . get <identifiersep> parameters ( ) ; \n \t1 if ( ( null != alter <identifiersep> db <identifiersep> desc . get <identifiersep> replication <identifiersep> spec ( ) ) \n \t2 && ! alter <identifiersep> db <identifiersep> desc . get <identifiersep> replication <identifiersep> spec ( ) . allow <identifiersep> event <identifiersep> replacement <identifiersep> into ( params ) ) { \n <ect>
\t3 response . set <identifiersep> responses ( host <identifiersep> responses ) ; \n \t3 response . set <identifiersep> response <identifiersep> name ( get <identifiersep> command <identifiersep> name ( ) ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t2 } catch ( discovery <identifiersep> exception ex ) { \n <ect>
\t3 if ( line == null ) { \n \t4 breader . close ( ) ; \n \t4 this . reader = null ; } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t5 iter . remove ( ) ; \n \t5 outbound <identifiersep> state = cur ; \n \t5 <comment> \n \t5 <comment> \n <ect>
\t8 } else { \n \t9 username = math . abs ( ran . next <identifiersep> int ( ) ) + <string_literal> ; } \n \t8 ndc . push ( username ) ; \n \t8 string url = server + <string_literal> + username + <string_literal> + username + <string_literal> ; \n <ect>
\t4 safe <identifiersep> delete ( key <identifiersep> file ) ; } } \n \t2 return new string [ ] { cert <identifiersep> file . get <identifiersep> path ( ) , key <identifiersep> file . get <identifiersep> path ( ) } ; } \n \t1 private static void safe <identifiersep> delete ( file cert <identifiersep> file ) { \n \t2 if ( ! cert <identifiersep> file . delete ( ) ) { \n <ect>
\t3 this . selector . close ( ) ; \n \t3 this . thread . join ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception ex ) { \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 realm = realm . to <identifiersep> upper <identifiersep> case ( ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( realm ) || ! realm <identifiersep> map . contains <identifiersep> key ( realm ) ) { \n \t3 logger . warn ( <string_literal> , realm ) ; \n \t3 throw new sts <identifiersep> exception ( <string_literal> + realm ) ; } \n <ect>
\t1 log . debug ( <string_literal> ) ; \n \t1 pm . retrieve <identifiersep> all ( m <identifiersep> security <identifiersep> tab <identifiersep> part <identifiersep> list ) ; \n \t1 list < hive <identifiersep> object <identifiersep> privilege > result = convert <identifiersep> table <identifiersep> cols ( m <identifiersep> security <identifiersep> tab <identifiersep> part <identifiersep> list ) ; \n \t1 success = commit <identifiersep> transaction ( ) ; \n <ect>
\t2 try { \n \t3 <comment> \n \t3 s <identifiersep> logger . debug ( <string_literal> + network + <string_literal> ) ; \n \t3 if ( ! reprogram <identifiersep> network <identifiersep> rules ( network . get <identifiersep> id ( ) , call <identifiersep> context . current ( ) . get <identifiersep> calling <identifiersep> account ( ) , network ) ) { \n <ect>
\t2 } ; \n \t2 thread . start ( ) ; \n \t2 <comment> \n \t2 time <identifiersep> unit . seconds . sleep ( <number_literal> ) ; \n <ect>
\t4 call <identifiersep> peer <identifiersep> jabber . set <identifiersep> conf <identifiersep> info <identifiersep> scheduled ( false ) ; \n \t4 return ; } } \n \t2 catch ( xmpp <identifiersep> exception xmppe ) \n \t2 { \n <ect>
\t3 <comment> \n \t3 assert job <identifiersep> ctx == null ; \n \t3 log . info ( <string_literal> + system . identity <identifiersep> hash <identifiersep> code ( this ) ) ; \n \t3 log . info ( <string_literal> + rsrc1 ) ; \n <ect>
\t1 } catch ( exception e ) { \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t7 . get <identifiersep> binding <identifiersep> config ( item <identifiersep> name ) ; \n \t5 sapp <identifiersep> address <identifiersep> dimmer status <identifiersep> address = sapp <identifiersep> binding <identifiersep> config <identifiersep> dimmer <identifiersep> item . get <identifiersep> status ( ) ; \n \t5 if ( status <identifiersep> address . get <identifiersep> address <identifiersep> type ( ) == sapp <identifiersep> address <identifiersep> type && status <identifiersep> address . get <identifiersep> pnmas <identifiersep> id ( ) . equals ( pnmas <identifiersep> id ) \n \t7 && address <identifiersep> to <identifiersep> update == status <identifiersep> address . get <identifiersep> address ( ) ) { \n <ect>
\t2 string migrated <identifiersep> auth <identifiersep> server <identifiersep> version = system . get <identifiersep> property ( migrated <identifiersep> auth <identifiersep> server <identifiersep> version <identifiersep> property ) ; \n \t2 boolean migration <identifiersep> test = migrated <identifiersep> auth <identifiersep> server <identifiersep> version != null ; \n \t2 migration migration <identifiersep> annotation = method . get <identifiersep> annotation ( migration . class ) ; \n \t2 if ( migration <identifiersep> test && migration <identifiersep> annotation != null ) { \n <ect>
\t2 template . send <identifiersep> body ( generate <identifiersep> model ( ) ) ; \n \t2 try { \n \t3 result . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 protected abstract <identifiersep> fcp <identifiersep> handler ( plugin <identifiersep> context plugin <identifiersep> context2 ) { \n \t2 this . plugin <identifiersep> context = plugin <identifiersep> context2 ; } \n \t1 public final void handle ( plugin <identifiersep> reply <identifiersep> sender replysender , simple <identifiersep> field <identifiersep> set params , bucket data , int accesstype ) throws plugin <identifiersep> not <identifiersep> found <identifiersep> exception { \n \t2 if ( log <identifiersep> debug ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t2 catch ( runtime <identifiersep> exception e ) \n \t2 { \n \t3 if ( ! ( e instanceof last <identifiersep> error <identifiersep> exception ) ) \n \t4 throw e ; \n <ect>
\t2 if ( connection <identifiersep> handling <identifiersep> mode . get <identifiersep> release <identifiersep> mode ( ) == connection <identifiersep> release <identifiersep> mode . after <identifiersep> statement ) { \n \t3 if ( get <identifiersep> resource <identifiersep> registry ( ) . has <identifiersep> registered <identifiersep> resources ( ) ) { \n \t4 log . debug ( <string_literal> ) ; } \n \t3 else { \n <ect>
\t3 <comment> \n \t3 output <identifiersep> stream . write ( relay <identifiersep> board <identifiersep> command ) ; \n \t3 output <identifiersep> stream . flush ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 string s = <string_literal> + ext <identifiersep> lock <identifiersep> id + <string_literal> + \n \t2 <string_literal> + lock <identifiersep> waiting + <string_literal> ; \n \t2 <comment> \n \t2 <comment> \n <ect>
\t3 state = state . running ; \n \t3 return new start <identifiersep> answer ( cmd ) ; \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t2 table <identifiersep> utils . create <identifiersep> table <identifiersep> if <identifiersep> not <identifiersep> exists ( amazon <identifiersep> dynamo <identifiersep> db <identifiersep> client , request ) ; \n \t2 logger . debug ( <string_literal> , request . get <identifiersep> table <identifiersep> name ( ) ) ; \n \t2 table <identifiersep> utils . wait <identifiersep> until <identifiersep> active ( amazon <identifiersep> dynamo <identifiersep> db <identifiersep> client , request . get <identifiersep> table <identifiersep> name ( ) ) ; \n \t2 final describe <identifiersep> table <identifiersep> request describe <identifiersep> table <identifiersep> request = new describe <identifiersep> table <identifiersep> request ( ) . with <identifiersep> table <identifiersep> name ( request . get <identifiersep> table <identifiersep> name ( ) ) ; \n <ect>
\t3 external <identifiersep> listener instance ; \n \t3 try { \n \t4 do <identifiersep> update ( update , messages . get <identifiersep> string ( <string_literal> ) + <string_literal> + clazz . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t4 post <identifiersep> install ( clazz ) ; \n <ect>
\t2 return null ; } \n \t1 private static tournament <identifiersep> type load <identifiersep> tournament <identifiersep> type ( game <identifiersep> plugin plugin ) { \n \t2 try { \n \t3 class <identifiersep> loader . add <identifiersep> url ( new file ( plugin <identifiersep> folder + ' / ' + plugin . get <identifiersep> jar ( ) ) . to <identifiersep> uri ( ) . to <identifiersep> url ( ) ) ; \n <ect>
\t2 } finally { \n \t3 aggregation <identifiersep> scanner . close ( ) ; \n \t3 base <identifiersep> builder . close ( ) ; } \n \t2 long time <identifiersep> spent = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n <ect>
\t1 boolean logged = false ; \n \t1 while ( ! authentication <identifiersep> token <identifiersep> key <identifiersep> manager . is <identifiersep> initialized ( ) ) { \n \t2 <comment> \n \t2 if ( ! logged ) { \n <ect>
\t5 logger . warn ( <string_literal> , client <identifiersep> ip ) ; \n \t5 return false ; } \n \t3 } else { \n \t4 logger . info ( <string_literal> , client <identifiersep> ip ) ; } } \n <ect>
\t3 return super . get <identifiersep> configuration <identifiersep> urls ( file <identifiersep> name ) ; } } \n \t1 protected url find <identifiersep> in <identifiersep> file <identifiersep> system ( string file <identifiersep> name ) throws io <identifiersep> exception { \n \t2 url url = null ; \n \t2 file file = new file ( file <identifiersep> name ) ; \n <ect>
\t2 ons <identifiersep> tuple ons <identifiersep> tuple = ( ons <identifiersep> tuple ) values . get ( 0 ) ; \n \t2 atomic <identifiersep> integer fail <identifiersep> times = ons <identifiersep> tuple . get <identifiersep> failure <identifiersep> times ( ) ; \n \t2 int fail <identifiersep> num = fail <identifiersep> times . increment <identifiersep> and <identifiersep> get ( ) ; \n \t2 if ( fail <identifiersep> num > max <identifiersep> fail <identifiersep> times ) { \n <ect>
\t5 <string_literal> input <identifiersep> name \\ <string_literal> ) ; \n \t4 log . error ( msg ) ; \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( msg ) ; } \n \t3 http <identifiersep> servlet <identifiersep> response o <identifiersep> response = ( http <identifiersep> servlet <identifiersep> response ) invocation . get <identifiersep> invocation <identifiersep> context ( ) . get ( http <identifiersep> response ) ; \n <ect>
\t3 final response < search <identifiersep> result > response = this . user <identifiersep> search <identifiersep> executor . search ( \n \t5 this . connection <identifiersep> factory , \n \t5 ldap <identifiersep> utils . new <identifiersep> ldaptive <identifiersep> search <identifiersep> filter ( this . user <identifiersep> search <identifiersep> executor . get <identifiersep> search <identifiersep> filter ( ) . get <identifiersep> filter ( ) , \n \t7 ldap <identifiersep> utils . ldap <identifiersep> search <identifiersep> filter <identifiersep> default <identifiersep> param <identifiersep> name , collection <identifiersep> utils . wrap ( username ) ) ) ; \n <ect>
\t1 self .  <identifiersep> assert <identifiersep> download <identifiersep> valid ( ) \n \t1 else : \n \t1 self .  <identifiersep> assert <identifiersep> valid ( ) \n \t1 if self . main <identifiersep> resource . manage <identifiersep> if <identifiersep> exists == false and self . target <identifiersep> status : \n <ect>
\t5 <comment> \n \t5 if ( seq <identifiersep> num != next <identifiersep> expected <identifiersep> seq <identifiersep> num ) { \n \t6 if ( seq <identifiersep> num == next <identifiersep> expected <identifiersep> seq <identifiersep> num - transaciton <identifiersep> batch ) { \n \t7 next <identifiersep> expected <identifiersep> seq <identifiersep> num -= transaciton <identifiersep> batch ; \n <ect>
\t1 image image = null ; \n \t1 try { \n \t2 image = iterables . find ( images . get ( ) , new find <identifiersep> image <identifiersep> for <identifiersep> server ( from ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 return new check <identifiersep> on <identifiersep> host <identifiersep> answer ( cmd , true , <string_literal> ) ; } \n \t3 return new check <identifiersep> on <identifiersep> host <identifiersep> answer ( cmd , null , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 answer data <identifiersep> answer = cmds . get <identifiersep> answer ( <string_literal> ) ; \n \t3 if ( data <identifiersep> answer != null && data <identifiersep> answer . get <identifiersep> result ( ) ) { \n \t4 s <identifiersep> logger . info ( <string_literal> + uservm . get <identifiersep> virtual <identifiersep> machine ( ) . get <identifiersep> instance <identifiersep> name ( ) ) ; \n \t4 return true ; } \n <ect>
\t6 int doc <identifiersep> id = docs . doc ( ) ; \n \t6 string uuid = reader . document ( doc <identifiersep> id ) . get ( field <identifiersep> names . uuid ) ; \n \t6 node n = session . get <identifiersep> node <identifiersep> by <identifiersep> identifier ( uuid ) ; \n \t6 if ( is <identifiersep> name <identifiersep> too <identifiersep> long ( n . get <identifiersep> name ( ) , n . get <identifiersep> parent ( ) . get <identifiersep> path ( ) ) ) { \n <ect>
\t4 password = get <identifiersep> password ( ) . to <identifiersep> char <identifiersep> array ( ) ; } \n \t3 key <identifiersep> store . load ( input , password ) ; \n \t3 return key <identifiersep> store ; \n \t2 } catch ( exception exception <identifiersep> from <identifiersep> normal <identifiersep> load ) { \n <ect>
\t3 new job ( i , p <identifiersep> list <identifiersep> test . task <identifiersep> type . create , iterations ) . run ( ) ; } \n \t2 log . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < num <identifiersep> lists ; i ++ ) { \n \t3 new job ( i , p <identifiersep> list <identifiersep> test . task <identifiersep> type . delete , iterations ) . run ( ) ; } \n <ect>
\t2 ) ; \n \t2 synchronized ( this ) { \n \t3 this . registration = registration ; \n \t3 this . registering = false ; } \n <ect>
\t3 delete <identifiersep> row <identifiersep> from <identifiersep> table ( exclude <identifiersep> model , exclude <identifiersep> table ) ; \n \t2 } else if ( command . equals ( delete <identifiersep> include ) ) { \n \t3 delete <identifiersep> row <identifiersep> from <identifiersep> table ( include <identifiersep> model , include <identifiersep> table ) ; \n \t2 } else if ( command . equals ( change <identifiersep> target ) ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void saml <identifiersep> meta <identifiersep> data <identifiersep> identity <identifiersep> provider <identifiersep> loading <identifiersep> error ( throwable t ) { \n <ect>
\t2 value . add ( inp <identifiersep> tuple ) ; \n \t2 if ( value . size ( ) > list <identifiersep> size <identifiersep> threshold ) { \n \t3 boolean is <identifiersep> first = ( map == raw <identifiersep> input <identifiersep> map ) ; \n <ect>
\t3 this . check <identifiersep> interval = check <identifiersep> interval ; \n \t3 this . last <identifiersep> seen <identifiersep> access <identifiersep> time = last <identifiersep> seen <identifiersep> access <identifiersep> time ; } \n \t2 @ override \n \t2 public void on <identifiersep> failure ( exception e ) { \n <ect>
\t2 fetch <identifiersep> task . set <identifiersep> driver <identifiersep> context ( null ) ; \n \t2 fetch <identifiersep> task . set <identifiersep> query <identifiersep> plan ( null ) ; } } \n \t1 plan = null ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 } catch ( invalid <identifiersep> object <identifiersep> exception e ) { \n \t2 log . debug ( public + <string_literal> , e ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> object <identifiersep> exception e ) { \n \t2 <comment> \n <ect>
\t4 return statement ; } \n \t3 result = constructor . new <identifiersep> instance ( new object [ ] { new statement <identifiersep> proxy ( statement , sql ) } ) ; \n \t3 return result ; \n \t2 } catch ( exception x ) { \n <ect>
\t3 return null ; } \n \t2 try { \n \t3 tar <identifiersep> archive <identifiersep> entry current = get <identifiersep> next <identifiersep> entry ( ) ; \n \t3 if ( current != null ) { \n <ect>
\t4 if ( ! ( ability instanceof static <identifiersep> ability ) || ability . is <identifiersep> in <identifiersep> useable <identifiersep> zone ( game , permanent , null ) ) { \n \t5 log . error ( uuid + <string_literal> + ability + <string_literal> + effect . applies ( permanent , ability , game ) ) ; \n \t4 } else { \n \t5 boolean usable = ability . is <identifiersep> in <identifiersep> useable <identifiersep> zone ( game , permanent , null ) ; \n <ect>
\t3 final saml <identifiersep> registered <identifiersep> service saml <identifiersep> registered <identifiersep> service = ( saml <identifiersep> registered <identifiersep> service ) registered <identifiersep> service ; \n \t3 logger . debug ( <string_literal> , \n \t4 saml <identifiersep> registered <identifiersep> service . get <identifiersep> service <identifiersep> id ( ) , saml <identifiersep> registered <identifiersep> service . get <identifiersep> metadata <identifiersep> location ( ) ) ; \n \t3 return saml <identifiersep> registered <identifiersep> service ; } \n <ect>
\t4 prepared <identifiersep> statement stmt1 = txn . prepare <identifiersep> auto <identifiersep> close <identifiersep> statement ( insert <identifiersep> sql1 ) ; \n \t4 stmt1 . execute <identifiersep> update ( ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t3 tr <identifiersep> row6 . append <identifiersep> child ( cell61 , cell62 ) \n \t3 tooltip <identifiersep> builder . append <identifiersep> row ( tr <identifiersep> row6 ) \n \t3 return tooltip <identifiersep> builder . create ( ) . write ( ) \n \t2 } catch ( e : exception ) { \n <ect>
\t6 url <identifiersep> extension . append ( ' = ' ) ; \n \t6 url <identifiersep> extension . append ( string <identifiersep> utils . url <identifiersep> encode <identifiersep> wrap <identifiersep> exception ( entry \n \t7 . get <identifiersep> value ( ) , <string_literal> ) ) ; } } \n \t4 final string url = url <identifiersep> extension . to <identifiersep> string ( ) ; \n <ect>
\t2 if ( verbose ) { \n \t3 log . error ( bs . to <identifiersep> string ( ) ) ; } \n \t2 if ( log <identifiersep> file <identifiersep> name == null || log <identifiersep> file <identifiersep> name . equals ( <string_literal> ) ) { \n \t3 <comment> \n <ect>
\t4 exec = new exec ( dst <identifiersep> host , user , old <identifiersep> password ) ; \n \t4 string exec <identifiersep> command = <string_literal> + path ; \n \t4 log . info ( <string_literal> + exec <identifiersep> command ) ; \n \t4 exec . execute ( exec <identifiersep> command ) ; \n <ect>
\t3 string [ ] vm <identifiersep> ids = null ; \n \t3 client = new http <identifiersep> client ( ) ; \n \t3 method = new get <identifiersep> method ( url ) ; \n \t3 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t2 object <identifiersep> helper . not <identifiersep> null ( trigger , <string_literal> ) ; \n \t2 if ( started ) { \n \t3 pause <identifiersep> trigger ( get <identifiersep> trigger ( ) ) ; \n \t3 started = false ; } \n <ect>
\t7 record <identifiersep> changes ( conn , vm , host <identifiersep> uuid ) ; \n \t6 } catch ( final exception e ) { \n \t7 s <identifiersep> logger . error ( <string_literal> + event , e ) ; } } \n \t4 } catch ( final throwable th ) { \n <ect>
\t8 <comment> \n \t8 log . info ( <string_literal> ) ; \n \t8 timed <identifiersep> out . set ( true ) ; } \n \t7 catch ( throwable e ) { \n <ect>
\t4 continue ; } \n \t3 string sql = get <identifiersep> text <identifiersep> from <identifiersep> file ( sql <identifiersep> file ) ; \n \t3 list < string > parameters = get <identifiersep> parameter <identifiersep> from <identifiersep> file ( sql <identifiersep> file ) ; \n \t3 <comment> \n <ect>
\t1 if ( permission . role == null ) { \n \t2 <comment> \n \t2 return infra <identifiersep> rule <identifiersep> based <identifiersep> authorization <identifiersep> plugin . match <identifiersep> status . permitted ; } \n \t1 if ( principal == null ) { \n <ect>
\t2 public void set <identifiersep> up <identifiersep> logon <identifiersep> expectation ( ) { \n \t3 logon <identifiersep> latch = new count <identifiersep> down <identifiersep> latch ( 1 ) ; } \n \t2 public void on <identifiersep> logon ( session <identifiersep> id session <identifiersep> id ) { \n \t3 if ( logon <identifiersep> latch != null ) { \n <ect>
\t2 doc <identifiersep> builder <identifiersep> factory . set <identifiersep> ignoring <identifiersep> element <identifiersep> content <identifiersep> whitespace ( true ) ; \n \t2 try { \n \t3 doc <identifiersep> builder = doc <identifiersep> builder <identifiersep> factory . new <identifiersep> document <identifiersep> builder ( ) ; \n \t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n <ect>
\t3 } catch ( exception exp ) { \n \t4 <comment> \n \t4 log . error ( <string_literal> , exp ) ; } } \n \t2 if ( ! is <identifiersep> success ) { \n <ect>
\t6 if ( msg == null ) { \n \t7 log . info ( <string_literal> + seq <identifiersep> expected + <string_literal> , msg ) ; \n \t7 return boolean . false ; } \n \t6 int seq = integer . parse <identifiersep> int ( msg . get <identifiersep> text ( ) ) ; \n <ect>
\t2 try { \n \t3 helper = new netconf <identifiersep> helper ( cmd . get <identifiersep> vsm <identifiersep> ip ( ) , cmd . get <identifiersep> vsm <identifiersep> username ( ) , cmd . get <identifiersep> vsm <identifiersep> password ( ) ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> + cmd . get <identifiersep> vsm <identifiersep> ip ( ) ) ; \n \t3 helper . add <identifiersep> v <identifiersep> service <identifiersep> node ( vlan <identifiersep> id , cmd . get <identifiersep> ip <identifiersep> address ( ) ) ; \n <ect>
\t5  <identifiersep> model <identifiersep> dictionary = ( ns <identifiersep> dictionary ) report <identifiersep> dictionary ( ) . object <identifiersep> for <identifiersep> key ( <string_literal> ) ; \n \t5 if (  <identifiersep> model <identifiersep> dictionary == null ) { \n \t6 log . warn ( <string_literal> ) ; \n \t6  <identifiersep> model <identifiersep> dictionary = ns <identifiersep> dictionary . empty <identifiersep> dictionary ; } } \n <ect>
\t3 if ( cached <identifiersep> user != null ) { \n \t4 cached <identifiersep> user <identifiersep> id = cached <identifiersep> user . get <identifiersep> uuid ( ) ; \n \t4 cached <identifiersep> user <identifiersep> name = cached <identifiersep> user . get <identifiersep> name ( ) ; } \n \t2 } catch ( throwable t ) { \n <ect>
\t1 add <identifiersep> cluster <identifiersep> enabled <identifiersep> cache <identifiersep> manager ( cfg <identifiersep> builder , new transport <identifiersep> flags ( ) . with <identifiersep> fd ( true ) ) ; \n \t1 add <identifiersep> cluster <identifiersep> enabled <identifiersep> cache <identifiersep> manager ( gcfg <identifiersep> builder , cfg <identifiersep> builder , new transport <identifiersep> flags ( ) . with <identifiersep> fd ( true ) ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 wait <identifiersep> for <identifiersep> cluster <identifiersep> to <identifiersep> form ( ) ; \n <ect>
\t5 raise protocol <identifiersep> error ( \n \t6 <string_literal> % transaction ) \n \t4 self . engine . transactions [ transaction ] . append ( frame ) \n \t2 except exception as e : \n <ect>
\t1 if ( metastore <identifiersep> token <identifiersep> str <identifiersep> form != null ) { \n \t1 <comment> \n \t1 delegation <identifiersep> token <identifiersep> cache . get <identifiersep> string <identifiersep> form <identifiersep> token <identifiersep> cache ( ) . store <identifiersep> delegation <identifiersep> token ( \n \t3 submitted <identifiersep> job <identifiersep> id . to <identifiersep> string ( ) , metastore <identifiersep> token <identifiersep> str <identifiersep> form ) ; \n <ect>
\t6 synchronized ( plist <identifiersep> locks ( plist ) ) { \n \t7 for ( int j = iterations - 1 ; j >= 0 ; j -- ) { \n \t8 plist . remove ( <string_literal> + id + id <identifiersep> seed + <string_literal> + j ) ; \n \t8 if ( j > 0 && j % ( iterations / <number_literal> ) == 0 ) { \n <ect>
\t2 if ( repository <identifiersep> context <identifiersep> attribute <identifiersep> name != null ) { \n \t3 result = ( repository ) get <identifiersep> servlet <identifiersep> context ( ) . get <identifiersep> attribute ( repository <identifiersep> context <identifiersep> attribute <identifiersep> name ) ; \n \t4 if ( result != null ) { \n <ect>
\t1 } catch ( not <identifiersep> available <identifiersep> from <identifiersep> exchange <identifiersep> exception e ) { \n \t2 assert <identifiersep> that ( not <identifiersep> available <identifiersep> from <identifiersep> exchange <identifiersep> not <identifiersep> thrown ) . is <identifiersep> false ( ) ; \n \t2 not <identifiersep> available <identifiersep> from <identifiersep> exchange <identifiersep> thrown = true ; \n \t1 } catch ( not <identifiersep> yet <identifiersep> implemented <identifiersep> for <identifiersep> exchange <identifiersep> exception e ) { \n <ect>
\t5 list <identifiersep> of <identifiersep> locations . add ( crl <identifiersep> fetched ) ; \n \t4 } else { \n \t5 logger . warn ( <string_literal> , url ) ; } \n \t3 } else { \n <ect>
\t2 try { \n \t3 data . read <identifiersep> from ( in , false ) ; \n \t3 return data ; } \n \t2 catch ( exception ex ) { \n <ect>
\t1 public account <identifiersep> vo mark <identifiersep> default <identifiersep> zone ( string account <identifiersep> name , long domain <identifiersep> id , long default <identifiersep> zone <identifiersep> id ) { \n \t2 <comment> \n \t2 account account =  <identifiersep> account <identifiersep> dao . find <identifiersep> enabled <identifiersep> account ( account <identifiersep> name , domain <identifiersep> id ) ; \n \t2 if ( account == null ) { \n <ect>
\t3 <comment> \n \t3 try { \n \t4 connection . set <identifiersep> auto <identifiersep> commit ( true ) ; } \n \t3 catch ( database <identifiersep> exception e ) { \n <ect>
\t2 long [ ] durations = null ; \n \t2 logger . debug ( <string_literal> , durationsopt ) ; \n \t2 string [ ] numbers = durationsopt . split ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < numbers . length ; i ++ ) { \n <ect>
\t2 groovy <identifiersep> object object = compile ( <string_literal> ) ; \n \t2 object . invoke <identifiersep> method ( <string_literal> , null ) ; } \n \t1 public void test <identifiersep> logging ( ) { \n \t2 logger log = logger . get <identifiersep> logger ( get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; \n <ect>
\t3 raf . set <identifiersep> length ( pos ) ; \n \t3 raf . close ( ) ; \n \t3 while ( itr . go <identifiersep> to <identifiersep> next <identifiersep> log ( ) ) { \n \t4 if ( ! itr . log <identifiersep> file . delete ( ) ) { \n <ect>
\t5 was <identifiersep> deleted ( ) ; } \n \t4 break ; \n \t3 default : \n \t4 <comment> \n <ect>
\t1 boolean dont <identifiersep> keep <identifiersep> full <identifiersep> field <identifiersep> set ( ) { \n \t2 return true ; } \n \t1 public link <identifiersep> length <identifiersep> class link <identifiersep> length <identifiersep> class ( ) { \n \t2 if ( ! location . is <identifiersep> valid ( get <identifiersep> location ( ) ) ) { \n <ect>
\t1 configure <identifiersep> work <identifiersep> assigner ( ) ; } \n protected void configure <identifiersep> work <identifiersep> assigner ( ) { \n \t1 string work <identifiersep> assigner <identifiersep> class = conf . get ( property . replication <identifiersep> work <identifiersep> assigner ) ; \n \t1 if ( null == assigner || ! assigner . get <identifiersep> class ( ) . get <identifiersep> name ( ) . equals ( work <identifiersep> assigner <identifiersep> class ) ) { \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t2 timeline <identifiersep> client . put <identifiersep> entities ( entity ) ; \n \t2 } catch ( exception err ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t1 this . user <identifiersep> record = \n \t2 ( sqoop <identifiersep> record ) reflection <identifiersep> utils . new <identifiersep> instance ( user <identifiersep> class , conf ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception cnfe ) { \n \t1 <comment> \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t2 if ( fragment <identifiersep> split . size ( ) > 1 ) { \n \t3 builder . append ( ' # ' ) ; \n \t3 builder . append ( fragment <identifiersep> split . get ( 1 ) ) ; } \n \t2 final string url <identifiersep> redirect = builder . to <identifiersep> string ( ) ; \n <ect>
\t1 res = runner . run ( cmd ) \n \t1 if res [ 'exit <identifiersep> code' ] != 0 : \n \t2 raise exception ( <string_literal> + name + <string_literal> + res [ 'error' ] + res [ 'output' ] ) \n \t1 else : \n <ect>
\t2 job . set <identifiersep> reducer <identifiersep> class ( get <identifiersep> reducer <identifiersep> class ( ) ) ; \n \t2 job . set <identifiersep> output <identifiersep> key <identifiersep> class ( get <identifiersep> output <identifiersep> key <identifiersep> class ( ) ) ; \n \t2 job . set <identifiersep> output <identifiersep> value <identifiersep> class ( get <identifiersep> output <identifiersep> value <identifiersep> class ( ) ) ; \n \t2 if ( get <identifiersep> grouping <identifiersep> comparator <identifiersep> class ( ) != null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 protected void do <identifiersep> shutdown ( ) throws jms <identifiersep> exception { \n <ect>
\t2 this . name = name ; } \n \t1 @ override \n \t1 protected boolean hide <identifiersep> child ( @ nonnull final string name , @ nonnull final node <identifiersep> state delegate <identifiersep> child ) { \n \t2 if ( is <identifiersep> name <identifiersep> too <identifiersep> long ( name ) ) { \n <ect>
\t3 if ( ! status <identifiersep> running . equals ( bean <identifiersep> status ) || old <identifiersep> exec <identifiersep> cnt != new <identifiersep> exec <identifiersep> cnt ) { \n \t4 orig <identifiersep> index <identifiersep> lane <identifiersep> to <identifiersep> executino <identifiersep> count <identifiersep> map . remove ( index <identifiersep> lane <identifiersep> bean ) ; \n \t4 log . info ( <string_literal> , index <identifiersep> lane <identifiersep> bean . get <identifiersep> name ( ) , old <identifiersep> exec <identifiersep> cnt , new <identifiersep> exec <identifiersep> cnt ) ; \n \t3 } else if ( clock . get <identifiersep> time ( ) - start > time <identifiersep> unit . minutes . to <identifiersep> millis ( <number_literal> ) ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 return null ; } \n \t2 output output = outputs . get ( job . get <identifiersep> id ( ) ) ; \n \t2 if ( output == null ) { \n <ect>
\t5 + <string_literal> + new <identifiersep> state ; \n \t4 if ( comp <identifiersep> info . is <identifiersep> master ( ) ) { \n \t5 throw new ambari <identifiersep> exception ( error ) ; \n \t4 } else { \n <ect>
\t1 public void connect ( string device ) throws exception { \n \t2 logger . error ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void disconnect ( ) { \n <ect>
\t2 int breakindex = 0 ; \n \t2 try { \n \t3 breakindex = integer . parse <identifiersep> int ( boundary . get <identifiersep> attribute ( <string_literal> ) ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t4 on <identifiersep> close <identifiersep> called = false ; \n \t4 on <identifiersep> error <identifiersep> called = false ; } } \n \t2 sse <identifiersep> broadcaster . register ( sink ) ; \n \t2 this . event <identifiersep> sink = sink ; \n <ect>
\t3 return ( configuration ) m . invoke ( null , inner ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , class <identifiersep> name , method <identifiersep> name , method <identifiersep> arg <identifiersep> type . get <identifiersep> simple <identifiersep> name ( ) , e ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t5 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> \n \t7 +  <identifiersep> line <identifiersep> number + <string_literal> + ( a <identifiersep> buffer <identifiersep> index -  <identifiersep> start <identifiersep> of <identifiersep> line <identifiersep> char <identifiersep> index ) + <string_literal> ) ; \n \t4 a <identifiersep> buffer <identifiersep> index =  <identifiersep> skip <identifiersep> whitespace <identifiersep> and <identifiersep> comments ( ac , a <identifiersep> buffer <identifiersep> index ) ; \n \t4 if ( a <identifiersep> buffer <identifiersep> index == eot || ac [ a <identifiersep> buffer <identifiersep> index ] != ' : ' ) { \n <ect>
\t4 event <identifiersep> to <identifiersep> process = null ; \n \t4 listeners <identifiersep> copy = null ; } \n \t2 } catch ( throwable t ) \n \t2 { \n <ect>
\t2 for ( int i = 0 ; i < loggers . size ( ) ; i ++ ) { \n \t3 logger l = ( logger ) loggers . element <identifiersep> at ( i ) ; \n \t3 log <identifiersep> log . debug ( <string_literal> + primary . get <identifiersep> name ( ) + <string_literal> \n \t4 + l . get <identifiersep> name ( ) + <string_literal> ) ; \n <ect>
\t6 errors ++ ; \n \t6 log . error ( <string_literal> + errors , ie ) ; \n \t5 } catch ( execution <identifiersep> exception ee ) { \n \t6 errors ++ ; \n <ect>
\t8 } catch ( io <identifiersep> exception ex ) { \n \t9 s <identifiersep> logger . error ( <string_literal> , ex ) ; \n \t9 return new answer ( cmd , ex ) ; } } \n \t6 } else { \n <ect>
\t2 <comment> \n \t2 while ( new <identifiersep> groups <identifiersep> enum . has <identifiersep> more <identifiersep> elements ( ) ) \n \t2 { \n \t3 string group <identifiersep> name = new <identifiersep> groups <identifiersep> enum . next <identifiersep> element ( ) ; \n <ect>
\t4 log . info ( <string_literal> ) ; \n \t3 } else { \n \t4 if ( ! file <identifiersep> ops . exists ( dir ) ) \n \t5 throw new cmd <identifiersep> exception ( <string_literal> + dir ) ; \n <ect>
\t4 if ( account <identifiersep> id == - 1 ) { \n \t5 s <identifiersep> logger . error ( <string_literal> + username + <string_literal> ) ; \n \t5 return - 1 ; } } \n \t2 } else { \n <ect>
\t4 file <identifiersep> system fs = hadoop <identifiersep> util . get <identifiersep> working <identifiersep> file <identifiersep> system ( hadoop <identifiersep> util . get <identifiersep> current <identifiersep> configuration ( ) ) ; \n \t4 conf . set ( file <identifiersep> system . fs <identifiersep> default <identifiersep> name <identifiersep> key , fs . get <identifiersep> uri ( ) . to <identifiersep> string ( ) ) ; \n \t4 logger . debug ( <string_literal> + fs . get <identifiersep> uri ( ) . to <identifiersep> string ( ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 this . on <identifiersep> connected ( ) ; } \n \t3 this . channel = channel ; \n \t3 this . is <identifiersep> channel <identifiersep> connecting = true ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception ex ) { \n <ect>
\t3 final ticket encode <identifiersep> ticket = this . encode <identifiersep> ticket ( ticket ) ; \n \t3 this . client . bound <identifiersep> value <identifiersep> ops ( redis <identifiersep> key ) \n \t5 . set ( encode <identifiersep> ticket , get <identifiersep> timeout ( ticket ) , time <identifiersep> unit . seconds ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 throw e ; } \n \t2 if ( answer == null ) { \n \t3 throw new assertion <identifiersep> error ( <string_literal> + block ) ; } \n <ect>
\t3 return false ; } } \n \t1 @ override \n \t1 public void close <identifiersep> and <identifiersep> cleanup <identifiersep> all <identifiersep> data ( ) { \n \t2 try { \n <ect>
\t6 + <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t4 tuple t1 = loader . get <identifiersep> next ( ) ; \n \t4 if ( t1 == null ) { \n <ect>
\t1 subprocess <identifiersep> security <identifiersep> manager subprocess <identifiersep> sm = null ; \n \t1 if ( test <identifiersep> mode ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t1 } catch ( exception e ) { \n \t2 log . error ( <string_literal> , e ) ; } \n \t1 retry <identifiersep> count ++ ; \n \t1 } while ( retry <identifiersep> count < <number_literal> ) ; \n <ect>
\t3 stat <identifiersep> file = stat <identifiersep> file <identifiersep> set . iterator ( ) . next ( ) ; \n \t2 } else { \n \t3 log . warn ( <string_literal> + location ) ; \n \t3 return null ; } \n <ect>
\t4 log . debug ( <string_literal> , get <identifiersep> data <identifiersep> source <identifiersep> name ( ) , system . identity <identifiersep> hash <identifiersep> code ( dsc ) ) ; \n \t4 try { \n \t5 dsc . close ( ) ; \n \t4 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t3 string configured <identifiersep> delimiter = config . get <identifiersep> property ( configuration <identifiersep> prefix + <string_literal> ) ; \n \t3 if ( configured <identifiersep> delimiter != null ) { \n \t4 hierarchy <identifiersep> delimiter = configured <identifiersep> delimiter . replace <identifiersep> all ( <string_literal> | \\ <string_literal> , <string_literal> ) ; } \n \t3 string filename = vocabularies <identifiersep> path + vocabulary <identifiersep> name + <string_literal> ; \n <ect>
\t4 assert . assert <identifiersep> equals ( <number_literal> , r . get <identifiersep> string ( <string_literal> ) . length ( ) ) ; } } } \n \t1 private static void load <identifiersep> legacy <identifiersep> table ( string table <identifiersep> pattern , string legacy <identifiersep> version ) throws io <identifiersep> exception \n \t1 { \n \t2 string table = string . format ( table <identifiersep> pattern , legacy <identifiersep> version ) ; \n <ect>
\t7 for ( int i = <number_literal> ; ( i + <number_literal> ) < = max <identifiersep> length ; i += <number_literal> ) { \n \t8 if ( sources [ i ] != null && sources [ i + 1 ] != null ) { \n \t9 changelog <identifiersep> filter . add <identifiersep> filter <identifiersep> entry ( sources [ i ] . to <identifiersep> string ( ) , sources [ i + 1 ] ) ; } } \n \t7 if ( max <identifiersep> length % <number_literal> == 1 && sources [ max <identifiersep> length - 1 ] != null ) { \n <ect>
<number_literal> admin = true , \n <number_literal> domainid = self . domain . id \n <number_literal> ) \n \t2 self . cleanup = [ self . account ] \n <ect>
\t2 { \n \t3 write <identifiersep> all <identifiersep> events ( ) ; } \n \t2 catch ( io <identifiersep> exception ioe ) \n \t2 { \n <ect>
<comment> \n browser <identifiersep> bot . prototype . modify <identifiersep> separate <identifiersep> test <identifiersep> window <identifiersep> to <identifiersep> detect <identifiersep> page <identifiersep> loads = function ( window <identifiersep> object ) { \n \t1 <comment> \n \t1 if ( ! window <identifiersep> object ) { \n <ect>
\t3 answer ans =  <identifiersep> agent <identifiersep> mgr . send <identifiersep> to <identifiersep> ssvm ( dc <identifiersep> id , cmd ) ; \n \t3 if ( ans == null || ! ans . get <identifiersep> result ( ) ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + ans . get <identifiersep> details ( ) + <string_literal> + volume <identifiersep> id ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 from resource <identifiersep> management . libraries . functions . setup <identifiersep> ranger <identifiersep> plugin <identifiersep> xml import setup <identifiersep> ranger <identifiersep> plugin \n \t1 if params . retry <identifiersep> enabled : \n \t1 logger . info ( <string_literal> ) \n \t1 else : \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 this . timer <identifiersep> task = new runnable <identifiersep> timer <identifiersep> task ( this ) ; \n \t2 this . secondary <identifiersep> zone <identifiersep> update <identifiersep> timer = new timer ( ) ; \n \t2 this . secondary <identifiersep> zone <identifiersep> update <identifiersep> timer . schedule ( timer <identifiersep> task , millisecond <identifiersep> time <identifiersep> units . second * <number_literal> , millisecond <identifiersep> time <identifiersep> units . second * <number_literal> ) ; \n <ect>
\t2 spill <identifiersep> replay <identifiersep> batch . reset ( ) ; \n \t2 batch <identifiersep> count ++ ; } \n \t1 big <identifiersep> table . clear ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t6 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + value ) ; } \n \t5 connection . start ( ) ; } \n \t4 source = connection . get <identifiersep> destination <identifiersep> source ( ) ; } \n \t2 } catch ( throwable t ) { \n <ect>
<comment> \n \t1 public box <identifiersep> file <identifiersep> version promote <identifiersep> file <identifiersep> version ( string file <identifiersep> id , integer version ) { \n \t2 try { \n <ect>
\t9 break ; } } \n \t7 if ( diff . is <identifiersep> root ) { \n \t8 long cnt = remove <identifiersep> nested <identifiersep> cug <identifiersep> path ( diff . after <identifiersep> builder , path , reconnect ) ; \n \t8 if ( cnt < 0 ) { \n <ect>
\t1 if site <identifiersep> name in recommended <identifiersep> defaults : \n \t1 site <identifiersep> properties = self . get <identifiersep> site <identifiersep> properties ( configurations , site <identifiersep> name ) \n \t1 if site <identifiersep> properties is not none : \n \t2 site <identifiersep> recommendations = recommended <identifiersep> defaults [ site <identifiersep> name ] [ <string_literal> ] \n <ect>
\t1 private final string project ; \n \t1 private final list < string > zones ; \n \t1 @ override \n \t1 public collection < instance > instances ( ) { \n <ect>
\t3 if ( bm == null ) { \n \t4 <comment> \n \t4 bm = lookup ( initial <identifiersep> context , cdi <identifiersep> jndikey <identifiersep> beanmanager <identifiersep> comp <identifiersep> env ) ; } \n \t3 if ( bm == null ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t3 . set <identifiersep> user ( user ) \n \t3 . send <identifiersep> verify <identifiersep> email ( link , expiration <identifiersep> in <identifiersep> minutes ) ; \n \t3 event . success ( ) ; \n \t2 } catch ( email <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , active . depth , midpoint , active ) ; \n \t3 return fully <identifiersep> inconsistent ; } \n \t2 tree <identifiersep> difference left = new tree <identifiersep> difference ( active . left , midpoint , inc ( active . depth ) ) ; \n \t2 tree <identifiersep> difference right = new tree <identifiersep> difference ( midpoint , active . right , inc ( active . depth ) ) ; \n <ect>
\t2 string [ ] entries = ( string [ ] ) map . key <identifiersep> set ( ) . to <identifiersep> array ( new string [ 0 ] ) ; \n \t2 logger . debug ( <string_literal> + entries [ 0 ] ) ; \n \t2 map = ( map ) map . get ( entries [ 0 ] ) ; \n \t2 if ( map == null ) { \n <ect>
\t1 json <identifiersep> object response = new json <identifiersep> object ( ) ; \n \t1 response . put ( <string_literal> , job ) ; \n \t1 return response . status ( response . status . accepted ) . entity ( response ) . build ( ) ; \n \t1 } catch ( service <identifiersep> exception e ) { \n <ect>
\t3 if ( does <identifiersep> attribute <identifiersep> policy <identifiersep> allow ) { \n \t4 logger . debug ( <string_literal> , attribute <identifiersep> name ) ; \n \t4 attributes . put ( attribute <identifiersep> name , collection <identifiersep> utils . wrap ( attribute <identifiersep> value ) ) ; \n \t3 } else { \n <ect>
\t2 if ( is <identifiersep> client <identifiersep> configured ( ) ) { \n \t3 log . info ( <string_literal> , \n \t5 client <identifiersep> configured <identifiersep> num <identifiersep> samples <identifiersep> threshold , client <identifiersep> configured <identifiersep> time <identifiersep> threshold <identifiersep> ms ) ; \n \t2 } else { \n <ect>
\t1 private static void set <identifiersep> channel <identifiersep> option ( \n \t3 channel channel , channel <identifiersep> option < ? > option , object value , internal <identifiersep> logger logger ) { \n \t2 try { \n \t3 if ( ! channel . config ( ) . set <identifiersep> option ( ( channel <identifiersep> option < object > ) option , value ) ) { \n <ect>
<comment> \n \t1 public static void handle <identifiersep> or <identifiersep> log ( throwable t ) \n \t1 { \n \t2 if ( thread . get <identifiersep> default <identifiersep> uncaught <identifiersep> exception <identifiersep> handler ( ) == null ) \n <ect>
\t7 cred . clear <identifiersep> property ( key ) ; } } \n \t5 try { \n \t6 cred . save ( ) ; \n \t5 } catch ( configuration <identifiersep> exception e1 ) { \n <ect>
\t2 invocation . builder request = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) ; \n \t2 response response = request . get ( ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string str = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t3 big <identifiersep> integer w ; \n \t3 try { \n \t4 w = s . mod <identifiersep> inverse ( crypto <identifiersep> constants . dsaq ) ; \n \t3 } catch ( arithmetic <identifiersep> exception ae ) { \n <ect>
\t3 public void configure ( ) throws exception { \n \t4 from ( <string_literal> ) . id ( <string_literal> ) \n \t6 . process ( new processor ( ) { \n \t7 public void process ( final exchange exchange ) { \n <ect>
\t1 public void around <identifiersep> write <identifiersep> to ( writer <identifiersep> interceptor <identifiersep> context context ) throws io <identifiersep> exception , web <identifiersep> application <identifiersep> exception { \n \t2 output <identifiersep> stream <identifiersep> wrapper wrapper = new output <identifiersep> stream <identifiersep> wrapper ( context . get <identifiersep> output <identifiersep> stream ( ) ) ; \n \t2 context . set <identifiersep> output <identifiersep> stream ( wrapper ) ; \n \t2 context . proceed ( ) ; \n <ect>
\t5 <string_literal> ) ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 return <string_literal> + foo + <string_literal> + body + <string_literal> ; } \n \t2 public void read ( string body , @ x <identifiersep> path ( <string_literal> ) string foo ) { \n \t3 this . foo = foo ; \n \t3 this . body = body ; \n <ect>
\t6 return result . get <identifiersep> result ( ) ; \n \t5 } else { \n \t6 logger . warn ( <string_literal> , container . get <identifiersep> uuid ( ) ) ; } \n \t4 } else { \n <ect>
\t1 public items <identifiersep> vo do <identifiersep> create <identifiersep> items <identifiersep> table <identifiersep> if <identifiersep> not ( items <identifiersep> vo vo ) { \n \t2 string sql = string <identifiersep> utils <identifiersep> ext . replace <identifiersep> array <identifiersep> merge ( sql <identifiersep> create <identifiersep> items <identifiersep> table <identifiersep> if <identifiersep> not , \n \t4 new string [ ] { <string_literal> , <string_literal> , <string_literal> , <string_literal> } , \n \t4 new string [ ] { vo . get <identifiersep> items <identifiersep> manage <identifiersep> table ( ) , vo . get <identifiersep> colname ( ) , vo . get <identifiersep> coltype ( ) , vo . get <identifiersep> items <identifiersep> manage <identifiersep> table ( ) } ) ; \n <ect>
\t2 if ( aliases . contains ( alias ) ) { \n \t2 if ( file != null ) { \n \t3 is <identifiersep> empty <identifiersep> table = false ; \n \t2 } else { \n <ect>
\t5 harvested <identifiersep> collection <identifiersep> service . update ( context , hc ) ; \n \t5 context . restore <identifiersep> auth <identifiersep> system <identifiersep> state ( ) ; \n \t5 context . complete ( ) ; \n \t4 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t3 string url = configuration <identifiersep> service . get <identifiersep> property ( rest <identifiersep> rpt <identifiersep> url + report <identifiersep> nickname ) ; \n \t3 log . info ( string . format ( <string_literal> , report <identifiersep> nickname , url ) ) ; \n \t3 if ( ! url . is <identifiersep> empty ( ) ) { \n \t4 uri = uri <identifiersep> info . get <identifiersep> base <identifiersep> uri <identifiersep> builder ( ) . path ( url ) . build ( <string_literal> ) ; \n <ect>
\t1 private void load <identifiersep> multi ( line <identifiersep> input <identifiersep> stream input , map < string , object > hm , boolean as <identifiersep> string ) throws io <identifiersep> exception { \n \t2 while ( true ) { \n \t3 string line = input . read <identifiersep> line ( ) ; \n <ect>
\t2 for ( ; ; ) { \n \t3 t = recorded <identifiersep> exceptions . poll ( ) ; \n \t3 if ( t == null ) { \n \t4 break ; } \n <ect>
\t1 advance <identifiersep> dump <identifiersep> dir ( ) ; \n \t1 run ( <string_literal> + db <identifiersep> name , driver ) ; \n \t1 string repl <identifiersep> dump <identifiersep> locn = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 string repl <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t5 throw new unrecognizable <identifiersep> service <identifiersep> for <identifiersep> service <identifiersep> ticket <identifiersep> validation <identifiersep> exception ( service <identifiersep> ticket . get <identifiersep> service ( ) ) ; } } \n \t3 final service selected <identifiersep> service = resolve <identifiersep> service <identifiersep> from <identifiersep> authentication <identifiersep> request ( service <identifiersep> ticket . get <identifiersep> service ( ) ) ; \n \t3 logger . debug ( <string_literal> , selected <identifiersep> service ) ; \n \t3 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( selected <identifiersep> service ) ; \n <ect>
\t3 if ( ! chain . get <identifiersep> chain <identifiersep> head ( ) . get <identifiersep> header ( ) . get <identifiersep> hash ( ) . equals ( block . hash <identifiersep> chain <identifiersep> tip <identifiersep> after <identifiersep> block ) ) { \n \t4 log . error ( <string_literal> + block . rule <identifiersep> name ) ; \n \t4 fail ( ) ; } \n \t3 if ( chain . get <identifiersep> chain <identifiersep> head ( ) . get <identifiersep> height ( ) != block . height <identifiersep> after <identifiersep> block ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> refresh <identifiersep> policy ( immediate ) . get ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> hit <identifiersep> count ( client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> string <identifiersep> query ( <string_literal> ) . field ( <string_literal> ) . field ( <string_literal> ) ) . get ( ) , 1 ) ; \n \t2 assert <identifiersep> hit <identifiersep> count ( client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> string <identifiersep> query ( <string_literal> ) ) . get ( ) , 1 ) ; \n <ect>
\t2 final boolean should <identifiersep> wait = iteration <identifiersep> wait <identifiersep> time > 0 ; \n \t2 final blocking <identifiersep> queue < stream <identifiersep> record < out > > data <identifiersep> channel = new array <identifiersep> blocking <identifiersep> queue < stream <identifiersep> record < out > > ( 1 ) ; \n \t2 <comment> \n \t2 blocking <identifiersep> queue <identifiersep> broker . instance . hand <identifiersep> in ( broker <identifiersep> id , data <identifiersep> channel ) ; \n <ect>
\t2 answer [ ] answers = execute ( ms <identifiersep> peer , agent <identifiersep> id , cmds , true ) ; \n \t2 if ( answers == null ) { \n \t3 throw new agent <identifiersep> unavailable <identifiersep> exception ( agent <identifiersep> id ) ; } \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 final set < string > values = org . springframework . util . string <identifiersep> utils . comma <identifiersep> delimited <identifiersep> list <identifiersep> to <identifiersep> set ( acr ) ; \n \t2 if ( values . is <identifiersep> empty ( ) ) { \n <ect>
\t4 class < ? > upload <identifiersep> handler <identifiersep> class = class . for <identifiersep> name ( upload <identifiersep> handler <identifiersep> name ) ; \n \t4 if ( i <identifiersep> cms <identifiersep> post <identifiersep> upload <identifiersep> dialog <identifiersep> handler . class . is <identifiersep> assignable <identifiersep> from ( upload <identifiersep> handler <identifiersep> class ) ) { \n \t5 m <identifiersep> upload <identifiersep> handler = ( i <identifiersep> cms <identifiersep> post <identifiersep> upload <identifiersep> dialog <identifiersep> handler ) ( upload <identifiersep> handler <identifiersep> class . new <identifiersep> instance ( ) ) ; \n \t4 } else { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 assert <identifiersep> that ( search <identifiersep> response . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 3l ) ) ; \n \t2 assert <identifiersep> that ( search <identifiersep> response . get <identifiersep> hits ( ) . get <identifiersep> at ( 0 ) . get <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 assert <identifiersep> that ( search <identifiersep> response . get <identifiersep> hits ( ) . get <identifiersep> at ( 1 ) . get <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 assert <identifiersep> that ( search <identifiersep> response . get <identifiersep> hits ( ) . get <identifiersep> at ( <number_literal> ) . get <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n <ect>
\t3 <comment> \n \t3 if ( ! lifecycle <identifiersep> state . destroying . equals ( child . get <identifiersep> state ( ) ) ) { \n \t4 child . destroy ( ) ; } \n \t2 } catch ( lifecycle <identifiersep> exception e ) { \n <ect>
\t3 return to <identifiersep> hex <identifiersep> string ( digest . digest ( data . get <identifiersep> bytes ( ) ) ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception ex ) \n \t2 { \n \t3 <comment> \n <ect>
\t4 for component <identifiersep> host in component <identifiersep> hosts : \n \t4 component <identifiersep> host <identifiersep> name = component <identifiersep> host [ <string_literal> ] [ <string_literal> ] \n \t4 component <identifiersep> host <identifiersep> names . add ( component <identifiersep> host <identifiersep> name ) \n \t3 component <identifiersep> host <identifiersep> names <identifiersep> string = <string_literal> . join ( sorted ( component <identifiersep> host <identifiersep> names ) ) \n <ect>
\t4 s <identifiersep> logger . warn ( warning + <string_literal> + old <identifiersep> current <identifiersep> bytes <identifiersep> sent + <string_literal> + new <identifiersep> current <identifiersep> bytes <identifiersep> sent + <string_literal> ) ; \n \t4 user <identifiersep> stats . set <identifiersep> net <identifiersep> bytes <identifiersep> sent ( old <identifiersep> net <identifiersep> bytes <identifiersep> sent + old <identifiersep> current <identifiersep> bytes <identifiersep> sent ) ; } \n \t3 user <identifiersep> stats . set <identifiersep> current <identifiersep> bytes <identifiersep> received ( new <identifiersep> current <identifiersep> bytes <identifiersep> received ) ; \n \t3 if ( old <identifiersep> current <identifiersep> bytes <identifiersep> received > new <identifiersep> current <identifiersep> bytes <identifiersep> received ) { \n <ect>
\t5 <comment> \n \t5 new <identifiersep> element . value = new integer32 ( integer . parse <identifiersep> int ( out <identifiersep> matcher . group ( <number_literal> ) . to <identifiersep> string ( ) ) ) ; \n \t5 command command = type <identifiersep> parser . parse <identifiersep> command ( item . get <identifiersep> accepted <identifiersep> command <identifiersep> types ( ) , command <identifiersep> as <identifiersep> string ) ; \n \t5 if ( command == null ) { \n <ect>
\t3 do <identifiersep> send ( status ) ; \n \t3  <identifiersep> accepted <identifiersep> pending . remove ( id ) ; \n \t2 } catch ( i2cp <identifiersep> message <identifiersep> exception ime ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 look <identifiersep> for <identifiersep> work ( processor , zoo . get <identifiersep> children ( path , this ) ) ; \n \t3 } catch ( keeper <identifiersep> exception e ) { \n \t4 log . error ( <string_literal> , e ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 public void deactivate ( ) { \n \t2 <comment> \n \t1 @ override \n \t1 public void fail ( object msg <identifiersep> id ) { \n <ect>
\t4 if ( ++ retries >= <number_literal> ) { \n \t5 throw new io <identifiersep> exception ( <string_literal> + partition <identifiersep> states + <string_literal> \n \t6 + exception . to <identifiersep> string ( ) ) ; \n \t4 } else { \n <ect>
\t2 assert <identifiersep> equals ( expected <identifiersep> migration <identifiersep> realm <identifiersep> key , component . get <identifiersep> config ( ) . get <identifiersep> first ( <string_literal> ) ) ; \n \t2 components = migration <identifiersep> realm . components ( ) . query ( migration , key <identifiersep> provider . class . get <identifiersep> name ( ) , <string_literal> ) ; \n \t2 assert <identifiersep> equals ( 1 , components . size ( ) ) ; } \n \t1 protected void test <identifiersep> ldap <identifiersep> kerberos <identifiersep> migration <identifiersep> <number_literal> <identifiersep> <number_literal> <identifiersep> 0 ( ) { \n <ect>
\t3 } else if ( data <identifiersep> type == integer . class ) { \n \t4 log . debug ( <string_literal> , key ) ; \n \t4 mapping . field ( <string_literal> , <string_literal> ) ; \n \t3 } else if ( data <identifiersep> type == long . class ) { \n <ect>
\t2 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t2 @ override \n \t2 public void run ( ) { \n \t3 <comment> \n <ect>
\t5 c . set <identifiersep> property ( <string_literal> + i , <string_literal> + i ) ; } } \n \t3 node <identifiersep> store . merge ( extra , empty <identifiersep> hook . instance , commit <identifiersep> info . empty ) ; \n \t3 file <identifiersep> store . flush ( ) ; \n \t3 long size1 = file <identifiersep> store . get <identifiersep> stats ( ) . get <identifiersep> approximate <identifiersep> size ( ) ; \n <ect>
\t4 result = false ; } \n \t3 if ( result ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + host . get <identifiersep> id ( ) + <string_literal> + host . get <identifiersep> name ( ) + <string_literal> +  <identifiersep> node <identifiersep> id + <string_literal> ) ; \n \t3 } else { \n <ect>
\t2 map < integer , t > expected = new hash <identifiersep> map < integer , t > ( ) ; \n \t2 try { \n \t3 cn = create <identifiersep> connection ( ) ; \n \t3 prepared <identifiersep> statement = native <identifiersep> sql <identifiersep> statement . prepare ( cn ) ; \n <ect>
\t4 if ( oldest <identifiersep> context != null ) { \n \t5 try { \n \t6 oldest <identifiersep> context . close ( ) ; \n \t5 } catch ( throwable t ) { \n <ect>
\t3 item item = item <identifiersep> registry . get <identifiersep> item ( item <identifiersep> id ) ; \n \t3 item <identifiersep> state = item . get <identifiersep> state ( ) ; \n \t3 logger . debug ( <string_literal> , item <identifiersep> id , item <identifiersep> state ) ; \n \t2 } catch ( item <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t3 if ( ! memory <identifiersep> starved ) { \n \t4 log . warn ( <string_literal> ) ; \n \t4 ns <identifiersep> notification <identifiersep> center . default <identifiersep> center ( ) . post <identifiersep> notification ( new ns <identifiersep> notification ( starved <identifiersep> memory <identifiersep> resolved <identifiersep> notification , this ) ) ; \n \t3 } else { \n <ect>
\t1 @ nonnull \n \t1 private delegatee get <identifiersep> delegatee ( ) { \n \t2 sync <identifiersep> handler handler = sync <identifiersep> manager . get <identifiersep> sync <identifiersep> handler ( sync <identifiersep> name ) ; \n \t2 if ( handler == null ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t3 throw e ; } \n \t3 break ; \n \t2 default : \n \t3 throw e ; } } \n <ect>
\t2 if ( ds . file <identifiersep> exists ( vmdk <identifiersep> full <identifiersep> clone <identifiersep> mode <identifiersep> legacy <identifiersep> pair [ 1 ] ) ) { \n \t3 s <identifiersep> logger . info ( <string_literal> + vmdk <identifiersep> full <identifiersep> clone <identifiersep> mode <identifiersep> legacy <identifiersep> pair [ 1 ] + <string_literal> + vmdk <identifiersep> full <identifiersep> clone <identifiersep> mode <identifiersep> pair [ 1 ] ) ; \n \t3 ds . move <identifiersep> datastore <identifiersep> file ( vmdk <identifiersep> full <identifiersep> clone <identifiersep> mode <identifiersep> legacy <identifiersep> pair [ 1 ] , dc <identifiersep> mo . get <identifiersep> mor ( ) , ds . get <identifiersep> mor ( ) , vmdk <identifiersep> full <identifiersep> clone <identifiersep> mode <identifiersep> pair [ 1 ] , dc <identifiersep> mo . get <identifiersep> mor ( ) , true ) ; } \n \t2 if ( ds . file <identifiersep> exists ( vmdk <identifiersep> linked <identifiersep> clone <identifiersep> mode <identifiersep> legacy <identifiersep> pair [ 1 ] ) ) { \n <ect>
\t2 assert . assert <identifiersep> equals ( test <identifiersep> util . get <identifiersep> error <identifiersep> message <identifiersep> for <identifiersep> known <identifiersep> issue ( <string_literal> ) , http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 int counter = response . read <identifiersep> entity ( int . class ) ; \n \t2 int updated = count <identifiersep> temp <identifiersep> files ( ) ; \n \t2 logger . info ( <string_literal> + beginning ) ; \n <ect>
\t1 public boolean is <identifiersep> vm <identifiersep> mapped <identifiersep> to <identifiersep> default <identifiersep> security <identifiersep> group ( long vm <identifiersep> id ) { \n \t2 user <identifiersep> vm <identifiersep> vo vm =  <identifiersep> user <identifiersep> vm <identifiersep> mgr . get <identifiersep> virtual <identifiersep> machine ( vm <identifiersep> id ) ; \n \t2 security <identifiersep> group default <identifiersep> group = get <identifiersep> default <identifiersep> security <identifiersep> group ( vm . get <identifiersep> account <identifiersep> id ( ) ) ; \n \t2 if ( default <identifiersep> group == null ) { \n <ect>
\t2 delivery <identifiersep> status <identifiersep> message dsm = build <identifiersep> dsm ( ctx , reply <identifiersep> token ) ; \n \t2 garlic <identifiersep> message msg = wrap <identifiersep> dsm ( ctx , skm , dsm ) ; \n \t2 if ( msg == null ) { \n \t3 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 send <identifiersep> message ( multicast <identifiersep> socket , <string_literal> , byebye ) ; \n \t3 send <identifiersep> message ( multicast <identifiersep> socket , <string_literal> , byebye ) ; \n \t3 send <identifiersep> message ( multicast <identifiersep> socket , <string_literal> , byebye ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 process <identifiersep> utxo <identifiersep> message ( ( utx <identifiersep> os <identifiersep> message ) m ) ; \n \t2 } else if ( m instanceof reject <identifiersep> message ) { \n \t3 log . error ( <string_literal> , this , get <identifiersep> peer <identifiersep> version <identifiersep> message ( ) . sub <identifiersep> ver , m ) ; \n \t2 } else { \n <ect>
\t2 sleep ( <number_literal> ) ; \n \t2 int counter = 1 ; \n \t2 for ( ; counter < = <number_literal> ; ++ counter ) { \n \t3 assert <identifiersep> not <identifiersep> null ( consumer . receive ( <number_literal> ) ) ; \n <ect>
\t4 hubot <identifiersep> url = hubot <identifiersep> url <identifiersep> holder . get ( ) ; } \n \t3 if ( strings . is <identifiersep> not <identifiersep> blank ( hubot <identifiersep> url ) ) { \n \t4 log . info ( <string_literal> + hubot <identifiersep> url ) ; \n \t3 } else { \n <ect>
\t2 if ( filter == null && filter <identifiersep> class <identifiersep> name != null && filter <identifiersep> class <identifiersep> name . length ( ) > 0 ) { \n \t3 try { \n \t4 filter = ( filter ) class . for <identifiersep> name ( filter <identifiersep> class <identifiersep> name ) . new <identifiersep> instance ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t7 char c1 = buffer . char <identifiersep> at ( i ) ; \n \t7 if ( c1 == ' ' || c1 == ' \\ f' || c1 == ' \\ t' || c1 == ' \\ r' || c1 == ' \\ n' ) \n \t8 continue ; \n \t7 break ; } \n <ect>
\t4 string users = bobj . get <identifiersep> string <identifiersep> value ( field <identifiersep> name ) ; \n \t4 string levels = bobj . get <identifiersep> string <identifiersep> value ( <string_literal> ) ; \n \t4 boolean allowdeny = ( bobj . get <identifiersep> int <identifiersep> value ( <string_literal> ) == 1 ) ; \n \t4 if ( allowdeny == allow ) { \n <ect>
<comment> \n \t2 if ( ( <string_literal> . equals ( enc ) || <string_literal> . equals ( enc ) || <string_literal> . equals ( enc ) ) \n \t3 && res . contains ( <string_literal> ) ) { \n \t3 selendroid <identifiersep> logger . info ( <string_literal> ) ; \n <ect>
\t1 tree <identifiersep> cache <identifiersep> listener listener = new tree <identifiersep> cache <identifiersep> listener ( ) { \n \t1 public void child <identifiersep> event ( curator <identifiersep> framework client , tree <identifiersep> cache <identifiersep> event event ) throws exception { \n \t2 if ( event . get <identifiersep> type ( ) != type . node <identifiersep> updated ) { \n \t2 return ; } \n <ect>
\t3 { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ; } \n \t3 if ( should <identifiersep> ignore <identifiersep> path ( http <identifiersep> servlet <identifiersep> request ) ) \n \t3 { \n <ect>
\t3 result . ouch3 = ( table <identifiersep> not <identifiersep> found <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> ouch3is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void initialize ( final extension <identifiersep> context context ) { \n <ect>
\t2 titan <identifiersep> blueprints <identifiersep> transaction tx = txs . get ( ) ; \n \t2 if ( tx != null && tx . is <identifiersep> open ( ) ) throw transaction . exceptions . transaction <identifiersep> already <identifiersep> open ( ) ; \n \t2 tx = ( titan <identifiersep> blueprints <identifiersep> transaction ) new <identifiersep> thread <identifiersep> bound <identifiersep> transaction ( ) ; \n \t2 txs . set ( tx ) ; \n <ect>
\t1 environment <identifiersep> context . put <identifiersep> to <identifiersep> properties ( stats <identifiersep> setup <identifiersep> const . do <identifiersep> not <identifiersep> update <identifiersep> stats , stats <identifiersep> setup <identifiersep> const . true ) ; \n \t1 immutable <identifiersep> list <identifiersep> multimap < string , footer <identifiersep> stat <identifiersep> collector > collectors <identifiersep> by <identifiersep> table = multimaps . index ( valid <identifiersep> colectors , footer <identifiersep> stat <identifiersep> collector . simple <identifiersep> name <identifiersep> function ) ; \n \t1 log . debug ( <string_literal> , collectors <identifiersep> by <identifiersep> table . key <identifiersep> set ( ) ) ; \n \t1 if ( collectors <identifiersep> by <identifiersep> table . key <identifiersep> set ( ) . size ( ) < 1 ) { \n <ect>
\t2 boolean is <identifiersep> added = false ; \n \t2 if ( select ( file <identifiersep> resource . get <identifiersep> metadata ( ) ) ) { \n \t3 long total <identifiersep> consecutive <identifiersep> wait = 0 ; \n \t3 while ( queue . offer ( file <identifiersep> resource , 1l , time <identifiersep> unit . seconds ) == false ) { \n <ect>
\t7 external <identifiersep> load <identifiersep> balancer <identifiersep> device <identifiersep> vo lb <identifiersep> appliance = null ; \n \t7 try { \n \t8 lb <identifiersep> appliance = add <identifiersep> external <identifiersep> load <identifiersep> balancer ( physical <identifiersep> network <identifiersep> id , url , username , password , create <identifiersep> lb <identifiersep> answer . get <identifiersep> device <identifiersep> name ( ) , create <identifiersep> lb <identifiersep> answer . get <identifiersep> server <identifiersep> resource ( ) ) ; \n \t7 } catch ( exception e ) { \n <ect>
\t3 flog . error ( <string_literal> ) ; \n \t3 return null ; } \n \t2 string username = host <identifiersep> auth . get ( <string_literal> ) ; \n \t2 if ( username == null ) { \n <ect>
\t3 byte msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply ; \n \t3 org . apache . thrift . t <identifiersep> serializable msg ; \n \t3 close <identifiersep> conditional <identifiersep> writer <identifiersep> result result = new close <identifiersep> conditional <identifiersep> writer <identifiersep> result ( ) ; \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t2 assert <identifiersep> that ( search <identifiersep> response . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 3l ) ) ; \n \t2 assert <identifiersep> that ( search <identifiersep> response . get <identifiersep> hits ( ) . get <identifiersep> at ( 0 ) . get <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 assert <identifiersep> that ( search <identifiersep> response . get <identifiersep> hits ( ) . get <identifiersep> at ( 1 ) . get <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 assert <identifiersep> that ( search <identifiersep> response . get <identifiersep> hits ( ) . get <identifiersep> at ( <number_literal> ) . get <identifiersep> id ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n <ect>
\t3 cuboid <identifiersep> hll <identifiersep> map . get ( i ) . write <identifiersep> registers ( value <identifiersep> buf ) ; \n \t3 value <identifiersep> buf . flip ( ) ; \n \t3 mos . write ( batch <identifiersep> constants . cfg <identifiersep> output <identifiersep> statistics , new long <identifiersep> writable ( i ) , new bytes <identifiersep> writable ( value <identifiersep> buf . array ( ) , value <identifiersep> buf . limit ( ) ) , statistics <identifiersep> file <identifiersep> name ) ; } } \n \t1 private void log <identifiersep> mapper <identifiersep> and <identifiersep> cuboid <identifiersep> statistics ( list < long > all <identifiersep> cuboids ) throws io <identifiersep> exception { \n <ect>
\t3 t ch = dc . get <identifiersep> declared <identifiersep> constructor ( device <identifiersep> feature . class ) . new <identifiersep> instance ( f ) ; \n \t3 ch . set <identifiersep> parameters ( params ) ; \n \t3 return ch ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 env . put ( context . provider <identifiersep> url , ldap <identifiersep> url ) ; \n \t1 env . put ( context . security <identifiersep> authentication , <string_literal> ) ; \n \t1 env . put ( context . security <identifiersep> credentials , password ) ; \n \t1 env . put ( context . security <identifiersep> principal , principal ) ; \n <ect>
\t1 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n \t1 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t1 migrationresult . set <identifiersep> error ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 jaxb <identifiersep> schemas . put ( xsd <identifiersep> name , schema ) ; \n \t2 } else if ( log <identifiersep> xsd ) { \n \t2 log . info ( <string_literal> + xsd <identifiersep> name + <string_literal> + file . get <identifiersep> absolute <identifiersep> path ( ) + <string_literal> ) ; } } \n \t1 } else if ( log <identifiersep> xsd ) { \n <ect>
\t2 int x = ( type == xsd <identifiersep> double ) \n \t3 ? ( int ) bits <identifiersep> long . unpack ( v2 , <number_literal> , <number_literal> ) <comment> \n \t3 : ( int ) bits <identifiersep> long . unpack ( v2 , <number_literal> , <number_literal> ) ; <comment> \n \t2 if ( x != 0 ) \n <ect>
\t6 logger . debug ( <string_literal> , \n \t8 execution <identifiersep> id , response . get <identifiersep> took ( ) . get <identifiersep> millis ( ) ) ; } } \n \t4 @ override \n \t4 public void after <identifiersep> bulk ( long execution <identifiersep> id , bulk <identifiersep> request request , throwable failure ) { \n <ect>
\t5 result . from <identifiersep> byte <identifiersep> array ( decoded ) ; \n \t5 return result ; \n \t4 } catch ( data <identifiersep> format <identifiersep> exception dfe ) { \n \t5 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 running <identifiersep> instance . set <identifiersep> ip <identifiersep> address ( strings . empty <identifiersep> to <identifiersep> null ( input . get <identifiersep> display <identifiersep> public <identifiersep> address ( ) ) ) ; \n \t2 running <identifiersep> instance . set <identifiersep> private <identifiersep> dns <identifiersep> name ( input . get <identifiersep> display <identifiersep> private <identifiersep> dns <identifiersep> name ( ) ) ; \n \t2 running <identifiersep> instance . set <identifiersep> private <identifiersep> ip <identifiersep> address ( strings . empty <identifiersep> to <identifiersep> null ( input . get <identifiersep> display <identifiersep> private <identifiersep> address ( ) ) ) ; \n \t2 if ( input . get <identifiersep> boot <identifiersep> record ( ) == null || input . get <identifiersep> boot <identifiersep> record ( ) . get <identifiersep> architecture ( ) == null ) { \n <ect>
\t8 add <identifiersep> comma = true ; } } \n \t6 <comment> \n \t6 if ( decoded <identifiersep> token . length ( ) > 0 ) { \n \t7 parsed <identifiersep> word word = parse <identifiersep> token ( orig <identifiersep> token , decoded <identifiersep> token , dont <identifiersep> like <identifiersep> orig <identifiersep> token , could <identifiersep> be <identifiersep> identifier ) ; \n <ect>
\t2 search <identifiersep> criteria < network <identifiersep> aclvo > sc = search <identifiersep> builder . create ( ) ; \n \t2 sc . set <identifiersep> parameters ( <string_literal> , vpc <identifiersep> ids . to <identifiersep> array ( ) ) ; \n \t2 list < network <identifiersep> aclvo > acls =  <identifiersep> network <identifiersep> acl <identifiersep> dao . search ( sc , null ) ; \n \t2 if ( acls == null || acls . size ( ) == 0 ) { \n <ect>
\t1 protected void run <identifiersep> task ( keycloak <identifiersep> session session ) { \n \t2 session . get <identifiersep> transaction <identifiersep> manager ( ) . begin ( ) ; \n \t2 task . run ( session ) ; \n \t2 session . get <identifiersep> transaction <identifiersep> manager ( ) . commit ( ) ; \n <ect>
\t2 long duration <identifiersep> ms = time <identifiersep> unit . milliseconds . convert ( duration , unit ) ; \n \t2 long elapsed <identifiersep> ms ; \n \t2 file log <identifiersep> file = new file ( homedir + file . separator + <string_literal> + file . separator \n \t4 + <string_literal> + file . separator + <string_literal> ) ; \n <ect>
\t3 details . add ( config <identifiersep> item . get <identifiersep> info ( ) + ( result . is <identifiersep> success ( ) ? <string_literal> : <string_literal> ) + result . get <identifiersep> details ( ) ) ; \n \t3 final <identifiersep> result = result . is <identifiersep> success ( ) ; } \n \t2 <comment> \n \t2 if ( cmd . get <identifiersep> answers <identifiersep> count ( ) != results . size ( ) ) { \n <ect>
\t3 tserver . add <identifiersep> new <identifiersep> log <identifiersep> marker ( alog ) ; \n \t3 while ( ! next <identifiersep> log . offer ( alog , <number_literal> , time <identifiersep> unit . hours ) ) { \n \t3 log . info ( <string_literal> , file <identifiersep> name ) ; } \n \t2 } catch ( exception t ) { \n <ect>
\t1 public void test <identifiersep> reprojection ( ) { \n \t2 string path = <string_literal> ; \n \t2 document doc = get <identifiersep> as <identifiersep> dom ( path ) ; \n \t2 if ( print <identifiersep> doc ) { \n <ect>
\t3 logger . info ( <string_literal> , primary . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> name ( ) ) ; \n \t3 update <identifiersep> index <identifiersep> settings ( index , settings . builder ( ) . put ( <string_literal> , primary . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> name ( ) ) ) ; \n \t3 ensure <identifiersep> green ( index ) ; \n \t3 n <identifiersep> updates = random <identifiersep> int <identifiersep> between ( min <identifiersep> updates , max <identifiersep> updates ) ; \n <ect>
\t4 ini <identifiersep> role ( m <identifiersep> cms , ou , m <identifiersep> role , log ) ; \n \t4 m <identifiersep> role . select ( cms <identifiersep> role . editor . for <identifiersep> org <identifiersep> unit ( ou ) ) ; \n \t4 m <identifiersep> selfmanagement . set <identifiersep> value ( new boolean ( true ) ) ; } \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t4 if ( key != null && key . expired ( get <identifiersep> expire ( ) ) ) \n \t5 remove <identifiersep> frag <identifiersep> collection ( key ) ; } \n \t2 } catch ( exception x ) { \n \t3 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t4 ldap <identifiersep> user ldap <identifiersep> user = null ; \n \t4 try { \n \t5 ldap <identifiersep> user =  <identifiersep> ldap <identifiersep> manager . get <identifiersep> user ( admin , type , get <identifiersep> ldap <identifiersep> domain ( ) , domain <identifiersep> id ) ; \n \t4 } catch ( no <identifiersep> ldap <identifiersep> user <identifiersep> matching <identifiersep> query <identifiersep> exception e ) { \n <ect>
\t4 try { \n \t5 deserialize <identifiersep> queue . multi <identifiersep> consume <identifiersep> batch <identifiersep> when <identifiersep> available <identifiersep> with <identifiersep> callback ( this ) ; \n \t4 } catch ( throwable e ) { \n \t5 if ( ! task <identifiersep> status . is <identifiersep> shutdown ( ) ) { \n <ect>
\t4 log . debug ( <string_literal> ) ; \n \t4 aborted . set ( true ) ; } \n \t2 } . start ( ) ; \n \t2 <comment> \n <ect>
\t2  <identifiersep> instance = configs . get ( <string_literal> ) ; \n \t2 if (  <identifiersep> instance == null ) { \n \t3  <identifiersep> instance = <string_literal> ; } \n \t2  <identifiersep> node <identifiersep> id = management <identifiersep> server <identifiersep> node . get <identifiersep> management <identifiersep> server <identifiersep> id ( ) ; \n <ect>
\t1 try { \n \t1 object <identifiersep> name = new object <identifiersep> name ( <string_literal> + server <identifiersep> name \n \t2 + <string_literal> + thread <identifiersep> name ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 <comment> \n \t5 forward <identifiersep> all <identifiersep> acks ( journal <identifiersep> to <identifiersep> advance , journal <identifiersep> logs <identifiersep> referenced ) ; \n \t5 forwarded = true ; \n \t4 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 if ( ! success ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> + pool + <string_literal> + cluster <identifiersep> id ) ; \n \t3  <identifiersep> storage <identifiersep> pool <identifiersep> dao . expunge ( pool . get <identifiersep> id ( ) ) ; \n \t3 return null ; } \n <ect>
\t5 logger . debug ( <string_literal> + zb <identifiersep> response . get <identifiersep> message ( ) ) ; \n \t5 publish <identifiersep> events ( zb <identifiersep> response ) ; } \n \t4 zibase . host <identifiersep> unregistering ( listener <identifiersep> host , listener <identifiersep> port ) ; \n \t3 } catch ( socket <identifiersep> exception ex ) { \n <ect>
\t1 try { \n \t1 tokens = <string_literal> + llap <identifiersep> token <identifiersep> checker . get <identifiersep> llap <identifiersep> tokens ( user <identifiersep> group <identifiersep> information . get <identifiersep> current <identifiersep> user ( ) , null ) ; \n \t1 } catch ( exception e ) { \n \t1 tokens = <string_literal> + e . get <identifiersep> message ( ) ; } \n <ect>
\t3 vm <identifiersep> template <identifiersep> vo tmpl = adapter . create ( tmpl <identifiersep> profile ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> + host <identifiersep> id + <string_literal> + tmpl . get <identifiersep> id ( ) ) ; \n \t3 return tmpl ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 return new org . apache . thrift . async . async <identifiersep> method <identifiersep> callback < void > ( ) { \n \t2 public void on <identifiersep> complete ( void o ) { } \n \t2 public void on <identifiersep> error ( java . lang . exception e ) { \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t2 this . plugin = plugin ; } \n \t1 @ subscribe \n \t1 public void display <identifiersep> message ( final erlide <identifiersep> message emsg ) { \n \t2 if ( plugin . get <identifiersep> bundle ( ) . get <identifiersep> state ( ) != bundle . stopping ) { \n <ect>
\t3 if ( existing != null ) { \n \t4 if ( ! force <identifiersep> ingest ) { \n \t5 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + cube . get <identifiersep> name ( ) ) ; \n \t4 } else { \n <ect>
\t3 for ( content <identifiersep> packet <identifiersep> extension c : answer ) \n \t4 set <identifiersep> senders ( get <identifiersep> media <identifiersep> type ( c ) , c . get <identifiersep> senders ( ) ) ; } \n \t2 catch ( exception exc ) \n \t2 { \n <ect>
\t1 <comment> \n \t1 if ( long <identifiersep> polling <identifiersep> transport . is <identifiersep> cancelled ( ) ) { \n \t1 boolean success = transmit <identifiersep> to <identifiersep> socket ( web <identifiersep> socket <identifiersep> channel , bus <identifiersep> tools <identifiersep> cli . encode <identifiersep> messages ( tx <identifiersep> messages ) ) ; \n \t1 if ( ! success ) { \n <ect>
\t5 log . debug ( <string_literal> + \n \t6 <string_literal> + node <identifiersep> id + <string_literal> + msg + ' ] ' ) ; } \n \t3 catch ( grid <identifiersep> topology <identifiersep> exception ignored ) { \n <ect>
\t3 if ( p == null ) { \n \t4 try { \n \t5 p = framework . new <identifiersep> class <identifiersep> instance ( processor . class , a ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 if ( cms <identifiersep> string <identifiersep> util . is <identifiersep> not <identifiersep> empty <identifiersep> or <identifiersep> whitespace <identifiersep> only ( creation <identifiersep> sitemap ) ) { \n \t3 try { \n \t4 path = cms . read <identifiersep> folder ( creation <identifiersep> sitemap ) . get <identifiersep> root <identifiersep> path ( ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t1 class host <identifiersep> collector extends managed <identifiersep> context <identifiersep> runnable { \n \t2 @ override \n \t2 protected void run <identifiersep> in <identifiersep> context ( ) { \n \t3 try { \n <ect>
\t4  <identifiersep> log . debug ( <string_literal> + url + <string_literal> + out . size ( ) ) ; \n \t3 return out . to <identifiersep> byte <identifiersep> array ( ) ; \n \t2 } else { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 if ( validator instanceof validator ) { \n \t3 <comment> \n \t3 validator spring <identifiersep> validator = ( validator ) validator ; \n <ect>
\t2 for ( node entry : entries ) { \n \t3 node nid = entry . get <identifiersep> node ( <string_literal> ) ; \n \t3 if ( nid == null ) { \n \t4 if ( log . should <identifiersep> warn ( ) ) \n <ect>
\t2 headers . put ( <string_literal> , camel <identifiersep> test <identifiersep> folder ) ; \n \t2 test <identifiersep> folder = request <identifiersep> body <identifiersep> and <identifiersep> headers ( <string_literal> , null , headers ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , test <identifiersep> folder ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , camel <identifiersep> test <identifiersep> folder , test <identifiersep> folder . get <identifiersep> info ( ) . get <identifiersep> name ( ) ) ; \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t4 if ( resource <identifiersep> worker <identifiersep> slot . get <identifiersep> tasks ( ) . contains ( topology <identifiersep> master <identifiersep> id ) ) { \n \t5 resource <identifiersep> worker <identifiersep> slot . set <identifiersep> mem <identifiersep> size ( tm <identifiersep> worker <identifiersep> mem ) ; } } } \n \t2 ret . add <identifiersep> all ( assignment ) ; \n \t2 log . info ( <string_literal> + keep <identifiersep> assigns ) ; \n <ect>
\t4 { \n \t5 log . debug ( <string_literal> , page <identifiersep> id ) ; } } \n \t3 catch ( exception x ) \n \t3 { \n <ect>
\t5 stubs <identifiersep> output <identifiersep> dir == null - > <string_literal> \n \t5 else - > throw illegal <identifiersep> state <identifiersep> exception ( ) } \n \t4 val module <identifiersep> name = configuration . get ( common <identifiersep> configuration <identifiersep> keys . module <identifiersep> name ) \n \t8 ? : configuration . get ( jvm <identifiersep> configuration <identifiersep> keys . modules ) . or <identifiersep> empty ( ) . join <identifiersep> to <identifiersep> string ( ) \n <ect>
\t3 secretkey , modules ) ; \n \t1 try { \n \t2 set < queue > queues = sets . new <identifiersep> hash <identifiersep> set ( ) ; \n \t2 if ( purge <identifiersep> queues ( queue <identifiersep> name , context ) ) { \n <ect>
\t9 jobstatus = query <identifiersep> async <identifiersep> job <identifiersep> result ( jobid1 ) ; } } \n \t7 s <identifiersep> logger . info ( <string_literal> ) ; } } \n \t4 } else { \n \t5 s <identifiersep> logger . info ( <string_literal> ) ; } } } \n <ect>
\t2 while ( completed <identifiersep> checkpoints . size ( ) > max <identifiersep> number <identifiersep> of <identifiersep> checkpoints <identifiersep> to <identifiersep> retain ) { \n \t3 try { \n \t4 remove <identifiersep> subsumed ( completed <identifiersep> checkpoints . remove <identifiersep> first ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 set <identifiersep> pull <identifiersep> up <identifiersep> resistor <identifiersep> enabled ( tf <identifiersep> config . is <identifiersep> pull <identifiersep> up <identifiersep> resistor <identifiersep> enabled ( ) ) ; \n \t3 logger . debug ( <string_literal> , logger <identifiersep> constants . tfinit , is <identifiersep> pull <identifiersep> up <identifiersep> resistor <identifiersep> enabled ( ) ) ; } \n \t2 m <identifiersep> bricklet <identifiersep> io16 bricklet = get <identifiersep> mbrick ( ) ; \n \t2 if ( bricklet == null ) { \n <ect>
\t2 @ override \n \t2 public void run ( ) { \n \t3 try { \n <ect>
\t2 map < string , string > \t1 values = query <identifiersep> exhibitors ( local <identifiersep> exhibitors ) ; \n \t2 int \t5 count = get <identifiersep> count <identifiersep> from <identifiersep> values ( values ) ; \n \t2 if ( count == 0 ) \n \t2 { \n <ect>
\t1 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 log . error ( <string_literal> + volume <identifiersep> id , e ) ; \n \t1 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> + volume <identifiersep> id ) ; \n \t1 } catch ( transaction <identifiersep> exception e ) { \n <ect>
\t2 return false ; } \n \t1 @ override \n \t1 public boolean is <identifiersep> front <identifiersep> end <identifiersep> alive ( ) { \n \t2 if ( worker <identifiersep> done || system . current <identifiersep> time <identifiersep> millis ( ) - get <identifiersep> client <identifiersep> last <identifiersep> front <identifiersep> end <identifiersep> activity <identifiersep> time ( ) > console <identifiersep> proxy . viewer <identifiersep> linger <identifiersep> seconds * <number_literal> ) { \n <ect>
\t1 private void recover ( ) { \n \t2 try { \n \t3 log . info ( <string_literal> ) ; \n \t3 storm <identifiersep> cluster <identifiersep> state . remove <identifiersep> gray <identifiersep> upgrade <identifiersep> info ( topology <identifiersep> id ) ; \n <ect>
\t1 return true ; } } \n private void verify <identifiersep> access ( final http <identifiersep> servlet <identifiersep> request request , final http <identifiersep> servlet <identifiersep> response response ) { \n \t1 final string resource <identifiersep> uri = get <identifiersep> resource <identifiersep> uri ( request ) ; \n \t1 if ( ! auth <identifiersep> manager . is <identifiersep> authorized ( resource <identifiersep> uri ) ) { \n <ect>
\t2 else { \n \t3 <comment> \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 if ( ! x . is <identifiersep> literal ( ) ) { \n \t3 log . warn ( <string_literal> + list ) ; \n \t3 return null ; } \n \t2 if ( ! spatial <identifiersep> value <identifiersep> util . is <identifiersep> decimal ( x ) ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 if ( s != null ) { \n \t4 try { \n \t5 s . close ( ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 old <identifiersep> part . set <identifiersep> parameters ( part . get <identifiersep> parameters ( ) ) ; \n \t4 msdb . alter <identifiersep> partition ( dbname , name , part . get <identifiersep> values ( ) , old <identifiersep> part ) ; } } \n \t3 msdb . alter <identifiersep> table ( dbname , name , newt ) ; \n \t2 } else { \n <ect>
<comment> \n \t1 @ override \n \t1 public void open ( ) { \n <ect>
\t3 log . info ( <string_literal> , management <identifiersep> naming <identifiersep> strategy ) ; \n \t3 camel <identifiersep> context . get <identifiersep> management <identifiersep> strategy ( ) . set <identifiersep> management <identifiersep> naming <identifiersep> strategy ( management <identifiersep> naming <identifiersep> strategy ) ; } \n \t2 event <identifiersep> factory event <identifiersep> factory = get <identifiersep> single <identifiersep> bean <identifiersep> of <identifiersep> type ( application <identifiersep> context , event <identifiersep> factory . class ) ; \n \t2 if ( event <identifiersep> factory != null ) { \n <ect>
\t4 <comment> \n \t4 throwable t = new throwable ( <string_literal> ) ; \n \t4 stack <identifiersep> trace <identifiersep> element te = t . get <identifiersep> stack <identifiersep> trace ( ) [ 1 ] ; \n \t4 if ( ! ( <string_literal> . equals ( te . get <identifiersep> file <identifiersep> name ( ) ) && <string_literal> . equals ( te . get <identifiersep> method <identifiersep> name ( ) ) ) ) { \n <ect>
\t3 byte <identifiersep> buf . write <identifiersep> byte ( ( byte ) i ) ; } \n \t2 message = new udt <identifiersep> message ( byte <identifiersep> buf ) ; } \n \t1 @ override \n \t1 public void channel <identifiersep> active ( final channel <identifiersep> handler <identifiersep> context ctx ) throws exception { \n <ect>
\t3 } catch ( interrupted <identifiersep> exception e ) { \n \t4 current <identifiersep> thread ( ) . interrupt ( ) ; \n \t4 return failed ( this , name + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 } catch ( execution <identifiersep> exception e ) { \n <ect>
\t6 s <identifiersep> logger . warn ( <string_literal> +  <identifiersep> id ) ; \n \t6  <identifiersep> mgr . disconnect <identifiersep> with <identifiersep> investigation ( direct <identifiersep> agent <identifiersep> attache . this , event . agent <identifiersep> disconnected ) ; \n \t6 return ; } \n <ect>
\t1 @ produces ( <string_literal> ) \n \t1 @ part <identifiersep> type ( <string_literal> ) \n \t1 @ path ( <string_literal> ) \n \t1 public list < context <identifiersep> providers <identifiersep> customer > get <identifiersep> list ( ) { \n <ect>
\t2 scalar <identifiersep> type <identifiersep> wrapper stw = new scalar <identifiersep> type <identifiersep> wrapper ( logical <identifiersep> type , wrapped <identifiersep> type , new attribute <identifiersep> converter <identifiersep> adapter ( converter ) ) ; \n \t2 logger . debug ( <string_literal> , logical <identifiersep> type , persist <identifiersep> type , found <identifiersep> type ) ; \n \t2 add ( stw ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 log . warn ( <string_literal> + path + <string_literal> ) ; \n \t4 return null ; } \n \t3 else { \n \t4 <comment> \n <ect>
\t5 s <identifiersep> logger . error ( <string_literal> ) ; \n \t4 } else { \n \t5 s <identifiersep> logger . info ( <string_literal> ) ; } } \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t4 @ override \n \t4 public void handle <identifiersep> transaction <identifiersep> failure ( security <identifiersep> context security <identifiersep> context , throwable t ) { \n \t5 logger . warn ( <string_literal> , t . get <identifiersep> message ( ) ) ; } \n \t3 } ) ; } \n <ect>
\t1 doc <identifiersep> builder <identifiersep> factory . set <identifiersep> namespace <identifiersep> aware ( true ) ; \n \t1 try { \n \t2 doc <identifiersep> builder <identifiersep> factory . set <identifiersep> x <identifiersep> include <identifiersep> aware ( true ) ; \n \t1 } catch ( unsupported <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t2  <identifiersep> context . message <identifiersep> history ( ) . receive <identifiersep> tunnel <identifiersep> fragment ( message <identifiersep> id , fragment <identifiersep> id , status ) ; } \n \t1 @ override \n \t1 protected void note <identifiersep> completion ( long message <identifiersep> id ) { \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 log . debug ( <string_literal> ) ; \n \t2 ns <identifiersep> array keys = ( ns <identifiersep> array ) d2w <identifiersep> context ( ) . value <identifiersep> for <identifiersep> key ( keys . alternate <identifiersep> key <identifiersep> info ) ; \n <ect>
\t4 kvp . put ( kvp <identifiersep> array [ 0 ] , kvp <identifiersep> array [ 1 ] ) ; } } \n \t2 string redirect <identifiersep> url = response <identifiersep> utils . build <identifiersep> url ( buff . to <identifiersep> string ( ) , http <identifiersep> request . get <identifiersep> path <identifiersep> info ( ) , \n \t4 kvp , null ) ; \n \t2 if ( logger . is <identifiersep> loggable ( level . info ) ) \n <ect>
\t1 try { \n \t1 <comment> \n \t1 partition <identifiersep> names = get <identifiersep> partition <identifiersep> names <identifiersep> by <identifiersep> filter ( db <identifiersep> name , table <identifiersep> name , filter , ascending , max <identifiersep> parts ) ; \n \t1 } catch ( meta <identifiersep> exception e ) { \n <ect>
\t3  <identifiersep> started = ctx . clock ( ) . now ( ) ; } \n \t2 public string get <identifiersep> name ( ) { return <string_literal> ; } \n \t2 public void run <identifiersep> job ( ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 log . warn ( <string_literal> , \n \t5 t , samples , throughput , duration ) ; } \n \t2 if ( log <identifiersep> first <identifiersep> samples ) { \n <ect>
\t2 ajax <identifiersep> web <identifiersep> client client = get <identifiersep> ajax <identifiersep> web <identifiersep> client ( request ) ; \n \t2 string message <identifiersep> ids = <string_literal> ; \n \t2 synchronized ( client ) { \n <ect>
\t2 int request <identifiersep> id = request . get <identifiersep> request <identifiersep> id ( ) ; \n \t2 try { \n \t3 logger . info ( <string_literal> + request <identifiersep> id ) ; \n \t3 async <identifiersep> service . stop <identifiersep> operation ( request <identifiersep> id ) ; \n <ect>
\t3 suitable <identifiersep> pools . add ( pool ) ; \n \t3 if ( suitable <identifiersep> pools . size ( ) == return <identifiersep> up <identifiersep> to ) { \n \t4 break ; } } \n <ect>
\t1 { \n \t2 log . info ( <string_literal> + node <identifiersep> label ( svc ) ) ; \n \t2 dataset <identifiersep> ref s <identifiersep> desc = new dataset <identifiersep> ref ( ) ; \n \t2 s <identifiersep> desc . name = ( ( literal ) get <identifiersep> one ( svc , <string_literal> ) ) . get <identifiersep> lexical <identifiersep> form ( ) ; \n <ect>
\t2 snapshot <identifiersep> descriptor snapshot <identifiersep> descriptor = null ; \n \t2 try { \n \t3 snapshot <identifiersep> descriptor = get <identifiersep> snapshot <identifiersep> descriptor ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
parameters ( dictionary ) : a mapping of script parameter key to value \n host <identifiersep> name ( string ) : the name of this host where the alert is running \n <string_literal> <string_literal> <ect>
\t3 { \n \t4 get <identifiersep> scheduler ( ) . delete <identifiersep> jobs ( job <identifiersep> keys ) ; \n \t3 } catch ( scheduler <identifiersep> exception e ) \n \t3 { \n <ect>
\t3  <identifiersep> runner . do <identifiersep> send ( msg ) ; \n \t3 get <identifiersep> context ( ) . job <identifiersep> queue ( ) . add <identifiersep> job ( new check <identifiersep> lease <identifiersep> request <identifiersep> status ( ) ) ; \n \t2 } catch ( i2cp <identifiersep> message <identifiersep> exception ime ) { \n \t3 get <identifiersep> context ( ) . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , 1 ) ; \n <ect>
\t2 } ) ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> dequeue <identifiersep> count ( ) ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> dispatch <identifiersep> count ( ) ) ; \n \t2 log . info ( <string_literal> , queue <identifiersep> view . get <identifiersep> enqueue <identifiersep> count ( ) ) ; \n <ect>
\t3 task <identifiersep> ses . set <identifiersep> attribute ( arg , i ) ; \n \t2 <comment> \n \t2 task <identifiersep> ses . set <identifiersep> attribute ( arg , val ) ; \n <ect>
\t2 } finally { \n \t2 if ( client != null ) { \n \t3 master <identifiersep> client . close ( client ) ; } } } \n \t1 if ( stats . get <identifiersep> t <identifiersep> server <identifiersep> info <identifiersep> size ( ) < <number_literal> ) { \n <ect>
\t2 } catch ( sql <identifiersep> exception e ) { \n \t3 handle ( sputs ( <string_literal> , key , <string_literal> , entry ) , e ) ; } } \n \t1 private void init <identifiersep> if <identifiersep> needed ( ) { \n \t2 if ( closed ) { \n <ect>
\t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 return queue <identifiersep> view . get <identifiersep> in <identifiersep> flight <identifiersep> count ( ) == 0 ; } \n \t2 } ) ) ; \n <ect>
\t2 conf . set ( dfs <identifiersep> datanode <identifiersep> host <identifiersep> name <identifiersep> key , <string_literal> ) ; \n \t2 conf . set ( dfs <identifiersep> datanode <identifiersep> http <identifiersep> address <identifiersep> key , <string_literal> ) ; } \n \t1 private static configuration start <identifiersep> secure <identifiersep> flink <identifiersep> cluster <identifiersep> with <identifiersep> recovery <identifiersep> mode <identifiersep> enabled ( ) { \n \t2 try { \n <ect>
\t4 if ( is <identifiersep> geo <identifiersep> location <identifiersep> country <identifiersep> rejected ( loc ) ) { \n \t5 logger . warn ( <string_literal> , client <identifiersep> ip ) ; \n \t5 return false ; } \n \t3 } else { \n <ect>
\t3 string expected = long . to <identifiersep> string (  <identifiersep> last <identifiersep> ping ) ; \n \t3 if ( expected . equals ( s ) ) { \n \t4  <identifiersep> last <identifiersep> ping = 0 ; \n \t4 if (  <identifiersep> log . should <identifiersep> info ( ) ) \n <ect>
\t2 db = db <identifiersep> maker . new <identifiersep> file <identifiersep> db ( db <identifiersep> file ) . close <identifiersep> on <identifiersep> jvm <identifiersep> shutdown ( ) . make ( ) ; \n \t2 serializer < map <identifiersep> db <identifiersep> item > serializer = new map <identifiersep> d <identifiersep> bitem <identifiersep> serializer ( ) ; \n \t2 map = db . create <identifiersep> tree <identifiersep> map ( <string_literal> ) . value <identifiersep> serializer ( serializer ) . make <identifiersep> or <identifiersep> get ( ) ; \n \t2 schedule <identifiersep> job ( ) ; \n <ect>
\t5 long [ ] values = new long [ ] { indexer <identifiersep> execution <identifiersep> count <identifiersep> meter . get <identifiersep> count ( ) , \n \t7 indexed <identifiersep> node <identifiersep> count <identifiersep> meter . get <identifiersep> count ( ) } ; \n \t5 return new composite <identifiersep> data <identifiersep> support ( consolidated <identifiersep> type , names , values ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 if ( module <identifiersep> config == null ) { \n \t3 module <identifiersep> config = fake <identifiersep> module <identifiersep> config ; } \n \t2 test <identifiersep> info test <identifiersep> info = check <identifiersep> and <identifiersep> get <identifiersep> test <identifiersep> info ( module <identifiersep> name , path <identifiersep> prefix , test <identifiersep> name , root <identifiersep> config , module <identifiersep> config ) ; \n \t2 if ( test <identifiersep> info != null ) { \n <ect>
\t1 public synchronized void add <identifiersep> pending ( cluster <identifiersep> state state ) { \n \t2 pending <identifiersep> states . add ( new cluster <identifiersep> state <identifiersep> context ( state ) ) ; \n \t2 if ( pending <identifiersep> states . size ( ) > max <identifiersep> queue <identifiersep> size ) { \n \t3 cluster <identifiersep> state <identifiersep> context context = pending <identifiersep> states . remove ( 0 ) ; \n <ect>
\t2 } catch ( j <identifiersep> meter <identifiersep> stop <identifiersep> thread <identifiersep> exception e ) { <comment> \n \t4 log . info ( <string_literal> , get <identifiersep> thread <identifiersep> name ( ) , e . to <identifiersep> string ( ) ) ; } \n \t2 } catch ( exception | j <identifiersep> meter <identifiersep> error e ) { \n <ect>
\t4 coordinate <identifiersep> reference <identifiersep> system source <identifiersep> crs = null ; \n \t4 try { \n \t5 source <identifiersep> crs = crs . decode ( srid , true ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> authority <identifiersep> code <identifiersep> exception e ) { \n <ect>
\t3  <identifiersep> log . error ( <string_literal> , new exception ( ) ) ; \n \t3 return false ; } \n \t2 if ( peer . equals (  <identifiersep> context . router <identifiersep> hash ( ) ) ) { \n \t3 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
@ override \n public void fire <identifiersep> exception ( throwable e ) { \n \t1 log . debug ( e ) ; \n \t1 logs . extreme ( ) . error ( e , e ) ; \n <ect>
\t8 <comment> \n \t8 <comment> \n \t8 <comment> \n \t8 <comment> \n <ect>
\t2 log . error ( prefix + <string_literal> ) ; \n \t2 for ( ability ability : attacker . get <identifiersep> abilities ( ) ) { \n \t3 log . error ( prefix + <string_literal> + ability . to <identifiersep> string ( ) + <string_literal> + ability . get <identifiersep> id ( ) ) ; } \n \t2 if ( blocker != null ) { \n <ect>
\t2 thread = new thread ( new agent <identifiersep> thread <identifiersep> runnable ( ) , <string_literal> \n \t4 + get <identifiersep> grinder <identifiersep> properties ( ) . get <identifiersep> int ( grinder <identifiersep> properties . console <identifiersep> port , 0 ) ) ; \n \t2 thread . set <identifiersep> daemon ( true ) ; \n \t2 thread . start ( ) ; \n <ect>
\t2 version <identifiersep> dao <identifiersep> impl dao = component <identifiersep> locator . inject ( version <identifiersep> dao <identifiersep> impl . class ) ; \n \t2 database <identifiersep> upgrade <identifiersep> checker checker = component <identifiersep> locator . inject ( database <identifiersep> upgrade <identifiersep> checker . class ) ; \n \t2 string version = dao . get <identifiersep> current <identifiersep> version ( ) ; \n \t2 if ( ! version . equals ( <string_literal> ) ) { \n <ect>
\t2 routing <identifiersep> table routing <identifiersep> table = routing <identifiersep> table . builder ( ) \n \t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . build ( ) ; \n \t2 cluster <identifiersep> state cluster <identifiersep> state = cluster <identifiersep> state . builder ( org . elasticsearch . cluster . cluster <identifiersep> name . cluster <identifiersep> name <identifiersep> setting . get <identifiersep> default ( settings . empty ) ) . meta <identifiersep> data ( meta <identifiersep> data ) . routing <identifiersep> table ( routing <identifiersep> table ) . build ( ) ; \n <ect>
\t3 break ; } } \n \t1 if ( ! cancelled <identifiersep> watch ) { \n \t2 boolean valid = watch <identifiersep> key . reset ( ) ; \n \t2 if ( ! valid ) { \n <ect>
\t2 else { \n \t3 catalog <identifiersep> versions . put ( catalog , new <identifiersep> version ) ; \n \t3 string old <identifiersep> version = read <identifiersep> version ( get <identifiersep> file ( catalog ) , <string_literal> ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> blank ( old <identifiersep> version ) ) { \n <ect>
\t2 gpio <identifiersep> pin <identifiersep> binding <identifiersep> config config = new gpio <identifiersep> pin <identifiersep> binding <identifiersep> config ( ) ; \n \t2 <comment> \n \t2 string [ ] properties = binding <identifiersep> config . split ( <string_literal> ) ; \n \t2 if ( properties . length > <number_literal> ) { \n <ect>
\t6 . copy <identifiersep> headers ( stomp <identifiersep> message <identifiersep> handler . this . header <identifiersep> mapper . to <identifiersep> headers ( headers ) ) \n \t6 . build ( ) ; \n \t4 messaging <identifiersep> exception exception = new message <identifiersep> delivery <identifiersep> exception ( failed <identifiersep> message , \n \t6 <string_literal> ) ; \n <ect>
\t4 info <identifiersep> to <identifiersep> send . set <identifiersep> prefetch <identifiersep> size ( 0 ) ; \n \t5 log . debug ( <string_literal> + info <identifiersep> to <identifiersep> send . get <identifiersep> consumer <identifiersep> id ( ) + <string_literal> + consumer <identifiersep> state . get <identifiersep> info ( ) . get <identifiersep> prefetch <identifiersep> size ( ) ) ; } } \n <ect>
\t5 ctrl . get <identifiersep> command <identifiersep> factory <identifiersep> map ( ) . get ( multiple <identifiersep> value <identifiersep> edit <identifiersep> column <identifiersep> command . class . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t3 multiple <identifiersep> value <identifiersep> edit <identifiersep> column <identifiersep> command mvecc = ( multiple <identifiersep> value <identifiersep> edit <identifiersep> column <identifiersep> command ) mfc . create <identifiersep> command ( multi <identifiersep> cell <identifiersep> edit <identifiersep> input , model , workspace ) ; \n \t3 mvecc . do <identifiersep> it ( workspace ) ; \n \t2 } catch ( exception e ) { \n <ect>
public void visit <identifiersep> finder ( visit <identifiersep> context visit <identifiersep> context , \n \t6 record <identifiersep> template parent <identifiersep> resource , \n \t6 finder <identifiersep> schema finder <identifiersep> schema ) \n { \n <ect>
\t4 log . debug ( <string_literal> + display <identifiersep> name <identifiersep> suffix + <string_literal> ) ; \n \t4 result = display <identifiersep> name <identifiersep> suffix ; } } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t5 switch ( code [ pc ++ ] ) { \n \t6 case rule <identifiersep> clause <identifiersep> code . test <identifiersep> bound : \n \t7 ai = code [ pc ++ ] ; \n \t7 if ( deref ( arg <identifiersep> vars [ ai ] ) . is <identifiersep> variable ( ) ) { \n <ect>
\t3 system . set <identifiersep> property ( camel <identifiersep> test <identifiersep> support . route <identifiersep> coverage <identifiersep> enabled , <string_literal> ) ; \n \t3 camel <identifiersep> spring <identifiersep> test <identifiersep> helper . do <identifiersep> to <identifiersep> spring <identifiersep> camel <identifiersep> contexts ( context , new camel <identifiersep> spring <identifiersep> test <identifiersep> helper . do <identifiersep> to <identifiersep> spring <identifiersep> camel <identifiersep> contexts <identifiersep> strategy ( ) { \n \t4 @ override \n \t4 public void execute ( string context <identifiersep> name , spring <identifiersep> camel <identifiersep> context camel <identifiersep> context ) throws exception { \n <ect>
\t6 this . open = false ; \n \t6 throw e ; } \n \t5 retried = true ; \n <ect>
\t3 specified <identifiersep> default <identifiersep> value = <string_literal> , \n \t3 unspecified <identifiersep> default <identifiersep> value = <string_literal> , \n \t3 option <identifiersep> context = <string_literal> ) final boolean halt <identifiersep> on <identifiersep> error ) { \n \t2 final string dialect <identifiersep> name = dialects <identifiersep> map . get <identifiersep> or <identifiersep> default ( dialect . trim ( ) . to <identifiersep> upper <identifiersep> case ( ) , dialect ) ; \n <ect>
\t4 s <identifiersep> logger . error ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + api . get <identifiersep> response <identifiersep> code ( ) + <string_literal> + \n \t5 api . get <identifiersep> url ( ) ) ; \n \t3 } else if ( ( api . get <identifiersep> response <identifiersep> code ( ) == <number_literal> ) && ( api . get <identifiersep> response <identifiersep> type ( ) == response <identifiersep> type . error ) ) { \n \t4 error ++ ; \n <ect>
\t2 if ( string <identifiersep> utils . is <identifiersep> empty ( edition ) ) { \n \t3 logger . error ( <string_literal> ) ; \n \t3 return false ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> empty ( modules ) ) { \n <ect>
\t6 runtime <identifiersep> configuration <identifiersep> view <identifiersep> m <identifiersep> bean . class , false ) ; \n \t2 string prop <identifiersep> of <identifiersep> interest = <string_literal> ; \n \t2 hash <identifiersep> map < string , string > props = new hash <identifiersep> map < string , string > ( ) ; \n \t2 introspection <identifiersep> support . get <identifiersep> properties ( runtime <identifiersep> configuration <identifiersep> view , props , null ) ; \n <ect>
\t2 part = hive <identifiersep> file <identifiersep> format <identifiersep> utils \n \t3 . get <identifiersep> from <identifiersep> path <identifiersep> recursively ( path <identifiersep> to <identifiersep> partition <identifiersep> info , \n \t4 file <identifiersep> path , io <identifiersep> prepare <identifiersep> cache . get ( ) . get <identifiersep> partition <identifiersep> desc <identifiersep> map ( ) ) ; \n \t2 } catch ( assertion <identifiersep> error ae ) { \n <ect>
\t2 int i = reader . read ( ) ; <comment> \n \t2 string t = read <identifiersep> text ( reader ) ; <comment> \n \t2 char [ ] c = read <identifiersep> char <identifiersep> array ( reader ) ; } \n \t1 public void send <identifiersep> text ( string text ) throws io <identifiersep> exception { \n <ect>
\t2 if ( hadoop <identifiersep> shims == null ) { \n \t2 try { \n \t3 hadoop <identifiersep> shims = load <identifiersep> shims ( hadoop <identifiersep> shim <identifiersep> classes , hadoop <identifiersep> shims . class ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t4 return this ; } \n \t3 fml <identifiersep> handshake <identifiersep> message . mod <identifiersep> list client = ( fml <identifiersep> handshake <identifiersep> message . mod <identifiersep> list ) msg ; \n \t3 network <identifiersep> dispatcher dispatcher = ctx . channel ( ) . attr ( network <identifiersep> dispatcher . fml <identifiersep> dispatcher ) . get ( ) ; \n \t3 dispatcher . set <identifiersep> mod <identifiersep> list ( client . mod <identifiersep> list ( ) ) ; \n <ect>
\t6 has <identifiersep> lock = false ; } } \n \t4 catch ( suppress <identifiersep> reply <identifiersep> exception ignore <identifiersep> while <identifiersep> handling <identifiersep> in <identifiersep> progress ) { } \n \t4 catch ( io <identifiersep> exception ignored ) { } \n \t4 if ( ! has <identifiersep> lock ) { \n <ect>
\t3 final reader <identifiersep> iterator < t > reader <identifiersep> iterator = new reader <identifiersep> iterator < t > ( typed <identifiersep> reader , serializer ) ; \n \t3 if ( materializer ) { \n \t4 <comment> \n <ect>
\t1 private void got <identifiersep> channel <identifiersep> open ( ssh <identifiersep> packet buf ) \n \t3 throws connection <identifiersep> exception , transport <identifiersep> exception { \n \t2 try { \n \t3 final string type = buf . read <identifiersep> string ( ) ; \n <ect>
\t8 key , blob . get <identifiersep> copy <identifiersep> state ( ) . get <identifiersep> status <identifiersep> description ( ) ) ) ; } \n \t3 log . debug ( <string_literal> , key , \n \t5 blob . get <identifiersep> properties ( ) . get <identifiersep> last <identifiersep> modified ( ) . get <identifiersep> time ( ) , ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) ) ; } \n \t2 catch ( storage <identifiersep> exception e ) { \n <ect>
\t5 file <identifiersep> system . delete ( temp <identifiersep> dir , true ) ; } } } } \n \t1 @ override \n \t1 void prepare <identifiersep> for <identifiersep> write ( string working <identifiersep> dir , boolean is <identifiersep> global ) throws io <identifiersep> exception { \n \t2 if ( ! file <identifiersep> system . exists ( base <identifiersep> path ) ) { \n <ect>
\t2 request . get <identifiersep> access <identifiersep> control <identifiersep> policy ( ) . set <identifiersep> access <identifiersep> control <identifiersep> list ( \n \t3 acl <identifiersep> utils . expand <identifiersep> canned <identifiersep> acl ( request . get <identifiersep> access <identifiersep> control <identifiersep> policy ( ) . get <identifiersep> access <identifiersep> control <identifiersep> list ( ) , bucket <identifiersep> owner <identifiersep> id , object <identifiersep> owner <identifiersep> id ) ) ; \n \t2 if ( request . get <identifiersep> access <identifiersep> control <identifiersep> policy ( ) == null || request . get <identifiersep> access <identifiersep> control <identifiersep> policy ( ) . get <identifiersep> access <identifiersep> control <identifiersep> list ( ) == null ) { \n \t2 <comment> \n <ect>
\t3 <comment> \n \t3 string public <identifiersep> ip = allocated <identifiersep> host . get <identifiersep> public <identifiersep> ip <identifiersep> address ( ) ; \n \t3 if ( public <identifiersep> ip == null ) { \n <ect>
\t6 socket . close ( ) ; } } \n \t3 } finally { \n \t4 s . close ( ) ; } \n \t2 } catch ( io <identifiersep> exception e1 ) { \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 update <identifiersep> stuck <identifiersep> volumes ( ) ; \n \t1 update <identifiersep> stuck <identifiersep> snapshots ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 if ( wo <identifiersep> application . application ( ) instanceof graceful <identifiersep> application ) { \n \t4 ( ( graceful <identifiersep> application ) wo <identifiersep> application . application ( ) ) . graceful <identifiersep> terminate ( ) ; } \n \t2 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t4 new object [ ] { localhost , integer . to <identifiersep> string ( server . get <identifiersep> port ( ) ) } ) ; \n \t1 try { \n \t1 thread . sleep ( 300l ) ; \n \t1 } catch ( interrupted <identifiersep> exception ex ) { \n <ect>
\t2 response . set <identifiersep> result ( sign <identifiersep> cert <identifiersep> response . error <identifiersep> status ) ; \n \t2 response . set <identifiersep> message ( <string_literal> ) ; \n \t2 return response ; } } \n \t1 else { \n <ect>
\t1 public command <identifiersep> type get <identifiersep> command <identifiersep> type ( ) { \n \t2 return command <identifiersep> type . not <identifiersep> in <identifiersep> history ; } \n \t1 @ override \n \t1 public update <identifiersep> container do <identifiersep> it ( final workspace workspace ) throws command <identifiersep> exception { \n <ect>
\t5 { \n \t6 logger . warn ( <string_literal> + def . get <identifiersep> url ( ) + <string_literal> , ve ) ; } \n \t5 catch ( exception ex ) \n \t5 { \n <ect>
\t7 if ( ! is <identifiersep> echo ( item <identifiersep> name , new <identifiersep> state . to <identifiersep> string ( ) ) ) { \n \t8 context . get <identifiersep> event <identifiersep> publisher ( ) . post <identifiersep> update ( item <identifiersep> name , new <identifiersep> state ) ; \n \t8 logger . debug ( <string_literal> , item <identifiersep> name , new <identifiersep> state ) ; } \n \t6 } else { \n <ect>
\t2 { \n \t3 undo . redo ( ) ; } \n \t2 catch ( cannot <identifiersep> redo <identifiersep> exception e ) \n \t2 { \n <ect>
\t7 thread . sleep ( er <identifiersep> java <identifiersep> mail . shared <identifiersep> instance ( ) . milli <identifiersep> seconds <identifiersep> wait <identifiersep> if <identifiersep> sender <identifiersep> overflowed ( ) ) ; } \n \t6 catch ( interrupted <identifiersep> exception ie ) { \n \t7 log . warn ( <string_literal> , ie ) ; } } } } } \n \t2 catch ( messaging <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private word transform <identifiersep> word <identifiersep> to <identifiersep> en <identifiersep> base <identifiersep> form ( string word <identifiersep> minus <identifiersep> flection <identifiersep> ending , string flection <identifiersep> ending , word word ) { \n <ect>
\t3 string topology <identifiersep> id = get <identifiersep> topology <identifiersep> id ( topology <identifiersep> name ) ; \n \t3 storm <identifiersep> cluster <identifiersep> state cluster <identifiersep> state = data . get <identifiersep> storm <identifiersep> cluster <identifiersep> state ( ) ; \n \t3 storm <identifiersep> base storm <identifiersep> base = cluster <identifiersep> state . storm <identifiersep> base ( topology <identifiersep> id , null ) ; \n \t3 if ( ! storm <identifiersep> base . get <identifiersep> status ( ) . get <identifiersep> status <identifiersep> type ( ) . equals ( status <identifiersep> type . upgrading ) ) { \n <ect>
\t4 catch ( interrupted <identifiersep> exception e ) { \n \t5 log . debug ( <string_literal> ) ; \n \t5 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t4 catch ( exception e ) { \n <ect>
\t2 && ! options . get <identifiersep> hive <identifiersep> table <identifiersep> name ( ) . equals ( options . get <identifiersep> table <identifiersep> name ( ) ) ) \n \t2 || ( options . get <identifiersep> hive <identifiersep> partition <identifiersep> key ( ) != null && h <identifiersep> cat <identifiersep> table == null ) \n \t2 || ( options . get <identifiersep> hive <identifiersep> partition <identifiersep> value ( ) != null && h <identifiersep> cat <identifiersep> table == null ) \n \t2 || ( options . get <identifiersep> map <identifiersep> column <identifiersep> hive ( ) . size ( ) > 0 && h <identifiersep> cat <identifiersep> table == null ) ) ) { \n <ect>
\t1 public int force <identifiersep> completion <identifiersep> of <identifiersep> all <identifiersep> groups ( ) { \n \t2 <comment> \n \t2 boolean allow = camel <identifiersep> context . get <identifiersep> status ( ) . is <identifiersep> started ( ) || camel <identifiersep> context . get <identifiersep> status ( ) . is <identifiersep> stopping ( ) ; \n \t2 if ( ! allow ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 query . add <identifiersep> criteria ( criteria . where ( <string_literal> ) . is ( key ) ) ; \n \t3 final write <identifiersep> result res = this . mongo <identifiersep> template . remove ( query , multifactor <identifiersep> authentication <identifiersep> trust <identifiersep> record . class , this . collection <identifiersep> name ) ; \n \t3 logger . info ( <string_literal> , res . get <identifiersep> n ( ) ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t2 { \n \t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> ) ; } \n \t2 pool =  <identifiersep> pool <identifiersep> dao . acquire <identifiersep> in <identifiersep> lock <identifiersep> table ( pool . get <identifiersep> id ( ) ) ; \n \t2 if ( pool == null ) { \n <ect>
\t3 for ( log < t > log : logs ) { \n \t3 writer . write ( log . to <identifiersep> string ( ) ) ; \n \t3 writer . write ( ' \\ n' ) ; } } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 available <identifiersep> supervisors . add ( supervisor ) ; } } \n \t2 return available <identifiersep> supervisors ; } \n \t1 private list < supervisor <identifiersep> info > get <identifiersep> isolation <identifiersep> supervisors ( default <identifiersep> topology <identifiersep> assign <identifiersep> context context ) { \n \t2 list < string > isolation <identifiersep> hosts = ( list < string > ) context . get <identifiersep> storm <identifiersep> conf ( ) . get ( config . isolation <identifiersep> scheduler <identifiersep> machines ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
<comment> \n function init ( ) { \n <ect>
\t3 try { \n \t4 val result = callback . call ( args . arg1 ( ) , args . arg ( <number_literal> ) , args . arg ( <number_literal> ) ) \n \t4 return result . tojstring ( ) \n \t3 } catch ( e : lua <identifiersep> error ) { \n <ect>
\t3 } catch ( exception e ) { \n \t4 logger . error ( <string_literal> , ip + <string_literal> + port , e ) ; } } \n \t2 return new string ( result ) ; } \n \t1 public void status <identifiersep> update <identifiersep> received ( event <identifiersep> object event , string ip , string data ) { \n <ect>
\t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) { \n \t5  <identifiersep> log . info ( <string_literal> + key + <string_literal> + new date ( ls . get <identifiersep> earliest <identifiersep> lease <identifiersep> date ( ) ) ) ; \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t5 cur <identifiersep> size <identifiersep> roll <identifiersep> backups = backup ; } \n \t4 catch ( exception e ) { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t4 log . info ( <string_literal> + rsrc5 ) ; \n \t4 log . info ( <string_literal> + rsrc6 ) ; \n \t4 log . info ( <string_literal> + rsrc7 ) ; \n \t4 log . info ( <string_literal> + rsrc8 ) ; \n <ect>
\t3 mps = ovm <identifiersep> storage <identifiersep> pool ( ) .  <identifiersep> get <identifiersep> all <identifiersep> mount <identifiersep> points ( ) \n \t3 for mount <identifiersep> point in mps : \n \t4 running <identifiersep> pool = join ( mount <identifiersep> point , 'running <identifiersep> pool' ) \n \t4 if not exists ( running <identifiersep> pool ) : \n <ect>
\t2 return plan <identifiersep> id . hash <identifiersep> code ( ) ; } \n \t1 void handle <identifiersep> session <identifiersep> prepared ( stream <identifiersep> session session ) \n \t1 { \n \t2 session <identifiersep> info session <identifiersep> info = session . get <identifiersep> session <identifiersep> info ( ) ; \n <ect>
\t4 default <identifiersep> match = d ; \n \t4 return ; } \n \t3 if ( pat . equals ( bnode ) || pat . equals ( literal ) ) \n \t3 { \n <ect>
\t4 log . error ( <string_literal> ) ; \n \t4 return false ; } \n \t3 if ( first != data [ 0 ] ) \n \t3 { \n <ect>
\t2 properties prop = new properties ( ) ; \n \t2 try { \n \t3 prop . load ( new file <identifiersep> input <identifiersep> stream ( <string_literal> ) ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t3 } else { \n \t4 final local <identifiersep> date <identifiersep> time et <identifiersep> local = date <identifiersep> time <identifiersep> utils . local <identifiersep> date <identifiersep> time <identifiersep> of ( this . ending <identifiersep> date <identifiersep> time ) ; \n \t4 if ( et <identifiersep> local != null ) { \n \t5 if ( local <identifiersep> date <identifiersep> time . now ( ) . is <identifiersep> after ( et <identifiersep> local ) ) { \n <ect>
\t4 break ; } \n \t3 coordinator <identifiersep> action <identifiersep> bean action <identifiersep> bean = new coordinator <identifiersep> action <identifiersep> bean ( ) ; \n \t3 last <identifiersep> action <identifiersep> number ++ ; \n \t3 int timeout = job <identifiersep> bean . get <identifiersep> timeout ( ) ; \n <ect>
\t3 case consumption : \n \t4 try { \n \t5 this . consumption = consumption <identifiersep> config . value <identifiersep> of ( value <identifiersep> str ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 success <identifiersep> doc <identifiersep> ids . add ( new doc <identifiersep> id ( item . get <identifiersep> index ( ) , item . get <identifiersep> type ( ) , item . get <identifiersep> id ( ) ) ) ; } } \n \t1 indexing <identifiersep> listener . on <identifiersep> success ( success <identifiersep> doc <identifiersep> ids ) ; } \n \t1 @ override \n \t1 public void after <identifiersep> bulk ( long execution <identifiersep> id , bulk <identifiersep> request req , throwable e ) { \n <ect>
\t3 return resources ; \n \t2 } catch ( discovered <identifiersep> with <identifiersep> error <identifiersep> exception e ) { \n \t3 throw e ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 s <identifiersep> logger . warn ( <string_literal> + zone <identifiersep> id + <string_literal> + image <identifiersep> store . get <identifiersep> id ( ) ) ; \n \t5 continue ; } \n \t4 <comment> \n \t4 if ( grouping . allocation <identifiersep> state . disabled == zone . get <identifiersep> allocation <identifiersep> state ( ) ) { \n <ect>
\t4 logger . info ( <string_literal> ) ; } \n \t3 return true ; } \n \t2 if ( eventable . get <identifiersep> element ( ) . equal <identifiersep> attributes ( other <identifiersep> element ) ) { \n \t3 if ( logging ) { \n <ect>
\t2 if ( constants . linux ) { \n \t3 try { \n \t4 lib = ( linux <identifiersep> library ) native . load <identifiersep> library ( <string_literal> , linux <identifiersep> library . class ) ; \n \t3 } catch ( unsatisfied <identifiersep> link <identifiersep> error e ) { \n <ect>
\t5 if ( rs != null && rs . first ( ) ) { \n \t6 return rs . get <identifiersep> int ( 1 ) > 0 ; } \n \t5 s <identifiersep> logger . error ( <string_literal> ) ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 long curr <identifiersep> stat = metric . value ; \n \t1 long curr <identifiersep> ms = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 string post <identifiersep> fix = <string_literal> + get <identifiersep> short <identifiersep> description ( ) ; \n \t1 if ( curr <identifiersep> stat > metric . prev <identifiersep> log <identifiersep> value ) { \n <ect>
\t2 if ( existing <identifiersep> pkg != null ) { \n \t3 <comment> \n \t3 action <identifiersep> config existing <identifiersep> action <identifiersep> config = existing <identifiersep> pkg . get <identifiersep> action <identifiersep> configs ( ) . get ( action <identifiersep> name ) ; \n <ect>
\t1 public erx <identifiersep> object <identifiersep> store <identifiersep> coordinator <identifiersep> pool ( int max <identifiersep> object <identifiersep> store <identifiersep> coordinators ) { \n \t2  <identifiersep> max <identifiersep> object <identifiersep> store <identifiersep> coordinators = max <identifiersep> object <identifiersep> store <identifiersep> coordinators ; \n \t2 if (  <identifiersep> max <identifiersep> object <identifiersep> store <identifiersep> coordinators == 0 ) { \n \t3 <comment> \n <ect>
\t2 backend <identifiersep> response = backend <identifiersep> provider . create <identifiersep> bucket ( request ) ; \n \t2 <comment> \n \t2 return bucket <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . transition <identifiersep> bucket <identifiersep> to <identifiersep> state ( bucket , bucket <identifiersep> state . extant ) ; \n \t1 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception e ) { \n <ect>
\t2 string store <identifiersep> name = store <identifiersep> definition . get <identifiersep> name ( ) ; \n \t2 string keys <identifiersep> file <identifiersep> name = in <identifiersep> dir + system . get <identifiersep> property ( <string_literal> ) + store <identifiersep> name + <string_literal> ; \n \t2 file keys <identifiersep> file = new file ( keys <identifiersep> file <identifiersep> name ) ; \n \t2 if ( ! keys <identifiersep> file . exists ( ) ) { \n <ect>
\t1 cluster <identifiersep> user root <identifiersep> user = kdc . get <identifiersep> root <identifiersep> user ( ) ; \n \t1 user <identifiersep> group <identifiersep> information ugi = user <identifiersep> group <identifiersep> information . login <identifiersep> user <identifiersep> from <identifiersep> keytab <identifiersep> and <identifiersep> return <identifiersep> ugi ( \n \t2 root <identifiersep> user . get <identifiersep> principal ( ) , root <identifiersep> user . get <identifiersep> keytab ( ) . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t1 t <identifiersep> socket socket = new t <identifiersep> socket ( hostname , proxy <identifiersep> port ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t7 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t6 if ( field <identifiersep> becomes <identifiersep> shared ) \n \t6 { \n <comment> \n <ect>
\t2 public void run ( ) { \n \t3 try { \n \t3 system . out . println ( run <identifiersep> scan <identifiersep> test ( connector , num <identifiersep> loop , ranges ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 if ( command <identifiersep> cfg != null ) { \n \t3 if ( dst == null && string <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( command <identifiersep> cfg . get <identifiersep> dst ( ) ) ) { \n \t4 dst = e <identifiersep> bus <identifiersep> utils . to <identifiersep> byte ( command <identifiersep> cfg . get <identifiersep> dst ( ) ) ; } \n \t3 if ( dst == null ) { \n <ect>
\t1 try { \n \t2 if ( null != stmt ) { \n \t2 stmt . close ( ) ; } \n \t1 } catch ( exception ex ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void deactivate ( ) { \n <ect>
\t2 private static void sleep ( int second ) \n \t2 { \n \t4 try \n \t4 { \n <ect>
\t4 } catch ( throwable e ) { \n \t5 if ( e instanceof ns <identifiersep> forward <identifiersep> exception ) \n \t6 e = ( ( ns <identifiersep> forward <identifiersep> exception ) e ) . original <identifiersep> exception ( ) ; \n \t5 log . warn ( <string_literal> , e ) ; \n <ect>
\t2 if (  <identifiersep> config <identifiersep> ssl <identifiersep> scr != null ) { \n \t3 s <identifiersep> logger . info ( <string_literal> +  <identifiersep> config <identifiersep> auth <identifiersep> scr ) ; } \n \t2  <identifiersep> config <identifiersep> ip <identifiersep> firewall <identifiersep> scr = script . find <identifiersep> script ( get <identifiersep> default <identifiersep> scripts <identifiersep> dir ( ) , <string_literal> ) ; \n \t2 if (  <identifiersep> config <identifiersep> ip <identifiersep> firewall <identifiersep> scr != null ) { \n <ect>
\t4 return null ; } \n \t4 s <identifiersep> logger . debug ( <string_literal> + vm . to <identifiersep> string ( ) + <string_literal> +  <identifiersep> restart <identifiersep> retry <identifiersep> interval ) ; } \n \t2 } catch ( final insufficient <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t3 boolean result =  <identifiersep> context . get <identifiersep> vim <identifiersep> client ( ) . wait <identifiersep> for <identifiersep> task ( mor <identifiersep> task ) ; \n \t3 if ( result ) { \n \t4  <identifiersep> context . wait <identifiersep> for <identifiersep> task <identifiersep> progress <identifiersep> done ( mor <identifiersep> task ) ; \n \t3 } else { \n <ect>
\t1 public void gc <identifiersep> check <identifiersep> deleted <identifiersep> size ( ) throws exception { \n \t2 log . info ( <string_literal> ) ; \n \t2 blob <identifiersep> store <identifiersep> state state = set <identifiersep> up ( <number_literal> , <number_literal> , <number_literal> ) ; \n \t2 log . info ( <string_literal> , state . blobs <identifiersep> added . size ( ) , state . blobs <identifiersep> added ) ; \n <ect>
\t2 assign <identifiersep> event . set <identifiersep> old <identifiersep> status ( thrift . topology <identifiersep> initial <identifiersep> status <identifiersep> to <identifiersep> storm <identifiersep> status ( status ) ) ; \n \t2 topology <identifiersep> assign . push ( assign <identifiersep> event ) ; \n \t2 boolean is <identifiersep> success = assign <identifiersep> event . wait <identifiersep> finish ( ) ; \n \t2 if ( is <identifiersep> success ) { \n <ect>
\t5 vdi . forget ( conn ) ; } \n \t4 set < pbd > pbds = sr . get <identifiersep> pb <identifiersep> ds ( conn ) ; \n \t4 for ( final pbd pbd : pbds ) { \n <ect>
\t2 test . load ( tx ) ; \n \t2 tx . commit ( ) ; \n \t2 int expected <identifiersep> list <identifiersep> entries = 0 ; \n \t2 int next <identifiersep> sequence <identifiersep> id = 0 ; \n <ect>
\t6 transport = create <identifiersep> transport ( command , endpoint ) ; \n \t6 transport = configure <identifiersep> transport ( transport ) ; \n \t6 transports . put ( endpoint , transport ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 public boolean apply ( void input ) { \n \t5 try { \n \t6 return condition . call ( ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t4 new <identifiersep> request ( this , r ) ; \n \t4 r = queue . poll ( 5l , time <identifiersep> unit . seconds ) ; } \n \t3 close ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
<comment> \n class timeline <identifiersep> metrics <identifiersep> collector implements runnable { \n \t1 @ override \n \t1 public void run ( ) { \n <ect>
\t2 } else { \n \t3 warning ( <string_literal> , \n \t5 service <identifiersep> name , stack <identifiersep> name + <string_literal> + stack <identifiersep> version , cluster <identifiersep> name ) ; } } \n \t2 <comment> \n <ect>
\t1 mssql <identifiersep> test <identifiersep> utils utils = new mssql <identifiersep> test <identifiersep> utils ( ) ; \n \t1 try { \n \t1 utils . drop <identifiersep> table <identifiersep> if <identifiersep> exists ( <string_literal> ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 login . logout ( ) ; \n \t3 <comment> \n \t3 <comment> \n \t3 login = new login <identifiersep> context ( login <identifiersep> context <identifiersep> name , get <identifiersep> subject ( ) ) ; \n <ect>
\t7 api <identifiersep> call <identifiersep> result = inat . add (  <identifiersep> netscaler <identifiersep> service , i <identifiersep> nat <identifiersep> rule ) ; \n \t6 } catch ( nitro <identifiersep> exception e ) { \n \t7 if ( e . get <identifiersep> error <identifiersep> code ( ) != nitro <identifiersep> error . ns <identifiersep> resource <identifiersep> exists ) { \n \t8 throw e ; } } \n <ect>
\t4 log . error ( <string_literal> , ex ) ; \n \t3 } catch ( illegal <identifiersep> access <identifiersep> exception ex ) { \n \t4 log . error ( <string_literal> , ex ) ; \n \t3 } catch ( invocation <identifiersep> target <identifiersep> exception ex ) { \n <ect>
\t2 log . info ( <string_literal> , client <identifiersep> entity . get <identifiersep> properties ( ) ) ; \n \t2 client <identifiersep> entity <identifiersep> set entity <identifiersep> set <identifiersep> with <identifiersep> top = ( client <identifiersep> entity <identifiersep> set ) response <identifiersep> parts . get ( <number_literal> ) . get <identifiersep> body ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( entity <identifiersep> set <identifiersep> with <identifiersep> top ) ; \n \t2 assert <identifiersep> equals ( <number_literal> , entity <identifiersep> set <identifiersep> with <identifiersep> top . get <identifiersep> entities ( ) . size ( ) ) ; \n <ect>
\t2 list < managed <identifiersep> object <identifiersep> reference > mor <identifiersep> array ; \n \t2 try { \n \t3 mor <identifiersep> array = host <identifiersep> datastore <identifiersep> system <identifiersep> mo . get <identifiersep> datastores ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 epf . set <identifiersep> message ( ex . to <identifiersep> string ( ) ) ; \n \t3 epf . set <identifiersep> next <identifiersep> page ( previous <identifiersep> page <identifiersep> from <identifiersep> request ( ) ) ; \n \t3 new <identifiersep> page = ( wo <identifiersep> action <identifiersep> results ) epf ; \n \t2 } catch ( exception other <identifiersep> exception ) { \n <ect>
\t1 public static class hello implements nginx <identifiersep> java <identifiersep> ring <identifiersep> handler { \n \t2 public hello ( ) { \n \t3 runtime . get <identifiersep> runtime ( ) . add <identifiersep> shutdown <identifiersep> hook ( new thread ( ) { \n \t4 public void run ( ) { \n <ect>
\t3 authorized = true ; } \n \t2 if ( ! authorized ) { \n \t3 throw new camel <identifiersep> authorization <identifiersep> exception ( <string_literal> \n <number_literal> + <string_literal> , exchange ) ; } \n <ect>
\t1 private void ensure <identifiersep> rocks <identifiersep> db <identifiersep> is <identifiersep> loaded ( string temp <identifiersep> directory ) throws io <identifiersep> exception { \n \t2 synchronized ( rocks <identifiersep> db <identifiersep> state <identifiersep> backend . class ) { \n \t3 if ( ! rocks <identifiersep> db <identifiersep> initialized ) { \n \t4 final file temp <identifiersep> dir <identifiersep> parent = new file ( temp <identifiersep> directory ) . get <identifiersep> absolute <identifiersep> file ( ) ; \n <ect>
<comment> \n \t1 public boolean contains <identifiersep> transition ( final transitionable <identifiersep> state state , final string transition ) { \n \t2 if ( state == null ) { \n <ect>
\t3 if ( key != null ) { \n \t4 socket <identifiersep> channel ch = ( socket <identifiersep> channel ) key . channel ( ) ; \n \t4 if ( ch != null ) { \n \t5 socket = ch . socket ( ) ; } } \n <ect>
\t2 lock lock = test <identifiersep> connectivity <identifiersep> lock ; \n \t2 if ( lock != null ) { \n \t2 final boolean lock <identifiersep> acquired = lock . try <identifiersep> lock ( ) ; \n \t2 if ( lock <identifiersep> acquired ) { \n <ect>
\t2 <comment> \n \t2 final list < schema <identifiersep> method > methods = app . node <identifiersep> query ( schema <identifiersep> method . class ) . and <identifiersep> name ( key ) . get <identifiersep> as <identifiersep> list ( ) ; \n \t2 if ( methods . is <identifiersep> empty ( ) ) { \n \t3 if ( ! notification <identifiersep> login . equals ( key ) && ! notification <identifiersep> logout . equals ( key ) ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> +  <identifiersep> new <identifiersep> volume1 . get ( ) + <string_literal> +  <identifiersep> linux <identifiersep> vm <identifiersep> id1 . get ( ) ) ; \n \t3 client = new http <identifiersep> client ( ) ; \n \t3 method = new get <identifiersep> method ( url ) ; \n \t3 response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t2 try { \n \t2 if ( cluster . get <identifiersep> service ( service ) != null && ! component . equals ( root <identifiersep> component . ambari <identifiersep> server . name ( ) ) ) { \n \t3 requests . add ( new service <identifiersep> component <identifiersep> host <identifiersep> request ( cluster <identifiersep> name , service , component , host <identifiersep> name , null ) ) ; } \n \t2 } catch ( ambari <identifiersep> exception se ) { \n <ect>
\t2 interceptor . ret <identifiersep> interceptor = new interceptor <identifiersep> adapter ( ) { \n \t3 @ nullable @ override public object on <identifiersep> get ( object key , object val ) { \n \t4 return ( integer ) val + 1 ; } \n \t2 } ; \n <ect>
\t1 public h <identifiersep> kerberos <identifiersep> sasl <identifiersep> thrift <identifiersep> client <identifiersep> factory <identifiersep> impl ( ) { \n \t1 params = ssl <identifiersep> helper . get <identifiersep> tssl <identifiersep> transport <identifiersep> parameters ( ) ; \n \t1 if ( params != null ) { \n \t2 log . debug ( <string_literal> ) ; \n <ect>
\t2 return url <identifiersep> from <identifiersep> path <identifiersep> string ( local <identifiersep> file . to <identifiersep> string ( ) , time <identifiersep> stamp , conf , local <identifiersep> tmp <identifiersep> dir ) ; \n \t1 } else { \n \t2 url = new file ( path ) . to <identifiersep> url ( ) ; } \n \t1 } catch ( exception err ) { \n <ect>
\t3 l . add ( rs <identifiersep> op ) ; \n \t3 if ( rs <identifiersep> op . get <identifiersep> conf ( ) . get <identifiersep> num <identifiersep> reducers ( ) > max <identifiersep> num <identifiersep> reducers ) { \n \t3 max <identifiersep> num <identifiersep> reducers = rs <identifiersep> op . get <identifiersep> conf ( ) . get <identifiersep> num <identifiersep> reducers ( ) ; } } \n \t2 if ( reduce <identifiersep> sink <identifiersep> de <identifiersep> duplication <identifiersep> utils . strict <identifiersep> merge ( c <identifiersep> rs , l . build ( ) ) ) { \n <ect>
\t4 messages <identifiersep> log . info ( <string_literal> ) ; } } \n \t2 catch ( interrupted <identifiersep> exception e ) \n \t2 { \n \t3 thread . interrupted ( ) ; \n <ect>
protected final logger log = \n \t1 logger <identifiersep> factory . get <identifiersep> logger ( get <identifiersep> class ( ) ) ; \n @ override \n public connection <identifiersep> delegate get ( view <identifiersep> context context ) { \n <ect>
\t6 delegate . grails <identifiersep> application = application \n \t6 server = jmx <identifiersep> m <identifiersep> bean <identifiersep> server } } \n \t3 } catch ( e ) { \n \t4 if ( ! environment . is <identifiersep> development <identifiersep> mode ( ) && environment . is <identifiersep> war <identifiersep> deployed ( ) ) { \n <ect>
\t2 log . info ( <string_literal> , task <identifiersep> attempt <identifiersep> id <identifiersep> string ) ; \n \t2 client . retry <identifiersep> submission ( ) ; \n \t2 } else { \n \t2 try { \n <ect>
\t3 private final long requested = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 @ override \n \t3 public void call ( ) throws exception { \n \t3 if ( system . current <identifiersep> time <identifiersep> millis ( ) > requested + ( vm <identifiersep> instances . volatile <identifiersep> state <identifiersep> timeout <identifiersep> sec * 1000l ) ) { \n <ect>
\t3 else { \n \t3 logger . info ( <string_literal> ) ; } } } \n \t2 connection <identifiersep> ambari <identifiersep> database . commit ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t1 if ( db != null ) \n \t2 try { \n \t2 db . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t6 new usage <identifiersep> vm <identifiersep> instance <identifiersep> vo ( usage <identifiersep> types . running <identifiersep> vm , zone <identifiersep> id , event . get <identifiersep> account <identifiersep> id ( ) , vm <identifiersep> id , vm <identifiersep> name , so <identifiersep> id , template <identifiersep> id , hypervisor <identifiersep> type , event . get <identifiersep> create <identifiersep> date ( ) , \n \t8 null ) ; \n \t4 populate <identifiersep> dynamic <identifiersep> compute <identifiersep> offering <identifiersep> details <identifiersep> and <identifiersep> persist ( usage <identifiersep> instance <identifiersep> new , event . get <identifiersep> id ( ) ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 samsung <identifiersep> tv <identifiersep> connection remote <identifiersep> controller = tv <identifiersep> config . get <identifiersep> connection ( ) ; \n \t4 if ( remote <identifiersep> controller != null ) { \n \t5 remote <identifiersep> controller . send ( cmd ) ; } \n \t3 } else { \n <ect>
<comment> \n \t1 @ override \n \t1 public void handle <identifiersep> application <identifiersep> command <identifiersep> request ( serial <identifiersep> message serial <identifiersep> message , int offset , int endpoint ) { \n \t2 logger . trace ( <string_literal> ) ; \n <ect>
\t1 for ( bucket b : result ) { \n \t2 my <identifiersep> bucket <identifiersep> list . get <identifiersep> buckets ( ) . add ( new bucket <identifiersep> list <identifiersep> entry ( b . get <identifiersep> name ( ) , date <identifiersep> formatter . date <identifiersep> to <identifiersep> header <identifiersep> formatted <identifiersep> string ( b . get <identifiersep> creation <identifiersep> date ( ) ) ) ) ; } \n \t1 reply . set <identifiersep> bucket <identifiersep> list ( my <identifiersep> bucket <identifiersep> list ) ; \n \t1 } catch ( amazon <identifiersep> service <identifiersep> exception ex ) { \n <ect>
\t3 <comment> \n \t3 offset <identifiersep> table <identifiersep> offset = read <identifiersep> long ( the <identifiersep> bytes , the <identifiersep> bytes . length - <number_literal> ) ; \n \t3 <comment> \n \t3 if ( num <identifiersep> objects < 1 ) { \n <ect>
\t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t2 wkpp = wrapped <identifiersep> key . wrap <identifiersep> key ( wrapped <identifiersep> dsa <identifiersep> key <identifiersep> pair . get <identifiersep> private ( ) , null , a <identifiersep> label , wrapping <identifiersep> key <identifiersep> pair . get <identifiersep> public ( ) ) ; \n \t2 unwrapped <identifiersep> key = wkpp . unwrap <identifiersep> key ( wrapping <identifiersep> key <identifiersep> pair . get <identifiersep> private ( ) ) ; \n \t2 assert . assert <identifiersep> array <identifiersep> equals ( wrapped <identifiersep> dsa <identifiersep> key <identifiersep> pair . get <identifiersep> private ( ) . get <identifiersep> encoded ( ) , unwrapped <identifiersep> key . get <identifiersep> encoded ( ) ) ; \n <ect>
\t3 || uploaders > upload <identifiersep> limit ) \n \t3 && worst <identifiersep> downloader != null ) \n \t2 { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 } catch ( bad <identifiersep> padding <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( invalid <identifiersep> key <identifiersep> exception e ) { \n <ect>
\t6 logger . error ( message ) ; } } \n \t4 return response . get <identifiersep> swap <identifiersep> is <identifiersep> possible ( ) ; \n \t3 } catch ( uninitialized <identifiersep> message <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
\t3 xml <identifiersep> doc = reader . read ( rd ) ; \n \t3 connection . disconnect ( ) ; \n \t3 rd . close ( ) ; \n \t2 } catch ( final io <identifiersep> exception ioe ) { \n <ect>
\t1 public static void close <identifiersep> socket ( socket s ) { \n \t2 try { \n \t3 s . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 final string username = resolve <identifiersep> username <identifiersep> internal ( principal , service , registered <identifiersep> service ) ; \n \t2 if ( canonicalization <identifiersep> mode == null ) { \n \t3 canonicalization <identifiersep> mode = case <identifiersep> canonicalization <identifiersep> mode . none . name ( ) ; } \n \t2 final string uid = case <identifiersep> canonicalization <identifiersep> mode . value <identifiersep> of ( canonicalization <identifiersep> mode ) . canonicalize ( username . trim ( ) , locale . get <identifiersep> default ( ) ) ; \n <ect>
\t1 @ override \n \t1 public one <identifiersep> time <identifiersep> token get ( final string uid , final integer otp ) { \n \t2 try { \n \t3 final collection < one <identifiersep> time <identifiersep> token > tokens = this . storage . get <identifiersep> if <identifiersep> present ( uid ) ; \n <ect>
\t1 public console <identifiersep> proxy <identifiersep> resource <identifiersep> handler ( ) { } \n \t1 public void handle ( http <identifiersep> exchange t ) throws io <identifiersep> exception { \n \t2 try { \n <ect>
\t1 { \n \t2 try { \n \t3 return get <identifiersep> protected <identifiersep> plugin ( ) . get <identifiersep> width ( get <identifiersep> attachment ( page <identifiersep> name , attachment <identifiersep> name ) , get <identifiersep> x <identifiersep> wiki <identifiersep> context ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 context context = context <identifiersep> util . obtain <identifiersep> context ( http <identifiersep> servlet <identifiersep> request ) ; \n \t3 rest <identifiersep> authentication <identifiersep> service . invalidate <identifiersep> authentication <identifiersep> data ( http <identifiersep> servlet <identifiersep> request , context ) ; \n \t3 context . commit ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 dom <identifiersep> utils . class . get <identifiersep> resource ( <string_literal> ) . to <identifiersep> string ( ) } ; \n \t3 validating <identifiersep> factory . set <identifiersep> attribute ( <string_literal> , schemas ) ; \n \t2 } catch ( exception x ) { \n \t3 <comment> \n <ect>
\t3 if ( row != null ) { \n \t4 row = new pdf <identifiersep> p <identifiersep> row ( row ) ; } \n \t3 rows . add ( row ) ; } } \n \t1 public void init ( ) { \n <ect>
\t4 project <identifiersep> vo project =  <identifiersep> project <identifiersep> dao . find <identifiersep> by <identifiersep> project <identifiersep> account <identifiersep> id ( account . get <identifiersep> id ( ) ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + project + <string_literal> + domain <identifiersep> id + <string_literal> ) ; \n \t4 boolean delete <identifiersep> project =  <identifiersep> project <identifiersep> mgr . delete <identifiersep> project ( get <identifiersep> caller ( ) , call <identifiersep> context . current ( ) . get <identifiersep> calling <identifiersep> user <identifiersep> id ( ) , project ) ; \n \t4 if ( ! delete <identifiersep> project ) { \n <ect>
\t3 if ( tm . get <identifiersep> status ( ) == status . status <identifiersep> active ) commit ( ) ; \n \t3 else tm . rollback ( ) ; } \n \t3 return null ; \n \t2 } finally { \n <ect>
\t3 log . debug ( <string_literal> ) ; \n \t3 log . debug ( <string_literal> , response ) ; \n \t3 send <identifiersep> notification ( event <identifiersep> header , is <identifiersep> initial , request . get <identifiersep> content ( ) ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t3 byte [ ] k = new byte [ ksz ] ; \n \t3 try { \n \t4 cur <identifiersep> page = this . bf . read <identifiersep> multi <identifiersep> page <identifiersep> data ( k , cur <identifiersep> page , page <identifiersep> counter , cur <identifiersep> next <identifiersep> page ) ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t5 else \n \t5 { \n \t6 logger . error ( <string_literal> , res <identifiersep> pack . get <identifiersep> class ( ) . get <identifiersep> name ( ) , res <identifiersep> pack . get <identifiersep> pack <identifiersep> name ( ) ) ; } } } \n \t3 logger . error ( strings . repeat ( <string_literal> , <number_literal> ) ) ; \n <ect>
\t2 if ( m <identifiersep> config . contains <identifiersep> key ( <string_literal> ) ) { \n \t3 string file <identifiersep> name = m <identifiersep> config . get ( <string_literal> ) ; \n \t3 try { \n \t4 device <identifiersep> type <identifiersep> loader . s <identifiersep> instance ( ) . load <identifiersep> device <identifiersep> types <identifiersep> xml ( file <identifiersep> name ) ; \n <ect>
\t2 file temp <identifiersep> dir ; \n \t2 try { \n \t3 temp <identifiersep> dir = new file ( get <identifiersep> basedir ( ) , get <identifiersep> property ( <string_literal> , <string_literal> ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 key <identifiersep> store key <identifiersep> store ; \n \t1 file <identifiersep> input <identifiersep> stream input <identifiersep> stream ; \n \t1 if ( key <identifiersep> store <identifiersep> file . exists ( ) ) { \n \t1 if ( key <identifiersep> store <identifiersep> file . length ( ) > 0 ) { \n <ect>
\t5 send <identifiersep> unicast ( target , buf , offset , length ) ; } \n \t3 catch ( socket <identifiersep> exception sock <identifiersep> ex ) { \n \t4 log . debug ( util . get <identifiersep> message ( <string_literal> ) , local <identifiersep> addr , mbr , sock <identifiersep> ex ) ; } \n \t3 catch ( throwable t ) { \n <ect>
\t2 properties prop = new properties ( ) ; \n \t2 try { \n \t3 prop . load ( new file <identifiersep> input <identifiersep> stream ( <string_literal> ) ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t5 <comment> \n \t4 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n \t5 <comment> \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
try { \n \t1 if ( hive <identifiersep> conf . get <identifiersep> bool <identifiersep> var ( ctx . get <identifiersep> conf ( ) , hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> zookeeper <identifiersep> clean <identifiersep> extra <identifiersep> nodes ) ) { \n \t2 remove <identifiersep> all <identifiersep> redundant <identifiersep> nodes ( ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> finish ( i <identifiersep> test <identifiersep> context context ) { \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t2 throw new routing <identifiersep> exception ( timeout <identifiersep> message <identifiersep> processor , e ) ; } } \n \t1 <comment> \n \t1 synchronized ( groups <identifiersep> lock ) { \n <ect>
\t2 try { \n \t3 <comment> \n \t3 if ( ss . is <identifiersep> stale ( ) ) { \n <ect>
\t1 <comment> \n \t1 public void collapse ( ) { \n \t2 boolean verbose = pag . get <identifiersep> opts ( ) . verbose ( ) ; \n \t2 if ( verbose ) { \n <ect>
\t4 <comment> \n \t4 remove <identifiersep> flag = false ; \n \t4 synchronized ( simple <identifiersep> garbage <identifiersep> collector . this ) { \n \t4 ++ status . current . errors ; } \n <ect>
\t2 output <identifiersep> stream os = get <identifiersep> output <identifiersep> stream ( fs <identifiersep> os <identifiersep> factory , file <identifiersep> resource ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 if ( os == null ) { \n <ect>
\t2 { \n \t3 return store <identifiersep> files . read <identifiersep> store <identifiersep> id ( store <identifiersep> dir ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 ser <identifiersep> refs = bundle <identifiersep> context . get <identifiersep> service <identifiersep> references ( \n \t4 protocol <identifiersep> provider <identifiersep> factory . class . get <identifiersep> name ( ) , osgi <identifiersep> filter ) ; } \n \t2 catch ( invalid <identifiersep> syntax <identifiersep> exception ex ) \n \t2 { \n <ect>
\t5 if ( trace <identifiersep> on ) logger . info ( <string_literal> + tm <identifiersep> frame . goal + <string_literal> ) ; \n \t5 continue main ; \n \t4 } else { \n \t5 <comment> \n <ect>
\t3 { \n \t4 dialog . send <identifiersep> request ( transac ) ; } \n \t3 catch ( sip <identifiersep> exception sex ) \n \t3 { \n <ect>
\t4 string value = ( string ) me . get <identifiersep> value ( ) ; \n \t4 try { \n \t5 temp = temp + <string_literal> + key + <string_literal> + value ; \n \t4 } catch ( exception ex ) { \n <ect>
\t2 try { \n \t3 http <identifiersep> util . execute <identifiersep> url ( <string_literal> , url , timeout ) ; \n \t3 logger . trace ( <string_literal> , pms <identifiersep> ip ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> add <identifiersep> milliseconds <identifiersep> andreturn ( ) { } \n \t1 @ test \n \t1 public void test <identifiersep> compare <identifiersep> to ( ) { \n <ect>
\t5 ( ( bundle ) plugin <identifiersep> table . get <identifiersep> model ( ) \n \t7 . get <identifiersep> value <identifiersep> at ( selected <identifiersep> rows [ i ] , 0 ) ) . start ( ) ; } \n \t4 catch ( bundle <identifiersep> exception ex ) \n \t4 { \n <ect>
\t2 log . warn ( <string_literal> \n \t4 + <string_literal> + retry + <string_literal> ) ; \n \t2 thread . sleep ( retry * 1000l ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t2 for ( mqtt <identifiersep> broker <identifiersep> connection con : broker <identifiersep> connections . values ( ) ) { \n \t3 try { \n \t4 con . start ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 list < keyspace <identifiersep> definition > ks <identifiersep> defs = null ; \n \t1 try { \n \t1 ks <identifiersep> defs = cluster . describe <identifiersep> keyspaces ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 self . logger . debug ( <string_literal> ) \n \t3 host = find <identifiersep> suitable <identifiersep> host <identifiersep> for <identifiersep> migration ( self . api <identifiersep> client , router . id ) \n \t3 if host is not none : \n \t4 migrate <identifiersep> router ( self . api <identifiersep> client , router . id , host . id ) \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t5 last <identifiersep> loaded = last <identifiersep> modified ; } } \n \t3 catch ( throwable t ) \n \t3 { \n \t4 jvm <identifiersep> stability <identifiersep> inspector . inspect <identifiersep> throwable ( t ) ; \n <ect>
\t1 { \n \t2 try { \n \t3 if ( subject . is <identifiersep> variable ( ) ) \n \t3 { \n <ect>
\t3 else if ( start <identifiersep> obj instanceof string ) { \n \t4 try { \n \t5 start = integer . parse <identifiersep> int ( ( string ) start <identifiersep> obj ) ; } \n \t4 catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 return null ; } \n \t1 if ( principal == null || principal . is <identifiersep> empty ( ) || keytab <identifiersep> file == null || keytab <identifiersep> file . is <identifiersep> empty ( ) ) { \n \t1 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t1 final string server <identifiersep> principal = security <identifiersep> util . get <identifiersep> server <identifiersep> principal ( principal , <string_literal> ) ; \n <ect>
\t1 job . set <identifiersep> job <identifiersep> name ( job <identifiersep> name ) ; \n \t1 job . set <identifiersep> output <identifiersep> key <identifiersep> class ( null <identifiersep> writable . class ) ; \n \t1 job . set <identifiersep> output <identifiersep> value <identifiersep> class ( null <identifiersep> writable . class ) ; \n \t1 job . set <identifiersep> jar <identifiersep> by <identifiersep> class ( compactor <identifiersep> mr . class ) ; \n <ect>
\t2 <comment> \n \t1 dialect . get <identifiersep> dialect ( hibernate <identifiersep> util . configuration . get <identifiersep> properties ( ) ) ; \n \t1 return true ; \n \t1 } catch ( throwable ex ) { \n <ect>
\t2 } catch ( throwable t1 ) { \n \t3 try { \n \t4 callback . on <identifiersep> failure ( t1 ) ; \n \t3 } catch ( throwable t2 ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 if ( ! migration <identifiersep> manager . should <identifiersep> pull <identifiersep> schema <identifiersep> from ( endpoint ) ) \n \t2 { \n <ect>
\t2 last <identifiersep> master = ut <identifiersep> master ; } \n \t1 logger . info ( <string_literal> ) ; \n \t1 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t2 ut <identifiersep> master master = create <identifiersep> master ( i + <number_literal> ) ; \n <ect>
\t1 mr . is <identifiersep> empty = true ; \n \t1 stripe <identifiersep> information si = mockito . mock ( stripe <identifiersep> information . class ) ; \n \t1 mockito . when ( si . get <identifiersep> number <identifiersep> of <identifiersep> rows ( ) ) . then <identifiersep> return ( 0l ) ; \n \t1 osm = new orc <identifiersep> stripe <identifiersep> metadata ( stripe <identifiersep> key , mr , si , null , null , null , null ) ; \n <ect>
\t4 name = owner . get <identifiersep> property ( user . name ) ; } \n \t3 tx . success ( ) ; \n \t3 return name ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 if ( lhash != null && rhash != null && ! arrays . equals ( lhash , rhash ) ) \n \t2 { \n \t3 if ( lnode instanceof leaf || rnode instanceof leaf ) \n \t3 { \n <ect>
\t3 logger . error ( <string_literal> , e ) ; \n \t2 } catch ( jaxb <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t2 try { \n \t3 string str = json . get <identifiersep> string ( key ) ; \n \t3 return integer . value <identifiersep> of ( str ) . int <identifiersep> value ( ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception | json <identifiersep> exception e ) { \n <ect>
\t2 abstract <identifiersep> xml <identifiersep> application <identifiersep> context app = new class <identifiersep> path <identifiersep> xml <identifiersep> application <identifiersep> context ( <string_literal> ) ; \n \t2 <comment> \n \t2 log . warn ( <string_literal> ) ; \n \t2 io <identifiersep> helper . close ( app ) ; \n <ect>
<comment> \n public class delete <identifiersep> return <identifiersep> route <identifiersep> message <identifiersep> class extends z <identifiersep> wave <identifiersep> command <identifiersep> processor { \n \t1 private static final logger logger = logger <identifiersep> factory . get <identifiersep> logger ( delete <identifiersep> return <identifiersep> route <identifiersep> message <identifiersep> class . class ) ; \n \t1 public serial <identifiersep> message do <identifiersep> request ( int node <identifiersep> id ) { \n <ect>
\t2 sort <identifiersep> and <identifiersep> save <identifiersep> batch ( ) ; \n \t2 <comment> \n \t2 entry <identifiersep> batch . clear ( ) ; \n \t2 entry <identifiersep> batch . trim <identifiersep> to <identifiersep> size ( ) ; \n <ect>
\t1 for ( spi <identifiersep> ebean <identifiersep> server server : servers ) { \n \t2 try { \n \t2 server . shutdown <identifiersep> managed ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 logger . warn ( <string_literal> ) ; \n \t4 return null ; } \n \t3 switch ( type ) { \n \t4 case <string_literal> : <comment> \n <ect>
\t2 log . debug ( <string_literal> , uuids . get ( 0 ) ) ; \n \t2 return uuids . get ( 0 ) ; } \n \t1 } finally { \n \t1 rollback <identifiersep> and <identifiersep> cleanup ( success , query ) ; } \n <ect>
\t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + arrays . to <identifiersep> string ( big <identifiersep> table <identifiersep> value <identifiersep> column <identifiersep> names ) ) ; \n \t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + arrays . to <identifiersep> string ( big <identifiersep> table <identifiersep> value <identifiersep> type <identifiersep> infos ) ) ; \n \t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + big <identifiersep> table <identifiersep> retained <identifiersep> mapping . to <identifiersep> string ( ) ) ; \n \t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + big <identifiersep> table <identifiersep> outer <identifiersep> key <identifiersep> mapping . to <identifiersep> string ( ) ) ; \n <ect>
\t2 break ; } } \n \t1 log . info ( <string_literal> , count , table <identifiersep> name ) ; \n \t1 if ( table <identifiersep> state . offline != table <identifiersep> state ) { \n \t1 c . table <identifiersep> operations ( ) . online ( table <identifiersep> name , true ) ; \n <ect>
\t2 routing <identifiersep> table initial <identifiersep> routing <identifiersep> table = routing <identifiersep> table . builder ( ) \n \t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . build ( ) ; \n \t2 cluster <identifiersep> state cluster <identifiersep> state = cluster <identifiersep> state . builder ( org . elasticsearch . cluster . cluster <identifiersep> name . cluster <identifiersep> name <identifiersep> setting . get <identifiersep> default ( settings . empty ) ) . meta <identifiersep> data ( meta <identifiersep> data ) . routing <identifiersep> table ( initial <identifiersep> routing <identifiersep> table ) . build ( ) ; \n <ect>
\t3 throw new transaction <identifiersep> in <identifiersep> progress <identifiersep> exception ( <string_literal> ) ; } \n \t2 try { \n \t3 before <identifiersep> end ( ) ; \n \t2 } catch ( transaction <identifiersep> rolled <identifiersep> back <identifiersep> exception can <identifiersep> ocurr <identifiersep> on <identifiersep> failover ) { \n <ect>
\t2 if ( resource <identifiersep> base == null ) { \n \t3 if ( resource <identifiersep> base3 == null ) \n \t4 fuseki . server <identifiersep> log . error ( <string_literal> + resource <identifiersep> base1 + <string_literal> + resource <identifiersep> base2 + <string_literal> ) ; \n \t3 else \n <ect>
\t2 <comment> \n \t2 selenium . browserbot . run <identifiersep> scheduled <identifiersep> pollers ( ) ; \n \t2 try { \n \t3 if ( this . wait <identifiersep> for <identifiersep> condition == null ) { \n <ect>
\t2 boolean target <identifiersep> membership <identifiersep> changed = ! target <identifiersep> members . equals ( this . target <identifiersep> members ) ; \n \t2 this . target <identifiersep> members = new hash <identifiersep> set < > ( target <identifiersep> members ) ; \n \t2 if ( target <identifiersep> membership <identifiersep> changed ) \n \t2 { \n <ect>
<comment> \n <ect>
\t3 if ( hyper <identifiersep> host . is <identifiersep> hyper <identifiersep> host <identifiersep> connected ( ) ) { \n \t4 return new check <identifiersep> health <identifiersep> answer ( cmd , true ) ; } \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
<comment> \n \t1 public void handle ( callback [ ] callbacks ) throws io <identifiersep> exception , unsupported <identifiersep> callback <identifiersep> exception { \n \t2 for ( callback c : callbacks ) { \n \t3 if ( c instanceof name <identifiersep> callback ) { \n <ect>
\t2 for ( table <identifiersep> definition table : database . get <identifiersep> tables ( schema ) ) { \n \t3 try { \n \t4 generate <identifiersep> interface ( table ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 try { \n \t6 str1 = new string ( ca1 , bin <identifiersep> inter <identifiersep> sedes . utf8 ) ; \n \t6 str2 = new string ( ca2 , bin <identifiersep> inter <identifiersep> sedes . utf8 ) ; \n \t5 } catch ( unsupported <identifiersep> encoding <identifiersep> exception uee ) { \n <ect>
\t1 public void test <identifiersep> ended ( ) { \n \t2 sender . test <identifiersep> ended ( ) ; } \n \t1 @ override \n \t1 public void test <identifiersep> started ( string host ) { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 <comment> \n <ect>
\t3 boolean result = false ; \n \t3 try { \n \t4 result = plug <identifiersep> nic ( network , nic <identifiersep> to , vm <identifiersep> to , context , dest ) ; \n \t4 if ( result ) { \n <ect>
\t4 if ( sec <identifiersep> storage <identifiersep> vm <identifiersep> from <identifiersep> stopped <identifiersep> pool ) { \n \t5 destroy <identifiersep> sec <identifiersep> storage <identifiersep> vm ( sec <identifiersep> storage <identifiersep> vm <identifiersep> id ) ; } \n \t3 } else { \n <ect>
\t2 num <identifiersep> threads . increment <identifiersep> and <identifiersep> get ( ) ; \n \t2 int tmp <identifiersep> index = get <identifiersep> write <identifiersep> index ( ) ; <comment> \n \t2 <comment> \n \t2 if ( tmp <identifiersep> index == - 1 ) { \n <ect>
\t6 try { \n \t7 f <identifiersep> dirty <identifiersep> region <identifiersep> queue . wait ( f <identifiersep> delay ) ; \n \t6 } catch ( final interrupted <identifiersep> exception x ) { } } } } \n \t3 if ( i == 0 || is <identifiersep> dirty ) { \n <ect>
\t3 break ; \n \t2 case disconnected : \n \t3 break ; \n \t2 default : \n <ect>
\t3  <identifiersep> multicast <identifiersep> socket . send ( baos . create <identifiersep> datagram <identifiersep> packet ( ) ) ; } } \n \t1 @ override \n \t1 public void leave ( ) throws io <identifiersep> exception { \n <ect>
\t2 if ( last <identifiersep> ip ) { \n \t3 nic . set <identifiersep> secondary <identifiersep> ip ( false ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3  <identifiersep> nic <identifiersep> dao . update ( nic <identifiersep> id , nic ) ; } \n <ect>
\t6 ( t instanceof out <identifiersep> of <identifiersep> memory <identifiersep> error && task <identifiersep> manager <identifiersep> config . should <identifiersep> exit <identifiersep> jvm <identifiersep> on <identifiersep> out <identifiersep> of <identifiersep> memory <identifiersep> error ( ) ) ) { \n \t5 <comment> \n \t5 <comment> \n \t5 try { \n <ect>
\t4 int timeout = <number_literal> * <number_literal> ; \n \t4 pcap pcap = pcap . open <identifiersep> live ( dev . get <identifiersep> name ( ) , snaplen , flags , \n \t6 timeout , err <identifiersep> buf ) ; \n \t4 if ( pcap == null ) { \n <ect>
<comment> \n \t1 public void execute ( ) { \n \t2 order <identifiersep> comparator . sort <identifiersep> if <identifiersep> necessary ( webflow <identifiersep> configurers ) ; \n \t2 webflow <identifiersep> configurers . for <identifiersep> each ( c - > { \n <ect>
\t2 else { \n \t2 break ; } } } \n \t1 logger . debug ( <string_literal> + sline ) ; \n <ect>
\t2 cfg . set <identifiersep> expiration ( expiration ) ; \n \t2 if ( ! settings . is <identifiersep> inbound ( ) ) \n \t3 cfg . set <identifiersep> priority ( settings . get <identifiersep> priority ( ) ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> namespaces ( ) { \n \t2 document doc = get <identifiersep> as <identifiersep> dom ( <string_literal> ) ; \n <ect>
\t3 datagram filename <identifiersep> data = basename <identifiersep> timeline . get <identifiersep> datagram ( unit . start <identifiersep> time ) ; \n \t3 string filename = new string ( filename <identifiersep> data . get <identifiersep> data ( ) , <string_literal> ) ; \n \t3 return filename ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 channels . await <identifiersep> running ( ) ; \n \t5 trigger <identifiersep> connections ( ) ; \n \t5 setup <identifiersep> pinging ( ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t2 logger . debug ( <string_literal> , ticket <identifiersep> id ) ; \n \t2 try { \n \t3 return this . couchbase . get <identifiersep> bucket ( ) . remove ( ticket <identifiersep> id ) != null ; \n \t2 } catch ( final exception e ) { \n <ect>
\t4 <comment> \n \t3 } else { \n \t4 return recv <identifiersep> queue . take ( ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t4 logger . error ( <string_literal> , block <identifiersep> family <identifiersep> factory . get <identifiersep> simple <identifiersep> name ( ) ) ; \n \t4 continue ; } \n \t3 register <identifiersep> block <identifiersep> family <identifiersep> factory register <identifiersep> info = block <identifiersep> family <identifiersep> factory . get <identifiersep> annotation ( register <identifiersep> block <identifiersep> family <identifiersep> factory . class ) ; \n \t3 string id = register <identifiersep> info . value ( ) ; \n <ect>
\t2 set < ss <identifiersep> table <identifiersep> reader > candidates = sets . new <identifiersep> hash <identifiersep> set ( filter <identifiersep> suspect <identifiersep> ss <identifiersep> tables ( uncompacting ) ) ; \n \t2 list < ss <identifiersep> table <identifiersep> reader > compaction <identifiersep> candidates = new array <identifiersep> list < > ( get <identifiersep> next <identifiersep> non <identifiersep> expired <identifiersep> ss <identifiersep> tables ( sets . difference ( candidates , expired ) , gc <identifiersep> before ) ) ; \n \t2 if ( ! expired . is <identifiersep> empty ( ) ) \n \t2 { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t4 create <identifiersep> mode . persistent ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 zk . get <identifiersep> children ( <string_literal> , my <identifiersep> watcher ) ; \n \t2 zk . get <identifiersep> children ( <string_literal> , my <identifiersep> watcher ) ; \n <ect>
<comment> \n \t1 public void clear <identifiersep> unmatched <identifiersep> interests ( ) { \n \t2 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> io , level . info ) ) \n <ect>
\t1 if ( r <identifiersep> proc <identifiersep> local != null ) { \n \t1 log . info ( <string_literal> ) ; \n \t1 r <identifiersep> proc <identifiersep> local . abort ( ) ; \n \t1 } else { \n <ect>
\t6 old <identifiersep> remote <identifiersep> model ) ; \n \t4 return new <identifiersep> model ; } \n \t3 catch ( throwable t ) { \n <ect>
\t1 if ( table <identifiersep> has <identifiersep> primary <identifiersep> key ( table <identifiersep> name , column <identifiersep> name ) ) { \n \t1 string query = dbms <identifiersep> helper . get <identifiersep> drop <identifiersep> primary <identifiersep> key <identifiersep> statement ( convert <identifiersep> object <identifiersep> name ( table <identifiersep> name ) , constraint <identifiersep> name , cascade ) ; \n \t1 execute <identifiersep> query ( query , false ) ; \n \t1 } else { \n <ect>
<comment> \n \t1 public int block <identifiersep> for <identifiersep> writes ( ) \n \t1 { \n \t2 for ( map . entry < table <identifiersep> id , atomic <identifiersep> integer > entry : commit <identifiersep> log <identifiersep> reader . get <identifiersep> invalid <identifiersep> mutations ( ) ) \n <ect>
\t3 if ( unsafe == null ) { \n \t4 logger . debug ( <string_literal> ) ; \n \t4 use <identifiersep> mpsc <identifiersep> chunked <identifiersep> array <identifiersep> queue = false ; \n \t3 } else { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t3 logger . warn ( <string_literal> , p <identifiersep> i <identifiersep> ex . get <identifiersep> message ( ) ) ; \n \t2 } finally { \n \t3 <comment> \n \t3 monitor <identifiersep> session <identifiersep> thread . interrupt ( ) ; \n <ect>
\t2 if ( result != null ) { \n \t3 list < file <identifiersep> info > info = result . get <identifiersep> file ( ) ; \n \t3 for ( file <identifiersep> info fi : info ) { \n \t4 if ( file . get <identifiersep> file <identifiersep> name ( ) . equals ( fi . get <identifiersep> path ( ) ) ) { \n <ect>
\t2 logger . warning ( <string_literal> + curr <identifiersep> mount <identifiersep> point + <string_literal> ) \n \t2 else : \n \t2 logger . warning ( <string_literal> + str ( curr <identifiersep> mount <identifiersep> point ) ) \n \t1 if may <identifiersep> manage <identifiersep> this <identifiersep> dir : \n <ect>
\t2 return false ; } \n \t1 public ns <identifiersep> dictionary attribute <identifiersep> list <identifiersep> dict ( ) { \n \t2 return model ( ) . flat <identifiersep> attribute <identifiersep> list <identifiersep> total <identifiersep> dict ( ) ; } \n \t1 public int depth <identifiersep> count ( ) { \n <ect>
\t3 log . error ( <string_literal> , e ) ; \n \t3 rpc <identifiersep> connection <identifiersep> exception rpc <identifiersep> exception = new rpc <identifiersep> connection <identifiersep> exception ( <string_literal> , e ) ; \n \t3 get <identifiersep> sender ( ) . tell ( new status . failure ( rpc <identifiersep> exception ) , get <identifiersep> self ( ) ) ; \n \t2 } catch ( final no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t2 } else { \n \t3 for ( map . entry < string , string > e : default <identifiersep> keys . entry <identifiersep> set ( ) ) { \n \t4 add <identifiersep> key ( e . get <identifiersep> key ( ) , e . get <identifiersep> value ( ) ) ; } } \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 } catch ( throwable e ) { \n \t3 return new answer ( cmd , false , <string_literal> + e . get <identifiersep> message ( ) ) ; } } \n \t1 protected answer execute ( get <identifiersep> storage <identifiersep> stats <identifiersep> command cmd ) { \n <ect>
\t1 public persistence <identifiersep> adapter set <identifiersep> persistence <identifiersep> adapter ( broker <identifiersep> service broker , persistence <identifiersep> adapter <identifiersep> choice choice ) throws io <identifiersep> exception { \n \t2 persistence <identifiersep> adapter adapter = null ; \n \t2 switch ( choice ) { \n \t3 case jdbc : \n <ect>
\t4 if ( a . is <identifiersep> group ( ) || ! is <identifiersep> valid ( def , nt <identifiersep> rep <identifiersep> user , false ) ) { \n \t5 log . warn ( <string_literal> ) ; \n \t5 return false ; } \n \t4 if ( ( ( user ) a ) . is <identifiersep> system <identifiersep> user ( ) ) { \n <ect>
\t1 test <identifiersep> server = new hsqldb <identifiersep> test <identifiersep> server ( ) ; \n \t1 try { \n \t2 test <identifiersep> server . reset <identifiersep> server ( ) ; \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t4 throw new runtime <identifiersep> exception ( <string_literal> + yarn <identifiersep> config <identifiersep> keys . env <identifiersep> slots + <string_literal> \n \t5 + e . get <identifiersep> message ( ) ) ; } \n \t3 final containered <identifiersep> task <identifiersep> manager <identifiersep> parameters task <identifiersep> manager <identifiersep> parameters = \n \t4 containered <identifiersep> task <identifiersep> manager <identifiersep> parameters . create ( config , task <identifiersep> manager <identifiersep> container <identifiersep> memory , slots <identifiersep> per <identifiersep> task <identifiersep> manager ) ; \n <ect>
\t2 log . debug ( <string_literal> + context . get <identifiersep> user <identifiersep> service ( ) ) ; \n \t2 list < role > roles = new array <identifiersep> list < > ( ) ; \n \t2 roles . add ( role ) ; \n \t2 collection < user > users = context . get <identifiersep> user <identifiersep> service ( ) . get <identifiersep> users ( null , roles , false ) ; \n <ect>
\t2 was <identifiersep> modified = ( expr != resolved <identifiersep> expr ) ; \n \t2 if ( was <identifiersep> modified ) { \n \t2 entry . set <identifiersep> value ( resolved <identifiersep> expr ) ; \n \t2 break ; } } } \n <ect>
\t4 log . warn ( <string_literal> , member . get <identifiersep> id ( ) , group <identifiersep> name ) ; \n \t3 } else if ( group instanceof group ) { \n \t4 ( ( group ) group ) . add <identifiersep> member ( member ) ; \n \t3 } else { \n <ect>
\t9 lock <identifiersep> granted <identifiersep> req = null ; \n \t9 return null ; <comment> \n \t7 break ; } } \n \t4 catch ( exception ex ) { \n <ect>
\t5 field . set <identifiersep> use <identifiersep> root <identifiersep> paths ( true ) ; \n \t5 field . set <identifiersep> cms <identifiersep> object ( m <identifiersep> cms ) ; \n \t5 m <identifiersep> ou <identifiersep> resources . add <identifiersep> row ( field ) ; } } \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t3 this . ssl <identifiersep> context = create <identifiersep> ssl <identifiersep> context ( null , configuration ) ; \n \t2 } catch ( exception e ) { \n \t3 throw object <identifiersep> helper . wrap <identifiersep> runtime <identifiersep> camel <identifiersep> exception ( e ) ; } \n \t2 if ( ssl <identifiersep> context != null ) { \n <ect>
\t2 future < string > future <identifiersep> err = executor <identifiersep> service . submit ( new callable <identifiersep> stream <identifiersep> reader ( p . get <identifiersep> error <identifiersep> stream ( ) ) ) ; \n \t2 try { \n \t3 stream <identifiersep> data = future <identifiersep> out . get ( ) ; \n \t3 stream <identifiersep> error = future <identifiersep> err . get ( ) ; \n <ect>
\t6 handler . set <identifiersep> principal <identifiersep> id <identifiersep> attribute ( l . get <identifiersep> principal <identifiersep> attribute <identifiersep> id ( ) ) ; \n \t6 logger . debug ( <string_literal> , l . get <identifiersep> principal <identifiersep> attribute <identifiersep> id ( ) , \n \t8 l . get <identifiersep> ldap <identifiersep> url ( ) ) ; } \n \t5 if ( l . get <identifiersep> password <identifiersep> policy ( ) . is <identifiersep> enabled ( ) ) { \n <ect>
<comment> \n \t1 public void start ( bundle <identifiersep> context bc ) \n \t1 { \n <ect>
\t3 configure <identifiersep> client ( s3regional <identifiersep> resource ) ; \n \t3 object <identifiersep> metadata object <identifiersep> metadata = new object <identifiersep> metadata ( ) ; \n \t3 object <identifiersep> metadata . set <identifiersep> content <identifiersep> length ( content <identifiersep> length ) ; \n \t3 put <identifiersep> object <identifiersep> request put <identifiersep> object <identifiersep> request = new put <identifiersep> object <identifiersep> request ( bucket <identifiersep> name , s3bucket <identifiersep> key , input <identifiersep> stream , object <identifiersep> metadata ) ; \n <ect>
\t3 { \n \t4 context = tx <identifiersep> manager <identifiersep> facade . new <identifiersep> transaction ( type , login <identifiersep> context , custom <identifiersep> transaction <identifiersep> timeout ) ; } \n \t3 catch ( runtime <identifiersep> exception e ) \n \t3 { \n <ect>
\t4 string info <identifiersep> message = <string_literal> ; \n \t4 if ( log <identifiersep> stack <identifiersep> traces ) { \n \t5 logger . error ( info <identifiersep> message , e ) ; \n \t4 } else { \n <ect>
\t5 try ( thread <identifiersep> activity ignored = thread <identifiersep> monitor . start <identifiersep> thread <identifiersep> activity ( task . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ) { \n \t6 task . run ( ) ; \n \t5 } catch ( rejected <identifiersep> execution <identifiersep> exception e ) { \n \t6 thread <identifiersep> monitor . add <identifiersep> error ( e ) ; \n <ect>
\t4 if ( stderr != null ) { \n \t5 stderr . close ( ) ; \n \t5 stderr = null ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public long do <identifiersep> create <identifiersep> new <identifiersep> entry <identifiersep> in <identifiersep> items <identifiersep> table ( items <identifiersep> vo vo ) { \n \t2 string sql = string <identifiersep> utils <identifiersep> ext . replace <identifiersep> array <identifiersep> merge ( sql <identifiersep> create <identifiersep> new <identifiersep> entry <identifiersep> in <identifiersep> items <identifiersep> table , \n \t4 new string [ ] { <string_literal> , <string_literal> } , \n \t4 new string [ ] { vo . get <identifiersep> items <identifiersep> manage <identifiersep> table ( ) , vo . get <identifiersep> itemname ( ) } ) ; \n <ect>
\t3 <comment> \n \t3 get <identifiersep> context ( ) . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , 1 ) ; \n \t3 log log = get <identifiersep> context ( ) . log <identifiersep> manager ( ) . get <identifiersep> log ( build <identifiersep> handler . class ) ; \n \t3 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 logger . debug ( <string_literal> + to <identifiersep> time <identifiersep> string ( resolve <identifiersep> timer , total <identifiersep> time ) ) ; \n \t2 <comment> \n \t2 { \n \t3 float time <identifiersep> in <identifiersep> secs ; \n <ect>
\t2 super . process <identifiersep> binding <identifiersep> configuration ( context , item , binding <identifiersep> config ) ; \n \t2 if ( binding <identifiersep> config != null ) { \n \t3 parse <identifiersep> and <identifiersep> add <identifiersep> binding <identifiersep> config ( item , binding <identifiersep> config ) ; \n \t2 } else { \n <ect>
\t1 public void test <identifiersep> cluster <identifiersep> enable <identifiersep> none ( ) { \n \t2 allocation <identifiersep> service strategy = create <identifiersep> allocation <identifiersep> service ( settings . builder ( ) \n \t4 . put ( cluster <identifiersep> routing <identifiersep> allocation <identifiersep> enable <identifiersep> setting . get <identifiersep> key ( ) , allocation . none . name ( ) ) \n \t4 . build ( ) ) ; \n <ect>
\t6 filter <identifiersep> context . found <identifiersep> white <identifiersep> space = true ; } \n \t5 ++ i ; \n \t5 continue ; } \n \t3 } catch ( invalid <identifiersep> velocity <identifiersep> exception e ) { \n <ect>
\t2 if ( errai <identifiersep> config <identifiersep> extension . class . is <identifiersep> assignable <identifiersep> from ( load <identifiersep> class ) ) { \n \t2 <comment> \n \t2 final class < ? extends errai <identifiersep> config <identifiersep> extension > clazz = \n \t3 load <identifiersep> class . as <identifiersep> subclass ( errai <identifiersep> config <identifiersep> extension . class ) ; \n <ect>
\t4 config . pin <identifiersep> force = false ; \n \t4 if ( value . compare <identifiersep> to <identifiersep> ignore <identifiersep> case ( <string_literal> ) == 0 || value . compare <identifiersep> to <identifiersep> ignore <identifiersep> case ( <string_literal> ) == 0 ) { \n \t5 config . pin <identifiersep> force = true ; \n \t4 } else if ( value . compare <identifiersep> to <identifiersep> ignore <identifiersep> case ( <string_literal> ) != 0 && value . compare <identifiersep> to <identifiersep> ignore <identifiersep> case ( <string_literal> ) != 0 ) { \n <ect>
\t2 try { \n \t3 create <identifiersep> node ( zk , norm <identifiersep> path , j <identifiersep> storm <identifiersep> utils . barr ( ( byte ) <number_literal> ) , org . apache . zookeeper . create <identifiersep> mode . persistent ) ; \n \t2 } catch ( keeper <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t5 list < recon <identifiersep> entry > entries = group . entries ; \n \t5 if ( recon == null ) { \n \t6 group . trials ++ ; \n \t6 if ( group . trials < <number_literal> ) { \n <ect>
\t1 msg . set <identifiersep> sent <identifiersep> date ( new date ( ) ) ; \n \t1 transport . send ( msg ) ; \n \t1 send <identifiersep> email <identifiersep> message = <string_literal> ; \n \t1 } catch ( exception e ) { \n <ect>
\t9 string title , \n \t9 string message , \n \t9 eo <identifiersep> editing <identifiersep> context ec ) { \n \t2 erc <identifiersep> mail <identifiersep> message mail <identifiersep> message = null ; \n <ect>
\t2 <comment> \n \t2 list <identifiersep> appender . set <identifiersep> context ( lc ) ; \n \t2 root . add <identifiersep> appender ( list <identifiersep> appender ) ; \n \t2 logger logger = lc . get <identifiersep> logger ( logger <identifiersep> test . class ) ; \n <ect>
\t3 int i =  <identifiersep> received - xy <identifiersep> size ; \n \t3  <identifiersep> received ++ ; \n \t3 byte c = src . get ( ) ; \n \t3  <identifiersep> h <identifiersep> x <identifiersep> xor <identifiersep> bob <identifiersep> ident <identifiersep> hash [ i ] = c ; \n <ect>
<comment> \n \t1 protected void process <identifiersep> unknown <identifiersep> extension <identifiersep> element ( extensibility <identifiersep> element element , \n <number_literal> node parent <identifiersep> node ) throws exception { \n \t2 <comment> \n <ect>
\t2 string temp <identifiersep> dir = code <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) ; \n \t2 compiler . add <identifiersep> to <identifiersep> class <identifiersep> path ( temp <identifiersep> dir ) ; \n \t2 log . debug ( <string_literal> + compiler . get <identifiersep> class <identifiersep> path ( ) ) ; \n \t2 compiler . compile ( temp <identifiersep> dir , new java <identifiersep> compiler <identifiersep> helper . java <identifiersep> source <identifiersep> from <identifiersep> string ( class <identifiersep> name , generated <identifiersep> code <identifiersep> string ) ) ; \n <ect>
\t3 } catch ( metadata <identifiersep> exception ex ) { \n \t3 log . warn ( <string_literal> + id + <string_literal> , ex ) ; \n \t3 throw ex ; } } } \n \t1 } catch ( exception e ) { \n <ect>
\t2 this . listener = listener ; \n \t2 log . info ( <string_literal> ) ; <comment> \n \t1 @ override \n \t1 public void test <identifiersep> ended ( string host ) { \n <ect>
\t2 if ( null == locator ) { \n \t3 log . warning ( fac <identifiersep> keys , <string_literal> , desired <identifiersep> key <identifiersep> id ) ; \n \t3 throw new io <identifiersep> exception ( <string_literal> + desired <identifiersep> key <identifiersep> id + <string_literal> ) ; } \n \t2 if ( locator . type ( ) != key <identifiersep> locator . key <identifiersep> locator <identifiersep> type . name ) { \n <ect>
\t1 mockito . do <identifiersep> answer ( new answer < void > ( ) { \n \t1 public void answer ( invocation <identifiersep> on <identifiersep> mock invocation ) throws throwable { \n \t2 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t2 job <identifiersep> handle <identifiersep> impl arg = ( ( job <identifiersep> handle <identifiersep> impl ) invocation . get <identifiersep> arguments ( ) [ 0 ] ) ; \n <ect>
public class yubi <identifiersep> key <identifiersep> rest <identifiersep> http <identifiersep> request <identifiersep> credential <identifiersep> factory implements rest <identifiersep> http <identifiersep> request <identifiersep> credential <identifiersep> factory { \n \t1 @ override \n \t1 public list < credential > from <identifiersep> request <identifiersep> body ( final multi <identifiersep> value <identifiersep> map < string , string > request <identifiersep> body ) { \n \t2 final string otp = request <identifiersep> body . get <identifiersep> first ( <string_literal> ) ; \n <ect>
\t3 bc <identifiersep> log . logger . error ( <string_literal> + name ) ; \n \t3 return false ; } \n \t2 tablet <identifiersep> program program = factory . create ( this ) ; \n \t2 if ( program == null ) { \n <ect>
\t2 query <identifiersep> execution qexec = query <identifiersep> execution <identifiersep> factory . create ( query , model ) ; \n \t2 try { \n \t3 result <identifiersep> set results = qexec . exec <identifiersep> select ( ) ; \n \t3 if ( ! results . has <identifiersep> next ( ) ) \n <ect>
\t4 } catch ( io <identifiersep> exception e ) { \n \t5 log . error ( <string_literal> , e ) ; } \n \t3 } ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 public void take <identifiersep> screenshot ( string test <identifiersep> name ) \n \t1 { \n \t2 if ( ! ( driver instanceof takes <identifiersep> screenshot ) ) { \n <ect>
\t2 boolean update = false ; \n \t2 for ( int i = 0 ; i < resources . length ; i ++ ) { \n \t3 file resource = new file ( resources [ i ] ) ; \n <ect>
\t2 table <identifiersep> desc . add <identifiersep> family ( col <identifiersep> desc ) ; \n \t2 admin . create <identifiersep> table ( table <identifiersep> desc ) ; \n \t1 } else { \n \t2 log . warn ( <string_literal> + table <identifiersep> name ) ; \n <ect>
\t1 system . out . println ( <string_literal> ) ; \n \t1 log . info ( <string_literal> + context . get <identifiersep> root <identifiersep> page ( ) ) ; \n \t1 log . info ( <string_literal> + ( context . logger == null ? <string_literal> : context . logger . to <identifiersep> string ( ) ) ) ; \n \t1 log . info ( <string_literal> + context . authenticator ) ; \n <ect>
\t3 object [ ] array = ( object [ ] ) values ; \n \t3 for ( int i = 0 ; i < array . length && i < max <identifiersep> items ; i ++ ) { \n \t4 append <identifiersep> item <identifiersep> to <identifiersep> response ( array [ i ] , child , has <identifiersep> item , response , context ) ; } } \n \t2 else if ( values != null ) { \n <ect>
\t3 if ( ! is <identifiersep> same <identifiersep> cidr ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + requested <identifiersep> ip + <string_literal> + network + <string_literal> ) ; \n \t4 return null ; \n \t3 } else if ( net <identifiersep> utils . is <identifiersep> ip <identifiersep> equal <identifiersep> to <identifiersep> network <identifiersep> or <identifiersep> broad <identifiersep> cast <identifiersep> ip ( requested <identifiersep> ip , cidr [ 0 ] , integer . parse <identifiersep> int ( cidr [ 1 ] ) ) ) { \n <ect>
\t1 @ override \n \t1 public void authorize ( final http <identifiersep> servlet <identifiersep> request request , final service service , final assertion assertion ) { \n \t2 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 registered <identifiersep> service <identifiersep> access <identifiersep> strategy <identifiersep> utils . ensure <identifiersep> service <identifiersep> access <identifiersep> is <identifiersep> allowed ( service , registered <identifiersep> service ) ; \n <ect>
\t2 metrics . set <identifiersep> executor <identifiersep> num <identifiersep> preemptable <identifiersep> requests ( preemption <identifiersep> queue . size ( ) ) ; } } } \n private void insert <identifiersep> into <identifiersep> preemption <identifiersep> queue <identifiersep> or <identifiersep> fail <identifiersep> unlocked ( task <identifiersep> wrapper task <identifiersep> wrapper ) { \n \t1 boolean added = preemption <identifiersep> queue . offer ( task <identifiersep> wrapper ) ; \n \t1 if ( ! added ) { \n <ect>
\t5 object converted <identifiersep> value = convert <identifiersep> value ( property <identifiersep> value , field . get <identifiersep> generic <identifiersep> type ( ) ) ; \n \t5 reflection <identifiersep> helper . set <identifiersep> field ( field , target , converted <identifiersep> value ) ; \n \t5 log . debug ( <string_literal> , field . get <identifiersep> name ( ) , property <identifiersep> value ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t1 @ override \n \t1 protected void do <identifiersep> init ( ) { \n \t2 super . do <identifiersep> init ( ) ; \n \t2 if ( this . iterator && this . jaxp <identifiersep> expression == null ) { \n <ect>
\t2 + allow <identifiersep> text <identifiersep> splitter <identifiersep> property + <string_literal> property <string_literal> passed as a parameter <string_literal> generating splits for a textual index column . <string_literal> if your database sorts in a case - insensitive order , <string_literal> this may result in a partial import or duplicate records . <string_literal> <ect>
\t3 throw eex ; } \n \t2 catch ( exception ex ) \n \t2 { \n \t3 on <identifiersep> exception ( trans <identifiersep> status ) ; \n <ect>
\t1 protected inline fun try <identifiersep> block ( input <identifiersep> data : file <identifiersep> content , body : ( ) - > unit ) { \n \t2 try { \n \t3 body ( ) } \n \t2 catch ( e : throwable ) { \n <ect>
\t4 string line = reader . read <identifiersep> line ( ) ; \n \t4 if ( line == null ) break ; \n \t4 function . apply ( line ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3 eperson . set <identifiersep> netid ( <string_literal> ) ; \n \t3 eperson . set <identifiersep> password ( <string_literal> ) ; \n \t3 e <identifiersep> person <identifiersep> service . update ( context , eperson ) ; \n \t2 } catch ( sql <identifiersep> exception | authorize <identifiersep> exception ex ) { \n <ect>
\t2 if ( discovery <identifiersep> agent instanceof suspendable ) { \n \t3 try { \n \t4 ( ( suspendable ) discovery <identifiersep> agent ) . suspend ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 text <identifiersep> mode <identifiersep> client <identifiersep> interface tmci = \n \t5 new text <identifiersep> mode <identifiersep> client <identifiersep> interface ( this , in , out ) ; \n \t5 n . executor . execute ( tmci , <string_literal> + s . get <identifiersep> port ( ) ) ; \n \t4 } catch ( socket <identifiersep> exception e ) { \n <ect>
\t8 log . error ( <string_literal> + vertex . get <identifiersep> task <identifiersep> name <identifiersep> with <identifiersep> subtask <identifiersep> index ( ) , t ) ; \n \t8 task . get <identifiersep> task <identifiersep> to <identifiersep> execute ( ) . fail ( t ) ; } } } } \n \t4 catch ( instance <identifiersep> died <identifiersep> exception e ) { \n <ect>
\t3 io <identifiersep> util . assert <identifiersep> file <identifiersep> is <identifiersep> readable ( output ) ; \n \t3 if ( write <identifiersep> reads <identifiersep> files ) write <identifiersep> reads <identifiersep> file ( output ) ; \n \t3 return 0 ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 try { \n \t3 method method = druid <identifiersep> data <identifiersep> source . get <identifiersep> class ( ) . get <identifiersep> method ( <string_literal> , int . class ) ; \n \t3 return method . invoke ( druid <identifiersep> data <identifiersep> source , sql <identifiersep> id ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 public synchronized void queue <identifiersep> packet ( packet packet ) \n \t2 { \n \t3 if ( evicting <identifiersep> queue <identifiersep> max <identifiersep> size - pkts <identifiersep> to <identifiersep> save . size ( ) == 0 ) \n \t3 { \n <ect>
\t3 return up <identifiersep> prot . up ( msg ) ; <comment> \n \t2 switch ( hdr . type ) { \n \t3 case sequencer <identifiersep> header . request : \n \t4 if ( ! is <identifiersep> coord ) { \n <ect>
<comment> \n \t1 private void receive <identifiersep> get <identifiersep> peers ( msg <identifiersep> id msg <identifiersep> id , node <identifiersep> info n <identifiersep> info , \n \t8 info <identifiersep> hash ih , boolean no <identifiersep> seeds ) throws invalid <identifiersep> b <identifiersep> encoding <identifiersep> exception { \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 this . core = core ; } \n \t1 @ override \n \t1 public void run ( ) { \n \t2 command <identifiersep> task <identifiersep> delete delete = ( command <identifiersep> task <identifiersep> delete ) core ; \n <ect>
\t1 else if ( last == 0 ) { \n \t1 last = integer . max <identifiersep> value ; } \n \t1 logger . debug ( <string_literal> + first ) ; \n <ect>
\t3 if ( val . state ( ) != state . open ) <comment> \n \t4 continue ; \n \t3 long age = val . age ( ) ; \n \t3 if ( age >= conn <identifiersep> expiry <identifiersep> timeout ) { \n <ect>
\t4 try { \n \t5 reconnect ( ) ; \n \t5 connected = true ; \n \t4 } catch ( io <identifiersep> exception | timeout <identifiersep> exception e ) { \n <ect>
\t2 request creq = null ; \n \t2 try { \n \t3 creq = request . parse ( bytes ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 system . out . println ( <string_literal> + parent ) ; \n \t2 content <identifiersep> name grandparent = parent . parent ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( grandparent ) ; \n \t2 system . out . println ( <string_literal> + grandparent ) ; \n <ect>
\t1 for ( int i = 0 ; i < num <identifiersep> columns ; i ++ ) { \n \t2 column <identifiersep> names . add ( metadata . get <identifiersep> column <identifiersep> name ( i + 1 ) ) ; } \n \t1 return column <identifiersep> names ; } \n \t1 catch ( exception e ) { \n <ect>
\t2 try { \n \t3 if ( this . reading <identifiersep> raw . get ( ) ) { \n \t4 if ( ! finalize <identifiersep> raw ( ) ) { \n <ect>
\t6 bw = new buffered <identifiersep> writer ( new output <identifiersep> stream <identifiersep> writer ( fs . create ( tmp <identifiersep> path , true ) ) ) ; \n \t6 bw . write ( json ) ; \n \t6 fs . set <identifiersep> permission ( tmp <identifiersep> path , fs <identifiersep> permission . create <identifiersep> immutable ( ( short ) <number_literal> ) ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> running <identifiersep> average ( ) { \n <ect>
\t2 snap <identifiersep> reply . set <identifiersep> volume <identifiersep> id ( snap . get <identifiersep> parent <identifiersep> volume ( ) ) ; \n \t2 snap <identifiersep> reply . set <identifiersep> owner <identifiersep> id ( snap . get <identifiersep> owner <identifiersep> account <identifiersep> number ( ) ) ; \n \t2 reply . get <identifiersep> snapshot <identifiersep> set ( ) . add ( snap <identifiersep> reply ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + host ) ; \n \t3 try { \n \t4  <identifiersep> connection . start ( ) ; \n \t3 } catch ( final nio <identifiersep> connection <identifiersep> exception e ) { \n <ect>
\t5 patient <identifiersep> identifier <identifiersep> type pit = context . get <identifiersep> patient <identifiersep> service ( ) . get <identifiersep> patient <identifiersep> identifier <identifiersep> type <identifiersep> by <identifiersep> name ( \n \t6 assigning <identifiersep> authority ) ; \n \t5 if ( pit == null ) { \n \t6 if ( ! <string_literal> . equals ( assigning <identifiersep> authority ) ) { \n <ect>
\t6 list < be <identifiersep> value > error = map . get ( <string_literal> ) . get <identifiersep> list ( ) ; \n \t6 receive <identifiersep> error ( waiter , error ) ; } \n \t4 } else { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 log . debug ( <string_literal> , task . get <identifiersep> request <identifiersep> id ( ) , \n \t3 wait <identifiersep> queue . size ( ) ) ; } \n \t2 result = evicted <identifiersep> task == null ? submission <identifiersep> state . accepted : submission <identifiersep> state . evicted <identifiersep> other ; \n <ect>
\t3 exec <identifiersep> type = exec <identifiersep> type <identifiersep> provider . from <identifiersep> string ( <string_literal> ) ; \n \t2 } else { \n \t3 log . info ( <string_literal> ) ; } \n \t2 } else { \n <ect>
\t1 } catch ( interrupted <identifiersep> exception e ) { \n \t1 log . warn ( <string_literal> , shutdown <identifiersep> time , \n \t2 e . get <identifiersep> message ( ) ) ; \n \t1 list < runnable > dropped <identifiersep> tasks = leader <identifiersep> actions <identifiersep> executor <identifiersep> service . shutdown <identifiersep> now ( ) ; \n <ect>
\t3 try { \n \t4 return alt <identifiersep> sign <identifiersep> sha1 ( data , offset , length , signing <identifiersep> key ) ; \n \t3 } catch ( general <identifiersep> security <identifiersep> exception gse ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 { \n \t4 page <identifiersep> cache . close ( ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t2 } catch ( resource <identifiersep> unavailable <identifiersep> exception ex ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . resource <identifiersep> unavailable <identifiersep> error , ex . get <identifiersep> message ( ) ) ; \n \t2 } catch ( concurrent <identifiersep> operation <identifiersep> exception ex ) { \n <ect>
\t2 this ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void call ( injector injector ) { \n \t2 log . info ( <string_literal> + label ) ; \n <ect>
\t4 boolean domain <identifiersep> id <identifiersep> in <identifiersep> childrean <identifiersep> list = get <identifiersep> domain <identifiersep> child <identifiersep> ids ( dedicated <identifiersep> pod <identifiersep> of <identifiersep> cluster . get <identifiersep> domain <identifiersep> id ( ) ) . contains ( domain <identifiersep> id ) ; \n \t4 <comment> \n \t4 if ( dedicated <identifiersep> pod <identifiersep> of <identifiersep> cluster . get <identifiersep> account <identifiersep> id ( ) != null || ( account <identifiersep> id == null && ! domain <identifiersep> id <identifiersep> in <identifiersep> childrean <identifiersep> list ) || \n \t5 ( account <identifiersep> id != null && ! ( dedicated <identifiersep> pod <identifiersep> of <identifiersep> cluster . get <identifiersep> domain <identifiersep> id ( ) . equals ( domain <identifiersep> id ) || domain <identifiersep> id <identifiersep> in <identifiersep> childrean <identifiersep> list ) ) ) { \n <ect>
\t3 throw new io <identifiersep> exception ( error <identifiersep> message ) ; } \n \t2 input <identifiersep> stream input <identifiersep> stream = connect . get <identifiersep> input <identifiersep> stream ( ) ; \n \t2 json <identifiersep> element json <identifiersep> element = parser . parse ( new input <identifiersep> stream <identifiersep> reader ( input <identifiersep> stream ) ) ; \n \t2 if ( json <identifiersep> element == null ) { \n <ect>
\t3 object value = config . get <identifiersep> init <identifiersep> parameter ( name ) ; \n \t3 parameters . put ( name , value ) ; } \n \t2 <comment> \n \t2 if ( parameters . get ( <string_literal> ) != null ) { \n <ect>
\t1 theme theme = ( theme ) cache . get <identifiersep> from <identifiersep> region <identifiersep> cache ( theme <identifiersep> cache <identifiersep> region , system <identifiersep> themes + <string_literal> + theme <identifiersep> id ) ; \n \t1 if ( theme == null ) { <comment> \n \t1 theme = collect <identifiersep> all <identifiersep> system <identifiersep> themes ( ) . get ( theme <identifiersep> id ) ; \n \t1 if ( theme == null ) { \n <ect>
\t1 public void test <identifiersep> in <identifiersep> out ( ) throws exception { \n \t2 get <identifiersep> mock <identifiersep> endpoint ( <string_literal> ) . expected <identifiersep> bodies <identifiersep> received ( <string_literal> ) ; \n \t2 string out = template . request <identifiersep> body ( <string_literal> , <string_literal> , string . class ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , out ) ; \n <ect>
\t6 <string_literal> + stopwatch . get <identifiersep> last <identifiersep> task <identifiersep> time <identifiersep> millis ( ) + <string_literal> ) ; \n \t4 stopwatch . start ( ) ; } \n \t3 handler . handle <identifiersep> message ( message ) ; } \n \t2 stopwatch . stop ( ) ; \n <ect>
\t3 . put ( awareness <identifiersep> allocation <identifiersep> decider . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> awareness <identifiersep> force <identifiersep> group <identifiersep> setting . get <identifiersep> key ( ) + <string_literal> , <string_literal> ) \n \t3 . put ( awareness <identifiersep> allocation <identifiersep> decider . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> awareness <identifiersep> force <identifiersep> group <identifiersep> setting . get <identifiersep> key ( ) + <string_literal> , <string_literal> ) \n \t3 . put ( cluster <identifiersep> rebalance <identifiersep> allocation <identifiersep> decider . cluster <identifiersep> routing <identifiersep> allocation <identifiersep> allow <identifiersep> rebalance <identifiersep> setting . get <identifiersep> key ( ) , <string_literal> ) \n \t3 . build ( ) ) ; \n <ect>
\t3 } else { \n \t4 snapshot . process <identifiersep> event ( object <identifiersep> in <identifiersep> data <identifiersep> store <identifiersep> state <identifiersep> machine . event . operation <identifiersep> successed ) ; \n \t4 res = new snapshot <identifiersep> result ( context . snapshot , null ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 dataset ds = dataset <identifiersep> factory . assemble ( <string_literal> , <string_literal> ) ; \n \t2 return ds ; } \n \t1 public static void load <identifiersep> data ( dataset dataset , string file ) \n \t1 { \n <ect>
\t3 status status = client . update <identifiersep> status ( tweet <identifiersep> txt ) ; \n \t3 logger . debug ( <string_literal> , status . get <identifiersep> text ( ) ) ; \n \t3 return true ; \n \t2 } catch ( twitter <identifiersep> exception e ) { \n <ect>
\t4 do <identifiersep> launch <identifiersep> worker ( assignment , port , worker <identifiersep> id ) ; \n \t3 } catch ( exception e ) { \n \t4 worker <identifiersep> report <identifiersep> error . report ( assignment . get <identifiersep> topology <identifiersep> id ( ) , port , \n \t6 assignment . get <identifiersep> task <identifiersep> ids ( ) , j <identifiersep> storm <identifiersep> utils . get <identifiersep> error <identifiersep> info ( e ) , error <identifiersep> constants . code <identifiersep> worker <identifiersep> ex ) ; \n <ect>
\t1 console = new log <identifiersep> helper ( log ) ; \n \t1 this . work = work ; } \n @ override \n public int process ( hive db , table tbl ) throws exception { \n <ect>
\t2 assert <identifiersep> equals ( name , name2 ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> encoding <identifiersep> decoding ( ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( get <identifiersep> wicket <identifiersep> tester ( ) . get <identifiersep> application ( ) ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 log . info ( <string_literal> + get <identifiersep> wicket <identifiersep> tester ( ) . get <identifiersep> application ( ) . get <identifiersep> name ( ) ) ; \n \t2 log . info ( <string_literal> + get <identifiersep> wicket <identifiersep> tester ( ) . get <identifiersep> servlet <identifiersep> context ( ) . get <identifiersep> servlet <identifiersep> context <identifiersep> name ( ) ) ; \n <ect>
\t9 message , reply <identifiersep> code1 , reply <identifiersep> text1 , exchange1 , routing <identifiersep> key1 ) ) ; } \n \t5 logger . warn ( <string_literal> ) ; } } \n <ect>
\t1 if ( null != password <identifiersep> filename ) { \n \t1 if ( ! new file ( password <identifiersep> filename ) . delete ( ) ) { \n \t2 log . error ( <string_literal> \n \t4 + password <identifiersep> filename ) ; \n <ect>
\t6 else { \n \t7 log . warn ( <string_literal> + wf . get <identifiersep> id ( ) + <string_literal> + wf . get <identifiersep> status ( ) ) ; \n \t7 cstore . update <identifiersep> coordinator <identifiersep> action ( coord <identifiersep> action ) ; \n \t7 return null ; } } } \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 if ( ! ( selector . get <identifiersep> index ( ) instanceof fulltext <identifiersep> query <identifiersep> index ) ) { \n <ect>
\t5 pstmt . close ( ) ; } \n \t3 } catch ( sql <identifiersep> exception e ) { } } \n \t2 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t1 private void encrypt <identifiersep> vpn <identifiersep> password ( connection conn ) { \n <ect>
\t9 if ( reason == null ) { \n \t10 if ( internet ) { \n <number_literal> s <identifiersep> logger . info ( <string_literal> +  <identifiersep> account . get ( ) ) ; \n \t10 } else { \n <ect>
\t5 try { \n \t6 async <identifiersep> handler <identifiersep> interceptor async <identifiersep> interceptor = ( async <identifiersep> handler <identifiersep> interceptor ) interceptors [ i ] ; \n \t6 async <identifiersep> interceptor . after <identifiersep> concurrent <identifiersep> handling <identifiersep> started ( request , response , this . handler ) ; } \n \t5 catch ( throwable ex ) { \n <ect>
\t5 private void print <identifiersep> results ( hits hits ) { \n \t6 log . debug ( <string_literal> + hits . get <identifiersep> number <identifiersep> of <identifiersep> hits ( ) ) ; \n \t6 for ( int i = 0 ; i < hits . get <identifiersep> number <identifiersep> of <identifiersep> hits ( ) ; i ++ ) { \n \t7 log . debug ( <string_literal> + i + <string_literal> + hits . get <identifiersep> hit ( ) . get ( i ) . get <identifiersep> hit <identifiersep> location ( ) ) ; \n <ect>
\t2 if ( neighbour <identifiersep> status == status . up && ( host <identifiersep> status == status . disconnected || host <identifiersep> status == status . down ) ) { \n \t3 host <identifiersep> status = status . disconnected ; } \n \t2 if ( neighbour <identifiersep> status == status . down && ( host <identifiersep> status == status . disconnected || host <identifiersep> status == status . down ) ) { \n \t3 host <identifiersep> status = status . down ; } \n <ect>
\t4 msg = string <identifiersep> escape <identifiersep> utils . escape <identifiersep> html4 ( msg ) ; \n \t4 log . debug ( <string_literal> , key , msg ) ; } \n \t4 if ( tp != null ) { \n <ect>
\t7 log . debug ( <string_literal> ) ; \n \t7 log . debug ( <string_literal> ) ; \n \t7 log . debug ( <string_literal> , key ) ; \n <ect>
\t4 while ( true ) { \n \t5 try { \n \t6 long delta = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n \t6 if ( delta > timeout <identifiersep> milli <identifiersep> seconds ) { \n <ect>
\t4 } catch ( not <identifiersep> connected <identifiersep> exception e ) { \n \t5 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> ) ; \n \t5 return ; \n \t4 } catch ( sync <identifiersep> send <identifiersep> waited <identifiersep> too <identifiersep> long <identifiersep> exception e ) { \n <ect>
\t2 closeables . close ( data <identifiersep> file <identifiersep> writer , false ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n \t2 throw new dataset <identifiersep> writer <identifiersep> exception ( \n \t2 <string_literal> + data <identifiersep> file <identifiersep> writer + <string_literal> + path <identifiersep> tmp ) ; } \n <ect>
\t4 if ( param . get <identifiersep> client <identifiersep> tag ( ) != null ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + param . get <identifiersep> client <identifiersep> tag ( ) ) ; \n \t5 map . put ( <string_literal> , param . get <identifiersep> client <identifiersep> tag ( ) ) ; \n \t4 } else { \n <ect>
\t4 try { \n \t5 if ( ! state <identifiersep> transit <identifiersep> to ( volume , volume . event . migration <identifiersep> requested ) ) { \n \t6 throw new concurrent <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n \t4 } catch ( no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t1 } else { \n \t1 jndi = new initial <identifiersep> context ( ) ; } \n \t1 log <identifiersep> log . debug ( <string_literal> + tcf <identifiersep> binding <identifiersep> name + <string_literal> ) ; \n \t1 topic <identifiersep> connection <identifiersep> factory = ( topic <identifiersep> connection <identifiersep> factory ) lookup ( jndi , tcf <identifiersep> binding <identifiersep> name ) ; \n <ect>
\t4 ftp <identifiersep> file [ ] files = parser . get <identifiersep> next ( <number_literal> ) ; \n \t4 for ( ftp <identifiersep> file file : files ) { \n \t5 if ( file != null ) { \n \t6 listing . add ( file ) ; \n <ect>
\t4 if ( default <identifiersep> authentication <identifiersep> flows . docker <identifiersep> auth . equals ( f . get <identifiersep> alias ( ) ) ) { \n \t5 flow = f ; } } \n \t3 assert <identifiersep> not <identifiersep> null ( flow ) ; } } \n \t1 protected void test <identifiersep> role <identifiersep> manage <identifiersep> account <identifiersep> links ( realm <identifiersep> resource . . . realms ) { \n <ect>
\t1 int retries = 0 ; \n \t1 while ( ( ! success ) && ( retries ++ < queue <identifiersep> timeout ) ) { \n \t2 success = buffers . offer ( buffer , queue <identifiersep> timeout , time <identifiersep> unit . seconds ) ; } \n \t1 if ( ! success ) { \n <ect>
\t5 log . info ( <string_literal> + broker <identifiersep> name + <string_literal> + queue <identifiersep> view <identifiersep> m <identifiersep> bean + <string_literal> + current <identifiersep> count ) ; \n \t5 linked <identifiersep> list < string > consumer <identifiersep> ids = new linked <identifiersep> list < string > ( ) ; \n \t5 for ( object <identifiersep> name object <identifiersep> name : queue <identifiersep> view <identifiersep> m <identifiersep> bean . get <identifiersep> subscriptions ( ) ) { \n \t6 consumer <identifiersep> ids . add ( object <identifiersep> name . get <identifiersep> key <identifiersep> property ( <string_literal> ) ) ; } \n <ect>
\t3 file <identifiersep> input <identifiersep> format . add <identifiersep> input <identifiersep> path ( job , input ) ; \n \t3 file <identifiersep> output <identifiersep> format . set <identifiersep> output <identifiersep> path ( job , output ) ; \n \t3 job . wait <identifiersep> for <identifiersep> completion ( true ) ; } \n \t2 catch ( io <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 public boolean delete <identifiersep> single <identifiersep> ticket ( final string ticket <identifiersep> id ) { \n \t2 final ticket ticket = get <identifiersep> ticket ( ticket <identifiersep> id ) ; \n \t2 if ( ticket == null ) { \n <ect>
\t4 page <identifiersep> name <identifiersep> sb . append ( request <identifiersep> uri ) ; \n \t4 query <identifiersep> string = rewrite <identifiersep> query <identifiersep> string ( query <identifiersep> string ) ; \n \t4 page <identifiersep> name <identifiersep> sb . append ( query <identifiersep> string ) ; \n \t4 string page <identifiersep> name = page <identifiersep> name <identifiersep> sb . to <identifiersep> string ( ) ; \n <ect>
\t1 t1 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 file <identifiersep> skv <identifiersep> iterator bmfr = file <identifiersep> operations . get <identifiersep> instance ( ) . new <identifiersep> reader <identifiersep> builder ( ) . for <identifiersep> file ( fname , fs , conf ) \n \t2 . with <identifiersep> table <identifiersep> configuration ( acuconf ) . build ( ) ; \n \t1 t2 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t4 load <identifiersep> aliases ( ) ; \n \t4 cbo <identifiersep> alias . set <identifiersep> selected <identifiersep> item ( entry . get <identifiersep> alias ( ) ) ; } } \n \t2 catch ( key <identifiersep> store <identifiersep> exception ex ) \n \t2 { \n <ect>
\t1 iqn = san <identifiersep> snapshot . get <identifiersep> iqn ( ) ; \n \t1 } catch ( exception e ) { \n \t1 log . debug ( <string_literal> + snapshot <identifiersep> id ) ; \n \t1 return ; } \n <ect>
\t4 bean = auto <identifiersep> wiring <identifiersep> factory . autowire ( clazz , autowire <identifiersep> capable <identifiersep> bean <identifiersep> factory . autowire <identifiersep> constructor , false ) ; \n \t4 bean = auto <identifiersep> wiring <identifiersep> factory . initialize <identifiersep> bean ( bean , bean . get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ; \n \t4 return auto <identifiersep> wire <identifiersep> bean ( bean , auto <identifiersep> wiring <identifiersep> factory ) ; } \n \t2 } catch ( unsatisfied <identifiersep> dependency <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 final string file <identifiersep> location = system . getenv ( user <identifiersep> group <identifiersep> information . hadoop <identifiersep> token <identifiersep> file <identifiersep> location ) ; \n \t2 if ( file <identifiersep> location != null ) { \n <ect>
\t1 public void post <identifiersep> submit ( ) { \n \t2 <comment> \n \t2 <comment> \n \t2 if ( ! once <identifiersep> failing <identifiersep> aggregator . was <identifiersep> checkpointed <identifiersep> before <identifiersep> failure ) { \n <ect>
\t4 cop <identifiersep> req . set <identifiersep> new <identifiersep> object <identifiersep> metadata ( object <identifiersep> meta <identifiersep> data ) ; \n \t4 copy copy = tmx . copy ( s3req <identifiersep> decorator . decorate ( cop <identifiersep> req ) ) ; \n \t4 try { \n \t5 copy . wait <identifiersep> for <identifiersep> copy <identifiersep> result ( ) ; \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t3 if ( o != null ) { \n \t4 ret = o . to <identifiersep> string ( ) ; } \n \t2 } catch ( j <identifiersep> meter <identifiersep> exception e ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t1 protected void stop <identifiersep> ldap <identifiersep> server ( ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 ldap <identifiersep> server . stop ( ) ; } \n \t1 protected void shutdown <identifiersep> directory <identifiersep> service ( ) throws exception { \n <ect>
\t3 } catch ( sql <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 throw vex ; } \n \t2 catch ( authorization <identifiersep> exception aex ) \n \t2 { \n \t3 on <identifiersep> exception ( trans <identifiersep> status ) ; \n <ect>
\t2 int min <identifiersep> threshold = cfs . get <identifiersep> minimum <identifiersep> compaction <identifiersep> threshold ( ) ; \n \t2 int max <identifiersep> threshold = cfs . get <identifiersep> maximum <identifiersep> compaction <identifiersep> threshold ( ) ; \n \t2 iterable < ss <identifiersep> table <identifiersep> reader > candidates = filter <identifiersep> suspect <identifiersep> ss <identifiersep> tables ( sets . intersection ( cfs . get <identifiersep> uncompacting <identifiersep> ss <identifiersep> tables ( ) , sstables ) ) ; \n \t2 list < list < ss <identifiersep> table <identifiersep> reader > > buckets = get <identifiersep> buckets ( create <identifiersep> ss <identifiersep> table <identifiersep> and <identifiersep> length <identifiersep> pairs ( candidates ) , options . bucket <identifiersep> high , options . bucket <identifiersep> low , options . min <identifiersep> ss <identifiersep> table <identifiersep> size ) ; \n <ect>
\t2 } ; \n \t2 map . put ( key1 , <number_literal> ) ; \n \t2 map . put ( key2 , <number_literal> ) ; \n \t2 map . put ( key3 , <number_literal> ) ; \n <ect>
\t3 try { \n \t4 byte [ ] buf = util . streamable <identifiersep> to <identifiersep> byte <identifiersep> buffer ( tmp ) ; \n \t4 forward ( buf , 0 , buf . length ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 input <identifiersep> stream confs = console <identifiersep> proxy . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ; \n \t2 properties props = new properties ( ) ; \n \t2 if ( confs == null ) { \n <ect>
\t4 try { \n \t5 snapshot ( ) ; \n \t5 log . info ( <string_literal> ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t2 <comment> \n \t2  <identifiersep> account <identifiersep> mgr . check <identifiersep> access ( caller , access <identifiersep> type . operate <identifiersep> entry , true , template ) ; <comment> \n \t2 <comment> \n \t2 if ( template . get <identifiersep> removed ( ) != null ) { \n <ect>
\t1 @ nullable \n \t1 protected static input <identifiersep> stream handle <identifiersep> known <identifiersep> content <identifiersep> encodings ( string content <identifiersep> encoding , input <identifiersep> stream in ) \n \t2 throws io <identifiersep> exception { \n \t2 if ( <string_literal> . equals ( content <identifiersep> encoding ) ) { \n <ect>
\t3 logger . debug ( <string_literal> , project <identifiersep> file ) ; \n \t3 try { \n \t4 enum <identifiersep> dictionary = ihc <identifiersep> project <identifiersep> file . parse <identifiersep> project ( project <identifiersep> file , dump <identifiersep> resources <identifiersep> to <identifiersep> file ) ; \n \t3 } catch ( ihc <identifiersep> execption e ) { \n <ect>
\t1 private void update <identifiersep> vm <identifiersep> state <identifiersep> for <identifiersep> failed <identifiersep> vm <identifiersep> creation ( long vm <identifiersep> id ) { \n \t2 user <identifiersep> vm <identifiersep> vo vm =  <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm != null ) { \n \t3 if ( vm . get <identifiersep> state ( ) . equals ( state . stopped ) ) { \n <ect>
\t2 if ( output == null ) { \n \t3 throw new exec <identifiersep> exception ( <string_literal> + stats <identifiersep> output <identifiersep> key + <string_literal> ) ; } \n \t2 try { \n \t3 stats <identifiersep> writer = ( key <identifiersep> value <identifiersep> writer ) output . get <identifiersep> writer ( ) ; \n <ect>
\t2 local <identifiersep> logger . warn ( <string_literal> + snapshot . get <identifiersep> snapshot <identifiersep> id ( ) + <string_literal> + \n \t3 <string_literal> ) } } \n \t1 } else { \n \t1 local <identifiersep> logger . info ( <string_literal> ) } \n <ect>
\t2 try { \n \t3 while ( true ) { \n \t4 synchronized ( this ) { \n \t5 if ( owner <identifiersep> thread != null && owner <identifiersep> thread == thread . current <identifiersep> thread ( ) ) { \n <ect>
\t3 try { \n \t4 if ( ! stopped . get ( ) ) { \n \t5 stop ( ) ; } \n \t3 } catch ( exception ex ) { \n <ect>
\t1 public void test <identifiersep> injection <identifiersep> points ( ) throws exception { \n \t2 log . info ( <string_literal> + bean . get <identifiersep> field <identifiersep> injected <identifiersep> endpoint ( ) ) ; \n \t2 log . info ( <string_literal> + bean . get <identifiersep> property <identifiersep> injected <identifiersep> endpoint ( ) ) ; \n \t2 log . info ( <string_literal> + bean . get <identifiersep> field <identifiersep> injected <identifiersep> producer ( ) ) ; \n <ect>
\t2 log . info ( <string_literal> + people . size ( ) + <string_literal> + time + <string_literal> ) ; \n \t2 <comment> \n \t2 log . info ( <string_literal> ) ; \n \t2 set < string > un <identifiersep> locked <identifiersep> user <identifiersep> account <identifiersep> ids = new hash <identifiersep> set < string > ( person <identifiersep> ids <identifiersep> by <identifiersep> locked <identifiersep> status <identifiersep> dao . execute ( false ) ) ; \n <ect>
\t2 } catch ( execution <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 super . next ( ) ; } \n @ override \n public void init ( sorted <identifiersep> key <identifiersep> value <identifiersep> iterator < key , value > source , map < string , string > options , \n \t1 iterator <identifiersep> environment env ) throws io <identifiersep> exception { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 byte [ ] iv = half <identifiersep> hash ( pre <identifiersep> iv ) ; \n \t2 simple <identifiersep> byte <identifiersep> cache . release ( pre <identifiersep> iv ) ; \n <ect>
\t2 hulu <identifiersep> source = new replacement <identifiersep> service <identifiersep> hulu <identifiersep> impl ( ) ; \n \t2 hulu <identifiersep> serv <identifiersep> reg = \n \t3 context . register <identifiersep> service ( replacement <identifiersep> service . class . get <identifiersep> name ( ) , \n \t4 hulu <identifiersep> source , hashtable ) ; \n <ect>
\t2 while ( ! done && interval > 0 ) { \n \t3 if ( executor <identifiersep> service . await <identifiersep> termination ( interval , time <identifiersep> unit . milliseconds ) ) { \n \t4 done = true ; \n \t3 } else { \n <ect>
\t2 } catch ( final io <identifiersep> exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } } \n \t1 private static void process <identifiersep> inline <identifiersep> groovy <identifiersep> attribute ( final map < string , object > resolved <identifiersep> attributes , \n <number_literal> final map < string , object > attributes <identifiersep> to <identifiersep> release , final matcher matcher <identifiersep> inline , final string attribute <identifiersep> name ) { \n <ect>
\t3 map < string , string > path <identifiersep> variables = \n \t5 ( map < string , string > ) servlet <identifiersep> request . get <identifiersep> attribute ( handler <identifiersep> mapping . uri <identifiersep> template <identifiersep> variables <identifiersep> attribute ) ; \n \t3 if ( ! collection <identifiersep> utils . is <identifiersep> empty ( path <identifiersep> variables ) ) { \n <ect>
\t2 class groovy <identifiersep> class = loader . parse <identifiersep> class ( gcs ) ; \n \t2 script script = invoker <identifiersep> helper . create <identifiersep> script ( groovy <identifiersep> class , new binding ( ) ) ; \n \t2 script . run ( ) ; } \n \t1 protected void assert <identifiersep> script <identifiersep> file ( string file <identifiersep> name ) throws exception { \n <ect>
\t2 for ( long i = 0 ; i < len ; i ++ ) \n \t3 logger . debug ( <string_literal> ) ; \n \t2 thread . yield ( ) ; \n \t2 for ( long i = 0 ; i < len ; i ++ ) \n <ect>
\t2 if ( ! plugin <identifiersep> directory . exists ( ) ) { \n \t3 logger . warn ( <string_literal> + plugin <identifiersep> directory ) ; \n \t3 return ; } \n \t2 if ( ! plugin <identifiersep> directory . is <identifiersep> directory ( ) ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 fetcher <identifiersep> pool . shutdown ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 job <identifiersep> pool . shutdown ( ) ; \n <ect>
\t1 @ override \n \t1 public void on <identifiersep> create ( bundle saved <identifiersep> instance <identifiersep> state ) { \n \t2 super . on <identifiersep> create ( saved <identifiersep> instance <identifiersep> state ) ; \n \t2 log = logger . instance ; \n <ect>
\t4 mllp <identifiersep> buffer . reset <identifiersep> socket ( client <identifiersep> socket ) ; } \n \t2 } catch ( mllp <identifiersep> socket <identifiersep> exception socket <identifiersep> ex ) { \n \t3 <comment> \n \t3 if ( ! mllp <identifiersep> buffer . is <identifiersep> empty ( ) ) { \n <ect>
private void disable ( string owner <identifiersep> config <identifiersep> name , authorization <identifiersep> code <identifiersep> o <identifiersep> auth <identifiersep> dancer dancer ) { \n \t1 try { \n \t1 stop <identifiersep> if <identifiersep> needed ( dancer ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 configuration that = context . get <identifiersep> configuration ( ) ; \n \t2 type <identifiersep> list = sets . new <identifiersep> hash <identifiersep> set ( splitter . on ( <string_literal> ) . split ( that . get ( type <identifiersep> list ) ) ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 for ( string type : type <identifiersep> list ) \n <ect>
\t1 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t1 try { \n \t1 lock <identifiersep> mgr . clear <identifiersep> local <identifiersep> lock <identifiersep> records ( ) ; \n \t1 stop <identifiersep> heartbeat ( ) ; \n <ect>
\t1 throw new invalid <identifiersep> options <identifiersep> exception ( <string_literal> ) ; } \n \t1 if ( in . has <identifiersep> option ( temp <identifiersep> rootdir <identifiersep> arg ) ) { \n \t1 out . set <identifiersep> temp <identifiersep> root <identifiersep> dir ( in . get <identifiersep> option <identifiersep> value ( temp <identifiersep> rootdir <identifiersep> arg ) ) ; } \n \t1 if ( in . has <identifiersep> option ( throw <identifiersep> on <identifiersep> error <identifiersep> arg ) ) { \n <ect>
\t1 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( ex ) ; } \n \t1 try { \n \t1 transactions . save ( snap <identifiersep> info . with <identifiersep> san <identifiersep> volume <identifiersep> id ( san <identifiersep> snapshot <identifiersep> id ) . with <identifiersep> size ( size ) . with <identifiersep> snapshot <identifiersep> of ( volume <identifiersep> id ) ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t5 else { \n \t6 s <identifiersep> logger . error ( <string_literal> + joined <identifiersep> job <identifiersep> id + <string_literal> ) ; \n \t6 throw new runtime <identifiersep> exception ( ( exception ) exception ) ; } } \n \t3 } else { \n <ect>
\t1 string parent <identifiersep> relative <identifiersep> path = get <identifiersep> parent <identifiersep> relative <identifiersep> path ( real <identifiersep> absolute <identifiersep> file ) ; \n \t1 synchronized ( this ) { \n \t1 progress . mark <identifiersep> as <identifiersep> indexed ( input <identifiersep> file ) ; \n \t1 index <identifiersep> file <identifiersep> and <identifiersep> parent <identifiersep> dir ( input <identifiersep> file , parent <identifiersep> relative <identifiersep> path ) ; } \n <ect>
\t4 log . debug ( <string_literal> + path ) ; \n \t3 } else if ( cms . exists <identifiersep> resource ( \n \t4 cms <identifiersep> string <identifiersep> util . join <identifiersep> paths ( path , cms <identifiersep> ade <identifiersep> manager . config <identifiersep> suffix ) , \n \t4 cms <identifiersep> resource <identifiersep> filter . ignore <identifiersep> expiration ) ) { \n <ect>
\t3 for ( int i = 0 ; i < message <identifiersep> count ; i ++ ) { \n \t4 message msg = session . create <identifiersep> text <identifiersep> message ( <string_literal> + i ) ; \n \t4 mp . send ( dest , msg ) ; } \n \t3 if ( j % <number_literal> == 0 ) { \n <ect>
\t5 log . debug ( <string_literal> ) ; \n \t4 } catch ( data <identifiersep> access <identifiersep> exception e ) { \n \t5 if ( create <identifiersep> table <identifiersep> if <identifiersep> not <identifiersep> exists ) { \n \t6 try { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + vm ) ; } \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + vm <identifiersep> id ) ; } \n \t2 if ( vm . get <identifiersep> state ( ) != state . running ) { \n <ect>
\t4 if ( ! valid <identifiersep> local <identifiersep> copy <identifiersep> present ) { \n \t5 log . warn ( <string_literal> , \n \t7 local <identifiersep> file <identifiersep> length , remote <identifiersep> file <identifiersep> length , length ) ; } \n \t3 } else { \n <ect>
\t6 + <string_literal> + part . get <identifiersep> upload <identifiersep> id ( ) + <string_literal> + part . get <identifiersep> object <identifiersep> key ( ) + <string_literal> + part . get <identifiersep> bucket <identifiersep> name ( ) + <string_literal> \n \t6 + e . get <identifiersep> message ( ) ) ; } } \n \t4 entities . delete ( part ) ; } \n \t3 } else { \n <ect>
\t3 if ( migrate <identifiersep> with <identifiersep> storage <identifiersep> answer == null ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + vm + <string_literal> + dest <identifiersep> host + <string_literal> ) ; \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + vm + <string_literal> + dest <identifiersep> host ) ; \n \t3 } else if ( ! migrate <identifiersep> with <identifiersep> storage <identifiersep> answer . get <identifiersep> result ( ) ) { \n <ect>
\t7 default : \n \t8 assert ( false ) ; \n \t8 break ; } \n \t6 } catch ( throwable e ) { \n <ect>
\t2 log . debug ( <string_literal> , ex ) ; } } } \n private void register <identifiersep> in <identifiersep> zoo <identifiersep> keeper ( string name , string root ) throws exception { \n \t1 i <identifiersep> zoo <identifiersep> reader <identifiersep> writer zoo = zoo <identifiersep> reader <identifiersep> writer . get <identifiersep> instance ( ) ; \n \t1 zoo . put <identifiersep> persistent <identifiersep> data ( root , new byte [ 0 ] , node <identifiersep> exists <identifiersep> policy . skip ) ; \n <ect>
\t4 functor clause = new functor ( name , args , registry ) ; \n \t4 if ( clause . get <identifiersep> implementor ( ) == null ) { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t6 <comment> \n \t5 } catch ( voldemort <identifiersep> application <identifiersep> exception e ) { \n \t6 throw e ; \n \t5 } catch ( exception e ) { \n <ect>
\t2 aggregated <identifiersep> operations failed <identifiersep> operations = failed <identifiersep> operations <identifiersep> queue . pop <identifiersep> operations ( ) ; \n \t2 if ( ! failed <identifiersep> operations . is <identifiersep> empty ( ) ) \n \t2 { \n \t3 long elapsed = now - last <identifiersep> log <identifiersep> time ; \n <ect>
\t2 if ( ( type == router <identifiersep> signed || type == router <identifiersep> unsigned || \n \t3 type == router <identifiersep> signed <identifiersep> su3 || type == router <identifiersep> dev <identifiersep> su3 ) && \n \t3 news <identifiersep> helper . dont <identifiersep> install (  <identifiersep> context ) ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 log . info ( <string_literal> + f ) ; \n \t3 out = new print <identifiersep> stream ( new file <identifiersep> output <identifiersep> stream ( f ) ) ; \n \t3 loader . set <identifiersep> system <identifiersep> base <identifiersep> uri ( map <identifiersep> parser . absolutize <identifiersep> uri ( f . to <identifiersep> uri ( ) . to <identifiersep> string ( ) + <string_literal> ) ) ; \n \t2 } else { \n <ect>
\t3 streaming <identifiersep> config = streaming <identifiersep> service . update <identifiersep> streaming <identifiersep> config ( streaming <identifiersep> config , project ) ; \n \t2 } catch ( access <identifiersep> denied <identifiersep> exception access <identifiersep> denied <identifiersep> exception ) { \n \t3 throw new forbidden <identifiersep> exception ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 + <string_literal> + mode + <string_literal> + key . get <identifiersep> display <identifiersep> name ( ) + <string_literal> \n \t2 + try <identifiersep> num + <string_literal> ) ; \n \t1 print <identifiersep> conflicting <identifiersep> locks ( key , mode , conflicting <identifiersep> locks ) ; \n \t1 if ( last <identifiersep> exception != null ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t5 return zk . get <identifiersep> data ( ) . watched ( ) . for <identifiersep> path ( norm <identifiersep> path ) ; \n \t4 } else { \n \t5 return zk . get <identifiersep> data ( ) . for <identifiersep> path ( norm <identifiersep> path ) ; } } \n \t2 } catch ( keeper <identifiersep> exception e ) { \n <ect>
\t1 protected map < string , message <identifiersep> consumer > consumer <identifiersep> map ; \n \t1 map < thread , throwable > unhandeled <identifiersep> exceptions = new hash <identifiersep> map < thread , throwable > ( ) ; \n \t1 private void assert <identifiersep> no <identifiersep> unhandeled <identifiersep> exceptions ( ) { \n \t2 for ( entry < thread , throwable > e : unhandeled <identifiersep> exceptions . entry <identifiersep> set ( ) ) { \n <ect>
\t2 throw new configuration <identifiersep> exception ( e ) ; } \n \t1 tmp <identifiersep> handler . configure ( context ) ; \n \t1 handler = tmp <identifiersep> handler ; } \n \t1 super . start ( ) ; \n <ect>
\t7 <string_literal> , id , exit <identifiersep> status ) ; \n \t5 <comment> \n \t4 } else { \n \t5 <comment> \n <ect>
\t3 <comment> \n \t3 string unit <identifiersep> name = get <identifiersep> mios <identifiersep> unit <identifiersep> name ( item <identifiersep> name ) ; \n \t3 mios <identifiersep> unit <identifiersep> connector connector = get <identifiersep> mios <identifiersep> connector ( unit <identifiersep> name ) ; \n \t3 if ( connector == null ) { \n <ect>
\t1 @ override \n \t1 public void run ( ) { \n \t2 try { \n \t2 int thread <identifiersep> id = wait <identifiersep> for <identifiersep> all <identifiersep> threads <identifiersep> to <identifiersep> start ( this , thread <identifiersep> count ) ; \n <ect>
\t2 gis = new deflater <identifiersep> output <identifiersep> stream ( baos ) ; \n \t2 try { \n \t3 fs . write <identifiersep> to ( gis ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 num <identifiersep> file <identifiersep> blocks = math . max ( num <identifiersep> file <identifiersep> blocks , id + 1 ) ; \n \t4 return dst ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { \n \t4 <comment> \n <ect>
\t3 message ex <identifiersep> msg = new message ( requester ) . set <identifiersep> buffer ( util . exception <identifiersep> to <identifiersep> buffer ( exception ) ) \n \t3 . put <identifiersep> header ( get <identifiersep> id ( ) , new state <identifiersep> header ( state <identifiersep> header . state <identifiersep> ex ) ) ; \n \t3 down ( ex <identifiersep> msg ) ; } \n \t2 catch ( throwable t ) { \n <ect>
\t2 catch ( runtime <identifiersep> exception e ) \n \t2 { \n \t3 if ( ! ( e instanceof last <identifiersep> error <identifiersep> exception ) ) \n \t4 throw e ; \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + host . get <identifiersep> id ( ) + <string_literal> + cpu <identifiersep> cap . get <identifiersep> reserved <identifiersep> capacity ( ) + <string_literal> + \n \t6 reserved <identifiersep> cpu ) ; \n \t5 cpu <identifiersep> cap . set <identifiersep> reserved <identifiersep> capacity ( reserved <identifiersep> cpu ) ; } \n \t4 if ( cpu <identifiersep> cap . get <identifiersep> used <identifiersep> capacity ( ) != used <identifiersep> cpu ) { \n <ect>
\t1 public network design ( network <identifiersep> offering offering , deployment <identifiersep> plan plan , network user <identifiersep> specified , account owner ) { \n \t2 physical <identifiersep> network <identifiersep> vo physnet = physical <identifiersep> network <identifiersep> dao . find <identifiersep> by <identifiersep> id ( plan . get <identifiersep> physical <identifiersep> network <identifiersep> id ( ) ) ; \n \t2 data <identifiersep> center dc =  <identifiersep> dc <identifiersep> dao . find <identifiersep> by <identifiersep> id ( plan . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; \n \t2 if ( ! can <identifiersep> handle ( offering , dc . get <identifiersep> network <identifiersep> type ( ) , physnet ) ) { \n <ect>
\t3 log . debug ( <string_literal> , event . is <identifiersep> replay ( ) , event <identifiersep> type <identifiersep> string , event . get <identifiersep> bundle ( ) . get <identifiersep> symbolic <identifiersep> name ( ) , event . to <identifiersep> string ( ) ) ; } \n \t2 if ( ! event . is <identifiersep> replay ( ) && this . get <identifiersep> bundle <identifiersep> context ( ) . get <identifiersep> bundle ( ) . get <identifiersep> bundle <identifiersep> id ( ) == event . get <identifiersep> bundle ( ) . get <identifiersep> bundle <identifiersep> id ( ) ) { \n \t3 if ( event . get <identifiersep> type ( ) == blueprint <identifiersep> event . created ) { \n \t4 try { \n <ect>
\t1 return true \n @ os <identifiersep> family <identifiersep> impl ( os <identifiersep> family = os <identifiersep> family <identifiersep> impl . default ) \n class data <identifiersep> node <identifiersep> default ( data <identifiersep> node ) : \n def pre <identifiersep> upgrade <identifiersep> restart ( self , env , upgrade <identifiersep> type = none ) : \n <ect>
\t1 { \n \t2  <identifiersep> log . warn ( build <identifiersep> log <identifiersep> message ( method , <string_literal> , build <identifiersep> error <identifiersep> message ( ex ) , wire <identifiersep> attrs , request <identifiersep> context ) , ex ) ; } \n \t1 else \n \t1 { \n <ect>
\t7 break ; } } } } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . debug ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t2 if ( ! in ) { \n <ect>
\t5 set <identifiersep> follower ( null ) ; \n \t5 update <identifiersep> server <identifiersep> state ( ) ; } \n \t5 break ; \n \t4 case leading : \n <ect>
\t3 logger . error ( <string_literal> , t ) ; } \n \t2 try { \n \t3 this . server . stop ( ) ; } \n \t2 catch ( throwable t ) { \n <ect>
<comment> \n \t1 private void run <identifiersep> election ( int rounds ) throws exception { \n \t2 concurrent <identifiersep> hash <identifiersep> map < long , hash <identifiersep> set < integer > > quora = \n \t3 new concurrent <identifiersep> hash <identifiersep> map < long , hash <identifiersep> set < integer > > ( ) ; \n <ect>
\t4 case status . status <identifiersep> rolling <identifiersep> back : \n \t5 log . debug ( <string_literal> ) ; \n \t5 break ; \n \t4 case status . status <identifiersep> unknown : \n <ect>
\t1 try { \n \t1 if ( hive <identifiersep> conf . get <identifiersep> boolean ( conf <identifiersep> vars . hive <identifiersep> server2 <identifiersep> xsrf <identifiersep> filter <identifiersep> enabled . varname , false ) ) { \n \t2 boolean continue <identifiersep> processing = utils . do <identifiersep> xsrf <identifiersep> filter ( request , response , null , null ) ; \n \t2 if ( ! continue <identifiersep> processing ) { \n <ect>
\t1 map < string , string > view <identifiersep> configs = new hash <identifiersep> map < > ( ) ; \n \t1 string key <identifiersep> values = context . get <identifiersep> properties ( ) . get ( view <identifiersep> config <identifiersep> property <identifiersep> name ) ; \n \t1 log . debug ( <string_literal> , view <identifiersep> config <identifiersep> property <identifiersep> name , key <identifiersep> values ) ; \n \t1 if ( strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( key <identifiersep> values ) ) { \n <ect>
\t2 synchronized ( cache <identifiersep> lock ) { \n \t3 if ( added <identifiersep> job <identifiersep> graphs . contains ( job <identifiersep> id ) ) { \n \t4 job <identifiersep> graphs <identifiersep> in <identifiersep> zoo <identifiersep> keeper . release <identifiersep> and <identifiersep> try <identifiersep> remove ( path ) ; \n \t4 added <identifiersep> job <identifiersep> graphs . remove ( job <identifiersep> id ) ; } } \n <ect>
\t3 <comment> \n \t3 item = group <identifiersep> item . class . cast ( item ) . get <identifiersep> base <identifiersep> item ( ) ; } \n \t2 string table = sql <identifiersep> tables . get ( item <identifiersep> name ) ; \n \t2 if ( table == null ) { \n <ect>
\t3 string saved <identifiersep> connection <identifiersep> file = get <identifiersep> extension <identifiersep> file <identifiersep> path ( ) ; \n \t3 saved <identifiersep> connection <identifiersep> container saved <identifiersep> connection <identifiersep> container = mapper . read <identifiersep> value ( new file ( saved <identifiersep> connection <identifiersep> file ) , saved <identifiersep> connection <identifiersep> container . class ) ; \n \t3 saved <identifiersep> connection <identifiersep> container . set <identifiersep> saved <identifiersep> connections ( new <identifiersep> saved <identifiersep> conns ) ; \n <ect>
\t3 transaction . set <identifiersep> request ( request ) ; \n \t3 try { \n \t4 transaction . execute ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
<comment> \n \t1 private static input <identifiersep> stream to <identifiersep> input <identifiersep> stream ( exec <identifiersep> result exec <identifiersep> result ) throws file <identifiersep> not <identifiersep> found <identifiersep> exception { \n \t2 if ( exec <identifiersep> result == null ) { \n <ect>
\t4 <comment> \n \t4 install ( new servlet <identifiersep> module ( ) ) ; \n \t4 <comment> \n \t4 if ( module != null ) { \n <ect>
\t4 if (  <identifiersep> network <identifiersep> general <identifiersep> helper . send <identifiersep> commands <identifiersep> to <identifiersep> router ( router , cmds ) ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + ip + <string_literal> + network ) ; \n \t5 return true ; \n \t4 } else { \n <ect>
\t1 public string get <identifiersep> description ( ) { \n \t2 return <string_literal> ; } \n \t1 @ override \n \t1 public synchronized string get ( string path ) { \n <ect>
\t7 srv . get <identifiersep> port ( ) \n \t6 ) ; } \n \t4 catch ( parse <identifiersep> exception e ) \n \t4 { \n <ect>
\t5 delete <identifiersep> single <identifiersep> ticket ( ticket <identifiersep> id ) ; \n \t5 return null ; } \n \t4 return result ; } \n \t2 } catch ( final exception e ) { \n <ect>
\t1 packer . unpack32values ( byte <identifiersep> buffer . wrap ( packed ) , 0 , unpacked , 0 ) ; } \n private void pack <identifiersep> unpack32 ( byte <identifiersep> packer <identifiersep> for <identifiersep> long packer , long [ ] values , long [ ] unpacked ) { \n \t1 byte [ ] packed = new byte [ packer . get <identifiersep> bit <identifiersep> width ( ) * <number_literal> ] ; \n \t1 packer . pack32values ( values , 0 , packed , 0 ) ; \n <ect>
\t2 class source <identifiersep> class ; \n \t2 try { \n \t2 source <identifiersep> class = class . for <identifiersep> name ( class <identifiersep> name ) ; \n \t2 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t4 if ( notification . get <identifiersep> event <identifiersep> type ( ) == notification . add ) { \n \t5 m <identifiersep> device < ? > m <identifiersep> device = ( m <identifiersep> device < ? > ) notification . get <identifiersep> new <identifiersep> value ( ) ; \n \t5 add <identifiersep> m <identifiersep> device ( m <identifiersep> device , m <identifiersep> device . get <identifiersep> uid ( ) , null ) ; \n \t4 } else if ( notification . get <identifiersep> event <identifiersep> type ( ) == notification . add <identifiersep> many ) { \n <ect>
\t1 init <identifiersep> check <identifiersep> point <identifiersep> settings ( ) ; \n \t1 start <identifiersep> monitor <identifiersep> thread ( ) ; } \n private void init <identifiersep> check <identifiersep> point <identifiersep> settings ( ) { \n \t1 check <identifiersep> point <identifiersep> extension = log <identifiersep> feeder <identifiersep> props . get <identifiersep> check <identifiersep> point <identifiersep> extension ( ) ; \n <ect>
\t3 ( ( lifecycle ) session <identifiersep> id <identifiersep> generator ) . start ( ) ; \n \t2 } else { \n \t3 <comment> \n <ect>
<comment> \n \t1 void receive <identifiersep> session <identifiersep> request ( remote <identifiersep> host <identifiersep> id from , udp <identifiersep> packet <identifiersep> reader reader ) { \n \t2 if ( ! transport <identifiersep> util . is <identifiersep> valid <identifiersep> port ( from . get <identifiersep> port ( ) ) || !  <identifiersep> transport . is <identifiersep> valid ( from . get <identifiersep> ip ( ) ) ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n <ect>
\t1 synchronized ( lock ) { \n \t1 if ( initialized && ! running ) { \n \t2 reporter . start ( period , time <identifiersep> unit . seconds ) ; \n \t2 running = true ; \n <ect>
\t3 case simulator <identifiersep> db : \n \t4 if ( s <identifiersep> simulator <identifiersep> ds != null ) { \n \t5  <identifiersep> conn = s <identifiersep> simulator <identifiersep> ds . get <identifiersep> connection ( ) ; \n \t4 } else { \n <ect>
\t1 public void process <identifiersep> binding <identifiersep> configuration ( string context , item item , string binding <identifiersep> config ) \n \t3 throws binding <identifiersep> config <identifiersep> parse <identifiersep> exception { \n \t2 super . process <identifiersep> binding <identifiersep> configuration ( context , item , binding <identifiersep> config ) ; \n \t2 if ( binding <identifiersep> config == null || item == null ) { \n <ect>
\t1 return new fixed <identifiersep> service <identifiersep> instance <identifiersep> set ( ) ; } \n @ override \n public void register <identifiersep> state <identifiersep> change <identifiersep> listener ( final service <identifiersep> instance <identifiersep> state <identifiersep> change <identifiersep> listener listener ) throws io <identifiersep> exception { \n \t1 <comment> \n <ect>
<number_literal> access <identifiersep> control <identifiersep> context ) ; } \n \t2 catch ( privileged <identifiersep> action <identifiersep> exception x ) \n \t2 { \n \t3 throwable e = x . get <identifiersep> cause ( ) ; \n <ect>
\t4 cms . get <identifiersep> request <identifiersep> context ( ) . set <identifiersep> site <identifiersep> root ( <string_literal> ) ; \n \t4 cms <identifiersep> resource element = cms . read <identifiersep> resource ( m <identifiersep> resource <identifiersep> search . get <identifiersep> value ( ) ) ; \n \t4 settings . set <identifiersep> element <identifiersep> resource ( element ) ; \n \t3 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 if ( from == null ||  <identifiersep> context . router <identifiersep> hash ( ) . equals ( from ) ) { \n \t4  <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , 1 ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t4 throw new sql <identifiersep> exception ( <string_literal> + prop <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) \n \t6 + <string_literal> , e ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 throw new sql <identifiersep> exception ( <string_literal> + prop <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; } \n <ect>
\t3 for ( tuple2 < kafka <identifiersep> topic <identifiersep> partition , long > kafka <identifiersep> offset : union <identifiersep> offset <identifiersep> states . get ( ) ) { \n \t4 restored <identifiersep> state . put ( kafka <identifiersep> offset . f0 , kafka <identifiersep> offset . f1 ) ; } \n \t3 log . info ( <string_literal> , restored <identifiersep> state ) ; \n \t2 } else { \n <ect>
\t1 distributed <identifiersep> cache . add <identifiersep> cache <identifiersep> file ( dataset <identifiersep> path . to <identifiersep> uri ( ) , conf ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 distributed <identifiersep> cache . add <identifiersep> cache <identifiersep> file ( forest <identifiersep> path . to <identifiersep> uri ( ) , conf ) ; \n \t1 job job = new job ( conf , <string_literal> ) ; \n <ect>
\t1 log . info ( <string_literal> ) ; } \n @ override \n public size size <identifiersep> of ( object key , object value , object container ) { \n \t1 try { \n <ect>
\t1 public plc <identifiersep> logo <identifiersep> memory <identifiersep> config ( string memory ) throws binding <identifiersep> config <identifiersep> parse <identifiersep> exception { \n \t2 string [ ] memparts = memory . split ( <string_literal> ) ; \n \t2 block = memparts [ 0 ] ; \n \t2 if ( block . length ( ) < <number_literal> ) { \n <ect>
\t1 service s = null ; \n \t1 try { \n \t1 s = c . get <identifiersep> service ( svc ) ; \n \t1 } catch ( service <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 string client <identifiersep> id = api <identifiersep> util . get <identifiersep> created <identifiersep> id ( create ) ; \n \t3 create . close ( ) ; \n \t3 get <identifiersep> cleanup ( realm <identifiersep> name ) . add <identifiersep> client <identifiersep> uuid ( client <identifiersep> id ) ; \n \t3 log . debugf ( <string_literal> , client . get <identifiersep> client <identifiersep> id ( ) , client <identifiersep> id ) ; } \n <ect>
\t4 if ( field . type == persistent <identifiersep> library <identifiersep> kind : : class . java ) { \n \t5 field . is <identifiersep> accessible = true \n \t5 field . set ( modifiable <identifiersep> model , null ) \n \t5 return } } \n <ect>
\t2 if ( upd <identifiersep> cnt != 1 ) { \n \t2 log . error ( <string_literal> + user + <string_literal> + cq <identifiersep> id + <string_literal> + upd <identifiersep> cnt ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 db <identifiersep> conn . rollback ( ) ; } \n <ect>
\t3 orc <identifiersep> record <identifiersep> updater . get <identifiersep> current <identifiersep> transaction ( next <identifiersep> record ( ) ) , \n \t3 orc <identifiersep> record <identifiersep> updater . get <identifiersep> operation ( next <identifiersep> record ( ) ) == orc <identifiersep> record <identifiersep> updater . delete <identifiersep> operation ) ; \n \t2 <comment> \n \t2 if ( get <identifiersep> max <identifiersep> key ( ) != null && get <identifiersep> key ( ) . compare <identifiersep> row ( get <identifiersep> max <identifiersep> key ( ) ) > 0 ) { \n <ect>
\t3 logger . error ( <string_literal> , item <identifiersep> name , e1 ) ; \n \t3 return false ; } \n \t2 final string command <identifiersep> value = create <identifiersep> command ( item , command ) ; \n \t2 if ( command <identifiersep> value == null ) { \n <ect>
\t2 this ( uri , 1 ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> init ( route route ) { \n \t2 ensure <identifiersep> election <identifiersep> is <identifiersep> created ( ) ; \n <ect>
\t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception ex ) { \n \t3 logger . error ( <string_literal> , algorithm <identifiersep> name , \n \t4 get <identifiersep> name ( ) , get <identifiersep> x <identifiersep> class <identifiersep> reference ( ) , ex ) ; \n \t2 } catch ( null <identifiersep> pointer <identifiersep> exception ex ) { \n <ect>
\t3 attempt <identifiersep> item <identifiersep> advance <identifiersep> final ( role . step1 , false ) ; \n \t3 context <identifiersep> reload ( ) ; \n \t2 } catch ( exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t4 thrift <identifiersep> services . add ( ( thrift <identifiersep> service <identifiersep> metadata ) result ) ; } \n \t3 <comment> \n \t3 include <identifiersep> map . remove ( result ) ; } \n \t2 if ( load <identifiersep> errors ) { \n <ect>
\t1 public synchronized void on <identifiersep> metadata ( bucket metadata , client <identifiersep> put <identifiersep> state state , client <identifiersep> context context ) { \n \t2 if ( generator == state ) { \n \t3 cb . on <identifiersep> metadata ( metadata , this , context ) ; \n \t2 } else { \n <ect>
\t2 graph <identifiersep> builder graph <identifiersep> builder = add <identifiersep> ontology <identifiersep> paths ( graph ) ; \n \t2 long time <identifiersep> add <identifiersep> ontology <identifiersep> paths = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 elapsed <identifiersep> time <identifiersep> sec = ( time <identifiersep> add <identifiersep> ontology <identifiersep> paths - time <identifiersep> combine <identifiersep> patterns ) / 1000f ; \n \t2 logger . info ( <string_literal> + elapsed <identifiersep> time <identifiersep> sec + <string_literal> ) ; \n <ect>
\t6  <identifiersep> get = new eep <identifiersep> get (  <identifiersep> context , 1 ,  <identifiersep> update <identifiersep> file ,  <identifiersep> xpi2p <identifiersep> url , false ) ; \n \t5  <identifiersep> get . add <identifiersep> status <identifiersep> listener ( plugin <identifiersep> update <identifiersep> runner . this ) ; \n \t5  <identifiersep> get . fetch ( connect <identifiersep> timeout , - 1 , should <identifiersep> proxy ? inactivity <identifiersep> timeout : noproxy <identifiersep> inactivity <identifiersep> timeout ) ; \n \t4 } catch ( throwable t ) { \n <ect>
\t4 timeout <identifiersep> info <identifiersep> holder . action ( ) , timeout <identifiersep> info <identifiersep> holder . node ( ) , request <identifiersep> id ) ; \n \t3 action = timeout <identifiersep> info <identifiersep> holder . action ( ) ; \n \t3 source <identifiersep> node = timeout <identifiersep> info <identifiersep> holder . node ( ) ; \n \t2 } else { \n <ect>
\t4 if ( configuration <identifiersep> properties . is <identifiersep> main <identifiersep> run <identifiersep> controller ( ) ) { \n \t5 camel <identifiersep> main <identifiersep> run <identifiersep> controller controller = new camel <identifiersep> main <identifiersep> run <identifiersep> controller ( application <identifiersep> context , camel <identifiersep> context ) ; \n \t5 if ( configuration <identifiersep> properties . get <identifiersep> duration <identifiersep> max <identifiersep> messages ( ) > 0 || configuration <identifiersep> properties . get <identifiersep> duration <identifiersep> max <identifiersep> idle <identifiersep> seconds ( ) > 0 ) { \n \t6 if ( configuration <identifiersep> properties . get <identifiersep> duration <identifiersep> max <identifiersep> messages ( ) > 0 ) { \n <ect>
\t2 groovy <identifiersep> recognizer parser = get <identifiersep> groovy <identifiersep> parser ( src , source <identifiersep> buffer ) ; \n \t2 try { \n \t3 parser . compilation <identifiersep> unit ( ) ; \n \t2 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error e ) { \n <ect>
\t4 try { \n \t5 this . inet <identifiersep> network <identifiersep> range = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( network ) ; \n \t5 logger . debug ( <string_literal> , this . inet <identifiersep> network <identifiersep> range . to <identifiersep> string ( ) ) ; \n \t4 } catch ( final unknown <identifiersep> host <identifiersep> exception e ) { \n <ect>
\t2 right <identifiersep> led . set <identifiersep> position ( dual <identifiersep> button <identifiersep> device <identifiersep> position . right ) ; \n \t2 right <identifiersep> led . set <identifiersep> uid ( get <identifiersep> uid ( ) ) ; \n \t2 string sub <identifiersep> id <identifiersep> right <identifiersep> led = <string_literal> ; \n \t2 right <identifiersep> led . set <identifiersep> sub <identifiersep> id ( sub <identifiersep> id <identifiersep> right <identifiersep> led ) ; \n <ect>
\t4 print <identifiersep> results ( hits ) ; } \n \t3 private void print <identifiersep> results ( hits hits ) { \n \t4 log . debug ( <string_literal> + hits . get <identifiersep> number <identifiersep> of <identifiersep> hits ( ) ) ; \n \t4 for ( int i = 0 ; i < hits . get <identifiersep> number <identifiersep> of <identifiersep> hits ( ) ; i ++ ) { \n <ect>
\t4 <comment> \n \t3 if ( dao != null ) { \n \t4 dao . shutdown ( ) ; } } \n \t2 catch ( exception e ) { \n <ect>
\t2 cookie += <string_literal> + path + <string_literal> ; } \n \t1 if ( domain ) { \n \t2 cookie += <string_literal> + domain + <string_literal> ; } \n \t1 cookie += <string_literal> + new date ( expire <identifiersep> date <identifiersep> in <identifiersep> milliseconds ) . to <identifiersep> gmt <identifiersep> string ( ) ; \n <ect>
\t2 if ( value < min <identifiersep> pref <identifiersep> value ) { \n \t2 min <identifiersep> pref <identifiersep> value = value ; } } \n \t1 if ( ++ current <identifiersep> count % <number_literal> == 0 ) { \n \t2 log . info ( <string_literal> , current <identifiersep> count ) ; } } \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 barrier . await ( ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t6 stream = wrapping . content <identifiersep> input <identifiersep> stream ( ) ; \n \t6  <identifiersep> content . write <identifiersep> bytes ( stream , length ) ; \n \t6 wrapping . set <identifiersep> content <identifiersep> stream ( null , 0 , 0l ) ; \n \t5 } finally { \n <ect>
\t2 logger . debug ( <string_literal> ) \n \t2 opener = build <identifiersep> opener ( proxy <identifiersep> handler , https <identifiersep> handler ) \n \t1 else : \n \t2 opener = build <identifiersep> opener ( https <identifiersep> handler ) \n <ect>
\t1 public void execute ( final event event ) throws homematic <identifiersep> client <identifiersep> exception { \n \t2 double delay = event . get <identifiersep> delay ( ) ; \n \t2 if ( delay > 0 . 0 ) { \n \t3 synchronized ( this ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 if ( security <identifiersep> provider != null ) { \n \t4 if ( is <identifiersep> debug ) { \n <ect>
\t5 if ( string <identifiersep> utils . has <identifiersep> length ( locale ) ) { \n \t6 try { \n \t7 default <identifiersep> locale <identifiersep> cache = from <identifiersep> specification ( locale ) ; } \n \t6 catch ( exception t ) { \n <ect>
\t6 attribute = properties [ 0 ] ; } } \n \t4 where <identifiersep> conditions . add ( <string_literal> + attribute + t5 + attribute ) ; \n \t4 inner <identifiersep> fields . add ( <string_literal> + attribute ) ; \n \t3 } else { \n <ect>
\t4 throw new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n \t3 parent . release <identifiersep> lease ( ) ; \n \t3 active = false ; \n <ect>
\t2 int task <identifiersep> manager <identifiersep> count = cluster <identifiersep> specification . get <identifiersep> number <identifiersep> task <identifiersep> managers ( ) ; \n \t2 int job <identifiersep> manager <identifiersep> memory <identifiersep> mb = cluster <identifiersep> specification . get <identifiersep> master <identifiersep> memory <identifiersep> mb ( ) ; \n \t2 int task <identifiersep> manager <identifiersep> memory <identifiersep> mb = cluster <identifiersep> specification . get <identifiersep> task <identifiersep> manager <identifiersep> memory <identifiersep> mb ( ) ; \n \t2 if ( job <identifiersep> manager <identifiersep> memory <identifiersep> mb < min <identifiersep> jm <identifiersep> memory ) { \n <ect>
\t1 boolean acquired = false ; \n \t1 try { \n \t1 acquired = m <identifiersep> semaphore . try <identifiersep> acquire ( m <identifiersep> timeout , time <identifiersep> unit . milliseconds ) ; \n \t1 } catch ( interrupted <identifiersep> exception interrupted <identifiersep> exception ) { \n <ect>
\t4 try { \n \t5 stream = io <identifiersep> utils . to <identifiersep> input <identifiersep> stream ( body , <string_literal> ) ; \n \t4 } catch ( io <identifiersep> exception ioe ) { \n \t5 logger . warn ( <string_literal> , ioe ) ; \n <ect>
\t3 data . texture <identifiersep> meta = ( texture <identifiersep> metadata <identifiersep> section ) iresource . get <identifiersep> metadata ( <string_literal> ) ; \n \t3 data . animation <identifiersep> meta = ( animation <identifiersep> metadata <identifiersep> section ) iresource . get <identifiersep> metadata ( <string_literal> ) ; \n \t3 return data ; \n \t2 } catch ( throwable t ) { \n <ect>
\t3 synchronized ( listener ) { \n \t4 try { \n \t5 listener . wait ( timeout <identifiersep> in <identifiersep> milliseconds ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private static logger log = logger . get <identifiersep> logger ( converter . class ) ; \n \t1 protected void process <identifiersep> error ( document xml ) { \n \t2 string error <identifiersep> message = xml <identifiersep> errors . get <identifiersep> error <identifiersep> message ( xml ) ; \n <ect>
<comment> \n \t1 protected void report <identifiersep> size <identifiersep> limit <identifiersep> exceeded ( final size <identifiersep> limit <identifiersep> exceeded <identifiersep> exception e , validator validator ) { \n \t2 validator . add ( new i18n <identifiersep> message ( <string_literal> , <string_literal> , e . get <identifiersep> actual <identifiersep> size ( ) , e . get <identifiersep> permitted <identifiersep> size ( ) ) ) ; \n <ect>
\t1 protected void update <identifiersep> secondary <identifiersep> host ( final host <identifiersep> vo host , final startup <identifiersep> storage <identifiersep> command startup , \n \t3 final host . type type ) throws agent <identifiersep> authn <identifiersep> exception { \n \t2 string zone <identifiersep> token = startup . get <identifiersep> data <identifiersep> center ( ) ; \n \t2 if ( zone <identifiersep> token == null ) { \n <ect>
\t3 } finally { \n \t4 try { \n \t5 file <identifiersep> utils . delete <identifiersep> directory ( temp <identifiersep> dir . to <identifiersep> file ( ) ) ; \n \t4 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t4 request . set <identifiersep> state ( <string_literal> ) ; \n \t4 return request ; } \n \t3 throw new ec2service <identifiersep> exception ( server <identifiersep> error . internal <identifiersep> error , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 for ( entry < object , object > entry : props . entry <identifiersep> set ( ) ) { \n \t6 string key = ( string ) entry . get <identifiersep> key ( ) ; \n \t6 string value = ( string ) entry . get <identifiersep> value ( ) ; \n \t6 if ( key <identifiersep> to <identifiersep> resources . contains <identifiersep> key ( key ) ) { \n <ect>
\t2 grid <identifiersep> node primary = f . first ( dht <identifiersep> nodes ) ; \n \t2 assert primary != null ; \n \t2 if ( ! primary . id ( ) . equals ( ctx . node <identifiersep> id ( ) ) ) { \n <ect>
private pattern pattern ; \n @ override \n protected object get <identifiersep> pre <identifiersep> authenticated <identifiersep> principal ( final http <identifiersep> servlet <identifiersep> request http <identifiersep> request ) { \n \t1 string username = http <identifiersep> request . get <identifiersep> user <identifiersep> principal ( ) == null ? null : http <identifiersep> request . get <identifiersep> user <identifiersep> principal ( ) . get <identifiersep> name ( ) ; \n <ect>
\t7 phones <identifiersep> list . add ( number \n \t8 + <string_literal> + get <identifiersep> localized <identifiersep> phone <identifiersep> number ( d ) + <string_literal> ) ; } } } } \n \t3 catch ( throwable t ) \n \t3 { \n <ect>
\t2 val task = running <identifiersep> tasks . get ( execution <identifiersep> id ) \n \t2 if ( task != null ) { \n \t3 task . fail <identifiersep> externally ( cause ) \n \t2 } else { \n <ect>
\t1 log <identifiersep> factory . get <identifiersep> log ( log <identifiersep> on <identifiersep> failure <identifiersep> handler . class . get <identifiersep> name ( ) ) ; \n static final validation <identifiersep> failure <identifiersep> handler instance = new log <identifiersep> on <identifiersep> failure <identifiersep> handler ( ) ; \n @ override \n public boolean handle ( validation <identifiersep> context context ) throws validation <identifiersep> exception { \n <ect>
\t2 for ( table <identifiersep> definition table : database . get <identifiersep> tables ( schema ) ) { \n \t3 try { \n \t4 generate <identifiersep> table ( schema , table ) ; } \n \t3 catch ( exception e ) { \n <ect>
\t1 public static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( java <identifiersep> runtime <identifiersep> configuration <identifiersep> plugin . class ) ; \n \t1 private java <identifiersep> runtime <identifiersep> configuration <identifiersep> broker runtime <identifiersep> configuration <identifiersep> broker ; \n \t1 @ override \n \t1 public broker install <identifiersep> plugin ( broker broker ) throws exception { \n <ect>
fun broadcast <identifiersep> file <identifiersep> sync ( broadcast <identifiersep> manager : local <identifiersep> broadcast <identifiersep> manager ) { \n \t1 log . info ( tag , <string_literal> ) \n \t1 broadcast <identifiersep> manager . send <identifiersep> broadcast ( intent ( constants . broadcast <identifiersep> file <identifiersep> sync ) ) } \n fun broadcast <identifiersep> file <identifiersep> sync <identifiersep> start ( broadcast <identifiersep> manager : local <identifiersep> broadcast <identifiersep> manager ) { \n <ect>
\t5 s <identifiersep> conn <identifiersep> logger . trace ( <string_literal> + system . identity <identifiersep> hash <identifiersep> code (  <identifiersep> conn ) ) ; } \n \t4  <identifiersep> conn . close ( ) ; \n \t4  <identifiersep> conn = null ; } \n \t2 } catch ( final sql <identifiersep> exception e ) { \n <ect>
\t5 servlet <identifiersep> ops . response <identifiersep> send <identifiersep> error ( response , ex . get <identifiersep> response <identifiersep> code ( ) ) ; \n \t4 else \n \t5 servlet <identifiersep> ops . response <identifiersep> send <identifiersep> error ( response , ex . get <identifiersep> response <identifiersep> code ( ) , ex . get <identifiersep> message ( ) ) ; \n \t3 } catch ( runtime <identifiersep> io <identifiersep> exception ex ) { \n <ect>
\t4 return ( t ) app <identifiersep> context . get <identifiersep> bean ( name ) ; \n \t3 } else { \n \t4 return null ; } } \n \t2 catch ( beans <identifiersep> exception e ) { \n <ect>
public get <identifiersep> screen <identifiersep> state ( string mapped <identifiersep> uri ) { \n \t1 super ( mapped <identifiersep> uri ) ; } \n @ override \n public response safe <identifiersep> handle ( http <identifiersep> request request ) throws json <identifiersep> exception { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 for ( string contig : lifted <identifiersep> by <identifiersep> dest <identifiersep> contig . key <identifiersep> set ( ) ) { \n \t3 log . info ( contig , <string_literal> , lifted <identifiersep> by <identifiersep> dest <identifiersep> contig . get ( contig ) ) ; } \n \t2 if ( lifted <identifiersep> by <identifiersep> dest <identifiersep> contig . is <identifiersep> empty ( ) ) { \n <ect>
\t2 if ( fatals == null ) { \n \t3 fatals = new array <identifiersep> deque < > ( ) ; \n \t3 exchange . set <identifiersep> property ( exchange . fatal <identifiersep> fallback <identifiersep> error <identifiersep> handler , fatals ) ; } \n \t2 if ( fatals . contains ( id ) ) { \n <ect>
<number_literal> node . get <identifiersep> node <identifiersep> id ( ) , endpoint <identifiersep> command <identifiersep> class . get <identifiersep> command <identifiersep> class ( ) . get <identifiersep> label ( ) ) ; \n \t10 z <identifiersep> wave <identifiersep> command <identifiersep> class <identifiersep> initialization zcci2 = ( z <identifiersep> wave <identifiersep> command <identifiersep> class <identifiersep> initialization ) endpoint <identifiersep> command <identifiersep> class ; \n \t10 add <identifiersep> to <identifiersep> queue ( zcci2 . initialize ( stage <identifiersep> advanced ) , endpoint <identifiersep> command <identifiersep> class , \n <number_literal> endpoint . get <identifiersep> endpoint <identifiersep> id ( ) ) ; } } } } } \n <ect>
\t1 transactions . save ( vol <identifiersep> info . with <identifiersep> san <identifiersep> volume <identifiersep> id ( san <identifiersep> volume <identifiersep> id ) . with <identifiersep> size ( size ) ) ; \n \t1 } catch ( exception ex ) { \n \t1 log . warn ( <string_literal> + volume <identifiersep> id , ex ) ; \n \t1 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> + volume <identifiersep> id , ex ) ; } \n <ect>
\t1 @ reflection <identifiersep> use \n \t1 private pair < job <identifiersep> info . status , string > orchestrate <identifiersep> start ( final vm <identifiersep> work <identifiersep> start work ) throws exception { \n \t2 final vm <identifiersep> instance <identifiersep> vo vm =  <identifiersep> entity <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( vm <identifiersep> instance <identifiersep> vo . class , work . get <identifiersep> vm <identifiersep> id ( ) ) ; \n \t2 if ( vm == null ) { \n <ect>
public static boolean use <identifiersep> get <identifiersep> put <identifiersep> on <identifiersep> copy ( ) { \n \t1 try { \n \t1 return configuration <identifiersep> cache . get <identifiersep> configuration ( object <identifiersep> storage <identifiersep> global <identifiersep> configuration . class ) . get <identifiersep> do <identifiersep> get <identifiersep> put <identifiersep> on <identifiersep> copy <identifiersep> fail ( ) ; \n \t1 } catch ( throwable f ) { \n <ect>
\t3 string key = <string_literal> ; \n \t3 content <identifiersep> object result = get <identifiersep> handle . get ( content <identifiersep> name . from <identifiersep> native ( key ) , <number_literal> ) ; \n \t3 assert . assert <identifiersep> true ( <string_literal> , result == null ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 if ( stt == null || stt . is <identifiersep> expired ( ) ) { \n \t6 logger . warn ( <string_literal> , sts ) ; \n \t6 return null ; } \n \t5 if ( stt . get <identifiersep> security <identifiersep> token ( ) . is <identifiersep> expired ( ) ) { \n <ect>
\t1 public boolean supports ( final set < authentication <identifiersep> handler > handlers , final authentication <identifiersep> transaction transaction ) { \n \t2 final service service = transaction . get <identifiersep> service ( ) ; \n \t2 if ( service != null ) { \n \t3 final registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n <ect>
\t5 } else { \n \t6 mod . set <identifiersep> download <identifiersep> url ( null ) ; \n \t6 mod . set <identifiersep> update <identifiersep> version ( null ) ; } } \n \t4 catch ( module <identifiersep> exception e ) { \n <ect>
\t2 { \n \t3 logger . error ( <string_literal> , e ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> method <identifiersep> error e ) \n \t2 { \n <ect>
\t3 xs <identifiersep> local <identifiersep> network public <identifiersep> nic = null ; \n \t3 if (  <identifiersep> public <identifiersep> network <identifiersep> name != null && !  <identifiersep> public <identifiersep> network <identifiersep> name . equals (  <identifiersep> guest <identifiersep> network <identifiersep> name ) ) { \n \t4 public <identifiersep> nic = get <identifiersep> network <identifiersep> by <identifiersep> name ( conn ,  <identifiersep> public <identifiersep> network <identifiersep> name ) ; \n \t4 if ( public <identifiersep> nic == null ) { \n <ect>
\t4 <string_literal> + attempt ) ; } \n \t2 break ; \n \t2 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception ece ) { \n \t2 ex = ece ; \n <ect>
\t6 { \n \t7 registration <identifiersep> lock . notify <identifiersep> all ( ) ; } } \n \t5 catch ( exception e ) \n \t5 { \n <ect>
\t7 throw new collada <identifiersep> parse <identifiersep> exception ( <string_literal> ) ; } \n \t6 if ( <string_literal> . equals ( vertex <identifiersep> weights <identifiersep> input . semantic ) ) { \n \t7 md5weight . joint <identifiersep> index = index ; \n \t7 vertex <identifiersep> weights <identifiersep> joint <identifiersep> name <identifiersep> array [ vertex <identifiersep> weights <identifiersep> index ] = joint <identifiersep> name <identifiersep> array [ index ] ; \n <ect>
\t3 try { \n \t4 final certificate [ ] certs = sslsession . get <identifiersep> peer <identifiersep> certificates ( ) ; \n \t4 final x509certificate x509 = ( x509certificate ) certs [ 0 ] ; \n \t4 final x500principal peer = x509 . get <identifiersep> subject <identifiersep> x500principal ( ) ; \n <ect>
\t3 <comment> \n \t3 http <identifiersep> server <identifiersep> bootstrap <identifiersep> factory factory = get <identifiersep> component ( ) . get <identifiersep> or <identifiersep> create <identifiersep> http <identifiersep> netty <identifiersep> server <identifiersep> bootstrap <identifiersep> factory ( answer ) ; \n \t3 <comment> \n \t3 answer . set <identifiersep> netty <identifiersep> server <identifiersep> bootstrap <identifiersep> factory ( factory ) ; \n <ect>
<comment> \n \t1 private abstract <identifiersep> node find <identifiersep> node <identifiersep> by <identifiersep> uuid ( final security <identifiersep> context security <identifiersep> context , final string uuid ) throws framework <identifiersep> exception { \n \t2 if ( ! uuid . is <identifiersep> empty ( ) ) { \n <ect>
\t4 { \n \t5 logger . warn ( <string_literal> + node . get <identifiersep> node <identifiersep> name ( ) ) ; } } } \n \t2 catch ( io <identifiersep> exception exc ) \n \t2 { \n <ect>
\t4 segment <identifiersep> node <identifiersep> store <identifiersep> stats <identifiersep> m <identifiersep> bean . type , \n \t4 <string_literal> \n \t2 ) ) ; \n \t2 if ( configuration . is <identifiersep> primary <identifiersep> segment <identifiersep> store ( ) ) { \n <ect>
\t2 this . router = router ; } \n \t1 @ override \n \t1 public controller <identifiersep> method translate ( mutable <identifiersep> request request ) { \n \t2 string controller <identifiersep> name = request . get <identifiersep> requested <identifiersep> uri ( ) ; \n <ect>
\t2 for ( election <identifiersep> watcher watcher : watchers ) { \n \t3 try { \n \t4 watcher . election <identifiersep> result <identifiersep> changed ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t7 for ( int i = 1 ; i < vm <identifiersep> ids . length ; i ++ ) { \n \t8 vm <identifiersep> id <identifiersep> log <identifiersep> str = vm <identifiersep> id <identifiersep> log <identifiersep> str + <string_literal> + vm <identifiersep> ids [ i ] ; } } \n \t6 s <identifiersep> logger . info ( <string_literal> + vm <identifiersep> id <identifiersep> log <identifiersep> str ) ; } } \n \t3 } else { \n <ect>
\t2 } catch ( unsatisfied <identifiersep> link <identifiersep> error e ) { \n \t3 logger . error ( <string_literal> , e . get <identifiersep> message ( ) ) ; \n \t3 desirable <identifiersep> xmx = default <identifiersep> xmx <identifiersep> size ; \n \t2 } catch ( sigar <identifiersep> exception e ) { \n <ect>
\t1 this . skip <identifiersep> interpolation <identifiersep> metric <identifiersep> pattern <identifiersep> strings = metrics <identifiersep> conf . get ( timeline <identifiersep> metrics <identifiersep> event <identifiersep> metric <identifiersep> patterns , <string_literal> ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( skip <identifiersep> interpolation <identifiersep> metric <identifiersep> pattern <identifiersep> strings ) ) { \n \t1 for ( string pattern <identifiersep> string : skip <identifiersep> interpolation <identifiersep> metric <identifiersep> pattern <identifiersep> strings . split ( <string_literal> ) ) { \n \t2 string java <identifiersep> pattern <identifiersep> string = h <identifiersep> base <identifiersep> accessor . get <identifiersep> java <identifiersep> regex <identifiersep> from <identifiersep> sql <identifiersep> regex ( pattern <identifiersep> string ) ; \n <ect>
\t2 buffered <identifiersep> image tmp <identifiersep> thumbnail <identifiersep> overlay <identifiersep> image = null ; \n \t2 try { \n \t3 tmp <identifiersep> thumbnail <identifiersep> overlay <identifiersep> image = image <identifiersep> io . read ( fully <identifiersep> played . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( thumbnail <identifiersep> overlay <identifiersep> resource <identifiersep> path ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n \t3 if ( success ) \n \t4  <identifiersep> log . warn ( <string_literal> + port + <string_literal> + addresses . to <identifiersep> string ( ip , external <identifiersep> port ) ) ; \n \t3 else \n <ect>
\t1 string login <identifiersep> name = authentication . get <identifiersep> name ( ) ; <comment> \n \t1 if ( ldap <identifiersep> user <identifiersep> name == null ) { \n \t1 log . warn ( <string_literal> , ldap <identifiersep> server <identifiersep> properties . get <identifiersep> username <identifiersep> attribute ( ) ) ; \n \t1 } else if ( ldap <identifiersep> user <identifiersep> name . is <identifiersep> empty ( ) ) { \n <ect>
\t2 @ override \n \t2 public void on <identifiersep> entry ( ) \n \t2 { \n \t3 membership <identifiersep> manager . add <identifiersep> additional <identifiersep> replication <identifiersep> member ( catching <identifiersep> up <identifiersep> member ) ; \n <ect>
\t6 codec <identifiersep> factory . get <identifiersep> encoder <identifiersep> max <identifiersep> line <identifiersep> length ( ) , codec <identifiersep> factory . get <identifiersep> decoder <identifiersep> max <identifiersep> line <identifiersep> length ( ) ) ; } \n \t2 } else { \n \t3 object <identifiersep> serialization <identifiersep> codec <identifiersep> factory codec <identifiersep> factory = new object <identifiersep> serialization <identifiersep> codec <identifiersep> factory ( ) ; \n \t3 add <identifiersep> codec <identifiersep> factory ( service , codec <identifiersep> factory ) ; \n <ect>
\t3 log . info ( cmd ) ; \n \t2 } catch ( execute <identifiersep> exception e ) { \n \t3 log . info ( <string_literal> + cmd + <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 logger . warn ( <string_literal> ) ; } \n \t2 url = ( string ) config . get ( <string_literal> ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( url ) ) { \n \t3 url = default <identifiersep> url ; \n <ect>
\t2  <identifiersep> executor . submit ( new disconnect <identifiersep> task ( attache , event , true ) ) ; } \n \t1 protected boolean is <identifiersep> host <identifiersep> owner <identifiersep> switched ( final long host <identifiersep> id ) { \n \t2 final host <identifiersep> vo host =  <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( host <identifiersep> id ) ; \n \t2 if ( host == null ) { \n <ect>
\t1 protected static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( camel <identifiersep> context <identifiersep> factory <identifiersep> bean <identifiersep> test . class ) ; \n \t1 protected void assert <identifiersep> valid <identifiersep> context ( camel <identifiersep> context context ) { \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , context ) ; \n \t2 list < route <identifiersep> definition > routes = ( ( model <identifiersep> camel <identifiersep> context ) context ) . get <identifiersep> route <identifiersep> definitions ( ) ; \n <ect>
\t3 try { \n \t4 country <identifiersep> to <identifiersep> continent . load ( location <identifiersep> utils . class \n <number_literal> . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( queue <identifiersep> view != null ) { \n \t4 log . info ( get <identifiersep> jms <identifiersep> destination ( ) + <string_literal> + message <identifiersep> id + <string_literal> + <string_literal> + destination ) ; \n \t4 queue <identifiersep> view . copy <identifiersep> message <identifiersep> to ( message <identifiersep> id , destination ) ; \n \t3 } else { \n <ect>
\t9 catch ( throwable pattern <identifiersep> throwable ) { \n \t10 log . error ( <string_literal> , \n <number_literal> skip <identifiersep> pattern <identifiersep> string , skip <identifiersep> patterns <identifiersep> file , framework , erx <identifiersep> exception <identifiersep> utilities . to <identifiersep> paragraph ( pattern <identifiersep> throwable ) ) ; } } } } \n \t6 catch ( throwable pattern <identifiersep> throwable ) { \n <ect>
\t3 final string enc <identifiersep> value = value . substring ( encrypted <identifiersep> value <identifiersep> prefix . length ( ) ) ; \n \t3 logger . trace ( <string_literal> , enc <identifiersep> value ) ; \n \t3 final string result = this . jasypt <identifiersep> instance . decrypt ( enc <identifiersep> value ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( result ) ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void enable ( ) { \n <ect>
\t3 string inverse <identifiersep> relationship <identifiersep> name = null ; \n \t3 if ( relationship . inverse <identifiersep> relationship ( ) != null ) { \n \t4 inverse <identifiersep> relationship <identifiersep> name = relationship . inverse <identifiersep> relationship ( ) . name ( ) ; } \n \t3 erx <identifiersep> copyable . copy <identifiersep> logger . debug ( <string_literal> + relationship <identifiersep> name ) ; \n <ect>
\t4 final pair < boolean , string > result = ssh <identifiersep> helper . ssh <identifiersep> execute ( control <identifiersep> ip , default <identifiersep> domr <identifiersep> sshport , <string_literal> , get <identifiersep> system <identifiersep> vm <identifiersep> key <identifiersep> file ( ) , null , <string_literal> + args ) ; \n \t5 s <identifiersep> logger . debug ( <string_literal> + control <identifiersep> ip + <string_literal> + args ) ; } \n \t4 if ( ! result . first ( ) ) { \n <ect>
\t9 ctx . new <identifiersep> progressive <identifiersep> promise ( ) ) \n \t9 . add <identifiersep> listener ( completion <identifiersep> listener ) ; \n \t7 } catch ( io <identifiersep> exception e ) { \n \t8 display ( ctx , request , <string_literal> ) ; \n <ect>
\t4 if ( obj instanceof sqoop <identifiersep> job <identifiersep> data <identifiersep> publisher ) { \n \t5 sqoop <identifiersep> job <identifiersep> data <identifiersep> publisher publisher = ( sqoop <identifiersep> job <identifiersep> data <identifiersep> publisher ) obj ; \n \t5 sqoop <identifiersep> job <identifiersep> data <identifiersep> publisher . data data = \n \t7 new sqoop <identifiersep> job <identifiersep> data <identifiersep> publisher . data ( operation , options , table <identifiersep> name , start <identifiersep> time , end <identifiersep> time ) ; \n <ect>
\t4 rs . close ( ) ; } \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 pstmt . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 public void run ( ) { \n \t2 try { \n \t3 history . flush ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 if ( command <identifiersep> line . has <identifiersep> option ( <string_literal> ) ) { \n \t1 string batch <identifiersep> size <identifiersep> string = command <identifiersep> line . get <identifiersep> option <identifiersep> value ( <string_literal> ) ; \n \t1 batch <identifiersep> size = integer . parse <identifiersep> int ( batch <identifiersep> size <identifiersep> string ) ; \n \t1 if ( batch <identifiersep> size < 1 ) { \n <ect>
\t2 try { \n \t2 block <identifiersep> size = integer . parse <identifiersep> int ( block <identifiersep> size <identifiersep> string ) ; \n \t2 logger . info ( <string_literal> + block <identifiersep> size ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t1 public void run ( ) { \n \t2 num <identifiersep> removed <identifiersep> ttl = 0 ; \n \t2 num <identifiersep> removed <identifiersep> lru = 0 ; \n \t2 long cleaner <identifiersep> start <identifiersep> time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t4 if (  <identifiersep> is <identifiersep> android ) \n \t5 dpacket . set <identifiersep> length ( udp <identifiersep> packet . max <identifiersep> packet <identifiersep> size ) ; \n \t4 <comment> \n \t4 <comment> \n <ect>
\t3 update <identifiersep> str += <string_literal> ; } } \n \t2 update <identifiersep> str += <string_literal> + col <identifiersep> names [ 0 ] + <string_literal> + vals [ 0 ] + <string_literal> ; \n \t2 try { \n \t2 string update <identifiersep> vals <identifiersep> str = <string_literal> + manager . escape <identifiersep> table <identifiersep> name ( get <identifiersep> table <identifiersep> name ( ) ) + <string_literal> + update <identifiersep> str ; \n <ect>
\t2 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t2  <identifiersep> disabled <identifiersep> vms . clear ( ) ; } \n \t1 public void disable <identifiersep> scheduler ( boolean disable ) { \n \t2  <identifiersep> scheduler <identifiersep> disabled = disable ; \n <ect>
\t4 listener . log ( request <identifiersep> time , request <identifiersep> description ) ; \n \t4 if ( request <identifiersep> time >  <identifiersep> maximum <identifiersep> request <identifiersep> fatal <identifiersep> time ) { \n \t5 log . error ( <string_literal> , request <identifiersep> time , request <identifiersep> description , trace ) ; } \n \t4 else if ( request <identifiersep> time >  <identifiersep> maximum <identifiersep> request <identifiersep> error <identifiersep> time ) { \n <ect>
\t1 } catch ( access <identifiersep> denied <identifiersep> exception e ) { \n \t1 log . debug ( <string_literal> + contexts . lookup ( ) . get <identifiersep> correlation <identifiersep> id ( ) + <string_literal> ) ; \n \t1 throw e ; \n \t1 } catch ( s3exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + cmd <identifiersep> line ) ; \n \t3 try { \n \t4  <identifiersep> process = runtime . get <identifiersep> runtime ( ) . exec ( cmd <identifiersep> line ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( it . opts . extend <identifiersep> refs == 'fail' ) { \n \t2 throw new error ( '$ref : validation keywords used in schema at path <string_literal> ( see option extend <identifiersep> refs ) ' ) ; \n \t2 } else if ( it . opts . extend <identifiersep> refs != = true ) { \n \t2 $ref <identifiersep> keywords = false ; \n <ect>
\t3 return get <identifiersep> included <identifiersep> pages <identifiersep> internal ( context ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
public void set <identifiersep> customer ( webobjectsexamples . businesslogic . rentals . common . customer value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value ,  <identifiersep> credit <identifiersep> card . customer <identifiersep> key ) ; } \n public void set <identifiersep> customer <identifiersep> relationship ( webobjectsexamples . businesslogic . rentals . common . customer value ) { \n <ect>
\t3 } else { \n \t4 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code + <string_literal> + values . get ( <string_literal> ) + <string_literal> + url ) ; \n \t4  <identifiersep> volume <identifiersep> from <identifiersep> snapshot . set ( values . get ( <string_literal> ) ) ; } \n \t2 } else { \n <ect>
\t3 <comment> \n \t3 int scope <identifiersep> index = ip . index <identifiersep> of ( '%' ) ; \n \t3 if ( scope <identifiersep> index > 0 ) \n \t3 { \n <ect>
\t4 zk <identifiersep> config . ssl <identifiersep> truststore <identifiersep> location ) ; \n \t2 string trust <identifiersep> store <identifiersep> password <identifiersep> prop = system . get <identifiersep> property ( \n \t4 zk <identifiersep> config . ssl <identifiersep> truststore <identifiersep> passwd ) ; \n \t2 if ( trust <identifiersep> store <identifiersep> location <identifiersep> prop == null && trust <identifiersep> store <identifiersep> password <identifiersep> prop == null ) { \n <ect>
\t3 logger . warn ( <string_literal> , e ) ; \n \t2 } catch ( not <identifiersep> compliant <identifiersep> m <identifiersep> bean <identifiersep> exception e ) { \n \t3 logger . warn ( <string_literal> , e ) ; \n \t2 } catch ( instance <identifiersep> already <identifiersep> exists <identifiersep> exception e ) { \n <ect>
\t3 if ( cache <identifiersep> header <identifiersep> time == null ) return result ; \n \t3 return get ( cache <identifiersep> header <identifiersep> time ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception ex ) { \n \t3 logger . trace ( <string_literal> , ex ) ; \n <ect>
\t2 if ( is <identifiersep> mem ( ) ) \n \t3 return true ; \n \t2 file f = new file ( meta <identifiersep> filename ) ; \n \t2 if ( f . is <identifiersep> directory ( ) ) \n <ect>
\t1 @ override \n \t1 @ path ( <string_literal> ) \n \t1 @ produces ( media <identifiersep> type . text <identifiersep> plain ) \n \t1 public int verify <identifiersep> scopes ( ) { \n <ect>
\t1 clean <identifiersep> deleting ( ) ; \n \t1 clean <identifiersep> failed ( ) ; \n \t1 clean <identifiersep> parts ( ) ; \n \t1 } catch ( final throwable f ) { \n <ect>
\t1 public static advice <identifiersep> with <identifiersep> task replace <identifiersep> from ( final route <identifiersep> definition route , final endpoint endpoint ) { \n \t2 return new advice <identifiersep> with <identifiersep> task ( ) { \n \t3 public void task ( ) throws exception { \n \t4 from <identifiersep> definition from = route . get <identifiersep> inputs ( ) . get ( 0 ) ; \n <ect>
\t5 try { \n \t6 document . replace ( offset , 0 , add <identifiersep> message ) ; \n \t5 } catch ( final bad <identifiersep> location <identifiersep> exception e ) { } } \n \t3 } ) ; \n <ect>
\t3 try { \n \t4 openwire <identifiersep> version = is . read <identifiersep> int ( ) ; \n \t3 } catch ( eof <identifiersep> exception expected <identifiersep> on <identifiersep> upgrade ) { \n \t4 openwire <identifiersep> version = open <identifiersep> wire <identifiersep> format . default <identifiersep> legacy <identifiersep> version ; } \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 final string master <identifiersep> node <identifiersep> name = internal <identifiersep> cluster ( ) . start <identifiersep> node ( settings . builder ( ) . put ( node . node <identifiersep> data <identifiersep> setting . get <identifiersep> key ( ) , false ) . put ( node . node <identifiersep> master <identifiersep> setting . get <identifiersep> key ( ) , true ) ) ; \n \t2 assert <identifiersep> that ( internal <identifiersep> cluster ( ) . non <identifiersep> master <identifiersep> client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> state ( ) . nodes ( ) . get <identifiersep> master <identifiersep> node ( ) . get <identifiersep> name ( ) , equal <identifiersep> to ( master <identifiersep> node <identifiersep> name ) ) ; \n \t2 assert <identifiersep> that ( internal <identifiersep> cluster ( ) . master <identifiersep> client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> state ( ) . nodes ( ) . get <identifiersep> master <identifiersep> node ( ) . get <identifiersep> name ( ) , equal <identifiersep> to ( master <identifiersep> node <identifiersep> name ) ) ; \n <ect>
\t2 predicates . < nat <identifiersep> gateway > always <identifiersep> true ( ) , \n \t2 cloud <identifiersep> metadatas . < nat <identifiersep> gateway > to <identifiersep> display <identifiersep> name ( ) \n \t1 ) ; \n \t1 } catch ( final exception e ) { \n <ect>
@ override \n protected class < ? extends output <identifiersep> format > get <identifiersep> output <identifiersep> format <identifiersep> class ( ) \n \t1 throws class <identifiersep> not <identifiersep> found <identifiersep> exception { \n \t1 if ( is <identifiersep> h <identifiersep> cat <identifiersep> job ) { \n <ect>
\t3 throw e ; } \n \t3 break ; \n \t2 default : \n \t3 throw e ; } } \n <ect>
\t4 } else { \n \t5 child <identifiersep> adapter = get <identifiersep> adapter <identifiersep> factory ( ) . adapt <identifiersep> node ( this , property <identifiersep> name , property <identifiersep> value ) ; } \n \t4 if ( child <identifiersep> adapter != null ) \n \t5 new <identifiersep> adapters . add ( child <identifiersep> adapter ) ; \n <ect>
\t3 notify <identifiersep> finish ( perf <identifiersep> test , stop <identifiersep> reason . cancel <identifiersep> by <identifiersep> user ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n \t3 log . error ( <string_literal> , perf <identifiersep> test . get <identifiersep> test <identifiersep> identifier ( ) , e . get <identifiersep> message ( ) ) ; \n <ect>
\t3 ont <identifiersep> mgr . do <identifiersep> import <identifiersep> and <identifiersep> update <identifiersep> cache ( auto <identifiersep> otology <identifiersep> file , encoding ) ; \n \t3 logger . info ( <string_literal> \n \t5 + auto <identifiersep> otology <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 ensure <identifiersep> green ( ) ; \n \t2 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> ) \n \t4 . set <identifiersep> source ( <string_literal> , <string_literal> , <string_literal> , <string_literal> ) . get ( ) ; \n \t2 refresh ( ) ; \n <ect>
\t4 resource = ( url ) i . next ( ) ; \n \t4 log . info ( <string_literal> + resource ) ; \n \t4 parser . parse ( resource ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3 <comment> \n \t3 try { \n \t4 result = compiler . compute ( less <identifiersep> resource <identifiersep> reference , include <identifiersep> skin <identifiersep> style , use <identifiersep> velocity , true , skin ) ; \n \t3 } catch ( less <identifiersep> compiler <identifiersep> exception e ) { \n <ect>
\t8 running <identifiersep> average <identifiersep> and <identifiersep> std <identifiersep> dev timing ) throws taste <identifiersep> exception { \n \t1 collection < callable < void > > wrapped <identifiersep> callables = wrap <identifiersep> with <identifiersep> stats <identifiersep> callables ( callables , no <identifiersep> estimate <identifiersep> counter , timing ) ; \n \t1 int num <identifiersep> processors = runtime . get <identifiersep> runtime ( ) . available <identifiersep> processors ( ) ; \n \t1 executor <identifiersep> service executor = executors . new <identifiersep> fixed <identifiersep> thread <identifiersep> pool ( num <identifiersep> processors ) ; \n <ect>
<number_literal> final string principal <identifiersep> id , \n <number_literal> final map < string , object > attributes ) { \n \t2 ensure <identifiersep> service <identifiersep> access <identifiersep> is <identifiersep> allowed ( service , registered <identifiersep> service ) ; \n \t2 if ( ! registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . do <identifiersep> principal <identifiersep> attributes <identifiersep> allow <identifiersep> service <identifiersep> access ( principal <identifiersep> id , attributes ) ) { \n <ect>
\t2 final linked <identifiersep> hash <identifiersep> map < network , list < ? extends nic <identifiersep> profile > > networks = new linked <identifiersep> hash <identifiersep> map < network , list < ? extends nic <identifiersep> profile > > ( <number_literal> ) ; \n \t2 <comment> \n \t2 final network guest <identifiersep> network = router <identifiersep> deployment <identifiersep> definition . get <identifiersep> guest <identifiersep> network ( ) ; \n \t2 if ( guest <identifiersep> network != null ) { \n <ect>
\t6 initial <identifiersep> seed <identifiersep> uniquifier = seed ; \n \t6 break ; } \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n \t5 interrupted = true ; \n <ect>
\t3 } catch ( configuration <identifiersep> exception e ) { \n \t4 logger . warn ( <string_literal> , c <identifiersep> file , e . get <identifiersep> message ( ) ) ; \n \t4 logger . trace ( <string_literal> , e ) ; } \n \t2 } else { \n <ect>
\t1 token < job <identifiersep> token <identifiersep> identifier > token = new token < > ( ) ; \n \t1 try { \n \t1 token . read <identifiersep> fields ( byte <identifiersep> streams . new <identifiersep> data <identifiersep> input ( token <identifiersep> bytes ) ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public void render ( ) { \n \t2 try { \n \t3 runtime . get <identifiersep> runtime ( ) . exec ( <string_literal> + output + <string_literal> + output + <string_literal> ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t7 ref . decrement <identifiersep> reference <identifiersep> count ( ) ; \n \t7 <comment> \n \t7 <comment> \n \t7 <comment> \n <ect>
\t5 try { \n \t6 <comment> \n \t6  <identifiersep> content = converter . adapt (  <identifiersep> content ) ; \n \t5 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 channel <identifiersep> handler <identifiersep> context . get <identifiersep> pipeline ( ) . remove ( this ) ; \n \t2 channel <identifiersep> handler <identifiersep> context . get <identifiersep> pipeline ( ) . get ( client <identifiersep> handler . class ) . join <identifiersep> complete ( server ) ; \n \t2 join <identifiersep> status . set <identifiersep> complete ( ) ; } \n \t1 private void received <identifiersep> server <identifiersep> info ( channel <identifiersep> handler <identifiersep> context channel <identifiersep> handler <identifiersep> context , net <identifiersep> data . server <identifiersep> info <identifiersep> message message ) { \n <ect>
\t2 return ticket ; } \n \t1 @ override \n \t1 public void add <identifiersep> ticket ( final ticket ticket ) { \n \t2 this . entity <identifiersep> manager . persist ( ticket ) ; \n <ect>
\t2 node <identifiersep> iterator = model . list <identifiersep> objects <identifiersep> of <identifiersep> property ( model <identifiersep> node . as <identifiersep> resource ( ) , has <identifiersep> atom <identifiersep> property ) ; \n \t2 while ( node <identifiersep> iterator . has <identifiersep> next ( ) ) { \n \t3 atom <identifiersep> node = node <identifiersep> iterator . next ( ) ; \n \t3 if ( ! atom <identifiersep> node . is <identifiersep> resource ( ) ) { \n <ect>
\t4 } else { \n \t5 logger . info ( <string_literal> , item <identifiersep> name , item , device , port ) ; } } } } \n \t1 @ override \n \t1 public void activate ( ) { \n <ect>
\t6  <identifiersep> sz <identifiersep> alice <identifiersep> ident <identifiersep> ts <identifiersep> a <identifiersep> padding <identifiersep> alice <identifiersep> sig . size ( ) >=  <identifiersep> sz <identifiersep> alice <identifiersep> ident <identifiersep> ts <identifiersep> a <identifiersep> padding <identifiersep> alice <identifiersep> sig <identifiersep> size ) { \n \t6 <comment> \n \t6 <comment> \n \t7 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 transaction <identifiersep> synchronization <identifiersep> manager . unbind <identifiersep> resource ( connection <identifiersep> factory ) ; \n \t2 tx <identifiersep> object . get <identifiersep> connection <identifiersep> holder ( ) . clear ( ) ; \n \t2 connection con = tx <identifiersep> object . get <identifiersep> connection <identifiersep> holder ( ) . get <identifiersep> connection ( ) ; \n <ect>
\t1 protected void write ( string command ) { \n \t2 try { \n \t3 synchronized ( serial <identifiersep> port ) { \n \t4 if ( bw == null ) { \n <ect>
\t9 methods [ j ] . invoke ( protocol , converted ) ; } \n \t8 catch ( exception e ) { \n \t9 throw new exception ( <string_literal> + property <identifiersep> name + <string_literal> \n <number_literal> + protocol <identifiersep> name + <string_literal> + default <identifiersep> value , e ) ; } \n <ect>
\t1 operation = get <identifiersep> user <identifiersep> operation <identifiersep> context ( services , <string_literal> ) \n \t1 is <identifiersep> cluster <identifiersep> create <identifiersep> opr = false \n \t1 if operation == self . cluster <identifiersep> create <identifiersep> operation : \n \t1 is <identifiersep> cluster <identifiersep> create <identifiersep> opr = true \n <ect>
\t7 if ( fanout <identifiersep> handler . transport != null ) { \n \t8 service <identifiersep> support . dispose ( fanout <identifiersep> handler . transport ) ; \n \t8 fanout <identifiersep> handler . transport = null ; } \n \t7 if ( max <identifiersep> reconnect <identifiersep> attempts > 0 && ++ fanout <identifiersep> handler . connect <identifiersep> failures >= max <identifiersep> reconnect <identifiersep> attempts ) { \n <ect>
\t5 return msg . get <identifiersep> body ( ) ; } \n \t3 } else { \n \t4 return <string_literal> ; } \n \t2 } catch ( exception e ) { \n <ect>
\t10 partitioner . get <identifiersep> token <identifiersep> factory ( ) . from <identifiersep> string ( job <identifiersep> key <identifiersep> range . end <identifiersep> token ) , \n \t10 partitioner ) ; } \n \t4 else \n \t4 { \n <ect>
\t5 fenced = true ; \n \t4 } else { \n \t5 s <identifiersep> logger . debug ( <string_literal> + vm . get <identifiersep> host <identifiersep> name ( ) + <string_literal> + investigator . get <identifiersep> name ( ) ) ; \n \t5 if ( host . get <identifiersep> status ( ) == status . up ) { \n <ect>
\t2 } catch ( illegal <identifiersep> block <identifiersep> size <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( bad <identifiersep> padding <identifiersep> exception e ) { \n <ect>
\t4 log = log ; } \n \t3 if ( name != null ) { \n \t4 log . warn ( <string_literal> + name + <string_literal> + e . get <identifiersep> message ( ) , e ) ; \n \t3 } else { \n <ect>
\t2 try { \n \t3 chunks . close ( ) ; \n \t2 } catch ( throwable t ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void stop ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = null ; \n <ect>
\t1 string encoding <identifiersep> str = module . properties ( ) . get ( core <identifiersep> properties . encoding <identifiersep> property ) ; \n \t1 charset result ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( encoding <identifiersep> str ) ) { \n \t1 result = charset . for <identifiersep> name ( string <identifiersep> utils . trim ( encoding <identifiersep> str ) ) ; \n <ect>
\t3 log . debug ( this + <string_literal> + key <identifiersep> store <identifiersep> password ) ; } \n \t2 info . set <identifiersep> key <identifiersep> store <identifiersep> password ( key <identifiersep> store <identifiersep> password ) ; } \n \t1 public void set <identifiersep> key <identifiersep> store <identifiersep> key <identifiersep> password ( string key <identifiersep> store <identifiersep> key <identifiersep> password ) { \n <ect>
\t6 logger . warning ( <string_literal> ) ; \n \t5 } else { \n \t6 logger . log ( level . warning , <string_literal> + ( test <identifiersep> conn + 1 ) + <string_literal> , e ) ; \n \t6 thread . sleep ( <number_literal> ) ; } } } } \n <ect>
\t6 <comment> \n \t5 } else { \n \t6 try { thread . sleep ( <number_literal> ) ; } catch ( interrupted <identifiersep> exception ie ) { } } } \n \t3 } catch ( exception e ) { \n <ect>
\t2 log . warn ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void cleanup ( ) { \n \t2 schedu <identifiersep> exec . shutdown ( ) ; \n <ect>
private void cleanup <identifiersep> aborted <identifiersep> uploads ( ) { \n \t1 try ( transaction <identifiersep> resource snap <identifiersep> tran = entities . transaction <identifiersep> for ( snapshot <identifiersep> upload <identifiersep> info . class ) ) { \n \t1 list < snapshot <identifiersep> upload <identifiersep> info > snap <identifiersep> upload <identifiersep> info <identifiersep> list = entities . query ( new snapshot <identifiersep> upload <identifiersep> info ( ) . with <identifiersep> state ( snapshot <identifiersep> upload <identifiersep> state . aborted ) ) ; \n \t1 for ( snapshot <identifiersep> upload <identifiersep> info snap <identifiersep> upload <identifiersep> info : snap <identifiersep> upload <identifiersep> info <identifiersep> list ) { \n <ect>
<comment> \n \t2 public void message <identifiersep> delivered ( message <identifiersep> delivered <identifiersep> event evt ) \n \t2 { \n <ect>
\t1 txn . commit ( ) ; \n \t1 txn . close ( ) ; \n \t1 log . info ( <string_literal> + sink . process ( ) ) ; } \n \t1 log . info ( <string_literal> + sink . process ( ) ) ; \n <ect>
\t3 case message . suggest : \n \t4 piece = din . read <identifiersep> int ( ) ; \n \t4 ps . suggest <identifiersep> message ( piece ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 return new org . apache . thrift . async . async <identifiersep> method <identifiersep> callback < void > ( ) { \n \t2 public void on <identifiersep> complete ( void o ) { } \n \t2 public void on <identifiersep> error ( java . lang . exception e ) { \n \t3 if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 } catch ( script <identifiersep> exception e ) { \n \t4 throw new runtime <identifiersep> exception ( e ) ; } \n \t3 send <identifiersep> request req = send <identifiersep> request . to <identifiersep> cltv <identifiersep> payment <identifiersep> channel ( params , big <identifiersep> integer . value <identifiersep> of ( lock <identifiersep> time ) , refund <identifiersep> key , output <identifiersep> key , value ) ; \n \t3 if ( req . tx . get <identifiersep> outputs ( ) . size ( ) == 1 && req . tx . get <identifiersep> output ( 0 ) . get <identifiersep> value ( ) . equals ( wallet . get <identifiersep> balance ( ) ) ) { \n <ect>
\t5 i2ps . close ( ) ; \n \t4 } catch ( io <identifiersep> exception ioe ) { } \n \t3 } else if ( sock <identifiersep> reset ) { \n \t4 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t3 d <identifiersep> space <identifiersep> object <identifiersep> legacy <identifiersep> support <identifiersep> service dso <identifiersep> service = content <identifiersep> service <identifiersep> factory \n \t4 . get <identifiersep> d <identifiersep> space <identifiersep> legacy <identifiersep> object <identifiersep> service ( integer . parse <identifiersep> int ( type ) ) ; \n \t3 d <identifiersep> space <identifiersep> object dso = dso <identifiersep> service . find <identifiersep> by <identifiersep> id <identifiersep> or <identifiersep> legacy <identifiersep> id ( context , id ) ; \n \t3 if ( dso == null ) { \n <ect>
\t2 for ( int i = 0 ; i < grid <identifiersep> count ( ) ; i ++ ) { \n \t3 grid <identifiersep> kernal grid = ( grid <identifiersep> kernal ) grid ( i ) ; \n \t3 grid <identifiersep> cache <identifiersep> adapter cache = grid . internal <identifiersep> cache ( null ) ; \n \t3 grid <identifiersep> cache <identifiersep> map <identifiersep> entry entry = cache . map ( ) . get <identifiersep> entry ( key ) ; \n <ect>
\t2 . start <identifiersep> now ( ) \n \t2 . build ( ) ; \n \t1 try { \n \t2 execution <identifiersep> scheduler . schedule <identifiersep> job ( trigger ) ; \n <ect>
\t3 new string [ ] { <string_literal> } ) ) ; \n \t2 if ( ! config <identifiersep> properties . is <identifiersep> empty ( ) ) { \n \t2 cluster <identifiersep> metric <identifiersep> server <identifiersep> vip <identifiersep> port = config <identifiersep> properties . get ( <string_literal> ) ; } } \n \t1 } catch ( no <identifiersep> such <identifiersep> parent <identifiersep> resource <identifiersep> exception | unsupported <identifiersep> property <identifiersep> exception e ) { \n <ect>
\t3 } finally { \n \t4 try { \n \t5 zk . close ( ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t3 } ) } \n \t2 private fun not <identifiersep> kt <identifiersep> annotation <identifiersep> entry ( found : psi <identifiersep> element ) : boolean { \n \t3 if ( found is kt <identifiersep> annotation <identifiersep> entry ) return false \n \t3 val faulty <identifiersep> container = psi <identifiersep> util <identifiersep> core . get <identifiersep> virtual <identifiersep> file ( found ) \n <ect>
\t4 } else if ( item instanceof location <identifiersep> item ) { \n \t5 logger . debug ( <string_literal> ) ; \n \t5 return new point <identifiersep> type ( value <identifiersep> str ) ; \n \t4 } else if ( item instanceof number <identifiersep> item ) { \n <ect>
\t1 void persist <identifiersep> dom ( string name , @ nullable string dom ) { \n \t2 try { \n \t3 files . write ( strings . null <identifiersep> to <identifiersep> empty ( dom ) , new file ( doms , name + <string_literal> ) , charsets . utf <identifiersep> <number_literal> ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
public integer posts <identifiersep> count ( ) { \n \t1 return ( integer ) stored <identifiersep> value <identifiersep> for <identifiersep> key (  <identifiersep> topic . posts <identifiersep> count <identifiersep> key ) ; } \n public void set <identifiersep> posts <identifiersep> count ( integer value ) { \n <ect>
\t7 height ) ; } \n \t3 catch ( malformed <identifiersep> url <identifiersep> exception e ) \n \t3 { \n <ect>
\t1 int min <identifiersep> of <identifiersep> week = ( week <identifiersep> day - 1 ) * <number_literal> * <number_literal> + curr <identifiersep> hour * <number_literal> + curr <identifiersep> min ; \n \t1 int slot <identifiersep> by <identifiersep> min = min <identifiersep> of <identifiersep> week / split <identifiersep> interval % shards . size ( ) ; \n \t1 string shard = shards . get ( slot <identifiersep> by <identifiersep> min ) ; \n \t1 if ( last <identifiersep> slot <identifiersep> by <identifiersep> min != slot <identifiersep> by <identifiersep> min ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + pool . get <identifiersep> id ( ) + <string_literal> + used <identifiersep> percentage + <string_literal> +  <identifiersep> storage <identifiersep> allocated <identifiersep> threshold + <string_literal> ) ; } \n \t3 return false ; } \n \t2 if ( total <identifiersep> over <identifiersep> prov <identifiersep> capacity < ( total <identifiersep> allocated <identifiersep> size + asking <identifiersep> size ) ) { \n <ect>
\t3 state . sessions . is <identifiersep> empty ( ) - > shutdown <identifiersep> with <identifiersep> delay ( ) \n \t3 else - > { \n \t4 daemon <identifiersep> options . autoshutdown <identifiersep> idle <identifiersep> seconds = time <identifiersep> unit . milliseconds . to <identifiersep> seconds ( daemon <identifiersep> options . force <identifiersep> shutdown <identifiersep> timeout <identifiersep> milliseconds ) . to <identifiersep> int ( ) \n \t4 daemon <identifiersep> options . autoshutdown <identifiersep> unused <identifiersep> seconds = daemon <identifiersep> options . autoshutdown <identifiersep> idle <identifiersep> seconds \n <ect>
\t3 final principal owner = structr <identifiersep> app . get <identifiersep> instance ( ) . node <identifiersep> query ( principal . class ) . and <identifiersep> name ( parameters ) . get <identifiersep> first ( ) ; \n \t3 if ( owner != null ) { <comment> \n \t4 node . set <identifiersep> property ( abstract <identifiersep> node . owner , owner ) ; \n \t3 } else { \n <ect>
\t2 boolean rv = ctx . dsa ( ) . verify <identifiersep> signature ( ssig , data , spubkey ) ; \n \t2 if ( rv ) \n \t3 log . info ( <string_literal> ) ; \n \t2 else \n <ect>
\t2 cntr = log <identifiersep> every <identifiersep> n <identifiersep> rows == 0 ? cntr * <number_literal> : num <identifiersep> rows + log <identifiersep> every <identifiersep> n <identifiersep> rows ; \n \t2 if ( cntr < 0 || num <identifiersep> rows < 0 ) { \n \t3 cntr = 0 ; \n \t3 num <identifiersep> rows = 1 ; } \n <ect>
\t1 set < string > app <identifiersep> provided <identifiersep> packages = \n \t2 parent <identifiersep> exported <identifiersep> packages . stream ( ) . filter ( p - > exported <identifiersep> packages . contains ( p ) ) . collect ( to <identifiersep> set ( ) ) ; \n \t1 if ( ! app <identifiersep> provided <identifiersep> packages . is <identifiersep> empty ( ) ) { \n \t1 exported <identifiersep> packages . remove <identifiersep> all ( app <identifiersep> provided <identifiersep> packages ) ; \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
<comment> \n \t1 @ override \n \t1 public void visit ( final op <identifiersep> diff op <identifiersep> diff ) { \n <ect>
\t1 private optional < json <identifiersep> web <identifiersep> key <identifiersep> set > build <identifiersep> json <identifiersep> web <identifiersep> key <identifiersep> set ( ) { \n \t2 try { \n \t3 logger . debug ( <string_literal> , this . jwks <identifiersep> file ) ; \n \t3 if ( this . jwks <identifiersep> file != null ) { \n <ect>
\t3 logger . warn ( <string_literal> , crl . get <identifiersep> next <identifiersep> update ( ) ) ; \n \t3 expired <identifiersep> crls . add ( crl ) ; \n \t2 } ) ; \n \t2 if ( crls . size ( ) == expired <identifiersep> crls . size ( ) ) { \n <ect>
\t3 fos = new file <identifiersep> output <identifiersep> stream ( log <identifiersep> file , true ) ; \n \t3 dos = new data <identifiersep> output <identifiersep> stream ( fos ) ; \n \t3 dos . write <identifiersep> int ( five <identifiersep> minutes <identifiersep> since <identifiersep> epoch ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 if ( listener != null ) { \n \t3 listener . on <identifiersep> service <identifiersep> add ( new discovery <identifiersep> event ( name ) ) ; } \n \t2 jm <identifiersep> dns . request <identifiersep> service <identifiersep> info ( type , name ) ; } \n \t1 public void remove <identifiersep> service ( jm <identifiersep> dns jm <identifiersep> dns , string type , string name ) { \n <ect>
\t2 try { \n \t3 grid <identifiersep> ggfs <identifiersep> path path = convert ( f ) ; \n \t3 grid <identifiersep> ggfs <identifiersep> mode mode = mode ( path ) ; \n <ect>
\t2 <comment> \n \t2 url resource = get <identifiersep> wicket <identifiersep> tester ( ) . get <identifiersep> servlet <identifiersep> context ( ) . get <identifiersep> resource ( <string_literal> ) ; \n \t2 if ( resource == null ) { \n \t3 throw new illegal <identifiersep> state <identifiersep> exception ( resource <identifiersep> pages <identifiersep> insert <identifiersep> contact <identifiersep> html <identifiersep> not <identifiersep> found ) ; } \n <ect>
\t2 else if ( ws . write <identifiersep> failed ( ) ) \n \t3 throw new io <identifiersep> exception ( <string_literal> ) ; \n \t2 long elapsed =  <identifiersep> context . clock ( ) . now ( ) - begin ; \n \t2 if ( ( elapsed > <number_literal> * <number_literal> ) && (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) ) \n <ect>
\t1 try { \n \t1 return config <identifiersep> request . get <identifiersep> required <identifiersep> host <identifiersep> groups ( ) ; \n \t1 } catch ( runtime <identifiersep> exception e ) { \n \t1 <comment> \n <ect>
\t2 try { \n \t3  <identifiersep> network <identifiersep> mgr . release ( profile , forced ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> + vm ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 string pid <identifiersep> jmx = management <identifiersep> factory . get <identifiersep> runtime <identifiersep> mx <identifiersep> bean ( ) . get <identifiersep> name ( ) . split ( <string_literal> ) [ 0 ] ; \n \t4 pid = integer . parse <identifiersep> int ( pid <identifiersep> jmx ) ; \n \t4 logger . info ( <string_literal> , pid ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 continue ; } \n \t4 <comment> \n \t4 boolean success = remove <identifiersep> entry ( sl , key ) != null ; \n \t4 if ( success ) \n <ect>
<comment> \n \t1 public void object <identifiersep> renamed ( naming <identifiersep> event naming <identifiersep> event , destination <identifiersep> type destination <identifiersep> type , permission <identifiersep> type permission <identifiersep> type ) { \n \t2 binding old <identifiersep> binding = naming <identifiersep> event . get <identifiersep> old <identifiersep> binding ( ) ; \n \t2 binding new <identifiersep> binding = naming <identifiersep> event . get <identifiersep> new <identifiersep> binding ( ) ; \n <ect>
\t1 private static void compile <identifiersep> code <identifiersep> string ( string class <identifiersep> name , string generated <identifiersep> code <identifiersep> string , file code <identifiersep> dir ) { \n \t2 java <identifiersep> compiler <identifiersep> helper compiler = new java <identifiersep> compiler <identifiersep> helper ( ) ; \n \t2 string temp <identifiersep> dir = code <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) ; \n \t2 compiler . add <identifiersep> to <identifiersep> class <identifiersep> path ( temp <identifiersep> dir ) ; \n <ect>
\t4 message result = process <identifiersep> message ( m ) ; \n \t4 if ( result != null ) { \n \t5 return result ; } } \n \t2 } catch ( authentication <identifiersep> failed <identifiersep> exception e ) { \n <ect>
\t8 if ( enhanced <identifiersep> bytecode != null ) { \n \t9 write <identifiersep> out <identifiersep> enhanced <identifiersep> class ( enhanced <identifiersep> bytecode , file ) ; \n \t9 logger . info ( <string_literal> + file + <string_literal> ) ; } \n \t8 else { \n <ect>
\t3 try { \n \t4 block = client <identifiersep> chk <identifiersep> block . encode <identifiersep> splitfile <identifiersep> block ( check <identifiersep> blocks [ i ] , decode <identifiersep> key . get <identifiersep> crypto <identifiersep> key ( ) , decode <identifiersep> key . get <identifiersep> crypto <identifiersep> algorithm ( ) ) ; \n \t4 client <identifiersep> chk actual <identifiersep> key = block . get <identifiersep> client <identifiersep> key ( ) ; \n \t4 if ( ! actual <identifiersep> key . equals ( decode <identifiersep> key ) ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t2 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e . get <identifiersep> target <identifiersep> exception ( ) ) ; \n \t3 return null ; \n \t2 } catch ( throwable t ) { \n <ect>
\t1 cluster cluster = management <identifiersep> controller . get <identifiersep> clusters ( ) . get <identifiersep> cluster ( cluster <identifiersep> name ) ; \n \t1 string service <identifiersep> name = management <identifiersep> controller . find <identifiersep> service <identifiersep> name ( cluster , component <identifiersep> name ) ; \n \t1 hosts = cluster . get <identifiersep> service ( service <identifiersep> name ) . get <identifiersep> service <identifiersep> component ( component <identifiersep> name ) . get <identifiersep> service <identifiersep> component <identifiersep> hosts ( ) . key <identifiersep> set ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 return true ; <comment> \n \t3 } catch ( exception e ) { \n \t4 logger . error ( <string_literal> ) ; } \n \t2 } catch ( http <identifiersep> exception he ) { \n <ect>
\t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 try { \n \t5 queue <identifiersep> view <identifiersep> m <identifiersep> bean queue <identifiersep> view <identifiersep> m <identifiersep> bean = ( queue <identifiersep> view <identifiersep> m <identifiersep> bean ) context . new <identifiersep> proxy <identifiersep> instance ( brokers . get ( broker <identifiersep> name ) . broker . get <identifiersep> admin <identifiersep> view ( ) . get <identifiersep> queues ( ) [ 0 ] , queue <identifiersep> view <identifiersep> m <identifiersep> bean . class , false ) ; \n \t5 long current <identifiersep> count = queue <identifiersep> view <identifiersep> m <identifiersep> bean . get <identifiersep> consumer <identifiersep> count ( ) ; \n <ect>
\t2 ontology <identifiersep> manager ontology <identifiersep> manager = new ontology <identifiersep> manager ( context <identifiersep> parameters . get <identifiersep> id ( ) ) ; \n \t2 file ff = new file ( params . ontology <identifiersep> dir ) ; \n \t2 file [ ] files = ff . list <identifiersep> files ( ) ; \n \t2 if ( files == null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n <ect>
\t3 <comment> \n \t3 try { \n \t4 ctx . service ( ) . cancel ( ctx ) ; } \n \t3 catch ( throwable e ) { \n <ect>
<number_literal> final principal <identifiersep> resolver principal <identifiersep> resolver ) { \n \t2 handlers . for <identifiersep> each ( h - > register <identifiersep> authentication <identifiersep> handler <identifiersep> with <identifiersep> principal <identifiersep> resolver ( h , principal <identifiersep> resolver ) ) ; } \n \t1 @ override \n \t1 public void register <identifiersep> authentication <identifiersep> post <identifiersep> processor ( final authentication <identifiersep> post <identifiersep> processor processor ) { \n <ect>
\t2 } catch ( throwable e1 ) { \n \t3 flog . error <identifiersep> message ( <string_literal> , project ) ; \n \t3 return null ; } \n \t2 if ( auth . size ( ) < 1 ) { \n <ect>
\t3 result . tope = ( thrift <identifiersep> table <identifiersep> operation <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> tope <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t3 } else { \n \t4 if ( v <identifiersep> mware ) { \n \t5 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> ) ; \n \t4 } else { \n <ect>
\t2 block <identifiersep> pos . y -- ; <comment> \n \t2 block block = world <identifiersep> provider . get <identifiersep> block ( block <identifiersep> pos ) ; \n \t2 if ( block != null ) { \n \t3 if ( block . get <identifiersep> sounds ( ) == null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public boolean supports ( class < ? > c ) { \n <ect>
\t3 conf , hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> localize <identifiersep> resource <identifiersep> wait <identifiersep> interval , time <identifiersep> unit . milliseconds ) ; \n \t2 <comment> \n \t2 if ( ! check <identifiersep> or <identifiersep> wait <identifiersep> for <identifiersep> the <identifiersep> file ( \n \t3 src <identifiersep> fs , src , dest , conf , notifier <identifiersep> old , wait <identifiersep> attempts , sleep <identifiersep> interval , true ) ) { \n <ect>
\t2 { \n \t3 start <identifiersep> native <identifiersep> transport ( ) ; \n \t3 storage <identifiersep> service . instance . set <identifiersep> rpc <identifiersep> ready ( true ) ; } \n \t2 else \n <ect>
\t4 } catch ( exception e ) { \n \t5 log . error ( e ) ; } \n \t4 if ( now . get <identifiersep> time ( ) - last <identifiersep> heat <identifiersep> beat <identifiersep> time > <number_literal> * joy <identifiersep> constants . heartbeat <identifiersep> time <identifiersep> interval \n \t6 || last <identifiersep> heat <identifiersep> beat <identifiersep> time > now . get <identifiersep> time ( ) || sub <identifiersep> app <identifiersep> path . trim ( ) . equals ( app <identifiersep> path . trim ( ) ) ) { \n <ect>
\t5 <comment> \n \t5 if ( value != null ) { \n \t6 post <identifiersep> update ( provider , binding <identifiersep> config , value ) ; } \n \t4 } else { \n <ect>
\t2 whitelisted <identifiersep> metric <identifiersep> patterns . add ( pattern . compile ( str <identifiersep> line . substring ( pattern <identifiersep> prefix . length ( ) ) ) ) ; \n \t2 } else { \n \t2 whitelisted <identifiersep> metrics . add ( str <identifiersep> line ) ; } } \n \t1 } catch ( io <identifiersep> exception io <identifiersep> ex ) { \n <ect>
\t6 int advisories <identifiersep> received = 0 ; \n \t6 @ override \n \t6 public void on <identifiersep> message ( message message ) { \n \t7 try { \n <ect>
<comment> \n \t2 public int read ( byte [ ] b ) throws io <identifiersep> exception { \n \t3 if ( sock == null || ! sock . is <identifiersep> connected ( ) ) { \n <ect>
\t2 if ( em == null ) { \n \t3 em = ( ! collection <identifiersep> utils . is <identifiersep> empty ( properties ) ? emf . create <identifiersep> entity <identifiersep> manager ( properties ) : emf . create <identifiersep> entity <identifiersep> manager ( ) ) ; } \n \t2 <comment> \n \t2 <comment> \n <ect>
\t3 <comment> \n \t3 response . add <identifiersep> header ( sip <identifiersep> presence <identifiersep> agent . get <identifiersep> configuration ( ) . get <identifiersep> expires <identifiersep> header ( ) ) ; \n \t3 st . send <identifiersep> response ( response ) ; \n \t3 log . debug ( <string_literal> ) ; \n <ect>
\t2 invocation <identifiersep> counter ++ ; \n \t2 assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 log . info ( <string_literal> + response . get <identifiersep> status ( ) ) ; \n \t2 int id1 = response . read <identifiersep> entity ( int . class ) ; \n <ect>
\t4 else if ( async <identifiersep> lock != null ) \n \t5 failed <identifiersep> to <identifiersep> acquire <identifiersep> lock ( ) ; } \n \t3 } catch ( throwable e ) { \n \t4 lock <identifiersep> watcher . unable <identifiersep> to <identifiersep> monitor <identifiersep> lock <identifiersep> node ( e ) ; \n <ect>
\t2 string path = endpoint . to <identifiersep> string ( ) . substring ( 0 , index <identifiersep> of <identifiersep> lb + load <identifiersep> balancers . length ( ) ) ; \n \t2 builder . uri ( uri . create ( path + <string_literal> + lb . id ) ) ; \n \t2 return builder . build ( ) ; } \n \t1 catch ( null <identifiersep> pointer <identifiersep> exception e ) { \n <ect>
\t2 } finally { \n \t3 <comment> \n \t3 if (  <identifiersep> alive ) { \n \t4  <identifiersep> alive = false ; \n <ect>
\t3 logger . error ( <string_literal> ) ; \n \t3 return null ; } \n \t2 matcher sidmatch = sid <identifiersep> pattern . matcher ( login <identifiersep> xml ) ; \n \t2 if ( ! sidmatch . find ( ) ) { \n <ect>
\t3 logger . trace ( <string_literal> , this . get <identifiersep> payload ( ) ) ; \n \t3 for ( room <identifiersep> information room : rooms ) { \n \t4 logger . debug ( <string_literal> ) ; \n \t4 logger . debug ( <string_literal> , room . get <identifiersep> position ( ) ) ; \n <ect>
\t2 object value = this . get <identifiersep> field <identifiersep> value ( field <identifiersep> name , object ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 string regex <identifiersep> to <identifiersep> use = get <identifiersep> regex ( ) ; \n <ect>
\t5 cal <identifiersep> dav <identifiersep> event event = last <identifiersep> on . get <identifiersep> event ( ) ; \n \t5 event . set <identifiersep> last <identifiersep> changed ( date <identifiersep> offset ) ; \n \t5 string off <identifiersep> content = event <identifiersep> utils . create <identifiersep> between ( alias , state ) ; \n \t5 event . set <identifiersep> content ( event . get <identifiersep> content ( ) + <string_literal> + off <identifiersep> content ) ; \n <ect>
\t3 } else if ( partial <identifiersep> checkpoint != null ) { \n \t4 node <identifiersep> state = node <identifiersep> store . get <identifiersep> node <identifiersep> store ( ) . retrieve ( partial <identifiersep> checkpoint ) ; } \n \t3 node <identifiersep> states . put ( node <identifiersep> store , node <identifiersep> state ) ; } \n \t2 if ( any ( node <identifiersep> states . values ( ) , is <identifiersep> null ( ) ) ) { \n <ect>
\t4 } else { \n \t5 disabled <identifiersep> clusters = list <identifiersep> disabled <identifiersep> clusters ( plan . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , id ) ; } \n \t4 if ( ! disabled <identifiersep> clusters . is <identifiersep> empty ( ) ) { \n <ect>
\t3 } else { \n \t4 log . debug ( <string_literal> ) ; } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 close <identifiersep> accept <identifiersep> channel ( selection <identifiersep> key , sc ) ; \n <ect>
\t4 } else if ( transaction . jobs ( ) . count ( ) == 0 ) { \n \t5 ns <identifiersep> notification <identifiersep> center . default <identifiersep> center ( ) . post <identifiersep> notification ( indexing <identifiersep> ended <identifiersep> notification , transaction ) ; \n \t5 return ; } \n \t4 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t7 && ! header . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t6 q . append ( header ) . append ( <string_literal> ) . append ( s . length > 1 ? value : <string_literal> ) . append ( <string_literal> ) ; } \n \t5 headers . put ( header , s . length > 1 ? value : <string_literal> ) ; } } \n \t2 } catch ( exception ex ) { \n <ect>
\t3 for ( resource <identifiersep> worker <identifiersep> slot resource <identifiersep> worker <identifiersep> slot : assignment ) { \n \t4 if ( resource <identifiersep> worker <identifiersep> slot . get <identifiersep> tasks ( ) . contains ( topology <identifiersep> master <identifiersep> id ) ) { \n \t5 resource <identifiersep> worker <identifiersep> slot . set <identifiersep> mem <identifiersep> size ( tm <identifiersep> worker <identifiersep> mem ) ; } } } \n \t2 ret . add <identifiersep> all ( assignment ) ; \n <ect>
\t2 public string getsize ( ) { \n \t3 return quota ; } } \n <comment> \n \t1 public static update <identifiersep> tsm <identifiersep> cmd <identifiersep> response update <identifiersep> elastistor <identifiersep> tsm <identifiersep> iops ( string capacity <identifiersep> io <identifiersep> ps , string uuid ) throws throwable { \n <ect>
\t1 private static map < string , string > load <identifiersep> from <identifiersep> file ( @ nonnull file file , @ nonnull log log ) \n \t1 { \n \t2 if ( ! file . exists ( ) ) \n \t2 { \n <ect>
\t2 } else { \n \t3 log . error ( <string_literal> + alpha , name , p ) ; } \n \t2 log . info ( <string_literal> , trials , successes ) ; \n \t2 log . info ( <string_literal> , scales ) ; \n <ect>
\t6 transport = null ; \n \t6 session = null ; } \n \t4 } catch ( send <identifiersep> failed <identifiersep> exception ex ) { \n \t5 send <identifiersep> failed <identifiersep> count ++ ; \n <ect>
\t1 logger . info ( <string_literal> ) \n \t1 return \n json <identifiersep> version = load <identifiersep> version ( struct <identifiersep> out <identifiersep> file ) \n if not json <identifiersep> version : \n <ect>
\t2 case de : drmaa <identifiersep> exception = > \n \t2 if ( last <identifiersep> status == runner <identifiersep> status . done || last <identifiersep> status == runner <identifiersep> status . failed ) \n \t3 return <identifiersep> status = last <identifiersep> status \n \t2 else \n <ect>
\t5 i2np <identifiersep> message read = h . last <identifiersep> read ( ) ; \n \t5 long time <identifiersep> to <identifiersep> recv =  <identifiersep> context . clock ( ) . now ( ) -  <identifiersep> state <identifiersep> begin ; \n \t5 release <identifiersep> handler ( h ) ; \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> two <identifiersep> names <identifiersep> one <identifiersep> listener ( ) throws exception { \n <ect>
\t2 if ( callback != null ) { \n \t3 try { \n \t4 callback . snoop ( m , node ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t1 for ( naming <identifiersep> enumeration < search <identifiersep> result > search <identifiersep> result : search <identifiersep> results ) { \n \t2 try { \n \t2 search <identifiersep> result . close ( ) ; \n \t2 } catch ( naming <identifiersep> exception ex ) { \n <ect>
\t1 factory . set <identifiersep> property ( xml <identifiersep> input <identifiersep> factory . support <identifiersep> dtd , false ) ; \n \t1 factory . set <identifiersep> property ( xml <identifiersep> input <identifiersep> factory . is <identifiersep> supporting <identifiersep> external <identifiersep> entities , false ) ; \n \t1 this . xml <identifiersep> reader = factory . create <identifiersep> xml <identifiersep> event <identifiersep> reader ( reader ) ; \n \t1 } catch ( xml <identifiersep> stream <identifiersep> exception e ) { \n <ect>
\t1 length = file <identifiersep> status [ 'length' ] \n \t1 local <identifiersep> file <identifiersep> size = os . stat ( target ) . st <identifiersep> size # todo : os - > sudo \n \t1 # todo : re - implement this using checksums \n \t1 if local <identifiersep> file <identifiersep> size == length : \n <ect>
\t2 assert <identifiersep> equals ( thrift <identifiersep> test <identifiersep> num1 * thrift <identifiersep> test <identifiersep> num2 , response <identifiersep> body ) ; } \n \t1 @ test \n \t1 @ suppress <identifiersep> warnings ( { <string_literal> , <string_literal> } ) \n \t1 public void test <identifiersep> add <identifiersep> method <identifiersep> invocation ( ) throws exception { \n <ect>
\t1 } catch ( io <identifiersep> exception e ) { \n \t1 throw new runtime <identifiersep> exception ( e ) ; } \n \t1 zk <identifiersep> conf . set ( zk <identifiersep> dtsm <identifiersep> zk <identifiersep> kerberos <identifiersep> keytab , llap <identifiersep> keytab ) ; \n \t1 string zk <identifiersep> path = <string_literal> + cluster <identifiersep> id ; \n <ect>
\t5 log . error ( <string_literal> , temp <identifiersep> file ) ; \n \t4 throw e ; } \n \t3 catch ( io <identifiersep> exception e ) { \n \t4 if ( ! temp <identifiersep> file . delete ( ) ) \n <ect>
<comment> \n private void do <identifiersep> attempt <identifiersep> shutdown ( ) \n { \n <ect>
public final class cluster <identifiersep> allocation <identifiersep> explain <identifiersep> it extends es <identifiersep> integ <identifiersep> test <identifiersep> case { \n \t1 public void test <identifiersep> unassigned <identifiersep> primary <identifiersep> with <identifiersep> existing <identifiersep> index ( ) throws exception { \n \t2 logger . info ( <string_literal> ) ; \n \t2 internal <identifiersep> cluster ( ) . start <identifiersep> nodes ( <number_literal> ) ; \n <ect>
\t1 object value = null ; \n \t1 try { \n \t2 value = invoker . get <identifiersep> value ( score <identifiersep> index , top <identifiersep> doc . get <identifiersep> node <identifiersep> address ( ) , query <identifiersep> id ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t1 connection . close ( ) ; \n \t1 } catch ( exception ex ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t3 } else { \n \t4 logger . debug ( <string_literal> ) ; } } \n \t2 <comment> \n \t2 catch ( exception e ) { \n <ect>
\t3 con . queued <identifiersep> write ( buf , req ) ; \n \t2 } else { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t4 { \n \t5 result . add ( stt . sval . trim ( ) ) ; } } } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 { \n \t2 consumer . remove <identifiersep> stats <identifiersep> provider ( service , operation , stats <identifiersep> provider ) ; \n \t2 } catch ( throwable t ) \n \t2 { \n <ect>
\t5 <comment> \n \t5 <comment> \n \t5 <comment> \n \t5 <comment> \n <ect>
\t4 locale <identifiersep> info = new locale <identifiersep> info ( locale <identifiersep> info . get <identifiersep> locale ( ) , output <identifiersep> charset ) ; } } \n \t2 <comment> \n \t2 get <identifiersep> response ( ) . set <identifiersep> locale ( locale <identifiersep> info . get <identifiersep> locale ( ) ) ; \n \t2 set <identifiersep> response <identifiersep> character <identifiersep> encoding ( locale <identifiersep> info . get <identifiersep> charset ( ) . name ( ) ) ; \n <ect>
\t2 logger . info ( <string_literal> , encoding <identifiersep> utils . encode <identifiersep> base64 ( credential . get <identifiersep> public <identifiersep> key ( ) . get <identifiersep> encoded ( ) ) ) ; \n \t2 final key <identifiersep> encryption <identifiersep> parameters key <identifiersep> enc <identifiersep> params = get <identifiersep> key <identifiersep> encryption <identifiersep> parameters ( saml <identifiersep> object , service , adaptor , credential ) ; \n \t2 logger . debug ( <string_literal> , key <identifiersep> enc <identifiersep> params . get <identifiersep> recipient ( ) , key <identifiersep> enc <identifiersep> params . get <identifiersep> algorithm ( ) ) ; \n \t2 final data <identifiersep> encryption <identifiersep> parameters data <identifiersep> enc <identifiersep> params = get <identifiersep> data <identifiersep> encryption <identifiersep> parameters ( saml <identifiersep> object , service , adaptor ) ; \n <ect>
\t2 vector v = fetch <identifiersep> vector ( new path ( base <identifiersep> dir , <string_literal> ) , 0 ) ; \n \t2 if ( v != null && v . size ( ) > 0 ) { \n \t2 scale <identifiersep> factor = v . get ( 0 ) ; } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 long unix <identifiersep> timestamp = long . parse <identifiersep> long ( json <identifiersep> parser . get <identifiersep> text ( ) ) ; \n \t3 return instant . of <identifiersep> epoch <identifiersep> second ( unix <identifiersep> timestamp ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 if ( ! c . halted ( ) ) \n \t2 total <identifiersep> uploaders += c . get <identifiersep> interested <identifiersep> uploaders ( ) ; } \n \t1 int limit =  <identifiersep> util . get <identifiersep> max <identifiersep> uploaders ( ) ; \n \t1 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 @ test ( timeout = <number_literal> ) \n \t1 public void test <identifiersep> connections <identifiersep> are <identifiersep> closed ( ) throws exception { \n \t2 active <identifiersep> mq <identifiersep> admin . enable <identifiersep> jms <identifiersep> frame <identifiersep> tracing ( ) ; \n \t2 final connector <identifiersep> view <identifiersep> m <identifiersep> bean connector = get <identifiersep> proxy <identifiersep> to <identifiersep> connection <identifiersep> view ( get <identifiersep> target <identifiersep> connector <identifiersep> name ( ) ) ; \n <ect>
<number_literal> final string principal <identifiersep> id , \n <number_literal> final map < string , object > attributes ) { \n \t2 ensure <identifiersep> service <identifiersep> access <identifiersep> is <identifiersep> allowed ( service , registered <identifiersep> service ) ; \n \t2 if ( ! registered <identifiersep> service . get <identifiersep> access <identifiersep> strategy ( ) . do <identifiersep> principal <identifiersep> attributes <identifiersep> allow <identifiersep> service <identifiersep> access ( principal <identifiersep> id , attributes ) ) { \n <ect>
if 'hiveserver2 - site' in params . config [ 'configurations' ] : \n \t1 merged <identifiersep> hiveserver2 <identifiersep> interactive <identifiersep> site . update ( params . config [ 'configurations' ] [ 'hiveserver2 - site' ] ) \n \t1 logger . info ( <string_literal> ) \n else : \n <ect>
\t4 <comment> \n \t4 log . info ( log . fac <identifiersep> pipeline , <string_literal> ,  <identifiersep> last <identifiersep> in <identifiersep> order <identifiersep> segment ,  <identifiersep> starting <identifiersep> segment <identifiersep> number ) ; \n \t4 if ( out <identifiersep> of <identifiersep> order <identifiersep> segments . size ( ) > 0 ) { \n \t5 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> pipeline , level . info ) ) { \n <ect>
\t1 { \n \t2 records . clear ( ) ; \n \t2 if ( ! replicas . read <identifiersep> records ( records ) ) \n \t2 { \n <ect>
\t2 disposed = true ; \n \t2 try { \n \t3 data <identifiersep> file . close <identifiersep> random <identifiersep> access <identifiersep> file ( file ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 connection . start ( ) ; \n \t2 message <identifiersep> count = <number_literal> ; \n \t2 active <identifiersep> mq <identifiersep> connection amq <identifiersep> connection = ( active <identifiersep> mq <identifiersep> connection ) connection ; \n \t2 rollback <identifiersep> count = amq <identifiersep> connection . get <identifiersep> redelivery <identifiersep> policy ( ) . get <identifiersep> maximum <identifiersep> redeliveries ( ) + 1 ; \n <ect>
\t1 if ( 0 == os <identifiersep> stat . returncode and 0 != len ( out . strip ( ) ) ) : \n \t2 cached <identifiersep> hostname = out . strip ( ) \n \t2 logger . info ( <string_literal> . format ( cached <identifiersep> hostname , scriptname ) ) \n \t1 else : \n <ect>
\t7 +  <identifiersep> listen <identifiersep> host + <string_literal> +  <identifiersep> listen <identifiersep> port ) ; \n \t3 } else { \n \t4 server <identifiersep> socket . socket ( ) . bind ( new inet <identifiersep> socket <identifiersep> address (  <identifiersep> listen <identifiersep> port ) ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 default : \n \t5 acknowledgement . append ( ( char ) next <identifiersep> byte ) ; } } \n \t2 } catch ( socket <identifiersep> timeout <identifiersep> exception timeout <identifiersep> ex ) { \n \t3 if ( 0 < acknowledgement . length ( ) ) { \n <ect>
\t1 log . info ( <string_literal> ) ; \n \t1 log . debug ( ex , ex ) ; \n \t1 return false ; \n \t1 } catch ( exception ex ) { \n <ect>
\t5 logger . debug ( <string_literal> , item <identifiersep> name , command ) ; \n \t5 set <identifiersep> switch <identifiersep> actuator <identifiersep> state ( config . get <identifiersep> device <identifiersep> id ( ) , on ) ; \n \t5 <comment> \n \t4 } else if ( <string_literal> . equals ( config . get <identifiersep> device <identifiersep> param ( ) ) ) { \n <ect>
\t4 try { \n \t5 finput = new file <identifiersep> input <identifiersep> stream ( filename ) ; \n \t5 int byte <identifiersep> count = finput . available ( ) ; \n \t5 if ( byte <identifiersep> count < = 0 ) { \n <ect>
<comment> \n \t1 @ override public void stop ( boolean cancel ) throws grid <identifiersep> exception { \n <ect>
\t3 string display <identifiersep> name = localized <identifiersep> display <identifiersep> name <identifiersep> for <identifiersep> key ( entity != null ? entity . class <identifiersep> description <identifiersep> for <identifiersep> instances ( ) : null , key , localizer ) ; \n \t3 error <identifiersep> messages . set <identifiersep> object <identifiersep> for <identifiersep> key ( new <identifiersep> error <identifiersep> message , display <identifiersep> name ) ; \n \t2 } else { \n \t3 if ( key != null ) { \n <ect>
\t1 public boolean load ( ) throws exception { \n \t1 try { \n \t2 <comment> \n \t2 j <identifiersep> channel jchannel = host <identifiersep> manager . build <identifiersep> channel ( ) ; \n <ect>
# \n # sync users and groups with configured ldap \n # \n def sync <identifiersep> ldap ( options ) : \n <ect>
\t1 } else { \n \t1 replay <identifiersep> handler replay <identifiersep> handler = new replay <identifiersep> handler ( queue , \n \t2 encryption <identifiersep> key <identifiersep> provider , fsync <identifiersep> per <identifiersep> transaction ) ; \n \t1 if ( use <identifiersep> log <identifiersep> replay <identifiersep> v1 ) { \n <ect>
\t3 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t2 catch ( exception e ) { \n \t3 <comment> \n \t3 throwable t = erx <identifiersep> exception <identifiersep> utilities . get <identifiersep> meaningful <identifiersep> throwable ( e ) ; \n <ect>
\t6 if ( ! key . reset ( ) ) { \n \t7 keys . remove ( key ) ; } \n \t5 } while ( ! keys . is <identifiersep> empty ( ) ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t2 task <identifiersep> attempt <identifiersep> id = new task <identifiersep> attempt <identifiersep> id ( ) ; } \n \t1 task <identifiersep> context = context <identifiersep> util . new <identifiersep> task <identifiersep> attempt <identifiersep> context ( job <identifiersep> conf , task <identifiersep> attempt <identifiersep> id ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 initialize <identifiersep> ser <identifiersep> properties ( task <identifiersep> context , table <identifiersep> properties ) ; \n <ect>
\t1 return true ; } \n \t1 if ( ! made <identifiersep> dir ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t1 try { \n \t1 log . info ( <string_literal> + san <identifiersep> snapshot <identifiersep> id + <string_literal> + sc <identifiersep> iqn ) ; \n \t1 lun = connection <identifiersep> manager . export <identifiersep> resource ( san <identifiersep> snapshot <identifiersep> id , sc <identifiersep> iqn , snap <identifiersep> iqn ) ; \n \t1 } catch ( eucalyptus <identifiersep> cloud <identifiersep> exception att <identifiersep> ex ) { \n <ect>
\t5 error ++ ; \n \t4 } else if ( ( api . get <identifiersep> response <identifiersep> type ( ) != response <identifiersep> type . error ) && ( api . get <identifiersep> response <identifiersep> code ( ) == <number_literal> ) ) { \n \t5 <comment> \n \t5 if ( api . set <identifiersep> param ( this . get <identifiersep> param ( ) ) == false ) { \n <ect>
\t3 } else { \n \t4 log . trace ( <string_literal> , this . get <identifiersep> endpoint ( ) ) ; } \n \t2 } catch ( error e ) { \n \t3 <comment> \n <ect>
\t2 <comment> \n \t2 string user <identifiersep> id =  <identifiersep> user <identifiersep> id . get ( ) . to <identifiersep> string ( ) ; \n \t2 string encoded <identifiersep> user <identifiersep> id = url <identifiersep> encoder . encode ( user <identifiersep> id , <string_literal> ) ; \n \t2 string url = server + <string_literal> + encoded <identifiersep> user <identifiersep> id ; \n <ect>
\t5 catch ( h <identifiersep> result <identifiersep> exception hre ) \n \t5 { \n \t6 hresult = hre . get <identifiersep> h <identifiersep> result ( ) ; \n \t6 to <identifiersep> read = 0 ; \n <ect>
\t4 boolean result = jna <identifiersep> kernel32library . get <identifiersep> instance ( ) . add <identifiersep> console <identifiersep> ctrl <identifiersep> handler ( handler ) ; \n \t4 if ( result ) { \n \t5 logger . debug ( <string_literal> ) ; \n \t4 } else { \n <ect>
\t1 } catch ( throwable t ) { \n \t2 if ( query <identifiersep> thread <identifiersep> pool . is <identifiersep> shutdown ( ) ) \n \t2 log . debug ( <string_literal> , t ) ; \n \t2 else \n <ect>
\t1 private void stop ( lifecycle <identifiersep> listener listener ) { \n \t2 try { \n \t3 listener . on <identifiersep> event ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 private void run <identifiersep> throwable ( ) throws interrupted <identifiersep> exception { \n \t3 long start <identifiersep> monitor = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 task . start . await ( ) ; \n \t3 if ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> monitor > <number_literal> ) { \n <ect>
\t1 private class assert <identifiersep> shutdown <identifiersep> hook extends thread { \n \t2 public void run ( ) { \n \t3 long diff = system . current <identifiersep> time <identifiersep> millis ( ) - start ; \n \t3 if ( diff > <number_literal> ) { \n <ect>
\t1 public test <identifiersep> name test <identifiersep> name = new test <identifiersep> name ( ) ; \n \t1 count <identifiersep> down <identifiersep> latch after <identifiersep> execute <identifiersep> latch ; \n \t1 @ before \n \t1 public void setup ( ) throws exception { \n <ect>
\t2 } else { \n \t2 dest <identifiersep> object <identifiersep> info . replace <identifiersep> meta <identifiersep> data ( request . get <identifiersep> meta <identifiersep> data ( ) ) ; } \n \t2 tr . commit ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t5 + <string_literal> + root <identifiersep> group1 . to <identifiersep> string ( ) ) ; \n \t2 contact <identifiersep> group root <identifiersep> group2 \n \t3 = ( ( operation <identifiersep> set <identifiersep> persistent <identifiersep> presence ) op <identifiersep> set <identifiersep> presence2 ) . \n \t3 get <identifiersep> server <identifiersep> stored <identifiersep> contact <identifiersep> list <identifiersep> root ( ) ; \n <ect>
\t2 final long duration \t3 = system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ; \n \t2 final decimal <identifiersep> format decimal <identifiersep> format = new decimal <identifiersep> format ( <string_literal> , decimal <identifiersep> format <identifiersep> symbols . get <identifiersep> instance ( locale . english ) ) ; \n \t2 final string formatted <identifiersep> duration \t1 = decimal <identifiersep> format . format ( ( duration / <number_literal> . 0 ) ) + <string_literal> ; \n \t2 final string objects <identifiersep> per <identifiersep> second \t1 = decimal <identifiersep> format . format ( object <identifiersep> count / ( duration / <number_literal> . 0 ) ) ; \n <ect>
\t4 cube = get <identifiersep> cube <identifiersep> manager ( ) . get <identifiersep> cube ( cube <identifiersep> name ) ; \n \t4 segment <identifiersep> range offsets = cube . auto <identifiersep> merge <identifiersep> cube <identifiersep> segments ( ) ; \n \t4 if ( offsets != null ) { \n \t5 cube <identifiersep> segment new <identifiersep> seg = get <identifiersep> cube <identifiersep> manager ( ) . merge <identifiersep> segments ( cube , null , offsets , true ) ; \n <ect>
\t5 heuristic = find <identifiersep> address <identifiersep> using <identifiersep> strategy ( address <identifiersep> detection <identifiersep> state . heuristic , target <identifiersep> address , true ) ; } \n \t4 if ( heuristic != null ) { \n \t5 return heuristic ; \n \t4 } else { \n <ect>
\t5 if ( pattern != null ) { \n \t6 if ( answer == null ) { \n \t7 answer = another ; \n \t6 } else { \n <ect>
\t1 try ( transaction <identifiersep> resource tran = entities . transaction <identifiersep> for ( scheduled <identifiersep> job . class ) ) { \n \t1 jobs = entities . query ( new scheduled <identifiersep> job ( ) ) ; \n \t1 tran . commit ( ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t1 byte [ ] user <identifiersep> data = new byte [ 0 ] ; \n \t1 if ( com . google . common . base . strings . empty <identifiersep> to <identifiersep> null ( input . get <identifiersep> user <identifiersep> data ( ) ) != null ) try { \n \t2 user <identifiersep> data = base64 . decode ( input . get <identifiersep> user <identifiersep> data ( ) ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t4 int to <identifiersep> node = from <identifiersep> node == 0 ? 1 : 0 ; \n \t4 from <identifiersep> node += node <identifiersep> shift <identifiersep> based ; \n \t4 to <identifiersep> node += node <identifiersep> shift <identifiersep> based ; \n \t4 num <identifiersep> docs = scaled <identifiersep> random <identifiersep> int <identifiersep> between ( <number_literal> , <number_literal> ) ; \n <ect>
\t3 try { \n \t4 <comment> \n \t4 <comment> \n \t4 string body = io <identifiersep> utils . read <identifiersep> entirely <identifiersep> as <identifiersep> string ( r ) . to <identifiersep> string ( ) ; \n <ect>
\t3 nat <identifiersep> rules [ 0 ] . state , \n \t3 'active' , \n \t3 <string_literal> \n \t2 ) \n <ect>
\t1 public void mark <identifiersep> bad <identifiersep> persisted <identifiersep> index ( string path , throwable e ) { \n \t2 bad <identifiersep> index <identifiersep> info bad <identifiersep> index = bad <identifiersep> persisted <identifiersep> indexes . get ( path ) ; \n \t2 if ( bad <identifiersep> index == null ) { \n \t3 bad <identifiersep> persisted <identifiersep> indexes . put ( path , new bad <identifiersep> index <identifiersep> info ( path , e , true ) ) ; \n <ect>
\t3 return result ; } \n \t2 @ nullable \n \t2 private optional < object > get <identifiersep> disk <identifiersep> cached <identifiersep> object ( path file , dag <identifiersep> node < component , dependency > node ) { \n \t3 if ( file != null && files . exists ( file ) ) { \n <ect>
\t10 + v . get <identifiersep> version ( ) \n \t10 + <string_literal> \n \t10 + e . get <identifiersep> message ( ) ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t4 . set <identifiersep> repeat <identifiersep> last <identifiersep> token ( false ) \n \t4 . set <identifiersep> row <identifiersep> limit ( <number_literal> ) \n \t4 . execute <identifiersep> with <identifiersep> callback ( callback ) ; \n \t3 set < long > set = callback . get ( ) ; \n <ect>
\t1 try { \n \t2 job . execute ( 0 , result ) ; \n \t2 job . wait <identifiersep> until <identifiersep> finished ( ) ; \n \t1 } catch ( kettle <identifiersep> exception ke ) { \n <ect>
\t3 <string_literal> , rows ) ; \n \t2 for ( string query : queries ) { \n \t2 log . debug ( <string_literal> + query + <string_literal> ) ; \n \t2 mod <identifiersep> count = stmt . execute <identifiersep> update ( query ) ; } \n <ect>
<comment> \n \t1 public static void set <identifiersep> static <identifiersep> dispatcher <identifiersep> servlet ( static <identifiersep> dispatcher <identifiersep> servlet ds ) { \n <ect>
\t1 public void close ( ) { \n \t2 try { \n \t3  <identifiersep> app <identifiersep> util . dis <identifiersep> connect ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 if ( service == null || authentication == null ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 if ( timed <identifiersep> multifactor == null || timed <identifiersep> multifactor . is <identifiersep> empty ( ) ) { \n <ect>
\t3 throw t ; } \n \t2 catch ( error e ) { \n \t3 log . info ( <string_literal> <ect>
\t1 if ( service <identifiersep> discovery && ! active <identifiersep> passive <identifiersep> ha ) { \n \t1 try { \n \t2 remove <identifiersep> server <identifiersep> instance <identifiersep> from <identifiersep> zoo <identifiersep> keeper ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 + <string_literal> + cache <identifiersep> misses . long <identifiersep> value ( ) + <string_literal> + get <identifiersep> hit <identifiersep> ratio ( ) ) ; } \n \t1 else { \n \t2 cache <identifiersep> misses . increment <identifiersep> and <identifiersep> get ( ) ; } \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 try { \n \t6 ss . close ( ) ; \n \t6 thread . sleep ( <number_literal> ) ; \n \t5 } catch ( io <identifiersep> exception ie ) { \n <ect>
\t9 status <identifiersep> address . get <identifiersep> sub <identifiersep> address ( ) , true ) ) ; \n \t5 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , \n \t7 result == status <identifiersep> address . get <identifiersep> open <identifiersep> value ( ) ? open <identifiersep> closed <identifiersep> type . open : open <identifiersep> closed <identifiersep> type . closed ) ; \n \t4 } catch ( sapp <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> that ( template <identifiersep> names , contains <identifiersep> in <identifiersep> any <identifiersep> order ( <string_literal> , <string_literal> ) ) ; } \n \t1 public void test <identifiersep> that <identifiersep> invalid <identifiersep> get <identifiersep> index <identifiersep> templates <identifiersep> fails ( ) throws exception { \n \t2 logger . info ( <string_literal> ) ; \n \t2 test <identifiersep> expect <identifiersep> action <identifiersep> request <identifiersep> validation <identifiersep> exception ( ( string [ ] ) null ) ; \n <ect>
\t3 table <identifiersep> desc table = ( i == - 1 ) ? model . get <identifiersep> root <identifiersep> fact <identifiersep> table ( ) . get <identifiersep> table <identifiersep> desc ( ) : all <identifiersep> tables [ i ] . get <identifiersep> table <identifiersep> ref ( ) . get <identifiersep> table <identifiersep> desc ( ) ; \n \t3 all <identifiersep> table <identifiersep> desc . add ( table ) ; \n \t3 if ( generated . contains ( table ) ) \n \t4 continue ; \n <ect>
\t4 get <identifiersep> configuration ( ) . set <identifiersep> uuid ( uuid ) ; \n \t4 try { \n \t5 get <identifiersep> configuration ( ) . save ( ) ; \n \t4 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t3 response . set <identifiersep> status ( <number_literal> ) ; \n \t3 get <identifiersep> gson ( ) . to <identifiersep> json ( map , response . get <identifiersep> writer ( ) ) ; \n \t3 response . get <identifiersep> writer ( ) . println ( ) ; \n \t2 } catch ( unsupported <identifiersep> operation <identifiersep> exception uoe ) { \n <ect>
\t3 return get <identifiersep> thumbnail ( card ) ; } \n \t2 string key = get <identifiersep> key ( card , card . get <identifiersep> name ( ) , integer . to <identifiersep> string ( width ) ) ; \n \t2 buffered <identifiersep> image original = get <identifiersep> image ( key ) ; \n \t2 if ( original == null ) { \n <ect>
\t3 <comment> \n \t3 e <identifiersep> person <identifiersep> service <identifiersep> factory . get <identifiersep> instance ( ) . get <identifiersep> group <identifiersep> service ( ) . init <identifiersep> default <identifiersep> group <identifiersep> names ( context ) ; \n \t3 context . restore <identifiersep> auth <identifiersep> system <identifiersep> state ( ) ; \n \t2 } catch ( authorize <identifiersep> exception ex ) { \n <ect>
import java . util . logging . logger ; \n public class input <identifiersep> lambda2 { \n \t1 private static final logger log = logger . get <identifiersep> logger ( input <identifiersep> lambda2 . class . get <identifiersep> name ( ) ) ; \n \t1 public static void test <identifiersep> void <identifiersep> lambda ( test <identifiersep> of <identifiersep> void <identifiersep> lambdas test ) { \n <ect>
\t5 <comment> \n \t5 try { \n \t6 m <identifiersep> in . close ( ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 protected void log <identifiersep> cas <identifiersep> validation <identifiersep> assertion ( final assertion assertion ) { \n \t2 logger . debug ( <string_literal> , assertion . is <identifiersep> valid ( ) ) ; \n <ect>
\t3 target target = point . target ; \n \t3 list < viterbi <identifiersep> candidate > candidates = database . get <identifiersep> candidates ( target ) ; \n \t3 if ( candidates . size ( ) == 0 ) { \n \t4 if ( target instanceof diphone <identifiersep> target ) { \n <ect>
\t6 throw new cloud <identifiersep> runtime <identifiersep> exception ( ex . get <identifiersep> message ( ) ) ; } \n \t5 if ( ! cmds . is <identifiersep> successful ( ) ) { \n \t6 for ( answer answer : cmds . get <identifiersep> answers ( ) ) { \n \t7 if ( ! answer . get <identifiersep> result ( ) ) { \n <ect>
\t1 service <identifiersep> component <identifiersep> host sch = service <identifiersep> component . get <identifiersep> service <identifiersep> component <identifiersep> host ( host <identifiersep> name ) ; \n \t1 string refresh <identifiersep> configs <identifiersep> command = helper . get <identifiersep> refresh <identifiersep> configs <identifiersep> command ( cluster , sch ) ; \n \t1 r . set <identifiersep> reload <identifiersep> config ( refresh <identifiersep> configs <identifiersep> command != null ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 if ( this . type == result <identifiersep> set . type <identifiersep> scroll <identifiersep> insensitive && needs <identifiersep> commit ) { \n <ect>
\t4 } else { \n \t5 media <identifiersep> name = <string_literal> ; } \n \t3 } else { \n \t4 media <identifiersep> name = <string_literal> ; } \n <ect>
\t1 error <identifiersep> callback ( command , cmd . stderr . readlines ( ) , cmd . returncode ) \n except exception as e : \n \t1 if kill <identifiersep> timer : \n \t1 kill <identifiersep> timer . cancel ( ) \n <ect>
\t2 throws exception \n \t1 { \n \t2 if ( use <identifiersep> prop <identifiersep> file <identifiersep> config <identifiersep> service ( bundle <identifiersep> context ) ) \n \t2 { \n <ect>
\t1 public void tear <identifiersep> down ( ) throws exception { \n \t2 if ( broker != null ) { \n \t3 broker . stop ( ) ; \n \t3 broker . wait <identifiersep> until <identifiersep> stopped ( ) ; } \n <ect>
<comment> \n \t1 protected void build <identifiersep> signature <identifiersep> validation <identifiersep> filter <identifiersep> if <identifiersep> needed ( final saml <identifiersep> registered <identifiersep> service service , final list < metadata <identifiersep> filter > metadata <identifiersep> filter <identifiersep> list ) throws exception { \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( service . get <identifiersep> metadata <identifiersep> signature <identifiersep> location ( ) ) ) { \n <ect>
\t2 if ( get <identifiersep> attribute <identifiersep> repository ( ) == null ) { \n \t3 logger . debug ( <string_literal> , get <identifiersep> class ( ) . get <identifiersep> name ( ) , p . get <identifiersep> id ( ) ) ; \n \t3 return cached <identifiersep> attributes ; } \n \t2 final map < string , list < object > > source <identifiersep> attributes = retrieve <identifiersep> person <identifiersep> attributes <identifiersep> to <identifiersep> principal <identifiersep> attributes ( p . get <identifiersep> id ( ) ) ; \n <ect>
\t6 event . set <identifiersep> path ( <string_literal> ) ; \n \t5 else if ( server <identifiersep> path . length ( ) > chroot <identifiersep> path . length ( ) ) \n \t6 event . set <identifiersep> path ( server <identifiersep> path . substring ( chroot <identifiersep> path . length ( ) ) ) ; \n \t5 else { \n <ect>
public void resume <identifiersep> node ( string id ) { \n \t1 string virtual <identifiersep> machine <identifiersep> id = id ; \n \t1 string job = client . get <identifiersep> virtual <identifiersep> machine <identifiersep> api ( ) . start <identifiersep> virtual <identifiersep> machine ( id ) ; \n \t1 if ( job != null ) { \n <ect>
\t1 public logout <identifiersep> execution <identifiersep> plan logout <identifiersep> execution <identifiersep> plan ( final list < logout <identifiersep> execution <identifiersep> plan <identifiersep> configurer > configurers ) { \n \t2 final default <identifiersep> logout <identifiersep> execution <identifiersep> plan plan = new default <identifiersep> logout <identifiersep> execution <identifiersep> plan ( ) ; \n \t2 configurers . for <identifiersep> each ( c - > { \n \t3 final string name = string <identifiersep> utils . remove <identifiersep> pattern ( c . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , <string_literal> ) ; \n <ect>
\t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + wctx + <string_literal> ) ; } \n \t2 final ws <identifiersep> federation <identifiersep> configuration configuration = configurations . stream ( ) . filter ( c - > c . get <identifiersep> id ( ) . equals ( w <identifiersep> ctx ) ) . find <identifiersep> first ( ) . or <identifiersep> else ( null ) ; \n \t2 final string value = configuration . get <identifiersep> cookie <identifiersep> generator ( ) . retrieve <identifiersep> cookie <identifiersep> value ( request ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( value ) ) { \n <ect>
\t5 system . get <identifiersep> property ( <string_literal> ) + \n \t5 <string_literal> + get <identifiersep> login <identifiersep> context <identifiersep> message ( ) ) ; } \n \t2 login <identifiersep> context login <identifiersep> context = new login <identifiersep> context ( login <identifiersep> context <identifiersep> name , callback <identifiersep> handler ) ; \n \t2 login <identifiersep> context . login ( ) ; \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + vm <identifiersep> instance + <string_literal> ) ; \n \t5 return true ; } } \n \t2 } else { \n <ect>
\t1 this . conf <identifiersep> factory = conf <identifiersep> factory ; \n \t1 this . fs = fs ; \n \t1 final accumulo <identifiersep> configuration aconf = get <identifiersep> configuration ( ) ; \n \t1 log . info ( <string_literal> + constants . version ) ; \n <ect>
\t3 return ; } \n \t2 final ldap <identifiersep> attribute attribute = response . get <identifiersep> ldap <identifiersep> entry ( ) . get <identifiersep> attribute ( this . warn <identifiersep> attribute <identifiersep> name ) ; \n \t2 boolean matches = false ; \n \t2 if ( attribute != null ) { \n <ect>
\t3 logger . info ( <string_literal> , state ) ; \n \t3 state = cluster . apply <identifiersep> failed <identifiersep> shards ( state , shards <identifiersep> to <identifiersep> fail ) ; \n \t3 final cluster <identifiersep> state compare <identifiersep> state = state ; \n \t3 failed <identifiersep> primaries . for <identifiersep> each ( shard <identifiersep> routing - > { \n <ect>
\t2 } else if ( info . is <identifiersep> network <identifiersep> connection ( ) && ! info . is <identifiersep> duplex <identifiersep> connection ( ) ) { \n \t3 try { \n \t4 network <identifiersep> bridge <identifiersep> configuration config = get <identifiersep> network <identifiersep> configuration ( info ) ; \n \t4 if ( config . is <identifiersep> sync <identifiersep> durable <identifiersep> subs ( ) && protocol <identifiersep> version . get ( ) >= command <identifiersep> types . protocol <identifiersep> version <identifiersep> durable <identifiersep> sync ) { \n <ect>
\t3 return clusters . get <identifiersep> cluster ( long . value <identifiersep> of ( cluster <identifiersep> id ) ) ; \n \t2 } catch ( ambari <identifiersep> exception e ) { \n \t3 log . error ( string . format ( <string_literal> , cluster <identifiersep> id , e . get <identifiersep> message ( ) ) , e ) ; } \n \t2 } else { \n <ect>
\t2 create <identifiersep> snapshot <identifiersep> response create <identifiersep> response = client . admin ( ) . cluster ( ) \n \t3 . prepare <identifiersep> create <identifiersep> snapshot ( repo , snapshot ) \n \t3 . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) . set <identifiersep> indices ( shrunk <identifiersep> idx ) . get ( ) ; \n \t2 assert <identifiersep> equals ( snapshot <identifiersep> state . success , create <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . state ( ) ) ; \n <ect>
\t4 this . remote <identifiersep> observation <identifiersep> manager = this . component <identifiersep> manager . get <identifiersep> instance ( remote <identifiersep> observation <identifiersep> manager . class ) ; \n \t4 om . add <identifiersep> listener ( this ) ; \n \t4 this . remote <identifiersep> observation <identifiersep> manager . notify ( new local <identifiersep> event <identifiersep> data ( event , source , data ) ) ; \n \t3 } catch ( component <identifiersep> lookup <identifiersep> exception e ) { \n <ect>
\t6 long account <identifiersep> resource <identifiersep> count = recalculate <identifiersep> account <identifiersep> resource <identifiersep> count ( account . get <identifiersep> id ( ) , type ) ; \n \t6 new <identifiersep> resource <identifiersep> count += account <identifiersep> resource <identifiersep> count ; <comment> \n \t4  <identifiersep> resource <identifiersep> count <identifiersep> dao . set <identifiersep> resource <identifiersep> count ( domain <identifiersep> id , resource <identifiersep> owner <identifiersep> type . domain , type , new <identifiersep> resource <identifiersep> count ) ; \n \t4 if ( old <identifiersep> resource <identifiersep> count != new <identifiersep> resource <identifiersep> count ) { \n <ect>
\t1 } finally { \n \t2 <comment> \n \t2 pentaho <identifiersep> session <identifiersep> holder . set <identifiersep> session ( orig <identifiersep> pentaho <identifiersep> session ) ; \n \t2 io <identifiersep> utils . close <identifiersep> quietly ( out ) ; } \n <ect>
\t3 return false ; } \n \t2 not <identifiersep> yet <identifiersep> implemented <identifiersep> flag . set ( boolean . true ) ; \n \t2 final method test <identifiersep> method = find <identifiersep> running <identifiersep> j <identifiersep> unit <identifiersep> test <identifiersep> method ( caller . get <identifiersep> class ( ) ) ; \n \t2 try { \n <ect>
@ get \n @ produces ( media <identifiersep> type . application <identifiersep> json ) \n public response get <identifiersep> list ( ) { \n \t1 try { \n <ect>
\t3 ternary < string , channel , event <identifiersep> subscriber > queue <identifiersep> details = s <identifiersep> subscribers . get ( queue <identifiersep> name ) ; \n \t3 queue <identifiersep> details . second ( channel ) ; \n \t3 s <identifiersep> subscribers . put ( queue <identifiersep> name , queue <identifiersep> details ) ; \n \t2 } catch ( already <identifiersep> closed <identifiersep> exception closed <identifiersep> exception ) { \n <ect>
\t4 return return <identifiersep> val ; } \n \t3 s <identifiersep> logger . warn ( <string_literal> , naf ) ; \n \t3 throw new server <identifiersep> exception ( <string_literal> , naf ) ; } \n \t2 catch ( na <identifiersep> exception nae ) { \n <ect>
\t3 synchronized ( templates <identifiersep> cache ) { \n \t4 url resource = servlet <identifiersep> action <identifiersep> context . get <identifiersep> servlet <identifiersep> context ( ) . get <identifiersep> resource ( path ) ; \n \t4 if ( resource == null ) { \n \t5 throw new transformer <identifiersep> exception ( <string_literal> + path + <string_literal> ) ; } \n <ect>
\t7 return request . is <identifiersep> complete ( ) ; } \n \t5 } ) ; \n \t4 } else { \n \t5 try { \n <ect>
\t2 } else { \n \t2 log . warn ( <string_literal> + snapshot <identifiersep> id \n \t3 + <string_literal> ) ; } \n \t1 } catch ( exception ex ) { \n <ect>
\t2 final list < metadata <identifiersep> resolver > resolvers = new array <identifiersep> list < > ( ) ; \n \t2 final set < map . entry < resource , metadata <identifiersep> filter <identifiersep> chain > > entries = this . metadata <identifiersep> resources . entry <identifiersep> set ( ) ; \n \t2 entries . for <identifiersep> each ( entry - > { \n \t3 final resource resource = entry . get <identifiersep> key ( ) ; \n <ect>
\t3 return ; } \n \t2 string param = ( string ) properties . get ( cfg <identifiersep> connection <identifiersep> url ) ; \n \t2 logger . debug ( <string_literal> + param ) ; \n \t2 if ( param == null ) { \n <ect>
\t3 listener . notify ( urls ) ; } } \n \t1 public void disconnect ( ) { \n \t2 string client = rpc <identifiersep> context . get <identifiersep> context ( ) . get <identifiersep> remote <identifiersep> address <identifiersep> string ( ) ; \n <ect>
\t5 if ( stt == null || stt . is <identifiersep> expired ( ) ) { \n \t6 logger . warn ( <string_literal> , sts ) ; \n \t6 return null ; } \n \t5 if ( stt . get <identifiersep> security <identifiersep> token ( ) . is <identifiersep> expired ( ) ) { \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 logger . info ( <string_literal> , ip , e . get <identifiersep> message ( ) ) ; \n \t3 socket <identifiersep> close ( ) ; <comment> \n \t2 } catch ( exception e ) { \n <ect>
\t4 s <identifiersep> link = connect <identifiersep> by <identifiersep> ip ( s <identifiersep> ip <identifiersep> connection <identifiersep> type , s <identifiersep> local <identifiersep> ip , s <identifiersep> ip , s <identifiersep> port ) ; \n \t3 } else if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( s <identifiersep> serial <identifiersep> port ) ) { \n \t4 s <identifiersep> link = connect <identifiersep> by <identifiersep> serial ( s <identifiersep> serial <identifiersep> port ) ; \n \t3 } else { \n <ect>
<comment> \n \t1 private void dimm ( short new <identifiersep> dimm <identifiersep> value ) { \n \t2 if ( new <identifiersep> dimm <identifiersep> value == null ) { \n <ect>
\t5 throw new execution <identifiersep> exception ( <string_literal> + vlan <identifiersep> tag ) ; \n \t4 } else { \n \t5 return true ; } \n \t3 default : \n <ect>
\t1 public file populate ( file version <identifiersep> dir , version <identifiersep> ref ref , version <identifiersep> control <identifiersep> spec spec ) { \n \t2 git <identifiersep> version <identifiersep> control <identifiersep> spec git <identifiersep> spec = cast ( spec ) ; \n \t2 file working <identifiersep> dir = new file ( version <identifiersep> dir , git <identifiersep> spec . get <identifiersep> repo <identifiersep> name ( ) ) ; \n \t2 file db <identifiersep> dir = new file ( working <identifiersep> dir , <string_literal> ) ; \n <ect>
\t3 if ( last <identifiersep> fetch + ms <  <identifiersep> context . clock ( ) . now ( ) ) { \n \t4 return true ; \n \t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 try { \n \t3 record = vm . get <identifiersep> record ( conn ) ; \n \t3 final set < console > consoles = record . consoles ; \n \t3 if ( consoles . is <identifiersep> empty ( ) ) { \n <ect>
protected object lookup ( context ctx , string name ) throws naming <identifiersep> exception { \n \t1 try { \n \t1 return ctx . lookup ( name ) ; \n \t1 } catch ( name <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 stop <identifiersep> heartbeat ( ) ; \n \t1 log . debug ( <string_literal> + java <identifiersep> utils . txn <identifiersep> id <identifiersep> to <identifiersep> string ( txn <identifiersep> id ) ) ; \n \t1 get <identifiersep> ms ( ) . rollback <identifiersep> txn ( txn <identifiersep> id ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> txn <identifiersep> exception e ) { \n <ect>
\t2 boolean result ; \n \t2 byte [ ] digest = obj . get <identifiersep> first <identifiersep> digest ( ) ; \n \t2 content <identifiersep> name name = obj . get <identifiersep> versioned <identifiersep> name ( ) ; \n \t2 if ( log . is <identifiersep> loggable ( level . info ) ) { \n <ect>
\t2 try { \n \t3 if ( m <identifiersep> parameters . get ( key ) != null ) { \n \t4 return double . parse <identifiersep> double ( m <identifiersep> parameters . get ( key ) ) ; } \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 return json <identifiersep> serialization . read <identifiersep> value ( refresh <identifiersep> token . get <identifiersep> text ( ) , refresh <identifiersep> token . class ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception nsee ) { \n <ect>
\t4 catch ( io <identifiersep> exception e ) \n \t4 { \n \t5 <comment> \n \t5 <comment> \n <ect>
\t1 if ( pos1 > - 1 ) { \n \t2 string part = template . substring ( last <identifiersep> end , start ) ; \n \t2 if ( pentaho <identifiersep> system . debug ) { \n \t2 template <identifiersep> util . logger . debug ( <string_literal> + parameter ) ; <comment> \n <ect>
\t2 string archive <identifiersep> file <identifiersep> name = utilities . generate <identifiersep> tar <identifiersep> file <identifiersep> name ( stage <identifiersep> id ) ; \n \t2 localwork . set <identifiersep> stage <identifiersep> id ( stage <identifiersep> id ) ; \n \t2 compression <identifiersep> utils . tar ( local <identifiersep> path . to <identifiersep> uri ( ) . get <identifiersep> path ( ) , file <identifiersep> names , archive <identifiersep> file <identifiersep> name ) ; \n \t2 path archive <identifiersep> path = utilities . generate <identifiersep> tar <identifiersep> path ( local <identifiersep> path , stage <identifiersep> id ) ; \n <ect>
private option name <identifiersep> opt , all <identifiersep> opt ; \n @ override \n public int execute ( final string full <identifiersep> command , final command <identifiersep> line cl , final shell shell <identifiersep> state ) \n \t1 throws exception { \n <ect>
\t2 try { \n \t3 if ( ! server <identifiersep> socket . is <identifiersep> closed ( ) ) \n \t4 server <identifiersep> socket . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 logger . debug ( <string_literal> , \n \t4 requested <identifiersep> provider , bypassed <identifiersep> id ) ; } \n \t2 final collection < multifactor <identifiersep> authentication <identifiersep> provider > satisfied <identifiersep> providers = get <identifiersep> satisfied <identifiersep> authentication <identifiersep> providers ( authentication , provider <identifiersep> map . values ( ) ) ; \n \t2 if ( satisfied <identifiersep> providers == null ) { \n <ect>
\t3 http <identifiersep> servlet <identifiersep> request request = this . async <identifiersep> web <identifiersep> request . get <identifiersep> native <identifiersep> request ( http <identifiersep> servlet <identifiersep> request . class ) ; \n \t3 if ( request != null ) { \n \t4 string request <identifiersep> uri = url <identifiersep> path <identifiersep> helper . get <identifiersep> request <identifiersep> uri ( request ) ; \n <ect>
\t1 private static boolean is <identifiersep> mac <identifiersep> jna <identifiersep> affinity <identifiersep> usable ( ) { \n \t2 if ( is <identifiersep> jna <identifiersep> available ( ) ) { \n \t3 return true ; \n \t2 } else { \n <ect>
\t1 if ( accumulo != null ) { \n \t1 try { \n \t2 accumulo . stop ( ) ; \n \t1 } catch ( io <identifiersep> exception | interrupted <identifiersep> exception e ) { \n <ect>
\t3 for ( catalog <identifiersep> info catalog <identifiersep> info : datasource <identifiersep> info . catalog <identifiersep> map . values ( ) ) { \n \t3 try { \n \t4 return get <identifiersep> connection ( catalog <identifiersep> info , server , role <identifiersep> name , props ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 if ( interesting && last <identifiersep> request == null ) { \n \t2 interesting = false ; \n \t2 out . send <identifiersep> interest ( false ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 sql . execute ( <string_literal> ) ; \n \t3 log . info ( <string_literal> ) ; \n \t3 sql . execute ( <string_literal> ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 raise fault ( dispatch <identifiersep> err <identifiersep> code ( 'invalid <identifiersep> call <identifiersep> method <identifiersep> format' ) , <string_literal> %p ) \n \t1 clz <identifiersep> name = p [ 0 ] \n \t1 func <identifiersep> name = p [ 1 ] \n \t1 if clz <identifiersep> name not in exposed <identifiersep> class . keys ( ) : \n <ect>
\t3 { \n \t4 tuple t = result . next ( ) ; \n \t4 system . out . println ( tuple <identifiersep> format . format ( t ) ) ; } \n \t2 } else { \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
\t5 log . error ( uuid + <string_literal> + ( ability instanceof static <identifiersep> ability ) + <string_literal> + ability ) ; \n \t5 log . error ( uuid + <string_literal> + usable + <string_literal> + ability ) ; \n \t5 if ( ! usable ) { \n \t6 zone zone = ability . get <identifiersep> zone ( ) ; \n <ect>
\t3 = active <identifiersep> calls <identifiersep> repository . find <identifiersep> call <identifiersep> peer ( jingle <identifiersep> iq . get <identifiersep> sid ( ) ) ; \n \t2 iq . type type = jingle <identifiersep> iq . get <identifiersep> type ( ) ; \n \t2 if ( type == type . error ) \n \t2 { \n <ect>
\t8 else { \n \t9 u . error ( log , <string_literal> + svc <identifiersep> ctx . name ( ) + \n \t10 <string_literal> + svc <identifiersep> ctx . execution <identifiersep> id ( ) + ' ] ' , e ) ; } } \n \t7 catch ( throwable e ) { \n <ect>
\t3 icon = new byte [ is . available ( ) ] ; \n \t3 is . read ( icon ) ; } \n \t2 catch ( io <identifiersep> exception exc ) \n \t2 { \n <ect>
\t1 private static int validate <identifiersep> max <identifiersep> retries ( int max <identifiersep> retries ) \n \t1 { \n \t2 if ( max <identifiersep> retries > max <identifiersep> retries <identifiersep> limit ) \n \t2 { \n <ect>
\t4 stats . add <identifiersep> run ( s ) ; \n \t4 last <identifiersep> result = s . to <identifiersep> string ( ) ; \n \t3 } catch ( exception e ) { \n \t4 last <identifiersep> result = e ; \n <ect>
\t6 lifecycle <identifiersep> listeners . add <identifiersep> all ( container . lookup <identifiersep> list ( abstract <identifiersep> maven <identifiersep> lifecycle <identifiersep> participant . class ) ) ; } \n \t5 catch ( component <identifiersep> lookup <identifiersep> exception e ) \n \t5 { \n \t6 <comment> \n <ect>
\t3 } else { \n \t4 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , <string_literal> ) ; } \n \t3 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t2 } catch ( discovery <identifiersep> exception ex ) { \n <ect>
\t1 log . debug ( <string_literal> , custom <identifiersep> action <identifiersep> definition <identifiersep> root . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t1 if ( custom <identifiersep> action <identifiersep> definition <identifiersep> root . exists ( ) && custom <identifiersep> action <identifiersep> definition <identifiersep> root . is <identifiersep> directory ( ) ) { \n \t2 ad <identifiersep> manager . read <identifiersep> custom <identifiersep> action <identifiersep> definitions ( custom <identifiersep> action <identifiersep> definition <identifiersep> root ) ; \n \t1 } else { \n <ect>
\t4 logger . error ( <string_literal> , \n \t5 assertion . get <identifiersep> key ( ) , rp <identifiersep> id , configuration . get <identifiersep> identity <identifiersep> provider <identifiersep> identifier ( ) ) ; \n \t4 return error ( ) ; } \n \t3 if ( credential != null && credential . is <identifiersep> valid ( rp <identifiersep> id , configuration . get <identifiersep> identity <identifiersep> provider <identifiersep> identifier ( ) , configuration . get <identifiersep> tolerance ( ) ) ) { \n <ect>
\t3 log . debug ( <string_literal> + \n \t5 <string_literal> , e ) ; } \n \t2 catch ( throwable t ) { \n \t3 <comment> \n <ect>
\t2 <comment> \n \t2 s <identifiersep> bucket <identifiersep> dao bucket <identifiersep> dao = new s <identifiersep> bucket <identifiersep> dao ( ) ; \n \t2 s <identifiersep> bucket bucket = bucket <identifiersep> dao . get <identifiersep> by <identifiersep> name ( bucket <identifiersep> name ) ; \n \t2 if ( bucket == null ) { \n <ect>
\t5 try { \n \t6 fut . get ( ) ; } \n \t5 catch ( grid <identifiersep> exception e ) { \n <ect>
\t6 } catch ( interrupted <identifiersep> exception e ) { } \n \t6 logger . info ( <string_literal> ) ; \n \t6 persist <identifiersep> context . release <identifiersep> named <identifiersep> lock ( <string_literal> ) ; \n \t5 } else { \n <ect>
\t4 } catch ( final concurrent <identifiersep> operation <identifiersep> exception e ) { \n \t5 s <identifiersep> logger . warn ( <string_literal> + element . get <identifiersep> name ( ) , e ) ; \n \t5 success = false ; \n \t4 } catch ( final exception e ) { \n <ect>
\t3 initialized = true ; \n \t2 } catch ( final file <identifiersep> not <identifiersep> found <identifiersep> exception exc ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> ) ; \n \t2 } catch ( final throwable t ) { \n <ect>
\t2 if ( sasl <identifiersep> client != null ) { \n \t3 try { \n \t4 sasl <identifiersep> client . dispose ( ) ; \n \t3 } catch ( sasl <identifiersep> exception e ) { \n <ect>
\t6 s <identifiersep> logger . info ( <string_literal> ) ; \n \t6 return false ; } \n \t5 string restart <identifiersep> command = <string_literal> ; \n \t5 session sess = conn . open <identifiersep> session ( ) ; \n <ect>
\t1 private static throwable explicit <identifiersep> no <identifiersep> unsafe <identifiersep> cause0 ( ) { \n \t2 final boolean no <identifiersep> unsafe = system <identifiersep> property <identifiersep> util . get <identifiersep> boolean ( <string_literal> , false ) ; \n \t2 logger . debug ( <string_literal> , no <identifiersep> unsafe ) ; \n \t2 if ( no <identifiersep> unsafe ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t3 long age <identifiersep> of <identifiersep> record <identifiersep> in <identifiersep> millis = system . current <identifiersep> time <identifiersep> millis ( ) - record <identifiersep> create <identifiersep> time ; \n \t3 log . info ( record . get <identifiersep> sequence <identifiersep> number ( ) + <string_literal> + record . get <identifiersep> partition <identifiersep> key ( ) + <string_literal> + data + <string_literal> \n \t5 + age <identifiersep> of <identifiersep> record <identifiersep> in <identifiersep> millis + <string_literal> ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t5 object body = r . val ( body <identifiersep> idx ) ; \n \t5 if ( body != null && body instanceof closeable ) { \n \t6 ( ( closeable ) body ) . close ( ) ; } \n \t4 } catch ( throwable e ) { \n <ect>
\t2 @ override \n \t2 public void setup ( final management <identifiersep> client management <identifiersep> client , final string container <identifiersep> id ) throws io <identifiersep> exception { \n \t3 audit <identifiersep> provider <identifiersep> j <identifiersep> boss <identifiersep> module . create ( true ) ; \n \t3 login <identifiersep> j <identifiersep> boss <identifiersep> module . create ( true ) ; \n <ect>
\t2 current <identifiersep> dirs . add ( dir ) ; \n \t2 continue ; } \n \t1 if ( ! current <identifiersep> dirs . is <identifiersep> empty ( ) ) { \n <ect>
\t2 if ( cache <identifiersep> value != null ) { \n \t3 replicates = ( list < map < ? extends object , ? extends list < tuple > > > ) cache <identifiersep> value ; \n \t3 log . info ( <string_literal> + ( replicates . size ( ) - 1 ) + <string_literal> + cache <identifiersep> key ) ; \n \t3 return ; } \n <ect>
\t1 if ( internal <identifiersep> users <identifiersep> map . contains <identifiersep> key ( user <identifiersep> name ) ) { \n \t2 final user user = internal <identifiersep> users <identifiersep> map . get ( user <identifiersep> name ) ; \n \t2 if ( user != null && ! user . is <identifiersep> ldap <identifiersep> user ( ) ) { \n \t2 if ( ldap <identifiersep> username <identifiersep> collision <identifiersep> handling <identifiersep> behavior . skip == get <identifiersep> configuration ( ) . sync <identifiersep> collision <identifiersep> handling <identifiersep> behavior ( ) ) { \n <ect>
\t3 <string_literal> ) ; \n \t1 logger . debug ( <string_literal> , load <identifiersep> balancer <identifiersep> name ) ; \n \t1 load <identifiersep> balancer <identifiersep> metadata lb = load <identifiersep> balancer <identifiersep> strategy . create <identifiersep> load <identifiersep> balancer <identifiersep> in <identifiersep> location ( location , load <identifiersep> balancer <identifiersep> name , protocol , \n \t3 load <identifiersep> balancer <identifiersep> port , instance <identifiersep> port , nodes ) ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 if ( <string_literal> . equals <identifiersep> ignore <identifiersep> case ( name ) ) { \n <ect>
\t1 protected byte [ ] do <identifiersep> deserialize ( input <identifiersep> stream input <identifiersep> stream , byte [ ] buffer ) throws io <identifiersep> exception { \n \t2 int n = 0 ; \n \t2 int bite = 0 ; \n <ect>
\t3 broker1 . stop ( ) ; \n \t2 } else { \n \t3 log . info ( <string_literal> ) ; } \n \t2 if ( broker2 != null && broker2 . is <identifiersep> started ( ) ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 logger . trace ( <string_literal> , this . get <identifiersep> payload ( ) ) ; \n \t2 logger . debug ( <string_literal> , cal . get <identifiersep> time ( ) ) ; \n \t2 logger . debug ( <string_literal> , raw <identifiersep> serial <identifiersep> number ) ; \n <ect>
\t3 input <identifiersep> stream <identifiersep> reader temperr <identifiersep> reader = new input <identifiersep> stream <identifiersep> reader ( new buffered <identifiersep> input <identifiersep> stream ( p . get <identifiersep> error <identifiersep> stream ( ) ) ) ; \n \t3 buffered <identifiersep> reader errreader = new buffered <identifiersep> reader ( temperr <identifiersep> reader ) ; \n \t3 if ( errreader . ready ( ) ) { \n \t4 string error <identifiersep> output = new string ( <string_literal> ) ; \n <ect>
\t6 m <identifiersep> user <identifiersep> i <identifiersep> ds . size ( ) > 0 ? i <identifiersep> cms <identifiersep> principal . principal <identifiersep> user : i <identifiersep> cms <identifiersep> principal . principal <identifiersep> group ) ; \n \t4 } else { \n \t5 m <identifiersep> principal <identifiersep> select . set <identifiersep> widget <identifiersep> type ( widget <identifiersep> type . principalwidget ) ; } } \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t2 if ( fs . exists ( metadata <identifiersep> path ) == false ) { \n \t3 logger . warn ( <string_literal> + path ) ; \n \t3 create <identifiersep> meta <identifiersep> folder ( metadata <identifiersep> path ) ; } \n \t2 hdfs <identifiersep> meta <identifiersep> path = metadata <identifiersep> path ; \n <ect>
\t3 logger . debug ( <string_literal> , driver <identifiersep> minor <identifiersep> version ) ; \n \t3 db <identifiersep> product <identifiersep> name = meta . get <identifiersep> database <identifiersep> product <identifiersep> name ( ) ; \n \t3 logger . debug ( <string_literal> , db <identifiersep> product <identifiersep> name ) ; \n \t3 db <identifiersep> product <identifiersep> version = meta . get <identifiersep> database <identifiersep> product <identifiersep> version ( ) ; \n <ect>
\t2 try { \n \t3 main . launch ( ) ; \n \t2 } catch ( exception e ) { \n \t3 main = null ; \n <ect>
\t1 for ( string sql : sql <identifiersep> stmts ) { \n \t2 st . execute <identifiersep> update ( sql ) ; } \n \t1 connection . commit ( ) ; \n \t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t4 <comment> \n \t4 thread <identifiersep> pool . executor ( executor <identifiersep> name ( ) ) . execute ( ( ) - > maybe <identifiersep> refresh ( ) ) ; } \n \t2 } catch ( es <identifiersep> rejected <identifiersep> execution <identifiersep> exception ex ) { \n <ect>
\t6 reader = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( new file <identifiersep> input <identifiersep> stream ( input <identifiersep> file ) , <string_literal> ) ) ; \n \t5 } else { \n \t6 reader = new buffered <identifiersep> reader ( new input <identifiersep> stream <identifiersep> reader ( new file <identifiersep> input <identifiersep> stream ( input <identifiersep> file ) , <string_literal> ) ) ; } \n \t4 } catch ( unsupported <identifiersep> encoding <identifiersep> exception ex ) { \n <ect>
\t2 workspace <identifiersep> provider . synchronized <identifiersep> operation ( new callable < void > ( ) { \n \t3 @ override \n \t3 public void call ( ) { \n \t4 try { \n <ect>
\t5 jdbc <identifiersep> adaptor jdbc = ( jdbc <identifiersep> adaptor ) adaptor ; \n \t5 erxsql <identifiersep> helper helper = erxsql <identifiersep> helper . new <identifiersep> sql <identifiersep> helper ( jdbc ) ; \n \t5 string sql = helper . create <identifiersep> schema <identifiersep> sql <identifiersep> for <identifiersep> entities <identifiersep> in <identifiersep> model <identifiersep> and <identifiersep> options ( eomodel . entities ( ) , eomodel , helper . default <identifiersep> option <identifiersep> dictionary ( true , true ) ) ; \n \t5 erx <identifiersep> file <identifiersep> utilities . write <identifiersep> input <identifiersep> stream <identifiersep> to <identifiersep> file ( new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( sql . get <identifiersep> bytes ( ) ) , dump <identifiersep> file ) ; \n <ect>
\t2 if ( vo . get <identifiersep> hypervisor <identifiersep> type ( ) != hypervisor <identifiersep> type . bare <identifiersep> metal ) { \n \t3 return true ; } \n \t2 host <identifiersep> vo host =  <identifiersep> host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( vo . get <identifiersep> host <identifiersep> id ( ) ) ; \n \t2 if ( host == null ) { \n <ect>
\t1 thread . sleep ( ( sleep <identifiersep> time + ( long ) ( math . random ( ) * sleep <identifiersep> time ) ) ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t3 <comment> \n \t2 <comment> \n \t2 if ( loaded . is <identifiersep> empty ( ) ) { \n \t3 properties = null ; \n <ect>
\t6 session . send <identifiersep> player <identifiersep> uuid ( game <identifiersep> id , player <identifiersep> id ) ; \n \t6 return ; \n \t5 <comment> \n \t5 case <string_literal> : \n <ect>
\t3 if ( ! is <identifiersep> opennet ( ) ) { \n \t4 try { \n \t5 throw new redirect <identifiersep> exception ( <string_literal> ) ; \n \t4 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
public boolean is <identifiersep> registered ( expirable expirable ) { \n \t1 return monitors . contains <identifiersep> key ( expirable ) ; } \n public void remove <identifiersep> expirable ( expirable expirable ) { \n <ect>
\t3 storage <identifiersep> strategy . delete <identifiersep> container ( container ) ; \n \t3 else \n \t3 return <identifiersep> val = false ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 s <identifiersep> context . set <identifiersep> attribute ( \n \t3 org . apache . tomcat . util . scan . constants . merged <identifiersep> web <identifiersep> xml , \n \t3 merged <identifiersep> web <identifiersep> xml ) ; \n \t2 if ( context . get <identifiersep> log <identifiersep> effective <identifiersep> web <identifiersep> xml ( ) ) { \n <ect>
\t4 throw new runtime <identifiersep> exception ( <string_literal> , e ) ; } } \n \t2 @ override \n \t2 public void close ( ) throws runtime <identifiersep> exception { \n \t3 try { \n <ect>
\t4 nginx <identifiersep> clojure <identifiersep> rt . ngx <identifiersep> http <identifiersep> clojure <identifiersep> mem <identifiersep> inc <identifiersep> req <identifiersep> count ( req . native <identifiersep> request ( ) , 1 ) ; } \n \t3 return ( ( lazy <identifiersep> request <identifiersep> map ) req ) . channel = new nginx <identifiersep> http <identifiersep> server <identifiersep> channel ( req , ignore <identifiersep> filter ) ; \n \t2 } finally { \n <ect>
\t1 public void init ( final client <identifiersep> context ctx ) { \n \t2 synchronized ( this ) { \n \t3 <comment> \n \t3 if ( scheduled ) { \n <ect>
\t6 op <identifiersep> set <identifiersep> presence . move <identifiersep> contact <identifiersep> to <identifiersep> group ( \n \t7 proto <identifiersep> contact , proto <identifiersep> group ) ; } } } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t3 jna <identifiersep> available = false ; } \n \t2 catch ( unsatisfied <identifiersep> link <identifiersep> error e ) \n \t2 { \n <ect>
\t1 <comment> \n \t1 try { \n \t2 connection . clear <identifiersep> warnings ( ) ; \n \t1 } catch ( sql <identifiersep> exception ex ) { \n <ect>
\t6 . to ( <string_literal> ) \n \t6 . process ( new processor ( ) { \n \t7 @ override \n \t7 public void process ( exchange exchange ) throws exception { \n <ect>
\t2 if ( context . is <identifiersep> in <identifiersep> form ( ) ) { \n \t3 log . warn ( <string_literal> + \n \t5 <string_literal> + \n \t5 <string_literal> , erxwo <identifiersep> form . form <identifiersep> name ( context , <string_literal> ) ) ; \n <ect>
\t3 final connection conn = citrix <identifiersep> resource <identifiersep> base . get <identifiersep> connection ( ) ; \n \t3 final network nw = citrix <identifiersep> resource <identifiersep> base . find <identifiersep> or <identifiersep> create <identifiersep> tunnel <identifiersep> network ( conn , command . get <identifiersep> bridge <identifiersep> name ( ) ) ; \n \t3 citrix <identifiersep> resource <identifiersep> base . clean <identifiersep> up <identifiersep> tmp <identifiersep> dom <identifiersep> vif ( conn , nw ) ; \n \t3 citrix <identifiersep> resource <identifiersep> base . destroy <identifiersep> tunnel <identifiersep> network ( conn , nw , command . get <identifiersep> host <identifiersep> id ( ) ) ; \n <ect>
\t3 base <identifiersep> fb <identifiersep> os <identifiersep> manager . release ( fbo <identifiersep> name ) ; } \n \t2 fbo <identifiersep> usages . clear ( ) ; } \n \t1 protected void add <identifiersep> desired <identifiersep> state <identifiersep> change ( state <identifiersep> change state <identifiersep> change ) { \n \t2 if ( state <identifiersep> change . is <identifiersep> the <identifiersep> default <identifiersep> instance ( ) ) { \n <ect>
\t5 virtual <identifiersep> device <identifiersep> backing <identifiersep> info backing <identifiersep> info = device . get <identifiersep> backing ( ) ; \n \t5 if ( backing <identifiersep> info instanceof virtual <identifiersep> disk <identifiersep> flat <identifiersep> ver2backing <identifiersep> info ) { \n \t6 virtual <identifiersep> disk <identifiersep> flat <identifiersep> ver2backing <identifiersep> info disk <identifiersep> backing <identifiersep> info = ( virtual <identifiersep> disk <identifiersep> flat <identifiersep> ver2backing <identifiersep> info ) backing <identifiersep> info ; \n \t6 do { \n <ect>
\t2 logger . error ( this , <string_literal> + old <identifiersep> state + ' , ' + new <identifiersep> state + ' ) ' ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> metadata ( metadata m , client <identifiersep> put <identifiersep> state state , client <identifiersep> context context ) { \n \t2 <comment> \n <ect>
\t2 if ( ! connect <identifiersep> str . ends <identifiersep> with ( <string_literal> ) ) { \n \t2 connect <identifiersep> str = connect <identifiersep> str + <string_literal> ; } \n \t2 connect <identifiersep> str = connect <identifiersep> str + zero <identifiersep> behavior <identifiersep> str + convert <identifiersep> to <identifiersep> null ; \n \t2 log . info ( <string_literal> ) ; } \n <ect>
\t2 logger . info ( <string_literal> , lightwave <identifiersep> ip ) ; \n \t2 logger . info ( <string_literal> , lightwave <identifiersep> ports <identifiersep> to <identifiersep> receive <identifiersep> on ) ; \n \t2 logger . info ( <string_literal> , lightwave <identifiersep> port <identifiersep> to <identifiersep> send <identifiersep> to ) ; \n \t2 logger . info ( <string_literal> , send <identifiersep> register <identifiersep> on <identifiersep> startup ) ; \n <ect>
\t1 final string name = cl . get <identifiersep> option <identifiersep> value ( name <identifiersep> opt . get <identifiersep> opt ( ) ) ; \n \t1 if ( namespaces ) { \n \t1 if ( ! shell <identifiersep> state . get <identifiersep> connector ( ) . namespace <identifiersep> operations ( ) \n \t2 . list <identifiersep> iterators ( opt <identifiersep> util . get <identifiersep> namespace <identifiersep> opt ( cl , shell <identifiersep> state ) ) . contains <identifiersep> key ( name ) ) { \n <ect>
\t4 engine . eval ( files . new <identifiersep> buffered <identifiersep> reader ( the <identifiersep> script <identifiersep> file . to <identifiersep> path ( ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ) ; \n \t4 final invocable invocable = ( invocable ) engine ; \n \t4 logger . debug ( <string_literal> , args ) ; \n \t4 final object result = invocable . invoke <identifiersep> function ( <string_literal> , args ) ; \n <ect>
\t2 assert <identifiersep> that ( <string_literal> , resp . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 1l ) ) ; \n \t2 <comment> \n \t2 logger . info ( <string_literal> , index ) ; \n \t2 client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> close ( index ) . get ( ) ; \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 if ( m <identifiersep> device instanceof oled <identifiersep> bricklet ) { \n \t3 ( ( oled <identifiersep> bricklet ) m <identifiersep> device ) . write <identifiersep> line ( line , position , text ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t1 om . set <identifiersep> accessible ( true ) \n \t1 om . invoke ( null , configuration ) \n \t1 } catch { \n \t1 case e : exception = > \n <ect>
\t2 logger . trace ( <string_literal> ) ; \n \t2 presence <identifiersep> status old <identifiersep> status = operation <identifiersep> set <identifiersep> presence . get <identifiersep> presence <identifiersep> status ( ) ; \n \t2 string old <identifiersep> status <identifiersep> message = operation <identifiersep> set <identifiersep> presence . get <identifiersep> current <identifiersep> status <identifiersep> message ( ) ; \n \t2 string new <identifiersep> status <identifiersep> message = status <identifiersep> message <identifiersep> root + new <identifiersep> status ; \n <ect>
\t6 final long sync <identifiersep> timestamp = status . get <identifiersep> last <identifiersep> sync ( ) ; \n \t6 string last <identifiersep> sync <identifiersep> string \t1 = <string_literal> ; \n \t6 if ( sync <identifiersep> timestamp != 0l ) { \n \t7 last <identifiersep> sync <identifiersep> string = <string_literal> + date <identifiersep> format . format ( sync <identifiersep> timestamp ) ; } \n <ect>
\t3 return true ; } \n \t2 final ticket <identifiersep> definition metadata = this . ticket <identifiersep> catalog . find ( ticket ) ; \n \t2 final ehcache cache = get <identifiersep> ticket <identifiersep> cache <identifiersep> for ( metadata ) ; \n \t2 if ( cache . remove ( encode <identifiersep> ticket <identifiersep> id ( ticket . get <identifiersep> id ( ) ) ) ) { \n <ect>
\t2 if ( user <identifiersep> font <identifiersep> family != null ) { \n \t3 int font <identifiersep> size = user <identifiersep> font <identifiersep> size > 0 ? user <identifiersep> font <identifiersep> size : get <identifiersep> font ( ) . get <identifiersep> size ( ) ; \n \t3 set <identifiersep> font ( new font ( user <identifiersep> font <identifiersep> family , font . plain , font <identifiersep> size ) ) ; \n <ect>
\t3 if ( <string_literal> . equals ( ex . get <identifiersep> sql <identifiersep> state ( ) ) ) { \n \t4 try { \n \t5 connection . rollback ( ) ; \n \t4 } catch ( sql <identifiersep> exception ex2 ) { \n <ect>
\t1 public boolean delete <identifiersep> account ( account <identifiersep> vo account , long caller <identifiersep> user <identifiersep> id , account caller ) { \n \t2 long account <identifiersep> id = account . get <identifiersep> id ( ) ; \n \t2 <comment> \n \t2 if ( !  <identifiersep> account <identifiersep> dao . remove ( account <identifiersep> id ) ) { \n <ect>
\t7 pstmt <identifiersep> static <identifiersep> nat . execute <identifiersep> query ( ) ; \n \t7 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + \n \t9 <string_literal> ) ; \n \t6 } catch ( final sql <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t4 thread . sleep ( <number_literal> ) ; \n \t3 } catch ( interrupted <identifiersep> exception e ) { } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> that ( files . exists ( server2shard ) , equal <identifiersep> to ( true ) ) ; \n \t2 assert <identifiersep> that ( files . exists ( shard <identifiersep> directory ( node <identifiersep> <number_literal> , index , 0 ) ) , equal <identifiersep> to ( true ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 final string node <identifiersep> <number_literal> = internal <identifiersep> cluster ( ) . start <identifiersep> node ( ) ; \n <ect>
\t1 public static string <identifiersep> builder read <identifiersep> entirely <identifiersep> as <identifiersep> string ( atmosphere <identifiersep> resource r ) throws io <identifiersep> exception { \n \t2 final string <identifiersep> builder string <identifiersep> builder = new string <identifiersep> builder ( ) ; \n \t2 boolean read <identifiersep> get <identifiersep> body = r . get <identifiersep> atmosphere <identifiersep> config ( ) . get <identifiersep> init <identifiersep> parameter ( application <identifiersep> config . read <identifiersep> get <identifiersep> body , false ) ; \n \t2 if ( ! read <identifiersep> get <identifiersep> body && atmosphere <identifiersep> resource <identifiersep> impl . class . cast ( r ) . get <identifiersep> request ( false ) . get <identifiersep> method ( ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n <ect>
\t2 if ( parameters . get <identifiersep> principal ( ) == null ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return new processed <identifiersep> claim <identifiersep> collection ( ) ; } \n \t2 if ( claims == null || claims . is <identifiersep> empty ( ) ) { \n <ect>
\t3  <identifiersep> monitor <identifiersep> thread = null ; } } \n \t1 public void start <identifiersep> thread ( ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 if (  <identifiersep> monitor <identifiersep> thread != null ) { \n <ect>
\t2 registered <identifiersep> service registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( service ) ; \n \t2 if ( registered <identifiersep> service == null ) { \n \t3 logger . debug ( <string_literal> , entity <identifiersep> id , current <identifiersep> service ) ; \n \t3 registered <identifiersep> service = this . services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( current <identifiersep> service ) ; } \n <ect>
\t2 long size =  <identifiersep> tmplt <identifiersep> mgr . get <identifiersep> template <identifiersep> size ( template . get <identifiersep> id ( ) , vm . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; \n \t2 if ( root <identifiersep> disksize != null ) { \n \t3 root <identifiersep> disksize = root <identifiersep> disksize * <number_literal> * <number_literal> * <number_literal> ; \n \t3 if ( root <identifiersep> disksize > size ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( ) throws homematic <identifiersep> client <identifiersep> exception { \n <ect>
\t2 linked <identifiersep> list < string > id <identifiersep> to <identifiersep> remove = new linked <identifiersep> list < > ( ) ; \n \t2 id <identifiersep> to <identifiersep> remove . add ( ( string ) data [ <number_literal> ] . get ( <string_literal> ) ) ; \n \t2 id <identifiersep> to <identifiersep> remove . add ( ( string ) data [ <number_literal> ] . get ( <string_literal> ) ) ; \n \t2 id <identifiersep> to <identifiersep> remove . add ( ( string ) data [ 0 ] . get ( <string_literal> ) ) ; \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t4 if ( vol <identifiersep> info . is <identifiersep> corrupted ( ) ) { \n \t5 volume <identifiersep> host . set <identifiersep> download <identifiersep> state ( status . download <identifiersep> error ) ; \n \t5 string msg = <string_literal> + volume . get <identifiersep> uuid ( ) + <string_literal> ; \n \t5 volume <identifiersep> host . set <identifiersep> error <identifiersep> string ( msg ) ; \n <ect>
<comment> \n \t1 public static void check <identifiersep> identifier <identifiersep> against <identifiersep> format ( string identifier , string format , string format <identifiersep> description ) \n \t3 throws patient <identifiersep> identifier <identifiersep> exception { \n <ect>
\t5 networks . add ( new pair < network <identifiersep> vo , nic <identifiersep> profile > ( app <identifiersep> net , default <identifiersep> nic ) ) ; } \n \t4 vm <identifiersep> instance <identifiersep> vo vmi =  <identifiersep> it <identifiersep> mgr . find <identifiersep> by <identifiersep> id <identifiersep> and <identifiersep> type ( vm . get <identifiersep> type ( ) , vm . get <identifiersep> id ( ) ) ; \n \t4 virtual <identifiersep> machine <identifiersep> profile <identifiersep> impl < vm <identifiersep> instance <identifiersep> vo > vm <identifiersep> profile = new virtual <identifiersep> machine <identifiersep> profile <identifiersep> impl < vm <identifiersep> instance <identifiersep> vo > ( vmi ) ; \n \t4  <identifiersep> network <identifiersep> mgr . allocate ( vm <identifiersep> profile , networks ) ; \n <ect>
\t2 if ( batch <identifiersep> list . is <identifiersep> empty ( ) ) { \n \t3 try { \n \t4 fill <identifiersep> batch ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 try { \n \t2 eucalyptus <identifiersep> activity <identifiersep> tasks . get <identifiersep> instance ( ) . update <identifiersep> auto <identifiersep> scaling <identifiersep> group ( group <identifiersep> name , null , capacity , \n \t3 lb . use <identifiersep> system <identifiersep> account ( ) ) ; \n \t1 } catch ( final exception ex ) { \n <ect>
\t3 dict . is <identifiersep> correct ( <string_literal> ) ; \n \t3 return true ; } \n \t2 catch ( exception exc ) \n \t2 { \n <ect>
\t1 } catch ( web <identifiersep> application <identifiersep> exception ex ) { \n \t1 log . error ( <string_literal> , ex ) ; \n \t1 throw ex ; \n \t1 } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { \n <ect>
\t4 daemon <identifiersep> options . autoshutdown <identifiersep> unused <identifiersep> seconds != compile <identifiersep> daemon <identifiersep> timeout <identifiersep> infinite <identifiersep> s && compilations <identifiersep> counter . get ( ) == 0 && now <identifiersep> seconds ( ) - last <identifiersep> used <identifiersep> seconds > daemon <identifiersep> options . autoshutdown <identifiersep> unused <identifiersep> seconds - > { \n \t5 log . info ( <string_literal> ) \n \t5 graceful <identifiersep> shutdown ( false ) } \n \t4 daemon <identifiersep> options . autoshutdown <identifiersep> idle <identifiersep> seconds != compile <identifiersep> daemon <identifiersep> timeout <identifiersep> infinite <identifiersep> s && now <identifiersep> seconds ( ) - last <identifiersep> used <identifiersep> seconds > daemon <identifiersep> options . autoshutdown <identifiersep> idle <identifiersep> seconds - > { \n <ect>
\t2 file <identifiersep> utils . list <identifiersep> status <identifiersep> recursively ( fs , glob <identifiersep> stat , result ) ; } } \n \t1 if ( ! errors . is <identifiersep> empty ( ) ) { \n \t1 throw new invalid <identifiersep> input <identifiersep> exception ( errors ) ; } \n \t1 log . debug ( <string_literal> + dir + <string_literal> + result ) ; \n <ect>
\t3 } else if ( url <identifiersep> provider . get . equals <identifiersep> ignore <identifiersep> case ( include <identifiersep> params ) || ( include <identifiersep> params == null && url <identifiersep> component . get <identifiersep> value ( ) == null && url <identifiersep> component . get <identifiersep> action ( ) == null ) ) { \n \t4 include <identifiersep> get <identifiersep> parameters ( url <identifiersep> component ) ; \n \t4 include <identifiersep> extra <identifiersep> parameters ( url <identifiersep> component ) ; \n \t3 } else if ( include <identifiersep> params != null ) { \n <ect>
\t9 class < ? > c = class . for <identifiersep> name ( s <identifiersep> component <identifiersep> map . get ( key ) ) ; \n \t9 test <identifiersep> case component = ( test <identifiersep> case ) c . new <identifiersep> instance ( ) ; \n \t9 execute <identifiersep> test ( key , c , component ) ; \n \t8 } catch ( exception e ) { \n <ect>
\t3 if ( request != null ) { \n \t4 string remote <identifiersep> address = request . get <identifiersep> remote <identifiersep> host ( ) ; \n \t4 if ( remote <identifiersep> address != null ) { \n \t5 if ( ! ip <identifiersep> lists . contains ( remote <identifiersep> address ) ) { \n <ect>
\t3 for ( final view <identifiersep> row row : all <identifiersep> keys ) { \n \t4 final raw <identifiersep> json <identifiersep> document document = row . document ( raw <identifiersep> json <identifiersep> document . class ) ; \n \t4 if ( document != null ) { \n \t5 final string json = document . content ( ) ; \n <ect>
\t2 } else if ( ! has <identifiersep> access ( right . view , template <identifiersep> document <identifiersep> reference ) ) { \n \t3 this . logger . error ( <string_literal> , template <identifiersep> document <identifiersep> reference ) ; \n \t2 } else if ( ! this . model <identifiersep> bridge . exists ( template <identifiersep> document <identifiersep> reference ) ) { \n \t3 <comment> \n <ect>
<comment> \n public static void evict ( final object obj ) { \n \t1 <comment> \n <ect>
\t2 if ( tbl != null ) { \n \t2 is <identifiersep> mm <identifiersep> non <identifiersep> merge = ! is <identifiersep> merge && acid <identifiersep> utils . is <identifiersep> insert <identifiersep> only <identifiersep> table ( tbl . get <identifiersep> properties ( ) ) ; \n \t2 } else { \n \t2 <comment> \n <ect>
\t3 <comment> \n \t2 try { \n \t3 purge ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 if ( ( first <identifiersep> node <identifiersep> average <identifiersep> ping <identifiersep> time <identifiersep> threshold <identifiersep> break != 0 ) && ( ( now - first <identifiersep> node <identifiersep> average <identifiersep> ping <identifiersep> time <identifiersep> threshold <identifiersep> break ) >= max <identifiersep> node <identifiersep> average <identifiersep> ping <identifiersep> time <identifiersep> alert <identifiersep> delay ) ) { \n \t4 node <identifiersep> average <identifiersep> ping <identifiersep> alert <identifiersep> relevant = true ; \n \t3 } else { \n \t4 node <identifiersep> average <identifiersep> ping <identifiersep> alert <identifiersep> relevant = false ; } \n <ect>
\t1 <comment> \n \t1 @ override public grid <identifiersep> cache <identifiersep> query <identifiersep> future < ? > query <identifiersep> fields <identifiersep> local ( grid <identifiersep> cache <identifiersep> query <identifiersep> bean qry ) { \n \t2 assert cctx . config ( ) . get <identifiersep> cache <identifiersep> mode ( ) != local ; \n <ect>
\t4 if ( tag == null ) { \n \t5 tag = property . get <identifiersep> iri ( ) . to <identifiersep> string ( ) ; } \n \t4 <comment> \n \t4 <comment> \n <ect>
\t2 string header = response . get <identifiersep> string <identifiersep> headers ( ) . get <identifiersep> first ( validation . validation <identifiersep> header ) ; \n \t2 assert . assert <identifiersep> not <identifiersep> null ( error <identifiersep> header <identifiersep> message , header ) ; \n \t2 assert . assert <identifiersep> true ( error <identifiersep> header <identifiersep> validation <identifiersep> exception <identifiersep> message , boolean . value <identifiersep> of ( header ) ) ; \n \t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t2 { \n \t3 webapp <identifiersep> root = new file ( path ) ; \n \t3 if ( ! webapp <identifiersep> root . exists ( ) || ! webapp <identifiersep> root . is <identifiersep> directory ( ) ) \n \t3 { \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t1 string task3 = query \n \t2 . task <identifiersep> definition <identifiersep> key ( <string_literal> ) \n \t2 . single <identifiersep> result ( ) \n \t2 . get <identifiersep> id ( ) ; \n <ect>
\t2 for ( config config : request . get <identifiersep> configs ( ) . values ( ) ) { \n \t2 list < string > sorted <identifiersep> config <identifiersep> keys = new array <identifiersep> list ( config . get <identifiersep> properties ( ) . key <identifiersep> set ( ) ) ; \n \t2 collections . sort ( sorted <identifiersep> config <identifiersep> keys ) ; \n \t2 string sorted <identifiersep> config <identifiersep> keys <identifiersep> string = string <identifiersep> utils . join ( sorted <identifiersep> config <identifiersep> keys , <string_literal> ) ; \n <ect>
\t3 composite <identifiersep> data cdata = compdatalist [ i ] ; \n \t3 if ( i == 0 ) { \n \t4 log . info ( <string_literal> + cdata . get <identifiersep> composite <identifiersep> type ( ) . key <identifiersep> set ( ) ) ; } \n \t3 message <identifiersep> i <identifiersep> ds [ i ] = ( string ) cdata . get ( <string_literal> ) ; \n <ect>
\t3 return null ; } \n \t2 try { \n \t3 vms = conn . list <identifiersep> defined <identifiersep> domains ( ) ; \n \t2 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t3 { \n \t4 stream <identifiersep> lockfile stream <identifiersep> lockfile = new stream <identifiersep> lockfile ( lockfile ) ; \n \t4 stream <identifiersep> lockfile . cleanup ( ) ; \n \t4 stream <identifiersep> lockfile . delete ( ) ; } } \n <ect>
\t1 input <identifiersep> module <identifiersep> hierarchy tree = get <identifiersep> component <identifiersep> by <identifiersep> type ( input <identifiersep> module <identifiersep> hierarchy . class ) ; \n \t1 log . info ( <string_literal> , tree . root ( ) . key ( ) ) ; \n \t1 string organization = props . property ( <string_literal> ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> empty ( organization ) ) { \n <ect>
\t4 valid <identifiersep> command = true ; \n \t4 break ; \n \t3 case code <identifiersep> send : <comment> \n \t4 if ( dsc <identifiersep> alarm <identifiersep> user <identifiersep> code == null || dsc <identifiersep> alarm <identifiersep> user <identifiersep> code . length ( ) < <number_literal> || dsc <identifiersep> alarm <identifiersep> user <identifiersep> code . length ( ) > <number_literal> ) { \n <ect>
\t5 } else { \n \t6 return new answer ( cmd , false , e . get <identifiersep> message ( ) ) ; } } \n \t3 } catch ( exception e ) { \n \t4 if ( should <identifiersep> retry ( num <identifiersep> retries ) ) { \n <ect>
\t4 log . debug ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t2 catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t4 error = t ; } \n \t2 } else { \n \t3 error = new unsupported <identifiersep> operation <identifiersep> exception ( <string_literal> ) ; } \n \t2 if ( error == null ) { \n <ect>
\t3 if ( corrupt <identifiersep> index <identifiersep> handler . is <identifiersep> failing ( name ) ) { \n \t4 log . info ( <string_literal> , name , \n \t6 corrupt <identifiersep> index <identifiersep> handler . get <identifiersep> corrupt <identifiersep> index <identifiersep> data ( name ) . key <identifiersep> set ( ) ) ; \n \t3 } else { \n <ect>
\t3 s <identifiersep> logger . error ( <string_literal> +  <identifiersep> service <identifiersep> url + <string_literal> + method . get <identifiersep> parameter ( <string_literal> ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> +  <identifiersep> service <identifiersep> url + <string_literal> + method . get <identifiersep> parameter ( <string_literal> ) ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t2 logger . error ( mini <identifiersep> splash ( format ( <string_literal> , \n \t9 artifact . get <identifiersep> artifact <identifiersep> name ( ) ) ) ) ; \n \t2 logger . error ( t . get <identifiersep> message ( ) ) ; \n \t1 } else { \n <ect>
<comment> \n \t1 protected set < event > resolve <identifiersep> events <identifiersep> internal ( final set < event > resolve <identifiersep> events , final authentication authentication , final registered <identifiersep> service registered <identifiersep> service , \n <number_literal> final http <identifiersep> servlet <identifiersep> request request , final request <identifiersep> context context ) { \n <ect>
\t1 if ( stage <identifiersep> dir . exists ( ) ) { \n \t1 throw new exception ( <string_literal> + \n \t2 stage <identifiersep> dir . get <identifiersep> canonical <identifiersep> path ( ) ) ; } \n \t1 stage <identifiersep> dir . mkdirs ( ) ; \n <ect>
\t3 { \n \t4 log . error ( <string_literal> , se ) ; \n \t3 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception nme ) \n \t3 { \n <ect>
\t3 if ( orc <identifiersep> pred != null ) { \n \t4 log . info ( <string_literal> , pred , orc <identifiersep> pred , path ) ; \n \t4 orc <identifiersep> predicates . add ( orc <identifiersep> pred ) ; \n \t3 } else { \n <ect>
\t1 return generator . generate ( schema <identifiersep> name <identifiersep> override ) ; } \n private void write <identifiersep> avro <identifiersep> schema ( final schema schema ) throws io <identifiersep> exception { \n \t1 <comment> \n \t1 final file schema <identifiersep> file = new file ( options . get <identifiersep> jar <identifiersep> output <identifiersep> dir ( ) , schema . get <identifiersep> name ( ) + <string_literal> ) ; \n <ect>
\t1 return arrays . as <identifiersep> list ( args ) ; } \n public static object update ( object source , object dest ) { \n \t1 def props = dest . meta <identifiersep> class . properties . collect { meta <identifiersep> property p - > p . name } ; \n \t1 source . meta <identifiersep> class . properties . find <identifiersep> all { meta <identifiersep> property it - > it . name != <string_literal> && it . name != <string_literal> && props . contains ( it . name ) && source [ it . name ] != null } . each { meta <identifiersep> property source <identifiersep> field - > \n <ect>
\t3 field tmpdir <identifiersep> field = class . for <identifiersep> name ( <string_literal> ) . get <identifiersep> declared <identifiersep> field ( <string_literal> ) ; \n \t3 make <identifiersep> final <identifiersep> field <identifiersep> accessible ( tmpdir <identifiersep> field ) ; \n \t3 tmpdir <identifiersep> field . set ( null , tmpdir <identifiersep> file . to <identifiersep> path ( ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 runnable r = new runnable ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n \t4 <comment> \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
\t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 return get <identifiersep> num <identifiersep> journal <identifiersep> files ( ) == 1 ; } \n \t2 } , time <identifiersep> unit . minutes . to <identifiersep> millis ( <number_literal> ) ) ) ; \n <ect>
\t5 ar . destroyable ( false ) ; \n \t5 response . destroyable ( false ) ; } \n \t4 return action . cancelled ; \n \t3 } catch ( io <identifiersep> exception | servlet <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 queue <identifiersep> view <identifiersep> m <identifiersep> bean queue <identifiersep> view <identifiersep> m <identifiersep> bean = ( queue <identifiersep> view <identifiersep> m <identifiersep> bean ) broker <identifiersep> service . get <identifiersep> management <identifiersep> context ( ) . new <identifiersep> proxy <identifiersep> instance ( \n \t4 broker <identifiersep> m <identifiersep> bean <identifiersep> support . create <identifiersep> destination <identifiersep> name ( broker <identifiersep> service . get <identifiersep> broker <identifiersep> object <identifiersep> name ( ) , dest ) , queue <identifiersep> view <identifiersep> m <identifiersep> bean . class , false ) ; \n \t3 queue <identifiersep> size = queue <identifiersep> view <identifiersep> m <identifiersep> bean . get <identifiersep> queue <identifiersep> size ( ) ; \n <ect>
\t3 ret . put ( <string_literal> , msg ) ; } \n \t2 void handle <identifiersep> jstack ( string <identifiersep> builder sb , integer pid ) { \n \t3 string cmd = <string_literal> + pid ; \n \t3 try { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t5 structr <identifiersep> o <identifiersep> auth <identifiersep> client oauth <identifiersep> server ; \n \t5 try { \n \t6 oauth <identifiersep> server = ( structr <identifiersep> o <identifiersep> auth <identifiersep> client ) server <identifiersep> class . new <identifiersep> instance ( ) ; \n \t6 oauth <identifiersep> server . init ( auth <identifiersep> location , token <identifiersep> location , client <identifiersep> id , client <identifiersep> secret , redirect <identifiersep> uri , token <identifiersep> response <identifiersep> class ) ; \n <ect>
\t1 db <identifiersep> configuration db <identifiersep> conf = get <identifiersep> db <identifiersep> conf ( ) ; \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 class < t > input <identifiersep> class = ( class < t > ) ( db <identifiersep> conf . get <identifiersep> input <identifiersep> class ( ) ) ; \n \t1 string db <identifiersep> product <identifiersep> name = get <identifiersep> db <identifiersep> product <identifiersep> name ( ) ; \n <ect>
\t2 final output <identifiersep> stream os = output <identifiersep> stream ; \n \t2 timer timer = new timer ( ) ; \n \t2 timer <identifiersep> task timer <identifiersep> task = new timer <identifiersep> task ( ) { \n \t3 public void run ( ) { \n <ect>
\t4 <comment> \n \t4 initialisation <identifiersep> complete ( ) ; } \n \t3 else if ( event . get <identifiersep> result <identifiersep> code ( ) == keeper <identifiersep> exception . code . noauth . int <identifiersep> value ( ) ) \n \t3 { \n <ect>
\t2 try { \n \t3 run <identifiersep> command ( get <identifiersep> tunnel ( ) . get <identifiersep> client <identifiersep> options ( ) . get <identifiersep> property ( prop <identifiersep> command ) ) ; \n \t2 } catch ( interrupted <identifiersep> exception ex ) { \n \t3 l . log ( <string_literal> ) ; \n <ect>
\t2 try { \n \t3 class < ? > c = module <identifiersep> factory . get <identifiersep> module <identifiersep> class <identifiersep> loader ( get <identifiersep> module ( ) ) . load <identifiersep> class ( get <identifiersep> class <identifiersep> name ( ) ) ; \n \t3 o = c . new <identifiersep> instance ( ) ; } \n \t2 catch ( exception e ) { \n <ect>
\t4 <comment> \n \t4 try { \n \t5 multi <identifiersep> transaction <identifiersep> status . rollback ( transaction <identifiersep> manager ) ; \n \t4 } catch ( exception ex ) { \n <ect>
\t2 try { \n \t2 metadata <identifiersep> parser = new image <identifiersep> io <identifiersep> metadata <identifiersep> parser ( ) ; } \n \t2 catch ( throwable t ) { \n \t2 <comment> \n <ect>
\t2 serializer < uuid > serializer = ( serializer < uuid > ) pkg \n \t4 . get <identifiersep> column <identifiersep> name <identifiersep> serializer ( ) ; \n \t2 byte <identifiersep> buffer buffer = serializer . to <identifiersep> byte <identifiersep> buffer ( current <identifiersep> uuid ) ; \n \t2 string value = serializer . get <identifiersep> string ( buffer ) ; \n <ect>
\t2 assert <identifiersep> that ( get <identifiersep> response . get <identifiersep> field ( field ) . get <identifiersep> values ( ) . get ( 1 ) . to <identifiersep> string ( ) , equal <identifiersep> to ( <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 <comment> \n \t2 ensure <identifiersep> green ( ) ; \n <ect>
\t1 if ( op <identifiersep> handle != null ) { \n \t2 try { \n \t2 close <identifiersep> operation ( op <identifiersep> handle ) ; \n \t2 } catch ( hive <identifiersep> sql <identifiersep> exception e ) { \n <ect>
\t2 s <identifiersep> logger . info ( <string_literal> + username ) ; \n \t2 http <identifiersep> client client = new http <identifiersep> client ( ) ; \n \t2 http <identifiersep> method method = new get <identifiersep> method ( url ) ; \n \t2 int response <identifiersep> code = client . execute <identifiersep> method ( method ) ; \n <ect>
\t2 system . set <identifiersep> property ( constants . kubernetes <identifiersep> namespace , namespace ) ; \n \t2 log . status ( <string_literal> + client . get <identifiersep> master <identifiersep> url ( ) ) ; \n \t2 log . status ( <string_literal> + namespace ) ; \n \t2 log . info ( <string_literal> + namespace ) ; \n <ect>
\t2 try { \n \t3 domain <identifiersep> router <identifiersep> vo elb <identifiersep> vm = deploy <identifiersep> elb <identifiersep> vm ( network , dest , owner , params ) ; \n \t3 if ( elb <identifiersep> vm == null ) { \n \t4 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t3 return null ; } \n \t2 final map < string , multifactor <identifiersep> authentication <identifiersep> provider > provider <identifiersep> map = \n \t4 multifactor <identifiersep> authentication <identifiersep> utils . get <identifiersep> available <identifiersep> multifactor <identifiersep> authentication <identifiersep> providers ( this . application <identifiersep> context ) ; \n \t2 if ( provider <identifiersep> map == null || provider <identifiersep> map . is <identifiersep> empty ( ) ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 <comment> \n \t3 assert <identifiersep> that ( get <identifiersep> failure <identifiersep> count ( <string_literal> ) , equal <identifiersep> to ( 0l ) ) ; \n \t2 } else { \n <ect>
\t2 assert <identifiersep> that ( done , equal <identifiersep> to ( true ) ) ; \n \t2 if ( ! done ) { \n \t3 executor . shutdown <identifiersep> now ( ) ; } } \n \t1 public void test <identifiersep> same <identifiersep> alias ( ) throws exception { \n <ect>
\t1 private static void print <identifiersep> send <identifiersep> stats ( long counter , int message <identifiersep> size ) { \n \t2 float cnt = counter ; \n \t2 float size = message <identifiersep> size ; \n \t2 float time = ( system . current <identifiersep> time <identifiersep> millis ( ) - message <identifiersep> start <identifiersep> send <identifiersep> time ) / 1000f ; \n <ect>
\t4 logger . error ( <string_literal> , e ) ; } \n \t3 try { \n \t4 remove <identifiersep> overlay ( deployment <identifiersep> shell <identifiersep> archive , overlay , overlay . key <identifiersep> set ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> x <identifiersep> path <identifiersep> s <identifiersep> ta <identifiersep> x <identifiersep> performance <identifiersep> route ( ) throws exception { \n \t2 notify <identifiersep> builder notify = new notify <identifiersep> builder ( context ) . when <identifiersep> done ( size ) . create ( ) ; \n \t2 boolean matches = notify . matches ( <number_literal> , time <identifiersep> unit . seconds ) ; \n <ect>
\t3 providers = new string [ ] { bouncy <identifiersep> castle <identifiersep> provider . provider <identifiersep> name , <string_literal> } ; \n \t2 } else { \n \t3 security . remove <identifiersep> provider ( bouncy <identifiersep> castle <identifiersep> provider . provider <identifiersep> name ) ; \n \t3 providers = new string [ ] { <string_literal> } ; } \n <ect>
\t2 commit <identifiersep> log . instance . shutdown <identifiersep> blocking ( ) ; \n \t2 <comment> \n \t2 scheduled <identifiersep> executors . non <identifiersep> periodic <identifiersep> tasks . shutdown ( ) ; \n \t2 if ( ! scheduled <identifiersep> executors . non <identifiersep> periodic <identifiersep> tasks . await <identifiersep> termination ( 1 , time <identifiersep> unit . minutes ) ) \n <ect>
\t2 <comment> \n \t2 s <identifiersep> bucket <identifiersep> dao bucket <identifiersep> dao = new s <identifiersep> bucket <identifiersep> dao ( ) ; \n \t2 s <identifiersep> bucket bucket = bucket <identifiersep> dao . get <identifiersep> by <identifiersep> name ( bucket <identifiersep> name ) ; \n \t2 if ( bucket == null ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 log . debug ( <string_literal> , host ) ; \n \t2 try { \n \t3 listener . test <identifiersep> started ( host ) ; \n \t2 } catch ( error | runtime <identifiersep> exception ex ) { <comment> \n <ect>
\t3 finish <identifiersep> fate <identifiersep> operation <identifiersep> result result = new finish <identifiersep> fate <identifiersep> operation <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t4 default : \n \t5 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) log . error ( <string_literal> + req . type + <string_literal> ) ; \n \t5 break ; } } \n \t2 catch ( exception ex ) { \n <ect>
\t2 } else { \n \t3 logger . info ( <string_literal> ) ; \n \t3 assert <identifiersep> equals ( client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> synced <identifiersep> flush ( <string_literal> ) . get ( ) . failed <identifiersep> shards ( ) , 0 ) ; \n \t3 assert <identifiersep> sync <identifiersep> ids <identifiersep> not <identifiersep> null ( ) ; } \n <ect>
\t3 if ( samples . size ( ) != 1 ) { \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + samples . size ( ) ) ; \n \t3 } else { \n \t4 sample = samples . get ( 0 ) ; \n <ect>
\t1 protected volatile prepared <identifiersep> statement lock <identifiersep> update <identifiersep> statement ; \n \t1 protected volatile connection connection ; \n \t1 protected handler < exception > exception <identifiersep> handler ; \n \t1 public void do <identifiersep> start ( ) throws exception { \n <ect>
\t2 logger <identifiersep> context . get <identifiersep> status <identifiersep> manager ( ) . add ( new info <identifiersep> status ( msg , o ) ) ; } \n \t1 public double indirect <identifiersep> loop ( ) { \n \t2 long start = system . nano <identifiersep> time ( ) ; \n \t2 for ( int i = 0 ; i < loop <identifiersep> len ; i ++ ) { \n <ect>
<comment> \n \t1 try { \n \t1 return value . set <identifiersep> scale ( price <identifiersep> scale , rounding <identifiersep> mode . unnecessary ) ; \n \t1 } catch ( arithmetic <identifiersep> exception e ) { \n <ect>
\t4 return ( ( i <identifiersep> payload <identifiersep> receiver ) tile ) . receive <identifiersep> payload ( ctx , message . payload ) ; \n \t3 } catch ( io <identifiersep> exception io ) { \n \t4 throw new runtime <identifiersep> exception ( io ) ; } \n \t2 } else { \n <ect>
\t6 logger . warn ( <string_literal> , get <identifiersep> node ( ) , busy <identifiersep> status ) ; \n \t6 break ; } \n \t4 break ; \n \t3 case application <identifiersep> status <identifiersep> rejected : \n <ect>
\t3 voice unit <identifiersep> sel <identifiersep> voice = new unit <identifiersep> selection <identifiersep> voice ( voice <identifiersep> name , this ) ; \n \t3 logger . debug ( <string_literal> + unit <identifiersep> sel <identifiersep> voice + <string_literal> ) ; \n \t3 voice . register <identifiersep> voice ( unit <identifiersep> sel <identifiersep> voice ) ; \n \t3 long newtime = system . current <identifiersep> time <identifiersep> millis ( ) - time ; \n <ect>
\t3 log . error ( <string_literal> + signal <identifiersep> name + <string_literal> + signal <identifiersep> number + <string_literal> ) ; } } \n \t1 protected class signal <identifiersep> runnable implements runnable { \n \t2 @ override \n \t2 public void run ( ) { \n <ect>
\t2 this . output <identifiersep> nesting <identifiersep> depth = settings . get <identifiersep> or <identifiersep> create <identifiersep> integer <identifiersep> setting ( servlet <identifiersep> name , nesting <identifiersep> depth <identifiersep> key <identifiersep> name ) . get <identifiersep> value ( 0 ) ; } \n \t1 public authenticator get <identifiersep> authenticator ( ) { \n \t2 authenticator authenticator = null ; \n \t2 if ( authenticator <identifiersep> class == null ) { \n <ect>
\t3 } catch ( json <identifiersep> parse <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> + response ) ; \n \t4 return ; \n \t3 } catch ( json <identifiersep> mapping <identifiersep> exception e ) { \n <ect>
\t1 t <identifiersep> sasl <identifiersep> server <identifiersep> transport . factory sasl <identifiersep> transport <identifiersep> factory = new t <identifiersep> sasl <identifiersep> server <identifiersep> transport . factory ( ) ; \n \t1 sasl <identifiersep> transport <identifiersep> factory . add <identifiersep> server <identifiersep> definition ( thrift <identifiersep> util . gssapi , params . get <identifiersep> kerberos <identifiersep> server <identifiersep> primary ( ) , \n \t2 hostname , params . get <identifiersep> sasl <identifiersep> properties ( ) , new sasl <identifiersep> rpc <identifiersep> server . sasl <identifiersep> gss <identifiersep> callback <identifiersep> handler ( ) ) ; \n \t1 if ( null != params . get <identifiersep> secret <identifiersep> manager ( ) ) { \n <ect>
\t1 @ guarded <identifiersep> by ( <string_literal> ) \n \t1 private void receive <identifiersep> contract <identifiersep> message ( protos . two <identifiersep> way <identifiersep> channel <identifiersep> message msg ) throws verification <identifiersep> exception { \n \t2 check <identifiersep> state ( major <identifiersep> version == 1 || major <identifiersep> version == <number_literal> ) ; \n \t2 check <identifiersep> state ( step == init <identifiersep> step . waiting <identifiersep> on <identifiersep> contract && msg . has <identifiersep> provide <identifiersep> contract ( ) ) ; \n <ect>
\t7 log . info ( <string_literal> ) ; \n \t7 <comment> \n \t7 lock lock2 =  <identifiersep> entity <identifiersep> manager . get <identifiersep> reference ( lock . class , lock . get <identifiersep> id ( ) ) ; \n \t7 lock2 . get <identifiersep> name ( ) ; \t2 <comment> \n <ect>
\t2 } catch ( exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t3 throw new eucalyptus <identifiersep> cloud <identifiersep> exception ( <string_literal> , e ) ; } \n \t2 if ( max <identifiersep> size < = 0 ) { \n <ect>
\t2 try { \n \t3 parser = get <identifiersep> parser ( ) ; \n \t3 options = parser . parse ( args ) ; \n \t2 } catch ( exception oe ) { \n <ect>
\t3 <comment> \n \t3 if ( worker <identifiersep> num == 0 || worker <identifiersep> num >= slots . size ( ) ) { \n \t4 gray <identifiersep> upgrade <identifiersep> conf . set <identifiersep> component ( null ) ; } \n \t2 } else if ( worker <identifiersep> num > 0 ) { \n <ect>
\t3 boolean is <identifiersep> negative = ( s1 . char <identifiersep> at ( 0 ) & <number_literal> ) == <number_literal> ; \n \t3 if ( is <identifiersep> negative ) { \n \t4 temperature = - temperature ; } \n \t3 double humidity = integer . parse <identifiersep> int ( wo <identifiersep> header . substring ( <number_literal> , <number_literal> ) + wo <identifiersep> header . substring ( <number_literal> , <number_literal> ) ) / <number_literal> . 0 ; \n <ect>
\t1 @ override \n \t1 public void dimm ( increase <identifiersep> decrease <identifiersep> type increase <identifiersep> decrease , device <identifiersep> options opts ) { \n \t2 logger . trace ( <string_literal> , increase <identifiersep> decrease , opts ) ; \n \t2 if ( opts == null ) { \n <ect>
\t1 public group <identifiersep> manager group <identifiersep> manager ( content <identifiersep> name prefix <identifiersep> name ) { \n \t2 group <identifiersep> manager gm = prefix <identifiersep> to <identifiersep> group <identifiersep> manager <identifiersep> map . get ( prefix <identifiersep> name ) ; \n \t2 if ( gm == null ) { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> accesscontrol , level . info ) ) { \n <ect>
\t3 ) . list ( ) ; \n \t2 for ( final auto <identifiersep> scaling <identifiersep> instance instance : instances ) { \n \t2 if ( instance . get <identifiersep> protected <identifiersep> from <identifiersep> scale <identifiersep> in ( ) == null ) { \n \t3 instance . set <identifiersep> protected <identifiersep> from <identifiersep> scale <identifiersep> in ( false ) ; \n <ect>
\t1 protected void disconnect ( final ftp <identifiersep> client ftp ) { \n \t2 try { \n \t3 ftp . disconnect ( ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t1 bucket bucket ; \n \t1 try { \n \t2 bucket = bucket <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . lookup <identifiersep> extant <identifiersep> bucket ( request . get <identifiersep> bucket ( ) ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> entity <identifiersep> exception e ) { \n <ect>
\t4 if ( type <identifiersep> name . contains ( <string_literal> ) ) { \n \t5 type <identifiersep> name = type <identifiersep> name . substring ( 0 , type <identifiersep> name . index <identifiersep> of ( <string_literal> ) ) ; } \n \t4 integer sql <identifiersep> component <identifiersep> type = templates . get <identifiersep> code <identifiersep> for <identifiersep> type <identifiersep> name ( type <identifiersep> name ) ; \n \t4 if ( sql <identifiersep> component <identifiersep> type == null ) { \n <ect>
\t5 continue ; } \n \t4 if ( answer != null && answer . get <identifiersep> result ( ) ) { \n \t5 return true ; } } } \n <ect>
\t3 if ( mci == null ) return ; \n \t3 object receiver = get <identifiersep> corrected <identifiersep> receiver ( ) ; \n \t3 object [ ] new <identifiersep> args = remove <identifiersep> real <identifiersep> receiver ( args ) ; \n \t3 if ( receiver instanceof class ) { \n <ect>
\t2 for ( iterator < binding <identifiersep> operation > iter = list . iterator ( ) ; iter . has <identifiersep> next ( ) ; ) { \n \t3 binding <identifiersep> operation operation = ( binding <identifiersep> operation ) iter . next ( ) ; \n \t3 <comment> \n \t3 if ( operation . get <identifiersep> operation ( ) == null || operation . get <identifiersep> operation ( ) . is <identifiersep> undefined ( ) ) { \n <ect>
\t2 final object value = args [ index ] ; \n \t2 if ( value instanceof script ) { \n \t3 return ( script ) value ; } \n \t2 if ( value == null ) { \n <ect>
\t4 } else { \n \t5 return <identifiersep> map . put ( zone <identifiersep> id + <string_literal> + account <identifiersep> id , new usage <identifiersep> network <identifiersep> vo ( account <identifiersep> id , zone <identifiersep> id , host <identifiersep> id , host <identifiersep> type , network <identifiersep> id , bytes <identifiersep> sent , bytes <identifiersep> received , agg <identifiersep> bytes <identifiersep> received , agg <identifiersep> bytes <identifiersep> sent , event <identifiersep> time <identifiersep> millis ) ) ; } } \n \t3 return return <identifiersep> map ; \n \t2 } catch ( exception ex ) { \n <ect>
\t4 while ( rs . next ( ) ) { \n \t5 long id = rs . get <identifiersep> long ( 1 ) ; <comment> \n \t5 result . add ( find <identifiersep> by <identifiersep> id ( id ) ) ; } } \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t5 data <identifiersep> chunks . put ( node <identifiersep> id , data ) ; } \n \t4 data . add ( key ) ; \n \t4 if ( data . size ( ) == data <identifiersep> chunk <identifiersep> size ) { <comment> \n \t5 chunk <identifiersep> cntr ++ ; \n <ect>
\t8 + system . get <identifiersep> property ( <string_literal> ) \n \t8 + key <identifiersep> name ; \n \t7 file wk <identifiersep> dir = new file ( work <identifiersep> dir ) ; \n \t7 if ( ! wk <identifiersep> dir . exists ( ) && ! wk <identifiersep> dir . mkdirs ( ) ) { \n <ect>
\t2 public void unable <identifiersep> to <identifiersep> monitor <identifiersep> lock <identifiersep> node ( final throwable e ) { \n \t2 halt . halt ( 1 , new runnable ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n <ect>
\t2 <comment> \n \t2 mina <identifiersep> helper . write <identifiersep> body ( session , body , exchange ) ; \n \t2 if ( sync ) { \n \t3 <comment> \n <ect>
\t2 if ( ! file . rename <identifiersep> to ( ( ( local <identifiersep> file ) dest ) . file ) ) { \n \t3 throw new runtime <identifiersep> io <identifiersep> exception ( <string_literal> + this + <string_literal> + dest ) ; } } \n \t1 @ override \n \t1 public input <identifiersep> stream get <identifiersep> input <identifiersep> stream ( ) { \n <ect>
\t2 { \n \t3 action . apply ( ) ; } \n \t2 catch ( interrupted <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 protected void setup <identifiersep> graphite <identifiersep> reporter ( ) { \n \t2 if ( graphite <identifiersep> settings . get <identifiersep> graphite <identifiersep> host ( ) . is <identifiersep> present ( ) ) { \n \t3 inet <identifiersep> socket <identifiersep> address address = new inet <identifiersep> socket <identifiersep> address ( \n \t5 graphite <identifiersep> settings . get <identifiersep> graphite <identifiersep> host ( ) . get ( ) , graphite <identifiersep> settings . get <identifiersep> graphite <identifiersep> port ( ) . or ( <number_literal> ) ) ; \n <ect>
\t1 load <identifiersep> schema <identifiersep> from <identifiersep> yaml ( ) ; \n \t1 <comment> \n \t1 log . info ( <string_literal> ) ; \n \t1 executor . execute ( new cassandra <identifiersep> runner ( ) ) ; \n <ect>
class system <identifiersep> property <identifiersep> host <identifiersep> location <identifiersep> initializer implements host <identifiersep> location <identifiersep> initializer { \n \t1 private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( minion . class ) ; \n \t1 @ json <identifiersep> creator \n \t1 public system <identifiersep> property <identifiersep> host <identifiersep> location <identifiersep> initializer ( ) { \n <ect>
\t6 log . debug ( <string_literal> + config . get <identifiersep> id ( ) ) ; } } } \n \t3 tran . commit ( ) ; } \n \t2 catch ( exception ex ) { \n \t3 tran . rollback ( ) ; \n <ect>
\t4 if ( request == null ) { \n \t5 logger . info ( <string_literal> , new object [ ] { request } ) ; \n \t5 return null ; } } } \n \t2 if ( someone <identifiersep> could <identifiersep> authorize ) { \n <ect>
\t7 if ( ( answer == null ) || ! answer . get <identifiersep> result ( ) ) { \n \t8 string details = <string_literal> + volume <identifiersep> id + <string_literal> + ( answer == null ? <string_literal> : answer . get <identifiersep> details ( ) ) ; \n \t8 s <identifiersep> logger . warn ( details ) ; } \n \t6 } catch ( exception e1 ) { \n <ect>
\t1 @ init \n \t1 public void init ( ) { } \n \t1 @ plugin <identifiersep> loaded \n \t1 public void new <identifiersep> plugin ( theme <identifiersep> plugin plugin ) { \n <ect>
\t2 try { \n \t3 return new dlna <identifiersep> thumbnail ( bytes , image <identifiersep> info , profile , true ) ; \n \t2 } catch ( dlna <identifiersep> profile <identifiersep> exception e ) { \n \t3 <comment> \n <ect>
\t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . client <identifiersep> id ) ) { \n \t3 logger . warn ( <string_literal> , grant <identifiersep> type ) ; \n \t3 return false ; } \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . secret ) ) { \n <ect>
\t3 log . error ( <string_literal> ) ; \n \t3 return false ; } \n \t2 <comment> \n \t2 if ( ! insert && current <identifiersep> map == null ) { \n <ect>
\t5 ret . put ( metric <identifiersep> name , id ) ; \n \t4 } else { \n \t5 ret . put ( metric <identifiersep> name , old ) ; } } } \n \t2 long cost = ticker . stop ( ) ; \n <ect>
\t1 <comment> \n \t1 @ override public int prepare ( xid xid ) throws xa <identifiersep> exception { \n \t2 assert this . xid . equals ( xid ) ; \n <ect>
\t4 object <identifiersep> input <identifiersep> stream object <identifiersep> in = new object <identifiersep> input <identifiersep> stream ( audit . get <identifiersep> ack <identifiersep> message <identifiersep> file <identifiersep> map ( ) . new <identifiersep> input ( ) ) ; \n \t4 metadata . ack <identifiersep> message <identifiersep> file <identifiersep> map = ( map < integer , set < integer > > ) object <identifiersep> in . read <identifiersep> object ( ) ; \n \t4 requires <identifiersep> replay = false ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 yank . setup <identifiersep> default <identifiersep> connection <identifiersep> pool ( conf . get <identifiersep> hikari <identifiersep> configuration ( ) ) ; \n \t3 conf . set <identifiersep> db <identifiersep> connected ( true ) ; \n \t3 return true ; \n \t2 } else if ( ! conf . is <identifiersep> driver <identifiersep> available ( ) ) { \n <ect>
\t2 this . on <identifiersep> create = on <identifiersep> create ; \n \t2 this . on <identifiersep> modify = on <identifiersep> modify ; \n \t2 this . on <identifiersep> delete = on <identifiersep> delete ; \n \t2 this . watcher = watchable <identifiersep> path . get <identifiersep> file <identifiersep> system ( ) . new <identifiersep> watch <identifiersep> service ( ) ; \n <ect>
\t2 public void run ( ) { \n \t3 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3  <identifiersep> geo <identifiersep> ip . blocking <identifiersep> lookup ( ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t4 ret = file . get <identifiersep> canonical <identifiersep> path ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 log . error ( <string_literal> , e ) ; } \n \t2 } else { \n <ect>
\t1 logger = logging . get <identifiersep> logger ( os . path . basename ( sys . argv [ 0 ] ) ) \n \t1 if args . messages : \n \t2 messages <identifiersep> file = which ( args . messages ) \n \t2 if not messages <identifiersep> file : \n <ect>
\t5 receiving <identifiersep> module = null ; \n \t5 if ( missing <identifiersep> modules . is <identifiersep> empty ( ) ) { \n \t6 send <identifiersep> join ( channel <identifiersep> handler <identifiersep> context ) ; } \n \t4 } else { \n <ect>
\t2 container . start ( ) ; \n \t2 try { \n \t3 int timeout = math . min ( 1 + <number_literal> * message <identifiersep> count / concurrent <identifiersep> consumers , <number_literal> ) ; \n \t3 final int count = message <identifiersep> count ; \n <ect>
\t4 binding . update <identifiersep> item <identifiersep> pwm ( item <identifiersep> name , coupler <identifiersep> name , module , values ) ; } } \n \t2 @ override \n \t2 public void execute <identifiersep> command ( command command , int channel ) { \n \t3 if ( ! connect ( ) ) { \n <ect>
\t3 <comment> \n \t3 switch (  <identifiersep> options . get <identifiersep> inactivity <identifiersep> action ( ) ) { \n \t4 case connection <identifiersep> options . inactivity <identifiersep> action <identifiersep> noop : \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 string size = props . get <identifiersep> property ( <string_literal> ) ; \n \t3 string from = props . get <identifiersep> property ( <string_literal> ) ; \n \t3 if ( ( value == null ) || ( size == null ) || \n \t4 ( ! from . equals ( value ) ) || ( ! size . equals ( <string_literal> ) ) ) { \n <ect>
\t3 long free <identifiersep> mem = reserved <identifiersep> mem ; \n \t4 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t4 s <identifiersep> logger . debug ( <string_literal> + free <identifiersep> cpu + <string_literal> + cpu ) ; \n <ect>
\t2 for ( transport <identifiersep> connection connection : connections ) { \n \t3 ss . stop ( connection ) ; } \n \t2 server = null ; \n \t2 ss . throw <identifiersep> first <identifiersep> exception ( ) ; \n <ect>
\t6 if ( tdf != null ) { \n \t7 try { \n \t8 tgt . add <identifiersep> typedef <identifiersep> frame ( tdf ) ; \n \t7 } catch ( frame <identifiersep> merge <identifiersep> exception e ) { \n <ect>
\t5 . add ( convert <identifiersep> history <identifiersep> record <identifiersep> to <identifiersep> message <identifiersep> event ( recs . next ( ) , room ) ) ; } \n \t3 remove <identifiersep> history <identifiersep> search <identifiersep> progress <identifiersep> listeners ( reader ) ; \n \t2 } catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 public static boolean is <identifiersep> charset <identifiersep> supported ( string name ) { \n \t2 return charset . available <identifiersep> charsets ( ) . key <identifiersep> set ( ) . contains ( name ) ; } \n \t1 public static input <identifiersep> stream <identifiersep> reader get <identifiersep> input <identifiersep> stream <identifiersep> reader ( file file , string encoding ) throws io <identifiersep> exception { \n \t2 file <identifiersep> input <identifiersep> stream fis = new file <identifiersep> input <identifiersep> stream ( file ) ; \n <ect>
\t6 log . info ( <string_literal> ) ; \n \t6 throw new grid <identifiersep> exception ( <string_literal> ) ; } \n \t5 assert ! node <identifiersep> ref . get ( ) . id ( ) . equals ( loc <identifiersep> id ) ; \n \t5 integer res = integer . parse <identifiersep> int ( this . < string > argument ( 0 ) ) ; \n <ect>
\t3 final mendelian <identifiersep> violation <identifiersep> metrics m = trio <identifiersep> iterator . next ( ) ; \n \t3 final set < string > trio = collection <identifiersep> util . make <identifiersep> set ( m . mother , m . father , m . offspring ) ; \n \t3 trio . remove <identifiersep> all ( all <identifiersep> samples ) ; \n \t3 if ( ! trio . is <identifiersep> empty ( ) ) { \n <ect>
\t3 } else { \n \t4  <identifiersep> smtp <identifiersep> session = null ; } } \n \t2 public void send <identifiersep> quota <identifiersep> alert ( list < string > emails , string subject , string body ) throws messaging <identifiersep> exception , unsupported <identifiersep> encoding <identifiersep> exception { \n \t3 if (  <identifiersep> smtp <identifiersep> session == null ) { \n <ect>
\t6  <identifiersep> log . debug ( <string_literal> + id ) ; \n \t5 recv . notify <identifiersep> stream <identifiersep> incoming <identifiersep> connection ( id , i2ps . get <identifiersep> peer <identifiersep> destination ( ) ) ; \n \t4 } catch ( i2p <identifiersep> exception e ) { \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 final job <identifiersep> graph job <identifiersep> graph = create <identifiersep> job <identifiersep> graph ( parallelism , number <identifiersep> of <identifiersep> retries , <number_literal> ) ; \n \t3 <comment> \n \t3 job <identifiersep> graph . set <identifiersep> savepoint <identifiersep> restore <identifiersep> settings ( savepoint <identifiersep> restore <identifiersep> settings . for <identifiersep> path ( <string_literal> ) ) ; \n \t3 assert <identifiersep> equals ( <string_literal> , job <identifiersep> graph . get <identifiersep> savepoint <identifiersep> restore <identifiersep> settings ( ) . get <identifiersep> restore <identifiersep> path ( ) ) ; \n <ect>
\t2 search <identifiersep> response response = srb . execute ( ) . action <identifiersep> get ( ) ; \n \t2 log . debug ( <string_literal> , query . get <identifiersep> query ( ) , response . get <identifiersep> took <identifiersep> in <identifiersep> millis ( ) ) ; \n \t2 search <identifiersep> hits hits = response . get <identifiersep> hits ( ) ; \n \t2 if ( ! query . has <identifiersep> limit ( ) && hits . total <identifiersep> hits ( ) >= max <identifiersep> results <identifiersep> size ) \n <ect>
public void test <identifiersep> get <identifiersep> roles <identifiersep> for <identifiersep> user <identifiersep> sorted ( ) throws exception { \n \t1 dao . set <identifiersep> role <identifiersep> comparator ( new default <identifiersep> role <identifiersep> comparator ( ) ) ; \n \t1 list < string > authorities = dao . get <identifiersep> roles <identifiersep> for <identifiersep> user ( null , <string_literal> ) ; <comment> \n <ect>
\t2 assert <identifiersep> true ( ef . match ( b06 ) ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> empty ( ) { \n <ect>
\t1 private void create <identifiersep> collection <identifiersep> if <identifiersep> needed ( cloud <identifiersep> solr <identifiersep> client cloud <identifiersep> solr <identifiersep> server ) throws solr <identifiersep> server <identifiersep> exception { \n \t2 string solr <identifiersep> collection = remote <identifiersep> solr <identifiersep> server <identifiersep> configuration . get <identifiersep> solr <identifiersep> collection ( ) ; \n \t2 zk <identifiersep> state <identifiersep> reader zk <identifiersep> state <identifiersep> reader = cloud <identifiersep> solr <identifiersep> server . get <identifiersep> zk <identifiersep> state <identifiersep> reader ( ) ; \n \t2 solr <identifiersep> zk <identifiersep> client zk <identifiersep> client = zk <identifiersep> state <identifiersep> reader . get <identifiersep> zk <identifiersep> client ( ) ; \n <ect>
\t2 protocol <identifiersep> provider <identifiersep> service provider = ( protocol <identifiersep> provider <identifiersep> service ) icq <identifiersep> slick <identifiersep> fixture . \n \t3 bc . get <identifiersep> service ( icq <identifiersep> service <identifiersep> ref ) ; \n \t2 registration <identifiersep> failed <identifiersep> event <identifiersep> collector reg <identifiersep> failed <identifiersep> evt <identifiersep> collector = \n \t3 new registration <identifiersep> failed <identifiersep> event <identifiersep> collector ( ) ; \n <ect>
\t2 saml <identifiersep> utils . log <identifiersep> saml <identifiersep> object ( config <identifiersep> bean , envelope ) ; \n \t2 final authn <identifiersep> request authn <identifiersep> request = ( authn <identifiersep> request ) soap <identifiersep> context . get <identifiersep> message ( ) ; \n \t2 final pair < authn <identifiersep> request , message <identifiersep> context > authentication <identifiersep> context = pair . of ( authn <identifiersep> request , soap <identifiersep> context ) ; \n \t2 try { \n <ect>
\t7 socket . close ( ) ; \n \t7 log . debug ( <string_literal> , socket ) ; \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public void run ( ) \n \t1 { \n \t2 if ( connection == null ) \n \t2 { \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t3 start ( ) ; \n \t2 } catch ( login <identifiersep> exception e ) { \n <ect>
\t2 t data = null ; \n \t2 try { \n \t3 data = new object <identifiersep> mapper ( ) . read <identifiersep> value ( json <identifiersep> string , type ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 vector < long > temp <identifiersep> skews = t . get <identifiersep> clock <identifiersep> skews ( ) ; \n \t3 if ( ( temp <identifiersep> skews == null ) || ( temp <identifiersep> skews . is <identifiersep> empty ( ) ) ) continue ; \n \t3 skews . add <identifiersep> all ( temp <identifiersep> skews ) ; } \n \t2 <comment> \n <ect>
\t6 if ( line == null ) { \n \t7 break ; } \n \t6 output = output + line ; } \n \t5 p . get <identifiersep> input <identifiersep> stream ( ) . close ( ) ; \n <ect>
\t5 assert <identifiersep> not <identifiersep> null ( <string_literal> + field . get <identifiersep> name ( ) + <string_literal> + clazz . get <identifiersep> name ( ) + <string_literal> , getter ) ; \n \t5 assert <identifiersep> not <identifiersep> null ( <string_literal> + field . get <identifiersep> name ( ) + <string_literal> + clazz . get <identifiersep> name ( ) + <string_literal> , setter ) ; } } \n \t3 <comment> \n \t3 for ( method method : clazz . get <identifiersep> declared <identifiersep> methods ( ) ) { \n <ect>
\t4 final rpc <identifiersep> future f = helper . start <identifiersep> compile <identifiersep> yrl ( project , resource , backend . get <identifiersep> otp <identifiersep> rpc ( ) , compiler <identifiersep> options ) ; \n \t4 if ( f != null ) { \n \t5 results . put ( f , resource ) ; } \n \t3 } else { \n <ect>
\t3 logger . debug ( <string_literal> , new object [ ] { user . get <identifiersep> name ( ) , file <identifiersep> system <identifiersep> view . get <identifiersep> home <identifiersep> directory ( ) . get <identifiersep> absolute <identifiersep> path ( ) , file <identifiersep> system <identifiersep> view . get <identifiersep> working <identifiersep> directory ( ) . get <identifiersep> absolute <identifiersep> path ( ) } ) ; \n \t3 tx . success ( ) ; \n \t3 return file <identifiersep> system <identifiersep> view ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 try { \n \t3 client <identifiersep> response response = web <identifiersep> resource . accept ( <string_literal> ) . get ( client <identifiersep> response . class ) ; \n \t3 string settings <identifiersep> string = response . get <identifiersep> entity ( string . class ) ; \n \t3 if ( response . get <identifiersep> status ( ) != <number_literal> ) { \n <ect>
\t4 xslt <identifiersep> helper . register <identifiersep> saxon <identifiersep> configuration ( ctx , factory <identifiersep> class , factory , saxon <identifiersep> configuration ) ; \n \t4 xslt <identifiersep> helper . register <identifiersep> saxon <identifiersep> configuration <identifiersep> properties ( ctx , factory <identifiersep> class , factory , saxon <identifiersep> configuration <identifiersep> properties ) ; \n \t4 xslt <identifiersep> helper . register <identifiersep> saxon <identifiersep> extension <identifiersep> functions ( ctx , factory <identifiersep> class , factory , saxon <identifiersep> extension <identifiersep> functions ) ; } } \n \t2 if ( factory != null ) { \n <ect>
\t3 throws i2p <identifiersep> exception , interrupted <identifiersep> io <identifiersep> exception , io <identifiersep> exception , sam <identifiersep> exception { \n \t2 synchronized ( this . socket <identifiersep> server <identifiersep> lock ) { \n \t3 if ( this . socket <identifiersep> server != null ) { \n \t4 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t1 @ override \n \t1 public collection < authentication <identifiersep> handler <identifiersep> resolver > get <identifiersep> authentication <identifiersep> handler <identifiersep> resolvers ( final authentication <identifiersep> transaction transaction ) { \n \t2 final list < authentication <identifiersep> handler <identifiersep> resolver > list = new array <identifiersep> list ( this . authentication <identifiersep> handler <identifiersep> resolvers ) ; \n \t2 order <identifiersep> comparator . sort ( list ) ; \n <ect>
\t1 <comment> \n \t1 if ( upload <identifiersep> future != null ) { \n \t2 log . debug ( <string_literal> + this . snapshot <identifiersep> id + <string_literal> ) ; \n \t2 if ( upload <identifiersep> future . get ( ) != null ) { \n <ect>
\t3 thread . sleep ( test <identifiersep> runnable . sleep <identifiersep> millis / <number_literal> ) ; \n \t3 try { \n \t4 instance . add <identifiersep> runnable ( new test <identifiersep> runnable ( id , run <identifiersep> count ) ) ; \n \t3 } catch ( rejected <identifiersep> execution <identifiersep> exception rejected <identifiersep> ex ) { \n <ect>
\t3 if (  <identifiersep> firewall <identifiersep> mgr . revoke <identifiersep> all <identifiersep> firewall <identifiersep> rules <identifiersep> for <identifiersep> network ( network <identifiersep> id , caller <identifiersep> user <identifiersep> id , caller ) ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + network <identifiersep> id ) ; \n \t3 } else { \n \t4 success = false ; \n <ect>
\t2 if (  <identifiersep> connection != null ) { \n \t3 try { \n \t4  <identifiersep> connection . start ( ) ; \n \t3 } catch ( final nio <identifiersep> connection <identifiersep> exception e ) { \n <ect>
\t3 builder . size ( drive . get <identifiersep> size ( ) / ( float ) ( <number_literal> * <number_literal> ) ) ; \n \t2 } catch ( null <identifiersep> pointer <identifiersep> exception e ) { \n \t3 logger . debug ( <string_literal> , input . get <identifiersep> drive <identifiersep> uuid ( ) ) ; \n \t2 } catch ( unchecked <identifiersep> execution <identifiersep> exception e ) { \n <ect>
\t3 element fst <identifiersep> elmnt = ( element ) fst <identifiersep> node ; \n \t3 <comment> \n \t3 api <identifiersep> command api = new api <identifiersep> command ( fst <identifiersep> elmnt , this . get <identifiersep> param ( ) , this . get <identifiersep> commands ( ) ) ; \n \t3 if ( api . get <identifiersep> name ( ) . equals ( <string_literal> ) ) { \n <ect>
\t1 transaction <identifiersep> coordination . get <identifiersep> instance ( ) . unbind <identifiersep> transaction ( this ) ; } } \n @ override \n public void rollback ( ) throws transaction <identifiersep> exception { \n \t1 try { \n <ect>
\t3 execute ( <string_literal> ) ; \n \t2 } catch ( throwable e ) { \n \t3 <comment> \n \t2 execute ( sql ) ; \n <ect>
\t2 s <identifiersep> logger . info ( <string_literal> + template <identifiersep> path + <string_literal> + template <identifiersep> name ) ; \n \t2 string template <identifiersep> file <identifiersep> path = template <identifiersep> path + file . separator + template <identifiersep> name + <string_literal> + image <identifiersep> format . ova . get <identifiersep> file <identifiersep> extension ( ) ; \n \t2 if ( !  <identifiersep> storage . exists ( template <identifiersep> file <identifiersep> path ) ) { \n <ect>
\t4 s <identifiersep> logger . trace ( <string_literal> ) ; } \n \t3 return true ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 if ( null == enrollment ) \n \t3 { \n \t4 throw new resource <identifiersep> exception ( status . client <identifiersep> error <identifiersep> not <identifiersep> found ) ; } \n \t3 json <identifiersep> object json <identifiersep> object = json <identifiersep> object . from <identifiersep> object ( entity . get <identifiersep> text ( ) ) ; \n <ect>
\t5 } else { \n \t6 logger . warn ( <string_literal> , get <identifiersep> parameters <identifiersep> as <identifiersep> string ( sources ) ) ; \n \t6 return <string_literal> ; } \n \t4 } else { \n <ect>
\t4 outstanding <identifiersep> requests . add ( drop <identifiersep> req ) ; \n \t4 if ( ! choked ) \n \t4 out . send <identifiersep> request ( drop <identifiersep> req ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
<comment> \n \t1 public wo <identifiersep> response report <identifiersep> exception ( throwable exception , wo <identifiersep> context context , ns <identifiersep> dictionary extra <identifiersep> info ) { \n <ect>
\t6 recons . add ( recon ) ; } \n \t4 } finally { \n \t5 is . close ( ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 job <identifiersep> on <identifiersep> finish <identifiersep> state <identifiersep> handler . close ( ) ; \n \t2 try { \n \t3 if ( spawn <identifiersep> mq != null ) { \n <ect>
\t3 long ts = input . get <identifiersep> long <identifiersep> by <identifiersep> field ( tuple <identifiersep> ts <identifiersep> field <identifiersep> name ) ; \n \t3 if ( water <identifiersep> mark <identifiersep> event <identifiersep> generator . track ( input . get <identifiersep> source <identifiersep> global <identifiersep> streamid ( ) , ts ) ) { \n \t4 window <identifiersep> manager . add ( input , ts ) ; \n \t3 } else { \n <ect>
\t1 executor . execute ( task ) ; \n \t1 task . wait <identifiersep> for <identifiersep> start ( ) ; } \n \t1 executor . shutdown ( ) ; \n \t1 while ( ! executor . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n <ect>
\t2 logger . debug ( <string_literal> + locked <identifiersep> for <identifiersep> manual <identifiersep> set <identifiersep> point ) ; \n \t2 logger . debug ( <string_literal> + rf <identifiersep> error ) ; \n \t2 logger . debug ( <string_literal> + battery <identifiersep> low ) ; \n \t2 if ( until <identifiersep> date <identifiersep> time != null ) { \n <ect>
\t4 log . error ( <string_literal> + size . get ( ) + <string_literal> ) ; } \n \t3 if ( check <identifiersep> lock ) { \n \t4 if ( ! in <identifiersep> mutex ) log . warn ( <string_literal> ) ; \n \t4 in <identifiersep> mutex = false ; \n <ect>
\t5 if ( room . get <identifiersep> position ( ) == device . get <identifiersep> room <identifiersep> id ( ) ) { \n \t6 logger . debug ( <string_literal> ) ; \n \t6 logger . debug ( <string_literal> , device . get <identifiersep> device <identifiersep> type ( ) ) ; \n \t6 logger . debug ( <string_literal> , device . get <identifiersep> name ( ) ) ; \n <ect>
\t4 continue ; } \n \t3 string sql1 = get <identifiersep> text <identifiersep> from <identifiersep> file ( sql <identifiersep> file ) ; \n \t3 string sql2 = translator . transform ( sql <identifiersep> file ) ; \n \t3 <comment> \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( <string_literal> , <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 0l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( <string_literal> , <string_literal> ) . set <identifiersep> size ( 0 ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 0l ) ) ; } \n <ect>
\t9 e . get <identifiersep> message ( ) ) ; \n \t7 error = true ; \n \t6 } catch ( closed <identifiersep> channel <identifiersep> exception e ) { \n \t7 <comment> \n <ect>
\t2 this . state = state ; \n \t2 this . conn = conn ; } \n \t1 public void get <identifiersep> buf ( integer buf <identifiersep> id ) { \n \t2 if ( state == null || state . bufs == null ) { \n <ect>
\t3 try { \n \t4 files = directory . list <identifiersep> all ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 final directory final <identifiersep> directory = directory ; \n <ect>
\t2 final logger test <identifiersep> logger = es <identifiersep> logger <identifiersep> factory . get <identifiersep> logger ( <string_literal> ) ; \n \t2 test <identifiersep> logger . error ( <string_literal> ) ; \n \t2 test <identifiersep> logger . warn ( <string_literal> ) ; \n \t2 test <identifiersep> logger . info ( <string_literal> ) ; \n <ect>
\t2 if ( vpns <identifiersep> to <identifiersep> reapply != null ) { \n \t3 for ( final remote <identifiersep> access <identifiersep> vpn vpn : vpns <identifiersep> to <identifiersep> reapply ) { \n \t4 <comment> \n \t4 if (  <identifiersep> vpn <identifiersep> mgr . start <identifiersep> remote <identifiersep> access <identifiersep> vpn ( vpn . get <identifiersep> server <identifiersep> address <identifiersep> id ( ) , false ) == null ) { \n <ect>
\t1 { \n \t2 assert ! sstables . is <identifiersep> empty ( ) ; <comment> \n \t2 if ( ! cfs . get <identifiersep> data <identifiersep> tracker ( ) . mark <identifiersep> compacting ( sstables ) ) \n \t2 { \n <ect>
\t1 <comment> \n \t1 public static connection create <identifiersep> connection ( string url , string user , string password ) throws sql <identifiersep> exception \n \t1 { \n <ect>
\t3 system . exit ( <number_literal> ) ; \n \t2 } catch ( exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t3 system . exit ( 1 ) ; } \n <ect>
\t1 protected boolean nexus <identifiersep> dvs = false ; \n \t1 cisco <identifiersep> nexus <identifiersep> vsm <identifiersep> element  <identifiersep> nexus <identifiersep> element ; \n \t1 list < network <identifiersep> element > network <identifiersep> elements ; \n \t1 public vmware <identifiersep> server <identifiersep> discoverer ( ) { \n <ect>
\t1 <comment> \n \t1 private static void usage ( ) { \n <ect>
\t5 log . debug ( <string_literal> , exchange . get <identifiersep> exchange <identifiersep> id ( ) ) ; } \n \t4 if ( session != null && session . get <identifiersep> transacted ( ) ) { \n \t5 session . commit ( ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t9  <identifiersep> host <identifiersep> transfer <identifiersep> dao . complete <identifiersep> agent <identifiersep> transfer ( host <identifiersep> id ) ; \n \t9 continue ; } \n \t8 management <identifiersep> server <identifiersep> host <identifiersep> vo ms =  <identifiersep> mshost <identifiersep> dao . find <identifiersep> by <identifiersep> msid ( transfer <identifiersep> map . get <identifiersep> future <identifiersep> owner ( ) ) ; \n \t8 if ( ms != null && ms . get <identifiersep> state ( ) != management <identifiersep> server <identifiersep> host . state . up ) { \n <ect>
\t2 return ( netty <identifiersep> endpoint ) super . get <identifiersep> endpoint ( ) ; } \n \t1 @ override \n \t1 protected void do <identifiersep> start ( ) throws exception { \n \t2 super . do <identifiersep> start ( ) ; \n <ect>
\t2 realm = session . realms ( ) . get <identifiersep> realm <identifiersep> by <identifiersep> name ( <string_literal> ) ; \n \t2 client <identifiersep> model client <identifiersep> from <identifiersep> cache = session . realms ( ) . get <identifiersep> client <identifiersep> by <identifiersep> id ( client <identifiersep> db <identifiersep> id , realm ) ; \n \t2 client <identifiersep> model client <identifiersep> from <identifiersep> db = session . get <identifiersep> provider ( realm <identifiersep> provider . class ) . get <identifiersep> client <identifiersep> by <identifiersep> id ( client <identifiersep> db <identifiersep> id , realm ) ; \n \t2 logger . info ( <string_literal> + client <identifiersep> from <identifiersep> db . get <identifiersep> secret ( ) ) ; \n <ect>
\t1 removable <identifiersep> identities \n \t2 . of <identifiersep> service ( clusters . get <identifiersep> cluster ( event . get <identifiersep> cluster <identifiersep> id ( ) ) , event , kerberos <identifiersep> helper ) \n \t2 . remove ( kerberos <identifiersep> helper ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 log . warn ( <string_literal> + arrays . to <identifiersep> string ( get <identifiersep> file <identifiersep> paths ( ) ) + <string_literal> + \n \t6 <string_literal> + ioex . get <identifiersep> message ( ) ) ; } } \n \t2 catch ( throwable t ) { \n \t3 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t1 for ( file log <identifiersep> dir : log <identifiersep> dirs ) { \n \t2 try { \n \t2 unlock ( log <identifiersep> dir ) ; \n \t2 } catch ( io <identifiersep> exception ex ) { \n <ect>
\t4 unit . set <identifiersep> refresh <identifiersep> count ( integer . value <identifiersep> of ( value ) ) ; \n \t3 } else if ( <string_literal> . equals ( key ) ) { \n \t4 unit . set <identifiersep> error <identifiersep> count ( integer . value <identifiersep> of ( value ) ) ; \n \t3 } else { \n <ect>
\t1 public collection < cdi <identifiersep> injection <identifiersep> book > session <identifiersep> get <identifiersep> bag ( @ context http <identifiersep> servlet <identifiersep> request request ) { \n \t2 log . info ( <string_literal> ) ; \n \t2 log . info ( <string_literal> + request . get <identifiersep> session ( ) . is <identifiersep> new ( ) ) ; \n \t2 collection < cdi <identifiersep> injection <identifiersep> book > books = book <identifiersep> bag . get <identifiersep> contents ( ) ; \n <ect>
\t3 log . info ( <string_literal> + enqueues ) ; \n \t3 time <identifiersep> unit . milliseconds . sleep ( <number_literal> ) ; \n \t2 } while ( enqueues != base <identifiersep> destination <identifiersep> a . get <identifiersep> destination <identifiersep> statistics ( ) . get <identifiersep> enqueues ( ) . get <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> false ( <string_literal> , done . get ( ) ) ; \n <ect>
\t3 if ( store != null && store . is <identifiersep> active ( ) ) { \n \t4 try { \n \t5 store . rollback <identifiersep> trx ( ) ; } \n \t4 catch ( runtime <identifiersep> exception rex ) { \n <ect>
\t4 log . info ( <string_literal> , read <identifiersep> pref ) ; } \n \t3 write <identifiersep> concern write <identifiersep> concern = uri . get <identifiersep> options ( ) . get <identifiersep> write <identifiersep> concern ( ) ; \n \t3 if ( ! write <identifiersep> concern . equals ( nodes . get <identifiersep> write <identifiersep> concern ( ) ) ) { \n \t4 nodes . set <identifiersep> write <identifiersep> concern ( write <identifiersep> concern ) ; \n <ect>
\t2 try \n \t2 { \n \t3 if ( ! service . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ) \n \t3 { \n <ect>
\t2 } , \n \t2 <comment> \n \t2 success : function ( context ) { \n \t3 context . steps . push ( j <identifiersep> query . proxy ( function ( notify ) { \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 mail <identifiersep> server . stop ( ) ; } \n \t1 @ test \n \t1 public void require <identifiersep> ssl <identifiersep> all <identifiersep> requests ( ) throws interrupted <identifiersep> exception { \n <ect>
\t2 new linked <identifiersep> list < pair < string , string > > ( ) ; \n \t1 <comment> \n \t1 list < rel <identifiersep> data <identifiersep> type <identifiersep> field > new <identifiersep> fields = bottom <identifiersep> fields ; \n \t1 if ( top <identifiersep> proj != null ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + parsed + <string_literal> + account . get <identifiersep> account <identifiersep> name ( ) + <string_literal> + account . get <identifiersep> id ( ) + <string_literal> ) ; } } \n \t2 parsed = storage <identifiersep> usage <identifiersep> parser . parse ( account , current <identifiersep> start <identifiersep> date , current <identifiersep> end <identifiersep> date ) ; \n \t3 if ( ! parsed ) { \n <ect>
\t3 continue \n \t2 break \n \t1 else : \n \t2 return \n <ect>
\t2 state . delayed <identifiersep> shutdown <identifiersep> queued . set ( true ) \n \t2 val current <identifiersep> clients <identifiersep> count = state . clients <identifiersep> counter \n \t2 val current <identifiersep> session <identifiersep> id = state . sessions . last <identifiersep> session <identifiersep> id \n \t2 val current <identifiersep> compilations <identifiersep> count = compilations <identifiersep> counter . get ( ) \n <ect>
\t1 list < string > all <identifiersep> child <identifiersep> nodes ; \n \t1 try { \n \t2 all <identifiersep> child <identifiersep> nodes = client . get <identifiersep> children ( ) . for <identifiersep> path ( base <identifiersep> path ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 if ( editor == null ) { \n \t4 throw new cache <identifiersep> configuration <identifiersep> exception ( <string_literal> + parameter <identifiersep> type ) ; } \n \t3 editor . set <identifiersep> as <identifiersep> text ( ( string ) attribs . get ( prop <identifiersep> name ) ) ; \n \t3 object parameter = editor . get <identifiersep> value ( ) ; \n <ect>
<comment> \n \t1 private static sun get <identifiersep> sun ( date date , double latitude , double longitude ) { \n \t2 if ( date == null ) { \n <ect>
\t8 try { \n \t9 node . unlock <identifiersep> system <identifiersep> properties <identifiersep> once ( ) ; \n \t9 node . set <identifiersep> property ( property <identifiersep> key , val ) ; \n \t8 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t5  <identifiersep> service <identifiersep> offering =  <identifiersep> offering <identifiersep> dao . find <identifiersep> by <identifiersep> id ( long . parse <identifiersep> long ( ssvm <identifiersep> srvc <identifiersep> off <identifiersep> id <identifiersep> str ) ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception ex ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + ssvm <identifiersep> srvc <identifiersep> off <identifiersep> id <identifiersep> str + <string_literal> ) ; } } \n \t3 if (  <identifiersep> service <identifiersep> offering == null ) { \n <ect>
\t2 keys . put ( column <identifiersep> names . id . get <identifiersep> column <identifiersep> name ( ) , new attribute <identifiersep> value ( string . value <identifiersep> of ( id ) ) ) ; \n \t2 return get <identifiersep> registered <identifiersep> service <identifiersep> by <identifiersep> keys ( keys ) ; } \n \t1 private registered <identifiersep> service deserialize <identifiersep> service <identifiersep> from <identifiersep> binary <identifiersep> blob ( final map < string , attribute <identifiersep> value > return <identifiersep> item ) { \n \t2 final byte <identifiersep> buffer bb = return <identifiersep> item . get ( column <identifiersep> names . encoded . get <identifiersep> column <identifiersep> name ( ) ) . get <identifiersep> b ( ) ; \n <ect>
\t2 for ( final uri uri :  <identifiersep> get ) { \n \t2 { \n <ect>
\t3 send <identifiersep> response ( resp , <string_literal> ) ; } } \n \t1 private void handle <identifiersep> thumbnail <identifiersep> request ( http <identifiersep> servlet <identifiersep> request req , http <identifiersep> servlet <identifiersep> response resp , long vm <identifiersep> id ) { \n \t2 vm <identifiersep> instance <identifiersep> vo vm =  <identifiersep> vm <identifiersep> mgr . find <identifiersep> by <identifiersep> id ( vm <identifiersep> id ) ; \n \t2 if ( vm == null ) { \n <ect>
\t3 cms <identifiersep> xml <identifiersep> vfs <identifiersep> file <identifiersep> value jsp <identifiersep> value = ( cms <identifiersep> xml <identifiersep> vfs <identifiersep> file <identifiersep> value ) ( jsp <identifiersep> loc . get <identifiersep> value ( ) ) ; \n \t3 cms <identifiersep> link link = jsp <identifiersep> value . get <identifiersep> link ( m <identifiersep> cms ) ; \n \t3 if ( link == null ) { \n \t4 <comment> \n <ect>
\t1 object = object <identifiersep> metadata <identifiersep> managers . get <identifiersep> instance ( ) . lookup <identifiersep> object ( bucket , request . get <identifiersep> key ( ) , version <identifiersep> id ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> entity <identifiersep> exception | no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t1 throw new no <identifiersep> such <identifiersep> key <identifiersep> exception ( key <identifiersep> full <identifiersep> name ) ; \n \t1 } catch ( exception e ) { \n <ect>
public void remove <identifiersep> from <identifiersep> movies ( webobjectsexamples . businesslogic . eo . movie object ) { \n \t1 exclude <identifiersep> object <identifiersep> from <identifiersep> property <identifiersep> with <identifiersep> key ( object ,  <identifiersep> studio . movies <identifiersep> key ) ; } \n public void add <identifiersep> to <identifiersep> movies <identifiersep> relationship ( webobjectsexamples . businesslogic . eo . movie object ) { \n <ect>
\t3 if ( str != null ) { \n \t4 try { \n \t5 x = integer . parse <identifiersep> int ( str ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 { \n \t4 if ( loader . get <identifiersep> failed <identifiersep> hosts ( ) . size ( ) > max <identifiersep> failures ) \n \t5 throw new io <identifiersep> exception ( <string_literal> + loader . get <identifiersep> failed <identifiersep> hosts ( ) ) ; \n \t4 else \n <ect>
\t1 if ( ve == null ) { \n \t1 throw new hive <identifiersep> exception ( \n \t2 <string_literal> + mode . name ( ) + <string_literal> + expr <identifiersep> desc . to <identifiersep> string ( ) ) ; } \n <ect>
\t2 } else { \n \t3 erx <identifiersep> validation <identifiersep> exception original = ( erx <identifiersep> validation <identifiersep> exception ) eov ; \n \t3 if ( should <identifiersep> recreate <identifiersep> exception ( original , value ) ) { \n \t4 erve = create <identifiersep> exception ( original . eo <identifiersep> object ( ) , original . key ( ) , original . value ( ) , original . type ( ) ) ; \n <ect>
\t3 throw e ; } \n \t2 state = started ; \n \t2 send <identifiersep> state <identifiersep> change <identifiersep> notification ( starting , started , get <identifiersep> name ( ) + <string_literal> , null ) ; \n <ect>
\t1 while ( iter < min <identifiersep> iter ) { \n \t1 train <identifiersep> documents ( test <identifiersep> fraction ) ; \n \t1 if ( verbose ) { \n \t2 log . info ( <string_literal> , iter , model <identifiersep> trainer . get <identifiersep> read <identifiersep> model ( ) ) ; } \n <ect>
\t2 boolean do <identifiersep> update = false ; \n \t2 if ( hypervisor != null && ! hypervisor . is <identifiersep> empty ( ) ) { \n \t3 final hypervisor . hypervisor <identifiersep> type hypervisor <identifiersep> type = hypervisor . hypervisor <identifiersep> type . get <identifiersep> type ( hypervisor ) ; \n \t3 if ( hypervisor <identifiersep> type == null ) { \n <ect>
\t4 } else { \n \t5 cluster <identifiersep> list . add ( cluster <identifiersep> id <identifiersep> specified ) ; \n \t5 remove <identifiersep> clusters <identifiersep> crossing <identifiersep> threshold ( cluster <identifiersep> list , avoid , vm <identifiersep> profile , plan ) ; } \n \t3 } else { \n <ect>
\t3 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( format ) ) { \n \t4 final validation <identifiersep> response <identifiersep> type format <identifiersep> type = validation <identifiersep> response <identifiersep> type . value <identifiersep> of ( format . to <identifiersep> upper <identifiersep> case ( ) ) ; \n \t4 web <identifiersep> application <identifiersep> service . set <identifiersep> format ( format <identifiersep> type ) ; } \n \t2 } catch ( final exception e ) { \n <ect>
\t2 get <identifiersep> line <identifiersep> number <identifiersep> method = stack <identifiersep> trace <identifiersep> element <identifiersep> class . get <identifiersep> method ( <string_literal> , no <identifiersep> args ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n \t2 log <identifiersep> log . debug ( <string_literal> ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception ex ) { \n <ect>
\t3 if ( tv <identifiersep> command <identifiersep> string == null ) { \n \t4 logger . warn ( <string_literal> { } \\ <string_literal> , command . to <identifiersep> string ( ) ) ; \n \t4 return ; } \n \t3 if ( tv <identifiersep> command <identifiersep> string . contains ( <string_literal> ) ) { \n <ect>
\t1 boolean bb = ve . evaluate ( new column <identifiersep> visibility ( test <identifiersep> vis . to <identifiersep> array ( ) ) ) ; \n \t1 cache . put ( test <identifiersep> vis , bb ) ; \n \t1 return bb ; \n \t1 } catch ( visibility <identifiersep> parse <identifiersep> exception | bad <identifiersep> argument <identifiersep> exception e ) { \n <ect>
\t2 add <identifiersep> changed <identifiersep> values ( store <identifiersep> fields , insert ) ; \n \t2 <comment> \n \t2 if ( ! insert . is <identifiersep> executable ( ) ) { \n <ect>
\t1 root . trace ( <string_literal> + ++ i ) ; \n \t1 logger . debug ( <string_literal> + ++ i ) ; \n \t1 root . debug ( <string_literal> + ++ i ) ; \n \t1 logger . info ( <string_literal> + ++ i ) ; \n <ect>
\t2 for ( nic <identifiersep> profile nic <identifiersep> profile : nic <identifiersep> profiles ) { \n \t3 if ( nic <identifiersep> profile . is <identifiersep> default <identifiersep> nic ( ) && existingdefaultnet != null && nic <identifiersep> profile . get <identifiersep> network <identifiersep> id ( ) == existingdefaultnet . get <identifiersep> id ( ) ) { \n \t4 existing = nic <identifiersep> profile ; } } \n \t2 if ( existing == null ) { \n <ect>
\t3 r = new grouper <identifiersep> multifactor <identifiersep> authentication <identifiersep> policy <identifiersep> event <identifiersep> resolver ( authentication <identifiersep> system <identifiersep> support , central <identifiersep> authentication <identifiersep> service , services <identifiersep> manager , \n \t5 ticket <identifiersep> registry <identifiersep> support , warn <identifiersep> cookie <identifiersep> generator , \n \t5 authentication <identifiersep> request <identifiersep> service <identifiersep> selection <identifiersep> strategies , multifactor <identifiersep> authentication <identifiersep> provider <identifiersep> selector , \n \t5 cas <identifiersep> properties ) ; \n <ect>
\t2 assert <identifiersep> false ( first <identifiersep> uuid . equals ( second <identifiersep> uuid ) ) ; } \n \t1 public void test <identifiersep> performance ( ) { \n \t2 java <identifiersep> uuid <identifiersep> generator uuid <identifiersep> generator = new java <identifiersep> uuid <identifiersep> generator ( ) ; \n \t2 stop <identifiersep> watch watch = new stop <identifiersep> watch ( ) ; \n <ect>
\t2 } else if ( nav <identifiersep> count != 0 && current <identifiersep> navigation <identifiersep> level < nav <identifiersep> count ) { \n \t3 int index = current <identifiersep> navigation <identifiersep> level - 1 ; \n \t3 int length = nav <identifiersep> count - current <identifiersep> navigation <identifiersep> level + 1 ; \n \t3 ns <identifiersep> range range = new ns <identifiersep> range ( index , length ) ; \n <ect>
\t3 db . product <identifiersep> version = md . get <identifiersep> database <identifiersep> product <identifiersep> version ( ) ; \n \t3 db . catalog <identifiersep> name = conn . get <identifiersep> catalog ( ) ; \n \t3 logger . debug ( <string_literal> + db . catalog <identifiersep> name ) ; \n \t3 logger . debug ( <string_literal> + db . product <identifiersep> name ) ; \n <ect>
\t3 if ( !  <identifiersep> raise <identifiersep> on <identifiersep> missing <identifiersep> editing <identifiersep> context <identifiersep> delegate && parent != null && parent instanceof eo <identifiersep> editing <identifiersep> context ) { \n \t4 object parent <identifiersep> delegate = ( ( eo <identifiersep> editing <identifiersep> context ) parent ) . delegate ( ) ; \n \t4 if ( parent <identifiersep> delegate != null && ( parent <identifiersep> delegate instanceof erx <identifiersep> editing <identifiersep> context <identifiersep> delegate ) ) { \n \t5 editing <identifiersep> context . set <identifiersep> delegate ( parent <identifiersep> delegate ) ; \n <ect>
\t3 response <identifiersep> mode mode = synchronous ? response <identifiersep> mode . get <identifiersep> all : response <identifiersep> mode . get <identifiersep> none ; \n \t3 disp . call <identifiersep> remote <identifiersep> methods ( null , new method <identifiersep> call ( remove <identifiersep> many , keys ) , new request <identifiersep> options ( mode , call <identifiersep> timeout ) ) ; } \n \t2 catch ( throwable t ) { \n <ect>
public void remove <identifiersep> from$ { relationship . capitalized <identifiersep> name } ( $relationship . actual <identifiersep> destination . class <identifiersep> name <identifiersep> with <identifiersep> default object ) { \n \t1 exclude <identifiersep> object <identifiersep> from <identifiersep> property <identifiersep> with <identifiersep> key ( object , $ { entity . prefix <identifiersep> class <identifiersep> name <identifiersep> without <identifiersep> package } . $ { relationship . uppercase <identifiersep> underscore <identifiersep> name }  <identifiersep> key ) ; } \n public void add <identifiersep> to$ { relationship . capitalized <identifiersep> name } relationship ( $relationship . actual <identifiersep> destination . class <identifiersep> name <identifiersep> with <identifiersep> default object ) { \n <ect>
\t1 future < boolean > future = entry . get <identifiersep> value ( ) ; \n \t1 try { \n \t2 <comment> \n \t2 if ( future . get ( ) ) { \n <ect>
\t2 try { \n \t3 message = tcp <identifiersep> input . read <identifiersep> line ( ) ; \n \t3 logger . debug ( <string_literal> , message ) ; \n \t2 } catch ( io <identifiersep> exception io <identifiersep> exception ) { \n <ect>
\t2 assert <identifiersep> equals ( <number_literal> , entity <identifiersep> set <identifiersep> with <identifiersep> top . get <identifiersep> entities ( ) . size ( ) ) ; \n \t2 log . info ( <string_literal> , entity <identifiersep> set . get <identifiersep> entities ( ) ) ; \n \t2 client <identifiersep> entity = ( client <identifiersep> entity ) response <identifiersep> parts . get ( <number_literal> ) . get <identifiersep> body ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( client <identifiersep> entity ) ; \n <ect>
\t10 missed <identifiersep> calls ++ ; } } \n \t8 value = integer . to <identifiersep> string ( missed <identifiersep> calls ) ; \n \t8 logger . debug ( <string_literal> , value ) ; \n \t7 } else { \n <ect>
\t2 { \n \t3 native . register ( <string_literal> ) ; } \n \t2 catch ( no <identifiersep> class <identifiersep> def <identifiersep> found <identifiersep> error e ) \n \t2 { \n <ect>
\t6 old <identifiersep> remote <identifiersep> model ) ; \n \t4 return new <identifiersep> model ; } \n \t3 catch ( throwable t ) { \n <ect>
\t3 save <identifiersep> semantic <identifiersep> types <identifiersep> information ( worksheet , workspace , worksheet . get <identifiersep> semantic <identifiersep> types ( ) . get <identifiersep> list <identifiersep> of <identifiersep> types ( ) ) ; \n \t3 <comment> \n \t3 c . append ( this . compute <identifiersep> alignment <identifiersep> and <identifiersep> semantic <identifiersep> types <identifiersep> and <identifiersep> create <identifiersep> updates ( workspace ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 for ( string id : ids ) { \n \t4 try { \n \t5 long deleted = blob <identifiersep> store . count <identifiersep> delete <identifiersep> chunks ( new <identifiersep> array <identifiersep> list ( id ) , max <identifiersep> modified ) ; \n \t5 if ( deleted != 1 ) { \n <ect>
\t3 return ; } \n \t2 if ( current <identifiersep> seg != null && partition <identifiersep> date <identifiersep> str == null ) \n \t3 partition <identifiersep> date = current <identifiersep> seg . get <identifiersep> ts <identifiersep> range ( ) . end . v ; \n \t2 cube <identifiersep> manager . create <identifiersep> cube ( new <identifiersep> cube <identifiersep> instance , project <identifiersep> name , owner ) ; \n <ect>
\t2 { \n \t3 content = media <identifiersep> handler . create <identifiersep> content <identifiersep> for <identifiersep> media ( media <identifiersep> type . video ) ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t3 while ( ( line <identifiersep> in = br . read <identifiersep> line ( ) ) != null ) { \n \t4 license = license + line <identifiersep> in + ' \\ n' ; } \n \t3 br . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( should <identifiersep> be <identifiersep> skipped ) { \n \t4 fail ( <string_literal> ) ; } \n \t2 } catch ( exception e ) { \n \t3 if ( ! should <identifiersep> be <identifiersep> skipped ) { \n <ect>
\t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e2 ) { \n \t1 logger . error ( <string_literal> , e2 ) ; \n \t1 migrationresult . set <identifiersep> error ( <string_literal> + e2 . get <identifiersep> message ( ) ) ; \n \t1 } catch ( parse <identifiersep> exception e ) { \n <ect>
\t4 break \n \t3 try : \n \t4 self . websocket . send ( pong <identifiersep> control <identifiersep> message ( data = 'beep' ) ) \n \t3 except socket . error : \n <ect>
\t5 if ( api . get <identifiersep> response <identifiersep> type ( ) == response <identifiersep> type . empty ) { \n \t6 if ( api . is <identifiersep> empty ( ) == true ) { \n \t7 s <identifiersep> logger . info ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; } \n \t6 else { \n <ect>
\t5 logger . error ( r + <string_literal> + res + <string_literal> + ( t1 - t0 ) + <string_literal> ) ; \n \t5 assert <identifiersep> null ( result . get ( ) ) ; \n \t5 break ; } \n \t3 } catch ( final interrupted <identifiersep> exception | execution <identifiersep> exception ex ) { \n <ect>
\t3 } catch ( io <identifiersep> exception e ) { \n \t4 <comment> \n \t4 log . info ( <string_literal> , hp , e ) ; \n \t3 } catch ( ssl <identifiersep> context <identifiersep> exception e ) { \n <ect>
\t3 server . add <identifiersep> name <identifiersep> space ( later <identifiersep> name ) ; \n \t3 content <identifiersep> object bogon = \n \t4 new content <identifiersep> object ( later <identifiersep> name , c0 . get <identifiersep> first <identifiersep> segment ( ) . signed <identifiersep> info ( ) , \n \t6 c0 . get <identifiersep> first <identifiersep> segment ( ) . content ( ) , c0 . get <identifiersep> first <identifiersep> segment ( ) . signature ( ) ) ; \n <ect>
\t3 context . get <identifiersep> sub <identifiersep> properties ( \n \t3 http <identifiersep> source <identifiersep> configuration <identifiersep> constants . config <identifiersep> handler <identifiersep> prefix ) ; \n \t1 handler . configure ( new context ( sub <identifiersep> props ) ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception ex ) { \n <ect>
\t4 break ; } \n \t3 to <identifiersep> try . remove ( n <identifiersep> info ) ; \n \t3 tried . add ( n <identifiersep> info ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
<comment> \n <comment> \n \t3 add <identifiersep> test ( <string_literal> , concurrency <identifiersep> test . suite ( ) ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 try { \n \t3 publisher . publish <identifiersep> event ( event ) ; } \n \t2 catch ( throwable ex ) { \n \t3 if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t4 <comment> \n \t4 pool =  <identifiersep> storage <identifiersep> pool <identifiersep> dao . find <identifiersep> pool <identifiersep> by <identifiersep> host <identifiersep> path ( host . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , host . get <identifiersep> pod <identifiersep> id ( ) , host <identifiersep> address , null , \n \t6 p <identifiersep> info . get <identifiersep> uuid ( ) ) ; \n \t4 if ( pool != null ) { \n <ect>
\t4 public void on <identifiersep> response ( shards <identifiersep> synced <identifiersep> flush <identifiersep> result synced <identifiersep> flush <identifiersep> result ) { \n \t5 logger . trace ( <string_literal> , synced <identifiersep> flush <identifiersep> result . get <identifiersep> shard <identifiersep> id ( ) , synced <identifiersep> flush <identifiersep> result . sync <identifiersep> id ( ) ) ; } \n \t4 @ override \n \t4 public void on <identifiersep> failure ( exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> , m ) ; \n \t4 git <identifiersep> hub <identifiersep> repository <identifiersep> name ret = new git <identifiersep> hub <identifiersep> repository <identifiersep> name ( m . group ( 1 ) , m . group ( <number_literal> ) , m . group ( <number_literal> ) ) ; \n \t4 logger . debug ( <string_literal> , ret ) ; \n \t4 return ret ; } } \n <ect>
\t2 { \n \t3 mimetypes . load ( files <identifiersep> constants . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( <string_literal> ) ) ; } \n \t2 catch ( io <identifiersep> exception err ) \n \t2 { \n <ect>
\t3 if ( ser <identifiersep> msg == null || ser <identifiersep> msg . length == 0 ) { \n \t4 return ; } \n \t3 if ( ser <identifiersep> msg . length == 1 ) { \n \t4 byte new <identifiersep> status = ser <identifiersep> msg [ 0 ] ; \n <ect>
\t2 super . set <identifiersep> local <identifiersep> context ( new <identifiersep> value ) ; \n \t2 if ( new <identifiersep> value != null ) \n \t3 new <identifiersep> value . take <identifiersep> value <identifiersep> for <identifiersep> key ( key <identifiersep> paths <identifiersep> with <identifiersep> validation <identifiersep> exceptions , keys . key <identifiersep> paths <identifiersep> with <identifiersep> validation <identifiersep> exceptions ) ; \n \t2 else \n <ect>
\t5 long clock = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t5 for ( string jobid : jobids ) { \n \t6 job job = spawn . get <identifiersep> job ( jobid ) ; \n \t6 if ( job == null ) { \n <ect>
\t6 list < string > result <identifiersep> keys = futures . get <identifiersep> unchecked ( futures . all <identifiersep> as <identifiersep> list ( future <identifiersep> result <identifiersep> keys ) ) ; \n \t6 test <identifiersep> request . set <identifiersep> status ( test <identifiersep> request . status . done ) ; \n \t6 test <identifiersep> request . set <identifiersep> test <identifiersep> result <identifiersep> key ( joiner . on ( <string_literal> ) . join ( result <identifiersep> keys ) ) ; \n \t6 store ( test <identifiersep> request ) ; \n <ect>
\t3 log . info ( <string_literal> ) ; \n \t3 server <identifiersep> channel <identifiersep> group . close ( ) . await <identifiersep> uninterruptibly ( ) ; \n \t3 server <identifiersep> channel <identifiersep> factory . release <identifiersep> external <identifiersep> resources ( ) ; \n \t2 } else { \n <ect>
\t2 if ( block <identifiersep> generic <identifiersep> pipe . is <identifiersep> valid ( pipe ) ) { \n \t3 list < item <identifiersep> stack > items = new array <identifiersep> list < > ( pipe . compute <identifiersep> item <identifiersep> drop ( ) ) ; \n \t3 items . add ( new item <identifiersep> stack ( pipe . item , 1 , pipe . container . get <identifiersep> item <identifiersep> metadata ( ) ) ) ; \n \t3 stored <identifiersep> requirements = items . to <identifiersep> array ( new item <identifiersep> stack [ items . size ( ) ] ) ; \n <ect>
def get <identifiersep> segment <identifiersep> list <identifiersep> ambari ( ) : \n <string_literal> <string_literal> <string_literal> \n <ect>
\t1 { \n \t2 final string property = get <identifiersep> property ( key ) ; \n \t2 if ( property == null ) \n \t2 { \n <ect>
\t3 } else if ( ports <identifiersep> not <identifiersep> forwarded . length == <number_literal> ) { \n \t4 return prefix + l10n ( <string_literal> + key <identifiersep> suffix , new string [ ] { <string_literal> , <string_literal> } , \n \t6 new string [ ] { integer . to <identifiersep> string ( math . abs ( ports <identifiersep> not <identifiersep> forwarded [ 0 ] ) ) , integer . to <identifiersep> string ( math . abs ( ports <identifiersep> not <identifiersep> forwarded [ 1 ] ) ) } ) ; \n \t3 } else { \n <ect>
\t1 } catch ( host <identifiersep> not <identifiersep> found <identifiersep> exception e1 ) { \n \t2 associated <identifiersep> with <identifiersep> cluster = false ; \n \t1 } catch ( ambari <identifiersep> exception e1 ) { \n \t2 <comment> \n <ect>
\t3 test <identifiersep> element node = comp . create <identifiersep> test <identifiersep> element ( ) ; \n \t3 nodes <identifiersep> to <identifiersep> gui . put ( node , comp ) ; \n \t3 return node ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 cidrlist = [ '0 . 0 . 0 . 0 / 0' ] , \n \t3 startport = self . services [ <string_literal> ] [ <string_literal> ] , \n \t3 endport = self . services [ <string_literal> ] [ <string_literal> ] \n \t2 ) \n <ect>
\t2 assert <identifiersep> null ( session <identifiersep> handler . read <identifiersep> outbound ( ) ) ; \n \t2 session <identifiersep> handler . finish ( ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> spdy <identifiersep> client <identifiersep> session <identifiersep> handler ( ) { \n <ect>
\t7 logger . warn ( string . format ( \n \t8 <string_literal> , \n \t8 entry . get <identifiersep> key ( ) , entry . get <identifiersep> value ( ) , e . get <identifiersep> message ( ) ) ) ; } } \n \t4 } catch ( x <identifiersep> wiki <identifiersep> velocity <identifiersep> exception ex ) { \n <ect>
\t3 logger . warn ( <string_literal> , jsex ) ; \n \t3 int code = http <identifiersep> servlet <identifiersep> response . sc <identifiersep> bad <identifiersep> request ; \n \t3 response . set <identifiersep> status ( code ) ; \n \t2 } catch ( json <identifiersep> parse <identifiersep> exception jpex ) { \n <ect>
\t5  <identifiersep> unavailable <identifiersep> inbound <identifiersep> burst . set ( 0 ) ; } } } \n \t2 int avo =  <identifiersep> available <identifiersep> outbound . add <identifiersep> and <identifiersep> get ( ( int ) bytes <identifiersep> outbound ) ; \n \t2 if ( avo >  <identifiersep> max <identifiersep> outbound ) { \n \t3 <comment> \n <ect>
\t1 if ( callback != null ) { \n \t1 logger . info ( <string_literal> , exception ) ; \n \t1 callback . on <identifiersep> exception ( exception ) ; \n \t1 } else { \n <ect>
\t1 <comment> \n \t1 llap <identifiersep> status <identifiersep> service <identifiersep> driver \n \t2 . maybe <identifiersep> log <identifiersep> summary ( clock , 0l , status <identifiersep> service <identifiersep> driver , \n \t3 watch <identifiersep> mode , watch <identifiersep> timeout , launching <identifiersep> state ) ; \n <ect>
\t4 gms . merge <identifiersep> ack <identifiersep> collector . wait <identifiersep> for <identifiersep> all <identifiersep> acks ( gms . view <identifiersep> ack <identifiersep> collection <identifiersep> timeout ) ; \n \t4 log . trace ( <string_literal> , \n \t6 gms . local <identifiersep> addr , size , view , ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) ) ; } \n \t3 catch ( timeout <identifiersep> exception e ) { \n <ect>
\t2 if ( get <identifiersep> creation <identifiersep> date ( ) == null ) { \n \t3 <comment> \n \t3 return false ; } \n \t2 if ( too <identifiersep> old ( ) ) { \n <ect>
\t6 final x509certificate certificate = basic <identifiersep> x509credential . class . cast ( c ) . get <identifiersep> entity <identifiersep> certificate ( ) ; \n \t6 logger . debug ( <string_literal> , cert <identifiersep> utils . to <identifiersep> string ( certificate ) ) ; \n \t6 return new basic <identifiersep> x509credential ( certificate , private <identifiersep> key ) ; } \n \t5 final resource signing <identifiersep> cert = saml <identifiersep> id <identifiersep> p <identifiersep> metadata <identifiersep> locator . get <identifiersep> signing <identifiersep> certificate ( ) ; \n <ect>
\t2 log . debug ( <string_literal> , e ) ; } \n \t1 return null ; } \n \t1 <comment> \n <ect>
\t1 log . debug ( <string_literal> + stats + <string_literal> + this ) ; } \n \t1 if ( conf != null ) { \n \t1 conf . set <identifiersep> statistics ( stats ) ; \n \t1 } else { \n <ect>
\t3 try { \n \t4 long svga <identifiersep> vmram <identifiersep> size = long . parse <identifiersep> long ( value ) ; \n \t4 set <identifiersep> new <identifiersep> v <identifiersep> ram <identifiersep> size <identifiersep> vm <identifiersep> video <identifiersep> card ( vm <identifiersep> mo , svga <identifiersep> vmram <identifiersep> size , vm <identifiersep> config <identifiersep> spec ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t6 response = request . create <identifiersep> exception <identifiersep> response ( modbus . illegal <identifiersep> function <identifiersep> exception ) ; \n \t5 } else { \n \t6 response = request . create <identifiersep> response ( ) ; } \n \t5 logger . debug ( <string_literal> , request . get <identifiersep> hex <identifiersep> message ( ) ) ; \n <ect>
\t1 public void unsubscribe <identifiersep> to <identifiersep> all <identifiersep> contact ( ) \n \t1 { \n \t2 { \n <ect>
\t1 if ( input <identifiersep> descriptor == null ) { \n \t2 continue ; } \n \t1 string source = ( string ) input <identifiersep> descriptor . get <identifiersep> source ( ) ; \n \t1 if ( string <identifiersep> utils . is <identifiersep> empty ( source ) ) { \n <ect>
\t5 integer . to <identifiersep> hex <identifiersep> string ( typical . get <identifiersep> type ( ) ) , typical . get <identifiersep> souliss <identifiersep> node <identifiersep> id ( ) , typical . get <identifiersep> slot ( ) , \n \t5 ( ( souliss <identifiersep> t1a ) typical ) . get <identifiersep> bit ( ) ) ; \n \t3 i <identifiersep> bit = ( ( souliss <identifiersep> t1a ) typical ) . get <identifiersep> bit ( ) ; \n \t2 } else { \n <ect>
\t4 msg . get <identifiersep> kv <identifiersep> state <identifiersep> id , \n \t4 msg . get <identifiersep> kv <identifiersep> state <identifiersep> server <identifiersep> address ) \n \t3 } catch { \n \t3 case t : throwable = > \n <ect>
\t3 if ( authentication == null ) { \n \t4 throw new invalid <identifiersep> ticket <identifiersep> exception ( new authentication <identifiersep> exception ( <string_literal> + ticket <identifiersep> granting <identifiersep> ticket ) , ticket <identifiersep> granting <identifiersep> ticket ) ; } \n \t3 final service selected <identifiersep> service = authentication <identifiersep> request <identifiersep> service <identifiersep> selection <identifiersep> strategies . resolve <identifiersep> service ( service ) ; \n \t3 final registered <identifiersep> service registered <identifiersep> service = services <identifiersep> manager . find <identifiersep> service <identifiersep> by ( selected <identifiersep> service ) ; \n <ect>
\t3 } else { \n \t4 s <identifiersep> logger . error ( <string_literal> + result + <string_literal> + param . get <identifiersep> client <identifiersep> tag ( ) + <string_literal> ) ; \n \t4 auth <identifiersep> result . set <identifiersep> success ( false ) ; } \n \t2 } else { \n <ect>
\t1 <comment> \n \t1 sdi . enabled = true ; \n \t1 <comment> \n \t1 future < ? > future = fork ( ( ) - > { \n <ect>
\t3 d <identifiersep> srv . go <identifiersep> offline ( ) ; <comment> \n \t3 set <identifiersep> dataset <identifiersep> state ( name , fuseki <identifiersep> vocab . state <identifiersep> offline ) ; \n \t3 <comment> \n \t2 } else if ( s . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n <ect>
\t3 try { \n \t4 final permanent <identifiersep> blob <identifiersep> key permanent <identifiersep> blob <identifiersep> key = blob <identifiersep> writer . put <identifiersep> permanent ( job <identifiersep> id , serialized <identifiersep> value . get <identifiersep> byte <identifiersep> array ( ) ) ; \n \t4 return either . right ( permanent <identifiersep> blob <identifiersep> key ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t5 return new <identifiersep> task ; \n \t4 else \n \t5 return null ; \n \t3 } catch ( final exception ex ) { \n <ect>
\t1 files . create <identifiersep> parent <identifiersep> dirs ( new file ( work <identifiersep> dir , <string_literal> ) ) ; \n \t1 file = file . create <identifiersep> temp <identifiersep> file ( get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , <string_literal> , work <identifiersep> dir ) ; \n \t1 logger . info ( <string_literal> , file ) ; \n \t1 meta = file . create <identifiersep> temp <identifiersep> file ( get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) , <string_literal> , work <identifiersep> dir ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public final void on <identifiersep> submit ( ) \n \t1 { \n <ect>
\t1 bwc . set <identifiersep> timeout ( batch <identifiersep> writer <identifiersep> timeout , time <identifiersep> unit . seconds ) ; \n \t1 try { \n \t1 batch <identifiersep> writer = connector . create <identifiersep> batch <identifiersep> writer ( table <identifiersep> name , bwc ) ; \n \t1 } catch ( table <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t1 private void check <identifiersep> id <identifiersep> attribute ( string key ) \n \t1 { \n \t2 if ( <string_literal> . equals <identifiersep> ignore <identifiersep> case ( key ) ) \n \t2 { \n <ect>
\t3 j <identifiersep> meter <identifiersep> utils . get <identifiersep> prop <identifiersep> default ( <string_literal> , <string_literal> ) ; <comment> \n \t1 private static final string [ ] ciphers = cipher <identifiersep> list . split ( <string_literal> ) ; <comment> \n \t1 static { \n \t2 if ( ! protocol <identifiersep> list . is <identifiersep> empty ( ) ) { \n <ect>
\t5 <string_literal> ) ; \n \t3 log . debug ( <string_literal> , e ) ; \n \t3 return null ; \n \t2 } catch ( invocation <identifiersep> target <identifiersep> exception e ) { \n <ect>
\t2 string sep = <string_literal> ; \n \t2 if ( cols . size ( ) == 0 ) \n \t2 { \n \t3 <comment> \n <ect>
public void set <identifiersep> owner ( com . secretpal . model . sp <identifiersep> person value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value ,  <identifiersep> sp <identifiersep> group . owner <identifiersep> key ) ; } \n public void set <identifiersep> owner <identifiersep> relationship ( com . secretpal . model . sp <identifiersep> person value ) { \n <ect>
\t1 try { \n \t1 inflight <identifiersep> puts = new inflight <identifiersep> event <identifiersep> wrapper ( inflight <identifiersep> puts <identifiersep> file ) ; \n \t1 inflight <identifiersep> takes = new inflight <identifiersep> event <identifiersep> wrapper ( inflight <identifiersep> takes <identifiersep> file ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 } else { \n \t4 return false ; } \n \t2 } catch ( dom <identifiersep> exception e ) { \n \t3 resp . send <identifiersep> error ( webdav <identifiersep> status . sc <identifiersep> internal <identifiersep> server <identifiersep> error ) ; \n <ect>
<comment> \n \t1 public void optimize ( ) { \n <ect>
\t1 val drm <identifiersep> interactions = drm <identifiersep> wrap [ int ] ( indexed <identifiersep> interactions ) \n \t1 new indexed <identifiersep> dataset <identifiersep> spark ( drm <identifiersep> interactions , row <identifiersep> id <identifiersep> dictionary , column <identifiersep> id <identifiersep> dictionary ) \n \t1 } catch { \n \t1 case cce : class <identifiersep> cast <identifiersep> exception = > { \n <ect>
\t6 <comment> \n \t6 try { \n \t7 cluster <identifiersep> descriptor . terminate <identifiersep> cluster ( client . get <identifiersep> cluster <identifiersep> id ( ) ) ; \n \t6 } catch ( flink <identifiersep> exception e ) { \n <ect>
\t1 for pid <identifiersep> file in pid <identifiersep> files : \n \t1 if not sudo . path <identifiersep> exists ( pid <identifiersep> file ) : \n \t2 raise fail ( <string_literal> . format ( pid <identifiersep> file ) ) \n \t1 pids . append ( sudo . read <identifiersep> file ( pid <identifiersep> file ) . strip ( ) ) \n <ect>
\t2 if ( clazz == null ) { \n \t3 clazz = factory ( ) . class <identifiersep> from <identifiersep> entity ( erxeo <identifiersep> access <identifiersep> utilities . entity <identifiersep> named ( null , entity <identifiersep> name ) ) ; \n \t3 clazz . set <identifiersep> entity <identifiersep> name ( entity <identifiersep> name ) ; } \n <ect>
\t3 vdi vdi = citrix <identifiersep> resource <identifiersep> base . get <identifiersep> vd <identifiersep> iby <identifiersep> uuid ( conn , vol <identifiersep> id ) ; \n \t3 vdi . resize ( conn , new <identifiersep> size ) ; \n \t3 return new resize <identifiersep> volume <identifiersep> answer ( command , true , <string_literal> , new <identifiersep> size ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t5 schema <identifiersep> global <identifiersep> element schema <identifiersep> element = wsdl <identifiersep> utils . get <identifiersep> schema <identifiersep> element <identifiersep> for <identifiersep> part ( wsdl <identifiersep> context , part ) ; \n \t5 if ( schema <identifiersep> type != null ) { \n \t6 result . add ( new wsdl <identifiersep> header <identifiersep> part ( part . get <identifiersep> name ( ) , schema <identifiersep> type , part . get <identifiersep> element <identifiersep> name ( ) , schema <identifiersep> element ) ) ; } \n \t4 } else { \n <ect>
\t2 oru <identifiersep> r01 <identifiersep> patient <identifiersep> result patient <identifiersep> result = oru . get <identifiersep> patient <identifiersep> result ( ) ; \n \t2 int num <identifiersep> obr = patient <identifiersep> result . get <identifiersep> order <identifiersep> observation <identifiersep> reps ( ) ; \n \t2 for ( int i = 0 ; i < num <identifiersep> obr ; i ++ ) { \n <ect>
\t7 group group = group <identifiersep> service . find <identifiersep> by <identifiersep> name ( context , group <identifiersep> names [ i ] . trim ( ) ) ; \n \t7 if ( group != null ) { \n \t8 groups . add ( group ) ; \n \t7 } else { \n <ect>
\t2 while ( running ) { \n \t3 try { \n \t4 if ( in . available ( ) > 0 ) { \n \t5 byte read <identifiersep> byte = ( byte ) in . read ( ) ; \n <ect>
\t4 if ( update <identifiersep> rules ) \n \t5 update <identifiersep> pres <identifiersep> rules ( ) ; } } \n \t2 catch ( x <identifiersep> cap <identifiersep> exception e ) \n \t2 { \n <ect>
\t1 logger . info ( <string_literal> ) ; } \n @ override \n public void stop ( ) throws io <identifiersep> exception { \n \t1 mini <identifiersep> dfs <identifiersep> cluster . shutdown ( ) ; \n <ect>
\t3 string agent <identifiersep> ip = ia . get <identifiersep> host <identifiersep> address ( ) ; \n \t3 string guid = uuid . name <identifiersep> uuid <identifiersep> from <identifiersep> bytes ( agent <identifiersep> ip . get <identifiersep> bytes ( ) ) . to <identifiersep> string ( ) ; \n \t3 string guid <identifiersep> with <identifiersep> tail = guid + <string_literal> ; <comment> \n \t3 if (  <identifiersep> resource <identifiersep> mgr . find <identifiersep> host <identifiersep> by <identifiersep> guid ( guid <identifiersep> with <identifiersep> tail ) != null ) { \n <ect>
\t2 if ( <string_literal> . equals ( property . get <identifiersep> value ( ) ) ) { \n \t3 property . set <identifiersep> value ( <string_literal> sync \\ <string_literal> enable \\ <string_literal> false \\ <string_literal> ) ; } \n \t2 property . set <identifiersep> field <identifiersep> name ( <string_literal> ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n <ect>
\t3 constant <identifiersep> ex constant = ( constant <identifiersep> ex ) arg ; \n \t3 node node = constant . get <identifiersep> node ( ) ; \n \t3 if ( ! node . is <identifiersep> literal ( ) ) { \n \t4 <comment> \n <ect>
\t1 queue <identifiersep> lookup <identifiersep> future = queue <identifiersep> lookup <identifiersep> executor . submit ( queue <identifiersep> drainer <identifiersep> callable ) ; \n \t1 futures . add <identifiersep> callback ( queue <identifiersep> lookup <identifiersep> future , new future <identifiersep> callback < void > ( ) { \n \t1 @ override \n \t1 public void on <identifiersep> success ( void result ) { \n <ect>
\t2 try { \n \t3 if ( message instanceof text <identifiersep> message ) { \n \t4 text <identifiersep> message text <identifiersep> message = ( text <identifiersep> message ) message ; \n \t4 message <identifiersep> text = text <identifiersep> message . get <identifiersep> text ( ) ; \n <ect>
<comment> \n \t1 public final void warn ( string msg , enum warning <identifiersep> enum ) { \n \t2 if ( pig <identifiersep> logger != null ) pig <identifiersep> logger . warn ( this , msg , warning <identifiersep> enum ) ; \n <ect>
\t2 for ( ss <identifiersep> table <identifiersep> reader sstable : expected ) \n \t2 { \n \t3 ranges . add ( new range < > ( sstable . first . get <identifiersep> token ( ) , sstable . last . get <identifiersep> token ( ) ) ) ; } \n \t2 pending <identifiersep> anti <identifiersep> compaction . acquisition <identifiersep> callable acquisition <identifiersep> callable = new pending <identifiersep> anti <identifiersep> compaction . acquisition <identifiersep> callable ( cfs , ranges , uuid <identifiersep> gen . get <identifiersep> time <identifiersep> uuid ( ) ) ; \n <ect>
\t1 . create <identifiersep> execution <identifiersep> query ( ) \n \t1 . process <identifiersep> instance <identifiersep> id ( process <identifiersep> instance . get <identifiersep> id ( ) ) \n \t1 . activity <identifiersep> id ( <string_literal> ) \n \t1 . single <identifiersep> result ( ) ; \n <ect>
\t4 else \n \t5 logger . trace ( <string_literal> , sstable . get <identifiersep> filename ( ) ) ; } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t1 public void init <identifiersep> after <identifiersep> first <identifiersep> db <identifiersep> connection ( ) { \n <ect>
\t2 <comment> \n \t2 endpoint . expected <identifiersep> minimum <identifiersep> message <identifiersep> count ( <number_literal> ) ; \n \t2 endpoint . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > list = endpoint . get <identifiersep> received <identifiersep> exchanges ( ) ; \n <ect>
\t2 } else if ( vo . get <identifiersep> scope ( ) == scope <identifiersep> type . host ) { \n \t3 list < storage <identifiersep> pool <identifiersep> host <identifiersep> vo > pool <identifiersep> hosts = pool <identifiersep> host <identifiersep> dao . list <identifiersep> by <identifiersep> pool <identifiersep> id ( vo . get <identifiersep> id ( ) ) ; \n \t3 if ( pool <identifiersep> hosts . size ( ) > 0 ) { \n \t4 return new host <identifiersep> scope ( pool <identifiersep> hosts . get ( 0 ) . get <identifiersep> host <identifiersep> id ( ) , vo . get <identifiersep> cluster <identifiersep> id ( ) , vo . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; } \n <ect>
\t4 string segment <identifiersep> id = executable . get <identifiersep> param ( segment <identifiersep> id ) ; \n \t4 executable <identifiersep> state state = executable . get <identifiersep> status ( ) ; \n \t4 if ( state != executable <identifiersep> state . ready && state != executable <identifiersep> state . running ) { \n \t5 if ( segment <identifiersep> with <identifiersep> locks . contains ( segment <identifiersep> id ) ) { \n <ect>
<comment> \n \t1 private void log <identifiersep> exception ( exception e , string target , string user ) \n \t1 { \n <ect>
\t4 properties opts = new properties ( ) ; \n \t4 i2p <identifiersep> socket <identifiersep> manager mgr = new i2p <identifiersep> socket <identifiersep> manager <identifiersep> full (  <identifiersep> context ,  <identifiersep> session , opts , <string_literal> ) ; \n \t4  <identifiersep> log . debug ( <string_literal> ) ; \n \t4 i2p <identifiersep> socket socket = mgr . connect (  <identifiersep> server . get <identifiersep> my <identifiersep> destination ( ) ) ; \n <ect>
<comment> \n public void reload <identifiersep> model ( ) { \n <ect>
\t2 final count <identifiersep> down <identifiersep> latch called = new count <identifiersep> down <identifiersep> latch ( 1 ) ; \n \t2 connection . set <identifiersep> exception <identifiersep> listener ( new exception <identifiersep> listener ( ) { \n \t3 @ override \n \t3 public void on <identifiersep> exception ( jms <identifiersep> exception exception ) { \n <ect>
\t2 this . is <identifiersep> backpressure <identifiersep> enable = config <identifiersep> extension . is <identifiersep> backpressure <identifiersep> enable ( storm <identifiersep> conf ) ; \n \t2 this . high <identifiersep> mark = ( float ) config <identifiersep> extension . get <identifiersep> backpressure <identifiersep> water <identifiersep> mark <identifiersep> high ( storm <identifiersep> conf ) ; \n \t2 this . low <identifiersep> mark = ( float ) config <identifiersep> extension . get <identifiersep> backpressure <identifiersep> water <identifiersep> mark <identifiersep> low ( storm <identifiersep> conf ) ; \n \t2 this . backpressure <identifiersep> status = false ; \n <ect>
\t3 } else if ( document . get <identifiersep> object ( <string_literal> ) != null ) { \n \t4 try { \n \t5 clean <identifiersep> deleted <identifiersep> user <identifiersep> or <identifiersep> group ( user <identifiersep> or <identifiersep> group <identifiersep> wiki , user <identifiersep> or <identifiersep> group <identifiersep> space , user <identifiersep> or <identifiersep> group <identifiersep> name , false , context ) ; \n \t4 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t1 @ test \n \t1 public void cache <identifiersep> invalidation <identifiersep> test ( ) throws exception { \n \t2 final document <identifiersep> node <identifiersep> store ns1 = create <identifiersep> mk ( 1 , 0 ) . get <identifiersep> node <identifiersep> store ( ) ; \n \t2 final document <identifiersep> node <identifiersep> store ns2 = create <identifiersep> mk ( <number_literal> , 0 ) . get <identifiersep> node <identifiersep> store ( ) ; \n <ect>
\t5 <comment> \n \t5 string size = m . group ( <number_literal> ) ; \n \t5 string ds <identifiersep> org = m . group ( <number_literal> ) ; \n \t5 file . set <identifiersep> size ( long . parse <identifiersep> long ( size ) ) ; \n <ect>
\t2 key <identifiersep> crypter <identifiersep> scrypt key <identifiersep> crypter = new key <identifiersep> crypter <identifiersep> scrypt ( scrypt <identifiersep> parameters ) ; \n \t2 <comment> \n \t2 encrypted <identifiersep> data data = key <identifiersep> crypter . encrypt ( test <identifiersep> bytes1 , key <identifiersep> crypter . derive <identifiersep> key ( password1 ) ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( data ) ; \n <ect>
\t3 log . info ( <string_literal> + signal . get <identifiersep> name ( ) + <string_literal> + signal . get <identifiersep> number ( ) ) ; \n \t3 runnable runner = signal <identifiersep> handlers . get ( signal . get <identifiersep> number ( ) ) ; \n \t3 try { \n \t4 if ( runner == null ) { \n <ect>
\t2 values . put ( column <identifiersep> names . service <identifiersep> id . get <identifiersep> column <identifiersep> name ( ) , new attribute <identifiersep> value ( service . get <identifiersep> service <identifiersep> id ( ) ) ) ; \n \t2 final byte <identifiersep> array <identifiersep> output <identifiersep> stream out = new byte <identifiersep> array <identifiersep> output <identifiersep> stream ( ) ; \n \t2 json <identifiersep> serializer . to ( out , service ) ; \n \t2 values . put ( column <identifiersep> names . encoded . get <identifiersep> column <identifiersep> name ( ) , new attribute <identifiersep> value ( ) . with <identifiersep> b ( byte <identifiersep> buffer . wrap ( out . to <identifiersep> byte <identifiersep> array ( ) ) ) ) ; \n <ect>
\t2 server <identifiersep> log . info ( format ( <string_literal> , now , server . get <identifiersep> connectors ( ) [ 0 ] . get <identifiersep> port ( ) ) ) ; \n \t2 try { \n \t3 server . stop ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 final iterator < authentication <identifiersep> handler > it = handler <identifiersep> set . iterator ( ) ; \n \t2 while ( it . has <identifiersep> next ( ) ) { \n \t3 final authentication <identifiersep> handler handler = it . next ( ) ; \n \t3 if ( ! ( handler instanceof http <identifiersep> based <identifiersep> service <identifiersep> credentials <identifiersep> authentication <identifiersep> handler ) && ! required <identifiersep> handlers . contains ( handler . get <identifiersep> name ( ) ) ) { \n <ect>
\t2 <comment> \n \t2 return false ; } \n \t1 private void setup <identifiersep> agent <identifiersep> security ( final connection ssh <identifiersep> connection , final string agent <identifiersep> ip , final string agent <identifiersep> hostname ) { \n \t2 if ( ! ca <identifiersep> manager . can <identifiersep> provision <identifiersep> certificates ( ) ) { \n <ect>
\t1 edition <identifiersep> plugin <identifiersep> downloader . download <identifiersep> edition <identifiersep> plugins ( plugins <identifiersep> to <identifiersep> install , update <identifiersep> center ) ; \n \t1 uninstall <identifiersep> plugins ( plugins <identifiersep> to <identifiersep> remove ) ; \n \t1 edition <identifiersep> management <identifiersep> state . automatic <identifiersep> install <identifiersep> ready ( ) ; \n \t1 } catch ( throwable t ) { \n <ect>
\t1 public static final string acl <identifiersep> info <identifiersep> family = <string_literal> ; \n \t1 private static final string acl <identifiersep> table <identifiersep> name = <string_literal> ; \n \t1 private static final string acl <identifiersep> info <identifiersep> family <identifiersep> parent <identifiersep> column = <string_literal> ; \n \t1 public static void main ( string [ ] args ) throws io <identifiersep> exception , interrupted <identifiersep> exception { \n <ect>
<comment> \n private boolean validate <identifiersep> token ( signed <identifiersep> jwt jwt <identifiersep> token ) { \n \t1 boolean sig <identifiersep> valid = validate <identifiersep> signature ( jwt <identifiersep> token ) ; \n \t1 if ( ! sig <identifiersep> valid ) { \n <ect>
\t3 log . info ( <string_literal> + page <identifiersep> file . get <identifiersep> page <identifiersep> count ( ) ) ; \n \t3 log . info ( <string_literal> + page <identifiersep> file . get <identifiersep> free <identifiersep> page <identifiersep> count ( ) ) ; \n \t3 log . info ( <string_literal> + page <identifiersep> file . get <identifiersep> page <identifiersep> content <identifiersep> size ( ) ) ; } \n \t2 assert <identifiersep> equals ( <string_literal> , initial <identifiersep> page <identifiersep> count , page <identifiersep> file . get <identifiersep> page <identifiersep> count ( ) - page <identifiersep> file . get <identifiersep> free <identifiersep> page <identifiersep> count ( ) ) ; \n <ect>
\t3 throw new meta <identifiersep> exception ( <string_literal> + type ) ; } } \n \t2 for ( string query : queries ) { \n \t2 log . debug ( <string_literal> + query + <string_literal> ) ; \n \t2 stmt . execute <identifiersep> update ( query ) ; } \n <ect>
\t2 <comment> \n \t2 try { \n \t3 c . append ( compute <identifiersep> alignment <identifiersep> and <identifiersep> semantic <identifiersep> types <identifiersep> and <identifiersep> create <identifiersep> updates ( workspace ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 this . region . get <identifiersep> attributes <identifiersep> mutator ( ) . add <identifiersep> cache <identifiersep> listener ( this . listener ) ; } \n \t1 @ override \n \t1 protected void do <identifiersep> stop ( ) { \n <ect>
\t5 beta = val ; \n \t5 best <identifiersep> child = child ; \n \t5 node . set <identifiersep> combat ( child . get <identifiersep> combat ( ) ) ; } \n \t4 if ( val == game <identifiersep> state <identifiersep> evaluator . lose <identifiersep> score ) { \n <ect>
\t3 assert <identifiersep> no <identifiersep> timeout ( client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> timeout ( <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> green <identifiersep> status ( ) ) ; \n \t3 logger . info ( <string_literal> , total <identifiersep> num <identifiersep> docs ) ; \n \t3 wait <identifiersep> for <identifiersep> docs ( total <identifiersep> num <identifiersep> docs , indexer ) ; \n \t3 indexer . assert <identifiersep> no <identifiersep> failures ( ) ; \n <ect>
\t6 per <identifiersep> ip <identifiersep> count = old ; } } \n \t4 if ( per <identifiersep> ip <identifiersep> count . increment <identifiersep> and <identifiersep> get ( ) > per <identifiersep> ip <identifiersep> limit ) \n \t4 { \n \t5 <comment> \n <ect>
\t4 return true ; } \n \t2 } catch ( x <identifiersep> bee <identifiersep> timeout <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , command , item <identifiersep> name , e ) ; \n \t2 } catch ( x <identifiersep> bee <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( edm ) ; \n \t2 log . info ( <string_literal> , edm . get <identifiersep> entity <identifiersep> container ( ) . get <identifiersep> entity <identifiersep> sets ( ) ) ; \n \t2 client <identifiersep> entity <identifiersep> set entity <identifiersep> set = ( client <identifiersep> entity <identifiersep> set ) response <identifiersep> parts . get ( 1 ) . get <identifiersep> body ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( entity <identifiersep> set ) ; \n <ect>
\t2 logger . debug ( <string_literal> , this . issuer , service . get <identifiersep> id ( ) ) ; \n \t2 final subject subject = this . saml <identifiersep> object <identifiersep> builder . new <identifiersep> subject ( principal . get <identifiersep> id ( ) ) ; \n \t2 logger . debug ( <string_literal> , principal ) ; \n \t2 final map < string , object > attributes <identifiersep> to <identifiersep> send = prepare <identifiersep> saml <identifiersep> attributes ( model , service ) ; \n <ect>
\t4 string named <identifiersep> reporter = reporter <identifiersep> configuration . f0 ; \n \t4 configuration reporter <identifiersep> config = reporter <identifiersep> configuration . f1 ; \n \t4 final string class <identifiersep> name = reporter <identifiersep> config . get <identifiersep> string ( config <identifiersep> constants . metrics <identifiersep> reporter <identifiersep> class <identifiersep> suffix , null ) ; \n \t4 if ( class <identifiersep> name == null ) { \n <ect>
\t4 map < string , string > success = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> } ) ; \n \t4 s <identifiersep> logger . info ( <string_literal> + success . get ( <string_literal> ) ) ; \n \t4  <identifiersep> domain <identifiersep> router <identifiersep> id . set ( success . get ( <string_literal> ) ) ; \n \t3 } else { \n <ect>
\t5 current <identifiersep> level . put ( address , level ) ; \n \t5 logger . debug ( <string_literal> + address + <string_literal> + level ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 reconnect <identifiersep> to <identifiersep> mochad <identifiersep> x10server ( ) ; \n <ect>
\t4 catch ( parse <identifiersep> exception e ) { \n \t5 logger . error ( <string_literal> , e ) ; \n \t5 throw e ; } \n \t4 catch ( exception e ) { \n <ect>
\t3  <identifiersep> try <identifiersep> preload <identifiersep> attach : function ( ) { \n \t4 if ( this . locked ) { \n \t5 return false ; } \n \t4 this . locked = true ; \n <ect>
\t3 return received . size ( ) == split <identifiersep> count ? grid <identifiersep> compute <identifiersep> job <identifiersep> result <identifiersep> policy . reduce : grid <identifiersep> compute <identifiersep> job <identifiersep> result <identifiersep> policy . wait ; } \n \t2 <comment> \n \t2 @ override public string reduce ( list < grid <identifiersep> compute <identifiersep> job <identifiersep> result > results ) throws grid <identifiersep> exception { \n <ect>
\t2 if ( num <identifiersep> records <identifiersep> in == null ) { \n \t3 try { \n \t4 num <identifiersep> records <identifiersep> in = ( ( operator <identifiersep> metric <identifiersep> group ) stream <identifiersep> operator . get <identifiersep> metric <identifiersep> group ( ) ) . get <identifiersep> io <identifiersep> metric <identifiersep> group ( ) . get <identifiersep> num <identifiersep> records <identifiersep> in <identifiersep> counter ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 worker <identifiersep> shutdown shutdown <identifiersep> handle = get <identifiersep> process <identifiersep> handle ( pid ) ; \n \t3 if ( shutdown <identifiersep> handle != null ) { \n \t4 shutdown <identifiersep> handle . shutdown ( ) ; } \n \t3 process <identifiersep> map . remove ( pid ) ; \n <ect>
\t2 cluster <identifiersep> service . get <identifiersep> cluster <identifiersep> applier <identifiersep> service ( ) . on <identifiersep> new <identifiersep> cluster <identifiersep> state ( <string_literal> , \n \t3 ( ) - > cluster <identifiersep> state . builder ( current <identifiersep> state ) \n \t4 . nodes ( discovery <identifiersep> nodes . builder ( current <identifiersep> state . nodes ( ) ) . master <identifiersep> node <identifiersep> id ( current <identifiersep> state . nodes ( ) . get <identifiersep> local <identifiersep> node <identifiersep> id ( ) ) ) . build ( ) , \n \t3 ( source , e ) - > { } ) ; \n <ect>
\t2 try { \n \t3 final default <identifiersep> registered <identifiersep> service <identifiersep> json <identifiersep> serializer validator = new default <identifiersep> registered <identifiersep> service <identifiersep> json <identifiersep> serializer ( ) ; \n \t3 if ( file <identifiersep> path . is <identifiersep> file ( ) && file <identifiersep> path . exists ( ) && file <identifiersep> path . can <identifiersep> read ( ) && file <identifiersep> path . length ( ) > 0 ) { \n \t4 final registered <identifiersep> service svc = validator . from ( file <identifiersep> path ) ; \n <ect>
\t2 int count = 0 ; \n \t2 for ( object ticket : result ) { \n \t3 log . info ( ticket . to <identifiersep> string ( ) ) ; \n \t3 count ++ ; } \n <ect>
\t4 delete <identifiersep> entity <identifiersep> download <identifiersep> url <identifiersep> command cmd = \n \t5 new delete <identifiersep> entity <identifiersep> download <identifiersep> url <identifiersep> command ( path , extract <identifiersep> job . get <identifiersep> type ( ) , extract <identifiersep> job . get <identifiersep> upload <identifiersep> url ( ) , ( ( image <identifiersep> store <identifiersep> vo ) sec <identifiersep> store ) . get <identifiersep> parent ( ) ) ; \n \t4 end <identifiersep> point ep =  <identifiersep> ep <identifiersep> selector . select ( sec <identifiersep> store ) ; \n \t4 if ( ep == null ) { \n <ect>
\t4 <comment> \n \t4 log . info ( <string_literal> + delivery <identifiersep> stream <identifiersep> name + <string_literal> ) ; \n \t4 put <identifiersep> record <identifiersep> into <identifiersep> delivery <identifiersep> stream ( ) ; \n \t4 <comment> \n <ect>
\t1 string root <identifiersep> table <identifiersep> name = get <identifiersep> root <identifiersep> table <identifiersep> name ( ) ; \n \t1 return table <identifiersep> exists ( root <identifiersep> table <identifiersep> name ) ; } \n private void create <identifiersep> root <identifiersep> table ( ) throws sql <identifiersep> exception { \n \t1 string root <identifiersep> table <identifiersep> name = get <identifiersep> root <identifiersep> table <identifiersep> name ( ) ; \n <ect>
\t3 boolean is <identifiersep> valid <identifiersep> signature = verify ( signed <identifiersep> file , signing <identifiersep> public <identifiersep> key ) ; \n \t3 if ( is <identifiersep> valid <identifiersep> signature ) \n \t4 return true ; } \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 else { \n \t3 throwable error = error <identifiersep> ref . get ( ) ; \n \t3 if ( error != null ) { \n \t4 success = false ; \n <ect>
\t1 } ) ; \n \t1 try { \n \t2 file <identifiersep> system . close <identifiersep> all <identifiersep> for <identifiersep> ugi ( ugi ) ; \n \t1 } catch ( io <identifiersep> exception exception ) { \n <ect>
\t6 throw new exec <identifiersep> exception ( msg , err <identifiersep> code , pig <identifiersep> exception . input ) ; } \n \t4 } catch ( exec <identifiersep> exception ee ) { \n \t5 throw ee ; \n \t4 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 else if ( peers . size ( ) >= get <identifiersep> max <identifiersep> connections ( ) ) \n \t2 { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t6 try { \n \t7 new <identifiersep> node . unlock <identifiersep> system <identifiersep> properties <identifiersep> once ( ) ; \n \t7 new <identifiersep> node . set <identifiersep> properties ( new <identifiersep> node . get <identifiersep> security <identifiersep> context ( ) , new property <identifiersep> map ( node <identifiersep> interface . type , template . class . get <identifiersep> simple <identifiersep> name ( ) ) ) ; \n \t6 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t5 <comment> \n \t5 pre <identifiersep> processors = ( list < string > ) pp <identifiersep> obj ; \n \t4 } else { \n \t5 <comment> \n <ect>
\t3 } catch ( exception e ) { \n \t4 logger . error ( <string_literal> , e ) ; } } } \n \t1 private void connect ( ) throws no <identifiersep> such <identifiersep> port <identifiersep> exception , port <identifiersep> in <identifiersep> use <identifiersep> exception , unsupported <identifiersep> comm <identifiersep> operation <identifiersep> exception , \n \t3 io <identifiersep> exception , interrupted <identifiersep> exception , configuration <identifiersep> exception { \n <ect>
\t1 try { \n \t1 if ( ( process <identifiersep> id == null ) || ( instance <identifiersep> id == null ) || ( action <identifiersep> name == null ) || action <identifiersep> name . equals ( <string_literal> ) ) { <comment> \n \t2 if ( process <identifiersep> id == null ) { \n \t2 process <identifiersep> id = <string_literal> ; <comment> \n <ect>
\t5 result . add ( invoker ) ; } } \n \t3 if ( ! result . is <identifiersep> empty ( ) ) { \n \t4 return result ; \n \t3 } else if ( force ) { \n <ect>
\t2 assert . assert <identifiersep> equals ( test <identifiersep> util . get <identifiersep> error <identifiersep> message <identifiersep> for <identifiersep> known <identifiersep> issue ( <string_literal> , <string_literal> ) , http <identifiersep> status . sc <identifiersep> ok , post <identifiersep> status ) ; \n \t2 assert . assert <identifiersep> equals ( <string_literal> , clean <identifiersep> files <identifiersep> data <identifiersep> source <identifiersep> provider <identifiersep> resource . client <identifiersep> response , post <identifiersep> response ) ; \n \t2 <comment> \n \t2 int count <identifiersep> after = count <identifiersep> files ( server <identifiersep> tmp <identifiersep> dir ) ; \n <ect>
\t2 return exp <identifiersep> time ; } \n \t1 private class poll <identifiersep> queue <identifiersep> reader implements runnable { \n \t2 @ override \n \t2 public void run ( ) { \n <ect>
\t2 console . print <identifiersep> info ( row ) ; } \n \t1 console . print <identifiersep> info ( separator ) ; \n \t1 console . print <identifiersep> info ( <string_literal> ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 long remaining <identifiersep> delay = future . get <identifiersep> delay ( time <identifiersep> unit . nanoseconds ) ; \n \t3 <comment> \n \t3 if ( false == future <identifiersep> utils . cancel ( future ) ) { \n \t4 <comment> \n <ect>
\t3 log . warn ( <string_literal> ) ; } } \n \t1 public void process <identifiersep> io <identifiersep> exception ( io <identifiersep> exception <identifiersep> event io <identifiersep> exception <identifiersep> event ) { \n <ect>
\t2 this . keep <identifiersep> whitespace = keep <identifiersep> whitespace ; } \n \t1 private static class default <identifiersep> error <identifiersep> handler implements error <identifiersep> handler { \n \t2 @ override \n \t2 public void warning ( sax <identifiersep> parse <identifiersep> exception exception ) throws sax <identifiersep> exception { \n <ect>
\t3 if ( ! packages . contains ( custom <identifiersep> package ) ) \n \t3 { \n \t4 packages . add ( 0 , custom <identifiersep> package ) ; \n \t4 if ( logger <identifiersep> is <identifiersep> debug <identifiersep> enabled ) \n <ect>
\t2 return files ; } \n \t1 <comment> \n \t1 array <identifiersep> list < string > get <identifiersep> includes ( string core <identifiersep> path ) \n \t1 { \n <ect>
\t5 <string_literal> ) ; \n \t3 return ; } \n \t2 storm <identifiersep> status current <identifiersep> status = stormbase . get <identifiersep> status ( ) ; \n \t2 if ( current <identifiersep> status == null ) { \n <ect>
\t2 } catch ( lifecycle <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; } \n \t2 <comment> \n <ect>
\t5 . create <identifiersep> query ( <string_literal> ) \n \t5 . set <identifiersep> parameter ( <string_literal> , tab <identifiersep> id ) . get <identifiersep> single <identifiersep> result ( ) ; \n \t3 <comment> \n \t3 tab <identifiersep> to <identifiersep> undelete . get <identifiersep> gadgets ( ) . size ( ) ; \n <ect>
\t1 public connection get <identifiersep> connection ( ) throws jms <identifiersep> exception { \n \t2 if ( jms <identifiersep> connection == null ) { \n \t3 jms <identifiersep> connection = factory . create <identifiersep> connection ( ) ; \n \t3 jms <identifiersep> connection . set <identifiersep> client <identifiersep> id ( get <identifiersep> client <identifiersep> name ( ) ) ; \n <ect>
\t4 logger . warn ( <string_literal> + properties <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; } \n \t3 logger . info ( <string_literal> + properties <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t2 } else { \n <ect>
\t2 private km200comm comm ; \n \t2 @ override \n \t2 public void run ( ) { \n \t3 try { \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 try { \n \t4 fos . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e1 ) { \n <ect>
\t1 private ast <identifiersep> node node <identifiersep> of <identifiersep> interest ; \n \t1 private type \t1 type = type . none ; \n \t1 private void set ( type type , ast <identifiersep> node ast ) { \n \t1 if ( this . type != type . none ) { \n <ect>
\t1 scanner . set <identifiersep> range ( metadata <identifiersep> schema . deletes <identifiersep> section . get <identifiersep> range ( ) ) ; \n \t1 for ( entry < key , value > entry : scanner ) { \n \t2 string row = entry . get <identifiersep> key ( ) . get <identifiersep> row ( ) . to <identifiersep> string ( ) ; \n \t2 if ( ! row . contains ( <string_literal> + table <identifiersep> id + <string_literal> ) ) { \n <ect>
\t3 texture <identifiersep> fx instanceof fire || \n \t3 texture <identifiersep> fx instanceof portal ) { \n \t3 return null ; } \n \t2 class < ? extends texture <identifiersep> fx > texture <identifiersep> fx <identifiersep> class = texture <identifiersep> fx . get <identifiersep> class ( ) ; \n <ect>
\t3 try { \n \t4 cred . load ( c <identifiersep> file ) ; \n \t4 cred . set <identifiersep> file ( c <identifiersep> file ) ; \n \t3 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t6 stmt . close ( ) ; \n \t6 con . commit ( ) ; \n \t6 dropped += tname + <string_literal> ; \n \t5 } catch ( sql <identifiersep> exception ex ) { \n <ect>
<comment> \n \t2 try { \n \t3 host <identifiersep> transfer <identifiersep> search =  <identifiersep> host <identifiersep> transfer <identifiersep> dao . create <identifiersep> search <identifiersep> builder ( ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t1 try { \n \t2 checkers . add ( ( polled <identifiersep> notification <identifiersep> checker ) candidate . new <identifiersep> instance ( ) ) ; \n \t2 logger . debug ( <string_literal> + candidate . get <identifiersep> name ( ) ) ; \n \t1 } catch ( final throwable ex ) { \n <ect>
\t3 log . error ( <string_literal> , e ) ; \n \t2 } catch ( instance <identifiersep> already <identifiersep> exists <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e ) ; \n \t2 } catch ( not <identifiersep> compliant <identifiersep> m <identifiersep> bean <identifiersep> exception e ) { \n <ect>
\t3 if ( sso != null ) \n \t4 log . debug ( <string_literal> + sso ) ; \n \t3 else \n <ect>
\t6 assert global <identifiersep> cntr <identifiersep> multi <identifiersep> node . compare <identifiersep> and <identifiersep> set ( global , new <identifiersep> cntr ) : invalid ( <string_literal> , \n \t7 pri , true , new <identifiersep> cntr , global ) ; \n \t6 int prev = c . put ( cntr <identifiersep> key , new <identifiersep> cntr ) ; \n \t6 if ( debug ) { \n <ect>
\t1 string [ ] expanded <identifiersep> args = null ; \n \t1 try { \n \t1 expanded <identifiersep> args = options <identifiersep> file <identifiersep> util . expand <identifiersep> arguments ( args ) ; \n \t1 } catch ( exception ex ) { \n <ect>
\t1 private class < ? extends database > database <identifiersep> class ( string url ) { \n \t2 if ( is <identifiersep> blank ( url ) ) \n \t3 throw new generator <identifiersep> exception ( <string_literal> ) ; \n \t2 class < ? extends database > result = databases . database <identifiersep> class ( jdbc <identifiersep> utils . dialect ( url ) ) ; \n <ect>
\t1 if ( m <identifiersep> configuration . get <identifiersep> jira <identifiersep> url ( ) . is <identifiersep> empty ( ) ) { \n \t1 m <identifiersep> logger . info ( <string_literal> ) ; \n \t1 return ; } \n \t1 if ( m <identifiersep> configuration . get <identifiersep> jira <identifiersep> user ( ) . is <identifiersep> empty ( ) ) { \n <ect>
<comment> \n \t2 if ( crypto == null ) \n \t2 { \n <ect>
<comment> \n \t3 add <identifiersep> listener : function ( el , s <identifiersep> type , fn , o <identifiersep> scope , b <identifiersep> override ) { \n \t4 if ( ! fn || ! fn . call ) { \n <ect>
@ override \n public void configure ( map props ) throws hibernate <identifiersep> exception \n { \n \t1 try { \n <ect>
\t1 for ( string reverse <identifiersep> dependent <identifiersep> resource <identifiersep> id : reverse <identifiersep> dependent <identifiersep> resource <identifiersep> ids ) { \n \t1 resource <identifiersep> info <identifiersep> map . put ( reverse <identifiersep> dependent <identifiersep> resource <identifiersep> id , stack <identifiersep> resource <identifiersep> entity <identifiersep> manager . get <identifiersep> resource <identifiersep> info ( stack <identifiersep> id , account <identifiersep> id , reverse <identifiersep> dependent <identifiersep> resource <identifiersep> id , updated <identifiersep> resource <identifiersep> version ) ) ; } \n \t1 resource <identifiersep> info next <identifiersep> resource <identifiersep> info = stack <identifiersep> resource <identifiersep> entity <identifiersep> manager . get <identifiersep> resource <identifiersep> info ( next <identifiersep> stack <identifiersep> resource <identifiersep> entity ) ; \n \t1 if ( ! next <identifiersep> resource <identifiersep> info . get <identifiersep> allowed <identifiersep> by <identifiersep> condition ( ) ) { \n <ect>
\t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n \t6  <identifiersep> log . debug ( <string_literal> + dsm ) ; } } \n \t2 } else { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t4 int expected <identifiersep> results = added [ doc <identifiersep> to <identifiersep> query ] ? 1 : 0 ; \n \t4 logger . info ( <string_literal> , english . int <identifiersep> to <identifiersep> english ( doc <identifiersep> to <identifiersep> query ) ) ; \n \t4 search <identifiersep> response search <identifiersep> response = client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> types ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> query ( <string_literal> , english . int <identifiersep> to <identifiersep> english ( doc <identifiersep> to <identifiersep> query ) ) ) \n \t5 . set <identifiersep> size ( expected <identifiersep> results ) . get ( ) ; \n <ect>
\t4 p . read <identifiersep> data ( data ) ; \n \t4 <comment> \n \t4 p . apply <identifiersep> data ( world <identifiersep> obj , null ) ; \n \t3 } else { \n <ect>
\t5 split <identifiersep> thread split = splits . get ( i ) ; \n \t5 if ( split . is <identifiersep> alive ( ) ) { \n \t6 abort ( splits ) ; } } \n \t3 } catch ( throwable e ) { \n <ect>
\t2 p <identifiersep> stmt . set <identifiersep> long ( 1 , info . id ) ; \n \t2 log . debug ( <string_literal> + s + <string_literal> ) ; \n \t2 int upd <identifiersep> count = p <identifiersep> stmt . execute <identifiersep> update ( ) ; \n \t2 if ( upd <identifiersep> count != 1 ) { \n <ect>
\t2 final test <identifiersep> olingo4response <identifiersep> handler < client <identifiersep> entity > response <identifiersep> handler = new test <identifiersep> olingo4response <identifiersep> handler < client <identifiersep> entity > ( ) ; \n \t2 olingo <identifiersep> app . read ( edm , test <identifiersep> people , null , null , response <identifiersep> handler ) ; \n \t2 client <identifiersep> entity entity = response <identifiersep> handler . await ( ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , entity . get <identifiersep> property ( <string_literal> ) . get <identifiersep> value ( ) . to <identifiersep> string ( ) ) ; \n <ect>
public string generate ( final string package <identifiersep> name , final string clazz <identifiersep> name ) { \n \t1 return generate ( package <identifiersep> name , clazz <identifiersep> name , marshaller <identifiersep> generation <identifiersep> callback . no <identifiersep> op ) ; } \n public string generate ( final string package <identifiersep> name , final string clazz <identifiersep> name , final marshaller <identifiersep> generation <identifiersep> callback callback ) { \n \t1 final string gen ; \n <ect>
\t7 if ( inv . get <identifiersep> method <identifiersep> name ( ) . equals ( method ) ) { \n \t8 has <identifiersep> method = true ; \n \t8 break ; } } } \n \t5 if ( ! has <identifiersep> method ) { \n <ect>
\t5 logger . debug ( <string_literal> + accessor . get <identifiersep> short <identifiersep> log <identifiersep> message ( empty <identifiersep> payload ) ) ; } \n \t4 after <identifiersep> stomp <identifiersep> connected ( accessor ) ; } \n \t3 else if ( logger . is <identifiersep> error <identifiersep> enabled ( ) && stomp <identifiersep> command . error . equals ( command ) ) { \n <ect>
\t1 query <identifiersep> criteria . set <identifiersep> read <identifiersep> only ( true ) ; \n \t1 final number count = ( number ) query <identifiersep> criteria . unique <identifiersep> result ( ) ; \n \t1 return count == null ? 0 : count . long <identifiersep> value ( ) ; \n \t1 } catch ( throwable e ) { \n <ect>
\t1 element = ( element ) node ; \n \t1 break ; } } \n \t1 <comment> \n \t1 if ( element == null ) { \n <ect>
\t2 string path = process <identifiersep> path ( request , response ) ; \n \t2 if ( path == null ) { \n \t3 return ; } \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + channel . socket ( ) ) ; } \n \t5 channel . close ( ) ; } \n \t3 } catch ( final io <identifiersep> exception ignore ) { \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> + h . to <identifiersep> string ( ) + <string_literal> ) ; } \n \t5 continue ; \n \t4 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t2 task <identifiersep> wrapper . get <identifiersep> task <identifiersep> runner <identifiersep> callable ( ) . set <identifiersep> wm <identifiersep> counters <identifiersep> done ( ) ; \n \t2 <comment> \n \t2 task <identifiersep> wrapper . get <identifiersep> task <identifiersep> runner <identifiersep> callable ( ) . kill <identifiersep> task ( ) ; \n \t1 } else { \n <ect>
\t2 mock . expected <identifiersep> minimum <identifiersep> message <identifiersep> count ( 1 ) ; \n \t2 mock . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 list < exchange > tweets = mock . get <identifiersep> exchanges ( ) ; \n \t2 for ( exchange e : tweets ) { \n <ect>
\t3 } else { \n \t4 sort = sort <identifiersep> builders . field <identifiersep> sort ( <string_literal> ) . missing ( <string_literal> ) ; } } \n \t2 sort . order ( random <identifiersep> boolean ( ) ? sort <identifiersep> order . asc : sort <identifiersep> order . desc ) ; \n \t2 search <identifiersep> type search <identifiersep> type = random <identifiersep> picks . random <identifiersep> from ( random ( ) , arrays . as <identifiersep> list ( search <identifiersep> types ) ) ; \n <ect>
\t3 for ( shard shard : shards ) { \n \t4 assert <identifiersep> version ( index , <number_literal> , <string_literal> + shard . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> name ( ) , final <identifiersep> version <identifiersep> for <identifiersep> doc2 ) ; \n \t4 assert <identifiersep> count ( index , <string_literal> + shard . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> name ( ) , <number_literal> ) ; } \n \t3 primary = shards . stream ( ) . filter ( shard : : is <identifiersep> primary ) . find <identifiersep> first ( ) . get ( ) ; \n <ect>
\t1 try { \n \t2 ss . close ( ) ; \n \t1 } catch ( io <identifiersep> exception io <identifiersep> exception ) { \n \t2 assert . fail ( io <identifiersep> exception . get <identifiersep> message ( ) ) ; \n <ect>
\t2 session . set <identifiersep> attribute ( <string_literal> , <number_literal> ) ; <comment> \n \t2 assert <identifiersep> equals ( <number_literal> , session . get <identifiersep> attribute ( <string_literal> ) ) ; <comment> \n \t1 @ test \n \t1 public void read <identifiersep> write <identifiersep> wrong <identifiersep> primitive <identifiersep> type ( ) throws exception { \n <ect>
\t4 default : \n \t5 break ; } \n \t3 return new data <identifiersep> cite <identifiersep> response ( status <identifiersep> code , content ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( files == null ) { \n \t3 return ; } \n \t2 for ( file f : files ) { \n \t3 if ( f . is <identifiersep> file ( ) ) { \n <ect>
\t3 string message = <string_literal> \n \t5 + fd <identifiersep> count + <string_literal> + initial <identifiersep> fd <identifiersep> count ; \n \t3 log . info ( message ) ; \n \t3 if ( fd <identifiersep> count > initial <identifiersep> fd <identifiersep> count ) { \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t4 this . doing <identifiersep> storage <identifiersep> aggregation = true ; \n \t4 result = new gt <identifiersep> aggregate <identifiersep> scanner ( result , this , spill <identifiersep> enabled ) ; \n \t3 } else { \n <ect>
\t1 public int get <identifiersep> poller <identifiersep> delay ( ) { \n \t2 return delay ; } \n \t1 @ override \n \t1 protected void do <identifiersep> start ( ) throws exception { \n <ect>
\t3 accumulator <identifiersep> init ( digest ) ; \n \t3 reseed <identifiersep> init ( digest ) ; \n \t3 generator <identifiersep> init ( cipher ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception e ) { \n <ect>
\t3 file class <identifiersep> file = new file ( java <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) . replace ( <string_literal> , <string_literal> ) ) ; \n \t3 class <identifiersep> file . delete <identifiersep> on <identifiersep> exit ( ) ; \n \t3 assert . assert <identifiersep> true ( class <identifiersep> file . exists ( ) ) ; \n \t3 class <identifiersep> files . add ( class <identifiersep> file ) ; \n <ect>
\t2 watch . stop ( ) ; \n \t2 log . info ( <string_literal> , watch ) ; } \n \t1 @ override \n \t1 public void restore ( file source ) { \n <ect>
\t3 delete <identifiersep> namespace <identifiersep> result result = new delete <identifiersep> namespace <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t9  <identifiersep> job <identifiersep> monitor . unregister <identifiersep> by <identifiersep> job <identifiersep> id ( item . get <identifiersep> content <identifiersep> id ( ) ) ; } \n \t8 <comment> \n \t8  <identifiersep> queue <identifiersep> mgr . purge <identifiersep> item ( item . get <identifiersep> id ( ) ) ; \n \t7 } catch ( throwable e ) { \n <ect>
\t7 + <string_literal> ) ; \n \t4 <comment> \n \t4 int currently <identifiersep> tried <identifiersep> port = network <identifiersep> utils . get <identifiersep> random <identifiersep> port <identifiersep> number ( ) ; \n <ect>
\t6 for ( test <identifiersep> element test <identifiersep> element : test <identifiersep> elements ) { \n \t7 if ( is <identifiersep> addable <identifiersep> test <identifiersep> element ( test <identifiersep> element ) ) { \n \t8 tree <identifiersep> model . add <identifiersep> component ( test <identifiersep> element , new <identifiersep> node ) ; } } } \n \t4 } catch ( illegal <identifiersep> user <identifiersep> action <identifiersep> exception e ) { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t3 @ override \n \t3 public void on <identifiersep> command ( object command ) { } \n \t3 @ override \n \t3 public void on <identifiersep> exception ( io <identifiersep> exception error ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3 return new pair < boolean , action <identifiersep> on <identifiersep> failed <identifiersep> authentication > ( false , null ) ; } \n \t2 user <identifiersep> account user =  <identifiersep> user <identifiersep> account <identifiersep> dao . get <identifiersep> user <identifiersep> account ( username , domain <identifiersep> id ) ; \n \t2 if ( user == null ) { \n <ect>
\t1 } catch ( final exception ex2 ) { \n \t2 try { \n \t2 partition = partitions . lookup <identifiersep> by <identifiersep> name ( clusters . lookup ( input . get <identifiersep> placement ( ) ) . get <identifiersep> partition ( ) ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t1 this . action <identifiersep> manager = action <identifiersep> manager ; \n \t1 this . injector = injector ; \n \t1 injector . inject <identifiersep> members ( this ) ; \n \t1 gson = injector . get <identifiersep> instance ( gson . class ) ; \n <ect>
\t3 catch ( interrupted <identifiersep> exception e ) \n \t3 { \n \t4 throw new runtime <identifiersep> exception ( e ) ; } \n \t3 host <identifiersep> id = host <identifiersep> id <identifiersep> supplier . get ( ) ; \n <ect>
\t3 list < snapshot <identifiersep> info > snaps = entities . query ( example <identifiersep> snap ) ; \n \t3 for ( snapshot <identifiersep> info snap : snaps ) { \n \t4 if ( snap . get <identifiersep> size <identifiersep> gb ( ) == null ) { \n \t4 snap . set <identifiersep> size <identifiersep> gb ( entry . get <identifiersep> size ( ) ) ; \n <ect>
\t4 transport <identifiersep> service . connect <identifiersep> to <identifiersep> node ( other <identifiersep> master ) ; \n \t4 transport <identifiersep> service . send <identifiersep> request ( other <identifiersep> master , discovery <identifiersep> rejoin <identifiersep> action <identifiersep> name , new rejoin <identifiersep> cluster <identifiersep> request ( local <identifiersep> cluster <identifiersep> state . nodes ( ) . get <identifiersep> local <identifiersep> node <identifiersep> id ( ) ) , new empty <identifiersep> transport <identifiersep> response <identifiersep> handler ( thread <identifiersep> pool . names . same ) { \n \t5 @ override \n \t5 public void handle <identifiersep> exception ( transport <identifiersep> exception exp ) { \n <ect>
\t4 log . info ( <string_literal> , prefix , controlled <identifiersep> name ) ; \n \t4 return prefix ; } } \n \t2 <comment> \n \t2 content <identifiersep> name search <identifiersep> name = versioning <identifiersep> profile . cut <identifiersep> terminal <identifiersep> version ( controlled <identifiersep> name ) . first ( ) ; \n <ect>
\t2 for ( int i = 0 ; i < cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shards ( ) . size ( ) ; i ++ ) { \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . shards ( ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . primary <identifiersep> shard ( ) . state ( ) , equal <identifiersep> to ( initializing ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . replica <identifiersep> shards ( ) . get ( 0 ) . state ( ) , equal <identifiersep> to ( unassigned ) ) ; } \n <ect>
\t3 logger . debug ( <string_literal> + name + <string_literal> ) ; } \n \t2 this . attributes . remove ( name ) ; } \n \t1 public void end ( ) { \n <ect>
\t4 return false ; } \n \t3 if ( num <identifiersep> passes > max <identifiersep> passes ) { \n \t4 return false ; } \n \t3 if ( debug ) { \n <ect>
\t9 s <identifiersep> logger . info ( <string_literal> + username + <string_literal> + ( ( system . current <identifiersep> time <identifiersep> millis ( ) - now ) / 1000l ) + <string_literal> + reason ) ; } \n \t8 s <identifiersep> logger . info ( <string_literal> + wait + <string_literal> ) ; \n \t8 thread . sleep ( wait ) ; \n \t7 } catch ( exception e ) { \n <ect>
\t1 public void test <identifiersep> started ( ) { \n \t2 try { \n \t3 listener . test <identifiersep> started ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t1 <comment> \n \t2 task <identifiersep> manager <identifiersep> options . debug <identifiersep> memory <identifiersep> log ) ) \n \t1 { \n <ect>
\t1 public void tear <identifiersep> down ( ) { \n \t2 try { \n \t3 ds . close ( ) ; \n \t2 } catch ( data <identifiersep> store <identifiersep> exception e ) { \n <ect>
\t4 config . set <identifiersep> target <identifiersep> type ( target <identifiersep> type ) ; \n \t4 property <identifiersep> change <identifiersep> support . fire <identifiersep> property <identifiersep> change ( target <identifiersep> type <identifiersep> property , old <identifiersep> name , target <identifiersep> type ) ; } } \n \t2 public void property <identifiersep> removed ( string name ) { \n \t3 if ( name . equals ( source <identifiersep> type ) ) { \n <ect>
\t1 private void send <identifiersep> flow <identifiersep> execution <identifiersep> redirect ( flow <identifiersep> execution <identifiersep> result result , servlet <identifiersep> external <identifiersep> context context , \n \t3 http <identifiersep> servlet <identifiersep> request request , http <identifiersep> servlet <identifiersep> response response ) throws io <identifiersep> exception { \n \t2 string url = flow <identifiersep> url <identifiersep> handler . create <identifiersep> flow <identifiersep> execution <identifiersep> url ( result . get <identifiersep> flow <identifiersep> id ( ) , result . get <identifiersep> paused <identifiersep> key ( ) , request ) ; \n <ect>
\t2 jg . close ( ) ; } \n \t2 if ( writer != null ) { \n \t2 writer . close ( ) ; } } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 protected void sleep ( int time ) { \n \t2 try { \n \t3 thread . sleep ( time ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 write <identifiersep> named <identifiersep> factory ( buf , client <identifiersep> listener . converter <identifiersep> factory <identifiersep> name ( ) , converter <identifiersep> factory <identifiersep> params ) ; } \n @ override \n public void write <identifiersep> expiration <identifiersep> params ( byte <identifiersep> buf buf , long lifespan , time <identifiersep> unit lifespan <identifiersep> time <identifiersep> unit , long max <identifiersep> idle , time <identifiersep> unit max <identifiersep> idle <identifiersep> time <identifiersep> unit ) { \n \t1 if ( ! codec <identifiersep> utils . is <identifiersep> int <identifiersep> compatible ( lifespan ) ) { \n <ect>
\t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + ( int ) pos <identifiersep> big <identifiersep> table ) ; \n \t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + ( int ) pos <identifiersep> single <identifiersep> vector <identifiersep> map <identifiersep> join <identifiersep> small <identifiersep> table ) ; \n \t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + arrays . to <identifiersep> string ( big <identifiersep> table <identifiersep> key <identifiersep> column <identifiersep> map ) ) ; \n \t1 log . debug ( get <identifiersep> logging <identifiersep> prefix ( ) + <string_literal> + arrays . to <identifiersep> string ( big <identifiersep> table <identifiersep> key <identifiersep> column <identifiersep> names ) ) ; \n <ect>
\t6 parameter parameter = parameters . get ( remove <identifiersep> name ) ; \n \t6 if ( parameter . is <identifiersep> defined ( ) && this . param <identifiersep> values . contains ( parameter . get <identifiersep> value ( ) ) ) { \n \t7 parameters . remove ( remove <identifiersep> name ) ; } \n \t5 } catch ( exception e ) { \n <ect>
\t4 current <identifiersep> source . peek <identifiersep> lock . unlock ( ) ; } \n \t3 if ( peek != null && source <identifiersep> name != null ) { \n \t4 peek . set <identifiersep> value ( peek ( ) . get <identifiersep> format ( ) . get <identifiersep> field ( inject <identifiersep> source <identifiersep> name ) , source <identifiersep> name ) ; } \n <ect>
\t1 <comment> \n \t1 void default <identifiersep> delete <identifiersep> handler ( string subject , string topic , org . apache . cloudstack . framework . events . event event ) { \n \t2 s <identifiersep> logger . debug ( <string_literal> + subject + <string_literal> + topic ) ; \n \t2 s <identifiersep> logger . debug ( <string_literal> + event . get <identifiersep> description ( ) ) ; \n <ect>
\t4 try { \n \t5 hystrix <identifiersep> event <identifiersep> type event <identifiersep> type = event <identifiersep> thunk . call ( ) ; \n \t5 return metrics . get <identifiersep> rolling <identifiersep> count ( hystrix <identifiersep> rolling <identifiersep> number <identifiersep> event . from ( event <identifiersep> type ) ) ; \n \t4 } catch ( no <identifiersep> such <identifiersep> field <identifiersep> error error ) { \n <ect>
\t3 case queue <identifiersep> flush <identifiersep> interval : { \n \t4 if ( namespace . since ( namespace . infinispan <identifiersep> server <identifiersep> <number_literal> <identifiersep> 0 ) ) { \n \t5 throw parse <identifiersep> utils . unexpected <identifiersep> attribute ( reader , index ) ; \n \t4 } else { \n <ect>
\t2  <identifiersep> lifetime <identifiersep> rejected . set ( get <identifiersep> long ( props , <string_literal> ) ) ; \n \t2 try { \n \t3  <identifiersep> reject <identifiersep> rate . load ( props , <string_literal> , true ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 peer <identifiersep> certs = ( ( ssl <identifiersep> transport ) next ) . get <identifiersep> peer <identifiersep> certificates ( ) ; } \n \t2 if ( next instanceof niossl <identifiersep> transport ) { \n \t3 peer <identifiersep> certs = ( ( niossl <identifiersep> transport ) next ) . get <identifiersep> peer <identifiersep> certificates ( ) ; } \n \t2 if ( trace && peer <identifiersep> certs != null ) { \n <ect>
\t4 byte [ ] plaintext = baos . to <identifiersep> byte <identifiersep> array ( ) . to <identifiersep> byte <identifiersep> array ( ) ; \n \t4 <comment> \n \t4 return string <identifiersep> escape <identifiersep> util . escape <identifiersep> url ( new string ( base64 . encode <identifiersep> base64 ( plaintext , false ) , <string_literal> ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t6 return factory . bulk <identifiersep> instantiate ( node . get <identifiersep> node ( ) . get <identifiersep> relationships ( direction . incoming , relationship <identifiersep> type . for <identifiersep> name ( rel <identifiersep> type <identifiersep> name ) ) ) ; } \n \t4 } else { \n \t5 return factory . bulk <identifiersep> instantiate ( node . get <identifiersep> node ( ) . get <identifiersep> relationships ( direction . incoming ) ) ; } \n \t3 } else { \n <ect>
\t3 signal <identifiersep> error ( ) ; \n \t2 } catch ( execution <identifiersep> exception e ) { \n \t3 <comment> \n \t3 if ( ! is <identifiersep> shutdown ) \n <ect>
\t2 < p > reload this page with open console , enter text and hit the log button . . . < / p > \n \t2 message : \n \t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n <ect>
\t1 case t : exception = > log . error ( <string_literal> , t ) } \n \t1 try { \n \t1 file <identifiersep> cache . shutdown ( ) \n \t1 } catch { \n <ect>
\t2 sched . event <identifiersep> occurred ( this ) ; \n \t2 long elapsed = system . current <identifiersep> time <identifiersep> millis ( ) - before ; \n \t2 <comment> \n \t2 if ( ( elapsed > <number_literal> ) && (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) ) \n <ect>
\t3 new <identifiersep> snapshot . set <identifiersep> path ( snapshot <identifiersep> rel <identifiersep> path + file . separator + desc <identifiersep> name ) ; \n \t3 new <identifiersep> snapshot . set <identifiersep> physical <identifiersep> size ( size ) ; \n \t3 return new copy <identifiersep> cmd <identifiersep> answer ( new <identifiersep> snapshot ) ; \n \t2 } catch ( final libvirt <identifiersep> exception e ) { \n <ect>
\t4 if ( target <identifiersep> scaler != null ) { \n \t5 result = create <identifiersep> variation ( target <identifiersep> scaler ) ; } } \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t1 else { \n \t2 add <identifiersep> object <identifiersep> to <identifiersep> both <identifiersep> sides <identifiersep> of <identifiersep> relationship <identifiersep> with <identifiersep> key ( object ,  <identifiersep> company . employees <identifiersep> key ) ; } } \n public void remove <identifiersep> from <identifiersep> employees <identifiersep> relationship ( er . ajax . example . employee object ) { \n <ect>
\t2 final surrogate <identifiersep> username <identifiersep> password <identifiersep> credential surrogate <identifiersep> credentials = ( surrogate <identifiersep> username <identifiersep> password <identifiersep> credential ) transaction . get <identifiersep> primary <identifiersep> credential ( ) . get ( ) ; \n \t2 final string target <identifiersep> user <identifiersep> id = surrogate <identifiersep> credentials . get <identifiersep> surrogate <identifiersep> username ( ) ; \n \t2 try { \n \t3 if ( string <identifiersep> utils . is <identifiersep> blank ( target <identifiersep> user <identifiersep> id ) ) { \n <ect>
\t4 for ( column <identifiersep> family <identifiersep> store cfs : self <identifiersep> with <identifiersep> indexes ) \n \t4 { \n \t5 if ( ! cfs . get <identifiersep> data <identifiersep> tracker ( ) . get <identifiersep> compacting ( ) . is <identifiersep> empty ( ) ) \n \t5 { \n <ect>
\t1 public optional < writer > get <identifiersep> writer ( ) { \n \t2 try { \n \t3 return optional ( new buffered <identifiersep> writer ( new file <identifiersep> writer ( file ) ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> + session <identifiersep> id + <string_literal> + eph <identifiersep> seq <identifiersep> version + <string_literal> \n \t3 + session + <string_literal> + si . get <identifiersep> plugin <identifiersep> port ( ) ) ; \n \t2 session . update <identifiersep> from <identifiersep> registry ( si , eph <identifiersep> seq <identifiersep> version ) ; \n \t1 } else { \n <ect>
\t4 success = inner <identifiersep> deploy <identifiersep> update ( deps ) ; \n \t4 if ( success ) wait <identifiersep> forever ( ) ; } \n \t3 <comment> \n \t2 } catch ( throwable t ) { \n <ect>
\t5  <identifiersep> message = node . get <identifiersep> text <identifiersep> content ( ) ; \n \t4 } else if ( node . get <identifiersep> node <identifiersep> name ( ) . equals <identifiersep> ignore <identifiersep> case ( <string_literal> ) ) { \n \t5  <identifiersep> info = node . get <identifiersep> text <identifiersep> content ( ) ; } } \n \t2 } catch ( dom <identifiersep> exception e ) { \n <ect>
\t1 log . trace ( <string_literal> + volume <identifiersep> iqn ) ; \n \t1 return volume <identifiersep> iqn ; } \n @ override \n public void unexport <identifiersep> resource ( string volume <identifiersep> id , string node <identifiersep> iqn ) throws eucalyptus <identifiersep> cloud <identifiersep> exception { \n <ect>
\t4 final otp <identifiersep> erlang <identifiersep> tuple t = otp <identifiersep> erlang . mk <identifiersep> tuple ( new otp <identifiersep> erlang <identifiersep> atom ( module ) , \n \t6 filename , b ) ; \n \t4 modules . add ( t ) ; \n \t3 } else { \n <ect>
\t1 if ( tar <identifiersep> file <identifiersep> output <identifiersep> stream != null ) { \n \t2 try { \n \t2 tar <identifiersep> file <identifiersep> output <identifiersep> stream . close ( ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 if ( get <identifiersep> cache <identifiersep> provider ( ) != null ) { \n \t3 try { \n \t4 caches . add <identifiersep> all ( get <identifiersep> cache <identifiersep> provider ( ) . get <identifiersep> caches ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 if ( resp != null ) { \n \t4 return resp . get <identifiersep> success ( ) ; } \n \t3 return false ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 registry . register ( new scheme ( <string_literal> , default <identifiersep> port , sf ) ) ; \n \t3 client <identifiersep> connection <identifiersep> manager ccm = new basic <identifiersep> client <identifiersep> connection <identifiersep> manager ( registry ) ; \n \t3 http <identifiersep> client = new default <identifiersep> http <identifiersep> client ( ccm ) ; \n \t2 } catch ( key <identifiersep> management <identifiersep> exception e ) { \n <ect>
\t2 min <identifiersep> common <identifiersep> users = min <identifiersep> cu ; \n \t2 model <identifiersep> size = size ; } \n \t1 @ override \n \t1 public similarity <identifiersep> matrix <identifiersep> model get ( ) { \n <ect>
\t1 int element <identifiersep> count = 0 ; \n \t1 @ override \n \t1 public void visit ( element entry ) { \n \t2 element <identifiersep> count ++ ; \n <ect>
\t4 throw new login <identifiersep> exception ( <string_literal> + principal <identifiersep> attr ) ; } \n \t3 if ( principal <identifiersep> attr . size ( ) > 1 ) { \n \t4 if ( ! this . allow <identifiersep> multiple <identifiersep> principal <identifiersep> attribute <identifiersep> values ) { \n \t5 throw new login <identifiersep> exception ( <string_literal> + principal <identifiersep> attr ) ; } \n <ect>
\t5 method m = method . get <identifiersep> method <identifiersep> by <identifiersep> id ( method ) ; \n \t5 notify <identifiersep> listeners ( ts , m , null ) ; \n \t5 <comment> \n \t4 } catch ( exception e ) { \n <ect>
public class full <identifiersep> rolling <identifiersep> restart <identifiersep> it extends es <identifiersep> integ <identifiersep> test <identifiersep> case { \n \t1 protected void assert <identifiersep> timeout ( cluster <identifiersep> health <identifiersep> request <identifiersep> builder request <identifiersep> builder ) { \n \t2 cluster <identifiersep> health <identifiersep> response cluster <identifiersep> health = request <identifiersep> builder . get ( ) ; \n \t2 if ( cluster <identifiersep> health . is <identifiersep> timed <identifiersep> out ( ) ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 return null ; } \n \t2 final registered <identifiersep> service <identifiersep> multifactor <identifiersep> policy policy = service . get <identifiersep> multifactor <identifiersep> policy ( ) ; \n \t2 if ( policy == null || policy . get <identifiersep> multifactor <identifiersep> authentication <identifiersep> providers ( ) . is <identifiersep> empty ( ) ) { \n <ect>
\t9 send <identifiersep> alert = true ; } } \n \t7 break ; } \n \t6  <identifiersep> template <identifiersep> data <identifiersep> store <identifiersep> dao . update ( tmp <identifiersep> template <identifiersep> data <identifiersep> store . get <identifiersep> id ( ) , tmp <identifiersep> template <identifiersep> data <identifiersep> store ) ; \n \t5 } catch ( no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t4 return s . split ( <string_literal> ) ; } } \n \t2 private static final string wrong <identifiersep> format = <string_literal> + \n \t2 <string_literal> ; \n \t2 public quorum <identifiersep> server ( long sid , string address <identifiersep> str ) throws config <identifiersep> exception { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3  <identifiersep> config <identifiersep> dao . update ( config . sec <identifiersep> storage <identifiersep> encrypt <identifiersep> copy . key ( ) , config . sec <identifiersep> storage <identifiersep> encrypt <identifiersep> copy . get <identifiersep> category ( ) , <string_literal> ) ; \n \t3 s <identifiersep> logger . debug ( <string_literal> ) ; \n \t3  <identifiersep> config <identifiersep> dao . update ( <string_literal> , <string_literal> ) ; \n <ect>
\t3 if ( ! success <identifiersep> http <identifiersep> status <identifiersep> code . contains ( rsp . get <identifiersep> status <identifiersep> code ( ) ) ) { \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( string . format ( <string_literal> , \n \t6 struct . get <identifiersep> vlan ( ) , struct . get <identifiersep> port ( ) , struct . get <identifiersep> switch <identifiersep> ip ( ) , rsp . get <identifiersep> status <identifiersep> code ( ) , rsp . get <identifiersep> body ( ) ) ) ; \n \t3 } else { \n <ect>
\t3 { \n \t4 mes = create <identifiersep> message <identifiersep> request ( to , msg ) ; } \n \t3 catch ( operation <identifiersep> failed <identifiersep> exception ex ) \n \t3 { \n <ect>
\t2 final string username = c . get <identifiersep> username ( ) ; \n \t2 final string password = c . get <identifiersep> password ( ) ; \n \t2 session fortress <identifiersep> session = null ; \n \t2 try { \n <ect>
\t2 assert . state ( initialized , ( ) - > <string_literal> ) ; \n \t2 quartz <identifiersep> schedule <identifiersep> token reference = ( quartz <identifiersep> schedule <identifiersep> token ) schedule <identifiersep> token ; \n \t2 try { \n \t3 if ( ! scheduler . delete <identifiersep> job ( job <identifiersep> key ( reference . get <identifiersep> job <identifiersep> identifier ( ) , reference . get <identifiersep> group <identifiersep> identifier ( ) ) ) ) { \n <ect>
\t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> unblock ( json <identifiersep> object source , json <identifiersep> object target , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception { \n \t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> retweeted <identifiersep> retweet ( json <identifiersep> object source , json <identifiersep> object target , json <identifiersep> object target <identifiersep> object , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception { \n <ect>
\t4 if ( bang ) { \n \t5 log . error ( <string_literal> ) ; <comment> \n \t5 return ; } \n \t3 } catch ( exception e ) { \n <ect>
\t3 mark <identifiersep> timestamp ( target <identifiersep> state ) ; \n \t3 if ( error == null ) { \n \t4 log . info ( <string_literal> , get <identifiersep> vertex ( ) . get <identifiersep> task <identifiersep> name <identifiersep> with <identifiersep> subtask <identifiersep> index ( ) , get <identifiersep> attempt <identifiersep> id ( ) , current <identifiersep> state , target <identifiersep> state ) ; \n \t3 } else { \n <ect>
\t3 public void on <identifiersep> pending <identifiersep> failure ( throwable cause ) { \n \t4 transaction <identifiersep> id = null ; \n \t4 post <identifiersep> commit ( ) ; } \n \t2 } ) ; \n <ect>
\t4 parse (  <identifiersep> doc <identifiersep> response . get <identifiersep> document <identifiersep> element ( ) ) ; } \n \t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + e . to <identifiersep> string ( ) ) ; \n \t2 } catch ( sax <identifiersep> exception e ) { \n <ect>
\t2 return handler <identifiersep> state ; } \n \t1 private void handle <identifiersep> send <identifiersep> index <identifiersep> file ( ) throws io <identifiersep> exception { \n \t2 if ( 0 == chunked <identifiersep> file <identifiersep> writer . stream <identifiersep> file ( ) ) { \n \t3 <comment> \n <ect>
\t5 public void process ( exchange exchange ) throws exception { \n \t6 hits hits = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( hits . class ) ; \n \t6 print <identifiersep> results ( hits ) ; } \n \t5 private void print <identifiersep> results ( hits hits ) { \n <ect>
\t4 final uri <identifiersep> builder builder = new uri <identifiersep> builder ( this . endpoint <identifiersep> url ) ; \n \t4 builder . add <identifiersep> parameter ( <string_literal> , principal ) ; \n \t4 final url url = builder . build ( ) . to <identifiersep> url ( ) ; \n \t4 final http <identifiersep> message message = client . send <identifiersep> message <identifiersep> to <identifiersep> end <identifiersep> point ( url ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 <comment> \n \t2 high <identifiersep> availability <identifiersep> services . grant <identifiersep> leadership ( job <identifiersep> id , 0 , new <identifiersep> leader <identifiersep> session <identifiersep> id ) ; \n \t2 await . ready ( job <identifiersep> removal , timeout ) ; \n <ect>
\t2 final ws <identifiersep> federation <identifiersep> registered <identifiersep> service service = find <identifiersep> and <identifiersep> validate <identifiersep> federation <identifiersep> request <identifiersep> for <identifiersep> registered <identifiersep> service ( response , request , fed <identifiersep> request ) ; \n \t2 logger . debug ( <string_literal> , service ) ; \n \t2 final string ticket = common <identifiersep> utils . safe <identifiersep> get <identifiersep> parameter ( request , cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> ticket ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( ticket ) ) { \n <ect>
\t3 <comment> \n \t3 err <identifiersep> cnt = 0 ; \n \t2 } catch ( exception e ) { \n \t3 err <identifiersep> cnt ++ ; \n <ect>
\t2 set < string > keys = get <identifiersep> partition <identifiersep> columns ( location , job ) ; \n \t2 if ( ! ( keys == null || keys . size ( ) == 0 ) ) { \n \t2 <comment> \n \t2 resource <identifiersep> field <identifiersep> schema [ ] fields = pig <identifiersep> schema . get <identifiersep> fields ( ) ; \n <ect>
\t4 val diagnostic <identifiersep> with <identifiersep> parameters = errors . constant <identifiersep> expected <identifiersep> type <identifiersep> mismatch . cast ( diagnostic ) \n \t4 expected <identifiersep> type = diagnostic <identifiersep> with <identifiersep> parameters . b \n \t4 expression <identifiersep> type = context . get <identifiersep> type ( diagnostic <identifiersep> element ) \n \t4 if ( expression <identifiersep> type == null ) { \n <ect>
\t3 } else if ( input <identifiersep> line . starts <identifiersep> with ( <string_literal> ) ) { \n \t4 logger . debug ( <string_literal> + input <identifiersep> line ) ; \n \t4 return voice <identifiersep> example <identifiersep> text ( input <identifiersep> line ) ; \n \t3 } else if ( input <identifiersep> line . starts <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t5 violated <identifiersep> sessions . put ( session <identifiersep> state , current <identifiersep> trigger ) ; \n \t5 log . info ( <string_literal> , query <identifiersep> id ) ; \n \t4 } else { \n \t5 <comment> \n <ect>
\t3 list < data <identifiersep> center <identifiersep> vo > dcs =  <identifiersep> dc <identifiersep> dao . list <identifiersep> all <identifiersep> including <identifiersep> removed ( ) ; \n \t3 for ( data <identifiersep> center <identifiersep> vo dc : dcs ) { \n \t4 usage <identifiersep> event <identifiersep> vo usage <identifiersep> event = new usage <identifiersep> event <identifiersep> vo ( event <identifiersep> type , account . get <identifiersep> id ( ) , dc . get <identifiersep> id ( ) , template <identifiersep> id , null ) ; \n \t4  <identifiersep> usage <identifiersep> event <identifiersep> dao . persist ( usage <identifiersep> event ) ; } } \n <ect>
\t8 logger . debug ( <string_literal> , played <identifiersep> file . get <identifiersep> name ( ) ) ; \n \t8 new <identifiersep> file = new file ( new <identifiersep> directory + played <identifiersep> file . get <identifiersep> name ( ) ) ; \n \t8 moved = true ; \n \t7 } else { \n <ect>
\t6 logger . error ( this , <string_literal> + state + <string_literal> ) ; \n \t6 return ; } \n \t5 meta <identifiersep> insert <identifiersep> success = true ; \n \t4 } else if ( state == metadata <identifiersep> putter ) { \n <ect>
\t2 if ( previous <identifiersep> root == initial <identifiersep> root ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 trace <identifiersep> paths = true ; \n \t2 } else { \n <ect>
if len ( args ) == 0 : \n \t1 logger . error ( <string_literal> ) \n \t1 return - 1 \n config <identifiersep> name = args [ 0 ] \n <ect>
\t2 { \n \t3 return clz . new <identifiersep> instance ( ) ; } \n \t2 catch ( final throwable e ) \n \t2 { \n <ect>
\t4 <comment> \n \t4  <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , peer . get <identifiersep> packets <identifiersep> retransmitted ( ) , peer . get <identifiersep> packets <identifiersep> transmitted ( ) ) ; \n \t4  <identifiersep> context . stat <identifiersep> manager ( ) . add <identifiersep> rate <identifiersep> data ( <string_literal> , state . get <identifiersep> lifetime ( ) , peer . get <identifiersep> packets <identifiersep> transmitted ( ) ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 string type = iterator . next ( ) . to <identifiersep> string ( ) ; \n \t3 expected = expected <identifiersep> events . get ( type ) ; \n \t3 actual = actual <identifiersep> events . get ( type ) ; \n \t3 if ( actual == null ) { \n <ect>
\t1 while ( ! executor . is <identifiersep> terminating ( ) ) { \n \t2 try { \n \t2 file <identifiersep> system <identifiersep> manager vfs = accumulo <identifiersep> vfs <identifiersep> class <identifiersep> loader . generate <identifiersep> vfs ( ) ; \n \t2 file <identifiersep> object [ ] files = accumulo <identifiersep> vfs <identifiersep> class <identifiersep> loader . resolve ( vfs , uris ) ; \n <ect>
\t4 message <identifiersep> to <identifiersep> use = interceptor . before <identifiersep> handle ( message <identifiersep> to <identifiersep> use , executor <identifiersep> subscribable <identifiersep> channel . this , this . message <identifiersep> handler ) ; \n \t4 if ( message <identifiersep> to <identifiersep> use == null ) { \n \t5 string name = interceptor . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ; \n <ect>
\t2 this . job <identifiersep> manager = job <identifiersep> manager ; \n \t2 get <identifiersep> context ( ) . watch ( job <identifiersep> manager ) ; \n \t2 unregister <identifiersep> connection <identifiersep> timeout ( ) ; } \n \t1 protected void terminate ( ) { \n <ect>
\t3 log . error ( <string_literal> ) ; \n \t3 try { \n \t4 stop ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 free <identifiersep> lines . add ( line ) ; } } \n \t1 public void play <identifiersep> sound ( final mage <identifiersep> clip mage <identifiersep> clip ) { \n \t2 final source <identifiersep> data <identifiersep> line line ; \n \t2 synchronized ( line <identifiersep> pool . this ) { \n <ect>
\t7 log . debug ( <string_literal> ) ; \n \t7 log . debug ( <string_literal> , key ) ; \n \t7 log . debug ( <string_literal> , xml <identifiersep> fragment ) ; \n \t7 log . debug ( <string_literal> , data ) ; \n <ect>
<comment> \n \t1 static string get <identifiersep> short <identifiersep> path <identifiersep> name ( final string path ) { \n \t2 if ( ! jna <identifiersep> available ) { \n <ect>
\t3 broadcast <identifiersep> filter bf = null ; \n \t3 try { \n \t4 bf = config . framework ( ) . new <identifiersep> class <identifiersep> instance ( broadcast <identifiersep> filter . class , ( class < broadcast <identifiersep> filter > ) io <identifiersep> utils . load <identifiersep> class ( get <identifiersep> class ( ) , broadcast <identifiersep> filter ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 try { \n \t5 interceptor . after <identifiersep> message <identifiersep> handled ( message , abstract <identifiersep> executor <identifiersep> channel . this , \n \t7 this . delegate . get <identifiersep> message <identifiersep> handler ( ) , ex ) ; } \n \t4 catch ( throwable ex2 ) { <comment> \n <ect>
<comment> \n \t1 public static void run <identifiersep> client <identifiersep> inline ( string class <identifiersep> name , string client <identifiersep> name , string args [ ] , \n \t9 log log , class <identifiersep> loader cl ) throws exception { \n \t2 if ( log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 if ( save <identifiersep> after <identifiersep> run && ! project . is <identifiersep> remote ( ) ) { \n \t4 try { \n \t5 project . save ( ) ; \n \t4 } catch ( throwable t ) { \n <ect>
\t4 vdir . virtual <identifiersep> size = dskch . get <identifiersep> size ( ) ; \n \t4 vdi = vdi . create ( conn , vdir ) ; } \n \t3 vdi . record vdir ; \n \t3 vdir = vdi . get <identifiersep> record ( conn ) ; \n <ect>
\t1 in . close ( ) ; } \n \t1 p . wait <identifiersep> for ( ) ; \n \t1 int status = p . exit <identifiersep> value ( ) ; \n \t1 if ( logger != null ) { \n <ect>
\t1 static { \n \t2 if ( start <identifiersep> timestamp ) { \n \t3 log . info ( <string_literal> ) ; \n \t2 } else { \n <ect>
<comment> \n public void start <identifiersep> block ( long record <identifiersep> count ) throws io <identifiersep> exception { \n \t1 state = state . start <identifiersep> block ( ) ; \n <ect>
\t5 class clazz = ( class ) clazz <identifiersep> field . get ( class <identifiersep> info ) ; \n \t5 if ( clazz . get <identifiersep> class <identifiersep> loader ( ) == class <identifiersep> loader ) { \n \t6 remove <identifiersep> from <identifiersep> global <identifiersep> class <identifiersep> value . invoke ( global <identifiersep> class <identifiersep> value , clazz ) ; \n <ect>
\t1 if ( data <identifiersep> reader != null ) { \n \t2 data <identifiersep> reader . close ( ) ; \n \t2 data <identifiersep> reader = null ; } \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 logger . debug ( <string_literal> , action , curl <identifiersep> command ) \n \t1 process = popen ( curl <identifiersep> command . split ( ) , stdin = pipe , stdout = pipe , stderr = pipe ) \n except exception as e : \n \t1 print \n <ect>
\t1 try { \n \t1 if ( connection <identifiersep> available ( ) ) { \n \t2 write ( socket , metrics ) ; } \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 <comment> \n \t6 timeout <identifiersep> checker <identifiersep> executor <identifiersep> service . schedule <identifiersep> at <identifiersep> fixed <identifiersep> rate ( new completion <identifiersep> interval <identifiersep> task ( triggers ) , completion <identifiersep> interval , completion <identifiersep> interval , time <identifiersep> unit . milliseconds ) ; } \n \t5 if ( attempt > 1 ) { \n \t6 log . info ( <string_literal> , attempt ) ; } \n <ect>
\t3 log . info ( <string_literal> , this . events ) ; \n \t3 events = ignite . events ( ) ; \n \t2 } else { \n \t3 cluster <identifiersep> group group = cluster <identifiersep> group <identifiersep> expression . get <identifiersep> cluster <identifiersep> group ( ignite ) ; \n <ect>
\t6 host <identifiersep> internet <identifiersep> scsi <identifiersep> hba host <identifiersep> internet <identifiersep> scsi <identifiersep> hba = ( host <identifiersep> internet <identifiersep> scsi <identifiersep> hba ) hba ; \n \t6 if ( host <identifiersep> internet <identifiersep> scsi <identifiersep> hba . is <identifiersep> is <identifiersep> software <identifiersep> based ( ) ) { \n \t7 return ( ( host <identifiersep> internet <identifiersep> scsi <identifiersep> hba ) hba ) . get <identifiersep> i <identifiersep> scsi <identifiersep> name ( ) ; } } } } \n \t2 } catch ( exception ex ) { \n <ect>
\t2 action <identifiersep> class = class . for <identifiersep> name ( classname ) ; \n \t2 if ( action <identifiersep> class == null ) { \n \t2 log . warn ( string . format ( <string_literal> , classname ) ) ; } \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 return false ; } \n \t1 public cloudian <identifiersep> user list <identifiersep> user ( final string user <identifiersep> id , final string group <identifiersep> id ) { \n \t2 if ( strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( user <identifiersep> id ) || strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( group <identifiersep> id ) ) { \n \t3 return null ; } \n <ect>
public class application extends erx <identifiersep> application { \n \t1 public static void main ( string [ ] argv ) { \n \t2 erx <identifiersep> application . main ( argv , application . class ) ; } \n \t1 public application ( ) { \n <ect>
\t4 <comment> \n \t4 iso <identifiersep> vbd . insert ( conn , iso <identifiersep> vdi ) ; } \n \t3 return new attach <identifiersep> answer ( disk ) ; \n \t2 } catch ( final xen <identifiersep> api <identifiersep> exception e ) { \n <ect>
\t1 public static download get <identifiersep> file ( final client <identifiersep> options client <identifiersep> options , final string bucket <identifiersep> name , final string key , final file file ) { \n \t2 logger . debug ( format ( <string_literal> , key , file . get <identifiersep> absolute <identifiersep> path ( ) , bucket <identifiersep> name ) ) ; \n \t2 return get <identifiersep> transfer <identifiersep> manager ( client <identifiersep> options ) . download ( bucket <identifiersep> name , key , file ) ; } \n \t1 public static download get <identifiersep> file ( final client <identifiersep> options client <identifiersep> options , final get <identifiersep> object <identifiersep> request get <identifiersep> object <identifiersep> request , final file file ) { \n <ect>
\t3 drools <identifiersep> management <identifiersep> agent . get <identifiersep> instance ( ) . register <identifiersep> m <identifiersep> bean ( kbase , \n <number_literal> adapter , \n <number_literal> name ) ; \n \t2 } catch ( not <identifiersep> compliant <identifiersep> m <identifiersep> bean <identifiersep> exception e ) { \n <ect>
\t6 if ( search <identifiersep> response . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) > 0l ) { \n \t7 throw e ; } } \n \t5 logger . info ( <string_literal> , index ) ; \n \t5 map < string , string > aliases = get <identifiersep> aliases ( client , index ) ; \n <ect>
\t4 cctx . affinity ( ) . affinity <identifiersep> topology <identifiersep> version ( ) ) ) ; \n \t3 while ( ! is <identifiersep> cancelled ( ) ) { \n \t4 grid <identifiersep> discovery <identifiersep> event evt = evts . take ( ) ; \n <ect>
\t3  <identifiersep> use <identifiersep> s <identifiersep> sl <identifiersep> copy = true ; } \n \t2 <comment> \n \t2 string ssvm <identifiersep> url <identifiersep> domain =  <identifiersep> config <identifiersep> dao . get <identifiersep> value ( <string_literal> ) ; \n \t2 if (  <identifiersep> use <identifiersep> s <identifiersep> sl <identifiersep> copy && ( ssvm <identifiersep> url <identifiersep> domain == null || ssvm <identifiersep> url <identifiersep> domain . is <identifiersep> empty ( ) ) ) { \n <ect>
\t2 assert . assert <identifiersep> equals ( <string_literal> , 0 , query <identifiersep> with <identifiersep> timestamp ( null , null , before <identifiersep> time <identifiersep> stamp ) ) ; \n \t2 assert . assert <identifiersep> equals ( <string_literal> , 0 , query <identifiersep> with <identifiersep> timestamp ( null , null , after <identifiersep> time <identifiersep> stamp ) ) ; \n \t2 long specified <identifiersep> timestamp = table . get ( new get ( bytes . to <identifiersep> bytes ( <string_literal> ) ) ) . get <identifiersep> column <identifiersep> latest ( columnfamily , bytes . to <identifiersep> bytes ( <string_literal> ) ) . get <identifiersep> timestamp ( ) ; \n \t2 assert . assert <identifiersep> true ( <string_literal> , query <identifiersep> with <identifiersep> timestamp ( null , null , specified <identifiersep> timestamp ) > 0 ) ; \n <ect>
\t3 logger . minor ( this , <string_literal> + uri ) ; \n \t2 if ( this . uri == null ) \n \t3 this . uri = uri ; \n \t2 if ( uri . equals ( this . uri ) ) return ; \n <ect>
\t4 to <identifiersep> release <identifiersep> memory -= released ; \n \t4 free <identifiersep> memory += released ; \n \t4 if ( free <identifiersep> memory >= requested <identifiersep> free <identifiersep> memory ) { \n \t5 break ; } } \n <ect>
\t3 desc = cube <identifiersep> service . update <identifiersep> cube <identifiersep> and <identifiersep> desc ( cube , desc , project <identifiersep> name , true ) ; \n \t2 } catch ( access <identifiersep> denied <identifiersep> exception access <identifiersep> denied <identifiersep> exception ) { \n \t3 throw new forbidden <identifiersep> exception ( <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public static string get <identifiersep> sha384checksum ( final file file ) { \n \t2 try ( final input <identifiersep> stream is = file . get <identifiersep> input <identifiersep> stream ( ) ) { \n \t3 return digest <identifiersep> utils . sha384hex ( is ) ; \n \t2 } catch ( final io <identifiersep> exception ex ) { \n <ect>
\t1 { \n \t2 <comment> \n \t2 host <identifiersep> and <identifiersep> port address = get <identifiersep> running <identifiersep> agent <identifiersep> address ( config . get <identifiersep> rmi <identifiersep> registry <identifiersep> port ( ) , config . get <identifiersep> rmi <identifiersep> server <identifiersep> port ( ) ) ; \n \t2 if ( address != null ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 error <identifiersep> codes = null ; \n \t2 new <identifiersep> uri = null ; \n \t2 expected <identifiersep> size = - 1 ; \n \t2 if ( mode == fetch <identifiersep> exception <identifiersep> mode . internal <identifiersep> error ) \n <ect>
\t4 <comment> \n \t4 if ( wrapper != null ) { \n \t5 executor . execute ( new socket <identifiersep> processor ( wrapper , status ) ) ; } } \n \t2 } catch ( rejected <identifiersep> execution <identifiersep> exception x ) { \n <ect>
\t2 if ( io . verbose ) { \n \t3 io . out . println ( <string_literal> $file \\ <string_literal> ) <comment> \n \t2 def dir = file . parent <identifiersep> file \n \t2 if ( dir && ! dir . exists ( ) ) { \n <ect>
\t3 if ( act <identifiersep> sec . get <identifiersep> exists ( ) \n \t5 && ( act <identifiersep> sec . is <identifiersep> destination <identifiersep> stream <identifiersep> public ( ) || accessible <identifiersep> group <identifiersep> ids . contains ( act <identifiersep> sec \n \t7 . get <identifiersep> destination <identifiersep> entity <identifiersep> id ( ) ) ) ) \n \t3 { \n <ect>
\t3 sc . add <identifiersep> and ( <string_literal> , search <identifiersep> criteria . op . eq , vol <identifiersep> id ) ; \n \t3 sc . add <identifiersep> and ( <string_literal> , search <identifiersep> criteria . op . null ) ; \n \t3 list < usage <identifiersep> volume <identifiersep> vo > volumes <identifiersep> v <identifiersep> os =  <identifiersep> usage <identifiersep> volume <identifiersep> dao . search ( sc , null ) ; \n \t3 if ( volumes <identifiersep> v <identifiersep> os . size ( ) > 1 ) { \n <ect>
\t3 log . debug ( string . format ( <string_literal> , known <identifiersep> hosts <identifiersep> resource ) , io <identifiersep> exception ) ; \n \t2 } finally { \n \t3 io <identifiersep> helper . close ( known <identifiersep> hosts <identifiersep> input <identifiersep> stream ) ; } \n \t2 if ( fail <identifiersep> on <identifiersep> unknown <identifiersep> host ) { \n <ect>
\t4 new <identifiersep> value . set <identifiersep> value ( 1 ) ; \n \t3 } else if ( command . equals ( on <identifiersep> off <identifiersep> type . off ) || command . equals ( open <identifiersep> closed <identifiersep> type . closed ) ) { \n \t4 new <identifiersep> value . set <identifiersep> value ( 0 ) ; } \n \t2 } else { \n <ect>
\t5 if ( ! d <identifiersep> pattern . matcher ( filename ) . find ( ) ) { \n \t6 log . error ( <string_literal> + filename ) ; \n \t6 return false ; } \n \t5 if ( h <identifiersep> pattern . matcher ( filename ) . find ( ) ) { \n <ect>
\t2 if ( this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms != null && ! this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms . is <identifiersep> empty ( ) ) { \n \t3 config . set <identifiersep> whitelisted <identifiersep> algorithms ( this . override <identifiersep> white <identifiersep> listed <identifiersep> algorithms ) ; \n \t3 config . set <identifiersep> blacklist <identifiersep> merge ( true ) ; } \n \t2 logger . debug ( <string_literal> , config . get <identifiersep> blacklisted <identifiersep> algorithms ( ) ) ; \n <ect>
\t1 call <identifiersep> context = self . get <identifiersep> call <identifiersep> context ( services ) \n \t1 operation = self . get <identifiersep> user <identifiersep> operation <identifiersep> context ( services , default <identifiersep> stack <identifiersep> advisor . operation ) \n \t1 adding <identifiersep> yarn = self . is <identifiersep> service <identifiersep> being <identifiersep> added ( services , 'yarn' ) \n \t1 if operation : \n <ect>
\t2 logger . trace ( <string_literal> , item <identifiersep> name ) ; \n \t2 command state = null ; \n \t2 date <identifiersep> time time = null ; \n \t2 if ( cal <identifiersep> dav <identifiersep> loader == null ) { \n <ect>
\t3 active <identifiersep> mq <identifiersep> connection . start ( ) ; \n \t3 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t4 message <identifiersep> consumer . receive ( ) ; } \n \t3 message <identifiersep> consumer . close ( ) ; \n <ect>
\t6 action <identifiersep> schema action <identifiersep> schema ) \n { \n \t1  <identifiersep> logger . info ( <string_literal> + action <identifiersep> schema . get <identifiersep> name ( ) ) ; \n \t1  <identifiersep> logger . info ( <string_literal> + visit <identifiersep> context . get <identifiersep> resource <identifiersep> path ( ) ) ; \n <ect>
\t3 && tgt . get <identifiersep> throttled <identifiersep> timeout ( ) . get <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( ) > 0 ) { \n \t3 final throttled <identifiersep> use <identifiersep> and <identifiersep> timeout <identifiersep> expiration <identifiersep> policy p = new throttled <identifiersep> use <identifiersep> and <identifiersep> timeout <identifiersep> expiration <identifiersep> policy ( ) ; \n \t3 p . set <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( tgt . get <identifiersep> throttled <identifiersep> timeout ( ) . get <identifiersep> time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds ( ) ) ; \n \t3 p . set <identifiersep> time <identifiersep> in <identifiersep> between <identifiersep> uses <identifiersep> in <identifiersep> seconds ( tgt . get <identifiersep> throttled <identifiersep> timeout ( ) . get <identifiersep> time <identifiersep> in <identifiersep> between <identifiersep> uses <identifiersep> in <identifiersep> seconds ( ) ) ; \n <ect>
\t2 return false ; \n \t1 } else { \n \t2 try { \n \t2 time <identifiersep> unit . seconds . sleep ( <number_literal> ) ; <comment> \n <ect>
\t1 public boolean can <identifiersep> execute ( ) { \n \t2 return file . can <identifiersep> execute ( ) ; } \n \t1 @ override \n \t1 public void set <identifiersep> executable ( boolean executable ) { \n <ect>
\t3 file <identifiersep> dir = new file ( profile <identifiersep> dir , dir ) ; \n \t2 } else { \n \t3 url = constants . start <identifiersep> url + dir + <string_literal> + db <identifiersep> name ; } \n \t2 db <identifiersep> dir = file <identifiersep> dir . get <identifiersep> absolute <identifiersep> path ( ) ; \n <ect>
\t3 b . use ( this ) ; \n \t3 b . set <identifiersep> properties ( f ) ; \n \t3 list < builder > subs = b . get <identifiersep> sub <identifiersep> builders ( ) ; \n \t3 for ( builder bb : subs ) { \n <ect>
<comment> \n \t1 protected void rewrite <identifiersep> content ( cms <identifiersep> file file , collection < cms <identifiersep> relation > relations ) throws cms <identifiersep> exception { \n <ect>
\t4 lookup . set <identifiersep> default <identifiersep> resolver ( s <identifiersep> resolver ) ; \n \t4 return true ; } \n \t3 catch ( throwable t ) \n \t3 { \n <ect>
\t2 { \n \t3 logger . debug ( <string_literal> + nb <identifiersep> packets <identifiersep> decoded ) ; \n \t3 logger . debug ( <string_literal> + nb <identifiersep> fec <identifiersep> decoded ) ; \n <ect>
public void start ( bundle <identifiersep> context context ) throws exception { \n \t1 logger . debug ( <string_literal> ) ; } \n @ override \n public void stop ( bundle <identifiersep> context context ) throws exception { \n <ect>
\t4 return new pair < string , integer > ( host , port ) ; \n \t3 } catch ( unknown <identifiersep> host <identifiersep> exception uhe ) { \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + host ) ; } \n \t2 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
<comment> \n \t1 @ override \n \t1 protected date <identifiersep> time <identifiersep> type parse ( string cosem <identifiersep> value ) throws parse <identifiersep> exception { \n \t2 for ( cosem <identifiersep> date <identifiersep> format cosem <identifiersep> date <identifiersep> format : cosem <identifiersep> date <identifiersep> format . values ( ) ) { \n <ect>
\t4 ns <identifiersep> timestamp <identifiersep> formatter formatter = new ns <identifiersep> timestamp <identifiersep> formatter ( <string_literal> ) ; \n \t4 file renamed <identifiersep> file = new file ( path <identifiersep> for <identifiersep> site <identifiersep> config ( ) + <string_literal> + formatter . format ( new ns <identifiersep> timestamp ( ) ) ) ; \n \t4 sc . rename <identifiersep> to ( renamed <identifiersep> file ) ; } \n \t2 } catch ( ns <identifiersep> forward <identifiersep> exception ne ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void fetch ( ) throws sql <identifiersep> exception , io <identifiersep> exception { \n <ect>
\t3 kmf <identifiersep> password = this . parse <identifiersep> property <identifiersep> value ( this . get <identifiersep> key <identifiersep> password ( ) ) . to <identifiersep> char <identifiersep> array ( ) ; } \n \t2 key <identifiersep> store ks = this . get <identifiersep> key <identifiersep> store ( ) == null ? null : this . get <identifiersep> key <identifiersep> store ( ) . create <identifiersep> key <identifiersep> store ( ) ; \n \t2 kmf . init ( ks , kmf <identifiersep> password ) ; \n \t2 key <identifiersep> managers = kmf . get <identifiersep> key <identifiersep> managers ( ) ; \n <ect>
\t4 . add <identifiersep> script <identifiersep> field ( <string_literal> , scrip <identifiersep> field ) \n \t4 . add <identifiersep> sort ( <string_literal> , sort <identifiersep> order . desc ) \n \t4 . get ( ) ; \n \t2 if ( search <identifiersep> response . get <identifiersep> failed <identifiersep> shards ( ) > 0 ) { \n <ect>
\t3 obj = transition <identifiersep> part <identifiersep> to <identifiersep> state ( obj , object <identifiersep> state . deleting ) ; } \n \t2 } catch ( no <identifiersep> such <identifiersep> element <identifiersep> exception e ) { \n \t2 <comment> \n \t2 } catch ( exception e ) { \n <ect>
\t7 . get <identifiersep> constructor ( connection <identifiersep> factory . class ) ; \n \t5 check <identifiersep> admin = ctor . new <identifiersep> instance ( get <identifiersep> connection <identifiersep> factory ( ) ) ; \n \t5 set <identifiersep> amqp <identifiersep> admin ( check <identifiersep> admin ) ; } \n \t4 catch ( exception e ) { \n <ect>
\t3 final object state , \n \t3 final timeout request <identifiersep> timeout , \n \t3 final future <identifiersep> callback < async <identifiersep> connection <identifiersep> endpoint > callback ) { \n <ect>
\t2 <comment> \n \t2 topic <identifiersep> poller . set <identifiersep> running ( false ) ; \n \t2 try { \n \t3 if ( topic <identifiersep> poller . get <identifiersep> shutdown <identifiersep> latch ( ) . await ( <number_literal> , time <identifiersep> unit . seconds ) ) { \n <ect>
\t2 hl7in <identifiersep> error . set <identifiersep> error ( error ) ; \n \t2 if ( cause == null ) { \n \t3 hl7in <identifiersep> error . set <identifiersep> error <identifiersep> details ( <string_literal> ) ; \n \t2 } else { \n <ect>
\t3 get <identifiersep> cms ( ) . delete <identifiersep> historical <identifiersep> versions ( m <identifiersep> keep <identifiersep> versions , m <identifiersep> keep <identifiersep> deleted <identifiersep> versions , m <identifiersep> date <identifiersep> clear <identifiersep> deleted <identifiersep> older , get <identifiersep> report ( ) ) ; \n \t3 log . info ( <string_literal> ) ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n \t3 get <identifiersep> report ( ) . println ( e ) ; \n <ect>
\t1 double time <identifiersep> ms = ( system . nano <identifiersep> time ( ) - start <identifiersep> time ) / <number_literal> . 0 ; \n \t1 log . debug ( <string_literal> + len + <string_literal> + time <identifiersep> ms + <string_literal> ) ; \n \t1 return result ; \n \t1 } catch ( hive <identifiersep> exception ex ) { \n <ect>
\t4 http <identifiersep> headers . access <identifiersep> control <identifiersep> request <identifiersep> method , http <identifiersep> headers . access <identifiersep> control <identifiersep> request <identifiersep> headers ) ) ; \n \t2 string request <identifiersep> origin = request . get <identifiersep> headers ( ) . get <identifiersep> origin ( ) ; \n \t2 string allow <identifiersep> origin = check <identifiersep> origin ( config , request <identifiersep> origin ) ; \n \t2 if ( allow <identifiersep> origin == null ) { \n <ect>
\t2 string path = watched <identifiersep> property <identifiersep> path ( watched <identifiersep> event . get <identifiersep> path ( ) ) ; \n \t2 if ( path == null ) \n \t2 { \n \t2 <comment> \n <ect>
\t4 set <identifiersep> container <identifiersep> properties ( container ) ; \n \t4 container . after <identifiersep> properties <identifiersep> set ( ) ; \n \t4 this . reply <identifiersep> container = container ; \n \t4 if ( is <identifiersep> async ( ) && this . correlation <identifiersep> key == null ) { \n <ect>
\t2 <comment> \n \t2 if ( ! mapped . contains <identifiersep> key ( datacite <identifiersep> publisher ) \n \t3 && ! mapped . contains <identifiersep> key ( <string_literal> ) ) { \n \t3 string publisher = configuration <identifiersep> service . get <identifiersep> property <identifiersep> as <identifiersep> type ( cfg <identifiersep> publisher , <string_literal> ) ; \n <ect>
\t4 snapshot <identifiersep> table snap <identifiersep> saved = dst <identifiersep> snap <identifiersep> mgr . try <identifiersep> save <identifiersep> new <identifiersep> snapshot ( snap <identifiersep> src ) ; \n \t4 snap <identifiersep> src . set <identifiersep> last <identifiersep> modified ( ts ) ; \n \t4 if ( snap <identifiersep> saved == snap <identifiersep> src ) { \n \t5 <comment> \n <ect>
public string first <identifiersep> name ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key (  <identifiersep> employee . first <identifiersep> name <identifiersep> key ) ; } \n public void set <identifiersep> first <identifiersep> name ( string value ) { \n <ect>
\t1 i <identifiersep> conditional <identifiersep> execution ce = pentaho <identifiersep> system . get ( i <identifiersep> conditional <identifiersep> execution . class , null ) ; \n \t1 ce . set <identifiersep> script ( script ) ; \n \t1 return ce ; \n \t1 } catch ( exception ex ) { \n <ect>
\t1 @ override \n \t1 public string get <identifiersep> requested <identifiersep> uri ( ) { \n \t2 string uri = ( string ) get <identifiersep> thread <identifiersep> local <identifiersep> request ( ) . get <identifiersep> session ( ) . get <identifiersep> attribute ( <string_literal> ) ; \n \t2 if ( uri != null ) { \n <ect>
\t4 setup <identifiersep> cookie ( validation <identifiersep> cookie , session <identifiersep> cookie , secure <identifiersep> cookie , cookie <identifiersep> domain , response ) ; \n \t3 } else { \n \t4 if ( logger . is <identifiersep> error <identifiersep> enabled ( ) ) { \n \t5 logger . error ( <string_literal> ) ; \n <ect>
\t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> get ( <string_literal> , <string_literal> , <string_literal> ) . execute ( ) . action <identifiersep> get ( ) . is <identifiersep> exists ( ) , equal <identifiersep> to ( true ) ) ; } \n \t2 logger . info ( <string_literal> ) ; \n \t2 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) . set <identifiersep> refresh <identifiersep> policy ( refresh <identifiersep> policy . immediate ) . get ( ) ; \n <ect>
\t2 wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 return ( <number_literal> * msg <identifiersep> num ) == listener . messages . size ( ) ; } \n \t2 } ) ; \n <ect>
\t3 case space : \n \t4 process ( new space <identifiersep> reference ( source ) , destination ) ; \n \t4 break ; \n \t3 default : \n <ect>
\t3 if ( ! http <identifiersep> headers . is <identifiersep> keep <identifiersep> alive ( request ) ) { \n \t4 last <identifiersep> content <identifiersep> future . add <identifiersep> listener ( channel <identifiersep> future <identifiersep> listener . close ) ; } \n \t2 } catch ( exception e ) { \n \t3 raf . close ( ) ; \n <ect>
\t1 string validate <identifiersep> line = <string_literal> ; \n \t1 try { \n \t1 create <identifiersep> table <identifiersep> with <identifiersep> col <identifiersep> types ( types , insert <identifiersep> vals ) ; \n \t1 verify <identifiersep> import ( validate <identifiersep> line , null ) ; \n <ect>
\t5 listener . on <identifiersep> response ( null ) ; \n \t4 } catch ( cancellable <identifiersep> threads . execution <identifiersep> cancelled <identifiersep> exception ex ) { \n \t5 listener . on <identifiersep> failure ( ex ) ; <comment> \n \t4 } catch ( exception ex ) { \n <ect>
\t4 list < ? extends virtual <identifiersep> router > internal <identifiersep> lb <identifiersep> vms ; \n \t4 try { \n \t5 internal <identifiersep> lb <identifiersep> vms =  <identifiersep> internal <identifiersep> lb <identifiersep> mgr . deploy <identifiersep> internal <identifiersep> lb <identifiersep> vm ( network , source <identifiersep> ip , dest ,  <identifiersep> account <identifiersep> mgr . get <identifiersep> account ( network . get <identifiersep> account <identifiersep> id ( ) ) , null ) ; \n \t4 } catch ( insufficient <identifiersep> capacity <identifiersep> exception e ) { \n <ect>
\t1 if ( ! fs . exists ( p ) ) { \n \t2 <comment> \n \t2 set < string > current <identifiersep> set = get <identifiersep> references <identifiersep> to <identifiersep> files <identifiersep> to <identifiersep> be <identifiersep> replicated ( conn ) ; \n \t2 log . info ( <string_literal> , current <identifiersep> set ) ; \n <ect>
\t1 private synchronized void join <identifiersep> ring ( boolean resumed <identifiersep> bootstrap ) throws io <identifiersep> exception \n \t1 { \n \t2 if ( ! joined ) \n \t2 { \n <ect>
\t2 <comment> \n \t2 bootstrap . set <identifiersep> pipeline <identifiersep> factory ( new pipeline <identifiersep> factory ( ) ) ; \n \t2 <comment> \n \t2 channel = bootstrap . bind ( new inet <identifiersep> socket <identifiersep> address ( hostname ( ) ,  <identifiersep> port ) ) ; \n <ect>
\t2 try { \n \t3 return recursive <identifiersep> unmarhsal ( o ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t5  <identifiersep> log . debug ( prefix ( ) + <string_literal> + diff + <string_literal> ) ; } \n \t4  <identifiersep> con . set <identifiersep> remote <identifiersep> peer (  <identifiersep> alice <identifiersep> ident ) ; \n \t4 send <identifiersep> inbound <identifiersep> confirm (  <identifiersep> alice <identifiersep> ident , ts <identifiersep> a ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 protected list < string > resolve <identifiersep> event <identifiersep> from <identifiersep> http <identifiersep> request ( final http <identifiersep> servlet <identifiersep> request request ) { \n \t2 final http <identifiersep> session session = request . get <identifiersep> session ( ) ; \n \t2 object attribute <identifiersep> value = session != null ? session . get <identifiersep> attribute ( attribute <identifiersep> name ) : null ; \n \t2 if ( attribute <identifiersep> value == null ) { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> cmdline <identifiersep> param <identifiersep> priorto <identifiersep> declare ( ) throws exception { \n <ect>
\t3 } else if ( initializing . contains ( a <identifiersep> id ) ) { \n \t4 type = <string_literal> ; \n \t3 } else { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( a <identifiersep> id + <string_literal> ) ; } \n <ect>
\t3  <identifiersep> out <identifiersep> tunnel =  <identifiersep> cfg ; \n \t3  <identifiersep> other <identifiersep> tunnel = ( pooled <identifiersep> tunnel <identifiersep> creator <identifiersep> config )  <identifiersep> reply <identifiersep> tunnel ; } \n \t2 if ( (  <identifiersep> reply <identifiersep> tunnel == null ) || (  <identifiersep> out <identifiersep> tunnel == null ) ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 string user <identifiersep> home <identifiersep> from <identifiersep> env = system . getenv ( <string_literal> ) ; \n \t2 string user <identifiersep> home <identifiersep> from <identifiersep> property = system . get <identifiersep> property ( <string_literal> ) ; \n \t2 if ( ! string <identifiersep> utils . equals ( user <identifiersep> home <identifiersep> from <identifiersep> env , user <identifiersep> home <identifiersep> from <identifiersep> property ) ) { \n \t3 core <identifiersep> logger . logger . warn ( <string_literal> ) ; \n <ect>
\t4 fail ( <string_literal> + exceptions <identifiersep> helper . detailed <identifiersep> message ( e ) ) ; } \n \t2 } ) ; \n \t2 latch . await ( ) ; \n \t2 wait <identifiersep> no <identifiersep> pending <identifiersep> tasks <identifiersep> on <identifiersep> all ( ) ; \n <ect>
\t3 synchronized (  <identifiersep> counter <identifiersep> lock ) { \n \t4 if (  <identifiersep> recv <identifiersep> counter == n <identifiersep> tests * <number_literal> &&  <identifiersep> close <identifiersep> counter == n <identifiersep> tests ) { \n \t5 break ; } } \n \t3 try { thread . sleep ( <number_literal> ) ; } catch ( interrupted <identifiersep> exception ie ) { } \n <ect>
\t2 || ( options . get <identifiersep> hive <identifiersep> partition <identifiersep> value ( ) != null && h <identifiersep> cat <identifiersep> table == null ) \n \t2 || ( options . get <identifiersep> map <identifiersep> column <identifiersep> hive ( ) . size ( ) > 0 && h <identifiersep> cat <identifiersep> table == null ) ) ) { \n \t1 log . warn ( <string_literal> \\ t -- hive - home <string_literal> <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t3 for ( schema schema : regex <identifiersep> schemas ) \n \t3 { \n \t4 if ( schema . get <identifiersep> path <identifiersep> regex ( ) . matcher ( path ) . matches ( ) ) \n \t4 { \n <ect>
\t2 init <identifiersep> project ( project ) ; \n \t2 ensure <identifiersep> output <identifiersep> folder ( project ) ; \n \t2 if ( this . print <identifiersep> alert <identifiersep> site <identifiersep> report ) { \n \t3 test <identifiersep> case <identifiersep> run <identifiersep> log <identifiersep> report = new test <identifiersep> case <identifiersep> run <identifiersep> log <identifiersep> report ( get <identifiersep> absolute <identifiersep> output <identifiersep> folder ( project ) ) ; } \n <ect>
\t2 output = ssh . execute ( <string_literal> virtio scsi \\ <string_literal> ) \n \t2 self . assert <identifiersep> true ( len ( output ) > 0 , <string_literal> ) \n \t2 output = ssh . execute ( <string_literal> ) \n \t2 for disk in output : \n <ect>
\t9 <comment> \n \t9 if ( log <identifiersep> debug ) logger . debug ( this , <string_literal> + ssk <identifiersep> insert <identifiersep> sender . this ) ; } \n \t8 @ override \n \t8 public void acknowledged ( ) { \n <ect>
class inject <identifiersep> time <identifiersep> logging <identifiersep> aspect { \n \t1 @ before ( <string_literal> ) \n \t1 fun inject <identifiersep> date <identifiersep> for <identifiersep> save <identifiersep> method ( join <identifiersep> point : join <identifiersep> point , bean : any , username : string ) { \n \t2 try { \n <ect>
\t1 public static gui <identifiersep> log <identifiersep> event <identifiersep> appender create <identifiersep> appender ( @ plugin <identifiersep> attribute ( <string_literal> ) string name , \n \t3 @ plugin <identifiersep> attribute ( <string_literal> ) boolean ignore <identifiersep> exceptions , \n \t3 @ plugin <identifiersep> element ( <string_literal> ) layout < ? extends serializable > layout , @ plugin <identifiersep> element ( <string_literal> ) filter filter ) { \n \t2 if ( name == null ) { \n <ect>
<comment> \n \t1 public void init ( services services ) throws service <identifiersep> exception { \n \t2 instrumentation = new instrumentation ( ) ; \n <ect>
\t3 time <identifiersep> unit . milliseconds , false ) ) . writer <identifiersep> with <identifiersep> default <identifiersep> pretty <identifiersep> printer ( ) ; \n \t1 interval = conf . get <identifiersep> time <identifiersep> var ( hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> metrics <identifiersep> json <identifiersep> file <identifiersep> interval , time <identifiersep> unit . milliseconds ) ; \n \t1 string path <identifiersep> string = conf . get <identifiersep> var ( hive <identifiersep> conf . conf <identifiersep> vars . hive <identifiersep> metrics <identifiersep> json <identifiersep> file <identifiersep> location ) ; \n \t1 path = paths . get ( path <identifiersep> string ) . to <identifiersep> absolute <identifiersep> path ( ) ; \n <ect>
\t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; \n \t2 } finally { \n \t3 if ( this . signing <identifiersep> key == null ) { \n \t4 this . signing <identifiersep> key = new aes <identifiersep> key ( signing <identifiersep> secret <identifiersep> key . get <identifiersep> bytes ( standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ) ; \n <ect>
\t4 keeper <identifiersep> exception . connection <identifiersep> loss <identifiersep> exception connection <identifiersep> loss <identifiersep> exception = new curator <identifiersep> connection <identifiersep> loss <identifiersep> exception ( ) ; \n \t4 if ( ! boolean . get <identifiersep> boolean ( debug <identifiersep> utils . property <identifiersep> dont <identifiersep> log <identifiersep> connection <identifiersep> issues ) ) \n \t4 { \n \t5 long elapsed = system . current <identifiersep> time <identifiersep> millis ( ) - connection <identifiersep> start <identifiersep> ms ; \n <ect>
\t7 cnt ++ ; } \n \t5 } catch ( throwable e ) { \n \t6 soap <identifiersep> ui . log <identifiersep> error ( e ) ; } } } \n \t3 if ( cnt == 0 ) { \n <ect>
\t3 + data <identifiersep> driven <identifiersep> db <identifiersep> input <identifiersep> format . substitute <identifiersep> token + <string_literal> \n \t3 + input <identifiersep> query + <string_literal> ) ; } \n \t1 query . append ( input <identifiersep> query . replace ( data <identifiersep> driven <identifiersep> db <identifiersep> input <identifiersep> format . substitute <identifiersep> token , \n \t2 condition <identifiersep> clauses . to <identifiersep> string ( ) ) ) ; } \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t6 next <identifiersep> step = current <identifiersep> step ; \n \t6 next <identifiersep> action <identifiersep> config = current <identifiersep> action <identifiersep> config ; \n \t6 return null ; } } \n \t3 } catch ( exception e ) { \n <ect>
<comment> \n \t1 public long count ( ) { \n \t2 final scan <identifiersep> request scan = new scan <identifiersep> request ( dynamo <identifiersep> db <identifiersep> properties . get <identifiersep> table <identifiersep> name ( ) ) ; \n <ect>
\t9 . get <identifiersep> all <identifiersep> chats ( ) ) \n \t5 chat <identifiersep> created ( chat ) ; } \n \t2 } ) ; \n <ect>
\t2 if ( object <identifiersep> storage <identifiersep> properties . form <identifiersep> field . is <identifiersep> http <identifiersep> field ( form <identifiersep> key ) ) { \n \t3 <comment> \n \t3 <comment> \n \t3 continue ; } \n <ect>
\t2 case generate <identifiersep> preview : { \n \t3 try { \n \t4 c = show <identifiersep> preview ( request ) ; \n \t3 } catch ( command <identifiersep> exception e ) { \n <ect>
\t1 wrtitetoalternatesqlfile ( dirname , revsql , instance , i ) ; } \n public void update <identifiersep> sequenceno ( connection c , int seq <identifiersep> no , int id , query <identifiersep> set <identifiersep> ambari <identifiersep> db ambaridatabase ) throws sql <identifiersep> exception , io <identifiersep> exception { \n \t1 prepared <identifiersep> statement pr <identifiersep> st ; \n \t1 pr <identifiersep> st = ambaridatabase . update <identifiersep> sequence <identifiersep> no <identifiersep> in <identifiersep> ambari <identifiersep> sequence ( c , seq <identifiersep> no , id ) ; \n <ect>
\t8 new date <identifiersep> time ( ) . minus ( rotation <identifiersep> period ) . minus ( rotation <identifiersep> period ) . get <identifiersep> millis ( ) ; \n \t6 if ( file . get <identifiersep> modification <identifiersep> time ( ) < last <identifiersep> period ) { \n \t7 ++ error <identifiersep> closed <identifiersep> files ; \n \t7 dynamic <identifiersep> counter . increment ( <string_literal> ) ; \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 if ( compile <identifiersep> status == 0 <comment> ) { \n \t3 return false ; } \n <ect>
\t1 def  <identifiersep>  <identifiersep> receiver <identifiersep> loop ( self ) : \n \t2 <string_literal> <string_literal> <string_literal> \n <ect>
\t4 <comment> \n \t4 string filebase = get <identifiersep> value ( arg <identifiersep> base ) ; \n \t4 if ( ! file <identifiersep> ops . exists ( filebase ) ) { \n \t5 throw new cmd <identifiersep> exception ( <string_literal> + filebase ) ; \n <ect>
\t1 log . debug ( <string_literal> + message . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> + hive <identifiersep> message . get <identifiersep> id ( ) + \n \t2 <string_literal> + sender ( ) + <string_literal> + self ( ) ) ; } \n \t1 handle <identifiersep> message ( hive <identifiersep> message ) ; \n <ect>
\t2 byte [ ] bytes = new byte [ 0 ] ; \n \t2 try { \n \t3 bytes = buffer . get <identifiersep> bytes ( <string_literal> ) ; \n \t2 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n <ect>
\t1 sb . append ( volume <identifiersep> connection <identifiersep> string ) ; \n \t1 return sb . to <identifiersep> string ( ) ; } \n public void unexport <identifiersep> volume <identifiersep> from <identifiersep> all ( string volume <identifiersep> id ) throws eucalyptus <identifiersep> cloud <identifiersep> exception { \n \t1 string san <identifiersep> volume <identifiersep> id = lookup ( volume <identifiersep> id ) . get <identifiersep> san <identifiersep> volume <identifiersep> id ( ) ; \n <ect>
\t4 } ; \n \t4 algorithm <identifiersep> config . get <identifiersep> xml <identifiersep> configuration ( ) . set <identifiersep> entity <identifiersep> resolver ( resolver ) ; \n \t4 algorithm <identifiersep> config . get <identifiersep> xml <identifiersep> configuration ( ) . set <identifiersep> schema <identifiersep> validation ( true ) ; \n \t3 } else { \n <ect>
\t1 driver <identifiersep> thread . join ( default <identifiersep> shutdown <identifiersep> timeout ) ; \n \t1 } catch ( interrupted <identifiersep> exception ie ) { \n \t1 log . debug ( <string_literal> ) ; } \n \t1 if ( end <identifiersep> time - system . current <identifiersep> time <identifiersep> millis ( ) < = 0 ) { \n <ect>
\t1 if ( ! ctx . is <identifiersep> cbo <identifiersep> succeeded ( ) ) { \n \t1 log . info ( <string_literal> ) ; \n \t1 return false ; } \n \t1 if ( ! is <identifiersep> valid <identifiersep> query <identifiersep> materialization ( ) ) { \n <ect>
\t6 link = new compact <identifiersep> sub <identifiersep> class <identifiersep> link ( id1 ) ; \n \t6 add <identifiersep> link ( source , target , link ) ; \n \t6 source <identifiersep> connected <identifiersep> to <identifiersep> target = true ; } \n \t5 if ( ! target <identifiersep> connected <identifiersep> to <identifiersep> source && this . ontology <identifiersep> manager . is <identifiersep> sub <identifiersep> class ( target <identifiersep> uri , source <identifiersep> uri , false ) ) { \n <ect>
\t1 log . warn ( <string_literal> \n \t2 + <string_literal> , filename , task <identifiersep> id ) ; \n \t1 } else { \n \t1 task <identifiersep> id = m . group ( 1 ) ; } \n <ect>
\t4 logger . debug ( <string_literal> , ehcache . get <identifiersep> name ( ) , t ) ; \n \t4 final cache <identifiersep> configuration config = ehcache . get <identifiersep> cache <identifiersep> configuration ( ) ; \n \t4 logger . debug ( <string_literal> , config . get <identifiersep> max <identifiersep> entries <identifiersep> local <identifiersep> heap ( ) ) ; \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t4 if ( ! statement . is <identifiersep> closed ( ) ) { \n \t5 statement . close ( ) ; } \n \t3 } catch ( sql <identifiersep> exception e ) { \n \t4 <comment> \n <ect>
\t4 int delay = visibility <identifiersep> timeout . int <identifiersep> value ( ) / <number_literal> ; \n \t4 int period = visibility <identifiersep> timeout . int <identifiersep> value ( ) ; \n \t4 int repeat <identifiersep> seconds = double . value <identifiersep> of ( visibility <identifiersep> timeout . double <identifiersep> value ( ) * 1 . <number_literal> ) . int <identifiersep> value ( ) ; \n <ect>
\t2 assert <identifiersep> acked ( prepare <identifiersep> create ( <string_literal> ) . add <identifiersep> mapping ( <string_literal> , <string_literal> , <string_literal> ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> acked ( prepare <identifiersep> create ( <string_literal> ) . add <identifiersep> mapping ( <string_literal> , <string_literal> , <string_literal> ) ) ; \n \t2 ensure <identifiersep> green ( ) ; \n <ect>
\t5 <comment> \n \t5 try { \n \t6 in . close ( ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t8 s <identifiersep> logger . info ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; } } } } \n \t4 else if ( ( api . get <identifiersep> response <identifiersep> type ( ) != response <identifiersep> type . error ) && ( api . get <identifiersep> response <identifiersep> code ( ) != <number_literal> ) ) { \n \t5 s <identifiersep> logger . error ( <string_literal> + api . get <identifiersep> name ( ) + <string_literal> + api . get <identifiersep> response <identifiersep> code ( ) + <string_literal> + api . get <identifiersep> url ( ) ) ; \n \t5 if ( api . get <identifiersep> required ( ) == true ) { \n <ect>
\t7 logger . debug ( <string_literal> , item . get <identifiersep> property ( feed <identifiersep> item . name ) , item . get <identifiersep> property ( date <identifiersep> key ) ) ; } } \n \t5 this <identifiersep> feed . set <identifiersep> property ( structr <identifiersep> app . key ( data <identifiersep> feed . class , <string_literal> ) , \t1 new <identifiersep> items ) ; \n \t5 this <identifiersep> feed . set <identifiersep> property ( structr <identifiersep> app . key ( data <identifiersep> feed . class , <string_literal> ) , new date ( ) ) ; } \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception | io <identifiersep> exception | feed <identifiersep> exception | framework <identifiersep> exception ex ) { \n <ect>
\t2 string file <identifiersep> name = clustername + <string_literal> + address <identifiersep> to <identifiersep> filename ( addr ) ; \n \t2 try { \n \t3 swift <identifiersep> client . delete <identifiersep> object ( container , file <identifiersep> name ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 int user <identifiersep> count = snapshot . get <identifiersep> user <identifiersep> ids ( ) . size ( ) ; \n \t2 real <identifiersep> matrix user <identifiersep> features = matrix <identifiersep> utils . create <identifiersep> real <identifiersep> matrix ( user <identifiersep> count , feature <identifiersep> count ) ; \n \t2 int item <identifiersep> count = snapshot . get <identifiersep> item <identifiersep> ids ( ) . size ( ) ; \n \t2 real <identifiersep> matrix item <identifiersep> features = matrix <identifiersep> utils . create <identifiersep> real <identifiersep> matrix ( item <identifiersep> count , feature <identifiersep> count ) ; \n <ect>
\t3 case message <identifiersep> status <identifiersep> message . status <identifiersep> send <identifiersep> failure <identifiersep> expired : \n \t3 <comment> \n \t3 case message <identifiersep> status <identifiersep> message . status <identifiersep> send <identifiersep> failure <identifiersep> local : \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t7 log . info ( <string_literal> ) ; \n \t6 } else { \n \t7 if ( delay <identifiersep> before <identifiersep> acknowledgement > 0 ) { \n \t8 unchecked <identifiersep> sleep ( delay <identifiersep> before <identifiersep> acknowledgement ) ; } \n <ect>
\t1 float fraction <identifiersep> of <identifiersep> eigens <identifiersep> expected <identifiersep> good = 0 . 6f ; \n \t1 for ( int i = 0 ; i < fraction <identifiersep> of <identifiersep> eigens <identifiersep> expected <identifiersep> good * desired <identifiersep> rank ; i ++ ) { \n \t1 double s = state . get <identifiersep> singular <identifiersep> value ( i ) ; \n \t1 double e = eigenvalues . get ( i ) ; \n <ect>
<comment> \n \t1 public static eo <identifiersep> enterprise <identifiersep> object enterprise <identifiersep> object <identifiersep> for <identifiersep> entity <identifiersep> named <identifiersep> from <identifiersep> form <identifiersep> values ( eo <identifiersep> editing <identifiersep> context ec , string entity <identifiersep> name , ns <identifiersep> dictionary form <identifiersep> values ) { \n \t2 ns <identifiersep> array entity <identifiersep> group = enterprise <identifiersep> objects <identifiersep> for <identifiersep> entity <identifiersep> named <identifiersep> from <identifiersep> form <identifiersep> values ( ec , entity <identifiersep> name , form <identifiersep> values ) ; \n \t2 if ( entity <identifiersep> group . count ( ) > 1 ) \n <ect>
\t2 log . info ( <string_literal> , generate <identifiersep> deprecated ( ) ) ; \n \t2 log . info ( <string_literal> , generate <identifiersep> global <identifiersep> object <identifiersep> references ( ) ) ; \n \t2 log . info ( <string_literal> , generate <identifiersep> global <identifiersep> catalog <identifiersep> references ( ) ) ; \n \t2 log . info ( <string_literal> , generate <identifiersep> global <identifiersep> key <identifiersep> references ( ) ) ; \n <ect>
\t3 ids . add ( id ) ; \n \t3 docs [ i ] = client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , id ) . set <identifiersep> source ( <string_literal> , english . int <identifiersep> to <identifiersep> english ( num <identifiersep> docs + i ) ) ; } \n \t2 index <identifiersep> random ( true , docs ) ; \n \t2 num <identifiersep> docs *= <number_literal> ; \n <ect>
\t1 protected i <identifiersep> request <identifiersep> handler map <identifiersep> unexpected <identifiersep> exceptions ( exception e , final application application ) \n \t1 { \n \t2 final exception <identifiersep> settings . unexpected <identifiersep> exception <identifiersep> display unexpected <identifiersep> exception <identifiersep> display = application . get <identifiersep> exception <identifiersep> settings ( ) \n \t3 . get <identifiersep> unexpected <identifiersep> exception <identifiersep> display ( ) ; \n <ect>
\t3 last <identifiersep> mod = file . last <identifiersep> modified ( ) ; } } \n \t1 private synchronized void write ( ) { \n \t2 if ( changed . compare <identifiersep> and <identifiersep> set ( true , false ) ) { \n \t3 try { \n <ect>
\t3 attempt <identifiersep> item <identifiersep> advance <identifiersep> final ( role . step3 ) ; \n \t3 context <identifiersep> reload ( ) ; \n \t2 } catch ( exception e ) { \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n <ect>
\t2 boolean auto <identifiersep> create = configuration <identifiersep> service \n \t3 . get <identifiersep> boolean <identifiersep> property ( <string_literal> , true ) ; \n \t2 <comment> \n \t2 if ( mapping <identifiersep> string == null || mapping <identifiersep> string . length == 0 ) { \n <ect>
\t1 public void start ( ) \n \t2 throws illegal <identifiersep> state <identifiersep> exception \n \t1 { \n <ect>
\t2 assert <identifiersep> equals ( seq . length ( ) , <number_literal> ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> header <identifiersep> constructor2 ( ) throws exception { \n <ect>
\t5 loc <identifiersep> map . add <identifiersep> alt <identifiersep> prefix ( prefix , alt <identifiersep> prefix ) ; \n \t5 log . debug ( <string_literal> + prefix + <string_literal> + alt <identifiersep> prefix ) ; \n \t4 } catch ( jena <identifiersep> exception ex ) \n \t4 { \n <ect>
<comment> \n \t1 @ override \n \t1 public void on <identifiersep> exception ( jms <identifiersep> exception ex ) { \n <ect>
\t6 assert job <identifiersep> spring <identifiersep> bean == spring <identifiersep> bean ; \n \t6 log . info ( <string_literal> + log ) ; \n \t6 log . info ( <string_literal> + rsrc ) ; \n \t6 log . info ( <string_literal> + ses ) ; \n <ect>
\t3 log . info ( <string_literal> + expected <identifiersep> list . size ( ) + <string_literal> + visit <identifiersep> list . size ( ) + <string_literal> ) ; } \n \t2 for ( int i = 0 ; i < expected <identifiersep> list . size ( ) ; i ++ ) { \n \t3 if ( ! expected <identifiersep> list . get ( i ) . is <identifiersep> assignable <identifiersep> from ( visit <identifiersep> list . get ( i ) . get <identifiersep> class ( ) ) ) { \n \t4 status = false ; \n <ect>
\t1 optional < string > checksum = db <identifiersep> client . internal <identifiersep> properties <identifiersep> dao ( ) . select <identifiersep> by <identifiersep> key ( db <identifiersep> session , server <identifiersep> id <identifiersep> checksum ) ; \n \t1 if ( checksum . is <identifiersep> present ( ) ) { \n \t1 string expected <identifiersep> checksum = compute <identifiersep> checksum ( dto . get <identifiersep> value ( ) ) ; \n \t1 if ( ! expected <identifiersep> checksum . equals ( checksum . get ( ) ) ) { \n <ect>
\t2 <comment> \n \t2 path root <identifiersep> data <identifiersep> dump <identifiersep> dir = paths . partition <identifiersep> export <identifiersep> dir ( partition <identifiersep> name ) ; \n \t2 new file <identifiersep> operations ( from <identifiersep> path , root <identifiersep> data <identifiersep> dump <identifiersep> dir , dist <identifiersep> cp <identifiersep> do <identifiersep> as <identifiersep> user , hive <identifiersep> conf ) \n \t4 . export ( for <identifiersep> replication <identifiersep> spec ) ; \n <ect>
\t4 par = - 1 ; \n \t3 } else if ( par > 0 ) { \n \t4 if ( this . force <identifiersep> parallelism && par != this . default <identifiersep> parallelism ) { \n \t5 par = this . default <identifiersep> parallelism ; \n <ect>
\t4 else \n \t5 quartz <identifiersep> sheduler = std <identifiersep> scheduler <identifiersep> factory . get <identifiersep> default <identifiersep> scheduler ( ) ; \t1 \n \t3 } catch ( scheduler <identifiersep> exception e ) \n \t3 { \n <ect>
\t3 failure ( broker , request , response , obtain <identifiersep> lock , <string_literal> , project , <string_literal> , user2 , <string_literal> , integer . to <identifiersep> string ( cell ) , <string_literal> , <string_literal> ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 result = success ( broker , request , response , obtain <identifiersep> lock , <string_literal> , project , <string_literal> , user2 , <string_literal> , integer . to <identifiersep> string ( cell ) , <string_literal> , <string_literal> ) ; \n \t3 string lock2 = result . get <identifiersep> string ( <string_literal> ) ; \n <ect>
\t1 expected expected , \n \t1 diagnostic diagnostic , \n \t1 list < postcondition > postconditions ) { \n \t1 if ( this . mode . runs <identifiersep> oti ( ) ) { \n <ect>
\t3 return collections . empty <identifiersep> set ( ) ; } \n \t2 set < class < ? > > classes = new linked <identifiersep> hash <identifiersep> set < class < ? > > ( ) ; \n \t2 for ( string pkg : package <identifiersep> names ) { \n \t3 find ( filter , pkg , classes ) ; } \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t5 count ++ ; \n \t5 <comment> \n \t4 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n \t5 if ( log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 current = total <identifiersep> count <identifiersep> loaded <identifiersep> so <identifiersep> far ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 continue ; } \n \t2 record <identifiersep> found = true ; \n <ect>
\t3 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n \t1 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t1 level = level . to <identifiersep> level ( p ) ; \n \t1 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t4 browse <identifiersep> info . set <identifiersep> browse <identifiersep> container ( scope . get <identifiersep> browse <identifiersep> container ( ) ) ; } \n \t3 browse <identifiersep> info . set <identifiersep> results <identifiersep> per <identifiersep> page ( scope . get <identifiersep> results <identifiersep> per <identifiersep> page ( ) ) ; \n \t3 return browse <identifiersep> info ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 if ( context <identifiersep> size != null ) { \n \t3 try { \n \t4 browser <identifiersep> size = integer . parse <identifiersep> int ( context <identifiersep> size ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t2 break ; \n \t1 case node <identifiersep> data <identifiersep> changed : \n \t2 <comment> \n \t2 if ( null == path ) { \n <ect>
\t8 . get <identifiersep> transport ( ) ) . get <identifiersep> next ( ) ) . get <identifiersep> next ( ) ) \n \t6 . handle <identifiersep> transport <identifiersep> failure ( new io <identifiersep> exception ( <string_literal> ) ) ; } \n \t3 text <identifiersep> message result = ( text <identifiersep> message ) request <identifiersep> consumer . receive ( <number_literal> ) ; \n \t3 if ( result != null ) { \n <ect>
<comment> \n \t1 tar <identifiersep> reader sweep ( @ nonnull set < uuid > reclaim , @ nonnull set < uuid > reclaimed ) throws io <identifiersep> exception { \n \t2 string name = archive . get <identifiersep> name ( ) ; \n <ect>
\t2 <comment> \n \t2 calendar cache <identifiersep> expire = ( calendar ) now . clone ( ) ; \n \t2 cache <identifiersep> expire . add ( calendar . minute , <number_literal> ) ; \n \t2 if ( expires . after ( cache <identifiersep> expire ) ) \n <ect>
\t2 { \n \t3 @ override \n \t3 public void run ( ) \n \t3 { \n <ect>
\t4 if ( string <identifiersep> utils . is <identifiersep> blank ( oauth . get <identifiersep> client <identifiersep> name ( ) ) ) { \n \t5 client . set <identifiersep> name ( client . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) + count ) ; } \n \t4 configure <identifiersep> client ( client , oauth ) ; \n \t4 index . increment <identifiersep> and <identifiersep> get ( ) ; \n <ect>
\t2 boolean b = ejb <identifiersep> book . class . equals ( type ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 return b ; } \n \t1 public long get <identifiersep> size ( ejb <identifiersep> book t , class < ? > type , type generic <identifiersep> type , annotation [ ] annotations , media <identifiersep> type media <identifiersep> type ) { \n <ect>
import org . junit . runner . notification . run <identifiersep> listener ; \n public class test <identifiersep> listener extends run <identifiersep> listener { \n \t1 private final static logger logger = log <identifiersep> manager . get <identifiersep> logger ( <string_literal> ) ; \n \t1 public void test <identifiersep> run <identifiersep> started ( description description ) throws exception { \n <ect>
\t3 result . ouch3 = ( table <identifiersep> not <identifiersep> found <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> ouch3is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t3 logger . debug ( <string_literal> , service <identifiersep> name , session <identifiersep> id ) ; \n \t3 start <identifiersep> all <identifiersep> stopped <identifiersep> consumers ( ) ; \n \t2 } else { \n \t3 if ( ! leader . get <identifiersep> and <identifiersep> set ( is <identifiersep> leader ) && is <identifiersep> leader ) { \n <ect>
\t5 return command . exit ; \n \t4 } else { \n \t5 respond ( out , string . format ( <string_literal> , s ) ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 logger . set <identifiersep> level ( level . info ) ; \n \t2 logger barlogger = logger <identifiersep> factory . get <identifiersep> logger ( <string_literal> ) ; \n \t2 <comment> \n <ect>
\t4 assert false : <string_literal> ; } \n \t2 } catch ( final resource <identifiersep> unavailable <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( operation <identifiersep> timedout <identifiersep> exception e ) { \n <ect>
\t6 last <identifiersep> request <identifiersep> data . free ( ) ; \n \t5 try { \n \t6 last <identifiersep> request <identifiersep> data = bucket <identifiersep> tools . make <identifiersep> immutable <identifiersep> bucket ( context . temp <identifiersep> bucket <identifiersep> factory , data ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( lazy <identifiersep> bloom <identifiersep> filter . filter == null ) { \n \t4 log . debug ( <string_literal> , key <identifiersep> filter ) ; \n \t3 } else { \n <ect>
\t1 logger . debug ( <string_literal> , upload <identifiersep> command ) \n \t1 result = call ( upload <identifiersep> command . split ( ) ) \n \t1 except exception as e : \n \t1 print \n <ect>
\t2 synchronized ( this . lifecycle <identifiersep> monitor ) { \n \t3 if ( ! is <identifiersep> running ( ) ) { \n \t4 string server <identifiersep> name = get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ; \n <ect>
\t2 final memcached <identifiersep> client <identifiersep> if client <identifiersep> from <identifiersep> pool = get <identifiersep> client <identifiersep> from <identifiersep> pool ( ) ; \n \t2 try { \n \t3 client <identifiersep> from <identifiersep> pool . replace ( ticket . get <identifiersep> id ( ) , get <identifiersep> timeout ( ticket <identifiersep> to <identifiersep> update ) , ticket ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t5 address channel <identifiersep> address = exchange . get <identifiersep> in ( ) . get <identifiersep> header ( header <identifiersep> jgroups <identifiersep> channel <identifiersep> address , address . class ) ; \n \t5 log . debug ( <string_literal> , \n \t7 channel <identifiersep> address , coordinator <identifiersep> node <identifiersep> address ) ; \n \t5 return channel <identifiersep> address . equals ( coordinator <identifiersep> node <identifiersep> address ) ; } \n <ect>
\t3 log . info ( <string_literal> + grid ) ; \n \t3 log . info ( <string_literal> + node <identifiersep> id ) ; \n \t3 log . info ( <string_literal> + loc <identifiersep> host ) ; \n \t3 log . info ( <string_literal> + mbean <identifiersep> srv ) ; \n <ect>
\t4 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t4 while ( ! segments <identifiersep> by <identifiersep> uuid . is <identifiersep> empty ( ) ) { \n \t5 segments <identifiersep> by <identifiersep> uuid . wait ( <number_literal> ) ; \n \t5 if ( system . current <identifiersep> time <identifiersep> millis ( ) - start > time <identifiersep> unit . minutes . to <identifiersep> millis ( 1 ) ) { \n <ect>
\t2 if ( existing <identifiersep> groups == null || existing <identifiersep> groups . size ( ) < = 0 ) \n \t3 deleted = true ; \n \t2 else { \n \t3 eucalyptus <identifiersep> activity <identifiersep> tasks . get <identifiersep> instance ( ) . delete <identifiersep> system <identifiersep> security <identifiersep> group ( group . get <identifiersep> name ( ) , false ) ; \n <ect>
\t1 system . set <identifiersep> property ( <string_literal> , <string_literal> ) ; \n \t1 assert <identifiersep> that ( migration . generate <identifiersep> migration ( ) ) . is <identifiersep> equal <identifiersep> to ( <string_literal> ) ; \n \t1 system . clear <identifiersep> property ( <string_literal> ) ; \n \t1 assert <identifiersep> that ( migration . generate <identifiersep> migration ( ) ) . is <identifiersep> null ( ) ; <comment> \n <ect>
\t4 throw new sax <identifiersep> exception ( ex ) ; } } \n \t2 @ override \n \t2 public void error ( sax <identifiersep> parse <identifiersep> exception ex ) throws sax <identifiersep> exception { \n <ect>
\t2 class clazz = new groovy <identifiersep> class <identifiersep> loader ( ) . parse <identifiersep> class ( <string_literal> <string_literal> <ect>
\t4 } finally { \n \t5 try { \n \t6 server <identifiersep> socket . close ( ) ; \n \t5 } catch ( io <identifiersep> exception io <identifiersep> ex ) { \n <ect>
\t2 if ( fraction <identifiersep> numeric >= test <identifiersep> threshold ) { \n \t3 is <identifiersep> numeric = true ; \n \t3 logger . warn ( <string_literal> + fraction <identifiersep> numeric ) ; } \n \t2 else { \n <ect>
\t4 producer <identifiersep> cache = new empty <identifiersep> producer <identifiersep> cache ( this , camel <identifiersep> context ) ; \n \t4 log . debug ( <string_literal> , this ) ; \n \t3 } else if ( cache <identifiersep> size == 0 ) { \n \t4 producer <identifiersep> cache = new producer <identifiersep> cache ( this , camel <identifiersep> context ) ; \n <ect>
\t2 settings build = settings . builder ( ) . put ( <string_literal> , <string_literal> ) \n \t3 . put ( <string_literal> , <string_literal> ) . build ( ) ; \n \t2 client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> update <identifiersep> settings ( <string_literal> ) . set <identifiersep> settings ( build ) . execute ( ) . action <identifiersep> get ( ) ; \n \t2 <comment> \n <ect>
\t4 long last <identifiersep> time = ( between <identifiersep> time % ( repeat <identifiersep> interval * <number_literal> ) ) ; \n \t4 <comment> \n \t4 long additional = ( ( repeat <identifiersep> interval * <number_literal> ) - last <identifiersep> time ) ; \n \t4 next <identifiersep> time . set <identifiersep> time ( new date ( current <identifiersep> time . get <identifiersep> time ( ) + additional ) ) ; \n <ect>
\t3 time <identifiersep> termination time <identifiersep> breaker = new time <identifiersep> termination ( time ) ; \n \t3 algorithm <identifiersep> listeners . add ( new prioritized <identifiersep> vra <identifiersep> listener ( priority . low , time <identifiersep> breaker ) ) ; \n \t3 return time <identifiersep> breaker ; } \n \t2 if ( based <identifiersep> on . equals ( <string_literal> ) ) { \n <ect>
\t2 logger . error ( this , <string_literal> + old <identifiersep> state + <string_literal> + new <identifiersep> state , new exception ( <string_literal> ) ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> metadata ( metadata m , client <identifiersep> put <identifiersep> state state , client <identifiersep> context context ) { \n \t2 <comment> \n <ect>
\t2 target . println ( ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t5 system . arraycopy ( ts <identifiersep> b , 0 , to <identifiersep> encrypt , hxy <identifiersep> size , ts <identifiersep> b . length ) ; \n \t5 <comment> \n \t5  <identifiersep> context . random ( ) . next <identifiersep> bytes ( to <identifiersep> encrypt , hxy <identifiersep> size + <number_literal> , <number_literal> ) ; \n \t5 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t3 plan . register <identifiersep> logout <identifiersep> handler ( ticket <identifiersep> granting <identifiersep> ticket - > ticket <identifiersep> granting <identifiersep> ticket . get <identifiersep> descendant <identifiersep> tickets ( ) \n \t5 . stream ( ) \n \t5 . for <identifiersep> each ( t - > { \n <ect>
\t3 string app <identifiersep> xml = read <identifiersep> and <identifiersep> validate <identifiersep> xml ( ) ; \n \t3 bundle <identifiersep> bean . set <identifiersep> orig <identifiersep> job <identifiersep> xml ( app <identifiersep> xml ) ; \n \t3 log . debug ( <string_literal> + xml <identifiersep> utils . pretty <identifiersep> print ( app <identifiersep> xml ) . to <identifiersep> string ( ) ) ; } \n \t2 catch ( bundle <identifiersep> job <identifiersep> exception ex ) { \n <ect>
\t1 try : \n \t2 server <identifiersep> ip = socket . gethostbyname ( server <identifiersep> hostname ) \n \t2 logger . info ( 'connecting to ambari server at %s ( %s ) ' , server <identifiersep> url , server <identifiersep> ip ) \n \t1 except socket . error : \n <ect>
\t7 owner = remove <identifiersep> key <identifiersep> for <identifiersep> value (  <identifiersep> awaiting <identifiersep> return , cancel <identifiersep> runnable ) ; \n \t7 if ( owner != null ) { \n \t8 long request <identifiersep> id <identifiersep> value =  <identifiersep> request <identifiersep> id . remove ( cancel <identifiersep> runnable ) ; \n \t8 if ( request <identifiersep> id <identifiersep> value != owner . get <identifiersep> request <identifiersep> id ( ) ) { \n <ect>
\t1 log . debug ( <string_literal> , set <identifiersep> preference <identifiersep> sql ) ; \n \t1 stmt . execute <identifiersep> update ( ) ; \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n \t1 if ( ! postgresql <identifiersep> duplicate <identifiersep> key <identifiersep> state . equals ( sqle . get <identifiersep> sql <identifiersep> state ( ) ) ) { \n <ect>
\t4 } catch ( not <identifiersep> connected <identifiersep> exception e ) { \n \t5 logger . minor ( this , <string_literal> ) ; \n \t5 return ; \n \t4 } catch ( sync <identifiersep> send <identifiersep> waited <identifiersep> too <identifiersep> long <identifiersep> exception e ) { \n <ect>
\t4 use <identifiersep> case <identifiersep> insensitive <identifiersep> matching = configuration <identifiersep> service \n \t5 . get <identifiersep> boolean <identifiersep> property ( <string_literal> ) ; \n \t3 } catch ( conversion <identifiersep> exception e ) { \n \t4 use <identifiersep> case <identifiersep> insensitive <identifiersep> matching = false ; \n <ect>
\t3 if ( request . get <identifiersep> name ( ) . equals ( <string_literal> ) ) { \n \t4 time <identifiersep> request = request ; \n \t4 break ; } } \n \t2 if ( time <identifiersep> request == null ) { \n <ect>
\t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . secret ) ) { \n \t3 logger . warn ( <string_literal> , grant <identifiersep> type ) ; \n \t3 return false ; } \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . username ) ) { \n <ect>
\t1 for ( string pattern : patterns ) { \n \t2 if ( pattern . contains ( <string_literal> ) && pattern . contains ( <string_literal> ) ) { \n \t2 result . add ( pattern ) ; \n \t2 } else { \n <ect>
public post <identifiersep> user <identifiersep> creation <identifiersep> hook <identifiersep> server <identifiersep> action ( ) { \n \t1 super ( ) ; } \n @ override \n public command <identifiersep> report execute ( concurrent <identifiersep> map < string , object > request <identifiersep> shared <identifiersep> data <identifiersep> context ) throws ambari <identifiersep> exception , interrupted <identifiersep> exception { \n <ect>
\t3 final collection < ? > c = ( collection < ? > ) attribute <identifiersep> value ; \n \t3 logger . debug ( <string_literal> , attribute <identifiersep> name , c ) ; \n \t3 c . stream ( ) . map ( value - > new <identifiersep> attribute <identifiersep> value ( value , default <identifiersep> element <identifiersep> name ) ) . for <identifiersep> each ( attribute <identifiersep> list : : add ) ; \n \t2 } else { \n <ect>
\t3 <comment> \n \t3 input <identifiersep> stream x = entry . open <identifiersep> stream ( ) ; \n \t3 product <identifiersep> file = ( z <identifiersep> wave <identifiersep> db <identifiersep> product <identifiersep> file ) xstream . from <identifiersep> xml ( x ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( has <identifiersep> received <identifiersep> message ( ) ) { \n \t4 synchronized ( messages ) { \n \t5 messages . wait ( <number_literal> ) ; } } \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 log . error ( <string_literal> , obj . get <identifiersep> class ( ) ) ; } } \n \t2 } catch ( eof <identifiersep> exception err ) { \n \t3 <comment> \n \t2 } catch ( io <identifiersep> exception | class <identifiersep> not <identifiersep> found <identifiersep> exception err ) { \n <ect>
\t5 <comment> \n \t5 msg . get <identifiersep> settlement <identifiersep> builder ( ) . set <identifiersep> tx ( byte <identifiersep> string . copy <identifiersep> from ( result . unsafe <identifiersep> bitcoin <identifiersep> serialize ( ) ) ) ; \n \t5 log . info ( <string_literal> ) ; \n \t4 } else { \n <ect>
\t6 + cnxn . get <identifiersep> remote <identifiersep> socket <identifiersep> address ( ) \n \t6 + <string_literal> ) ; \n \t4 cnxn . send <identifiersep> buffer ( server <identifiersep> cnxn <identifiersep> factory . close <identifiersep> conn ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t6 <string_literal> ) ; \n \t2 preconditions . check <identifiersep> state ( cluster . is <identifiersep> running ( ) , <string_literal> ) ; \n \t2 hazelcast <identifiersep> instance cluster <identifiersep> instance = cluster . get <identifiersep> hz ( ) ; \n \t2 <comment> \n <ect>
\t6 runtime <identifiersep> configuration <identifiersep> view <identifiersep> m <identifiersep> bean . class , false ) ; \n \t2 string prop <identifiersep> of <identifiersep> interest = <string_literal> ; \n \t2 hash <identifiersep> map < string , string > props = new hash <identifiersep> map < string , string > ( ) ; \n \t2 introspection <identifiersep> support . get <identifiersep> properties ( runtime <identifiersep> configuration <identifiersep> view , props , null ) ; \n <ect>
\t2 } catch ( txn <identifiersep> aborted <identifiersep> exception e ) { \n \t3 aborted . add ( txn ) ; } } \n \t2 return rsp ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 samples . add <identifiersep> all ( samples <identifiersep> from <identifiersep> file ) ; \n \t2 logger . debug ( utils . join ( <string_literal> , command <identifiersep> line <identifiersep> unique <identifiersep> samples ) ) ; \n \t3 if ( ! command <identifiersep> line <identifiersep> unique <identifiersep> samples . is <identifiersep> empty ( ) ) { \n \t4 if ( allow <identifiersep> non <identifiersep> overlapping <identifiersep> command <identifiersep> line <identifiersep> samples ) { \n <ect>
\t3 public void with ( component <identifiersep> lifecycle lifecycle ) { \n \t4 try { \n \t5 lifecycle . configure ( lifecycle . get <identifiersep> name ( ) , lifecycle . get <identifiersep> config <identifiersep> params ( ) ) ; \n \t4 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 start ( ) ; \n \t3 if ( is <identifiersep> running ( ) ) { \n \t4 for ( int rep <identifiersep> reg = 1 ; rep <identifiersep> reg < = max ; ++ rep <identifiersep> reg ) { \n <ect>
\t7 object <identifiersep> meta metadata = pod . get <identifiersep> metadata ( ) ; \n \t7 string namespace = metadata . get <identifiersep> namespace ( ) ; \n \t7 string pod <identifiersep> name = metadata . get <identifiersep> name ( ) ; \n \t7 string jolokia <identifiersep> url = url <identifiersep> utils . join ( master <identifiersep> url . to <identifiersep> string ( ) , <string_literal> + namespace + <string_literal> + locate <identifiersep> jolokia <identifiersep> protocol ( ) + <string_literal> + pod <identifiersep> name + <string_literal> ) ; \n <ect>
\t3 log . error ( <string_literal> ) ; \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( \n \t5 <string_literal> ) ; } \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( namespace <identifiersep> name ) ) { \n <ect>
\t1 private string [ ] scripts ; \n \t1 private string frozen <identifiersep> dump ; \n \t1 public void start <identifiersep> service ( ) { \n \t2 try { \n <ect>
\t3 migrationresult . set <identifiersep> number <identifiersep> of <identifiersep> query <identifiersep> transfered ( i + 1 ) ; \n \t3 get <identifiersep> resource <identifiersep> manager ( view ) . update ( migrationresult , jobid ) ; \n \t3 logger . info ( <string_literal> + ( i + 1 ) ) ; \n \t3 logger . info ( <string_literal> ) ; \n <ect>
\t4 string report <identifiersep> file <identifiersep> location = cassandra <identifiersep> daemon . class . get <identifiersep> class <identifiersep> loader ( ) . get <identifiersep> resource ( metrics <identifiersep> reporter <identifiersep> config <identifiersep> file ) . get <identifiersep> file ( ) ; \n \t4 reporter <identifiersep> config . load <identifiersep> from <identifiersep> file ( report <identifiersep> file <identifiersep> location ) . enable <identifiersep> all ( ) ; } \n \t3 catch ( exception e ) \n \t3 { \n <ect>
\t4 schema <identifiersep> status status = gindex . get <identifiersep> index <identifiersep> status ( key ) ; \n \t4 if ( status != schema <identifiersep> status . disabled && ! acceptable <identifiersep> statuses . contains ( status ) ) { \n \t5 is <identifiersep> valid <identifiersep> index = false ; \n \t5 invalid <identifiersep> key <identifiersep> statuses . put ( key . name ( ) , status ) ; \n <ect>
\t4 synchronized ( data <identifiersep> file <identifiersep> id <identifiersep> lock ) { \n \t5 try { \n \t6 next <identifiersep> data <identifiersep> file = new <identifiersep> data <identifiersep> file ( ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 logger . warn ( <string_literal> , name , resource ) ; \n \t3 return null ; } \n \t2 uri url = content . url ( ) ; \n \t2 if ( url == null ) { \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 <comment> \n \t6 visitor . rebuild ( input <identifiersep> ontology ) ; } \n <ect>
\t3  <identifiersep> host . storage <identifiersep> network2 = storage <identifiersep> nic2 . get <identifiersep> network <identifiersep> record ( conn ) . uuid ; \n \t3  <identifiersep> host . storage <identifiersep> pif2 = storage <identifiersep> nic2 . get <identifiersep> pif <identifiersep> record ( conn ) . uuid ; \n \t3 s <identifiersep> logger . info ( <string_literal> +  <identifiersep> private <identifiersep> network <identifiersep> name + <string_literal> +  <identifiersep> host . ip ) ; \n \t3 s <identifiersep> logger . info ( <string_literal> +  <identifiersep> guest <identifiersep> network <identifiersep> name + <string_literal> +  <identifiersep> host . ip ) ; \n <ect>
\t3 secret <identifiersep> key key = generator . generate <identifiersep> key ( ) ; \n \t3 encoded <identifiersep> key = base64 . encode <identifiersep> base64url <identifiersep> safe <identifiersep> string ( key . get <identifiersep> encoded ( ) ) ; \n \t3  <identifiersep> config <identifiersep> dao . update ( config . sso <identifiersep> key . key ( ) , config . sso <identifiersep> key . get <identifiersep> category ( ) , encoded <identifiersep> key ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> algorithm <identifiersep> exception ex ) { \n <ect>
\t6 jaxrs <identifiersep> client <identifiersep> factory . create ( <string_literal> + port6 + <string_literal> , upload <identifiersep> service . class ) \n \t7 . upload ( camel <identifiersep> route <identifiersep> builder . class . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( sample <identifiersep> content <identifiersep> path ) , \n \t9 sample <identifiersep> name ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t3 throw new data <identifiersep> format <identifiersep> exception ( <string_literal> , ime ) ; } \n \t2  <identifiersep> clove <identifiersep> id = data <identifiersep> helper . read <identifiersep> long ( in , <number_literal> ) ; \n \t2  <identifiersep> expiration = data <identifiersep> helper . read <identifiersep> date ( in ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 && ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( parent . get <identifiersep> snapshot ( ) ) ) { \n \t1 string iqn = rbd <identifiersep> service . clone <identifiersep> and <identifiersep> resize <identifiersep> image ( parent . get <identifiersep> image ( ) , parent . get <identifiersep> snapshot ( ) , snapshot <identifiersep> id , null , parent . get <identifiersep> pool ( ) ) ; \n \t1 return iqn ; \n \t1 } else { \n <ect>
\t2  <identifiersep> keep <identifiersep> testing = true ; \n \t2 this . get <identifiersep> timing ( ) . set <identifiersep> start <identifiersep> after ( get <identifiersep> context ( ) . clock ( ) . now ( ) + default <identifiersep> peer <identifiersep> test <identifiersep> delay ) ; \n \t2 get <identifiersep> context ( ) . job <identifiersep> queue ( ) . add <identifiersep> job ( this ) ; \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 collection < string > initial <identifiersep> tokens = database <identifiersep> descriptor . get <identifiersep> initial <identifiersep> tokens ( ) ; \n \t2 <comment> \n \t2 if ( initial <identifiersep> tokens . size ( ) > 0 ) \n \t2 { \n <ect>
\t2 final string original <identifiersep> url = single <identifiersep> logout <identifiersep> service . get <identifiersep> original <identifiersep> url ( ) ; \n \t2 if ( this . url <identifiersep> validator . is <identifiersep> valid ( original <identifiersep> url ) ) { \n \t3 logger . debug ( <string_literal> , original <identifiersep> url , single <identifiersep> logout <identifiersep> service ) ; \n \t3 return new url ( original <identifiersep> url ) ; } \n <ect>
\t4 return <string_literal> + key + <string_literal> ; } \n \t2 } catch ( missing <identifiersep> resource <identifiersep> exception mre ) { \n \t3 if ( ignore <identifiersep> resorces ) { <comment> \n \t4 return <string_literal> + key + <string_literal> ; } \n <ect>
\t2 if ( ! this . metadata <identifiersep> location . exists ( ) ) { \n \t3 logger . debug ( <string_literal> , this . metadata <identifiersep> location ) ; \n \t3 if ( ! this . metadata <identifiersep> location . mkdir ( ) ) { \n \t4 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> + this . metadata <identifiersep> location + <string_literal> ) ; } } \n <ect>
\t1 public set < event > resolve <identifiersep> internal ( final request <identifiersep> context context ) { \n \t2 final registered <identifiersep> service service = resolve <identifiersep> registered <identifiersep> service <identifiersep> in <identifiersep> request <identifiersep> context ( context ) ; \n \t2 final authentication authentication = web <identifiersep> utils . get <identifiersep> authentication ( context ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( grouper <identifiersep> field ) ) { \n <ect>
\t5 <comment> \n \t5 if ( typ . get <identifiersep> type ( ) == constants . souliss <identifiersep> t <identifiersep> service <identifiersep> node <identifiersep> timestamp ) { \n \t6 <comment> \n \t6 <comment> \n <ect>
\t3 output <identifiersep> stream writer = client <identifiersep> socket . get <identifiersep> output <identifiersep> stream ( ) ; \n \t3 log . info ( <string_literal> ) ; \n \t3 writer . write ( message , 0 , message . length ) ; \n \t3 writer . flush ( ) ; \n <ect>
\t3 v <identifiersep> app = client . get <identifiersep> v <identifiersep> app <identifiersep> client ( ) . get <identifiersep> v <identifiersep> app ( v <identifiersep> app . get <identifiersep> href ( ) ) ; \n \t3 logger . debug ( <string_literal> , v <identifiersep> app . get <identifiersep> status ( ) , v <identifiersep> app . get <identifiersep> name ( ) ) ; \n \t2 } catch ( illegal <identifiersep> state <identifiersep> exception e ) { \n \t3 logger . warn ( e , <string_literal> , v <identifiersep> app . get <identifiersep> status ( ) , v <identifiersep> app . get <identifiersep> name ( ) ) ; } \n <ect>
\t1 } catch ( item <identifiersep> not <identifiersep> found item <identifiersep> not <identifiersep> found ) { \n \t1 log . error ( <string_literal> , item <identifiersep> not <identifiersep> found ) ; \n \t1 throw new not <identifiersep> found <identifiersep> formatted <identifiersep> exception ( item <identifiersep> not <identifiersep> found . get <identifiersep> message ( ) , item <identifiersep> not <identifiersep> found ) ; \n \t1 } catch ( throwable ex ) { \n <ect>
\t6 arg = it <identifiersep> args . next ( ) ; \n \t6 int pos = arg . index <identifiersep> of ( value <identifiersep> separator ) ; \n \t6 args <identifiersep> map . put ( arg . substring ( 0 , pos ) , arg . substring ( pos + 1 ) ) ; \n \t5 } catch ( string <identifiersep> index <identifiersep> out <identifiersep> of <identifiersep> bounds <identifiersep> exception e ) { \n <ect>
\t3 return false ; } \n \t2 execute ( <string_literal> , session <identifiersep> id , ( ) - > { \n \t3 optional < session > session = session <identifiersep> manager . instance . get <identifiersep> session ( session <identifiersep> id ) ; \n \t3 if ( ! session . is <identifiersep> present ( ) ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + pool . get <identifiersep> id ( ) + <string_literal> + total <identifiersep> over <identifiersep> prov <identifiersep> capacity + <string_literal> + total <identifiersep> allocated <identifiersep> size + <string_literal> + asking <identifiersep> size + <string_literal> +  <identifiersep> storage <identifiersep> allocated <identifiersep> threshold ) ; } \n \t2 double used <identifiersep> percentage = ( total <identifiersep> allocated <identifiersep> size + asking <identifiersep> size ) / ( double ) ( total <identifiersep> over <identifiersep> prov <identifiersep> capacity ) ; \n \t2 if ( used <identifiersep> percentage >  <identifiersep> storage <identifiersep> allocated <identifiersep> threshold ) { \n <ect>
\t4 task . set <identifiersep> rebalance <identifiersep> source ( null ) ; \n \t4 task . set <identifiersep> rebalance <identifiersep> target ( null ) ; } \n \t3 if ( task . get <identifiersep> state ( ) . is <identifiersep> queued <identifiersep> state ( ) ) { \n \t4 remove <identifiersep> from <identifiersep> queue ( task ) ; \n <ect>
\t3 return jm <identifiersep> dns <identifiersep> create <identifiersep> method . invoke ( null , null ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n \t3 log <identifiersep> log . warn ( <string_literal> , e ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t3 log . info ( <string_literal> + m1rm ) ; \n \t3 assert . assert <identifiersep> not <identifiersep> null ( m1rm ) ; \n \t3 <comment> \n \t3 final message m1rk = scheduler . peek <identifiersep> message <identifiersep> by <identifiersep> key ( key ) ; \n <ect>
\t1 thread <identifiersep> two . start <identifiersep> and <identifiersep> wait <identifiersep> until <identifiersep> control <identifiersep> is <identifiersep> returned ( ) ; \n \t1 log . debug ( <string_literal> ) ; \n \t1 thread <identifiersep> one . proceed <identifiersep> and <identifiersep> wait <identifiersep> till <identifiersep> done ( ) ; \n \t1 assert <identifiersep> null ( thread <identifiersep> one . exception ) ; \n <ect>
\t3 for ( int i = 0 ; i < num <identifiersep> bytes ; i += num <identifiersep> bytes <identifiersep> per <identifiersep> write ) { \n \t4 int num = num <identifiersep> bytes <identifiersep> per <identifiersep> write ; \n \t4 if ( num <identifiersep> bytes <identifiersep> per <identifiersep> write + i >= num <identifiersep> bytes ) \n \t5 num = num <identifiersep> bytes - i ; \n <ect>
\t3 logger . trace ( <string_literal> , time , zone <identifiersep> id ) ; \n \t3 final zone <identifiersep> id zone = zone <identifiersep> id . of ( zone <identifiersep> id ) ; \n \t3 return date <identifiersep> time <identifiersep> utils . zoned <identifiersep> date <identifiersep> time <identifiersep> of ( time , zone ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t5 + call <identifiersep> result . get <identifiersep> details ( ) ) ; } \n \t2 if ( <string_literal> . equals ( option ) || <string_literal> . equals ( option ) ) { \n \t3 string result = call <identifiersep> result . get <identifiersep> details ( ) ; \n \t3 if ( result == null || result . is <identifiersep> empty ( ) ) { \n <ect>
\t2 file hosts <identifiersep> file = locate <identifiersep> hosts <identifiersep> file ( ) ; \n \t2 try { \n \t3 return parse ( hosts <identifiersep> file ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 pmf <identifiersep> model pre <identifiersep> item <identifiersep> model = new pmf <identifiersep> model ( ) ; \n \t2 random random = new random ( rnd <identifiersep> seed ) ; \n \t2 pre <identifiersep> user <identifiersep> model . initialize ( user <identifiersep> weight <identifiersep> shp <identifiersep> prior , user <identifiersep> activity <identifiersep> shp <identifiersep> prior , user <identifiersep> activity <identifiersep> prior <identifiersep> mean , user <identifiersep> num , feature <identifiersep> count , max <identifiersep> offset <identifiersep> shp , max <identifiersep> offset <identifiersep> rte , random ) ; \n \t2 pre <identifiersep> item <identifiersep> model . initialize ( item <identifiersep> weight <identifiersep> shp <identifiersep> prior , item <identifiersep> activity <identifiersep> shp <identifiersep> prior , item <identifiersep> activity <identifiersep> prior <identifiersep> mean , item <identifiersep> num , feature <identifiersep> count , max <identifiersep> offset <identifiersep> shp , max <identifiersep> offset <identifiersep> rte , random ) ; \n <ect>
\t2 @ non <identifiersep> null \n \t2 final set < authentication <identifiersep> handler > handler <identifiersep> set = get <identifiersep> authentication <identifiersep> handlers <identifiersep> for <identifiersep> this <identifiersep> transaction ( transaction ) ; \n \t2 logger . debug ( <string_literal> , handler <identifiersep> set ) ; \n \t2 if ( handler <identifiersep> set . is <identifiersep> empty ( ) ) { \n <ect>
\t4 this . central <identifiersep> authentication <identifiersep> service . destroy <identifiersep> ticket <identifiersep> granting <identifiersep> ticket ( ticket <identifiersep> granting <identifiersep> ticket ) ; } \n \t3 if ( is <identifiersep> gateway <identifiersep> present ( context ) ) { \n \t4 logger . debug ( <string_literal> , cas <identifiersep> webflow <identifiersep> constants . state <identifiersep> id <identifiersep> gateway ) ; \n \t4 return result ( cas <identifiersep> webflow <identifiersep> constants . state <identifiersep> id <identifiersep> gateway ) ; } \n <ect>
\t2 action <identifiersep> invocation invocation = new action <identifiersep> invocation ( action ) ; \n \t2 try { \n \t3 invocation . set <identifiersep> input ( <string_literal> , <string_literal> ) ; \n \t2 } catch ( invalid <identifiersep> value <identifiersep> exception ex ) { \n <ect>
\t3 msg = new org . apache . thrift . t <identifiersep> application <identifiersep> exception ( org . apache . thrift . t <identifiersep> application <identifiersep> exception . internal <identifiersep> error , e . get <identifiersep> message ( ) ) ; } \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 } catch ( java . lang . exception ex ) { \n <ect>
\t10 request <identifiersep> for <identifiersep> response . emit <identifiersep> response ( map <identifiersep> batch <identifiersep> type <identifiersep> to <identifiersep> response <identifiersep> type . call ( batch <identifiersep> return <identifiersep> type ) ) ; \n \t10 <comment> \n \t10 seen <identifiersep> keys . add ( response <identifiersep> key ) ; \n \t9 } else { \n <ect>
\t1 case latent : \n \t1 return ; \n \t1 case initial <identifiersep> selection : \n \t1 if ( does <identifiersep> exist ) { \n <ect>
\t3 listener <identifiersep> impl . trim ( ) , true , java <identifiersep> utils . get <identifiersep> class <identifiersep> loader ( ) ) . get <identifiersep> constructor ( \n \t4 configuration . class ) . new <identifiersep> instance ( conf ) ; \n \t2 listeners . add ( listener ) ; \n \t1 } catch ( invocation <identifiersep> target <identifiersep> exception ie ) { \n <ect>
\t5 message <identifiersep> producer producer = session . create <identifiersep> producer ( new active <identifiersep> mq <identifiersep> queue ( get <identifiersep> destination <identifiersep> name ( ) ) ) ; \n \t5 for ( int idx = 0 ; idx < messages <identifiersep> count ; ++ idx ) { \n \t6 message message = session . create <identifiersep> text <identifiersep> message ( <string_literal> + idx ) ; \n \t6 producer . send ( message ) ; \n <ect>
\t1 public void run ( ) { \n \t2 try { \n \t3 run <identifiersep> method <identifiersep> without <identifiersep> catching <identifiersep> exceptions ( ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t3 return ; } \n \t2 string path = virtual <identifiersep> file . get <identifiersep> path ( ) ; \n \t2 buf b = state . get <identifiersep> buf <identifiersep> by <identifiersep> path ( path ) ; \n \t2 if ( b != null ) { \n <ect>
\t2 log . error ( <string_literal> + ugi , exception ) ; } \n \t1 if ( wrapper . size ( ) == 1 ) { \n \t2 log . debug ( <string_literal> + wrapper . get ( 0 ) ) ; \n \t2 return wrapper . get ( 0 ) ; } } \n <ect>
\t2 } catch ( json <identifiersep> parse <identifiersep> exception e ) { \n \t3 log . warn ( <string_literal> + location ) ; \n \t3 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t2 } catch ( json <identifiersep> mapping <identifiersep> exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> , result , this . script ) ; \n \t4 return result . to <identifiersep> string ( ) ; } \n \t2 } catch ( final exception e ) { \n \t3 logger . error ( e . get <identifiersep> message ( ) , e ) ; } \n <ect>
\t3 <comment> \n \t3 app . cypher ( <string_literal> , collections . empty <identifiersep> map ( ) ) ; \n \t3 tx . success ( ) ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 <comment> \n \t2 public void create ( broker broker , connection <identifiersep> context context , active <identifiersep> mq <identifiersep> destination destination ) throws exception { \n <ect>
\t1 public void add <identifiersep> persistent <identifiersep> requests ( list < client <identifiersep> request > v , boolean only <identifiersep> forever ) { \n \t2 synchronized ( this ) { \n \t3 for ( client <identifiersep> request req : running <identifiersep> persistent <identifiersep> requests ) { \n \t4 if ( req == null ) { \n <ect>
\t3 log . warn ( <string_literal> ) ; \n \t2 } else { \n \t3 try { \n \t4 max <identifiersep> upload <identifiersep> size = integer . parse <identifiersep> int ( max <identifiersep> upload <identifiersep> size <identifiersep> str ) ; \n <ect>
\t3 try { \n \t4 log . info ( <string_literal> , upload <identifiersep> dir ) ; \n \t4 file <identifiersep> utils . delete <identifiersep> directory ( upload <identifiersep> dir ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t3 chat . add <identifiersep> message <identifiersep> listener ( this ) ; \n \t2 } else { \n \t3 try { \n \t4 chat . send <identifiersep> message ( <string_literal> ) ; \n <ect>
\t3 <comment> \n \t3 app . cypher ( <string_literal> , collections . empty <identifiersep> map ( ) ) ; \n \t3 tx . success ( ) ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 logger . info ( str <identifiersep> movie <identifiersep> xml <identifiersep> type ) ; \n \t2 response response = target . request ( ) . post ( entity . entity ( str <identifiersep> movie <identifiersep> xml <identifiersep> type , <string_literal> ) ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string entity = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t4 wk . set <identifiersep> metadata <identifiersep> container ( meta <identifiersep> data ) ; } \n \t3 meta <identifiersep> data . set <identifiersep> service ( service ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t2 } catch ( malformed <identifiersep> url <identifiersep> exception e ) { \n <ect>
\t4 throw e ; } } } \n \t1 @ override \n \t1 public boolean subscribe ( message <identifiersep> handler handler ) { \n <ect>
if dfs <identifiersep> allow <identifiersep> truncate is none or str ( dfs <identifiersep> allow <identifiersep> truncate ) . lower ( ) != 'true' : \n \t1 if custom <identifiersep> params . enforce <identifiersep> hdfs <identifiersep> truncate : \n \t1 raise fail ( <string_literal> . format ( dfs <identifiersep> allow <identifiersep> truncate <identifiersep> warning <identifiersep> msg ) ) \n \t1 else : \n <ect>
<comment> \n \t1 private boolean on <identifiersep> complete ( boolean success , boolean distribute ) { \n <ect>
\t4 <comment> \n \t4 logger . warn ( <string_literal> , e . get <identifiersep> message ( ) ) ; \n \t4 synchronized ( get <identifiersep> request <identifiersep> reply <identifiersep> lock ( ) ) { \n \t5 if ( m <identifiersep> reply == reply <identifiersep> type . waiting <identifiersep> for <identifiersep> ack ) { \n <ect>
\t4 log . error ( <string_literal> ) ; } \n \t3 log . error ( <string_literal> , e ) ; \n \t2 } finally { \n \t3 cleanup ( ) ; } \n <ect>
\t2 string src <identifiersep> base <identifiersep> name = ds <identifiersep> src <identifiersep> file . get <identifiersep> file <identifiersep> base <identifiersep> name ( ) ; \n \t2 if ( devices != null && devices . length > 0 ) { \n \t3 for ( virtual <identifiersep> device device : devices ) { \n \t4 if ( device instanceof virtual <identifiersep> disk ) { \n <ect>
\t3 if ( obj instanceof relationship ) { \n \t4 return rel <identifiersep> factory . instantiate ( ( relationship ) obj ) ; } \n \t2 } catch ( throwable ignore ) { \n \t3 <comment> \n <ect>
\t4 { \n \t5 call <identifiersep> chain old <identifiersep> chain = ( call <identifiersep> chain ) old <identifiersep> call <identifiersep> chains <identifiersep> it . next ( ) ; \n \t5 call <identifiersep> chains . add ( cached <identifiersep> chain . clone <identifiersep> and <identifiersep> extend ( old <identifiersep> chain ) ) ; } } \n \t3 <comment> \n <ect>
\t5  <identifiersep> decrypt <identifiersep> block <identifiersep> buf [ i ] ^ = array [ start + i ] ; } } \n \t3 boolean ok = recv <identifiersep> unencrypted <identifiersep> i2np ( ) ; \n \t3 if ( ! ok ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t4 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n \t5  <identifiersep> log . info ( <string_literal> +  <identifiersep> known <identifiersep> nodes . size ( ) ) ; \n \t4 explore (  <identifiersep> my <identifiersep> nid , <number_literal> , <number_literal> * <number_literal> , 1 ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 <comment> \n \t1 public void flush ( ) \n \t1 { \n <ect>
\t3 <comment> \n \t3 private void block <identifiersep> execution <identifiersep> and <identifiersep> fail ( final string blob <identifiersep> name ) throws io <identifiersep> exception { \n <ect>
\t2 if ( null != r ) { \n \t2 try { \n \t3 r . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t2 assert <identifiersep> true ( ! frames . is <identifiersep> empty ( ) ) ; \n \t2 assert <identifiersep> equals ( <number_literal> , frames . size ( ) ) ; \n \t2 for ( mqtt <identifiersep> frame frame : frames ) { \n \t3 connect = new connect ( ) . decode ( frame ) ; \n <ect>
\t4  <identifiersep> log . error ( <string_literal> + state . get <identifiersep> remote <identifiersep> host <identifiersep> id ( ) . to <identifiersep> string ( ) ) ; \n \t3 packet . release ( ) ; \n \t3 return null ; } \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 return status . backoff ; } \n \t1 return status . ready ; } \n @ override \n protected void do <identifiersep> start ( ) throws flume <identifiersep> exception { \n <ect>
\t3 log . warn ( <string_literal> + tag <identifiersep> name ) ; \n \t3 return ; } \n \t2 node node = nodes . item ( 0 ) . get <identifiersep> attributes ( ) . get <identifiersep> named <identifiersep> item ( attribute <identifiersep> name ) ; \n \t2 if ( node == null ) { \n <ect>
\t2 storage <identifiersep> vol vol = null ; \n \t2 try { \n \t3 vol = pool . storage <identifiersep> vol <identifiersep> lookup <identifiersep> by <identifiersep> name ( vol <identifiersep> name ) ; \n \t2 } catch ( libvirt <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 template . send <identifiersep> body ( uri , body ) ; \n \t3 fail ( <string_literal> ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> endpoint <identifiersep> exception e ) { \n <ect>
\t5 var  <identifiersep> db <identifiersep> node = { \n \t6 label : key , \n \t6 data : tables , \n \t6 on <identifiersep> select : function ( branch ) { \n <ect>
\t3 hds . set ( <string_literal> , new date ( last <identifiersep> modified ) . to <identifiersep> gmt <identifiersep> string ( ) ) ; \n \t3 t . send <identifiersep> response <identifiersep> headers ( <number_literal> , length ) ; \n \t3 response <identifiersep> file <identifiersep> content ( t , f ) ; \n <ect>
\t1 map < ? , ? > result = null ; \n \t1 try { \n \t1 result = mapper . read <identifiersep> value ( structured <identifiersep> output , map . class ) ; \n \t1 } catch ( exception excepton ) { \n <ect>
\t3 if ( snap . get <identifiersep> is <identifiersep> origin ( ) == null ) { <comment> \n \t3 log . debug ( <string_literal> + snapshot <identifiersep> id + <string_literal> ) ; \n \t3 delete <identifiersep> snap <identifiersep> from <identifiersep> osg ( snap ) ; <comment> \n \t3 } else if ( snap . get <identifiersep> is <identifiersep> origin ( ) ) { <comment> \n <ect>
\t5 if ( vmdk <identifiersep> descriptor != null ) { \n \t6 string vmdk <identifiersep> base <identifiersep> file <identifiersep> name = vmdk <identifiersep> descriptor . first ( ) . get <identifiersep> base <identifiersep> file <identifiersep> name ( ) ; \n \t6 string base <identifiersep> file <identifiersep> path = src <identifiersep> file . get <identifiersep> companion <identifiersep> path ( vmdk <identifiersep> base <identifiersep> file <identifiersep> name ) ; \n \t6 dest <identifiersep> file = new datastore <identifiersep> file ( dest <identifiersep> ds <identifiersep> mo . get <identifiersep> name ( ) , dest <identifiersep> ds <identifiersep> dir , vmdk <identifiersep> base <identifiersep> file <identifiersep> name ) ; \n <ect>
\t2 log . set <identifiersep> level ( simple <identifiersep> log . log <identifiersep> level <identifiersep> all ) ; \n \t2 ops . set <identifiersep> level ( simple <identifiersep> log . log <identifiersep> level <identifiersep> all ) ; \n \t2 log . reset <identifiersep> message ( ) ; \n \t2 ops . reset <identifiersep> message ( ) ; \n <ect>
\t1 migration <identifiersep> state . set <identifiersep> status ( status . succeeded ) ; \n \t1 profiler . stop <identifiersep> info ( <string_literal> ) ; \n \t1 } catch ( migration <identifiersep> step <identifiersep> execution <identifiersep> exception e ) { \n \t1 profiler . stop <identifiersep> error ( <string_literal> ) ; \n <ect>
\t4 rs . close ( ) ; \n \t4 stmt . close ( ) ; \n \t4 con . commit ( ) ; \n \t3 } catch ( sql <identifiersep> exception ex ) { \n <ect>
<comment> \n \t1 private void add <identifiersep> handler ( grid <identifiersep> rest <identifiersep> command <identifiersep> handler hnd ) { \n \t2 assert ! handlers . contains <identifiersep> value ( hnd ) ; \n <ect>
\t9 break ; } } } } } } \n \t3 catch ( exception e ) \n \t3 { \n \t4 <comment> \n <ect>
\t4 if ( ! property <identifiersep> value . is <identifiersep> empty ( ) ) { \n \t5 <comment> \n \t5 object converted <identifiersep> value = convert <identifiersep> value ( property <identifiersep> value , field . get <identifiersep> generic <identifiersep> type ( ) ) ; \n \t5 reflection <identifiersep> helper . set <identifiersep> field ( field , target , converted <identifiersep> value ) ; \n <ect>
\t3 return ; } \n \t2 try { \n \t3 status = elastistor <identifiersep> util . update <identifiersep> elastistor <identifiersep> volume <identifiersep> size ( vol . get <identifiersep> uuid ( ) , resize <identifiersep> parameter . new <identifiersep> size ) ; \n \t2 } catch ( throwable e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void disconnect ( ) throws epson <identifiersep> projector <identifiersep> exception { \n \t2 if ( out != null ) { \n <ect>
\t4 string host <identifiersep> uuid = entry . get <identifiersep> value ( ) . first ( ) ; \n \t5 s <identifiersep> logger . trace ( <string_literal> + vm + <string_literal> ) ; } \n \t4 if ( old <identifiersep> state == state . stopping ) { \n <ect>
\t3 return rs ; } \n \t2 catch ( runtime <identifiersep> exception e ) \n \t2 { \n \t3 throwable cause = e . get <identifiersep> cause ( ) != null ? e . get <identifiersep> cause ( ) : e ; \n <ect>
\t3 logger . error ( <string_literal> , e ) ; \n \t3 <comment> \n \t3 if ( completed <identifiersep> cluster <identifiersep> and <identifiersep> stores <identifiersep> change ) { \n \t4 try { \n <ect>
\t5 . set <identifiersep> parameter ( <string_literal> , key ) \n \t5 . execute <identifiersep> update ( ) ; \n \t3 logger . info ( <string_literal> , count ) ; \n \t2 } catch ( final no <identifiersep> result <identifiersep> exception e ) { \n <ect>
\t5 owner = owner , \n \t5 mode = <number_literal> , \n \t5 replace <identifiersep> existing <identifiersep> files = replace <identifiersep> existing <identifiersep> files , \n ) \n <ect>
\t3 executor . submit ( task ) ; \n \t3 tasks . add ( task ) ; } } \n \t1 @ override \n \t1 protected void do <identifiersep> stop ( ) throws exception { \n <ect>
\t2 } ) ; \n \t2 bitcoind . add <identifiersep> disconnected <identifiersep> event <identifiersep> listener ( threading . same <identifiersep> thread , new peer <identifiersep> disconnected <identifiersep> event <identifiersep> listener ( ) { \n \t3 @ override \n \t3 public void on <identifiersep> peer <identifiersep> disconnected ( peer peer , int peer <identifiersep> count ) { \n <ect>
\t2  <identifiersep> m <identifiersep> bean = new security <identifiersep> manager <identifiersep> m <identifiersep> bean <identifiersep> impl ( this ) ; \n \t2 try { \n \t3 jmx <identifiersep> util . register <identifiersep> m <identifiersep> bean ( <string_literal> , <string_literal> ,  <identifiersep> m <identifiersep> bean ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 logger . debug ( <string_literal> , config . get <identifiersep> max <identifiersep> entries <identifiersep> local <identifiersep> heap ( ) ) ; \n \t4 logger . debug ( <string_literal> , config . get <identifiersep> max <identifiersep> entries <identifiersep> local <identifiersep> disk ( ) ) ; \n \t4 logger . debug ( <string_literal> , config . get <identifiersep> max <identifiersep> entries <identifiersep> in <identifiersep> cache ( ) ) ; \n \t4 logger . debug ( <string_literal> , config . get <identifiersep> persistence <identifiersep> configuration ( ) . get <identifiersep> strategy ( ) ) ; \n <ect>
\t3 num <identifiersep> received <identifiersep> msgs ++ ; \n \t3 return assembled <identifiersep> msg ; } \n \t2 catch ( exception e ) { \n <ect>
\t6 if ( message . has <identifiersep> portnumber ( port <identifiersep> number ) ) { \n \t7 if ( message . get <identifiersep> type ( ) == message <identifiersep> type . a ) { \n \t8 analog <identifiersep> value value = ( ( analog <identifiersep> message ) message ) . get <identifiersep> analog <identifiersep> value ( port <identifiersep> number ) ; \n \t8 if ( value . value != null ) { \n <ect>
\t3 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n \t2 catch ( execution <identifiersep> exception e ) \n \t2 { \n \t3 <comment> \n <ect>
\t2 for ( int i = 1 ; i < = run <identifiersep> length ; i ++ ) { \n \t3 if ( ( i % <number_literal> ) < <number_literal> ) { \n \t4 logger . debug ( <string_literal> + i ) ; \n \t3 } else { \n <ect>
private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( last <identifiersep> seen <identifiersep> balancer <identifiersep> with <identifiersep> facilities <identifiersep> factory . class ) ; \n @ override \n public load <identifiersep> balancer <identifiersep> with <identifiersep> facilities create ( d2client <identifiersep> config config ) \n { \n <ect>
\t5 store <identifiersep> deleted <identifiersep> attachment ( directory , id , session ) ; } } } } \n \t1 private void store <identifiersep> deleted <identifiersep> attachment ( file directory , long id , session session ) \n \t2 throws parser <identifiersep> configuration <identifiersep> exception , sax <identifiersep> exception , io <identifiersep> exception \n \t1 { \n <ect>
\t4 <comment> \n \t4 save <identifiersep> cookies ( exchange , client , cxf <identifiersep> rs <identifiersep> endpoint . get <identifiersep> cookie <identifiersep> handler ( ) ) ; \n \t4 fail ( throwable ) ; \n \t3 } catch ( exception error ) { \n <ect>
\t10 case busy : \n <number_literal> queue . stats . inc <identifiersep> reprocess <identifiersep> count ( ) ; \n <number_literal> break ; \n \t10 default : \n <ect>
\t9 exp <identifiersep> vals . put ( key , f . < integer > t ( null ) ) ; } \n \t8 break ; } \n \t7 catch ( grid <identifiersep> exception e ) { \n \t8 if ( put ) \n <ect>
\t2 for ( int v : value ) { \n \t3 try { \n \t4 get <identifiersep> current <identifiersep> bucket ( ) . data . add <identifiersep> value ( v ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 log . warn ( <string_literal> , e ) ; \n \t1 return ; } } \n private void clean <identifiersep> snapshot ( snapshot <identifiersep> info snap <identifiersep> info ) { \n \t1 string snapshot <identifiersep> id = snap <identifiersep> info . get <identifiersep> snapshot <identifiersep> id ( ) ; \n <ect>
\t3 case struct : \n \t4 return serialize <identifiersep> struct ( obj , ( struct <identifiersep> object <identifiersep> inspector ) oi , ext ) ; \n \t3 case union : \n \t3 default : \n <ect>
\t2 string pojo <identifiersep> name = <string_literal> ; \n \t2 pojo . set <identifiersep> name ( pojo <identifiersep> name ) ; \n \t2 final default <identifiersep> exchange exchange = new default <identifiersep> exchange ( camel ) ; \n \t2 final string string = camel . get <identifiersep> type <identifiersep> converter ( ) . mandatory <identifiersep> convert <identifiersep> to ( string . class , exchange , pojo ) ; \n <ect>
\t3 if ( sample != null ) { \n \t4 if ( cause != null ) { \n \t5 log . info ( <string_literal> + sample <identifiersep> id , cause ) ; \n \t4 } else { \n <ect>
\t2 log . info ( <string_literal> + delivery <identifiersep> stream <identifiersep> name + <string_literal> ) ; \n \t2 list < string > delivery <identifiersep> stream <identifiersep> names = list <identifiersep> delivery <identifiersep> streams ( ) ; \n \t2 if ( delivery <identifiersep> stream <identifiersep> names != null && delivery <identifiersep> stream <identifiersep> names . contains ( delivery <identifiersep> stream <identifiersep> name ) ) { \n \t3 delivery <identifiersep> stream <identifiersep> exists = true ; \n <ect>
\t6 return token <identifiersep> list <identifiersep> to <identifiersep> splits ( split <identifiersep> points , splitsize ) ; } \n \t5 throw e ; } } \n \t3 catch ( io <identifiersep> exception e ) \n \t3 { \n <ect>
\t5 if ( send <identifiersep> to <identifiersep> spawn ) { \n \t6 try { \n \t7 send <identifiersep> status <identifiersep> message ( new status <identifiersep> task <identifiersep> end ( uuid , kick . get <identifiersep> job <identifiersep> uuid ( ) , kick . get <identifiersep> node <identifiersep> id ( ) , 0 , 0 , 0 ) ) ; \n \t6 } catch ( exception ex ) { \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 if ( log <identifiersep> minor ) \n \t4 logger . minor ( this , <string_literal> + e , e ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t8 vm <identifiersep> final , data <identifiersep> disk <identifiersep> template , owner , long . value <identifiersep> of ( disk <identifiersep> number ) ) ; \n \t6 disk <identifiersep> number ++ ; } } } \n \t2 } ) ; \n <ect>
\t10 <string_literal> + reason ) ; } \n \t8 s <identifiersep> logger . info ( <string_literal> + wait + <string_literal> ) ; \n \t8 thread . sleep ( wait ) ; \n \t7 } catch ( exception e ) { \n <ect>
\t2 if ( stream == null ) { \n \t3 if ( fail <identifiersep> on <identifiersep> error ) { \n \t4 throw new runtime <identifiersep> exception ( <string_literal> ) ; \n \t3 } else { \n <ect>
\t8 if ( pair <identifiersep> mode <identifiersep> timer != null ) { \n \t9 logger . debug ( item <identifiersep> name + <string_literal> ) ; \n \t9 pair <identifiersep> mode <identifiersep> timer . cancel ( ) ; \n \t9 timers . remove ( item <identifiersep> name ) ; } \n <ect>
\t4 try { \n \t5 result <identifiersep> string = new string ( result . array ( ) , charset ) . split ( <string_literal> ) [ 0 ] ; \n \t4 } catch ( unsupported <identifiersep> encoding <identifiersep> exception e ) { \n \t5 logger . warn ( <string_literal> ) ; } \n <ect>
def write <identifiersep> host <identifiersep> checks <identifiersep> custom <identifiersep> actions <identifiersep> file ( self , structured <identifiersep> output ) : \n \t1 if self . host <identifiersep> check <identifiersep> custom <identifiersep> actions <identifiersep> file <identifiersep> path is none : \n \t1 return \n \t1 try : \n <ect>
\t3 for ( module module : modules ) { \n \t4 if ( module . has ( name ) ) { \n \t5 pi = module . get <identifiersep> provider <identifiersep> info ( type , name ) ; \n \t5 break ; } } \n <ect>
\t3 filter <identifiersep> map . put ( batchid <identifiersep> key , this . batch <identifiersep> id ) ; \n \t3 filter <identifiersep> map . put ( <string_literal> , state ) ; \n \t3 return this . mail <identifiersep> status <identifiersep> store . load ( filter <identifiersep> map , 0 , 0 , date <identifiersep> field , true ) . iterator ( ) ; \n \t2 } catch ( mail <identifiersep> store <identifiersep> exception e ) { \n <ect>
\t1 protected static void safe <identifiersep> execute ( runnable task ) { \n \t2 try { \n \t3 task . run ( ) ; \n \t2 } catch ( throwable t ) { \n <ect>
\t2 if ( ! string <identifiersep> utils . is <identifiersep> blank ( metric <identifiersep> query <identifiersep> client <identifiersep> class ) ) { \n \t3 log . info ( <string_literal> , metric <identifiersep> query <identifiersep> client <identifiersep> class ) ; \n \t3 this . metric <identifiersep> query <identifiersep> client = ( metric <identifiersep> query <identifiersep> client ) utils . new <identifiersep> instance ( metric <identifiersep> query <identifiersep> client <identifiersep> class ) ; \n \t2 } else { \n <ect>
\t2 if ( midpoint . equals ( active . left ) || midpoint . equals ( active . right ) ) \n \t2 { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t2 if ( command == on <identifiersep> off <identifiersep> type . on ) { \n \t3 logger . info ( <string_literal> , config . get <identifiersep> item <identifiersep> name <identifiersep> to <identifiersep> listen <identifiersep> to ( ) ) ; \n \t3 this . disabled <identifiersep> items . add ( config . get <identifiersep> item <identifiersep> name <identifiersep> to <identifiersep> listen <identifiersep> to ( ) ) ; \n \t2 } else if ( command == on <identifiersep> off <identifiersep> type . off ) { \n <ect>
\t1 { \n \t2 boolean complex = boolean <identifiersep> value <identifiersep> for <identifiersep> binding ( <string_literal> , false ) ; \n \t2 if ( complex && ! has <identifiersep> hidden <identifiersep> value ( ) ) \n \t2 { \n <ect>
\t2 jdbc <identifiersep> config . set <identifiersep> database <identifiersep> password ( request . get <identifiersep> parameter ( <string_literal> ) ) ; \n \t2 jdbc <identifiersep> config . set <identifiersep> database <identifiersep> name ( request . get <identifiersep> parameter ( <string_literal> ) ) ; \n \t2 jdbc <identifiersep> config . set <identifiersep> database <identifiersep> schema ( request . get <identifiersep> parameter ( <string_literal> ) ) ; \n <ect>
private void set <identifiersep> scaling <identifiersep> not <identifiersep> required ( final auto <identifiersep> scaling <identifiersep> group <identifiersep> core <identifiersep> view group ) { \n \t1 try { \n \t1 update <identifiersep> scaling <identifiersep> required <identifiersep> flag ( group , false ) ; \n \t1 } catch ( auto <identifiersep> scaling <identifiersep> metadata <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t5 log . debug ( <string_literal> + \n \t6 e . get <identifiersep> sql <identifiersep> state ( ) + <string_literal> + e . get <identifiersep> class ( ) . get <identifiersep> name ( ) + \n \t6 <string_literal> + e . get <identifiersep> message ( ) + <string_literal> ) ; \n \t4 } catch ( txn <identifiersep> handler . retry <identifiersep> exception de ) { \n <ect>
\t3 if ( r != null ) { \n \t4 final json <identifiersep> backed <identifiersep> complex <identifiersep> stub <identifiersep> person <identifiersep> attribute <identifiersep> dao dao = new json <identifiersep> backed <identifiersep> complex <identifiersep> stub <identifiersep> person <identifiersep> attribute <identifiersep> dao ( r ) ; \n \t4 dao . set <identifiersep> order ( json . get <identifiersep> order ( ) ) ; \n \t4 dao . init ( ) ; \n <ect>
\t2 } catch ( unknown <identifiersep> host <identifiersep> exception e ) { \n \t3 logger . info ( <string_literal> , ip , e . get <identifiersep> message ( ) ) ; \n \t3 socket <identifiersep> close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 byte <identifiersep> buffer result = null ; \n \t2 try { \n \t3 result = write <identifiersep> buffer ( output <identifiersep> buffer , s <identifiersep> channel , blocking , time <identifiersep> out ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 } else if ( m <identifiersep> device instanceof digital <identifiersep> actor ) { \n \t5 ( ( digital <identifiersep> actor ) m <identifiersep> device ) . fetch <identifiersep> digital <identifiersep> value ( ) ; } } } } \n \t1 @ override \n \t1 public void binding <identifiersep> changed ( binding <identifiersep> provider provider , string item <identifiersep> name ) { \n <ect>
\t2 prepared <identifiersep> statement stmt = null ; \n \t2 try { \n \t3 cms <identifiersep> publish <identifiersep> job <identifiersep> info <identifiersep> bean current <identifiersep> job = read <identifiersep> publish <identifiersep> job ( dbc , publish <identifiersep> job . get <identifiersep> publish <identifiersep> history <identifiersep> id ( ) ) ; \n \t3 log . error ( <string_literal> + publish <identifiersep> job ) ; \n <ect>
\t4 update <identifiersep> distributed ( ) ; } \n \t2 else \n \t2 { \n \t3 system <identifiersep> distributed <identifiersep> keyspace . start <identifiersep> view <identifiersep> build ( ks <identifiersep> name , view . name , local <identifiersep> host <identifiersep> id ) ; \n <ect>
\t10 string xml = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( string . class ) ; \n \t10 assert <identifiersep> true ( xml , xml . contains ( <string_literal> ) ) ; \n \t10 int num = tiny . increment <identifiersep> and <identifiersep> get ( ) ; \n \t10 if ( num % <number_literal> == 0 ) { \n <ect>
\t4 . set <identifiersep> row <identifiersep> limit ( <number_literal> ) \n \t4 . set <identifiersep> repeat <identifiersep> last <identifiersep> token ( false ) \n \t4 . execute <identifiersep> with <identifiersep> callback ( callback ) ; \n \t3 set < long > set = callback . get ( ) ; \n <ect>
\t1 huedatabase = new sqlite <identifiersep> query <identifiersep> set <identifiersep> hue <identifiersep> db ( ) ; \n \t1 logger . info ( <string_literal> ) ; \n \t1 } else if ( view . get <identifiersep> properties ( ) . get ( <string_literal> ) . contains ( <string_literal> ) ) { \n \t1 huedatabase = new oracle <identifiersep> query <identifiersep> set <identifiersep> hue <identifiersep> db ( ) ; \n <ect>
\t3 if (  <identifiersep> config <identifiersep> file . exists ( ) ) { \n \t4 try { \n \t5 data <identifiersep> helper . load <identifiersep> props (  <identifiersep> config ,  <identifiersep> config <identifiersep> file ) ; \n \t4 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t5 log . info ( <string_literal> + s ) ; } } \n \t3 if ( command <identifiersep> line <identifiersep> args == null || command <identifiersep> line <identifiersep> args . length == 0 ) { \n \t4 log . info ( <string_literal> ) ; } \n \t3 else { \n <ect>
\t1 public void init ( ) throws exception { \n \t2 super . init ( ) ; \n \t2 timer = get <identifiersep> transport ( ) . get <identifiersep> timer ( ) ; \n \t2 if ( timeout > 0 && resend <identifiersep> interval > 0 && resend <identifiersep> interval >= timeout ) { \n <ect>
\t4 . set <identifiersep> dry <identifiersep> run ( true ) \n \t4 . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> state ( ) ; \n \t2 assert <identifiersep> that ( state . get <identifiersep> routing <identifiersep> nodes ( ) . unassigned ( ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t2 assert <identifiersep> that ( state . get <identifiersep> routing <identifiersep> nodes ( ) . node ( state . nodes ( ) . resolve <identifiersep> node ( node <identifiersep> 1 ) . get <identifiersep> id ( ) ) . iterator ( ) . next ( ) . state ( ) , equal <identifiersep> to ( shard <identifiersep> routing <identifiersep> state . initializing ) ) ; \n <ect>
\t1 public list < quota <identifiersep> usage <identifiersep> vo > aggregate <identifiersep> pending <identifiersep> quota <identifiersep> records <identifiersep> for <identifiersep> account ( final account <identifiersep> vo account , final pair < list < ? extends usage <identifiersep> vo > , integer > usage <identifiersep> records ) { \n \t2 list < quota <identifiersep> usage <identifiersep> vo > quota <identifiersep> list <identifiersep> for <identifiersep> account = new array <identifiersep> list < > ( ) ; \n \t2 if ( usage <identifiersep> records == null || usage <identifiersep> records . first ( ) == null || usage <identifiersep> records . first ( ) . is <identifiersep> empty ( ) ) { \n \t3 return quota <identifiersep> list <identifiersep> for <identifiersep> account ; } \n <ect>
\t1 public caching <identifiersep> ticket <identifiersep> registry ( final cipher <identifiersep> executor cipher <identifiersep> executor , final logout <identifiersep> manager logout <identifiersep> manager ) { \n \t2 super ( cipher <identifiersep> executor ) ; \n \t2 this . storage = caffeine . new <identifiersep> builder ( ) . initial <identifiersep> capacity ( initial <identifiersep> cache <identifiersep> size ) . maximum <identifiersep> size ( max <identifiersep> cache <identifiersep> size ) \n \t3 . expire <identifiersep> after ( new cached <identifiersep> ticket <identifiersep> expiration <identifiersep> policy ( ) ) . removal <identifiersep> listener ( new cached <identifiersep> ticket <identifiersep> removal <identifiersep> listener ( ) ) . build ( s - > { \n <ect>
\t2 xpath += <string_literal> + o . name + <string_literal> ; \n \t1 } else if ( o . value && o . value != = 'null' ) { \n \t2 xpath += <string_literal> + o . value + <string_literal> ; \n \t1 } else { \n <ect>
\t2 string method <identifiersep> name = get <identifiersep> get <identifiersep> method <identifiersep> name ( <string_literal> , prop <identifiersep> name ) ; \n \t2 try { \n \t3 method = o . get <identifiersep> class ( ) . get <identifiersep> method ( method <identifiersep> name ) ; \n \t2 } catch ( security <identifiersep> exception e1 ) { \n <ect>
\t2 log . info ( string . format ( <string_literal> , ranges . size ( ) / ( ( t2 - t1 ) / <number_literal> . 0 ) ) ) ; \n \t2 if ( ! found . equals ( expected ) ) \n \t2 throw new exception ( <string_literal> + found + <string_literal> + expected ) ; } } \n \t1 splits = get <identifiersep> connector ( ) . table <identifiersep> operations ( ) . list <identifiersep> splits ( table <identifiersep> name ) ; \n <ect>
\t1 private static void set <identifiersep> required <identifiersep> properties ( properties zk <identifiersep> props ) { \n \t2 <comment> \n \t2 if ( zk <identifiersep> props . get <identifiersep> property ( <string_literal> ) == null ) { \n \t3 zk <identifiersep> props . set <identifiersep> property ( <string_literal> , string . value <identifiersep> of ( default <identifiersep> zookeeper <identifiersep> client <identifiersep> port ) ) ; \n <ect>
\t5 inet6address v6addr = ( inet6address ) addr ; \n \t5 <comment> \n \t5 <comment> \n \t5 <comment> \n <ect>
\t2 string key <identifiersep> str = <string_literal> ; \n \t2 try { \n \t2 auth <identifiersep> str = new string ( auth <identifiersep> data , <string_literal> ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 c = conn ; \n \t2 config = ovm3config ; \n \t2 pool = ovm3pool ; } \n \t1 public final answer execute ( final copy <identifiersep> command cmd ) { \n <ect>
\t6 { \n \t7 break ; } \n \t6 i ++ ; } \n \t5 new <identifiersep> lockset . add ( i , lock <identifiersep> eq <identifiersep> val ) ; } \n <ect>
\t3 serial <identifiersep> port . notify <identifiersep> on <identifiersep> data <identifiersep> available ( true ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 return new serial <identifiersep> communication <identifiersep> channel ( serial <identifiersep> port ) ; \n \t2 } catch ( no <identifiersep> such <identifiersep> port <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t5 if ( directory <identifiersep> to <identifiersep> fetch . validate <identifiersep> check <identifiersep> sum ( file <identifiersep> check <identifiersep> sum <identifiersep> map ) ) { \n \t6 logger . info ( <string_literal> + source <identifiersep> file <identifiersep> url ) ; \n \t5 } else { \n \t6 stats . check <identifiersep> sum <identifiersep> failed ( ) ; \n <ect>
\t2 cluster <identifiersep> state = cluster <identifiersep> state . builder ( cluster <identifiersep> state ) . nodes ( discovery <identifiersep> nodes . builder ( ) . add ( new <identifiersep> node ( <string_literal> ) ) . add ( new <identifiersep> node ( <string_literal> ) ) ) . build ( ) ; \n \t2 cluster <identifiersep> state = allocation . reroute ( cluster <identifiersep> state , <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> state = allocation . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t3 config . set <identifiersep> string ( checkpointing <identifiersep> options . savepoint <identifiersep> directory , savepoint <identifiersep> dir . to <identifiersep> uri ( ) . to <identifiersep> string ( ) ) ; \n \t3 log . info ( <string_literal> + config + <string_literal> ) ; \n \t3 <comment> \n \t3 flink = new testing <identifiersep> cluster ( config ) ; \n <ect>
\t4 file new <identifiersep> file = new file ( temp <identifiersep> file . get <identifiersep> parent ( ) , new <identifiersep> name + log <identifiersep> file <identifiersep> extension ) ; \n \t4 if ( temp <identifiersep> file . rename <identifiersep> to ( new <identifiersep> file ) ) { \n \t5 log . info ( <string_literal> , temp <identifiersep> file ) ; } \n \t4 else { \n <ect>
\t2 i18n <identifiersep> message msg = core <identifiersep> messages . transform <identifiersep> on <identifiersep> object <identifiersep> unsupported <identifiersep> type <identifiersep> of <identifiersep> endpoint ( get <identifiersep> name ( ) , src . get <identifiersep> class ( ) ) ; \n \t2 throw new message <identifiersep> transformer <identifiersep> exception ( msg , this , event . get <identifiersep> message ( ) ) ; } } \n \t1 logger . debug ( format ( <string_literal> , get <identifiersep> name ( ) , get <identifiersep> class ( ) . get <identifiersep> name ( ) ) ) ; \n <ect>
\t5  <identifiersep> state = <number_literal> ; \n \t5 outbound <identifiersep> establish <identifiersep> state oest =  <identifiersep> establisher . get <identifiersep> outbound <identifiersep> state ( rem ) ; \n \t5 if ( oest != null ) { \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 if ( num <identifiersep> records <identifiersep> in == null ) { \n \t3 try { \n \t4 num <identifiersep> records <identifiersep> in = ( ( operator <identifiersep> metric <identifiersep> group ) stream <identifiersep> operator . get <identifiersep> metric <identifiersep> group ( ) ) . get <identifiersep> io <identifiersep> metric <identifiersep> group ( ) . get <identifiersep> num <identifiersep> records <identifiersep> in <identifiersep> counter ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t4 try { \n \t5 long l = long . value <identifiersep> of ( array . get <identifiersep> string ( i ) ) . long <identifiersep> value ( ) ; \n \t5 result . add ( new date ( l ) ) ; \n \t4 } catch ( number <identifiersep> format <identifiersep> exception | json <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private void update <identifiersep> action ( coordinator <identifiersep> job <identifiersep> bean coord <identifiersep> job , coordinator <identifiersep> action <identifiersep> bean coord <identifiersep> action , string action <identifiersep> xml , \n \t3 coordinator <identifiersep> store store ) throws exception { \n <ect>
\t7 if ( entry == null ) \n \t8 entry = cctx . colocated ( ) . entry <identifiersep> exx ( key , top <identifiersep> ver , true ) ; \n \t7 if ( ! cctx . is <identifiersep> all ( entry , filter ) ) { \n <ect>
\t1 <comment> \n \t1 final runnable run = new runnable ( ) { \n \t1 public void run ( ) { \n <ect>
\t1 @ override \n \t1 public void on <identifiersep> management <identifiersep> node <identifiersep> left ( list < management <identifiersep> server <identifiersep> host <identifiersep> vo > node <identifiersep> list , long self <identifiersep> node <identifiersep> id ) { \n \t2 for ( management <identifiersep> server <identifiersep> host <identifiersep> vo node : node <identifiersep> list ) { \n \t3 if (  <identifiersep> maid <identifiersep> dao . takeover ( node . get <identifiersep> msid ( ) , self <identifiersep> node <identifiersep> id ) ) { \n <ect>
\t5 log . debug ( format ( <string_literal> , file . get <identifiersep> path ( ) ) ) ; } \n \t4 splitter . read <identifiersep> splits <identifiersep> for <identifiersep> file ( file ) ; } \n <ect>
\t5 while ( st . has <identifiersep> more <identifiersep> tokens ( ) ) { \n \t6 string extension = st . next <identifiersep> token ( ) ; \n \t6 extension <identifiersep> to <identifiersep> mimetype <identifiersep> map . put ( string <identifiersep> utils . lower <identifiersep> case ( extension ) , mimetype ) ; \n <ect>
\t1 } else if ( <string_literal> . equals <identifiersep> ignore <identifiersep> case ( value ) ) { \n \t1 log . debug ( <string_literal> , temporarystore <identifiersep> actively <identifiersep> purge . get <identifiersep> key ( ) , value ) ; \n \t1 return false ; \n \t1 } else { \n <ect>
\t2 assert <identifiersep> null ( <string_literal> , test <identifiersep> consumer . receive ( <number_literal> ) ) ; } \n \t1 protected void browse <identifiersep> dlq ( ) throws exception { \n \t2 enumeration < ? > messages = dlq <identifiersep> browser . get <identifiersep> enumeration ( ) ; \n \t2 while ( messages . has <identifiersep> more <identifiersep> elements ( ) ) { \n <ect>
\t5 long r = ctx . response . request ( ) . native <identifiersep> request ( ) ; \n \t5 save <identifiersep> post <identifiersep> event <identifiersep> data ( r , ctx ) ; \n \t5 ngx <identifiersep> http <identifiersep> clojure <identifiersep> mem <identifiersep> post <identifiersep> event ( r , null , 0 ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 + <string_literal> ) ; \n \t3 if ( input <identifiersep> sample <identifiersep> count . get ( ) != chunked <identifiersep> sample <identifiersep> count . get ( ) ) { \n \t4 log . error ( <string_literal> ) ; \n \t3 } else { \n <ect>
<comment> \n \t1 @ test \n \t1 public void test <identifiersep> mapped <identifiersep> feature ( ) throws exception { \n \t2 document doc = get <identifiersep> as <identifiersep> dom ( <string_literal> ) ; \n <ect>
\t2 if ( validate != null ) { \n \t3 try { \n \t4 do <identifiersep> validation = boolean . value <identifiersep> of ( validate ) ; \n \t3 } catch ( throwable t ) { \n <ect>
\t3 value . put ( new text ( entry . get <identifiersep> key ( ) ) , \n \t4 entry . get <identifiersep> value ( ) == null ? null <identifiersep> writable . get ( ) : new object <identifiersep> writable ( entry . get <identifiersep> value ( ) ) ) ; } \n \t2 return true ; } \n \t2 else { \n <ect>
\t4 log . info ( <string_literal> + file . get <identifiersep> absolute <identifiersep> path ( ) + <string_literal> + new date ( last <identifiersep> modified ) + <string_literal> + new date ( local <identifiersep> file . last <identifiersep> modified ( ) ) ) ; \n \t4 modified = true ; } } \n \t2 else { \n \t3 <comment> \n <ect>
<comment> \n \t1 public synchronized void remove <identifiersep> producer ( mqtt <identifiersep> message <identifiersep> producer publisher ) { \n <ect>
\t2 random r = new random ( ) ; \n \t2 op <identifiersep> timer timer = null ; \n \t2 atomic <identifiersep> long next <identifiersep> opid = new atomic <identifiersep> long ( ) ; \n <ect>
\t2 publisher . wait <identifiersep> for <identifiersep> completion ( ) ; \n \t2 list published <identifiersep> ids = publisher . get <identifiersep> i <identifiersep> ds ( ) ; \n \t2 distinct <identifiersep> published <identifiersep> count = new tree <identifiersep> set ( published <identifiersep> ids ) . size ( ) ; \n \t2 log . info ( <string_literal> + published <identifiersep> ids . size ( ) + <string_literal> + distinct <identifiersep> published <identifiersep> count ) ; \n <ect>
\t9 twitter <identifiersep> object <identifiersep> factory . clear <identifiersep> thread <identifiersep> local <identifiersep> map ( ) ; } \n \t8 json <identifiersep> object json = new json <identifiersep> object ( line ) ; \n \t8 json <identifiersep> object <identifiersep> type . type event = json <identifiersep> object <identifiersep> type . determine ( json ) ; \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 int retry =  <identifiersep> retry ; \n \t2 while ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> tick < =  <identifiersep> ops <identifiersep> timeout || -- retry > 0 ) { \n <ect>
\t2 return false ; } \n \t1 private boolean load <identifiersep> config <identifiersep> from <identifiersep> data <identifiersep> dir ( jdbc <identifiersep> loader <identifiersep> properties config ) throws io <identifiersep> exception { \n \t2 resource prop <identifiersep> file = get <identifiersep> base <identifiersep> dir ( ) . get ( replace <identifiersep> prefix ( config <identifiersep> file ) ) ; \n \t2 if ( resources . exists ( prop <identifiersep> file ) ) { \n <ect>
\t2 executor . submit ( new runnable ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n \t4 server server = new server ( config . get <identifiersep> status <identifiersep> server <identifiersep> port ( ) ) ; \n <ect>
\t2 if ( contexts == null || contexts . is <identifiersep> empty ( ) ) { \n \t3 logger . debug ( <string_literal> , this . authentication <identifiersep> context <identifiersep> attribute ) ; \n \t3 return null ; } \n \t2 contexts . stream ( ) . for <identifiersep> each ( context - > providers . remove <identifiersep> if ( provider - > ! provider . get <identifiersep> id ( ) . equals ( context ) ) ) ; \n <ect>
\t3 } catch ( exception ex ) { \n \t4 log . info ( <string_literal> , ex ) ; \n \t4 continue ; } \n \t3 if ( commit <identifiersep> root <identifiersep> doc == null ) { \n <ect>
\t6 results . add ( xml <identifiersep> output . get <identifiersep> writer ( ) . to <identifiersep> string ( ) ) ; } } \n \t3 } else { \n \t4 results . add ( result . to <identifiersep> string ( ) ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t5 answer = migrate <identifiersep> vm <identifiersep> with <identifiersep> volumes <identifiersep> across <identifiersep> cluster ( instance , vm <identifiersep> to , src <identifiersep> host , dest <identifiersep> host , volume <identifiersep> map ) ; } \n \t3 } else { \n \t4 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t5 <comment> \n \t5 tx . rollback ( ) ; \n \t5 throw e ; } \n \t3 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t1 list < llap <identifiersep> token <identifiersep> identifier > tokens = null ; \n \t1 for ( token <identifiersep> identifier id : ugi . get <identifiersep> token <identifiersep> identifiers ( ) ) { \n \t1 if ( ! llap <identifiersep> token <identifiersep> identifier . kind <identifiersep> name . equals ( id . get <identifiersep> kind ( ) ) ) continue ; \n <ect>
\t2 if ( level != null ) { \n \t3 log . debug ( <string_literal> + level ) ; \n \t3 root <identifiersep> logger . set <identifiersep> level ( level ) ; \n \t2 } else { \n <ect>
<comment> \n \t1 @ deprecated \n \t1 public long get <identifiersep> connection <identifiersep> timeout ( ) { \n <ect>
\t5 did <identifiersep> upload = true ; \n \t4 } catch ( io <identifiersep> exception e ) { \n \t5 log . error ( <string_literal> + e ) ; } } \n \t2 } else { \n <ect>
\t4 final salesforce <identifiersep> exception cause = client != null \n \t5 ? client . create <identifiersep> rest <identifiersep> exception ( response , input <identifiersep> stream ) : null ; \n \t4 if ( status == http <identifiersep> status . bad <identifiersep> request <identifiersep> <number_literal> && cause != null && is <identifiersep> invalid <identifiersep> session <identifiersep> error ( cause ) ) { \n \t5 <comment> \n <ect>
\t1 path dir = new path ( s ) ; \n \t1 try { \n \t2 file <identifiersep> status fstat = fs . get <identifiersep> file <identifiersep> status ( dir ) ; \n \t2 if ( ! fstat . is <identifiersep> directory ( ) ) { \n <ect>
\t4 { \n \t5 duration = long . parse <identifiersep> long ( duration <identifiersep> str ) ; } \n \t4 catch ( number <identifiersep> format <identifiersep> exception ex ) \n \t4 { \n <ect>
\t3 file image <identifiersep> file \n \t4 = desktop <identifiersep> util <identifiersep> activator . get <identifiersep> file <identifiersep> access <identifiersep> service ( ) \n \t5 . get <identifiersep> private <identifiersep> persistent <identifiersep> file ( file <identifiersep> name , file <identifiersep> category . cache ) ; \n \t3 if ( image <identifiersep> file . exists ( ) && ! image <identifiersep> file . delete ( ) ) \n <ect>
\t5 . put ( initial <identifiersep> settings ) \n \t5 . put ( changed <identifiersep> settings ) \n \t5 . build ( ) ; \n \t3 logger . info ( <string_literal> , merged <identifiersep> settings ) ; \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
<comment> \n \t1 public void stop ( bundle <identifiersep> context bundle <identifiersep> context ) throws exception \n \t1 { \n <ect>
\t3 btn <identifiersep> test . set <identifiersep> on <identifiersep> click <identifiersep> listener { \n \t4 val callback <identifiersep> to <identifiersep> test = selected <identifiersep> callback \n \t4 val t = task ( test <identifiersep> task ) \n \t4 try { \n <ect>
\t4 <string_literal> ) ; \n \t2 logger . error ( <string_literal> ) ; \n \t2 logger . error ( <string_literal> , \n \t4 new io <identifiersep> exception ( <string_literal> ) ) ; \n <ect>
\t1 if ( parent != null && ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( parent . get <identifiersep> pool ( ) ) && ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( parent . get <identifiersep> image ( ) ) \n \t2 && ! strings . is <identifiersep> null <identifiersep> or <identifiersep> empty ( parent . get <identifiersep> snapshot ( ) ) ) { \n \t1 rbd <identifiersep> service . delete <identifiersep> snapshot ( parent . get <identifiersep> image ( ) , parent . get <identifiersep> snapshot ( ) , parent . get <identifiersep> pool ( ) ) ; \n \t1 } else { \n <ect>
\t7 send <identifiersep> request ( owner . get <identifiersep> address ( ) , type . interrupt <identifiersep> run , \n \t8 owner . get <identifiersep> request <identifiersep> id ( ) , null ) ; } } \n \t5 else { \n <ect>
\t3 public void on <identifiersep> publish <identifiersep> message ( string sender <identifiersep> address , string subject , object args ) { \n \t4 try { \n \t5 final domain domain = domain <identifiersep> dao . find <identifiersep> by <identifiersep> id ( ( long ) args ) ; \n \t5 if ( ! add <identifiersep> group ( domain ) ) { \n <ect>
\t1 private static int handle <identifiersep> post <identifiersep> event ( long event , long pipe ) { \n \t2 int tag = ( int ) ( ( 0xff00000000000000l & event ) > > > <number_literal> ) ; \n \t2 long data = event & 0x00ffffffffffffff <identifiersep> l ; \n <ect>
\t5 object o = camel <identifiersep> context <identifiersep> helper . mandatory <identifiersep> lookup ( camel <identifiersep> context , name ) ; \n \t5 bootstrap . option ( option , o ) ; \n \t4 } else { \n \t5 bootstrap . option ( option , value ) ; } } } \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 user <identifiersep> entity = user <identifiersep> dao . find <identifiersep> by <identifiersep> pk ( user <identifiersep> id ) ; \n \t3 if ( user <identifiersep> entity == null ) { \n <ect>
\t4 @ override \n \t4 public void completed ( final boolean result ) { } \n \t4 @ override \n \t4 public void failed ( final exception ex ) { \n <ect>
\t10 problem <identifiersep> list . add ( error <identifiersep> dispatcher . create <identifiersep> javac <identifiersep> error \n <number_literal> ( name , page <identifiersep> nodes , new string <identifiersep> builder ( problem . get <identifiersep> message ( ) ) , \n <number_literal> problem . get <identifiersep> source <identifiersep> line <identifiersep> number ( ) , ctxt ) ) ; \n \t9 } catch ( jasper <identifiersep> exception e ) { \n <ect>
\t3 return null ; } \n \t2 string lock <identifiersep> address <identifiersep> str = lock <identifiersep> properties . get <identifiersep> property ( pname <identifiersep> lock <identifiersep> address ) ; \n \t2 if ( lock <identifiersep> address <identifiersep> str == null ) \n \t2 { \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + account <identifiersep> id + <string_literal> + domain <identifiersep> id + <string_literal> + adjusted <identifiersep> start <identifiersep> date \n \t7 + <string_literal> + adjusted <identifiersep> end <identifiersep> date ) ; } \n \t4 list < quota <identifiersep> balance <identifiersep> vo > qbrecords =  <identifiersep> quota <identifiersep> balance <identifiersep> dao . find <identifiersep> quota <identifiersep> balance ( account <identifiersep> id , domain <identifiersep> id , adjusted <identifiersep> start <identifiersep> date , adjusted <identifiersep> end <identifiersep> date ) ; \n <ect>
\t2 int rdiff = consistent ; \n \t2 boolean rreso = lhash != null && rhash != null ; \n \t2 if ( rreso && ! arrays . equals ( lhash , rhash ) ) \n \t2 { \n <ect>
\t2 db <identifiersep> conn . rollback ( ) ; } \n \t2 log . debug ( <string_literal> ) ; \n \t2 db <identifiersep> conn . commit ( ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 } else { \n \t3 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n \t3 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n \t3 bc <identifiersep> log . logger . warn ( <string_literal> ) ; \n <ect>
\t2 log . info ( <string_literal> + sent ) ; \n \t2 thread . sleep ( 1 * <number_literal> ) ; \n \t2 session . close ( ) ; \n \t2 con . close ( ) ; \n <ect>
\t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n \t3 logger . warn ( <string_literal> ) ; \n \t2 if ( ! pack <identifiersep> manager . v ( ) . has <identifiersep> phase ( <string_literal> ) ) \n <ect>
\t1 } else { \n \t2 <comment> \n \t2 <comment> \n \t2 if ( token <identifiersep> audience <identifiersep> list == null ) { \n <ect>
\t3 try { \n \t4 i2p <identifiersep> socket . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 performance <identifiersep> monitor . end <identifiersep> activity ( ) ; \n \t2 entity <identifiersep> set <identifiersep> delta <identifiersep> recorder = new entity <identifiersep> set <identifiersep> delta <identifiersep> recorder ( this . entity <identifiersep> ref <identifiersep> replacing <identifiersep> component <identifiersep> library ) ; \n \t2 logger . info ( <string_literal> ) ; } \n \t1 private void start <identifiersep> auto <identifiersep> saving ( ) { \n <ect>
\t3 scheduler sched = null ; \n \t3 try { \n \t4 sched = std <identifiersep> scheduler <identifiersep> factory . get <identifiersep> default <identifiersep> scheduler ( ) ; \n \t3 } catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t2 } ; \n \t1 try { \n \t2 return input <identifiersep> supplier . class . cast ( byte <identifiersep> streams . new <identifiersep> input <identifiersep> stream <identifiersep> supplier ( byte <identifiersep> streams . to <identifiersep> byte <identifiersep> array ( from ) ) ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 private void initialize ( ) { \n \t3 try { \n \t4 new dag <identifiersep> alias <identifiersep> visitor ( spark <identifiersep> plan ) . visit ( ) ; \n \t3 } catch ( visitor <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t2 conn = master . get <identifiersep> connector ( ) ; \n \t2 } catch ( accumulo <identifiersep> exception | accumulo <identifiersep> security <identifiersep> exception e ) { \n \t2 <comment> \n <ect>
\t4 result . append ( line ) ; } \n \t3 input . close ( ) ; \n \t3 return result . to <identifiersep> string ( ) ; \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t2 } catch ( runtime <identifiersep> exception e ) { \n \t3 logger . info ( <string_literal> , e ) ; \n \t3 throw new xml <identifiersep> rpc <identifiersep> exception ( e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t2 try { \n \t3 if ( null != stmt ) { \n \t3 stmt . close ( ) ; } \n \t2 } catch ( exception ex ) { \n <ect>
\t5 + get <identifiersep> canonicalized <identifiersep> headers <identifiersep> for <identifiersep> string <identifiersep> to <identifiersep> sign ( request ) + <string_literal> \n \t5 + get <identifiersep> request <identifiersep> payload <identifiersep> without <identifiersep> query <identifiersep> params ( request ) ; \n \t3 bytes <identifiersep> to <identifiersep> sign = hash ( string <identifiersep> to <identifiersep> sign ) ; } \n <ect>
\t2 return configuration ; } \n \t1 public synchronized boolean reset ( exception e ) { \n \t2 boolean answer = false ; \n \t2 if ( ( e instanceof runtime <identifiersep> exception && ( ( runtime <identifiersep> exception ) e ) . get <identifiersep> cause ( ) instanceof connect <identifiersep> exception ) || ( ( e instanceof socket <identifiersep> exception ) || ( e instanceof ssl <identifiersep> exception ) ) ) { \n <ect>
\t1 def update <identifiersep> vm <identifiersep> boot <identifiersep> records = tx ( vm <identifiersep> type . class , { vm <identifiersep> type vm <identifiersep> type - > \n \t1 vm <identifiersep> type = groovyness . expando <identifiersep> meta <identifiersep> class ( vm <identifiersep> type ) ; \n \t1 log . info ( vm <identifiersep> type . dump ( ) ) \n \t1 if ( pre . old <identifiersep> vm <identifiersep> types . contains <identifiersep> key ( vm <identifiersep> type . get <identifiersep> name ( ) ) ) { \n <ect>
\t2 import <identifiersep> error ( symbol sym , module scope <identifiersep> module ) { \n \t3 super ( hidden , sym , <string_literal> ) ; \n \t3 this . scope <identifiersep> module = scope <identifiersep> module ; \n \t3 if ( debug <identifiersep> resolve ) \n <ect>
\t3 for ( entry < string , intercept <identifiersep> strategy > entry : intercept <identifiersep> strategies . entry <identifiersep> set ( ) ) { \n \t4 intercept <identifiersep> strategy strategy = entry . get <identifiersep> value ( ) ; \n \t4 <comment> \n \t4 if ( ! get <identifiersep> context ( ) . get <identifiersep> intercept <identifiersep> strategies ( ) . contains ( strategy ) ) { \n <ect>
\t4 query <identifiersep> metrics = new query <identifiersep> metrics ( intervals ) . register <identifiersep> with ( name ) ; \n \t4 metrics <identifiersep> map . put ( name , query <identifiersep> metrics ) ; \n \t4 return query <identifiersep> metrics ; \n \t3 } catch ( metrics <identifiersep> exception e ) { \n <ect>
\t1 if ( null != rs ) { \n \t2 try { \n \t2 rs . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t4 logger . warn ( <string_literal> \n \t5 + <string_literal> \n \t5 + <string_literal> , resolver . get <identifiersep> class ( ) . get <identifiersep> simple <identifiersep> name ( ) ) ; } } \n \t2 if ( principal == null ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 storage <identifiersep> limit <identifiersep> level = storage <identifiersep> limit <identifiersep> level . no <identifiersep> limit ; \n \t3 logger . debug ( <string_literal> ) ; } \n \t2 if ( ! loosened <identifiersep> column <identifiersep> d . is <identifiersep> empty ( ) ) { <comment> \n \t3 storage <identifiersep> limit <identifiersep> level = storage <identifiersep> limit <identifiersep> level . no <identifiersep> limit ; \n <ect>
\t3 final enumeration < url > e ; \n \t3 try { \n \t4 e = class <identifiersep> loader . get <identifiersep> resources ( config <identifiersep> file ) ; \n \t3 } catch ( io <identifiersep> exception exc ) { \n <ect>
\t4 assert <identifiersep> equals ( ( int ) stress <identifiersep> cluster . get <identifiersep> metrics ( ) . get <identifiersep> open <identifiersep> connections ( ) . get <identifiersep> value ( ) , \n \t6 core <identifiersep> connections * nb <identifiersep> of <identifiersep> sessions + 1 ) ; \n \t4 assert <identifiersep> equals ( channel <identifiersep> monitor . open <identifiersep> channels ( get <identifiersep> contact <identifiersep> points <identifiersep> with <identifiersep> ports ( ) ) . size ( ) , core <identifiersep> connections * nb <identifiersep> of <identifiersep> sessions + 1 ) ; \n \t4 <comment> \n <ect>
<comment> \n \t1 public boolean set <identifiersep> watch <identifiersep> global ( boolean enabled , int verbosity <identifiersep> mask , fcp <identifiersep> server server ) { \n \t2 if ( is <identifiersep> global <identifiersep> queue ) { \n <ect>
\t1 public object peek <identifiersep> params ( ) { \n \t2 try { \n \t3 return ( params . peek ( ) ) ; \n \t2 } catch ( empty <identifiersep> stack <identifiersep> exception e ) { \n <ect>
\t2 if ( this . token <identifiersep> repository . exists ( uid , otp ) ) { \n \t3 throw new account <identifiersep> expired <identifiersep> exception ( uid + <string_literal> + otp + <string_literal> ) ; } \n \t2 boolean is <identifiersep> code <identifiersep> valid = this . google <identifiersep> authenticator <identifiersep> instance . authorize ( acct . get <identifiersep> secret <identifiersep> key ( ) , otp ) ; \n \t2 if ( ! is <identifiersep> code <identifiersep> valid && acct . get <identifiersep> scratch <identifiersep> codes ( ) . contains ( otp ) ) { \n <ect>
\t4 . append ( proxy <identifiersep> granting <identifiersep> ticket <identifiersep> id ) ; \n \t2 if ( this . http <identifiersep> client . is <identifiersep> valid <identifiersep> end <identifiersep> point ( string <identifiersep> buffer . to <identifiersep> string ( ) ) ) { \n \t3 logger . debug ( <string_literal> , proxy <identifiersep> iou , service <identifiersep> credentials ) ; \n \t3 return proxy <identifiersep> iou ; } \n <ect>
\t2 if ( cached <identifiersep> matches . contains <identifiersep> key ( uri ) ) { \n \t3 return cached <identifiersep> matches . get ( uri ) ; } \n \t2 for ( url <identifiersep> mapping mapping : mappings ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 final string cmd = <string_literal> + ( new <identifiersep> state ? <string_literal> : <string_literal> ) + io <identifiersep> nr + user + password ; \n <ect>
\t1 public void shutdown ( ) { \n \t2 ignition . stop <identifiersep> all ( true ) ; } \n \t1 private ignite <identifiersep> cache < string , ticket > get <identifiersep> ignite <identifiersep> cache <identifiersep> from <identifiersep> metadata ( final ticket <identifiersep> definition metadata ) { \n \t2 final string map <identifiersep> name = metadata . get <identifiersep> properties ( ) . get <identifiersep> storage <identifiersep> name ( ) ; \n <ect>
\t6 logger . trace ( <string_literal> ) ; \n \t5 } catch ( io <identifiersep> exception e ) { \n \t6 logger . error ( <string_literal> , e ) ; \n \t5 } catch ( gss <identifiersep> exception e ) { \n <ect>
\t2 if ( ref <identifiersep> uri == null ) { \n \t3 log . warn ( <string_literal> , ref ) ; \n \t3 return null ; } \n \t2 if ( ! ref <identifiersep> uri . starts <identifiersep> with ( <string_literal> ) ) { \n <ect>
\t3 ss = idle <identifiersep> sessions . remove ( idle <identifiersep> sessions . size ( ) - 1 ) ; } \n \t2 if ( ss != null ) { \n \t3 active <identifiersep> sessions . add ( ss ) ; \n <ect>
\t4 was <identifiersep> existing = true ; \n \t3 } else { \n \t4  <identifiersep> context . stat <identifiersep> manager ( ) . update <identifiersep> frequency ( <string_literal> ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n <ect>
\t2 } else { \n \t3 style . set <identifiersep> color ( text <identifiersep> formatting . green ) ; } \n \t2 bc <identifiersep> log . logger . info ( <string_literal> + result . status ) ; \n \t2 bc <identifiersep> log . logger . info ( <string_literal> + result . url ) ; \n <ect>
<comment> \n \t2 if ( ! req . send ( ) ) { \n <ect>
\t3 internal <identifiersep> run <identifiersep> background <identifiersep> update <identifiersep> operations ( ) ; \n \t2 } catch ( runtime <identifiersep> exception e ) { \n \t3 if ( is <identifiersep> disposed . get ( ) ) { \n \t4 return ; } \n <ect>
\t2 ca = mi . locate <identifiersep> code <identifiersep> attribute ( ) ; \n \t2 if ( ca == null ) continue ; \n \t2 bc = unparse <identifiersep> method ( mi ) ; \n \t2 if ( bc == null ) { \n <ect>
\t2 cluster <identifiersep> state = strategy . reroute ( cluster <identifiersep> state , <string_literal> ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( started ) . size ( ) , equal <identifiersep> to ( 0 ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( initializing ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t2 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shards <identifiersep> with <identifiersep> state ( unassigned ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n <ect>
\t2 for ( enum <identifiersep> definition e : database . get <identifiersep> enums ( schema ) ) { \n \t3 try { \n \t4 generate <identifiersep> enum ( e ) ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 try { \n \t4 selection <identifiersep> key key = chan . register (  <identifiersep> selector , selection <identifiersep> key . op <identifiersep> accept ) ; \n \t4 key . attach ( chan ) ; \n \t3 } catch ( closed <identifiersep> channel <identifiersep> exception cce ) { \n <ect>
\t4 logger . trace ( <string_literal> ) ; \n \t4 process <identifiersep> groupings <identifiersep> report ( serial <identifiersep> message , offset ) ; \n \t4 return ; \n \t3 default : \n <ect>
\t2 service <identifiersep> users . set <identifiersep> wordpress <identifiersep> authentication ( config . get <identifiersep> authentication ( ) ) ; \n \t2 this . services = new hash <identifiersep> map < > ( ) ; \n \t2 this . services . put ( wordpress <identifiersep> service <identifiersep> posts . class , service <identifiersep> posts ) ; \n \t2 this . services . put ( wordpress <identifiersep> service <identifiersep> users . class , service <identifiersep> users ) ; \n <ect>
\t1 { \n \t2 <comment> \n \t2 if ( ! open <identifiersep> ssl . is <identifiersep> available ( ) ) \n \t2 { \n <ect>
\t1 if ( ! rs . next ( ) ) { \n \t2 fail ( <string_literal> ) ; } \n \t1 int real <identifiersep> num <identifiersep> rows = rs . get <identifiersep> int ( 1 ) ; \n \t1 assert <identifiersep> equals ( num <identifiersep> rows , real <identifiersep> num <identifiersep> rows ) ; \n <ect>
\t5 ldap <identifiersep> authz . is <identifiersep> allow <identifiersep> multiple <identifiersep> results ( ) , \n \t5 ldap <identifiersep> authz . get <identifiersep> group <identifiersep> attribute ( ) , \n \t5 ldap <identifiersep> authz . get <identifiersep> group <identifiersep> prefix ( ) , \n \t5 ldap <identifiersep> authorization <identifiersep> generator <identifiersep> group <identifiersep> search <identifiersep> executor ( ) ) ; } \n <ect>
\t2 assert <identifiersep> null ( message ) ; \n \t2 assert <identifiersep> no <identifiersep> messages <identifiersep> left ( connection ) ; \n \t2 <comment> \n \t2 connection . request ( create <identifiersep> rollback <identifiersep> transaction ( connection <identifiersep> info , txid ) ) ; \n <ect>
\t4 if ( e . get <identifiersep> message ( ) . contains ( <string_literal> ) ) { \n \t5 <comment> \n \t5 logger . warn ( <string_literal> + nexus <identifiersep> url + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t4 } else { \n <ect>
\t3 } finally { \n \t4 io <identifiersep> utils . close <identifiersep> quietly ( w ) ; } } } \n \t1 private static map < string , long > load <identifiersep> mapping <identifiersep> data ( file mapping <identifiersep> file ) throws file <identifiersep> not <identifiersep> found <identifiersep> exception { \n \t2 map < string , long > mapping = new hash <identifiersep> map < string , long > ( ) ; \n <ect>
\t2 builder . type ( media <identifiersep> type ) ; } \n \t2 retry <identifiersep> helper . clear <identifiersep> affected <identifiersep> clusters ( ) ; \n \t2 return builder . build ( ) ; } \n \t1 } else { \n <ect>
\t1 protected void tear <identifiersep> down ( ) throws exception { \n \t2 log . info ( <string_literal> ) ; \n \t2 if ( broker != null ) { \n \t3 broker . stop ( ) ; } \n <ect>
\t5 log . debug ( <string_literal> + q ) ; \n \t5  <identifiersep> display <identifiersep> group . set <identifiersep> qualifier ( q ) ; \n \t5  <identifiersep> display <identifiersep> group . update <identifiersep> displayed <identifiersep> objects ( ) ; \n \t4 } else { \n <ect>
\t2 public void group <identifiersep> name <identifiersep> changed ( server <identifiersep> stored <identifiersep> group <identifiersep> event evt ) \n \t2 { \n \t3 synchronized ( this ) \n \t3 { \n <ect>
public string distict ( ) { \n \t1 return ( string ) stored <identifiersep> value <identifiersep> for <identifiersep> key (  <identifiersep> city . distict <identifiersep> key ) ; } \n public void set <identifiersep> distict ( string value ) { \n <ect>
\t3 if ( cached <identifiersep> loader == null || ! cached <identifiersep> loader . is ( spec ) ) { \n \t4 cached <identifiersep> class <identifiersep> loader new <identifiersep> loader = get <identifiersep> and <identifiersep> retain <identifiersep> loader ( class <identifiersep> path , spec , id ) ; \n \t4 by <identifiersep> id . put ( id , new <identifiersep> loader ) ; \n \t4 if ( cached <identifiersep> loader != null ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 result = result &&  <identifiersep> nw <identifiersep> helper . send <identifiersep> commands <identifiersep> to <identifiersep> router ( router , cmds ) ; \n \t2 } else if ( router . get <identifiersep> state ( ) == state . stopped ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + router + <string_literal> ) ; \n \t2 } else { \n <ect>
\t4 cms <identifiersep> app <identifiersep> workplace <identifiersep> ui . get ( ) . enable <identifiersep> global <identifiersep> shortcuts ( ) ; \n \t4 m <identifiersep> file <identifiersep> table . clear <identifiersep> selection ( ) ; } \n \t3 m <identifiersep> context . finish ( collections . singleton <identifiersep> list ( m <identifiersep> edit <identifiersep> id ) ) ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t2 stop <identifiersep> watch watch = new stop <identifiersep> watch ( ) ; \n \t2 for ( int i = 0 ; i < size ; i ++ ) { \n \t3 object out = template . request <identifiersep> body ( <string_literal> , <string_literal> + i ) ; \n \t3 assert <identifiersep> equals ( <string_literal> + i , out ) ; } \n <ect>
\t5 clear <identifiersep> map ( cl . get <identifiersep> superclass ( ) , loader , tomcat <identifiersep> resource <identifiersep> entries <identifiersep> field ) ; \n \t4 } catch ( exception e ) { \n \t5 log . warn ( <string_literal> , cl . get <identifiersep> superclass ( ) . get <identifiersep> name ( ) , e ) ; } } \n \t2 } catch ( exception e ) { \n <ect>
\t2 while ( port <identifiersep> iterator . has <identifiersep> next ( ) && ! attempt <identifiersep> to <identifiersep> bind ( port <identifiersep> iterator . next ( ) ) ) { } \n \t2 if ( server <identifiersep> address != null ) { \n \t3 log . info ( <string_literal> , server <identifiersep> name , server <identifiersep> address ) ; \n \t2 } else { \n <ect>
\t2 } finally { \n \t3 <comment> \n \t3 monitor <identifiersep> session <identifiersep> thread . interrupt ( ) ; \n \t3 logger . info ( <string_literal> ) ; } \n <ect>
\t4 ret = 0 ; \n \t4 system . out . println ( <string_literal> ) ; \n \t3 } catch ( throwable e ) { \n \t4 <comment> \n <ect>
\t4 mac . update ( request . get <identifiersep> bytes ( ) ) ; \n \t4 final byte [ ] encrypted <identifiersep> bytes = mac . do <identifiersep> final ( ) ; \n \t4 return new string ( base64 . encode <identifiersep> base64 ( encrypted <identifiersep> bytes ) ) ; } \n \t2 } catch ( final exception ex ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t1 private void process <identifiersep> accept ( selection <identifiersep> key key ) { \n \t2 <comment> \n <ect>
\t2 final properties props = new properties ( ) ; \n \t2 try ( reader r = files . new <identifiersep> buffered <identifiersep> reader ( config <identifiersep> file . to <identifiersep> path ( ) , standard <identifiersep> charsets . utf <identifiersep> <number_literal> ) ) { \n \t3 logger . debug ( <string_literal> , config <identifiersep> file ) ; \n \t3 props . load ( r ) ; \n <ect>
\t4 int page \t3 = 1 ; \n \t4 result = app . node <identifiersep> query ( type ) . sort ( sort <identifiersep> key ) . order ( sort <identifiersep> desc ) . page ( page ) . page <identifiersep> size ( page <identifiersep> size ) . get <identifiersep> result ( ) ; \n \t4 logger . info ( <string_literal> , new object [ ] { result . get <identifiersep> raw <identifiersep> result <identifiersep> count ( ) , number } ) ; \n \t4 assert <identifiersep> true ( result . get <identifiersep> raw <identifiersep> result <identifiersep> count ( ) == number ) ; \n <ect>
<comment> \n \t1 public void destroy ( @ suppress <identifiersep> warnings ( <string_literal> ) t instance , \n \t3 @ suppress <identifiersep> warnings ( <string_literal> ) creational <identifiersep> context < t > creational <identifiersep> context ) { \n <ect>
\t3 final virtual <identifiersep> machine <identifiersep> disk <identifiersep> info disk <identifiersep> info = get <identifiersep> matching <identifiersep> existing <identifiersep> disk ( vm <identifiersep> mo . get <identifiersep> disk <identifiersep> info <identifiersep> builder ( ) , root <identifiersep> disk <identifiersep> to , hyper <identifiersep> host , context ) ; \n \t3 assert ( disk <identifiersep> info != null ) ; \n \t3 final string [ ] disk <identifiersep> chain = disk <identifiersep> info . get <identifiersep> disk <identifiersep> chain ( ) ; \n \t3 if ( disk <identifiersep> chain != null && disk <identifiersep> chain . length > 1 ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 build <identifiersep> self <identifiersep> signed <identifiersep> signing <identifiersep> cert ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 build <identifiersep> self <identifiersep> signed <identifiersep> encryption <identifiersep> cert ( ) ; \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 msg <identifiersep> type = org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . exception ; \n \t3 msg = ( org . apache . thrift . t <identifiersep> application <identifiersep> exception ) e ; \n \t3 } else { \n <ect>
\t2 file <identifiersep> utils . delete <identifiersep> directory (  <identifiersep> data <identifiersep> dir ) ; \n \t2 file <identifiersep> utils . delete <identifiersep> directory (  <identifiersep> log <identifiersep> dir ) ; } } \n \t1 catch ( interrupted <identifiersep> exception e ) \n \t1 { \n <ect>
\t2 registry = create <identifiersep> system <identifiersep> utils ( ) ; \n \t2 if ( ! is <identifiersep> headless ( ) ) { \n \t3 frame = new looks <identifiersep> frame ( auto <identifiersep> updater , configuration ) ; \n \t2 } else { \n <ect>
\t3 write <identifiersep> headers ( response , content , content <identifiersep> length ) ; \n \t3 if ( content <identifiersep> length >= 0 && request . get <identifiersep> method ( ) . equals ( <string_literal> ) ) { \n \t4 <comment> \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t4 try { \n \t5 module . uninstall ( ) ; } \n \t4 catch ( unsupported <identifiersep> operation <identifiersep> exception ignored ) { } \n \t4 catch ( security <identifiersep> module . security <identifiersep> install <identifiersep> exception e ) { \n <ect>
\t3 for ( s source <identifiersep> node : to <identifiersep> be <identifiersep> deleted ) { \n \t4 for ( iterator < abstract <identifiersep> relationship > it = actual <identifiersep> target <identifiersep> node . get <identifiersep> incoming <identifiersep> relationships ( relation . get <identifiersep> class ( ) ) . iterator ( ) ; it . has <identifiersep> next ( ) ; ) { \n \t5 final abstract <identifiersep> relationship rel = it . next ( ) ; \n \t5 if ( source <identifiersep> node . equals ( actual <identifiersep> target <identifiersep> node ) ) { \n <ect>
\t5 retry -- ; } \n \t4 if ( ! success ) { \n \t5 throw new runtime <identifiersep> exception ( <string_literal> ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 thread . current <identifiersep> thread ( ) . set <identifiersep> name ( new <identifiersep> thread <identifiersep> name ) ; \n \t3 logger . info ( <string_literal> + port ) ; \n \t3 server <identifiersep> socket = get <identifiersep> server <identifiersep> socket <identifiersep> factory ( ) . create <identifiersep> server <identifiersep> socket ( port ) ; \n \t3 while ( ! closed ) { \n <ect>
\t1 double convergence <identifiersep> delta , int max <identifiersep> iterations ) throws exception { \n \t1 path directory <identifiersep> containing <identifiersep> converted <identifiersep> input = new path ( output , directory <identifiersep> containing <identifiersep> converted <identifiersep> input ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 input <identifiersep> driver . run <identifiersep> job ( input , directory <identifiersep> containing <identifiersep> converted <identifiersep> input , <string_literal> ) ; \n <ect>
<comment> \n \t1 private key <identifiersep> holder execute <identifiersep> insert <identifiersep> and <identifiersep> return <identifiersep> key <identifiersep> holder <identifiersep> internal ( final list < ? > values ) { \n <ect>
\t4 logger . debug ( <string_literal> , config . get <identifiersep> max <identifiersep> entries <identifiersep> local <identifiersep> heap ( ) ) ; \n \t4 logger . debug ( <string_literal> , config . get <identifiersep> max <identifiersep> entries <identifiersep> local <identifiersep> disk ( ) ) ; \n \t4 logger . debug ( <string_literal> , config . get <identifiersep> max <identifiersep> entries <identifiersep> in <identifiersep> cache ( ) ) ; \n \t4 logger . debug ( <string_literal> , config . get <identifiersep> persistence <identifiersep> configuration ( ) . get <identifiersep> strategy ( ) ) ; \n <ect>
\t1 next <identifiersep> rollover = 0 ; } \n \t1 catch ( io <identifiersep> exception e ) { \n \t2 if ( e instanceof interrupted <identifiersep> io <identifiersep> exception ) { \n \t3 thread . current <identifiersep> thread ( ) . interrupt ( ) ; } \n <ect>
\t2 curator <identifiersep> framework . create ( ) . with <identifiersep> mode ( create <identifiersep> mode . persistent ) . for <identifiersep> path ( <string_literal> + parent , new byte [ 0 ] ) ; \n \t1 } catch ( exception e ) { \n \t2 <comment> \n \t2 if ( ! ( e instanceof keeper <identifiersep> exception ) || ( ( keeper <identifiersep> exception ) e ) . code ( ) != keeper <identifiersep> exception . code . nodeexists ) { \n <ect>
\t2 al <identifiersep> ccontext context = alc10 . alc <identifiersep> get <identifiersep> current <identifiersep> context ( ) ; \n \t2 al <identifiersep> cdevice device = alc10 . alc <identifiersep> get <identifiersep> contexts <identifiersep> device ( context ) ; \n \t2 logger . info ( <string_literal> , al10 . al <identifiersep> get <identifiersep> string ( al10 . al <identifiersep> renderer ) , al10 . al <identifiersep> get <identifiersep> string ( al10 . al <identifiersep> vendor ) ) ; \n \t2 logger . info ( <string_literal> , alc10 . alc <identifiersep> get <identifiersep> string ( device , alc10 . alc <identifiersep> device <identifiersep> specifier ) ) ; \n <ect>
<comment> \n \t1 protected void throw <identifiersep> source <identifiersep> exception ( int retry , exception exception , string operation <identifiersep> id ) \n \t2 throws metadata <identifiersep> source <identifiersep> exception { \n \t2 throw <identifiersep> source <identifiersep> exception <identifiersep> hook ( ) ; \n <ect>
\t3 found <identifiersep> facility = syslog <identifiersep> facility . values ( ) [ facility > > <number_literal> ] ; \n \t3 found <identifiersep> severity = syslog <identifiersep> severity . values ( ) [ facility & 0x07 ] ; } \n \t2 if ( pri <identifiersep> char != ' > ' ) { \n \t3 <comment> \n <ect>
\t6 cancel <identifiersep> tasks ( ) ; \n \t6  <identifiersep> reconnect <identifiersep> allowed = false ; \n \t6 answer = new answer ( cmd , true , null ) ; \n \t5 } else if ( cmd instanceof ready <identifiersep> command && ( ( ready <identifiersep> command ) cmd ) . get <identifiersep> details ( ) != null ) { \n <ect>
\t3 pko . update ( ) ; \n \t3 assert . assert <identifiersep> equals ( pkoread . get <identifiersep> versioned <identifiersep> name ( ) , pko . get <identifiersep> versioned <identifiersep> name ( ) ) ; \n \t3 assert . assert <identifiersep> true ( pkoread . equals <identifiersep> key ( pko ) ) ; \n \t3 assert . assert <identifiersep> true ( pko . equals <identifiersep> key ( optional2nd <identifiersep> key ) ) ; } \n <ect>
\t1 public ejb <identifiersep> book read <identifiersep> from ( class < ejb <identifiersep> book > type , type generic <identifiersep> type , \n \t6 annotation [ ] annotations , media <identifiersep> type media <identifiersep> type , \n \t6 multivalued <identifiersep> map < string , string > http <identifiersep> headers , input <identifiersep> stream entity <identifiersep> stream ) \n \t3 throws io <identifiersep> exception , web <identifiersep> application <identifiersep> exception { \n <ect>
\t4 metadata . producer <identifiersep> sequence <identifiersep> id <identifiersep> tracker . set <identifiersep> audit <identifiersep> depth ( max <identifiersep> audit <identifiersep> depth ) ; \n \t4 metadata . producer <identifiersep> sequence <identifiersep> id <identifiersep> tracker . set <identifiersep> maximum <identifiersep> number <identifiersep> of <identifiersep> producers <identifiersep> to <identifiersep> track ( max <identifiersep> num <identifiersep> producers ) ; \n \t4 requires <identifiersep> replay = false ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 logger . info ( <string_literal> , controller <identifiersep> name ) ; } \n \t4 if ( matcher . group ( <number_literal> ) . equals ( <string_literal> ) ) { \n \t5 string ip = config . get ( key ) . to <identifiersep> string ( ) ; \n \t5 device <identifiersep> config . set <identifiersep> ip ( ip ) ; \n <ect>
\t3 result . tnase = ( org . apache . accumulo . core . client . impl . thrift . thrift <identifiersep> not <identifiersep> active <identifiersep> service <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> tnase <identifiersep> is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t7 verify <identifiersep> inbound ( ) ; \n \t7 if (  <identifiersep> state == state . verified && src . has <identifiersep> remaining ( ) ) \n \t8 prepare <identifiersep> extra ( src ) ; \n \t7 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t2 try { \n \t3 file <identifiersep> properties . load ( reader ) ; \n \t3 load <identifiersep> from <identifiersep> properties ( prefix , file <identifiersep> properties , configuration ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 } else { <comment> \n \t5 hash <identifiersep> alias = alias ; \n \t5 key <identifiersep> alias = alias ; } \n \t3 } catch ( io <identifiersep> exception | general <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t2 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , e ) ; \n \t3 t . send <identifiersep> response <identifiersep> headers ( <number_literal> , - 1 ) ; \t2 <comment> \n \t2 } catch ( out <identifiersep> of <identifiersep> memory <identifiersep> error e ) { \n <ect>
\t1 public boolean upload ( final int idx ) { \n \t2 final string cluster <identifiersep> name = context . get <identifiersep> cluster <identifiersep> name ( ) ; \n \t2 final topology <identifiersep> metric <identifiersep> data <identifiersep> info summary = context . get <identifiersep> metric <identifiersep> data <identifiersep> info <identifiersep> from <identifiersep> cache ( idx ) ; \n \t2 if ( summary == null ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 authorization return <identifiersep> authorization = authorization . do <identifiersep> void ( api <identifiersep> context ) ; \n <ect>
\t1 for ( email <identifiersep> template template : templates ) { \n \t1 email <identifiersep> message email = template . format ( notification ) ; \n \t1 if ( email != null ) { \n \t2 return email ; } } \n <ect>
\t3 mock <identifiersep> services . put ( key , service ) ; } \n \t2 return service ; } \n \t1 public void start ( ) throws mock <identifiersep> runner <identifiersep> manager <identifiersep> exception { \n <ect>
\t7 dev . get <identifiersep> address ( ) , ramptime ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n \t4 logger . error ( <string_literal> , nm ( ) , e ) ; \n \t3 } catch ( field <identifiersep> exception e ) { \n <ect>
\t3 close <identifiersep> connection ( device <identifiersep> id ) ; } } \n \t1 private void close <identifiersep> connection ( string device <identifiersep> id ) { \n \t2 device <identifiersep> config device = device <identifiersep> config <identifiersep> cache . get ( device <identifiersep> id ) ; \n \t2 if ( device == null ) { \n <ect>
\t3 file <identifiersep> bytes <identifiersep> written = fs <identifiersep> grp . find <identifiersep> counter ( pig <identifiersep> stats <identifiersep> util . file <identifiersep> bytes <identifiersep> written ) . get <identifiersep> value ( ) ; \n \t3 hdfs <identifiersep> bytes <identifiersep> read = fs <identifiersep> grp . find <identifiersep> counter ( pig <identifiersep> stats <identifiersep> util . hdfs <identifiersep> bytes <identifiersep> read ) . get <identifiersep> value ( ) ; \n \t3 hdfs <identifiersep> bytes <identifiersep> written = fs <identifiersep> grp . find <identifiersep> counter ( pig <identifiersep> stats <identifiersep> util . hdfs <identifiersep> bytes <identifiersep> written ) . get <identifiersep> value ( ) ; \n \t2 } else { \n <ect>
\t4 registration <identifiersep> state . connection <identifiersep> failed , \n \t4 registration <identifiersep> state <identifiersep> change <identifiersep> event . reason <identifiersep> internal <identifiersep> error , null ) ; } \n \t2 catch ( xmpp <identifiersep> exception ex ) \n \t2 { \n <ect>
\t4 expected = expected . followup ; \n \t4 break ; \n \t3 case followup : \n \t4 ensure <identifiersep> kex <identifiersep> ongoing ( ) ; \n <ect>
\t1 if ( closeable != null ) { \n \t1 try { \n \t2 closeable . close ( ) ; \n \t1 } catch ( sql <identifiersep> exception sqle ) { \n <ect>
\t5 if ( index <identifiersep> str != null ) { \n \t6 index = integer . parse <identifiersep> int ( index <identifiersep> str ) ; \n \t6 parsed <identifiersep> index = true ; } \n \t4 } catch ( number <identifiersep> format <identifiersep> exception nfe ) { \n <ect>
\t5 s <identifiersep> logger . info ( <string_literal> + host . get <identifiersep> msid ( ) + <string_literal> + host . get <identifiersep> name ( ) + <string_literal> + host . get <identifiersep> service <identifiersep> ip ( ) + <string_literal> + host . get <identifiersep> version ( ) ) ; } \n \t3 list < management <identifiersep> server <identifiersep> host <identifiersep> vo > down <identifiersep> host <identifiersep> list = new array <identifiersep> list < management <identifiersep> server <identifiersep> host <identifiersep> vo > ( ) ; \n \t3 for ( management <identifiersep> server <identifiersep> host <identifiersep> vo host : inactive <identifiersep> list ) { \n \t4 if ( ! ping <identifiersep> management <identifiersep> node ( host ) ) { \n <ect>
\t5 try { \n \t6 admin <identifiersep> cms . lock <identifiersep> resource ( previous <identifiersep> image ) ; \n \t6 admin <identifiersep> cms . delete <identifiersep> resource ( previous <identifiersep> image , cms <identifiersep> resource . delete <identifiersep> remove <identifiersep> siblings ) ; \n \t5 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> equals ( <string_literal> , \n \t3 chat <identifiersep> room <identifiersep> member <identifiersep> role . moderator , role <identifiersep> event <identifiersep> user3 . get <identifiersep> previous <identifiersep> role ( ) ) ; \n \t2 assert <identifiersep> equals ( <string_literal> , \n \t3 chat <identifiersep> room <identifiersep> member <identifiersep> role . member , role <identifiersep> event <identifiersep> user3 . get <identifiersep> new <identifiersep> role ( ) ) ; \n <ect>
\t5 } catch ( exception e ) { \n \t6 on <identifiersep> apply <identifiersep> error ( <string_literal> + source <identifiersep> name + <string_literal> + e + <string_literal> + pod , e ) ; } } } \n \t2 } else { \n \t3 if ( ! is <identifiersep> allow <identifiersep> create ( ) ) { \n <ect>
\t7 database . get <identifiersep> database <identifiersep> filename ( ) + \n \t7 <string_literal> <ect>
\t2 string result = execute <identifiersep> query ( <string_literal> ) ; \n \t2 log . info ( <string_literal> + result ) ; \n \t2 assert <identifiersep> false ( <string_literal> , result . contains ( <string_literal> ) ) ; \n \t2 result = execute <identifiersep> query ( <string_literal> ) ; \n <ect>
\t3 while ( listener <identifiersep> implementations . has <identifiersep> next ( ) ) { \n \t4 try { \n \t5 step <identifiersep> listener listener = listener <identifiersep> implementations . next ( ) ; \n \t5 if ( ! is <identifiersep> a <identifiersep> core ( listener ) ) { \n <ect>
\t2 boolean global <identifiersep> nested <identifiersep> v = vmware <identifiersep> enable <identifiersep> nested <identifiersep> virtualization . value ( ) ; \n \t2 boolean global <identifiersep> nested <identifiersep> v <identifiersep> per <identifiersep> vm = vmware <identifiersep> enable <identifiersep> nested <identifiersep> virtualization <identifiersep> per <identifiersep> vm . value ( ) ; \n \t2 string local <identifiersep> nested <identifiersep> v = details . get ( vm <identifiersep> detail <identifiersep> constants . nested <identifiersep> virtualization <identifiersep> flag ) ; \n \t2 boolean should <identifiersep> enable <identifiersep> nested <identifiersep> virtualization = should <identifiersep> enable <identifiersep> nested <identifiersep> virtualization ( global <identifiersep> nested <identifiersep> v , global <identifiersep> nested <identifiersep> v <identifiersep> per <identifiersep> vm , local <identifiersep> nested <identifiersep> v ) ; \n <ect>
\t3 try { \n \t4 json = mapper . writer <identifiersep> with <identifiersep> default <identifiersep> pretty <identifiersep> printer ( ) \n \t5 . write <identifiersep> value <identifiersep> as <identifiersep> string ( schema ) ; \n \t3 } catch ( json <identifiersep> processing <identifiersep> exception e ) { \n <ect>
\t2 if ( status != status . download <identifiersep> finished ) { \n \t3 return null ; } \n \t2 return s3utils . get <identifiersep> object <identifiersep> stream ( s3to , s3to . get <identifiersep> bucket <identifiersep> name ( ) , s3key ) ; } \n \t1 public void cleanup <identifiersep> after <identifiersep> error ( ) { \n <ect>
\t5 pstmt . set <identifiersep> long ( 1 , network <identifiersep> id ) ; \n \t5 pstmt . execute <identifiersep> update ( ) ; } \n \t4 rs . close ( ) ; \n \t4 pstmt . close ( ) ; } \n <ect>
\t1 public erd <identifiersep> assignment ( string key , object value ) { super ( key , value ) ; } \n \t1 protected boolean boolean <identifiersep> context <identifiersep> value <identifiersep> for <identifiersep> key ( d2w <identifiersep> context c , string key , boolean default <identifiersep> value ) { \n \t2 return erx <identifiersep> value <identifiersep> utilities . boolean <identifiersep> value <identifiersep> with <identifiersep> default ( c . value <identifiersep> for <identifiersep> key ( key ) , default <identifiersep> value ) ; } \n \t1 protected static void log <identifiersep> deprecated <identifiersep> message ( class old <identifiersep> class , class new <identifiersep> class ) { \n <ect>
\t3 value <identifiersep> item . set <identifiersep> value <identifiersep> type ( <number_literal> ) ; \n \t2 } else if ( <string_literal> . equals ( type ) ) { \n \t3 value <identifiersep> item . set <identifiersep> value <identifiersep> type ( <number_literal> ) ; \n \t2 } else { \n <ect>
\t6 . add <identifiersep> web <identifiersep> socket <identifiersep> listener ( new web <identifiersep> socket <identifiersep> text <identifiersep> listener ( ) { \n \t7 @ override \n \t7 public void on <identifiersep> message ( string message ) { \n \t8 received . add ( message ) ; \n <ect>
\t4 @ override \n \t4 public void run ( ) { \n \t5 <comment> \n \t5 try { \n <ect>
\t2 result result = result . empty <identifiersep> result ; \n \t2 try { \n \t3 result = resource . do <identifiersep> get ( sort <identifiersep> key , sort <identifiersep> descending , page <identifiersep> size , page ) ; \n \t2 } catch ( not <identifiersep> found <identifiersep> exception nfe ) { \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 if ( request <identifiersep> id <identifiersep> value != null ) { \n \t7 if ( request <identifiersep> id <identifiersep> value != owner . get <identifiersep> request <identifiersep> id ( ) ) { \n <ect>
\t2 byte [ ] img <identifiersep> bits = null ; \n \t2 try { \n \t3 img <identifiersep> bits = image <identifiersep> helper . jpeg <identifiersep> from <identifiersep> image ( buffered <identifiersep> image ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t7 case b <identifiersep> r : \n \t7 case b <identifiersep> e : \n \t8 break ; \n \t7 default : \n <ect>
\t4 object other <identifiersep> value = method . invoke ( other <identifiersep> attribute ) ; \n \t4 if ( other <identifiersep> value != null ) { \n \t5 return <identifiersep> value & = other <identifiersep> value . equals ( this <identifiersep> value ) ; } } \n \t3 catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> not <identifiersep> null ( data <identifiersep> entry ) ; \n \t2 log . info ( <string_literal> , pretty <identifiersep> print ( data <identifiersep> entry ) ) ; \n \t2 data <identifiersep> entry = ( o <identifiersep> data <identifiersep> entry ) response <identifiersep> parts . get ( <number_literal> ) . get <identifiersep> body ( ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( data <identifiersep> entry ) ; \n <ect>
\t2 } catch ( runtime <identifiersep> fault <identifiersep> fault <identifiersep> msg e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + e . to <identifiersep> string ( ) , e ) ; \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> ) ; \n \t2 } catch ( remote <identifiersep> exception e ) { \n <ect>
\t1 string snapshot <identifiersep> point = ceph <identifiersep> rbd <identifiersep> info . snapshot <identifiersep> on <identifiersep> prefix + parent <identifiersep> volume <identifiersep> id ; \n \t1 string iqn = rbd <identifiersep> service . clone <identifiersep> and <identifiersep> resize <identifiersep> image ( parent <identifiersep> volume <identifiersep> id , snapshot <identifiersep> point , volume <identifiersep> id , null , parent . get <identifiersep> pool ( ) ) ; \n \t1 return iqn ; \n \t1 } else { \n <ect>
\t1 int pages = get <identifiersep> config ( ) . get <identifiersep> int ( model <identifiersep> prop <identifiersep> name ) ; \n \t1 log . debug ( <string_literal> + model <identifiersep> prop <identifiersep> name + <string_literal> + pages ) ; \n \t1 for ( int page = 1 ; page < = pages ; page ++ ) { \n \t1 get <identifiersep> config ( ) . clear <identifiersep> property ( model <identifiersep> prop <identifiersep> name + <string_literal> + page ) ; \n <ect>
<comment> } \n \t2 client <identifiersep> request < ? > original <identifiersep> request = complete <identifiersep> client <identifiersep> request ( ) ; \n \t2 if ( original <identifiersep> request == null && logger . is <identifiersep> enabled <identifiersep> for ( level . warn ) ) \n <ect>
\t9 if ( log <identifiersep> debug ) logger . debug ( this , <string_literal> + ssk <identifiersep> insert <identifiersep> sender . this ) ; \n \t9 next . no <identifiersep> longer <identifiersep> routing <identifiersep> to ( tag , false ) ; } \n \t8 @ override \n \t8 public void fatal <identifiersep> error ( ) { \n <ect>
<number_literal> ed . get <identifiersep> name ( ) , \n <number_literal> name ) ; \n \t6 return new evaluator <identifiersep> result <identifiersep> impl ( results , result <identifiersep> type . failure ) ; } \n \t4 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ suppress <identifiersep> warnings ( { <string_literal> } ) \n \t1 @ override public boolean on <identifiersep> owner <identifiersep> changed ( grid <identifiersep> cache <identifiersep> entry <identifiersep> ex < k , v > entry , grid <identifiersep> cache <identifiersep> mvcc <identifiersep> candidate < k > owner ) { \n <ect>
\t1 topic <identifiersep> model tmp <identifiersep> model = write <identifiersep> model ; \n \t1 write <identifiersep> model = read <identifiersep> model ; \n \t1 read <identifiersep> model = tmp <identifiersep> model ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 logger . info ( <string_literal> ) \n \t1 logger . debug ( <string_literal> . format ( registration <identifiersep> request ) ) \n \t1 response = self . blocking <identifiersep> request ( registration <identifiersep> request , constants . registration <identifiersep> endpoint ) \n \t1 logger . info ( <string_literal> ) \n <ect>
\t2 if ( bypass <identifiersep> evaluator != null && ! bypass <identifiersep> evaluator . should <identifiersep> multifactor <identifiersep> authentication <identifiersep> provider <identifiersep> execute ( authentication , registered <identifiersep> service , this , request ) ) { \n \t3 logger . debug ( <string_literal> , get <identifiersep> id ( ) ) ; \n \t3 return false ; } \n \t2 if ( supports <identifiersep> internal ( event , authentication , registered <identifiersep> service ) ) { \n <ect>
\t1 public void do <identifiersep> get ( http <identifiersep> servlet <identifiersep> request request , \n \t3 http <identifiersep> servlet <identifiersep> response response ) throws servlet <identifiersep> exception , io <identifiersep> exception { \n \t2 logger . debug ( <string_literal> + request . get <identifiersep> request <identifiersep> uri ( ) ) ; \n \t2 logger . debug ( <string_literal> + request . get <identifiersep> path <identifiersep> info ( ) ) ; \n <ect>
\t3 } catch ( throwable t ) { \n \t4 logger . warn ( <string_literal> , t ) ; } } \n \t2 servers . clear ( ) ; \n <ect>
\t2 properties = new properties ( ) ; \n \t2 properties . load ( bundle <identifiersep> data . get <identifiersep> stream ( ) ) ; \n \t1 } else { \n <ect>
\t2 if ( con != null && auto <identifiersep> commit != null ) { \n \t3 try { \n \t4 con . set <identifiersep> auto <identifiersep> commit ( auto <identifiersep> commit ) ; \n \t3 } catch ( throwable sqle ) { \n <ect>
\t2 this . template <identifiersep> mode = this . context . get <identifiersep> template <identifiersep> mode ( ) ; <comment> \n \t2 if ( this . context instanceof i <identifiersep> engine <identifiersep> context ) { \n \t3 this . engine <identifiersep> context = ( i <identifiersep> engine <identifiersep> context ) this . context ; \n \t2 } else { \n <ect>
\t2 if ( can <identifiersep> see ( bundle , language . class ) ) { \n \t3 map < string , string > languages = new hash <identifiersep> map < string , string > ( ) ; \n \t3 for ( enumeration < ? > e = bundle . get <identifiersep> entry <identifiersep> paths ( meta <identifiersep> <number_literal> <identifiersep> language ) ; e != null && e . has <identifiersep> more <identifiersep> elements ( ) ; ) { \n \t4 string path = ( string ) e . next <identifiersep> element ( ) ; \n <ect>
\t2 log . error ( <string_literal> ) ; \n \t2 log . error ( <string_literal> + \n \t4 <string_literal> + \n \t4 collected <identifiersep> header <identifiersep> output ) ; \n <ect>
\t2 current <identifiersep> value = record <identifiersep> reader . read ( ) ; \n \t2 } catch ( record <identifiersep> materialization <identifiersep> exception e ) { \n \t2 <comment> \n \t2 unmaterializable <identifiersep> record <identifiersep> counter . inc <identifiersep> errors ( e ) ; \n <ect>
\t2 } else { \n \t3 conn = node <identifiersep> port <identifiersep> to <identifiersep> socket . get ( node <identifiersep> port ) ; \n \t3 if ( conn == null ) { \n \t4 string error <identifiersep> msg = <string_literal> + node <identifiersep> port + <string_literal> ; \n <ect>
public synchronized < t extends indexed > list < t > load <identifiersep> all ( class < t > model ) { \n \t1 return load <identifiersep> all ( model , new only <identifiersep> owners <identifiersep> filtering <identifiersep> strategy ( this . context . get <identifiersep> username ( ) ) ) ; } \n @ override \n public synchronized void delete ( class model , object id ) throws item <identifiersep> not <identifiersep> found { \n <ect>
<comment> \n \t1 private void persist <identifiersep> crl <identifiersep> entries ( list < crl <identifiersep> entry > entries ) { \n \t2 file dir = new secure <identifiersep> file (  <identifiersep> context . get <identifiersep> config <identifiersep> dir ( ) , <string_literal> ) ; \n \t2 if ( ! dir . exists ( ) && ! dir . mkdir ( ) ) { \n <ect>
\t2 } catch ( invalid <identifiersep> key <identifiersep> exception | illegal <identifiersep> block <identifiersep> size <identifiersep> exception e ) { \n \t3 log . error ( <string_literal> , e . get <identifiersep> message ( ) , e ) ; \n \t3 throw new runtime <identifiersep> exception ( e ) ; } } \n \t1 } else { \n <ect>
\t4 ( extractor ) extractor . extractor <identifiersep> class ( ) . new <identifiersep> instance ( ) \n \t3 ) ; \n \t3 m . invoke ( bean <identifiersep> builder , value ) ; } \n \t2 } else { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 index ( <string_literal> , <string_literal> , integer . to <identifiersep> string ( i ) , <string_literal> , <string_literal> + i ) ; } \n \t2 refresh ( ) ; \n <ect>
\t3 synchronized ( obj ) \n \t3 { \n \t4 logger . debug ( <string_literal> ) ; \n \t4 obj . wait ( <number_literal> ) ; \n <ect>
\t2 } else { \n \t3 recipients = mail . get <identifiersep> bcc ( ) + <string_literal> + recipients ; } \n \t2 internet <identifiersep> address [ ] bcc = to <identifiersep> internet <identifiersep> addresses ( recipients ) ; \n \t2 if ( ( to == null ) && ( cc == null ) && ( bcc == null ) ) { \n <ect>
private boolean is <identifiersep> kerberos <identifiersep> auth <identifiersep> mode ( string auth <identifiersep> type ) { \n \t1 return auth <identifiersep> type . equals <identifiersep> ignore <identifiersep> case ( hive <identifiersep> auth <identifiersep> constants . auth <identifiersep> types . kerberos . to <identifiersep> string ( ) ) ; } \n private static string get <identifiersep> do <identifiersep> as <identifiersep> query <identifiersep> param ( string query <identifiersep> string ) { \n <ect>
\t1 public void test <identifiersep> get <identifiersep> feature <identifiersep> content ( ) { \n \t2 string path = <string_literal> ; \n \t2 string newline = system . get <identifiersep> property ( <string_literal> ) ; \n \t2 document doc = get <identifiersep> as <identifiersep> dom ( path ) ; \n <ect>
\t9 + <string_literal> ) \n \t5 . set <identifiersep> parameter ( <string_literal> , tab <identifiersep> to <identifiersep> undelete . get <identifiersep> template ( ) . get <identifiersep> id ( ) ) . execute <identifiersep> update ( ) ; \n \t3 logger . debug ( <comment> \n \t3 <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start ) + <string_literal> ) ; \n <ect>
\t2 long current <identifiersep> ts = downloaded <identifiersep> files . get ( path ) ; \n \t2 if ( current <identifiersep> ts == null ) { \n \t2 current <identifiersep> ts = - 1l ; } \n \t2 if ( ! new file ( local <identifiersep> file . to <identifiersep> string ( ) ) . exists ( ) || current <identifiersep> ts < time <identifiersep> stamp ) { \n <ect>
\t5 <comment> \n \t5 if ( crt <identifiersep> pb <identifiersep> ntwk ) { \n \t6 add <identifiersep> traffic <identifiersep> type ( conn , physical <identifiersep> network <identifiersep> id , <string_literal> , xen <identifiersep> public <identifiersep> label , kvm <identifiersep> public <identifiersep> label , vmware <identifiersep> public <identifiersep> label ) ; \n \t5 } else { \n <ect>
\t2 else { \n \t3 throw new arq <identifiersep> exception ( <string_literal> + str ) ; } \n \t2 list < string > line2 = parser . parse1 ( ) ; \n \t2 if ( line2 != null ) { \n <ect>
\t3 app <identifiersep> server <identifiersep> url = <string_literal> + system . get <identifiersep> property ( <string_literal> , <string_literal> ) + <string_literal> ; \n \t2 } else { \n \t3 app <identifiersep> server <identifiersep> url = <string_literal> + system . get <identifiersep> property ( <string_literal> , <string_literal> ) + <string_literal> ; } \n \t2 if ( server <identifiersep> log <identifiersep> path != null ) { \n <ect>
\t3 if ( ! match <identifiersep> when ( url , invocation ) ) { \n \t4 return invokers ; } \n \t3 list < invoker < t > > result = new array <identifiersep> list < invoker < t > > ( ) ; \n \t3 if ( then <identifiersep> condition == null ) { \n <ect>
\t3 if ( session . is <identifiersep> connected ( ) ) { \n \t4 session . do <identifiersep> work ( new rollback <identifiersep> work ( ) ) ; } \n \t3 session . close ( ) ; \n \t3 session = null ; \n <ect>
void  <identifiersep> run ( long now ) { \n \t1 <comment> \n \t1 int removed <identifiersep> keys = secret <identifiersep> manager . remove <identifiersep> expired <identifiersep> keys ( key <identifiersep> distributor ) ; \n \t1 if ( removed <identifiersep> keys > 0 ) { \n <ect>
\t4 log <identifiersep> over <identifiersep> ws = false ; } \n \t3 else { \n \t4 string pattern = conf . get ( <string_literal> ) ; \n \t4 if ( pattern == null ) { \n <ect>
\t8 save <identifiersep> config . set <identifiersep> date <identifiersep> format ( fmt ) ; \n \t8 found <identifiersep> match = true ; \n \t8 break ; \n \t7 } catch ( parse <identifiersep> exception pe ) { \n <ect>
\t1 public void on <identifiersep> success ( command <identifiersep> message < ? extends c > command <identifiersep> message , r result ) { \n \t2 delegate . on <identifiersep> success ( command <identifiersep> message , result ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> failure ( command <identifiersep> message < ? extends c > command <identifiersep> message , throwable cause ) { \n <ect>
\t2 final int port = integer . parse <identifiersep> int ( hostport . split ( <string_literal> ) [ 1 ] ) ; \n \t2 server <identifiersep> cnxn <identifiersep> factory f = server <identifiersep> cnxn <identifiersep> factory . create <identifiersep> factory ( port , - 1 ) ; \n \t2 f . startup ( zks ) ; \n \t2 try { \n <ect>
\t3 * \t1 } \n \t3 * } else { \n \t3 * \t1 log . debug ( <string_literal> ) ; \n \t3 * } \n <ect>
<comment> \n \t1 public static void set <identifiersep> logger <identifiersep> adapter ( logger <identifiersep> adapter logger <identifiersep> adapter ) { \n \t2 if ( logger <identifiersep> adapter != null ) { \n \t3 logger logger = logger <identifiersep> adapter . get <identifiersep> logger ( logger <identifiersep> factory . class . get <identifiersep> name ( ) ) ; \n <ect>
\t4 result <identifiersep> set selected <identifiersep> volumes = select <identifiersep> volumes . execute <identifiersep> query ( ) ; \n \t3 ) { \n \t3 while ( selected <identifiersep> volumes . next ( ) ) { \n \t4 long id = selected <identifiersep> volumes . get <identifiersep> long ( 1 ) ; \n <ect>
\t4 log . info ( i + <string_literal> + expected <identifiersep> list . get ( i ) . to <identifiersep> string ( ) ) ; } \n \t3 log . info ( <string_literal> ) ; \n \t3 for ( int i = 0 ; i < visit <identifiersep> list . size ( ) ; i ++ ) { \n \t4 log . info ( i + <string_literal> + visit <identifiersep> list . get ( i ) . to <identifiersep> string ( ) ) ; } } \n <ect>
\t2 try { \n \t3 manager = manager <identifiersep> template . clone <identifiersep> from <identifiersep> template ( ) ; \n \t3 manager . set <identifiersep> name ( name ) ; \n \t2 } catch ( exception x ) { \n <ect>
\t1 public void test <identifiersep> criteria <identifiersep> subquery <identifiersep> with <identifiersep> filters ( ) { \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t3 boolean continue <identifiersep> visit = ! clazz . is <identifiersep> interface ( ) ; \n \t3 if ( continue <identifiersep> visit && auto <identifiersep> closeable . class . is <identifiersep> assignable <identifiersep> from ( clazz ) ) { \n \t4 auto <identifiersep> closeable <identifiersep> lifecycle <identifiersep> action closeable <identifiersep> action = new auto <identifiersep> closeable <identifiersep> lifecycle <identifiersep> action ( \n \t6 clazz . as <identifiersep> subclass ( auto <identifiersep> closeable . class ) ) ; \n <ect>
\t2 ctx . next <identifiersep> handler <identifiersep> match ( ) . handle ( req , resp , ctx ) ; \n \t2 try { \n \t3 resp . close ( ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t4 <comment> \n \t4 iterator < proposal > txn <identifiersep> log <identifiersep> itr = db . get <identifiersep> proposals <identifiersep> from <identifiersep> txn <identifiersep> log ( \n \t6 peer <identifiersep> last <identifiersep> zxid , size <identifiersep> limit ) ; \n \t4 if ( txn <identifiersep> log <identifiersep> itr . has <identifiersep> next ( ) ) { \n <ect>
\t2 string version ; \n \t2 try { \n \t3 version = get <identifiersep> version <identifiersep> from <identifiersep> property <identifiersep> file ( ) ; \n \t2 } catch ( exception e1 ) { \n <ect>
\t2 } ) ; } \n \t1 private void do <identifiersep> update <identifiersep> message <identifiersep> group ( final string group <identifiersep> key , final timestamp updated <identifiersep> date ) { \n \t2 this . jdbc <identifiersep> template . update ( get <identifiersep> query ( query . update <identifiersep> message <identifiersep> group ) , ps - > { \n <ect>
\t4 break ; } \n \t3 if ( state . equals ( <string_literal> ) && ! tagged ) { \n \t4 tag <identifiersep> instances <identifiersep> for <identifiersep> job ( job <identifiersep> flow <identifiersep> id ) ; \n \t4 tagged = true ; } \n <ect>
\t2 try ( byte <identifiersep> array <identifiersep> input <identifiersep> stream b <identifiersep> input = new byte <identifiersep> array <identifiersep> input <identifiersep> stream ( san <identifiersep> value ) ) { \n \t3 try ( asn1input <identifiersep> stream input = new asn1input <identifiersep> stream ( b <identifiersep> input ) ) { \n \t4 oct = input . read <identifiersep> object ( ) ; \n \t3 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t2 connect <identifiersep> myself = is <identifiersep> connect <identifiersep> myself ( storm <identifiersep> conf , host , port ) ; \n \t2 address = j <identifiersep> storm <identifiersep> server <identifiersep> utils . get <identifiersep> name ( host , port ) ; \n \t2 this . enable <identifiersep> netty <identifiersep> metrics = metric <identifiersep> utils . is <identifiersep> enable <identifiersep> netty <identifiersep> metrics ( storm <identifiersep> conf ) ; \n \t2 netty <identifiersep> metric <identifiersep> instance . register ( ) ; \n <ect>
\t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , routing <identifiersep> nodes . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 routing <identifiersep> nodes = cluster <identifiersep> state . get <identifiersep> routing <identifiersep> nodes ( ) ; \n \t2 cluster <identifiersep> state = strategy . apply <identifiersep> started <identifiersep> shards ( cluster <identifiersep> state , routing <identifiersep> nodes . shards <identifiersep> with <identifiersep> state ( initializing ) ) ; \n <ect>
\t5 if ( msg . message . verb == messaging <identifiersep> service . verb . request <identifiersep> response ) \n \t6 tracing . instance . done <identifiersep> with <identifiersep> non <identifiersep> local <identifiersep> session ( state ) ; } } } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
\t3 socket . leave <identifiersep> group ( group ) ; \n \t3 socket . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t3 if ( ! stop ) { \n <ect>
\t7 fan <identifiersep> mode <identifiersep> types . add ( fan <identifiersep> mode <identifiersep> type <identifiersep> to <identifiersep> add ) ; \n \t7 logger . debug ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) , \n \t9 fan <identifiersep> mode <identifiersep> type <identifiersep> to <identifiersep> add . get <identifiersep> label ( ) , index ) ; \n \t6 } else { \n <ect>
\t3 try { \n \t4 map = storm <identifiersep> config . read <identifiersep> nimbus <identifiersep> topology <identifiersep> conf ( topology <identifiersep> id , data . get <identifiersep> blob <identifiersep> store ( ) ) ; \n \t4 delay <identifiersep> secs = j <identifiersep> storm <identifiersep> utils . parse <identifiersep> int ( map . get ( config . topology <identifiersep> message <identifiersep> timeout <identifiersep> secs ) , default <identifiersep> delay <identifiersep> seconds ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 try { \n \t2 if ( rs != null ) \n \t3 rs . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 m <identifiersep> logger . info ( statistics . to <identifiersep> string ( ) ) ; \n \t3 timer . cancel ( ) ; \n \t3 m <identifiersep> terminal <identifiersep> logger . info ( <string_literal> ) ; \n \t2 } catch ( final script <identifiersep> execution <identifiersep> exception e ) { \n <ect>
\t3 assert <identifiersep> equals ( unique <identifiersep> id , get <identifiersep> owner ( app <identifiersep> id ) ) ; \n \t3 lock . release ( ) ; \n \t3 assert <identifiersep> null ( get <identifiersep> owner ( app <identifiersep> id ) ) ; \n \t2 } catch ( final exception e ) { \n <ect>
\t1 bw . close ( ) ; \n \t1 log . info ( <string_literal> ) ; \n \t1 set < string > wals = get <identifiersep> wals <identifiersep> for <identifiersep> table ( table ) ; \n \t1 assert . assert <identifiersep> equals ( <string_literal> , <number_literal> , wals . size ( ) ) ; \n <ect>
\t6 s <identifiersep> logger . debug ( <string_literal> ) ; } } \n \t3 } else { \n <ect>
\t4 } catch ( exception e ) { \n \t4 log . error ( <string_literal> + child <identifiersep> path , \n \t5 e ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t1 string resource <identifiersep> path = app <identifiersep> base <identifiersep> path + filter <identifiersep> path + <string_literal> + filter <identifiersep> id + <string_literal> ; \n \t1 log . info ( <string_literal> + resource <identifiersep> path ) ; \n \t1 assert <identifiersep> media <identifiersep> types <identifiersep> of <identifiersep> resource ( resource <identifiersep> path , true ) ; \n \t1 resource <identifiersep> path = app <identifiersep> base <identifiersep> path + filter <identifiersep> path + <string_literal> + filter <identifiersep> id + <string_literal> ; \n <ect>
\t5  <identifiersep> log . debug ( <string_literal> + socket ) ; \n \t5 thread . sleep ( <number_literal> * <number_literal> ) ; \n \t5 socket . close ( ) ; } \n \t3 } catch ( exception e ) { \n <ect>
\t2 log . error ( <string_literal> + response ) ; \n \t2 return null ; } \n \t1 return ( list < string > ) response . get <identifiersep> response ( ) . get ( <string_literal> ) ; \n \t1 } catch ( solr <identifiersep> exception e ) { \n <ect>
\t5 ttl , \n \t5 jvm <identifiersep> memory <identifiersep> sensor . gc ) , \n \t5 polling <identifiersep> interval ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2  <identifiersep> alias <identifiersep> of = alias <identifiersep> of ; } \n \t1 @ override \n \t1 synchronized void startup ( ) { \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 { \n \t2  <identifiersep> log . warn ( <string_literal> , scheme ) ; } } } \n \t1 else \n \t1 { \n <ect>
<number_literal> break ; } \n \t10 } else { \n <number_literal> log . debug ( <string_literal> , self . get <identifiersep> server <identifiersep> state ( ) ) ; } } \n \t8 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 if ( comparator . compare ( value , entry ) < 0 ) { \n \t2 return block <identifiersep> might <identifiersep> match ; } } \n \t1 return block <identifiersep> cannot <identifiersep> match ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 throw new runtime <identifiersep> exception ( e ) ; \n \t5 } catch ( execution <identifiersep> exception e ) { \n \t6 log . error ( <string_literal> , e ) ; \n \t6 throw new runtime <identifiersep> exception ( e ) ; } \n <ect>
\t3 . build ( ) ; \n \t2 cluster <identifiersep> state = allocation . deassociate <identifiersep> dead <identifiersep> nodes ( cluster <identifiersep> state , true , <string_literal> ) ; \n \t2 <comment> \n \t2 assert <identifiersep> equals ( in <identifiersep> sync <identifiersep> set , cluster <identifiersep> state . meta <identifiersep> data ( ) . index ( <string_literal> ) . in <identifiersep> sync <identifiersep> allocation <identifiersep> ids ( 0 ) ) ; \n <ect>
\t2 session <identifiersep> cache . invalidate ( key ) ; \n \t2 session = session <identifiersep> cache . get ( key ) ; } \n \t2 session . refresh ( false ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t2 reply = this . reply <identifiersep> map . remove ( cor <identifiersep> id ) ; \n \t1 else \n \t1 { \n \t2 log . error ( <string_literal> + ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ) ) ; \n <ect>
\t3 cache ( a1 ) . put ( k , k ) ; \n \t3 if ( owners . contains ( address ( c0 ) ) || owners . contains ( address ( c1 ) ) ) { \n \t3 fail ( <string_literal> + k + <string_literal> + address ( a0 ) ) ; } \n \t2 } catch ( availability <identifiersep> exception e ) { } } \n <ect>
\t2 long last <identifiersep> time = last <identifiersep> digest . get <identifiersep> and <identifiersep> set ( system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t2 if ( ( last <identifiersep> digest . get ( ) - last <identifiersep> time ) > faults . digest <identifiersep> frequency <identifiersep> hours * <number_literal> * <number_literal> * <number_literal> ) { \n \t2 date digest <identifiersep> date = new date ( last <identifiersep> digest . get ( ) ) ; \n \t2 if ( ! service <identifiersep> exceptions . is <identifiersep> empty ( ) || ! faults . digest <identifiersep> only <identifiersep> on <identifiersep> errors ) { \n <ect>
\t6 ctx . cache ( ) . internal <identifiersep> cache ( utility <identifiersep> cache <identifiersep> name ) . context ( ) . deploy ( ) . ignore <identifiersep> ownership ( false ) ; } \n \t4 return fut ; } \n \t3 catch ( grid <identifiersep> topology <identifiersep> exception e ) { \n <ect>
\t5 get <identifiersep> controller ( table . get <identifiersep> id ( ) ) . if <identifiersep> present ( table <identifiersep> controller - > { \n \t6 if ( ( table . is <identifiersep> tournament ( ) && ! table <identifiersep> controller . is <identifiersep> tournament <identifiersep> still <identifiersep> valid ( ) ) \n \t8 || ( ! table . is <identifiersep> tournament ( ) && ! table <identifiersep> controller . is <identifiersep> match <identifiersep> table <identifiersep> still <identifiersep> valid ( ) ) ) { \n \t7 try { \n <ect>
\t3 <comment> \n \t3 out . run ( ) ; \n \t2 } catch ( socks <identifiersep> exception e ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 simple <identifiersep> field <identifiersep> set fs = null ; \n \t3 try { \n \t4 fs = new simple <identifiersep> field <identifiersep> set ( new string ( data , <string_literal> ) , false , true , false ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 <string_literal> <string_literal> <string_literal> \n \t1 if self . alert <identifiersep> reports <identifiersep> interval == 0 : \n <ect>
\t8 && arrays . equals ( get <identifiersep> digested <identifiersep> key <identifiersep> from <identifiersep> offset ( offset ) , entry . get <identifiersep> digested <identifiersep> routing <identifiersep> key ( ) ) ) { \n \t7 <comment> \n \t7 return true ; } \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 || ! constraints . contains <identifiersep> key ( alpha <identifiersep> num <identifiersep> key <identifiersep> constraint . class . get <identifiersep> name ( ) ) ) { \n \t2 log . debug ( <string_literal> ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n \t2 constraints = c . table <identifiersep> operations ( ) . list <identifiersep> constraints ( table ) ; } \n <ect>
\t3 result . success = o ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t6 case abort : \n \t7 throw ipe ; \n \t6 case skip <identifiersep> entry : \n \t7 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t4 } else if ( is <identifiersep> io ) { \n \t5 final int io <identifiersep> nr = integer . parse <identifiersep> int ( cmd . name ( ) . substring ( <number_literal> ) ) ; \n \t5 connector <identifiersep> thread . send <identifiersep> io ( io <identifiersep> nr , new <identifiersep> state <identifiersep> boolean ) ; } \n \t3 } else { \n <ect>
public void start <identifiersep> cleanup ( configuration config ) { \n \t1 try { \n \t1 hdfs <identifiersep> cleanup . start <identifiersep> instance ( config ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t4 public void transport <identifiersep> interupted ( ) { \n \t5 log . info ( <string_literal> + name + <string_literal> ) ; \n \t5 interrupted <identifiersep> count . increment <identifiersep> and <identifiersep> get ( ) ; } \n \t4 public void transport <identifiersep> resumed ( ) { \n <ect>
\t1 else \n \t2 buf . append (  <identifiersep> util . get <identifiersep> max <identifiersep> connections ( ) ) ; \n \t1 string s = buf . to <identifiersep> string ( ) ; \n \t1 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 } catch ( json <identifiersep> mapping <identifiersep> exception e ) { \n \t3 logger . error ( <string_literal> , e ) ; \n \t3 update <identifiersep> request ( cube <identifiersep> request , false , e . get <identifiersep> message ( ) ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 public serial <identifiersep> message get <identifiersep> value <identifiersep> message ( ) { \n \t2 if ( is <identifiersep> get <identifiersep> supported == false ) { \n \t3 logger . debug ( <string_literal> , this . get <identifiersep> node ( ) . get <identifiersep> node <identifiersep> id ( ) ) ; \n \t3 return null ; } \n <ect>
\t3 && lib <identifiersep> file . get <identifiersep> name ( ) . ends <identifiersep> with ( <string_literal> ) ) { \n \t3 path p = new path ( lib <identifiersep> file . to <identifiersep> string ( ) ) ; \n \t3 if ( lib <identifiersep> file . can <identifiersep> read ( ) ) { \n \t3 string qualified = p . make <identifiersep> qualified ( fs ) . to <identifiersep> string ( ) ; \n <ect>
\t1 counter <identifiersep> group . increment <identifiersep> and <identifiersep> get ( <string_literal> ) ; \n \t1 } catch ( exception ex ) { \n \t1 transaction . rollback ( ) ; \n \t1 counter <identifiersep> group . increment <identifiersep> and <identifiersep> get ( <string_literal> ) ; \n <ect>
~~~ \n placeholders can also be used in conjunction with exceptions which shall be logged . \n ~~~ java \n catch ( exception exception ) { \n <ect>
\t3 long start = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t3 log . info ( <string_literal> + this . get <identifiersep> class ( ) . get <identifiersep> name ( ) \n \t4 + <string_literal> + data <identifiersep> store <identifiersep> dir ) ; \n \t3 do <identifiersep> delete <identifiersep> record <identifiersep> test ( ) ; \n <ect>
\t6 <comment> \n \t6 <comment> \n \t6 <comment> \n \t6 if ( debug ) \n <ect>
\t3 if ( message <identifiersep> format != null ) { \n \t4 message . set <identifiersep> string <identifiersep> property ( <string_literal> , message <identifiersep> format ) ; } \n \t3 message <identifiersep> producer = session . create <identifiersep> producer ( destination ) ; \n \t3 message <identifiersep> producer . send ( message ) ; \n <ect>
\t5 logger . warn ( <string_literal> , ticket <identifiersep> id ) ; \n \t5 return null ; } \n \t4 return ticket ; } \n \t2 } else { \n <ect>
\t1 @ suppress <identifiersep> warnings ( { <string_literal> } ) \n \t1 @ nullable @ override public grid <identifiersep> dht <identifiersep> partition <identifiersep> map update ( @ nullable grid <identifiersep> dht <identifiersep> partition <identifiersep> exchange <identifiersep> id exch <identifiersep> id , \n \t2 grid <identifiersep> dht <identifiersep> partition <identifiersep> map parts ) { \n <ect>
\t1 public void thread <identifiersep> finished ( ) { \n \t2 try { \n \t3 listener . thread <identifiersep> finished ( ) ; \n \t2 } catch ( remote <identifiersep> exception err ) { \n <ect>
\t2 out <identifiersep> state . put <identifiersep> boolean ( query . intent <identifiersep> create <identifiersep> as <identifiersep> threshold , get <identifiersep> create <identifiersep> as <identifiersep> threshold ( ) ) ; } \n \t1 @ override \n \t1 public view on <identifiersep> create <identifiersep> view ( @ non <identifiersep> null layout <identifiersep> inflater inflater , view <identifiersep> group container , \n \t7 @ nullable bundle saved <identifiersep> instance <identifiersep> state ) { \n <ect>
\t3 } finally { \n \t4 log . info ( <string_literal> + host + <string_literal> + port ) ; \n \t4 socket . close ( ) ; } \n \t2 } catch ( ssl <identifiersep> handshake <identifiersep> exception e ) { \n <ect>
\t2 hudson <identifiersep> upgrade <identifiersep> job job = new hudson <identifiersep> upgrade <identifiersep> job ( get <identifiersep> core <identifiersep> source ( ) , jenkins . get <identifiersep> authentication ( ) ) ; \n \t2 if ( ! lifecycle . get ( ) . can <identifiersep> rewrite <identifiersep> hudson <identifiersep> war ( ) ) { \n \t3 send <identifiersep> error ( <string_literal> ) ; \n \t3 return ; } \n <ect>
\t6 <comment> \n \t6 subscriber <identifiersep> details . second ( channel ) ; \n \t6 s <identifiersep> subscribers . put ( subscriber <identifiersep> id , subscriber <identifiersep> details ) ; } \n \t4 } catch ( exception e ) { \n <ect>
\t2 if ( compress <identifiersep> enable && val . length > compress <identifiersep> threshold ) { \n \t3 try { \n \t5 log . info ( <string_literal> ) ; \n <ect>
\t1 } catch ( exception e1 ) { \n \t2 logger . error ( <string_literal> , e1 ) ; \n \t2 throw new event <identifiersep> delivery <identifiersep> exception ( <string_literal> + \n \t3 <string_literal> , e1 ) ; } } \n <ect>
\t6 } catch ( exception e ) { \n \t7 s <identifiersep> logger . error ( <string_literal> + domain <identifiersep> id , e ) ; } } \n \t5 <comment> \n \t5 list < project <identifiersep> vo > inactive <identifiersep> projects =  <identifiersep> project <identifiersep> dao . list <identifiersep> by <identifiersep> state ( project . state . disabled ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 create <identifiersep> snapshot <identifiersep> response create <identifiersep> snapshot <identifiersep> response = client . admin ( ) . cluster ( ) . prepare <identifiersep> create <identifiersep> snapshot ( <string_literal> , <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) . execute ( ) . action <identifiersep> get ( ) ; \n \t2 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . total <identifiersep> shards ( ) , equal <identifiersep> to ( 0 ) ) ; \n \t2 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . successful <identifiersep> shards ( ) , equal <identifiersep> to ( 0 ) ) ; \n \t2 assert <identifiersep> that ( client . admin ( ) . cluster ( ) . prepare <identifiersep> get <identifiersep> snapshots ( <string_literal> ) . set <identifiersep> snapshots ( <string_literal> ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> snapshots ( ) . get ( 0 ) . state ( ) , equal <identifiersep> to ( snapshot <identifiersep> state . success ) ) ; \n <ect>
\t5 dev . enqueue <identifiersep> message ( m , m <identifiersep> feature ) ; \n \t5 logger . info ( <string_literal> , nm ( ) , \n \t7 dev . get <identifiersep> address ( ) , ramptime ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 return ; \n \t2 try { \n \t3 jmx <identifiersep> configurator . unregister ( this , util . get <identifiersep> m <identifiersep> bean <identifiersep> server ( ) , <string_literal> ) ; } \n \t2 catch ( exception ex ) { \n <ect>
\t1 log . info ( <string_literal> ) \n \t1 string database <identifiersep> dump <identifiersep> file = file . create <identifiersep> temp <identifiersep> file ( <string_literal> , <string_literal> , sub <identifiersep> directory . upgrade . file ) \n \t1 try { \n \t1 if ( ! list <identifiersep> databases ( ) . contains ( destination <identifiersep> database ) ) { \n <ect>
\t1 public boolean is <identifiersep> singleton ( ) { \n \t2 return true ; } \n \t1 @ override \n \t1 public void destroy ( ) { \n <ect>
\t3 logger . warn ( <string_literal> , elapsed ) ; } \n \t2 long delay = step - elapsed ; \n \t2 thread . sleep ( ( delay < 1000l ) ? step : delay ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3  <identifiersep> receiver . receive <identifiersep> complete ( m , msg . get <identifiersep> target <identifiersep> router ( ) , msg . get <identifiersep> target <identifiersep> tunnel ( ) ) ; \n \t2 } catch ( i2np <identifiersep> message <identifiersep> exception ime ) { \n \t3 if ( stringified == null ) stringified = msg . to <identifiersep> string ( ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n <ect>
\t6 external <identifiersep> type = adaptor . external <identifiersep> type <identifiersep> for <identifiersep> jdbc <identifiersep> type ( jdbc <identifiersep> type ) ; } } } \n \t3 finally { \n \t4 type <identifiersep> info <identifiersep> method . set <identifiersep> accessible ( old <identifiersep> accessible ) ; } } \n \t2 catch ( exception e ) { \n <ect>
\t1 public void start ( ) throws io <identifiersep> exception \n \t1 { \n \t2 this . state = storage . get <identifiersep> initial <identifiersep> state ( ) ; \n \t2 long recover <identifiersep> from <identifiersep> index = recover <identifiersep> from <identifiersep> index <identifiersep> supplier . get <identifiersep> as <identifiersep> long ( ) ; \n <ect>
\t4 s <identifiersep> logger . warn ( string . format ( <string_literal> , service . get <identifiersep> name ( ) ) ) ; \n \t4 return false ; } \n \t3 network . provider provider = network . provider . get <identifiersep> provider ( vpc <identifiersep> offering <identifiersep> service . get <identifiersep> provider ( ) ) ; \n \t3 if ( ! supported <identifiersep> vpc <identifiersep> services . contains <identifiersep> entry ( service , provider ) ) { \n <ect>
\t3 received <identifiersep> connect ( message . get <identifiersep> join ( ) ) ; \n \t2 } else if ( message . get <identifiersep> module <identifiersep> request <identifiersep> count ( ) > 0 ) { \n \t3 send <identifiersep> modules ( message . get <identifiersep> module <identifiersep> request <identifiersep> list ( ) ) ; \n \t2 } else { \n <ect>
\t3 if ( tokens . length == <number_literal> ) { \n \t4 s <identifiersep> logger . info ( <string_literal> + tokens [ 0 ] + <string_literal> + tokens [ 1 ] + <string_literal> ) ; \n \t4  <identifiersep> arg <identifiersep> map . put ( tokens [ 0 ] . trim ( ) , tokens [ 1 ] . trim ( ) ) ; \n \t3 } else { \n <ect>
\t1 log . error ( <string_literal> ) ; \n \t1  <identifiersep> upgrade <identifiersep> promise . set <identifiersep> failure ( new illegal <identifiersep> state <identifiersep> exception ( <string_literal> ) ) ; } \n \t1 else if ( evt == http2frame <identifiersep> listener . frame <identifiersep> event . settings <identifiersep> complete ) \n \t1 { \n <ect>
\t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n \t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 } catch ( java . lang . exception e ) { \n <ect>
\t1 private void xml <identifiersep> default ( string path ) throws exception { \n \t2 web <identifiersep> target target = client . target ( port <identifiersep> provider <identifiersep> util . generate <identifiersep> url ( <string_literal> , path ) ) ; \n \t2 logger . info ( entity <identifiersep> xml ) ; \n \t2 logger . info ( <string_literal> + charset . default <identifiersep> charset ( ) ) ; \n <ect>
public void set <identifiersep> attachment <identifiersep> data ( er . attachment . model . er <identifiersep> attachment <identifiersep> data value ) { \n \t1 take <identifiersep> stored <identifiersep> value <identifiersep> for <identifiersep> key ( value ,  <identifiersep> er <identifiersep> database <identifiersep> attachment . attachment <identifiersep> data <identifiersep> key ) ; } \n public void set <identifiersep> attachment <identifiersep> data <identifiersep> relationship ( er . attachment . model . er <identifiersep> attachment <identifiersep> data value ) { \n <ect>
\t1 public void call ( injector injector ) { \n \t2 log . info ( <string_literal> + label ) ; \n \t2 log . info ( describe <identifiersep> bindings ( <string_literal> , injector . get <identifiersep> bindings ( ) . entry <identifiersep> set ( ) ) ) ; \n \t2 map < key < ? > , binding < ? > > jit <identifiersep> bindings = maps . difference ( injector . get <identifiersep> all <identifiersep> bindings ( ) , injector . get <identifiersep> bindings ( ) ) . entries <identifiersep> only <identifiersep> on <identifiersep> left ( ) ; \n <ect>
\t1 } ) ; } \n \t1 context . to <identifiersep> destroy <identifiersep> no <identifiersep> restart . clear ( ) ; \n \t1 <comment> \n \t1 for ( final path path : context . paths <identifiersep> to <identifiersep> delete ) { \n <ect>
\t2 boolean is <identifiersep> i <identifiersep> pv6 = sz == <number_literal> ; \n \t2 if ( state == null ) { <comment> \n \t3 <comment> \n \t3 <comment> \n <ect>
\t1 public void test <identifiersep> parse <identifiersep> with <identifiersep> parens <identifiersep> around ( ) throws exception { \n \t2 string [ ] values = { <string_literal> , <string_literal> , <string_literal> } ; \n \t2 for ( int i = 0 ; i < values . length ; i ++ ) { \n \t3 string value = values [ i ] ; \n <ect>
\t4 exec <identifiersep> command ( <string_literal> + pid ) ; \n \t4 log . info ( <string_literal> + pid ) ; \n \t4 sleep <identifiersep> ms ( <number_literal> ) ; \n \t3 } catch ( execute <identifiersep> exception e ) { \n <ect>
\t4 connection <identifiersep> holder con <identifiersep> holder = new connection <identifiersep> holder ( con ) ; \n \t4 if ( timeout != transaction <identifiersep> definition . timeout <identifiersep> default ) { \n \t5 con <identifiersep> holder . set <identifiersep> timeout <identifiersep> in <identifiersep> seconds ( timeout ) ; } \n <ect>
\t5 continue ; } \n \t4 thread . sleep ( waiting <identifiersep> time <identifiersep> between <identifiersep> requests ) ; \n \t4 start <identifiersep> communication ( ) ; } \n \t2 } catch ( stiebel <identifiersep> heat <identifiersep> pump <identifiersep> exception e ) { \n <ect>
\t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t2 logger . error ( <string_literal> + e . get <identifiersep> message ( ) + <string_literal> ) ; \n \t2 return false ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 logs . extreme ( ) . debug ( t , t ) ; \n \t1 this . pending <identifiersep> errors . add ( t ) ; \n \t1 return false ; \n \t1 } else if ( exceptions . is <identifiersep> caused <identifiersep> by ( t , connection <identifiersep> exception . class ) || exceptions . is <identifiersep> caused <identifiersep> by ( t , io <identifiersep> exception . class ) ) { \n <ect>
\t2 for ( op op : ops ) { \n \t3 try { \n \t4 op . validate ( ) ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t5 <string_literal> \n \t5 + <string_literal> ) ; \n \t4 ) { \n \t3 pstmt1 . execute <identifiersep> update ( ) ; \n <ect>
\t3 boolean success = status >= <number_literal> && status < <number_literal> ; \n \t3 if ( ! success ) { \n \t4 logger . warn ( <string_literal> + single <identifiersep> logout <identifiersep> service <identifiersep> url ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t5 throw new cloud <identifiersep> exception ( <string_literal> + e . get <identifiersep> message ( ) , e ) ; } } \n \t3 txn . commit ( ) ; \n \t2 } catch ( exception e ) { \n \t3 txn . rollback ( ) ; \n <ect>
\t2 <comment> \n \t2 return new answer ( cmd , true , <string_literal> ) ; } \n \t1 protected answer execute ( unregister <identifiersep> vm <identifiersep> command cmd ) { \n <ect>
\t3 for ( naming <identifiersep> service <identifiersep> listener nsl :  <identifiersep> listeners ) { \n \t4 nsl . entry <identifiersep> added ( this , hostname , d , options ) ; } \n \t3 return true ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 return ; } \n \t2 string temp <identifiersep> lock <identifiersep> owner = <string_literal> + system . current <identifiersep> time <identifiersep> millis ( ) + req . to <identifiersep> string ( ) ; \n \t2 try { \n \t3 if ( ! resource <identifiersep> locks . lock ( transaction , path , temp <identifiersep> lock <identifiersep> owner , false , 0 , temp <identifiersep> timeout , temporary ) ) { \n <ect>
\t4 logger . debug ( <string_literal> , contrast ) ; \n \t4 set <identifiersep> contrast ( contrast ) ; } \n \t3 if ( tf <identifiersep> config . e <identifiersep> is <identifiersep> set ( tf <identifiersep> config . e <identifiersep> class ( ) . get <identifiersep> e <identifiersep> structural <identifiersep> feature ( <string_literal> ) ) ) { \n \t4 boolean invert = tf <identifiersep> config . is <identifiersep> invert ( ) ; \n <ect>
\t3 logger . debug ( <string_literal> , def <identifiersep> class ) ; \n \t3 return def <identifiersep> class ; } \n \t2 final string final <identifiersep> ctx = string <identifiersep> utils . default <identifiersep> if <identifiersep> blank ( get <identifiersep> authentication <identifiersep> context <identifiersep> by <identifiersep> assertion ( assertion , \n \t4 requested <identifiersep> authn <identifiersep> context , authn <identifiersep> context <identifiersep> class <identifiersep> refs ) , def <identifiersep> class ) ; \n <ect>
\t2 log . error ( <string_literal> , name ) ; \n \t2 return this ; } \n \t1 @ override \n \t1 public j <identifiersep> channel name ( string name ) { \n <ect>
\t3 raise exception ( <string_literal> % e ) \n \t2 return \n \t1 def validate <identifiersep> vpc <identifiersep> offering ( self , vpc <identifiersep> offering ) : \n \t2 <string_literal> <string_literal> <string_literal> \n <ect>
\t2 if ( results . size ( ) == 0 ) { \n \t3 <comment> \n \t3 throw new spatial <identifiersep> index <identifiersep> exception ( <string_literal> + root ) ; } \n \t2 if ( results . size ( ) != 1 ) { \n <ect>
\t5 boolean fnshd ; \n \t5 synchronized ( finish <identifiersep> lock ) { \n \t6 fnshd = finished ; } \n \t5 if ( ! fnshd ) { \n <ect>
\t2 { \n \t3 public void uncaught <identifiersep> exception ( thread t , throwable e ) \n \t3 { \n \t4 storage <identifiersep> metrics . exceptions . inc ( ) ; \n <ect>
\t1 <comment> \n \t1 public static wallet load <identifiersep> from <identifiersep> file <identifiersep> stream ( input <identifiersep> stream stream , @ nullable wallet <identifiersep> extension . . . wallet <identifiersep> extensions ) throws unreadable <identifiersep> wallet <identifiersep> exception { \n \t2 wallet wallet = new wallet <identifiersep> protobuf <identifiersep> serializer ( ) . read <identifiersep> wallet ( stream , wallet <identifiersep> extensions ) ; \n \t2 if ( ! wallet . is <identifiersep> consistent ( ) ) { \n <ect>
\t4 log . info ( <string_literal> + cache . name ( ) ) ; \n \t3 cleanup ( ctx ) ; } \n <ect>
\t2 { \n \t3 try \n \t3 { \n \t4 if ( ! exec . await <identifiersep> termination ( 1 , time <identifiersep> unit . minutes ) ) \n <ect>
\t1 <comment> \n \t1 try { \n \t2 results = executor . invoke <identifiersep> all ( tasks . values ( ) , <number_literal> , time <identifiersep> unit . minutes ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t1 @ override \n \t1 protected void internal <identifiersep> receive <identifiersep> command ( string item <identifiersep> name , command command ) { \n \t2 p provider = find <identifiersep> first <identifiersep> matching <identifiersep> binding <identifiersep> provider ( item <identifiersep> name ) ; \n \t2 if ( provider == null ) { \n <ect>
\t1 int split <identifiersep> size = nb <identifiersep> trees / num <identifiersep> splits ; \n \t1 seed = builder . get <identifiersep> random <identifiersep> seed ( conf ) ; \n \t1 is <identifiersep> single <identifiersep> seed = is <identifiersep> single <identifiersep> seed ( conf ) ; \n \t1 if ( rng != null && seed != null ) { \n <ect>
\t4  <identifiersep> log . log <identifiersep> always ( log . info , <string_literal> + good + <string_literal> + min <identifiersep> ff + <string_literal> + max <identifiersep> ff + \n \t7 <string_literal> + happy ) ; } \n \t3 return false ; } \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t3 try { \n \t4 watched <identifiersep> entities <identifiersep> manager . watch <identifiersep> entity ( \n \t6 factory . create <identifiersep> watched <identifiersep> location <identifiersep> reference ( current <identifiersep> doc . get <identifiersep> document <identifiersep> reference ( ) ) , user <identifiersep> reference ) ; \n \t3 } catch ( notification <identifiersep> exception e ) { \n <ect>
\t2 try { \n \t3 cloud <identifiersep> stack <identifiersep> svc <identifiersep> offering <identifiersep> dao dao = new cloud <identifiersep> stack <identifiersep> svc <identifiersep> offering <identifiersep> dao ( ) ; \n \t3 cloud <identifiersep> stack <identifiersep> service <identifiersep> offering offering = dao . get <identifiersep> svc <identifiersep> offering <identifiersep> by <identifiersep> id ( service <identifiersep> offering <identifiersep> id ) ; \n \t3 if ( offering == null ) { \n <ect>
\t1 @ get \n \t1 @ path ( <string_literal> ) \n \t1 @ produces ( constants . media <identifiersep> type <identifiersep> test <identifiersep> xml ) \n \t1 public ejb <identifiersep> book lookup <identifiersep> book <identifiersep> by <identifiersep> id ( @ path <identifiersep> param ( <string_literal> ) int id ) { \n <ect>
\t2 } else { \n \t2 log . debug ( <string_literal> + lo <identifiersep> dev <identifiersep> name ) ; \n \t2 return <string_literal> ; } \n \t1 } catch ( exception e ) { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> ) ; } \n \t3 throw new resource <identifiersep> in <identifiersep> use <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t1 string to <identifiersep> repl <identifiersep> id = string . value <identifiersep> of ( last <identifiersep> repl <identifiersep> id ) ; \n \t1 run ( <string_literal> + db <identifiersep> name + <string_literal> + repl <identifiersep> dump <identifiersep> id + <string_literal> + to <identifiersep> repl <identifiersep> id + <string_literal> + num <identifiersep> of <identifiersep> events <identifiersep> ins2 , driver ) ; \n \t1 incremental <identifiersep> dump <identifiersep> locn = get <identifiersep> result ( 0 , 0 , driver ) ; \n \t1 incremental <identifiersep> dump <identifiersep> id = get <identifiersep> result ( 0 , 1 , true , driver ) ; \n <ect>
\t2 string <identifiersep> builder urls = new string <identifiersep> builder ( ) ; \n \t2 for ( url url : configuration . get <identifiersep> urls ( ) ) { \n \t2 urls . append ( <string_literal> ) . append ( url . to <identifiersep> external <identifiersep> form ( ) ) . append ( <string_literal> ) ; } \n <ect>
\t4 super . ds . invalidate <identifiersep> cache ( collection . nodes , id ) ; } \n \t3 node <identifiersep> document d = super . ds . find ( collection . nodes , id , <number_literal> ) ; \n \t3 assert <identifiersep> not <identifiersep> null ( d ) ; \n \t3 cnt += 1 ; } \n <ect>
\t1 last <identifiersep> activity <identifiersep> timestamp = system . current <identifiersep> time <identifiersep> millis ( ) ; } \n private void job <identifiersep> execution <identifiersep> completed ( ) { \n \t1 <comment> \n \t1 <comment> \n <ect>
\t1 try { \n \t2 ss . close ( ) ; \n \t1 } catch ( io <identifiersep> exception io <identifiersep> exception ) { \n \t2 assert . fail ( io <identifiersep> exception . get <identifiersep> message ( ) ) ; \n <ect>
\t3 return default <identifiersep> value ; } \n \t2 else if ( o . get <identifiersep> class ( ) . equals ( byte [ ] . class ) ) { \n \t3 return ( byte [ ] ) o ; } \n \t2 else { \n <ect>
\t2 try { \n \t3 pam = new pam ( pam <identifiersep> service ) ; \n \t3 user = pam . authenticate ( username , factors ) ; \n \t2 } catch ( pam <identifiersep> exception e ) { \n <ect>
\t2 log . info ( <string_literal> + server <identifiersep> pool <identifiersep> total <identifiersep> mem + <string_literal> + new <identifiersep> server <identifiersep> pool <identifiersep> total <identifiersep> mem ) ; \n \t2 server <identifiersep> pool <identifiersep> total <identifiersep> mem = new <identifiersep> server <identifiersep> pool <identifiersep> total <identifiersep> mem ; \n \t2 different = true ; } \n \t2 if ( ! server <identifiersep> pool <identifiersep> timeout <identifiersep> millis . equals ( new <identifiersep> server <identifiersep> pool <identifiersep> timeout <identifiersep> millis ) ) { \n <ect>
\t1 final memory <identifiersep> monitor <identifiersep> info memory <identifiersep> monitor <identifiersep> info ; \n \t1 if ( llap <identifiersep> info != null ) { \n \t1 final int executors <identifiersep> per <identifiersep> node ; \n \t1 if ( ! llap <identifiersep> info . has <identifiersep> cluster <identifiersep> info ( ) ) { \n <ect>
\t1 protected static void arrive <identifiersep> and <identifiersep> await ( phaser phaser ) throws timeout <identifiersep> exception , interrupted <identifiersep> exception { \n \t2 try { \n \t3 phaser . await <identifiersep> advance <identifiersep> interruptibly ( phaser . arrive ( ) , <number_literal> , time <identifiersep> unit . seconds ) ; \n \t2 } catch ( timeout <identifiersep> exception e ) { \n <ect>
\t2 final file <identifiersep> system <identifiersep> saml <identifiersep> id <identifiersep> p <identifiersep> metadata <identifiersep> generator generator = new file <identifiersep> system <identifiersep> saml <identifiersep> id <identifiersep> p <identifiersep> metadata <identifiersep> generator ( entity <identifiersep> id , this . resource <identifiersep> loader , \n \t3 server <identifiersep> prefix , scope , locator , writer ) ; \n \t2 boolean generate <identifiersep> metadata = true ; \n \t2 if ( ! locator . exists ( ) ) { \n <ect>
\t2 final browser browser2 = new browser ( <string_literal> , composite , message <identifiersep> count ) ; \n \t2 browser2 . start ( ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 send <identifiersep> messages ( <string_literal> , composite , message <identifiersep> count ) ; \n <ect>
\t3 t ret ; \n \t3 try { \n \t4 ret = callback . construct ( block . data , block . header , routing <identifiersep> key , block . full <identifiersep> key , can <identifiersep> read <identifiersep> client <identifiersep> cache , false , null , null ) ; \n \t3 } catch ( key <identifiersep> verify <identifiersep> exception e ) { \n <ect>
\t1 log . info ( <string_literal> , text ) ; \n \t1 home . found ( text ) ; } \n @ then ( <string_literal> ) \n public void not <identifiersep> contains ( @ named ( <string_literal> ) string text ) { \n <ect>
\t2 interest updated <identifiersep> interest = null ; \n \t2 int hash <identifiersep> component = name . contains <identifiersep> where ( sync . sync <identifiersep> root <identifiersep> advise <identifiersep> marker ) ; \n \t2 if ( hash <identifiersep> component < 0 || name . count ( ) < hash <identifiersep> component + <number_literal> ) { \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> sync , level . info ) ) \n <ect>
\t2 if ( ! ( task <identifiersep> root . is <identifiersep> directory ( ) && task <identifiersep> root . exists ( ) ) ) { \n \t3 return false ; } \n \t2 integer task <identifiersep> id = less <identifiersep> numbers . parse <identifiersep> int ( <number_literal> , task <identifiersep> root . get <identifiersep> name ( ) , - 1 ) ; \n \t2 if ( task <identifiersep> id < 0 ) { \n <ect>
\t1 public synchronized void shutdown ( boolean fully <identifiersep> shut <identifiersep> down ) { \n \t2 if ( ! can <identifiersep> shutdown ( ) ) { \n \t3 log . debug ( <string_literal> ) ; \n \t3 return ; } \n <ect>
\t3 check <identifiersep> slice ( values , deleted , key , start , end , - 1 ) ; } } \n \t1 @ test \n \t1 public void interval <identifiersep> test2 ( ) throws backend <identifiersep> exception { \n \t2 string [ ] [ ] values = generate <identifiersep> values ( ) ; \n <ect>
\t2 if ( cassandra <identifiersep> host == null ) { \n \t2 continue ; } \n \t2 if ( connection <identifiersep> manager . get <identifiersep> hosts ( ) . size ( ) == 0 ) { \n \t2 listener <identifiersep> handler . fire <identifiersep> on <identifiersep> all <identifiersep> hosts <identifiersep> down ( ) ; \n <ect>
\t4 . get <identifiersep> service ( jta <identifiersep> platform . class ) \n \t4 . retrieve <identifiersep> transaction <identifiersep> manager ( ) ; \n \t2 try { \n \t3 if ( transaction <identifiersep> manager != null && transaction <identifiersep> manager . get <identifiersep> transaction ( ) != null ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 <comment> \n <ect>
\t2 try { \n \t3 connection conn = consumer . get <identifiersep> connection ( ) ; \n \t3 this . channel = open <identifiersep> channel ( conn ) ; \n \t2 } catch ( io <identifiersep> exception | timeout <identifiersep> exception e ) { \n <ect>
\t4 ( ( grid <identifiersep> cache <identifiersep> projection <identifiersep> ex ) cache0 ) . remove <identifiersep> all <identifiersep> dr ( collections . singleton <identifiersep> map ( key , entry . version ( ) ) ) ; \n \t3 else \n \t4 ( ( grid <identifiersep> cache <identifiersep> projection <identifiersep> ex ) cache0 ) . put <identifiersep> all <identifiersep> dr ( collections . singleton <identifiersep> map ( key , val ) ) ; } \n <ect>
\t7 loc <identifiersep> part . rent ( false ) ; \n \t7 update <identifiersep> local ( p , loc . id ( ) , loc <identifiersep> part . state ( ) , update <identifiersep> seq ) ; \n \t7 changed = true ; \n <ect>
\t5 default : \n \t6 logger . warn ( <string_literal> , cmd2 , msg ) ; \n \t6 break ; } \n \t3 } catch ( field <identifiersep> exception e ) { \n <ect>
\t5 if ( (  <identifiersep> coordinator <identifiersep> state . has <identifiersep> cache ( curr ) ||  <identifiersep> coordinator . is <identifiersep> ready ( ) ) && !  <identifiersep> active <identifiersep> tx . contains <identifiersep> key ( curr ) ) { \n \t6 transaction <identifiersep> attempt attempt = new transaction <identifiersep> attempt ( curr ,  <identifiersep> rand . next <identifiersep> long ( ) ) ; \n \t6 object state =  <identifiersep> coordinator <identifiersep> state . get <identifiersep> state ( curr ,  <identifiersep> initializer ) ; \n \t6  <identifiersep> active <identifiersep> tx . put ( curr , new transaction <identifiersep> status ( attempt ) ) ; \n <ect>
\t2 if ( ! is <identifiersep> empty ( locale <identifiersep> name ) ) { \n \t3 locale <identifiersep> info = locale <identifiersep> info . parse ( locale <identifiersep> name ) ; \n \t3 if ( ! locale <identifiersep> util . is <identifiersep> locale <identifiersep> supported ( locale <identifiersep> info . get <identifiersep> locale ( ) ) \n \t4 || ! locale <identifiersep> util . is <identifiersep> charset <identifiersep> supported ( locale <identifiersep> info . get <identifiersep> charset ( ) . name ( ) ) ) { \n <ect>
\t2 meshy <identifiersep> client mesh <identifiersep> link = new meshy <identifiersep> client ( <string_literal> , <number_literal> ) ; \n \t2 collection < file <identifiersep> reference > file <identifiersep> references = mesh <identifiersep> link . list <identifiersep> files ( new string [ ] { <string_literal> } ) ; \n <comment> \n \t2 string mesh <identifiersep> uuid = file <identifiersep> references . iterator ( ) . next ( ) . get <identifiersep> host <identifiersep> uuid ( ) ; \n <ect>
\t1 <comment> \n \t1 if ( null != err <identifiersep> sink ) { \n \t2 try { \n \t2 if ( 0 != err <identifiersep> sink . join ( ) ) { \n <ect>
\t2 session consumer <identifiersep> session = connection . create <identifiersep> session ( true , session . session <identifiersep> transacted ) ; \n \t2 message <identifiersep> consumer message <identifiersep> consumer = consumer <identifiersep> session . create <identifiersep> consumer ( destination ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 message message = message <identifiersep> consumer . receive ( <number_literal> ) ; \n <ect>
\t3 } else { \n \t4 response . get <identifiersep> output <identifiersep> headers ( ) . add ( access <identifiersep> control <identifiersep> allow <identifiersep> headers , default <identifiersep> allow <identifiersep> headers ) ; } } \n \t2 if ( preflight ) { \n \t3 response . get <identifiersep> output <identifiersep> headers ( ) . add ( access <identifiersep> control <identifiersep> max <identifiersep> age , default <identifiersep> max <identifiersep> age ) ; } \n <ect>
\t4 this . set <identifiersep> response <identifiersep> object ( response ) ; \n \t3 } else { \n \t4 throw new server <identifiersep> api <identifiersep> exception ( api <identifiersep> error <identifiersep> code . internal <identifiersep> error , <string_literal> ) ; } \n \t2 } catch ( internal <identifiersep> error <identifiersep> exception ex ) { \n <ect>
\t9 @ query <identifiersep> param ( <string_literal> ) string user <identifiersep> agent , \n \t9 @ query <identifiersep> param ( <string_literal> ) string xforwardedfor , \n \t9 @ context http <identifiersep> headers headers , @ context http <identifiersep> servlet <identifiersep> request request ) \n \t2 throws web <identifiersep> application <identifiersep> exception { \n <ect>
\t2 logger . trace ( <string_literal> , prefix ) ; \n \t2 try { \n \t3 return blob <identifiersep> store . list <identifiersep> blobs <identifiersep> by <identifiersep> prefix ( key <identifiersep> path , prefix ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception | storage <identifiersep> exception e ) { \n <ect>
\t2 map < integer , local <identifiersep> assignment > local <identifiersep> assignment ; \n \t2 try { \n \t3 local <identifiersep> assignment = ( map < integer , local <identifiersep> assignment > ) local <identifiersep> state . get ( common . ls <identifiersep> local <identifiersep> assignments ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t2 return arrays . as <identifiersep> list ( mock <identifiersep> repository . plugin . class , mock <identifiersep> transport <identifiersep> service . test <identifiersep> plugin . class ) ; } \n \t1 public void test <identifiersep> retry <identifiersep> posting <identifiersep> snapshot <identifiersep> status <identifiersep> messages ( ) throws exception { \n \t2 string master <identifiersep> node = internal <identifiersep> cluster ( ) . start <identifiersep> master <identifiersep> only <identifiersep> node ( ) ; \n \t2 string data <identifiersep> node = internal <identifiersep> cluster ( ) . start <identifiersep> data <identifiersep> only <identifiersep> node ( ) ; \n <ect>
\t1 private void send <identifiersep> destroy ( inbound <identifiersep> establish <identifiersep> state state ) { \n \t2 udp <identifiersep> packet packet =  <identifiersep> builder . build <identifiersep> session <identifiersep> destroy <identifiersep> packet ( state ) ; \n \t2 if ( packet != null ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t9 res = marsh . unmarshall ( cmd , hdr , dis ) ; \n \t8 fut . on <identifiersep> done ( res ) ; } \n \t7 catch ( grid <identifiersep> exception e ) { \n <ect>
\t2 } catch ( version <identifiersep> missing <identifiersep> exception e ) { \n \t3 assert . fail ( <string_literal> + e . get <identifiersep> message ( ) ) ; } \n \t2 responder . check <identifiersep> error ( ) ; \n \t2 response <identifiersep> objects . add ( obj3 ) ; \n <ect>
\t4 key . from <identifiersep> base64 ( sk ) ; \n \t4 lease <identifiersep> set . encrypt ( key ) ; \n \t4  <identifiersep> context . key <identifiersep> ring ( ) . put ( h , key ) ; \n \t3 } catch ( data <identifiersep> format <identifiersep> exception dfe ) { \n <ect>
\t2 s <identifiersep> logger . debug ( <string_literal> + network <identifiersep> id + <string_literal> ) ; \n \t2 reservation <identifiersep> context context = new reservation <identifiersep> context <identifiersep> impl ( null , null , caller <identifiersep> user , caller <identifiersep> account ) ; \n \t2 if ( cleanup ) { \n \t3 if ( network . get <identifiersep> guest <identifiersep> type ( ) != guest <identifiersep> type . isolated ) { \n <ect>
\t1 if ( null != m <identifiersep> dir ) { \n \t2 file dir = new file ( m <identifiersep> dir ) ; \n \t2 if ( ! dir . is <identifiersep> directory ( ) ) \n \t2 if ( ! dir . mkdir ( ) ) \n <ect>
\t1 } catch ( exception e1 ) { \n \t2 try { \n \t2 msg = ( base <identifiersep> message ) this . context . get <identifiersep> binding ( ) . from <identifiersep> om ( http <identifiersep> message . get <identifiersep> om <identifiersep> message ( ) , this . context . get <identifiersep> namespace ( ) ) ; \n \t2 } catch ( exception ex ) { \n <ect>
\t2 try { \n \t3 final gc <identifiersep> get <identifiersep> groups groups <identifiersep> client = new gc <identifiersep> get <identifiersep> groups ( ) . add <identifiersep> subject <identifiersep> id ( subject <identifiersep> id ) ; \n \t3 final ws <identifiersep> get <identifiersep> groups <identifiersep> result [ ] results = groups <identifiersep> client . execute ( ) . get <identifiersep> results ( ) ; \n \t3 if ( results == null || results . length == 0 ) { \n <ect>
\t1 protected query <identifiersep> stats get <identifiersep> query <identifiersep> stats ( string sql ) { \n \t2 if ( sql == null ) sql = <string_literal> ; \n \t2 concurrent <identifiersep> hash <identifiersep> map < string , query <identifiersep> stats > queries = slow <identifiersep> query <identifiersep> report . this . queries ; \n \t2 if ( queries == null ) { \n <ect>
\t5 for ( property <identifiersep> key <identifiersep> vertex v : keys ) { \n \t6 try { \n \t7 prop <identifiersep> names . add ( v . name ( ) ) ; \n \t6 } catch ( throwable t ) { \n <ect>
\t3 participate = true ; } \n \t2 else { \n \t3 boolean is <identifiersep> first <identifiersep> request = ! is <identifiersep> async <identifiersep> dispatch ( request ) ; \n \t3 if ( is <identifiersep> first <identifiersep> request || ! apply <identifiersep> entity <identifiersep> manager <identifiersep> binding <identifiersep> interceptor ( async <identifiersep> manager , key ) ) { \n <ect>
\t3 logger . info ( <string_literal> , total <identifiersep> num <identifiersep> docs ) ; \n \t3 <comment> \n \t3 logger . info ( <string_literal> ) ; \n \t3 allow <identifiersep> nodes ( <string_literal> , <number_literal> ) ; \n <ect>
\t4 val deps = script <identifiersep> content <identifiersep> loader \n \t5 . load <identifiersep> contents <identifiersep> and <identifiersep> resolve <identifiersep> dependencies ( script <identifiersep> def , file ) \n \t5 . dependencies ? . adjust <identifiersep> by <identifiersep> definition ( script <identifiersep> def ) \n \t4 if ( deps != null ) { \n <ect>
\t1 logger . error ( <string_literal> , e ) ; \n \t1 } catch ( flume <identifiersep> exception e ) { \n \t1 logger . error ( <string_literal> , e ) ; \n \t1 } catch ( event <identifiersep> delivery <identifiersep> exception e ) { \n <ect>
\t1 location = new file ( get <identifiersep> server <identifiersep> key <identifiersep> store <identifiersep> directory ( ) , master <identifiersep> key <identifiersep> filename <identifiersep> default ) ; \n \t1 log . debug ( <string_literal> , master <identifiersep> key <identifiersep> location , location . get <identifiersep> absolute <identifiersep> path ( ) ) ; \n \t1 } else { \n \t1 location = new file ( path , master <identifiersep> key <identifiersep> filename <identifiersep> default ) ; \n <ect>
\t2 list < string > failed <identifiersep> tables = collections . synchronized <identifiersep> list ( new array <identifiersep> list < string > ( ) ) ; \n \t2 int n <identifiersep> thread = runtime . get <identifiersep> runtime ( ) . available <identifiersep> processors ( ) * <number_literal> ; \n \t2 if ( n <identifiersep> thread > max <identifiersep> threads ) { \n \t3 n <identifiersep> thread = max <identifiersep> threads ; } \n <ect>
\t3 final i <identifiersep> map < string , ticket > map = get <identifiersep> ticket <identifiersep> map <identifiersep> instance <identifiersep> by <identifiersep> metadata ( metadata ) ; \n \t3 final ticket ticket = map . get ( enc <identifiersep> ticket <identifiersep> id ) ; \n \t3 final ticket result = decode <identifiersep> ticket ( ticket ) ; \n \t3 if ( result != null && result . is <identifiersep> expired ( ) ) { \n <ect>
\t2 if ( runnable != null ) { \n \t3  <identifiersep> awaiting <identifiersep> consumer . add ( runnable ) ; \n \t3 long task <identifiersep> request <identifiersep> id =  <identifiersep> request <identifiersep> id . get ( runnable ) ; \n \t3 if ( task <identifiersep> request <identifiersep> id != request <identifiersep> id ) { \n <ect>
\t1 private void write <identifiersep> json <identifiersep> to <identifiersep> out <identifiersep> dir ( string out <identifiersep> model <identifiersep> json , string filename ) { \n \t2 try { \n \t3 files . write ( out <identifiersep> model <identifiersep> json , new file ( this . output <identifiersep> dir , filename ) , charsets . utf <identifiersep> <number_literal> ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 required <identifiersep> attributes = [ <string_literal> , <string_literal> , <string_literal> ] \n \t1 for attribute in required <identifiersep> attributes : \n \t1 if not hasattr ( params , attribute ) : \n \t2 raise fail ( <string_literal> % attribute ) \n <ect>
\t1 protected void execute ( ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 try { \n \t3 if ( ! connect ( ) ) { \n <ect>
\t3 final string redis <identifiersep> key = get <identifiersep> ticket <identifiersep> redis <identifiersep> key ( ticket . get <identifiersep> id ( ) ) ; \n \t3 this . client . bound <identifiersep> value <identifiersep> ops ( redis <identifiersep> key ) . set ( encode <identifiersep> ticket , get <identifiersep> timeout ( ticket ) , time <identifiersep> unit . seconds ) ; \n \t3 return encode <identifiersep> ticket ; \n \t2 } catch ( final exception e ) { \n <ect>
\t2 java <identifiersep> class <identifiersep> source clazz = ( java <identifiersep> class <identifiersep> source ) roaster . parse ( new file ( <string_literal> ) ) ; \n \t2 method <identifiersep> source < java <identifiersep> class <identifiersep> source > method = camel <identifiersep> java <identifiersep> parser <identifiersep> helper . find <identifiersep> configure <identifiersep> method ( clazz ) ; \n \t2 list < parser <identifiersep> result > list = camel <identifiersep> java <identifiersep> parser <identifiersep> helper . parse <identifiersep> camel <identifiersep> consumer <identifiersep> uris ( method , true , true ) ; \n \t2 for ( parser <identifiersep> result result : list ) { \n <ect>
\t2 if ( ! requested <identifiersep> provider . is <identifiersep> present ( ) ) { \n \t3 logger . debug ( <string_literal> ) ; \n \t3 return pair . of ( boolean . false , optional . empty ( ) ) ; } \n \t2 if ( contexts . stream ( ) . filter ( ctx - > ctx . to <identifiersep> string ( ) . equals ( requested <identifiersep> context ) ) . count ( ) > 0 ) { \n <ect>
\t6 eo <identifiersep> key <identifiersep> value <identifiersep> unarchiver archiver = new eo <identifiersep> key <identifiersep> value <identifiersep> unarchiver ( a <identifiersep> rule <identifiersep> dictionary ) ; \n \t6 try { \n \t7 add <identifiersep> rule ( ( rule ) archiver . decode <identifiersep> object <identifiersep> for <identifiersep> key ( <string_literal> ) ) ; \n \t6 } catch ( exception ex ) { \n <ect>
\t4 socket <identifiersep> manager = build <identifiersep> socket <identifiersep> manager ( tunnel , pkf ) ; \n \t4 <comment> \n \t4 i2p <identifiersep> session sub = add <identifiersep> subsession ( tunnel ) ; \n \t4 if ( sub != null &&  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t7 new read <identifiersep> shard <identifiersep> balancer <identifiersep> test ( num <identifiersep> contigs , num <identifiersep> stacks <identifiersep> per <identifiersep> contig , stack <identifiersep> size , num <identifiersep> unmapped <identifiersep> reads , downsampling <identifiersep> target <identifiersep> coverage ) ; } } } } } \n \t2 return read <identifiersep> shard <identifiersep> balancer <identifiersep> test . get <identifiersep> tests ( read <identifiersep> shard <identifiersep> balancer <identifiersep> test . class ) ; } \n \t1 @ test ( data <identifiersep> provider = <string_literal> ) \n \t1 public void run <identifiersep> read <identifiersep> shard <identifiersep> balancer <identifiersep> test ( read <identifiersep> shard <identifiersep> balancer <identifiersep> test test ) { \n <ect>
\t2 get <identifiersep> response = client ( ) . admin ( ) . indices ( ) . prepare <identifiersep> get <identifiersep> mappings ( <string_literal> ) . add <identifiersep> types ( mapper <identifiersep> service . default <identifiersep> mapping ) . get ( ) ; \n \t2 default <identifiersep> mapping = get <identifiersep> response . get <identifiersep> mappings ( ) . get ( <string_literal> ) . get ( mapper <identifiersep> service . default <identifiersep> mapping ) . source <identifiersep> as <identifiersep> map ( ) ; \n \t2 assert <identifiersep> that ( default <identifiersep> mapping , not ( has <identifiersep> key ( <string_literal> ) ) ) ; \n \t2 <comment> \n <ect>
\t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t4 if ( ! check <identifiersep> duplicate <identifiersep> host <identifiersep> with <identifiersep> the <identifiersep> same <identifiersep> local <identifiersep> storage ( ) ) { \n \t5 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> ) ; } \n \t4 if ( ! check <identifiersep> missed <identifiersep> premium <identifiersep> upgrade <identifiersep> for228 ( ) ) { \n <ect>
\t5 if ( client . get <identifiersep> input <identifiersep> stream ( ) . available ( ) == 0 ) { \n \t6 break ; } } \n \t4 return str <identifiersep> buffer . to <identifiersep> string ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 un <identifiersep> load <identifiersep> success . add ( table <identifiersep> name ) ; \n \t4 } else { \n \t5 un <identifiersep> load <identifiersep> fail . add ( table <identifiersep> name ) ; } } \n \t2 } catch ( throwable e ) { \n <ect>
\t9 s <identifiersep> logger . info ( <string_literal> + thread <identifiersep> num + <string_literal> ) ; \n \t9 try { \n \t10 thread . sleep ( log4j <identifiersep> enabled <identifiersep> test <identifiersep> case . get <identifiersep> random <identifiersep> milliseconds ( <number_literal> , <number_literal> ) ) ; \n \t9 } catch ( interrupted <identifiersep> exception e ) { } \n <ect>
\t2 start <identifiersep> client ( ) ; } \n \t1 public static void start <identifiersep> client ( ) { \n \t2 string servers = erx <identifiersep> properties . string <identifiersep> for <identifiersep> key ( <string_literal> ) ; \n \t2 if ( servers == null || servers . length ( ) == 0 ) { \n <ect>
\t6 } catch ( unsupported <identifiersep> encoding <identifiersep> exception usex ) { \n \t7 s <identifiersep> logger . warn ( key + <string_literal> + value [ 0 ] ) ; \n \t7 throw new server <identifiersep> api <identifiersep> exception ( base <identifiersep> cmd . param <identifiersep> error , key + <string_literal> + value [ 0 ] ) ; \n \t6 } catch ( illegal <identifiersep> argument <identifiersep> exception iae ) { \n <ect>
\t4 } finally { \n \t5 metadata <identifiersep> store . write <identifiersep> lock . unlock ( ) ; } } \n \t2 } catch ( voldemort <identifiersep> exception e ) { \n \t3 response . set <identifiersep> error ( proto <identifiersep> utils . encode <identifiersep> error ( error <identifiersep> code <identifiersep> mapper , e ) ) ; \n <ect>
\t1 return all <identifiersep> ldap <identifiersep> names . get ( 0 ) ; \n \t1 } else { \n \t1 log . info ( <string_literal> , \n \t2 user , all <identifiersep> ldap <identifiersep> names . size ( ) ) ; \n <ect>
\t9 accountid = cls . account . name , \n \t9 domainid = cls . account . domainid , \n \t9 networkofferingid = cls . network <identifiersep> offering . id , \n \t9 zoneid = cls . zone . id ) \n <ect>
\t2 if ( ! property <identifiersep> type . equals ( max . get <identifiersep> class ( ) ) ) { \n \t3 throw new missing <identifiersep> property <identifiersep> exception ( max <identifiersep> constraint , property <identifiersep> type ) ; } \n \t2 range r = get <identifiersep> range ( ) ; \n \t2 if ( r != null ) { \n <ect>
\t3 public void run ( ) { \n \t4 try { \n \t5 manage <identifiersep> timer ( ) ; \n \t4 } catch ( exception ex ) { \n <ect>
\t3 stripe <identifiersep> ix <identifiersep> to , stripe <identifiersep> start , max <identifiersep> offset , ( stripe <identifiersep> ix <identifiersep> to - stripe <identifiersep> ix <identifiersep> from ) ) ; \n \t2 break ; } \n \t1 ++ stripe <identifiersep> ix ; } \n \t1 if ( stripe <identifiersep> ix <identifiersep> from == - 1 ) { \n <ect>
\t1 val summary = if ( tail <identifiersep> lines . size > max <identifiersep> lines ) <string_literal> . format ( max <identifiersep> lines ) else <string_literal> \n \t1 this . function . job <identifiersep> error <identifiersep> lines = collection . java <identifiersep> conversions . collection <identifiersep> as <identifiersep> scala <identifiersep> iterable ( tail <identifiersep> lines ) . to <identifiersep> seq \n \t1 logger . error ( <string_literal> . format ( summary , error <identifiersep> file , string <identifiersep> utils . join ( tail <identifiersep> lines , nl ) ) ) \n \t1 } else { \n <ect>
\t2 final context context = new initial <identifiersep> context ( jndi <identifiersep> properties ) ; \n \t2 string class <identifiersep> name = <string_literal> + scope + <string_literal> ; \n \t2 class < ? > view <identifiersep> name = class . for <identifiersep> name ( <string_literal> + class <identifiersep> name + <string_literal> ) ; \n \t2 string lookup = <string_literal> + class <identifiersep> name + <string_literal> + view <identifiersep> name . get <identifiersep> name ( ) ; \n <ect>
\t1 byte <identifiersep> array <identifiersep> output <identifiersep> stream out = new byte <identifiersep> array <identifiersep> output <identifiersep> stream ( ) ; \n \t1 print <identifiersep> stream log <identifiersep> file = new print <identifiersep> stream ( out ) ; \n \t1 test <identifiersep> logger logger = new test <identifiersep> logger ( log <identifiersep> file , test <identifiersep> logger . level . info ) ; \n \t1 logger . trace ( <string_literal> ) ; \n <ect>
\t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . secret ) ) { \n \t3 logger . warn ( <string_literal> , grant <identifiersep> type ) ; \n \t3 return false ; } \n \t2 if ( ! validator . check <identifiersep> parameter <identifiersep> exist ( request , o <identifiersep> auth20constants . refresh <identifiersep> token ) ) { \n <ect>
\t5 logger . warn ( \n \t6 ( supplier < ? > ) ( ) - > new parameterized <identifiersep> message ( \n \t7 <string_literal> , task . get <identifiersep> id ( ) ) , e ) ; } } \n \t2 } else { \n <ect>
\t1 set <identifiersep> open ( false ) ; \n \t1 try { \n \t2 log . close ( ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t3 if ( attache != null && attache . get <identifiersep> queue <identifiersep> size ( ) == 0 && attache . get <identifiersep> non <identifiersep> recurring <identifiersep> listeners <identifiersep> size ( ) == 0 ) { \n \t4 handle <identifiersep> disconnect <identifiersep> without <identifiersep> investigation ( attache , event . start <identifiersep> agent <identifiersep> rebalance ) ; \n \t4 clustered <identifiersep> agent <identifiersep> attache forward <identifiersep> attache = ( clustered <identifiersep> agent <identifiersep> attache ) create <identifiersep> attache ( host <identifiersep> id ) ; \n \t4 if ( forward <identifiersep> attache == null ) { \n <ect>
\t5 final list < string > new <identifiersep> ms <identifiersep> list = indirect <identifiersep> agent <identifiersep> lb . get <identifiersep> management <identifiersep> server <identifiersep> list ( host . get <identifiersep> id ( ) , host . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , null ) ; \n \t5 ready . set <identifiersep> ms <identifiersep> host <identifiersep> list ( new <identifiersep> ms <identifiersep> list ) ; \n \t5 ready . set <identifiersep> lb <identifiersep> algorithm ( indirect <identifiersep> agent <identifiersep> lb . get <identifiersep> lb <identifiersep> algorithm <identifiersep> name ( ) ) ; \n \t5 ready . set <identifiersep> lb <identifiersep> check <identifiersep> interval ( indirect <identifiersep> agent <identifiersep> lb . get <identifiersep> lb <identifiersep> preferred <identifiersep> host <identifiersep> check <identifiersep> interval ( host . get <identifiersep> cluster <identifiersep> id ( ) ) ) ; \n <ect>
\t3 message message = message <identifiersep> consumer . receive ( <number_literal> ) ; \n \t3 if ( message != null ) { \n \t4 assert <identifiersep> equals ( i + base , message . get <identifiersep> int <identifiersep> property ( <string_literal> ) ) ; \n \t4 i ++ ; \n <ect>
\t2 } finally { \n \t3 lput . close ( ) ; \n \t3 lget . close ( ) ; \n \t3 key <identifiersep> manager . close <identifiersep> default <identifiersep> key <identifiersep> manager ( ) ; } \n <ect>
\t3 vmware <identifiersep> manager mgr = context . get <identifiersep> stock <identifiersep> object ( vmware <identifiersep> manager . context <identifiersep> stock <identifiersep> name ) ; \n \t3 return mgr . get <identifiersep> storage <identifiersep> manager ( ) . execute ( this , cmd ) ; \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t3 if ( fullbackup ) { \n \t4 new <identifiersep> snapshot . set <identifiersep> parent <identifiersep> snapshot <identifiersep> path ( null ) ; \n \t3 } else { \n \t4 new <identifiersep> snapshot . set <identifiersep> parent <identifiersep> snapshot <identifiersep> path ( prev <identifiersep> backup <identifiersep> uuid ) ; } \n <ect>
\t2 migrationresult . set <identifiersep> total <identifiersep> no <identifiersep> query ( total <identifiersep> queries ) ; \n \t2 migrationresult . set <identifiersep> progress <identifiersep> percentage ( <number_literal> ) ; } \n \t1 get <identifiersep> resource <identifiersep> manager ( view ) . update ( migrationresult , jobid ) ; \n \t1 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t3 if ( attachment != null ) { \n \t4 document doc = this . context . get <identifiersep> wiki ( ) . get <identifiersep> document ( get <identifiersep> doc <identifiersep> name ( ) , this . context ) . new <identifiersep> document ( this . context ) ; \n \t4 return new attachment ( doc , attachment , this . context ) ; } \n \t2 } catch ( x <identifiersep> wiki <identifiersep> exception ex ) { \n <ect>
\t3 logger . warn ( <string_literal> , get <identifiersep> response <identifiersep> type ( ) ) ; \n \t3 return false ; } \n \t2 final string response <identifiersep> type = request . get <identifiersep> parameter ( o <identifiersep> auth20constants . response <identifiersep> type ) ; \n \t2 if ( ! validator . check <identifiersep> response <identifiersep> types ( response <identifiersep> type , o <identifiersep> auth20response <identifiersep> types . values ( ) ) ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> , e ) ; \n \t3 create <identifiersep> cmd <identifiersep> result res = new create <identifiersep> cmd <identifiersep> result ( null , null ) ; \n \t3 callback . complete ( res ) ; \n \t2 } catch ( concurrent <identifiersep> operation <identifiersep> exception e ) { \n <ect>
\t4 impl . set <identifiersep> channel ( null ) ; \n \t4 impl = null ; \n \t4 channel = null ; } \n \t2 } catch ( exception x ) { \n <ect>
\t5 break ; } } \n \t3 if ( ! processed ) { \n \t4 s <identifiersep> logger . error ( <string_literal> + network . to <identifiersep> string ( ) ) ; } \n \t2 } else { \n <ect>
\t4 logger . error ( <string_literal> , \n \t5 assertion . get <identifiersep> key ( ) , rp <identifiersep> id , configuration . get <identifiersep> identity <identifiersep> provider <identifiersep> identifier ( ) ) ; \n \t4 return error ( ) ; } \n \t3 if ( credential != null && credential . is <identifiersep> valid ( rp <identifiersep> id , configuration . get <identifiersep> identity <identifiersep> provider <identifiersep> identifier ( ) , configuration . get <identifiersep> tolerance ( ) ) ) { \n <ect>
\t6 element item <identifiersep> name <identifiersep> element = ( element ) item <identifiersep> name . item ( 0 ) ; \n \t6 if ( item <identifiersep> name <identifiersep> element . has <identifiersep> child <identifiersep> nodes ( ) ) { \n \t7 continue ; } \n \t6 if ( ! ( verify <identifiersep> param . get ( key ) . equals ( <string_literal> ) ) && ! ( item <identifiersep> name <identifiersep> element . get <identifiersep> text <identifiersep> content ( ) . equals ( verify <identifiersep> param . get ( key ) ) ) ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 <comment> \n \t2 try { \n \t3 client ( <string_literal> ) . admin ( ) . indices ( ) . prepare <identifiersep> delete ( index ) . execute ( ) . action <identifiersep> get ( ) ; \n <ect>
\t2 if ( column <identifiersep> from < 0 || column <identifiersep> from > max <identifiersep> column ) { \n \t3 logger . error ( <string_literal> , max <identifiersep> column ) ; \n \t3 return ; } \n \t2 if ( column <identifiersep> to < 0 || column <identifiersep> to > max <identifiersep> column ) { \n <ect>
\t3 logger . error ( <string_literal> , data <identifiersep> dir ) ; \n \t3 return false ; } \n \t2 else if ( dir . exists ( ) && ! file <identifiersep> action . has <identifiersep> privilege ( dir , file <identifiersep> action . w ) ) \n \t2 { \n <ect>
\t5 if ( mail <identifiersep> message . editing <identifiersep> context ( ) . has <identifiersep> changes ( ) ) { \n \t6 try { \n \t7 mail <identifiersep> message . editing <identifiersep> context ( ) . save <identifiersep> changes ( ) ; \n \t6 } catch ( runtime <identifiersep> exception runtime ) { \n <ect>
\t1 public boolean finalize <identifiersep> start ( virtual <identifiersep> machine <identifiersep> profile < console <identifiersep> proxy <identifiersep> vo > profile , long host <identifiersep> id , commands cmds , reservation <identifiersep> context context ) { \n \t2 check <identifiersep> ssh <identifiersep> answer answer = ( check <identifiersep> ssh <identifiersep> answer ) cmds . get <identifiersep> answer ( <string_literal> ) ; \n \t2 if ( answer == null || ! answer . get <identifiersep> result ( ) ) { \n \t3 if ( answer != null ) { \n <ect>
\t1 <comment> \n \t1 try { \n \t1 problem <identifiersep> reports . get <identifiersep> instance ( master ) . delete <identifiersep> problem <identifiersep> reports ( table <identifiersep> id ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t7 if ( answer == null ) { \n \t8 s <identifiersep> logger . warn ( <string_literal> + host <identifiersep> id + <string_literal> + node . get <identifiersep> msid ( ) ) ; \n \t8 result = false ; } \n \t6 } catch ( final exception ex ) { \n <ect>
\t4 mqtt <identifiersep> subscription <identifiersep> strategy strategy = null ; \n \t4 if ( subscription <identifiersep> strategy <identifiersep> name != null && ! subscription <identifiersep> strategy <identifiersep> name . is <identifiersep> empty ( ) ) { \n \t5 try { \n \t6 strategy = ( mqtt <identifiersep> subscription <identifiersep> strategy ) stratagy <identifiersep> finder . new <identifiersep> instance ( subscription <identifiersep> strategy <identifiersep> name ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t5  <identifiersep> lb2stickinesspolicies <identifiersep> dao . persist ( stickiness <identifiersep> policy ) ; \n \t5 load <identifiersep> balancer . set <identifiersep> state ( backup <identifiersep> state ) ; \n \t5  <identifiersep> lb <identifiersep> dao . persist ( load <identifiersep> balancer ) ; \n \t5 s <identifiersep> logger . debug ( <string_literal> + load <identifiersep> balancer . get <identifiersep> id ( ) + <string_literal> + stickiness <identifiersep> policy <identifiersep> id ) ; } \n <ect>
\t2 int number <identifiersep> of <identifiersep> attempts = 0 ; \n \t2 int max <identifiersep> number <identifiersep> of <identifiersep> attempts = <number_literal> ; \n \t2 boolean done <identifiersep> with <identifiersep> secret <identifiersep> pals = false ; \n \t2 while ( ! done <identifiersep> with <identifiersep> secret <identifiersep> pals && number <identifiersep> of <identifiersep> attempts < max <identifiersep> number <identifiersep> of <identifiersep> attempts ) { \n <ect>
\t3 if ( id == null ) { \n \t4 id = zookeeper . create ( dir + <string_literal> + prefix , data , \n \t6 get <identifiersep> acl ( ) , ephemeral <identifiersep> sequential ) ; \n <ect>
\t2 try { \n \t3 executor . stop ( stop <identifiersep> timeout <identifiersep> seconds , time <identifiersep> unit . seconds ) ; \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
\t4 log . error ( <string_literal> ) ; \n \t4 return false ; } \n \t3 if ( last != data [ data . length - 1 ] ) \n \t3 { \n <ect>
\t2 do { \n \t2 try { \n \t3 thread . sleep ( <number_literal> ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t4 list < ? > snapshots = ( list < ? > ) entity <identifiersep> as <identifiersep> map ( admin <identifiersep> client . perform <identifiersep> request ( <string_literal> , url , params ) ) . get ( <string_literal> ) ; \n \t4 for ( object snapshot : snapshots ) { \n \t5 map < ? , ? > snapshot <identifiersep> info = ( map < ? , ? > ) snapshot ; \n \t5 string name = ( string ) snapshot <identifiersep> info . get ( <string_literal> ) ; \n <ect>
\t5 security <identifiersep> group <identifiersep> id <identifiersep> list . add ( default <identifiersep> group . get <identifiersep> id ( ) ) ; \n \t4 } else { \n \t5 <comment> \n <ect>
\t2 try { \n \t3 state . get ( begin <identifiersep> seq <identifiersep> no , end <identifiersep> seq <identifiersep> no , messages ) ; \n \t2 } catch ( final io <identifiersep> exception e ) { \n \t3 if ( force <identifiersep> resend <identifiersep> when <identifiersep> corrupted <identifiersep> store ) { \n <ect>
\t7 serial <identifiersep> port . get <identifiersep> output <identifiersep> stream ( ) . write ( buffer ) ; \n \t7 serial <identifiersep> port . get <identifiersep> output <identifiersep> stream ( ) . flush ( ) ; \n \t7 logger . trace ( <string_literal> ) ; } \n \t5 } catch ( io <identifiersep> exception e ) { \n <ect>
\t7 break ; \n \t6 case rule <identifiersep> clause <identifiersep> code . test <identifiersep> unbound : \n \t7 ai = code [ pc ++ ] ; \n \t7 if ( ! deref ( arg <identifiersep> vars [ ai ] ) . is <identifiersep> variable ( ) ) { \n <ect>
\t2 try { \n \t3 if ( executor instanceof executor <identifiersep> service ) { \n \t4 ( ( executor <identifiersep> service ) executor ) . shutdown ( ) ; } \n \t2 } catch ( throwable t ) { \n <ect>
\t3 <comment> \n \t3 log . debug ( <string_literal> ) ; \n \t3 <comment> \n \t3 mutable <identifiersep> object <identifiersep> iterator < tuple2 < integer , string > > iterator = merger . get <identifiersep> iterator ( ) ; \n <ect>
\t2 uuid session <identifiersep> id = response . session <identifiersep> id ; \n \t2 local <identifiersep> session session = get <identifiersep> session ( session <identifiersep> id ) ; \n \t2 if ( session == null ) \n \t2 { \n <ect>
\t2 if ( is <identifiersep> readoff && is <identifiersep> writeoff ) { \n \t3 lucene <identifiersep> cache <identifiersep> loader cache <identifiersep> loader = ( lucene <identifiersep> cache <identifiersep> loader ) testing <identifiersep> util . get <identifiersep> first <identifiersep> loader ( cache <identifiersep> manager . get <identifiersep> cache ( ) ) ; \n \t3 cache <identifiersep> loader . load ( <number_literal> ) ; \n \t2 } else { \n <ect>
\t7 injector = new caching <identifiersep> injector < object > ( registry , cast <identifiersep> utils . cast ( type , object . class ) ) ; } \n \t6 register <identifiersep> type <identifiersep> converter ( registry , method , to <identifiersep> type , from <identifiersep> type , \n \t8 new instance <identifiersep> method <identifiersep> type <identifiersep> converter ( injector , method , registry , allow <identifiersep> null ) ) ; } } } \n \t2 } else { \n <ect>
\t5 list < repository <identifiersep> meta <identifiersep> data > repositories <identifiersep> meta <identifiersep> data = new array <identifiersep> list < > ( repositories . repositories ( ) . size ( ) ) ; \n \t5 boolean changed = false ; \n \t5 for ( repository <identifiersep> meta <identifiersep> data repository <identifiersep> meta <identifiersep> data : repositories . repositories ( ) ) { \n \t6 if ( regex . simple <identifiersep> match ( request . name , repository <identifiersep> meta <identifiersep> data . name ( ) ) ) { \n <ect>
\t3 <comment> \n \t3 erl <identifiersep> logger . error ( <string_literal> + module <identifiersep> name + <string_literal> + r ) ; \n \t3 return false ; } \n \t2 <comment> \n <ect>
\t1 @ override \n \t1 public void clean <identifiersep> internal ( ) { \n \t2 logger . debug ( <string_literal> ) ; \n \t2 this . storage . clean <identifiersep> up ( ) ; \n <ect>
\t3 final string collection <identifiersep> name = get <identifiersep> ticket <identifiersep> collection <identifiersep> instance <identifiersep> by <identifiersep> metadata ( metadata ) ; \n \t3 if ( string <identifiersep> utils . is <identifiersep> blank ( collection <identifiersep> name ) ) { \n \t4 logger . error ( <string_literal> , ticket . get <identifiersep> id ( ) ) ; \n \t4 return ; } \n <ect>
\t3 if ( version <identifiersep> id == - 1 ) \n \t4 throw new voldemort <identifiersep> exception ( <string_literal> ) ; \n \t3 file [ ] back <identifiersep> up <identifiersep> dirs = read <identifiersep> only <identifiersep> utils . get <identifiersep> version <identifiersep> dirs ( store <identifiersep> dir , version <identifiersep> id , long . max <identifiersep> value ) ; \n \t3 if ( back <identifiersep> up <identifiersep> dirs == null || back <identifiersep> up <identifiersep> dirs . length < = 1 ) { \n <ect>
\t4 writer . key ( <string_literal> ) ; \n \t4 writer . value ( json <identifiersep> str ) ; \n \t4 writer . end <identifiersep> object ( ) ; \n \t3 } catch ( database <identifiersep> service <identifiersep> exception e ) { \n <ect>
\t4 user <identifiersep> id = long . parse <identifiersep> long ( user <identifiersep> id <identifiersep> str ) ; \n \t4 s <identifiersep> user <identifiersep> id . set ( user <identifiersep> id ) ; \n \t4 s <identifiersep> account . set ( user <identifiersep> id <identifiersep> values . get ( <string_literal> ) ) ; \n \t4 if ( user <identifiersep> id == - 1 ) { \n <ect>
\t2 if ( sorted . is <identifiersep> empty ( ) ) { \n \t3 throw new illegal <identifiersep> argument <identifiersep> exception ( <string_literal> ) ; } \n \t2 order <identifiersep> comparator . sort ( sorted ) ; \n \t2 final multifactor <identifiersep> authentication <identifiersep> provider provider = sorted . get ( sorted . size ( ) - 1 ) ; \n <ect>
\t4 try { \n \t5 log . trace ( <string_literal> , configuration . get <identifiersep> address ( ) ) ; \n \t5 do <identifiersep> reconnect <identifiersep> if <identifiersep> needed ( ) ; \n \t4 } catch ( exception e ) { \n <ect>
\t3 return ; } \n \t2 long sserver <identifiersep> id = ss <identifiersep> host . get <identifiersep> id ( ) ; \n \t2 long zone <identifiersep> id = ss <identifiersep> host . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ; \n \t2 if ( ! ( ss <identifiersep> host . get <identifiersep> type ( ) == host . type . secondary <identifiersep> storage || ss <identifiersep> host . get <identifiersep> type ( ) == host . type . local <identifiersep> secondary <identifiersep> storage ) ) { \n <ect>
@ target <identifiersep> gradle <identifiersep> version ( <string_literal> ) \n class combining <identifiersep> command <identifiersep> line <identifiersep> arguments <identifiersep> cross <identifiersep> version <identifiersep> spec extends tooling <identifiersep> api <identifiersep> specification { \n \t1 @ issue ( <string_literal> ) \n \t1 def <string_literal> ( ) { \n <ect>
\t1 throws eucalyptus <identifiersep> cloud <identifiersep> exception { \n \t1 try { \n \t1 <comment> \n \t1 lookup ( snapshot <identifiersep> id ) ; \n <ect>
\t6 . put ( <string_literal> , key <identifiersep> pair . get <identifiersep> key <identifiersep> name ( ) ) . build ( ) ) ) ) ; \n \t3 if ( ! instances <identifiersep> using <identifiersep> key <identifiersep> pair . is <identifiersep> empty ( ) ) { \n \t3 logger . debug ( <string_literal> , key <identifiersep> pair . get <identifiersep> key <identifiersep> name ( ) , instances <identifiersep> using <identifiersep> key <identifiersep> pair ) ; \n \t3 } else { \n <ect>
\t2 try { \n \t3 props <identifiersep> field . set <identifiersep> accessible ( true ) ; \n \t3 props <identifiersep> field . set ( this , props ) ; \n \t2 } catch ( throwable e ) { \n <ect>
\t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 logger . info ( <string_literal> + async <identifiersep> post <identifiersep> processing <identifiersep> msg <identifiersep> body <identifiersep> writer <identifiersep> interceptor . called ) ; \n \t2 logger . info ( <string_literal> + async <identifiersep> post <identifiersep> processing <identifiersep> interceptor . called ) ; \n \t2 response . buffer <identifiersep> entity ( ) ; \n <ect>
\t1 for ( constraint <identifiersep> violation < object > violation : violations ) { \n \t2 bean <identifiersep> validator <identifiersep> context ctx = bean <identifiersep> validator <identifiersep> context . of ( violation ) ; \n \t2 string msg = interpolator . interpolate ( violation . get <identifiersep> message <identifiersep> template ( ) , ctx , get <identifiersep> locale ( ) ) ; \n \t2 validator . add ( new validation <identifiersep> message ( msg , extract <identifiersep> category ( param <identifiersep> names , violation ) ) ) ; \n <ect>
\t4 lock <identifiersep> logger . debug ( <string_literal> , this , new exception ( ) ) ; } \n \t3 else { \n <ect>
\t1 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t2 if ( i < <number_literal> ) { \n \t2 logger . debug ( <string_literal> + i ) ; \n \t2 } else if ( i < <number_literal> ) { \n <ect>
\t2 try { \n \t3 string creds = ( check <identifiersep> not <identifiersep> null ( from ) ) . as <identifiersep> char <identifiersep> source ( charsets . utf <identifiersep> <number_literal> ) . read ( ) ; \n \t3 return json . from <identifiersep> json ( creds , credentials . class ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 public boolean revoke <identifiersep> all <identifiersep> pf <identifiersep> and <identifiersep> static <identifiersep> nat <identifiersep> rules <identifiersep> for <identifiersep> ip ( long ip <identifiersep> id , long user <identifiersep> id , account caller ) throws resource <identifiersep> unavailable <identifiersep> exception { \n \t2 list < firewall <identifiersep> rule > rules = new array <identifiersep> list < firewall <identifiersep> rule > ( ) ; \n \t2 list < port <identifiersep> forwarding <identifiersep> rule <identifiersep> vo > pf <identifiersep> rules =  <identifiersep> port <identifiersep> forwarding <identifiersep> dao . list <identifiersep> by <identifiersep> ip <identifiersep> and <identifiersep> not <identifiersep> revoked ( ip <identifiersep> id ) ; \n <ect>
\t2 template . send <identifiersep> body ( <string_literal> , xml <identifiersep> data ) ; \n \t2 assert <identifiersep> mock <identifiersep> endpoints <identifiersep> satisfied ( ) ; \n \t2 for ( exchange exchange : result . get <identifiersep> exchanges ( ) ) { \n \t3 string message = exchange . get <identifiersep> in ( ) . get <identifiersep> body ( string . class ) ; \n <ect>
\t2 return true ; \n \t1 } else { \n \t2 <comment> \n \t1 } catch ( exception e ) { \n <ect>
\t2 if ( config == null ) { \n \t3 try { \n \t4 config = new network <identifiersep> configuration ( network <identifiersep> interface . get <identifiersep> network <identifiersep> interfaces ( ) ) ; \n \t3 } catch ( socket <identifiersep> exception e ) { \n <ect>
\t3 system . out . println ( <string_literal> + fields . long <identifiersep> to <identifiersep> string ( slashdot <identifiersep> cache <identifiersep> size , true ) ) ; \n \t3 config . get ( <string_literal> ) . set ( <string_literal> , fields . long <identifiersep> to <identifiersep> string ( slashdot <identifiersep> cache <identifiersep> size , true ) ) ; \n \t3 logger . normal ( this , <string_literal> + selected <identifiersep> store <identifiersep> size ) ; \n \t2 } catch ( config <identifiersep> exception e ) { \n <ect>
\t5 multi = ( list < out <identifiersep> net <identifiersep> message > ) old <identifiersep> msg ; \n \t5 multi . add ( msg ) ; \n \t5  <identifiersep> selector <identifiersep> to <identifiersep> message . put ( sel , multi ) ; } \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t2 <comment> \n \t2 if ( new <identifiersep> view <identifiersep> or <identifiersep> null == null ) { \n \t3 <comment> \n \t3 <comment> \n <ect>
\t1 list < operation > removed = new array <identifiersep> list < operation > ( ) ; \n \t1 for ( operation <identifiersep> handle handle : handles ) { \n \t1 operation operation = remove <identifiersep> timed <identifiersep> out <identifiersep> operation ( handle ) ; \n \t1 if ( operation != null ) { \n <ect>
\t2 } catch ( no <identifiersep> route <identifiersep> to <identifiersep> host <identifiersep> exception nrthe ) { \n \t3  <identifiersep> log . error ( <string_literal> , nrthe ) ; \n \t3 return ; \n \t2 } catch ( connect <identifiersep> exception ce ) { \n <ect>
\t4 logger . debug ( <string_literal> , result ) ; \n \t4 if ( result != null && ! clazz . is <identifiersep> assignable <identifiersep> from ( result . get <identifiersep> class ( ) ) ) { \n \t5 throw new class <identifiersep> cast <identifiersep> exception ( <string_literal> + result + <string_literal> + result . get <identifiersep> class ( ) + <string_literal> + clazz ) ; } \n \t4 return ( t ) result ; } \n <ect>
\t2 final zoned <identifiersep> date <identifiersep> time current <identifiersep> time = zoned <identifiersep> date <identifiersep> time . now ( zone <identifiersep> offset . utc ) ; \n \t2 final zoned <identifiersep> date <identifiersep> time last <identifiersep> time <identifiersep> used = ticket <identifiersep> state . get <identifiersep> last <identifiersep> time <identifiersep> used ( ) ; \n \t2 final zoned <identifiersep> date <identifiersep> time kill <identifiersep> time = last <identifiersep> time <identifiersep> used . plus ( this . time <identifiersep> to <identifiersep> kill <identifiersep> in <identifiersep> seconds , chrono <identifiersep> unit . seconds ) ; \n \t2 if ( ticket <identifiersep> state . get <identifiersep> count <identifiersep> of <identifiersep> uses ( ) == 0 && current <identifiersep> time . is <identifiersep> before ( kill <identifiersep> time ) ) { \n <ect>
\t4 return false ; \n \t3 case declare <identifiersep> attackers : \n \t4 print <identifiersep> out <identifiersep> state ( game ) ; \n \t4 if ( actions . is <identifiersep> empty ( ) ) { \n <ect>
\t1 message <identifiersep> sequence < ? > seq = split <identifiersep> message <identifiersep> into <identifiersep> sequence ( event ) ; \n \t1 if ( ! seq . is <identifiersep> empty ( ) ) { \n \t2 return results <identifiersep> handler . aggregate <identifiersep> results ( process <identifiersep> parts ( seq , event ) , event ) ; \n \t1 } else { \n <ect>
\t3 cancel <identifiersep> compaction <identifiersep> result result = new cancel <identifiersep> compaction <identifiersep> result ( ) ; \n \t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 } catch ( org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception e ) { \n <ect>
\t2 iterable < box <identifiersep> item . info > it = root <identifiersep> folder . search ( <string_literal> + camel <identifiersep> test <identifiersep> folder + <string_literal> ) ; \n \t2 int search <identifiersep> results = size <identifiersep> of <identifiersep> iterable ( it ) ; \n \t2 boolean exists = search <identifiersep> results > 0 ? true : false ; \n \t2 assert <identifiersep> equals ( <string_literal> , false , exists ) ; \n <ect>
\t5 whitespace <identifiersep> before <identifiersep> property = buffer . substring ( 0 , i ) ; \n \t5 property <identifiersep> name = buffer . delete ( 0 , i ) . to <identifiersep> string ( ) . trim ( ) ; \n \t5 if ( log <identifiersep> debug ) logger . debug ( this , <string_literal> + property <identifiersep> name ) ; \n \t5 buffer . set <identifiersep> length ( 0 ) ; \n <ect>
\t2 final string metadata <identifiersep> file <identifiersep> name = get <identifiersep> backup <identifiersep> metadata <identifiersep> filename <identifiersep> prefix ( metadata <identifiersep> resource , service ) \n \t3 . concat ( get <identifiersep> backup <identifiersep> metadata <identifiersep> filename <identifiersep> suffix ( metadata <identifiersep> resource , service ) ) ; \n \t2 final file backup <identifiersep> file = new file ( this . metadata <identifiersep> backup <identifiersep> directory , metadata <identifiersep> file <identifiersep> name ) ; \n \t2 if ( backup <identifiersep> file . exists ( ) ) { \n <ect>
\t2 response . set <identifiersep> content <identifiersep> type ( media <identifiersep> type . application <identifiersep> json <identifiersep> value ) ; \n \t2 final j2e <identifiersep> context context = pac4j <identifiersep> utils . get <identifiersep> pac4j <identifiersep> j2e <identifiersep> context ( request , response ) ; \n \t2 final string access <identifiersep> token = get <identifiersep> access <identifiersep> token <identifiersep> from <identifiersep> request ( request ) ; \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( access <identifiersep> token ) ) { \n <ect>
\t2 max <identifiersep> depth = configuration . get <identifiersep> int ( max <identifiersep> depth ) ; \n \t2 seed = configuration . get <identifiersep> long ( seed ) ; \n \t2 weight <identifiersep> property = configuration . get <identifiersep> string ( weight <identifiersep> property , <string_literal> ) ; \n \t2 incident <identifiersep> message <identifiersep> scope = message <identifiersep> scope . local . of (  <identifiersep>  <identifiersep>  : : in <identifiersep> e , ( msg , edge ) - > msg + edge . < integer > value ( weight <identifiersep> property ) ) ; \n <ect>
\t2 scan . set <identifiersep> caching ( <number_literal> ) ; \n \t2 scan . set <identifiersep> cache <identifiersep> blocks ( true ) ; \n \t2 scan . set <identifiersep> start <identifiersep> row ( start <identifiersep> key ) ; \n \t2 scan . set <identifiersep> stop <identifiersep> row ( end <identifiersep> key ) ; \n <ect>
\t5 connection <identifiersep> pool . end <identifiersep> connection ( connection ) ; \n \t5 retried = i > 0 ; \n \t5 break ; \n \t4 } else { \n <ect>
\t4 it . close <identifiersep> with ( head . key <identifiersep> by ( key ) . union ( head . map ( no <identifiersep> op <identifiersep> int <identifiersep> map ) . key <identifiersep> by ( key ) ) ) . add <identifiersep> sink ( new receive <identifiersep> check <identifiersep> no <identifiersep> op <identifiersep> sink < integer > ( ) ) ; \n \t4 env . execute ( ) ; \n \t4 break ; <comment> \n \t3 } catch ( throwable t ) { \n <ect>
\t5 <comment> \n \t5 last <identifiersep> seg <identifiersep> chk <identifiersep> res . set ( true ) ; \n \t5 if ( ! is <identifiersep> loc <identifiersep> daemon ) { \n <ect>
\t3 image = new byte [ in . available ( ) ] ; \n \t3 in . read ( image ) ; } \n \t2 catch ( io <identifiersep> exception e ) \n \t2 { \n <ect>
\t7 . get <identifiersep> broadcast <identifiersep> domain <identifiersep> type ( ) == broadcast <identifiersep> domain <identifiersep> type . vxlan ) ) { \n \t4 final list < network <identifiersep> vo > configs =  <identifiersep> networks <identifiersep> dao . list <identifiersep> by ( owner . get <identifiersep> id ( ) , offering . get <identifiersep> id ( ) , plan . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; \n \t4 if ( configs . size ( ) > 0 ) { \n <ect>
\t8 meta . get <identifiersep> parameter <identifiersep> type ( ) + <string_literal> + meta . get <identifiersep> sql <identifiersep> type ( ) + <string_literal> + \n \t8 meta . get <identifiersep> type <identifiersep> name ( ) + <string_literal> + meta . is <identifiersep> nullable ( ) ) ; } } } } \n \t2 catch ( sql <identifiersep> exception ex ) { \n <ect>
\t3 logger = logger . get <identifiersep> logger ( target <identifiersep> logger <identifiersep> name ) ; \n \t3 logger . set <identifiersep> additivity ( false ) ; \n \t3 logger . set <identifiersep> level ( level . fatal ) ; } \n \t2 <comment> \n <ect>
\t3 out <identifiersep> stream . println ( <string_literal> ) ; \n \t3 out <identifiersep> stream . println ( <string_literal> ) ; \n \t2 } catch ( exception ex ) \n \t2 { \n <ect>
\t2 tunnel <identifiersep> id in <identifiersep> tunnel <identifiersep> id = in <identifiersep> tunnel . get <identifiersep> receive <identifiersep> tunnel <identifiersep> id ( 0 ) ; \n \t2 router <identifiersep> info in <identifiersep> gateway = get <identifiersep> context ( ) . net <identifiersep> db ( ) . lookup <identifiersep> router <identifiersep> info <identifiersep> locally ( in <identifiersep> tunnel . get <identifiersep> peer ( 0 ) ) ; \n \t2 if ( in <identifiersep> gateway == null ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t3 context . abort ( ) ; \n \t3 response . send <identifiersep> error ( http <identifiersep> servlet <identifiersep> response . sc <identifiersep> bad <identifiersep> request ) ; \n \t3 return ; } \n \t2 if ( dso == null ) { \n <ect>
\t3  <identifiersep> usage <identifiersep> aggregation <identifiersep> range = usage <identifiersep> utils . usage <identifiersep> aggregation <identifiersep> range <identifiersep> min ; } \n \t2 <comment> \n \t2 final long initial <identifiersep> delay = agg <identifiersep> date - system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 if ( initial <identifiersep> delay < 0 ) { \n <ect>
\t3 pstmt . execute <identifiersep> update ( ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , e ) ; } } \n \t1 private void upgrade <identifiersep> vpc <identifiersep> service <identifiersep> map ( connection conn ) { \n <ect>
\t1 operation <identifiersep> handle op <identifiersep> handle = cli <identifiersep> service . get <identifiersep> table <identifiersep> types ( new session <identifiersep> handle ( req . get <identifiersep> session <identifiersep> handle ( ) ) ) ; \n \t1 resp . set <identifiersep> operation <identifiersep> handle ( op <identifiersep> handle . to <identifiersep> t <identifiersep> operation <identifiersep> handle ( ) ) ; \n \t1 resp . set <identifiersep> status ( ok <identifiersep> status ) ; \n \t1 } catch ( exception e ) { \n <ect>
<number_literal> . execute ( ) . action <identifiersep> get ( ) ; \n \t2 assert <identifiersep> that ( snapshot <identifiersep> response . status ( ) , equal <identifiersep> to ( rest <identifiersep> status . ok ) ) ; \n \t2 ensure <identifiersep> searchable ( ) ; } \n \t1 public void test <identifiersep> create <identifiersep> snapshot <identifiersep> with <identifiersep> blocks ( ) { \n <ect>
\t3 pw . println ( version . get <identifiersep> full <identifiersep> version ( ) ) ; \n \t3 if ( zk <identifiersep> server instanceof read <identifiersep> only <identifiersep> zoo <identifiersep> keeper <identifiersep> server ) { \n \t4 pw . println ( <string_literal> ) ; } \n \t3 if ( len == four <identifiersep> letter <identifiersep> commands . stat <identifiersep> cmd ) { \n <ect>
\t4 return dst ; \n \t3 } catch ( illegal <identifiersep> argument <identifiersep> exception ex ) { \n \t4 <comment> \n \t4 log . error ( <string_literal> + id ) ; \n <ect>
\t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . add <identifiersep> as <identifiersep> new ( meta <identifiersep> data . index ( <string_literal> ) ) \n \t4 . build ( ) ; \n \t2 cluster <identifiersep> state cluster <identifiersep> state = cluster <identifiersep> state . builder ( org . elasticsearch . cluster . cluster <identifiersep> name . cluster <identifiersep> name <identifiersep> setting . get <identifiersep> default ( settings . empty ) ) . meta <identifiersep> data ( meta <identifiersep> data ) . routing <identifiersep> table ( initial <identifiersep> routing <identifiersep> table ) . build ( ) ; \n <ect>
\t1 h <identifiersep> column <identifiersep> descriptor col <identifiersep> desc = new h <identifiersep> column <identifiersep> descriptor ( family <identifiersep> bytes ) ; \n \t1 if ( ! admin . table <identifiersep> exists ( table <identifiersep> name . value <identifiersep> of ( table <identifiersep> name ) ) ) { \n \t1 if ( options . get <identifiersep> create <identifiersep> h <identifiersep> base <identifiersep> table ( ) ) { \n \t2 <comment> \n <ect>
\t3 final w <identifiersep> string long <identifiersep> path = new w <identifiersep> string ( <string_literal> + path ) ; \n \t3 <comment> \n \t3 final int length = jna <identifiersep> kernel32library . get <identifiersep> instance ( ) . get <identifiersep> short <identifiersep> path <identifiersep> name <identifiersep> w ( long <identifiersep> path , null , 0 ) ; \n \t3 if ( length == 0 ) { \n <ect>
\t1 set < thread > threads = thread . get <identifiersep> all <identifiersep> stack <identifiersep> traces ( ) . key <identifiersep> set ( ) ; \n \t1 exception e = new exception ( ) ; \n \t1 for ( thread thread : threads ) { \n \t1 e . set <identifiersep> stack <identifiersep> trace ( thread . get <identifiersep> stack <identifiersep> trace ( ) ) ; \n <ect>
\t3 throw new invalid <identifiersep> policy <identifiersep> document <identifiersep> exception ( json <identifiersep> object . to <identifiersep> string ( ) , <string_literal> ) ; } \n \t2 } else if ( policy <identifiersep> item instanceof json <identifiersep> array ) { \n \t3 json <identifiersep> array json <identifiersep> array = ( json <identifiersep> array ) policy <identifiersep> item ; \n \t3 if ( ! partial <identifiersep> match ( json <identifiersep> array , form <identifiersep> fields , policy <identifiersep> item <identifiersep> names ) ) { \n <ect>
\t1 @ override \n \t1 public void reuse <identifiersep> variant <identifiersep> entry <identifiersep> for ( \n \t3 final http <identifiersep> host host , final http <identifiersep> request request , final variant variant ) { \n <ect>
\t4 throw new execution <identifiersep> exception ( <string_literal> + filter <identifiersep> description ) ; \n \t3 } else { \n \t4 return true ; } \n \t2 default : \n <ect>
\t2 this . group <identifiersep> ids . add ( correlation <identifiersep> key ) ; \n \t2 return this . message <identifiersep> store . add <identifiersep> message <identifiersep> to <identifiersep> group ( correlation <identifiersep> key , message ) ; } \n \t1 protected void expire <identifiersep> group ( object correlation <identifiersep> key , message <identifiersep> group group ) { \n <ect>
\t3 long hint ; \n \t3 try { \n \t4 hint = long . parse <identifiersep> long ( value ) ; \n \t3 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 <comment> \n \t2 init <identifiersep> input <identifiersep> format ( ) ; \n <ect>
\t6 server <identifiersep> socket . bind ( socket <identifiersep> address ) ; } \n \t5 consumer . start <identifiersep> accept <identifiersep> thread ( server <identifiersep> socket ) ; \n \t4 } catch ( bind <identifiersep> exception bind <identifiersep> exception ) { \n \t5 if ( system . current <identifiersep> time <identifiersep> millis ( ) > start <identifiersep> ticks + consumer . get <identifiersep> configuration ( ) . get <identifiersep> bind <identifiersep> timeout ( ) ) { \n <ect>
\t3 } else { \n \t4 <comment> \n \t4 <comment> \n \t4 out . append ( pct <identifiersep> encoding [ <number_literal> + bytes [ i ] ] ) ; } } \n <ect>
\t3 this . sorter = new fixed <identifiersep> length <identifiersep> record <identifiersep> sorter < in > ( this . serializer , sorting <identifiersep> comparator . duplicate ( ) , memory ) ; \n \t2 } else { \n \t3 this . sorter = new normalized <identifiersep> key <identifiersep> sorter < in > ( this . serializer , sorting <identifiersep> comparator . duplicate ( ) , memory ) ; } \n <ect>
\t3 case unknown : \n \t4 log . error ( <string_literal> ) ; \n \t4 return - 1 ; \n \t3 default : \n <ect>
\t2 if ( nexus <identifiersep> url == null || nexus <identifiersep> url . is <identifiersep> empty ( ) ) { \n \t3 logger . warn ( <string_literal> ) ; \n \t3 return ; } \n \t2 if ( ! started . compare <identifiersep> and <identifiersep> set ( false , true ) ) { \n <ect>
\t2 if ( datain != null ) { \n \t3 try { \n \t4 datain . close ( ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 sb . append ( error <identifiersep> output ) ; \n \t4 int ret = process . wait <identifiersep> for ( ) ; \n \t4 if ( ret != 0 ) { \n \t5 log . warn ( command + <string_literal> , ret , sb . to <identifiersep> string ( ) ) ; } \n <ect>
\t1 public void state <identifiersep> changed ( curator <identifiersep> framework curator <identifiersep> framework , connection <identifiersep> state connection <identifiersep> state ) { \n \t2 switch ( connection <identifiersep> state ) { \n \t2 case suspended : \n \t2 case lost : \n <ect>
<comment> \n \t1 public void start <identifiersep> server ( int node <identifiersep> id ) throws io <identifiersep> exception { \n <ect>
\t4 return false ; } } \n \t2 <comment> \n \t2 final int nic <identifiersep> count = get <identifiersep> active <identifiersep> nics <identifiersep> in <identifiersep> network ( network <identifiersep> id ) ; \n \t2 if ( nic <identifiersep> count > 0 ) { \n <ect>
\t1 var frame <identifiersep> element = this .  <identifiersep> get <identifiersep> frame <identifiersep> element ( window <identifiersep> object ) ; \n \t1 <comment> \n \t1 var hta <identifiersep> sub <identifiersep> frame = this .  <identifiersep> is <identifiersep> hta <identifiersep> sub <identifiersep> frame ( window <identifiersep> object ) ; \n \t1 if ( frame <identifiersep> element && ! hta <identifiersep> sub <identifiersep> frame ) { \n <ect>
\t5 logger . warn ( ie ) ; } } } \n \t2 try { \n \t3 data <identifiersep> socket . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 final map < ? , ? > record = it . next ( ) ; \n \t4 final registered <identifiersep> service svc = convert <identifiersep> service <identifiersep> properties ( record ) ; \n \t4 logger . debug ( <string_literal> , svc ) ; \n \t4 results . add ( svc ) ; } \n <ect>
public class map <identifiersep> r <identifiersep> log <identifiersep> closer implements log <identifiersep> closer { \n private static final logger log = logger <identifiersep> factory . get <identifiersep> logger ( map <identifiersep> r <identifiersep> log <identifiersep> closer . class ) ; \n @ override \n public long close ( accumulo <identifiersep> configuration conf , volume <identifiersep> manager fs , path path ) throws io <identifiersep> exception { \n <ect>
\t5 fail ( ) ; } \n \t3 } catch ( verification <identifiersep> exception e ) { \n \t4 threw = true ; \n \t4 if ( ! block . throws <identifiersep> exception ) { \n <ect>
<comment> \n \t1 public void set <identifiersep> exception ( @ nullable repository repo , throwable err ) { \n \t2 if ( ketch <identifiersep> replica . log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t2 nicira <identifiersep> nvp <identifiersep> device <identifiersep> vo nicira <identifiersep> nvp <identifiersep> device = devices . get ( 0 ) ; \n \t2 host <identifiersep> vo nicira <identifiersep> nvp <identifiersep> host = host <identifiersep> dao . find <identifiersep> by <identifiersep> id ( nicira <identifiersep> nvp <identifiersep> device . get <identifiersep> host <identifiersep> id ( ) ) ; \n \t2 nicira <identifiersep> nvp <identifiersep> nic <identifiersep> mapping <identifiersep> vo nic <identifiersep> map = nicira <identifiersep> nvp <identifiersep> nic <identifiersep> mapping <identifiersep> dao . find <identifiersep> by <identifiersep> nic <identifiersep> uuid ( nic <identifiersep> vo . get <identifiersep> uuid ( ) ) ; \n \t2 if ( nic <identifiersep> map == null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void sts <identifiersep> using <identifiersep> default <identifiersep> configuration ( string file <identifiersep> name ) { \n <ect>
\t1 for ( final injectable injectable : injectables <identifiersep> by <identifiersep> name . values ( ) ) { \n \t1 for ( final dependency dep : injectable . get <identifiersep> dependencies ( ) ) { \n \t2 final base <identifiersep> dependency base <identifiersep> dep = base <identifiersep> dependency . as ( dep ) ; \n \t2 if ( ! linked . contains ( base <identifiersep> dep . injectable ) ) { \n <ect>
\t6 len ( list <identifiersep> host ) , \n \t6 1 , \n \t6 <string_literal> \n \t6 ) \n <ect>
\t3 result . ouch3 = ( table <identifiersep> not <identifiersep> found <identifiersep> exception ) e ; \n \t3 result . set <identifiersep> ouch3is <identifiersep> set ( true ) ; \n \t3 msg = result ; \n \t3 } else if ( e instanceof org . apache . thrift . transport . t <identifiersep> transport <identifiersep> exception ) { \n <ect>
\t2 try { \n \t3 set <identifiersep> user <identifiersep> image ( cms , user , uploaded <identifiersep> file ) ; \n \t3 result = true ; \n \t2 } catch ( cms <identifiersep> exception e ) { \n <ect>
\t3 if ( value == null ) { \n \t4 boolean mask <identifiersep> value = name . ends <identifiersep> with ( password <identifiersep> property <identifiersep> end ) ; \n \t4 value = default <identifiersep> value ; \n \t4 string log <identifiersep> value = ( mask <identifiersep> value ) ? <string_literal> : default <identifiersep> value ; \n <ect>
\t2 assert <identifiersep> aliases <identifiersep> missing ( client . admin ( ) . indices ( ) . prepare <identifiersep> aliases <identifiersep> exist ( <string_literal> , <string_literal> ) . get ( ) ) ; \n \t2 assert <identifiersep> aliases <identifiersep> exist ( client . admin ( ) . indices ( ) . prepare <identifiersep> aliases <identifiersep> exist ( <string_literal> ) . get ( ) ) ; } \n \t1 public void test <identifiersep> restore <identifiersep> templates ( ) throws exception { \n \t2 client client = client ( ) ; \n <ect>
\t3 stream <identifiersep> gobbler . consume ( process . get <identifiersep> input <identifiersep> stream ( ) , true ) ; \n \t3 int exit = wait <identifiersep> for ( process ) ; \n \t3 if ( exit == 0 ) { \n \t4 killed = true ; \n <ect>
\t2 log . debug ( <string_literal> , op ) ; \n \t2 op . visit ( rewriter ) ; \n \t2 op result = rewriter . get <identifiersep> result ( ) ; \n \t2 result = result == null ? op : result ; \n <ect>
\t2 for ( execution <identifiersep> command cmd : commands <identifiersep> to <identifiersep> schedule ) { \n \t2 config <identifiersep> helper . process <identifiersep> hidden <identifiersep> attribute ( cmd . get <identifiersep> configurations ( ) , cmd . get <identifiersep> configuration <identifiersep> attributes ( ) , cmd . get <identifiersep> role ( ) , false ) ; \n \t2 process <identifiersep> host <identifiersep> role ( request , stage , cmd , commands <identifiersep> to <identifiersep> start , commands <identifiersep> to <identifiersep> update ) ; } \n \t2 log . debug ( <string_literal> , commands <identifiersep> to <identifiersep> start . size ( ) ) ; \n <ect>
\t2 try { \n \t3 transcoder . transcode ( input , output ) ; \n \t3 return true ; \n \t2 } catch ( transcoder <identifiersep> exception ex ) { \n <ect>
\t1 protected void do <identifiersep> delete <identifiersep> namespace ( exchange exchange , string operation ) { \n \t2 string namespace <identifiersep> name = exchange . get <identifiersep> in ( ) . get <identifiersep> header ( \n \t4 kubernetes <identifiersep> constants . kubernetes <identifiersep> namespace <identifiersep> name , string . class ) ; \n \t2 if ( object <identifiersep> helper . is <identifiersep> empty ( namespace <identifiersep> name ) ) { \n <ect>
\t2 logger . debug ( <string_literal> , entity <identifiersep> id ) ; \n \t2 if ( ! metadata <identifiersep> ui <identifiersep> utils . is <identifiersep> metadata <identifiersep> found <identifiersep> for <identifiersep> entity <identifiersep> id ( metadata <identifiersep> adapter , entity <identifiersep> id ) ) { \n \t3 logger . debug ( <string_literal> , entity <identifiersep> id ) ; \n \t3 final registered <identifiersep> service registered <identifiersep> service = get <identifiersep> registered <identifiersep> service <identifiersep> from <identifiersep> request ( request <identifiersep> context , entity <identifiersep> id ) ; \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 final string node <identifiersep> a = internal <identifiersep> cluster ( ) . start <identifiersep> node ( ) ; \n \t2 logger . info ( <string_literal> , node <identifiersep> a ) ; \n \t2 byte <identifiersep> size <identifiersep> value shard <identifiersep> size = create <identifiersep> and <identifiersep> populate <identifiersep> index ( index <identifiersep> name , 1 , shard <identifiersep> count , replica <identifiersep> count ) . get <identifiersep> shards ( ) [ 0 ] . get <identifiersep> stats ( ) . get <identifiersep> store ( ) . size ( ) ; \n <ect>
\t4 public boolean should <identifiersep> timeout ( ) { \n \t5 return false ; } \n \t4 @ override \n \t4 public void on <identifiersep> timeout ( ) { \n <ect>
\t1 try { \n \t1 log . debug ( <string_literal> + current <identifiersep> snap <identifiersep> id + <string_literal> + prev <identifiersep> snap <identifiersep> id + <string_literal> + base <identifiersep> iqn ) ; \n \t1 connection <identifiersep> manager . restore <identifiersep> snapshot <identifiersep> delta ( base <identifiersep> iqn , sr ) ; \n \t1 } catch ( exception e ) { \n <ect>
\t6 async <identifiersep> pipeline . new <identifiersep> invocation ( pipeline <identifiersep> context ) . invoke ( ) ; \n \t5 } finally { \n \t6 rccs . unbind ( request ) ; } \n \t4 } catch ( throwable e ) { \n <ect>
\t5 json <identifiersep> utilities . append ( children , child <identifiersep> element ) ; \n \t4 } else { \n \t5 <comment> \n \t2 } catch ( xml <identifiersep> stream <identifiersep> exception e ) { \n <ect>
\t2 client ( ) . prepare <identifiersep> index ( <string_literal> , <string_literal> , <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) . set <identifiersep> refresh <identifiersep> policy ( refresh <identifiersep> policy . immediate ) . get ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> get ( <string_literal> , <string_literal> , <string_literal> ) . execute ( ) . action <identifiersep> get ( ) . is <identifiersep> exists ( ) , equal <identifiersep> to ( false ) ) ; } \n <ect>
\t4 <comment> \n \t4 servlet = config . framework ( ) . new <identifiersep> class <identifiersep> instance ( servlet . class , \n \t6 ( class < servlet > ) io <identifiersep> utils . load <identifiersep> class ( get <identifiersep> class ( ) , servlet <identifiersep> class <identifiersep> name ) ) ; } } \n \t2 if ( servlet != null ) { \n <ect>
\t6 connected = false ; \n \t6 connect <identifiersep> socket ( ) ; \n \t5 } catch ( exception ex ) { \n \t6 logger . error ( <string_literal> , ex ) ; } } } \n <ect>
\t4 if ( entity . any <identifiersep> attribute <identifiersep> named ( key ) == null ) { \n \t5 if ( key . index <identifiersep> of ( <string_literal> ) != 0 ) { \n \t6 if ( !  <identifiersep> keys <identifiersep> with <identifiersep> warning . contains ( key + <string_literal> + entity ) ) { \n \t7  <identifiersep> keys <identifiersep> with <identifiersep> warning . add ( key + <string_literal> + entity ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 super . on <identifiersep> destroy ( ) \n \t2 log . debug ( tag , <string_literal> + this ) } \n \t1 override fun on <identifiersep> save <identifiersep> instance <identifiersep> state ( out <identifiersep> state : bundle ) { \n \t2 super . on <identifiersep> save <identifiersep> instance <identifiersep> state ( out <identifiersep> state ) \n <ect>
\t4 catch ( interrupted <identifiersep> exception e ) { \n \t5 if ( running ) { \n \t6 throw e ; } } } } \n \t2 catch ( throwable t ) { \n <ect>
<comment> \n <comment> \n \t2 if ( ! rm . contains ( end ) ) \n \t2 { \n <ect>
\t4 delayed <identifiersep> update <identifiersep> call ( action ) ; \n \t3 } else { \n \t4 do <identifiersep> update <identifiersep> call ( action ) ; } \n \t2 } else { \n <ect>
<comment> \n \t1 protected void rewrite <identifiersep> links ( cms <identifiersep> resource resource , collection < cms <identifiersep> relation > relations ) throws cms <identifiersep> exception { \n <ect>
\t3 update <identifiersep> method method = <string_literal> . equals ( uri . get <identifiersep> scheme ( ) ) ? file : http ; \n \t3 va = new version <identifiersep> available ( <string_literal> , <string_literal> , method , uris ) ; \n \t3  <identifiersep> available . put <identifiersep> if <identifiersep> absent ( item , va ) ; } \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t5 resource . set <identifiersep> broadcaster ( b ) ; \n \t5 b . set <identifiersep> scope ( scope . request ) ; \n \t5 if ( resource . get <identifiersep> atmosphere <identifiersep> resource <identifiersep> event ( ) . is <identifiersep> suspended ( ) ) { \n \t6 b . add <identifiersep> atmosphere <identifiersep> resource ( resource ) ; } \n <ect>
\t5 throw new my <identifiersep> collab <identifiersep> exception ( e ) ; } } \n \t3 try ( file <identifiersep> writer writer = new file <identifiersep> writer ( new file ( file <identifiersep> utils . get <identifiersep> user <identifiersep> folder ( ) , pid <identifiersep> file ) , false ) ) { \n \t4 writer . write ( <string_literal> ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t1 opts . parse <identifiersep> args ( app , args ) ; \n \t1 security <identifiersep> util . server <identifiersep> login ( site <identifiersep> configuration . get <identifiersep> instance ( ) ) ; \n \t1 instance instance = hdfs <identifiersep> zoo <identifiersep> instance . get <identifiersep> instance ( ) ; \n \t1 server <identifiersep> configuration <identifiersep> factory conf = new server <identifiersep> configuration <identifiersep> factory ( instance ) ; \n <ect>
\t1 @ override \n \t1 public void execute ( run < ? , ? > build , launcher launcher , task <identifiersep> listener listener ) \n \t3 throws docker <identifiersep> exception { \n \t2 final print <identifiersep> stream llog = listener . get <identifiersep> logger ( ) ; \n <ect>
\t5 return <number_literal> ; \n \t4 } else { \n \t5 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; \n \t5 string volume <identifiersep> id = values . get ( <string_literal> ) ; \n <ect>
<comment> \n \t1 void start <identifiersep> next <identifiersep> scroll ( time <identifiersep> value last <identifiersep> batch <identifiersep> start <identifiersep> time , time <identifiersep> value now , int last <identifiersep> batch <identifiersep> size ) { \n \t2 if ( task . is <identifiersep> cancelled ( ) ) { \n <ect>
import com . cloud . utils . testcase . log4j <identifiersep> enabled <identifiersep> test <identifiersep> case ; \n public class test <identifiersep> profiler extends log4j <identifiersep> enabled <identifiersep> test <identifiersep> case { \n \t1 protected final static logger s <identifiersep> logger = logger . get <identifiersep> logger ( test <identifiersep> profiler . class ) ; \n \t1 public void test <identifiersep> profiler ( ) { \n <ect>
\t5 try { \n \t6 leader <identifiersep> initiator . this . leader <identifiersep> event <identifiersep> publisher . publish <identifiersep> on <identifiersep> granted ( leader <identifiersep> initiator . this , \n \t8 leader <identifiersep> initiator . this . context , leader <identifiersep> initiator . this . candidate . get <identifiersep> role ( ) ) ; } \n \t5 catch ( exception e ) { \n <ect>
\t2 webhook <identifiersep> request . set <identifiersep> url ( webhooks <identifiersep> input <identifiersep> data . webhook <identifiersep> url + uuid ) ; \n \t2 webhook <identifiersep> request . set <identifiersep> event <identifiersep> types ( event <identifiersep> type <identifiersep> list <identifiersep> test <identifiersep> case . create <identifiersep> auth <identifiersep> event <identifiersep> type <identifiersep> list ( ) ) ; \n \t2 logger . info ( <string_literal> + webhook <identifiersep> request . to <identifiersep> json ( ) ) ; \n \t2 webhook webhook <identifiersep> response = webhook <identifiersep> request . create ( test <identifiersep> constants . sandbox <identifiersep> context , webhook <identifiersep> request ) ; \n <ect>
<comment> \n \t1 public void set <identifiersep> refresh <identifiersep> count ( int count ) { \n \t2 if ( count < 0 ) { \n <ect>
\t2 for ( exchange exchange : list ) { \n \t3 try { \n \t4 message in = exchange . get <identifiersep> in ( ) ; \n \t4 node tidy <identifiersep> markup = in . get <identifiersep> body ( node . class ) ; \n <ect>
\t2 logger . debug ( <string_literal> , uuid ) ; \n \t2 try { \n \t3 return structr <identifiersep> app . get <identifiersep> instance ( security <identifiersep> context ) . get ( abstract <identifiersep> file . class , uuid ) ; \n \t2 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t2 < input type = <string_literal> ng - model = <string_literal> / > \n \t2 < button ng - click = <string_literal> > log < / button > \n \t2 < button ng - click = <string_literal> > warn < / button > \n \t2 < button ng - click = <string_literal> > info < / button > \n <ect>
\t5 { \n \t6 swing <identifiersep> utilities . invoke <identifiersep> and <identifiersep> wait ( creator ) ; } \n \t5 catch ( interrupted <identifiersep> exception e ) \n \t5 { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; \n \t3 if ( response <identifiersep> code == <number_literal> ) { \n \t4 input <identifiersep> stream is = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t4 map < string , string > success = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> } ) ; \n <ect>
\t7 service <identifiersep> support . dispose ( this ) ; \n \t6 } else { \n \t7 trigger <identifiersep> start <identifiersep> bridge ( ) ; } } } \n \t3 } else { \n <ect>
\t2 for ( int i = 0 ; i < n ; i ++ ) { \n \t3 int oidx = index . get <identifiersep> index ( items . get <identifiersep> key ( i ) ) ; \n \t3 count <identifiersep> array [ i ] = counts . get <identifiersep> int ( oidx ) ; \n \t3 offsets [ i ] = sums . get <identifiersep> double ( oidx ) / count <identifiersep> array [ i ] - mean ; } \n <ect>
\t4 xaresource . prepare ( xid ) ; \n \t4 xaresource . commit ( xid , false ) ; \n \t4 xid = null ; \n \t3 } catch ( throwable e ) { \n <ect>
\t8 exe . shutdown <identifiersep> now ( ) ; \n \t8 try { \n \t9 ctx . resource ( ) . cleanup ( cp ) ; } \n \t8 catch ( grid <identifiersep> exception e ) { \n <ect>
\t2 active <identifiersep> mq <identifiersep> queue queue = new active <identifiersep> mq <identifiersep> queue ( <string_literal> ) ; \n \t2 active <identifiersep> mq <identifiersep> topic topic = new active <identifiersep> mq <identifiersep> topic ( <string_literal> ) ; \n \t2 <comment> \n \t2 send <identifiersep> messages ( queue ) ; \n <ect>
\t5 entry . include <identifiersep> global <identifiersep> state ( ) ) ; \n \t4 remove <identifiersep> snapshot <identifiersep> from <identifiersep> cluster <identifiersep> state ( snapshot , snapshot <identifiersep> info , null ) ; \n \t4 logger . info ( <string_literal> , snapshot , snapshot <identifiersep> info . state ( ) ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 throw ( e ) ; } \n \t2 try { \n \t3 data <identifiersep> output <identifiersep> stream . write ( idsession ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 for ( tuple < translog . location , consumer < boolean > > listener : listeners <identifiersep> to <identifiersep> fire ) { \n \t5 try { \n \t6 listener . v2 ( ) . accept ( false ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 com . google . api . services . drive . model . comment <identifiersep> list result1 = request <identifiersep> body ( <string_literal> , file <identifiersep> id ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( result1 . get ( <string_literal> ) ) ; \n <ect>
\t6 camel <identifiersep> context . start ( ) ; } \n \t4 } catch ( exception e ) { \n \t5 throw new camel <identifiersep> spring <identifiersep> javaconfig <identifiersep> initialization <identifiersep> exception ( e ) ; } } \n \t2 } else { \n <ect>
\t3 xa = true ; } \n \t2 if ( org . apache . tomcat . jdbc . pool . data <identifiersep> source . class . get <identifiersep> name ( ) . equals ( ref . get <identifiersep> class <identifiersep> name ( ) ) ) { \n \t3 ok = true ; } \n \t2 if ( ! ok ) { \n <ect>
\t3 dir = new file ( context . get <identifiersep> wiki ( ) . param ( <string_literal> ) ) ; \n \t3 try { \n \t4 temp <identifiersep> dir = new file ( dir , <string_literal> ) ; \n \t3 } catch ( exception e2 ) { \n <ect>
<number_literal> public void do <identifiersep> in <identifiersep> transaction <identifiersep> without <identifiersep> result ( final transaction <identifiersep> status status ) { \n <number_literal> final user <identifiersep> statistics <identifiersep> vo stats =  <identifiersep> user <identifiersep> stats <identifiersep> dao . lock ( router . get <identifiersep> account <identifiersep> id ( ) , router . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) , network . get <identifiersep> id ( ) , \n <number_literal> for <identifiersep> vpc ? router <identifiersep> nic . get <identifiersep> i <identifiersep> pv4address ( ) : null , router . get <identifiersep> id ( ) , router <identifiersep> type ) ; \n <number_literal> if ( stats == null ) { \n <ect>
\t4 ds <identifiersep> name = ds <identifiersep> mo . get <identifiersep> name ( ) ; \n \t4 disk <identifiersep> backing <identifiersep> file <identifiersep> base <identifiersep> name = volume . get <identifiersep> path ( ) ; } \n \t3 virtual <identifiersep> machine <identifiersep> disk <identifiersep> info disk <identifiersep> info = disk <identifiersep> info <identifiersep> builder . get <identifiersep> disk <identifiersep> info <identifiersep> by <identifiersep> backing <identifiersep> file <identifiersep> base <identifiersep> name ( disk <identifiersep> backing <identifiersep> file <identifiersep> base <identifiersep> name , ds <identifiersep> name ) ; \n \t3 if ( disk <identifiersep> info != null ) { \n <ect>
\t5 instance <identifiersep> name , config . get <identifiersep> consumer <identifiersep> group ( ) , \n \t5 config . get <identifiersep> topic ( ) , date . get <identifiersep> time ( ) ) ; \n \t4 log . info ( <string_literal> + date ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t5 configuration . get <identifiersep> user <identifiersep> name ( ) , \n \t5 configuration . get <identifiersep> password ( ) ) , \n \t4 true \n \t3 ) ; \n <ect>
\t4 final object value = descriptor . get <identifiersep> read <identifiersep> method ( ) . invoke ( target ) ; \n \t4 serialized <identifiersep> properties . add ( value != null ? value . to <identifiersep> string ( ) : <string_literal> ) ; } \n \t3 return unmodifiable <identifiersep> list ( serialized <identifiersep> properties ) ; \n \t2 } catch ( introspection <identifiersep> exception e ) { \n <ect>
\t1 public list < i <identifiersep> person <identifiersep> attribute <identifiersep> dao > stub <identifiersep> attribute <identifiersep> repositories ( ) { \n \t2 final list < i <identifiersep> person <identifiersep> attribute <identifiersep> dao > list = new array <identifiersep> list < > ( ) ; \n \t2 final map < string , string > attrs = cas <identifiersep> properties . get <identifiersep> authn ( ) . get <identifiersep> attribute <identifiersep> repository ( ) . get <identifiersep> stub ( ) . get <identifiersep> attributes ( ) ; \n \t2 if ( ! attrs . is <identifiersep> empty ( ) && list . is <identifiersep> empty ( ) ) { \n <ect>
\t2 <comment> \n \t2 if ( hbm <identifiersep> xml <identifiersep> bin <identifiersep> file . exists ( ) ) { \n \t3 final boolean success = hbm <identifiersep> xml <identifiersep> bin <identifiersep> file . delete ( ) ; \n \t3 if ( ! success ) { \n <ect>
\t4 if ( language == null ) \n \t5 throw new cmd <identifiersep> exception ( <string_literal> + filename ) ; \n \t4 txn . execute <identifiersep> write ( cmd <identifiersep> line <identifiersep> config . dsg , ( ) - > rdf <identifiersep> data <identifiersep> mgr . read ( cmd <identifiersep> line <identifiersep> config . dsg , filename ) ) ; } \n \t3 if ( contains ( arg <identifiersep> mem <identifiersep> tdb ) ) { \n <ect>
\t3 response . flush <identifiersep> buffer ( ) ; \n \t3 return true ; } \n \t2 <comment> \n \t2 if ( <string_literal> . equals ( extra <identifiersep> path <identifiersep> info ) ) { \n <ect>
\t1 public ns <identifiersep> mutable <identifiersep> array < string > update <identifiersep> container <identifiersep> i <identifiersep> ds ( ) { \n \t2 log . debug ( <string_literal> , update <identifiersep> container <identifiersep> i <identifiersep> ds . components <identifiersep> joined <identifiersep> by <identifiersep> string ( <string_literal> ) ) ; \n \t2 return update <identifiersep> container <identifiersep> i <identifiersep> ds ; } \n \t1 public void property <identifiersep> changed ( ns <identifiersep> notification n ) { \n <ect>
<number_literal> queue . clear <identifiersep> pending <identifiersep> messages ( ) ; } } } \n <number_literal> broker . start <identifiersep> all <identifiersep> connectors ( ) ; \n <number_literal> log . info ( <string_literal> + broker ) ; } \n \t9 } catch ( exception e ) { \n <ect>
\t6 @ nonnull diff <identifiersep> cache diff <identifiersep> cache , \n \t6 @ nonnull string path , \n \t6 @ nonnull revision <identifiersep> vector from , \n \t6 @ nonnull revision <identifiersep> vector to ) throws io <identifiersep> exception { \n <ect>
\t2 for ( int i = 0 ; i < retry <identifiersep> count ; i ++ ) { \n \t3 try { \n \t4 return operation . execute ( ) ; \n \t3 } catch ( keeper <identifiersep> exception . session <identifiersep> expired <identifiersep> exception e ) { \n <ect>
\t2 logger . info ( <string_literal> , node <identifiersep> a , node <identifiersep> b ) ; \n \t2 client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> reroute ( ) \n \t4 . add ( new move <identifiersep> allocation <identifiersep> command ( index <identifiersep> name , 0 , node <identifiersep> a , node <identifiersep> b ) ) \n \t4 . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> state ( ) ; \n <ect>
\t3 if ( this . attribute <identifiersep> repository == null ) { \n \t4 final application <identifiersep> context context = application <identifiersep> context <identifiersep> provider . get <identifiersep> application <identifiersep> context ( ) ; \n \t4 if ( context != null ) { \n \t5 return context . get <identifiersep> bean ( <string_literal> , i <identifiersep> person <identifiersep> attribute <identifiersep> dao . class ) ; } \n <ect>
\t2 zone <identifiersep> id , options ) ; \n \t1 async <identifiersep> create <identifiersep> response job = client . get <identifiersep> virtual <identifiersep> machine <identifiersep> client ( ) . deploy <identifiersep> virtual <identifiersep> machine <identifiersep> in <identifiersep> zone ( zone <identifiersep> id , service <identifiersep> offering <identifiersep> id , \n \t2 template <identifiersep> id , options ) ; \n \t1 virtual <identifiersep> machine vm = block <identifiersep> until <identifiersep> job <identifiersep> completes <identifiersep> and <identifiersep> return <identifiersep> result . < virtual <identifiersep> machine > apply ( job ) ; \n <ect>
\t2 <comment> \n \t2 while ( ! services <identifiersep> instance . is <identifiersep> initialized ( ) ) { \n \t3 try { thread . sleep ( <number_literal> ) ; } catch ( interrupted <identifiersep> exception iex ) { } } \n \t2 if ( data == null ) { \n <ect>
\t1 return input <identifiersep> string . to <identifiersep> lower <identifiersep> case ( locale . us ) ; } \n public void finish ( boolean success ) { \n \t1 progress <identifiersep> report . stop ( count + <string_literal> + total + <string_literal> ) ; \n \t1 if ( success && ! all <identifiersep> files <identifiersep> to <identifiersep> blame . is <identifiersep> empty ( ) ) { \n <ect>
\t4 delete . add ( path ) ; \n \t3 } else { \n \t4 resource ar = a . get <identifiersep> resource ( path ) ; \n \t4 if ( is <identifiersep> equal ( ar , br ) ) { \n <ect>
\t6 return null ; } \n \t5 uuid user <identifiersep> id = session . get ( ) . get <identifiersep> user <identifiersep> id ( ) ; \n \t5 optional < user >  <identifiersep> user = user <identifiersep> manager . instance . get <identifiersep> user ( user <identifiersep> id ) ; \n \t5 if ( !  <identifiersep> user . is <identifiersep> present ( ) ) { \n <ect>
\t5 string value = xpath . evaluate ( <string_literal> + config . replace ( ' . ' , ' / ' ) , is ) ; \n \t5 state state = to <identifiersep> state ( item . get <identifiersep> class ( ) , value ) ; \n \t5 state old <identifiersep> state = state <identifiersep> map . put ( item <identifiersep> name , state ) ; \n \t5 if ( ! state . equals ( old <identifiersep> state ) ) { \n <ect>
\t1 @ path ( <string_literal> ) \n \t1 @ produces ( media <identifiersep> type . text <identifiersep> plain ) \n \t1 public int test <identifiersep> use ( @ path <identifiersep> param ( <string_literal> ) int count ) { \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t1 secure <identifiersep> action . internal <identifiersep> call ( java <identifiersep> context , clients , authorizers , matchers , multi <identifiersep> profile ) . to <identifiersep> scala . flat <identifiersep> map [ play . api . mvc . result ] ( r = > \n \t1 if ( r == null ) { \n \t2 val profile <identifiersep> manager = new profile <identifiersep> manager [ p ] ( web <identifiersep> context ) \n \t2 val profiles = profile <identifiersep> manager . get <identifiersep> all ( true ) \n <ect>
\t2 logger . debug ( <string_literal> , model . key <identifiersep> set ( ) . to <identifiersep> array ( ) ) ; \n \t2 if ( this . view != null ) { \n \t3 this . view . render ( model , request , response ) ; \n \t2 } else { \n <ect>
\t1 public static void set <identifiersep> default <identifiersep> values ( list < protocol <identifiersep> configuration > protocol <identifiersep> configs , list < protocol > protocols , \n \t10 stack <identifiersep> type ip <identifiersep> version ) throws exception { \n \t2 inet <identifiersep> address default <identifiersep> ip <identifiersep> address = util . get <identifiersep> non <identifiersep> loopback <identifiersep> address ( ) ; \n \t2 if ( default <identifiersep> ip <identifiersep> address == null ) { \n <ect>
\t3 node <identifiersep> value nv = node <identifiersep> value . make <identifiersep> node ( b ) ; \n \t3 if ( nv . is <identifiersep> boolean ( ) ) \n \t4 dsg . get <identifiersep> context ( ) . set ( tdb2 . sym <identifiersep> union <identifiersep> default <identifiersep> graph , nv . get <identifiersep> boolean ( ) ) ; \n \t3 else \n <ect>
\t3 add <identifiersep> allow <identifiersep> events <identifiersep> header ( options <identifiersep> ok ) ; } \n \t2 catch ( parse <identifiersep> exception ex ) \n \t2 { \n \t3 <comment> \n <ect>
\t3 return ; } \n \t3 long his <identifiersep> random = his <identifiersep> buf <identifiersep> long [ 0 ] ; \n \t3 double his <identifiersep> loc = double . long <identifiersep> bits <identifiersep> to <identifiersep> double ( his <identifiersep> buf <identifiersep> long [ 1 ] ) ; \n \t3 if ( ! location . is <identifiersep> valid ( his <identifiersep> loc ) ) { \n <ect>
\t2 transducer <identifiersep> trie t = new transducer <identifiersep> trie ( ) ; \n \t2 for ( int i = 0 , size = at . lexicon <identifiersep> size ( ) ; i < size ; i ++ ) { \n \t3 t . add ( at . get <identifiersep> alignment ( i ) ) ; \n \t3 t . add ( at . get <identifiersep> info <identifiersep> alignment ( i ) ) ; } \n <ect>
\t1 logout ( ) ; \n \t1 login ( username <identifiersep> admin , main <identifiersep> tenant <identifiersep> 1 , new string [ ] { tenant <identifiersep> admin <identifiersep> role <identifiersep> name , tenant <identifiersep> authenticated <identifiersep> role <identifiersep> name } ) ; \n \t1 list < string > all <identifiersep> roles <identifiersep> for <identifiersep> default <identifiersep> tenant = service . get <identifiersep> all <identifiersep> roles ( ) ; \n \t1 list < string > all <identifiersep> roles <identifiersep> for <identifiersep> tenant = service . get <identifiersep> all <identifiersep> roles ( main <identifiersep> tenant <identifiersep> <number_literal> ) ; \n <ect>
\t4 block <identifiersep> devices . add ( device ) ; } } \n \t1 } catch ( client <identifiersep> compute <identifiersep> exception e ) { \n \t2 throw e ; \n \t1 } catch ( final exception ex ) { \n <ect>
<comment> \n \t8 if ( real <identifiersep> file . get <identifiersep> format ( ) == null ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void run ( ) { \n \t2 try { \n <ect>
\t5 final list < vpc <identifiersep> vo > inactive <identifiersep> vpcs =  <identifiersep> vpc <identifiersep> dao . list <identifiersep> inactive <identifiersep> vpcs ( ) ; \n \t5 if ( inactive <identifiersep> vpcs != null ) { \n \t6 s <identifiersep> logger . info ( <string_literal> + inactive <identifiersep> vpcs . size ( ) + <string_literal> ) ; \n \t6 for ( final vpc <identifiersep> vo vpc : inactive <identifiersep> vpcs ) { \n <ect>
\t2 public void set <identifiersep> properties ( properties p ) { \n \t3 log . debug ( <string_literal> , host ) ; } \n \t2 @ override \n \t2 public void exit ( ) { \n <ect>
\t2 running <identifiersep> flag . increment <identifiersep> and <identifiersep> get ( ) ; \n \t2 reload <identifiersep> thread . join ( ) ; \n \t2 <comment> \n \t2 if ( exceptions . is <identifiersep> empty ( ) == false ) { \n <ect>
\t5 thread . sleep ( <number_literal> ) ; \n \t4 } catch ( interrupted <identifiersep> exception e ) { } } \n \t3 logger . debug ( <string_literal> + path + <string_literal> + b2 ) ; \n \t3 handle1 = handle2 ; } \n <ect>
\t2 file . stream <identifiersep> encrypt <identifiersep> decrypt ( ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void empty <identifiersep> file <identifiersep> stream <identifiersep> encrypt <identifiersep> decrypt ( ) throws io <identifiersep> exception { \n <ect>
\t4 queue <identifiersep> name , message ) ) ; } \n \t1 map < queue <identifiersep> message , exception > exceptions = await <identifiersep> completion ( responses , more <identifiersep> executors . same <identifiersep> thread <identifiersep> executor ( ) , \n \t3 time <identifiersep> out , trace <identifiersep> logger , string . format ( <string_literal> , context <identifiersep> name ) ) ; \n \t1 if ( exceptions . size ( ) > 0 ) \n <ect>
\t1 query . set <identifiersep> ordering ( <string_literal> ) ; \n \t1 query . set <identifiersep> result ( <string_literal> ) ; \n \t1 collection < string > names = ( collection < string > ) query . execute <identifiersep> with <identifiersep> map ( params ) ; \n \t1 part <identifiersep> names = new array <identifiersep> list < > ( names ) ; \n <ect>
\t1 private void process <identifiersep> scheduled <identifiersep> work ( ) { \n \t2 list < security <identifiersep> group <identifiersep> work <identifiersep> vo > scheduled =  <identifiersep> work <identifiersep> dao . find <identifiersep> scheduled <identifiersep> work ( ) ; \n \t2 int num <identifiersep> jobs = scheduled . size ( ) ; \n \t2 if ( num <identifiersep> jobs > 0 ) { \n <ect>
\t4 log . debug ( <string_literal> , api ) ; \n \t4 try { \n \t5 thread . sleep ( hl7constants . thread <identifiersep> sleep <identifiersep> period ) ; } \n \t4 catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 assert <identifiersep> equals ( outbound [ <number_literal> ] , enumeration . next <identifiersep> element ( ) ) ; \n \t2 <comment> \n \t2 boolean too <identifiersep> many = false ; \n \t2 while ( enumeration . has <identifiersep> more <identifiersep> elements ( ) ) { \n <ect>
@ override public protocol get <identifiersep> remote ( ) { \n \t1 return remote ; } \n @ override public void close ( ) throws io <identifiersep> exception { \n \t1 if ( channel . is <identifiersep> open ( ) ) { \n <ect>
\t6 rdf <identifiersep> datatype numeric <identifiersep> type = xsd . get <identifiersep> numeric <identifiersep> type ( datatype , node . get <identifiersep> literal <identifiersep> datatype ( ) ) ; \n \t6 nm = cast ( nm , numeric <identifiersep> type ) ; \n \t6 node = xsd . cast ( node , numeric <identifiersep> type ) ; } } \n \t4 boolean empty = nm . select <identifiersep> node ( node , relational <identifiersep> operators . dummy ) . equals ( node <identifiersep> maker . empty ) ; \n <ect>
\t3 counter . increment ( value ) ; } } \n \t1 public object get <identifiersep> value ( string group <identifiersep> name , string counter <identifiersep> name ) { \n \t2 spark <identifiersep> counter counter = get <identifiersep> group ( group <identifiersep> name ) . get <identifiersep> counter ( counter <identifiersep> name ) ; \n \t2 if ( counter == null ) { \n <ect>
\t2 if ( null == key <identifiersep> store <identifiersep> info ) { \n \t3 file <identifiersep> input <identifiersep> stream in = null ; \n \t3 ccn <identifiersep> wrapped <identifiersep> key <identifiersep> store key <identifiersep> store = null ; \n \t3 if ( log . is <identifiersep> loggable ( log . fac <identifiersep> keys , level . info ) ) \n <ect>
\t4 return get <identifiersep> size <identifiersep> of <identifiersep> physical <identifiersep> memory <identifiersep> for <identifiersep> mac ( ) ; \n \t3 case free <identifiersep> bsd : \n \t4 return get <identifiersep> size <identifiersep> of <identifiersep> physical <identifiersep> memory <identifiersep> for <identifiersep> free <identifiersep> bsd ( ) ; \n \t3 case unknown : \n <ect>
\t2 exchange out = repo . get ( context , exchange . get <identifiersep> exchange <identifiersep> id ( ) ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , out ) ; \n \t2 exchange exchange2 = new default <identifiersep> exchange ( context ) ; \n \t2 exchange2 . get <identifiersep> in ( ) . set <identifiersep> body ( <string_literal> ) ; \n <ect>
\t6 logger . info ( <string_literal> + iter ) ; \n \t6 break ; } } \n \t3 } else { \n \t4 if ( debug ) \n <ect>
\t5 assert e . get <identifiersep> cause ( ) != null ; \n \t5 final string message = <string_literal> + hostname + <string_literal> ; \n \t5 logger . warn ( message , e . get <identifiersep> cause ( ) ) ; } \n \t3 } else { \n <ect>
\t5 s <identifiersep> logger . trace ( <string_literal> + attache . get <identifiersep> id ( ) + <string_literal> + response . get <identifiersep> sequence ( ) + <string_literal> + response ) ; } } \n \t3 try { \n \t4 link . send ( response . to <identifiersep> bytes ( ) ) ; \n \t3 } catch ( final closed <identifiersep> channel <identifiersep> exception e ) { \n <ect>
\t2 uri uri = new uri ( resource <identifiersep> uri ) ; \n \t2 request = new request ( endpoint . get <identifiersep> restlet <identifiersep> method ( ) , resource <identifiersep> uri ) ; \n \t2 binding . populate <identifiersep> restlet <identifiersep> request <identifiersep> from <identifiersep> exchange ( request , exchange ) ; \n \t2 load <identifiersep> cookies ( exchange , uri , request ) ; \n <ect>
\t2 num <identifiersep> client <identifiersep> nodes = 0 ) \n public class azure <identifiersep> two <identifiersep> started <identifiersep> nodes <identifiersep> tests extends abstract <identifiersep> azure <identifiersep> compute <identifiersep> service <identifiersep> test <identifiersep> case { \n \t1 public void test <identifiersep> two <identifiersep> nodes <identifiersep> should <identifiersep> run <identifiersep> using <identifiersep> private <identifiersep> or <identifiersep> public <identifiersep> ip ( ) { \n \t2 final string host <identifiersep> type = random <identifiersep> from ( azure <identifiersep> unicast <identifiersep> hosts <identifiersep> provider . host <identifiersep> type . values ( ) ) . get <identifiersep> type ( ) ; \n <ect>
\t3 if ( values . get ( <string_literal> ) == null ) { \n \t4 s <identifiersep> logger . info ( <string_literal> ) ; \n \t4 return <number_literal> ; \n \t3 } else { \n <ect>
\t6 throw new low <identifiersep> level <identifiersep> get <identifiersep> exception ( low <identifiersep> level <identifiersep> get <identifiersep> exception . decode <identifiersep> failed ) ; } \n \t4 else \n \t5 switch ( rs . get <identifiersep> status ( ) ) { \n \t6 case request <identifiersep> sender . not <identifiersep> finished : \n <ect>
\t2 async <identifiersep> on <identifiersep> next <identifiersep> channel . shutdown ( ) . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ; \n \t2 async <identifiersep> on <identifiersep> completed <identifiersep> channel . shutdown ( ) . await <identifiersep> termination ( <number_literal> , time <identifiersep> unit . seconds ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> on <identifiersep> next <identifiersep> propagation ( ) throws exception { \n <ect>
\t3 builder . append ( iter . next ( ) ) ; \n \t3 if ( iter . has <identifiersep> next ( ) ) \n \t4 builder . append ( ' / ' ) ; } \n \t2 string file <identifiersep> path = builder . to <identifiersep> string ( ) ; \n <ect>
\t3 io <identifiersep> helper . close ( os , <string_literal> + name , log ) ; \n \t3 <comment> \n \t3 if ( current <identifiersep> dir != null ) { \n \t4 change <identifiersep> current <identifiersep> directory ( current <identifiersep> dir ) ; } } \n <ect>
\t1 private void attempt <identifiersep> fix <identifiersep> task <identifiersep> for <identifiersep> failed <identifiersep> host ( job <identifiersep> task task , collection < host <identifiersep> state > hosts , string failed <identifiersep> host <identifiersep> uuid ) { \n \t2 iterator < host <identifiersep> state > host <identifiersep> iterator = hosts . iterator ( ) ; \n \t2 job job ; \n \t2 if ( ( task == null ) || ( task . get <identifiersep> job <identifiersep> uuid ( ) == null ) || ( ( job = spawn . get <identifiersep> job ( task . get <identifiersep> job <identifiersep> uuid ( ) ) ) == null ) ) { \n <ect>
\t4 } catch ( jms <identifiersep> exception e ) { \n \t5 e . print <identifiersep> stack <identifiersep> trace ( ) ; \n \t4 } finally { \n \t5 latch . count <identifiersep> down ( ) ; \n <ect>
\t3 if ( user . is <identifiersep> present ( ) ) { \n <comment> \n \t4 user . get ( ) . send <identifiersep> player <identifiersep> uuid ( game <identifiersep> id , data ) ; \n \t3 } else { \n <ect>
<comment> \n \t1 public void after <identifiersep> properties <identifiersep> set ( ) throws exception { \n \t2 if ( pooled <identifiersep> connection <identifiersep> factory == null && transaction <identifiersep> manager != null && resource <identifiersep> name != null ) { \n \t3 try { \n <ect>
\t3 return true ; } \n \t2 catch ( exception e ) { \n \t3 errors . put ( <string_literal> + connection <identifiersep> username + <string_literal> + e . get <identifiersep> message ( ) \n \t5 + <string_literal> , null ) ; <comment> \n <ect>
\t4 log . debug ( <string_literal> + this ) ; \n \t3 return ; } \n \t2 try { \n <ect>
<number_literal> charlie . get <identifiersep> remote <identifiersep> port ( ) , \n <number_literal> charlie . get <identifiersep> current <identifiersep> cipher <identifiersep> key ( ) , \n <number_literal> charlie . get <identifiersep> current <identifiersep> mac <identifiersep> key ( ) ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t3 try { \n \t4 p . timedout ( ( atmosphere <identifiersep> request ) async <identifiersep> context . get <identifiersep> request ( ) , \n \t6 ( atmosphere <identifiersep> response ) async <identifiersep> context . get <identifiersep> response ( ) ) ; \n \t3 } catch ( servlet <identifiersep> exception ex ) { \n <ect>
\t5 return ! name . starts <identifiersep> with ( <string_literal> ) && name . ends <identifiersep> with ( <string_literal> ) ; } \n \t3 } ) ) ; \n \t3 for ( int i = 0 ; i < file <identifiersep> list . length ; i ++ ) { \n \t4 file model <identifiersep> file = file <identifiersep> list [ i ] ; \n <ect>
\t4 else \n \t4 { \n \t5 s <identifiersep> logger . info ( <string_literal> + api . get <identifiersep> test <identifiersep> case <identifiersep> info ( ) + <string_literal> ) ; } } \n \t3 else if ( ( api . get <identifiersep> response <identifiersep> type ( ) != response <identifiersep> type . error ) && ( api . get <identifiersep> response <identifiersep> code ( ) != <number_literal> ) ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + pod <identifiersep> id ) ; \n \t3 return false ; } \n \t2 cluster cluster =  <identifiersep> cluster <identifiersep> dao . find <identifiersep> by <identifiersep> id ( cluster <identifiersep> id ) ; \n \t2 if ( cluster != null && grouping . allocation <identifiersep> state . disabled == cluster . get <identifiersep> allocation <identifiersep> state ( ) ) { \n <ect>
\t1 } catch ( exception e1 ) { \n \t2 try { \n \t2 info = transactions . find ( new ceph <identifiersep> rbd <identifiersep> info ( ) ) ; \n \t2 } catch ( exception e2 ) { \n <ect>
\t2 if ( result ) { \n \t3 log . info ( <string_literal> ) ; \n \t3 system . exit ( joy <identifiersep> constants . exit <identifiersep> success ) ; \n \t2 } else { \n <ect>
\t2 reload <identifiersep> executor <identifiersep> pool . execute ( new runnable ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n \t4 try { \n <ect>
\t2 try { \n \t3 root = storage . get <identifiersep> entry ( cache <identifiersep> key ) ; \n \t2 } catch ( final resource <identifiersep> io <identifiersep> exception ex ) { \n <ect>
\t3 return ; } \n \t2 list < address > current <identifiersep> members = gms . members . get <identifiersep> members ( ) ; \n \t2 leaving <identifiersep> mbrs . retain <identifiersep> all ( current <identifiersep> members ) ; <comment> \n \t2 if ( suspected <identifiersep> mbrs . remove ( gms . local <identifiersep> addr ) ) \n <ect>
state [ ] case <identifiersep> lookup ; \n private string end <identifiersep> field ; \n private int end <identifiersep> index ; \n protected void current <identifiersep> level ( int current <identifiersep> level ) { \n <ect>
\t3 community <identifiersep> service . remove <identifiersep> collection ( context , owning <identifiersep> community , collection ) ; \n \t3 community <identifiersep> service . delete ( context , owning <identifiersep> community ) ; \n \t3 context . restore <identifiersep> auth <identifiersep> system <identifiersep> state ( ) ; \n \t2 } catch ( sql <identifiersep> exception | authorize <identifiersep> exception | io <identifiersep> exception ex ) { \n <ect>
\t5 str <identifiersep> value = ec2prop . get <identifiersep> property ( <string_literal> ) ; \n \t5 if ( str <identifiersep> value != null ) of <identifiersep> dao . set <identifiersep> offer <identifiersep> mapping ( <string_literal> , str <identifiersep> value ) ; } \n \t3 } catch ( exception e ) { \n \t4 logger . error ( <string_literal> , e ) ; } \n <ect>
\t1 if error <identifiersep> message : \n \t1 logger . error ( error <identifiersep> message ) \n \t1 raise fail ( error <identifiersep> message ) \n def execute <identifiersep> transparent <identifiersep> huge <identifiersep> page <identifiersep> check ( self , config ) : \n <ect>
\t3 if ( dedicated <identifiersep> resources != null && ! dedicated <identifiersep> resources . is <identifiersep> empty ( ) ) { \n \t4 s <identifiersep> logger . debug ( <string_literal> + account <identifiersep> id ) ; \n \t4 for ( dedicated <identifiersep> resource <identifiersep> vo dr : dedicated <identifiersep> resources ) { \n \t5 if ( !  <identifiersep> dedicated <identifiersep> dao . remove ( dr . get <identifiersep> id ( ) ) ) { \n <ect>
\t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> , e ) ; } } \n \t1 private void add <identifiersep> index <identifiersep> for <identifiersep> alert ( connection conn ) { \n \t2 <comment> \n \t2 list < string > index <identifiersep> list = new array <identifiersep> list < string > ( ) ; \n <ect>
\t2 try { \n \t3 bm <identifiersep> mgr . notify <identifiersep> provision <identifiersep> done ( this ) ; \n \t3 this . set <identifiersep> response <identifiersep> object ( new success <identifiersep> response ( get <identifiersep> command <identifiersep> name ( ) ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t7 node . tracker . reassign <identifiersep> tag <identifiersep> to <identifiersep> self ( tag ) ; \n \t7 return false ; } \n \t6 if ( node . failure <identifiersep> table . peers <identifiersep> want <identifiersep> key ( key , source ) ) { \n \t7 <comment> \n <ect>
\t2 log . info ( <string_literal> + get <identifiersep> cache <identifiersep> element <identifiersep> count ( ns1 . get <identifiersep> document <identifiersep> store ( ) ) ) ; \n \t2 long time = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 for ( int j = 0 ; j < <number_literal> ; j ++ ) { \n \t3 long now = system . current <identifiersep> time <identifiersep> millis ( ) ; \n <ect>
\t1 static final query <identifiersep> engine <identifiersep> cache query <identifiersep> engine <identifiersep> cache = new query <identifiersep> engine <identifiersep> cache ( ) ; \n \t1 <comment> \n \t1 private static final string tmp <identifiersep> dir <identifiersep> path = parameter . value ( <string_literal> , <string_literal> ) ; \n \t1 public mesh <identifiersep> query <identifiersep> source ( ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 stop <identifiersep> simulating <identifiersep> writes ( ) ; \n \t3 logger . info ( <string_literal> ) ; \n \t3 stop <identifiersep> last <identifiersep> rev <identifiersep> thread ( ) ; \n <ect>
\t1 public void stop <identifiersep> stream <identifiersep> receiving ( ) { \n \t2 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n \t3  <identifiersep> log . debug ( <string_literal> , new exception ( <string_literal> ) ) ; \n \t2 if ( stream <identifiersep> session == null ) { \n <ect>
<number_literal> client <identifiersep> state . for <identifiersep> internal <identifiersep> calls ( ) ) . statement ) ; \n \t3 execute <identifiersep> logged <identifiersep> batch ( statements ) ; } \n \t2 catch ( request <identifiersep> execution <identifiersep> exception | request <identifiersep> validation <identifiersep> exception e ) \n \t2 { \n <ect>
\t3 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t3 map < string , object > p = ( map < string , object > ) ( context . get ( sys <identifiersep> riot . sys <identifiersep> rdf <identifiersep> writer <identifiersep> properties ) ) ; \n \t3 properties = p ; \n \t2 } catch ( throwable ex ) { \n <ect>
\t5 break ; \n \t4 } catch ( execution <identifiersep> exception e ) { \n \t5 log . error ( <string_literal> , e ) ; \n \t4 } catch ( throwable e ) { \n <ect>
\t3 for ( inet <identifiersep> address <identifiersep> and <identifiersep> port ep : live <identifiersep> endpoints ) \n \t4 messaging <identifiersep> service . instance ( ) . send <identifiersep> one <identifiersep> way ( message , ep ) ; \n \t3 uninterruptibles . sleep <identifiersep> uninterruptibly ( integer . get <identifiersep> integer ( <string_literal> , <number_literal> ) , time <identifiersep> unit . milliseconds ) ; } \n \t2 else \n <ect>
\t4 } <comment> \n \t3 } else if ( ! chained <identifiersep> pg <identifiersep> ids . contains <identifiersep> key ( pg <identifiersep> id ) ) { \n \t4 if ( ! warned <identifiersep> missing <identifiersep> program <identifiersep> records ) { \n \t5 warned <identifiersep> missing <identifiersep> program <identifiersep> records = true ; \n <ect>
<comment> \n \t1 public serial <identifiersep> message get <identifiersep> message ( setpoint <identifiersep> type setpoint <identifiersep> type ) { \n \t2 if ( setpoint <identifiersep> type == null ) { \n \t3 return null ; } \n <ect>
<comment> \n \t1 @ override \n \t1 public void start ( bundle <identifiersep> context bc ) throws exception { \n \t2 context = bc ; \n <ect>
\t2 file ( pid <identifiersep> file , action = <string_literal> ) \n \t2 except os <identifiersep> error as exc : \n \t2 # os <identifiersep> error : [ errno <number_literal> ] no such file or directory \n \t2 if exc . errno == errno . enoent : \n <ect>
\t3 typed <identifiersep> stream in = loc . open ( filename <identifiersep> or <identifiersep> uri ) ; \n \t3 if ( in != null ) \n \t3 { \n <ect>
\t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> routing ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 0l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> size ( 0 ) . set <identifiersep> routing ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 0l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 0l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> size ( 0 ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 0l ) ) ; } \n <ect>
\t4 return fake <identifiersep> response ; } \n \t3 string corrected <identifiersep> sql = query <identifiersep> util . massage <identifiersep> sql ( sql <identifiersep> request . get <identifiersep> sql ( ) , sql <identifiersep> request . get <identifiersep> project ( ) , \n \t5 sql <identifiersep> request . get <identifiersep> limit ( ) , sql <identifiersep> request . get <identifiersep> offset ( ) , conn . get <identifiersep> schema ( ) ) ; \n \t3 if ( ! corrected <identifiersep> sql . equals ( sql <identifiersep> request . get <identifiersep> sql ( ) ) ) { \n <ect>
\t2 mock . expected <identifiersep> minimum <identifiersep> message <identifiersep> count ( <number_literal> ) ; \n \t2 mock . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 app . stop ( ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t7 if ( ! jpg . delete ( ) ) { \n \t8 jpg . delete <identifiersep> on <identifiersep> exit ( ) ; } \n \t7 <comment> \n \t7 if ( ! jpg . get <identifiersep> parent <identifiersep> file ( ) . delete ( ) && ! jpg . get <identifiersep> parent <identifiersep> file ( ) . delete ( ) ) { \n <ect>
\t1 if self . log <identifiersep> out <identifiersep> files : \n \t1 log <identifiersep> folder = self . get <identifiersep> log <identifiersep> folder ( ) \n \t1 user = self . get <identifiersep> user ( ) \n \t1 if log <identifiersep> folder == <string_literal> : \n <ect>
public class property <identifiersep> utils { \n private static final logger logger = logger . get <identifiersep> logger ( property <identifiersep> utils . class ) ; \n public static void set <identifiersep> property ( object instance , string name , string value ) { \n \t1 if ( instance == null ) { \n <ect>
\t2 for ( lock <identifiersep> notification listener : lock <identifiersep> listeners ) { \n \t3 try { \n \t4 listener . lock <identifiersep> created ( lock <identifiersep> name ) ; } \n \t3 catch ( throwable t ) { \n <ect>
\t3 <comment> \n \t3 if ( bytes . length == 0 ) \n \t4 return bytes ; \n \t3 if ( ia . read <identifiersep> byte ( <string_literal> ) != 'b' ) { \n <ect>
\t4 + <string_literal> \n \t4 + <string_literal> ) ; \n \t2 iterator < tuple > it = pig . open <identifiersep> iterator ( <string_literal> ) ; \n \t2 int count = 0 ; \n <ect>
\t1 def test <identifiersep> hostha <identifiersep> enable <identifiersep> ha <identifiersep> when <identifiersep> host <identifiersep> in <identifiersep> maintenance ( self ) : \n \t2 <string_literal> <string_literal> <string_literal> \n <ect>
<comment> \n @ subscribe \n @ allow <identifiersep> concurrent <identifiersep> events \n public void on <identifiersep> ambari <identifiersep> event ( alert <identifiersep> definition <identifiersep> registration <identifiersep> event event ) { \n <ect>
<comment> \n \t1 private optional < json <identifiersep> web <identifiersep> key <identifiersep> set > build <identifiersep> json <identifiersep> web <identifiersep> key <identifiersep> set ( ) { \n \t2 try { \n <ect>
\t4 app <identifiersep> ids = new string [ ids . length ( ) ] ; \n \t4 for ( int i = 0 ; i < app <identifiersep> ids . length ; i ++ ) { \n \t5 app <identifiersep> ids [ i ] = ids . get <identifiersep> string ( i ) ; } \n \t3 } catch ( json <identifiersep> exception e ) { \n <ect>
\t5 if ( default <identifiersep> group <identifiersep> instance <identifiersep> key . equals ( group . get <identifiersep> instance <identifiersep> key ( ) ) ) { \n \t6 log . debug ( <string_literal> , group . get <identifiersep> name ( ) ) ; \n \t5 } else { \n <ect>
\t5 assert . state ( endpoint <identifiersep> provider != null , <string_literal> ) ; \n \t5 endpoint <identifiersep> to <identifiersep> use = endpoint <identifiersep> provider . get <identifiersep> handler ( ) ; } \n \t4 client <identifiersep> endpoint <identifiersep> config endpoint <identifiersep> config = config <identifiersep> builder . build ( ) ; \n \t4 session = get <identifiersep> web <identifiersep> socket <identifiersep> container ( ) . connect <identifiersep> to <identifiersep> server ( endpoint <identifiersep> to <identifiersep> use , endpoint <identifiersep> config , get <identifiersep> uri ( ) ) ; \n <ect>
\t9 iterator < heatmiser <identifiersep> event <identifiersep> listener > iterator =  <identifiersep> listeners . iterator ( ) ; \n \t9 while ( iterator . has <identifiersep> next ( ) ) { \n \t10 iterator . next ( ) . packet <identifiersep> received ( event , msg ) ; } \n \t8 } catch ( exception e ) { \n <ect>
\t5 logger . error ( <string_literal> ) ; \n \t5 join <identifiersep> status . set <identifiersep> error <identifiersep> message ( <string_literal> ) ; \n \t5 channel <identifiersep> handler <identifiersep> context . get <identifiersep> channel ( ) . close ( ) ; } } \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 for ( string uninstall <identifiersep> key : uninstall <identifiersep> keys ) { \n \t1 plugin <identifiersep> info info = get <identifiersep> plugin <identifiersep> info ( uninstall <identifiersep> key ) ; \n \t1 try { \n \t2 if ( ! get <identifiersep> plugin <identifiersep> file ( info ) . exists ( ) ) { \n <ect>
\t4 stopwatch sw = stopwatch . create <identifiersep> started ( ) ; \n \t4 log . info ( <string_literal> ) ; \n \t4 <comment> \n \t4 thread . sleep ( max <identifiersep> last <identifiersep> modified <identifiersep> interval + <number_literal> ) ; \n <ect>
\t1 public regex <identifiersep> matching <identifiersep> registered <identifiersep> service <identifiersep> proxy <identifiersep> policy ( @ json <identifiersep> property ( <string_literal> ) final string pgt <identifiersep> url <identifiersep> pattern ) { \n \t2 if ( regex <identifiersep> utils . is <identifiersep> valid <identifiersep> regex ( pgt <identifiersep> url <identifiersep> pattern ) ) { \n \t3 this . pattern = pgt <identifiersep> url <identifiersep> pattern ; \n \t2 } else { \n <ect>
\t7 . build ( ) ; \n \t4 } else { \n \t5 return new array <identifiersep> list < message <identifiersep> container > ( ) ; } \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 return true ; \n \t2 } else { \n \t3 if ( force || dispatcher . pending . is <identifiersep> empty ( ) ) { \n \t4 if ( force ) \n <ect>
\t2 super ( new <identifiersep> segment , submitter ) ; \n \t2 this . input <identifiersep> side = mr <identifiersep> util . get <identifiersep> batch <identifiersep> cubing <identifiersep> input <identifiersep> side ( seg ) ; \n \t2 this . output <identifiersep> side = mr <identifiersep> util . get <identifiersep> batch <identifiersep> cubing <identifiersep> output <identifiersep> side2 ( seg ) ; } \n \t1 public cubing <identifiersep> job build ( ) { \n <ect>
\t2 { \n \t3 triples <identifiersep> map map = graph . get <identifiersep> triples <identifiersep> map ( triples <identifiersep> map <identifiersep> id ) ; \n \t3 if ( ! triples <identifiersep> map <identifiersep> to <identifiersep> worker <identifiersep> plan . contains <identifiersep> key ( map ) ) \n \t3 { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 boolean enable <identifiersep> ssl = config . get <identifiersep> boolean ( web <identifiersep> options . ssl <identifiersep> enabled ) && ssl <identifiersep> utils . get <identifiersep> ssl <identifiersep> enabled ( config ) ; \n \t2 if ( enable <identifiersep> ssl ) { \n <ect>
\t8 found <identifiersep> set . add ( str ) ; } } \n \t6 if ( found <identifiersep> set . contains <identifiersep> all ( must <identifiersep> have <identifiersep> list ) ) { \n \t7 return true ; } } \n \t4 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n <ect>
\t3 correlated <identifiersep> reduce <identifiersep> sink <identifiersep> operators . add <identifiersep> all ( correlated <identifiersep> rs <identifiersep> ops ) ; \n \t2 } else { \n \t3 correlated <identifiersep> reduce <identifiersep> sink <identifiersep> operators . add ( rsop ) ; } \n \t2 } else { \n <ect>
\t2 int num <identifiersep> attempts = query <identifiersep> retries + 1 ; \n \t2 mongo <identifiersep> exception ex = null ; \n \t2 for ( int i = 0 ; i < num <identifiersep> attempts ; i ++ ) { \n \t3 if ( i > 0 ) { \n <ect>
\t4 lifecycle <identifiersep> mojo mojo = mojos . get ( i ) ; \n \t4 goal <identifiersep> spec gs = parse <identifiersep> goal <identifiersep> spec ( mojo . get <identifiersep> goal ( ) ) ; \n \t4 if ( gs == null ) \n \t4 { \n <ect>
\t2 for ( string block : allowed <identifiersep> net <identifiersep> blocks ) { \n \t3 if ( is <identifiersep> network <identifiersep> a <identifiersep> within <identifiersep> network <identifiersep> b ( cidr , block ) ) { \n \t4 return true ; } } \n \t2 <comment> \n <ect>
\t2 producer . close ( ) ; } \n \t1 protected object <identifiersep> name assert <identifiersep> registered <identifiersep> object <identifiersep> name ( string name ) throws malformed <identifiersep> object <identifiersep> name <identifiersep> exception , null <identifiersep> pointer <identifiersep> exception { \n \t2 object <identifiersep> name object <identifiersep> name = new object <identifiersep> name ( name ) ; \n \t2 if ( mbean <identifiersep> server . is <identifiersep> registered ( object <identifiersep> name ) ) { \n <ect>
\t2 if ( string <identifiersep> utils . has <identifiersep> text ( this . user <identifiersep> flag ) ) { \n \t3 receiver . set <identifiersep> user <identifiersep> flag ( this . user <identifiersep> flag ) ; } \n \t2 if ( is <identifiersep> pop3 ) { \n <ect>
\t4 hive <identifiersep> insert <identifiersep> exchange4join <identifiersep> rule . exchange <identifiersep> below <identifiersep> multijoin ) ; \n \t2 perf <identifiersep> logger . perf <identifiersep> log <identifiersep> end ( this . get <identifiersep> class ( ) . get <identifiersep> name ( ) , perf <identifiersep> logger . optimizer , <string_literal> ) ; } \n \t2 log . debug ( <string_literal> ) ; \n <ect>
\t2 this . parser <identifiersep> request <identifiersep> context = find <identifiersep> request <identifiersep> context ( wrapped <identifiersep> context , parser <identifiersep> request <identifiersep> context . class ) ; \n \t2 if ( buffered <identifiersep> request <identifiersep> context == null ) { \n \t3 log . debug ( <string_literal> ) ; } \n \t2 if ( lazy <identifiersep> commit <identifiersep> request <identifiersep> context == null ) { \n <ect>
\t3 throw new configuration <identifiersep> exception ( <string_literal> ) ; } \n \t2 s <identifiersep> logger . info ( <string_literal> +  <identifiersep> ipassoc <identifiersep> path ) ; \n \t2  <identifiersep> public <identifiersep> ip <identifiersep> address = ( string ) params . get ( <string_literal> ) ; \n \t2 if (  <identifiersep> public <identifiersep> ip <identifiersep> address != null ) { \n <ect>
\t2 wo <identifiersep> response response =  <identifiersep> app . create <identifiersep> response <identifiersep> in <identifiersep> context ( null ) ; \n \t2 wo <identifiersep> resource <identifiersep> manager resource <identifiersep> manager =  <identifiersep> app . resource <identifiersep> manager ( ) ; \n \t2 wourl <identifiersep> valued <identifiersep> element <identifiersep> data a <identifiersep> resource <identifiersep> data <identifiersep> object = resource <identifiersep> manager .  <identifiersep> cached <identifiersep> data <identifiersep> for <identifiersep> key ( a <identifiersep> resource <identifiersep> key ) ; \n \t2 if ( a <identifiersep> resource <identifiersep> data <identifiersep> object == null ) { \n <ect>
\t3 } . start ( ) ; } \n \t2 connected <identifiersep> done <identifiersep> latch . await ( ) ; \n \t2 assert <identifiersep> null ( <string_literal> + async <identifiersep> error . get ( ) , async <identifiersep> error . get ( ) ) ; \n \t2 send <identifiersep> barrier . count <identifiersep> down ( ) ; \n <ect>
\t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n \t4 return remove <identifiersep> exception . get ( ) != null ; } \n \t2 } , <number_literal> , <number_literal> ) ) ; \n <ect>
\t4 session new <identifiersep> session = ( entity <identifiersep> interceptor != null ? \n \t6 obtain <identifiersep> session <identifiersep> factory ( ) . with <identifiersep> options ( ) . interceptor ( entity <identifiersep> interceptor ) . open <identifiersep> session ( ) : \n \t6 obtain <identifiersep> session <identifiersep> factory ( ) . open <identifiersep> session ( ) ) ; \n <ect>
\t3 if ( this . read <identifiersep> thread != null ) { \n \t4 try { \n \t5 this . read <identifiersep> thread . shutdown ( ) ; \n \t4 } catch ( throwable t ) { \n <ect>
\t3 return new security <identifiersep> log ( config , file <identifiersep> system , \n \t5 job <identifiersep> scheduler . executor ( job <identifiersep> scheduler . groups . internal <identifiersep> log <identifiersep> rotation ) ) ; } \n \t2 catch ( io <identifiersep> exception ioe ) \n \t2 { \n <ect>
\t2 try { \n \t3 data = new hive <identifiersep> lock <identifiersep> object <identifiersep> data ( new string ( curator <identifiersep> framework . get <identifiersep> data ( ) . watched ( ) . for <identifiersep> path ( cur <identifiersep> child ) ) ) ; \n \t3 data . set <identifiersep> client <identifiersep> ip ( client <identifiersep> ip ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t1 @ test \n \t1 public void test <identifiersep> list ( ) throws exception { \n \t2 final com . google . api . services . drive . model . app result = request <identifiersep> body ( <string_literal> , null ) ; \n \t2 assert <identifiersep> not <identifiersep> null ( <string_literal> , result ) ; \n <ect>
\t3 logger . debug ( <string_literal> , credential . get <identifiersep> id ( ) ) ; \n \t3 final authentication authentication = authenticate <identifiersep> ecp <identifiersep> request ( credential , authentication <identifiersep> context ) ; \n \t3 logger . debug ( <string_literal> , \n \t4 credential . get <identifiersep> id ( ) , authentication . get <identifiersep> principal ( ) ) ; \n <ect>
\t4 if ( ! rmt <identifiersep> node <identifiersep> id . equals ( id ) ) \n \t5 throw new grid <identifiersep> exception ( <string_literal> + rmt <identifiersep> node <identifiersep> id + \n \t6 <string_literal> + id + ' ] ' ) ; \n <ect>
\t4 } finally { \n \t5 <comment> \n \t5 <comment> \n \t5 if ( ! is <identifiersep> test <identifiersep> success . get ( ) ) { \n <ect>
\t2 log . info ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void rebuilt ( long rough <identifiersep> node <identifiersep> count ) \n \t1 { \n <ect>
\t1 public static long parse <identifiersep> short ( string s , short default <identifiersep> value ) { \n \t2 try { \n \t3 return short . parse <identifiersep> short ( s ) ; \n \t2 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n <ect>
\t5 s <identifiersep> logger . debug ( <string_literal> + cmd . get <identifiersep> storage <identifiersep> id ( ) + <string_literal> + cmd . get <identifiersep> local <identifiersep> path ( ) + <string_literal> + cmd . get <identifiersep> pooltype ( ) \n \t7 + <string_literal> + capacity + <string_literal> + free + <string_literal> + used ) ; } \n \t4 if ( summary . get <identifiersep> capacity ( ) < = 0 ) { \n <ect>
\t5 location <identifiersep> component location = entity . get <identifiersep> component ( location <identifiersep> component . class ) ; \n \t5 if ( is <identifiersep> hidden ( entity , mesh <identifiersep> comp ) || location == null || mesh <identifiersep> comp . mesh == null || ! is <identifiersep> relevant ( entity , location . get <identifiersep> world <identifiersep> position ( ) ) ) { \n \t6 continue ; } \n \t5 if ( mesh <identifiersep> comp . mesh . is <identifiersep> disposed ( ) ) { \n <ect>
\t3 throw new h <identifiersep> cat <identifiersep> exception ( error <identifiersep> type . error <identifiersep> move <identifiersep> failed , <string_literal> \n \t4 + final <identifiersep> output <identifiersep> path + <string_literal> ) ; } } \n \t1 } else { \n <ect>
\t1 log . error ( <string_literal> + snap . get <identifiersep> snapshot <identifiersep> id ( ) + <string_literal> + diff <identifiersep> path , e ) ; \n \t1 try { \n \t2 boolean existed = files . delete <identifiersep> if <identifiersep> exists ( diff <identifiersep> path ) ; \n \t2 if ( ! existed ) { \n <ect>
\t1 @ override \n \t1 public void scan <identifiersep> n <identifiersep> as ( scan <identifiersep> callback callback ) throws handle <identifiersep> exception { \n \t2 <comment> \n <ect>
\t3 for ( string key : metadata <identifiersep> store . gossip <identifiersep> keys ) { \n \t4 try { \n \t5 gossip <identifiersep> key ( node , key ) ; \n \t4 } catch ( voldemort <identifiersep> exception e ) { \n <ect>
\t3 logger . info ( <string_literal> ) ; \n \t3 server <identifiersep> engine . serve ( ) ; } \n \t2 public void stop <identifiersep> server ( ) \n \t2 { \n <ect>
<comment> \n <comment> \n <comment> \n <comment> \n <ect>
\t3 string error <identifiersep> message ; \n \t3 try { \n \t4 error <identifiersep> message = response <identifiersep> to <identifiersep> error <identifiersep> message ( response ) ; \n \t3 } catch ( final io <identifiersep> exception e ) { \n <ect>
\t1 public void run ( ) { \n \t2 string line ; \n \t2 try { \n <ect>
\t4 if ( thread . current <identifiersep> thread ( ) . is <identifiersep> interrupted ( ) ) { \n \t5 if ( ! quiet ) \n \t6 u . error ( log , <string_literal> + name , e ) ; \n <ect>
\t4 if ( ! config <identifiersep> dir . is <identifiersep> directory ( ) ) { \n \t5 log . error ( <string_literal> ,  <identifiersep> config <identifiersep> directory <identifiersep> path ) ; \n \t5 system . exit ( 1 ) ; } \n \t4 if ( ! config <identifiersep> dir . can <identifiersep> read ( ) ) { \n <ect>
\t9 stream <identifiersep> support . stream ( recovery <identifiersep> source <identifiersep> metadata1 . spliterator ( ) , false ) . to <identifiersep> array ( store <identifiersep> file <identifiersep> meta <identifiersep> data [ ] : : new ) ; \n \t7 array <identifiersep> util . tim <identifiersep> sort ( metadata , comparator . comparing <identifiersep> long ( store <identifiersep> file <identifiersep> meta <identifiersep> data : : length ) ) ; <comment> \n \t7 for ( store <identifiersep> file <identifiersep> meta <identifiersep> data md : metadata ) { \n \t8 cancellable <identifiersep> threads . check <identifiersep> for <identifiersep> cancel ( ) ; \n <ect>
\t2 return  <identifiersep> format ; } \n \t1 public void set <identifiersep> format ( string v ) { \n \t2 if (  <identifiersep> use <identifiersep> time <identifiersep> format && v == null ) { \n \t3  <identifiersep> format = <string_literal> ; \n <ect>
\t2 string env <identifiersep> var = null ; \n \t2 try { \n \t3 env <identifiersep> var = system . getenv ( env <identifiersep> var <identifiersep> name ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 . for <identifiersep> each ( cloud <identifiersep> blob - > { \n \t6 try { \n \t7 rename <identifiersep> blob ( cloud <identifiersep> blob , target <identifiersep> directory ) ; \n \t6 } catch ( io <identifiersep> exception e ) { \n <ect>
\t4 if ( remaining <identifiersep> in <identifiersep> sync <identifiersep> allocations . is <identifiersep> empty ( ) == false ) { \n \t5 if ( index <identifiersep> meta <identifiersep> data <identifiersep> builder == null ) { \n \t6 index <identifiersep> meta <identifiersep> data <identifiersep> builder = index <identifiersep> meta <identifiersep> data . builder ( old <identifiersep> index <identifiersep> meta <identifiersep> data ) ; } \n \t5 index <identifiersep> meta <identifiersep> data <identifiersep> builder . put <identifiersep> in <identifiersep> sync <identifiersep> allocation <identifiersep> ids ( shard <identifiersep> number , remaining <identifiersep> in <identifiersep> sync <identifiersep> allocations ) ; } \n <ect>
\t3 } catch ( illegal <identifiersep> argument <identifiersep> exception e ) { \n \t4 s <identifiersep> logger . error ( <string_literal> , e ) ; \n \t4 system . exit ( exit <identifiersep> status . error . value ( ) ) ; \n \t3 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t2 file binary <identifiersep> file = new file ( bundle , prefix + <string_literal> ) ; \n \t2 file source <identifiersep> file = new file ( bundle , prefix + <string_literal> ) ; \n \t2 file javadoc <identifiersep> file = new file ( bundle , prefix + <string_literal> ) ; \n \t2 file pom <identifiersep> file = new file ( bundle , <string_literal> ) . get <identifiersep> absolute <identifiersep> file ( ) ; \n <ect>
\t1 try { \n \t1 <comment> \n \t1 node <identifiersep> list = ( node <identifiersep> list ) x <identifiersep> path . compile ( expression ) . evaluate ( xml <identifiersep> document , x <identifiersep> path <identifiersep> constants . nodeset ) ; \n \t1 } catch ( x <identifiersep> path <identifiersep> expression <identifiersep> exception e ) { \n <ect>
\t2  <identifiersep> context = ctx ; \n \t2  <identifiersep> log = ctx . log <identifiersep> manager ( ) . get <identifiersep> log ( udp <identifiersep> endpoint <identifiersep> test <identifiersep> standalone . class ) ; \n \t2  <identifiersep> sent <identifiersep> not <identifiersep> received = new concurrent <identifiersep> hash <identifiersep> set < byte <identifiersep> array > ( <number_literal> ) ; } \n \t1 public void run <identifiersep> test ( int num <identifiersep> peers ) { \n <ect>
\t3 increment <identifiersep> channel <identifiersep> count ( channel ) ; \n \t3 channel . add <identifiersep> shutdown <identifiersep> listener ( cause - > close <identifiersep> channel ( channel ) ) ; \n \t3 connection <identifiersep> state ( channel . get <identifiersep> connection ( ) ) . channel <identifiersep> state . put ( channel . get <identifiersep> channel <identifiersep> number ( ) , new channel <identifiersep> state ( channel ) ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 logger log = logger <identifiersep> factory . get <identifiersep> logger ( <string_literal> ) ; \n \t2 log . trace ( <string_literal> ) ; \n \t2 log . debug ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n <ect>
\t4  <identifiersep> cluster <identifiersep> dao . update ( cluster <identifiersep> id , cluster ) ; } } \n \t2 try { \n \t3 resource <identifiersep> state <identifiersep> transit <identifiersep> to ( host , resource <identifiersep> state . event . delete <identifiersep> host ,  <identifiersep> node <identifiersep> id ) ; \n \t2 } catch ( no <identifiersep> transition <identifiersep> exception e ) { \n <ect>
\t4 flog . warn ( <string_literal> , b . path ) ; } } \n \t2 b . cancel <identifiersep> timeout ( ) ; \n \t2 string md5before = digest <identifiersep> utils . md5hex ( view <identifiersep> text ) ; \n \t2 if ( ! md5before . equals ( res . md5 <identifiersep> before ) ) { \n <ect>
\t2 self . public <identifiersep> ip <identifiersep> range = public <identifiersep> ip <identifiersep> range . create ( \n \t9 self . apiclient , \n \t9 self . services [ <string_literal> ] \n \t7 ) \n <ect>
\t4 if ( in <identifiersep> add ) \n \t5 log . warn ( <string_literal> ) ; \n \t4 in <identifiersep> add = true ; \n \t4 if ( in <identifiersep> mutex ) \n <ect>
\t2 try { \n \t3 for ( lifecycle <identifiersep> strategy strategy : lifecycle <identifiersep> strategies ) { \n \t4 strategy . on <identifiersep> context <identifiersep> stop ( this ) ; } \n \t2 } catch ( throwable e ) { \n <ect>
\t1 for ( thread thread : threads ) { \n \t1 try { \n \t2 thread . join ( ) ; \n \t1 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t5 pstmt . set <identifiersep> string ( 1 , resource <identifiersep> type ) ; \n \t5 pstmt . set <identifiersep> long ( <number_literal> , domain <identifiersep> id ) ; \n \t5 rs = pstmt . execute <identifiersep> query ( ) ; \n \t5 if ( ! rs . next ( ) ) { \n <ect>
\t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n \t1 log . warn ( <string_literal> ) ; \n <ect>
\t4 string message = <string_literal> + job <identifiersep> id + <string_literal> + blob <identifiersep> key + <string_literal> + server <identifiersep> address + \n \t5 <string_literal> + local <identifiersep> jar <identifiersep> file . get <identifiersep> absolute <identifiersep> path ( ) ; \n \t4 if ( attempt < num <identifiersep> fetch <identifiersep> retries ) { \n <ect>
\t3 zone <identifiersep> dao . update ( db <identifiersep> zone , transaction <identifiersep> handler , null ) ; \n \t3 transaction <identifiersep> handler . commit ( ) ; \n \t3 log . debug ( <string_literal> + db <identifiersep> zone + <string_literal> ) ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 update ( vo , sc ) ; } \n \t1 @ override \n \t1 public void release <identifiersep> ip <identifiersep> address ( long nic <identifiersep> id , string reservation <identifiersep> id ) { \n <ect>
\t3 fs . put <identifiersep> overwrite ( <string_literal> , long . to <identifiersep> string ( system . current <identifiersep> time <identifiersep> millis ( ) ) ) ; \n \t3 fs . put <identifiersep> overwrite ( <string_literal> , <string_literal> ) ; \n \t3 int file <identifiersep> number = dark <identifiersep> source . write <identifiersep> new <identifiersep> extra <identifiersep> peer <identifiersep> data <identifiersep> file ( fs , extra <identifiersep> peer <identifiersep> data <identifiersep> type <identifiersep> n2ntm ) ; \n \t3 if ( file <identifiersep> number == - 1 ) { \n <ect>
\t4 this . client <identifiersep> thread <identifiersep> pool . shutdown <identifiersep> now ( ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n \t3 <comment> \n \t3 this . client <identifiersep> thread <identifiersep> pool . shutdown <identifiersep> now ( ) ; } \n <ect>
\t3 parameters = uri <identifiersep> support . parse <identifiersep> parameters ( discovery <identifiersep> uri ) ; \n \t3 <comment> \n \t3 introspection <identifiersep> support . set <identifiersep> properties ( get <identifiersep> discovery <identifiersep> agent ( ) , parameters ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception e ) { \n <ect>
\t5 } else if ( ! file . can <identifiersep> write ( ) ) { \n \t6 log . warn ( <string_literal> + output <identifiersep> file ) ; \n \t6 output <identifiersep> file = default <identifiersep> out <identifiersep> target <identifiersep> file ; } } \n \t3 } catch ( exception e ) { \n <ect>
\t4 return false ; \n \t3 } else { \n \t4 return true ; } \n \t2 } else { \n <ect>
\t2 log . info ( <string_literal> + base <identifiersep> destination <identifiersep> b . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> store <identifiersep> usage ( ) . get <identifiersep> usage ( ) + <string_literal> + base <identifiersep> destination <identifiersep> b . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> store <identifiersep> usage ( ) . get <identifiersep> percent <identifiersep> usage ( ) ) ; \n \t2 log . info ( <string_literal> + broker . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> store <identifiersep> usage ( ) . get <identifiersep> usage ( ) + <string_literal> + broker . get <identifiersep> system <identifiersep> usage ( ) . get <identifiersep> store <identifiersep> usage ( ) . get <identifiersep> percent <identifiersep> usage ( ) ) ; \n \t2 consume ( queue <identifiersep> a ) ; \n \t2 consume ( queue <identifiersep> b ) ; \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 <comment> \n \t4 else { \n <ect>
\t4 reachable = rm . contains ( tn . method ) ; \n \t4 if ( mhp != null ) \n \t5 mhpself = mhp . may <identifiersep> happen <identifiersep> in <identifiersep> parallel ( tn . method , tn . method ) ; } \n \t3 logger . debug ( <string_literal> + tn . name + ( reachable ? <string_literal> : <string_literal> ) + ( mhpself ? <string_literal> : <string_literal> ) ) ; \n <ect>
\t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + file . get <identifiersep> absolute <identifiersep> path ( ) , e ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 test <identifiersep> depth <identifiersep> traversal <identifiersep> type <identifiersep> aware <identifiersep> visitor visitor = new test <identifiersep> depth <identifiersep> traversal <identifiersep> type <identifiersep> aware <identifiersep> visitor ( db <identifiersep> session ) ; \n \t1 new depth <identifiersep> traversal <identifiersep> type <identifiersep> aware <identifiersep> crawler ( visitor ) . visit ( tree <identifiersep> root <identifiersep> holder . get <identifiersep> root ( ) ) ; \n \t1 db <identifiersep> session . commit ( ) ; \n \t1 if ( visitor . has <identifiersep> unprocessed <identifiersep> coverage <identifiersep> details ) { \n <ect>
\t4 check <identifiersep> gui <identifiersep> thread ( ) ; \n \t4 if ( main . bitcoin . wallet ( ) . check <identifiersep> aes <identifiersep> key ( aes <identifiersep> key ) ) { \n \t5 wallet <identifiersep> password <identifiersep> controller . this . aes <identifiersep> key . set ( aes <identifiersep> key ) ; \n \t4 } else { \n <ect>
\t8 <comment> \n \t8 log . info ( <string_literal> ) ; \n \t8 timed <identifiersep> out . set ( true ) ; } \n \t7 catch ( throwable e ) { \n <ect>
\t3 used <identifiersep> memory += so . get <identifiersep> ram <identifiersep> size ( ) * 1024l * 1024l ; \n \t3 used <identifiersep> cpu += so . get <identifiersep> cpu ( ) * so . get <identifiersep> speed ( ) ; } \n \t2 list < vm <identifiersep> instance <identifiersep> vo > vms <identifiersep> by <identifiersep> last <identifiersep> host <identifiersep> id =  <identifiersep> vm <identifiersep> dao . list <identifiersep> by <identifiersep> last <identifiersep> host <identifiersep> id ( host . get <identifiersep> id ( ) ) ; \n <ect>
\t3 writer ( ) . close ( ) ; } \n \t2 catch ( io <identifiersep> exception e ) { \n \t3 throw new schema <identifiersep> management <identifiersep> exception ( <string_literal> + e . to <identifiersep> string ( ) ) ; } } \n \t1 private static writer to <identifiersep> writer ( url url , string charset <identifiersep> name ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 url url = new url ( port <identifiersep> provider <identifiersep> util . generate <identifiersep> url ( <string_literal> , filter <identifiersep> dispatcher <identifiersep> undertow <identifiersep> test . class . get <identifiersep> simple <identifiersep> name ( ) ) ) ; \n \t2 http <identifiersep> url <identifiersep> connection conn = http <identifiersep> url <identifiersep> connection . class . cast ( url . open <identifiersep> connection ( ) ) ; \n \t2 conn . connect ( ) ; \n <ect>
\t1  <identifiersep> error . increment <identifiersep> and <identifiersep> get ( ) ; \n \t1  <identifiersep> last <identifiersep> error = error ; \n \t1 if (  <identifiersep> log <identifiersep> enabled ) \n \t1 { \n <ect>
\t2 e . shutdown ( ) ; } \n \t1 else \n \t1 { \n \t2  <identifiersep> log . debug ( <string_literal> ) ; } \n <ect>
\t8 provider . get <identifiersep> value <identifiersep> id ( item <identifiersep> name ) , value ) ; \n \t6 last <identifiersep> update <identifiersep> map . put ( item <identifiersep> name , system . current <identifiersep> time <identifiersep> millis ( ) ) ; \n \t6 logger . debug ( <string_literal> , response . to <identifiersep> string ( ) ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t1 boolean result = check <identifiersep> expressions ( agg . get <identifiersep> parameters ( ) ) ; \n \t1 function <identifiersep> info fi = function <identifiersep> registry . get <identifiersep> function <identifiersep> info ( agg . get <identifiersep> generic <identifiersep> udaf <identifiersep> name ( ) ) ; \n \t1 result = result && ( fi != null ) && fi . is <identifiersep> native ( ) ; \n \t1 if ( ! result ) { \n <ect>
\t2 logger . trace ( <string_literal> ) ; \n \t2 int callback <identifiersep> id = incoming <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( 0 ) ; \n \t2 transmission <identifiersep> state status = transmission <identifiersep> state . get <identifiersep> transmission <identifiersep> state ( incoming <identifiersep> message . get <identifiersep> message <identifiersep> payload <identifiersep> byte ( 1 ) ) ; \n \t2 if ( status == null ) { \n <ect>
\t3 s <identifiersep> logger . debug ( <string_literal> + guest <identifiersep> network + <string_literal> ) ; \n \t3 try { \n \t4 pair < ? extends network <identifiersep> guru , ? extends network > implemented <identifiersep> network =  <identifiersep> network <identifiersep> mgr . implement <identifiersep> network ( guest <identifiersep> network . get <identifiersep> id ( ) , dest , context ) ; \n \t4 if ( implemented <identifiersep> network == null || implemented <identifiersep> network . first ( ) == null ) { \n <ect>
<comment> \n @ deprecated \n public static void dump <identifiersep> map ( map < ? , ? > result ) { \n <ect>
\t6 tcp <identifiersep> channel . close <identifiersep> channel ( channel , false ) ; } \n \t4 } ; \n \t4 internal <identifiersep> send <identifiersep> message ( channel , message , close <identifiersep> channel ) ; } \n \t2 } else { \n <ect>
\t1 optional < string > leader = app <identifiersep> state . get <identifiersep> leader <identifiersep> host <identifiersep> name ( ) ; \n \t1 if ( leader . is <identifiersep> present ( ) ) { \n \t2 log . info ( <string_literal> , leader . get ( ) ) ; \n \t1 } else { \n <ect>
\t3 file repository = new file ( path <identifiersep> element ) ; \n \t3 path . set <identifiersep> location ( repository ) ; \n \t3 info . append ( <string_literal> + repository + <string_literal> ) ; } \n <ect>
\t2 under <identifiersep> test . set <identifiersep> system <identifiersep> usage ( usage ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 final page <identifiersep> file page <identifiersep> file = ( ( p <identifiersep> list <identifiersep> impl ) under <identifiersep> test . get <identifiersep> disk <identifiersep> list ( ) ) . get <identifiersep> page <identifiersep> file ( ) ; \n \t2 log . info ( <string_literal> + page <identifiersep> file . get <identifiersep> page <identifiersep> count ( ) ) ; \n <ect>
\t2 return new supplier [ ] { ( supplier < optional < transaction <identifiersep> manager > > ) this : : look <identifiersep> in <identifiersep> jndi , \n \t8 this : : look <identifiersep> for <identifiersep> standalone <identifiersep> j <identifiersep> boss <identifiersep> jta , \n \t8 this : : look <identifiersep> for <identifiersep> atomikos <identifiersep> jta } ; } \n \t1 protected optional < transaction <identifiersep> manager > look <identifiersep> for <identifiersep> atomikos <identifiersep> jta ( ) { \n <ect>
\t1 @ override \n \t1 @ db \n \t1 public void cleanup <identifiersep> volumes ( long vm <identifiersep> id ) throws concurrent <identifiersep> operation <identifiersep> exception { \n <ect>
\t2 if ( cleanup ) { \n \t3 <comment> \n \t3 s <identifiersep> logger . debug ( <string_literal> + network <identifiersep> id + <string_literal> ) ; \n \t3 if ( ! shutdown <identifiersep> network <identifiersep> elements <identifiersep> and <identifiersep> resources ( context , true , network ) ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void saml <identifiersep> handler <identifiersep> error <identifiersep> validating <identifiersep> signature ( throwable t ) { \n <ect>
\t1 out . close ( ) ; } \n private void wait <identifiersep> for <identifiersep> job ( job job ) throws exception { \n \t1 job . submit ( ) ; \n \t1 while ( ! job . is <identifiersep> complete ( ) ) { \n <ect>
\t1 } finally { \n \t2 try { \n \t2 input <identifiersep> stream . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t6 if ( executable != null ) \n \t7 context . remove <identifiersep> running <identifiersep> job ( executable ) ; \n \t6 logger . warn ( job <identifiersep> desc + <string_literal> , ex ) ; } } \n \t4 fetch <identifiersep> failed = false ; \n <ect>
\t5 string fc <identifiersep> name = en . get <identifiersep> key ( ) ; \n \t5 j <identifiersep> channel fc = en . get <identifiersep> value ( ) ; \n \t5 get <identifiersep> state <identifiersep> from ( fc , null , stack <identifiersep> name , fc <identifiersep> name , dos ) ; } } } \n \t2 catch ( throwable ex ) { \n <ect>
\t4 address = new inet <identifiersep> socket <identifiersep> address ( temp <identifiersep> ia , port ) ; \n \t3 } else { \n \t4 address = new inet <identifiersep> socket <identifiersep> address ( hostname , port ) ; } \n \t2 } else if ( is <identifiersep> address <identifiersep> from <identifiersep> interface <identifiersep> found ( configuration . get <identifiersep> network <identifiersep> interface ( ) ) ) { <comment> \n <ect>
\t3 if ( on <identifiersep> off <identifiersep> type . on . equals ( command ) ) { \n \t4 send <identifiersep> wol <identifiersep> packet ( item <identifiersep> map . get ( item <identifiersep> name ) ) ; } } } \n \t1 private void send <identifiersep> wol <identifiersep> packet ( wol <identifiersep> binding <identifiersep> config config ) { \n \t2 if ( config == null ) { \n <ect>
\t4 if ( ipv6prefer ) { \n \t5 s <identifiersep> logger . info ( <string_literal> ) ; \n \t5 system . set <identifiersep> property ( <string_literal> , <string_literal> ) ; \n \t4 } else { \n <ect>
\t1 } catch ( exception e ) { \n \t2 log . warn ( e . get <identifiersep> class ( ) . get <identifiersep> name ( ) + <string_literal> \n \t3 + client <identifiersep> stats <identifiersep> publisher <identifiersep> class . trim ( ) + <string_literal> ) ; \n \t2 log . warn ( <string_literal> + e . get <identifiersep> message ( ) ) ; \n <ect>
\t4 logger . error ( <string_literal> \n \t5 + <string_literal> , ex ) ; } \n \t3 else \n \t3 { \n <ect>
\t2 did <identifiersep> parse <identifiersep> closing <identifiersep> web <identifiersep> object <identifiersep> tag ( ) ; } \n \t1 private void did <identifiersep> parse <identifiersep> text ( ) { \n \t2 if (  <identifiersep> content <identifiersep> text != null ) { \n <ect>
\t2 assert <identifiersep> acked ( prepare <identifiersep> create ( <string_literal> , <number_literal> , settings . builder ( ) . put ( <string_literal> , <string_literal> ) ) ) ; \n \t2 num <identifiersep> shards num <identifiersep> shards = get <identifiersep> num <identifiersep> shards ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 cluster <identifiersep> health <identifiersep> response cluster <identifiersep> health = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> health ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> events ( priority . languid ) . set <identifiersep> wait <identifiersep> for <identifiersep> green <identifiersep> status ( ) . set <identifiersep> wait <identifiersep> for <identifiersep> active <identifiersep> shards ( num <identifiersep> shards . num <identifiersep> primaries * <number_literal> ) . execute ( ) . action <identifiersep> get ( ) ; \n <ect>
\t2 if ( closable != null ) { \n \t3 try { \n \t4 closable . close ( ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 object = retrieve <identifiersep> via <identifiersep> spring ( interface <identifiersep> class , props ) ; } \n \t2 } catch ( throwable t ) { \n \t2 <comment> \n \t2 <comment> \n <ect>
\t1 server = create <identifiersep> rpc <identifiersep> server ( protocol <identifiersep> class , addr , conf , \n \t2 num <identifiersep> handlers , impl , secret <identifiersep> manager , provider , acl <identifiersep> vars ) ; \n \t1 server . start ( ) ; \n \t1 } catch ( io <identifiersep> exception e ) { \n <ect>
\t1 class <identifiersep> loader session <identifiersep> cl = state . get <identifiersep> conf ( ) . get <identifiersep> class <identifiersep> loader ( ) ; \n \t1 if ( session <identifiersep> cl != null ) { \n \t1 log . trace ( <string_literal> ) ; <comment> \n \t1 return session <identifiersep> cl ; } \n <ect>
\t1 string str = <string_literal> 1 . 0 \\ <string_literal> \n \t3 + <string_literal> ; \n \t1 log . info ( str ) ; \n \t1 log . info ( <string_literal> + charset . default <identifiersep> charset ( ) ) ; \n <ect>
\t2 final string initial <identifiersep> url = common <identifiersep> utils . construct <identifiersep> redirect <identifiersep> url ( cas <identifiersep> properties . get <identifiersep> server ( ) . get <identifiersep> login <identifiersep> url ( ) , \n \t3 cas <identifiersep> protocol <identifiersep> constants . parameter <identifiersep> service , service <identifiersep> url , authn <identifiersep> request . is <identifiersep> force <identifiersep> authn ( ) , \n \t3 authn <identifiersep> request . is <identifiersep> passive ( ) ) ; \n \t2 final string url <identifiersep> to <identifiersep> redirect <identifiersep> to = build <identifiersep> redirect <identifiersep> url <identifiersep> by <identifiersep> requested <identifiersep> authn <identifiersep> context ( initial <identifiersep> url , authn <identifiersep> request , request ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void on <identifiersep> failure ( throwable t ) { \n \t2 if ( ! ( t instanceof cancellation <identifiersep> exception ) ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t4 } catch ( number <identifiersep> format <identifiersep> exception e ) { \n \t5 log . warn ( <string_literal> , name ) ; \n \t5 parsed <identifiersep> suffix = 0 ; } \n \t3 } else { \n <ect>
\t7 } else { \n \t8 state item <identifiersep> state = state . equals ( <string_literal> ) ? on <identifiersep> off <identifiersep> type . off : on <identifiersep> off <identifiersep> type . on ; \n \t8 event <identifiersep> publisher . post <identifiersep> update ( item <identifiersep> name , item <identifiersep> state ) ; } } } \n \t4 } catch ( exception e ) { \n <ect>
\t7 loopback <identifiersep> iface = iface ; \n \t7 loopback <identifiersep> addr = i . next <identifiersep> element ( ) ; \n \t7 break ; } } } \n \t4 if ( loopback <identifiersep> iface == null ) { \n <ect>
\t3 if ( image != null ) { \n \t4 sized <identifiersep> symbols . put ( symbol , image ) ; \n \t3 } else { \n \t4 file <identifiersep> errors . set ( true ) ; \n <ect>
\t3 read <identifiersep> group <identifiersep> record . set <identifiersep> sample ( <string_literal> ) ; \n \t3 read <identifiersep> group <identifiersep> record . set <identifiersep> platform <identifiersep> unit ( <string_literal> ) ; \n \t3 if ( validation <identifiersep> stringency == validation <identifiersep> stringency . lenient ) { \n \t4 log . warn ( e ) ; \n <ect>
<comment> \n \t1 public static database <identifiersep> service get ( string db <identifiersep> type ) { \n \t2 logger . debug ( <string_literal> , db <identifiersep> type ) ; \n \t2 database <identifiersep> service database <identifiersep> service = database <identifiersep> service . db <identifiersep> type . get <identifiersep> jdbc <identifiersep> service <identifiersep> from <identifiersep> type ( db <identifiersep> type . to <identifiersep> lower <identifiersep> case ( ) ) ; \n <ect>
\t3 url = url . replace ( ' \\ \\ ' , ' / ' ) ; \n \t3 for ( interface <identifiersep> definition <identifiersep> part part : part <identifiersep> list ) { \n \t4 if ( ( root <identifiersep> in <identifiersep> config + part . get <identifiersep> url ( ) ) . equals <identifiersep> ignore <identifiersep> case ( url ) ) { \n \t5 return get <identifiersep> part <identifiersep> content ( part ) ; } } } \n <ect>
\t4 put <identifiersep> keys <identifiersep> that <identifiersep> succeeded . add ( entry . get <identifiersep> value ( ) ) ; \n \t3 } catch ( voldemort <identifiersep> exception e ) { \n \t4 logger . warn ( e , e ) ; \n \t4 num <identifiersep> put <identifiersep> exceptions ++ ; } } \n <ect>
\t2 def registered <identifiersep> service = args [ 1 ] \n \t2 def authentication = args [ <number_literal> ] \n \t2 def logger = args [ <number_literal> ] \n \t2 if ( service . id == <string_literal> ) { \n <ect>
\t8 vol <identifiersep> service . expunge <identifiersep> volume <identifiersep> async ( volume <identifiersep> info ) ; \n \t7 } else { \n \t8 s <identifiersep> logger . debug ( <string_literal> + vol . get <identifiersep> uuid ( ) + <string_literal> ) ; } \n \t6 } catch ( exception e ) { \n <ect>
\t2 assert plc <identifiersep> enabled ; \n \t2 assert plc != null ; \n \t2 assert ! e . is <identifiersep> internal ( ) : <string_literal> + e ; \n <ect>
<comment> \n \t1 public final void rollback ( savepoint savepoint ) throws data <identifiersep> access <identifiersep> exception { \n \t2 try { \n <ect>
\t6 = ( string ) ( ( json <identifiersep> object ) result . get ( 0 ) ) \n \t7 . get ( <string_literal> ) ; } } \n \t3 catch ( throwable e ) \n \t3 { \n <ect>
\t3 } else { \n \t4 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; } \n \t3 s <identifiersep> logger . info ( <string_literal> + success . get ( <string_literal> ) ) ; \n \t2 } else { \n <ect>
\t1 public void test <identifiersep> lock <identifiersep> and <identifiersep> release ( ) { \n \t2 s <identifiersep> logger . info ( <string_literal> ) ; \n \t2 boolean result =  <identifiersep> lock <identifiersep> master . acquire ( <string_literal> + <number_literal> , <number_literal> ) ; \n \t2 assert . assert <identifiersep> true ( result ) ; \n <ect>
\t2 try { \n \t3 cms <identifiersep> jlan <identifiersep> network <identifiersep> file file = get <identifiersep> file <identifiersep> for <identifiersep> path ( session , connection , path ) ; \n \t3 if ( file == null ) { \n \t4 <comment> \n <ect>
\t4 passive <identifiersep> declare <identifiersep> retries = 0 ; } \n \t3 catch ( declaration <identifiersep> exception e ) { \n \t4 if ( passive <identifiersep> declare <identifiersep> retries > 0 && this . channel . is <identifiersep> open ( ) ) { \n <ect>
\t4 } else { \n \t5 long vlan <identifiersep> tag = integer . parse <identifiersep> int ( broadcast <identifiersep> uri . get <identifiersep> host ( ) ) ; \n \t5 long [ ] bytes <identifiersep> sent <identifiersep> and <identifiersep> received = answer . guest <identifiersep> vlan <identifiersep> bytes . get ( string . value <identifiersep> of ( vlan <identifiersep> tag ) ) ; \n \t5 if ( bytes <identifiersep> sent <identifiersep> and <identifiersep> received == null ) { \n <ect>
\t2 ccn <identifiersep> sync sync1 = new ccn <identifiersep> sync ( ) ; \n \t2 config <identifiersep> slice slice1 = sync1 . start <identifiersep> sync ( get <identifiersep> handle , topo , prefix1 , this ) ; \n \t2 slices . add ( slice1 ) ; \n \t2 sync1 . stop <identifiersep> sync ( this , slice1 ) ; \n <ect>
\t4 has <identifiersep> item ( gateway <identifiersep> service . state <identifiersep> not <identifiersep> recovered <identifiersep> block ) ) ; \n \t2 assert <identifiersep> that ( data1 . admin ( ) . cluster ( ) . prepare <identifiersep> state ( ) . set <identifiersep> local ( true ) . execute ( ) . action <identifiersep> get ( ) \n \t4 . get <identifiersep> state ( ) . blocks ( ) . global ( cluster <identifiersep> block <identifiersep> level . metadata <identifiersep> write ) , \n \t4 has <identifiersep> item ( gateway <identifiersep> service . state <identifiersep> not <identifiersep> recovered <identifiersep> block ) ) ; \n <ect>
\t1 <comment> \n \t1 void shutdown ( string reason ) { \n <ect>
\t4 self . read = self . read <identifiersep> winpty \n \t3 else : \n \t4 self . read = self . read <identifiersep> pipe \n \t1 def close ( self ) : \n <ect>
\t3 worksheet <identifiersep> update <identifiersep> factory . detect <identifiersep> selection <identifiersep> status <identifiersep> change ( worksheet <identifiersep> id , workspace , this ) ; \n \t3 return c ; } \n \t2 catch ( exception e ) \n \t2 { \n <ect>
<comment> \n \t1 public final mary <identifiersep> data process ( mary <identifiersep> data d ) throws transformer <identifiersep> configuration <identifiersep> exception , transformer <identifiersep> exception , \n \t3 file <identifiersep> not <identifiersep> found <identifiersep> exception , io <identifiersep> exception , parser <identifiersep> configuration <identifiersep> exception , sax <identifiersep> exception , exception { \n \t2 assert state == module <identifiersep> running ; \n <ect>
\t2 neo4j <identifiersep> transaction <identifiersep> object tx <identifiersep> object = ( neo4j <identifiersep> transaction <identifiersep> object ) status . get <identifiersep> transaction ( ) ; \n \t2 session session = tx <identifiersep> object . get <identifiersep> session <identifiersep> holder ( ) . get <identifiersep> session ( ) ; \n \t2 try ( transaction tx = session . get <identifiersep> transaction ( ) ) { \n \t3 if ( status . is <identifiersep> debug ( ) ) { \n <ect>
\t3 throw thrift <identifiersep> conversion . to <identifiersep> thrift ( e ) ; } } \n \t1 public string system <identifiersep> add <identifiersep> keyspace ( ks <identifiersep> def ks <identifiersep> def ) \n \t1 throws invalid <identifiersep> request <identifiersep> exception , schema <identifiersep> disagreement <identifiersep> exception , t <identifiersep> exception \n \t1 { \n <ect>
\t2 meta <identifiersep> data meta <identifiersep> data = meta <identifiersep> data <identifiersep> builder . build ( ) ; \n \t2 for ( object <identifiersep> cursor < index <identifiersep> meta <identifiersep> data > cursor : meta <identifiersep> data . indices ( ) . values ( ) ) { \n \t3 routing <identifiersep> table <identifiersep> builder . add <identifiersep> as <identifiersep> new ( cursor . value ) ; } \n \t2 routing <identifiersep> table initial <identifiersep> routing <identifiersep> table = routing <identifiersep> table <identifiersep> builder . build ( ) ; \n <ect>
\t6 memcached <identifiersep> properties . is <identifiersep> kryo <identifiersep> registration <identifiersep> required ( ) , \n \t6 memcached <identifiersep> properties . is <identifiersep> kryo <identifiersep> objects <identifiersep> by <identifiersep> reference ( ) , \n \t6 memcached <identifiersep> properties . is <identifiersep> kryo <identifiersep> auto <identifiersep> reset ( ) ) ; \n \t4 final cas <identifiersep> kryo <identifiersep> transcoder kryo = new cas <identifiersep> kryo <identifiersep> transcoder ( kryo <identifiersep> pool ) ; \n <ect>
\t1 @ override \n \t1 public void close ( ) { } \n \t1 @ override \n \t1 public user <identifiersep> model get <identifiersep> user <identifiersep> by <identifiersep> id ( string id , realm <identifiersep> model realm ) { \n <ect>
\t2 } catch ( exception e ) { \n \t3 get <identifiersep> exception <identifiersep> handler ( ) . handle <identifiersep> exception ( <string_literal> + event , exchange , e ) ; } } \n \t1 protected void do <identifiersep> start ( ) throws exception { \n <ect>
\t3 } else { \n \t4 action <identifiersep> id <identifiersep> path . append ( mapping ) ; \n \t4 action <identifiersep> id <identifiersep> path . append ( path ) ; } \n \t2 } else { \n <ect>
\t6 correct <identifiersep> vif . destroy ( conn ) ; \n \t6 <comment> \n \t6 disable <identifiersep> vlan <identifiersep> network ( conn , network ) ; } } } \n \t2 } catch ( final exception e ) { \n <ect>
\t2 igt <identifiersep> scanner scanner = grid <identifiersep> table . scan ( req ) ; \n \t2 for ( gt <identifiersep> record record : scanner ) { \n \t3 output . write ( cuboid <identifiersep> id , record ) ; } \n \t2 scanner . close ( ) ; \n <ect>
\t4 for ( int i = 0 ; i < <number_literal> ; i ++ ) { \n \t5 try { \n \t6 peer <identifiersep> service = get <identifiersep> peer <identifiersep> service ( pdu . get <identifiersep> dest <identifiersep> peer ( ) ) ; \n \t5 } catch ( remote <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 private handshake <identifiersep> status run <identifiersep> tasks <identifiersep> if <identifiersep> needed ( ssl <identifiersep> engine <identifiersep> result result ) throws io <identifiersep> exception { \n \t2 if ( result != null ) { \n <ect>
\t2 map < string , module > public <identifiersep> imports <identifiersep> map = new weak <identifiersep> hash <identifiersep> map < > ( ) ; <comment> \n \t2 for ( string module <identifiersep> id : module <identifiersep> constants . core <identifiersep> modules . key <identifiersep> set ( ) ) { \n \t3 module core <identifiersep> module = module <identifiersep> factory . get <identifiersep> module <identifiersep> by <identifiersep> id ( module <identifiersep> id ) ; \n \t3 if ( core <identifiersep> module == null && ! module <identifiersep> util . ignore <identifiersep> core <identifiersep> modules ( ) ) { \n <ect>
\t4 log . error ( <string_literal> , theme <identifiersep> class , cce ) ; \n \t3 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception cnf ) { \n \t4 log . error ( <string_literal> , theme <identifiersep> class , cnf ) ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 if ( s . is <identifiersep> connected ( ) ) { \n \t3 <comment> \n \t3 return ; } \n \t2 } catch ( exception e ) { \n <ect>
\t3 if ( sg <identifiersep> v <identifiersep> os . size ( ) > 1 ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + sg <identifiersep> id + <string_literal> + vm <identifiersep> id + <string_literal> + event . get <identifiersep> account <identifiersep> id ( ) + <string_literal> ) ; } \n \t3 for ( usage <identifiersep> security <identifiersep> group <identifiersep> vo sg <identifiersep> vo : sg <identifiersep> v <identifiersep> os ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t3 raw <identifiersep> model = json <identifiersep> model . deserialize ( model <identifiersep> location ) ; \n \t2 } catch ( json <identifiersep> parse <identifiersep> exception jse ) { \n \t3 raw <identifiersep> model = null ; \n \t3 fail <identifiersep> reason = <string_literal> + jse . get <identifiersep> message ( ) ; \n <ect>
\t2 log <identifiersep> definition definition = list <identifiersep> of <identifiersep> logs . get ( 0 ) ; \n \t2 <comment> \n \t2 return definition . get <identifiersep> log <identifiersep> id ( ) ; } } \n \t1 } catch ( ambari <identifiersep> exception e ) { \n <ect>
\t8 immediate <identifiersep> individual <identifiersep> transacted <identifiersep> ack ( md ) ; \n \t7 } else { \n \t8 session . send <identifiersep> ack ( new message <identifiersep> ack ( md , message <identifiersep> ack . delivered <identifiersep> ack <identifiersep> type , 1 ) ) ; } \n \t6 } else if ( ( consumer <identifiersep> with <identifiersep> pending <identifiersep> transaction = redelivery <identifiersep> pending <identifiersep> in <identifiersep> competing <identifiersep> transaction ( md ) ) != null ) { \n <ect>
\t3 if ( ! item <identifiersep> list . is <identifiersep> empty ( ) ) { \n \t4 attributes . put ( item . get <identifiersep> attribute <identifiersep> name ( ) , item <identifiersep> list ) ; } \n \t2 } ) ; \n \t2 credential . set <identifiersep> attributes ( attributes ) ; \n <ect>
\t9 write <identifiersep> string ( session <identifiersep> error , <string_literal> ) ; \n \t9 break ; } \n \t7 } else if (  <identifiersep> last <identifiersep> ping < 0 ) { \n \t8 if (  <identifiersep> log . should <identifiersep> warn ( ) ) \n <ect>
\t2 for ( string matched <identifiersep> dn : result <identifiersep> list ) { \n \t2 string short <identifiersep> user <identifiersep> name = ldap <identifiersep> utils . get <identifiersep> short <identifiersep> name ( matched <identifiersep> dn ) ; \n \t2 log . info ( <string_literal> + short <identifiersep> user <identifiersep> name + <string_literal> + user + <string_literal> ) ; \n \t2 if ( short <identifiersep> user <identifiersep> name . equals <identifiersep> ignore <identifiersep> case ( user ) || matched <identifiersep> dn . equals <identifiersep> ignore <identifiersep> case ( user ) ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t3 message . set <identifiersep> string <identifiersep> property ( <string_literal> , data [ i ] ) ; \n \t3 message . set <identifiersep> int <identifiersep> property ( <string_literal> , i ) ; \n \t3 if ( verbose ) { \n <ect>
\t4 script command = new script ( <string_literal> , wait , s <identifiersep> logger ) ; \n \t4 command . add ( <string_literal> ) ; \n \t4 command . add ( <string_literal> , src <identifiersep> ova <identifiersep> file <identifiersep> name ) ; \n \t4 command . set <identifiersep> work <identifiersep> dir ( secondary <identifiersep> mount <identifiersep> point + <string_literal> + sec <identifiersep> storage <identifiersep> dir + <string_literal> + snapshot <identifiersep> dir ) ; \n <ect>
\t2 final object me = this ; \n \t2 new thread ( new runnable ( ) { \n \t3 @ override \n \t3 public void run ( ) { \n <ect>
\t5 log . info ( <string_literal> , pause <identifiersep> transit <identifiersep> service . class . get <identifiersep> name ( ) ) ; \n \t5 update <identifiersep> bundle ( ) ; \n \t5 update <identifiersep> coord ( ) ; } } \n \t3 catch ( exception ex ) { \n <ect>
\t2 { \n \t3 return logical <identifiersep> transaction <identifiersep> store . get <identifiersep> transactions ( first <identifiersep> tx <identifiersep> id ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> transaction <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 continue ; <comment> \n \t2 try { \n \t2 path new <identifiersep> file = rename <identifiersep> to <identifiersep> in <identifiersep> progress <identifiersep> file ( file ) ; \n \t2 file <identifiersep> reader result = create <identifiersep> file <identifiersep> reader ( new <identifiersep> file ) ; \n <ect>
<number_literal> success = ( stop <identifiersep> response <identifiersep> code == <number_literal> ) ; } \n \t9 } else { \n \t10 <comment> \n \t10 <comment> \n <ect>
\t2 assert . assert <identifiersep> equals ( <number_literal> , results . size ( ) ) ; \n \t2 log . info ( log . fac <identifiersep> test , <string_literal> ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> get <identifiersep> repo <identifiersep> keys ( ) throws exception { \n <ect>
\t3 if ( metadata . is <identifiersep> simple <identifiersep> manifest ( ) ) { \n \t4 if ( log <identifiersep> minor ) logger . minor ( this , <string_literal> ) ; \n \t4 string name ; \n \t4 if ( metadata . count <identifiersep> documents ( ) == 1 && metadata . get <identifiersep> document ( <string_literal> ) != null && metadata . get <identifiersep> document ( <string_literal> ) . is <identifiersep> simple <identifiersep> manifest ( ) ) { \n <ect>
\t3 if ( header <identifiersep> constants . cache <identifiersep> control <identifiersep> no <identifiersep> store . equals <identifiersep> ignore <identifiersep> case ( cache <identifiersep> control <identifiersep> element . get <identifiersep> name ( ) ) ) { \n \t4 log . debug ( <string_literal> ) ; \n \t4 return false ; } \n \t3 if ( header <identifiersep> constants . cache <identifiersep> control <identifiersep> no <identifiersep> cache . equals <identifiersep> ignore <identifiersep> case ( cache <identifiersep> control <identifiersep> element . get <identifiersep> name ( ) ) ) { \n <ect>
\t5 break ; \n \t4 default : \n \t5 throw new invalid <identifiersep> argument <identifiersep> exception ( ) . with <identifiersep> argument <identifiersep> name ( map <identifiersep> entry . get <identifiersep> key ( ) . to <identifiersep> string ( ) ) . with <identifiersep> argument <identifiersep> value ( header <identifiersep> value ) ; } } \n \t3 } else { \n <ect>
\t3 return arg0 . get <identifiersep> pool ( ) + ceph <identifiersep> rbd <identifiersep> info . pool <identifiersep> image <identifiersep> delimiter + image <identifiersep> name + ceph <identifiersep> rbd <identifiersep> info . image <identifiersep> snapshot <identifiersep> delimiter + snap <identifiersep> name ; \n \t2 } else { \n \t3 return null ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 for ( int i = 0 ; i < cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shards ( ) . size ( ) ; i ++ ) { \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . size ( ) , equal <identifiersep> to ( <number_literal> ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . primary <identifiersep> shard ( ) . state ( ) , equal <identifiersep> to ( initializing ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . replica <identifiersep> shards ( ) . get ( 0 ) . state ( ) , equal <identifiersep> to ( unassigned ) ) ; } \n <ect>
\t2 if ( address <identifiersep> type != address <identifiersep> identifier . address <identifiersep> type . other ) { \n \t3 <comment> \n \t3 addr = inet <identifiersep> address . get <identifiersep> by <identifiersep> name ( host ) ; \n \t3 <comment> \n <ect>
\t1 public boolean can <identifiersep> handle ( flow <identifiersep> execution <identifiersep> exception e ) { \n \t2 return get <identifiersep> target <identifiersep> state <identifiersep> resolver ( e ) != null ; } \n \t1 public void handle ( flow <identifiersep> execution <identifiersep> exception exception , request <identifiersep> control <identifiersep> context context ) { \n <ect>
\t3 timeout = config <identifiersep> timeout ; } \n \t2 } catch ( exception e ) { \n \t2 log . warn ( <string_literal> , key , config <identifiersep> value ) ; } \n \t1 } else { \n <ect>
\t2 client <identifiersep> socket . get <identifiersep> output <identifiersep> stream ( ) . write ( <number_literal> ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n \t2 log . info ( <string_literal> , client <identifiersep> socket . get <identifiersep> input <identifiersep> stream ( ) . available ( ) ) ; \n \t2 buffer = new byte [ 0 ] ; \n <ect>
\t1 <comment> \n \t1 <comment> \n \t1 column <identifiersep> comments = arrays . as <identifiersep> list ( column <identifiersep> comment <identifiersep> property . split ( <string_literal> ) ) ; \n <ect>
\t2 try { \n \t3 if ( item <identifiersep> registry != null ) { \n \t4 item = item <identifiersep> registry . get <identifiersep> item ( item <identifiersep> name ) ; } \n \t2 } catch ( item <identifiersep> not <identifiersep> found <identifiersep> exception e1 ) { \n <ect>
\t2 <comment> \n \t2 if ( attribute <identifiersep> broadcaster == null ) \n \t3 attribute <identifiersep> broadcaster = new base <identifiersep> notification <identifiersep> broadcaster ( ) ; \n <ect>
\t1 try { \n \t1 if ( ! execution <identifiersep> scheduler . is <identifiersep> scheduler <identifiersep> started ( ) ) { \n \t2 execution <identifiersep> scheduler . start <identifiersep> scheduler ( null ) ; } \n \t1 } catch ( scheduler <identifiersep> exception e ) { \n <ect>
\t3 log . error ( <string_literal> , t ) ; } \n \t2 @ override \n \t2 public void on <identifiersep> binary <identifiersep> frame ( byte [ ] message , boolean final <identifiersep> fragment , int rsv ) { \n \t3 received . add ( message ) ; \n <ect>
\t7 continue ; } \n \t6 fork <identifiersep> protocol <identifiersep> stack fork <identifiersep> stack = get <identifiersep> fork <identifiersep> stack ( prot ) ; \n \t6 j <identifiersep> channel fork <identifiersep> ch = fork <identifiersep> stack . get ( ch <identifiersep> name ) ; \n \t6 if ( fork <identifiersep> ch == null ) { \n <ect>
\t1 public void dispose ( ) { \n \t2 if (  <identifiersep> should <identifiersep> close ) { \n \t3  <identifiersep> did <identifiersep> close = erxeo <identifiersep> access <identifiersep> utilities . close <identifiersep> database <identifiersep> connections ( this ) ; \n \t3 if ( !  <identifiersep> did <identifiersep> close &&  <identifiersep> should <identifiersep> close ) { \n <ect>
\t5 throw new sword <identifiersep> auth <identifiersep> exception ( \n \t6 <string_literal> ) ; } } \n \t3 return sc ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t2 optional < component > old <identifiersep> component = get <identifiersep> pool ( entity <identifiersep> id ) . map ( pool - > pool . get <identifiersep> component <identifiersep> store ( ) . put ( entity <identifiersep> id , component ) ) ; \n \t2 if ( ! old <identifiersep> component . is <identifiersep> present ( ) ) { \n \t3 notify <identifiersep> component <identifiersep> added ( get <identifiersep> entity ( entity <identifiersep> id ) , component . get <identifiersep> class ( ) ) ; \n \t2 } else { \n <ect>
\t4 s <identifiersep> logger . debug ( <string_literal> + account <identifiersep> id + <string_literal> + domain <identifiersep> id + <string_literal> + adjusted <identifiersep> start <identifiersep> date ) ; } \n \t3 list < quota <identifiersep> balance <identifiersep> vo > qbrecords =  <identifiersep> quota <identifiersep> balance <identifiersep> dao . last <identifiersep> quota <identifiersep> balance <identifiersep> vo ( account <identifiersep> id , domain <identifiersep> id , adjusted <identifiersep> start <identifiersep> date ) ; \n <ect>
\t2 ensure <identifiersep> system <identifiersep> role <identifiersep> policies <identifiersep> exist ( role , system <identifiersep> account <identifiersep> role , account . get <identifiersep> account <identifiersep> number ( ) ) ; \n \t2 } catch ( final auth <identifiersep> exception e ) { \n \t2 add <identifiersep> system <identifiersep> role ( account , system <identifiersep> account <identifiersep> role ) ; } } \n \t1 } catch ( exception e ) { \n <ect>
\t3 int size ; \n \t3 string strsize = props . get <identifiersep> property ( <string_literal> ) ; \n \t3 if ( strsize == null ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) \n <ect>
\t8 s <identifiersep> logger . warn ( <string_literal> + router . get <identifiersep> account <identifiersep> id ( ) + <string_literal> + answer . get <identifiersep> bytes <identifiersep> received ( ) + <string_literal> + answer . get <identifiersep> bytes <identifiersep> sent ( ) ) ; \n \t7 } finally { \n \t8 txn . close ( ) ; } } } } \n \t3 } catch ( exception e ) { \n <ect>
\t4 previsit <identifiersep> results ) , database , traverse <identifiersep> commits , deduplicator ) ; \n \t2 long object <identifiersep> count = 0 ; \n \t2 logger . info ( <string_literal> , sw . stop ( ) ) ; \n \t2 try { \n <ect>
\t3 } catch ( io <identifiersep> exception ex ) { \n \t4 if ( ! uri . to <identifiersep> lower <identifiersep> case ( ) . ends <identifiersep> with ( <string_literal> ) ) { \n \t5 log . info ( <string_literal> , file , uri ) ; } } \n \t2 } else { \n <ect>
\t5 rc . add ( service ) ; } } \n \t3 scanner . close ( ) ; \n \t3 return rc ; \n \t2 } catch ( exception e ) { \n <ect>
\t5 vars . key <identifiersep> set ( ) . for <identifiersep> each ( p - > bc <identifiersep> log . logger . info ( <string_literal> + p ) ) ; } \n \t4 vars . values ( ) . remove <identifiersep> if ( objects : : non <identifiersep> null ) ; \n \t4 if ( debug && ! vars . is <identifiersep> empty ( ) ) { \n \t5 bc <identifiersep> log . logger . info ( <string_literal> + key + <string_literal> ) ; \n <ect>
\t2 try { \n \t3 string redirect <identifiersep> url = idp <identifiersep> metadata . get <identifiersep> slo <identifiersep> url ( ) + <string_literal> + saml <identifiersep> utils . encode <identifiersep> saml <identifiersep> request ( logout <identifiersep> request ) ; \n \t3 resp . send <identifiersep> redirect ( redirect <identifiersep> url ) ; \n \t2 } catch ( marshalling <identifiersep> exception | io <identifiersep> exception e ) { \n <ect>
\t1 source <identifiersep> counter . increment <identifiersep> event <identifiersep> received <identifiersep> count ( ) ; \n \t1 try { \n \t2 get <identifiersep> channel <identifiersep> processor ( ) . process <identifiersep> event ( flume <identifiersep> event ) ; \n \t1 } catch ( channel <identifiersep> exception ex ) { \n <ect>
\t2 if ( if <identifiersep> fix == true ) { \n \t3 for ( string seg <identifiersep> full <identifiersep> name : inconsistent <identifiersep> h <identifiersep> tables ) { \n \t4 string [ ] sep <identifiersep> name <identifiersep> list = seg <identifiersep> full <identifiersep> name . split ( <string_literal> ) ; \n \t4 h <identifiersep> table <identifiersep> descriptor desc = hbase <identifiersep> admin . get <identifiersep> table <identifiersep> descriptor ( table <identifiersep> name . value <identifiersep> of ( sep <identifiersep> name <identifiersep> list [ 0 ] ) ) ; \n <ect>
\t4 stores . add ( slave2 ) ; } \n \t3 message <identifiersep> store ms = master . create <identifiersep> queue <identifiersep> message <identifiersep> store ( new active <identifiersep> mq <identifiersep> queue ( <string_literal> ) ) ; \n \t3 log . info ( <string_literal> + master . get <identifiersep> directory ( ) ) ; \n \t3 assert <identifiersep> equals ( expected <identifiersep> list , get <identifiersep> messages ( ms ) ) ; \n <ect>
\t6 if ( token == null || ( ! token . is <identifiersep> access <identifiersep> token ( ) && ( ! resource <identifiersep> that <identifiersep> needs <identifiersep> authorization . is <identifiersep> use10a ( ) || verifier == null ) ) ) { \n \t7 <comment> \n \t7 <comment> \n <ect>
@ override \n protected void close <identifiersep> op ( boolean abort ) throws hive <identifiersep> exception { \n \t1 for ( int i = 0 ; i < num <identifiersep> parents ; i ++ ) { \n <ect>
\t3 map < string , integer > new <identifiersep> blocks = frozen . i <identifiersep> block <identifiersep> registry . get <identifiersep> entries <identifiersep> not <identifiersep> in ( new <identifiersep> data . i <identifiersep> block <identifiersep> registry ) ; \n \t3 map < string , integer > new <identifiersep> items = frozen . i <identifiersep> item <identifiersep> registry . get <identifiersep> entries <identifiersep> not <identifiersep> in ( new <identifiersep> data . i <identifiersep> item <identifiersep> registry ) ; \n \t3 if ( ! new <identifiersep> blocks . is <identifiersep> empty ( ) || ! new <identifiersep> items . is <identifiersep> empty ( ) ) \n \t3 { \n <ect>
\t5 assert <identifiersep> true ( <string_literal> , row <identifiersep> obj instanceof multi <identifiersep> steps ) ; \n \t5 final multi <identifiersep> steps row = ( multi <identifiersep> steps ) row <identifiersep> obj ; \n \t5 log . info ( <string_literal> + counter ++ + <string_literal> + row ) ; \n \t5 if ( row . get <identifiersep> address ( ) . equals ( <string_literal> ) ) { \n <ect>
\t5 if ( bridge . get <identifiersep> jms <identifiersep> message <identifiersep> convertor ( ) == null ) { \n \t6 bridge . set <identifiersep> jms <identifiersep> message <identifiersep> convertor ( get <identifiersep> inbound <identifiersep> message <identifiersep> convertor ( ) ) ; } \n \t5 bridge . set <identifiersep> jms <identifiersep> connector ( this ) ; \n \t5 bridge . start ( ) ; \n <ect>
\t2 if ( this . address != null ) { \n \t3 try { \n \t4 original <identifiersep> url = new url ( this . address ) ; \n \t3 } catch ( malformed <identifiersep> url <identifiersep> exception ex ) { \n <ect>
\t3 if ( ( this . auth <identifiersep> value != null ) && ( server <identifiersep> token . auth <identifiersep> value != null ) \n \t7 && ( this . auth <identifiersep> value . equals <identifiersep> ignore <identifiersep> case ( server <identifiersep> token . auth <identifiersep> value ) ) ) { \n \t4 <comment> \n <ect>
<comment> \n public notification <identifiersep> center ( notification <identifiersep> dispatcher <identifiersep> metadata [ ] metadata ) { \n \t1 this ( metadata , new notification <identifiersep> channel [ 0 ] ) ; \n <ect>
\t3 content <identifiersep> name name = content <identifiersep> name . from <identifiersep> native ( namestring ) ; \n \t3 ccn <identifiersep> string <identifiersep> object so <identifiersep> in = new ccn <identifiersep> string <identifiersep> object ( name , readhandle ) ; \n \t3 so <identifiersep> in . setup <identifiersep> save ( save <identifiersep> type . localrepository ) ; \n \t3 readhandle . check <identifiersep> error ( long <identifiersep> timeout ) ; \n <ect>
\t2  <identifiersep> dest <identifiersep> file = dest <identifiersep> file ; \n \t2  <identifiersep> peer <identifiersep> dest <identifiersep> files = peer <identifiersep> dest <identifiersep> files ; \n \t2  <identifiersep> con <identifiersep> options = <string_literal> ; } \n \t1 public void startup ( ) { \n <ect>
\t3 group . election ( ) . on <identifiersep> election ( term - > { \n \t4 if ( is <identifiersep> run <identifiersep> allowed ( ) ) { \n \t5 fire <identifiersep> leadership <identifiersep> changed <identifiersep> event ( optional . of ( to <identifiersep> cluster <identifiersep> member ( term . leader ( ) ) ) ) ; } \n \t3 } ) ; \n <ect>
\t3 self . logger . debug ( <string_literal> % router ) \n \t2 else : \n \t3 router = routers [ 0 ] \n \t2 if router . hostid == virtual <identifiersep> machine . hostid : \n <ect>
\t3 file <identifiersep> permissions permissions = file <identifiersep> util . get <identifiersep> file <identifiersep> permissions ( file ) ; \n \t3 if ( permissions . is <identifiersep> browsable ( ) ) { \n \t4 return file ; \n \t3 } else { \n <ect>
\t5 task . exec <identifiersep> replicate ( replicate . get <identifiersep> rebalance <identifiersep> source ( ) , replicate . get <identifiersep> rebalance <identifiersep> target ( ) , true , true , replicate . was <identifiersep> queued ( ) ) ; \n \t4 } catch ( exception e ) { \n \t5 log . warn ( <string_literal> + task . get <identifiersep> job <identifiersep> key ( ) + <string_literal> + e , e ) ; } \n \t3 } else { \n <ect>
\t3 if ( request <identifiersep> params <identifiersep> start <identifiersep> index >= 0 ) { \n \t4 uri = uri . substring ( request <identifiersep> params <identifiersep> start <identifiersep> index + 1 ) ; } \n \t3 string [ ] param <identifiersep> array = uri . split ( <string_literal> ) ; \n \t3 if ( param <identifiersep> array . length < 1 ) { \n <ect>
\t3 result <identifiersep> str = context . to <identifiersep> string ( result ) ; \n \t3 if ( var <identifiersep> name != null && vars != null ) { <comment> \n \t4 vars . put ( var <identifiersep> name , result <identifiersep> str ) ; } \n \t2 } catch ( rhino <identifiersep> exception e ) { \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 <comment> \n \t2  <identifiersep> outbound <identifiersep> states . remove ( outbound <identifiersep> state . get <identifiersep> remote <identifiersep> host <identifiersep> id ( ) , outbound <identifiersep> state ) ; \n \t2 if ( outbound <identifiersep> state . get <identifiersep> state ( ) != ob <identifiersep> state <identifiersep> confirmed <identifiersep> completely ) { \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 } catch ( resource <identifiersep> in <identifiersep> use <identifiersep> exception ex2 ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> , ex2 ) ; \n \t3 throw new server <identifiersep> api <identifiersep> exception ( base <identifiersep> cmd . resource <identifiersep> in <identifiersep> use <identifiersep> error , ex2 . get <identifiersep> message ( ) ) ; \n \t2 } catch ( unknown <identifiersep> host <identifiersep> exception ex3 ) { \n <ect>
\t2 final boolean config <identifiersep> exists = resource <identifiersep> utils . does <identifiersep> resource <identifiersep> exist ( cache . get <identifiersep> config <identifiersep> location ( ) ) ; \n \t2 final ehcache <identifiersep> properties ehcache <identifiersep> properties = cas <identifiersep> properties . get <identifiersep> ticket ( ) . get <identifiersep> registry ( ) . get <identifiersep> ehcache ( ) ; \n \t2 final eh <identifiersep> cache <identifiersep> factory <identifiersep> bean bean = new eh <identifiersep> cache <identifiersep> factory <identifiersep> bean ( ) ; \n \t2 bean . set <identifiersep> cache <identifiersep> name ( ticket <identifiersep> definition . get <identifiersep> properties ( ) . get <identifiersep> storage <identifiersep> name ( ) ) ; \n <ect>
<comment> \n \t1 @ override \n \t1 public void updated ( dictionary < string , ? > config ) throws configuration <identifiersep> exception { \n <ect>
\t1 self . holder . handle . exit <identifiersep> code = process . returncode \n \t1 process <identifiersep> condensed <identifiersep> result = self . python <identifiersep> executor . prepare <identifiersep> process <identifiersep> result ( process . returncode , self . holder . out <identifiersep> file , self . holder . err <identifiersep> file , self . holder . structured <identifiersep> out <identifiersep> file ) \n \t1 logger . debug ( <string_literal> , process <identifiersep> condensed <identifiersep> result ) \n \t1 self . holder . handle . on <identifiersep> background <identifiersep> command <identifiersep> complete <identifiersep> callback ( process <identifiersep> condensed <identifiersep> result , self . holder . handle ) \n <ect>
<comment> \n \t1 void add <identifiersep> switch ( string day , string setpoint , int time ) { \n \t2 logger . debug ( <string_literal> , day , setpoint , time ) ; \n \t2 if ( ! days . contains ( day ) ) { \n <ect>
\t2 server . refresh <identifiersep> service <identifiersep> acl ( conf , new llap <identifiersep> umbilical <identifiersep> policy <identifiersep> provider ( ) ) ; } \n \t1 server . start ( ) ; \n \t1 this . address = net <identifiersep> utils . get <identifiersep> connect <identifiersep> address ( server ) ; \n \t1 this . am <identifiersep> host = llap <identifiersep> util . get <identifiersep> am <identifiersep> host <identifiersep> name <identifiersep> from <identifiersep> address ( address , conf ) ; \n <ect>
\t1 <comment> \n \t1 if ( null != err <identifiersep> sink ) { \n \t2 try { \n \t2 if ( 0 != err <identifiersep> sink . join ( ) ) { \n <ect>
\t4 <comment> \n \t4 return get <identifiersep> index ( conn , node , false ) ; } \n \t3 int id = rs . get <identifiersep> int ( <string_literal> ) ; \n \t3 if ( rs . next ( ) ) \n <ect>
\t2 <comment> \n \t2 string rsrc = <string_literal> ; \n \t2 input <identifiersep> stream in = ldr . get <identifiersep> resource <identifiersep> as <identifiersep> stream ( rsrc ) ; \n \t2 if ( in == null ) { \n <ect>
\t3 vmware <identifiersep> manager mgr = get <identifiersep> service <identifiersep> context ( ) . get <identifiersep> stock <identifiersep> object ( vmware <identifiersep> manager . context <identifiersep> stock <identifiersep> name ) ; \n \t3 return mgr . get <identifiersep> storage <identifiersep> manager ( ) . execute ( this , cmd ) ; \n \t2 } catch ( throwable e ) { \n \t3 if ( e instanceof remote <identifiersep> exception ) { \n <ect>
\t1 public service retrieve ( final request <identifiersep> context request <identifiersep> context , final web <identifiersep> context web <identifiersep> context , final base <identifiersep> client client ) { \n \t2 final string client <identifiersep> id = get <identifiersep> delegated <identifiersep> client <identifiersep> id ( web <identifiersep> context , client ) ; \n \t2 final transient <identifiersep> session <identifiersep> ticket ticket = this . ticket <identifiersep> registry . get <identifiersep> ticket ( client <identifiersep> id , transient <identifiersep> session <identifiersep> ticket . class ) ; \n \t2 if ( ticket == null ) { \n <ect>
\t2 broker . start ( ) ; } \n \t1 protected void configure <identifiersep> persistence <identifiersep> adapter ( broker <identifiersep> service broker <identifiersep> service ) throws exception { } \n \t1 @ before \n \t1 public void set <identifiersep> up ( ) throws exception { \n <ect>
\t2 if ( reader != null ) { \n \t2 try { \n \t3 reader . close ( ) ; \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t1 public void activate ( string topology <identifiersep> name ) { \n \t2 try { \n \t3 state . get <identifiersep> nimbus ( ) . activate ( topology <identifiersep> name ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t2 predicates . < nat <identifiersep> gateway > always <identifiersep> true ( ) , \n \t2 cloud <identifiersep> metadatas . < nat <identifiersep> gateway > to <identifiersep> display <identifiersep> name ( ) \n \t1 ) ; \n \t1 } catch ( final exception e ) { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 snapshot <identifiersep> info snapshot <identifiersep> info = wait <identifiersep> for <identifiersep> completion ( <string_literal> , <string_literal> , time <identifiersep> value . time <identifiersep> value <identifiersep> seconds ( <number_literal> ) ) ; \n \t2 assert <identifiersep> that ( snapshot <identifiersep> info . state ( ) , equal <identifiersep> to ( snapshot <identifiersep> state . success ) ) ; \n \t2 assert <identifiersep> that ( snapshot <identifiersep> info . shard <identifiersep> failures ( ) . size ( ) , equal <identifiersep> to ( 0 ) ) ; \n <ect>
\t6 if ( cluster <identifiersep> state . routing <identifiersep> table ( ) . shard <identifiersep> routing <identifiersep> table ( shard . shard <identifiersep> id ( ) ) . active <identifiersep> shards ( ) . size ( ) < = 1 ) { \n \t7 safe <identifiersep> to <identifiersep> remove = false ; \n \t7 break ; } } } \n \t4 if ( safe <identifiersep> to <identifiersep> remove ) { \n <ect>
\t2 cluster <identifiersep> reroute <identifiersep> request <identifiersep> builder reroute <identifiersep> builder = client ( ) . admin ( ) . cluster ( ) . prepare <identifiersep> reroute ( ) ; \n \t2 for ( int <identifiersep> object <identifiersep> cursor < list < indices <identifiersep> shard <identifiersep> stores <identifiersep> response . store <identifiersep> status > > shard <identifiersep> store <identifiersep> statuses : store <identifiersep> statuses ) { \n \t3 int shard <identifiersep> id = shard <identifiersep> store <identifiersep> statuses . key ; \n \t3 indices <identifiersep> shard <identifiersep> stores <identifiersep> response . store <identifiersep> status store <identifiersep> status = random <identifiersep> from ( shard <identifiersep> store <identifiersep> statuses . value ) ; \n <ect>
\t7 throw e ; \n \t6 } else { \n \t7 s <identifiersep> logger . warn ( <string_literal> + e . get <identifiersep> scope ( ) . get <identifiersep> name ( ) , e ) ; } } \n \t4 } catch ( exception e ) { \n <ect>
\t4 sys . exit ( 1 ) \n \t3 for hookname in hooks : \n \t4 if hookname == <string_literal> : \n \t5 prehook = hookpath = os . path . join ( hookdir , hooks [ 'pre' ] ) \n <ect>
\t9 messaging <identifiersep> service . current <identifiersep> version ) ; \n \t7 callback . response ( message ) ; } \n \t6 catch ( exception ex ) \n \t6 { \n <ect>
\t4 byte <identifiersep> buffer bytebuffer = byte <identifiersep> buffer . allocate ( packet <identifiersep> string . length ( ) ) ; \n \t4 bytebuffer . put ( packet <identifiersep> string . get <identifiersep> bytes ( ) ) ; \n \t4 bytebuffer . rewind ( ) ; \n \t4 try { \n <ect>
\t2 logger . info ( <string_literal> ) ; \n \t2 create <identifiersep> snapshot <identifiersep> response create <identifiersep> snapshot <identifiersep> response = client . admin ( ) . cluster ( ) . prepare <identifiersep> create <identifiersep> snapshot ( <string_literal> , <string_literal> ) . set <identifiersep> wait <identifiersep> for <identifiersep> completion ( true ) . set <identifiersep> indices ( <string_literal> ) . get ( ) ; \n \t2 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . state ( ) , equal <identifiersep> to ( snapshot <identifiersep> state . success ) ) ; \n \t2 assert <identifiersep> that ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . total <identifiersep> shards ( ) , equal <identifiersep> to ( create <identifiersep> snapshot <identifiersep> response . get <identifiersep> snapshot <identifiersep> info ( ) . successful <identifiersep> shards ( ) ) ) ; \n <ect>
\t2 } else if ( elb <identifiersep> vm . get <identifiersep> state ( ) == state . stopped || elb <identifiersep> vm . get <identifiersep> state ( ) == state . stopping ) { \n \t3 s <identifiersep> logger . debug ( <string_literal> + elb <identifiersep> vm . get <identifiersep> state ( ) + <string_literal> ) ; \n \t3 return true ; \n \t2 } else { \n <ect>
\t3 } catch ( jms <identifiersep> exception ex2 ) { \n \t4 <comment> \n \t5 log . debug ( <string_literal> , ex2 ) ; } \n <ect>
\t6 system . exit ( post <identifiersep> ret ) ; } \n \t4 } , <string_literal> ) . start ( ) ; \n \t4 thread . interrupt ( ) ; \n \t3 } else { \n <ect>
\t4 <comment> \n \t4 <comment> \n \t4 force <identifiersep> reschedule (  <identifiersep> passive <identifiersep> flush <identifiersep> delay ) ; \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . debug ) ) \n <ect>
\t1 user <identifiersep> service user <identifiersep> service ; \n \t1 @ request <identifiersep> mapping ( value = <string_literal> , method = request <identifiersep> method . post , produces = { <string_literal> } ) \n \t1 public user <identifiersep> details authenticate ( ) { \n \t2 user <identifiersep> details user <identifiersep> details = authenticated <identifiersep> user ( ) ; \n <ect>
\t6 storage <identifiersep> pool . set <identifiersep> uuid ( null ) ; \n \t6 storage <identifiersep> pool . set <identifiersep> cluster <identifiersep> id ( null ) ; \n \t6  <identifiersep> storage <identifiersep> pool <identifiersep> dao . update ( pool <identifiersep> id , storage <identifiersep> pool ) ; \n \t6  <identifiersep> storage <identifiersep> pool <identifiersep> dao . remove ( pool <identifiersep> id ) ; \n <ect>
\t4 logger . debug ( <string_literal> , cause ) ; } \n \t3 throw cause ; \n \t2 } catch ( exception cause ) { \n <ect>
\t8  <identifiersep> log . warn ( get <identifiersep> prefix ( request <identifiersep> id ) + <string_literal> + request + <string_literal> ) ; } \n \t7 request <identifiersep> uri = change <identifiersep> uri ( request <identifiersep> uri , null , 0 , <string_literal> ) ; } \n \t5 } catch ( uri <identifiersep> syntax <identifiersep> exception use ) { \n \t6 if (  <identifiersep> log . should <identifiersep> log ( log . warn ) ) { \n <ect>
\t2 remove <identifiersep> thread . join ( ) ; \n \t2 add <identifiersep> thread . join ( ) ; \n \t2 if ( mem <identifiersep> usage . get <identifiersep> percent <identifiersep> usage ( ) != 0 || mem <identifiersep> usage . get <identifiersep> usage ( ) != mem <identifiersep> usage . get <identifiersep> percent <identifiersep> usage ( ) ) { \n \t3 log . debug ( <string_literal> , attempt , mem <identifiersep> usage ) ; \n <ect>
\t2 <comment> \n \t2 string cidr <identifiersep> subnet = net <identifiersep> utils . get <identifiersep> cidr <identifiersep> sub <identifiersep> net ( cidr <identifiersep> address , cidr <identifiersep> size ) ; \n \t2 string server <identifiersep> subnet = net <identifiersep> utils . get <identifiersep> sub <identifiersep> net ( server <identifiersep> private <identifiersep> ip , server <identifiersep> private <identifiersep> netmask ) ; \n \t2 if ( ! cidr <identifiersep> subnet . equals ( server <identifiersep> subnet ) ) { \n <ect>
\t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> direct <identifiersep> message ( json <identifiersep> object json , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception , json <identifiersep> exception { \n \t2 logger . warn ( <string_literal> ) ; } \n \t1 void on <identifiersep> delete ( json <identifiersep> object json , stream <identifiersep> listener [ ] listeners ) throws twitter <identifiersep> exception , json <identifiersep> exception { \n <ect>
\t1 if ( table <identifiersep> exists ( table <identifiersep> name ) ) { \n \t1 string sql <identifiersep> query = string . format ( <string_literal> , convert <identifiersep> object <identifiersep> name ( table <identifiersep> name ) , convert <identifiersep> object <identifiersep> name ( column <identifiersep> name ) ) ; \n \t1 execute <identifiersep> prepared <identifiersep> update ( sql <identifiersep> query , value ) ; \n \t1 } else { \n <ect>
\t1 <comment> \n \t1 big <identifiersep> decimal split <identifiersep> size = try <identifiersep> divide ( max <identifiersep> val . subtract ( min <identifiersep> val ) , ( num <identifiersep> splits ) ) ; \n \t1 if ( split <identifiersep> size . compare <identifiersep> to ( min <identifiersep> increment ) < 0 ) { \n \t1 split <identifiersep> size = min <identifiersep> increment ; \n <ect>
\t2 try { \n \t3 tm . commit ( ) ; \n \t3 fail ( <string_literal> ) ; } \n \t2 catch ( rollback <identifiersep> exception expected ) { \n <ect>
\t4 validation <identifiersep> exception . add <identifiersep> error ( invalid <identifiersep> value . get <identifiersep> property <identifiersep> name ( ) , invalid <identifiersep> value . get <identifiersep> message ( ) ) ; } \n \t3 throw validation <identifiersep> exception ; } \n \t2 catch ( persistence <identifiersep> exception e ) \n \t2 { \n <ect>
\t2 for ( final variant <identifiersep> context vc : reader . get <identifiersep> second ( ) ) { \n \t3 if ( vc == null ) continue ; \n \t3 while ( pos < vc . get <identifiersep> start ( ) ) { \n \t4 final genome <identifiersep> loc loc = genome <identifiersep> loc <identifiersep> parser . create <identifiersep> genome <identifiersep> loc ( contig , pos ) ; \n <ect>
\t5 end <identifiersep> result = false ; \n \t4 } else { \n \t5 results [ i ++ ] = null ; } \n \t3 } catch ( final throwable e ) { \n <ect>
\t2 <comment> \n \t2 if ( camel <identifiersep> context . has <identifiersep> endpoint ( endpoint <identifiersep> uri ) != null ) { \n \t3 return camel <identifiersep> context . get <identifiersep> endpoint ( endpoint <identifiersep> uri , quartz <identifiersep> endpoint . class ) ; \n \t2 } else { \n <ect>
\t4 found | = remove <identifiersep> value <identifiersep> from <identifiersep> object ( filter <identifiersep> preference <identifiersep> name , type , field <identifiersep> name , obj ) ; } \n \t3 if ( found ) { \n \t4 xwiki . save <identifiersep> document ( document , <string_literal> , context ) ; } \n \t2 } catch ( x <identifiersep> wiki <identifiersep> exception e ) { \n <ect>
\t2 host <identifiersep> port hpobj = client <identifiersep> base . parse <identifiersep> host <identifiersep> port <identifiersep> list ( host <identifiersep> port ) . get ( 0 ) ; \n \t2 return send4letter <identifiersep> word ( hpobj . host , hpobj . port , cmd , false , timeout ) ; } \n \t1 private void verify ( string cmd , string expected ) throws io <identifiersep> exception , ssl <identifiersep> context <identifiersep> exception { \n \t2 string resp = send <identifiersep> request ( cmd ) ; \n <ect>
<comment> \n \t1 @ suppress <identifiersep> warnings ( { <string_literal> } ) \n \t1 protected < c , r > void handle ( command <identifiersep> message < c > command , message <identifiersep> handler < ? super command <identifiersep> message < ? > > handler , command <identifiersep> callback < ? super c , r > callback ) { \n <ect>
\t6 . get <identifiersep> default <identifiersep> jain <identifiersep> sip <identifiersep> provider ( ) \n \t6 . get <identifiersep> new <identifiersep> client <identifiersep> transaction ( req ) ; } \n \t4 catch ( transaction <identifiersep> unavailable <identifiersep> exception e ) \n \t4 { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 log . debug ( e . to <identifiersep> string ( ) ) ; \n \t2 break ; \n \t2 } else { \n <ect>
\t4 try { \n \t5 connection <identifiersep> access . release <identifiersep> connection ( connection ) ; } \n \t4 catch ( sql <identifiersep> exception ignore ) { } } } \n \t2 catch ( sql <identifiersep> exception e ) { \n <ect>
\t4 if ( old <identifiersep> state == state . stopping ) { \n \t5 s <identifiersep> logger . debug ( <string_literal> + vm + <string_literal> ) ; \n \t5  <identifiersep> vms . remove ( vm ) ; \n \t4 } else if ( old <identifiersep> state == state . starting ) { \n <ect>
\t6 continue ; } \n \t5 try { \n \t6 write <identifiersep> method . invoke ( answer , value ) ; \n \t5 } catch ( exception e ) { \n <ect>
\t4 exec <identifiersep> command ( <string_literal> + pid ) ; \n \t4 log . info ( <string_literal> + pid ) ; \n \t4 sleep <identifiersep> ms ( <number_literal> ) ; \n \t3 } catch ( execute <identifiersep> exception e ) { \n <ect>
\t2 } else { \n \t3 int size = data . length ; \n \t3  <identifiersep> availability <identifiersep> notifier . available ( id , size ) ; \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 public void after <identifiersep> bulk ( long execution <identifiersep> id , bulk <identifiersep> request request , bulk <identifiersep> response response ) { \n \t1 list < doc <identifiersep> id > success <identifiersep> doc <identifiersep> ids = new array <identifiersep> list < > ( ) ; \n \t1 for ( bulk <identifiersep> item <identifiersep> response item : response . get <identifiersep> items ( ) ) { \n \t2 if ( item . is <identifiersep> failed ( ) ) { \n <ect>
\t2 logger . debug ( <string_literal> ) ; \n \t2 logger . debug ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 logger . info ( <string_literal> ) ; \n <ect>
\t1 return - 1 \n \t1 if options . right <identifiersep> input <identifiersep> dir and os . path . isdir ( options . right <identifiersep> input <identifiersep> dir ) : \n \t1 config <identifiersep> merge . right <identifiersep> input <identifiersep> dir = options . right <identifiersep> input <identifiersep> dir \n \t1 else : \n <ect>
\t3 signature <identifiersep> validation <identifiersep> filter . set <identifiersep> require <identifiersep> signed <identifiersep> root ( false ) ; \n \t3 metadata <identifiersep> filter <identifiersep> list . add ( signature <identifiersep> validation <identifiersep> filter ) ; \n \t3 logger . debug ( <string_literal> , signature <identifiersep> validation <identifiersep> filter , service . get <identifiersep> service <identifiersep> id ( ) ) ; \n \t2 } else { \n <ect>
\t2 logger . debug ( <string_literal> , what , javac ) ; \n \t2 string <identifiersep> builder stdout = new string <identifiersep> builder ( ) ; \n \t2 string <identifiersep> builder stderr = new string <identifiersep> builder ( ) ; \n \t2 int n = javac . execute ( stdout , stderr ) ; \n <ect>
\t2 if ( options . has ( <string_literal> ) ) { \n \t3 parser . print <identifiersep> help <identifiersep> on ( system . out ) ; \n \t3 return ; } \n \t2 if ( ! options . has ( <string_literal> ) || ! options . has ( <string_literal> ) || ! options . has ( <string_literal> ) ) { \n <ect>
\t4 logger . info ( <string_literal> ) ; \n \t4 return ; } \n \t3 this . active = false ; \n \t3 this . lifecycle <identifiersep> monitor . notify <identifiersep> all ( ) ; } \n <ect>
\t1 public void send ( list < task <identifiersep> message > messages ) { \n \t2 log . warn ( <string_literal> ) ; } \n \t1 @ override \n \t1 public void send ( task <identifiersep> message message ) { \n <ect>
\t3 throw new server <identifiersep> exception ( <string_literal> , uhe ) ; \n \t2 } catch ( na <identifiersep> api <identifiersep> failed <identifiersep> exception naf ) { \n \t3 if ( naf . get <identifiersep> errno ( ) == <number_literal> ) { <comment> \n \t4 return return <identifiersep> val ; } \n <ect>
\t2 used <identifiersep> key . set <identifiersep> data ( key ) ; \n \t2 byte [ ] pre <identifiersep> iv = simple <identifiersep> byte <identifiersep> cache . acquire ( <number_literal> ) ; \n \t2 system . arraycopy ( elg <identifiersep> decr , offset , pre <identifiersep> iv , 0 , <number_literal> ) ; \n \t2 offset += <number_literal> ; \n <ect>
\t2 smtp <identifiersep> appender . set <identifiersep> include <identifiersep> caller <identifiersep> data ( true ) ; \n \t2 smtp <identifiersep> appender . start ( ) ; \n \t2 logger . add <identifiersep> appender ( smtp <identifiersep> appender ) ; \n \t2 logger . debug ( <string_literal> ) ; \n <ect>
\t7 boolean transmitted = digital <identifiersep> strom . set <identifiersep> device <identifiersep> value ( get <identifiersep> session <identifiersep> token ( ) , device . get <identifiersep> dsid ( ) , null , \n \t9 from <identifiersep> percent <identifiersep> to <identifiersep> value ( percent , device . get <identifiersep> max <identifiersep> out <identifiersep> put <identifiersep> value ( ) ) ) ; \n \t7 if ( ! transmitted ) { \n \t8 device . set <identifiersep> output <identifiersep> value ( old ) ; \n <ect>
\t3 log . info ( log . fac <identifiersep> test , <string_literal> ) ; \n \t3 ccn <identifiersep> time t1 = save <identifiersep> and <identifiersep> log ( <string_literal> , c0 , null , small1 ) ; \n \t3 assert . assert <identifiersep> false ( <string_literal> , c0 . is <identifiersep> gone ( ) ) ; \n \t3 assert . assert <identifiersep> true ( t1 . after ( t0 ) ) ; \n <ect>
\t2 assert <identifiersep> equals ( password , creds . get <identifiersep> password ( ) ) ; } \n \t1 @ test \n \t1 public void verify <identifiersep> proxy <identifiersep> granting <identifiersep> ticket <identifiersep> as <identifiersep> authentication <identifiersep> attribute <identifiersep> can <identifiersep> decrypt ( ) throws exception { \n \t2 final map < ? , ? > attributes = render <identifiersep> view ( ) ; \n <ect>
\t4 continue ; } \n \t3 if ( next <identifiersep> cmd . get <identifiersep> command <identifiersep> type ( ) == expected <identifiersep> command <identifiersep> type \n \t5 && ! next <identifiersep> cmd . is <identifiersep> noreply ( ) ) { \n <ect>
\t3 root <identifiersep> context . put ( game <identifiersep> engine . class , this ) ; \n \t3 change <identifiersep> state ( initial <identifiersep> state ) ; \n \t3 main <identifiersep> loop ( ) ; <comment> \n \t2 } catch ( throwable e ) { \n <ect>
\t4 if ( vm == null ) { \n \t5 s <identifiersep> logger . info ( <string_literal> + work . get <identifiersep> instance <identifiersep> id ( ) + <string_literal> ) ; \n \t5 locked = true ; \n \t5 return ; } \n <ect>
\t2 <comment> \n \t2 return sb . to <identifiersep> string ( ) ; } \n \t1 public static string labeled <identifiersep> graph <identifiersep> to <identifiersep> string ( graph < node , labeled <identifiersep> link > graph ) { \n \t2 if ( graph == null ) { \n <ect>
\t1 res = new specific <identifiersep> responder ( flume <identifiersep> og <identifiersep> event <identifiersep> avro <identifiersep> server . class , this ) ; \n \t1 try { \n \t1 http = new http <identifiersep> server ( res , host , port ) ; \n \t1 } catch ( io <identifiersep> exception e <identifiersep> i ) { \n <ect>
\t3 <comment> \n \t2 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception fnfe ) { \n \t3 log . error ( <string_literal> , fnfe ) ; } \n \t2 catch ( io <identifiersep> exception e ) { \n <ect>
\t3 if ( current <identifiersep> docking <identifiersep> station <identifiersep> index != null && current <identifiersep> docking <identifiersep> station == null ) { \n \t4 current <identifiersep> docking <identifiersep> station = get <identifiersep> registry ( ) . get <identifiersep> station ( current <identifiersep> docking <identifiersep> station <identifiersep> index , current <identifiersep> docking <identifiersep> station <identifiersep> side ) ; } \n \t3 if ( pos <identifiersep> y < - <number_literal> ) { \n \t4 is <identifiersep> dead = true ; \n <ect>
\t3 s <identifiersep> logger . warn ( <string_literal> ) ; \n \t3 throw new resource <identifiersep> unavailable <identifiersep> exception ( <string_literal> , data <identifiersep> center . class , network . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ) ; } \n \t2 for ( final virtual <identifiersep> router router : routers ) { \n \t3 if ( router . get <identifiersep> state ( ) != virtual <identifiersep> machine . state . running ) { \n <ect>
\t5 if ( lma . must <identifiersep> alias ( ( local ) start <identifiersep> object , start , ( local ) join <identifiersep> object , join ) ) \n \t5 { \n \t6 if ( ( pd . get <identifiersep> dominators ( start ) ) . contains ( join ) ) <comment> \n \t6 { \n <ect>
\t1 @ override \n \t1 public void take <identifiersep> snapshot ( snapshot <identifiersep> info snapshot , async <identifiersep> completion <identifiersep> callback < create <identifiersep> cmd <identifiersep> result > callback ) { \n \t2 create <identifiersep> cmd <identifiersep> result result = null ; \n \t2 try { \n <ect>
\t3 throw new runtime <identifiersep> exception ( e ) ; } \n \t2 if ( last <identifiersep> tx == null ) \n \t2 { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> ) ; } \n <ect>
\t1 } finally { \n \t1 try { \n \t2 session . get <identifiersep> transport ( ) . close ( ) ; \n \t1 } catch ( messaging <identifiersep> exception me ) { \n <ect>
\t4 window <identifiersep> state = accu <identifiersep> user <identifiersep> window <identifiersep> states . get ( state <identifiersep> window ) ; } } \n \t2 if ( window <identifiersep> state == null ) { \n \t3 window <identifiersep> state = user <identifiersep> window <identifiersep> states . get ( window ) ; } \n \t2 if ( window <identifiersep> state == null ) { \n <ect>
\t2 for ( object complex <identifiersep> key : batch <identifiersep> ids ) \n \t2 { \n \t3 if ( ! ( complex <identifiersep> key instanceof data <identifiersep> map ) ) \n \t3 { \n <ect>
\t2 try { \n \t3 shutdown <identifiersep> command cmd = new shutdown <identifiersep> command ( shutdown <identifiersep> command . delete <identifiersep> host , null ) ; \n \t3  <identifiersep> agent <identifiersep> mgr . send ( host . get <identifiersep> id ( ) , cmd ) ; \n \t2 } catch ( agent <identifiersep> unavailable <identifiersep> exception e ) { \n <ect>
\t6 . or <identifiersep> else ( null ) ; \n \t4 if ( string <identifiersep> utils . is <identifiersep> not <identifiersep> blank ( sts ) ) { \n \t5 final security <identifiersep> token <identifiersep> ticket stt = ticket <identifiersep> registry . get <identifiersep> ticket ( sts , security <identifiersep> token <identifiersep> ticket . class ) ; \n \t5 if ( stt == null || stt . is <identifiersep> expired ( ) ) { \n <ect>
\t1 string session <identifiersep> id ; \n \t1 try { \n \t1 session <identifiersep> id = get <identifiersep> selendroid <identifiersep> driver ( request ) . initialize <identifiersep> session ( desired <identifiersep> capabilities ) ; \n \t1 } catch ( selendroid <identifiersep> exception e ) { \n <ect>
\t3 if ( target <identifiersep> text == null ) { \n \t4 parsed <identifiersep> args . target <identifiersep> types = target <identifiersep> type <identifiersep> helper . parse <identifiersep> legacy <identifiersep> command <identifiersep> line <identifiersep> options ( script , do <identifiersep> update , parsed <identifiersep> args . output <identifiersep> file ) ; } \n \t3 else { \n \t4 if ( ! script || ! do <identifiersep> update ) { \n <ect>
\t7 result == status <identifiersep> address . get <identifiersep> open <identifiersep> value ( ) ? percent <identifiersep> type . hundred \n \t9 : ( result == status <identifiersep> address . get <identifiersep> closed <identifiersep> value ( ) ? percent <identifiersep> type . zero \n <number_literal> : percent <identifiersep> type . value <identifiersep> of ( <string_literal> ) ) ) ; \n \t4 } catch ( sapp <identifiersep> exception e ) { \n <ect>
\t2 case download <identifiersep> finished : \n \t3 td . set <identifiersep> download <identifiersep> error ( <string_literal> ) ; \n \t3 string result = post <identifiersep> download ( job <identifiersep> id ) ; \n \t3 if ( result != null ) { \n <ect>
\t3 statement . set <identifiersep> string ( <number_literal> , get <identifiersep> lease <identifiersep> holder <identifiersep> id ( ) ) ; \n \t3 if ( statement . execute <identifiersep> update ( ) == 1 ) { \n \t4 log . info ( get <identifiersep> lease <identifiersep> holder <identifiersep> id ( ) + <string_literal> ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t1 private long refresh <identifiersep> interval = <number_literal> ; \n \t1 public heatmiser <identifiersep> binding ( ) { } \n \t1 @ override \n \t1 public void activate ( ) { \n <ect>
\t2 log . debug ( <string_literal> + current . get <identifiersep> time ( ) ) ; \n \t2 next = cron <identifiersep> parser . get <identifiersep> next <identifiersep> scheduled <identifiersep> time ( test , current . get <identifiersep> time <identifiersep> in <identifiersep> millis ( ) ) ; \n \t2 result = calendar . get <identifiersep> instance ( ) ; \n \t2 result . set <identifiersep> time <identifiersep> in <identifiersep> millis ( next ) ; \n <ect>
\t3 m <identifiersep> set <identifiersep> window <identifiersep> opaque = awt <identifiersep> utilities <identifiersep> class . get <identifiersep> method ( \n \t4 <string_literal> , window . class , boolean . class ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> method <identifiersep> exception ex ) \n \t2 { \n <ect>
\t2 final string name = string <identifiersep> utils . substring <identifiersep> before <identifiersep> last ( file <identifiersep> name , <string_literal> ) ; \n \t2 try ( final tx tx = app . tx ( true , false , false ) ) { \n \t3 final property <identifiersep> map properties = get <identifiersep> properties <identifiersep> for <identifiersep> page ( name ) ; \n \t3 if ( properties == null ) { \n <ect>
\t4 string msg = <string_literal> + eth <identifiersep> port <identifiersep> profile <identifiersep> name ; \n \t4 s <identifiersep> logger . error ( msg ) ; \n \t4 throw new exception ( msg ) ; \n \t3 } else { \n <ect>
\t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> routing ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 1l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( ) . set <identifiersep> size ( 0 ) . set <identifiersep> routing ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 1l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 1l ) ) ; \n \t3 assert <identifiersep> that ( client ( ) . prepare <identifiersep> search ( <string_literal> ) . set <identifiersep> size ( 0 ) . set <identifiersep> query ( query <identifiersep> builders . match <identifiersep> all <identifiersep> query ( ) ) . execute ( ) . action <identifiersep> get ( ) . get <identifiersep> hits ( ) . get <identifiersep> total <identifiersep> hits ( ) , equal <identifiersep> to ( 1l ) ) ; } \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , result , org . apache . thrift . protocol . t <identifiersep> message <identifiersep> type . reply , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception e ) { \n <ect>
\t2 log . debug ( <string_literal> ) ; \n \t2 if ( sms <identifiersep> message . get <identifiersep> from ( ) == null || sms <identifiersep> message . get <identifiersep> from ( ) . is <identifiersep> empty ( ) ) { \n \t3 string df = get <identifiersep> configuration ( ) . get <identifiersep> default <identifiersep> from ( ) ; \n \t3 cm <identifiersep> message . set <identifiersep> sender ( df ) ; \n <ect>
\t7 template <identifiersep> object <identifiersep> to iso = ( template <identifiersep> object <identifiersep> to ) vol . get <identifiersep> data ( ) ; \n \t7 if ( iso . get <identifiersep> path ( ) != null && ! iso . get <identifiersep> path ( ) . is <identifiersep> empty ( ) ) { \n \t8 data <identifiersep> store <identifiersep> to image <identifiersep> store = iso . get <identifiersep> data <identifiersep> store ( ) ; \n \t8 if ( ! ( image <identifiersep> store instanceof nfs <identifiersep> to ) ) { \n <ect>
\t3 respond <identifiersep> with <identifiersep> device <identifiersep> metadata ( ) ; \n \t3 break ; \n \t3 case 0x05 : \n \t3 <comment> \n <ect>
\t1 private producer <identifiersep> template destination ; \n \t1 @ consume ( uri = <string_literal> ) \n \t1 public void do <identifiersep> something ( string body ) { \n \t2 object <identifiersep> helper . not <identifiersep> null ( destination , <string_literal> ) ; \n <ect>
\t3 protocol <identifiersep> installer <identifiersep> repository . installer <identifiersep> for ( protocol <identifiersep> stack ) . install ( channel ) ; \n \t3 channel . parent ( ) . pipeline ( ) . fire <identifiersep> user <identifiersep> event <identifiersep> triggered ( new server <identifiersep> handshake <identifiersep> finished <identifiersep> event . created ( to <identifiersep> socket <identifiersep> address ( channel ) , protocol <identifiersep> stack ) ) ; } \n \t2 catch ( throwable t ) \n \t2 { \n <ect>
\t6 if ( after != null ) { \n \t7 log . debug ( <string_literal> , \n \t9 id , before . get <identifiersep> memory ( ) , after . get <identifiersep> memory ( ) ) ; } } \n \t4 } else { \n <ect>
\t3 find <identifiersep> virtual <identifiersep> file <identifiersep> with <identifiersep> header ( class <identifiersep> id , kotlin <identifiersep> class <identifiersep> file <identifiersep> index . key ) \n \t1 private fun find <identifiersep> virtual <identifiersep> file <identifiersep> with <identifiersep> header ( class <identifiersep> id : class <identifiersep> id , key : id < fq <identifiersep> name , void > ) : virtual <identifiersep> file ? { \n \t2 val files = file <identifiersep> based <identifiersep> index . get <identifiersep> instance ( ) . get <identifiersep> containing <identifiersep> files < fq <identifiersep> name , void > ( key , class <identifiersep> id . as <identifiersep> single <identifiersep> fq <identifiersep> name ( ) , scope ) \n \t2 if ( files . size > 1 ) { \n <ect>
\t2 final long t1 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t2 decimal <identifiersep> format decimal <identifiersep> format = new decimal <identifiersep> format ( <string_literal> , decimal <identifiersep> format <identifiersep> symbols . get <identifiersep> instance ( locale . english ) ) ; \n \t2 double time \t4 = ( t1 - t0 ) / <number_literal> . 0 ; \n \t2 double rate \t4 = number / ( ( t1 - t0 ) / <number_literal> . 0 ) ; \n <ect>
\t4 last <identifiersep> slow <identifiersep> data . add ( slow <identifiersep> data <identifiersep> ele ) ; \n \t4 last <identifiersep> error <identifiersep> data . add ( err <identifiersep> data <identifiersep> ele ) ; \n \t4 other <identifiersep> data . add ( other <identifiersep> data <identifiersep> ele ) ; \n \t3 } else { \n <ect>
<number_literal> all <identifiersep> channels ) ) ; \n \t2 <comment> \n \t2 this . netty <identifiersep> server <identifiersep> channel = this . bootstrap . bind ( new inet <identifiersep> socket <identifiersep> address ( this . port ) ) ; \n \t2 all <identifiersep> channels . add ( netty <identifiersep> server <identifiersep> channel ) ; \n <ect>
\t4 : config <identifiersep> merge ; \n \t3 if ( config <identifiersep> adm <identifiersep> cfg != null ) { \n \t4 long old <identifiersep> ver = ( long ) props . get ( fabric8 <identifiersep> k8s <identifiersep> meta <identifiersep> resource <identifiersep> version ) ; \n \t4 if ( old <identifiersep> ver != null && ( old <identifiersep> ver >= ver ) ) { \n <ect>
\t4 public void on <identifiersep> response ( put <identifiersep> index <identifiersep> template <identifiersep> response response ) { \n \t5 if ( updates <identifiersep> in <identifiersep> progress . decrement <identifiersep> and <identifiersep> get ( ) == 0 ) { \n \t6 logger . info ( <string_literal> , version . current ) ; } \n \t5 if ( response . is <identifiersep> acknowledged ( ) == false ) { \n <ect>
<comment> \n \t1 private void failover <identifiersep> hdfs ( string from , string to , configuration configuration ) throws io <identifiersep> exception { \n <ect>
\t2 assert . assert <identifiersep> equals ( <number_literal> , empty . size ( ) ) ; \n \t2 assert . assert <identifiersep> equals ( <number_literal> , ( int ) empty . get ( 1 ) ) ; } \n \t1 @ test \n \t1 public void test <identifiersep> set1 ( ) { \n <ect>
\t1 public void add <identifiersep> ranges ( string keyspace <identifiersep> name , collection < range < token > > ranges ) \n \t1 { \n \t2 if ( keyspace . open ( keyspace <identifiersep> name ) . get <identifiersep> replication <identifiersep> strategy ( ) instanceof local <identifiersep> strategy ) \n \t2 { \n <ect>
\t3 freemarker <identifiersep> manager = dispatcher . get <identifiersep> container ( ) . get <identifiersep> instance ( freemarker <identifiersep> manager . class ) ; \n \t3 config = create <identifiersep> configuration ( ) ; \n \t3 <comment> \n \t3 wrapper = config . get <identifiersep> object <identifiersep> wrapper ( ) ; \n <ect>
\t2 long zone <identifiersep> id = css <identifiersep> host . get <identifiersep> data <identifiersep> center <identifiersep> id ( ) ; \n \t2 if ( css <identifiersep> host . get <identifiersep> type ( ) == host . type . secondary <identifiersep> storage <identifiersep> vm ) { \n \t3 secondary <identifiersep> storage <identifiersep> vm <identifiersep> vo sec <identifiersep> storage <identifiersep> vm =  <identifiersep> sec <identifiersep> storage <identifiersep> vm <identifiersep> dao . find <identifiersep> by <identifiersep> instance <identifiersep> name ( css <identifiersep> host . get <identifiersep> name ( ) ) ; \n \t3 if ( sec <identifiersep> storage <identifiersep> vm == null ) { \n <ect>
\t3 <string_literal> \n \t1 } ) \n \t1 public synchronized void thread <identifiersep> is <identifiersep> done ( final thread thread ) { \n \t2 n <identifiersep> threads <identifiersep> analyzed ++ ; \n <ect>
\t4 semaphore s = drpc <identifiersep> service . get <identifiersep> id <identifiersep> to <identifiersep> sem ( ) . get ( id ) ; \n \t4 if ( s != null ) { \n \t5 s . release ( ) ; } \n \t4 drpc <identifiersep> service . cleanup ( id ) ; \n <ect>
\t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . primary <identifiersep> shard ( ) . state ( ) , equal <identifiersep> to ( initializing ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . replica <identifiersep> shards ( ) . size ( ) , equal <identifiersep> to ( 1 ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . replica <identifiersep> shards ( ) . get ( 0 ) . state ( ) , equal <identifiersep> to ( unassigned ) ) ; \n \t3 assert <identifiersep> that ( cluster <identifiersep> state . routing <identifiersep> table ( ) . index ( <string_literal> ) . shard ( i ) . replica <identifiersep> shards ( ) . get ( 0 ) . current <identifiersep> node <identifiersep> id ( ) , null <identifiersep> value ( ) ) ; } \n <ect>
\t3 m . set <identifiersep> attribute ( i <identifiersep> marker . location , r . get <identifiersep> name ( ) ) ; \n \t3 if ( diagnostic instanceof file <identifiersep> diagnostic ) \n \t4 m . set <identifiersep> attribute ( i <identifiersep> marker . line <identifiersep> number , ( ( file <identifiersep> diagnostic ) diagnostic ) . get <identifiersep> line <identifiersep> number ( ) ) ; } \n \t2 catch ( core <identifiersep> exception e ) { \n <ect>
\t5 presence <identifiersep> op <identifiersep> set . publish <identifiersep> presence <identifiersep> status ( \n \t6 presence <identifiersep> op <identifiersep> set . get <identifiersep> presence <identifiersep> status ( ) , message ) ; } \n \t4 catch ( illegal <identifiersep> argument <identifiersep> exception e1 ) \n \t4 { \n <ect>
\t3 store = new simple <identifiersep> string <identifiersep> key <identifiersep> value <identifiersep> store <identifiersep> my <identifiersep> sql ( url , user , password , table , data <identifiersep> store <identifiersep> config . sql <identifiersep> batch <identifiersep> write ( ) ) ; \n \t2 } catch ( exception ex ) { \n \t3 store = string <identifiersep> key <identifiersep> value <identifiersep> store <identifiersep> no <identifiersep> op . singleton ; \n \t3 if ( debug ) logger . warn ( ex , <string_literal> , ex . get <identifiersep> message ( ) ) ; \n <ect>
\t3 catalog <identifiersep> version <identifiersep> provider cvp = null ; \n \t3 if ( ! string <identifiersep> utils . is <identifiersep> blank ( d . get <identifiersep> schema <identifiersep> version <identifiersep> provider ( ) ) ) { \n \t4 try { \n \t5 svp = ( schema <identifiersep> version <identifiersep> provider ) class . for <identifiersep> name ( d . get <identifiersep> schema <identifiersep> version <identifiersep> provider ( ) ) . new <identifiersep> instance ( ) ; \n <ect>
\t5 if ( ! run <identifiersep> permit . try <identifiersep> acquire ( hard <identifiersep> time <identifiersep> out , time <identifiersep> unit . seconds ) ) { \n \t6 <comment> \n \t6 log . warn ( <string_literal> , name , hard <identifiersep> time <identifiersep> out ) ; } \n \t4 } else { \n <ect>
\t1 if ( line != null && scm <identifiersep> changesets != null ) { \n \t1 if ( scm <identifiersep> changesets . has <identifiersep> changeset <identifiersep> for <identifiersep> line ( line ) ) { \n \t2 author = scm <identifiersep> changesets . get <identifiersep> changeset <identifiersep> for <identifiersep> line ( line ) . get <identifiersep> author ( ) ; \n \t1 } else { \n <ect>
\t6 if ( socket <identifiersep> tester . apply ( socket ) ) { \n \t6 <comment> \n \t6 reachable <identifiersep> socket . compare <identifiersep> and <identifiersep> set ( null , socket ) ; } \n \t5 } catch ( runtime <identifiersep> exception e ) { \n <ect>
\t1 credentials creds = new credentials ( get <identifiersep> admin <identifiersep> principal ( ) , get <identifiersep> admin <identifiersep> token ( ) ) ; \n \t1 while ( ! balancing <identifiersep> worked && ( system . current <identifiersep> time <identifiersep> millis ( ) - start <identifiersep> time ) < ( ( <number_literal> * <number_literal> + <number_literal> ) * <number_literal> ) ) { \n \t1 thread . sleep ( current <identifiersep> wait ) ; \n \t1 current <identifiersep> wait *= <number_literal> ; \n <ect>
\t2 log . set <identifiersep> level ( simple <identifiersep> log . log <identifiersep> level <identifiersep> all ) ; \n \t2 ops . set <identifiersep> level ( simple <identifiersep> log . log <identifiersep> level <identifiersep> all ) ; \n \t2 log . reset <identifiersep> message ( ) ; \n \t2 ops . reset <identifiersep> message ( ) ; \n <ect>
\t2 endpoint . assert <identifiersep> is <identifiersep> satisfied ( ) ; \n \t2 exchange exchange = endpoint . get <identifiersep> received <identifiersep> exchanges ( ) . get ( 0 ) ; \n \t2 message in = exchange . get <identifiersep> in ( ) ; \n \t2 assert <identifiersep> message <identifiersep> header ( in , <string_literal> , null ) ; \n <ect>
\t4 r after <identifiersep> first <identifiersep> application = r ; \n \t4 try { \n \t5 after <identifiersep> first <identifiersep> application = execution <identifiersep> hook . on <identifiersep> complete (  <identifiersep> cmd , r ) ; \n \t4 } catch ( throwable hook <identifiersep> ex ) { \n <ect>
\t4 log . error ( <string_literal> , e ) ; \n \t3 } finally { \n \t4 pending . set ( false ) ; } \n \t2 } else { \n <ect>
\t5 long free <identifiersep> cpu = total <identifiersep> cpu - ( reserved <identifiersep> cpu + used <identifiersep> cpu ) ; \n \t5 long free <identifiersep> mem = total <identifiersep> mem - ( reserved <identifiersep> mem + used <identifiersep> mem ) ; \n \t6 s <identifiersep> logger . debug ( <string_literal> + host <identifiersep> id ) ; \n <ect>
\t2 list < map < string , object > > output <identifiersep> config = ( list < map < string , object > > ) config <identifiersep> map . get ( key ) ; \n \t2 output <identifiersep> config <identifiersep> list . add <identifiersep> all ( output <identifiersep> config ) ; \n \t2 break ; \n \t2 default : \n <ect>
\t5 if ( new <identifiersep> monitor <identifiersep> enable != old <identifiersep> monitor <identifiersep> enable ) { \n \t6 log . info ( <string_literal> + old <identifiersep> monitor <identifiersep> enable + <string_literal> + new <identifiersep> monitor <identifiersep> enable ) ; \n \t6 monitor <identifiersep> enable . set ( new <identifiersep> monitor <identifiersep> enable ) ; } } } \n \t2 } catch ( exception e ) { \n <ect>
\t3 retired <identifiersep> instances . add ( update . get <identifiersep> instance <identifiersep> id ( ) ) ; \n \t2 } catch ( final no <identifiersep> such <identifiersep> element <identifiersep> exception ex ) { \n \t3 log . warn ( <string_literal> ) ; \n \t2 } catch ( final exception ex ) { \n <ect>
\t1 @ override \n \t1 public void close ( ) { \n \t2 logger . debug ( <string_literal> , role . get <identifiersep> display <identifiersep> name ( ) ) ; \n \t2 if ( disabled ) { \n <ect>
\t1 row <identifiersep> schema rs = parent . get <identifiersep> schema ( ) ; \n \t1 column <identifiersep> info ci = rs . get <identifiersep> column <identifiersep> info ( desc . get <identifiersep> column ( ) ) ; \n \t1 if ( ci == null ) { \n \t1 if ( log . is <identifiersep> error <identifiersep> enabled ( ) ) { \n <ect>
\t2 log . debug ( <string_literal> , not <identifiersep> hosted ( ) ) ; \n \t1 } else if ( get <identifiersep> master <identifiersep> goal <identifiersep> state ( ) == master <identifiersep> goal <identifiersep> state . clean <identifiersep> stop ) { \n \t2 log . debug ( <string_literal> ) ; \n \t1 } else if ( ! servers <identifiersep> to <identifiersep> shutdown . is <identifiersep> empty ( ) ) { \n <ect>
\t4 while ( iterator . has <identifiersep> next ( ) ) { \n \t5 work work = convert <identifiersep> work ( iterator . next ( ) ) ; \n \t5 result . add ( work ) ; } \n \t3 } catch ( x <identifiersep> path <identifiersep> expression <identifiersep> exception e ) { \n <ect>
\t6 create <identifiersep> userfrom <identifiersep> ldap <identifiersep> action ) ; \n \t4 result = new default <identifiersep> principal ( person . get <identifiersep> account <identifiersep> id ( ) , person . get <identifiersep> open <identifiersep> social <identifiersep> id ( ) , person . get <identifiersep> id ( ) ) ; } } \n \t2 catch ( exception ex ) \n \t2 { \n <ect>
\t3 while ( ( input <identifiersep> line = in . read <identifiersep> line ( ) ) != null ) { \n \t4 resp . append ( input <identifiersep> line ) . append ( <string_literal> <ect>
\t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> + vlan <identifiersep> id + <string_literal> + e . get <identifiersep> message ( ) ) ; \n \t3 return null ; \n \t2 } catch ( dom <identifiersep> exception e ) { \n <ect>
\t5 ui <identifiersep> manager . set <identifiersep> look <identifiersep> and <identifiersep> feel ( info . get <identifiersep> class <identifiersep> name ( ) ) ; \n \t5 break ; } } \n \t2 } catch ( exception e ) { \n \t3 <comment> \n <ect>
def do <identifiersep> delete <identifiersep> group ( self ) : \n \t1 group <identifiersep> del <identifiersep> command = group <identifiersep> erase <identifiersep> cmd . format ( hadoop <identifiersep> group ) \n \t1 ( returncode , stdoutdata , stderrdata ) = self . run <identifiersep> os <identifiersep> command ( group <identifiersep> del <identifiersep> command ) \n \t1 if returncode != 0 : \n <ect>
\t1 try { \n \t1 stop ( ) ; \n \t1 } catch ( deployment <identifiersep> stop <identifiersep> exception e ) { \n \t1 <comment> \n <ect>
\t2 private volatile int task <identifiersep> num = - 1 ; \n \t2 <comment> \n \t2 @ override protected collection < ? extends grid <identifiersep> compute <identifiersep> job > split ( int grid <identifiersep> size , serializable arg ) throws grid <identifiersep> exception { \n <ect>
\t1 @ override \n \t1 public void member <identifiersep> disappeared ( member member ) { \n \t2 try { \n \t3 has <identifiersep> members = channel . has <identifiersep> members ( ) ; \t3 \n <ect>
\t2 if ( env <identifiersep> context != null ) { \n \t2 if <identifiersep> purge = boolean . parse <identifiersep> boolean ( env <identifiersep> context . get <identifiersep> properties ( ) . get ( <string_literal> ) ) ; } \n \t2 get <identifiersep> wh ( ) . delete <identifiersep> dir ( table <identifiersep> path , true , if <identifiersep> purge , false ) ; \n \t1 } catch ( exception err ) { \n <ect>
\t2 if ( router == null ) { \n \t3 throw new invalid <identifiersep> parameter <identifiersep> value <identifiersep> exception ( <string_literal> + router <identifiersep> id ) ; } \n \t2  <identifiersep> account <identifiersep> mgr . check <identifiersep> access ( caller , null , true , router ) ; \n \t2 if ( router . get <identifiersep> service <identifiersep> offering <identifiersep> id ( ) == service <identifiersep> offering <identifiersep> id ) { \n <ect>
\t5 break ; } } \n \t3 if ( cleanup <identifiersep> needed ) { \n \t4 cleanup <identifiersep> result = shutdown <identifiersep> network <identifiersep> resources ( network . get <identifiersep> id ( ) , context . get <identifiersep> account ( ) , context . get <identifiersep> caller ( ) . get <identifiersep> id ( ) ) ; } \n \t2 } catch ( final exception ex ) { \n <ect>
\t1 public simulator <identifiersep> storage <identifiersep> processor ( simulator <identifiersep> manager resource ) { \n \t2 this . hypervisor <identifiersep> resource = resource ; } \n \t1 @ override \n \t1 public snapshot <identifiersep> and <identifiersep> copy <identifiersep> answer snapshot <identifiersep> and <identifiersep> copy ( snapshot <identifiersep> and <identifiersep> copy <identifiersep> command cmd ) { \n <ect>
\t3 file <identifiersep> utils . force <identifiersep> mkdir ( tasks <identifiersep> dir ) ; \n \t3 for ( string task <identifiersep> id : selected <identifiersep> task <identifiersep> ids ) { \n \t4 extract <identifiersep> task <identifiersep> detail ( task <identifiersep> id , user , tasks <identifiersep> dir , tasks <identifiersep> url , job <identifiersep> url <identifiersep> base ) ; } \n \t2 } catch ( exception e ) { \n <ect>
\t2 log . verbose ( <string_literal> + txt ) ; \n \t2 if ( classpath != null ) { \n \t3 log . debug ( <string_literal> + classpath . to <identifiersep> string ( ) ) ; } \n \t2 if ( fork ) { \n <ect>
\t2 break ; } \n \t1 } else { <comment> \n \t2 reply . set <identifiersep> cancelled ( true ) ; } \n \t1 } catch ( final exception ex ) { \n <ect>
\t2 this . uri = null ; } \n \t1 @ override \n \t1 public void on <identifiersep> init ( route route ) { \n \t2 ensure <identifiersep> election <identifiersep> is <identifiersep> created ( route ) ; \n <ect>
\t1 private void release ( collection < i2p <identifiersep> session > sessions ) { \n \t2 if ( ! sessions . is <identifiersep> empty ( ) ) { \n \t3 for ( i2p <identifiersep> session s : sessions ) { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 get <identifiersep> ms ( ) . create <identifiersep> wm <identifiersep> trigger <identifiersep> to <identifiersep> pool <identifiersep> mapping ( \n \t3 request . get <identifiersep> resource <identifiersep> plan <identifiersep> name ( ) , request . get <identifiersep> trigger <identifiersep> name ( ) , request . get <identifiersep> pool <identifiersep> path ( ) ) ; } \n \t2 return new wm <identifiersep> create <identifiersep> or <identifiersep> drop <identifiersep> trigger <identifiersep> to <identifiersep> pool <identifiersep> mapping <identifiersep> response ( ) ; \n \t1 } catch ( meta <identifiersep> exception e ) { \n <ect>
\t3 err <identifiersep> msg . append ( line ) ; \n \t3 err <identifiersep> msg . append ( system . get <identifiersep> property ( <string_literal> ) ) ; \n \t3 line = err <identifiersep> reader . read <identifiersep> line ( ) ; } \n \t2 } catch ( io <identifiersep> exception ioe ) { \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 title = this . strip <identifiersep> html <identifiersep> tags ( entry . get <identifiersep> title ( ) ) ; \n \t2 } catch ( conversion <identifiersep> exception e ) { \n <ect>
\t4 lookup . set <identifiersep> cache ( new cache ( ) ) ; } \n \t3 records = lookup . run ( ) ; } \n \t2 catch ( text <identifiersep> parse <identifiersep> exception tpe ) \n \t2 { \n <ect>
\t3 } else { \n \t4 throw new illegal <identifiersep> state <identifiersep> exception ( <string_literal> + \n \t5 slot . get <identifiersep> instance <identifiersep> id ( ) + <string_literal> ) ; } \n \t2 } else { \n <ect>
\t3 cnxn . close ( ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n \t4 log . debug ( <string_literal> , e ) ; } } \n <ect>
\t1 if ( null != rs ) { \n \t2 try { \n \t2 rs . close ( ) ; \n \t2 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n <ect>
\t3 } else if ( reply <identifiersep> type == reply <identifiersep> network <identifiersep> fail ) { \n \t4 break ; \n \t3 } else { \n \t4 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t1 public void start ( ) { \n \t2 synchronized ( this . lifecycle <identifiersep> monitor ) { \n \t3 if ( ! is <identifiersep> running ( ) ) { \n <ect>
\t4 logger . debug ( <string_literal> , enable <identifiersep> laser ) ; \n \t4 set <identifiersep> enable <identifiersep> laser <identifiersep> on <identifiersep> startup ( enable <identifiersep> laser ) ; \n \t3 } else { \n \t4 boolean enable <identifiersep> laser = tf <identifiersep> config . get <identifiersep> enable <identifiersep> laser <identifiersep> on <identifiersep> startup ( ) ; \n <ect>
\t4 . set <identifiersep> type ( <string_literal> ) . set <identifiersep> source ( <string_literal> , <string_literal> ) ) ; \n \t2 ensure <identifiersep> green ( ) ; \n \t2 logger . info ( <string_literal> ) ; \n \t2 assert <identifiersep> acked ( admin ( ) . indices ( ) . prepare <identifiersep> aliases ( ) . add <identifiersep> alias ( <string_literal> , <string_literal> ) . add <identifiersep> alias ( <string_literal> , <string_literal> ) ) ; \n <ect>
\t1 ) throws grid <identifiersep> cache <identifiersep> entry <identifiersep> removed <identifiersep> exception { \n \t2 assert top <identifiersep> ver != - 1 ; \n \t2 collection < grid <identifiersep> node > dht <identifiersep> nodes = dht ( ) . topology ( ) . nodes ( entry . partition ( ) , top <identifiersep> ver ) ; \n <ect>
\t5 string [ ] split = keyword . split ( <string_literal> ) ; \n \t5 for ( string k : split ) { \n \t6 bio . add <identifiersep> keyword ( k . trim ( ) ) ; } } } \n \t2 } catch ( x <identifiersep> path <identifiersep> expression <identifiersep> exception e ) { \n <ect>
\t2 { \n \t3 return ( ( last <identifiersep> error <identifiersep> exception ) e ) . get <identifiersep> error <identifiersep> code ( ) ; } \n \t2 catch ( no <identifiersep> such <identifiersep> method <identifiersep> error x ) \n \t2 { \n <ect>
\t4 synchronized ( this ) { \n \t5 this . fetcher = fetcher ; } \n \t4 return true ; \n \t3 } catch ( fetch <identifiersep> exception e ) { \n <ect>
\t1 public string get <identifiersep> reference ( ) { \n \t2 try { \n \t3 return value . get <identifiersep> blob ( ) . get <identifiersep> reference ( ) ; \n \t2 } catch ( repository <identifiersep> exception e ) { \n <ect>
\t5 public cluster <identifiersep> state execute ( cluster <identifiersep> state current <identifiersep> state ) { \n \t6 return reassign <identifiersep> tasks ( current <identifiersep> state ) ; } \n \t5 @ override \n \t5 public void on <identifiersep> failure ( string source , exception e ) { \n <ect>
<comment> \n \t1 protected void register <identifiersep> multifactor <identifiersep> provider <identifiersep> authentication <identifiersep> webflow ( final flow flow , final string subflow <identifiersep> id , final flow <identifiersep> definition <identifiersep> registry mfa <identifiersep> provider <identifiersep> flow <identifiersep> registry ) { \n \t2 final subflow <identifiersep> state subflow <identifiersep> state = create <identifiersep> subflow <identifiersep> state ( flow , subflow <identifiersep> id , subflow <identifiersep> id ) ; \n \t2 final collection < string > states = get <identifiersep> candidate <identifiersep> states <identifiersep> for <identifiersep> multifactor <identifiersep> authentication ( ) ; \n <ect>
\t2 root <identifiersep> tasks . add ( task <identifiersep> factory . get ( repl <identifiersep> load <identifiersep> work , conf ) ) ; \n \t2 return ; } \n \t1 file <identifiersep> status [ ] srcs = load <identifiersep> semantic <identifiersep> analyzer . match <identifiersep> files <identifiersep> or <identifiersep> dir ( fs , load <identifiersep> path ) ; \n \t1 if ( srcs == null || ( srcs . length == 0 ) ) { \n <ect>
\t4 p = p / <number_literal> ; } \n \t2 } else { \n \t3 <comment> \n \t3 if ( which <identifiersep> side != test <identifiersep> type . first <identifiersep> dominates ) { \n <ect>
\t2 throw new no <identifiersep> such <identifiersep> entity <identifiersep> exception ( entity . get <identifiersep> part <identifiersep> uuid ( ) ) ; \n \t2 } catch ( object <identifiersep> storage <identifiersep> internal <identifiersep> exception e ) { \n \t2 throw e ; \n \t2 } catch ( exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public void send <identifiersep> message ( message message , role role ) throws message <identifiersep> exception { \n \t2 log . debug ( <string_literal> + role ) ; \n <ect>
\t2 logger . warn ( <string_literal> , registered <identifiersep> service . get <identifiersep> service <identifiersep> id ( ) , policy . get <identifiersep> expiration <identifiersep> date ( ) ) ; \n \t2 if ( policy . is <identifiersep> delete <identifiersep> when <identifiersep> expired ( ) ) { \n \t3 logger . debug ( <string_literal> , registered <identifiersep> service . get <identifiersep> service <identifiersep> id ( ) ) ; \n \t3 if ( policy . is <identifiersep> notify <identifiersep> when <identifiersep> deleted ( ) ) { \n <ect>
\t2 if ( host <identifiersep> version <identifiersep> entity . get <identifiersep> state ( ) . equals ( repository <identifiersep> version <identifiersep> state . installed ) ) { \n \t3 host <identifiersep> version <identifiersep> entity . set <identifiersep> state ( repository <identifiersep> version <identifiersep> state . out <identifiersep> of <identifiersep> sync ) ; \n \t3 host <identifiersep> version <identifiersep> dao . get ( ) . merge ( host <identifiersep> version <identifiersep> entity ) ; } } } \n \t1 } catch ( ambari <identifiersep> exception e ) { \n <ect>
\t2 string boot <identifiersep> dev = cmd . get <identifiersep> boot <identifiersep> dev ( ) . name ( ) ; \n \t2 if ( ! do <identifiersep> script ( boot <identifiersep> cmd ) ) { \n \t3 s <identifiersep> logger . warn ( <string_literal> +  <identifiersep> ip + <string_literal> + boot <identifiersep> dev + <string_literal> ) ; \n \t3 return new answer ( cmd , false , <string_literal> +  <identifiersep> ip + <string_literal> + boot <identifiersep> dev + <string_literal> ) ; } \n <ect>
\t7 string data = extract <identifiersep> fields ( rs , index <identifiersep> stats ) ; \n \t7 result . put ( <string_literal> + index + <string_literal> , data ) ; } } } \n \t4 con . commit ( ) ; \n \t3 } catch ( sql <identifiersep> exception ex ) { \n <ect>
<comment> \n \t1 @ override \n \t1 @ suppress <identifiersep> warnings ( <string_literal> ) \n \t1 public list < alert > get <identifiersep> alerts ( user user , boolean include <identifiersep> read , boolean include <identifiersep> expired ) throws dao <identifiersep> exception { \n <ect>
\t2 result . set <identifiersep> id ( task . get <identifiersep> id ( ) ) ; \n \t2 result . set <identifiersep> name ( task . get <identifiersep> name ( ) ) ; \n \t2 result . set <identifiersep> sequence <identifiersep> id ( i ) ; \n \t2 if ( step <identifiersep> output == null ) { \n <ect>
\t2 nway <identifiersep> conf . get <identifiersep> loaded <identifiersep> container <identifiersep> list ( ) . size ( ) == 0 ) { <comment> \n \t2 if ( i == 0 ) { <comment> \n \t2 hash <identifiersep> partitions [ i ] = new hash <identifiersep> partition ( initial <identifiersep> capacity , load <identifiersep> factor , write <identifiersep> buffer <identifiersep> size , \n \t3 max <identifiersep> capacity , true , spill <identifiersep> local <identifiersep> dirs ) ; \n <ect>
\t1 s = conn . create <identifiersep> statement ( ) ; \n \t1 rs = s . execute <identifiersep> query ( query ) ; \n \t1 if ( ! rs . next ( ) ) { \n \t2 <comment> \n <ect>
\t2 s <identifiersep> logger . debug ( <string_literal> + arg0 . get <identifiersep> name ( ) + <string_literal> + arg1 ) ; \n \t2 return  <identifiersep> mock . find <identifiersep> by <identifiersep> id ( arg0 , arg1 ) ; } \n \t1 @ override \n \t1 public string find <identifiersep> by <identifiersep> name ( class < ? extends api <identifiersep> object <identifiersep> base > arg0 , list < string > arg1 ) throws io <identifiersep> exception { \n <ect>
\t1 protected void remove <identifiersep> job ( job <identifiersep> id job <identifiersep> id ) { \n \t2 try { \n \t3 job <identifiersep> leader <identifiersep> id <identifiersep> service . remove <identifiersep> job ( job <identifiersep> id ) ; \n \t2 } catch ( exception e ) { \n <ect>
\t3 logger . error ( this , <string_literal> + source + <string_literal> + e , e ) ; \n \t3 update <identifiersep> manager . blow ( <string_literal> + temp + <string_literal> + e , true ) ; \n \t3 return true ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
<comment> \n \t1 @ override \n \t1 public boolean configure ( string name , map < string , object > params ) throws configuration <identifiersep> exception { \n <ect>
\t5 entity . text ( new string ( ) ) ) ; \n \t3 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> bad <identifiersep> request , response . get <identifiersep> status ( ) ) ; \n \t3 string entity = response . read <identifiersep> entity ( string . class ) ; \n \t3 resteasy <identifiersep> violation <identifiersep> exception e = new resteasy <identifiersep> violation <identifiersep> exception ( string . class . cast ( entity ) ) ; \n <ect>
\t2 subtest <identifiersep> query <identifiersep> contact <identifiersep> status ( full <identifiersep> user <identifiersep> info . icqstatus <identifiersep> ffc , \n \t8 icq <identifiersep> status <identifiersep> enum . free <identifiersep> for <identifiersep> chat ) ; \n \t2 pause <identifiersep> between <identifiersep> state <identifiersep> changes ( ) ; \n \t2 <comment> \n <ect>
\t2 int address = provider <identifiersep> cmd . get <identifiersep> address ( item <identifiersep> name ) ; \n \t2 functions function = provider <identifiersep> cmd . get <identifiersep> function ( item <identifiersep> name ) ; \n \t2 for ( heatmiser <identifiersep> thermostat thermostat : thermostat <identifiersep> table ) { \n \t3 if ( thermostat . get <identifiersep> address ( ) == address ) { \n <ect>
\t1 string suffix = <string_literal> ; \n \t1 if ( this . key <identifiersep> object != null ) { \n \t2 string key <identifiersep> object <identifiersep> str = this . key <identifiersep> object . to <identifiersep> string ( ) ; \n \t2 string md5str = digest <identifiersep> utils . md5hex ( key <identifiersep> object <identifiersep> str . to <identifiersep> string ( ) ) ; \n <ect>
\t2 . ok ( file , media <identifiersep> type . application <identifiersep> octet <identifiersep> stream ) \n \t2 . header ( <string_literal> , <string_literal> + file <identifiersep> name + format ) \n \t2 . build ( ) ; \n \t1 } catch ( solr <identifiersep> exception | template <identifiersep> exception | io <identifiersep> exception e ) { \n <ect>
\t1 public void test <identifiersep> evaluator <identifiersep> filter ( ) throws joran <identifiersep> exception { \n \t2 configure ( classic <identifiersep> test <identifiersep> constants . joran <identifiersep> input <identifiersep> prefix + <string_literal> ) ; \n \t2 <comment> \n \t2 logger . warn ( <string_literal> ) ; \n <ect>
\t3 method method = jm <identifiersep> dns <identifiersep> class . get <identifiersep> method ( <string_literal> , new class [ ] { service <identifiersep> info <identifiersep> class } ) ; \n \t3 method . invoke ( jm <identifiersep> dns , new object [ ] { service <identifiersep> info } ) ; \n \t3 log <identifiersep> log . debug ( <string_literal> + service <identifiersep> info ) ; \n \t2 } catch ( illegal <identifiersep> access <identifiersep> exception e ) { \n <ect>
\t1 } catch ( sql <identifiersep> exception sql <identifiersep> e ) { \n \t1 log . error ( <string_literal> + sql <identifiersep> e . to <identifiersep> string ( ) ) ; \n \t1 fail ( <string_literal> + sql <identifiersep> e . to <identifiersep> string ( ) ) ; \n \t1 } catch ( class <identifiersep> not <identifiersep> found <identifiersep> exception cnfe ) { \n <ect>
\t1 protected string handle <identifiersep> authentication <identifiersep> exception ( final authentication <identifiersep> exception e , final request <identifiersep> context request <identifiersep> context ) { \n \t2 if ( e . get <identifiersep> handler <identifiersep> errors ( ) . contains <identifiersep> key ( unauthorized <identifiersep> service <identifiersep> for <identifiersep> principal <identifiersep> exception . class . get <identifiersep> simple <identifiersep> name ( ) ) ) { \n \t3 final uri url = web <identifiersep> utils . get <identifiersep> unauthorized <identifiersep> redirect <identifiersep> url <identifiersep> into <identifiersep> flow <identifiersep> scope ( request <identifiersep> context ) ; \n \t3 if ( url != null ) { \n <ect>
\t3 s <identifiersep> logger . info ( <string_literal> + response <identifiersep> code ) ; \n \t3 if ( response <identifiersep> code == <number_literal> ) { \n \t4 input <identifiersep> stream is = method . get <identifiersep> response <identifiersep> body <identifiersep> as <identifiersep> stream ( ) ; \n \t4 map < string , string > success = get <identifiersep> single <identifiersep> value <identifiersep> from <identifiersep> xml ( is , new string [ ] { <string_literal> } ) ; \n <ect>
\t4 byte <identifiersep> array <identifiersep> output <identifiersep> stream baos = new byte <identifiersep> array <identifiersep> output <identifiersep> stream ( ) ; \n \t4 image <identifiersep> io . write ( challenge , <string_literal> , baos ) ; \n \t4  <identifiersep> captcha = new ns <identifiersep> data ( baos . to <identifiersep> byte <identifiersep> array ( ) ) ; \n \t3 } catch ( throwable e ) { \n <ect>
\t6 registry . register <identifiersep> bean <identifiersep> definition ( bean <identifiersep> name , def ) ; \n \t6 try { \n \t7 return an <identifiersep> app <identifiersep> context . get <identifiersep> bean ( bean <identifiersep> name ) ; \n \t6 } catch ( no <identifiersep> such <identifiersep> bean <identifiersep> definition <identifiersep> exception e2 ) { \n <ect>
\t3 logger . debug ( <string_literal> ) ; \n \t2 <comment> \n \t2 <comment> \n \t2 if ( beta != 0 . 0 ) \n <ect>
\t1 public void test <identifiersep> delete <identifiersep> snapshot ( ) throws exception { \n \t2 final int number <identifiersep> of <identifiersep> snapshots = between ( <number_literal> , <number_literal> ) ; \n \t2 client client = client ( ) ; \n \t2 path repo = random <identifiersep> repo <identifiersep> path ( ) ; \n <ect>
\t3 try { \n \t3 fcall . send <identifiersep> response ( fb , msg , msg <identifiersep> type , seqid ) ; \n \t3 return ; \n \t3 } catch ( exception ex ) { \n <ect>
\t2 invocation . builder request = client . target ( generate <identifiersep> url ( <string_literal> ) ) . request ( ) ; \n \t2 response response = request . get ( ) ; \n \t2 assert . assert <identifiersep> equals ( http <identifiersep> response <identifiersep> codes . sc <identifiersep> ok , response . get <identifiersep> status ( ) ) ; \n \t2 string str = response . read <identifiersep> entity ( string . class ) ; \n <ect>
\t4 commit <identifiersep> root <identifiersep> doc . deep <identifiersep> copy ( before ) ; \n \t4 update <identifiersep> utils . apply <identifiersep> changes ( before , commit . get <identifiersep> reverse <identifiersep> operation ( ) ) ; \n \t4 return before ; } \n \t3 break ; } \n <ect>
\t3 @ non <identifiersep> null \n \t3 final assertion <identifiersep> consumer <identifiersep> service acs = facade . get <identifiersep> assertion <identifiersep> consumer <identifiersep> service ( saml <identifiersep> constants . saml2 <identifiersep> post <identifiersep> binding <identifiersep> uri ) ; \n \t3 shire = acs . get <identifiersep> location ( ) ; } \n \t2 if ( string <identifiersep> utils . is <identifiersep> blank ( shire ) ) { \n <ect>
public synchronized void create <identifiersep> hosts ( request request ) \n \t1 throws ambari <identifiersep> exception , authorization <identifiersep> exception { \n \t1 set < map < string , object > > property <identifiersep> set = request . get <identifiersep> properties ( ) ; \n \t1 if ( property <identifiersep> set == null || property <identifiersep> set . is <identifiersep> empty ( ) ) { \n <ect>
\t1 if ( hive <identifiersep> meta <identifiersep> store . admin . equals <identifiersep> ignore <identifiersep> case ( role <identifiersep> name ) && null != this . admin <identifiersep> role ) { \n \t1 current <identifiersep> roles . clear ( ) ; \n \t1 current <identifiersep> roles . add ( admin <identifiersep> role ) ; \n \t1 return ; } \n <ect>
\t3 user . set <identifiersep> is <identifiersep> customer <identifiersep> service ( i % <number_literal> != 0 ) ; \n \t3 user . set <identifiersep> is <identifiersep> engineering ( i % <number_literal> != 0 && ! user . is <identifiersep> admin ( ) ) ; } \n \t2 log . info ( <string_literal> ) ; \n \t2 ec . save <identifiersep> changes ( ) ; \n <ect>
\t2 final long limit = system . current <identifiersep> time <identifiersep> millis ( ) + <number_literal> * <number_literal> ; \n \t2 if ( dlq <identifiersep> consumer <identifiersep> last <identifiersep> received <identifiersep> time <identifiersep> stamp > 0 ) { \n \t3 while ( system . current <identifiersep> time <identifiersep> millis ( ) < dlq <identifiersep> consumer <identifiersep> last <identifiersep> received <identifiersep> time <identifiersep> stamp + <number_literal> \n \t5 && system . current <identifiersep> time <identifiersep> millis ( ) < limit ) { \n <ect>
\t2 job <identifiersep> id = rj . get <identifiersep> id ( ) . to <identifiersep> string ( ) ; } \n \t2 if ( jc != null ) { \n \t2 jc . close ( ) ; } \n \t1 } catch ( exception e ) { \n <ect>
\t2 { \n \t3 boolean jna <identifiersep> required = ! boolean . get <identifiersep> boolean ( <string_literal> ) ; \n \t3 if ( jna <identifiersep> required ) \n \t3 { \n <ect>
<number_literal> final service <identifiersep> registry service <identifiersep> registry ) { \n \t2 final collection < distributed <identifiersep> cache <identifiersep> object < registered <identifiersep> service > > cached <identifiersep> services = this . distributed <identifiersep> cache <identifiersep> manager . get <identifiersep> all ( ) ; \n \t2 for ( final distributed <identifiersep> cache <identifiersep> object < registered <identifiersep> service > entry : cached <identifiersep> services ) { \n \t3 final registered <identifiersep> service cached <identifiersep> service = entry . get <identifiersep> value ( ) ; \n <ect>
\t2 } catch ( parser <identifiersep> configuration <identifiersep> exception e ) { \n \t3 s <identifiersep> logger . error ( <string_literal> +  <identifiersep> server <identifiersep> name + <string_literal> + filename , e ) ; \n \t3 system . exit ( 1 ) ; \n \t2 } catch ( sax <identifiersep> exception e ) { \n <ect>
\t4 file <identifiersep> utils . delete <identifiersep> directory ( test <identifiersep> dir ) ; \n \t3 } else { \n \t4 test <identifiersep> dir . delete ( ) ; } \n \t2 } catch ( throwable t ) { \n <ect>
\t3 continue ; } \n \t2 updates . add ( ( partition ) res ) ; \n \t2 if ( conf . get <identifiersep> bool <identifiersep> var ( conf <identifiersep> vars . tez <identifiersep> exec <identifiersep> summary ) ) { \n \t3 console . print <identifiersep> info ( <string_literal> + basic <identifiersep> stats <identifiersep> processor . partish . get <identifiersep> partition ( ) . get <identifiersep> spec ( ) + <string_literal> + to <identifiersep> string ( basic <identifiersep> stats <identifiersep> processor . partish . get <identifiersep> part <identifiersep> parameters ( ) ) + ' ] ' ) ; } \n <ect>
\t1 if ( dir != null && ! dir . exists ( ) ) { \n \t2 create <identifiersep> parent <identifiersep> directory ( dir ) \n \t2 if ( ! dir . exists ( ) ) { \n \t3 if ( ! dir . mkdirs ( ) ) { \n <ect>
\t1 args . add ( <string_literal> ) ; \n \t1 args . add ( get <identifiersep> connect <identifiersep> string ( ) ) ; \n \t1 args . add ( <string_literal> ) ; \n \t1 args . add ( <string_literal> ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 try { \n \t3 message <identifiersep> consumer consumer = session . create <identifiersep> consumer ( book <identifiersep> queue ) ; \n <ect>
<comment> \n \t1 public state <identifiersep> vertex crawl <identifiersep> index ( ) { \n <ect>
\t1 public void delete <identifiersep> route <identifiersep> job ( action action , scheduled <identifiersep> route <identifiersep> details scheduled <identifiersep> route <identifiersep> details ) throws scheduler <identifiersep> exception { \n \t2 job <identifiersep> key job <identifiersep> key = retrieve <identifiersep> job <identifiersep> key ( action , scheduled <identifiersep> route <identifiersep> details ) ; \n \t2 if ( ! get <identifiersep> scheduler ( ) . is <identifiersep> shutdown ( ) ) { \n \t3 get <identifiersep> scheduler ( ) . delete <identifiersep> job ( job <identifiersep> key ) ; } \n <ect>
\t3 <comment> \n \t3 <comment> \n \t3 <comment> \n \t3 if (  <identifiersep> log . should <identifiersep> log ( log . info ) ) \n <ect>
\t2 assert <identifiersep> true ( bmfr . has <identifiersep> top ( ) ) ; } } \n \t1 t2 = system . current <identifiersep> time <identifiersep> millis ( ) ; \n \t1 double rate1 = <number_literal> / ( ( t2 - t1 ) / <number_literal> . 0 ) ; \n \t1 log . debug ( string . format ( <string_literal> , rate1 ) ) ; \n <ect>
\t3 string target = key <identifiersep> path + target <identifiersep> blob <identifiersep> name ; \n \t3 logger . debug ( <string_literal> , source , target , blob <identifiersep> store ) ; \n \t3 blob <identifiersep> store . move <identifiersep> blob ( source , target ) ; \n \t2 } catch ( uri <identifiersep> syntax <identifiersep> exception | storage <identifiersep> exception e ) { \n <ect>
\t2 array <identifiersep> list < string > os <identifiersep> jar <identifiersep> path = new array <identifiersep> list < > ( ) ; \n \t2 string [ ] os <identifiersep> dest <identifiersep> jar = { null } ; \n \t2 if ( ! process <identifiersep> args ( log , args , os <identifiersep> jar <identifiersep> path , os <identifiersep> dest <identifiersep> jar ) ) { \n \t3 log . error ( <string_literal> ) ; \n <ect>
\t1 protected void execute <identifiersep> benchmark ( final scalability <identifiersep> benchmark benchmark , \n \t3 final execution <identifiersep> context context ) throws exception { \n \t2 log . info ( <string_literal> , benchmark ) ; \n \t2 benchmark . before <identifiersep> execute ( get <identifiersep> repository ( ) , credentials , context ) ; \n <ect>
\t6 database <identifiersep> utils . get <identifiersep> db <identifiersep> column <identifiersep> type ( metadata . get <identifiersep> column <identifiersep> type ( i ) ) , metadata . get <identifiersep> column <identifiersep> display <identifiersep> size ( i ) ) ; \n \t4 columns . add ( dc ) ; } \n \t3 return columns ; \n \t2 } catch ( sql <identifiersep> exception e ) { \n <ect>
\t1 log . error ( <string_literal> ) ; \n \t1 log . error ( <string_literal> ) ; \n \t1 log . error ( is ) ; \n \t1 log . error ( <string_literal> ) ; \n <ect>
\t1 { \n \t2 synchronized (  <identifiersep> mutex ) \n \t2 { \n \t2  <identifiersep> state = state . shutdown ; } \n <ect>
\t2 <comment> \n \t2 try { \n \t3 queued <identifiersep> packets . put ( proposal <identifiersep> of <identifiersep> death ) ; \n \t2 } catch ( interrupted <identifiersep> exception e ) { \n <ect>
\t2 set < string > jobs <identifiersep> needing <identifiersep> update = new hash <identifiersep> set < > ( ) ; \n \t2 set < string > hosts <identifiersep> already <identifiersep> moving <identifiersep> tasks = new hash <identifiersep> set < > ( ) ; \n \t2 for ( job <identifiersep> task <identifiersep> move <identifiersep> assignment assignment : assignments ) { \n \t3 if ( assignment . delete ( ) ) { \n <ect>
\t2 if ( vms . size ( ) == 0 ) { \n \t3 throw new cloud <identifiersep> runtime <identifiersep> exception ( <string_literal> + vm <identifiersep> name + <string_literal> ) ; } \n \t2 <comment> \n \t2 if ( vms . size ( ) > 1 ) { \n <ect>
\t1 public static map < string , object > to <identifiersep> map ( string s , es <identifiersep> logger logger ) throws io <identifiersep> exception { \n \t2 map < string , object > map = s == null ? new hash <identifiersep> map < string , object > ( ) \n \t4 : x <identifiersep> content <identifiersep> factory . x <identifiersep> content ( x <identifiersep> content <identifiersep> type . json ) . create <identifiersep> parser ( s ) . map ( ) ; \n \t2 if ( map . is <identifiersep> empty ( ) && s != null && s . length ( ) > 0 ) { \n <ect>
\t3 } catch ( file <identifiersep> not <identifiersep> found <identifiersep> exception e ) { \n \t4 log . warn ( <string_literal> , e ) ; \n \t4 error ( ret , <string_literal> + log <identifiersep> file ) ; \n \t3 } catch ( io <identifiersep> exception e ) { \n <ect>
def install ( self , env ) : \n \t1 self . install <identifiersep> packages ( env ) \n \t1 self . configure ( env ) \n def pre <identifiersep> upgrade <identifiersep> restart ( self , env , upgrade <identifiersep> type = none ) : \n <ect>
\t1 if ( ! reachable ) { \n \t1 throw new illegal <identifiersep> state <identifiersep> exception ( string . format ( <string_literal> , service <identifiersep> name , max <identifiersep> tries ) ) ; } } \n protected string run <identifiersep> command ( string [ ] command ) { \n \t1 try { \n <ect>
\t4 metric <identifiersep> registry ) ; \n \t3 dispatcher . get <identifiersep> termination <identifiersep> future ( ) . when <identifiersep> complete ( \n \t4 ( void value , throwable throwable ) - > { \n \t5 if ( throwable != null ) { \n <ect>
<number_literal> @ context servlet <identifiersep> context servlet <identifiersep> context , \n <number_literal> @ context http <identifiersep> headers headers , \n <number_literal> @ context http <identifiersep> servlet <identifiersep> request request ) \n \t2 throws web <identifiersep> application <identifiersep> exception { \n <ect>
\t4 visit ( dso ) ; \n \t4 return ! suspend ( status <identifiersep> code ) ; \n \t3 } catch ( io <identifiersep> exception ioe ) { \n \t4 <comment> \n <ect>
\t1 if ( old <identifiersep> capacity == capacity ) { \n \t1 return ; \n \t1 } else if ( old <identifiersep> capacity > capacity ) { \n \t1 if ( ! queue <identifiersep> remaining . try <identifiersep> acquire ( old <identifiersep> capacity - capacity , keep <identifiersep> alive , time <identifiersep> unit . seconds ) ) { \n <ect>
\t4 communities <identifiersep> count . put ( c . get <identifiersep> as <identifiersep> filter <identifiersep> query ( ) , ( int ) c . get <identifiersep> count ( ) ) ; } \n \t3 for ( facet <identifiersep> result c : coll <identifiersep> count ) { \n \t4 collections <identifiersep> count . put ( c . get <identifiersep> as <identifiersep> filter <identifiersep> query ( ) , ( int ) c . get <identifiersep> count ( ) ) ; } \n \t2 } catch ( search <identifiersep> service <identifiersep> exception e ) { \n <ect>
\t1 if ( old <identifiersep> commands == new <identifiersep> commands ) { \n \t2 old <identifiersep> commands = null } \n \t1 log . debug ( <string_literal> + home + <string_literal> + new <identifiersep> commands . ctl + <string_literal> + new <identifiersep> commands . initdb ) \n \t1 } catch ( exception ex ) { \n <ect>
\t3 } catch ( throwable t ) { \n \t4 <comment> \n \t4 <comment> \n \t4 <comment> \n <ect>
\t1 } catch ( exception ex ) { \n \t1 logger . error ( <string_literal> ) ; } \n \t1 sink <identifiersep> counter . stop ( ) ; \n \t1 super . stop ( ) ; \n <ect>
\t2 super ( <string_literal> , <string_literal> , 0 , x <identifiersep> log . ops ) ; \n \t2 this . older <identifiersep> than = older <identifiersep> than ; \n \t2 this . limit = limit ; } \n \t1 protected void call ( coordinator <identifiersep> store store ) throws store <identifiersep> exception , command <identifiersep> exception { \n <ect>
\t3 return true ; \n \t2 string fn = filename ( ext ) ; \n \t2 file f = new file ( fn ) ; \n \t2 if ( f . is <identifiersep> directory ( ) ) \n <ect>
\t5 log . error ( <string_literal> , e ) ; \n \t4 } catch ( io <identifiersep> exception e ) { \n \t5 log . error ( <string_literal> , e ) ; \n \t4 } catch ( general <identifiersep> security <identifiersep> exception e ) { \n <ect>
\t8 if ( client <identifiersep> put != null ) \n \t9 try { \n \t10 fcp . start <identifiersep> blocking ( client <identifiersep> put , context ) ; \n \t9 } catch ( identifier <identifiersep> collision <identifiersep> exception e ) { \n <ect>
\t3  <identifiersep> logger . error ( <string_literal> , e ) ; \n \t3 fb . close ( ) ; \n \t3 return ; \n \t3 } else if ( e instanceof org . apache . thrift . t <identifiersep> application <identifiersep> exception ) { \n <ect>
\t5 if ( result ) { \n \t6 number <identifiersep> of <identifiersep> matches ++ ; \n \t6 nodes . add ( j <identifiersep> meter <identifiersep> tree <identifiersep> node ) ; } \n \t4 } catch ( exception ex ) { \n <ect>
\t2 } finally { \n \t3 spatial <identifiersep> dataset . end ( ) ; } \n \t2 long finish <identifiersep> time = system . nano <identifiersep> time ( ) ; \n \t2 double time = ( finish <identifiersep> time - start <identifiersep> time ) / 1 . 0e6 ; \n <ect>
\t5 logger . debug ( <string_literal> , get <identifiersep> name ( ) , get <identifiersep> uuid ( ) ) ; } \n \t4 original <identifiersep> image . unlock <identifiersep> system <identifiersep> properties <identifiersep> once ( ) ; \n \t4 original <identifiersep> image . set <identifiersep> is <identifiersep> creating <identifiersep> thumb ( false ) ; \n \t3 } catch ( framework <identifiersep> exception fex ) { \n <ect>
\t4 || existing <identifiersep> bucket <identifiersep> name == null || <string_literal> . equals ( existing <identifiersep> bucket <identifiersep> name ) ) { \n \t3 logger . info ( <string_literal> ) ; \n \t3 return false ; } \n \t2 string path = new file ( <string_literal> + file <identifiersep> path ) . get <identifiersep> canonical <identifiersep> path ( ) ; \n <ect>
\t2 mock <identifiersep> sink mock = new mock <identifiersep> sink ( ) { \n \t3 @ override \n \t3 public void index ( indexable <identifiersep> object object , boolean create ) throws io <identifiersep> exception { \n \t4 super . index ( object , create ) ; \n <ect>
\t2 rollback <identifiersep> transaction ( t1 , transaction <identifiersep> owner , true ) ; } \n \t1 private void rollback <identifiersep> transaction ( exception cause , boolean transaction <identifiersep> owner , boolean logstack ) { \n \t2 try { \n \t3 if ( logstack ) { \n <ect>
\t1 try { \n \t2 work <identifiersep> queue . add <identifiersep> work ( queue <identifiersep> key , path . to <identifiersep> string ( ) ) ; \n \t2 work <identifiersep> for <identifiersep> peer . put ( target . get <identifiersep> source <identifiersep> table <identifiersep> id ( ) , queue <identifiersep> key ) ; \n \t1 } catch ( keeper <identifiersep> exception | interrupted <identifiersep> exception e ) { \n <ect>
\t1 if ( null != entry . get <identifiersep> key ( ) ) { \n \t2 null <identifiersep> byte | = 1 < < ( b % <number_literal> ) ; \n \t1 } else if ( warned <identifiersep> once <identifiersep> null <identifiersep> map <identifiersep> key != null ) { \n \t2 if ( ! warned <identifiersep> once <identifiersep> null <identifiersep> map <identifiersep> key . value ) { \n <ect>
\t2 if ( acct . get <identifiersep> status ( ) == duo <identifiersep> user <identifiersep> account <identifiersep> auth <identifiersep> status . allow ) { \n \t3 logger . debug ( <string_literal> , principal ) ; \n \t3 return false ; } \n \t2 if ( acct . get <identifiersep> status ( ) == duo <identifiersep> user <identifiersep> account <identifiersep> auth <identifiersep> status . deny ) { \n <ect>
\t2 } finally { \n \t3 if ( ! success ) { \n \t4 s <identifiersep> logger . warn ( <string_literal> + id ) ; \n \t4 return null ; } \n <ect>
\t1 serializer = clazz . new <identifiersep> instance ( ) ; \n \t1 serializer . configure ( serializer <identifiersep> context ) ; \n \t1 serializer . initialize ( table <identifiersep> name . get <identifiersep> bytes ( charsets . utf <identifiersep> <number_literal> ) , column <identifiersep> family ) ; \n \t1 } catch ( exception e ) { \n <ect>
* log . info ( <string_literal> + eo <identifiersep> qualifier . filtered <identifiersep> array <identifiersep> with <identifiersep> qualifier ( all , q ) ) ; \n * \n * <comment> \n * objects = eo <identifiersep> utilities . objects <identifiersep> matching <identifiersep> key <identifiersep> and <identifiersep> value ( ec , <string_literal> , <string_literal> , erx <identifiersep> constant . one <identifiersep> integer ) ; \n <ect>
\t2 log . info ( <string_literal> ) ; \n \t2 q1 . shutdown ( ) ; \n \t2 q2 . shutdown ( ) ; \n \t2 q3 . shutdown ( ) ; \n <ect>
\t1 logger . fatal ( this . get <identifiersep> class ( ) , <string_literal> + i <identifiersep> logger . fatal ) ; <comment> \n \t1 logger . fatal ( <string_literal> , <string_literal> + i <identifiersep> logger . fatal ) ; <comment> \n \t1 logger . fatal ( this . get <identifiersep> class ( ) , <string_literal> + i <identifiersep> logger . fatal , new throwable ( ) ) ; <comment> \n \t1 logger . fatal ( <string_literal> , <string_literal> + i <identifiersep> logger . fatal , new throwable ( ) ) ; <comment> \n <ect>
\t2 try { \n \t3 dos = new data <identifiersep> output <identifiersep> stream ( parent . write <identifiersep> checksummed <identifiersep> to ( parent . cross <identifiersep> segment <identifiersep> status <identifiersep> offset ( seg <identifiersep> no ) , status <identifiersep> length ) ) ; \n \t3 inner <identifiersep> store <identifiersep> status ( dos ) ; \n \t2 } catch ( io <identifiersep> exception e ) { \n <ect>
\t3 cfg . set <identifiersep> key <identifiersep> store <identifiersep> password ( l . get <identifiersep> keystore <identifiersep> password ( ) ) ; \n \t3 cfg . set <identifiersep> key <identifiersep> store <identifiersep> type ( l . get <identifiersep> keystore <identifiersep> type ( ) ) ; \n \t3 cc . set <identifiersep> ssl <identifiersep> config ( new ssl <identifiersep> config ( cfg ) ) ; \n \t2 } else { \n <ect>
\t2 <comment> \n \t2 <comment> \n \t2 while ( active <identifiersep> count > 0 ) { \n <ect>
\t3 for ( dependency <identifiersep> node child : node . get <identifiersep> children ( ) ) \n \t3 { \n \t4 if ( ! child . get <identifiersep> relocations ( ) . is <identifiersep> empty ( ) ) \n \t4 { \n <ect>
\t3 log . debug ( <string_literal> + parent ( ) ) ; \n \t3 log . debug ( <string_literal> + ( parent ( ) instanceof erd <identifiersep> custom <identifiersep> component ) ) ; \n \t3 log . debug ( <string_literal> + ( parent ( ) instanceof erd2w <identifiersep> custom <identifiersep> component <identifiersep> with <identifiersep> args ) ) ; \n \t3 log . debug ( <string_literal> + ( parent ( ) instanceof erd2w <identifiersep> stateless <identifiersep> custom <identifiersep> component <identifiersep> with <identifiersep> args ) ) ; \n <ect>
\t5 case status <identifiersep> busy <identifiersep> queued : \n \t6 logger . warn ( <string_literal> , get <identifiersep> node ( ) ) ; \n \t6 break ; \n \t5 default : \n <ect>
\t2 if ( ! file . can <identifiersep> read ( ) ) { \n \t3 logger . warn ( <string_literal> , file . get <identifiersep> name ( ) ) ; \n \t3 return new array <identifiersep> list < > ( 0 ) ; } \n \t2 if ( ! file . exists ( ) ) { \n <ect>
\t3 } else { \n \t4 logger . debug ( <string_literal> , ex . get <identifiersep> scope <identifiersep> name ( ) ) ; } \n \t2 } ) ) ; \n \t2 if ( ! user <identifiersep> scopes . is <identifiersep> empty ( ) ) { \n <ect>
\t8 <string_literal> ) ; } } \n \t3 } else { \n \t4 logger . warn ( <string_literal> + item + <string_literal> ) ; } \n \t2 } catch ( array <identifiersep> index <identifiersep> out <identifiersep> of <identifiersep> bounds <identifiersep> exception e ) { \n <ect>
\t1 state <identifiersep> entity . set <identifiersep> service <identifiersep> name ( missed <identifiersep> host <identifiersep> component <identifiersep> state . get <identifiersep> service <identifiersep> name ( ) ) ; \n \t1 state <identifiersep> entity . set <identifiersep> host <identifiersep> entity ( missed <identifiersep> host <identifiersep> component <identifiersep> state . get <identifiersep> host <identifiersep> entity ( ) ) ; \n \t1 state <identifiersep> entity . set <identifiersep> desired <identifiersep> state ( state . unknown ) ; \n \t1 state <identifiersep> entity . set <identifiersep> service <identifiersep> component <identifiersep> desired <identifiersep> state <identifiersep> entity ( missed <identifiersep> host <identifiersep> component <identifiersep> state . get <identifiersep> service <identifiersep> component <identifiersep> desired <identifiersep> state <identifiersep> entity ( ) ) ; \n <ect>
\t5 continue ; } \n \t4 try { \n \t5 component . configure ( component . get <identifiersep> name ( ) , component . get <identifiersep> config <identifiersep> params ( ) ) ; \n \t4 } catch ( configuration <identifiersep> exception e ) { \n <ect>
\t3 <comment> \n \t3 api . send <identifiersep> command ( this . get <identifiersep> client ( ) , this . get <identifiersep> conn ( ) ) ; \n \t3 <comment> \n \t3 if ( ( api . get <identifiersep> response <identifiersep> type ( ) == response <identifiersep> type . error ) && ( api . get <identifiersep> response <identifiersep> code ( ) == <number_literal> ) ) { \n <ect>
\t5 + network . get <identifiersep> display <identifiersep> text ( ) ) ; \n \t3 return false ; } \n \t2 if ( !  <identifiersep> ntwk <identifiersep> srvc <identifiersep> dao . can <identifiersep> provider <identifiersep> support <identifiersep> service <identifiersep> in <identifiersep> network ( network . get <identifiersep> id ( ) , \n \t4 service , network . provider . ovs ) ) { \n <ect>
\t2 assert <identifiersep> equals ( 0 , cache . get <identifiersep> staging <identifiersep> cache <identifiersep> stats ( ) . get <identifiersep> load <identifiersep> success <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> cache <identifiersep> stats ( cache . get <identifiersep> cache <identifiersep> stats ( ) , <number_literal> , <number_literal> * <number_literal> , 0 , <number_literal> ) ; \n \t2 assert <identifiersep> equals ( <number_literal> , cache . get <identifiersep> cache <identifiersep> stats ( ) . get <identifiersep> load <identifiersep> count ( ) ) ; \n \t2 assert <identifiersep> equals ( <number_literal> , cache . get <identifiersep> cache <identifiersep> stats ( ) . get <identifiersep> load <identifiersep> success <identifiersep> count ( ) ) ; \n <ect>
\t2 final queue <identifiersep> view <identifiersep> m <identifiersep> bean shared <identifiersep> dlq <identifiersep> view <identifiersep> m <identifiersep> bean = get <identifiersep> proxy <identifiersep> to <identifiersep> queue ( shared <identifiersep> dead <identifiersep> letter <identifiersep> strategy . default <identifiersep> dead <identifiersep> letter <identifiersep> queue <identifiersep> name ) ; \n \t2 assert <identifiersep> true ( <string_literal> , wait . wait <identifiersep> for ( new wait . condition ( ) { \n \t3 @ override \n \t3 public boolean is <identifiersep> satisified ( ) throws exception { \n <ect>
\t4  <identifiersep> ip <identifiersep> address <identifiersep> dao . update ( ip <identifiersep> id , ip ) ; \n \t4 <comment> \n \t4  <identifiersep> ip <identifiersep> addr <identifiersep> mgr . mark <identifiersep> public <identifiersep> ip <identifiersep> as <identifiersep> allocated ( ip ) ; } \n \t2 } ) ; \n <ect>
\t2 template . send <identifiersep> body <identifiersep> and <identifiersep> header ( <string_literal> , <string_literal> , exchange . file <identifiersep> name , <string_literal> ) ; \n \t2 log . info ( <string_literal> ) ; \n \t2 thread . sleep ( <number_literal> ) ; \n \t2 template . send <identifiersep> body <identifiersep> and <identifiersep> header ( <string_literal> , <string_literal> , exchange . file <identifiersep> name , <string_literal> ) ; \n <ect>
\t2 } catch ( io <identifiersep> exception e ) { \n \t3 throw new runtime <identifiersep> exception ( <string_literal> , e ) ; } \n \t2 properties <identifiersep> file . set <identifiersep> readable ( true , false ) ; <comment> \n \t1 private static int handle <identifiersep> cli <identifiersep> args <identifiersep> exception ( cli <identifiersep> args <identifiersep> exception e ) { \n <ect>
\t4 log . error ( <string_literal> , local <identifiersep> addr ) ; \n \t3 else { \n \t4 long time = system . nano <identifiersep> time ( ) - hdr . start <identifiersep> time ; \n \t4 if ( time < = 0 ) \n <ect>
